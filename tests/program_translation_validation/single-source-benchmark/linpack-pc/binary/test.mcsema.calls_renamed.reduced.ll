; ModuleID = '/tmp/tmpo8pvnv_6-target.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402e40__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_603de0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_402e40__rodata = internal constant %seg_402e40__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_603de0__init_array = internal global %seg_603de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4005b0___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e30___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402dc0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4004a8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4027c0_epslon_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400540_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402b50_idamax_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402cf0_dscal_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401fc0_dmxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
define %struct.Memory* @sub_401930_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401930:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -72
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 64
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #10
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 %12, %15
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !2447
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %15, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !2449
  %37 = lshr i64 %12, 63
  %38 = xor i64 %34, %37
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !2450
  %43 = add i64 %11, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = add i64 %14, 11
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -12
  %49 = load i32, i32* %ESI, align 4
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %52, align 4
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -16
  %55 = load i32, i32* %EDX, align 4
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %58, align 4
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -24
  %61 = load i64, i64* %RCX, align 8
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %64, align 8
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -32
  %67 = load i64, i64* %R8, align 8
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -32
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = add i64 %73, 10
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i32*
  store i32 0, i32* %78, align 4
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, -1
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp eq i32 %84, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %18, align 1, !tbaa !2432
  %89 = and i32 %85, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #10
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %25, align 1, !tbaa !2446
  %94 = xor i32 %85, %84
  %95 = lshr i32 %94, 4
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %30, align 1, !tbaa !2447
  %98 = icmp eq i32 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %33, align 1, !tbaa !2448
  %100 = lshr i32 %85, 31
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %36, align 1, !tbaa !2449
  %102 = lshr i32 %84, 31
  %103 = xor i32 %100, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %42, align 1, !tbaa !2450
  %107 = add i64 %79, -56
  %108 = add i64 %81, 9
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  store i32 %85, i32* %109, align 4
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -56
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i32*
  %115 = load i32, i32* %114, align 4
  store i8 0, i8* %18, align 1, !tbaa !2432
  %116 = and i32 %115, 255
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #10
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  store i8 %120, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  %121 = icmp eq i32 %115, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %33, align 1, !tbaa !2448
  %123 = lshr i32 %115, 31
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %36, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  %125 = icmp ne i8 %124, 0
  %.v = select i1 %125, i64 631, i64 6
  %126 = add i64 %.v, %113
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br i1 %125, label %block_401930.block_401bd8_crit_edge, label %block_401967

block_401930.block_401bd8_crit_edge:              ; preds = %block_401930
  %.pre25 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %.pre26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre28 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %.pre30 = getelementptr inbounds i8, i8* %.pre25, i64 4
  %.pre32 = bitcast i8* %.pre30 to i32*
  %.pre34 = bitcast i64* %.pre26 to i32*
  %.pre36 = getelementptr inbounds i8, i8* %.pre25, i64 12
  %.pre38 = bitcast i8* %.pre36 to i32*
  %.pre40 = bitcast %union.VectorReg* %8 to double*
  %.pre42 = bitcast [32 x %union.VectorReg]* %7 to double*
  br label %block_401bd8

block_401afe:                                     ; preds = %block_401ad7
  %127 = add i64 %1409, -8
  %128 = add i64 %1444, 4
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = add i64 %1409, -12
  %132 = add i64 %1444, 7
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i64
  store i64 %135, i64* %RCX, align 8, !tbaa !2428
  %136 = add i64 %1409, -40
  %137 = add i64 %1444, 11
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = sext i32 %134 to i64
  %141 = sext i32 %139 to i64
  %142 = mul nsw i64 %141, %140
  %143 = trunc i64 %142 to i32
  %144 = and i64 %142, 4294967295
  store i64 %144, i64* %RCX, align 8, !tbaa !2428
  %145 = shl i64 %142, 32
  %146 = ashr exact i64 %145, 32
  %147 = icmp ne i64 %146, %142
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %18, align 1, !tbaa !2432
  %149 = and i32 %143, 255
  %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #10
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  store i8 %153, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %154 = lshr i32 %143, 31
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* %36, align 1, !tbaa !2449
  store i8 %148, i8* %42, align 1, !tbaa !2450
  %156 = add i64 %1444, 14
  store i64 %156, i64* %PC, align 8
  %157 = load i32, i32* %1418, align 4
  %158 = add i32 %157, %143
  %159 = zext i32 %158 to i64
  store i64 %159, i64* %RCX, align 8, !tbaa !2428
  %160 = icmp ult i32 %158, %143
  %161 = icmp ult i32 %158, %157
  %162 = or i1 %160, %161
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %18, align 1, !tbaa !2432
  %164 = and i32 %158, 255
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #10
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %25, align 1, !tbaa !2446
  %169 = xor i32 %157, %143
  %170 = xor i32 %169, %158
  %171 = lshr i32 %170, 4
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  store i8 %173, i8* %30, align 1, !tbaa !2447
  %174 = icmp eq i32 %158, 0
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %33, align 1, !tbaa !2448
  %176 = lshr i32 %158, 31
  %177 = trunc i32 %176 to i8
  store i8 %177, i8* %36, align 1, !tbaa !2449
  %178 = lshr i32 %157, 31
  %179 = xor i32 %176, %154
  %180 = xor i32 %176, %178
  %181 = add nuw nsw i32 %179, %180
  %182 = icmp eq i32 %181, 2
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %42, align 1, !tbaa !2450
  %184 = sext i32 %158 to i64
  store i64 %184, i64* %RDX, align 8, !tbaa !2428
  %185 = shl nsw i64 %184, 2
  %186 = add i64 %185, %130
  %187 = add i64 %1444, 22
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i32*
  %189 = load i32, i32* %188, align 4
  store i32 %189, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %190 = add i64 %1444, 26
  store i64 %190, i64* %PC, align 8
  %191 = load i64, i64* %129, align 8
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = add i64 %1444, 29
  store i64 %192, i64* %PC, align 8
  %193 = load i32, i32* %133, align 4
  %194 = zext i32 %193 to i64
  store i64 %194, i64* %RCX, align 8, !tbaa !2428
  %195 = add i64 %1444, 33
  store i64 %195, i64* %PC, align 8
  %196 = load i32, i32* %138, align 4
  %197 = sext i32 %193 to i64
  %198 = sext i32 %196 to i64
  %199 = mul nsw i64 %198, %197
  %200 = trunc i64 %199 to i32
  %201 = and i64 %199, 4294967295
  store i64 %201, i64* %RCX, align 8, !tbaa !2428
  %202 = shl i64 %199, 32
  %203 = ashr exact i64 %202, 32
  %204 = icmp ne i64 %203, %199
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %18, align 1, !tbaa !2432
  %206 = and i32 %200, 255
  %207 = tail call i32 @llvm.ctpop.i32(i32 %206) #10
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %211 = lshr i32 %200, 31
  %212 = trunc i32 %211 to i8
  store i8 %212, i8* %36, align 1, !tbaa !2449
  store i8 %205, i8* %42, align 1, !tbaa !2450
  %213 = add i64 %1444, 36
  store i64 %213, i64* %PC, align 8
  %214 = load i32, i32* %1413, align 4
  %215 = add i32 %214, %200
  %216 = zext i32 %215 to i64
  store i64 %216, i64* %RCX, align 8, !tbaa !2428
  %217 = icmp ult i32 %215, %200
  %218 = icmp ult i32 %215, %214
  %219 = or i1 %217, %218
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %18, align 1, !tbaa !2432
  %221 = and i32 %215, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #10
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %25, align 1, !tbaa !2446
  %226 = xor i32 %214, %200
  %227 = xor i32 %226, %215
  %228 = lshr i32 %227, 4
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  store i8 %230, i8* %30, align 1, !tbaa !2447
  %231 = icmp eq i32 %215, 0
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %33, align 1, !tbaa !2448
  %233 = lshr i32 %215, 31
  %234 = trunc i32 %233 to i8
  store i8 %234, i8* %36, align 1, !tbaa !2449
  %235 = lshr i32 %214, 31
  %236 = xor i32 %233, %211
  %237 = xor i32 %233, %235
  %238 = add nuw nsw i32 %236, %237
  %239 = icmp eq i32 %238, 2
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %42, align 1, !tbaa !2450
  %241 = sext i32 %215 to i64
  store i64 %241, i64* %RDX, align 8, !tbaa !2428
  %242 = shl nsw i64 %241, 2
  %243 = add i64 %242, %191
  %244 = add i64 %1444, 44
  store i64 %244, i64* %PC, align 8
  %245 = load <2 x float>, <2 x float>* %1336, align 1
  %246 = extractelement <2 x float> %245, i32 0
  %247 = inttoptr i64 %243 to float*
  store float %246, float* %247, align 4
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -36
  %250 = load i64, i64* %PC, align 8
  %251 = add i64 %250, 5
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %249 to i32*
  %253 = load i32, i32* %252, align 4
  store i32 %253, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %254 = add i64 %248, -8
  %255 = add i64 %250, 9
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = add i64 %248, -12
  %259 = add i64 %250, 12
  store i64 %259, i64* %PC, align 8
  %260 = inttoptr i64 %258 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = zext i32 %261 to i64
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = add i64 %248, -40
  %264 = add i64 %250, 16
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %263 to i32*
  %266 = load i32, i32* %265, align 4
  %267 = sext i32 %261 to i64
  %268 = sext i32 %266 to i64
  %269 = mul nsw i64 %268, %267
  %270 = trunc i64 %269 to i32
  %271 = and i64 %269, 4294967295
  store i64 %271, i64* %RCX, align 8, !tbaa !2428
  %272 = shl i64 %269, 32
  %273 = ashr exact i64 %272, 32
  %274 = icmp ne i64 %273, %269
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %18, align 1, !tbaa !2432
  %276 = and i32 %270, 255
  %277 = tail call i32 @llvm.ctpop.i32(i32 %276) #10
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  store i8 %280, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %281 = lshr i32 %270, 31
  %282 = trunc i32 %281 to i8
  store i8 %282, i8* %36, align 1, !tbaa !2449
  store i8 %275, i8* %42, align 1, !tbaa !2450
  %283 = add i64 %248, -44
  %284 = add i64 %250, 19
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = add i32 %286, %270
  %288 = zext i32 %287 to i64
  store i64 %288, i64* %RCX, align 8, !tbaa !2428
  %289 = icmp ult i32 %287, %270
  %290 = icmp ult i32 %287, %286
  %291 = or i1 %289, %290
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %18, align 1, !tbaa !2432
  %293 = and i32 %287, 255
  %294 = tail call i32 @llvm.ctpop.i32(i32 %293) #10
  %295 = trunc i32 %294 to i8
  %296 = and i8 %295, 1
  %297 = xor i8 %296, 1
  store i8 %297, i8* %25, align 1, !tbaa !2446
  %298 = xor i32 %286, %270
  %299 = xor i32 %298, %287
  %300 = lshr i32 %299, 4
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  store i8 %302, i8* %30, align 1, !tbaa !2447
  %303 = icmp eq i32 %287, 0
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %33, align 1, !tbaa !2448
  %305 = lshr i32 %287, 31
  %306 = trunc i32 %305 to i8
  store i8 %306, i8* %36, align 1, !tbaa !2449
  %307 = lshr i32 %286, 31
  %308 = xor i32 %305, %281
  %309 = xor i32 %305, %307
  %310 = add nuw nsw i32 %308, %309
  %311 = icmp eq i32 %310, 2
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %42, align 1, !tbaa !2450
  %313 = sext i32 %287 to i64
  store i64 %313, i64* %RDX, align 8, !tbaa !2428
  %314 = shl nsw i64 %313, 2
  %315 = add i64 %314, %257
  %316 = add i64 %250, 27
  store i64 %316, i64* %PC, align 8
  %317 = load <2 x float>, <2 x float>* %1336, align 1
  %318 = extractelement <2 x float> %317, i32 0
  %319 = inttoptr i64 %315 to float*
  store float %318, float* %319, align 4
  %.pre20 = load i64, i64* %PC, align 8
  %.pre21 = load i64, i64* %RBP, align 8
  br label %block_401b45

block_4019f2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1, %block_4019e7
  %320 = phi i64 [ %947, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %658, %block_4019e7 ]
  %321 = load i64, i64* %RBP, align 8
  %322 = add i64 %321, -52
  %323 = add i64 %320, 3
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i32*
  %325 = load i32, i32* %324, align 4
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = add i64 %321, -44
  %328 = add i64 %320, 6
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = sub i32 %325, %330
  %332 = icmp ult i32 %325, %330
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %18, align 1, !tbaa !2432
  %334 = and i32 %331, 255
  %335 = tail call i32 @llvm.ctpop.i32(i32 %334) #10
  %336 = trunc i32 %335 to i8
  %337 = and i8 %336, 1
  %338 = xor i8 %337, 1
  store i8 %338, i8* %25, align 1, !tbaa !2446
  %339 = xor i32 %330, %325
  %340 = xor i32 %339, %331
  %341 = lshr i32 %340, 4
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  store i8 %343, i8* %30, align 1, !tbaa !2447
  %344 = icmp eq i32 %331, 0
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %33, align 1, !tbaa !2448
  %346 = lshr i32 %331, 31
  %347 = trunc i32 %346 to i8
  store i8 %347, i8* %36, align 1, !tbaa !2449
  %348 = lshr i32 %325, 31
  %349 = lshr i32 %330, 31
  %350 = xor i32 %349, %348
  %351 = xor i32 %346, %348
  %352 = add nuw nsw i32 %351, %350
  %353 = icmp eq i32 %352, 2
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %42, align 1, !tbaa !2450
  %.v47 = select i1 %344, i64 110, i64 12
  %355 = add i64 %.v47, %320
  store i64 %355, i64* %PC, align 8, !tbaa !2428
  br i1 %344, label %block_401a60, label %block_4019fe

block_40196e:                                     ; preds = %block_401bc0, %block_401967
  %356 = phi i64 [ %.pre, %block_401967 ], [ %1514, %block_401bc0 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401967 ], [ %MEMORY.5, %block_401bc0 ]
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -44
  %359 = add i64 %356, 3
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i32*
  %361 = load i32, i32* %360, align 4
  %362 = zext i32 %361 to i64
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = add i64 %357, -56
  %364 = add i64 %356, 6
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i32*
  %366 = load i32, i32* %365, align 4
  %367 = sub i32 %361, %366
  %368 = icmp ult i32 %361, %366
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %18, align 1, !tbaa !2432
  %370 = and i32 %367, 255
  %371 = tail call i32 @llvm.ctpop.i32(i32 %370) #10
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  store i8 %374, i8* %25, align 1, !tbaa !2446
  %375 = xor i32 %366, %361
  %376 = xor i32 %375, %367
  %377 = lshr i32 %376, 4
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %30, align 1, !tbaa !2447
  %380 = icmp eq i32 %367, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %33, align 1, !tbaa !2448
  %382 = lshr i32 %367, 31
  %383 = trunc i32 %382 to i8
  store i8 %383, i8* %36, align 1, !tbaa !2449
  %384 = lshr i32 %361, 31
  %385 = lshr i32 %366, 31
  %386 = xor i32 %385, %384
  %387 = xor i32 %382, %384
  %388 = add nuw nsw i32 %387, %386
  %389 = icmp eq i32 %388, 2
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %42, align 1, !tbaa !2450
  %391 = icmp ne i8 %383, 0
  %392 = xor i1 %391, %389
  %.v44 = select i1 %392, i64 12, i64 613
  %393 = add i64 %.v44, %356
  %394 = add i64 %393, 5
  store i64 %394, i64* %PC, align 8
  br i1 %392, label %block_40197a, label %block_401bd8.loopexit

block_4019fe:                                     ; preds = %block_4019f2
  %395 = add i64 %321, -8
  %396 = add i64 %355, 4
  store i64 %396, i64* %PC, align 8
  %397 = inttoptr i64 %395 to i64*
  %398 = load i64, i64* %397, align 8
  store i64 %398, i64* %RAX, align 8, !tbaa !2428
  %399 = add i64 %321, -12
  %400 = add i64 %355, 7
  store i64 %400, i64* %PC, align 8
  %401 = inttoptr i64 %399 to i32*
  %402 = load i32, i32* %401, align 4
  %403 = zext i32 %402 to i64
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = add i64 %355, 11
  store i64 %404, i64* %PC, align 8
  %405 = load i32, i32* %329, align 4
  %406 = sext i32 %402 to i64
  %407 = sext i32 %405 to i64
  %408 = mul nsw i64 %407, %406
  %409 = trunc i64 %408 to i32
  %410 = and i64 %408, 4294967295
  store i64 %410, i64* %RCX, align 8, !tbaa !2428
  %411 = shl i64 %408, 32
  %412 = ashr exact i64 %411, 32
  %413 = icmp ne i64 %412, %408
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %18, align 1, !tbaa !2432
  %415 = and i32 %409, 255
  %416 = tail call i32 @llvm.ctpop.i32(i32 %415) #10
  %417 = trunc i32 %416 to i8
  %418 = and i8 %417, 1
  %419 = xor i8 %418, 1
  store i8 %419, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %420 = lshr i32 %409, 31
  %421 = trunc i32 %420 to i8
  store i8 %421, i8* %36, align 1, !tbaa !2449
  store i8 %414, i8* %42, align 1, !tbaa !2450
  %422 = add i64 %355, 14
  store i64 %422, i64* %PC, align 8
  %423 = load i32, i32* %324, align 4
  %424 = add i32 %423, %409
  %425 = zext i32 %424 to i64
  store i64 %425, i64* %RCX, align 8, !tbaa !2428
  %426 = icmp ult i32 %424, %409
  %427 = icmp ult i32 %424, %423
  %428 = or i1 %426, %427
  %429 = zext i1 %428 to i8
  store i8 %429, i8* %18, align 1, !tbaa !2432
  %430 = and i32 %424, 255
  %431 = tail call i32 @llvm.ctpop.i32(i32 %430) #10
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  %434 = xor i8 %433, 1
  store i8 %434, i8* %25, align 1, !tbaa !2446
  %435 = xor i32 %423, %409
  %436 = xor i32 %435, %424
  %437 = lshr i32 %436, 4
  %438 = trunc i32 %437 to i8
  %439 = and i8 %438, 1
  store i8 %439, i8* %30, align 1, !tbaa !2447
  %440 = icmp eq i32 %424, 0
  %441 = zext i1 %440 to i8
  store i8 %441, i8* %33, align 1, !tbaa !2448
  %442 = lshr i32 %424, 31
  %443 = trunc i32 %442 to i8
  store i8 %443, i8* %36, align 1, !tbaa !2449
  %444 = lshr i32 %423, 31
  %445 = xor i32 %442, %420
  %446 = xor i32 %442, %444
  %447 = add nuw nsw i32 %445, %446
  %448 = icmp eq i32 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %42, align 1, !tbaa !2450
  %450 = sext i32 %424 to i64
  store i64 %450, i64* %RDX, align 8, !tbaa !2428
  %451 = shl nsw i64 %450, 2
  %452 = add i64 %451, %398
  %453 = add i64 %355, 22
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %452 to i32*
  %455 = load i32, i32* %454, align 4
  store i32 %455, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %456 = add i64 %321, -36
  %457 = add i64 %355, 27
  store i64 %457, i64* %PC, align 8
  %458 = load <2 x float>, <2 x float>* %1336, align 1
  %459 = extractelement <2 x float> %458, i32 0
  %460 = inttoptr i64 %456 to float*
  store float %459, float* %460, align 4
  %461 = load i64, i64* %RBP, align 8
  %462 = add i64 %461, -8
  %463 = load i64, i64* %PC, align 8
  %464 = add i64 %463, 4
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %462 to i64*
  %466 = load i64, i64* %465, align 8
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = add i64 %461, -12
  %468 = add i64 %463, 7
  store i64 %468, i64* %PC, align 8
  %469 = inttoptr i64 %467 to i32*
  %470 = load i32, i32* %469, align 4
  %471 = zext i32 %470 to i64
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = add i64 %461, -44
  %473 = add i64 %463, 11
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %472 to i32*
  %475 = load i32, i32* %474, align 4
  %476 = sext i32 %470 to i64
  %477 = sext i32 %475 to i64
  %478 = mul nsw i64 %477, %476
  %479 = trunc i64 %478 to i32
  %480 = and i64 %478, 4294967295
  store i64 %480, i64* %RCX, align 8, !tbaa !2428
  %481 = shl i64 %478, 32
  %482 = ashr exact i64 %481, 32
  %483 = icmp ne i64 %482, %478
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %18, align 1, !tbaa !2432
  %485 = and i32 %479, 255
  %486 = tail call i32 @llvm.ctpop.i32(i32 %485) #10
  %487 = trunc i32 %486 to i8
  %488 = and i8 %487, 1
  %489 = xor i8 %488, 1
  store i8 %489, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %490 = lshr i32 %479, 31
  %491 = trunc i32 %490 to i8
  store i8 %491, i8* %36, align 1, !tbaa !2449
  store i8 %484, i8* %42, align 1, !tbaa !2450
  %492 = add i64 %463, 14
  store i64 %492, i64* %PC, align 8
  %493 = load i32, i32* %474, align 4
  %494 = add i32 %493, %479
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RCX, align 8, !tbaa !2428
  %496 = icmp ult i32 %494, %479
  %497 = icmp ult i32 %494, %493
  %498 = or i1 %496, %497
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %18, align 1, !tbaa !2432
  %500 = and i32 %494, 255
  %501 = tail call i32 @llvm.ctpop.i32(i32 %500) #10
  %502 = trunc i32 %501 to i8
  %503 = and i8 %502, 1
  %504 = xor i8 %503, 1
  store i8 %504, i8* %25, align 1, !tbaa !2446
  %505 = xor i32 %493, %479
  %506 = xor i32 %505, %494
  %507 = lshr i32 %506, 4
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  store i8 %509, i8* %30, align 1, !tbaa !2447
  %510 = icmp eq i32 %494, 0
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %33, align 1, !tbaa !2448
  %512 = lshr i32 %494, 31
  %513 = trunc i32 %512 to i8
  store i8 %513, i8* %36, align 1, !tbaa !2449
  %514 = lshr i32 %493, 31
  %515 = xor i32 %512, %490
  %516 = xor i32 %512, %514
  %517 = add nuw nsw i32 %515, %516
  %518 = icmp eq i32 %517, 2
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %42, align 1, !tbaa !2450
  %520 = sext i32 %494 to i64
  store i64 %520, i64* %RDX, align 8, !tbaa !2428
  %521 = shl nsw i64 %520, 2
  %522 = add i64 %521, %466
  %523 = add i64 %463, 22
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %522 to i32*
  %525 = load i32, i32* %524, align 4
  store i32 %525, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %526 = add i64 %463, 26
  store i64 %526, i64* %PC, align 8
  %527 = load i64, i64* %465, align 8
  store i64 %527, i64* %RAX, align 8, !tbaa !2428
  %528 = add i64 %463, 29
  store i64 %528, i64* %PC, align 8
  %529 = load i32, i32* %469, align 4
  %530 = zext i32 %529 to i64
  store i64 %530, i64* %RCX, align 8, !tbaa !2428
  %531 = add i64 %463, 33
  store i64 %531, i64* %PC, align 8
  %532 = load i32, i32* %474, align 4
  %533 = sext i32 %529 to i64
  %534 = sext i32 %532 to i64
  %535 = mul nsw i64 %534, %533
  %536 = trunc i64 %535 to i32
  %537 = and i64 %535, 4294967295
  store i64 %537, i64* %RCX, align 8, !tbaa !2428
  %538 = shl i64 %535, 32
  %539 = ashr exact i64 %538, 32
  %540 = icmp ne i64 %539, %535
  %541 = zext i1 %540 to i8
  store i8 %541, i8* %18, align 1, !tbaa !2432
  %542 = and i32 %536, 255
  %543 = tail call i32 @llvm.ctpop.i32(i32 %542) #10
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  store i8 %546, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %547 = lshr i32 %536, 31
  %548 = trunc i32 %547 to i8
  store i8 %548, i8* %36, align 1, !tbaa !2449
  store i8 %541, i8* %42, align 1, !tbaa !2450
  %549 = add i64 %461, -52
  %550 = add i64 %463, 36
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i32*
  %552 = load i32, i32* %551, align 4
  %553 = add i32 %552, %536
  %554 = zext i32 %553 to i64
  store i64 %554, i64* %RCX, align 8, !tbaa !2428
  %555 = icmp ult i32 %553, %536
  %556 = icmp ult i32 %553, %552
  %557 = or i1 %555, %556
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %18, align 1, !tbaa !2432
  %559 = and i32 %553, 255
  %560 = tail call i32 @llvm.ctpop.i32(i32 %559) #10
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  store i8 %563, i8* %25, align 1, !tbaa !2446
  %564 = xor i32 %552, %536
  %565 = xor i32 %564, %553
  %566 = lshr i32 %565, 4
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  store i8 %568, i8* %30, align 1, !tbaa !2447
  %569 = icmp eq i32 %553, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %33, align 1, !tbaa !2448
  %571 = lshr i32 %553, 31
  %572 = trunc i32 %571 to i8
  store i8 %572, i8* %36, align 1, !tbaa !2449
  %573 = lshr i32 %552, 31
  %574 = xor i32 %571, %547
  %575 = xor i32 %571, %573
  %576 = add nuw nsw i32 %574, %575
  %577 = icmp eq i32 %576, 2
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %42, align 1, !tbaa !2450
  %579 = sext i32 %553 to i64
  store i64 %579, i64* %RDX, align 8, !tbaa !2428
  %580 = shl nsw i64 %579, 2
  %581 = add i64 %580, %527
  %582 = add i64 %463, 44
  store i64 %582, i64* %PC, align 8
  %583 = load <2 x float>, <2 x float>* %1336, align 1
  %584 = extractelement <2 x float> %583, i32 0
  %585 = inttoptr i64 %581 to float*
  store float %584, float* %585, align 4
  %586 = load i64, i64* %RBP, align 8
  %587 = add i64 %586, -36
  %588 = load i64, i64* %PC, align 8
  %589 = add i64 %588, 5
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %587 to i32*
  %591 = load i32, i32* %590, align 4
  store i32 %591, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %592 = add i64 %586, -8
  %593 = add i64 %588, 9
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %592 to i64*
  %595 = load i64, i64* %594, align 8
  store i64 %595, i64* %RAX, align 8, !tbaa !2428
  %596 = add i64 %586, -12
  %597 = add i64 %588, 12
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %596 to i32*
  %599 = load i32, i32* %598, align 4
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %RCX, align 8, !tbaa !2428
  %601 = add i64 %586, -44
  %602 = add i64 %588, 16
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to i32*
  %604 = load i32, i32* %603, align 4
  %605 = sext i32 %599 to i64
  %606 = sext i32 %604 to i64
  %607 = mul nsw i64 %606, %605
  %608 = trunc i64 %607 to i32
  %609 = and i64 %607, 4294967295
  store i64 %609, i64* %RCX, align 8, !tbaa !2428
  %610 = shl i64 %607, 32
  %611 = ashr exact i64 %610, 32
  %612 = icmp ne i64 %611, %607
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %18, align 1, !tbaa !2432
  %614 = and i32 %608, 255
  %615 = tail call i32 @llvm.ctpop.i32(i32 %614) #10
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = xor i8 %617, 1
  store i8 %618, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %619 = lshr i32 %608, 31
  %620 = trunc i32 %619 to i8
  store i8 %620, i8* %36, align 1, !tbaa !2449
  store i8 %613, i8* %42, align 1, !tbaa !2450
  %621 = add i64 %588, 19
  store i64 %621, i64* %PC, align 8
  %622 = load i32, i32* %603, align 4
  %623 = add i32 %622, %608
  %624 = zext i32 %623 to i64
  store i64 %624, i64* %RCX, align 8, !tbaa !2428
  %625 = icmp ult i32 %623, %608
  %626 = icmp ult i32 %623, %622
  %627 = or i1 %625, %626
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %18, align 1, !tbaa !2432
  %629 = and i32 %623, 255
  %630 = tail call i32 @llvm.ctpop.i32(i32 %629) #10
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  %633 = xor i8 %632, 1
  store i8 %633, i8* %25, align 1, !tbaa !2446
  %634 = xor i32 %622, %608
  %635 = xor i32 %634, %623
  %636 = lshr i32 %635, 4
  %637 = trunc i32 %636 to i8
  %638 = and i8 %637, 1
  store i8 %638, i8* %30, align 1, !tbaa !2447
  %639 = icmp eq i32 %623, 0
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %33, align 1, !tbaa !2448
  %641 = lshr i32 %623, 31
  %642 = trunc i32 %641 to i8
  store i8 %642, i8* %36, align 1, !tbaa !2449
  %643 = lshr i32 %622, 31
  %644 = xor i32 %641, %619
  %645 = xor i32 %641, %643
  %646 = add nuw nsw i32 %644, %645
  %647 = icmp eq i32 %646, 2
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %42, align 1, !tbaa !2450
  %649 = sext i32 %623 to i64
  store i64 %649, i64* %RDX, align 8, !tbaa !2428
  %650 = shl nsw i64 %649, 2
  %651 = add i64 %650, %595
  %652 = add i64 %588, 27
  store i64 %652, i64* %PC, align 8
  %653 = load <2 x float>, <2 x float>* %1336, align 1
  %654 = extractelement <2 x float> %653, i32 0
  %655 = inttoptr i64 %651 to float*
  store float %654, float* %655, align 4
  %.pre15 = load i64, i64* %PC, align 8
  %.pre16 = load i64, i64* %RBP, align 8
  br label %block_401a60

block_4019e7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %656 = load i8, i8* %25, align 1, !tbaa !2446
  %657 = icmp ne i8 %656, 0
  %.v54 = select i1 %657, i64 11, i64 6
  %658 = add i64 %.v54, %947
  store i64 %658, i64* %PC, align 8, !tbaa !2428
  %659 = icmp eq i8 %656, 1
  br i1 %659, label %block_4019f2, label %block_4019ed

block_40197a:                                     ; preds = %block_40196e
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %660 = add i64 %393, 8
  store i64 %660, i64* %PC, align 8
  %661 = load i32, i32* %360, align 4
  %662 = add i32 %661, 1
  %663 = zext i32 %662 to i64
  store i64 %663, i64* %RAX, align 8, !tbaa !2428
  %664 = icmp eq i32 %661, -1
  %665 = icmp eq i32 %662, 0
  %666 = or i1 %664, %665
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %18, align 1, !tbaa !2432
  %668 = and i32 %662, 255
  %669 = tail call i32 @llvm.ctpop.i32(i32 %668) #10
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  store i8 %672, i8* %25, align 1, !tbaa !2446
  %673 = xor i32 %662, %661
  %674 = lshr i32 %673, 4
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  store i8 %676, i8* %30, align 1, !tbaa !2447
  %677 = zext i1 %665 to i8
  store i8 %677, i8* %33, align 1, !tbaa !2448
  %678 = lshr i32 %662, 31
  %679 = trunc i32 %678 to i8
  store i8 %679, i8* %36, align 1, !tbaa !2449
  %680 = lshr i32 %661, 31
  %681 = xor i32 %678, %680
  %682 = add nuw nsw i32 %681, %678
  %683 = icmp eq i32 %682, 2
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %42, align 1, !tbaa !2450
  %685 = add i64 %357, -48
  %686 = add i64 %393, 14
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to i32*
  store i32 %662, i32* %687, align 4
  %688 = load i64, i64* %RBP, align 8
  %689 = add i64 %688, -16
  %690 = load i64, i64* %PC, align 8
  %691 = add i64 %690, 3
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %689 to i32*
  %693 = load i32, i32* %692, align 4
  %694 = zext i32 %693 to i64
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = add i64 %688, -44
  %696 = add i64 %690, 6
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %695 to i32*
  %698 = load i32, i32* %697, align 4
  %699 = sub i32 %693, %698
  %700 = zext i32 %699 to i64
  store i64 %700, i64* %RAX, align 8, !tbaa !2428
  %701 = icmp ult i32 %693, %698
  %702 = zext i1 %701 to i8
  store i8 %702, i8* %18, align 1, !tbaa !2432
  %703 = and i32 %699, 255
  %704 = tail call i32 @llvm.ctpop.i32(i32 %703) #10
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  store i8 %707, i8* %25, align 1, !tbaa !2446
  %708 = xor i32 %698, %693
  %709 = xor i32 %708, %699
  %710 = lshr i32 %709, 4
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  store i8 %712, i8* %30, align 1, !tbaa !2447
  %713 = icmp eq i32 %699, 0
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %33, align 1, !tbaa !2448
  %715 = lshr i32 %699, 31
  %716 = trunc i32 %715 to i8
  store i8 %716, i8* %36, align 1, !tbaa !2449
  %717 = lshr i32 %693, 31
  %718 = lshr i32 %698, 31
  %719 = xor i32 %718, %717
  %720 = xor i32 %715, %717
  %721 = add nuw nsw i32 %720, %719
  %722 = icmp eq i32 %721, 2
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %42, align 1, !tbaa !2450
  %724 = add i64 %688, -8
  %725 = add i64 %690, 10
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to i64*
  %727 = load i64, i64* %726, align 8
  store i64 %727, i64* %RCX, align 8, !tbaa !2428
  %728 = add i64 %688, -12
  %729 = add i64 %690, 13
  store i64 %729, i64* %PC, align 8
  %730 = inttoptr i64 %728 to i32*
  %731 = load i32, i32* %730, align 4
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %RSI, align 8, !tbaa !2428
  %733 = add i64 %690, 17
  store i64 %733, i64* %PC, align 8
  %734 = load i32, i32* %697, align 4
  %735 = sext i32 %731 to i64
  %736 = sext i32 %734 to i64
  %737 = mul nsw i64 %736, %735
  %738 = trunc i64 %737 to i32
  %739 = and i64 %737, 4294967295
  store i64 %739, i64* %RSI, align 8, !tbaa !2428
  %740 = shl i64 %737, 32
  %741 = ashr exact i64 %740, 32
  %742 = icmp ne i64 %741, %737
  %743 = zext i1 %742 to i8
  store i8 %743, i8* %18, align 1, !tbaa !2432
  %744 = and i32 %738, 255
  %745 = tail call i32 @llvm.ctpop.i32(i32 %744) #10
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  %748 = xor i8 %747, 1
  store i8 %748, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %749 = lshr i32 %738, 31
  %750 = trunc i32 %749 to i8
  store i8 %750, i8* %36, align 1, !tbaa !2449
  store i8 %743, i8* %42, align 1, !tbaa !2450
  %751 = add i64 %690, 20
  store i64 %751, i64* %PC, align 8
  %752 = load i32, i32* %697, align 4
  %753 = add i32 %752, %738
  %754 = sext i32 %753 to i64
  %755 = shl nsw i64 %754, 2
  %756 = add i64 %755, %727
  store i64 %756, i64* %RCX, align 8, !tbaa !2428
  %757 = icmp ult i64 %756, %727
  %758 = icmp ult i64 %756, %755
  %759 = or i1 %757, %758
  %760 = zext i1 %759 to i8
  store i8 %760, i8* %18, align 1, !tbaa !2432
  %761 = trunc i64 %756 to i32
  %762 = and i32 %761, 255
  %763 = tail call i32 @llvm.ctpop.i32(i32 %762) #10
  %764 = trunc i32 %763 to i8
  %765 = and i8 %764, 1
  %766 = xor i8 %765, 1
  store i8 %766, i8* %25, align 1, !tbaa !2446
  %767 = xor i64 %755, %727
  %768 = xor i64 %767, %756
  %769 = lshr i64 %768, 4
  %770 = trunc i64 %769 to i8
  %771 = and i8 %770, 1
  store i8 %771, i8* %30, align 1, !tbaa !2447
  %772 = icmp eq i64 %756, 0
  %773 = zext i1 %772 to i8
  store i8 %773, i8* %33, align 1, !tbaa !2448
  %774 = lshr i64 %756, 63
  %775 = trunc i64 %774 to i8
  store i8 %775, i8* %36, align 1, !tbaa !2449
  %776 = lshr i64 %727, 63
  %777 = lshr i64 %754, 61
  %778 = and i64 %777, 1
  %779 = xor i64 %774, %776
  %780 = xor i64 %774, %778
  %781 = add nuw nsw i64 %779, %780
  %782 = icmp eq i64 %781, 2
  %783 = zext i1 %782 to i8
  store i8 %783, i8* %42, align 1, !tbaa !2450
  %784 = load i32, i32* %EAX, align 4
  %785 = zext i32 %784 to i64
  store i64 %785, i64* %RDI, align 8, !tbaa !2428
  store i64 %756, i64* %RSI, align 8, !tbaa !2428
  %786 = add i64 %690, 4552
  %787 = add i64 %690, 40
  %788 = load i64, i64* %RSP, align 8, !tbaa !2428
  %789 = add i64 %788, -8
  %790 = inttoptr i64 %789 to i64*
  store i64 %787, i64* %790, align 8
  store i64 %789, i64* %RSP, align 8, !tbaa !2428
  store i64 %786, i64* %PC, align 8, !tbaa !2428
  %791 = tail call %struct.Memory* @sub_402b50_idamax_renamed_(%struct.State* nonnull %0, i64 %786, %struct.Memory* %MEMORY.1)
  %792 = load i64, i64* %PC, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %1340, align 1, !tbaa !2453
  %793 = load i64, i64* %RAX, align 8
  %794 = load i64, i64* %RBP, align 8
  %795 = add i64 %794, -44
  %796 = add i64 %792, 6
  store i64 %796, i64* %PC, align 8
  %797 = trunc i64 %793 to i32
  %798 = inttoptr i64 %795 to i32*
  %799 = load i32, i32* %798, align 4
  %800 = add i32 %799, %797
  %801 = zext i32 %800 to i64
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  %802 = icmp ult i32 %800, %797
  %803 = icmp ult i32 %800, %799
  %804 = or i1 %802, %803
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %18, align 1, !tbaa !2432
  %806 = and i32 %800, 255
  %807 = tail call i32 @llvm.ctpop.i32(i32 %806) #10
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  store i8 %810, i8* %25, align 1, !tbaa !2446
  %811 = xor i32 %799, %797
  %812 = xor i32 %811, %800
  %813 = lshr i32 %812, 4
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %30, align 1, !tbaa !2447
  %816 = icmp eq i32 %800, 0
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %33, align 1, !tbaa !2448
  %818 = lshr i32 %800, 31
  %819 = trunc i32 %818 to i8
  store i8 %819, i8* %36, align 1, !tbaa !2449
  %820 = lshr i32 %797, 31
  %821 = lshr i32 %799, 31
  %822 = xor i32 %818, %820
  %823 = xor i32 %818, %821
  %824 = add nuw nsw i32 %822, %823
  %825 = icmp eq i32 %824, 2
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %42, align 1, !tbaa !2450
  %827 = add i64 %794, -52
  %828 = add i64 %792, 9
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i32*
  store i32 %800, i32* %829, align 4
  %830 = load i64, i64* %RBP, align 8
  %831 = add i64 %830, -52
  %832 = load i64, i64* %PC, align 8
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC, align 8
  %834 = inttoptr i64 %831 to i32*
  %835 = load i32, i32* %834, align 4
  %836 = zext i32 %835 to i64
  store i64 %836, i64* %RAX, align 8, !tbaa !2428
  %837 = add i64 %830, -24
  %838 = add i64 %832, 7
  store i64 %838, i64* %PC, align 8
  %839 = inttoptr i64 %837 to i64*
  %840 = load i64, i64* %839, align 8
  store i64 %840, i64* %RCX, align 8, !tbaa !2428
  %841 = add i64 %830, -44
  %842 = add i64 %832, 11
  store i64 %842, i64* %PC, align 8
  %843 = inttoptr i64 %841 to i32*
  %844 = load i32, i32* %843, align 4
  %845 = sext i32 %844 to i64
  store i64 %845, i64* %RSI, align 8, !tbaa !2428
  %846 = shl nsw i64 %845, 2
  %847 = add i64 %846, %840
  %848 = add i64 %832, 14
  store i64 %848, i64* %PC, align 8
  %849 = inttoptr i64 %847 to i32*
  store i32 %835, i32* %849, align 4
  %850 = load i64, i64* %RBP, align 8
  %851 = add i64 %850, -8
  %852 = load i64, i64* %PC, align 8
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC, align 8
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854, align 8
  store i64 %855, i64* %RCX, align 8, !tbaa !2428
  %856 = add i64 %850, -12
  %857 = add i64 %852, 7
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %856 to i32*
  %859 = load i32, i32* %858, align 4
  %860 = zext i32 %859 to i64
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %861 = add i64 %850, -44
  %862 = add i64 %852, 11
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i32*
  %864 = load i32, i32* %863, align 4
  %865 = sext i32 %859 to i64
  %866 = sext i32 %864 to i64
  %867 = mul nsw i64 %866, %865
  %868 = trunc i64 %867 to i32
  %869 = and i64 %867, 4294967295
  store i64 %869, i64* %RAX, align 8, !tbaa !2428
  %870 = shl i64 %867, 32
  %871 = ashr exact i64 %870, 32
  %872 = icmp ne i64 %871, %867
  %873 = zext i1 %872 to i8
  store i8 %873, i8* %18, align 1, !tbaa !2432
  %874 = and i32 %868, 255
  %875 = tail call i32 @llvm.ctpop.i32(i32 %874) #10
  %876 = trunc i32 %875 to i8
  %877 = and i8 %876, 1
  %878 = xor i8 %877, 1
  store i8 %878, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %879 = lshr i32 %868, 31
  %880 = trunc i32 %879 to i8
  store i8 %880, i8* %36, align 1, !tbaa !2449
  store i8 %873, i8* %42, align 1, !tbaa !2450
  %881 = add i64 %850, -52
  %882 = add i64 %852, 14
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i32*
  %884 = load i32, i32* %883, align 4
  %885 = add i32 %884, %868
  %886 = zext i32 %885 to i64
  store i64 %886, i64* %RAX, align 8, !tbaa !2428
  %887 = icmp ult i32 %885, %868
  %888 = icmp ult i32 %885, %884
  %889 = or i1 %887, %888
  %890 = zext i1 %889 to i8
  store i8 %890, i8* %18, align 1, !tbaa !2432
  %891 = and i32 %885, 255
  %892 = tail call i32 @llvm.ctpop.i32(i32 %891) #10
  %893 = trunc i32 %892 to i8
  %894 = and i8 %893, 1
  %895 = xor i8 %894, 1
  store i8 %895, i8* %25, align 1, !tbaa !2446
  %896 = xor i32 %884, %868
  %897 = xor i32 %896, %885
  %898 = lshr i32 %897, 4
  %899 = trunc i32 %898 to i8
  %900 = and i8 %899, 1
  store i8 %900, i8* %30, align 1, !tbaa !2447
  %901 = icmp eq i32 %885, 0
  %902 = zext i1 %901 to i8
  store i8 %902, i8* %33, align 1, !tbaa !2448
  %903 = lshr i32 %885, 31
  %904 = trunc i32 %903 to i8
  store i8 %904, i8* %36, align 1, !tbaa !2449
  %905 = lshr i32 %884, 31
  %906 = xor i32 %903, %879
  %907 = xor i32 %903, %905
  %908 = add nuw nsw i32 %906, %907
  %909 = icmp eq i32 %908, 2
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %42, align 1, !tbaa !2450
  %911 = sext i32 %885 to i64
  store i64 %911, i64* %RSI, align 8, !tbaa !2428
  %912 = shl nsw i64 %911, 2
  %913 = add i64 %912, %855
  %914 = add i64 %852, 22
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to float*
  %916 = load float, float* %915, align 4
  %917 = fpext float %916 to double
  store double %917, double* %1331, align 1, !tbaa !2454
  %918 = add i64 %852, 26
  store i64 %918, i64* %PC, align 8
  %919 = load double, double* %1332, align 1
  %920 = fcmp uno double %917, %919
  br i1 %920, label %921, label %931

; <label>:921:                                    ; preds = %block_40197a
  %922 = fadd double %917, %919
  %923 = bitcast double %922 to i64
  %924 = and i64 %923, 9221120237041090560
  %925 = icmp eq i64 %924, 9218868437227405312
  %926 = and i64 %923, 2251799813685247
  %927 = icmp ne i64 %926, 0
  %928 = and i1 %925, %927
  br i1 %928, label %929, label %937

; <label>:929:                                    ; preds = %921
  %930 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %918, %struct.Memory* %MEMORY.1) #13
  %.pre13 = load i64, i64* %PC, align 8
  %.pre14 = load i8, i8* %33, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:931:                                    ; preds = %block_40197a
  %932 = fcmp ogt double %917, %919
  br i1 %932, label %937, label %933

; <label>:933:                                    ; preds = %931
  %934 = fcmp olt double %917, %919
  br i1 %934, label %937, label %935

; <label>:935:                                    ; preds = %933
  %936 = fcmp oeq double %917, %919
  br i1 %936, label %937, label %941

; <label>:937:                                    ; preds = %935, %933, %931, %921
  %938 = phi i8 [ 0, %931 ], [ 0, %933 ], [ 1, %935 ], [ 1, %921 ]
  %939 = phi i8 [ 0, %931 ], [ 0, %933 ], [ 0, %935 ], [ 1, %921 ]
  %940 = phi i8 [ 0, %931 ], [ 1, %933 ], [ 0, %935 ], [ 1, %921 ]
  store i8 %938, i8* %33, align 1, !tbaa !2456
  store i8 %939, i8* %25, align 1, !tbaa !2456
  store i8 %940, i8* %18, align 1, !tbaa !2456
  br label %941

; <label>:941:                                    ; preds = %937, %935
  %942 = phi i8 [ %938, %937 ], [ %902, %935 ]
  store i8 0, i8* %42, align 1, !tbaa !2456
  store i8 0, i8* %36, align 1, !tbaa !2456
  store i8 0, i8* %30, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %941, %929
  %943 = phi i8 [ %.pre14, %929 ], [ %942, %941 ]
  %944 = phi i64 [ %.pre13, %929 ], [ %918, %941 ]
  %945 = phi %struct.Memory* [ %930, %929 ], [ %MEMORY.1, %941 ]
  %946 = icmp eq i8 %943, 0
  %.v46 = select i1 %946, i64 17, i64 6
  %947 = add i64 %.v46, %944
  store i64 %947, i64* %PC, align 8, !tbaa !2428
  br i1 %946, label %block_4019f2, label %block_4019e7

block_4019ed:                                     ; preds = %block_4019e7
  %948 = load i64, i64* %RBP, align 8
  %949 = add i64 %948, -44
  %950 = add i64 %658, 461
  store i64 %950, i64* %PC, align 8
  %951 = inttoptr i64 %949 to i32*
  %952 = load i32, i32* %951, align 4
  %953 = zext i32 %952 to i64
  store i64 %953, i64* %RAX, align 8, !tbaa !2428
  %954 = add i64 %948, -32
  %955 = add i64 %658, 465
  store i64 %955, i64* %PC, align 8
  %956 = inttoptr i64 %954 to i64*
  %957 = load i64, i64* %956, align 8
  store i64 %957, i64* %RCX, align 8, !tbaa !2428
  %958 = add i64 %658, 467
  store i64 %958, i64* %PC, align 8
  %959 = inttoptr i64 %957 to i32*
  store i32 %952, i32* %959, align 4
  %.pre18 = load i64, i64* %PC, align 8
  %.pre19 = load i64, i64* %RBP, align 8
  br label %block_401bc0

block_401a60:                                     ; preds = %block_4019fe, %block_4019f2
  %960 = phi i64 [ %.pre16, %block_4019fe ], [ %321, %block_4019f2 ]
  %961 = phi i64 [ %.pre15, %block_4019fe ], [ %355, %block_4019f2 ]
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %962 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 72) to i64*), align 8
  store i64 %962, i64* %1333, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1334, align 1, !tbaa !2454
  %963 = add i64 %960, -8
  %964 = add i64 %961, 17
  store i64 %964, i64* %PC, align 8
  %965 = inttoptr i64 %963 to i64*
  %966 = load i64, i64* %965, align 8
  store i64 %966, i64* %RAX, align 8, !tbaa !2428
  %967 = add i64 %960, -12
  %968 = add i64 %961, 20
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %967 to i32*
  %970 = load i32, i32* %969, align 4
  %971 = zext i32 %970 to i64
  store i64 %971, i64* %RCX, align 8, !tbaa !2428
  %972 = add i64 %960, -44
  %973 = add i64 %961, 24
  store i64 %973, i64* %PC, align 8
  %974 = inttoptr i64 %972 to i32*
  %975 = load i32, i32* %974, align 4
  %976 = sext i32 %970 to i64
  %977 = sext i32 %975 to i64
  %978 = mul nsw i64 %977, %976
  %979 = trunc i64 %978 to i32
  %980 = and i64 %978, 4294967295
  store i64 %980, i64* %RCX, align 8, !tbaa !2428
  %981 = shl i64 %978, 32
  %982 = ashr exact i64 %981, 32
  %983 = icmp ne i64 %982, %978
  %984 = zext i1 %983 to i8
  store i8 %984, i8* %18, align 1, !tbaa !2432
  %985 = and i32 %979, 255
  %986 = tail call i32 @llvm.ctpop.i32(i32 %985) #10
  %987 = trunc i32 %986 to i8
  %988 = and i8 %987, 1
  %989 = xor i8 %988, 1
  store i8 %989, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %990 = lshr i32 %979, 31
  %991 = trunc i32 %990 to i8
  store i8 %991, i8* %36, align 1, !tbaa !2449
  store i8 %984, i8* %42, align 1, !tbaa !2450
  %992 = add i64 %961, 27
  store i64 %992, i64* %PC, align 8
  %993 = load i32, i32* %974, align 4
  %994 = add i32 %993, %979
  %995 = zext i32 %994 to i64
  store i64 %995, i64* %RCX, align 8, !tbaa !2428
  %996 = icmp ult i32 %994, %979
  %997 = icmp ult i32 %994, %993
  %998 = or i1 %996, %997
  %999 = zext i1 %998 to i8
  store i8 %999, i8* %18, align 1, !tbaa !2432
  %1000 = and i32 %994, 255
  %1001 = tail call i32 @llvm.ctpop.i32(i32 %1000) #10
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  store i8 %1004, i8* %25, align 1, !tbaa !2446
  %1005 = xor i32 %993, %979
  %1006 = xor i32 %1005, %994
  %1007 = lshr i32 %1006, 4
  %1008 = trunc i32 %1007 to i8
  %1009 = and i8 %1008, 1
  store i8 %1009, i8* %30, align 1, !tbaa !2447
  %1010 = icmp eq i32 %994, 0
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %33, align 1, !tbaa !2448
  %1012 = lshr i32 %994, 31
  %1013 = trunc i32 %1012 to i8
  store i8 %1013, i8* %36, align 1, !tbaa !2449
  %1014 = lshr i32 %993, 31
  %1015 = xor i32 %1012, %990
  %1016 = xor i32 %1012, %1014
  %1017 = add nuw nsw i32 %1015, %1016
  %1018 = icmp eq i32 %1017, 2
  %1019 = zext i1 %1018 to i8
  store i8 %1019, i8* %42, align 1, !tbaa !2450
  %1020 = sext i32 %994 to i64
  store i64 %1020, i64* %RSI, align 8, !tbaa !2428
  %1021 = shl nsw i64 %1020, 2
  %1022 = add i64 %1021, %966
  %1023 = add i64 %961, 35
  store i64 %1023, i64* %PC, align 8
  %1024 = inttoptr i64 %1022 to float*
  %1025 = load float, float* %1024, align 4
  %1026 = fpext float %1025 to double
  store double %1026, double* %1331, align 1, !tbaa !2454
  %1027 = bitcast i64 %962 to double
  %1028 = fdiv double %1027, %1026
  %.cast = bitcast double %1028 to <2 x i32>
  %1029 = fptrunc double %1028 to float
  store float %1029, float* %1335, align 1, !tbaa !2451
  %1030 = extractelement <2 x i32> %.cast, i32 1
  store i32 %1030, i32* %1327, align 1, !tbaa !2451
  store i32 0, i32* %1328, align 1, !tbaa !2451
  store i32 0, i32* %1330, align 1, !tbaa !2451
  %1031 = load i64, i64* %RBP, align 8
  %1032 = add i64 %1031, -36
  %1033 = add i64 %961, 48
  store i64 %1033, i64* %PC, align 8
  %1034 = load <2 x float>, <2 x float>* %1336, align 1
  %1035 = extractelement <2 x float> %1034, i32 0
  %1036 = inttoptr i64 %1032 to float*
  store float %1035, float* %1036, align 4
  %1037 = load i64, i64* %RBP, align 8
  %1038 = add i64 %1037, -16
  %1039 = load i64, i64* %PC, align 8
  %1040 = add i64 %1039, 3
  store i64 %1040, i64* %PC, align 8
  %1041 = inttoptr i64 %1038 to i32*
  %1042 = load i32, i32* %1041, align 4
  %1043 = zext i32 %1042 to i64
  store i64 %1043, i64* %RCX, align 8, !tbaa !2428
  %1044 = add i64 %1037, -44
  %1045 = add i64 %1039, 6
  store i64 %1045, i64* %PC, align 8
  %1046 = inttoptr i64 %1044 to i32*
  %1047 = load i32, i32* %1046, align 4
  %1048 = add i32 %1047, 1
  %1049 = zext i32 %1048 to i64
  store i64 %1049, i64* %RDI, align 8, !tbaa !2428
  %1050 = lshr i32 %1048, 31
  %1051 = sub i32 %1042, %1048
  %1052 = zext i32 %1051 to i64
  store i64 %1052, i64* %RCX, align 8, !tbaa !2428
  %1053 = icmp ult i32 %1042, %1048
  %1054 = zext i1 %1053 to i8
  store i8 %1054, i8* %18, align 1, !tbaa !2432
  %1055 = and i32 %1051, 255
  %1056 = tail call i32 @llvm.ctpop.i32(i32 %1055) #10
  %1057 = trunc i32 %1056 to i8
  %1058 = and i8 %1057, 1
  %1059 = xor i8 %1058, 1
  store i8 %1059, i8* %25, align 1, !tbaa !2446
  %1060 = xor i32 %1048, %1042
  %1061 = xor i32 %1060, %1051
  %1062 = lshr i32 %1061, 4
  %1063 = trunc i32 %1062 to i8
  %1064 = and i8 %1063, 1
  store i8 %1064, i8* %30, align 1, !tbaa !2447
  %1065 = icmp eq i32 %1051, 0
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %33, align 1, !tbaa !2448
  %1067 = lshr i32 %1051, 31
  %1068 = trunc i32 %1067 to i8
  store i8 %1068, i8* %36, align 1, !tbaa !2449
  %1069 = lshr i32 %1042, 31
  %1070 = xor i32 %1050, %1069
  %1071 = xor i32 %1067, %1069
  %1072 = add nuw nsw i32 %1071, %1070
  %1073 = icmp eq i32 %1072, 2
  %1074 = zext i1 %1073 to i8
  store i8 %1074, i8* %42, align 1, !tbaa !2450
  %1075 = add i64 %1037, -36
  %1076 = add i64 %1039, 16
  store i64 %1076, i64* %PC, align 8
  %1077 = inttoptr i64 %1075 to i32*
  %1078 = load i32, i32* %1077, align 4
  store i32 %1078, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %1079 = add i64 %1037, -8
  %1080 = add i64 %1039, 20
  store i64 %1080, i64* %PC, align 8
  %1081 = inttoptr i64 %1079 to i64*
  %1082 = load i64, i64* %1081, align 8
  store i64 %1082, i64* %RAX, align 8, !tbaa !2428
  %1083 = add i64 %1037, -12
  %1084 = add i64 %1039, 23
  store i64 %1084, i64* %PC, align 8
  %1085 = inttoptr i64 %1083 to i32*
  %1086 = load i32, i32* %1085, align 4
  %1087 = zext i32 %1086 to i64
  store i64 %1087, i64* %RDI, align 8, !tbaa !2428
  %1088 = add i64 %1039, 27
  store i64 %1088, i64* %PC, align 8
  %1089 = load i32, i32* %1046, align 4
  %1090 = sext i32 %1086 to i64
  %1091 = sext i32 %1089 to i64
  %1092 = mul nsw i64 %1091, %1090
  %1093 = trunc i64 %1092 to i32
  %1094 = and i64 %1092, 4294967295
  store i64 %1094, i64* %RDI, align 8, !tbaa !2428
  %1095 = shl i64 %1092, 32
  %1096 = ashr exact i64 %1095, 32
  %1097 = icmp ne i64 %1096, %1092
  %1098 = zext i1 %1097 to i8
  store i8 %1098, i8* %18, align 1, !tbaa !2432
  %1099 = and i32 %1093, 255
  %1100 = tail call i32 @llvm.ctpop.i32(i32 %1099) #10
  %1101 = trunc i32 %1100 to i8
  %1102 = and i8 %1101, 1
  %1103 = xor i8 %1102, 1
  store i8 %1103, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1104 = lshr i32 %1093, 31
  %1105 = trunc i32 %1104 to i8
  store i8 %1105, i8* %36, align 1, !tbaa !2449
  store i8 %1098, i8* %42, align 1, !tbaa !2450
  %1106 = add i64 %1039, 30
  store i64 %1106, i64* %PC, align 8
  %1107 = load i32, i32* %1046, align 4
  %1108 = add i32 %1093, 1
  %1109 = add i32 %1108, %1107
  %1110 = sext i32 %1109 to i64
  %1111 = shl nsw i64 %1110, 2
  %1112 = add i64 %1111, %1082
  store i64 %1112, i64* %RAX, align 8, !tbaa !2428
  %1113 = icmp ult i64 %1112, %1082
  %1114 = icmp ult i64 %1112, %1111
  %1115 = or i1 %1113, %1114
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %18, align 1, !tbaa !2432
  %1117 = trunc i64 %1112 to i32
  %1118 = and i32 %1117, 255
  %1119 = tail call i32 @llvm.ctpop.i32(i32 %1118) #10
  %1120 = trunc i32 %1119 to i8
  %1121 = and i8 %1120, 1
  %1122 = xor i8 %1121, 1
  store i8 %1122, i8* %25, align 1, !tbaa !2446
  %1123 = xor i64 %1111, %1082
  %1124 = xor i64 %1123, %1112
  %1125 = lshr i64 %1124, 4
  %1126 = trunc i64 %1125 to i8
  %1127 = and i8 %1126, 1
  store i8 %1127, i8* %30, align 1, !tbaa !2447
  %1128 = icmp eq i64 %1112, 0
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %33, align 1, !tbaa !2448
  %1130 = lshr i64 %1112, 63
  %1131 = trunc i64 %1130 to i8
  store i8 %1131, i8* %36, align 1, !tbaa !2449
  %1132 = lshr i64 %1082, 63
  %1133 = lshr i64 %1110, 61
  %1134 = and i64 %1133, 1
  %1135 = xor i64 %1130, %1132
  %1136 = xor i64 %1130, %1134
  %1137 = add nuw nsw i64 %1135, %1136
  %1138 = icmp eq i64 %1137, 2
  %1139 = zext i1 %1138 to i8
  store i8 %1139, i8* %42, align 1, !tbaa !2450
  %1140 = load i32, i32* %ECX, align 4
  %1141 = zext i32 %1140 to i64
  store i64 %1141, i64* %RDI, align 8, !tbaa !2428
  store i64 %1112, i64* %RSI, align 8, !tbaa !2428
  %1142 = add i64 %1039, 4704
  %1143 = add i64 %1039, 53
  %1144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1145 = add i64 %1144, -8
  %1146 = inttoptr i64 %1145 to i64*
  store i64 %1143, i64* %1146, align 8
  store i64 %1145, i64* %RSP, align 8, !tbaa !2428
  store i64 %1142, i64* %PC, align 8, !tbaa !2428
  %1147 = tail call %struct.Memory* @sub_402cf0_dscal_renamed_(%struct.State* nonnull %0, i64 %1142, %struct.Memory* %945)
  %1148 = load i64, i64* %RBP, align 8
  %1149 = add i64 %1148, -48
  %1150 = load i64, i64* %PC, align 8
  %1151 = add i64 %1150, 3
  store i64 %1151, i64* %PC, align 8
  %1152 = inttoptr i64 %1149 to i32*
  %1153 = load i32, i32* %1152, align 4
  %1154 = zext i32 %1153 to i64
  store i64 %1154, i64* %RCX, align 8, !tbaa !2428
  %1155 = add i64 %1148, -40
  %1156 = add i64 %1150, 6
  store i64 %1156, i64* %PC, align 8
  %1157 = inttoptr i64 %1155 to i32*
  store i32 %1153, i32* %1157, align 4
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_401acb

block_401bd8.loopexit:                            ; preds = %block_40196e
  br label %block_401bd8

block_401bd8:                                     ; preds = %block_401bd8.loopexit, %block_401930.block_401bd8_crit_edge
  %.pre-phi43 = phi double* [ %.pre42, %block_401930.block_401bd8_crit_edge ], [ %1332, %block_401bd8.loopexit ]
  %.pre-phi41 = phi double* [ %.pre40, %block_401930.block_401bd8_crit_edge ], [ %1331, %block_401bd8.loopexit ]
  %.pre-phi39 = phi i32* [ %.pre38, %block_401930.block_401bd8_crit_edge ], [ %1330, %block_401bd8.loopexit ]
  %.pre-phi35 = phi i32* [ %.pre34, %block_401930.block_401bd8_crit_edge ], [ %1328, %block_401bd8.loopexit ]
  %.pre-phi33 = phi i32* [ %.pre32, %block_401930.block_401bd8_crit_edge ], [ %1327, %block_401bd8.loopexit ]
  %.pre-phi29 = phi i32* [ %.pre28, %block_401930.block_401bd8_crit_edge ], [ %1325, %block_401bd8.loopexit ]
  %1158 = phi i64 [ %110, %block_401930.block_401bd8_crit_edge ], [ %357, %block_401bd8.loopexit ]
  %1159 = phi i64 [ %126, %block_401930.block_401bd8_crit_edge ], [ %394, %block_401bd8.loopexit ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_401930.block_401bd8_crit_edge ], [ %MEMORY.1, %block_401bd8.loopexit ]
  store i32 0, i32* %.pre-phi29, align 1, !tbaa !2453
  store i32 0, i32* %.pre-phi33, align 1, !tbaa !2453
  store i32 0, i32* %.pre-phi35, align 1, !tbaa !2453
  store i32 0, i32* %.pre-phi39, align 1, !tbaa !2453
  %1160 = add i64 %1158, -16
  %1161 = add i64 %1159, 6
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1160 to i32*
  %1163 = load i32, i32* %1162, align 4
  %1164 = add i32 %1163, -1
  %1165 = zext i32 %1164 to i64
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = icmp eq i32 %1163, 0
  %1167 = zext i1 %1166 to i8
  store i8 %1167, i8* %18, align 1, !tbaa !2432
  %1168 = and i32 %1164, 255
  %1169 = tail call i32 @llvm.ctpop.i32(i32 %1168) #10
  %1170 = trunc i32 %1169 to i8
  %1171 = and i8 %1170, 1
  %1172 = xor i8 %1171, 1
  store i8 %1172, i8* %25, align 1, !tbaa !2446
  %1173 = xor i32 %1164, %1163
  %1174 = lshr i32 %1173, 4
  %1175 = trunc i32 %1174 to i8
  %1176 = and i8 %1175, 1
  store i8 %1176, i8* %30, align 1, !tbaa !2447
  %1177 = icmp eq i32 %1164, 0
  %1178 = zext i1 %1177 to i8
  store i8 %1178, i8* %33, align 1, !tbaa !2448
  %1179 = lshr i32 %1164, 31
  %1180 = trunc i32 %1179 to i8
  store i8 %1180, i8* %36, align 1, !tbaa !2449
  %1181 = lshr i32 %1163, 31
  %1182 = xor i32 %1179, %1181
  %1183 = add nuw nsw i32 %1182, %1181
  %1184 = icmp eq i32 %1183, 2
  %1185 = zext i1 %1184 to i8
  store i8 %1185, i8* %42, align 1, !tbaa !2450
  %1186 = add i64 %1158, -24
  %1187 = add i64 %1159, 13
  store i64 %1187, i64* %PC, align 8
  %1188 = inttoptr i64 %1186 to i64*
  %1189 = load i64, i64* %1188, align 8
  store i64 %1189, i64* %RCX, align 8, !tbaa !2428
  %1190 = add i64 %1159, 16
  store i64 %1190, i64* %PC, align 8
  %1191 = load i32, i32* %1162, align 4
  %1192 = add i32 %1191, -1
  %1193 = zext i32 %1192 to i64
  store i64 %1193, i64* %RDX, align 8, !tbaa !2428
  %1194 = icmp eq i32 %1191, 0
  %1195 = zext i1 %1194 to i8
  store i8 %1195, i8* %18, align 1, !tbaa !2432
  %1196 = and i32 %1192, 255
  %1197 = tail call i32 @llvm.ctpop.i32(i32 %1196) #10
  %1198 = trunc i32 %1197 to i8
  %1199 = and i8 %1198, 1
  %1200 = xor i8 %1199, 1
  store i8 %1200, i8* %25, align 1, !tbaa !2446
  %1201 = xor i32 %1192, %1191
  %1202 = lshr i32 %1201, 4
  %1203 = trunc i32 %1202 to i8
  %1204 = and i8 %1203, 1
  store i8 %1204, i8* %30, align 1, !tbaa !2447
  %1205 = icmp eq i32 %1192, 0
  %1206 = zext i1 %1205 to i8
  store i8 %1206, i8* %33, align 1, !tbaa !2448
  %1207 = lshr i32 %1192, 31
  %1208 = trunc i32 %1207 to i8
  store i8 %1208, i8* %36, align 1, !tbaa !2449
  %1209 = lshr i32 %1191, 31
  %1210 = xor i32 %1207, %1209
  %1211 = add nuw nsw i32 %1210, %1209
  %1212 = icmp eq i32 %1211, 2
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %42, align 1, !tbaa !2450
  %1214 = sext i32 %1192 to i64
  store i64 %1214, i64* %RSI, align 8, !tbaa !2428
  %1215 = shl nsw i64 %1214, 2
  %1216 = add i64 %1215, %1189
  %1217 = add i64 %1159, 25
  store i64 %1217, i64* %PC, align 8
  %1218 = inttoptr i64 %1216 to i32*
  store i32 %1164, i32* %1218, align 4
  %1219 = load i64, i64* %RBP, align 8
  %1220 = add i64 %1219, -8
  %1221 = load i64, i64* %PC, align 8
  %1222 = add i64 %1221, 4
  store i64 %1222, i64* %PC, align 8
  %1223 = inttoptr i64 %1220 to i64*
  %1224 = load i64, i64* %1223, align 8
  store i64 %1224, i64* %RCX, align 8, !tbaa !2428
  %1225 = add i64 %1219, -12
  %1226 = add i64 %1221, 7
  store i64 %1226, i64* %PC, align 8
  %1227 = inttoptr i64 %1225 to i32*
  %1228 = load i32, i32* %1227, align 4
  %1229 = zext i32 %1228 to i64
  store i64 %1229, i64* %RAX, align 8, !tbaa !2428
  %1230 = add i64 %1219, -16
  %1231 = add i64 %1221, 10
  store i64 %1231, i64* %PC, align 8
  %1232 = inttoptr i64 %1230 to i32*
  %1233 = load i32, i32* %1232, align 4
  %1234 = add i32 %1233, -1
  %1235 = zext i32 %1234 to i64
  store i64 %1235, i64* %RDX, align 8, !tbaa !2428
  %1236 = sext i32 %1228 to i64
  %1237 = sext i32 %1234 to i64
  %1238 = mul nsw i64 %1237, %1236
  %1239 = trunc i64 %1238 to i32
  %1240 = and i64 %1238, 4294967295
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = shl i64 %1238, 32
  %1242 = ashr exact i64 %1241, 32
  %1243 = icmp ne i64 %1242, %1238
  %1244 = zext i1 %1243 to i8
  store i8 %1244, i8* %18, align 1, !tbaa !2432
  %1245 = and i32 %1239, 255
  %1246 = tail call i32 @llvm.ctpop.i32(i32 %1245) #10
  %1247 = trunc i32 %1246 to i8
  %1248 = and i8 %1247, 1
  %1249 = xor i8 %1248, 1
  store i8 %1249, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1250 = lshr i32 %1239, 31
  %1251 = trunc i32 %1250 to i8
  store i8 %1251, i8* %36, align 1, !tbaa !2449
  store i8 %1244, i8* %42, align 1, !tbaa !2450
  %1252 = add i64 %1221, 19
  store i64 %1252, i64* %PC, align 8
  %1253 = load i32, i32* %1232, align 4
  %1254 = add i32 %1253, -1
  %1255 = zext i32 %1254 to i64
  store i64 %1255, i64* %RDX, align 8, !tbaa !2428
  %1256 = lshr i32 %1254, 31
  %1257 = add i32 %1254, %1239
  %1258 = zext i32 %1257 to i64
  store i64 %1258, i64* %RAX, align 8, !tbaa !2428
  %1259 = icmp ult i32 %1257, %1239
  %1260 = icmp ult i32 %1257, %1254
  %1261 = or i1 %1259, %1260
  %1262 = zext i1 %1261 to i8
  store i8 %1262, i8* %18, align 1, !tbaa !2432
  %1263 = and i32 %1257, 255
  %1264 = tail call i32 @llvm.ctpop.i32(i32 %1263) #10
  %1265 = trunc i32 %1264 to i8
  %1266 = and i8 %1265, 1
  %1267 = xor i8 %1266, 1
  store i8 %1267, i8* %25, align 1, !tbaa !2446
  %1268 = xor i64 %1255, %1238
  %1269 = trunc i64 %1268 to i32
  %1270 = xor i32 %1269, %1257
  %1271 = lshr i32 %1270, 4
  %1272 = trunc i32 %1271 to i8
  %1273 = and i8 %1272, 1
  store i8 %1273, i8* %30, align 1, !tbaa !2447
  %1274 = icmp eq i32 %1257, 0
  %1275 = zext i1 %1274 to i8
  store i8 %1275, i8* %33, align 1, !tbaa !2448
  %1276 = lshr i32 %1257, 31
  %1277 = trunc i32 %1276 to i8
  store i8 %1277, i8* %36, align 1, !tbaa !2449
  %1278 = xor i32 %1276, %1250
  %1279 = xor i32 %1276, %1256
  %1280 = add nuw nsw i32 %1278, %1279
  %1281 = icmp eq i32 %1280, 2
  %1282 = zext i1 %1281 to i8
  store i8 %1282, i8* %42, align 1, !tbaa !2450
  %1283 = sext i32 %1257 to i64
  store i64 %1283, i64* %RSI, align 8, !tbaa !2428
  %1284 = shl nsw i64 %1283, 2
  %1285 = add i64 %1284, %1224
  %1286 = add i64 %1221, 32
  store i64 %1286, i64* %PC, align 8
  %1287 = inttoptr i64 %1285 to float*
  %1288 = load float, float* %1287, align 4
  %1289 = fpext float %1288 to double
  store double %1289, double* %.pre-phi41, align 1, !tbaa !2454
  %1290 = add i64 %1221, 36
  store i64 %1290, i64* %PC, align 8
  %1291 = load double, double* %.pre-phi43, align 1
  %1292 = fcmp uno double %1289, %1291
  br i1 %1292, label %1293, label %1303

; <label>:1293:                                   ; preds = %block_401bd8
  %1294 = fadd double %1289, %1291
  %1295 = bitcast double %1294 to i64
  %1296 = and i64 %1295, 9221120237041090560
  %1297 = icmp eq i64 %1296, 9218868437227405312
  %1298 = and i64 %1295, 2251799813685247
  %1299 = icmp ne i64 %1298, 0
  %1300 = and i1 %1297, %1299
  br i1 %1300, label %1301, label %1309

; <label>:1301:                                   ; preds = %1293
  %1302 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1290, %struct.Memory* %MEMORY.3) #13
  %.pre22 = load i64, i64* %PC, align 8
  %.pre23 = load i8, i8* %33, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1303:                                   ; preds = %block_401bd8
  %1304 = fcmp ogt double %1289, %1291
  br i1 %1304, label %1309, label %1305

; <label>:1305:                                   ; preds = %1303
  %1306 = fcmp olt double %1289, %1291
  br i1 %1306, label %1309, label %1307

; <label>:1307:                                   ; preds = %1305
  %1308 = fcmp oeq double %1289, %1291
  br i1 %1308, label %1309, label %1313

; <label>:1309:                                   ; preds = %1307, %1305, %1303, %1293
  %1310 = phi i8 [ 0, %1303 ], [ 0, %1305 ], [ 1, %1307 ], [ 1, %1293 ]
  %1311 = phi i8 [ 0, %1303 ], [ 0, %1305 ], [ 0, %1307 ], [ 1, %1293 ]
  %1312 = phi i8 [ 0, %1303 ], [ 1, %1305 ], [ 0, %1307 ], [ 1, %1293 ]
  store i8 %1310, i8* %33, align 1, !tbaa !2456
  store i8 %1311, i8* %25, align 1, !tbaa !2456
  store i8 %1312, i8* %18, align 1, !tbaa !2456
  br label %1313

; <label>:1313:                                   ; preds = %1309, %1307
  %1314 = phi i8 [ %1310, %1309 ], [ %1275, %1307 ]
  store i8 0, i8* %42, align 1, !tbaa !2456
  store i8 0, i8* %36, align 1, !tbaa !2456
  store i8 0, i8* %30, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1313, %1301
  %1315 = phi i8 [ %.pre23, %1301 ], [ %1314, %1313 ]
  %1316 = phi i64 [ %.pre22, %1301 ], [ %1290, %1313 ]
  %1317 = phi %struct.Memory* [ %1302, %1301 ], [ %MEMORY.3, %1313 ]
  %1318 = icmp eq i8 %1315, 0
  %.v45 = select i1 %1318, i64 24, i64 6
  %1319 = add i64 %.v45, %1316
  store i64 %1319, i64* %PC, align 8, !tbaa !2428
  br i1 %1318, label %block_401c2d, label %block_401c1b

block_401967:                                     ; preds = %block_401930
  %1320 = add i64 %110, -44
  %1321 = add i64 %126, 7
  store i64 %1321, i64* %PC, align 8
  %1322 = inttoptr i64 %1320 to i32*
  store i32 0, i32* %1322, align 4
  %1323 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1325 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %1326 = getelementptr inbounds i8, i8* %1323, i64 4
  %1327 = bitcast i8* %1326 to i32*
  %1328 = bitcast i64* %1324 to i32*
  %1329 = getelementptr inbounds i8, i8* %1323, i64 12
  %1330 = bitcast i8* %1329 to i32*
  %1331 = bitcast %union.VectorReg* %8 to double*
  %1332 = bitcast [32 x %union.VectorReg]* %7 to double*
  %1333 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %7, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1334 = bitcast i64* %1324 to double*
  %1335 = bitcast [32 x %union.VectorReg]* %7 to float*
  %1336 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %1337 = bitcast i8* %1326 to float*
  %1338 = bitcast i64* %1324 to float*
  %1339 = bitcast i8* %1329 to float*
  %.pre = load i64, i64* %PC, align 8
  %1340 = bitcast [32 x %union.VectorReg]* %7 to <4 x i32>*
  br label %block_40196e

block_401ad7:                                     ; preds = %block_401acb
  %1341 = add i64 %1446, -8
  %1342 = add i64 %1482, 4
  store i64 %1342, i64* %PC, align 8
  %1343 = inttoptr i64 %1341 to i64*
  %1344 = load i64, i64* %1343, align 8
  store i64 %1344, i64* %RAX, align 8, !tbaa !2428
  %1345 = add i64 %1446, -12
  %1346 = add i64 %1482, 7
  store i64 %1346, i64* %PC, align 8
  %1347 = inttoptr i64 %1345 to i32*
  %1348 = load i32, i32* %1347, align 4
  %1349 = zext i32 %1348 to i64
  store i64 %1349, i64* %RCX, align 8, !tbaa !2428
  %1350 = add i64 %1482, 11
  store i64 %1350, i64* %PC, align 8
  %1351 = load i32, i32* %1449, align 4
  %1352 = sext i32 %1348 to i64
  %1353 = sext i32 %1351 to i64
  %1354 = mul nsw i64 %1353, %1352
  %1355 = trunc i64 %1354 to i32
  %1356 = and i64 %1354, 4294967295
  store i64 %1356, i64* %RCX, align 8, !tbaa !2428
  %1357 = shl i64 %1354, 32
  %1358 = ashr exact i64 %1357, 32
  %1359 = icmp ne i64 %1358, %1354
  %1360 = zext i1 %1359 to i8
  store i8 %1360, i8* %18, align 1, !tbaa !2432
  %1361 = and i32 %1355, 255
  %1362 = tail call i32 @llvm.ctpop.i32(i32 %1361) #10
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  store i8 %1365, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1366 = lshr i32 %1355, 31
  %1367 = trunc i32 %1366 to i8
  store i8 %1367, i8* %36, align 1, !tbaa !2449
  store i8 %1360, i8* %42, align 1, !tbaa !2450
  %1368 = add i64 %1446, -52
  %1369 = add i64 %1482, 14
  store i64 %1369, i64* %PC, align 8
  %1370 = inttoptr i64 %1368 to i32*
  %1371 = load i32, i32* %1370, align 4
  %1372 = add i32 %1371, %1355
  %1373 = zext i32 %1372 to i64
  store i64 %1373, i64* %RCX, align 8, !tbaa !2428
  %1374 = icmp ult i32 %1372, %1355
  %1375 = icmp ult i32 %1372, %1371
  %1376 = or i1 %1374, %1375
  %1377 = zext i1 %1376 to i8
  store i8 %1377, i8* %18, align 1, !tbaa !2432
  %1378 = and i32 %1372, 255
  %1379 = tail call i32 @llvm.ctpop.i32(i32 %1378) #10
  %1380 = trunc i32 %1379 to i8
  %1381 = and i8 %1380, 1
  %1382 = xor i8 %1381, 1
  store i8 %1382, i8* %25, align 1, !tbaa !2446
  %1383 = xor i32 %1371, %1355
  %1384 = xor i32 %1383, %1372
  %1385 = lshr i32 %1384, 4
  %1386 = trunc i32 %1385 to i8
  %1387 = and i8 %1386, 1
  store i8 %1387, i8* %30, align 1, !tbaa !2447
  %1388 = icmp eq i32 %1372, 0
  %1389 = zext i1 %1388 to i8
  store i8 %1389, i8* %33, align 1, !tbaa !2448
  %1390 = lshr i32 %1372, 31
  %1391 = trunc i32 %1390 to i8
  store i8 %1391, i8* %36, align 1, !tbaa !2449
  %1392 = lshr i32 %1371, 31
  %1393 = xor i32 %1390, %1366
  %1394 = xor i32 %1390, %1392
  %1395 = add nuw nsw i32 %1393, %1394
  %1396 = icmp eq i32 %1395, 2
  %1397 = zext i1 %1396 to i8
  store i8 %1397, i8* %42, align 1, !tbaa !2450
  %1398 = sext i32 %1372 to i64
  store i64 %1398, i64* %RDX, align 8, !tbaa !2428
  %1399 = shl nsw i64 %1398, 2
  %1400 = add i64 %1399, %1344
  %1401 = add i64 %1482, 22
  store i64 %1401, i64* %PC, align 8
  %1402 = inttoptr i64 %1400 to i32*
  %1403 = load i32, i32* %1402, align 4
  store i32 %1403, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %1404 = add i64 %1446, -36
  %1405 = add i64 %1482, 27
  store i64 %1405, i64* %PC, align 8
  %1406 = load <2 x float>, <2 x float>* %1336, align 1
  %1407 = extractelement <2 x float> %1406, i32 0
  %1408 = inttoptr i64 %1404 to float*
  store float %1407, float* %1408, align 4
  %1409 = load i64, i64* %RBP, align 8
  %1410 = add i64 %1409, -52
  %1411 = load i64, i64* %PC, align 8
  %1412 = add i64 %1411, 3
  store i64 %1412, i64* %PC, align 8
  %1413 = inttoptr i64 %1410 to i32*
  %1414 = load i32, i32* %1413, align 4
  %1415 = zext i32 %1414 to i64
  store i64 %1415, i64* %RCX, align 8, !tbaa !2428
  %1416 = add i64 %1409, -44
  %1417 = add i64 %1411, 6
  store i64 %1417, i64* %PC, align 8
  %1418 = inttoptr i64 %1416 to i32*
  %1419 = load i32, i32* %1418, align 4
  %1420 = sub i32 %1414, %1419
  %1421 = icmp ult i32 %1414, %1419
  %1422 = zext i1 %1421 to i8
  store i8 %1422, i8* %18, align 1, !tbaa !2432
  %1423 = and i32 %1420, 255
  %1424 = tail call i32 @llvm.ctpop.i32(i32 %1423) #10
  %1425 = trunc i32 %1424 to i8
  %1426 = and i8 %1425, 1
  %1427 = xor i8 %1426, 1
  store i8 %1427, i8* %25, align 1, !tbaa !2446
  %1428 = xor i32 %1419, %1414
  %1429 = xor i32 %1428, %1420
  %1430 = lshr i32 %1429, 4
  %1431 = trunc i32 %1430 to i8
  %1432 = and i8 %1431, 1
  store i8 %1432, i8* %30, align 1, !tbaa !2447
  %1433 = icmp eq i32 %1420, 0
  %1434 = zext i1 %1433 to i8
  store i8 %1434, i8* %33, align 1, !tbaa !2448
  %1435 = lshr i32 %1420, 31
  %1436 = trunc i32 %1435 to i8
  store i8 %1436, i8* %36, align 1, !tbaa !2449
  %1437 = lshr i32 %1414, 31
  %1438 = lshr i32 %1419, 31
  %1439 = xor i32 %1438, %1437
  %1440 = xor i32 %1435, %1437
  %1441 = add nuw nsw i32 %1440, %1439
  %1442 = icmp eq i32 %1441, 2
  %1443 = zext i1 %1442 to i8
  store i8 %1443, i8* %42, align 1, !tbaa !2450
  %.v49 = select i1 %1433, i64 83, i64 12
  %1444 = add i64 %.v49, %1411
  store i64 %1444, i64* %PC, align 8, !tbaa !2428
  br i1 %1433, label %block_401b45, label %block_401afe

block_401acb:                                     ; preds = %block_401b45, %block_401a60
  %1445 = phi i64 [ %1801, %block_401b45 ], [ %.pre17, %block_401a60 ]
  %1446 = load i64, i64* %RBP, align 8
  %1447 = add i64 %1446, -40
  %1448 = add i64 %1445, 3
  store i64 %1448, i64* %PC, align 8
  %1449 = inttoptr i64 %1447 to i32*
  %1450 = load i32, i32* %1449, align 4
  %1451 = zext i32 %1450 to i64
  store i64 %1451, i64* %RAX, align 8, !tbaa !2428
  %1452 = add i64 %1446, -16
  %1453 = add i64 %1445, 6
  store i64 %1453, i64* %PC, align 8
  %1454 = inttoptr i64 %1452 to i32*
  %1455 = load i32, i32* %1454, align 4
  %1456 = sub i32 %1450, %1455
  %1457 = icmp ult i32 %1450, %1455
  %1458 = zext i1 %1457 to i8
  store i8 %1458, i8* %18, align 1, !tbaa !2432
  %1459 = and i32 %1456, 255
  %1460 = tail call i32 @llvm.ctpop.i32(i32 %1459) #10
  %1461 = trunc i32 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = xor i8 %1462, 1
  store i8 %1463, i8* %25, align 1, !tbaa !2446
  %1464 = xor i32 %1455, %1450
  %1465 = xor i32 %1464, %1456
  %1466 = lshr i32 %1465, 4
  %1467 = trunc i32 %1466 to i8
  %1468 = and i8 %1467, 1
  store i8 %1468, i8* %30, align 1, !tbaa !2447
  %1469 = icmp eq i32 %1456, 0
  %1470 = zext i1 %1469 to i8
  store i8 %1470, i8* %33, align 1, !tbaa !2448
  %1471 = lshr i32 %1456, 31
  %1472 = trunc i32 %1471 to i8
  store i8 %1472, i8* %36, align 1, !tbaa !2449
  %1473 = lshr i32 %1450, 31
  %1474 = lshr i32 %1455, 31
  %1475 = xor i32 %1474, %1473
  %1476 = xor i32 %1471, %1473
  %1477 = add nuw nsw i32 %1476, %1475
  %1478 = icmp eq i32 %1477, 2
  %1479 = zext i1 %1478 to i8
  store i8 %1479, i8* %42, align 1, !tbaa !2450
  %1480 = icmp ne i8 %1472, 0
  %1481 = xor i1 %1480, %1478
  %.v48 = select i1 %1481, i64 12, i64 231
  %1482 = add i64 %.v48, %1445
  store i64 %1482, i64* %PC, align 8, !tbaa !2428
  br i1 %1481, label %block_401ad7, label %block_401bb2

block_401bc0:                                     ; preds = %block_401bb2, %block_4019ed
  %1483 = phi i64 [ %1446, %block_401bb2 ], [ %.pre19, %block_4019ed ]
  %1484 = phi i64 [ %1515, %block_401bb2 ], [ %.pre18, %block_4019ed ]
  %MEMORY.5 = phi %struct.Memory* [ %1147, %block_401bb2 ], [ %945, %block_4019ed ]
  %1485 = add i64 %1483, -44
  %1486 = add i64 %1484, 8
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to i32*
  %1488 = load i32, i32* %1487, align 4
  %1489 = add i32 %1488, 1
  %1490 = zext i32 %1489 to i64
  store i64 %1490, i64* %RAX, align 8, !tbaa !2428
  %1491 = icmp eq i32 %1488, -1
  %1492 = icmp eq i32 %1489, 0
  %1493 = or i1 %1491, %1492
  %1494 = zext i1 %1493 to i8
  store i8 %1494, i8* %18, align 1, !tbaa !2432
  %1495 = and i32 %1489, 255
  %1496 = tail call i32 @llvm.ctpop.i32(i32 %1495) #10
  %1497 = trunc i32 %1496 to i8
  %1498 = and i8 %1497, 1
  %1499 = xor i8 %1498, 1
  store i8 %1499, i8* %25, align 1, !tbaa !2446
  %1500 = xor i32 %1489, %1488
  %1501 = lshr i32 %1500, 4
  %1502 = trunc i32 %1501 to i8
  %1503 = and i8 %1502, 1
  store i8 %1503, i8* %30, align 1, !tbaa !2447
  %1504 = zext i1 %1492 to i8
  store i8 %1504, i8* %33, align 1, !tbaa !2448
  %1505 = lshr i32 %1489, 31
  %1506 = trunc i32 %1505 to i8
  store i8 %1506, i8* %36, align 1, !tbaa !2449
  %1507 = lshr i32 %1488, 31
  %1508 = xor i32 %1505, %1507
  %1509 = add nuw nsw i32 %1508, %1505
  %1510 = icmp eq i32 %1509, 2
  %1511 = zext i1 %1510 to i8
  store i8 %1511, i8* %42, align 1, !tbaa !2450
  %1512 = add i64 %1484, 14
  store i64 %1512, i64* %PC, align 8
  store i32 %1489, i32* %1487, align 4
  %1513 = load i64, i64* %PC, align 8
  %1514 = add i64 %1513, -608
  store i64 %1514, i64* %PC, align 8, !tbaa !2428
  br label %block_40196e

block_401bb2:                                     ; preds = %block_401acb
  %1515 = add i64 %1482, 14
  store i64 %1515, i64* %PC, align 8, !tbaa !2428
  br label %block_401bc0

block_401c2d:                                     ; preds = %block_401c1b, %block_401c21, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1516 = phi i64 [ %1804, %block_401c1b ], [ %.pre24, %block_401c21 ], [ %1319, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %1517 = load i64, i64* %RSP, align 8
  %1518 = add i64 %1517, 64
  store i64 %1518, i64* %RSP, align 8, !tbaa !2428
  %1519 = icmp ugt i64 %1517, -65
  %1520 = zext i1 %1519 to i8
  store i8 %1520, i8* %18, align 1, !tbaa !2432
  %1521 = trunc i64 %1518 to i32
  %1522 = and i32 %1521, 255
  %1523 = tail call i32 @llvm.ctpop.i32(i32 %1522) #10
  %1524 = trunc i32 %1523 to i8
  %1525 = and i8 %1524, 1
  %1526 = xor i8 %1525, 1
  store i8 %1526, i8* %25, align 1, !tbaa !2446
  %1527 = xor i64 %1518, %1517
  %1528 = lshr i64 %1527, 4
  %1529 = trunc i64 %1528 to i8
  %1530 = and i8 %1529, 1
  store i8 %1530, i8* %30, align 1, !tbaa !2447
  %1531 = icmp eq i64 %1518, 0
  %1532 = zext i1 %1531 to i8
  store i8 %1532, i8* %33, align 1, !tbaa !2448
  %1533 = lshr i64 %1518, 63
  %1534 = trunc i64 %1533 to i8
  store i8 %1534, i8* %36, align 1, !tbaa !2449
  %1535 = lshr i64 %1517, 63
  %1536 = xor i64 %1533, %1535
  %1537 = add nuw nsw i64 %1536, %1533
  %1538 = icmp eq i64 %1537, 2
  %1539 = zext i1 %1538 to i8
  store i8 %1539, i8* %42, align 1, !tbaa !2450
  %1540 = add i64 %1516, 5
  store i64 %1540, i64* %PC, align 8
  %1541 = add i64 %1517, 72
  %1542 = inttoptr i64 %1518 to i64*
  %1543 = load i64, i64* %1542, align 8
  store i64 %1543, i64* %RBP, align 8, !tbaa !2428
  store i64 %1541, i64* %RSP, align 8, !tbaa !2428
  %1544 = add i64 %1516, 6
  store i64 %1544, i64* %PC, align 8
  %1545 = inttoptr i64 %1541 to i64*
  %1546 = load i64, i64* %1545, align 8
  store i64 %1546, i64* %PC, align 8, !tbaa !2428
  %1547 = add i64 %1517, 80
  store i64 %1547, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1317

block_401c21:                                     ; preds = %block_401c1b
  %1548 = load i64, i64* %RBP, align 8
  %1549 = add i64 %1548, -16
  %1550 = add i64 %1804, 3
  store i64 %1550, i64* %PC, align 8
  %1551 = inttoptr i64 %1549 to i32*
  %1552 = load i32, i32* %1551, align 4
  %1553 = add i32 %1552, -1
  %1554 = zext i32 %1553 to i64
  store i64 %1554, i64* %RAX, align 8, !tbaa !2428
  %1555 = icmp eq i32 %1552, 0
  %1556 = zext i1 %1555 to i8
  store i8 %1556, i8* %18, align 1, !tbaa !2432
  %1557 = and i32 %1553, 255
  %1558 = tail call i32 @llvm.ctpop.i32(i32 %1557) #10
  %1559 = trunc i32 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = xor i8 %1560, 1
  store i8 %1561, i8* %25, align 1, !tbaa !2446
  %1562 = xor i32 %1553, %1552
  %1563 = lshr i32 %1562, 4
  %1564 = trunc i32 %1563 to i8
  %1565 = and i8 %1564, 1
  store i8 %1565, i8* %30, align 1, !tbaa !2447
  %1566 = icmp eq i32 %1553, 0
  %1567 = zext i1 %1566 to i8
  store i8 %1567, i8* %33, align 1, !tbaa !2448
  %1568 = lshr i32 %1553, 31
  %1569 = trunc i32 %1568 to i8
  store i8 %1569, i8* %36, align 1, !tbaa !2449
  %1570 = lshr i32 %1552, 31
  %1571 = xor i32 %1568, %1570
  %1572 = add nuw nsw i32 %1571, %1570
  %1573 = icmp eq i32 %1572, 2
  %1574 = zext i1 %1573 to i8
  store i8 %1574, i8* %42, align 1, !tbaa !2450
  %1575 = add i64 %1548, -32
  %1576 = add i64 %1804, 10
  store i64 %1576, i64* %PC, align 8
  %1577 = inttoptr i64 %1575 to i64*
  %1578 = load i64, i64* %1577, align 8
  store i64 %1578, i64* %RCX, align 8, !tbaa !2428
  %1579 = add i64 %1804, 12
  store i64 %1579, i64* %PC, align 8
  %1580 = inttoptr i64 %1578 to i32*
  store i32 %1553, i32* %1580, align 4
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_401c2d

block_401b45:                                     ; preds = %block_401ad7, %block_401afe
  %1581 = phi i64 [ %1409, %block_401ad7 ], [ %.pre21, %block_401afe ]
  %1582 = phi i64 [ %1444, %block_401ad7 ], [ %.pre20, %block_401afe ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1583 = add i64 %1581, -16
  %1584 = add i64 %1582, 8
  store i64 %1584, i64* %PC, align 8
  %1585 = inttoptr i64 %1583 to i32*
  %1586 = load i32, i32* %1585, align 4
  %1587 = zext i32 %1586 to i64
  store i64 %1587, i64* %RCX, align 8, !tbaa !2428
  %1588 = add i64 %1581, -44
  %1589 = add i64 %1582, 11
  store i64 %1589, i64* %PC, align 8
  %1590 = inttoptr i64 %1588 to i32*
  %1591 = load i32, i32* %1590, align 4
  %1592 = add i32 %1591, 1
  %1593 = zext i32 %1592 to i64
  store i64 %1593, i64* %RDX, align 8, !tbaa !2428
  %1594 = lshr i32 %1592, 31
  %1595 = sub i32 %1586, %1592
  %1596 = zext i32 %1595 to i64
  store i64 %1596, i64* %RCX, align 8, !tbaa !2428
  %1597 = icmp ult i32 %1586, %1592
  %1598 = zext i1 %1597 to i8
  store i8 %1598, i8* %18, align 1, !tbaa !2432
  %1599 = and i32 %1595, 255
  %1600 = tail call i32 @llvm.ctpop.i32(i32 %1599) #10
  %1601 = trunc i32 %1600 to i8
  %1602 = and i8 %1601, 1
  %1603 = xor i8 %1602, 1
  store i8 %1603, i8* %25, align 1, !tbaa !2446
  %1604 = xor i32 %1592, %1586
  %1605 = xor i32 %1604, %1595
  %1606 = lshr i32 %1605, 4
  %1607 = trunc i32 %1606 to i8
  %1608 = and i8 %1607, 1
  store i8 %1608, i8* %30, align 1, !tbaa !2447
  %1609 = icmp eq i32 %1595, 0
  %1610 = zext i1 %1609 to i8
  store i8 %1610, i8* %33, align 1, !tbaa !2448
  %1611 = lshr i32 %1595, 31
  %1612 = trunc i32 %1611 to i8
  store i8 %1612, i8* %36, align 1, !tbaa !2449
  %1613 = lshr i32 %1586, 31
  %1614 = xor i32 %1594, %1613
  %1615 = xor i32 %1611, %1613
  %1616 = add nuw nsw i32 %1615, %1614
  %1617 = icmp eq i32 %1616, 2
  %1618 = zext i1 %1617 to i8
  store i8 %1618, i8* %42, align 1, !tbaa !2450
  %1619 = add i64 %1581, -36
  %1620 = add i64 %1582, 21
  store i64 %1620, i64* %PC, align 8
  %1621 = inttoptr i64 %1619 to i32*
  %1622 = load i32, i32* %1621, align 4
  store i32 %1622, i32* %1325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1338, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2451
  %1623 = add i64 %1581, -8
  %1624 = add i64 %1582, 25
  store i64 %1624, i64* %PC, align 8
  %1625 = inttoptr i64 %1623 to i64*
  %1626 = load i64, i64* %1625, align 8
  store i64 %1626, i64* %RSI, align 8, !tbaa !2428
  %1627 = add i64 %1581, -12
  %1628 = add i64 %1582, 28
  store i64 %1628, i64* %PC, align 8
  %1629 = inttoptr i64 %1627 to i32*
  %1630 = load i32, i32* %1629, align 4
  %1631 = zext i32 %1630 to i64
  store i64 %1631, i64* %RDX, align 8, !tbaa !2428
  %1632 = add i64 %1582, 32
  store i64 %1632, i64* %PC, align 8
  %1633 = load i32, i32* %1590, align 4
  %1634 = sext i32 %1630 to i64
  %1635 = sext i32 %1633 to i64
  %1636 = mul nsw i64 %1635, %1634
  %1637 = trunc i64 %1636 to i32
  %1638 = and i64 %1636, 4294967295
  store i64 %1638, i64* %RDX, align 8, !tbaa !2428
  %1639 = shl i64 %1636, 32
  %1640 = ashr exact i64 %1639, 32
  %1641 = icmp ne i64 %1640, %1636
  %1642 = zext i1 %1641 to i8
  store i8 %1642, i8* %18, align 1, !tbaa !2432
  %1643 = and i32 %1637, 255
  %1644 = tail call i32 @llvm.ctpop.i32(i32 %1643) #10
  %1645 = trunc i32 %1644 to i8
  %1646 = and i8 %1645, 1
  %1647 = xor i8 %1646, 1
  store i8 %1647, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1648 = lshr i32 %1637, 31
  %1649 = trunc i32 %1648 to i8
  store i8 %1649, i8* %36, align 1, !tbaa !2449
  store i8 %1642, i8* %42, align 1, !tbaa !2450
  %1650 = add i64 %1582, 35
  store i64 %1650, i64* %PC, align 8
  %1651 = load i32, i32* %1590, align 4
  %1652 = add i32 %1637, 1
  %1653 = add i32 %1652, %1651
  %1654 = zext i32 %1653 to i64
  store i64 %1654, i64* %RDX, align 8, !tbaa !2428
  %1655 = sext i32 %1653 to i64
  %1656 = shl nsw i64 %1655, 2
  store i64 %1656, i64* %RDI, align 8, !tbaa !2428
  %1657 = add i64 %1656, %1626
  store i64 %1657, i64* %RSI, align 8, !tbaa !2428
  %1658 = icmp ult i64 %1657, %1626
  %1659 = icmp ult i64 %1657, %1656
  %1660 = or i1 %1658, %1659
  %1661 = zext i1 %1660 to i8
  store i8 %1661, i8* %18, align 1, !tbaa !2432
  %1662 = trunc i64 %1657 to i32
  %1663 = and i32 %1662, 255
  %1664 = tail call i32 @llvm.ctpop.i32(i32 %1663) #10
  %1665 = trunc i32 %1664 to i8
  %1666 = and i8 %1665, 1
  %1667 = xor i8 %1666, 1
  store i8 %1667, i8* %25, align 1, !tbaa !2446
  %1668 = xor i64 %1656, %1626
  %1669 = xor i64 %1668, %1657
  %1670 = lshr i64 %1669, 4
  %1671 = trunc i64 %1670 to i8
  %1672 = and i8 %1671, 1
  store i8 %1672, i8* %30, align 1, !tbaa !2447
  %1673 = icmp eq i64 %1657, 0
  %1674 = zext i1 %1673 to i8
  store i8 %1674, i8* %33, align 1, !tbaa !2448
  %1675 = lshr i64 %1657, 63
  %1676 = trunc i64 %1675 to i8
  store i8 %1676, i8* %36, align 1, !tbaa !2449
  %1677 = lshr i64 %1626, 63
  %1678 = lshr i64 %1655, 61
  %1679 = and i64 %1678, 1
  %1680 = xor i64 %1675, %1677
  %1681 = xor i64 %1675, %1679
  %1682 = add nuw nsw i64 %1680, %1681
  %1683 = icmp eq i64 %1682, 2
  %1684 = zext i1 %1683 to i8
  store i8 %1684, i8* %42, align 1, !tbaa !2450
  %1685 = load i64, i64* %RBP, align 8
  %1686 = add i64 %1685, -8
  %1687 = add i64 %1582, 52
  store i64 %1687, i64* %PC, align 8
  %1688 = inttoptr i64 %1686 to i64*
  %1689 = load i64, i64* %1688, align 8
  store i64 %1689, i64* %RDI, align 8, !tbaa !2428
  %1690 = add i64 %1685, -12
  %1691 = add i64 %1582, 55
  store i64 %1691, i64* %PC, align 8
  %1692 = inttoptr i64 %1690 to i32*
  %1693 = load i32, i32* %1692, align 4
  %1694 = zext i32 %1693 to i64
  store i64 %1694, i64* %RDX, align 8, !tbaa !2428
  %1695 = add i64 %1685, -40
  %1696 = add i64 %1582, 59
  store i64 %1696, i64* %PC, align 8
  %1697 = inttoptr i64 %1695 to i32*
  %1698 = load i32, i32* %1697, align 4
  %1699 = sext i32 %1693 to i64
  %1700 = sext i32 %1698 to i64
  %1701 = mul nsw i64 %1700, %1699
  %1702 = trunc i64 %1701 to i32
  %1703 = and i64 %1701, 4294967295
  store i64 %1703, i64* %RDX, align 8, !tbaa !2428
  %1704 = shl i64 %1701, 32
  %1705 = ashr exact i64 %1704, 32
  %1706 = icmp ne i64 %1705, %1701
  %1707 = zext i1 %1706 to i8
  store i8 %1707, i8* %18, align 1, !tbaa !2432
  %1708 = and i32 %1702, 255
  %1709 = tail call i32 @llvm.ctpop.i32(i32 %1708) #10
  %1710 = trunc i32 %1709 to i8
  %1711 = and i8 %1710, 1
  %1712 = xor i8 %1711, 1
  store i8 %1712, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1713 = lshr i32 %1702, 31
  %1714 = trunc i32 %1713 to i8
  store i8 %1714, i8* %36, align 1, !tbaa !2449
  store i8 %1707, i8* %42, align 1, !tbaa !2450
  %1715 = add i64 %1685, -44
  %1716 = add i64 %1582, 62
  store i64 %1716, i64* %PC, align 8
  %1717 = inttoptr i64 %1715 to i32*
  %1718 = load i32, i32* %1717, align 4
  %1719 = add i32 %1702, 1
  %1720 = add i32 %1719, %1718
  %1721 = sext i32 %1720 to i64
  %1722 = shl nsw i64 %1721, 2
  store i64 %1722, i64* %R8, align 8, !tbaa !2428
  %1723 = add i64 %1722, %1689
  %1724 = icmp ult i64 %1723, %1689
  %1725 = icmp ult i64 %1723, %1722
  %1726 = or i1 %1724, %1725
  %1727 = zext i1 %1726 to i8
  store i8 %1727, i8* %18, align 1, !tbaa !2432
  %1728 = trunc i64 %1723 to i32
  %1729 = and i32 %1728, 255
  %1730 = tail call i32 @llvm.ctpop.i32(i32 %1729) #10
  %1731 = trunc i32 %1730 to i8
  %1732 = and i8 %1731, 1
  %1733 = xor i8 %1732, 1
  store i8 %1733, i8* %25, align 1, !tbaa !2446
  %1734 = xor i64 %1722, %1689
  %1735 = xor i64 %1734, %1723
  %1736 = lshr i64 %1735, 4
  %1737 = trunc i64 %1736 to i8
  %1738 = and i8 %1737, 1
  store i8 %1738, i8* %30, align 1, !tbaa !2447
  %1739 = icmp eq i64 %1723, 0
  %1740 = zext i1 %1739 to i8
  store i8 %1740, i8* %33, align 1, !tbaa !2448
  %1741 = lshr i64 %1723, 63
  %1742 = trunc i64 %1741 to i8
  store i8 %1742, i8* %36, align 1, !tbaa !2449
  %1743 = lshr i64 %1689, 63
  %1744 = lshr i64 %1721, 61
  %1745 = and i64 %1744, 1
  %1746 = xor i64 %1741, %1743
  %1747 = xor i64 %1741, %1745
  %1748 = add nuw nsw i64 %1746, %1747
  %1749 = icmp eq i64 %1748, 2
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %42, align 1, !tbaa !2450
  %1751 = add i64 %1685, -64
  %1752 = add i64 %1582, 79
  store i64 %1752, i64* %PC, align 8
  %1753 = inttoptr i64 %1751 to i64*
  store i64 %1723, i64* %1753, align 8
  %1754 = load i32, i32* %ECX, align 4
  %1755 = zext i32 %1754 to i64
  %1756 = load i64, i64* %PC, align 8
  store i64 %1755, i64* %RDI, align 8, !tbaa !2428
  %1757 = load i32, i32* %EAX, align 4
  %1758 = zext i32 %1757 to i64
  store i64 %1758, i64* %RDX, align 8, !tbaa !2428
  %1759 = load i64, i64* %RBP, align 8
  %1760 = add i64 %1759, -64
  %1761 = add i64 %1756, 8
  store i64 %1761, i64* %PC, align 8
  %1762 = inttoptr i64 %1760 to i64*
  %1763 = load i64, i64* %1762, align 8
  store i64 %1763, i64* %RCX, align 8, !tbaa !2428
  store i64 %1758, i64* %R8, align 8, !tbaa !2428
  %1764 = add i64 %1756, 3308
  %1765 = add i64 %1756, 16
  %1766 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1767 = add i64 %1766, -8
  %1768 = inttoptr i64 %1767 to i64*
  store i64 %1765, i64* %1768, align 8
  store i64 %1767, i64* %RSP, align 8, !tbaa !2428
  store i64 %1764, i64* %PC, align 8, !tbaa !2428
  %1769 = tail call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* nonnull %0, i64 %1764, %struct.Memory* %1147)
  %1770 = load i64, i64* %RBP, align 8
  %1771 = add i64 %1770, -40
  %1772 = load i64, i64* %PC, align 8
  %1773 = add i64 %1772, 3
  store i64 %1773, i64* %PC, align 8
  %1774 = inttoptr i64 %1771 to i32*
  %1775 = load i32, i32* %1774, align 4
  %1776 = add i32 %1775, 1
  %1777 = zext i32 %1776 to i64
  store i64 %1777, i64* %RAX, align 8, !tbaa !2428
  %1778 = icmp eq i32 %1775, -1
  %1779 = icmp eq i32 %1776, 0
  %1780 = or i1 %1778, %1779
  %1781 = zext i1 %1780 to i8
  store i8 %1781, i8* %18, align 1, !tbaa !2432
  %1782 = and i32 %1776, 255
  %1783 = tail call i32 @llvm.ctpop.i32(i32 %1782) #10
  %1784 = trunc i32 %1783 to i8
  %1785 = and i8 %1784, 1
  %1786 = xor i8 %1785, 1
  store i8 %1786, i8* %25, align 1, !tbaa !2446
  %1787 = xor i32 %1776, %1775
  %1788 = lshr i32 %1787, 4
  %1789 = trunc i32 %1788 to i8
  %1790 = and i8 %1789, 1
  store i8 %1790, i8* %30, align 1, !tbaa !2447
  %1791 = zext i1 %1779 to i8
  store i8 %1791, i8* %33, align 1, !tbaa !2448
  %1792 = lshr i32 %1776, 31
  %1793 = trunc i32 %1792 to i8
  store i8 %1793, i8* %36, align 1, !tbaa !2449
  %1794 = lshr i32 %1775, 31
  %1795 = xor i32 %1792, %1794
  %1796 = add nuw nsw i32 %1795, %1792
  %1797 = icmp eq i32 %1796, 2
  %1798 = zext i1 %1797 to i8
  store i8 %1798, i8* %42, align 1, !tbaa !2450
  %1799 = add i64 %1772, 9
  store i64 %1799, i64* %PC, align 8
  store i32 %1776, i32* %1774, align 4
  %1800 = load i64, i64* %PC, align 8
  %1801 = add i64 %1800, -226
  store i64 %1801, i64* %PC, align 8, !tbaa !2428
  br label %block_401acb

block_401c1b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1802 = load i8, i8* %25, align 1, !tbaa !2446
  %1803 = icmp ne i8 %1802, 0
  %.v53 = select i1 %1803, i64 18, i64 6
  %1804 = add i64 %.v53, %1319
  store i64 %1804, i64* %PC, align 8, !tbaa !2428
  %1805 = icmp eq i8 %1802, 1
  br i1 %1805, label %block_401c2d, label %block_401c21
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400630_what_date(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400630:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, 5
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %6 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %PC, align 8, !tbaa !2428
  %15 = add i64 %6, 8
  store i64 %15, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4005b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #10
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_4005b9, label %block_4005d0

block_4005d0:                                     ; preds = %block_4005b0
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4005b9:                                     ; preds = %block_4005b0
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400540_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c40_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401c40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %7 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -104
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 96
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2432
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #10
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2446
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = add i64 %12, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = add i64 %15, 11
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -12
  %50 = load i32, i32* %ESI, align 4
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = load i32, i32* %EDX, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -32
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -36
  %74 = load i32, i32* %R9D, align 4
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %73 to i32*
  store i32 %74, i32* %77, align 4
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -16
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = add i32 %83, -1
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RDX, align 8, !tbaa !2428
  %86 = icmp eq i32 %83, 0
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %19, align 1, !tbaa !2432
  %88 = and i32 %84, 255
  %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #10
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  store i8 %92, i8* %26, align 1, !tbaa !2446
  %93 = xor i32 %84, %83
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  store i8 %96, i8* %31, align 1, !tbaa !2447
  %97 = icmp eq i32 %84, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %34, align 1, !tbaa !2448
  %99 = lshr i32 %84, 31
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %37, align 1, !tbaa !2449
  %101 = lshr i32 %83, 31
  %102 = xor i32 %99, %101
  %103 = add nuw nsw i32 %102, %101
  %104 = icmp eq i32 %103, 2
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %43, align 1, !tbaa !2450
  %106 = add i64 %78, -56
  %107 = add i64 %80, 9
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i32*
  store i32 %84, i32* %108, align 4
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -36
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113, align 4
  store i8 0, i8* %19, align 1, !tbaa !2432
  %115 = and i32 %114, 255
  %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #10
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  store i8 %119, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  %120 = icmp eq i32 %114, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %34, align 1, !tbaa !2448
  %122 = lshr i32 %114, 31
  %123 = trunc i32 %122 to i8
  store i8 %123, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %.v = select i1 %120, i64 10, i64 417
  %124 = add i64 %.v, %111
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  br i1 %120, label %block_401c71, label %block_401e08

block_401c7b:                                     ; preds = %block_401c71
  %125 = add i64 %109, -44
  %126 = add i64 %1305, 7
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i32*
  store i32 0, i32* %127, align 4
  %128 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %129 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %130 = getelementptr inbounds i8, i8* %128, i64 4
  %131 = bitcast i8* %130 to float*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %133 = bitcast i64* %132 to float*
  %134 = getelementptr inbounds i8, i8* %128, i64 12
  %135 = bitcast i8* %134 to float*
  %136 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401c82

block_401d64:                                     ; preds = %block_401d58
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %511, 8
  store i64 %137, i64* %PC, align 8
  %138 = load i32, i32* %483, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = add i64 %511, 11
  store i64 %140, i64* %PC, align 8
  %141 = load i32, i32* %478, align 4
  %142 = add i32 %141, 1
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RDX, align 8, !tbaa !2428
  %144 = lshr i32 %142, 31
  %145 = sub i32 %138, %142
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %RCX, align 8, !tbaa !2428
  %147 = icmp ult i32 %138, %142
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %19, align 1, !tbaa !2432
  %149 = and i32 %145, 255
  %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #10
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  store i8 %153, i8* %26, align 1, !tbaa !2446
  %154 = xor i32 %142, %138
  %155 = xor i32 %154, %145
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  store i8 %158, i8* %31, align 1, !tbaa !2447
  %159 = icmp eq i32 %145, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %34, align 1, !tbaa !2448
  %161 = lshr i32 %145, 31
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %37, align 1, !tbaa !2449
  %163 = lshr i32 %138, 31
  %164 = xor i32 %144, %163
  %165 = xor i32 %161, %163
  %166 = add nuw nsw i32 %165, %164
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %43, align 1, !tbaa !2450
  %169 = add i64 %475, -44
  %170 = add i64 %511, 19
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i32*
  store i32 %145, i32* %171, align 4
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -32
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %173 to i64*
  %177 = load i64, i64* %176, align 8
  store i64 %177, i64* %RSI, align 8, !tbaa !2428
  %178 = add i64 %172, -44
  %179 = add i64 %174, 8
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %183 = shl nsw i64 %182, 2
  %184 = add i64 %183, %177
  %185 = add i64 %174, 13
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %184 to i32*
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %188 = add i64 %172, -8
  %189 = add i64 %174, 17
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %RSI, align 8, !tbaa !2428
  %192 = add i64 %172, -12
  %193 = add i64 %174, 20
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = add i64 %174, 24
  store i64 %197, i64* %PC, align 8
  %198 = load i32, i32* %180, align 4
  %199 = sext i32 %195 to i64
  %200 = sext i32 %198 to i64
  %201 = mul nsw i64 %200, %199
  %202 = trunc i64 %201 to i32
  %203 = and i64 %201, 4294967295
  store i64 %203, i64* %RCX, align 8, !tbaa !2428
  %204 = shl i64 %201, 32
  %205 = ashr exact i64 %204, 32
  %206 = icmp ne i64 %205, %201
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %19, align 1, !tbaa !2432
  %208 = and i32 %202, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #10
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %213 = lshr i32 %202, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %37, align 1, !tbaa !2449
  store i8 %207, i8* %43, align 1, !tbaa !2450
  %215 = add i64 %174, 27
  store i64 %215, i64* %PC, align 8
  %216 = load i32, i32* %180, align 4
  %217 = add i32 %216, %202
  %218 = zext i32 %217 to i64
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = icmp ult i32 %217, %202
  %220 = icmp ult i32 %217, %216
  %221 = or i1 %219, %220
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %19, align 1, !tbaa !2432
  %223 = and i32 %217, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223) #10
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %26, align 1, !tbaa !2446
  %228 = xor i32 %216, %202
  %229 = xor i32 %228, %217
  %230 = lshr i32 %229, 4
  %231 = trunc i32 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %31, align 1, !tbaa !2447
  %233 = icmp eq i32 %217, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %34, align 1, !tbaa !2448
  %235 = lshr i32 %217, 31
  %236 = trunc i32 %235 to i8
  store i8 %236, i8* %37, align 1, !tbaa !2449
  %237 = lshr i32 %216, 31
  %238 = xor i32 %235, %213
  %239 = xor i32 %235, %237
  %240 = add nuw nsw i32 %238, %239
  %241 = icmp eq i32 %240, 2
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %43, align 1, !tbaa !2450
  %243 = sext i32 %217 to i64
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %244 = shl nsw i64 %243, 2
  %245 = add i64 %244, %191
  %246 = add i64 %174, 35
  store i64 %246, i64* %PC, align 8
  %247 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %248 = load <2 x i32>, <2 x i32>* %563, align 1
  %249 = inttoptr i64 %245 to float*
  %250 = load float, float* %249, align 4
  %251 = extractelement <2 x float> %247, i32 0
  %252 = fdiv float %251, %250
  store float %252, float* %562, align 1, !tbaa !2451
  %253 = bitcast <2 x float> %247 to <2 x i32>
  %254 = extractelement <2 x i32> %253, i32 1
  store i32 %254, i32* %564, align 1, !tbaa !2451
  %255 = extractelement <2 x i32> %248, i32 0
  store i32 %255, i32* %565, align 1, !tbaa !2451
  %256 = extractelement <2 x i32> %248, i32 1
  store i32 %256, i32* %566, align 1, !tbaa !2451
  %257 = load i64, i64* %RBP, align 8
  %258 = add i64 %257, -32
  %259 = add i64 %174, 39
  store i64 %259, i64* %PC, align 8
  %260 = inttoptr i64 %258 to i64*
  %261 = load i64, i64* %260, align 8
  store i64 %261, i64* %RSI, align 8, !tbaa !2428
  %262 = add i64 %257, -44
  %263 = add i64 %174, 43
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %262 to i32*
  %265 = load i32, i32* %264, align 4
  %266 = sext i32 %265 to i64
  store i64 %266, i64* %RDI, align 8, !tbaa !2428
  %267 = shl nsw i64 %266, 2
  %268 = add i64 %267, %261
  %269 = add i64 %174, 48
  store i64 %269, i64* %PC, align 8
  %270 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %271 = extractelement <2 x float> %270, i32 0
  %272 = inttoptr i64 %268 to float*
  store float %271, float* %272, align 4
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -32
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %274 to i64*
  %278 = load i64, i64* %277, align 8
  store i64 %278, i64* %RSI, align 8, !tbaa !2428
  %279 = add i64 %273, -44
  %280 = add i64 %275, 8
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %279 to i32*
  %282 = load i32, i32* %281, align 4
  %283 = sext i32 %282 to i64
  store i64 %283, i64* %RDI, align 8, !tbaa !2428
  %284 = shl nsw i64 %283, 2
  %285 = add i64 %284, %278
  %286 = add i64 %275, 13
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %285 to i32*
  %288 = load i32, i32* %287, align 4
  store i32 %288, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %289 = load i64, i64* %567, align 1
  %290 = trunc i64 %289 to i32
  store i32 %290, i32* %ECX, align 1, !tbaa !2453
  store i32 0, i32* %569, align 1, !tbaa !2453
  %291 = load i64, i64* %RCX, align 8
  %292 = xor i64 %291, -2147483648
  %293 = trunc i64 %292 to i32
  %294 = and i64 %292, 4294967295
  store i64 %294, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2432
  %295 = and i32 %293, 255
  %296 = tail call i32 @llvm.ctpop.i32(i32 %295) #10
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  %299 = xor i8 %298, 1
  store i8 %299, i8* %26, align 1, !tbaa !2446
  %300 = icmp eq i32 %293, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %34, align 1, !tbaa !2448
  %302 = lshr i32 %293, 31
  %303 = trunc i32 %302 to i8
  store i8 %303, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i32 %293, i32* %.pre-phi30, align 1, !tbaa !2453
  store i32 0, i32* %564, align 1, !tbaa !2453
  store i32 0, i32* %565, align 1, !tbaa !2453
  store i32 0, i32* %566, align 1, !tbaa !2453
  %304 = add i64 %273, -40
  %305 = add i64 %275, 32
  store i64 %305, i64* %PC, align 8
  %306 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %307 = extractelement <2 x float> %306, i32 0
  %308 = inttoptr i64 %304 to float*
  store float %307, float* %308, align 4
  %309 = load i64, i64* %RBP, align 8
  %310 = add i64 %309, -44
  %311 = load i64, i64* %PC, align 8
  %312 = add i64 %311, 3
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %310 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %RDI, align 8, !tbaa !2428
  %316 = add i64 %309, -40
  %317 = add i64 %311, 8
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %316 to i32*
  %319 = load i32, i32* %318, align 4
  store i32 %319, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %320 = add i64 %309, -8
  %321 = add i64 %311, 12
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i64*
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %RSI, align 8, !tbaa !2428
  %324 = add i64 %309, -12
  %325 = add i64 %311, 15
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i32*
  %327 = load i32, i32* %326, align 4
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %RCX, align 8, !tbaa !2428
  %329 = add i64 %311, 19
  store i64 %329, i64* %PC, align 8
  %330 = load i32, i32* %313, align 4
  %331 = sext i32 %327 to i64
  %332 = sext i32 %330 to i64
  %333 = mul nsw i64 %332, %331
  %334 = and i64 %333, 4294967295
  store i64 %334, i64* %RCX, align 8, !tbaa !2428
  %sext = shl i64 %333, 32
  %335 = ashr exact i64 %sext, 30
  store i64 %335, i64* %R8, align 8, !tbaa !2428
  %336 = add i64 %335, %323
  store i64 %336, i64* %RSI, align 8, !tbaa !2428
  %337 = icmp ult i64 %336, %323
  %338 = icmp ult i64 %336, %335
  %339 = or i1 %337, %338
  %340 = zext i1 %339 to i8
  store i8 %340, i8* %19, align 1, !tbaa !2432
  %341 = trunc i64 %336 to i32
  %342 = and i32 %341, 255
  %343 = tail call i32 @llvm.ctpop.i32(i32 %342) #10
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %26, align 1, !tbaa !2446
  %347 = xor i64 %335, %323
  %348 = xor i64 %347, %336
  %349 = lshr i64 %348, 4
  %350 = trunc i64 %349 to i8
  %351 = and i8 %350, 1
  store i8 %351, i8* %31, align 1, !tbaa !2447
  %352 = icmp eq i64 %336, 0
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %34, align 1, !tbaa !2448
  %354 = lshr i64 %336, 63
  %355 = trunc i64 %354 to i8
  store i8 %355, i8* %37, align 1, !tbaa !2449
  %356 = lshr i64 %323, 63
  %357 = lshr i64 %335, 63
  %358 = xor i64 %354, %356
  %359 = xor i64 %354, %357
  %360 = add nuw nsw i64 %358, %359
  %361 = icmp eq i64 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %43, align 1, !tbaa !2450
  %363 = add i64 %309, -32
  %364 = add i64 %311, 36
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %RCX, align 8, !tbaa !2428
  %367 = load i32, i32* %EAX, align 4
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %RDX, align 8, !tbaa !2428
  store i64 %368, i64* %R8, align 8, !tbaa !2428
  %369 = add i64 %311, 2745
  %370 = add i64 %311, 46
  %371 = load i64, i64* %RSP, align 8, !tbaa !2428
  %372 = add i64 %371, -8
  %373 = inttoptr i64 %372 to i64*
  store i64 %370, i64* %373, align 8
  store i64 %372, i64* %RSP, align 8, !tbaa !2428
  store i64 %369, i64* %PC, align 8, !tbaa !2428
  %374 = tail call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* nonnull %0, i64 %369, %struct.Memory* %2)
  %375 = load i64, i64* %RBP, align 8
  %376 = add i64 %375, -48
  %377 = load i64, i64* %PC, align 8
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %376 to i32*
  %380 = load i32, i32* %379, align 4
  %381 = add i32 %380, 1
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = icmp eq i32 %380, -1
  %384 = icmp eq i32 %381, 0
  %385 = or i1 %383, %384
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %19, align 1, !tbaa !2432
  %387 = and i32 %381, 255
  %388 = tail call i32 @llvm.ctpop.i32(i32 %387) #10
  %389 = trunc i32 %388 to i8
  %390 = and i8 %389, 1
  %391 = xor i8 %390, 1
  store i8 %391, i8* %26, align 1, !tbaa !2446
  %392 = xor i32 %381, %380
  %393 = lshr i32 %392, 4
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  store i8 %395, i8* %31, align 1, !tbaa !2447
  %396 = zext i1 %384 to i8
  store i8 %396, i8* %34, align 1, !tbaa !2448
  %397 = lshr i32 %381, 31
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %37, align 1, !tbaa !2449
  %399 = lshr i32 %380, 31
  %400 = xor i32 %397, %399
  %401 = add nuw nsw i32 %400, %397
  %402 = icmp eq i32 %401, 2
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %43, align 1, !tbaa !2450
  %404 = add i64 %377, 9
  store i64 %404, i64* %PC, align 8
  store i32 %381, i32* %379, align 4
  %405 = load i64, i64* %PC, align 8
  %406 = add i64 %405, -166
  store i64 %406, i64* %PC, align 8, !tbaa !2428
  br label %block_401d58

block_401f5c:                                     ; preds = %block_401eb9
  %407 = add i64 %893, -32
  %408 = add i64 %928, 4
  store i64 %408, i64* %PC, align 8
  %409 = inttoptr i64 %407 to i64*
  %410 = load i64, i64* %409, align 8
  store i64 %410, i64* %RAX, align 8, !tbaa !2428
  %411 = add i64 %928, 8
  store i64 %411, i64* %PC, align 8
  %412 = load i32, i32* %897, align 4
  %413 = sext i32 %412 to i64
  store i64 %413, i64* %RCX, align 8, !tbaa !2428
  %414 = shl nsw i64 %413, 2
  %415 = add i64 %414, %410
  %416 = add i64 %928, 13
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  store i32 %418, i32* %1580, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1582, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1584, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1586, align 1, !tbaa !2451
  %419 = add i64 %893, -40
  %420 = add i64 %928, 18
  store i64 %420, i64* %PC, align 8
  %421 = load <2 x float>, <2 x float>* %1577, align 1
  %422 = extractelement <2 x float> %421, i32 0
  %423 = inttoptr i64 %419 to float*
  store float %422, float* %423, align 4
  %424 = load i64, i64* %RBP, align 8
  %425 = add i64 %424, -32
  %426 = load i64, i64* %PC, align 8
  %427 = add i64 %426, 4
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %425 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = add i64 %424, -44
  %431 = add i64 %426, 8
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = sext i32 %433 to i64
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = shl nsw i64 %434, 2
  %436 = add i64 %435, %429
  %437 = add i64 %426, 13
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %436 to i32*
  %439 = load i32, i32* %438, align 4
  store i32 %439, i32* %1580, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1582, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1584, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1586, align 1, !tbaa !2451
  %440 = add i64 %426, 17
  store i64 %440, i64* %PC, align 8
  %441 = load i64, i64* %428, align 8
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = add i64 %424, -52
  %443 = add i64 %426, 21
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i32*
  %445 = load i32, i32* %444, align 4
  %446 = sext i32 %445 to i64
  store i64 %446, i64* %RCX, align 8, !tbaa !2428
  %447 = shl nsw i64 %446, 2
  %448 = add i64 %447, %441
  %449 = add i64 %426, 26
  store i64 %449, i64* %PC, align 8
  %450 = load <2 x float>, <2 x float>* %1577, align 1
  %451 = extractelement <2 x float> %450, i32 0
  %452 = inttoptr i64 %448 to float*
  store float %451, float* %452, align 4
  %453 = load i64, i64* %RBP, align 8
  %454 = add i64 %453, -40
  %455 = load i64, i64* %PC, align 8
  %456 = add i64 %455, 5
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %454 to i32*
  %458 = load i32, i32* %457, align 4
  store i32 %458, i32* %1580, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1582, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1584, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1586, align 1, !tbaa !2451
  %459 = add i64 %453, -32
  %460 = add i64 %455, 9
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %459 to i64*
  %462 = load i64, i64* %461, align 8
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = add i64 %453, -44
  %464 = add i64 %455, 13
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %463 to i32*
  %466 = load i32, i32* %465, align 4
  %467 = sext i32 %466 to i64
  store i64 %467, i64* %RCX, align 8, !tbaa !2428
  %468 = shl nsw i64 %467, 2
  %469 = add i64 %468, %462
  %470 = add i64 %455, 18
  store i64 %470, i64* %PC, align 8
  %471 = load <2 x float>, <2 x float>* %1577, align 1
  %472 = extractelement <2 x float> %471, i32 0
  %473 = inttoptr i64 %469 to float*
  store float %472, float* %473, align 4
  %.pre26 = load i64, i64* %PC, align 8
  %.pre27 = load i64, i64* %RBP, align 8
  br label %block_401f9a

block_401d58:                                     ; preds = %block_401d51, %block_401d64
  %474 = phi i64 [ %.pre23, %block_401d51 ], [ %406, %block_401d64 ]
  %475 = load i64, i64* %RBP, align 8
  %476 = add i64 %475, -48
  %477 = add i64 %474, 3
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to i32*
  %479 = load i32, i32* %478, align 4
  %480 = zext i32 %479 to i64
  store i64 %480, i64* %RAX, align 8, !tbaa !2428
  %481 = add i64 %475, -16
  %482 = add i64 %474, 6
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i32*
  %484 = load i32, i32* %483, align 4
  %485 = sub i32 %479, %484
  %486 = icmp ult i32 %479, %484
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %19, align 1, !tbaa !2432
  %488 = and i32 %485, 255
  %489 = tail call i32 @llvm.ctpop.i32(i32 %488) #10
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  store i8 %492, i8* %26, align 1, !tbaa !2446
  %493 = xor i32 %484, %479
  %494 = xor i32 %493, %485
  %495 = lshr i32 %494, 4
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  store i8 %497, i8* %31, align 1, !tbaa !2447
  %498 = icmp eq i32 %485, 0
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %34, align 1, !tbaa !2448
  %500 = lshr i32 %485, 31
  %501 = trunc i32 %500 to i8
  store i8 %501, i8* %37, align 1, !tbaa !2449
  %502 = lshr i32 %479, 31
  %503 = lshr i32 %484, 31
  %504 = xor i32 %503, %502
  %505 = xor i32 %500, %502
  %506 = add nuw nsw i32 %505, %504
  %507 = icmp eq i32 %506, 2
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %43, align 1, !tbaa !2450
  %509 = icmp ne i8 %501, 0
  %510 = xor i1 %509, %507
  %.v52 = select i1 %510, i64 12, i64 171
  %511 = add i64 %.v52, %474
  store i64 %511, i64* %PC, align 8, !tbaa !2428
  br i1 %510, label %block_401d64, label %block_401e03

block_401d4c:                                     ; preds = %block_401c82
  %512 = add i64 %1629, 5
  store i64 %512, i64* %PC, align 8, !tbaa !2428
  br label %block_401d51

block_401cba:                                     ; preds = %block_401c8e
  %513 = add i64 %1343, -32
  %514 = add i64 %1378, 4
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i64*
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = add i64 %1378, 8
  store i64 %517, i64* %PC, align 8
  %518 = load i32, i32* %1352, align 4
  %519 = sext i32 %518 to i64
  store i64 %519, i64* %RCX, align 8, !tbaa !2428
  %520 = shl nsw i64 %519, 2
  %521 = add i64 %520, %516
  %522 = add i64 %1378, 13
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i32*
  %524 = load i32, i32* %523, align 4
  store i32 %524, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %525 = add i64 %1378, 17
  store i64 %525, i64* %PC, align 8
  %526 = load i64, i64* %515, align 8
  store i64 %526, i64* %RAX, align 8, !tbaa !2428
  %527 = add i64 %1378, 21
  store i64 %527, i64* %PC, align 8
  %528 = load i32, i32* %1347, align 4
  %529 = sext i32 %528 to i64
  store i64 %529, i64* %RCX, align 8, !tbaa !2428
  %530 = shl nsw i64 %529, 2
  %531 = add i64 %530, %526
  %532 = add i64 %1378, 26
  store i64 %532, i64* %PC, align 8
  %533 = load <2 x float>, <2 x float>* %136, align 1
  %534 = extractelement <2 x float> %533, i32 0
  %535 = inttoptr i64 %531 to float*
  store float %534, float* %535, align 4
  %536 = load i64, i64* %RBP, align 8
  %537 = add i64 %536, -40
  %538 = load i64, i64* %PC, align 8
  %539 = add i64 %538, 5
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %537 to i32*
  %541 = load i32, i32* %540, align 4
  store i32 %541, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %542 = add i64 %536, -32
  %543 = add i64 %538, 9
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = add i64 %536, -44
  %547 = add i64 %538, 13
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = sext i32 %549 to i64
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %551 = shl nsw i64 %550, 2
  %552 = add i64 %551, %545
  %553 = add i64 %538, 18
  store i64 %553, i64* %PC, align 8
  %554 = load <2 x float>, <2 x float>* %136, align 1
  %555 = extractelement <2 x float> %554, i32 0
  %556 = inttoptr i64 %552 to float*
  store float %555, float* %556, align 4
  %.pre21 = load i64, i64* %PC, align 8
  %.pre22 = load i64, i64* %RBP, align 8
  br label %block_401ce6

block_401d51:                                     ; preds = %block_401c71.block_401d51_crit_edge, %block_401d4c
  %.pre-phi44 = phi <2 x float>* [ %.pre43, %block_401c71.block_401d51_crit_edge ], [ %136, %block_401d4c ]
  %.pre-phi42 = phi float* [ %.pre41, %block_401c71.block_401d51_crit_edge ], [ %135, %block_401d4c ]
  %.pre-phi40 = phi i8* [ %.pre39, %block_401c71.block_401d51_crit_edge ], [ %134, %block_401d4c ]
  %.pre-phi38 = phi float* [ %.pre37, %block_401c71.block_401d51_crit_edge ], [ %133, %block_401d4c ]
  %.pre-phi36 = phi i64* [ %.pre35, %block_401c71.block_401d51_crit_edge ], [ %132, %block_401d4c ]
  %.pre-phi34 = phi float* [ %.pre33, %block_401c71.block_401d51_crit_edge ], [ %131, %block_401d4c ]
  %.pre-phi32 = phi i8* [ %.pre31, %block_401c71.block_401d51_crit_edge ], [ %130, %block_401d4c ]
  %.pre-phi30 = phi i32* [ %.pre29, %block_401c71.block_401d51_crit_edge ], [ %129, %block_401d4c ]
  %557 = phi i64 [ %1305, %block_401c71.block_401d51_crit_edge ], [ %512, %block_401d4c ]
  %558 = phi i64 [ %109, %block_401c71.block_401d51_crit_edge ], [ %1593, %block_401d4c ]
  %559 = add i64 %558, -48
  %560 = add i64 %557, 7
  store i64 %560, i64* %PC, align 8
  %561 = inttoptr i64 %559 to i32*
  store i32 0, i32* %561, align 4
  %562 = bitcast [32 x %union.VectorReg]* %8 to float*
  %563 = bitcast i64* %.pre-phi36 to <2 x i32>*
  %564 = bitcast i8* %.pre-phi32 to i32*
  %565 = bitcast i64* %.pre-phi36 to i32*
  %566 = bitcast i8* %.pre-phi40 to i32*
  %567 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %568 = bitcast %union.anon* %4 to [2 x i32]*
  %569 = getelementptr inbounds [2 x i32], [2 x i32]* %568, i64 0, i64 1
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_401d58

block_401fb2.loopexit:                            ; preds = %block_401ead
  br label %block_401fb2

block_401fb2:                                     ; preds = %block_401fb2.loopexit, %block_401e9c
  %570 = phi i64 [ %956, %block_401e9c ], [ %610, %block_401fb2.loopexit ]
  %571 = add i64 %570, 5
  br label %block_401fb7

block_401ead:                                     ; preds = %block_401f9a, %block_401ea6
  %572 = phi i64 [ %1239, %block_401f9a ], [ %.pre25, %block_401ea6 ]
  %573 = load i64, i64* %RBP, align 8
  %574 = add i64 %573, -48
  %575 = add i64 %572, 3
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i32*
  %577 = load i32, i32* %576, align 4
  %578 = zext i32 %577 to i64
  store i64 %578, i64* %RAX, align 8, !tbaa !2428
  %579 = add i64 %573, -56
  %580 = add i64 %572, 6
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %579 to i32*
  %582 = load i32, i32* %581, align 4
  %583 = sub i32 %577, %582
  %584 = icmp ult i32 %577, %582
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %19, align 1, !tbaa !2432
  %586 = and i32 %583, 255
  %587 = tail call i32 @llvm.ctpop.i32(i32 %586) #10
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  %590 = xor i8 %589, 1
  store i8 %590, i8* %26, align 1, !tbaa !2446
  %591 = xor i32 %582, %577
  %592 = xor i32 %591, %583
  %593 = lshr i32 %592, 4
  %594 = trunc i32 %593 to i8
  %595 = and i8 %594, 1
  store i8 %595, i8* %31, align 1, !tbaa !2447
  %596 = icmp eq i32 %583, 0
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %34, align 1, !tbaa !2448
  %598 = lshr i32 %583, 31
  %599 = trunc i32 %598 to i8
  store i8 %599, i8* %37, align 1, !tbaa !2449
  %600 = lshr i32 %577, 31
  %601 = lshr i32 %582, 31
  %602 = xor i32 %601, %600
  %603 = xor i32 %598, %600
  %604 = add nuw nsw i32 %603, %602
  %605 = icmp eq i32 %604, 2
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %43, align 1, !tbaa !2450
  %607 = icmp ne i8 %599, 0
  %608 = xor i1 %607, %605
  %.v48 = select i1 %608, i64 12, i64 256
  %609 = add i64 %.v48, %572
  %610 = add i64 %609, 5
  store i64 %610, i64* %PC, align 8
  br i1 %608, label %block_401eb9, label %block_401fb2.loopexit

block_401ea6:                                     ; preds = %block_401e9c
  %611 = add i64 %1241, -48
  %612 = add i64 %956, 7
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %611 to i32*
  store i32 1, i32* %613, align 4
  %614 = bitcast %union.VectorReg* %9 to i8*
  %615 = bitcast %union.VectorReg* %9 to float*
  %616 = bitcast %union.VectorReg* %9 to i32*
  %617 = getelementptr inbounds i8, i8* %614, i64 4
  %618 = bitcast i8* %617 to float*
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %620 = bitcast i64* %619 to float*
  %621 = getelementptr inbounds i8, i8* %614, i64 12
  %622 = bitcast i8* %621 to float*
  %623 = bitcast %union.VectorReg* %9 to <2 x float>*
  %624 = bitcast i64* %619 to <2 x i32>*
  %625 = bitcast i8* %617 to i32*
  %626 = bitcast i64* %619 to i32*
  %627 = bitcast i8* %621 to i32*
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_401ead

block_401eb9:                                     ; preds = %block_401ead
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %628 = add i64 %573, -16
  %629 = add i64 %609, 8
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %628 to i32*
  %631 = load i32, i32* %630, align 4
  %632 = zext i32 %631 to i64
  store i64 %632, i64* %RCX, align 8, !tbaa !2428
  %633 = add i64 %609, 11
  store i64 %633, i64* %PC, align 8
  %634 = load i32, i32* %576, align 4
  %635 = add i32 %634, 1
  %636 = zext i32 %635 to i64
  store i64 %636, i64* %RDX, align 8, !tbaa !2428
  %637 = lshr i32 %635, 31
  %638 = sub i32 %631, %635
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RCX, align 8, !tbaa !2428
  %640 = icmp ult i32 %631, %635
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %19, align 1, !tbaa !2432
  %642 = and i32 %638, 255
  %643 = tail call i32 @llvm.ctpop.i32(i32 %642) #10
  %644 = trunc i32 %643 to i8
  %645 = and i8 %644, 1
  %646 = xor i8 %645, 1
  store i8 %646, i8* %26, align 1, !tbaa !2446
  %647 = xor i32 %635, %631
  %648 = xor i32 %647, %638
  %649 = lshr i32 %648, 4
  %650 = trunc i32 %649 to i8
  %651 = and i8 %650, 1
  store i8 %651, i8* %31, align 1, !tbaa !2447
  %652 = icmp eq i32 %638, 0
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %34, align 1, !tbaa !2448
  %654 = lshr i32 %638, 31
  %655 = trunc i32 %654 to i8
  store i8 %655, i8* %37, align 1, !tbaa !2449
  %656 = lshr i32 %631, 31
  %657 = xor i32 %637, %656
  %658 = xor i32 %654, %656
  %659 = add nuw nsw i32 %658, %657
  %660 = icmp eq i32 %659, 2
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %43, align 1, !tbaa !2450
  %662 = add i64 %573, -44
  %663 = add i64 %609, 19
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i32*
  store i32 %638, i32* %664, align 4
  %665 = load i64, i64* %RBP, align 8
  %666 = add i64 %665, -32
  %667 = load i64, i64* %PC, align 8
  %668 = add i64 %667, 4
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %666 to i64*
  %670 = load i64, i64* %669, align 8
  store i64 %670, i64* %RSI, align 8, !tbaa !2428
  %671 = add i64 %665, -44
  %672 = add i64 %667, 8
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = sext i32 %674 to i64
  store i64 %675, i64* %RDI, align 8, !tbaa !2428
  %676 = shl nsw i64 %675, 2
  %677 = add i64 %676, %670
  %678 = add i64 %667, 13
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i32*
  %680 = load i32, i32* %679, align 4
  store i32 %680, i32* %1580, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1582, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1584, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1586, align 1, !tbaa !2451
  %681 = add i64 %665, -16
  %682 = add i64 %667, 16
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %681 to i32*
  %684 = load i32, i32* %683, align 4
  %685 = zext i32 %684 to i64
  store i64 %685, i64* %RCX, align 8, !tbaa !2428
  %686 = add i64 %667, 19
  store i64 %686, i64* %PC, align 8
  %687 = load i32, i32* %673, align 4
  %688 = add i32 %687, 1
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %RDX, align 8, !tbaa !2428
  %690 = lshr i32 %688, 31
  %691 = sub i32 %684, %688
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RCX, align 8, !tbaa !2428
  %693 = icmp ult i32 %684, %688
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %19, align 1, !tbaa !2432
  %695 = and i32 %691, 255
  %696 = tail call i32 @llvm.ctpop.i32(i32 %695) #10
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  store i8 %699, i8* %26, align 1, !tbaa !2446
  %700 = xor i32 %688, %684
  %701 = xor i32 %700, %691
  %702 = lshr i32 %701, 4
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  store i8 %704, i8* %31, align 1, !tbaa !2447
  %705 = icmp eq i32 %691, 0
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %34, align 1, !tbaa !2448
  %707 = lshr i32 %691, 31
  %708 = trunc i32 %707 to i8
  store i8 %708, i8* %37, align 1, !tbaa !2449
  %709 = lshr i32 %684, 31
  %710 = xor i32 %690, %709
  %711 = xor i32 %707, %709
  %712 = add nuw nsw i32 %711, %710
  %713 = icmp eq i32 %712, 2
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %43, align 1, !tbaa !2450
  %715 = add i64 %665, -8
  %716 = add i64 %667, 28
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %715 to i64*
  %718 = load i64, i64* %717, align 8
  store i64 %718, i64* %RSI, align 8, !tbaa !2428
  %719 = add i64 %665, -12
  %720 = add i64 %667, 31
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %719 to i32*
  %722 = load i32, i32* %721, align 4
  %723 = zext i32 %722 to i64
  store i64 %723, i64* %RDX, align 8, !tbaa !2428
  %724 = add i64 %667, 35
  store i64 %724, i64* %PC, align 8
  %725 = load i32, i32* %673, align 4
  %726 = sext i32 %722 to i64
  %727 = sext i32 %725 to i64
  %728 = mul nsw i64 %727, %726
  %729 = trunc i64 %728 to i32
  %730 = and i64 %728, 4294967295
  store i64 %730, i64* %RDX, align 8, !tbaa !2428
  %731 = shl i64 %728, 32
  %732 = ashr exact i64 %731, 32
  %733 = icmp ne i64 %732, %728
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %19, align 1, !tbaa !2432
  %735 = and i32 %729, 255
  %736 = tail call i32 @llvm.ctpop.i32(i32 %735) #10
  %737 = trunc i32 %736 to i8
  %738 = and i8 %737, 1
  %739 = xor i8 %738, 1
  store i8 %739, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %740 = lshr i32 %729, 31
  %741 = trunc i32 %740 to i8
  store i8 %741, i8* %37, align 1, !tbaa !2449
  store i8 %734, i8* %43, align 1, !tbaa !2450
  %742 = add i64 %667, 38
  store i64 %742, i64* %PC, align 8
  %743 = load i32, i32* %673, align 4
  %744 = add i32 %729, 1
  %745 = add i32 %744, %743
  %746 = zext i32 %745 to i64
  store i64 %746, i64* %RDX, align 8, !tbaa !2428
  %747 = sext i32 %745 to i64
  %748 = shl nsw i64 %747, 2
  store i64 %748, i64* %RDI, align 8, !tbaa !2428
  %749 = add i64 %748, %718
  store i64 %749, i64* %RSI, align 8, !tbaa !2428
  %750 = icmp ult i64 %749, %718
  %751 = icmp ult i64 %749, %748
  %752 = or i1 %750, %751
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %19, align 1, !tbaa !2432
  %754 = trunc i64 %749 to i32
  %755 = and i32 %754, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #10
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %26, align 1, !tbaa !2446
  %760 = xor i64 %748, %718
  %761 = xor i64 %760, %749
  %762 = lshr i64 %761, 4
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %31, align 1, !tbaa !2447
  %765 = icmp eq i64 %749, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %34, align 1, !tbaa !2448
  %767 = lshr i64 %749, 63
  %768 = trunc i64 %767 to i8
  store i8 %768, i8* %37, align 1, !tbaa !2449
  %769 = lshr i64 %718, 63
  %770 = lshr i64 %747, 61
  %771 = and i64 %770, 1
  %772 = xor i64 %767, %769
  %773 = xor i64 %767, %771
  %774 = add nuw nsw i64 %772, %773
  %775 = icmp eq i64 %774, 2
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %43, align 1, !tbaa !2450
  %777 = load i64, i64* %RBP, align 8
  %778 = add i64 %777, -32
  %779 = add i64 %667, 55
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %778 to i64*
  %781 = load i64, i64* %780, align 8
  store i64 %781, i64* %RDI, align 8, !tbaa !2428
  %782 = add i64 %777, -44
  %783 = add i64 %667, 58
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %782 to i32*
  %785 = load i32, i32* %784, align 4
  %786 = add i32 %785, 1
  %787 = sext i32 %786 to i64
  %788 = shl nsw i64 %787, 2
  store i64 %788, i64* %R8, align 8, !tbaa !2428
  %789 = add i64 %788, %781
  %790 = icmp ult i64 %789, %781
  %791 = icmp ult i64 %789, %788
  %792 = or i1 %790, %791
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %19, align 1, !tbaa !2432
  %794 = trunc i64 %789 to i32
  %795 = and i32 %794, 255
  %796 = tail call i32 @llvm.ctpop.i32(i32 %795) #10
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = xor i8 %798, 1
  store i8 %799, i8* %26, align 1, !tbaa !2446
  %800 = xor i64 %788, %781
  %801 = xor i64 %800, %789
  %802 = lshr i64 %801, 4
  %803 = trunc i64 %802 to i8
  %804 = and i8 %803, 1
  store i8 %804, i8* %31, align 1, !tbaa !2447
  %805 = icmp eq i64 %789, 0
  %806 = zext i1 %805 to i8
  store i8 %806, i8* %34, align 1, !tbaa !2448
  %807 = lshr i64 %789, 63
  %808 = trunc i64 %807 to i8
  store i8 %808, i8* %37, align 1, !tbaa !2449
  %809 = lshr i64 %781, 63
  %810 = lshr i64 %787, 61
  %811 = and i64 %810, 1
  %812 = xor i64 %807, %809
  %813 = xor i64 %807, %811
  %814 = add nuw nsw i64 %812, %813
  %815 = icmp eq i64 %814, 2
  %816 = zext i1 %815 to i8
  store i8 %816, i8* %43, align 1, !tbaa !2450
  %817 = add i64 %777, -80
  %818 = add i64 %667, 75
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %817 to i64*
  store i64 %789, i64* %819, align 8
  %820 = load i32, i32* %ECX, align 4
  %821 = zext i32 %820 to i64
  %822 = load i64, i64* %PC, align 8
  store i64 %821, i64* %RDI, align 8, !tbaa !2428
  %823 = load i32, i32* %EAX, align 4
  %824 = zext i32 %823 to i64
  store i64 %824, i64* %RDX, align 8, !tbaa !2428
  %825 = load i64, i64* %RBP, align 8
  %826 = add i64 %825, -80
  %827 = add i64 %822, 8
  store i64 %827, i64* %PC, align 8
  %828 = inttoptr i64 %826 to i64*
  %829 = load i64, i64* %828, align 8
  store i64 %829, i64* %RCX, align 8, !tbaa !2428
  store i64 %824, i64* %R8, align 8, !tbaa !2428
  %830 = add i64 %825, -84
  %831 = add i64 %822, 16
  store i64 %831, i64* %PC, align 8
  %832 = load <2 x float>, <2 x float>* %1577, align 1
  %833 = extractelement <2 x float> %832, i32 0
  %834 = inttoptr i64 %830 to float*
  store float %833, float* %834, align 4
  %835 = load i64, i64* %PC, align 8
  %836 = add i64 %835, 2761
  %837 = add i64 %835, 5
  %838 = load i64, i64* %RSP, align 8, !tbaa !2428
  %839 = add i64 %838, -8
  %840 = inttoptr i64 %839 to i64*
  store i64 %837, i64* %840, align 8
  store i64 %839, i64* %RSP, align 8, !tbaa !2428
  store i64 %836, i64* %PC, align 8, !tbaa !2428
  %841 = tail call %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* nonnull %0, i64 %836, %struct.Memory* %2)
  %842 = load i64, i64* %RBP, align 8
  %843 = add i64 %842, -84
  %844 = load i64, i64* %PC, align 8
  %845 = add i64 %844, 5
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %843 to i32*
  %847 = load i32, i32* %846, align 4
  store i32 %847, i32* %616, align 1, !tbaa !2451
  store float 0.000000e+00, float* %618, align 1, !tbaa !2451
  store float 0.000000e+00, float* %620, align 1, !tbaa !2451
  store float 0.000000e+00, float* %622, align 1, !tbaa !2451
  %848 = load <2 x float>, <2 x float>* %623, align 1
  %849 = load <2 x i32>, <2 x i32>* %624, align 1
  %850 = load <2 x float>, <2 x float>* %1577, align 1
  %851 = extractelement <2 x float> %848, i32 0
  %852 = extractelement <2 x float> %850, i32 0
  %853 = fadd float %851, %852
  store float %853, float* %615, align 1, !tbaa !2451
  %854 = bitcast <2 x float> %848 to <2 x i32>
  %855 = extractelement <2 x i32> %854, i32 1
  store i32 %855, i32* %625, align 1, !tbaa !2451
  %856 = extractelement <2 x i32> %849, i32 0
  store i32 %856, i32* %626, align 1, !tbaa !2451
  %857 = extractelement <2 x i32> %849, i32 1
  store i32 %857, i32* %627, align 1, !tbaa !2451
  %858 = add i64 %842, -32
  %859 = add i64 %844, 13
  store i64 %859, i64* %PC, align 8
  %860 = inttoptr i64 %858 to i64*
  %861 = load i64, i64* %860, align 8
  store i64 %861, i64* %RCX, align 8, !tbaa !2428
  %862 = add i64 %842, -44
  %863 = add i64 %844, 17
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %862 to i32*
  %865 = load i32, i32* %864, align 4
  %866 = sext i32 %865 to i64
  store i64 %866, i64* %RSI, align 8, !tbaa !2428
  %867 = shl nsw i64 %866, 2
  %868 = add i64 %867, %861
  %869 = add i64 %844, 22
  store i64 %869, i64* %PC, align 8
  %870 = load <2 x float>, <2 x float>* %623, align 1
  %871 = extractelement <2 x float> %870, i32 0
  %872 = inttoptr i64 %868 to float*
  store float %871, float* %872, align 4
  %873 = load i64, i64* %RBP, align 8
  %874 = add i64 %873, -24
  %875 = load i64, i64* %PC, align 8
  %876 = add i64 %875, 4
  store i64 %876, i64* %PC, align 8
  %877 = inttoptr i64 %874 to i64*
  %878 = load i64, i64* %877, align 8
  store i64 %878, i64* %RCX, align 8, !tbaa !2428
  %879 = add i64 %873, -44
  %880 = add i64 %875, 8
  store i64 %880, i64* %PC, align 8
  %881 = inttoptr i64 %879 to i32*
  %882 = load i32, i32* %881, align 4
  %883 = sext i32 %882 to i64
  store i64 %883, i64* %RSI, align 8, !tbaa !2428
  %884 = shl nsw i64 %883, 2
  %885 = add i64 %884, %878
  %886 = add i64 %875, 11
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i32*
  %888 = load i32, i32* %887, align 4
  %889 = zext i32 %888 to i64
  store i64 %889, i64* %RAX, align 8, !tbaa !2428
  %890 = add i64 %873, -52
  %891 = add i64 %875, 14
  store i64 %891, i64* %PC, align 8
  %892 = inttoptr i64 %890 to i32*
  store i32 %888, i32* %892, align 4
  %893 = load i64, i64* %RBP, align 8
  %894 = add i64 %893, -52
  %895 = load i64, i64* %PC, align 8
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC, align 8
  %897 = inttoptr i64 %894 to i32*
  %898 = load i32, i32* %897, align 4
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = add i64 %893, -44
  %901 = add i64 %895, 6
  store i64 %901, i64* %PC, align 8
  %902 = inttoptr i64 %900 to i32*
  %903 = load i32, i32* %902, align 4
  %904 = sub i32 %898, %903
  %905 = icmp ult i32 %898, %903
  %906 = zext i1 %905 to i8
  store i8 %906, i8* %19, align 1, !tbaa !2432
  %907 = and i32 %904, 255
  %908 = tail call i32 @llvm.ctpop.i32(i32 %907) #10
  %909 = trunc i32 %908 to i8
  %910 = and i8 %909, 1
  %911 = xor i8 %910, 1
  store i8 %911, i8* %26, align 1, !tbaa !2446
  %912 = xor i32 %903, %898
  %913 = xor i32 %912, %904
  %914 = lshr i32 %913, 4
  %915 = trunc i32 %914 to i8
  %916 = and i8 %915, 1
  store i8 %916, i8* %31, align 1, !tbaa !2447
  %917 = icmp eq i32 %904, 0
  %918 = zext i1 %917 to i8
  store i8 %918, i8* %34, align 1, !tbaa !2448
  %919 = lshr i32 %904, 31
  %920 = trunc i32 %919 to i8
  store i8 %920, i8* %37, align 1, !tbaa !2449
  %921 = lshr i32 %898, 31
  %922 = lshr i32 %903, 31
  %923 = xor i32 %922, %921
  %924 = xor i32 %919, %921
  %925 = add nuw nsw i32 %924, %923
  %926 = icmp eq i32 %925, 2
  %927 = zext i1 %926 to i8
  store i8 %927, i8* %43, align 1, !tbaa !2450
  %.v49 = select i1 %917, i64 74, i64 12
  %928 = add i64 %.v49, %895
  store i64 %928, i64* %PC, align 8, !tbaa !2428
  br i1 %917, label %block_401f9a, label %block_401f5c

block_401e9c:                                     ; preds = %block_401e0f
  %929 = add i64 %1241, -56
  %930 = add i64 %1277, 4
  store i64 %930, i64* %PC, align 8
  %931 = inttoptr i64 %929 to i32*
  %932 = load i32, i32* %931, align 4
  %933 = add i32 %932, -1
  %934 = icmp eq i32 %932, 0
  %935 = zext i1 %934 to i8
  store i8 %935, i8* %19, align 1, !tbaa !2432
  %936 = and i32 %933, 255
  %937 = tail call i32 @llvm.ctpop.i32(i32 %936) #10
  %938 = trunc i32 %937 to i8
  %939 = and i8 %938, 1
  %940 = xor i8 %939, 1
  store i8 %940, i8* %26, align 1, !tbaa !2446
  %941 = xor i32 %933, %932
  %942 = lshr i32 %941, 4
  %943 = trunc i32 %942 to i8
  %944 = and i8 %943, 1
  store i8 %944, i8* %31, align 1, !tbaa !2447
  %945 = icmp eq i32 %933, 0
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %34, align 1, !tbaa !2448
  %947 = lshr i32 %933, 31
  %948 = trunc i32 %947 to i8
  store i8 %948, i8* %37, align 1, !tbaa !2449
  %949 = lshr i32 %932, 31
  %950 = xor i32 %947, %949
  %951 = add nuw nsw i32 %950, %949
  %952 = icmp eq i32 %951, 2
  %953 = zext i1 %952 to i8
  store i8 %953, i8* %43, align 1, !tbaa !2450
  %954 = icmp ne i8 %948, 0
  %955 = xor i1 %954, %952
  %.v47 = select i1 %955, i64 278, i64 10
  %956 = add i64 %.v47, %1277
  store i64 %956, i64* %PC, align 8, !tbaa !2428
  br i1 %955, label %block_401fb2, label %block_401ea6

block_401e1b:                                     ; preds = %block_401e0f
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %957 = add i64 %1277, 8
  store i64 %957, i64* %PC, align 8
  %958 = load i32, i32* %1244, align 4
  %959 = zext i32 %958 to i64
  store i64 %959, i64* %RDI, align 8, !tbaa !2428
  %960 = add i64 %1241, -8
  %961 = add i64 %1277, 12
  store i64 %961, i64* %PC, align 8
  %962 = inttoptr i64 %960 to i64*
  %963 = load i64, i64* %962, align 8
  store i64 %963, i64* %RCX, align 8, !tbaa !2428
  %964 = add i64 %1241, -12
  %965 = add i64 %1277, 15
  store i64 %965, i64* %PC, align 8
  %966 = inttoptr i64 %964 to i32*
  %967 = load i32, i32* %966, align 4
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RDX, align 8, !tbaa !2428
  %969 = add i64 %1277, 19
  store i64 %969, i64* %PC, align 8
  %970 = load i32, i32* %1244, align 4
  %971 = sext i32 %967 to i64
  %972 = sext i32 %970 to i64
  %973 = mul nsw i64 %972, %971
  %974 = and i64 %973, 4294967295
  store i64 %974, i64* %RDX, align 8, !tbaa !2428
  %sext45 = shl i64 %973, 32
  %975 = ashr exact i64 %sext45, 30
  store i64 %975, i64* %RSI, align 8, !tbaa !2428
  %976 = add i64 %975, %963
  store i64 %976, i64* %RCX, align 8, !tbaa !2428
  %977 = icmp ult i64 %976, %963
  %978 = icmp ult i64 %976, %975
  %979 = or i1 %977, %978
  %980 = zext i1 %979 to i8
  store i8 %980, i8* %19, align 1, !tbaa !2432
  %981 = trunc i64 %976 to i32
  %982 = and i32 %981, 255
  %983 = tail call i32 @llvm.ctpop.i32(i32 %982) #10
  %984 = trunc i32 %983 to i8
  %985 = and i8 %984, 1
  %986 = xor i8 %985, 1
  store i8 %986, i8* %26, align 1, !tbaa !2446
  %987 = xor i64 %975, %963
  %988 = xor i64 %987, %976
  %989 = lshr i64 %988, 4
  %990 = trunc i64 %989 to i8
  %991 = and i8 %990, 1
  store i8 %991, i8* %31, align 1, !tbaa !2447
  %992 = icmp eq i64 %976, 0
  %993 = zext i1 %992 to i8
  store i8 %993, i8* %34, align 1, !tbaa !2448
  %994 = lshr i64 %976, 63
  %995 = trunc i64 %994 to i8
  store i8 %995, i8* %37, align 1, !tbaa !2449
  %996 = lshr i64 %963, 63
  %997 = lshr i64 %975, 63
  %998 = xor i64 %994, %996
  %999 = xor i64 %994, %997
  %1000 = add nuw nsw i64 %998, %999
  %1001 = icmp eq i64 %1000, 2
  %1002 = zext i1 %1001 to i8
  store i8 %1002, i8* %43, align 1, !tbaa !2450
  %1003 = add i64 %1241, -32
  %1004 = add i64 %1277, 36
  store i64 %1004, i64* %PC, align 8
  %1005 = inttoptr i64 %1003 to i64*
  %1006 = load i64, i64* %1005, align 8
  %1007 = add i64 %1241, -72
  %1008 = add i64 %1277, 40
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1007 to i64*
  store i64 %1006, i64* %1009, align 8
  %1010 = load i64, i64* %RCX, align 8
  %1011 = load i64, i64* %PC, align 8
  store i64 %1010, i64* %RSI, align 8, !tbaa !2428
  %1012 = load i32, i32* %EAX, align 4
  %1013 = zext i32 %1012 to i64
  store i64 %1013, i64* %RDX, align 8, !tbaa !2428
  %1014 = load i64, i64* %RBP, align 8
  %1015 = add i64 %1014, -72
  %1016 = add i64 %1011, 9
  store i64 %1016, i64* %PC, align 8
  %1017 = inttoptr i64 %1015 to i64*
  %1018 = load i64, i64* %1017, align 8
  store i64 %1018, i64* %RCX, align 8, !tbaa !2428
  store i64 %1013, i64* %R8, align 8, !tbaa !2428
  %1019 = add i64 %1011, 2989
  %1020 = add i64 %1011, 17
  %1021 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1022 = add i64 %1021, -8
  %1023 = inttoptr i64 %1022 to i64*
  store i64 %1020, i64* %1023, align 8
  store i64 %1022, i64* %RSP, align 8, !tbaa !2428
  store i64 %1019, i64* %PC, align 8, !tbaa !2428
  %1024 = tail call %struct.Memory* @sub_4029f0_ddot_renamed_(%struct.State* nonnull %0, i64 %1019, %struct.Memory* %2)
  %1025 = load i64, i64* %RBP, align 8
  %1026 = add i64 %1025, -40
  %1027 = load i64, i64* %PC, align 8
  %1028 = add i64 %1027, 5
  store i64 %1028, i64* %PC, align 8
  %1029 = load <2 x float>, <2 x float>* %1577, align 1
  %1030 = extractelement <2 x float> %1029, i32 0
  %1031 = inttoptr i64 %1026 to float*
  store float %1030, float* %1031, align 4
  %1032 = load i64, i64* %RBP, align 8
  %1033 = add i64 %1032, -32
  %1034 = load i64, i64* %PC, align 8
  %1035 = add i64 %1034, 4
  store i64 %1035, i64* %PC, align 8
  %1036 = inttoptr i64 %1033 to i64*
  %1037 = load i64, i64* %1036, align 8
  store i64 %1037, i64* %RCX, align 8, !tbaa !2428
  %1038 = add i64 %1032, -44
  %1039 = add i64 %1034, 8
  store i64 %1039, i64* %PC, align 8
  %1040 = inttoptr i64 %1038 to i32*
  %1041 = load i32, i32* %1040, align 4
  %1042 = sext i32 %1041 to i64
  store i64 %1042, i64* %RSI, align 8, !tbaa !2428
  %1043 = shl nsw i64 %1042, 2
  %1044 = add i64 %1043, %1037
  %1045 = add i64 %1034, 13
  store i64 %1045, i64* %PC, align 8
  %1046 = inttoptr i64 %1044 to i32*
  %1047 = load i32, i32* %1046, align 4
  store i32 %1047, i32* %1580, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1582, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1584, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1586, align 1, !tbaa !2451
  %1048 = add i64 %1032, -40
  %1049 = add i64 %1034, 18
  store i64 %1049, i64* %PC, align 8
  %1050 = load <2 x float>, <2 x float>* %1577, align 1
  %1051 = load <2 x i32>, <2 x i32>* %1587, align 1
  %1052 = inttoptr i64 %1048 to float*
  %1053 = load float, float* %1052, align 4
  %1054 = extractelement <2 x float> %1050, i32 0
  %1055 = fsub float %1054, %1053
  store float %1055, float* %1579, align 1, !tbaa !2451
  %1056 = bitcast <2 x float> %1050 to <2 x i32>
  %1057 = extractelement <2 x i32> %1056, i32 1
  store i32 %1057, i32* %1588, align 1, !tbaa !2451
  %1058 = extractelement <2 x i32> %1051, i32 0
  store i32 %1058, i32* %1589, align 1, !tbaa !2451
  %1059 = extractelement <2 x i32> %1051, i32 1
  store i32 %1059, i32* %1590, align 1, !tbaa !2451
  %1060 = add i64 %1032, -8
  %1061 = add i64 %1034, 22
  store i64 %1061, i64* %PC, align 8
  %1062 = inttoptr i64 %1060 to i64*
  %1063 = load i64, i64* %1062, align 8
  store i64 %1063, i64* %RCX, align 8, !tbaa !2428
  %1064 = add i64 %1032, -12
  %1065 = add i64 %1034, 25
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to i32*
  %1067 = load i32, i32* %1066, align 4
  %1068 = zext i32 %1067 to i64
  store i64 %1068, i64* %RAX, align 8, !tbaa !2428
  %1069 = add i64 %1034, 29
  store i64 %1069, i64* %PC, align 8
  %1070 = load i32, i32* %1040, align 4
  %1071 = sext i32 %1067 to i64
  %1072 = sext i32 %1070 to i64
  %1073 = mul nsw i64 %1072, %1071
  %1074 = trunc i64 %1073 to i32
  %1075 = and i64 %1073, 4294967295
  store i64 %1075, i64* %RAX, align 8, !tbaa !2428
  %1076 = shl i64 %1073, 32
  %1077 = ashr exact i64 %1076, 32
  %1078 = icmp ne i64 %1077, %1073
  %1079 = zext i1 %1078 to i8
  store i8 %1079, i8* %19, align 1, !tbaa !2432
  %1080 = and i32 %1074, 255
  %1081 = tail call i32 @llvm.ctpop.i32(i32 %1080) #10
  %1082 = trunc i32 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = xor i8 %1083, 1
  store i8 %1084, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1085 = lshr i32 %1074, 31
  %1086 = trunc i32 %1085 to i8
  store i8 %1086, i8* %37, align 1, !tbaa !2449
  store i8 %1079, i8* %43, align 1, !tbaa !2450
  %1087 = add i64 %1034, 32
  store i64 %1087, i64* %PC, align 8
  %1088 = load i32, i32* %1040, align 4
  %1089 = add i32 %1088, %1074
  %1090 = zext i32 %1089 to i64
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = icmp ult i32 %1089, %1074
  %1092 = icmp ult i32 %1089, %1088
  %1093 = or i1 %1091, %1092
  %1094 = zext i1 %1093 to i8
  store i8 %1094, i8* %19, align 1, !tbaa !2432
  %1095 = and i32 %1089, 255
  %1096 = tail call i32 @llvm.ctpop.i32(i32 %1095) #10
  %1097 = trunc i32 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = xor i8 %1098, 1
  store i8 %1099, i8* %26, align 1, !tbaa !2446
  %1100 = xor i32 %1088, %1074
  %1101 = xor i32 %1100, %1089
  %1102 = lshr i32 %1101, 4
  %1103 = trunc i32 %1102 to i8
  %1104 = and i8 %1103, 1
  store i8 %1104, i8* %31, align 1, !tbaa !2447
  %1105 = icmp eq i32 %1089, 0
  %1106 = zext i1 %1105 to i8
  store i8 %1106, i8* %34, align 1, !tbaa !2448
  %1107 = lshr i32 %1089, 31
  %1108 = trunc i32 %1107 to i8
  store i8 %1108, i8* %37, align 1, !tbaa !2449
  %1109 = lshr i32 %1088, 31
  %1110 = xor i32 %1107, %1085
  %1111 = xor i32 %1107, %1109
  %1112 = add nuw nsw i32 %1110, %1111
  %1113 = icmp eq i32 %1112, 2
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %43, align 1, !tbaa !2450
  %1115 = sext i32 %1089 to i64
  store i64 %1115, i64* %RSI, align 8, !tbaa !2428
  %1116 = shl nsw i64 %1115, 2
  %1117 = add i64 %1116, %1063
  %1118 = add i64 %1034, 40
  store i64 %1118, i64* %PC, align 8
  %1119 = load <2 x float>, <2 x float>* %1577, align 1
  %1120 = load <2 x i32>, <2 x i32>* %1587, align 1
  %1121 = inttoptr i64 %1117 to float*
  %1122 = load float, float* %1121, align 4
  %1123 = extractelement <2 x float> %1119, i32 0
  %1124 = fdiv float %1123, %1122
  store float %1124, float* %1579, align 1, !tbaa !2451
  %1125 = bitcast <2 x float> %1119 to <2 x i32>
  %1126 = extractelement <2 x i32> %1125, i32 1
  store i32 %1126, i32* %1588, align 1, !tbaa !2451
  %1127 = extractelement <2 x i32> %1120, i32 0
  store i32 %1127, i32* %1589, align 1, !tbaa !2451
  %1128 = extractelement <2 x i32> %1120, i32 1
  store i32 %1128, i32* %1590, align 1, !tbaa !2451
  %1129 = load i64, i64* %RBP, align 8
  %1130 = add i64 %1129, -32
  %1131 = add i64 %1034, 44
  store i64 %1131, i64* %PC, align 8
  %1132 = inttoptr i64 %1130 to i64*
  %1133 = load i64, i64* %1132, align 8
  store i64 %1133, i64* %RCX, align 8, !tbaa !2428
  %1134 = add i64 %1129, -44
  %1135 = add i64 %1034, 48
  store i64 %1135, i64* %PC, align 8
  %1136 = inttoptr i64 %1134 to i32*
  %1137 = load i32, i32* %1136, align 4
  %1138 = sext i32 %1137 to i64
  store i64 %1138, i64* %RSI, align 8, !tbaa !2428
  %1139 = shl nsw i64 %1138, 2
  %1140 = add i64 %1139, %1133
  %1141 = add i64 %1034, 53
  store i64 %1141, i64* %PC, align 8
  %1142 = load <2 x float>, <2 x float>* %1577, align 1
  %1143 = extractelement <2 x float> %1142, i32 0
  %1144 = inttoptr i64 %1140 to float*
  store float %1143, float* %1144, align 4
  %1145 = load i64, i64* %RBP, align 8
  %1146 = add i64 %1145, -44
  %1147 = load i64, i64* %PC, align 8
  %1148 = add i64 %1147, 3
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1146 to i32*
  %1150 = load i32, i32* %1149, align 4
  %1151 = add i32 %1150, 1
  %1152 = zext i32 %1151 to i64
  store i64 %1152, i64* %RAX, align 8, !tbaa !2428
  %1153 = icmp eq i32 %1150, -1
  %1154 = icmp eq i32 %1151, 0
  %1155 = or i1 %1153, %1154
  %1156 = zext i1 %1155 to i8
  store i8 %1156, i8* %19, align 1, !tbaa !2432
  %1157 = and i32 %1151, 255
  %1158 = tail call i32 @llvm.ctpop.i32(i32 %1157) #10
  %1159 = trunc i32 %1158 to i8
  %1160 = and i8 %1159, 1
  %1161 = xor i8 %1160, 1
  store i8 %1161, i8* %26, align 1, !tbaa !2446
  %1162 = xor i32 %1151, %1150
  %1163 = lshr i32 %1162, 4
  %1164 = trunc i32 %1163 to i8
  %1165 = and i8 %1164, 1
  store i8 %1165, i8* %31, align 1, !tbaa !2447
  %1166 = zext i1 %1154 to i8
  store i8 %1166, i8* %34, align 1, !tbaa !2448
  %1167 = lshr i32 %1151, 31
  %1168 = trunc i32 %1167 to i8
  store i8 %1168, i8* %37, align 1, !tbaa !2449
  %1169 = lshr i32 %1150, 31
  %1170 = xor i32 %1167, %1169
  %1171 = add nuw nsw i32 %1170, %1167
  %1172 = icmp eq i32 %1171, 2
  %1173 = zext i1 %1172 to i8
  store i8 %1173, i8* %43, align 1, !tbaa !2450
  %1174 = add i64 %1147, 9
  store i64 %1174, i64* %PC, align 8
  store i32 %1151, i32* %1149, align 4
  %1175 = load i64, i64* %PC, align 8
  %1176 = add i64 %1175, -136
  store i64 %1176, i64* %PC, align 8, !tbaa !2428
  br label %block_401e0f

block_401fb7:                                     ; preds = %block_401e03, %block_401fb2
  %.sink = phi i64 [ %1591, %block_401e03 ], [ %571, %block_401fb2 ]
  %1177 = load i64, i64* %RSP, align 8
  %1178 = add i64 %1177, 96
  store i64 %1178, i64* %RSP, align 8, !tbaa !2428
  %1179 = icmp ugt i64 %1177, -97
  %1180 = zext i1 %1179 to i8
  store i8 %1180, i8* %19, align 1, !tbaa !2432
  %1181 = trunc i64 %1178 to i32
  %1182 = and i32 %1181, 255
  %1183 = tail call i32 @llvm.ctpop.i32(i32 %1182) #10
  %1184 = trunc i32 %1183 to i8
  %1185 = and i8 %1184, 1
  %1186 = xor i8 %1185, 1
  store i8 %1186, i8* %26, align 1, !tbaa !2446
  %1187 = xor i64 %1178, %1177
  %1188 = lshr i64 %1187, 4
  %1189 = trunc i64 %1188 to i8
  %1190 = and i8 %1189, 1
  store i8 %1190, i8* %31, align 1, !tbaa !2447
  %1191 = icmp eq i64 %1178, 0
  %1192 = zext i1 %1191 to i8
  store i8 %1192, i8* %34, align 1, !tbaa !2448
  %1193 = lshr i64 %1178, 63
  %1194 = trunc i64 %1193 to i8
  store i8 %1194, i8* %37, align 1, !tbaa !2449
  %1195 = lshr i64 %1177, 63
  %1196 = xor i64 %1193, %1195
  %1197 = add nuw nsw i64 %1196, %1193
  %1198 = icmp eq i64 %1197, 2
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %43, align 1, !tbaa !2450
  %1200 = add i64 %.sink, 5
  store i64 %1200, i64* %PC, align 8
  %1201 = add i64 %1177, 104
  %1202 = inttoptr i64 %1178 to i64*
  %1203 = load i64, i64* %1202, align 8
  store i64 %1203, i64* %RBP, align 8, !tbaa !2428
  store i64 %1201, i64* %RSP, align 8, !tbaa !2428
  %1204 = add i64 %.sink, 6
  store i64 %1204, i64* %PC, align 8
  %1205 = inttoptr i64 %1201 to i64*
  %1206 = load i64, i64* %1205, align 8
  store i64 %1206, i64* %PC, align 8, !tbaa !2428
  %1207 = add i64 %1177, 112
  store i64 %1207, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401f9a:                                     ; preds = %block_401eb9, %block_401f5c
  %1208 = phi i64 [ %893, %block_401eb9 ], [ %.pre27, %block_401f5c ]
  %1209 = phi i64 [ %928, %block_401eb9 ], [ %.pre26, %block_401f5c ]
  %1210 = add i64 %1208, -48
  %1211 = add i64 %1209, 8
  store i64 %1211, i64* %PC, align 8
  %1212 = inttoptr i64 %1210 to i32*
  %1213 = load i32, i32* %1212, align 4
  %1214 = add i32 %1213, 1
  %1215 = zext i32 %1214 to i64
  store i64 %1215, i64* %RAX, align 8, !tbaa !2428
  %1216 = icmp eq i32 %1213, -1
  %1217 = icmp eq i32 %1214, 0
  %1218 = or i1 %1216, %1217
  %1219 = zext i1 %1218 to i8
  store i8 %1219, i8* %19, align 1, !tbaa !2432
  %1220 = and i32 %1214, 255
  %1221 = tail call i32 @llvm.ctpop.i32(i32 %1220) #10
  %1222 = trunc i32 %1221 to i8
  %1223 = and i8 %1222, 1
  %1224 = xor i8 %1223, 1
  store i8 %1224, i8* %26, align 1, !tbaa !2446
  %1225 = xor i32 %1214, %1213
  %1226 = lshr i32 %1225, 4
  %1227 = trunc i32 %1226 to i8
  %1228 = and i8 %1227, 1
  store i8 %1228, i8* %31, align 1, !tbaa !2447
  %1229 = zext i1 %1217 to i8
  store i8 %1229, i8* %34, align 1, !tbaa !2448
  %1230 = lshr i32 %1214, 31
  %1231 = trunc i32 %1230 to i8
  store i8 %1231, i8* %37, align 1, !tbaa !2449
  %1232 = lshr i32 %1213, 31
  %1233 = xor i32 %1230, %1232
  %1234 = add nuw nsw i32 %1233, %1230
  %1235 = icmp eq i32 %1234, 2
  %1236 = zext i1 %1235 to i8
  store i8 %1236, i8* %43, align 1, !tbaa !2450
  %1237 = add i64 %1209, 14
  store i64 %1237, i64* %PC, align 8
  store i32 %1214, i32* %1212, align 4
  %1238 = load i64, i64* %PC, align 8
  %1239 = add i64 %1238, -251
  store i64 %1239, i64* %PC, align 8, !tbaa !2428
  br label %block_401ead

block_401e0f:                                     ; preds = %block_401e08, %block_401e1b
  %1240 = phi i64 [ %.pre24, %block_401e08 ], [ %1176, %block_401e1b ]
  %1241 = load i64, i64* %RBP, align 8
  %1242 = add i64 %1241, -44
  %1243 = add i64 %1240, 3
  store i64 %1243, i64* %PC, align 8
  %1244 = inttoptr i64 %1242 to i32*
  %1245 = load i32, i32* %1244, align 4
  %1246 = zext i32 %1245 to i64
  store i64 %1246, i64* %RAX, align 8, !tbaa !2428
  %1247 = add i64 %1241, -16
  %1248 = add i64 %1240, 6
  store i64 %1248, i64* %PC, align 8
  %1249 = inttoptr i64 %1247 to i32*
  %1250 = load i32, i32* %1249, align 4
  %1251 = sub i32 %1245, %1250
  %1252 = icmp ult i32 %1245, %1250
  %1253 = zext i1 %1252 to i8
  store i8 %1253, i8* %19, align 1, !tbaa !2432
  %1254 = and i32 %1251, 255
  %1255 = tail call i32 @llvm.ctpop.i32(i32 %1254) #10
  %1256 = trunc i32 %1255 to i8
  %1257 = and i8 %1256, 1
  %1258 = xor i8 %1257, 1
  store i8 %1258, i8* %26, align 1, !tbaa !2446
  %1259 = xor i32 %1250, %1245
  %1260 = xor i32 %1259, %1251
  %1261 = lshr i32 %1260, 4
  %1262 = trunc i32 %1261 to i8
  %1263 = and i8 %1262, 1
  store i8 %1263, i8* %31, align 1, !tbaa !2447
  %1264 = icmp eq i32 %1251, 0
  %1265 = zext i1 %1264 to i8
  store i8 %1265, i8* %34, align 1, !tbaa !2448
  %1266 = lshr i32 %1251, 31
  %1267 = trunc i32 %1266 to i8
  store i8 %1267, i8* %37, align 1, !tbaa !2449
  %1268 = lshr i32 %1245, 31
  %1269 = lshr i32 %1250, 31
  %1270 = xor i32 %1269, %1268
  %1271 = xor i32 %1266, %1268
  %1272 = add nuw nsw i32 %1271, %1270
  %1273 = icmp eq i32 %1272, 2
  %1274 = zext i1 %1273 to i8
  store i8 %1274, i8* %43, align 1, !tbaa !2450
  %1275 = icmp ne i8 %1267, 0
  %1276 = xor i1 %1275, %1273
  %.v46 = select i1 %1276, i64 12, i64 141
  %1277 = add i64 %.v46, %1240
  store i64 %1277, i64* %PC, align 8, !tbaa !2428
  br i1 %1276, label %block_401e1b, label %block_401e9c

block_401c71:                                     ; preds = %block_401c40
  %1278 = add i64 %109, -56
  %1279 = add i64 %124, 4
  store i64 %1279, i64* %PC, align 8
  %1280 = inttoptr i64 %1278 to i32*
  %1281 = load i32, i32* %1280, align 4
  %1282 = add i32 %1281, -1
  %1283 = icmp eq i32 %1281, 0
  %1284 = zext i1 %1283 to i8
  store i8 %1284, i8* %19, align 1, !tbaa !2432
  %1285 = and i32 %1282, 255
  %1286 = tail call i32 @llvm.ctpop.i32(i32 %1285) #10
  %1287 = trunc i32 %1286 to i8
  %1288 = and i8 %1287, 1
  %1289 = xor i8 %1288, 1
  store i8 %1289, i8* %26, align 1, !tbaa !2446
  %1290 = xor i32 %1282, %1281
  %1291 = lshr i32 %1290, 4
  %1292 = trunc i32 %1291 to i8
  %1293 = and i8 %1292, 1
  store i8 %1293, i8* %31, align 1, !tbaa !2447
  %1294 = icmp eq i32 %1282, 0
  %1295 = zext i1 %1294 to i8
  store i8 %1295, i8* %34, align 1, !tbaa !2448
  %1296 = lshr i32 %1282, 31
  %1297 = trunc i32 %1296 to i8
  store i8 %1297, i8* %37, align 1, !tbaa !2449
  %1298 = lshr i32 %1281, 31
  %1299 = xor i32 %1296, %1298
  %1300 = add nuw nsw i32 %1299, %1298
  %1301 = icmp eq i32 %1300, 2
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %43, align 1, !tbaa !2450
  %1303 = icmp ne i8 %1297, 0
  %1304 = xor i1 %1303, %1301
  %.v50 = select i1 %1304, i64 224, i64 10
  %1305 = add i64 %.v50, %124
  store i64 %1305, i64* %PC, align 8, !tbaa !2428
  br i1 %1304, label %block_401c71.block_401d51_crit_edge, label %block_401c7b

block_401c71.block_401d51_crit_edge:              ; preds = %block_401c71
  %.pre28 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %.pre29 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %.pre31 = getelementptr inbounds i8, i8* %.pre28, i64 4
  %.pre33 = bitcast i8* %.pre31 to float*
  %.pre35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre37 = bitcast i64* %.pre35 to float*
  %.pre39 = getelementptr inbounds i8, i8* %.pre28, i64 12
  %.pre41 = bitcast i8* %.pre39 to float*
  %.pre43 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  br label %block_401d51

block_401c8e:                                     ; preds = %block_401c82
  %1306 = add i64 %1593, -24
  %1307 = add i64 %1629, 4
  store i64 %1307, i64* %PC, align 8
  %1308 = inttoptr i64 %1306 to i64*
  %1309 = load i64, i64* %1308, align 8
  store i64 %1309, i64* %RAX, align 8, !tbaa !2428
  %1310 = add i64 %1629, 8
  store i64 %1310, i64* %PC, align 8
  %1311 = load i32, i32* %1596, align 4
  %1312 = sext i32 %1311 to i64
  store i64 %1312, i64* %RCX, align 8, !tbaa !2428
  %1313 = shl nsw i64 %1312, 2
  %1314 = add i64 %1313, %1309
  %1315 = add i64 %1629, 11
  store i64 %1315, i64* %PC, align 8
  %1316 = inttoptr i64 %1314 to i32*
  %1317 = load i32, i32* %1316, align 4
  %1318 = zext i32 %1317 to i64
  store i64 %1318, i64* %RDX, align 8, !tbaa !2428
  %1319 = add i64 %1593, -52
  %1320 = add i64 %1629, 14
  store i64 %1320, i64* %PC, align 8
  %1321 = inttoptr i64 %1319 to i32*
  store i32 %1317, i32* %1321, align 4
  %1322 = load i64, i64* %RBP, align 8
  %1323 = add i64 %1322, -32
  %1324 = load i64, i64* %PC, align 8
  %1325 = add i64 %1324, 4
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1323 to i64*
  %1327 = load i64, i64* %1326, align 8
  store i64 %1327, i64* %RAX, align 8, !tbaa !2428
  %1328 = add i64 %1322, -52
  %1329 = add i64 %1324, 8
  store i64 %1329, i64* %PC, align 8
  %1330 = inttoptr i64 %1328 to i32*
  %1331 = load i32, i32* %1330, align 4
  %1332 = sext i32 %1331 to i64
  store i64 %1332, i64* %RCX, align 8, !tbaa !2428
  %1333 = shl nsw i64 %1332, 2
  %1334 = add i64 %1333, %1327
  %1335 = add i64 %1324, 13
  store i64 %1335, i64* %PC, align 8
  %1336 = inttoptr i64 %1334 to i32*
  %1337 = load i32, i32* %1336, align 4
  store i32 %1337, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %1338 = add i64 %1322, -40
  %1339 = add i64 %1324, 18
  store i64 %1339, i64* %PC, align 8
  %1340 = load <2 x float>, <2 x float>* %136, align 1
  %1341 = extractelement <2 x float> %1340, i32 0
  %1342 = inttoptr i64 %1338 to float*
  store float %1341, float* %1342, align 4
  %1343 = load i64, i64* %RBP, align 8
  %1344 = add i64 %1343, -52
  %1345 = load i64, i64* %PC, align 8
  %1346 = add i64 %1345, 3
  store i64 %1346, i64* %PC, align 8
  %1347 = inttoptr i64 %1344 to i32*
  %1348 = load i32, i32* %1347, align 4
  %1349 = zext i32 %1348 to i64
  store i64 %1349, i64* %RDX, align 8, !tbaa !2428
  %1350 = add i64 %1343, -44
  %1351 = add i64 %1345, 6
  store i64 %1351, i64* %PC, align 8
  %1352 = inttoptr i64 %1350 to i32*
  %1353 = load i32, i32* %1352, align 4
  %1354 = sub i32 %1348, %1353
  %1355 = icmp ult i32 %1348, %1353
  %1356 = zext i1 %1355 to i8
  store i8 %1356, i8* %19, align 1, !tbaa !2432
  %1357 = and i32 %1354, 255
  %1358 = tail call i32 @llvm.ctpop.i32(i32 %1357) #10
  %1359 = trunc i32 %1358 to i8
  %1360 = and i8 %1359, 1
  %1361 = xor i8 %1360, 1
  store i8 %1361, i8* %26, align 1, !tbaa !2446
  %1362 = xor i32 %1353, %1348
  %1363 = xor i32 %1362, %1354
  %1364 = lshr i32 %1363, 4
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  store i8 %1366, i8* %31, align 1, !tbaa !2447
  %1367 = icmp eq i32 %1354, 0
  %1368 = zext i1 %1367 to i8
  store i8 %1368, i8* %34, align 1, !tbaa !2448
  %1369 = lshr i32 %1354, 31
  %1370 = trunc i32 %1369 to i8
  store i8 %1370, i8* %37, align 1, !tbaa !2449
  %1371 = lshr i32 %1348, 31
  %1372 = lshr i32 %1353, 31
  %1373 = xor i32 %1372, %1371
  %1374 = xor i32 %1369, %1371
  %1375 = add nuw nsw i32 %1374, %1373
  %1376 = icmp eq i32 %1375, 2
  %1377 = zext i1 %1376 to i8
  store i8 %1377, i8* %43, align 1, !tbaa !2450
  %.v53 = select i1 %1367, i64 56, i64 12
  %1378 = add i64 %.v53, %1345
  store i64 %1378, i64* %PC, align 8, !tbaa !2428
  br i1 %1367, label %block_401ce6, label %block_401cba

block_401ce6:                                     ; preds = %block_401c8e, %block_401cba
  %1379 = phi i64 [ %1343, %block_401c8e ], [ %.pre22, %block_401cba ]
  %1380 = phi i64 [ %1378, %block_401c8e ], [ %.pre21, %block_401cba ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1381 = add i64 %1379, -16
  %1382 = add i64 %1380, 8
  store i64 %1382, i64* %PC, align 8
  %1383 = inttoptr i64 %1381 to i32*
  %1384 = load i32, i32* %1383, align 4
  %1385 = zext i32 %1384 to i64
  store i64 %1385, i64* %RCX, align 8, !tbaa !2428
  %1386 = add i64 %1379, -44
  %1387 = add i64 %1380, 11
  store i64 %1387, i64* %PC, align 8
  %1388 = inttoptr i64 %1386 to i32*
  %1389 = load i32, i32* %1388, align 4
  %1390 = add i32 %1389, 1
  %1391 = zext i32 %1390 to i64
  store i64 %1391, i64* %RDX, align 8, !tbaa !2428
  %1392 = lshr i32 %1390, 31
  %1393 = sub i32 %1384, %1390
  %1394 = zext i32 %1393 to i64
  store i64 %1394, i64* %RCX, align 8, !tbaa !2428
  %1395 = icmp ult i32 %1384, %1390
  %1396 = zext i1 %1395 to i8
  store i8 %1396, i8* %19, align 1, !tbaa !2432
  %1397 = and i32 %1393, 255
  %1398 = tail call i32 @llvm.ctpop.i32(i32 %1397) #10
  %1399 = trunc i32 %1398 to i8
  %1400 = and i8 %1399, 1
  %1401 = xor i8 %1400, 1
  store i8 %1401, i8* %26, align 1, !tbaa !2446
  %1402 = xor i32 %1390, %1384
  %1403 = xor i32 %1402, %1393
  %1404 = lshr i32 %1403, 4
  %1405 = trunc i32 %1404 to i8
  %1406 = and i8 %1405, 1
  store i8 %1406, i8* %31, align 1, !tbaa !2447
  %1407 = icmp eq i32 %1393, 0
  %1408 = zext i1 %1407 to i8
  store i8 %1408, i8* %34, align 1, !tbaa !2448
  %1409 = lshr i32 %1393, 31
  %1410 = trunc i32 %1409 to i8
  store i8 %1410, i8* %37, align 1, !tbaa !2449
  %1411 = lshr i32 %1384, 31
  %1412 = xor i32 %1392, %1411
  %1413 = xor i32 %1409, %1411
  %1414 = add nuw nsw i32 %1413, %1412
  %1415 = icmp eq i32 %1414, 2
  %1416 = zext i1 %1415 to i8
  store i8 %1416, i8* %43, align 1, !tbaa !2450
  %1417 = add i64 %1379, -40
  %1418 = add i64 %1380, 21
  store i64 %1418, i64* %PC, align 8
  %1419 = inttoptr i64 %1417 to i32*
  %1420 = load i32, i32* %1419, align 4
  store i32 %1420, i32* %129, align 1, !tbaa !2451
  store float 0.000000e+00, float* %131, align 1, !tbaa !2451
  store float 0.000000e+00, float* %133, align 1, !tbaa !2451
  store float 0.000000e+00, float* %135, align 1, !tbaa !2451
  %1421 = add i64 %1379, -8
  %1422 = add i64 %1380, 25
  store i64 %1422, i64* %PC, align 8
  %1423 = inttoptr i64 %1421 to i64*
  %1424 = load i64, i64* %1423, align 8
  store i64 %1424, i64* %RSI, align 8, !tbaa !2428
  %1425 = add i64 %1379, -12
  %1426 = add i64 %1380, 28
  store i64 %1426, i64* %PC, align 8
  %1427 = inttoptr i64 %1425 to i32*
  %1428 = load i32, i32* %1427, align 4
  %1429 = zext i32 %1428 to i64
  store i64 %1429, i64* %RDX, align 8, !tbaa !2428
  %1430 = add i64 %1380, 32
  store i64 %1430, i64* %PC, align 8
  %1431 = load i32, i32* %1388, align 4
  %1432 = sext i32 %1428 to i64
  %1433 = sext i32 %1431 to i64
  %1434 = mul nsw i64 %1433, %1432
  %1435 = trunc i64 %1434 to i32
  %1436 = and i64 %1434, 4294967295
  store i64 %1436, i64* %RDX, align 8, !tbaa !2428
  %1437 = shl i64 %1434, 32
  %1438 = ashr exact i64 %1437, 32
  %1439 = icmp ne i64 %1438, %1434
  %1440 = zext i1 %1439 to i8
  store i8 %1440, i8* %19, align 1, !tbaa !2432
  %1441 = and i32 %1435, 255
  %1442 = tail call i32 @llvm.ctpop.i32(i32 %1441) #10
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  store i8 %1445, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1446 = lshr i32 %1435, 31
  %1447 = trunc i32 %1446 to i8
  store i8 %1447, i8* %37, align 1, !tbaa !2449
  store i8 %1440, i8* %43, align 1, !tbaa !2450
  %1448 = add i64 %1380, 35
  store i64 %1448, i64* %PC, align 8
  %1449 = load i32, i32* %1388, align 4
  %1450 = add i32 %1435, 1
  %1451 = add i32 %1450, %1449
  %1452 = zext i32 %1451 to i64
  store i64 %1452, i64* %RDX, align 8, !tbaa !2428
  %1453 = sext i32 %1451 to i64
  %1454 = shl nsw i64 %1453, 2
  store i64 %1454, i64* %RDI, align 8, !tbaa !2428
  %1455 = add i64 %1454, %1424
  store i64 %1455, i64* %RSI, align 8, !tbaa !2428
  %1456 = icmp ult i64 %1455, %1424
  %1457 = icmp ult i64 %1455, %1454
  %1458 = or i1 %1456, %1457
  %1459 = zext i1 %1458 to i8
  store i8 %1459, i8* %19, align 1, !tbaa !2432
  %1460 = trunc i64 %1455 to i32
  %1461 = and i32 %1460, 255
  %1462 = tail call i32 @llvm.ctpop.i32(i32 %1461) #10
  %1463 = trunc i32 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = xor i8 %1464, 1
  store i8 %1465, i8* %26, align 1, !tbaa !2446
  %1466 = xor i64 %1454, %1424
  %1467 = xor i64 %1466, %1455
  %1468 = lshr i64 %1467, 4
  %1469 = trunc i64 %1468 to i8
  %1470 = and i8 %1469, 1
  store i8 %1470, i8* %31, align 1, !tbaa !2447
  %1471 = icmp eq i64 %1455, 0
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %34, align 1, !tbaa !2448
  %1473 = lshr i64 %1455, 63
  %1474 = trunc i64 %1473 to i8
  store i8 %1474, i8* %37, align 1, !tbaa !2449
  %1475 = lshr i64 %1424, 63
  %1476 = lshr i64 %1453, 61
  %1477 = and i64 %1476, 1
  %1478 = xor i64 %1473, %1475
  %1479 = xor i64 %1473, %1477
  %1480 = add nuw nsw i64 %1478, %1479
  %1481 = icmp eq i64 %1480, 2
  %1482 = zext i1 %1481 to i8
  store i8 %1482, i8* %43, align 1, !tbaa !2450
  %1483 = load i64, i64* %RBP, align 8
  %1484 = add i64 %1483, -32
  %1485 = add i64 %1380, 52
  store i64 %1485, i64* %PC, align 8
  %1486 = inttoptr i64 %1484 to i64*
  %1487 = load i64, i64* %1486, align 8
  store i64 %1487, i64* %RDI, align 8, !tbaa !2428
  %1488 = add i64 %1483, -44
  %1489 = add i64 %1380, 55
  store i64 %1489, i64* %PC, align 8
  %1490 = inttoptr i64 %1488 to i32*
  %1491 = load i32, i32* %1490, align 4
  %1492 = add i32 %1491, 1
  %1493 = sext i32 %1492 to i64
  %1494 = shl nsw i64 %1493, 2
  store i64 %1494, i64* %R8, align 8, !tbaa !2428
  %1495 = add i64 %1494, %1487
  %1496 = icmp ult i64 %1495, %1487
  %1497 = icmp ult i64 %1495, %1494
  %1498 = or i1 %1496, %1497
  %1499 = zext i1 %1498 to i8
  store i8 %1499, i8* %19, align 1, !tbaa !2432
  %1500 = trunc i64 %1495 to i32
  %1501 = and i32 %1500, 255
  %1502 = tail call i32 @llvm.ctpop.i32(i32 %1501) #10
  %1503 = trunc i32 %1502 to i8
  %1504 = and i8 %1503, 1
  %1505 = xor i8 %1504, 1
  store i8 %1505, i8* %26, align 1, !tbaa !2446
  %1506 = xor i64 %1494, %1487
  %1507 = xor i64 %1506, %1495
  %1508 = lshr i64 %1507, 4
  %1509 = trunc i64 %1508 to i8
  %1510 = and i8 %1509, 1
  store i8 %1510, i8* %31, align 1, !tbaa !2447
  %1511 = icmp eq i64 %1495, 0
  %1512 = zext i1 %1511 to i8
  store i8 %1512, i8* %34, align 1, !tbaa !2448
  %1513 = lshr i64 %1495, 63
  %1514 = trunc i64 %1513 to i8
  store i8 %1514, i8* %37, align 1, !tbaa !2449
  %1515 = lshr i64 %1487, 63
  %1516 = lshr i64 %1493, 61
  %1517 = and i64 %1516, 1
  %1518 = xor i64 %1513, %1515
  %1519 = xor i64 %1513, %1517
  %1520 = add nuw nsw i64 %1518, %1519
  %1521 = icmp eq i64 %1520, 2
  %1522 = zext i1 %1521 to i8
  store i8 %1522, i8* %43, align 1, !tbaa !2450
  %1523 = add i64 %1483, -64
  %1524 = add i64 %1380, 72
  store i64 %1524, i64* %PC, align 8
  %1525 = inttoptr i64 %1523 to i64*
  store i64 %1495, i64* %1525, align 8
  %1526 = load i32, i32* %ECX, align 4
  %1527 = zext i32 %1526 to i64
  %1528 = load i64, i64* %PC, align 8
  store i64 %1527, i64* %RDI, align 8, !tbaa !2428
  %1529 = load i32, i32* %EAX, align 4
  %1530 = zext i32 %1529 to i64
  store i64 %1530, i64* %RDX, align 8, !tbaa !2428
  %1531 = load i64, i64* %RBP, align 8
  %1532 = add i64 %1531, -64
  %1533 = add i64 %1528, 8
  store i64 %1533, i64* %PC, align 8
  %1534 = inttoptr i64 %1532 to i64*
  %1535 = load i64, i64* %1534, align 8
  store i64 %1535, i64* %RCX, align 8, !tbaa !2428
  store i64 %1530, i64* %R8, align 8, !tbaa !2428
  %1536 = add i64 %1528, 2898
  %1537 = add i64 %1528, 16
  %1538 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1539 = add i64 %1538, -8
  %1540 = inttoptr i64 %1539 to i64*
  store i64 %1537, i64* %1540, align 8
  store i64 %1539, i64* %RSP, align 8, !tbaa !2428
  store i64 %1536, i64* %PC, align 8, !tbaa !2428
  %1541 = tail call %struct.Memory* @sub_402880_daxpy_renamed_(%struct.State* nonnull %0, i64 %1536, %struct.Memory* %2)
  %1542 = load i64, i64* %RBP, align 8
  %1543 = add i64 %1542, -44
  %1544 = load i64, i64* %PC, align 8
  %1545 = add i64 %1544, 3
  store i64 %1545, i64* %PC, align 8
  %1546 = inttoptr i64 %1543 to i32*
  %1547 = load i32, i32* %1546, align 4
  %1548 = add i32 %1547, 1
  %1549 = zext i32 %1548 to i64
  store i64 %1549, i64* %RAX, align 8, !tbaa !2428
  %1550 = icmp eq i32 %1547, -1
  %1551 = icmp eq i32 %1548, 0
  %1552 = or i1 %1550, %1551
  %1553 = zext i1 %1552 to i8
  store i8 %1553, i8* %19, align 1, !tbaa !2432
  %1554 = and i32 %1548, 255
  %1555 = tail call i32 @llvm.ctpop.i32(i32 %1554) #10
  %1556 = trunc i32 %1555 to i8
  %1557 = and i8 %1556, 1
  %1558 = xor i8 %1557, 1
  store i8 %1558, i8* %26, align 1, !tbaa !2446
  %1559 = xor i32 %1548, %1547
  %1560 = lshr i32 %1559, 4
  %1561 = trunc i32 %1560 to i8
  %1562 = and i8 %1561, 1
  store i8 %1562, i8* %31, align 1, !tbaa !2447
  %1563 = zext i1 %1551 to i8
  store i8 %1563, i8* %34, align 1, !tbaa !2448
  %1564 = lshr i32 %1548, 31
  %1565 = trunc i32 %1564 to i8
  store i8 %1565, i8* %37, align 1, !tbaa !2449
  %1566 = lshr i32 %1547, 31
  %1567 = xor i32 %1564, %1566
  %1568 = add nuw nsw i32 %1567, %1564
  %1569 = icmp eq i32 %1568, 2
  %1570 = zext i1 %1569 to i8
  store i8 %1570, i8* %43, align 1, !tbaa !2450
  %1571 = add i64 %1544, 9
  store i64 %1571, i64* %PC, align 8
  store i32 %1548, i32* %1546, align 4
  %1572 = load i64, i64* %PC, align 8
  %1573 = add i64 %1572, -197
  store i64 %1573, i64* %PC, align 8, !tbaa !2428
  br label %block_401c82

block_401e08:                                     ; preds = %block_401c40
  %1574 = add i64 %109, -44
  %1575 = add i64 %124, 7
  store i64 %1575, i64* %PC, align 8
  %1576 = inttoptr i64 %1574 to i32*
  store i32 0, i32* %1576, align 4
  %1577 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %1578 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %1579 = bitcast [32 x %union.VectorReg]* %8 to float*
  %1580 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %1581 = getelementptr inbounds i8, i8* %1578, i64 4
  %1582 = bitcast i8* %1581 to float*
  %1583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1584 = bitcast i64* %1583 to float*
  %1585 = getelementptr inbounds i8, i8* %1578, i64 12
  %1586 = bitcast i8* %1585 to float*
  %1587 = bitcast i64* %1583 to <2 x i32>*
  %1588 = bitcast i8* %1581 to i32*
  %1589 = bitcast i64* %1583 to i32*
  %1590 = bitcast i8* %1585 to i32*
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_401e0f

block_401e03:                                     ; preds = %block_401d58
  %1591 = add i64 %511, 436
  br label %block_401fb7

block_401c82:                                     ; preds = %block_401ce6, %block_401c7b
  %1592 = phi i64 [ %1573, %block_401ce6 ], [ %.pre, %block_401c7b ]
  %1593 = load i64, i64* %RBP, align 8
  %1594 = add i64 %1593, -44
  %1595 = add i64 %1592, 3
  store i64 %1595, i64* %PC, align 8
  %1596 = inttoptr i64 %1594 to i32*
  %1597 = load i32, i32* %1596, align 4
  %1598 = zext i32 %1597 to i64
  store i64 %1598, i64* %RAX, align 8, !tbaa !2428
  %1599 = add i64 %1593, -56
  %1600 = add i64 %1592, 6
  store i64 %1600, i64* %PC, align 8
  %1601 = inttoptr i64 %1599 to i32*
  %1602 = load i32, i32* %1601, align 4
  %1603 = sub i32 %1597, %1602
  %1604 = icmp ult i32 %1597, %1602
  %1605 = zext i1 %1604 to i8
  store i8 %1605, i8* %19, align 1, !tbaa !2432
  %1606 = and i32 %1603, 255
  %1607 = tail call i32 @llvm.ctpop.i32(i32 %1606) #10
  %1608 = trunc i32 %1607 to i8
  %1609 = and i8 %1608, 1
  %1610 = xor i8 %1609, 1
  store i8 %1610, i8* %26, align 1, !tbaa !2446
  %1611 = xor i32 %1602, %1597
  %1612 = xor i32 %1611, %1603
  %1613 = lshr i32 %1612, 4
  %1614 = trunc i32 %1613 to i8
  %1615 = and i8 %1614, 1
  store i8 %1615, i8* %31, align 1, !tbaa !2447
  %1616 = icmp eq i32 %1603, 0
  %1617 = zext i1 %1616 to i8
  store i8 %1617, i8* %34, align 1, !tbaa !2448
  %1618 = lshr i32 %1603, 31
  %1619 = trunc i32 %1618 to i8
  store i8 %1619, i8* %37, align 1, !tbaa !2449
  %1620 = lshr i32 %1597, 31
  %1621 = lshr i32 %1602, 31
  %1622 = xor i32 %1621, %1620
  %1623 = xor i32 %1618, %1620
  %1624 = add nuw nsw i32 %1623, %1622
  %1625 = icmp eq i32 %1624, 2
  %1626 = zext i1 %1625 to i8
  store i8 %1626, i8* %43, align 1, !tbaa !2450
  %1627 = icmp ne i8 %1619, 0
  %1628 = xor i1 %1627, %1625
  %.v51 = select i1 %1628, i64 12, i64 202
  %1629 = add i64 %.v51, %1592
  store i64 %1629, i64* %PC, align 8, !tbaa !2428
  br i1 %1628, label %block_401c8e, label %block_401d4c
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4027c0_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_4027c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = bitcast %union.VectorReg* %4 to i8*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast %union.VectorReg* %4 to i32*
  %16 = getelementptr inbounds i8, i8* %13, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = bitcast i64* %14 to i32*
  %19 = getelementptr inbounds i8, i8* %13, i64 12
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast %union.VectorReg* %4 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %21, align 1, !tbaa !2453
  %22 = bitcast %union.VectorReg* %5 to i8*
  %23 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 16) to i32*), align 16
  %24 = bitcast %union.VectorReg* %5 to i32*
  store i32 %23, i32* %24, align 1, !tbaa !2451
  %25 = getelementptr inbounds i8, i8* %22, i64 4
  %26 = bitcast i8* %25 to float*
  store float 0.000000e+00, float* %26, align 1, !tbaa !2451
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast i64* %27 to float*
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %29 = getelementptr inbounds i8, i8* %22, i64 12
  %30 = bitcast i8* %29 to float*
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  %31 = add i64 %9, -12
  %32 = add i64 %12, 19
  store i64 %32, i64* %PC, align 8
  %33 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 1
  %35 = extractelement <2 x float> %34, i32 0
  %36 = inttoptr i64 %31 to float*
  store float %35, float* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -8
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 5
  store i64 %40, i64* %PC, align 8
  %41 = bitcast %union.VectorReg* %5 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 1
  %43 = extractelement <2 x float> %42, i32 0
  %44 = inttoptr i64 %38 to float*
  store float %43, float* %44, align 4
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -20
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 5
  store i64 %48, i64* %PC, align 8
  %49 = bitcast %union.VectorReg* %4 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 1
  %51 = extractelement <2 x float> %50, i32 0
  %52 = inttoptr i64 %46 to float*
  store float %51, float* %52, align 4
  %53 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %56 = bitcast [32 x %union.VectorReg]* %3 to i32*
  %57 = getelementptr inbounds i8, i8* %53, i64 4
  %58 = bitcast i8* %57 to i32*
  %59 = bitcast i64* %54 to i32*
  %60 = getelementptr inbounds i8, i8* %53, i64 12
  %61 = bitcast i8* %60 to i32*
  %62 = bitcast %union.VectorReg* %4 to double*
  %63 = bitcast [32 x %union.VectorReg]* %3 to double*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %66 = bitcast i64* %54 to double*
  %67 = bitcast i64* %14 to <2 x i32>*
  %68 = bitcast %union.VectorReg* %4 to float*
  %69 = bitcast i8* %16 to float*
  %70 = bitcast i64* %14 to float*
  %71 = bitcast i8* %19 to float*
  %72 = bitcast [32 x %union.VectorReg]* %3 to float*
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre = load i64, i64* %PC, align 8
  %77 = bitcast [32 x %union.VectorReg]* %3 to <4 x i32>*
  br label %block_4027de

block_4027de:                                     ; preds = %block_4027f6, %block_4027c0
  %78 = phi i64 [ %.pre, %block_4027c0 ], [ %204, %block_4027f6 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4027c0 ], [ %109, %block_4027f6 ]
  store <4 x i32> zeroinitializer, <4 x i32>* %77, align 1, !tbaa !2453
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -20
  %81 = add i64 %78, 8
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to float*
  %83 = load float, float* %82, align 4
  %84 = fpext float %83 to double
  store double %84, double* %62, align 1, !tbaa !2454
  %85 = add i64 %78, 12
  store i64 %85, i64* %PC, align 8
  %86 = fcmp uno float %83, 0.000000e+00
  br i1 %86, label %87, label %97

; <label>:87:                                     ; preds = %block_4027de
  %88 = fadd double %84, 0.000000e+00
  %89 = bitcast double %88 to i64
  %90 = and i64 %89, 9221120237041090560
  %91 = icmp eq i64 %90, 9218868437227405312
  %92 = and i64 %89, 2251799813685247
  %93 = icmp ne i64 %92, 0
  %94 = and i1 %91, %93
  br i1 %94, label %95, label %103

; <label>:95:                                     ; preds = %87
  %96 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %85, %struct.Memory* %MEMORY.0) #13
  %.pre11 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:97:                                     ; preds = %block_4027de
  %98 = fcmp ogt float %83, 0.000000e+00
  br i1 %98, label %103, label %99

; <label>:99:                                     ; preds = %97
  %100 = fcmp olt float %83, 0.000000e+00
  br i1 %100, label %103, label %101

; <label>:101:                                    ; preds = %99
  %102 = fcmp oeq float %83, 0.000000e+00
  br i1 %102, label %103, label %107

; <label>:103:                                    ; preds = %101, %99, %97, %87
  %104 = phi i8 [ 0, %97 ], [ 0, %99 ], [ 1, %101 ], [ 1, %87 ]
  %105 = phi i8 [ 0, %97 ], [ 0, %99 ], [ 0, %101 ], [ 1, %87 ]
  %106 = phi i8 [ 0, %97 ], [ 1, %99 ], [ 0, %101 ], [ 1, %87 ]
  store i8 %104, i8* %64, align 1, !tbaa !2456
  store i8 %105, i8* %65, align 1, !tbaa !2456
  store i8 %106, i8* %73, align 1, !tbaa !2456
  br label %107

; <label>:107:                                    ; preds = %103, %101
  store i8 0, i8* %74, align 1, !tbaa !2456
  store i8 0, i8* %75, align 1, !tbaa !2456
  store i8 0, i8* %76, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %107, %95
  %108 = phi i64 [ %.pre11, %95 ], [ %85, %107 ]
  %109 = phi %struct.Memory* [ %96, %95 ], [ %MEMORY.0, %107 ]
  %110 = add i64 %108, 92
  %111 = add i64 %108, 6
  %112 = load i8, i8* %64, align 1, !tbaa !2448
  %113 = icmp eq i8 %112, 0
  %114 = select i1 %113, i64 %110, i64 %111
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  br i1 %113, label %block_402846, label %block_4027f0

block_4027f6:                                     ; preds = %block_4027f0
  %115 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 80) to i64*), align 16
  store i64 %115, i64* %55, align 1, !tbaa !2454
  store double 0.000000e+00, double* %66, align 1, !tbaa !2454
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -8
  %118 = add i64 %207, 13
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to float*
  %120 = load float, float* %119, align 4
  %121 = fpext float %120 to double
  %122 = load <2 x i32>, <2 x i32>* %67, align 1
  %123 = bitcast i64 %115 to double
  %124 = fsub double %121, %123
  %.cast = bitcast double %124 to <2 x i32>
  %125 = fptrunc double %124 to float
  store float %125, float* %68, align 1, !tbaa !2451
  %126 = extractelement <2 x i32> %.cast, i32 1
  store i32 %126, i32* %17, align 1, !tbaa !2451
  %127 = extractelement <2 x i32> %122, i32 0
  store i32 %127, i32* %18, align 1, !tbaa !2451
  %128 = extractelement <2 x i32> %122, i32 1
  store i32 %128, i32* %20, align 1, !tbaa !2451
  %129 = add i64 %116, -12
  %130 = add i64 %207, 26
  store i64 %130, i64* %PC, align 8
  %131 = load <2 x float>, <2 x float>* %49, align 1
  %132 = extractelement <2 x float> %131, i32 0
  %133 = inttoptr i64 %129 to float*
  store float %132, float* %133, align 4
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -12
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, 5
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %135 to i32*
  %139 = load i32, i32* %138, align 4
  store i32 %139, i32* %15, align 1, !tbaa !2451
  store float 0.000000e+00, float* %69, align 1, !tbaa !2451
  store float 0.000000e+00, float* %70, align 1, !tbaa !2451
  store float 0.000000e+00, float* %71, align 1, !tbaa !2451
  %140 = add i64 %136, 10
  store i64 %140, i64* %PC, align 8
  %141 = load <2 x float>, <2 x float>* %49, align 1
  %142 = load <2 x i32>, <2 x i32>* %67, align 1
  %143 = inttoptr i64 %135 to float*
  %144 = load float, float* %143, align 4
  %145 = extractelement <2 x float> %141, i32 0
  %146 = fadd float %145, %144
  store float %146, float* %68, align 1, !tbaa !2451
  %147 = bitcast <2 x float> %141 to <2 x i32>
  %148 = extractelement <2 x i32> %147, i32 1
  store i32 %148, i32* %17, align 1, !tbaa !2451
  %149 = extractelement <2 x i32> %142, i32 0
  store i32 %149, i32* %18, align 1, !tbaa !2451
  %150 = extractelement <2 x i32> %142, i32 1
  store i32 %150, i32* %20, align 1, !tbaa !2451
  %151 = add i64 %136, 15
  store i64 %151, i64* %PC, align 8
  %152 = load <2 x float>, <2 x float>* %49, align 1
  %153 = load <2 x i32>, <2 x i32>* %67, align 1
  %154 = load float, float* %143, align 4
  %155 = extractelement <2 x float> %152, i32 0
  %156 = fadd float %155, %154
  store float %156, float* %68, align 1, !tbaa !2451
  %157 = bitcast <2 x float> %152 to <2 x i32>
  %158 = extractelement <2 x i32> %157, i32 1
  store i32 %158, i32* %17, align 1, !tbaa !2451
  %159 = extractelement <2 x i32> %153, i32 0
  store i32 %159, i32* %18, align 1, !tbaa !2451
  %160 = extractelement <2 x i32> %153, i32 1
  store i32 %160, i32* %20, align 1, !tbaa !2451
  %161 = add i64 %134, -16
  %162 = add i64 %136, 20
  store i64 %162, i64* %PC, align 8
  %163 = load <2 x float>, <2 x float>* %49, align 1
  %164 = extractelement <2 x float> %163, i32 0
  %165 = inttoptr i64 %161 to float*
  store float %164, float* %165, align 4
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -16
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %167 to float*
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  %173 = load i64, i64* %14, align 1
  %174 = load double, double* %63, align 1
  %175 = fsub double %172, %174
  %176 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %177 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %178 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %179 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %176, i32* %56, align 1, !tbaa !2451
  store i32 %177, i32* %58, align 1, !tbaa !2451
  store i32 %178, i32* %59, align 1, !tbaa !2451
  store i32 %179, i32* %61, align 1, !tbaa !2451
  %180 = bitcast double %175 to i64
  %181 = load i64, i64* %55, align 1
  %182 = load i64, i64* %54, align 1
  %183 = and i64 %181, %180
  %184 = and i64 %182, %173
  %185 = trunc i64 %183 to i32
  %186 = lshr i64 %183, 32
  %187 = trunc i64 %186 to i32
  store i32 %185, i32* %15, align 1, !tbaa !2453
  store i32 %187, i32* %17, align 1, !tbaa !2453
  %188 = trunc i64 %184 to i32
  store i32 %188, i32* %18, align 1, !tbaa !2453
  %189 = lshr i64 %184, 32
  %190 = trunc i64 %189 to i32
  store i32 %190, i32* %20, align 1, !tbaa !2453
  %191 = bitcast i64 %181 to <2 x i32>
  %192 = bitcast i64 %182 to <2 x i32>
  %193 = load double, double* %62, align 1
  %194 = fptrunc double %193 to float
  store float %194, float* %72, align 1, !tbaa !2451
  %195 = extractelement <2 x i32> %191, i32 1
  store i32 %195, i32* %58, align 1, !tbaa !2451
  %196 = extractelement <2 x i32> %192, i32 0
  store i32 %196, i32* %59, align 1, !tbaa !2451
  %197 = extractelement <2 x i32> %192, i32 1
  store i32 %197, i32* %61, align 1, !tbaa !2451
  %198 = add i64 %166, -20
  %199 = add i64 %168, 29
  store i64 %199, i64* %PC, align 8
  %200 = load <2 x float>, <2 x float>* %33, align 1
  %201 = extractelement <2 x float> %200, i32 0
  %202 = inttoptr i64 %198 to float*
  store float %201, float* %202, align 4
  %203 = load i64, i64* %PC, align 8
  %204 = add i64 %203, -99
  store i64 %204, i64* %PC, align 8, !tbaa !2428
  br label %block_4027de

block_4027f0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %205 = load i8, i8* %65, align 1, !tbaa !2446
  %206 = icmp ne i8 %205, 0
  %.v = select i1 %206, i64 86, i64 6
  %207 = add i64 %.v, %114
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  %208 = icmp eq i8 %205, 1
  br i1 %208, label %block_402846, label %block_4027f6

block_402846:                                     ; preds = %block_4027f0, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %209 = phi i64 [ %207, %block_4027f0 ], [ %110, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -20
  %212 = add i64 %209, 5
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to float*
  %214 = load float, float* %213, align 4
  %215 = fpext float %214 to double
  store double %215, double* %63, align 1, !tbaa !2454
  %216 = add i64 %210, -4
  %217 = add i64 %209, 10
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %216 to float*
  %219 = load float, float* %218, align 4
  %220 = fpext float %219 to double
  %221 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %222 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %223 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %224 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %221, i32* %24, align 1, !tbaa !2451
  %225 = bitcast i8* %25 to i32*
  store i32 %222, i32* %225, align 1, !tbaa !2451
  %226 = bitcast i64* %27 to i32*
  store i32 %223, i32* %226, align 1, !tbaa !2451
  %227 = bitcast i8* %29 to i32*
  store i32 %224, i32* %227, align 1, !tbaa !2451
  %228 = bitcast double %220 to i64
  %229 = load i64, i64* %14, align 1
  %230 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %231 = load i64, i64* %230, align 1
  %232 = load i64, i64* %27, align 1
  %233 = and i64 %231, %228
  %234 = and i64 %232, %229
  %235 = trunc i64 %233 to i32
  %236 = lshr i64 %233, 32
  %237 = trunc i64 %236 to i32
  store i32 %235, i32* %15, align 1, !tbaa !2453
  store i32 %237, i32* %17, align 1, !tbaa !2453
  %238 = trunc i64 %234 to i32
  store i32 %238, i32* %18, align 1, !tbaa !2453
  %239 = lshr i64 %234, 32
  %240 = trunc i64 %239 to i32
  store i32 %240, i32* %20, align 1, !tbaa !2453
  %241 = bitcast i64* %54 to <2 x i32>*
  %242 = load <2 x i32>, <2 x i32>* %241, align 1
  %243 = load double, double* %62, align 1
  %244 = fmul double %215, %243
  %.cast3 = bitcast double %244 to <2 x i32>
  %245 = fptrunc double %244 to float
  store float %245, float* %72, align 1, !tbaa !2451
  %246 = extractelement <2 x i32> %.cast3, i32 1
  store i32 %246, i32* %58, align 1, !tbaa !2451
  %247 = extractelement <2 x i32> %242, i32 0
  store i32 %247, i32* %59, align 1, !tbaa !2451
  %248 = extractelement <2 x i32> %242, i32 1
  store i32 %248, i32* %61, align 1, !tbaa !2451
  %249 = add i64 %209, 30
  store i64 %249, i64* %PC, align 8
  %250 = load i64, i64* %8, align 8, !tbaa !2428
  %251 = add i64 %250, 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %RBP, align 8, !tbaa !2428
  store i64 %251, i64* %8, align 8, !tbaa !2428
  %254 = add i64 %209, 31
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %251 to i64*
  %256 = load i64, i64* %255, align 8
  store i64 %256, i64* %PC, align 8, !tbaa !2428
  %257 = add i64 %250, 16
  store i64 %257, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %109
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005e0_frame_dummy(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_4005e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400570_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
define %struct.Memory* @sub_400640_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400640:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -1016
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %23 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %24 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 8) to i32*), align 8
  %25 = bitcast [32 x %union.VectorReg]* %6 to float*
  %26 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !2451
  %27 = getelementptr inbounds i8, i8* %23, i64 4
  %28 = bitcast i8* %27 to float*
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to float*
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  %31 = getelementptr inbounds i8, i8* %23, i64 12
  %32 = bitcast i8* %31 to float*
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i64 720, i64* %R8, align 8, !tbaa !2428
  %33 = add i64 %12, -840
  store i64 %33, i64* %R9, align 8, !tbaa !2428
  %34 = add i64 %12, -12
  %35 = add i64 %15, 72
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i32*
  store i32 0, i32* %36, align 4
  %37 = load i64, i64* %R9, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -840
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %38, 10
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i32, i32* %EDX, align 4
  %45 = zext i32 %44 to i64
  %46 = load i64, i64* %PC, align 8
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %47 = load i64, i64* %R8, align 8
  store i64 %47, i64* %RDX, align 8, !tbaa !2428
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -848
  %50 = load i64, i64* %RCX, align 8
  %51 = add i64 %46, 12
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -852
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 8
  store i64 %56, i64* %PC, align 8
  %57 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 1
  %59 = extractelement <2 x float> %58, i32 0
  %60 = inttoptr i64 %54 to float*
  store float %59, float* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -864
  %63 = load i64, i64* %RAX, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, -462
  %69 = add i64 %67, 5
  %70 = load i64, i64* %RSP, align 8, !tbaa !2428
  %71 = add i64 %70, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 %69, i64* %72, align 8
  store i64 %71, i64* %RSP, align 8, !tbaa !2428
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  %73 = tail call fastcc %struct.Memory* @ext_653148_memset(%struct.State* nonnull %0, %struct.Memory* %2)
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -832
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i8*
  store i8 32, i8* %78, align 1
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -848
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 7
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = add i64 %79, -96
  %86 = add i64 %81, 11
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  store i64 %84, i64* %87, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -864
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 7
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = add i64 %88, -104
  %95 = add i64 %90, 11
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %93, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %98 = load i64, i64* %RBP, align 8
  %99 = add i64 %98, -852
  %100 = add i64 %97, 30
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %103 = add i64 %98, -8
  %104 = add i64 %97, 35
  store i64 %104, i64* %PC, align 8
  %105 = load <2 x float>, <2 x float>* %57, align 1
  %106 = extractelement <2 x float> %105, i32 0
  %107 = inttoptr i64 %103 to float*
  store float %106, float* %107, align 4
  %108 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %109 = load i64, i64* @stderr, align 64
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -840
  %112 = add i64 %108, 26
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %115 = add i64 %108, -515
  %116 = add i64 %108, 33
  %117 = load i64, i64* %RSP, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %116, i64* %119, align 8
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %120 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %73)
  %121 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %122 = load i64, i64* @stderr, align 64
  store i64 %122, i64* %RDI, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP, align 8
  %124 = add i64 %123, -868
  %125 = load i32, i32* %EAX, align 4
  %126 = add i64 %121, 24
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %127, align 4
  %128 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %129 = add i64 %128, -572
  %130 = add i64 %128, 7
  %131 = load i64, i64* %RSP, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133, align 8
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  %134 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %120)
  %135 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %136 = load i64, i64* @stderr, align 64
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -872
  %139 = load i32, i32* %EAX, align 4
  %140 = add i64 %135, 24
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %138 to i32*
  store i32 %139, i32* %141, align 4
  %142 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %143 = add i64 %142, -603
  %144 = add i64 %142, 7
  %145 = load i64, i64* %RSP, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %144, i64* %147, align 8
  store i64 %146, i64* %RSP, align 8, !tbaa !2428
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  %148 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %134)
  %149 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %150 = load i64, i64* @stderr, align 64
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -96
  %153 = add i64 %149, 22
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RDX, align 8, !tbaa !2428
  %156 = add i64 %151, -876
  %157 = load i32, i32* %EAX, align 4
  %158 = add i64 %149, 28
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i32*
  store i32 %157, i32* %159, align 4
  %160 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %161 = add i64 %160, -638
  %162 = add i64 %160, 7
  %163 = load i64, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165, align 8
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %166 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %148)
  %167 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %168 = load i64, i64* @stderr, align 64
  store i64 %168, i64* %RDI, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -104
  %171 = add i64 %167, 22
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RDX, align 8, !tbaa !2428
  %174 = add i64 %169, -880
  %175 = load i32, i32* %EAX, align 4
  %176 = add i64 %167, 28
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i32*
  store i32 %175, i32* %177, align 4
  %178 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %179 = add i64 %178, -673
  %180 = add i64 %178, 7
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %166)
  %185 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -20
  store i64 %187, i64* %R8, align 8, !tbaa !2428
  %188 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  %189 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 32) to double*), align 16
  %190 = bitcast %union.VectorReg* %7 to double*
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %192 = bitcast i64* %191 to double*
  store double 0.000000e+00, double* %192, align 1, !tbaa !2454
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %194 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %195 = sext i32 %194 to i64
  %196 = mul nsw i64 %195, %195
  %197 = trunc i64 %196 to i32
  %198 = and i64 %196, 4294967295
  %199 = shl i64 %196, 32
  %200 = ashr exact i64 %199, 32
  %201 = icmp ne i64 %200, %196
  %202 = zext i1 %201 to i8
  %203 = and i32 %197, 255
  %204 = tail call i32 @llvm.ctpop.i32(i32 %203) #10
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = xor i8 %206, 1
  %208 = lshr i32 %197, 31
  %209 = trunc i32 %208 to i8
  %210 = mul nsw i64 %200, %195
  %211 = trunc i64 %210 to i32
  %212 = sitofp i32 %211 to double
  %213 = bitcast %union.VectorReg* %8 to double*
  store double %212, double* %213, align 1, !tbaa !2454
  %214 = bitcast %union.VectorReg* %9 to i8*
  %215 = bitcast i64 %188 to <2 x i32>
  %216 = bitcast i64* %29 to <2 x i32>*
  %217 = extractelement <2 x i32> %215, i32 0
  %218 = bitcast %union.VectorReg* %9 to i32*
  store i32 %217, i32* %218, align 1, !tbaa !2451
  %219 = extractelement <2 x i32> %215, i32 1
  %220 = getelementptr inbounds i8, i8* %214, i64 4
  %221 = bitcast i8* %220 to i32*
  store i32 %219, i32* %221, align 1, !tbaa !2451
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %223 = bitcast i64* %222 to i32*
  store i32 0, i32* %223, align 1, !tbaa !2451
  %224 = getelementptr inbounds i8, i8* %214, i64 12
  %225 = bitcast i8* %224 to i32*
  store i32 0, i32* %225, align 1, !tbaa !2451
  %226 = bitcast %union.VectorReg* %9 to double*
  %227 = load double, double* %226, align 1
  %228 = fmul double %227, %212
  %229 = fdiv double %228, %189
  store i64 %198, i64* %193, align 8, !tbaa !2428
  store i8 %202, i8* %17, align 1, !tbaa !2432
  store i8 %207, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %20, align 1, !tbaa !2448
  store i8 %209, i8* %21, align 1, !tbaa !2449
  store i8 %202, i8* %22, align 1, !tbaa !2450
  %230 = sitofp i32 %197 to double
  store double %230, double* %190, align 1, !tbaa !2454
  %231 = bitcast i64 %188 to double
  %232 = fmul double %231, %230
  %233 = fadd double %232, %229
  store double %233, double* %226, align 1, !tbaa !2454
  %234 = bitcast double %232 to <2 x i32>
  %235 = fptrunc double %233 to float
  store float %235, float* %25, align 1, !tbaa !2451
  %236 = extractelement <2 x i32> %234, i32 1
  %237 = bitcast i8* %27 to i32*
  store i32 %236, i32* %237, align 1, !tbaa !2451
  %238 = bitcast i64* %29 to i32*
  store i32 0, i32* %238, align 1, !tbaa !2451
  %239 = bitcast i8* %31 to i32*
  store i32 0, i32* %239, align 1, !tbaa !2451
  %240 = add i64 %186, -12
  %241 = add i64 %185, 121
  store i64 %241, i64* %PC, align 8
  %242 = load <2 x float>, <2 x float>* %57, align 1
  %243 = extractelement <2 x float> %242, i32 0
  %244 = inttoptr i64 %240 to float*
  store float %243, float* %244, align 4
  %245 = load i64, i64* %PC, align 8
  %246 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %247 = zext i32 %246 to i64
  store i64 %247, i64* %RSI, align 8, !tbaa !2428
  %248 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %249 = zext i32 %248 to i64
  store i64 %249, i64* %RDX, align 8, !tbaa !2428
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -884
  %252 = load i32, i32* %EAX, align 4
  %253 = add i64 %245, 20
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %251 to i32*
  store i32 %252, i32* %254, align 4
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, 3899
  %257 = add i64 %255, 5
  %258 = load i64, i64* %RSP, align 8, !tbaa !2428
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260, align 8
  store i64 %259, i64* %RSP, align 8, !tbaa !2428
  store i64 %256, i64* %PC, align 8, !tbaa !2428
  %261 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %256, %struct.Memory* %184)
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, -570
  %264 = add i64 %262, 5
  %265 = load i64, i64* %RSP, align 8, !tbaa !2428
  %266 = add i64 %265, -8
  %267 = inttoptr i64 %266 to i64*
  store i64 %264, i64* %267, align 8
  store i64 %266, i64* %RSP, align 8, !tbaa !2428
  store i64 %263, i64* %PC, align 8, !tbaa !2428
  %268 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %263, %struct.Memory* %261)
  %269 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -40
  %272 = add i64 %269, 35
  store i64 %272, i64* %PC, align 8
  %273 = load <2 x float>, <2 x float>* %57, align 1
  %274 = extractelement <2 x float> %273, i32 0
  %275 = inttoptr i64 %271 to float*
  store float %274, float* %275, align 4
  %276 = load i64, i64* %PC, align 8
  %277 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %278 = zext i32 %277 to i64
  store i64 %278, i64* %RSI, align 8, !tbaa !2428
  %279 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %280 = zext i32 %279 to i64
  store i64 %280, i64* %RDX, align 8, !tbaa !2428
  %281 = add i64 %276, 4318
  %282 = add i64 %276, 19
  %283 = load i64, i64* %RSP, align 8, !tbaa !2428
  %284 = add i64 %283, -8
  %285 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %285, align 8
  store i64 %284, i64* %RSP, align 8, !tbaa !2428
  store i64 %281, i64* %PC, align 8, !tbaa !2428
  %286 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %281, %struct.Memory* %268)
  %287 = load i64, i64* %PC, align 8
  %288 = add i64 %287, -629
  %289 = add i64 %287, 5
  %290 = load i64, i64* %RSP, align 8, !tbaa !2428
  %291 = add i64 %290, -8
  %292 = inttoptr i64 %291 to i64*
  store i64 %289, i64* %292, align 8
  store i64 %291, i64* %RSP, align 8, !tbaa !2428
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  %293 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %288, %struct.Memory* %286)
  %294 = load i64, i64* %RBP, align 8
  %295 = add i64 %294, -40
  %296 = load i64, i64* %PC, align 8
  %297 = add i64 %296, 5
  store i64 %297, i64* %PC, align 8
  %298 = load <2 x float>, <2 x float>* %57, align 1
  %299 = load <2 x i32>, <2 x i32>* %216, align 1
  %300 = inttoptr i64 %295 to float*
  %301 = load float, float* %300, align 4
  %302 = extractelement <2 x float> %298, i32 0
  %303 = fsub float %302, %301
  store float %303, float* %25, align 1, !tbaa !2451
  %304 = bitcast <2 x float> %298 to <2 x i32>
  %305 = extractelement <2 x i32> %304, i32 1
  store i32 %305, i32* %237, align 1, !tbaa !2451
  %306 = extractelement <2 x i32> %299, i32 0
  store i32 %306, i32* %238, align 1, !tbaa !2451
  %307 = extractelement <2 x i32> %299, i32 1
  store i32 %307, i32* %239, align 1, !tbaa !2451
  %308 = load <2 x float>, <2 x float>* %57, align 1
  %309 = extractelement <2 x float> %308, i32 0
  store float %309, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*), align 16
  %310 = add i64 %296, -634
  %311 = add i64 %296, 19
  %312 = load i64, i64* %RSP, align 8, !tbaa !2428
  %313 = add i64 %312, -8
  %314 = inttoptr i64 %313 to i64*
  store i64 %311, i64* %314, align 8
  store i64 %313, i64* %RSP, align 8, !tbaa !2428
  store i64 %310, i64* %PC, align 8, !tbaa !2428
  %315 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %310, %struct.Memory* %293)
  %316 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -40
  %319 = add i64 %316, 38
  store i64 %319, i64* %PC, align 8
  %320 = load <2 x float>, <2 x float>* %57, align 1
  %321 = extractelement <2 x float> %320, i32 0
  %322 = inttoptr i64 %318 to float*
  store float %321, float* %322, align 4
  %323 = load i64, i64* %PC, align 8
  %324 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %325 = zext i32 %324 to i64
  store i64 %325, i64* %RSI, align 8, !tbaa !2428
  %326 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RDX, align 8, !tbaa !2428
  %328 = add i64 %323, 5021
  %329 = add i64 %323, 19
  %330 = load i64, i64* %RSP, align 8, !tbaa !2428
  %331 = add i64 %330, -8
  %332 = inttoptr i64 %331 to i64*
  store i64 %329, i64* %332, align 8
  store i64 %331, i64* %RSP, align 8, !tbaa !2428
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  %333 = tail call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* nonnull %0, i64 %328, %struct.Memory* %315)
  %334 = load i64, i64* %PC, align 8
  %335 = add i64 %334, -710
  %336 = add i64 %334, 5
  %337 = load i64, i64* %RSP, align 8, !tbaa !2428
  %338 = add i64 %337, -8
  %339 = inttoptr i64 %338 to i64*
  store i64 %336, i64* %339, align 8
  store i64 %338, i64* %RSP, align 8, !tbaa !2428
  store i64 %335, i64* %PC, align 8, !tbaa !2428
  %340 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %335, %struct.Memory* %333)
  %341 = load i64, i64* %RBP, align 8
  %342 = add i64 %341, -40
  %343 = load i64, i64* %PC, align 8
  %344 = add i64 %343, 5
  store i64 %344, i64* %PC, align 8
  %345 = load <2 x float>, <2 x float>* %57, align 1
  %346 = inttoptr i64 %342 to float*
  %347 = load float, float* %346, align 4
  %348 = extractelement <2 x float> %345, i32 0
  %349 = fsub float %348, %347
  store float %349, float* %25, align 1, !tbaa !2451
  %350 = bitcast <2 x float> %345 to <2 x i32>
  %351 = extractelement <2 x i32> %350, i32 1
  store i32 %351, i32* %237, align 1, !tbaa !2451
  %352 = load <2 x float>, <2 x float>* %57, align 1
  %353 = extractelement <2 x float> %352, i32 0
  store float %353, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*), align 4
  %354 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to i32*), align 16
  store i32 %354, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %355 = load <2 x float>, <2 x float>* %57, align 1
  %356 = load <2 x i32>, <2 x i32>* %216, align 1
  %357 = extractelement <2 x float> %355, i32 0
  %358 = fadd float %353, %357
  store float %358, float* %25, align 1, !tbaa !2451
  %359 = bitcast <2 x float> %355 to <2 x i32>
  %360 = extractelement <2 x i32> %359, i32 1
  store i32 %360, i32* %237, align 1, !tbaa !2451
  %361 = extractelement <2 x i32> %356, i32 0
  store i32 %361, i32* %238, align 1, !tbaa !2451
  %362 = extractelement <2 x i32> %356, i32 1
  store i32 %362, i32* %239, align 1, !tbaa !2451
  %363 = add i64 %341, -16
  %364 = add i64 %343, 37
  store i64 %364, i64* %PC, align 8
  %365 = load <2 x float>, <2 x float>* %57, align 1
  %366 = extractelement <2 x float> %365, i32 0
  %367 = inttoptr i64 %363 to float*
  store float %366, float* %367, align 4
  %368 = load i64, i64* %PC, align 8
  %369 = add i64 %368, 11
  store i64 %369, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4008eb

block_40096d:                                     ; preds = %block_400981, %block_400937
  %370 = phi i32 [ %3134, %block_400981 ], [ 0, %block_400937 ]
  %371 = phi i64 [ %3157, %block_400981 ], [ %2612, %block_400937 ]
  %372 = zext i32 %370 to i64
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %374 = sub i32 %370, %373
  %375 = icmp ult i32 %370, %373
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %17, align 1, !tbaa !2432
  %377 = and i32 %374, 255
  %378 = tail call i32 @llvm.ctpop.i32(i32 %377) #10
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = xor i8 %380, 1
  store i8 %381, i8* %18, align 1, !tbaa !2446
  %382 = xor i32 %373, %370
  %383 = xor i32 %382, %374
  %384 = lshr i32 %383, 4
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  store i8 %386, i8* %19, align 1, !tbaa !2447
  %387 = icmp eq i32 %374, 0
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %20, align 1, !tbaa !2448
  %389 = lshr i32 %374, 31
  %390 = trunc i32 %389 to i8
  store i8 %390, i8* %21, align 1, !tbaa !2449
  %391 = lshr i32 %370, 31
  %392 = lshr i32 %373, 31
  %393 = xor i32 %392, %391
  %394 = xor i32 %389, %391
  %395 = add nuw nsw i32 %394, %393
  %396 = icmp eq i32 %395, 2
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %22, align 1, !tbaa !2450
  %398 = icmp ne i8 %390, 0
  %399 = xor i1 %398, %396
  %.v94 = select i1 %399, i64 20, i64 90
  %400 = add i64 %.v94, %371
  store i64 %400, i64* %PC, align 8, !tbaa !2428
  br i1 %399, label %block_400981, label %block_4009c7

block_4012f1:                                     ; preds = %block_401082
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %1874, align 1, !tbaa !2453
  %401 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 48) to i64*), align 16
  %402 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %403 = fpext float %402 to double
  %404 = bitcast i64 %401 to double
  %405 = fdiv double %403, %404
  store double %405, double* %213, align 1, !tbaa !2454
  %.cast30 = bitcast i64 %401 to <2 x i32>
  %406 = fptrunc double %405 to float
  store float %406, float* %2100, align 1, !tbaa !2451
  %407 = extractelement <2 x i32> %.cast30, i32 1
  store i32 %407, i32* %1898, align 1, !tbaa !2451
  store i32 0, i32* %1899, align 1, !tbaa !2451
  store i32 0, i32* %1901, align 1, !tbaa !2451
  %408 = load <2 x float>, <2 x float>* %2193, align 1
  %409 = extractelement <2 x float> %408, i32 0
  store float %409, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %410 = load i64, i64* @stderr, align 64
  store i64 %410, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %411 = add i64 %3115, -3585
  %412 = add i64 %3115, 62
  %413 = load i64, i64* %RSP, align 8, !tbaa !2428
  %414 = add i64 %413, -8
  %415 = inttoptr i64 %414 to i64*
  store i64 %412, i64* %415, align 8
  store i64 %414, i64* %RSP, align 8, !tbaa !2428
  store i64 %411, i64* %PC, align 8, !tbaa !2428
  %416 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1162)
  %417 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %418 = load i64, i64* @stderr, align 64
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = load i64, i64* %RBP, align 8
  %420 = add i64 %419, -972
  %421 = load i32, i32* %EAX, align 4
  %422 = add i64 %417, 24
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %420 to i32*
  store i32 %421, i32* %423, align 4
  %424 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %425 = add i64 %424, -3671
  %426 = add i64 %424, 7
  %427 = load i64, i64* %RSP, align 8, !tbaa !2428
  %428 = add i64 %427, -8
  %429 = inttoptr i64 %428 to i64*
  store i64 %426, i64* %429, align 8
  store i64 %428, i64* %RSP, align 8, !tbaa !2428
  store i64 %425, i64* %PC, align 8, !tbaa !2428
  %430 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %416)
  %431 = load i64, i64* %RBP, align 8
  %432 = add i64 %431, -976
  %433 = load i32, i32* %EAX, align 4
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 6
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %432 to i32*
  store i32 %433, i32* %436, align 4
  %437 = load i64, i64* %PC, align 8
  %438 = add i64 %437, -3428
  %439 = add i64 %437, 5
  %440 = load i64, i64* %RSP, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %439, i64* %442, align 8
  store i64 %441, i64* %RSP, align 8, !tbaa !2428
  store i64 %438, i64* %PC, align 8, !tbaa !2428
  %443 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %438, %struct.Memory* %430)
  %444 = load i64, i64* %RBP, align 8
  %445 = add i64 %444, -80
  %446 = load i64, i64* %PC, align 8
  %447 = add i64 %446, 5
  store i64 %447, i64* %PC, align 8
  %448 = load <2 x float>, <2 x float>* %57, align 1
  %449 = extractelement <2 x float> %448, i32 0
  %450 = inttoptr i64 %445 to float*
  store float %449, float* %450, align 4
  %451 = load i64, i64* %PC, align 8
  %452 = add i64 %451, 11
  store i64 %452, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_401369

block_40116d:                                     ; preds = %block_40112b, %block_401181
  %453 = phi i32 [ 0, %block_40112b ], [ %2956, %block_401181 ]
  %454 = phi i64 [ %3089, %block_40112b ], [ %2979, %block_401181 ]
  %455 = zext i32 %453 to i64
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %456 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %457 = sub i32 %453, %456
  %458 = icmp ult i32 %453, %456
  %459 = zext i1 %458 to i8
  store i8 %459, i8* %17, align 1, !tbaa !2432
  %460 = and i32 %457, 255
  %461 = tail call i32 @llvm.ctpop.i32(i32 %460) #10
  %462 = trunc i32 %461 to i8
  %463 = and i8 %462, 1
  %464 = xor i8 %463, 1
  store i8 %464, i8* %18, align 1, !tbaa !2446
  %465 = xor i32 %456, %453
  %466 = xor i32 %465, %457
  %467 = lshr i32 %466, 4
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  store i8 %469, i8* %19, align 1, !tbaa !2447
  %470 = icmp eq i32 %457, 0
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %20, align 1, !tbaa !2448
  %472 = lshr i32 %457, 31
  %473 = trunc i32 %472 to i8
  store i8 %473, i8* %21, align 1, !tbaa !2449
  %474 = lshr i32 %453, 31
  %475 = lshr i32 %456, 31
  %476 = xor i32 %475, %474
  %477 = xor i32 %472, %474
  %478 = add nuw nsw i32 %477, %476
  %479 = icmp eq i32 %478, 2
  %480 = zext i1 %479 to i8
  store i8 %480, i8* %22, align 1, !tbaa !2450
  %481 = icmp ne i8 %473, 0
  %482 = xor i1 %481, %479
  %.v104 = select i1 %482, i64 20, i64 94
  %483 = add i64 %.v104, %454
  store i64 %483, i64* %PC, align 8, !tbaa !2428
  br i1 %482, label %block_401181, label %block_4011cb

block_400cc0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %484 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  store i64 %484, i64* %2598, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1860, align 1, !tbaa !2454
  %485 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to i64*), align 8
  store i64 %485, i64* %1861, align 1, !tbaa !2454
  store double 0.000000e+00, double* %192, align 1, !tbaa !2454
  %486 = load i64, i64* %RBP, align 8
  %487 = add i64 %486, -12
  %488 = add i64 %2423, 21
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to float*
  %490 = load float, float* %489, align 4
  %491 = fpext float %490 to double
  store double %491, double* %213, align 1, !tbaa !2454
  %492 = add i64 %486, -16
  %493 = add i64 %2423, 26
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to float*
  %495 = load float, float* %494, align 4
  %496 = fpext float %495 to double
  store double %496, double* %226, align 1, !tbaa !2454
  %497 = bitcast i64 %485 to double
  %498 = fmul double %497, %496
  %499 = fdiv double %491, %498
  store double %499, double* %213, align 1, !tbaa !2454
  %500 = bitcast double %498 to <2 x i32>
  %501 = fptrunc double %499 to float
  store float %501, float* %2100, align 1, !tbaa !2451
  %502 = extractelement <2 x i32> %500, i32 1
  store i32 %502, i32* %1898, align 1, !tbaa !2451
  store i32 0, i32* %1899, align 1, !tbaa !2451
  store i32 0, i32* %1901, align 1, !tbaa !2451
  %503 = load <2 x float>, <2 x float>* %2193, align 1
  %504 = extractelement <2 x float> %503, i32 0
  store float %504, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %505 = fpext float %504 to double
  store double %505, double* %190, align 1, !tbaa !2454
  %506 = bitcast i64 %484 to double
  %507 = fdiv double %506, %505
  %.cast23 = bitcast double %507 to <2 x i32>
  %508 = fptrunc double %507 to float
  store float %508, float* %25, align 1, !tbaa !2451
  %509 = extractelement <2 x i32> %.cast23, i32 1
  store i32 %509, i32* %237, align 1, !tbaa !2451
  store i32 0, i32* %238, align 1, !tbaa !2451
  store i32 0, i32* %239, align 1, !tbaa !2451
  %510 = load <2 x float>, <2 x float>* %57, align 1
  %511 = extractelement <2 x float> %510, i32 0
  store float %511, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %512 = add i64 %2423, 99
  store i64 %512, i64* %PC, align 8, !tbaa !2428
  br label %block_400d23

block_400afe:                                     ; preds = %block_400ac8, %block_400ada
  %513 = phi i64 [ %2662, %block_400ac8 ], [ %.pre89, %block_400ada ]
  %514 = load i64, i64* %RBP, align 8
  %515 = add i64 %514, -904
  %516 = add i64 %513, 8
  store i64 %516, i64* %PC, align 8
  %517 = inttoptr i64 %515 to i64*
  %518 = load i64, i64* %517, align 8
  %.cast21 = bitcast i64 %518 to <2 x i32>
  %.cast22 = bitcast i64 %518 to double
  %519 = fptrunc double %.cast22 to float
  store float %519, float* %25, align 1, !tbaa !2451
  %520 = extractelement <2 x i32> %.cast21, i32 1
  store i32 %520, i32* %237, align 1, !tbaa !2451
  store i32 0, i32* %238, align 1, !tbaa !2451
  store i32 0, i32* %239, align 1, !tbaa !2451
  %521 = add i64 %514, -24
  %522 = add i64 %513, 17
  store i64 %522, i64* %PC, align 8
  %523 = load <2 x float>, <2 x float>* %57, align 1
  %524 = extractelement <2 x float> %523, i32 0
  %525 = inttoptr i64 %521 to float*
  store float %524, float* %525, align 4
  %526 = load i64, i64* %PC, align 8
  %527 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %528 = add i32 %527, 1
  %529 = zext i32 %528 to i64
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = icmp eq i32 %527, -1
  %531 = icmp eq i32 %528, 0
  %532 = or i1 %530, %531
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %17, align 1, !tbaa !2432
  %534 = and i32 %528, 255
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534) #10
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %18, align 1, !tbaa !2446
  %539 = xor i32 %528, %527
  %540 = lshr i32 %539, 4
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  store i8 %542, i8* %19, align 1, !tbaa !2447
  %543 = zext i1 %531 to i8
  store i8 %543, i8* %20, align 1, !tbaa !2448
  %544 = lshr i32 %528, 31
  %545 = trunc i32 %544 to i8
  store i8 %545, i8* %21, align 1, !tbaa !2449
  %546 = lshr i32 %527, 31
  %547 = xor i32 %544, %546
  %548 = add nuw nsw i32 %547, %544
  %549 = icmp eq i32 %548, 2
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %22, align 1, !tbaa !2450
  store i32 %528, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %551 = add i64 %526, -248
  store i64 %551, i64* %PC, align 8, !tbaa !2428
  br label %block_400a17

block_4008eb:                                     ; preds = %block_4008ff, %block_400640
  %552 = phi i32 [ %1644, %block_4008ff ], [ 0, %block_400640 ]
  %553 = phi i64 [ %1667, %block_4008ff ], [ %369, %block_400640 ]
  %554 = zext i32 %552 to i64
  store i64 %554, i64* %RAX, align 8, !tbaa !2428
  %555 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %556 = sub i32 %552, %555
  %557 = icmp ult i32 %552, %555
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %17, align 1, !tbaa !2432
  %559 = and i32 %556, 255
  %560 = tail call i32 @llvm.ctpop.i32(i32 %559) #10
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  store i8 %563, i8* %18, align 1, !tbaa !2446
  %564 = xor i32 %555, %552
  %565 = xor i32 %564, %556
  %566 = lshr i32 %565, 4
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  store i8 %568, i8* %19, align 1, !tbaa !2447
  %569 = icmp eq i32 %556, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %20, align 1, !tbaa !2448
  %571 = lshr i32 %556, 31
  %572 = trunc i32 %571 to i8
  store i8 %572, i8* %21, align 1, !tbaa !2449
  %573 = lshr i32 %552, 31
  %574 = lshr i32 %555, 31
  %575 = xor i32 %574, %573
  %576 = xor i32 %571, %573
  %577 = add nuw nsw i32 %576, %575
  %578 = icmp eq i32 %577, 2
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %22, align 1, !tbaa !2450
  %580 = icmp ne i8 %572, 0
  %581 = xor i1 %580, %578
  %.v93 = select i1 %581, i64 20, i64 76
  %582 = add i64 %.v93, %553
  store i64 %582, i64* %PC, align 8, !tbaa !2428
  br i1 %581, label %block_4008ff, label %block_400937

block_400a68:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %583 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %584 = sext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = shl nsw i64 %584, 2
  %586 = add i64 %585, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %587 = add i64 %1994, 17
  store i64 %587, i64* %PC, align 8
  %588 = inttoptr i64 %586 to float*
  %589 = load float, float* %588, align 4
  %590 = fpext float %589 to double
  %591 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %592 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %593 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %594 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %591, i32* %1896, align 1, !tbaa !2451
  store i32 %592, i32* %1898, align 1, !tbaa !2451
  store i32 %593, i32* %1899, align 1, !tbaa !2451
  store i32 %594, i32* %1901, align 1, !tbaa !2451
  %595 = bitcast double %590 to i64
  %596 = load i64, i64* %29, align 1
  %597 = load i64, i64* %1861, align 1
  %598 = load i64, i64* %191, align 1
  %599 = and i64 %597, %595
  %600 = and i64 %598, %596
  %601 = trunc i64 %599 to i32
  %602 = lshr i64 %599, 32
  %603 = trunc i64 %602 to i32
  store i32 %601, i32* %26, align 1, !tbaa !2453
  store i32 %603, i32* %237, align 1, !tbaa !2453
  %604 = trunc i64 %600 to i32
  store i32 %604, i32* %238, align 1, !tbaa !2453
  %605 = lshr i64 %600, 32
  %606 = trunc i64 %605 to i32
  store i32 %606, i32* %239, align 1, !tbaa !2453
  %607 = load i64, i64* %RBP, align 8
  %608 = add i64 %607, -896
  %609 = add i64 %1994, 36
  store i64 %609, i64* %PC, align 8
  %610 = load i64, i64* %2598, align 1
  %611 = inttoptr i64 %608 to i64*
  store i64 %610, i64* %611, align 8
  %.pre87 = load i64, i64* %PC, align 8
  br label %block_400a8c

block_4015e6:                                     ; preds = %block_401588
  %612 = add i64 %1932, -4086
  %613 = add i64 %1932, 5
  %614 = load i64, i64* %RSP, align 8, !tbaa !2428
  %615 = add i64 %614, -8
  %616 = inttoptr i64 %615 to i64*
  store i64 %613, i64* %616, align 8
  store i64 %615, i64* %RSP, align 8, !tbaa !2428
  store i64 %612, i64* %PC, align 8, !tbaa !2428
  %617 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %612, %struct.Memory* %1825)
  %618 = load i64, i64* %PC, align 8
  %619 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  store i64 %619, i64* %1861, align 1, !tbaa !2454
  store double 0.000000e+00, double* %192, align 1, !tbaa !2454
  %620 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to i64*), align 8
  store i64 %620, i64* %1895, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1197, align 1, !tbaa !2454
  %621 = load i64, i64* %RBP, align 8
  %622 = add i64 %621, -40
  %623 = add i64 %618, 21
  store i64 %623, i64* %PC, align 8
  %624 = load <2 x float>, <2 x float>* %57, align 1
  %625 = load <2 x i32>, <2 x i32>* %216, align 1
  %626 = inttoptr i64 %622 to float*
  %627 = load float, float* %626, align 4
  %628 = extractelement <2 x float> %624, i32 0
  %629 = fsub float %628, %627
  store float %629, float* %25, align 1, !tbaa !2451
  %630 = bitcast <2 x float> %624 to <2 x i32>
  %631 = extractelement <2 x i32> %630, i32 1
  store i32 %631, i32* %237, align 1, !tbaa !2451
  %632 = extractelement <2 x i32> %625, i32 0
  store i32 %632, i32* %238, align 1, !tbaa !2451
  %633 = extractelement <2 x i32> %625, i32 1
  store i32 %633, i32* %239, align 1, !tbaa !2451
  %634 = load <2 x i32>, <2 x i32>* %1198, align 1
  %635 = load <2 x i32>, <2 x i32>* %1199, align 1
  %636 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %637 = sitofp i32 %636 to float
  store float %637, float* %1200, align 1, !tbaa !2451
  %638 = extractelement <2 x i32> %634, i32 1
  store i32 %638, i32* %221, align 1, !tbaa !2451
  %639 = extractelement <2 x i32> %635, i32 0
  store i32 %639, i32* %223, align 1, !tbaa !2451
  %640 = extractelement <2 x i32> %635, i32 1
  store i32 %640, i32* %225, align 1, !tbaa !2451
  %641 = load <2 x float>, <2 x float>* %57, align 1
  %642 = load <2 x i32>, <2 x i32>* %216, align 1
  %643 = load <2 x float>, <2 x float>* %1201, align 1
  %644 = extractelement <2 x float> %641, i32 0
  %645 = extractelement <2 x float> %643, i32 0
  %646 = fdiv float %644, %645
  store float %646, float* %25, align 1, !tbaa !2451
  %647 = bitcast <2 x float> %641 to <2 x i32>
  %648 = extractelement <2 x i32> %647, i32 1
  store i32 %648, i32* %237, align 1, !tbaa !2451
  %649 = extractelement <2 x i32> %642, i32 0
  store i32 %649, i32* %238, align 1, !tbaa !2451
  %650 = extractelement <2 x i32> %642, i32 1
  store i32 %650, i32* %239, align 1, !tbaa !2451
  %651 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %652 = sext i32 %651 to i64
  %653 = shl nsw i64 %652, 2
  %654 = add i64 %653, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %655 = add i64 %618, 51
  store i64 %655, i64* %PC, align 8
  %656 = load <2 x float>, <2 x float>* %57, align 1
  %657 = extractelement <2 x float> %656, i32 0
  %658 = inttoptr i64 %654 to float*
  store float %657, float* %658, align 4
  %659 = load i64, i64* %PC, align 8
  %660 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %661 = sext i32 %660 to i64
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = shl nsw i64 %661, 2
  %663 = add i64 %662, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %664 = add i64 %659, 17
  store i64 %664, i64* %PC, align 8
  %665 = inttoptr i64 %663 to i32*
  %666 = load i32, i32* %665, align 4
  store i32 %666, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %667 = add i64 %662, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %668 = add i64 %659, 34
  store i64 %668, i64* %PC, align 8
  %669 = load <2 x float>, <2 x float>* %57, align 1
  %670 = load <2 x i32>, <2 x i32>* %216, align 1
  %671 = inttoptr i64 %667 to float*
  %672 = load float, float* %671, align 4
  %673 = extractelement <2 x float> %669, i32 0
  %674 = fadd float %673, %672
  store float %674, float* %25, align 1, !tbaa !2451
  %675 = bitcast <2 x float> %669 to <2 x i32>
  %676 = extractelement <2 x i32> %675, i32 1
  store i32 %676, i32* %237, align 1, !tbaa !2451
  %677 = extractelement <2 x i32> %670, i32 0
  store i32 %677, i32* %238, align 1, !tbaa !2451
  %678 = extractelement <2 x i32> %670, i32 1
  store i32 %678, i32* %239, align 1, !tbaa !2451
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -16
  %681 = add i64 %659, 39
  store i64 %681, i64* %PC, align 8
  %682 = load <2 x float>, <2 x float>* %57, align 1
  %683 = extractelement <2 x float> %682, i32 0
  %684 = inttoptr i64 %680 to float*
  store float %683, float* %684, align 4
  %685 = load i64, i64* %RBP, align 8
  %686 = add i64 %685, -16
  %687 = load i64, i64* %PC, align 8
  %688 = add i64 %687, 5
  store i64 %688, i64* %PC, align 8
  %689 = inttoptr i64 %686 to i32*
  %690 = load i32, i32* %689, align 4
  store i32 %690, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %691 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %692 = sext i32 %691 to i64
  store i64 %692, i64* %RAX, align 8, !tbaa !2428
  %693 = shl nsw i64 %692, 2
  %694 = add i64 %693, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %695 = add i64 %687, 22
  store i64 %695, i64* %PC, align 8
  %696 = load <2 x float>, <2 x float>* %57, align 1
  %697 = extractelement <2 x float> %696, i32 0
  %698 = inttoptr i64 %694 to float*
  store float %697, float* %698, align 4
  %699 = load i64, i64* %RBP, align 8
  %700 = add i64 %699, -12
  %701 = load i64, i64* %PC, align 8
  %702 = add i64 %701, 5
  store i64 %702, i64* %PC, align 8
  %703 = inttoptr i64 %700 to float*
  %704 = load float, float* %703, align 4
  %705 = fpext float %704 to double
  store double %705, double* %2599, align 1, !tbaa !2454
  %706 = add i64 %699, -16
  %707 = add i64 %701, 10
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to float*
  %709 = load float, float* %708, align 4
  %710 = fpext float %709 to double
  store double %710, double* %226, align 1, !tbaa !2454
  %711 = load double, double* %213, align 1
  %712 = fmul double %710, %711
  store double %712, double* %213, align 1, !tbaa !2454
  %713 = load <2 x i32>, <2 x i32>* %216, align 1
  %714 = fdiv double %705, %712
  %.cast33 = bitcast double %714 to <2 x i32>
  %715 = fptrunc double %714 to float
  store float %715, float* %25, align 1, !tbaa !2451
  %716 = extractelement <2 x i32> %.cast33, i32 1
  store i32 %716, i32* %237, align 1, !tbaa !2451
  %717 = extractelement <2 x i32> %713, i32 0
  store i32 %717, i32* %238, align 1, !tbaa !2451
  %718 = extractelement <2 x i32> %713, i32 1
  store i32 %718, i32* %239, align 1, !tbaa !2451
  %719 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %720 = sext i32 %719 to i64
  %721 = shl nsw i64 %720, 2
  %722 = add i64 %721, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %723 = add i64 %701, 39
  store i64 %723, i64* %PC, align 8
  %724 = load <2 x float>, <2 x float>* %57, align 1
  %725 = extractelement <2 x float> %724, i32 0
  %726 = inttoptr i64 %722 to float*
  store float %725, float* %726, align 4
  %727 = load i64, i64* %PC, align 8
  %728 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %729 = sext i32 %728 to i64
  store i64 %729, i64* %RAX, align 8, !tbaa !2428
  %730 = shl nsw i64 %729, 2
  %731 = add i64 %730, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %732 = add i64 %727, 17
  store i64 %732, i64* %PC, align 8
  %733 = inttoptr i64 %731 to float*
  %734 = load float, float* %733, align 4
  %735 = fpext float %734 to double
  %736 = load double, double* %190, align 1
  %737 = fdiv double %736, %735
  store double %737, double* %190, align 1, !tbaa !2454
  %738 = bitcast double %735 to <2 x i32>
  %739 = load <2 x i32>, <2 x i32>* %216, align 1
  %740 = fptrunc double %737 to float
  store float %740, float* %25, align 1, !tbaa !2451
  %741 = extractelement <2 x i32> %738, i32 1
  store i32 %741, i32* %237, align 1, !tbaa !2451
  %742 = extractelement <2 x i32> %739, i32 0
  store i32 %742, i32* %238, align 1, !tbaa !2451
  %743 = extractelement <2 x i32> %739, i32 1
  store i32 %743, i32* %239, align 1, !tbaa !2451
  store i64 %729, i64* %RAX, align 8, !tbaa !2428
  %744 = add i64 %730, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %745 = add i64 %727, 42
  store i64 %745, i64* %PC, align 8
  %746 = load <2 x float>, <2 x float>* %57, align 1
  %747 = extractelement <2 x float> %746, i32 0
  %748 = inttoptr i64 %744 to float*
  store float %747, float* %748, align 4
  %749 = load i64, i64* %RBP, align 8
  %750 = add i64 %749, -16
  %751 = load i64, i64* %PC, align 8
  %752 = add i64 %751, 5
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753, align 4
  store i32 %754, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %755 = add i64 %749, -8
  %756 = add i64 %751, 10
  store i64 %756, i64* %PC, align 8
  %757 = load <2 x float>, <2 x float>* %57, align 1
  %758 = inttoptr i64 %755 to float*
  %759 = load float, float* %758, align 4
  %760 = extractelement <2 x float> %757, i32 0
  %761 = fdiv float %760, %759
  store float %761, float* %25, align 1, !tbaa !2451
  %762 = bitcast <2 x float> %757 to <2 x i32>
  %763 = extractelement <2 x i32> %762, i32 1
  store i32 %763, i32* %237, align 1, !tbaa !2451
  %764 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %765 = sext i32 %764 to i64
  %766 = shl nsw i64 %765, 2
  %767 = add i64 %766, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %768 = add i64 %751, 27
  store i64 %768, i64* %PC, align 8
  %769 = load <2 x float>, <2 x float>* %57, align 1
  %770 = extractelement <2 x float> %769, i32 0
  %771 = inttoptr i64 %767 to float*
  store float %770, float* %771, align 4
  %772 = load i64, i64* %PC, align 8
  %773 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  store i32 %773, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %774 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %775 = sext i32 %774 to i64
  store i64 %775, i64* %RAX, align 8, !tbaa !2428
  %776 = shl nsw i64 %775, 2
  %777 = add i64 %776, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %778 = add i64 %772, 26
  store i64 %778, i64* %PC, align 8
  %779 = load <2 x float>, <2 x float>* %57, align 1
  %780 = load <2 x i32>, <2 x i32>* %216, align 1
  %781 = inttoptr i64 %777 to float*
  %782 = load float, float* %781, align 4
  %783 = extractelement <2 x float> %779, i32 0
  %784 = fadd float %783, %782
  store float %784, float* %25, align 1, !tbaa !2451
  %785 = bitcast <2 x float> %779 to <2 x i32>
  %786 = extractelement <2 x i32> %785, i32 1
  store i32 %786, i32* %237, align 1, !tbaa !2451
  %787 = extractelement <2 x i32> %780, i32 0
  store i32 %787, i32* %238, align 1, !tbaa !2451
  %788 = extractelement <2 x i32> %780, i32 1
  store i32 %788, i32* %239, align 1, !tbaa !2451
  %789 = load <2 x float>, <2 x float>* %57, align 1
  %790 = extractelement <2 x float> %789, i32 0
  store float %790, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %791 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %792 = zext i32 %791 to i64
  store i64 %792, i64* %RDI, align 8, !tbaa !2428
  %793 = add i64 %772, 4521
  %794 = add i64 %772, 47
  %795 = load i64, i64* %RSP, align 8, !tbaa !2428
  %796 = add i64 %795, -8
  %797 = inttoptr i64 %796 to i64*
  store i64 %794, i64* %797, align 8
  store i64 %796, i64* %RSP, align 8, !tbaa !2428
  store i64 %793, i64* %PC, align 8, !tbaa !2428
  %798 = tail call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* nonnull %0, i64 %793, %struct.Memory* %1825)
  %799 = load i64, i64* %PC, align 8
  %800 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %801 = add i32 %800, 1
  %802 = zext i32 %801 to i64
  store i64 %802, i64* %RAX, align 8, !tbaa !2428
  %803 = icmp eq i32 %800, -1
  %804 = icmp eq i32 %801, 0
  %805 = or i1 %803, %804
  %806 = zext i1 %805 to i8
  store i8 %806, i8* %17, align 1, !tbaa !2432
  %807 = and i32 %801, 255
  %808 = tail call i32 @llvm.ctpop.i32(i32 %807) #10
  %809 = trunc i32 %808 to i8
  %810 = and i8 %809, 1
  %811 = xor i8 %810, 1
  store i8 %811, i8* %18, align 1, !tbaa !2446
  %812 = xor i32 %801, %800
  %813 = lshr i32 %812, 4
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %19, align 1, !tbaa !2447
  %816 = zext i1 %804 to i8
  store i8 %816, i8* %20, align 1, !tbaa !2448
  %817 = lshr i32 %801, 31
  %818 = trunc i32 %817 to i8
  store i8 %818, i8* %21, align 1, !tbaa !2449
  %819 = lshr i32 %800, 31
  %820 = xor i32 %817, %819
  %821 = add nuw nsw i32 %820, %817
  %822 = icmp eq i32 %821, 2
  %823 = zext i1 %822 to i8
  store i8 %823, i8* %22, align 1, !tbaa !2450
  store i32 %801, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %824 = add i64 %799, -601
  store i64 %824, i64* %PC, align 8, !tbaa !2428
  br label %block_40149d

block_401369:                                     ; preds = %block_401379, %block_4012f1
  %825 = phi i32 [ %2993, %block_401379 ], [ 0, %block_4012f1 ]
  %826 = phi i64 [ %3016, %block_401379 ], [ %452, %block_4012f1 ]
  %827 = zext i32 %825 to i64
  store i64 %827, i64* %RAX, align 8, !tbaa !2428
  %828 = load i64, i64* %RBP, align 8
  %829 = add i64 %828, -68
  %830 = add i64 %826, 10
  store i64 %830, i64* %PC, align 8
  %831 = inttoptr i64 %829 to i32*
  %832 = load i32, i32* %831, align 4
  %833 = sub i32 %825, %832
  %834 = icmp ult i32 %825, %832
  %835 = zext i1 %834 to i8
  store i8 %835, i8* %17, align 1, !tbaa !2432
  %836 = and i32 %833, 255
  %837 = tail call i32 @llvm.ctpop.i32(i32 %836) #10
  %838 = trunc i32 %837 to i8
  %839 = and i8 %838, 1
  %840 = xor i8 %839, 1
  store i8 %840, i8* %18, align 1, !tbaa !2446
  %841 = xor i32 %832, %825
  %842 = xor i32 %841, %833
  %843 = lshr i32 %842, 4
  %844 = trunc i32 %843 to i8
  %845 = and i8 %844, 1
  store i8 %845, i8* %19, align 1, !tbaa !2447
  %846 = icmp eq i32 %833, 0
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %20, align 1, !tbaa !2448
  %848 = lshr i32 %833, 31
  %849 = trunc i32 %848 to i8
  store i8 %849, i8* %21, align 1, !tbaa !2449
  %850 = lshr i32 %825, 31
  %851 = lshr i32 %832, 31
  %852 = xor i32 %851, %850
  %853 = xor i32 %848, %850
  %854 = add nuw nsw i32 %853, %852
  %855 = icmp eq i32 %854, 2
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %22, align 1, !tbaa !2450
  %857 = icmp ne i8 %849, 0
  %858 = xor i1 %857, %855
  %.v99 = select i1 %858, i64 16, i64 81
  %859 = add i64 %.v99, %826
  store i64 %859, i64* %PC, align 8, !tbaa !2428
  br i1 %858, label %block_401379, label %block_4013ba

block_4010a5:                                     ; preds = %block_401090, %block_4010b9
  %860 = phi i32 [ 0, %block_401090 ], [ %2020, %block_4010b9 ]
  %861 = phi i64 [ %2708, %block_401090 ], [ %2043, %block_4010b9 ]
  %862 = zext i32 %860 to i64
  store i64 %862, i64* %RAX, align 8, !tbaa !2428
  %863 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %864 = sub i32 %860, %863
  %865 = icmp ult i32 %860, %863
  %866 = zext i1 %865 to i8
  store i8 %866, i8* %17, align 1, !tbaa !2432
  %867 = and i32 %864, 255
  %868 = tail call i32 @llvm.ctpop.i32(i32 %867) #10
  %869 = trunc i32 %868 to i8
  %870 = and i8 %869, 1
  %871 = xor i8 %870, 1
  store i8 %871, i8* %18, align 1, !tbaa !2446
  %872 = xor i32 %863, %860
  %873 = xor i32 %872, %864
  %874 = lshr i32 %873, 4
  %875 = trunc i32 %874 to i8
  %876 = and i8 %875, 1
  store i8 %876, i8* %19, align 1, !tbaa !2447
  %877 = icmp eq i32 %864, 0
  %878 = zext i1 %877 to i8
  store i8 %878, i8* %20, align 1, !tbaa !2448
  %879 = lshr i32 %864, 31
  %880 = trunc i32 %879 to i8
  store i8 %880, i8* %21, align 1, !tbaa !2449
  %881 = lshr i32 %860, 31
  %882 = lshr i32 %863, 31
  %883 = xor i32 %882, %881
  %884 = xor i32 %879, %881
  %885 = add nuw nsw i32 %884, %883
  %886 = icmp eq i32 %885, 2
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %22, align 1, !tbaa !2450
  %888 = icmp ne i8 %880, 0
  %889 = xor i1 %888, %886
  %.v103 = select i1 %889, i64 20, i64 134
  %890 = add i64 %.v103, %861
  store i64 %890, i64* %PC, align 8, !tbaa !2428
  br i1 %889, label %block_4010b9, label %block_40112b

block_400ada:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %891 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %892 = sext i32 %891 to i64
  store i64 %892, i64* %RAX, align 8, !tbaa !2428
  %893 = shl nsw i64 %892, 2
  %894 = add i64 %893, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %895 = add i64 %2908, 17
  store i64 %895, i64* %PC, align 8
  %896 = inttoptr i64 %894 to float*
  %897 = load float, float* %896, align 4
  %898 = fpext float %897 to double
  %899 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %900 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %901 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %902 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %899, i32* %1896, align 1, !tbaa !2451
  store i32 %900, i32* %1898, align 1, !tbaa !2451
  store i32 %901, i32* %1899, align 1, !tbaa !2451
  store i32 %902, i32* %1901, align 1, !tbaa !2451
  %903 = bitcast double %898 to i64
  %904 = load i64, i64* %29, align 1
  %905 = load i64, i64* %1861, align 1
  %906 = load i64, i64* %191, align 1
  %907 = and i64 %905, %903
  %908 = and i64 %906, %904
  %909 = trunc i64 %907 to i32
  %910 = lshr i64 %907, 32
  %911 = trunc i64 %910 to i32
  store i32 %909, i32* %26, align 1, !tbaa !2453
  store i32 %911, i32* %237, align 1, !tbaa !2453
  %912 = trunc i64 %908 to i32
  store i32 %912, i32* %238, align 1, !tbaa !2453
  %913 = lshr i64 %908, 32
  %914 = trunc i64 %913 to i32
  store i32 %914, i32* %239, align 1, !tbaa !2453
  %915 = load i64, i64* %RBP, align 8
  %916 = add i64 %915, -904
  %917 = add i64 %2908, 36
  store i64 %917, i64* %PC, align 8
  %918 = load i64, i64* %2598, align 1
  %919 = inttoptr i64 %916 to i64*
  store i64 %918, i64* %919, align 8
  %.pre89 = load i64, i64* %PC, align 8
  br label %block_400afe

block_400dd9:                                     ; preds = %block_400d88
  %920 = add i64 %2943, -2025
  %921 = add i64 %2943, 5
  %922 = load i64, i64* %RSP, align 8, !tbaa !2428
  %923 = add i64 %922, -8
  %924 = inttoptr i64 %923 to i64*
  store i64 %921, i64* %924, align 8
  store i64 %923, i64* %RSP, align 8, !tbaa !2428
  store i64 %920, i64* %PC, align 8, !tbaa !2428
  %925 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %920, %struct.Memory* %MEMORY.7)
  %926 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %2554, align 1, !tbaa !2453
  %927 = load i64, i64* %RBP, align 8
  %928 = add i64 %927, -84
  %929 = add i64 %926, 18
  store i64 %929, i64* %PC, align 8
  %930 = load <2 x float>, <2 x float>* %57, align 1
  %931 = extractelement <2 x float> %930, i32 0
  %932 = inttoptr i64 %928 to float*
  store float %931, float* %932, align 4
  %933 = load i64, i64* %RBP, align 8
  %934 = add i64 %933, -84
  %935 = load i64, i64* %PC, align 8
  %936 = add i64 %935, 5
  store i64 %936, i64* %PC, align 8
  %937 = inttoptr i64 %934 to i32*
  %938 = load i32, i32* %937, align 4
  store i32 %938, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %939 = add i64 %933, -80
  %940 = add i64 %935, 10
  store i64 %940, i64* %PC, align 8
  %941 = load <2 x float>, <2 x float>* %57, align 1
  %942 = load <2 x i32>, <2 x i32>* %216, align 1
  %943 = inttoptr i64 %939 to float*
  %944 = load float, float* %943, align 4
  %945 = extractelement <2 x float> %941, i32 0
  %946 = fsub float %945, %944
  store float %946, float* %25, align 1, !tbaa !2451
  %947 = bitcast <2 x float> %941 to <2 x i32>
  %948 = extractelement <2 x i32> %947, i32 1
  store i32 %948, i32* %237, align 1, !tbaa !2451
  %949 = extractelement <2 x i32> %942, i32 0
  store i32 %949, i32* %238, align 1, !tbaa !2451
  %950 = extractelement <2 x i32> %942, i32 1
  store i32 %950, i32* %239, align 1, !tbaa !2451
  %951 = add i64 %933, -72
  %952 = add i64 %935, 15
  store i64 %952, i64* %PC, align 8
  %953 = load <2 x float>, <2 x float>* %57, align 1
  %954 = extractelement <2 x float> %953, i32 0
  %955 = inttoptr i64 %951 to float*
  store float %954, float* %955, align 4
  %956 = load i64, i64* %PC, align 8
  %957 = load i64, i64* @stderr, align 64
  store i64 %957, i64* %RDI, align 8, !tbaa !2428
  %958 = load i64, i64* %RBP, align 8
  %959 = add i64 %958, -68
  %960 = add i64 %956, 11
  store i64 %960, i64* %PC, align 8
  %961 = inttoptr i64 %959 to i32*
  %962 = load i32, i32* %961, align 4
  %963 = zext i32 %962 to i64
  store i64 %963, i64* %RDX, align 8, !tbaa !2428
  %964 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %965 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %966 = extractelement <2 x i32> %964, i32 0
  store i32 %966, i32* %26, align 1, !tbaa !2451
  %967 = extractelement <2 x i32> %964, i32 1
  store i32 %967, i32* %237, align 1, !tbaa !2451
  %968 = extractelement <2 x i32> %965, i32 0
  store i32 %968, i32* %238, align 1, !tbaa !2451
  %969 = extractelement <2 x i32> %965, i32 1
  store i32 %969, i32* %239, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %970 = add i64 %956, -2319
  %971 = add i64 %956, 21
  %972 = load i64, i64* %RSP, align 8, !tbaa !2428
  %973 = add i64 %972, -8
  %974 = inttoptr i64 %973 to i64*
  store i64 %971, i64* %974, align 8
  store i64 %973, i64* %RSP, align 8, !tbaa !2428
  store i64 %970, i64* %PC, align 8, !tbaa !2428
  %975 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.7)
  %976 = load i64, i64* %RBP, align 8
  %977 = add i64 %976, -64
  %978 = load i64, i64* %PC, align 8
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC, align 8
  %980 = inttoptr i64 %977 to i32*
  %981 = load i32, i32* %980, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %982 = and i32 %981, 255
  %983 = tail call i32 @llvm.ctpop.i32(i32 %982) #10
  %984 = trunc i32 %983 to i8
  %985 = and i8 %984, 1
  %986 = xor i8 %985, 1
  store i8 %986, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %987 = icmp eq i32 %981, 0
  %988 = zext i1 %987 to i8
  store i8 %988, i8* %20, align 1, !tbaa !2448
  %989 = lshr i32 %981, 31
  %990 = trunc i32 %989 to i8
  store i8 %990, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %991 = add i64 %976, -940
  %992 = load i32, i32* %EAX, align 4
  %993 = add i64 %978, 10
  store i64 %993, i64* %PC, align 8
  %994 = inttoptr i64 %991 to i32*
  store i32 %992, i32* %994, align 4
  %995 = load i64, i64* %PC, align 8
  %996 = add i64 %995, 15
  %997 = add i64 %995, 6
  %998 = load i8, i8* %21, align 1, !tbaa !2449
  %999 = icmp ne i8 %998, 0
  %1000 = load i8, i8* %22, align 1, !tbaa !2450
  %1001 = icmp ne i8 %1000, 0
  %1002 = xor i1 %999, %1001
  %1003 = select i1 %1002, i64 %997, i64 %996
  store i64 %1003, i64* %PC, align 8, !tbaa !2428
  br i1 %1002, label %block_400e24, label %block_400e2d

block_400ed8:                                     ; preds = %block_400ec4
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RBP, align 8
  %1005 = add i64 %1004, -20
  store i64 %1005, i64* %R8, align 8, !tbaa !2428
  %1006 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1007 = zext i32 %1006 to i64
  store i64 %1007, i64* %RSI, align 8, !tbaa !2428
  %1008 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1009 = zext i32 %1008 to i64
  store i64 %1009, i64* %RDX, align 8, !tbaa !2428
  %1010 = add i64 %1630, 2184
  %1011 = add i64 %1630, 43
  %1012 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1013 = add i64 %1012, -8
  %1014 = inttoptr i64 %1013 to i64*
  store i64 %1011, i64* %1014, align 8
  store i64 %1013, i64* %RSP, align 8, !tbaa !2428
  store i64 %1010, i64* %PC, align 8, !tbaa !2428
  %1015 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %1010, %struct.Memory* %MEMORY.11)
  %1016 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %1017 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1018 = zext i32 %1017 to i64
  store i64 %1018, i64* %RSI, align 8, !tbaa !2428
  %1019 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RDX, align 8, !tbaa !2428
  %1021 = add i64 %1016, 2605
  %1022 = add i64 %1016, 49
  %1023 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1024 = add i64 %1023, -8
  %1025 = inttoptr i64 %1024 to i64*
  store i64 %1022, i64* %1025, align 8
  store i64 %1024, i64* %RSP, align 8, !tbaa !2428
  store i64 %1021, i64* %PC, align 8, !tbaa !2428
  %1026 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %1021, %struct.Memory* %MEMORY.11)
  %1027 = load i64, i64* %PC, align 8
  %1028 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1029 = add i32 %1028, 1
  %1030 = zext i32 %1029 to i64
  store i64 %1030, i64* %RAX, align 8, !tbaa !2428
  %1031 = icmp eq i32 %1028, -1
  %1032 = icmp eq i32 %1029, 0
  %1033 = or i1 %1031, %1032
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %17, align 1, !tbaa !2432
  %1035 = and i32 %1029, 255
  %1036 = tail call i32 @llvm.ctpop.i32(i32 %1035) #10
  %1037 = trunc i32 %1036 to i8
  %1038 = and i8 %1037, 1
  %1039 = xor i8 %1038, 1
  store i8 %1039, i8* %18, align 1, !tbaa !2446
  %1040 = xor i32 %1029, %1028
  %1041 = lshr i32 %1040, 4
  %1042 = trunc i32 %1041 to i8
  %1043 = and i8 %1042, 1
  store i8 %1043, i8* %19, align 1, !tbaa !2447
  %1044 = zext i1 %1032 to i8
  store i8 %1044, i8* %20, align 1, !tbaa !2448
  %1045 = lshr i32 %1029, 31
  %1046 = trunc i32 %1045 to i8
  store i8 %1046, i8* %21, align 1, !tbaa !2449
  %1047 = lshr i32 %1028, 31
  %1048 = xor i32 %1045, %1047
  %1049 = add nuw nsw i32 %1048, %1045
  %1050 = icmp eq i32 %1049, 2
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* %22, align 1, !tbaa !2450
  store i32 %1029, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1052 = add i64 %1027, -112
  store i64 %1052, i64* %PC, align 8, !tbaa !2428
  br label %block_400ec4

block_400a56:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1053 = load i64, i64* %RBP, align 8
  %1054 = add i64 %1053, -28
  %1055 = add i64 %1994, 5
  store i64 %1055, i64* %PC, align 8
  %1056 = inttoptr i64 %1054 to float*
  %1057 = load float, float* %1056, align 4
  %1058 = fpext float %1057 to double
  store double %1058, double* %2599, align 1, !tbaa !2454
  %1059 = add i64 %1053, -896
  %1060 = add i64 %1994, 13
  store i64 %1060, i64* %PC, align 8
  %1061 = inttoptr i64 %1059 to double*
  store double %1058, double* %1061, align 8
  %1062 = load i64, i64* %PC, align 8
  %1063 = add i64 %1062, 41
  store i64 %1063, i64* %PC, align 8, !tbaa !2428
  br label %block_400a8c

block_4014d4:                                     ; preds = %block_4014c0
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %1064 = load i64, i64* %RBP, align 8
  %1065 = add i64 %1064, -20
  store i64 %1065, i64* %R8, align 8, !tbaa !2428
  %1066 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1067 = zext i32 %1066 to i64
  store i64 %1067, i64* %RSI, align 8, !tbaa !2428
  %1068 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1069 = zext i32 %1068 to i64
  store i64 %1069, i64* %RDX, align 8, !tbaa !2428
  %1070 = add i64 %1698, 652
  %1071 = add i64 %1698, 43
  %1072 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1073 = add i64 %1072, -8
  %1074 = inttoptr i64 %1073 to i64*
  store i64 %1071, i64* %1074, align 8
  store i64 %1073, i64* %RSP, align 8, !tbaa !2428
  store i64 %1070, i64* %PC, align 8, !tbaa !2428
  %1075 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %1070, %struct.Memory* %1825)
  %1076 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %1077 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1078 = zext i32 %1077 to i64
  store i64 %1078, i64* %RSI, align 8, !tbaa !2428
  %1079 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1080 = zext i32 %1079 to i64
  store i64 %1080, i64* %RDX, align 8, !tbaa !2428
  %1081 = add i64 %1076, 1073
  %1082 = add i64 %1076, 49
  %1083 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1084 = add i64 %1083, -8
  %1085 = inttoptr i64 %1084 to i64*
  store i64 %1082, i64* %1085, align 8
  store i64 %1084, i64* %RSP, align 8, !tbaa !2428
  store i64 %1081, i64* %PC, align 8, !tbaa !2428
  %1086 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %1081, %struct.Memory* %1825)
  %1087 = load i64, i64* %PC, align 8
  %1088 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1089 = add i32 %1088, 1
  %1090 = zext i32 %1089 to i64
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = icmp eq i32 %1088, -1
  %1092 = icmp eq i32 %1089, 0
  %1093 = or i1 %1091, %1092
  %1094 = zext i1 %1093 to i8
  store i8 %1094, i8* %17, align 1, !tbaa !2432
  %1095 = and i32 %1089, 255
  %1096 = tail call i32 @llvm.ctpop.i32(i32 %1095) #10
  %1097 = trunc i32 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = xor i8 %1098, 1
  store i8 %1099, i8* %18, align 1, !tbaa !2446
  %1100 = xor i32 %1089, %1088
  %1101 = lshr i32 %1100, 4
  %1102 = trunc i32 %1101 to i8
  %1103 = and i8 %1102, 1
  store i8 %1103, i8* %19, align 1, !tbaa !2447
  %1104 = zext i1 %1092 to i8
  store i8 %1104, i8* %20, align 1, !tbaa !2448
  %1105 = lshr i32 %1089, 31
  %1106 = trunc i32 %1105 to i8
  store i8 %1106, i8* %21, align 1, !tbaa !2449
  %1107 = lshr i32 %1088, 31
  %1108 = xor i32 %1105, %1107
  %1109 = add nuw nsw i32 %1108, %1105
  %1110 = icmp eq i32 %1109, 2
  %1111 = zext i1 %1110 to i8
  store i8 %1111, i8* %22, align 1, !tbaa !2450
  store i32 %1089, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1112 = add i64 %1087, -112
  store i64 %1112, i64* %PC, align 8, !tbaa !2428
  br label %block_4014c0

block_400fd3:                                     ; preds = %block_400fa0
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %.pre79 = load i64, i64* @stderr, align 64
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i64 %.pre79, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1113 = add i64 %2571, -2751
  %1114 = add i64 %2571, 63
  %1115 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1116 = add i64 %1115, -8
  %1117 = inttoptr i64 %1116 to i64*
  store i64 %1114, i64* %1117, align 8
  store i64 %1116, i64* %RSP, align 8, !tbaa !2428
  store i64 %1113, i64* %PC, align 8, !tbaa !2428
  %1118 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1498)
  %1119 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1120 = load i64, i64* @stderr, align 64
  store i64 %1120, i64* %RDI, align 8, !tbaa !2428
  %1121 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1122 = zext i32 %1121 to i64
  store i64 %1122, i64* %RDX, align 8, !tbaa !2428
  %1123 = load i64, i64* %RBP, align 8
  %1124 = add i64 %1123, -956
  %1125 = load i32, i32* %EAX, align 4
  %1126 = add i64 %1119, 31
  store i64 %1126, i64* %PC, align 8
  %1127 = inttoptr i64 %1124 to i32*
  store i32 %1125, i32* %1127, align 4
  %1128 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1129 = add i64 %1128, -2845
  %1130 = add i64 %1128, 7
  %1131 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1132 = add i64 %1131, -8
  %1133 = inttoptr i64 %1132 to i64*
  store i64 %1130, i64* %1133, align 8
  store i64 %1132, i64* %RSP, align 8, !tbaa !2428
  store i64 %1129, i64* %PC, align 8, !tbaa !2428
  %1134 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1118)
  %1135 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1136 = load i64, i64* @stderr, align 64
  store i64 %1136, i64* %RDI, align 8, !tbaa !2428
  %1137 = load i64, i64* %RBP, align 8
  %1138 = add i64 %1137, -960
  %1139 = load i32, i32* %EAX, align 4
  %1140 = add i64 %1135, 24
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1138 to i32*
  store i32 %1139, i32* %1141, align 4
  %1142 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1143 = add i64 %1142, -2876
  %1144 = add i64 %1142, 7
  %1145 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1146 = add i64 %1145, -8
  %1147 = inttoptr i64 %1146 to i64*
  store i64 %1144, i64* %1147, align 8
  store i64 %1146, i64* %RSP, align 8, !tbaa !2428
  store i64 %1143, i64* %PC, align 8, !tbaa !2428
  %1148 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1134)
  %1149 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1150 = load i64, i64* @stderr, align 64
  store i64 %1150, i64* %RDI, align 8, !tbaa !2428
  %1151 = load i64, i64* %RBP, align 8
  %1152 = add i64 %1151, -964
  %1153 = load i32, i32* %EAX, align 4
  %1154 = add i64 %1149, 24
  store i64 %1154, i64* %PC, align 8
  %1155 = inttoptr i64 %1152 to i32*
  store i32 %1153, i32* %1155, align 4
  %1156 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1157 = add i64 %1156, -2907
  %1158 = add i64 %1156, 7
  %1159 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1160 = add i64 %1159, -8
  %1161 = inttoptr i64 %1160 to i64*
  store i64 %1158, i64* %1161, align 8
  store i64 %1160, i64* %RSP, align 8, !tbaa !2428
  store i64 %1157, i64* %PC, align 8, !tbaa !2428
  %1162 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1148)
  %1163 = load i64, i64* %PC, align 8
  store i32 0, i32* %26, align 1, !tbaa !2453
  store i32 0, i32* %237, align 1, !tbaa !2453
  store i32 0, i32* %238, align 1, !tbaa !2453
  store i32 0, i32* %239, align 1, !tbaa !2453
  %1164 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1165 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1166 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1167 = sitofp i32 %1166 to float
  store float %1167, float* %2100, align 1, !tbaa !2451
  %1168 = extractelement <2 x i32> %1164, i32 1
  store i32 %1168, i32* %1898, align 1, !tbaa !2451
  %1169 = extractelement <2 x i32> %1165, i32 0
  store i32 %1169, i32* %1899, align 1, !tbaa !2451
  %1170 = extractelement <2 x i32> %1165, i32 1
  store i32 %1170, i32* %1901, align 1, !tbaa !2451
  %1171 = load i64, i64* %RBP, align 8
  %1172 = add i64 %1171, -72
  %1173 = add i64 %1163, 17
  store i64 %1173, i64* %PC, align 8
  %1174 = load <2 x float>, <2 x float>* %2193, align 1
  %1175 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1176 = inttoptr i64 %1172 to float*
  %1177 = load float, float* %1176, align 4
  %1178 = extractelement <2 x float> %1174, i32 0
  %1179 = fmul float %1178, %1177
  store float %1179, float* %2100, align 1, !tbaa !2451
  %1180 = bitcast <2 x float> %1174 to <2 x i32>
  %1181 = extractelement <2 x i32> %1180, i32 1
  store i32 %1181, i32* %1898, align 1, !tbaa !2451
  %1182 = extractelement <2 x i32> %1175, i32 0
  store i32 %1182, i32* %1899, align 1, !tbaa !2451
  %1183 = extractelement <2 x i32> %1175, i32 1
  store i32 %1183, i32* %1901, align 1, !tbaa !2451
  %1184 = add i64 %1171, -44
  %1185 = add i64 %1163, 22
  store i64 %1185, i64* %PC, align 8
  %1186 = load <2 x float>, <2 x float>* %2193, align 1
  %1187 = extractelement <2 x float> %1186, i32 0
  %1188 = inttoptr i64 %1184 to float*
  store float %1187, float* %1188, align 4
  %1189 = load i64, i64* %PC, align 8
  %1190 = load <2 x float>, <2 x float>* %57, align 1
  %1191 = extractelement <2 x float> %1190, i32 0
  store float %1191, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1192 = load i64, i64* %RBP, align 8
  %1193 = add i64 %1192, -968
  %1194 = load i32, i32* %EAX, align 4
  %1195 = add i64 %1189, 26
  store i64 %1195, i64* %PC, align 8
  %1196 = inttoptr i64 %1193 to i32*
  store i32 %1194, i32* %1196, align 4
  %1197 = bitcast i64* %1891 to double*
  %1198 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %1199 = bitcast i64* %222 to <2 x i32>*
  %1200 = bitcast %union.VectorReg* %9 to float*
  %1201 = bitcast %union.VectorReg* %9 to <2 x float>*
  %.pre80 = load i64, i64* %PC, align 8
  %.pre81 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_401082

block_400d6a:                                     ; preds = %block_400e2d, %block_400d23
  %1202 = phi i64 [ %.pre76, %block_400d23 ], [ %2725, %block_400e2d ]
  %MEMORY.7 = phi %struct.Memory* [ %2537, %block_400d23 ], [ %975, %block_400e2d ]
  %1203 = add i64 %1202, -1914
  %1204 = add i64 %1202, 5
  %1205 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1206 = add i64 %1205, -8
  %1207 = inttoptr i64 %1206 to i64*
  store i64 %1204, i64* %1207, align 8
  store i64 %1206, i64* %RSP, align 8, !tbaa !2428
  store i64 %1203, i64* %PC, align 8, !tbaa !2428
  %1208 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1203, %struct.Memory* %MEMORY.7)
  %1209 = load i64, i64* %RBP, align 8
  %1210 = add i64 %1209, -80
  %1211 = load i64, i64* %PC, align 8
  %1212 = add i64 %1211, 5
  store i64 %1212, i64* %PC, align 8
  %1213 = load <2 x float>, <2 x float>* %57, align 1
  %1214 = extractelement <2 x float> %1213, i32 0
  %1215 = inttoptr i64 %1210 to float*
  store float %1214, float* %1215, align 4
  %1216 = load i64, i64* %RBP, align 8
  %1217 = add i64 %1216, -64
  %1218 = load i64, i64* %PC, align 8
  %1219 = add i64 %1218, 3
  store i64 %1219, i64* %PC, align 8
  %1220 = inttoptr i64 %1217 to i32*
  %1221 = load i32, i32* %1220, align 4
  %1222 = add i32 %1221, 1
  %1223 = zext i32 %1222 to i64
  store i64 %1223, i64* %RAX, align 8, !tbaa !2428
  %1224 = icmp eq i32 %1221, -1
  %1225 = icmp eq i32 %1222, 0
  %1226 = or i1 %1224, %1225
  %1227 = zext i1 %1226 to i8
  store i8 %1227, i8* %17, align 1, !tbaa !2432
  %1228 = and i32 %1222, 255
  %1229 = tail call i32 @llvm.ctpop.i32(i32 %1228) #10
  %1230 = trunc i32 %1229 to i8
  %1231 = and i8 %1230, 1
  %1232 = xor i8 %1231, 1
  store i8 %1232, i8* %18, align 1, !tbaa !2446
  %1233 = xor i32 %1222, %1221
  %1234 = lshr i32 %1233, 4
  %1235 = trunc i32 %1234 to i8
  %1236 = and i8 %1235, 1
  store i8 %1236, i8* %19, align 1, !tbaa !2447
  %1237 = zext i1 %1225 to i8
  store i8 %1237, i8* %20, align 1, !tbaa !2448
  %1238 = lshr i32 %1222, 31
  %1239 = trunc i32 %1238 to i8
  store i8 %1239, i8* %21, align 1, !tbaa !2449
  %1240 = lshr i32 %1221, 31
  %1241 = xor i32 %1238, %1240
  %1242 = add nuw nsw i32 %1241, %1238
  %1243 = icmp eq i32 %1242, 2
  %1244 = zext i1 %1243 to i8
  store i8 %1244, i8* %22, align 1, !tbaa !2450
  %1245 = add i64 %1218, 9
  store i64 %1245, i64* %PC, align 8
  store i32 %1222, i32* %1220, align 4
  %1246 = load i64, i64* %PC, align 8
  %1247 = add i64 %1246, 11
  store i64 %1247, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400d88

block_4011cb:                                     ; preds = %block_40116d
  %1248 = add i64 %483, -3035
  %1249 = add i64 %483, 5
  %1250 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1251 = add i64 %1250, -8
  %1252 = inttoptr i64 %1251 to i64*
  store i64 %1249, i64* %1252, align 8
  store i64 %1251, i64* %RSP, align 8, !tbaa !2428
  store i64 %1248, i64* %PC, align 8, !tbaa !2428
  %1253 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1248, %struct.Memory* %1162)
  %1254 = load i64, i64* %PC, align 8
  %1255 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 24) to i64*), align 8
  store i64 %1255, i64* %1861, align 1, !tbaa !2454
  store double 0.000000e+00, double* %192, align 1, !tbaa !2454
  %1256 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 40) to i64*), align 8
  store i64 %1256, i64* %1895, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1197, align 1, !tbaa !2454
  %1257 = load i64, i64* %RBP, align 8
  %1258 = add i64 %1257, -40
  %1259 = add i64 %1254, 21
  store i64 %1259, i64* %PC, align 8
  %1260 = load <2 x float>, <2 x float>* %57, align 1
  %1261 = load <2 x i32>, <2 x i32>* %216, align 1
  %1262 = inttoptr i64 %1258 to float*
  %1263 = load float, float* %1262, align 4
  %1264 = extractelement <2 x float> %1260, i32 0
  %1265 = fsub float %1264, %1263
  store float %1265, float* %25, align 1, !tbaa !2451
  %1266 = bitcast <2 x float> %1260 to <2 x i32>
  %1267 = extractelement <2 x i32> %1266, i32 1
  store i32 %1267, i32* %237, align 1, !tbaa !2451
  %1268 = extractelement <2 x i32> %1261, i32 0
  store i32 %1268, i32* %238, align 1, !tbaa !2451
  %1269 = extractelement <2 x i32> %1261, i32 1
  store i32 %1269, i32* %239, align 1, !tbaa !2451
  %1270 = load <2 x i32>, <2 x i32>* %1198, align 1
  %1271 = load <2 x i32>, <2 x i32>* %1199, align 1
  %1272 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1273 = sitofp i32 %1272 to float
  store float %1273, float* %1200, align 1, !tbaa !2451
  %1274 = extractelement <2 x i32> %1270, i32 1
  store i32 %1274, i32* %221, align 1, !tbaa !2451
  %1275 = extractelement <2 x i32> %1271, i32 0
  store i32 %1275, i32* %223, align 1, !tbaa !2451
  %1276 = extractelement <2 x i32> %1271, i32 1
  store i32 %1276, i32* %225, align 1, !tbaa !2451
  %1277 = load <2 x float>, <2 x float>* %57, align 1
  %1278 = load <2 x i32>, <2 x i32>* %216, align 1
  %1279 = load <2 x float>, <2 x float>* %1201, align 1
  %1280 = extractelement <2 x float> %1277, i32 0
  %1281 = extractelement <2 x float> %1279, i32 0
  %1282 = fdiv float %1280, %1281
  store float %1282, float* %25, align 1, !tbaa !2451
  %1283 = bitcast <2 x float> %1277 to <2 x i32>
  %1284 = extractelement <2 x i32> %1283, i32 1
  store i32 %1284, i32* %237, align 1, !tbaa !2451
  %1285 = extractelement <2 x i32> %1278, i32 0
  store i32 %1285, i32* %238, align 1, !tbaa !2451
  %1286 = extractelement <2 x i32> %1278, i32 1
  store i32 %1286, i32* %239, align 1, !tbaa !2451
  %1287 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1288 = sext i32 %1287 to i64
  %1289 = shl nsw i64 %1288, 2
  %1290 = add i64 %1289, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1291 = add i64 %1254, 51
  store i64 %1291, i64* %PC, align 8
  %1292 = load <2 x float>, <2 x float>* %57, align 1
  %1293 = extractelement <2 x float> %1292, i32 0
  %1294 = inttoptr i64 %1290 to float*
  store float %1293, float* %1294, align 4
  %1295 = load i64, i64* %PC, align 8
  %1296 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1297 = sext i32 %1296 to i64
  store i64 %1297, i64* %RAX, align 8, !tbaa !2428
  %1298 = shl nsw i64 %1297, 2
  %1299 = add i64 %1298, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1300 = add i64 %1295, 17
  store i64 %1300, i64* %PC, align 8
  %1301 = inttoptr i64 %1299 to i32*
  %1302 = load i32, i32* %1301, align 4
  store i32 %1302, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 %1297, i64* %RAX, align 8, !tbaa !2428
  %1303 = add i64 %1298, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1304 = add i64 %1295, 34
  store i64 %1304, i64* %PC, align 8
  %1305 = load <2 x float>, <2 x float>* %57, align 1
  %1306 = load <2 x i32>, <2 x i32>* %216, align 1
  %1307 = inttoptr i64 %1303 to float*
  %1308 = load float, float* %1307, align 4
  %1309 = extractelement <2 x float> %1305, i32 0
  %1310 = fadd float %1309, %1308
  store float %1310, float* %25, align 1, !tbaa !2451
  %1311 = bitcast <2 x float> %1305 to <2 x i32>
  %1312 = extractelement <2 x i32> %1311, i32 1
  store i32 %1312, i32* %237, align 1, !tbaa !2451
  %1313 = extractelement <2 x i32> %1306, i32 0
  store i32 %1313, i32* %238, align 1, !tbaa !2451
  %1314 = extractelement <2 x i32> %1306, i32 1
  store i32 %1314, i32* %239, align 1, !tbaa !2451
  %1315 = load i64, i64* %RBP, align 8
  %1316 = add i64 %1315, -16
  %1317 = add i64 %1295, 39
  store i64 %1317, i64* %PC, align 8
  %1318 = load <2 x float>, <2 x float>* %57, align 1
  %1319 = extractelement <2 x float> %1318, i32 0
  %1320 = inttoptr i64 %1316 to float*
  store float %1319, float* %1320, align 4
  %1321 = load i64, i64* %RBP, align 8
  %1322 = add i64 %1321, -16
  %1323 = load i64, i64* %PC, align 8
  %1324 = add i64 %1323, 5
  store i64 %1324, i64* %PC, align 8
  %1325 = inttoptr i64 %1322 to i32*
  %1326 = load i32, i32* %1325, align 4
  store i32 %1326, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1327 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1328 = sext i32 %1327 to i64
  store i64 %1328, i64* %RAX, align 8, !tbaa !2428
  %1329 = shl nsw i64 %1328, 2
  %1330 = add i64 %1329, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1331 = add i64 %1323, 22
  store i64 %1331, i64* %PC, align 8
  %1332 = load <2 x float>, <2 x float>* %57, align 1
  %1333 = extractelement <2 x float> %1332, i32 0
  %1334 = inttoptr i64 %1330 to float*
  store float %1333, float* %1334, align 4
  %1335 = load i64, i64* %RBP, align 8
  %1336 = add i64 %1335, -12
  %1337 = load i64, i64* %PC, align 8
  %1338 = add i64 %1337, 5
  store i64 %1338, i64* %PC, align 8
  %1339 = inttoptr i64 %1336 to float*
  %1340 = load float, float* %1339, align 4
  %1341 = fpext float %1340 to double
  store double %1341, double* %2599, align 1, !tbaa !2454
  %1342 = add i64 %1335, -16
  %1343 = add i64 %1337, 10
  store i64 %1343, i64* %PC, align 8
  %1344 = inttoptr i64 %1342 to float*
  %1345 = load float, float* %1344, align 4
  %1346 = fpext float %1345 to double
  store double %1346, double* %226, align 1, !tbaa !2454
  %1347 = load double, double* %213, align 1
  %1348 = fmul double %1346, %1347
  store double %1348, double* %213, align 1, !tbaa !2454
  %1349 = load <2 x i32>, <2 x i32>* %216, align 1
  %1350 = fdiv double %1341, %1348
  %.cast28 = bitcast double %1350 to <2 x i32>
  %1351 = fptrunc double %1350 to float
  store float %1351, float* %25, align 1, !tbaa !2451
  %1352 = extractelement <2 x i32> %.cast28, i32 1
  store i32 %1352, i32* %237, align 1, !tbaa !2451
  %1353 = extractelement <2 x i32> %1349, i32 0
  store i32 %1353, i32* %238, align 1, !tbaa !2451
  %1354 = extractelement <2 x i32> %1349, i32 1
  store i32 %1354, i32* %239, align 1, !tbaa !2451
  %1355 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1356 = sext i32 %1355 to i64
  %1357 = shl nsw i64 %1356, 2
  %1358 = add i64 %1357, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1359 = add i64 %1337, 39
  store i64 %1359, i64* %PC, align 8
  %1360 = load <2 x float>, <2 x float>* %57, align 1
  %1361 = extractelement <2 x float> %1360, i32 0
  %1362 = inttoptr i64 %1358 to float*
  store float %1361, float* %1362, align 4
  %1363 = load i64, i64* %PC, align 8
  %1364 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1365 = sext i32 %1364 to i64
  store i64 %1365, i64* %RAX, align 8, !tbaa !2428
  %1366 = shl nsw i64 %1365, 2
  %1367 = add i64 %1366, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1368 = add i64 %1363, 17
  store i64 %1368, i64* %PC, align 8
  %1369 = inttoptr i64 %1367 to float*
  %1370 = load float, float* %1369, align 4
  %1371 = fpext float %1370 to double
  %1372 = load double, double* %190, align 1
  %1373 = fdiv double %1372, %1371
  store double %1373, double* %190, align 1, !tbaa !2454
  %1374 = bitcast double %1371 to <2 x i32>
  %1375 = load <2 x i32>, <2 x i32>* %216, align 1
  %1376 = fptrunc double %1373 to float
  store float %1376, float* %25, align 1, !tbaa !2451
  %1377 = extractelement <2 x i32> %1374, i32 1
  store i32 %1377, i32* %237, align 1, !tbaa !2451
  %1378 = extractelement <2 x i32> %1375, i32 0
  store i32 %1378, i32* %238, align 1, !tbaa !2451
  %1379 = extractelement <2 x i32> %1375, i32 1
  store i32 %1379, i32* %239, align 1, !tbaa !2451
  store i64 %1365, i64* %RAX, align 8, !tbaa !2428
  %1380 = add i64 %1366, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1381 = add i64 %1363, 42
  store i64 %1381, i64* %PC, align 8
  %1382 = load <2 x float>, <2 x float>* %57, align 1
  %1383 = extractelement <2 x float> %1382, i32 0
  %1384 = inttoptr i64 %1380 to float*
  store float %1383, float* %1384, align 4
  %1385 = load i64, i64* %RBP, align 8
  %1386 = add i64 %1385, -16
  %1387 = load i64, i64* %PC, align 8
  %1388 = add i64 %1387, 5
  store i64 %1388, i64* %PC, align 8
  %1389 = inttoptr i64 %1386 to i32*
  %1390 = load i32, i32* %1389, align 4
  store i32 %1390, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1391 = add i64 %1385, -8
  %1392 = add i64 %1387, 10
  store i64 %1392, i64* %PC, align 8
  %1393 = load <2 x float>, <2 x float>* %57, align 1
  %1394 = inttoptr i64 %1391 to float*
  %1395 = load float, float* %1394, align 4
  %1396 = extractelement <2 x float> %1393, i32 0
  %1397 = fdiv float %1396, %1395
  store float %1397, float* %25, align 1, !tbaa !2451
  %1398 = bitcast <2 x float> %1393 to <2 x i32>
  %1399 = extractelement <2 x i32> %1398, i32 1
  store i32 %1399, i32* %237, align 1, !tbaa !2451
  %1400 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1401 = sext i32 %1400 to i64
  %1402 = shl nsw i64 %1401, 2
  %1403 = add i64 %1402, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1404 = add i64 %1387, 27
  store i64 %1404, i64* %PC, align 8
  %1405 = load <2 x float>, <2 x float>* %57, align 1
  %1406 = extractelement <2 x float> %1405, i32 0
  %1407 = inttoptr i64 %1403 to float*
  store float %1406, float* %1407, align 4
  %1408 = load i64, i64* %PC, align 8
  %1409 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  store i32 %1409, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1410 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1411 = sext i32 %1410 to i64
  store i64 %1411, i64* %RAX, align 8, !tbaa !2428
  %1412 = shl nsw i64 %1411, 2
  %1413 = add i64 %1412, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1414 = add i64 %1408, 26
  store i64 %1414, i64* %PC, align 8
  %1415 = load <2 x float>, <2 x float>* %57, align 1
  %1416 = load <2 x i32>, <2 x i32>* %216, align 1
  %1417 = inttoptr i64 %1413 to float*
  %1418 = load float, float* %1417, align 4
  %1419 = extractelement <2 x float> %1415, i32 0
  %1420 = fadd float %1419, %1418
  store float %1420, float* %25, align 1, !tbaa !2451
  %1421 = bitcast <2 x float> %1415 to <2 x i32>
  %1422 = extractelement <2 x i32> %1421, i32 1
  store i32 %1422, i32* %237, align 1, !tbaa !2451
  %1423 = extractelement <2 x i32> %1416, i32 0
  store i32 %1423, i32* %238, align 1, !tbaa !2451
  %1424 = extractelement <2 x i32> %1416, i32 1
  store i32 %1424, i32* %239, align 1, !tbaa !2451
  %1425 = load <2 x float>, <2 x float>* %57, align 1
  %1426 = extractelement <2 x float> %1425, i32 0
  store float %1426, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %1427 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RDI, align 8, !tbaa !2428
  %1429 = add i64 %1408, 5572
  %1430 = add i64 %1408, 47
  %1431 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1432 = add i64 %1431, -8
  %1433 = inttoptr i64 %1432 to i64*
  store i64 %1430, i64* %1433, align 8
  store i64 %1432, i64* %RSP, align 8, !tbaa !2428
  store i64 %1429, i64* %PC, align 8, !tbaa !2428
  %1434 = tail call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* nonnull %0, i64 %1429, %struct.Memory* %1162)
  %1435 = load i64, i64* %PC, align 8
  %1436 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1437 = add i32 %1436, 1
  %1438 = zext i32 %1437 to i64
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = icmp eq i32 %1436, -1
  %1440 = icmp eq i32 %1437, 0
  %1441 = or i1 %1439, %1440
  %1442 = zext i1 %1441 to i8
  store i8 %1442, i8* %17, align 1, !tbaa !2432
  %1443 = and i32 %1437, 255
  %1444 = tail call i32 @llvm.ctpop.i32(i32 %1443) #10
  %1445 = trunc i32 %1444 to i8
  %1446 = and i8 %1445, 1
  %1447 = xor i8 %1446, 1
  store i8 %1447, i8* %18, align 1, !tbaa !2446
  %1448 = xor i32 %1437, %1436
  %1449 = lshr i32 %1448, 4
  %1450 = trunc i32 %1449 to i8
  %1451 = and i8 %1450, 1
  store i8 %1451, i8* %19, align 1, !tbaa !2447
  %1452 = zext i1 %1440 to i8
  store i8 %1452, i8* %20, align 1, !tbaa !2448
  %1453 = lshr i32 %1437, 31
  %1454 = trunc i32 %1453 to i8
  store i8 %1454, i8* %21, align 1, !tbaa !2449
  %1455 = lshr i32 %1436, 31
  %1456 = xor i32 %1453, %1455
  %1457 = add nuw nsw i32 %1456, %1453
  %1458 = icmp eq i32 %1457, 2
  %1459 = zext i1 %1458 to i8
  store i8 %1459, i8* %22, align 1, !tbaa !2450
  store i32 %1437, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1460 = add i64 %1435, -601
  store i64 %1460, i64* %PC, align 8, !tbaa !2428
  br label %block_401082

block_400f4a:                                     ; preds = %block_400ec4
  %1461 = add i64 %1630, -2394
  %1462 = add i64 %1630, 5
  %1463 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1464 = add i64 %1463, -8
  %1465 = inttoptr i64 %1464 to i64*
  store i64 %1462, i64* %1465, align 8
  store i64 %1464, i64* %RSP, align 8, !tbaa !2428
  store i64 %1461, i64* %PC, align 8, !tbaa !2428
  %1466 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1461, %struct.Memory* %MEMORY.11)
  %1467 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %2554, align 1, !tbaa !2453
  %1468 = load i64, i64* %RBP, align 8
  %1469 = add i64 %1468, -80
  %1470 = add i64 %1467, 18
  store i64 %1470, i64* %PC, align 8
  %1471 = load <2 x float>, <2 x float>* %57, align 1
  %1472 = inttoptr i64 %1469 to float*
  %1473 = load float, float* %1472, align 4
  %1474 = extractelement <2 x float> %1471, i32 0
  %1475 = fsub float %1474, %1473
  store float %1475, float* %25, align 1, !tbaa !2451
  %1476 = bitcast <2 x float> %1471 to <2 x i32>
  %1477 = extractelement <2 x i32> %1476, i32 1
  store i32 %1477, i32* %237, align 1, !tbaa !2451
  %1478 = add i64 %1468, -84
  %1479 = add i64 %1467, 23
  store i64 %1479, i64* %PC, align 8
  %1480 = load <2 x float>, <2 x float>* %57, align 1
  %1481 = extractelement <2 x float> %1480, i32 0
  %1482 = inttoptr i64 %1478 to float*
  store float %1481, float* %1482, align 4
  %1483 = load i64, i64* %PC, align 8
  %1484 = load i64, i64* @stderr, align 64
  store i64 %1484, i64* %RDI, align 8, !tbaa !2428
  %1485 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1486 = zext i32 %1485 to i64
  store i64 %1486, i64* %RDX, align 8, !tbaa !2428
  %1487 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1488 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1489 = extractelement <2 x i32> %1487, i32 0
  store i32 %1489, i32* %26, align 1, !tbaa !2451
  %1490 = extractelement <2 x i32> %1487, i32 1
  store i32 %1490, i32* %237, align 1, !tbaa !2451
  %1491 = extractelement <2 x i32> %1488, i32 0
  store i32 %1491, i32* %238, align 1, !tbaa !2451
  %1492 = extractelement <2 x i32> %1488, i32 1
  store i32 %1492, i32* %239, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1493 = add i64 %1483, -2678
  %1494 = add i64 %1483, 25
  %1495 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1496 = add i64 %1495, -8
  %1497 = inttoptr i64 %1496 to i64*
  store i64 %1494, i64* %1497, align 8
  store i64 %1496, i64* %RSP, align 8, !tbaa !2428
  store i64 %1493, i64* %PC, align 8, !tbaa !2428
  %1498 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.11)
  %1499 = load i64, i64* %RBP, align 8
  %1500 = add i64 %1499, -64
  %1501 = load i64, i64* %PC, align 8
  %1502 = add i64 %1501, 4
  store i64 %1502, i64* %PC, align 8
  %1503 = inttoptr i64 %1500 to i32*
  %1504 = load i32, i32* %1503, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %1505 = and i32 %1504, 255
  %1506 = tail call i32 @llvm.ctpop.i32(i32 %1505) #10
  %1507 = trunc i32 %1506 to i8
  %1508 = and i8 %1507, 1
  %1509 = xor i8 %1508, 1
  store i8 %1509, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %1510 = icmp eq i32 %1504, 0
  %1511 = zext i1 %1510 to i8
  store i8 %1511, i8* %20, align 1, !tbaa !2448
  %1512 = lshr i32 %1504, 31
  %1513 = trunc i32 %1512 to i8
  store i8 %1513, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1514 = add i64 %1499, -952
  %1515 = load i32, i32* %EAX, align 4
  %1516 = add i64 %1501, 10
  store i64 %1516, i64* %PC, align 8
  %1517 = inttoptr i64 %1514 to i32*
  store i32 %1515, i32* %1517, align 4
  %1518 = load i64, i64* %PC, align 8
  %1519 = add i64 %1518, 23
  %1520 = add i64 %1518, 6
  %1521 = load i8, i8* %21, align 1, !tbaa !2449
  %1522 = icmp ne i8 %1521, 0
  %1523 = load i8, i8* %22, align 1, !tbaa !2450
  %1524 = icmp ne i8 %1523, 0
  %1525 = xor i1 %1522, %1524
  %1526 = select i1 %1525, i64 %1520, i64 %1519
  store i64 %1526, i64* %PC, align 8, !tbaa !2428
  br i1 %1525, label %block_400f8f, label %block_400fa0

block_401546:                                     ; preds = %block_4014c0
  %1527 = add i64 %1698, -3926
  %1528 = add i64 %1698, 5
  %1529 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1530 = add i64 %1529, -8
  %1531 = inttoptr i64 %1530 to i64*
  store i64 %1528, i64* %1531, align 8
  store i64 %1530, i64* %RSP, align 8, !tbaa !2428
  store i64 %1527, i64* %PC, align 8, !tbaa !2428
  %1532 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1527, %struct.Memory* %1825)
  %1533 = load i64, i64* %RBP, align 8
  %1534 = add i64 %1533, -40
  %1535 = load i64, i64* %PC, align 8
  %1536 = add i64 %1535, 5
  store i64 %1536, i64* %PC, align 8
  %1537 = load <2 x float>, <2 x float>* %57, align 1
  %1538 = load <2 x i32>, <2 x i32>* %216, align 1
  %1539 = inttoptr i64 %1534 to float*
  %1540 = load float, float* %1539, align 4
  %1541 = extractelement <2 x float> %1537, i32 0
  %1542 = fsub float %1541, %1540
  store float %1542, float* %25, align 1, !tbaa !2451
  %1543 = bitcast <2 x float> %1537 to <2 x i32>
  %1544 = extractelement <2 x i32> %1543, i32 1
  store i32 %1544, i32* %237, align 1, !tbaa !2451
  %1545 = extractelement <2 x i32> %1538, i32 0
  store i32 %1545, i32* %238, align 1, !tbaa !2451
  %1546 = extractelement <2 x i32> %1538, i32 1
  store i32 %1546, i32* %239, align 1, !tbaa !2451
  %1547 = add i64 %1533, -44
  %1548 = add i64 %1535, 10
  store i64 %1548, i64* %PC, align 8
  %1549 = load <2 x float>, <2 x float>* %57, align 1
  %1550 = load <2 x i32>, <2 x i32>* %216, align 1
  %1551 = inttoptr i64 %1547 to float*
  %1552 = load float, float* %1551, align 4
  %1553 = extractelement <2 x float> %1549, i32 0
  %1554 = fsub float %1553, %1552
  store float %1554, float* %25, align 1, !tbaa !2451
  %1555 = bitcast <2 x float> %1549 to <2 x i32>
  %1556 = extractelement <2 x i32> %1555, i32 1
  store i32 %1556, i32* %237, align 1, !tbaa !2451
  %1557 = extractelement <2 x i32> %1550, i32 0
  store i32 %1557, i32* %238, align 1, !tbaa !2451
  %1558 = extractelement <2 x i32> %1550, i32 1
  store i32 %1558, i32* %239, align 1, !tbaa !2451
  %1559 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1560 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1561 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1562 = sitofp i32 %1561 to float
  store float %1562, float* %2100, align 1, !tbaa !2451
  %1563 = extractelement <2 x i32> %1559, i32 1
  store i32 %1563, i32* %1898, align 1, !tbaa !2451
  %1564 = extractelement <2 x i32> %1560, i32 0
  store i32 %1564, i32* %1899, align 1, !tbaa !2451
  %1565 = extractelement <2 x i32> %1560, i32 1
  store i32 %1565, i32* %1901, align 1, !tbaa !2451
  %1566 = load <2 x float>, <2 x float>* %57, align 1
  %1567 = load <2 x i32>, <2 x i32>* %216, align 1
  %1568 = load <2 x float>, <2 x float>* %2193, align 1
  %1569 = extractelement <2 x float> %1566, i32 0
  %1570 = extractelement <2 x float> %1568, i32 0
  %1571 = fdiv float %1569, %1570
  store float %1571, float* %25, align 1, !tbaa !2451
  %1572 = bitcast <2 x float> %1566 to <2 x i32>
  %1573 = extractelement <2 x i32> %1572, i32 1
  store i32 %1573, i32* %237, align 1, !tbaa !2451
  %1574 = extractelement <2 x i32> %1567, i32 0
  store i32 %1574, i32* %238, align 1, !tbaa !2451
  %1575 = extractelement <2 x i32> %1567, i32 1
  store i32 %1575, i32* %239, align 1, !tbaa !2451
  %1576 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1577 = sext i32 %1576 to i64
  store i64 %1577, i64* %RAX, align 8, !tbaa !2428
  %1578 = shl nsw i64 %1577, 2
  %1579 = add i64 %1578, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1580 = add i64 %1535, 40
  store i64 %1580, i64* %PC, align 8
  %1581 = load <2 x float>, <2 x float>* %57, align 1
  %1582 = extractelement <2 x float> %1581, i32 0
  %1583 = inttoptr i64 %1579 to float*
  store float %1582, float* %1583, align 4
  %1584 = load i64, i64* %PC, align 8
  %1585 = add i64 %1584, -3971
  %1586 = add i64 %1584, 5
  %1587 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1588 = add i64 %1587, -8
  %1589 = inttoptr i64 %1588 to i64*
  store i64 %1586, i64* %1589, align 8
  store i64 %1588, i64* %RSP, align 8, !tbaa !2428
  store i64 %1585, i64* %PC, align 8, !tbaa !2428
  %1590 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1585, %struct.Memory* %1825)
  %1591 = load i64, i64* %RBP, align 8
  %1592 = add i64 %1591, -40
  %1593 = load i64, i64* %PC, align 8
  %1594 = add i64 %1593, 5
  store i64 %1594, i64* %PC, align 8
  %1595 = load <2 x float>, <2 x float>* %57, align 1
  %1596 = extractelement <2 x float> %1595, i32 0
  %1597 = inttoptr i64 %1592 to float*
  store float %1596, float* %1597, align 4
  %1598 = load i64, i64* %PC, align 8
  %1599 = add i64 %1598, 11
  store i64 %1599, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_401588

block_400ec4:                                     ; preds = %block_400ea6, %block_400ed8
  %1600 = phi i32 [ 0, %block_400ea6 ], [ %1029, %block_400ed8 ]
  %1601 = phi i64 [ %2089, %block_400ea6 ], [ %1052, %block_400ed8 ]
  %1602 = zext i32 %1600 to i64
  store i64 %1602, i64* %RAX, align 8, !tbaa !2428
  %1603 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1604 = sub i32 %1600, %1603
  %1605 = icmp ult i32 %1600, %1603
  %1606 = zext i1 %1605 to i8
  store i8 %1606, i8* %17, align 1, !tbaa !2432
  %1607 = and i32 %1604, 255
  %1608 = tail call i32 @llvm.ctpop.i32(i32 %1607) #10
  %1609 = trunc i32 %1608 to i8
  %1610 = and i8 %1609, 1
  %1611 = xor i8 %1610, 1
  store i8 %1611, i8* %18, align 1, !tbaa !2446
  %1612 = xor i32 %1603, %1600
  %1613 = xor i32 %1612, %1604
  %1614 = lshr i32 %1613, 4
  %1615 = trunc i32 %1614 to i8
  %1616 = and i8 %1615, 1
  store i8 %1616, i8* %19, align 1, !tbaa !2447
  %1617 = icmp eq i32 %1604, 0
  %1618 = zext i1 %1617 to i8
  store i8 %1618, i8* %20, align 1, !tbaa !2448
  %1619 = lshr i32 %1604, 31
  %1620 = trunc i32 %1619 to i8
  store i8 %1620, i8* %21, align 1, !tbaa !2449
  %1621 = lshr i32 %1600, 31
  %1622 = lshr i32 %1603, 31
  %1623 = xor i32 %1622, %1621
  %1624 = xor i32 %1619, %1621
  %1625 = add nuw nsw i32 %1624, %1623
  %1626 = icmp eq i32 %1625, 2
  %1627 = zext i1 %1626 to i8
  store i8 %1627, i8* %22, align 1, !tbaa !2450
  %1628 = icmp ne i8 %1620, 0
  %1629 = xor i1 %1628, %1626
  %.v97 = select i1 %1629, i64 20, i64 134
  %1630 = add i64 %.v97, %1601
  store i64 %1630, i64* %PC, align 8, !tbaa !2428
  br i1 %1629, label %block_400ed8, label %block_400f4a

block_4008ff:                                     ; preds = %block_4008eb
  %1631 = sext i32 %552 to i64
  store i64 %1631, i64* %RAX, align 8, !tbaa !2428
  %1632 = shl nsw i64 %1631, 2
  %1633 = add i64 %1632, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1634 = add i64 %582, 17
  store i64 %1634, i64* %PC, align 8
  %1635 = inttoptr i64 %1633 to i32*
  %1636 = load i32, i32* %1635, align 4
  store i32 %1636, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1637 = add i64 %1632, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %1638 = add i64 %582, 34
  store i64 %1638, i64* %PC, align 8
  %1639 = load <2 x float>, <2 x float>* %57, align 1
  %1640 = extractelement <2 x float> %1639, i32 0
  %1641 = inttoptr i64 %1637 to float*
  store float %1640, float* %1641, align 4
  %1642 = load i64, i64* %PC, align 8
  %1643 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1644 = add i32 %1643, 1
  %1645 = zext i32 %1644 to i64
  store i64 %1645, i64* %RAX, align 8, !tbaa !2428
  %1646 = icmp eq i32 %1643, -1
  %1647 = icmp eq i32 %1644, 0
  %1648 = or i1 %1646, %1647
  %1649 = zext i1 %1648 to i8
  store i8 %1649, i8* %17, align 1, !tbaa !2432
  %1650 = and i32 %1644, 255
  %1651 = tail call i32 @llvm.ctpop.i32(i32 %1650) #10
  %1652 = trunc i32 %1651 to i8
  %1653 = and i8 %1652, 1
  %1654 = xor i8 %1653, 1
  store i8 %1654, i8* %18, align 1, !tbaa !2446
  %1655 = xor i32 %1644, %1643
  %1656 = lshr i32 %1655, 4
  %1657 = trunc i32 %1656 to i8
  %1658 = and i8 %1657, 1
  store i8 %1658, i8* %19, align 1, !tbaa !2447
  %1659 = zext i1 %1647 to i8
  store i8 %1659, i8* %20, align 1, !tbaa !2448
  %1660 = lshr i32 %1644, 31
  %1661 = trunc i32 %1660 to i8
  store i8 %1661, i8* %21, align 1, !tbaa !2449
  %1662 = lshr i32 %1643, 31
  %1663 = xor i32 %1660, %1662
  %1664 = add nuw nsw i32 %1663, %1660
  %1665 = icmp eq i32 %1664, 2
  %1666 = zext i1 %1665 to i8
  store i8 %1666, i8* %22, align 1, !tbaa !2450
  store i32 %1644, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1667 = add i64 %1642, -54
  store i64 %1667, i64* %PC, align 8, !tbaa !2428
  br label %block_4008eb

block_4014c0:                                     ; preds = %block_4014ab, %block_4014d4
  %1668 = phi i32 [ 0, %block_4014ab ], [ %1089, %block_4014d4 ]
  %1669 = phi i64 [ %1713, %block_4014ab ], [ %1112, %block_4014d4 ]
  %1670 = zext i32 %1668 to i64
  store i64 %1670, i64* %RAX, align 8, !tbaa !2428
  %1671 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1672 = sub i32 %1668, %1671
  %1673 = icmp ult i32 %1668, %1671
  %1674 = zext i1 %1673 to i8
  store i8 %1674, i8* %17, align 1, !tbaa !2432
  %1675 = and i32 %1672, 255
  %1676 = tail call i32 @llvm.ctpop.i32(i32 %1675) #10
  %1677 = trunc i32 %1676 to i8
  %1678 = and i8 %1677, 1
  %1679 = xor i8 %1678, 1
  store i8 %1679, i8* %18, align 1, !tbaa !2446
  %1680 = xor i32 %1671, %1668
  %1681 = xor i32 %1680, %1672
  %1682 = lshr i32 %1681, 4
  %1683 = trunc i32 %1682 to i8
  %1684 = and i8 %1683, 1
  store i8 %1684, i8* %19, align 1, !tbaa !2447
  %1685 = icmp eq i32 %1672, 0
  %1686 = zext i1 %1685 to i8
  store i8 %1686, i8* %20, align 1, !tbaa !2448
  %1687 = lshr i32 %1672, 31
  %1688 = trunc i32 %1687 to i8
  store i8 %1688, i8* %21, align 1, !tbaa !2449
  %1689 = lshr i32 %1668, 31
  %1690 = lshr i32 %1671, 31
  %1691 = xor i32 %1690, %1689
  %1692 = xor i32 %1687, %1689
  %1693 = add nuw nsw i32 %1692, %1691
  %1694 = icmp eq i32 %1693, 2
  %1695 = zext i1 %1694 to i8
  store i8 %1695, i8* %22, align 1, !tbaa !2450
  %1696 = icmp ne i8 %1688, 0
  %1697 = xor i1 %1696, %1694
  %.v101 = select i1 %1697, i64 20, i64 134
  %1698 = add i64 %.v101, %1669
  store i64 %1698, i64* %PC, align 8, !tbaa !2428
  br i1 %1697, label %block_4014d4, label %block_401546

block_4014ab:                                     ; preds = %block_40149d
  %1699 = add i64 %2597, -3771
  %1700 = add i64 %2597, 5
  %1701 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1702 = add i64 %1701, -8
  %1703 = inttoptr i64 %1702 to i64*
  store i64 %1700, i64* %1703, align 8
  store i64 %1702, i64* %RSP, align 8, !tbaa !2428
  store i64 %1699, i64* %PC, align 8, !tbaa !2428
  %1704 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1699, %struct.Memory* %1825)
  %1705 = load i64, i64* %RBP, align 8
  %1706 = add i64 %1705, -40
  %1707 = load i64, i64* %PC, align 8
  %1708 = add i64 %1707, 5
  store i64 %1708, i64* %PC, align 8
  %1709 = load <2 x float>, <2 x float>* %57, align 1
  %1710 = extractelement <2 x float> %1709, i32 0
  %1711 = inttoptr i64 %1706 to float*
  store float %1710, float* %1711, align 4
  %1712 = load i64, i64* %PC, align 8
  %1713 = add i64 %1712, 11
  store i64 %1713, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4014c0

block_4013ba:                                     ; preds = %block_401369
  %1714 = add i64 %859, -3530
  %1715 = add i64 %859, 5
  %1716 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1717 = add i64 %1716, -8
  %1718 = inttoptr i64 %1717 to i64*
  store i64 %1715, i64* %1718, align 8
  store i64 %1717, i64* %RSP, align 8, !tbaa !2428
  store i64 %1714, i64* %PC, align 8, !tbaa !2428
  %1719 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %1714, %struct.Memory* %443)
  %1720 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %2554, align 1, !tbaa !2453
  %1721 = load i64, i64* %RBP, align 8
  %1722 = add i64 %1721, -84
  %1723 = add i64 %1720, 18
  store i64 %1723, i64* %PC, align 8
  %1724 = load <2 x float>, <2 x float>* %57, align 1
  %1725 = extractelement <2 x float> %1724, i32 0
  %1726 = inttoptr i64 %1722 to float*
  store float %1725, float* %1726, align 4
  %1727 = load i64, i64* %RBP, align 8
  %1728 = add i64 %1727, -84
  %1729 = load i64, i64* %PC, align 8
  %1730 = add i64 %1729, 5
  store i64 %1730, i64* %PC, align 8
  %1731 = inttoptr i64 %1728 to i32*
  %1732 = load i32, i32* %1731, align 4
  store i32 %1732, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1733 = add i64 %1727, -80
  %1734 = add i64 %1729, 10
  store i64 %1734, i64* %PC, align 8
  %1735 = load <2 x float>, <2 x float>* %57, align 1
  %1736 = load <2 x i32>, <2 x i32>* %216, align 1
  %1737 = inttoptr i64 %1733 to float*
  %1738 = load float, float* %1737, align 4
  %1739 = extractelement <2 x float> %1735, i32 0
  %1740 = fsub float %1739, %1738
  store float %1740, float* %25, align 1, !tbaa !2451
  %1741 = bitcast <2 x float> %1735 to <2 x i32>
  %1742 = extractelement <2 x i32> %1741, i32 1
  store i32 %1742, i32* %237, align 1, !tbaa !2451
  %1743 = extractelement <2 x i32> %1736, i32 0
  store i32 %1743, i32* %238, align 1, !tbaa !2451
  %1744 = extractelement <2 x i32> %1736, i32 1
  store i32 %1744, i32* %239, align 1, !tbaa !2451
  %1745 = add i64 %1727, -76
  %1746 = add i64 %1729, 15
  store i64 %1746, i64* %PC, align 8
  %1747 = load <2 x float>, <2 x float>* %57, align 1
  %1748 = extractelement <2 x float> %1747, i32 0
  %1749 = inttoptr i64 %1745 to float*
  store float %1748, float* %1749, align 4
  %1750 = load i64, i64* %RBP, align 8
  %1751 = add i64 %1750, -76
  %1752 = load i64, i64* %PC, align 8
  %1753 = add i64 %1752, 5
  store i64 %1753, i64* %PC, align 8
  %1754 = inttoptr i64 %1751 to float*
  %1755 = load float, float* %1754, align 4
  %1756 = fpext float %1755 to double
  store double %1756, double* %2599, align 1, !tbaa !2454
  %1757 = add i64 %1750, -68
  %1758 = add i64 %1752, 10
  store i64 %1758, i64* %PC, align 8
  %1759 = inttoptr i64 %1757 to i32*
  %1760 = load i32, i32* %1759, align 4
  %1761 = sitofp i32 %1760 to double
  store double %1761, double* %213, align 1, !tbaa !2454
  %1762 = fdiv double %1756, %1761
  %.cast31 = bitcast double %1762 to <2 x i32>
  %1763 = fptrunc double %1762 to float
  store float %1763, float* %25, align 1, !tbaa !2451
  %1764 = extractelement <2 x i32> %.cast31, i32 1
  store i32 %1764, i32* %237, align 1, !tbaa !2451
  %1765 = add i64 %1752, 23
  store i64 %1765, i64* %PC, align 8
  %1766 = load <2 x float>, <2 x float>* %57, align 1
  %1767 = extractelement <2 x float> %1766, i32 0
  store float %1767, float* %1754, align 4
  %1768 = load i64, i64* %PC, align 8
  %1769 = load i64, i64* @stderr, align 64
  store i64 %1769, i64* %RDI, align 8, !tbaa !2428
  %1770 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1771 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1772 = extractelement <2 x i32> %1770, i32 0
  store i32 %1772, i32* %26, align 1, !tbaa !2451
  %1773 = extractelement <2 x i32> %1770, i32 1
  store i32 %1773, i32* %237, align 1, !tbaa !2451
  %1774 = extractelement <2 x i32> %1771, i32 0
  store i32 %1774, i32* %238, align 1, !tbaa !2451
  %1775 = extractelement <2 x i32> %1771, i32 1
  store i32 %1775, i32* %239, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %1776 = add i64 %1768, -3847
  %1777 = add i64 %1768, 18
  %1778 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1779 = add i64 %1778, -8
  %1780 = inttoptr i64 %1779 to i64*
  store i64 %1777, i64* %1780, align 8
  store i64 %1779, i64* %RSP, align 8, !tbaa !2428
  store i64 %1776, i64* %PC, align 8, !tbaa !2428
  %1781 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1719)
  %1782 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1783 = load i64, i64* @stderr, align 64
  store i64 %1783, i64* %RDI, align 8, !tbaa !2428
  %1784 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1785 = zext i32 %1784 to i64
  store i64 %1785, i64* %RDX, align 8, !tbaa !2428
  %1786 = load i64, i64* %RBP, align 8
  %1787 = add i64 %1786, -980
  %1788 = load i32, i32* %EAX, align 4
  %1789 = add i64 %1782, 31
  store i64 %1789, i64* %PC, align 8
  %1790 = inttoptr i64 %1787 to i32*
  store i32 %1788, i32* %1790, align 4
  %1791 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1792 = add i64 %1791, -3896
  %1793 = add i64 %1791, 7
  %1794 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1795 = add i64 %1794, -8
  %1796 = inttoptr i64 %1795 to i64*
  store i64 %1793, i64* %1796, align 8
  store i64 %1795, i64* %RSP, align 8, !tbaa !2428
  store i64 %1792, i64* %PC, align 8, !tbaa !2428
  %1797 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1781)
  %1798 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1799 = load i64, i64* @stderr, align 64
  store i64 %1799, i64* %RDI, align 8, !tbaa !2428
  %1800 = load i64, i64* %RBP, align 8
  %1801 = add i64 %1800, -984
  %1802 = load i32, i32* %EAX, align 4
  %1803 = add i64 %1798, 24
  store i64 %1803, i64* %PC, align 8
  %1804 = inttoptr i64 %1801 to i32*
  store i32 %1802, i32* %1804, align 4
  %1805 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1806 = add i64 %1805, -3927
  %1807 = add i64 %1805, 7
  %1808 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1809 = add i64 %1808, -8
  %1810 = inttoptr i64 %1809 to i64*
  store i64 %1807, i64* %1810, align 8
  store i64 %1809, i64* %RSP, align 8, !tbaa !2428
  store i64 %1806, i64* %PC, align 8, !tbaa !2428
  %1811 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1797)
  %1812 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1813 = load i64, i64* @stderr, align 64
  store i64 %1813, i64* %RDI, align 8, !tbaa !2428
  %1814 = load i64, i64* %RBP, align 8
  %1815 = add i64 %1814, -988
  %1816 = load i32, i32* %EAX, align 4
  %1817 = add i64 %1812, 24
  store i64 %1817, i64* %PC, align 8
  %1818 = inttoptr i64 %1815 to i32*
  store i32 %1816, i32* %1818, align 4
  %1819 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %1820 = add i64 %1819, -3958
  %1821 = add i64 %1819, 7
  %1822 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1823 = add i64 %1822, -8
  %1824 = inttoptr i64 %1823 to i64*
  store i64 %1821, i64* %1824, align 8
  store i64 %1823, i64* %RSP, align 8, !tbaa !2428
  store i64 %1820, i64* %PC, align 8, !tbaa !2428
  %1825 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1811)
  %1826 = load i64, i64* %PC, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %1874, align 1, !tbaa !2453
  %1827 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1828 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1829 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1830 = sitofp i32 %1829 to float
  store float %1830, float* %2100, align 1, !tbaa !2451
  %1831 = extractelement <2 x i32> %1827, i32 1
  store i32 %1831, i32* %1898, align 1, !tbaa !2451
  %1832 = extractelement <2 x i32> %1828, i32 0
  store i32 %1832, i32* %1899, align 1, !tbaa !2451
  %1833 = extractelement <2 x i32> %1828, i32 1
  store i32 %1833, i32* %1901, align 1, !tbaa !2451
  %1834 = load i64, i64* %RBP, align 8
  %1835 = add i64 %1834, -76
  %1836 = add i64 %1826, 17
  store i64 %1836, i64* %PC, align 8
  %1837 = load <2 x float>, <2 x float>* %2193, align 1
  %1838 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1839 = inttoptr i64 %1835 to float*
  %1840 = load float, float* %1839, align 4
  %1841 = extractelement <2 x float> %1837, i32 0
  %1842 = fmul float %1841, %1840
  store float %1842, float* %2100, align 1, !tbaa !2451
  %1843 = bitcast <2 x float> %1837 to <2 x i32>
  %1844 = extractelement <2 x i32> %1843, i32 1
  store i32 %1844, i32* %1898, align 1, !tbaa !2451
  %1845 = extractelement <2 x i32> %1838, i32 0
  store i32 %1845, i32* %1899, align 1, !tbaa !2451
  %1846 = extractelement <2 x i32> %1838, i32 1
  store i32 %1846, i32* %1901, align 1, !tbaa !2451
  %1847 = add i64 %1834, -44
  %1848 = add i64 %1826, 22
  store i64 %1848, i64* %PC, align 8
  %1849 = load <2 x float>, <2 x float>* %2193, align 1
  %1850 = extractelement <2 x float> %1849, i32 0
  %1851 = inttoptr i64 %1847 to float*
  store float %1850, float* %1851, align 4
  %1852 = load i64, i64* %PC, align 8
  %1853 = load <2 x float>, <2 x float>* %57, align 1
  %1854 = extractelement <2 x float> %1853, i32 0
  store float %1854, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1855 = load i64, i64* %RBP, align 8
  %1856 = add i64 %1855, -992
  %1857 = load i32, i32* %EAX, align 4
  %1858 = add i64 %1852, 26
  store i64 %1858, i64* %PC, align 8
  %1859 = inttoptr i64 %1856 to i32*
  store i32 %1857, i32* %1859, align 4
  %.pre82 = load i64, i64* %PC, align 8
  %.pre83 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  br label %block_40149d

block_4009c7:                                     ; preds = %block_40096d
  %1860 = bitcast i64* %29 to double*
  %1861 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %1862 = bitcast %union.VectorReg* %7 to i8*
  %1863 = bitcast %union.VectorReg* %8 to i8*
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %1864 = zext i32 %373 to i64
  store i64 %1864, i64* %RDI, align 8, !tbaa !2428
  store i64 %1864, i64* %RDX, align 8, !tbaa !2428
  %1865 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1866 = zext i32 %1865 to i64
  store i64 %1866, i64* %RCX, align 8, !tbaa !2428
  %1867 = add i64 %400, 5625
  %1868 = add i64 %400, 56
  %1869 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1870 = add i64 %1869, -8
  %1871 = inttoptr i64 %1870 to i64*
  store i64 %1868, i64* %1871, align 8
  store i64 %1870, i64* %RSP, align 8, !tbaa !2428
  store i64 %1867, i64* %PC, align 8, !tbaa !2428
  %1872 = tail call %struct.Memory* @sub_401fc0_dmxpy_renamed_(%struct.State* nonnull %0, i64 %1867, %struct.Memory* %2610)
  %1873 = load i64, i64* %PC, align 8
  %1874 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1874, align 1, !tbaa !2453
  %1875 = load i64, i64* %RBP, align 8
  %1876 = add i64 %1875, -28
  %1877 = add i64 %1873, 8
  store i64 %1877, i64* %PC, align 8
  %1878 = inttoptr i64 %1876 to float*
  store float 0.000000e+00, float* %1878, align 4
  %1879 = load i64, i64* %RBP, align 8
  %1880 = add i64 %1879, -24
  %1881 = load i64, i64* %PC, align 8
  %1882 = add i64 %1881, 5
  store i64 %1882, i64* %PC, align 8
  %1883 = load <2 x float>, <2 x float>* %57, align 1
  %1884 = extractelement <2 x float> %1883, i32 0
  %1885 = inttoptr i64 %1880 to float*
  store float %1884, float* %1885, align 4
  %1886 = load i64, i64* %PC, align 8
  %1887 = add i64 %1886, 11
  store i64 %1887, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1888 = bitcast %union.VectorReg* %8 to i32*
  %1889 = getelementptr inbounds i8, i8* %1863, i64 4
  %1890 = bitcast i8* %1889 to i32*
  %1891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %1892 = bitcast i64* %1891 to i32*
  %1893 = getelementptr inbounds i8, i8* %1863, i64 12
  %1894 = bitcast i8* %1893 to i32*
  %1895 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %1896 = bitcast %union.VectorReg* %7 to i32*
  %1897 = getelementptr inbounds i8, i8* %1862, i64 4
  %1898 = bitcast i8* %1897 to i32*
  %1899 = bitcast i64* %191 to i32*
  %1900 = getelementptr inbounds i8, i8* %1862, i64 12
  %1901 = bitcast i8* %1900 to i32*
  br label %block_400a17

block_401588:                                     ; preds = %block_40159c, %block_401546
  %1902 = phi i32 [ %2810, %block_40159c ], [ 0, %block_401546 ]
  %1903 = phi i64 [ %2833, %block_40159c ], [ %1599, %block_401546 ]
  %1904 = zext i32 %1902 to i64
  store i64 %1904, i64* %RAX, align 8, !tbaa !2428
  %1905 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1906 = sub i32 %1902, %1905
  %1907 = icmp ult i32 %1902, %1905
  %1908 = zext i1 %1907 to i8
  store i8 %1908, i8* %17, align 1, !tbaa !2432
  %1909 = and i32 %1906, 255
  %1910 = tail call i32 @llvm.ctpop.i32(i32 %1909) #10
  %1911 = trunc i32 %1910 to i8
  %1912 = and i8 %1911, 1
  %1913 = xor i8 %1912, 1
  store i8 %1913, i8* %18, align 1, !tbaa !2446
  %1914 = xor i32 %1905, %1902
  %1915 = xor i32 %1914, %1906
  %1916 = lshr i32 %1915, 4
  %1917 = trunc i32 %1916 to i8
  %1918 = and i8 %1917, 1
  store i8 %1918, i8* %19, align 1, !tbaa !2447
  %1919 = icmp eq i32 %1906, 0
  %1920 = zext i1 %1919 to i8
  store i8 %1920, i8* %20, align 1, !tbaa !2448
  %1921 = lshr i32 %1906, 31
  %1922 = trunc i32 %1921 to i8
  store i8 %1922, i8* %21, align 1, !tbaa !2449
  %1923 = lshr i32 %1902, 31
  %1924 = lshr i32 %1905, 31
  %1925 = xor i32 %1924, %1923
  %1926 = xor i32 %1921, %1923
  %1927 = add nuw nsw i32 %1926, %1925
  %1928 = icmp eq i32 %1927, 2
  %1929 = zext i1 %1928 to i8
  store i8 %1929, i8* %22, align 1, !tbaa !2450
  %1930 = icmp ne i8 %1922, 0
  %1931 = xor i1 %1930, %1928
  %.v102 = select i1 %1931, i64 20, i64 94
  %1932 = add i64 %.v102, %1903
  store i64 %1932, i64* %PC, align 8, !tbaa !2428
  br i1 %1931, label %block_40159c, label %block_4015e6

block_400a2b:                                     ; preds = %block_400a17
  %1933 = load i64, i64* %RBP, align 8
  %1934 = add i64 %1933, -28
  %1935 = add i64 %2693, 5
  store i64 %1935, i64* %PC, align 8
  %1936 = inttoptr i64 %1934 to float*
  %1937 = load float, float* %1936, align 4
  %1938 = fpext float %1937 to double
  store double %1938, double* %2599, align 1, !tbaa !2454
  %1939 = sext i32 %2663 to i64
  store i64 %1939, i64* %RAX, align 8, !tbaa !2428
  %1940 = shl nsw i64 %1939, 2
  %1941 = add i64 %1940, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1942 = add i64 %2693, 22
  store i64 %1942, i64* %PC, align 8
  %1943 = inttoptr i64 %1941 to float*
  %1944 = load float, float* %1943, align 4
  %1945 = fpext float %1944 to double
  %1946 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %1947 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %1948 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %1949 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %1946, i32* %1888, align 1, !tbaa !2451
  store i32 %1947, i32* %1890, align 1, !tbaa !2451
  store i32 %1948, i32* %1892, align 1, !tbaa !2451
  store i32 %1949, i32* %1894, align 1, !tbaa !2451
  %1950 = bitcast double %1945 to i64
  %1951 = load i64, i64* %191, align 1
  %1952 = load i64, i64* %1895, align 1
  %1953 = load i64, i64* %1891, align 1
  %1954 = and i64 %1952, %1950
  %1955 = and i64 %1953, %1951
  %1956 = trunc i64 %1954 to i32
  %1957 = lshr i64 %1954, 32
  %1958 = trunc i64 %1957 to i32
  store i32 %1956, i32* %1896, align 1, !tbaa !2453
  store i32 %1958, i32* %1898, align 1, !tbaa !2453
  %1959 = trunc i64 %1955 to i32
  store i32 %1959, i32* %1899, align 1, !tbaa !2453
  %1960 = lshr i64 %1955, 32
  %1961 = trunc i64 %1960 to i32
  store i32 %1961, i32* %1901, align 1, !tbaa !2453
  %1962 = add i64 %2693, 37
  store i64 %1962, i64* %PC, align 8
  %1963 = load double, double* %190, align 1
  %1964 = fcmp uno double %1938, %1963
  br i1 %1964, label %1965, label %1975

; <label>:1965:                                   ; preds = %block_400a2b
  %1966 = fadd double %1938, %1963
  %1967 = bitcast double %1966 to i64
  %1968 = and i64 %1967, 9221120237041090560
  %1969 = icmp eq i64 %1968, 9218868437227405312
  %1970 = and i64 %1967, 2251799813685247
  %1971 = icmp ne i64 %1970, 0
  %1972 = and i1 %1969, %1971
  br i1 %1972, label %1973, label %1981

; <label>:1973:                                   ; preds = %1965
  %1974 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1962, %struct.Memory* %MEMORY.15) #13
  %.pre84 = load i64, i64* %PC, align 8
  %.pre85 = load i8, i8* %17, align 1, !tbaa !2432
  %.pre86 = load i8, i8* %20, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:1975:                                   ; preds = %block_400a2b
  %1976 = fcmp ogt double %1938, %1963
  br i1 %1976, label %1981, label %1977

; <label>:1977:                                   ; preds = %1975
  %1978 = fcmp olt double %1938, %1963
  br i1 %1978, label %1981, label %1979

; <label>:1979:                                   ; preds = %1977
  %1980 = fcmp oeq double %1938, %1963
  br i1 %1980, label %1981, label %1985

; <label>:1981:                                   ; preds = %1979, %1977, %1975, %1965
  %1982 = phi i8 [ 0, %1975 ], [ 0, %1977 ], [ 1, %1979 ], [ 1, %1965 ]
  %1983 = phi i8 [ 0, %1975 ], [ 0, %1977 ], [ 0, %1979 ], [ 1, %1965 ]
  %1984 = phi i8 [ 0, %1975 ], [ 1, %1977 ], [ 0, %1979 ], [ 1, %1965 ]
  store i8 %1982, i8* %20, align 1, !tbaa !2456
  store i8 %1983, i8* %18, align 1, !tbaa !2456
  store i8 %1984, i8* %17, align 1, !tbaa !2456
  br label %1985

; <label>:1985:                                   ; preds = %1981, %1979
  %1986 = phi i8 [ %1982, %1981 ], [ %2681, %1979 ]
  %1987 = phi i8 [ %1984, %1981 ], [ %2669, %1979 ]
  store i8 0, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %1985, %1973
  %1988 = phi i8 [ %.pre86, %1973 ], [ %1986, %1985 ]
  %1989 = phi i8 [ %.pre85, %1973 ], [ %1987, %1985 ]
  %1990 = phi i64 [ %.pre84, %1973 ], [ %1962, %1985 ]
  %1991 = phi %struct.Memory* [ %1974, %1973 ], [ %MEMORY.15, %1985 ]
  %1992 = or i8 %1989, %1988
  %1993 = icmp ne i8 %1992, 0
  %.v105 = select i1 %1993, i64 24, i64 6
  %1994 = add i64 %.v105, %1990
  store i64 %1994, i64* %PC, align 8, !tbaa !2428
  br i1 %1993, label %block_400a68, label %block_400a56

block_4010b9:                                     ; preds = %block_4010a5
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %1995 = load i64, i64* %RBP, align 8
  %1996 = add i64 %1995, -20
  store i64 %1996, i64* %R8, align 8, !tbaa !2428
  %1997 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1998 = zext i32 %1997 to i64
  store i64 %1998, i64* %RSI, align 8, !tbaa !2428
  %1999 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2000 = zext i32 %1999 to i64
  store i64 %2000, i64* %RDX, align 8, !tbaa !2428
  %2001 = add i64 %890, 1703
  %2002 = add i64 %890, 43
  %2003 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2004 = add i64 %2003, -8
  %2005 = inttoptr i64 %2004 to i64*
  store i64 %2002, i64* %2005, align 8
  store i64 %2004, i64* %RSP, align 8, !tbaa !2428
  store i64 %2001, i64* %PC, align 8, !tbaa !2428
  %2006 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %2001, %struct.Memory* %1162)
  %2007 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2008 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2009 = zext i32 %2008 to i64
  store i64 %2009, i64* %RSI, align 8, !tbaa !2428
  %2010 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2011 = zext i32 %2010 to i64
  store i64 %2011, i64* %RDX, align 8, !tbaa !2428
  %2012 = add i64 %2007, 2124
  %2013 = add i64 %2007, 49
  %2014 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2015 = add i64 %2014, -8
  %2016 = inttoptr i64 %2015 to i64*
  store i64 %2013, i64* %2016, align 8
  store i64 %2015, i64* %RSP, align 8, !tbaa !2428
  store i64 %2012, i64* %PC, align 8, !tbaa !2428
  %2017 = tail call %struct.Memory* @sub_401930_dgefa_renamed_(%struct.State* nonnull %0, i64 %2012, %struct.Memory* %1162)
  %2018 = load i64, i64* %PC, align 8
  %2019 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2020 = add i32 %2019, 1
  %2021 = zext i32 %2020 to i64
  store i64 %2021, i64* %RAX, align 8, !tbaa !2428
  %2022 = icmp eq i32 %2019, -1
  %2023 = icmp eq i32 %2020, 0
  %2024 = or i1 %2022, %2023
  %2025 = zext i1 %2024 to i8
  store i8 %2025, i8* %17, align 1, !tbaa !2432
  %2026 = and i32 %2020, 255
  %2027 = tail call i32 @llvm.ctpop.i32(i32 %2026) #10
  %2028 = trunc i32 %2027 to i8
  %2029 = and i8 %2028, 1
  %2030 = xor i8 %2029, 1
  store i8 %2030, i8* %18, align 1, !tbaa !2446
  %2031 = xor i32 %2020, %2019
  %2032 = lshr i32 %2031, 4
  %2033 = trunc i32 %2032 to i8
  %2034 = and i8 %2033, 1
  store i8 %2034, i8* %19, align 1, !tbaa !2447
  %2035 = zext i1 %2023 to i8
  store i8 %2035, i8* %20, align 1, !tbaa !2448
  %2036 = lshr i32 %2020, 31
  %2037 = trunc i32 %2036 to i8
  store i8 %2037, i8* %21, align 1, !tbaa !2449
  %2038 = lshr i32 %2019, 31
  %2039 = xor i32 %2036, %2038
  %2040 = add nuw nsw i32 %2039, %2036
  %2041 = icmp eq i32 %2040, 2
  %2042 = zext i1 %2041 to i8
  store i8 %2042, i8* %22, align 1, !tbaa !2450
  store i32 %2020, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2043 = add i64 %2018, -112
  store i64 %2043, i64* %PC, align 8, !tbaa !2428
  br label %block_4010a5

block_400ea6:                                     ; preds = %block_400e3c, %block_400fa0
  %2044 = phi i64 [ %.pre78, %block_400e3c ], [ %2571, %block_400fa0 ]
  %MEMORY.11 = phi %struct.Memory* [ %2786, %block_400e3c ], [ %1498, %block_400fa0 ]
  %2045 = add i64 %2044, -2230
  %2046 = add i64 %2044, 5
  %2047 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2048 = add i64 %2047, -8
  %2049 = inttoptr i64 %2048 to i64*
  store i64 %2046, i64* %2049, align 8
  store i64 %2048, i64* %RSP, align 8, !tbaa !2428
  store i64 %2045, i64* %PC, align 8, !tbaa !2428
  %2050 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %2045, %struct.Memory* %MEMORY.11)
  %2051 = load i64, i64* %RBP, align 8
  %2052 = add i64 %2051, -80
  %2053 = load i64, i64* %PC, align 8
  %2054 = add i64 %2053, 5
  store i64 %2054, i64* %PC, align 8
  %2055 = load <2 x float>, <2 x float>* %57, align 1
  %2056 = extractelement <2 x float> %2055, i32 0
  %2057 = inttoptr i64 %2052 to float*
  store float %2056, float* %2057, align 4
  %2058 = load i64, i64* %RBP, align 8
  %2059 = add i64 %2058, -64
  %2060 = load i64, i64* %PC, align 8
  %2061 = add i64 %2060, 3
  store i64 %2061, i64* %PC, align 8
  %2062 = inttoptr i64 %2059 to i32*
  %2063 = load i32, i32* %2062, align 4
  %2064 = add i32 %2063, 1
  %2065 = zext i32 %2064 to i64
  store i64 %2065, i64* %RAX, align 8, !tbaa !2428
  %2066 = icmp eq i32 %2063, -1
  %2067 = icmp eq i32 %2064, 0
  %2068 = or i1 %2066, %2067
  %2069 = zext i1 %2068 to i8
  store i8 %2069, i8* %17, align 1, !tbaa !2432
  %2070 = and i32 %2064, 255
  %2071 = tail call i32 @llvm.ctpop.i32(i32 %2070) #10
  %2072 = trunc i32 %2071 to i8
  %2073 = and i8 %2072, 1
  %2074 = xor i8 %2073, 1
  store i8 %2074, i8* %18, align 1, !tbaa !2446
  %2075 = xor i32 %2064, %2063
  %2076 = lshr i32 %2075, 4
  %2077 = trunc i32 %2076 to i8
  %2078 = and i8 %2077, 1
  store i8 %2078, i8* %19, align 1, !tbaa !2447
  %2079 = zext i1 %2067 to i8
  store i8 %2079, i8* %20, align 1, !tbaa !2448
  %2080 = lshr i32 %2064, 31
  %2081 = trunc i32 %2080 to i8
  store i8 %2081, i8* %21, align 1, !tbaa !2449
  %2082 = lshr i32 %2063, 31
  %2083 = xor i32 %2080, %2082
  %2084 = add nuw nsw i32 %2083, %2080
  %2085 = icmp eq i32 %2084, 2
  %2086 = zext i1 %2085 to i8
  store i8 %2086, i8* %22, align 1, !tbaa !2450
  %2087 = add i64 %2060, 9
  store i64 %2087, i64* %PC, align 8
  store i32 %2064, i32* %2062, align 4
  %2088 = load i64, i64* %PC, align 8
  %2089 = add i64 %2088, 11
  store i64 %2089, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400ec4

block_400b25:                                     ; preds = %block_400a17
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %2091 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 12) to i32*), align 4
  store i32 %2091, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2092 = add i64 %2693, 7323
  %2093 = add i64 %2693, 13
  %2094 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2095 = add i64 %2094, -8
  %2096 = inttoptr i64 %2095 to i64*
  store i64 %2093, i64* %2096, align 8
  store i64 %2095, i64* %RSP, align 8, !tbaa !2428
  store i64 %2092, i64* %PC, align 8, !tbaa !2428
  %2097 = tail call %struct.Memory* @sub_4027c0_epslon_renamed_(%struct.State* nonnull %0, i64 %2092, %struct.Memory* %MEMORY.15)
  %2098 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %2099 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 12) to i32*), align 4
  %2100 = bitcast %union.VectorReg* %7 to float*
  store i32 %2099, i32* %1896, align 1, !tbaa !2451
  %2101 = bitcast i8* %1897 to float*
  store float 0.000000e+00, float* %2101, align 1, !tbaa !2451
  %2102 = bitcast i64* %191 to float*
  store float 0.000000e+00, float* %2102, align 1, !tbaa !2451
  %2103 = bitcast i8* %1900 to float*
  store float 0.000000e+00, float* %2103, align 1, !tbaa !2451
  %2104 = load i64, i64* %RBP, align 8
  %2105 = add i64 %2104, -36
  %2106 = add i64 %2098, 23
  store i64 %2106, i64* %PC, align 8
  %2107 = load <2 x float>, <2 x float>* %57, align 1
  %2108 = extractelement <2 x float> %2107, i32 0
  %2109 = inttoptr i64 %2105 to float*
  store float %2108, float* %2109, align 4
  %2110 = load i64, i64* %RBP, align 8
  %2111 = add i64 %2110, -28
  %2112 = load i64, i64* %PC, align 8
  %2113 = add i64 %2112, 5
  store i64 %2113, i64* %PC, align 8
  %2114 = inttoptr i64 %2111 to i32*
  %2115 = load i32, i32* %2114, align 4
  store i32 %2115, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2116 = bitcast %union.VectorReg* %8 to <2 x i32>*
  %2117 = load <2 x i32>, <2 x i32>* %2116, align 1
  %2118 = bitcast i64* %1891 to <2 x i32>*
  %2119 = load <2 x i32>, <2 x i32>* %2118, align 1
  %2120 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2121 = sitofp i32 %2120 to float
  %2122 = bitcast %union.VectorReg* %8 to float*
  store float %2121, float* %2122, align 1, !tbaa !2451
  %2123 = extractelement <2 x i32> %2117, i32 1
  store i32 %2123, i32* %1890, align 1, !tbaa !2451
  %2124 = extractelement <2 x i32> %2119, i32 0
  store i32 %2124, i32* %1892, align 1, !tbaa !2451
  %2125 = extractelement <2 x i32> %2119, i32 1
  store i32 %2125, i32* %1894, align 1, !tbaa !2451
  %2126 = add i64 %2110, -20
  %2127 = add i64 %2112, 19
  store i64 %2127, i64* %PC, align 8
  %2128 = bitcast %union.VectorReg* %8 to <2 x float>*
  %2129 = load <2 x float>, <2 x float>* %2128, align 1
  %2130 = load <2 x i32>, <2 x i32>* %2118, align 1
  %2131 = inttoptr i64 %2126 to float*
  %2132 = load float, float* %2131, align 4
  %2133 = extractelement <2 x float> %2129, i32 0
  %2134 = fmul float %2133, %2132
  store float %2134, float* %2122, align 1, !tbaa !2451
  %2135 = bitcast <2 x float> %2129 to <2 x i32>
  %2136 = extractelement <2 x i32> %2135, i32 1
  store i32 %2136, i32* %1890, align 1, !tbaa !2451
  %2137 = extractelement <2 x i32> %2130, i32 0
  store i32 %2137, i32* %1892, align 1, !tbaa !2451
  %2138 = extractelement <2 x i32> %2130, i32 1
  store i32 %2138, i32* %1894, align 1, !tbaa !2451
  %2139 = add i64 %2110, -24
  %2140 = add i64 %2112, 24
  store i64 %2140, i64* %PC, align 8
  %2141 = load <2 x float>, <2 x float>* %2128, align 1
  %2142 = load <2 x i32>, <2 x i32>* %2118, align 1
  %2143 = inttoptr i64 %2139 to float*
  %2144 = load float, float* %2143, align 4
  %2145 = extractelement <2 x float> %2141, i32 0
  %2146 = fmul float %2145, %2144
  store float %2146, float* %2122, align 1, !tbaa !2451
  %2147 = bitcast <2 x float> %2141 to <2 x i32>
  %2148 = extractelement <2 x i32> %2147, i32 1
  store i32 %2148, i32* %1890, align 1, !tbaa !2451
  %2149 = extractelement <2 x i32> %2142, i32 0
  store i32 %2149, i32* %1892, align 1, !tbaa !2451
  %2150 = extractelement <2 x i32> %2142, i32 1
  store i32 %2150, i32* %1894, align 1, !tbaa !2451
  %2151 = add i64 %2110, -36
  %2152 = add i64 %2112, 29
  store i64 %2152, i64* %PC, align 8
  %2153 = load <2 x float>, <2 x float>* %2128, align 1
  %2154 = load <2 x i32>, <2 x i32>* %2118, align 1
  %2155 = inttoptr i64 %2151 to float*
  %2156 = load float, float* %2155, align 4
  %2157 = extractelement <2 x float> %2153, i32 0
  %2158 = fmul float %2157, %2156
  store float %2158, float* %2122, align 1, !tbaa !2451
  %2159 = bitcast <2 x float> %2153 to <2 x i32>
  %2160 = extractelement <2 x i32> %2159, i32 1
  store i32 %2160, i32* %1890, align 1, !tbaa !2451
  %2161 = extractelement <2 x i32> %2154, i32 0
  store i32 %2161, i32* %1892, align 1, !tbaa !2451
  %2162 = extractelement <2 x i32> %2154, i32 1
  store i32 %2162, i32* %1894, align 1, !tbaa !2451
  %2163 = load <2 x float>, <2 x float>* %57, align 1
  %2164 = load <2 x i32>, <2 x i32>* %216, align 1
  %2165 = load <2 x float>, <2 x float>* %2128, align 1
  %2166 = extractelement <2 x float> %2163, i32 0
  %2167 = extractelement <2 x float> %2165, i32 0
  %2168 = fdiv float %2166, %2167
  store float %2168, float* %25, align 1, !tbaa !2451
  %2169 = bitcast <2 x float> %2163 to <2 x i32>
  %2170 = extractelement <2 x i32> %2169, i32 1
  store i32 %2170, i32* %237, align 1, !tbaa !2451
  %2171 = extractelement <2 x i32> %2164, i32 0
  store i32 %2171, i32* %238, align 1, !tbaa !2451
  %2172 = extractelement <2 x i32> %2164, i32 1
  store i32 %2172, i32* %239, align 1, !tbaa !2451
  %2173 = add i64 %2110, -32
  %2174 = add i64 %2112, 38
  store i64 %2174, i64* %PC, align 8
  %2175 = load <2 x float>, <2 x float>* %57, align 1
  %2176 = extractelement <2 x float> %2175, i32 0
  %2177 = inttoptr i64 %2173 to float*
  store float %2176, float* %2177, align 4
  %2178 = load i64, i64* %RBP, align 8
  %2179 = add i64 %2178, -36
  %2180 = load i64, i64* %PC, align 8
  %2181 = add i64 %2180, 5
  store i64 %2181, i64* %PC, align 8
  %2182 = inttoptr i64 %2179 to i32*
  %2183 = load i32, i32* %2182, align 4
  store i32 %2183, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %2184 = add i64 %2178, -48
  %2185 = add i64 %2180, 10
  store i64 %2185, i64* %PC, align 8
  %2186 = load <2 x float>, <2 x float>* %57, align 1
  %2187 = extractelement <2 x float> %2186, i32 0
  %2188 = inttoptr i64 %2184 to float*
  store float %2187, float* %2188, align 4
  %2189 = load i64, i64* %PC, align 8
  %2190 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to i32*), align 16
  store i32 %2190, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2191 = load <2 x float>, <2 x float>* %57, align 1
  %2192 = load <2 x i32>, <2 x i32>* %216, align 1
  %2193 = bitcast %union.VectorReg* %7 to <2 x float>*
  %2194 = load <2 x float>, <2 x float>* %2193, align 1
  %2195 = extractelement <2 x float> %2191, i32 0
  %2196 = extractelement <2 x float> %2194, i32 0
  %2197 = fsub float %2195, %2196
  store float %2197, float* %25, align 1, !tbaa !2451
  %2198 = bitcast <2 x float> %2191 to <2 x i32>
  %2199 = extractelement <2 x i32> %2198, i32 1
  store i32 %2199, i32* %237, align 1, !tbaa !2451
  %2200 = extractelement <2 x i32> %2192, i32 0
  store i32 %2200, i32* %238, align 1, !tbaa !2451
  %2201 = extractelement <2 x i32> %2192, i32 1
  store i32 %2201, i32* %239, align 1, !tbaa !2451
  %2202 = load i64, i64* %RBP, align 8
  %2203 = add i64 %2202, -52
  %2204 = add i64 %2189, 18
  store i64 %2204, i64* %PC, align 8
  %2205 = load <2 x float>, <2 x float>* %57, align 1
  %2206 = extractelement <2 x float> %2205, i32 0
  %2207 = inttoptr i64 %2203 to float*
  store float %2206, float* %2207, align 4
  %2208 = load i64, i64* %PC, align 8
  %2209 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2210 = add i32 %2209, -1
  %2211 = zext i32 %2210 to i64
  store i64 %2211, i64* %RAX, align 8, !tbaa !2428
  %2212 = icmp eq i32 %2209, 0
  %2213 = zext i1 %2212 to i8
  store i8 %2213, i8* %17, align 1, !tbaa !2432
  %2214 = and i32 %2210, 255
  %2215 = tail call i32 @llvm.ctpop.i32(i32 %2214) #10
  %2216 = trunc i32 %2215 to i8
  %2217 = and i8 %2216, 1
  %2218 = xor i8 %2217, 1
  store i8 %2218, i8* %18, align 1, !tbaa !2446
  %2219 = xor i32 %2210, %2209
  %2220 = lshr i32 %2219, 4
  %2221 = trunc i32 %2220 to i8
  %2222 = and i8 %2221, 1
  store i8 %2222, i8* %19, align 1, !tbaa !2447
  %2223 = icmp eq i32 %2210, 0
  %2224 = zext i1 %2223 to i8
  store i8 %2224, i8* %20, align 1, !tbaa !2448
  %2225 = lshr i32 %2210, 31
  %2226 = trunc i32 %2225 to i8
  store i8 %2226, i8* %21, align 1, !tbaa !2449
  %2227 = lshr i32 %2209, 31
  %2228 = xor i32 %2225, %2227
  %2229 = add nuw nsw i32 %2228, %2227
  %2230 = icmp eq i32 %2229, 2
  %2231 = zext i1 %2230 to i8
  store i8 %2231, i8* %22, align 1, !tbaa !2450
  %2232 = sext i32 %2210 to i64
  store i64 %2232, i64* %RCX, align 8, !tbaa !2428
  %2233 = shl nsw i64 %2232, 2
  %2234 = add i64 %2233, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2235 = add i64 %2208, 22
  store i64 %2235, i64* %PC, align 8
  %2236 = inttoptr i64 %2234 to i32*
  %2237 = load i32, i32* %2236, align 4
  store i32 %2237, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2238 = load <2 x float>, <2 x float>* %57, align 1
  %2239 = load <2 x i32>, <2 x i32>* %216, align 1
  %2240 = load <2 x float>, <2 x float>* %2193, align 1
  %2241 = extractelement <2 x float> %2238, i32 0
  %2242 = extractelement <2 x float> %2240, i32 0
  %2243 = fsub float %2241, %2242
  store float %2243, float* %25, align 1, !tbaa !2451
  %2244 = bitcast <2 x float> %2238 to <2 x i32>
  %2245 = extractelement <2 x i32> %2244, i32 1
  store i32 %2245, i32* %237, align 1, !tbaa !2451
  %2246 = extractelement <2 x i32> %2239, i32 0
  store i32 %2246, i32* %238, align 1, !tbaa !2451
  %2247 = extractelement <2 x i32> %2239, i32 1
  store i32 %2247, i32* %239, align 1, !tbaa !2451
  %2248 = load i64, i64* %RBP, align 8
  %2249 = add i64 %2248, -56
  %2250 = add i64 %2208, 31
  store i64 %2250, i64* %PC, align 8
  %2251 = load <2 x float>, <2 x float>* %57, align 1
  %2252 = extractelement <2 x float> %2251, i32 0
  %2253 = inttoptr i64 %2249 to float*
  store float %2252, float* %2253, align 4
  %2254 = load i64, i64* %PC, align 8
  %2255 = load i64, i64* @stderr, align 64
  store i64 %2255, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2256 = add i64 %2254, -1722
  %2257 = add i64 %2254, 15
  %2258 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2259 = add i64 %2258, -8
  %2260 = inttoptr i64 %2259 to i64*
  store i64 %2257, i64* %2260, align 8
  store i64 %2259, i64* %RSP, align 8, !tbaa !2428
  store i64 %2256, i64* %PC, align 8, !tbaa !2428
  %2261 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2097)
  %2262 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %2263 = load i64, i64* @stderr, align 64
  store i64 %2263, i64* %RDI, align 8, !tbaa !2428
  %2264 = load i64, i64* %RBP, align 8
  %2265 = add i64 %2264, -908
  %2266 = load i32, i32* %EAX, align 4
  %2267 = add i64 %2262, 24
  store i64 %2267, i64* %PC, align 8
  %2268 = inttoptr i64 %2265 to i32*
  store i32 %2266, i32* %2268, align 4
  %2269 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2270 = add i64 %2269, -1761
  %2271 = add i64 %2269, 7
  %2272 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2273 = add i64 %2272, -8
  %2274 = inttoptr i64 %2273 to i64*
  store i64 %2271, i64* %2274, align 8
  store i64 %2273, i64* %RSP, align 8, !tbaa !2428
  store i64 %2270, i64* %PC, align 8, !tbaa !2428
  %2275 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2261)
  %2276 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %2277 = load i64, i64* @stderr, align 64
  store i64 %2277, i64* %RDI, align 8, !tbaa !2428
  %2278 = load i64, i64* %RBP, align 8
  %2279 = add i64 %2278, -32
  %2280 = add i64 %2276, 23
  store i64 %2280, i64* %PC, align 8
  %2281 = inttoptr i64 %2279 to float*
  %2282 = load float, float* %2281, align 4
  %2283 = fpext float %2282 to double
  store double %2283, double* %2599, align 1, !tbaa !2454
  %2284 = add i64 %2278, -28
  %2285 = add i64 %2276, 28
  store i64 %2285, i64* %PC, align 8
  %2286 = inttoptr i64 %2284 to float*
  %2287 = load float, float* %2286, align 4
  %2288 = fpext float %2287 to double
  store double %2288, double* %190, align 1, !tbaa !2454
  %2289 = add i64 %2278, -48
  %2290 = add i64 %2276, 33
  store i64 %2290, i64* %PC, align 8
  %2291 = inttoptr i64 %2289 to float*
  %2292 = load float, float* %2291, align 4
  %2293 = fpext float %2292 to double
  store double %2293, double* %213, align 1, !tbaa !2454
  %2294 = add i64 %2278, -52
  %2295 = add i64 %2276, 38
  store i64 %2295, i64* %PC, align 8
  %2296 = inttoptr i64 %2294 to float*
  %2297 = load float, float* %2296, align 4
  %2298 = fpext float %2297 to double
  store double %2298, double* %226, align 1, !tbaa !2454
  %2299 = add i64 %2278, -56
  %2300 = add i64 %2276, 43
  store i64 %2300, i64* %PC, align 8
  %2301 = inttoptr i64 %2299 to float*
  %2302 = load float, float* %2301, align 4
  %2303 = fpext float %2302 to double
  %2304 = bitcast %union.VectorReg* %2090 to double*
  store double %2303, double* %2304, align 1, !tbaa !2454
  %2305 = add i64 %2278, -912
  %2306 = load i32, i32* %EAX, align 4
  %2307 = add i64 %2276, 49
  store i64 %2307, i64* %PC, align 8
  %2308 = inttoptr i64 %2305 to i32*
  store i32 %2306, i32* %2308, align 4
  %2309 = load i64, i64* %PC, align 8
  store i8 5, i8* %AL, align 1, !tbaa !2456
  %2310 = add i64 %2309, -1817
  %2311 = add i64 %2309, 7
  %2312 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2313 = add i64 %2312, -8
  %2314 = inttoptr i64 %2313 to i64*
  store i64 %2311, i64* %2314, align 8
  store i64 %2313, i64* %RSP, align 8, !tbaa !2428
  store i64 %2310, i64* %PC, align 8, !tbaa !2428
  %2315 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2275)
  %2316 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %2317 = load i64, i64* @stderr, align 64
  store i64 %2317, i64* %RDI, align 8, !tbaa !2428
  %2318 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2319 = zext i32 %2318 to i64
  store i64 %2319, i64* %RDX, align 8, !tbaa !2428
  %2320 = load i64, i64* %RBP, align 8
  %2321 = add i64 %2320, -916
  %2322 = load i32, i32* %EAX, align 4
  %2323 = add i64 %2316, 31
  store i64 %2323, i64* %PC, align 8
  %2324 = inttoptr i64 %2321 to i32*
  store i32 %2322, i32* %2324, align 4
  %2325 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2326 = add i64 %2325, -1855
  %2327 = add i64 %2325, 7
  %2328 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2329 = add i64 %2328, -8
  %2330 = inttoptr i64 %2329 to i64*
  store i64 %2327, i64* %2330, align 8
  store i64 %2329, i64* %RSP, align 8, !tbaa !2428
  store i64 %2326, i64* %PC, align 8, !tbaa !2428
  %2331 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2315)
  %2332 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %2333 = load i64, i64* @stderr, align 64
  store i64 %2333, i64* %RDI, align 8, !tbaa !2428
  %2334 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2335 = zext i32 %2334 to i64
  store i64 %2335, i64* %RDX, align 8, !tbaa !2428
  %2336 = load i64, i64* %RBP, align 8
  %2337 = add i64 %2336, -920
  %2338 = load i32, i32* %EAX, align 4
  %2339 = add i64 %2332, 31
  store i64 %2339, i64* %PC, align 8
  %2340 = inttoptr i64 %2337 to i32*
  store i32 %2338, i32* %2340, align 4
  %2341 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2342 = add i64 %2341, -1893
  %2343 = add i64 %2341, 7
  %2344 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2345 = add i64 %2344, -8
  %2346 = inttoptr i64 %2345 to i64*
  store i64 %2343, i64* %2346, align 8
  store i64 %2345, i64* %RSP, align 8, !tbaa !2428
  store i64 %2342, i64* %PC, align 8, !tbaa !2428
  %2347 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2331)
  %2348 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2349 = load i64, i64* @stderr, align 64
  store i64 %2349, i64* %RDI, align 8, !tbaa !2428
  %2350 = load i64, i64* %RBP, align 8
  %2351 = add i64 %2350, -924
  %2352 = load i32, i32* %EAX, align 4
  %2353 = add i64 %2348, 24
  store i64 %2353, i64* %PC, align 8
  %2354 = inttoptr i64 %2351 to i32*
  store i32 %2352, i32* %2354, align 4
  %2355 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2356 = add i64 %2355, -1924
  %2357 = add i64 %2355, 7
  %2358 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2359 = add i64 %2358, -8
  %2360 = inttoptr i64 %2359 to i64*
  store i64 %2357, i64* %2360, align 8
  store i64 %2359, i64* %RSP, align 8, !tbaa !2428
  store i64 %2356, i64* %PC, align 8, !tbaa !2428
  %2361 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2347)
  %2362 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2363 = load i64, i64* @stderr, align 64
  store i64 %2363, i64* %RDI, align 8, !tbaa !2428
  %2364 = load i64, i64* %RBP, align 8
  %2365 = add i64 %2364, -928
  %2366 = load i32, i32* %EAX, align 4
  %2367 = add i64 %2362, 24
  store i64 %2367, i64* %PC, align 8
  %2368 = inttoptr i64 %2365 to i32*
  store i32 %2366, i32* %2368, align 4
  %2369 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2370 = add i64 %2369, -1955
  %2371 = add i64 %2369, 7
  %2372 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2373 = add i64 %2372, -8
  %2374 = inttoptr i64 %2373 to i64*
  store i64 %2371, i64* %2374, align 8
  store i64 %2373, i64* %RSP, align 8, !tbaa !2428
  store i64 %2370, i64* %PC, align 8, !tbaa !2428
  %2375 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2361)
  %2376 = load i64, i64* %PC, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %1874, align 1, !tbaa !2453
  %2377 = load i64, i64* %RBP, align 8
  %2378 = add i64 %2377, -16
  %2379 = add i64 %2376, 8
  store i64 %2379, i64* %PC, align 8
  %2380 = inttoptr i64 %2378 to i32*
  %2381 = load i32, i32* %2380, align 4
  store i32 %2381, i32* %1896, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2103, align 1, !tbaa !2451
  %2382 = load <2 x float>, <2 x float>* %2193, align 1
  %2383 = extractelement <2 x float> %2382, i32 0
  store float %2383, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*), align 8
  %2384 = add i64 %2376, 22
  store i64 %2384, i64* %PC, align 8
  %2385 = inttoptr i64 %2378 to float*
  %2386 = load float, float* %2385, align 4
  %2387 = fpext float %2386 to double
  store double %2387, double* %190, align 1, !tbaa !2454
  %2388 = add i64 %2376, 26
  store i64 %2388, i64* %PC, align 8
  %2389 = fcmp uno float %2386, 0.000000e+00
  br i1 %2389, label %2390, label %2400

; <label>:2390:                                   ; preds = %block_400b25
  %2391 = fadd double %2387, 0.000000e+00
  %2392 = bitcast double %2391 to i64
  %2393 = and i64 %2392, 9221120237041090560
  %2394 = icmp eq i64 %2393, 9218868437227405312
  %2395 = and i64 %2392, 2251799813685247
  %2396 = icmp ne i64 %2395, 0
  %2397 = and i1 %2394, %2396
  br i1 %2397, label %2398, label %2406

; <label>:2398:                                   ; preds = %2390
  %2399 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2388, %struct.Memory* %2375) #13
  %.pre = load i64, i64* %RBP, align 8
  %.pre74 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2400:                                   ; preds = %block_400b25
  %2401 = fcmp ogt float %2386, 0.000000e+00
  br i1 %2401, label %2406, label %2402

; <label>:2402:                                   ; preds = %2400
  %2403 = fcmp olt float %2386, 0.000000e+00
  br i1 %2403, label %2406, label %2404

; <label>:2404:                                   ; preds = %2402
  %2405 = fcmp oeq float %2386, 0.000000e+00
  br i1 %2405, label %2406, label %2410

; <label>:2406:                                   ; preds = %2404, %2402, %2400, %2390
  %2407 = phi i8 [ 0, %2400 ], [ 0, %2402 ], [ 1, %2404 ], [ 1, %2390 ]
  %2408 = phi i8 [ 0, %2400 ], [ 0, %2402 ], [ 0, %2404 ], [ 1, %2390 ]
  %2409 = phi i8 [ 0, %2400 ], [ 1, %2402 ], [ 0, %2404 ], [ 1, %2390 ]
  store i8 %2407, i8* %20, align 1, !tbaa !2456
  store i8 %2408, i8* %18, align 1, !tbaa !2456
  store i8 %2409, i8* %17, align 1, !tbaa !2456
  br label %2410

; <label>:2410:                                   ; preds = %2406, %2404
  store i8 0, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2410, %2398
  %2411 = phi i64 [ %.pre74, %2398 ], [ %2388, %2410 ]
  %2412 = phi i64 [ %.pre, %2398 ], [ %2377, %2410 ]
  %2413 = phi %struct.Memory* [ %2399, %2398 ], [ %2375, %2410 ]
  %2414 = add i64 %2412, -932
  %2415 = load i32, i32* %EAX, align 4
  %2416 = add i64 %2411, 6
  store i64 %2416, i64* %PC, align 8
  %2417 = inttoptr i64 %2414 to i32*
  store i32 %2415, i32* %2417, align 4
  %2418 = load i64, i64* %PC, align 8
  %2419 = load i8, i8* %17, align 1, !tbaa !2432
  %2420 = load i8, i8* %20, align 1, !tbaa !2448
  %2421 = or i8 %2420, %2419
  %2422 = icmp ne i8 %2421, 0
  %.v124 = select i1 %2422, i64 84, i64 6
  %2423 = add i64 %.v124, %2418
  store i64 %2423, i64* %PC, align 8, !tbaa !2428
  br i1 %2422, label %block_400d0e, label %block_400cc0

block_400e24:                                     ; preds = %block_400dd9
  %2424 = load i64, i64* %RBP, align 8
  %2425 = add i64 %2424, -68
  %2426 = add i64 %1003, 3
  store i64 %2426, i64* %PC, align 8
  %2427 = inttoptr i64 %2425 to i32*
  %2428 = load i32, i32* %2427, align 4
  %2429 = shl i32 %2428, 1
  %2430 = icmp slt i32 %2428, 0
  %2431 = icmp slt i32 %2429, 0
  %2432 = xor i1 %2430, %2431
  %2433 = zext i32 %2429 to i64
  store i64 %2433, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %2428, 31
  %2434 = trunc i32 %.lobit to i8
  store i8 %2434, i8* %17, align 1, !tbaa !2456
  %2435 = and i32 %2429, 254
  %2436 = tail call i32 @llvm.ctpop.i32(i32 %2435) #10
  %2437 = trunc i32 %2436 to i8
  %2438 = and i8 %2437, 1
  %2439 = xor i8 %2438, 1
  store i8 %2439, i8* %18, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  %2440 = icmp eq i32 %2429, 0
  %2441 = zext i1 %2440 to i8
  store i8 %2441, i8* %20, align 1, !tbaa !2456
  %2442 = lshr i32 %2428, 30
  %2443 = trunc i32 %2442 to i8
  %2444 = and i8 %2443, 1
  store i8 %2444, i8* %21, align 1, !tbaa !2456
  %2445 = zext i1 %2432 to i8
  store i8 %2445, i8* %22, align 1, !tbaa !2456
  %2446 = add i64 %1003, 9
  store i64 %2446, i64* %PC, align 8
  store i32 %2429, i32* %2427, align 4
  %.pre77 = load i64, i64* %PC, align 8
  br label %block_400e2d

block_40170c:                                     ; preds = %block_40149d
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %1874, align 1, !tbaa !2453
  %2447 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 48) to i64*), align 16
  %2448 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %2449 = fpext float %2448 to double
  %2450 = bitcast i64 %2447 to double
  %2451 = fdiv double %2449, %2450
  store double %2451, double* %213, align 1, !tbaa !2454
  %.cast35 = bitcast i64 %2447 to <2 x i32>
  %2452 = fptrunc double %2451 to float
  store float %2452, float* %2100, align 1, !tbaa !2451
  %2453 = extractelement <2 x i32> %.cast35, i32 1
  store i32 %2453, i32* %1898, align 1, !tbaa !2451
  store i32 0, i32* %1899, align 1, !tbaa !2451
  store i32 0, i32* %1901, align 1, !tbaa !2451
  %2454 = load <2 x float>, <2 x float>* %2193, align 1
  %2455 = extractelement <2 x float> %2454, i32 0
  store float %2455, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %2456 = load i64, i64* @stderr, align 64
  store i64 %2456, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %2457 = add i64 %2597, -4636
  %2458 = add i64 %2597, 62
  %2459 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2460 = add i64 %2459, -8
  %2461 = inttoptr i64 %2460 to i64*
  store i64 %2458, i64* %2461, align 8
  store i64 %2460, i64* %RSP, align 8, !tbaa !2428
  store i64 %2457, i64* %PC, align 8, !tbaa !2428
  %2462 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1825)
  %2463 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %2464 = load i64, i64* %RBP, align 8
  %2465 = add i64 %2464, -996
  %2466 = load i32, i32* %EAX, align 4
  %2467 = add i64 %2463, 8
  store i64 %2467, i64* %PC, align 8
  %2468 = inttoptr i64 %2465 to i32*
  store i32 %2466, i32* %2468, align 4
  %2469 = load i32, i32* %ECX, align 4
  %2470 = zext i32 %2469 to i64
  %2471 = load i64, i64* %PC, align 8
  store i64 %2470, i64* %RAX, align 8, !tbaa !2428
  %2472 = load i64, i64* %RSP, align 8
  %2473 = add i64 %2472, 1008
  store i64 %2473, i64* %RSP, align 8, !tbaa !2428
  %2474 = icmp ugt i64 %2472, -1009
  %2475 = zext i1 %2474 to i8
  store i8 %2475, i8* %17, align 1, !tbaa !2432
  %2476 = trunc i64 %2473 to i32
  %2477 = and i32 %2476, 255
  %2478 = tail call i32 @llvm.ctpop.i32(i32 %2477) #10
  %2479 = trunc i32 %2478 to i8
  %2480 = and i8 %2479, 1
  %2481 = xor i8 %2480, 1
  store i8 %2481, i8* %18, align 1, !tbaa !2446
  %2482 = xor i64 %2472, 16
  %2483 = xor i64 %2482, %2473
  %2484 = lshr i64 %2483, 4
  %2485 = trunc i64 %2484 to i8
  %2486 = and i8 %2485, 1
  store i8 %2486, i8* %19, align 1, !tbaa !2447
  %2487 = icmp eq i64 %2473, 0
  %2488 = zext i1 %2487 to i8
  store i8 %2488, i8* %20, align 1, !tbaa !2448
  %2489 = lshr i64 %2473, 63
  %2490 = trunc i64 %2489 to i8
  store i8 %2490, i8* %21, align 1, !tbaa !2449
  %2491 = lshr i64 %2472, 63
  %2492 = xor i64 %2489, %2491
  %2493 = add nuw nsw i64 %2492, %2489
  %2494 = icmp eq i64 %2493, 2
  %2495 = zext i1 %2494 to i8
  store i8 %2495, i8* %22, align 1, !tbaa !2450
  %2496 = add i64 %2471, 10
  store i64 %2496, i64* %PC, align 8
  %2497 = add i64 %2472, 1016
  %2498 = inttoptr i64 %2473 to i64*
  %2499 = load i64, i64* %2498, align 8
  store i64 %2499, i64* %RBP, align 8, !tbaa !2428
  store i64 %2497, i64* %RSP, align 8, !tbaa !2428
  %2500 = add i64 %2471, 11
  store i64 %2500, i64* %PC, align 8
  %2501 = inttoptr i64 %2497 to i64*
  %2502 = load i64, i64* %2501, align 8
  store i64 %2502, i64* %PC, align 8, !tbaa !2428
  %2503 = add i64 %2472, 1024
  store i64 %2503, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2462

block_400d23:                                     ; preds = %block_400d0e, %block_400cc0
  %2504 = phi i64 [ %.pre75, %block_400d0e ], [ %486, %block_400cc0 ]
  %2505 = phi i64 [ %2745, %block_400d0e ], [ %512, %block_400cc0 ]
  %.pre-phi = bitcast %union.VectorReg* %7 to <2 x i32>*
  %.pre-phi92 = bitcast i64* %191 to <2 x i32>*
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2506 = add i64 %2504, -16
  %2507 = add i64 %2505, 7
  store i64 %2507, i64* %PC, align 8
  %2508 = inttoptr i64 %2506 to i32*
  %2509 = load i32, i32* %2508, align 4
  store i32 %2509, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2510 = add i64 %2504, -8
  %2511 = add i64 %2505, 12
  store i64 %2511, i64* %PC, align 8
  %2512 = load <2 x float>, <2 x float>* %57, align 1
  %2513 = load <2 x i32>, <2 x i32>* %216, align 1
  %2514 = inttoptr i64 %2510 to float*
  %2515 = load float, float* %2514, align 4
  %2516 = extractelement <2 x float> %2512, i32 0
  %2517 = fdiv float %2516, %2515
  store float %2517, float* %25, align 1, !tbaa !2451
  %2518 = bitcast <2 x float> %2512 to <2 x i32>
  %2519 = extractelement <2 x i32> %2518, i32 1
  store i32 %2519, i32* %237, align 1, !tbaa !2451
  %2520 = extractelement <2 x i32> %2513, i32 0
  store i32 %2520, i32* %238, align 1, !tbaa !2451
  %2521 = extractelement <2 x i32> %2513, i32 1
  store i32 %2521, i32* %239, align 1, !tbaa !2451
  %2522 = load <2 x float>, <2 x float>* %57, align 1
  %2523 = extractelement <2 x float> %2522, i32 0
  store float %2523, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*), align 4
  %2524 = add i64 %2505, 6989
  %2525 = add i64 %2505, 26
  %2526 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2527 = add i64 %2526, -8
  %2528 = inttoptr i64 %2527 to i64*
  store i64 %2525, i64* %2528, align 8
  store i64 %2527, i64* %RSP, align 8, !tbaa !2428
  store i64 %2524, i64* %PC, align 8, !tbaa !2428
  %2529 = tail call %struct.Memory* @sub_402870_print_time_renamed_(%struct.State* nonnull %0, i64 %2524, %struct.Memory* %2413)
  %2530 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %2531 = load i64, i64* @stderr, align 64
  store i64 %2531, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2532 = add i64 %2530, -2125
  %2533 = add i64 %2530, 25
  %2534 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2535 = add i64 %2534, -8
  %2536 = inttoptr i64 %2535 to i64*
  store i64 %2533, i64* %2536, align 8
  store i64 %2535, i64* %RSP, align 8, !tbaa !2428
  store i64 %2532, i64* %PC, align 8, !tbaa !2428
  %2537 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2529)
  %2538 = load i64, i64* %RBP, align 8
  %2539 = add i64 %2538, -64
  %2540 = load i64, i64* %PC, align 8
  %2541 = add i64 %2540, 7
  store i64 %2541, i64* %PC, align 8
  %2542 = inttoptr i64 %2539 to i32*
  store i32 -3, i32* %2542, align 4
  %2543 = load i64, i64* %RBP, align 8
  %2544 = add i64 %2543, -68
  %2545 = load i64, i64* %PC, align 8
  %2546 = add i64 %2545, 7
  store i64 %2546, i64* %PC, align 8
  %2547 = inttoptr i64 %2544 to i32*
  store i32 100, i32* %2547, align 4
  %2548 = load i64, i64* %RBP, align 8
  %2549 = add i64 %2548, -936
  %2550 = load i32, i32* %EAX, align 4
  %2551 = load i64, i64* %PC, align 8
  %2552 = add i64 %2551, 6
  store i64 %2552, i64* %PC, align 8
  %2553 = inttoptr i64 %2549 to i32*
  store i32 %2550, i32* %2553, align 4
  %.pre76 = load i64, i64* %PC, align 8
  %2554 = bitcast %union.VectorReg* %7 to <4 x i32>*
  br label %block_400d6a

block_400fa0:                                     ; preds = %block_400f8f, %block_400f4a
  %2555 = phi i64 [ %1519, %block_400f4a ], [ %2744, %block_400f8f ]
  %2556 = load i64, i64* %RBP, align 8
  %2557 = add i64 %2556, -64
  %2558 = add i64 %2555, 9
  store i64 %2558, i64* %PC, align 8
  %2559 = inttoptr i64 %2557 to i32*
  %2560 = load i32, i32* %2559, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %2561 = and i32 %2560, 255
  %2562 = tail call i32 @llvm.ctpop.i32(i32 %2561) #10
  %2563 = trunc i32 %2562 to i8
  %2564 = and i8 %2563, 1
  %2565 = xor i8 %2564, 1
  store i8 %2565, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2566 = icmp eq i32 %2560, 0
  %2567 = zext i1 %2566 to i8
  store i8 %2567, i8* %20, align 1, !tbaa !2448
  %2568 = lshr i32 %2560, 31
  %2569 = trunc i32 %2568 to i8
  store i8 %2569, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2570 = icmp ne i8 %2569, 0
  %.v36 = select i1 %2570, i64 -259, i64 6
  %2571 = add i64 %.v36, %2558
  store i64 %2571, i64* %PC, align 8, !tbaa !2428
  br i1 %2570, label %block_400ea6, label %block_400fd3

block_40149d:                                     ; preds = %block_4013ba, %block_4015e6
  %2572 = phi i32 [ %.pre83, %block_4013ba ], [ %801, %block_4015e6 ]
  %2573 = phi i64 [ %.pre82, %block_4013ba ], [ %824, %block_4015e6 ]
  %2574 = add i32 %2572, -12
  %2575 = icmp ult i32 %2572, 12
  %2576 = zext i1 %2575 to i8
  store i8 %2576, i8* %17, align 1, !tbaa !2432
  %2577 = and i32 %2574, 255
  %2578 = tail call i32 @llvm.ctpop.i32(i32 %2577) #10
  %2579 = trunc i32 %2578 to i8
  %2580 = and i8 %2579, 1
  %2581 = xor i8 %2580, 1
  store i8 %2581, i8* %18, align 1, !tbaa !2446
  %2582 = xor i32 %2574, %2572
  %2583 = lshr i32 %2582, 4
  %2584 = trunc i32 %2583 to i8
  %2585 = and i8 %2584, 1
  store i8 %2585, i8* %19, align 1, !tbaa !2447
  %2586 = icmp eq i32 %2574, 0
  %2587 = zext i1 %2586 to i8
  store i8 %2587, i8* %20, align 1, !tbaa !2448
  %2588 = lshr i32 %2574, 31
  %2589 = trunc i32 %2588 to i8
  store i8 %2589, i8* %21, align 1, !tbaa !2449
  %2590 = lshr i32 %2572, 31
  %2591 = xor i32 %2588, %2590
  %2592 = add nuw nsw i32 %2591, %2590
  %2593 = icmp eq i32 %2592, 2
  %2594 = zext i1 %2593 to i8
  store i8 %2594, i8* %22, align 1, !tbaa !2450
  %2595 = icmp ne i8 %2589, 0
  %2596 = xor i1 %2595, %2593
  %.v100 = select i1 %2596, i64 14, i64 623
  %2597 = add i64 %.v100, %2573
  store i64 %2597, i64* %PC, align 8, !tbaa !2428
  br i1 %2596, label %block_4014ab, label %block_40170c

block_400937:                                     ; preds = %block_4008eb
  %2598 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %2599 = bitcast [32 x %union.VectorReg]* %6 to double*
  %ECX = bitcast %union.anon* %4 to i32*
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2600 = load i64, i64* %RBP, align 8
  %2601 = add i64 %2600, -20
  store i64 %2601, i64* %R8, align 8, !tbaa !2428
  %2602 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2603 = zext i32 %2602 to i64
  store i64 %2603, i64* %RSI, align 8, !tbaa !2428
  %2604 = zext i32 %555 to i64
  store i64 %2604, i64* %RDX, align 8, !tbaa !2428
  %2605 = add i64 %582, 3625
  %2606 = add i64 %582, 43
  %2607 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2608 = add i64 %2607, -8
  %2609 = inttoptr i64 %2608 to i64*
  store i64 %2606, i64* %2609, align 8
  store i64 %2608, i64* %RSP, align 8, !tbaa !2428
  store i64 %2605, i64* %PC, align 8, !tbaa !2428
  %2610 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %2605, %struct.Memory* %340)
  %2611 = load i64, i64* %PC, align 8
  %2612 = add i64 %2611, 11
  store i64 %2612, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2613 = bitcast %union.anon* %4 to [2 x i32]*
  %2614 = getelementptr inbounds [2 x i32], [2 x i32]* %2613, i64 0, i64 1
  br label %block_40096d

block_400d98:                                     ; preds = %block_400d88
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2615 = add i64 %2912, -20
  store i64 %2615, i64* %R8, align 8, !tbaa !2428
  %2616 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2617 = zext i32 %2616 to i64
  store i64 %2617, i64* %RSI, align 8, !tbaa !2428
  %2618 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2619 = zext i32 %2618 to i64
  store i64 %2619, i64* %RDX, align 8, !tbaa !2428
  %2620 = add i64 %2943, 2504
  %2621 = add i64 %2943, 43
  %2622 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2623 = add i64 %2622, -8
  %2624 = inttoptr i64 %2623 to i64*
  store i64 %2621, i64* %2624, align 8
  store i64 %2623, i64* %RSP, align 8, !tbaa !2428
  store i64 %2620, i64* %PC, align 8, !tbaa !2428
  %2625 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %2620, %struct.Memory* %MEMORY.7)
  %2626 = load i64, i64* %PC, align 8
  %2627 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2628 = add i32 %2627, 1
  %2629 = zext i32 %2628 to i64
  store i64 %2629, i64* %RAX, align 8, !tbaa !2428
  %2630 = icmp eq i32 %2627, -1
  %2631 = icmp eq i32 %2628, 0
  %2632 = or i1 %2630, %2631
  %2633 = zext i1 %2632 to i8
  store i8 %2633, i8* %17, align 1, !tbaa !2432
  %2634 = and i32 %2628, 255
  %2635 = tail call i32 @llvm.ctpop.i32(i32 %2634) #10
  %2636 = trunc i32 %2635 to i8
  %2637 = and i8 %2636, 1
  %2638 = xor i8 %2637, 1
  store i8 %2638, i8* %18, align 1, !tbaa !2446
  %2639 = xor i32 %2628, %2627
  %2640 = lshr i32 %2639, 4
  %2641 = trunc i32 %2640 to i8
  %2642 = and i8 %2641, 1
  store i8 %2642, i8* %19, align 1, !tbaa !2447
  %2643 = zext i1 %2631 to i8
  store i8 %2643, i8* %20, align 1, !tbaa !2448
  %2644 = lshr i32 %2628, 31
  %2645 = trunc i32 %2644 to i8
  store i8 %2645, i8* %21, align 1, !tbaa !2449
  %2646 = lshr i32 %2627, 31
  %2647 = xor i32 %2644, %2646
  %2648 = add nuw nsw i32 %2647, %2644
  %2649 = icmp eq i32 %2648, 2
  %2650 = zext i1 %2649 to i8
  store i8 %2650, i8* %22, align 1, !tbaa !2450
  store i32 %2628, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2651 = add i64 %2626, -59
  store i64 %2651, i64* %PC, align 8, !tbaa !2428
  br label %block_400d88

block_400ac8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %2652 = load i64, i64* %RBP, align 8
  %2653 = add i64 %2652, -24
  %2654 = add i64 %2908, 5
  store i64 %2654, i64* %PC, align 8
  %2655 = inttoptr i64 %2653 to float*
  %2656 = load float, float* %2655, align 4
  %2657 = fpext float %2656 to double
  store double %2657, double* %2599, align 1, !tbaa !2454
  %2658 = add i64 %2652, -904
  %2659 = add i64 %2908, 13
  store i64 %2659, i64* %PC, align 8
  %2660 = inttoptr i64 %2658 to double*
  store double %2657, double* %2660, align 8
  %2661 = load i64, i64* %PC, align 8
  %2662 = add i64 %2661, 41
  store i64 %2662, i64* %PC, align 8, !tbaa !2428
  br label %block_400afe

block_400a17:                                     ; preds = %block_4009c7, %block_400afe
  %2663 = phi i32 [ 0, %block_4009c7 ], [ %528, %block_400afe ]
  %2664 = phi i64 [ %1887, %block_4009c7 ], [ %551, %block_400afe ]
  %MEMORY.15 = phi %struct.Memory* [ %1872, %block_4009c7 ], [ %2903, %block_400afe ]
  %2665 = zext i32 %2663 to i64
  store i64 %2665, i64* %RAX, align 8, !tbaa !2428
  %2666 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2667 = sub i32 %2663, %2666
  %2668 = icmp ult i32 %2663, %2666
  %2669 = zext i1 %2668 to i8
  store i8 %2669, i8* %17, align 1, !tbaa !2432
  %2670 = and i32 %2667, 255
  %2671 = tail call i32 @llvm.ctpop.i32(i32 %2670) #10
  %2672 = trunc i32 %2671 to i8
  %2673 = and i8 %2672, 1
  %2674 = xor i8 %2673, 1
  store i8 %2674, i8* %18, align 1, !tbaa !2446
  %2675 = xor i32 %2666, %2663
  %2676 = xor i32 %2675, %2667
  %2677 = lshr i32 %2676, 4
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  store i8 %2679, i8* %19, align 1, !tbaa !2447
  %2680 = icmp eq i32 %2667, 0
  %2681 = zext i1 %2680 to i8
  store i8 %2681, i8* %20, align 1, !tbaa !2448
  %2682 = lshr i32 %2667, 31
  %2683 = trunc i32 %2682 to i8
  store i8 %2683, i8* %21, align 1, !tbaa !2449
  %2684 = lshr i32 %2663, 31
  %2685 = lshr i32 %2666, 31
  %2686 = xor i32 %2685, %2684
  %2687 = xor i32 %2682, %2684
  %2688 = add nuw nsw i32 %2687, %2686
  %2689 = icmp eq i32 %2688, 2
  %2690 = zext i1 %2689 to i8
  store i8 %2690, i8* %22, align 1, !tbaa !2450
  %2691 = icmp ne i8 %2683, 0
  %2692 = xor i1 %2691, %2689
  %.v95 = select i1 %2692, i64 20, i64 270
  %2693 = add i64 %.v95, %2664
  store i64 %2693, i64* %PC, align 8, !tbaa !2428
  br i1 %2692, label %block_400a2b, label %block_400b25

block_401090:                                     ; preds = %block_401082
  %2694 = add i64 %3115, -2720
  %2695 = add i64 %3115, 5
  %2696 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2697 = add i64 %2696, -8
  %2698 = inttoptr i64 %2697 to i64*
  store i64 %2695, i64* %2698, align 8
  store i64 %2697, i64* %RSP, align 8, !tbaa !2428
  store i64 %2694, i64* %PC, align 8, !tbaa !2428
  %2699 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %2694, %struct.Memory* %1162)
  %2700 = load i64, i64* %RBP, align 8
  %2701 = add i64 %2700, -40
  %2702 = load i64, i64* %PC, align 8
  %2703 = add i64 %2702, 5
  store i64 %2703, i64* %PC, align 8
  %2704 = load <2 x float>, <2 x float>* %57, align 1
  %2705 = extractelement <2 x float> %2704, i32 0
  %2706 = inttoptr i64 %2701 to float*
  store float %2705, float* %2706, align 4
  %2707 = load i64, i64* %PC, align 8
  %2708 = add i64 %2707, 11
  store i64 %2708, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4010a5

block_400e2d:                                     ; preds = %block_400e24, %block_400dd9
  %2709 = phi i64 [ %996, %block_400dd9 ], [ %.pre77, %block_400e24 ]
  %2710 = load i64, i64* %RBP, align 8
  %2711 = add i64 %2710, -64
  %2712 = add i64 %2709, 9
  store i64 %2712, i64* %PC, align 8
  %2713 = inttoptr i64 %2711 to i32*
  %2714 = load i32, i32* %2713, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %2715 = and i32 %2714, 255
  %2716 = tail call i32 @llvm.ctpop.i32(i32 %2715) #10
  %2717 = trunc i32 %2716 to i8
  %2718 = and i8 %2717, 1
  %2719 = xor i8 %2718, 1
  store i8 %2719, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2720 = icmp eq i32 %2714, 0
  %2721 = zext i1 %2720 to i8
  store i8 %2721, i8* %20, align 1, !tbaa !2448
  %2722 = lshr i32 %2714, 31
  %2723 = trunc i32 %2722 to i8
  store i8 %2723, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2724 = icmp ne i8 %2723, 0
  %.v = select i1 %2724, i64 -204, i64 6
  %2725 = add i64 %.v, %2712
  store i64 %2725, i64* %PC, align 8, !tbaa !2428
  br i1 %2724, label %block_400d6a, label %block_400e3c

block_400f8f:                                     ; preds = %block_400f4a
  %2726 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2727 = shl i32 %2726, 1
  %2728 = icmp slt i32 %2726, 0
  %2729 = icmp slt i32 %2727, 0
  %2730 = xor i1 %2728, %2729
  %2731 = zext i32 %2727 to i64
  store i64 %2731, i64* %RAX, align 8, !tbaa !2428
  %.lobit27 = lshr i32 %2726, 31
  %2732 = trunc i32 %.lobit27 to i8
  store i8 %2732, i8* %17, align 1, !tbaa !2456
  %2733 = and i32 %2727, 254
  %2734 = tail call i32 @llvm.ctpop.i32(i32 %2733) #10
  %2735 = trunc i32 %2734 to i8
  %2736 = and i8 %2735, 1
  %2737 = xor i8 %2736, 1
  store i8 %2737, i8* %18, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  %2738 = icmp eq i32 %2727, 0
  %2739 = zext i1 %2738 to i8
  store i8 %2739, i8* %20, align 1, !tbaa !2456
  %2740 = lshr i32 %2726, 30
  %2741 = trunc i32 %2740 to i8
  %2742 = and i8 %2741, 1
  store i8 %2742, i8* %21, align 1, !tbaa !2456
  %2743 = zext i1 %2730 to i8
  store i8 %2743, i8* %22, align 1, !tbaa !2456
  %2744 = add i64 %1526, 17
  store i64 %2744, i64* %PC, align 8
  store i32 %2727, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  br label %block_400fa0

block_400d0e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  store <4 x i32> zeroinitializer, <4 x i32>* %1874, align 1, !tbaa !2453
  store float 0.000000e+00, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %2745 = add i64 %2423, 21
  store i64 %2745, i64* %PC, align 8
  store float 0.000000e+00, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %.pre75 = load i64, i64* %RBP, align 8
  br label %block_400d23

block_400e3c:                                     ; preds = %block_400e2d
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %1874, align 1, !tbaa !2453
  %2746 = add i64 %2710, -72
  %2747 = add i64 %2725, 18
  store i64 %2747, i64* %PC, align 8
  %2748 = inttoptr i64 %2746 to float*
  %2749 = load float, float* %2748, align 4
  %2750 = fpext float %2749 to double
  store double %2750, double* %190, align 1, !tbaa !2454
  %2751 = add i64 %2710, -68
  %2752 = add i64 %2725, 23
  store i64 %2752, i64* %PC, align 8
  %2753 = inttoptr i64 %2751 to i32*
  %2754 = load i32, i32* %2753, align 4
  %2755 = sitofp i32 %2754 to double
  store double %2755, double* %213, align 1, !tbaa !2454
  %2756 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %2757 = fdiv double %2750, %2755
  %.cast25 = bitcast double %2757 to <2 x i32>
  %2758 = fptrunc double %2757 to float
  store float %2758, float* %2100, align 1, !tbaa !2451
  %2759 = extractelement <2 x i32> %.cast25, i32 1
  store i32 %2759, i32* %1898, align 1, !tbaa !2451
  %2760 = extractelement <2 x i32> %2756, i32 0
  store i32 %2760, i32* %1899, align 1, !tbaa !2451
  %2761 = extractelement <2 x i32> %2756, i32 1
  store i32 %2761, i32* %1901, align 1, !tbaa !2451
  %2762 = add i64 %2725, 36
  store i64 %2762, i64* %PC, align 8
  %2763 = load <2 x float>, <2 x float>* %2193, align 1
  %2764 = extractelement <2 x float> %2763, i32 0
  store float %2764, float* %2748, align 4
  %2765 = load i64, i64* %PC, align 8
  %2766 = load i64, i64* @stderr, align 64
  store i64 %2766, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2456
  %2767 = add i64 %2765, -2416
  %2768 = add i64 %2765, 15
  %2769 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2770 = add i64 %2769, -8
  %2771 = inttoptr i64 %2770 to i64*
  store i64 %2768, i64* %2771, align 8
  store i64 %2770, i64* %RSP, align 8, !tbaa !2428
  store i64 %2767, i64* %PC, align 8, !tbaa !2428
  %2772 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %975)
  %2773 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %2774 = load i64, i64* @stderr, align 64
  store i64 %2774, i64* %RDI, align 8, !tbaa !2428
  %2775 = load i64, i64* %RBP, align 8
  %2776 = add i64 %2775, -944
  %2777 = load i32, i32* %EAX, align 4
  %2778 = add i64 %2773, 24
  store i64 %2778, i64* %PC, align 8
  %2779 = inttoptr i64 %2776 to i32*
  store i32 %2777, i32* %2779, align 4
  %2780 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2456
  %2781 = add i64 %2780, -2455
  %2782 = add i64 %2780, 7
  %2783 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2784 = add i64 %2783, -8
  %2785 = inttoptr i64 %2784 to i64*
  store i64 %2782, i64* %2785, align 8
  store i64 %2784, i64* %RSP, align 8, !tbaa !2428
  store i64 %2781, i64* %PC, align 8, !tbaa !2428
  %2786 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2772)
  %2787 = load i64, i64* %RBP, align 8
  %2788 = add i64 %2787, -64
  %2789 = load i64, i64* %PC, align 8
  %2790 = add i64 %2789, 7
  store i64 %2790, i64* %PC, align 8
  %2791 = inttoptr i64 %2788 to i32*
  store i32 -3, i32* %2791, align 4
  %2792 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2793 = load i64, i64* %RBP, align 8
  %2794 = add i64 %2793, -948
  %2795 = load i32, i32* %EAX, align 4
  %2796 = add i64 %2792, 17
  store i64 %2796, i64* %PC, align 8
  %2797 = inttoptr i64 %2794 to i32*
  store i32 %2795, i32* %2797, align 4
  %.pre78 = load i64, i64* %PC, align 8
  br label %block_400ea6

block_40159c:                                     ; preds = %block_401588
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2798 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2799 = zext i32 %2798 to i64
  store i64 %2799, i64* %RSI, align 8, !tbaa !2428
  %2800 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2801 = zext i32 %2800 to i64
  store i64 %2801, i64* %RDX, align 8, !tbaa !2428
  %2802 = add i64 %1932, 1700
  %2803 = add i64 %1932, 52
  %2804 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2805 = add i64 %2804, -8
  %2806 = inttoptr i64 %2805 to i64*
  store i64 %2803, i64* %2806, align 8
  store i64 %2805, i64* %RSP, align 8, !tbaa !2428
  store i64 %2802, i64* %PC, align 8, !tbaa !2428
  %2807 = tail call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* nonnull %0, i64 %2802, %struct.Memory* %1825)
  %2808 = load i64, i64* %PC, align 8
  %2809 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2810 = add i32 %2809, 1
  %2811 = zext i32 %2810 to i64
  store i64 %2811, i64* %RAX, align 8, !tbaa !2428
  %2812 = icmp eq i32 %2809, -1
  %2813 = icmp eq i32 %2810, 0
  %2814 = or i1 %2812, %2813
  %2815 = zext i1 %2814 to i8
  store i8 %2815, i8* %17, align 1, !tbaa !2432
  %2816 = and i32 %2810, 255
  %2817 = tail call i32 @llvm.ctpop.i32(i32 %2816) #10
  %2818 = trunc i32 %2817 to i8
  %2819 = and i8 %2818, 1
  %2820 = xor i8 %2819, 1
  store i8 %2820, i8* %18, align 1, !tbaa !2446
  %2821 = xor i32 %2810, %2809
  %2822 = lshr i32 %2821, 4
  %2823 = trunc i32 %2822 to i8
  %2824 = and i8 %2823, 1
  store i8 %2824, i8* %19, align 1, !tbaa !2447
  %2825 = zext i1 %2813 to i8
  store i8 %2825, i8* %20, align 1, !tbaa !2448
  %2826 = lshr i32 %2810, 31
  %2827 = trunc i32 %2826 to i8
  store i8 %2827, i8* %21, align 1, !tbaa !2449
  %2828 = lshr i32 %2809, 31
  %2829 = xor i32 %2826, %2828
  %2830 = add nuw nsw i32 %2829, %2826
  %2831 = icmp eq i32 %2830, 2
  %2832 = zext i1 %2831 to i8
  store i8 %2832, i8* %22, align 1, !tbaa !2450
  store i32 %2810, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2833 = add i64 %2808, -72
  store i64 %2833, i64* %PC, align 8, !tbaa !2428
  br label %block_401588

block_400a8c:                                     ; preds = %block_400a56, %block_400a68
  %2834 = phi i64 [ %1063, %block_400a56 ], [ %.pre87, %block_400a68 ]
  %2835 = load i64, i64* %RBP, align 8
  %2836 = add i64 %2835, -896
  %2837 = add i64 %2834, 8
  store i64 %2837, i64* %PC, align 8
  %2838 = inttoptr i64 %2836 to i64*
  %2839 = load i64, i64* %2838, align 8
  %.cast = bitcast i64 %2839 to <2 x i32>
  %.cast20 = bitcast i64 %2839 to double
  %2840 = fptrunc double %.cast20 to float
  store float %2840, float* %25, align 1, !tbaa !2451
  %2841 = extractelement <2 x i32> %.cast, i32 1
  store i32 %2841, i32* %237, align 1, !tbaa !2451
  store i32 0, i32* %238, align 1, !tbaa !2451
  store i32 0, i32* %239, align 1, !tbaa !2451
  %2842 = add i64 %2835, -28
  %2843 = add i64 %2834, 17
  store i64 %2843, i64* %PC, align 8
  %2844 = load <2 x float>, <2 x float>* %57, align 1
  %2845 = extractelement <2 x float> %2844, i32 0
  %2846 = inttoptr i64 %2842 to float*
  store float %2845, float* %2846, align 4
  %2847 = load i64, i64* %RBP, align 8
  %2848 = add i64 %2847, -24
  %2849 = load i64, i64* %PC, align 8
  %2850 = add i64 %2849, 5
  store i64 %2850, i64* %PC, align 8
  %2851 = inttoptr i64 %2848 to float*
  %2852 = load float, float* %2851, align 4
  %2853 = fpext float %2852 to double
  store double %2853, double* %2599, align 1, !tbaa !2454
  %2854 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2855 = sext i32 %2854 to i64
  store i64 %2855, i64* %RAX, align 8, !tbaa !2428
  %2856 = shl nsw i64 %2855, 2
  %2857 = add i64 %2856, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2858 = add i64 %2849, 22
  store i64 %2858, i64* %PC, align 8
  %2859 = inttoptr i64 %2857 to float*
  %2860 = load float, float* %2859, align 4
  %2861 = fpext float %2860 to double
  %2862 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %2863 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %2864 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %2865 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %2862, i32* %1888, align 1, !tbaa !2451
  store i32 %2863, i32* %1890, align 1, !tbaa !2451
  store i32 %2864, i32* %1892, align 1, !tbaa !2451
  store i32 %2865, i32* %1894, align 1, !tbaa !2451
  %2866 = bitcast double %2861 to i64
  %2867 = load i64, i64* %191, align 1
  %2868 = load i64, i64* %1895, align 1
  %2869 = load i64, i64* %1891, align 1
  %2870 = and i64 %2868, %2866
  %2871 = and i64 %2869, %2867
  %2872 = trunc i64 %2870 to i32
  %2873 = lshr i64 %2870, 32
  %2874 = trunc i64 %2873 to i32
  store i32 %2872, i32* %1896, align 1, !tbaa !2453
  store i32 %2874, i32* %1898, align 1, !tbaa !2453
  %2875 = trunc i64 %2871 to i32
  store i32 %2875, i32* %1899, align 1, !tbaa !2453
  %2876 = lshr i64 %2871, 32
  %2877 = trunc i64 %2876 to i32
  store i32 %2877, i32* %1901, align 1, !tbaa !2453
  %2878 = add i64 %2849, 37
  store i64 %2878, i64* %PC, align 8
  %2879 = load double, double* %190, align 1
  %2880 = fcmp uno double %2853, %2879
  br i1 %2880, label %2881, label %2891

; <label>:2881:                                   ; preds = %block_400a8c
  %2882 = fadd double %2853, %2879
  %2883 = bitcast double %2882 to i64
  %2884 = and i64 %2883, 9221120237041090560
  %2885 = icmp eq i64 %2884, 9218868437227405312
  %2886 = and i64 %2883, 2251799813685247
  %2887 = icmp ne i64 %2886, 0
  %2888 = and i1 %2885, %2887
  br i1 %2888, label %2889, label %2897

; <label>:2889:                                   ; preds = %2881
  %2890 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2878, %struct.Memory* %1991) #13
  %.pre88 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2891:                                   ; preds = %block_400a8c
  %2892 = fcmp ogt double %2853, %2879
  br i1 %2892, label %2897, label %2893

; <label>:2893:                                   ; preds = %2891
  %2894 = fcmp olt double %2853, %2879
  br i1 %2894, label %2897, label %2895

; <label>:2895:                                   ; preds = %2893
  %2896 = fcmp oeq double %2853, %2879
  br i1 %2896, label %2897, label %2901

; <label>:2897:                                   ; preds = %2895, %2893, %2891, %2881
  %2898 = phi i8 [ 0, %2891 ], [ 0, %2893 ], [ 1, %2895 ], [ 1, %2881 ]
  %2899 = phi i8 [ 0, %2891 ], [ 0, %2893 ], [ 0, %2895 ], [ 1, %2881 ]
  %2900 = phi i8 [ 0, %2891 ], [ 1, %2893 ], [ 0, %2895 ], [ 1, %2881 ]
  store i8 %2898, i8* %20, align 1, !tbaa !2456
  store i8 %2899, i8* %18, align 1, !tbaa !2456
  store i8 %2900, i8* %17, align 1, !tbaa !2456
  br label %2901

; <label>:2901:                                   ; preds = %2897, %2895
  store i8 0, i8* %22, align 1, !tbaa !2456
  store i8 0, i8* %21, align 1, !tbaa !2456
  store i8 0, i8* %19, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2901, %2889
  %2902 = phi i64 [ %.pre88, %2889 ], [ %2878, %2901 ]
  %2903 = phi %struct.Memory* [ %2890, %2889 ], [ %1991, %2901 ]
  %2904 = load i8, i8* %17, align 1, !tbaa !2432
  %2905 = load i8, i8* %20, align 1, !tbaa !2448
  %2906 = or i8 %2905, %2904
  %2907 = icmp ne i8 %2906, 0
  %.v125 = select i1 %2907, i64 24, i64 6
  %2908 = add i64 %.v125, %2902
  store i64 %2908, i64* %PC, align 8, !tbaa !2428
  br i1 %2907, label %block_400ada, label %block_400ac8

block_400d88:                                     ; preds = %block_400d98, %block_400d6a
  %2909 = phi i32 [ %2628, %block_400d98 ], [ 0, %block_400d6a ]
  %2910 = phi i64 [ %2651, %block_400d98 ], [ %1247, %block_400d6a ]
  %2911 = zext i32 %2909 to i64
  store i64 %2911, i64* %RAX, align 8, !tbaa !2428
  %2912 = load i64, i64* %RBP, align 8
  %2913 = add i64 %2912, -68
  %2914 = add i64 %2910, 10
  store i64 %2914, i64* %PC, align 8
  %2915 = inttoptr i64 %2913 to i32*
  %2916 = load i32, i32* %2915, align 4
  %2917 = sub i32 %2909, %2916
  %2918 = icmp ult i32 %2909, %2916
  %2919 = zext i1 %2918 to i8
  store i8 %2919, i8* %17, align 1, !tbaa !2432
  %2920 = and i32 %2917, 255
  %2921 = tail call i32 @llvm.ctpop.i32(i32 %2920) #10
  %2922 = trunc i32 %2921 to i8
  %2923 = and i8 %2922, 1
  %2924 = xor i8 %2923, 1
  store i8 %2924, i8* %18, align 1, !tbaa !2446
  %2925 = xor i32 %2916, %2909
  %2926 = xor i32 %2925, %2917
  %2927 = lshr i32 %2926, 4
  %2928 = trunc i32 %2927 to i8
  %2929 = and i8 %2928, 1
  store i8 %2929, i8* %19, align 1, !tbaa !2447
  %2930 = icmp eq i32 %2917, 0
  %2931 = zext i1 %2930 to i8
  store i8 %2931, i8* %20, align 1, !tbaa !2448
  %2932 = lshr i32 %2917, 31
  %2933 = trunc i32 %2932 to i8
  store i8 %2933, i8* %21, align 1, !tbaa !2449
  %2934 = lshr i32 %2909, 31
  %2935 = lshr i32 %2916, 31
  %2936 = xor i32 %2935, %2934
  %2937 = xor i32 %2932, %2934
  %2938 = add nuw nsw i32 %2937, %2936
  %2939 = icmp eq i32 %2938, 2
  %2940 = zext i1 %2939 to i8
  store i8 %2940, i8* %22, align 1, !tbaa !2450
  %2941 = icmp ne i8 %2933, 0
  %2942 = xor i1 %2941, %2939
  %.v96 = select i1 %2942, i64 16, i64 81
  %2943 = add i64 %.v96, %2910
  store i64 %2943, i64* %PC, align 8, !tbaa !2428
  br i1 %2942, label %block_400d98, label %block_400dd9

block_401181:                                     ; preds = %block_40116d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2944 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2945 = zext i32 %2944 to i64
  store i64 %2945, i64* %RSI, align 8, !tbaa !2428
  %2946 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2947 = zext i32 %2946 to i64
  store i64 %2947, i64* %RDX, align 8, !tbaa !2428
  %2948 = add i64 %483, 2751
  %2949 = add i64 %483, 52
  %2950 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2951 = add i64 %2950, -8
  %2952 = inttoptr i64 %2951 to i64*
  store i64 %2949, i64* %2952, align 8
  store i64 %2951, i64* %RSP, align 8, !tbaa !2428
  store i64 %2948, i64* %PC, align 8, !tbaa !2428
  %2953 = tail call %struct.Memory* @sub_401c40_dgesl_renamed_(%struct.State* nonnull %0, i64 %2948, %struct.Memory* %1162)
  %2954 = load i64, i64* %PC, align 8
  %2955 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2956 = add i32 %2955, 1
  %2957 = zext i32 %2956 to i64
  store i64 %2957, i64* %RAX, align 8, !tbaa !2428
  %2958 = icmp eq i32 %2955, -1
  %2959 = icmp eq i32 %2956, 0
  %2960 = or i1 %2958, %2959
  %2961 = zext i1 %2960 to i8
  store i8 %2961, i8* %17, align 1, !tbaa !2432
  %2962 = and i32 %2956, 255
  %2963 = tail call i32 @llvm.ctpop.i32(i32 %2962) #10
  %2964 = trunc i32 %2963 to i8
  %2965 = and i8 %2964, 1
  %2966 = xor i8 %2965, 1
  store i8 %2966, i8* %18, align 1, !tbaa !2446
  %2967 = xor i32 %2956, %2955
  %2968 = lshr i32 %2967, 4
  %2969 = trunc i32 %2968 to i8
  %2970 = and i8 %2969, 1
  store i8 %2970, i8* %19, align 1, !tbaa !2447
  %2971 = zext i1 %2959 to i8
  store i8 %2971, i8* %20, align 1, !tbaa !2448
  %2972 = lshr i32 %2956, 31
  %2973 = trunc i32 %2972 to i8
  store i8 %2973, i8* %21, align 1, !tbaa !2449
  %2974 = lshr i32 %2955, 31
  %2975 = xor i32 %2972, %2974
  %2976 = add nuw nsw i32 %2975, %2972
  %2977 = icmp eq i32 %2976, 2
  %2978 = zext i1 %2977 to i8
  store i8 %2978, i8* %22, align 1, !tbaa !2450
  store i32 %2956, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2979 = add i64 %2954, -72
  store i64 %2979, i64* %PC, align 8, !tbaa !2428
  br label %block_40116d

block_401379:                                     ; preds = %block_401369
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2980 = add i64 %828, -20
  store i64 %2980, i64* %R8, align 8, !tbaa !2428
  %2981 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2982 = zext i32 %2981 to i64
  store i64 %2982, i64* %RSI, align 8, !tbaa !2428
  %2983 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2984 = zext i32 %2983 to i64
  store i64 %2984, i64* %RDX, align 8, !tbaa !2428
  %2985 = add i64 %859, 999
  %2986 = add i64 %859, 43
  %2987 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2988 = add i64 %2987, -8
  %2989 = inttoptr i64 %2988 to i64*
  store i64 %2986, i64* %2989, align 8
  store i64 %2988, i64* %RSP, align 8, !tbaa !2428
  store i64 %2985, i64* %PC, align 8, !tbaa !2428
  %2990 = tail call %struct.Memory* @sub_401760_matgen_renamed_(%struct.State* nonnull %0, i64 %2985, %struct.Memory* %443)
  %2991 = load i64, i64* %PC, align 8
  %2992 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2993 = add i32 %2992, 1
  %2994 = zext i32 %2993 to i64
  store i64 %2994, i64* %RAX, align 8, !tbaa !2428
  %2995 = icmp eq i32 %2992, -1
  %2996 = icmp eq i32 %2993, 0
  %2997 = or i1 %2995, %2996
  %2998 = zext i1 %2997 to i8
  store i8 %2998, i8* %17, align 1, !tbaa !2432
  %2999 = and i32 %2993, 255
  %3000 = tail call i32 @llvm.ctpop.i32(i32 %2999) #10
  %3001 = trunc i32 %3000 to i8
  %3002 = and i8 %3001, 1
  %3003 = xor i8 %3002, 1
  store i8 %3003, i8* %18, align 1, !tbaa !2446
  %3004 = xor i32 %2993, %2992
  %3005 = lshr i32 %3004, 4
  %3006 = trunc i32 %3005 to i8
  %3007 = and i8 %3006, 1
  store i8 %3007, i8* %19, align 1, !tbaa !2447
  %3008 = zext i1 %2996 to i8
  store i8 %3008, i8* %20, align 1, !tbaa !2448
  %3009 = lshr i32 %2993, 31
  %3010 = trunc i32 %3009 to i8
  store i8 %3010, i8* %21, align 1, !tbaa !2449
  %3011 = lshr i32 %2992, 31
  %3012 = xor i32 %3009, %3011
  %3013 = add nuw nsw i32 %3012, %3009
  %3014 = icmp eq i32 %3013, 2
  %3015 = zext i1 %3014 to i8
  store i8 %3015, i8* %22, align 1, !tbaa !2450
  store i32 %2993, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3016 = add i64 %2991, -59
  store i64 %3016, i64* %PC, align 8, !tbaa !2428
  br label %block_401369

block_40112b:                                     ; preds = %block_4010a5
  %3017 = add i64 %890, -2875
  %3018 = add i64 %890, 5
  %3019 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3020 = add i64 %3019, -8
  %3021 = inttoptr i64 %3020 to i64*
  store i64 %3018, i64* %3021, align 8
  store i64 %3020, i64* %RSP, align 8, !tbaa !2428
  store i64 %3017, i64* %PC, align 8, !tbaa !2428
  %3022 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %3017, %struct.Memory* %1162)
  %3023 = load i64, i64* %RBP, align 8
  %3024 = add i64 %3023, -40
  %3025 = load i64, i64* %PC, align 8
  %3026 = add i64 %3025, 5
  store i64 %3026, i64* %PC, align 8
  %3027 = load <2 x float>, <2 x float>* %57, align 1
  %3028 = load <2 x i32>, <2 x i32>* %216, align 1
  %3029 = inttoptr i64 %3024 to float*
  %3030 = load float, float* %3029, align 4
  %3031 = extractelement <2 x float> %3027, i32 0
  %3032 = fsub float %3031, %3030
  store float %3032, float* %25, align 1, !tbaa !2451
  %3033 = bitcast <2 x float> %3027 to <2 x i32>
  %3034 = extractelement <2 x i32> %3033, i32 1
  store i32 %3034, i32* %237, align 1, !tbaa !2451
  %3035 = extractelement <2 x i32> %3028, i32 0
  store i32 %3035, i32* %238, align 1, !tbaa !2451
  %3036 = extractelement <2 x i32> %3028, i32 1
  store i32 %3036, i32* %239, align 1, !tbaa !2451
  %3037 = add i64 %3023, -44
  %3038 = add i64 %3025, 10
  store i64 %3038, i64* %PC, align 8
  %3039 = load <2 x float>, <2 x float>* %57, align 1
  %3040 = load <2 x i32>, <2 x i32>* %216, align 1
  %3041 = inttoptr i64 %3037 to float*
  %3042 = load float, float* %3041, align 4
  %3043 = extractelement <2 x float> %3039, i32 0
  %3044 = fsub float %3043, %3042
  store float %3044, float* %25, align 1, !tbaa !2451
  %3045 = bitcast <2 x float> %3039 to <2 x i32>
  %3046 = extractelement <2 x i32> %3045, i32 1
  store i32 %3046, i32* %237, align 1, !tbaa !2451
  %3047 = extractelement <2 x i32> %3040, i32 0
  store i32 %3047, i32* %238, align 1, !tbaa !2451
  %3048 = extractelement <2 x i32> %3040, i32 1
  store i32 %3048, i32* %239, align 1, !tbaa !2451
  %3049 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %3050 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %3051 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %3052 = sitofp i32 %3051 to float
  store float %3052, float* %2100, align 1, !tbaa !2451
  %3053 = extractelement <2 x i32> %3049, i32 1
  store i32 %3053, i32* %1898, align 1, !tbaa !2451
  %3054 = extractelement <2 x i32> %3050, i32 0
  store i32 %3054, i32* %1899, align 1, !tbaa !2451
  %3055 = extractelement <2 x i32> %3050, i32 1
  store i32 %3055, i32* %1901, align 1, !tbaa !2451
  %3056 = load <2 x float>, <2 x float>* %57, align 1
  %3057 = load <2 x i32>, <2 x i32>* %216, align 1
  %3058 = load <2 x float>, <2 x float>* %2193, align 1
  %3059 = extractelement <2 x float> %3056, i32 0
  %3060 = extractelement <2 x float> %3058, i32 0
  %3061 = fdiv float %3059, %3060
  store float %3061, float* %25, align 1, !tbaa !2451
  %3062 = bitcast <2 x float> %3056 to <2 x i32>
  %3063 = extractelement <2 x i32> %3062, i32 1
  store i32 %3063, i32* %237, align 1, !tbaa !2451
  %3064 = extractelement <2 x i32> %3057, i32 0
  store i32 %3064, i32* %238, align 1, !tbaa !2451
  %3065 = extractelement <2 x i32> %3057, i32 1
  store i32 %3065, i32* %239, align 1, !tbaa !2451
  %3066 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %3067 = sext i32 %3066 to i64
  store i64 %3067, i64* %RAX, align 8, !tbaa !2428
  %3068 = shl nsw i64 %3067, 2
  %3069 = add i64 %3068, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3070 = add i64 %3025, 40
  store i64 %3070, i64* %PC, align 8
  %3071 = load <2 x float>, <2 x float>* %57, align 1
  %3072 = extractelement <2 x float> %3071, i32 0
  %3073 = inttoptr i64 %3069 to float*
  store float %3072, float* %3073, align 4
  %3074 = load i64, i64* %PC, align 8
  %3075 = add i64 %3074, -2920
  %3076 = add i64 %3074, 5
  %3077 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3078 = add i64 %3077, -8
  %3079 = inttoptr i64 %3078 to i64*
  store i64 %3076, i64* %3079, align 8
  store i64 %3078, i64* %RSP, align 8, !tbaa !2428
  store i64 %3075, i64* %PC, align 8, !tbaa !2428
  %3080 = tail call %struct.Memory* @sub_4005f0_second_renamed_(%struct.State* nonnull %0, i64 %3075, %struct.Memory* %1162)
  %3081 = load i64, i64* %RBP, align 8
  %3082 = add i64 %3081, -40
  %3083 = load i64, i64* %PC, align 8
  %3084 = add i64 %3083, 5
  store i64 %3084, i64* %PC, align 8
  %3085 = load <2 x float>, <2 x float>* %57, align 1
  %3086 = extractelement <2 x float> %3085, i32 0
  %3087 = inttoptr i64 %3082 to float*
  store float %3086, float* %3087, align 4
  %3088 = load i64, i64* %PC, align 8
  %3089 = add i64 %3088, 11
  store i64 %3089, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40116d

block_401082:                                     ; preds = %block_4011cb, %block_400fd3
  %3090 = phi i32 [ %1437, %block_4011cb ], [ %.pre81, %block_400fd3 ]
  %3091 = phi i64 [ %1460, %block_4011cb ], [ %.pre80, %block_400fd3 ]
  %3092 = add i32 %3090, -6
  %3093 = icmp ult i32 %3090, 6
  %3094 = zext i1 %3093 to i8
  store i8 %3094, i8* %17, align 1, !tbaa !2432
  %3095 = and i32 %3092, 255
  %3096 = tail call i32 @llvm.ctpop.i32(i32 %3095) #10
  %3097 = trunc i32 %3096 to i8
  %3098 = and i8 %3097, 1
  %3099 = xor i8 %3098, 1
  store i8 %3099, i8* %18, align 1, !tbaa !2446
  %3100 = xor i32 %3092, %3090
  %3101 = lshr i32 %3100, 4
  %3102 = trunc i32 %3101 to i8
  %3103 = and i8 %3102, 1
  store i8 %3103, i8* %19, align 1, !tbaa !2447
  %3104 = icmp eq i32 %3092, 0
  %3105 = zext i1 %3104 to i8
  store i8 %3105, i8* %20, align 1, !tbaa !2448
  %3106 = lshr i32 %3092, 31
  %3107 = trunc i32 %3106 to i8
  store i8 %3107, i8* %21, align 1, !tbaa !2449
  %3108 = lshr i32 %3090, 31
  %3109 = xor i32 %3106, %3108
  %3110 = add nuw nsw i32 %3109, %3108
  %3111 = icmp eq i32 %3110, 2
  %3112 = zext i1 %3111 to i8
  store i8 %3112, i8* %22, align 1, !tbaa !2450
  %3113 = icmp ne i8 %3107, 0
  %3114 = xor i1 %3113, %3111
  %.v98 = select i1 %3114, i64 14, i64 623
  %3115 = add i64 %.v98, %3091
  store i64 %3115, i64* %PC, align 8, !tbaa !2428
  br i1 %3114, label %block_401090, label %block_4012f1

block_400981:                                     ; preds = %block_40096d
  %3116 = sext i32 %370 to i64
  store i64 %3116, i64* %RAX, align 8, !tbaa !2428
  %3117 = shl nsw i64 %3116, 2
  %3118 = add i64 %3117, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %3119 = add i64 %400, 17
  store i64 %3119, i64* %PC, align 8
  %3120 = inttoptr i64 %3118 to i32*
  %3121 = load i32, i32* %3120, align 4
  store i32 %3121, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %3122 = load i64, i64* %2598, align 1
  %3123 = trunc i64 %3122 to i32
  store i32 %3123, i32* %ECX, align 1, !tbaa !2453
  store i32 0, i32* %2614, align 1, !tbaa !2453
  %3124 = load i64, i64* %RCX, align 8
  %3125 = xor i64 %3124, -2147483648
  %3126 = and i64 %3125, 4294967295
  store i64 %3126, i64* %RCX, align 8, !tbaa !2428
  %3127 = trunc i64 %3125 to i32
  store i32 %3127, i32* %26, align 1, !tbaa !2453
  store i32 0, i32* %237, align 1, !tbaa !2453
  store i32 0, i32* %238, align 1, !tbaa !2453
  store i32 0, i32* %239, align 1, !tbaa !2453
  %3128 = add i64 %400, 48
  store i64 %3128, i64* %PC, align 8
  %3129 = load <2 x float>, <2 x float>* %57, align 1
  %3130 = extractelement <2 x float> %3129, i32 0
  %3131 = inttoptr i64 %3118 to float*
  store float %3130, float* %3131, align 4
  %3132 = load i64, i64* %PC, align 8
  %3133 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3134 = add i32 %3133, 1
  %3135 = zext i32 %3134 to i64
  store i64 %3135, i64* %RAX, align 8, !tbaa !2428
  %3136 = icmp eq i32 %3133, -1
  %3137 = icmp eq i32 %3134, 0
  %3138 = or i1 %3136, %3137
  %3139 = zext i1 %3138 to i8
  store i8 %3139, i8* %17, align 1, !tbaa !2432
  %3140 = and i32 %3134, 255
  %3141 = tail call i32 @llvm.ctpop.i32(i32 %3140) #10
  %3142 = trunc i32 %3141 to i8
  %3143 = and i8 %3142, 1
  %3144 = xor i8 %3143, 1
  store i8 %3144, i8* %18, align 1, !tbaa !2446
  %3145 = xor i32 %3134, %3133
  %3146 = lshr i32 %3145, 4
  %3147 = trunc i32 %3146 to i8
  %3148 = and i8 %3147, 1
  store i8 %3148, i8* %19, align 1, !tbaa !2447
  %3149 = zext i1 %3137 to i8
  store i8 %3149, i8* %20, align 1, !tbaa !2448
  %3150 = lshr i32 %3134, 31
  %3151 = trunc i32 %3150 to i8
  store i8 %3151, i8* %21, align 1, !tbaa !2449
  %3152 = lshr i32 %3133, 31
  %3153 = xor i32 %3150, %3152
  %3154 = add nuw nsw i32 %3153, %3150
  %3155 = icmp eq i32 %3154, 2
  %3156 = zext i1 %3155 to i8
  store i8 %3156, i8* %22, align 1, !tbaa !2450
  store i32 %3134, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3157 = add i64 %3132, -68
  store i64 %3157, i64* %PC, align 8, !tbaa !2428
  br label %block_40096d
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_402870_print_time(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402870:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -12
  %12 = load i32, i32* %EDI, align 4
  %13 = add i64 %10, 6
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %6, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %17, 16
  store i64 %24, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402dc0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402dc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603de0__init_array_type* @seg_603de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2456
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #10
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2456
  store i8 0, i8* %45, align 1, !tbaa !2456
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2456
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2456
  store i8 0, i8* %48, align 1, !tbaa !2456
  %63 = add i64 %38, -10547
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_4004a8__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #10
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %.v, %69
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_402e16, label %block_402df6

block_402e16.loopexit:                            ; preds = %block_402e00
  br label %block_402e16

block_402e16:                                     ; preds = %block_402e16.loopexit, %block_402dc0
  %81 = phi i64 [ %80, %block_402dc0 ], [ %179, %block_402e16.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_402dc0 ], [ %149, %block_402e16.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #10
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402df6:                                     ; preds = %block_402dc0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_402e00

block_402e00:                                     ; preds = %block_402e00, %block_402df6
  %134 = phi i64 [ 0, %block_402df6 ], [ %152, %block_402e00 ]
  %135 = phi i64 [ %133, %block_402df6 ], [ %179, %block_402e00 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_402df6 ], [ %149, %block_402e00 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %140, %141
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #10
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %154, %152
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %173, %153
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %.v2, %151
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_402e16.loopexit, label %block_402e00
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402880_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_402880:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -12
  %16 = load i32, i32* %EDI, align 4
  %17 = add i64 %14, 6
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i32*
  store i32 %16, i32* %18, align 4
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 5
  store i64 %22, i64* %PC, align 8
  %23 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = extractelement <2 x float> %24, i32 0
  %26 = inttoptr i64 %20 to float*
  store float %25, float* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -56
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -52
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %67, align 1, !tbaa !2432
  %68 = and i32 %66, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #10
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2446
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i32 %66, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i32 %66, 31
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %81, align 1, !tbaa !2450
  %82 = xor i1 %75, true
  %83 = icmp eq i8 %79, 0
  %84 = and i1 %83, %82
  %.v24 = select i1 %84, i64 15, i64 10
  %85 = add i64 %.v24, %63
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_4028b8, label %block_4029e7

block_4028df:                                     ; preds = %block_4028d5
  %86 = add i64 %545, -36
  %87 = add i64 %571, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = add i32 %89, -1
  %91 = icmp eq i32 %89, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %67, align 1, !tbaa !2432
  %93 = and i32 %90, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #10
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %73, align 1, !tbaa !2446
  %98 = xor i32 %90, %89
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %74, align 1, !tbaa !2447
  %102 = icmp eq i32 %90, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %77, align 1, !tbaa !2448
  %104 = lshr i32 %90, 31
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %80, align 1, !tbaa !2449
  %106 = lshr i32 %89, 31
  %107 = xor i32 %104, %106
  %108 = add nuw nsw i32 %107, %106
  %109 = icmp eq i32 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %81, align 1, !tbaa !2450
  %.v28 = select i1 %102, i64 178, i64 10
  %111 = add i64 %.v28, %571
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  br i1 %102, label %block_402991, label %block_4028e9

block_4028b8:                                     ; preds = %block_402880
  %112 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %114 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %115 = getelementptr inbounds i8, i8* %112, i64 4
  %116 = bitcast i8* %115 to i32*
  %117 = bitcast i64* %113 to i32*
  %118 = getelementptr inbounds i8, i8* %112, i64 12
  %119 = bitcast i8* %118 to i32*
  %120 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %120, align 1, !tbaa !2453
  %121 = bitcast %union.VectorReg* %7 to i8*
  %122 = add i64 %61, -8
  %123 = add i64 %85, 8
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %122 to float*
  %125 = load float, float* %124, align 4
  %126 = fpext float %125 to double
  %127 = bitcast %union.VectorReg* %7 to double*
  store double %126, double* %127, align 1, !tbaa !2454
  %128 = add i64 %85, 12
  store i64 %128, i64* %PC, align 8
  %129 = fcmp uno float %125, 0.000000e+00
  br i1 %129, label %130, label %140

; <label>:130:                                    ; preds = %block_4028b8
  %131 = fadd double %126, 0.000000e+00
  %132 = bitcast double %131 to i64
  %133 = and i64 %132, 9221120237041090560
  %134 = icmp eq i64 %133, 9218868437227405312
  %135 = and i64 %132, 2251799813685247
  %136 = icmp ne i64 %135, 0
  %137 = and i1 %134, %136
  br i1 %137, label %138, label %146

; <label>:138:                                    ; preds = %130
  %139 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %128, %struct.Memory* %2) #13
  %.pre = load i64, i64* %PC, align 8
  %.pre17 = load i8, i8* %77, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:140:                                    ; preds = %block_4028b8
  %141 = fcmp ogt float %125, 0.000000e+00
  br i1 %141, label %146, label %142

; <label>:142:                                    ; preds = %140
  %143 = fcmp olt float %125, 0.000000e+00
  br i1 %143, label %146, label %144

; <label>:144:                                    ; preds = %142
  %145 = fcmp oeq float %125, 0.000000e+00
  br i1 %145, label %146, label %150

; <label>:146:                                    ; preds = %144, %142, %140, %130
  %147 = phi i8 [ 0, %140 ], [ 0, %142 ], [ 1, %144 ], [ 1, %130 ]
  %148 = phi i8 [ 0, %140 ], [ 0, %142 ], [ 0, %144 ], [ 1, %130 ]
  %149 = phi i8 [ 0, %140 ], [ 1, %142 ], [ 0, %144 ], [ 1, %130 ]
  store i8 %147, i8* %77, align 1, !tbaa !2456
  store i8 %148, i8* %73, align 1, !tbaa !2456
  store i8 %149, i8* %67, align 1, !tbaa !2456
  br label %150

; <label>:150:                                    ; preds = %146, %144
  %151 = phi i8 [ %147, %146 ], [ 0, %144 ]
  store i8 0, i8* %81, align 1, !tbaa !2456
  store i8 0, i8* %80, align 1, !tbaa !2456
  store i8 0, i8* %74, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %150, %138
  %152 = phi i8 [ %.pre17, %138 ], [ %151, %150 ]
  %153 = phi i64 [ %.pre, %138 ], [ %128, %150 ]
  %154 = phi %struct.Memory* [ %139, %138 ], [ %2, %150 ]
  %155 = icmp eq i8 %152, 0
  %.v25 = select i1 %155, i64 17, i64 6
  %156 = add i64 %.v25, %153
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  br i1 %155, label %block_4028d5, label %block_4028ca

block_40293c:                                     ; preds = %block_402930
  %157 = add i64 %428, -32
  %158 = add i64 %464, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %428, -48
  %162 = add i64 %464, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = sext i32 %164 to i64
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = shl nsw i64 %165, 2
  %167 = add i64 %166, %160
  %168 = add i64 %464, 13
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i32*
  %170 = load i32, i32* %169, align 4
  store i32 %170, i32* %114, align 1, !tbaa !2451
  store float 0.000000e+00, float* %372, align 1, !tbaa !2451
  store float 0.000000e+00, float* %373, align 1, !tbaa !2451
  store float 0.000000e+00, float* %374, align 1, !tbaa !2451
  %171 = add i64 %428, -8
  %172 = add i64 %464, 18
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i32*
  %174 = load i32, i32* %173, align 4
  store i32 %174, i32* %376, align 1, !tbaa !2451
  store float 0.000000e+00, float* %378, align 1, !tbaa !2451
  store float 0.000000e+00, float* %380, align 1, !tbaa !2451
  store float 0.000000e+00, float* %382, align 1, !tbaa !2451
  %175 = add i64 %428, -16
  %176 = add i64 %464, 22
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = add i64 %428, -44
  %180 = add i64 %464, 26
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = sext i32 %182 to i64
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %184 = shl nsw i64 %183, 2
  %185 = add i64 %184, %178
  %186 = add i64 %464, 31
  store i64 %186, i64* %PC, align 8
  %187 = load <2 x float>, <2 x float>* %383, align 1
  %188 = load <2 x i32>, <2 x i32>* %384, align 1
  %189 = inttoptr i64 %185 to float*
  %190 = load float, float* %189, align 4
  %191 = extractelement <2 x float> %187, i32 0
  %192 = fmul float %191, %190
  store float %192, float* %375, align 1, !tbaa !2451
  %193 = bitcast <2 x float> %187 to <2 x i32>
  %194 = extractelement <2 x i32> %193, i32 1
  store i32 %194, i32* %385, align 1, !tbaa !2451
  %195 = extractelement <2 x i32> %188, i32 0
  store i32 %195, i32* %386, align 1, !tbaa !2451
  %196 = extractelement <2 x i32> %188, i32 1
  store i32 %196, i32* %387, align 1, !tbaa !2451
  %197 = load <2 x float>, <2 x float>* %23, align 1
  %198 = load <2 x i32>, <2 x i32>* %388, align 1
  %199 = load <2 x float>, <2 x float>* %383, align 1
  %200 = extractelement <2 x float> %197, i32 0
  %201 = extractelement <2 x float> %199, i32 0
  %202 = fadd float %200, %201
  store float %202, float* %371, align 1, !tbaa !2451
  %203 = bitcast <2 x float> %197 to <2 x i32>
  %204 = extractelement <2 x i32> %203, i32 1
  store i32 %204, i32* %116, align 1, !tbaa !2451
  %205 = extractelement <2 x i32> %198, i32 0
  store i32 %205, i32* %117, align 1, !tbaa !2451
  %206 = extractelement <2 x i32> %198, i32 1
  store i32 %206, i32* %119, align 1, !tbaa !2451
  %207 = add i64 %464, 39
  store i64 %207, i64* %PC, align 8
  %208 = load i64, i64* %159, align 8
  store i64 %208, i64* %RAX, align 8, !tbaa !2428
  %209 = add i64 %464, 43
  store i64 %209, i64* %PC, align 8
  %210 = load i32, i32* %163, align 4
  %211 = sext i32 %210 to i64
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = shl nsw i64 %211, 2
  %213 = add i64 %212, %208
  %214 = add i64 %464, 48
  store i64 %214, i64* %PC, align 8
  %215 = load <2 x float>, <2 x float>* %23, align 1
  %216 = extractelement <2 x float> %215, i32 0
  %217 = inttoptr i64 %213 to float*
  store float %216, float* %217, align 4
  %218 = load i64, i64* %RBP, align 8
  %219 = add i64 %218, -44
  %220 = load i64, i64* %PC, align 8
  %221 = add i64 %220, 3
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %219 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RDX, align 8, !tbaa !2428
  %225 = add i64 %218, -20
  %226 = add i64 %220, 6
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, %223
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RDX, align 8, !tbaa !2428
  %231 = icmp ult i32 %229, %223
  %232 = icmp ult i32 %229, %228
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %67, align 1, !tbaa !2432
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #10
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %73, align 1, !tbaa !2446
  %240 = xor i32 %228, %223
  %241 = xor i32 %240, %229
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  store i8 %244, i8* %74, align 1, !tbaa !2447
  %245 = icmp eq i32 %229, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %77, align 1, !tbaa !2448
  %247 = lshr i32 %229, 31
  %248 = trunc i32 %247 to i8
  store i8 %248, i8* %80, align 1, !tbaa !2449
  %249 = lshr i32 %223, 31
  %250 = lshr i32 %228, 31
  %251 = xor i32 %247, %249
  %252 = xor i32 %247, %250
  %253 = add nuw nsw i32 %251, %252
  %254 = icmp eq i32 %253, 2
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %81, align 1, !tbaa !2450
  %256 = add i64 %220, 9
  store i64 %256, i64* %PC, align 8
  store i32 %229, i32* %222, align 4
  %257 = load i64, i64* %RBP, align 8
  %258 = add i64 %257, -48
  %259 = load i64, i64* %PC, align 8
  %260 = add i64 %259, 3
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %258 to i32*
  %262 = load i32, i32* %261, align 4
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RDX, align 8, !tbaa !2428
  %264 = add i64 %257, -36
  %265 = add i64 %259, 6
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i32*
  %267 = load i32, i32* %266, align 4
  %268 = add i32 %267, %262
  %269 = zext i32 %268 to i64
  store i64 %269, i64* %RDX, align 8, !tbaa !2428
  %270 = icmp ult i32 %268, %262
  %271 = icmp ult i32 %268, %267
  %272 = or i1 %270, %271
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %67, align 1, !tbaa !2432
  %274 = and i32 %268, 255
  %275 = tail call i32 @llvm.ctpop.i32(i32 %274) #10
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  store i8 %278, i8* %73, align 1, !tbaa !2446
  %279 = xor i32 %267, %262
  %280 = xor i32 %279, %268
  %281 = lshr i32 %280, 4
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  store i8 %283, i8* %74, align 1, !tbaa !2447
  %284 = icmp eq i32 %268, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %77, align 1, !tbaa !2448
  %286 = lshr i32 %268, 31
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %80, align 1, !tbaa !2449
  %288 = lshr i32 %262, 31
  %289 = lshr i32 %267, 31
  %290 = xor i32 %286, %288
  %291 = xor i32 %286, %289
  %292 = add nuw nsw i32 %290, %291
  %293 = icmp eq i32 %292, 2
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %81, align 1, !tbaa !2450
  %295 = add i64 %259, 9
  store i64 %295, i64* %PC, align 8
  store i32 %268, i32* %261, align 4
  %296 = load i64, i64* %RBP, align 8
  %297 = add i64 %296, -40
  %298 = load i64, i64* %PC, align 8
  %299 = add i64 %298, 3
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %297 to i32*
  %301 = load i32, i32* %300, align 4
  %302 = add i32 %301, 1
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = icmp eq i32 %301, -1
  %305 = icmp eq i32 %302, 0
  %306 = or i1 %304, %305
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %67, align 1, !tbaa !2432
  %308 = and i32 %302, 255
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #10
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  store i8 %312, i8* %73, align 1, !tbaa !2446
  %313 = xor i32 %302, %301
  %314 = lshr i32 %313, 4
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  store i8 %316, i8* %74, align 1, !tbaa !2447
  %317 = zext i1 %305 to i8
  store i8 %317, i8* %77, align 1, !tbaa !2448
  %318 = lshr i32 %302, 31
  %319 = trunc i32 %318 to i8
  store i8 %319, i8* %80, align 1, !tbaa !2449
  %320 = lshr i32 %301, 31
  %321 = xor i32 %318, %320
  %322 = add nuw nsw i32 %321, %318
  %323 = icmp eq i32 %322, 2
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %81, align 1, !tbaa !2450
  %325 = add i64 %298, 9
  store i64 %325, i64* %PC, align 8
  store i32 %302, i32* %300, align 4
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, -87
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  br label %block_402930

block_402998:                                     ; preds = %block_4029a4, %block_402991
  %328 = phi i64 [ %660, %block_4029a4 ], [ %.pre18, %block_402991 ]
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -40
  %331 = add i64 %328, 3
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i32*
  %333 = load i32, i32* %332, align 4
  %334 = zext i32 %333 to i64
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = add i64 %329, -4
  %336 = add i64 %328, 6
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = sub i32 %333, %338
  %340 = icmp ult i32 %333, %338
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %67, align 1, !tbaa !2432
  %342 = and i32 %339, 255
  %343 = tail call i32 @llvm.ctpop.i32(i32 %342) #10
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %73, align 1, !tbaa !2446
  %347 = xor i32 %338, %333
  %348 = xor i32 %347, %339
  %349 = lshr i32 %348, 4
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  store i8 %351, i8* %74, align 1, !tbaa !2447
  %352 = icmp eq i32 %339, 0
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %77, align 1, !tbaa !2448
  %354 = lshr i32 %339, 31
  %355 = trunc i32 %354 to i8
  store i8 %355, i8* %80, align 1, !tbaa !2449
  %356 = lshr i32 %333, 31
  %357 = lshr i32 %338, 31
  %358 = xor i32 %357, %356
  %359 = xor i32 %354, %356
  %360 = add nuw nsw i32 %359, %358
  %361 = icmp eq i32 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %81, align 1, !tbaa !2450
  %363 = icmp ne i8 %355, 0
  %364 = xor i1 %363, %361
  %.v29 = select i1 %364, i64 12, i64 74
  %365 = add i64 %.v29, %328
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  br i1 %364, label %block_4029a4, label %block_4029e7.loopexit

block_402929:                                     ; preds = %block_40291a, %block_402910
  %366 = phi i64 [ %426, %block_402910 ], [ %.pre22, %block_40291a ]
  %367 = phi i64 [ %411, %block_402910 ], [ %.pre21, %block_40291a ]
  %368 = add i64 %367, -40
  %369 = add i64 %366, 7
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i32*
  store i32 0, i32* %370, align 4
  %371 = bitcast [32 x %union.VectorReg]* %6 to float*
  %372 = bitcast i8* %115 to float*
  %373 = bitcast i64* %113 to float*
  %374 = bitcast i8* %118 to float*
  %375 = bitcast %union.VectorReg* %7 to float*
  %376 = bitcast %union.VectorReg* %7 to i32*
  %377 = getelementptr inbounds i8, i8* %121, i64 4
  %378 = bitcast i8* %377 to float*
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %380 = bitcast i64* %379 to float*
  %381 = getelementptr inbounds i8, i8* %121, i64 12
  %382 = bitcast i8* %381 to float*
  %383 = bitcast %union.VectorReg* %7 to <2 x float>*
  %384 = bitcast i64* %379 to <2 x i32>*
  %385 = bitcast i8* %377 to i32*
  %386 = bitcast i64* %379 to i32*
  %387 = bitcast i8* %381 to i32*
  %388 = bitcast i64* %113 to <2 x i32>*
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_402930

block_402991:                                     ; preds = %block_4028df
  %389 = add i64 %545, -40
  %390 = add i64 %111, 7
  store i64 %390, i64* %PC, align 8
  %391 = inttoptr i64 %389 to i32*
  store i32 0, i32* %391, align 4
  %392 = bitcast [32 x %union.VectorReg]* %6 to float*
  %393 = bitcast i8* %115 to float*
  %394 = bitcast i64* %113 to float*
  %395 = bitcast i8* %118 to float*
  %396 = bitcast %union.VectorReg* %7 to float*
  %397 = bitcast %union.VectorReg* %7 to i32*
  %398 = getelementptr inbounds i8, i8* %121, i64 4
  %399 = bitcast i8* %398 to float*
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %401 = bitcast i64* %400 to float*
  %402 = getelementptr inbounds i8, i8* %121, i64 12
  %403 = bitcast i8* %402 to float*
  %404 = bitcast %union.VectorReg* %7 to <2 x float>*
  %405 = bitcast i64* %400 to <2 x i32>*
  %406 = bitcast i8* %398 to i32*
  %407 = bitcast i64* %400 to i32*
  %408 = bitcast i8* %402 to i32*
  %409 = bitcast i64* %113 to <2 x i32>*
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_402998

block_402910:                                     ; preds = %block_402901, %block_4028e9
  %410 = phi i64 [ %494, %block_4028e9 ], [ %.pre20, %block_402901 ]
  %411 = phi i64 [ %478, %block_4028e9 ], [ %.pre19, %block_402901 ]
  %412 = add i64 %411, -36
  %413 = add i64 %410, 4
  store i64 %413, i64* %PC, align 8
  %414 = inttoptr i64 %412 to i32*
  %415 = load i32, i32* %414, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %416 = and i32 %415, 255
  %417 = tail call i32 @llvm.ctpop.i32(i32 %416) #10
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = xor i8 %419, 1
  store i8 %420, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  %421 = icmp eq i32 %415, 0
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %77, align 1, !tbaa !2448
  %423 = lshr i32 %415, 31
  %424 = trunc i32 %423 to i8
  store i8 %424, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  %425 = icmp ne i8 %424, 0
  %.v14 = select i1 %425, i64 6, i64 21
  %426 = add i64 %.v14, %413
  store i64 %426, i64* %PC, align 8, !tbaa !2428
  br i1 %425, label %block_40291a, label %block_402929

block_402930:                                     ; preds = %block_402929, %block_40293c
  %427 = phi i64 [ %.pre23, %block_402929 ], [ %327, %block_40293c ]
  %428 = load i64, i64* %RBP, align 8
  %429 = add i64 %428, -40
  %430 = add i64 %427, 3
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %429 to i32*
  %432 = load i32, i32* %431, align 4
  %433 = zext i32 %432 to i64
  store i64 %433, i64* %RAX, align 8, !tbaa !2428
  %434 = add i64 %428, -4
  %435 = add i64 %427, 6
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %434 to i32*
  %437 = load i32, i32* %436, align 4
  %438 = sub i32 %432, %437
  %439 = icmp ult i32 %432, %437
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %67, align 1, !tbaa !2432
  %441 = and i32 %438, 255
  %442 = tail call i32 @llvm.ctpop.i32(i32 %441) #10
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  store i8 %445, i8* %73, align 1, !tbaa !2446
  %446 = xor i32 %437, %432
  %447 = xor i32 %446, %438
  %448 = lshr i32 %447, 4
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  store i8 %450, i8* %74, align 1, !tbaa !2447
  %451 = icmp eq i32 %438, 0
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %77, align 1, !tbaa !2448
  %453 = lshr i32 %438, 31
  %454 = trunc i32 %453 to i8
  store i8 %454, i8* %80, align 1, !tbaa !2449
  %455 = lshr i32 %432, 31
  %456 = lshr i32 %437, 31
  %457 = xor i32 %456, %455
  %458 = xor i32 %453, %455
  %459 = add nuw nsw i32 %458, %457
  %460 = icmp eq i32 %459, 2
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %81, align 1, !tbaa !2450
  %462 = icmp ne i8 %454, 0
  %463 = xor i1 %462, %460
  %.v27 = select i1 %463, i64 12, i64 92
  %464 = add i64 %.v27, %427
  store i64 %464, i64* %PC, align 8, !tbaa !2428
  br i1 %463, label %block_40293c, label %block_4029e7.loopexit9

block_4028ca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %465 = load i8, i8* %73, align 1, !tbaa !2446
  %466 = icmp ne i8 %465, 0
  %.v32 = select i1 %466, i64 11, i64 6
  %467 = add i64 %.v32, %156
  store i64 %467, i64* %PC, align 8, !tbaa !2428
  %468 = icmp eq i8 %465, 1
  br i1 %468, label %block_4028d5, label %block_4029e7

block_4028e9:                                     ; preds = %block_4028d5, %block_4028df
  %469 = phi i64 [ %571, %block_4028d5 ], [ %111, %block_4028df ]
  %470 = add i64 %545, -44
  %471 = add i64 %469, 7
  store i64 %471, i64* %PC, align 8
  %472 = inttoptr i64 %470 to i32*
  store i32 0, i32* %472, align 4
  %473 = load i64, i64* %RBP, align 8
  %474 = add i64 %473, -48
  %475 = load i64, i64* %PC, align 8
  %476 = add i64 %475, 7
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %474 to i32*
  store i32 0, i32* %477, align 4
  %478 = load i64, i64* %RBP, align 8
  %479 = add i64 %478, -20
  %480 = load i64, i64* %PC, align 8
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %479 to i32*
  %483 = load i32, i32* %482, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %484 = and i32 %483, 255
  %485 = tail call i32 @llvm.ctpop.i32(i32 %484) #10
  %486 = trunc i32 %485 to i8
  %487 = and i8 %486, 1
  %488 = xor i8 %487, 1
  store i8 %488, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  %489 = icmp eq i32 %483, 0
  %490 = zext i1 %489 to i8
  store i8 %490, i8* %77, align 1, !tbaa !2448
  %491 = lshr i32 %483, 31
  %492 = trunc i32 %491 to i8
  store i8 %492, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  %493 = icmp ne i8 %492, 0
  %.v = select i1 %493, i64 6, i64 21
  %494 = add i64 %.v, %481
  store i64 %494, i64* %PC, align 8, !tbaa !2428
  br i1 %493, label %block_402901, label %block_402910

block_40291a:                                     ; preds = %block_402910
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  store i8 0, i8* %74, align 1, !tbaa !2447
  %495 = add i64 %411, -4
  %496 = add i64 %426, 5
  store i64 %496, i64* %PC, align 8
  %497 = inttoptr i64 %495 to i32*
  %498 = load i32, i32* %497, align 4
  %499 = sub i32 0, %498
  %500 = lshr i32 %499, 31
  %501 = sub i32 1, %498
  %502 = zext i32 %501 to i64
  store i64 %502, i64* %RAX, align 8, !tbaa !2428
  %503 = icmp eq i32 %499, -1
  %504 = icmp eq i32 %501, 0
  %505 = or i1 %503, %504
  %506 = zext i1 %505 to i8
  store i8 %506, i8* %67, align 1, !tbaa !2432
  %507 = and i32 %501, 255
  %508 = tail call i32 @llvm.ctpop.i32(i32 %507) #10
  %509 = trunc i32 %508 to i8
  %510 = and i8 %509, 1
  %511 = xor i8 %510, 1
  store i8 %511, i8* %73, align 1, !tbaa !2446
  %512 = xor i32 %501, %499
  %513 = lshr i32 %512, 4
  %514 = trunc i32 %513 to i8
  %515 = and i8 %514, 1
  store i8 %515, i8* %74, align 1, !tbaa !2447
  %516 = zext i1 %504 to i8
  store i8 %516, i8* %77, align 1, !tbaa !2448
  %517 = lshr i32 %501, 31
  %518 = trunc i32 %517 to i8
  store i8 %518, i8* %80, align 1, !tbaa !2449
  %519 = xor i32 %517, %500
  %520 = add nuw nsw i32 %519, %517
  %521 = icmp eq i32 %520, 2
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %81, align 1, !tbaa !2450
  %523 = add i64 %426, 12
  store i64 %523, i64* %PC, align 8
  %524 = load i32, i32* %414, align 4
  %525 = sext i32 %501 to i64
  %526 = sext i32 %524 to i64
  %527 = mul nsw i64 %526, %525
  %528 = trunc i64 %527 to i32
  %529 = and i64 %527, 4294967295
  store i64 %529, i64* %RAX, align 8, !tbaa !2428
  %530 = shl i64 %527, 32
  %531 = ashr exact i64 %530, 32
  %532 = icmp ne i64 %531, %527
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %67, align 1, !tbaa !2432
  %534 = and i32 %528, 255
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534) #10
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %539 = lshr i32 %528, 31
  %540 = trunc i32 %539 to i8
  store i8 %540, i8* %80, align 1, !tbaa !2449
  store i8 %533, i8* %81, align 1, !tbaa !2450
  %541 = add i64 %411, -48
  %542 = add i64 %426, 15
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %541 to i32*
  store i32 %528, i32* %543, align 4
  %.pre21 = load i64, i64* %RBP, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_402929

block_4028d5:                                     ; preds = %block_4028ca, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %544 = phi i64 [ %467, %block_4028ca ], [ %156, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %545 = load i64, i64* %RBP, align 8
  %546 = add i64 %545, -20
  %547 = add i64 %544, 4
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i32*
  %549 = load i32, i32* %548, align 4
  %550 = add i32 %549, -1
  %551 = icmp eq i32 %549, 0
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %67, align 1, !tbaa !2432
  %553 = and i32 %550, 255
  %554 = tail call i32 @llvm.ctpop.i32(i32 %553) #10
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = xor i8 %556, 1
  store i8 %557, i8* %73, align 1, !tbaa !2446
  %558 = xor i32 %550, %549
  %559 = lshr i32 %558, 4
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  store i8 %561, i8* %74, align 1, !tbaa !2447
  %562 = icmp eq i32 %550, 0
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %77, align 1, !tbaa !2448
  %564 = lshr i32 %550, 31
  %565 = trunc i32 %564 to i8
  store i8 %565, i8* %80, align 1, !tbaa !2449
  %566 = lshr i32 %549, 31
  %567 = xor i32 %564, %566
  %568 = add nuw nsw i32 %567, %566
  %569 = icmp eq i32 %568, 2
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %81, align 1, !tbaa !2450
  %.v26 = select i1 %562, i64 10, i64 20
  %571 = add i64 %.v26, %544
  store i64 %571, i64* %PC, align 8, !tbaa !2428
  br i1 %562, label %block_4028df, label %block_4028e9

block_4029a4:                                     ; preds = %block_402998
  %572 = add i64 %329, -32
  %573 = add i64 %365, 4
  store i64 %573, i64* %PC, align 8
  %574 = inttoptr i64 %572 to i64*
  %575 = load i64, i64* %574, align 8
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = add i64 %365, 8
  store i64 %576, i64* %PC, align 8
  %577 = load i32, i32* %332, align 4
  %578 = sext i32 %577 to i64
  store i64 %578, i64* %RCX, align 8, !tbaa !2428
  %579 = shl nsw i64 %578, 2
  %580 = add i64 %579, %575
  %581 = add i64 %365, 13
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i32*
  %583 = load i32, i32* %582, align 4
  store i32 %583, i32* %114, align 1, !tbaa !2451
  store float 0.000000e+00, float* %393, align 1, !tbaa !2451
  store float 0.000000e+00, float* %394, align 1, !tbaa !2451
  store float 0.000000e+00, float* %395, align 1, !tbaa !2451
  %584 = add i64 %329, -8
  %585 = add i64 %365, 18
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i32*
  %587 = load i32, i32* %586, align 4
  store i32 %587, i32* %397, align 1, !tbaa !2451
  store float 0.000000e+00, float* %399, align 1, !tbaa !2451
  store float 0.000000e+00, float* %401, align 1, !tbaa !2451
  store float 0.000000e+00, float* %403, align 1, !tbaa !2451
  %588 = add i64 %329, -16
  %589 = add i64 %365, 22
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i64*
  %591 = load i64, i64* %590, align 8
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = add i64 %365, 26
  store i64 %592, i64* %PC, align 8
  %593 = load i32, i32* %332, align 4
  %594 = sext i32 %593 to i64
  store i64 %594, i64* %RCX, align 8, !tbaa !2428
  %595 = shl nsw i64 %594, 2
  %596 = add i64 %595, %591
  %597 = add i64 %365, 31
  store i64 %597, i64* %PC, align 8
  %598 = load <2 x float>, <2 x float>* %404, align 1
  %599 = load <2 x i32>, <2 x i32>* %405, align 1
  %600 = inttoptr i64 %596 to float*
  %601 = load float, float* %600, align 4
  %602 = extractelement <2 x float> %598, i32 0
  %603 = fmul float %602, %601
  store float %603, float* %396, align 1, !tbaa !2451
  %604 = bitcast <2 x float> %598 to <2 x i32>
  %605 = extractelement <2 x i32> %604, i32 1
  store i32 %605, i32* %406, align 1, !tbaa !2451
  %606 = extractelement <2 x i32> %599, i32 0
  store i32 %606, i32* %407, align 1, !tbaa !2451
  %607 = extractelement <2 x i32> %599, i32 1
  store i32 %607, i32* %408, align 1, !tbaa !2451
  %608 = load <2 x float>, <2 x float>* %23, align 1
  %609 = load <2 x i32>, <2 x i32>* %409, align 1
  %610 = load <2 x float>, <2 x float>* %404, align 1
  %611 = extractelement <2 x float> %608, i32 0
  %612 = extractelement <2 x float> %610, i32 0
  %613 = fadd float %611, %612
  store float %613, float* %392, align 1, !tbaa !2451
  %614 = bitcast <2 x float> %608 to <2 x i32>
  %615 = extractelement <2 x i32> %614, i32 1
  store i32 %615, i32* %116, align 1, !tbaa !2451
  %616 = extractelement <2 x i32> %609, i32 0
  store i32 %616, i32* %117, align 1, !tbaa !2451
  %617 = extractelement <2 x i32> %609, i32 1
  store i32 %617, i32* %119, align 1, !tbaa !2451
  %618 = add i64 %365, 39
  store i64 %618, i64* %PC, align 8
  %619 = load i64, i64* %574, align 8
  store i64 %619, i64* %RAX, align 8, !tbaa !2428
  %620 = add i64 %365, 43
  store i64 %620, i64* %PC, align 8
  %621 = load i32, i32* %332, align 4
  %622 = sext i32 %621 to i64
  store i64 %622, i64* %RCX, align 8, !tbaa !2428
  %623 = shl nsw i64 %622, 2
  %624 = add i64 %623, %619
  %625 = add i64 %365, 48
  store i64 %625, i64* %PC, align 8
  %626 = load <2 x float>, <2 x float>* %23, align 1
  %627 = extractelement <2 x float> %626, i32 0
  %628 = inttoptr i64 %624 to float*
  store float %627, float* %628, align 4
  %629 = load i64, i64* %RBP, align 8
  %630 = add i64 %629, -40
  %631 = load i64, i64* %PC, align 8
  %632 = add i64 %631, 3
  store i64 %632, i64* %PC, align 8
  %633 = inttoptr i64 %630 to i32*
  %634 = load i32, i32* %633, align 4
  %635 = add i32 %634, 1
  %636 = zext i32 %635 to i64
  store i64 %636, i64* %RAX, align 8, !tbaa !2428
  %637 = icmp eq i32 %634, -1
  %638 = icmp eq i32 %635, 0
  %639 = or i1 %637, %638
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %67, align 1, !tbaa !2432
  %641 = and i32 %635, 255
  %642 = tail call i32 @llvm.ctpop.i32(i32 %641) #10
  %643 = trunc i32 %642 to i8
  %644 = and i8 %643, 1
  %645 = xor i8 %644, 1
  store i8 %645, i8* %73, align 1, !tbaa !2446
  %646 = xor i32 %635, %634
  %647 = lshr i32 %646, 4
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  store i8 %649, i8* %74, align 1, !tbaa !2447
  %650 = zext i1 %638 to i8
  store i8 %650, i8* %77, align 1, !tbaa !2448
  %651 = lshr i32 %635, 31
  %652 = trunc i32 %651 to i8
  store i8 %652, i8* %80, align 1, !tbaa !2449
  %653 = lshr i32 %634, 31
  %654 = xor i32 %651, %653
  %655 = add nuw nsw i32 %654, %651
  %656 = icmp eq i32 %655, 2
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %81, align 1, !tbaa !2450
  %658 = add i64 %631, 9
  store i64 %658, i64* %PC, align 8
  store i32 %635, i32* %633, align 4
  %659 = load i64, i64* %PC, align 8
  %660 = add i64 %659, -69
  store i64 %660, i64* %PC, align 8, !tbaa !2428
  br label %block_402998

block_4029e7.loopexit:                            ; preds = %block_402998
  br label %block_4029e7

block_4029e7.loopexit9:                           ; preds = %block_402930
  br label %block_4029e7

block_4029e7:                                     ; preds = %block_4029e7.loopexit9, %block_4029e7.loopexit, %block_4028ca, %block_402880
  %661 = phi i64 [ %85, %block_402880 ], [ %467, %block_4028ca ], [ %365, %block_4029e7.loopexit ], [ %464, %block_4029e7.loopexit9 ]
  %.sink5 = phi i64 [ 309, %block_402880 ], [ 280, %block_4028ca ], [ 6, %block_4029e7.loopexit ], [ 92, %block_4029e7.loopexit9 ]
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_402880 ], [ %154, %block_4028ca ], [ %154, %block_4029e7.loopexit ], [ %154, %block_4029e7.loopexit9 ]
  %662 = add i64 %.sink5, %661
  store i64 %662, i64* %PC, align 8
  %663 = load i64, i64* %10, align 8, !tbaa !2428
  %664 = add i64 %663, 8
  %665 = inttoptr i64 %663 to i64*
  %666 = load i64, i64* %665, align 8
  store i64 %666, i64* %RBP, align 8, !tbaa !2428
  store i64 %664, i64* %10, align 8, !tbaa !2428
  %667 = add i64 %662, 1
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %664 to i64*
  %669 = load i64, i64* %668, align 8
  store i64 %669, i64* %PC, align 8, !tbaa !2428
  %670 = add i64 %663, 16
  store i64 %670, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_402901:                                     ; preds = %block_4028e9
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  store i8 0, i8* %74, align 1, !tbaa !2447
  %671 = add i64 %478, -4
  %672 = add i64 %494, 5
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = sub i32 0, %674
  %676 = lshr i32 %675, 31
  %677 = sub i32 1, %674
  %678 = zext i32 %677 to i64
  store i64 %678, i64* %RAX, align 8, !tbaa !2428
  %679 = icmp eq i32 %675, -1
  %680 = icmp eq i32 %677, 0
  %681 = or i1 %679, %680
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %67, align 1, !tbaa !2432
  %683 = and i32 %677, 255
  %684 = tail call i32 @llvm.ctpop.i32(i32 %683) #10
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  %687 = xor i8 %686, 1
  store i8 %687, i8* %73, align 1, !tbaa !2446
  %688 = xor i32 %677, %675
  %689 = lshr i32 %688, 4
  %690 = trunc i32 %689 to i8
  %691 = and i8 %690, 1
  store i8 %691, i8* %74, align 1, !tbaa !2447
  %692 = zext i1 %680 to i8
  store i8 %692, i8* %77, align 1, !tbaa !2448
  %693 = lshr i32 %677, 31
  %694 = trunc i32 %693 to i8
  store i8 %694, i8* %80, align 1, !tbaa !2449
  %695 = xor i32 %693, %676
  %696 = add nuw nsw i32 %695, %693
  %697 = icmp eq i32 %696, 2
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %81, align 1, !tbaa !2450
  %699 = add i64 %494, 12
  store i64 %699, i64* %PC, align 8
  %700 = load i32, i32* %482, align 4
  %701 = sext i32 %677 to i64
  %702 = sext i32 %700 to i64
  %703 = mul nsw i64 %702, %701
  %704 = trunc i64 %703 to i32
  %705 = and i64 %703, 4294967295
  store i64 %705, i64* %RAX, align 8, !tbaa !2428
  %706 = shl i64 %703, 32
  %707 = ashr exact i64 %706, 32
  %708 = icmp ne i64 %707, %703
  %709 = zext i1 %708 to i8
  store i8 %709, i8* %67, align 1, !tbaa !2432
  %710 = and i32 %704, 255
  %711 = tail call i32 @llvm.ctpop.i32(i32 %710) #10
  %712 = trunc i32 %711 to i8
  %713 = and i8 %712, 1
  %714 = xor i8 %713, 1
  store i8 %714, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %715 = lshr i32 %704, 31
  %716 = trunc i32 %715 to i8
  store i8 %716, i8* %80, align 1, !tbaa !2449
  store i8 %709, i8* %81, align 1, !tbaa !2450
  %717 = add i64 %478, -44
  %718 = add i64 %494, 15
  store i64 %718, i64* %PC, align 8
  %719 = inttoptr i64 %717 to i32*
  store i32 %704, i32* %719, align 4
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_402910
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4004a8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_4004a8:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #10
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_4004ba, label %block_4004b8

block_4004b8:                                     ; preds = %block_4004a8
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4004ba

block_4004ba:                                     ; preds = %block_4004b8, %block_4004a8
  %27 = phi i64 [ %22, %block_4004a8 ], [ %.pre1, %block_4004b8 ]
  %28 = phi i64 [ %4, %block_4004a8 ], [ %.pre, %block_4004b8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004a8 ], [ %26, %block_4004b8 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #10
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005f0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_4005f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #10
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %10, -289
  %41 = add i64 %10, 12
  %42 = add i64 %7, -32
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43, align 8
  store i64 %42, i64* %RSP, align 8, !tbaa !2428
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %44 = tail call fastcc %struct.Memory* @ext_653140_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %45 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %46 = load i64, i64* %PC, align 8
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 4) to i32*), align 4
  %48 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %47, i32* %48, align 1, !tbaa !2451
  %49 = getelementptr inbounds i8, i8* %45, i64 4
  %50 = bitcast i8* %49 to float*
  store float 0.000000e+00, float* %50, align 1, !tbaa !2451
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %52 = bitcast i64* %51 to float*
  store float 0.000000e+00, float* %52, align 1, !tbaa !2451
  %53 = getelementptr inbounds i8, i8* %45, i64 12
  %54 = bitcast i8* %53 to float*
  store float 0.000000e+00, float* %54, align 1, !tbaa !2451
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i64, i64* %RAX, align 8
  %58 = add i64 %46, 12
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %59, align 8
  %60 = bitcast %union.VectorReg* %4 to i8*
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -16
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 6
  store i64 %64, i64* %PC, align 8
  %65 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %66 = load <2 x i32>, <2 x i32>* %65, align 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %68 = bitcast i64* %67 to <2 x i32>*
  %69 = load <2 x i32>, <2 x i32>* %68, align 1
  %70 = inttoptr i64 %62 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sitofp i64 %71 to float
  %73 = bitcast %union.VectorReg* %4 to float*
  store float %72, float* %73, align 1, !tbaa !2451
  %74 = extractelement <2 x i32> %66, i32 1
  %75 = getelementptr inbounds i8, i8* %60, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 1, !tbaa !2451
  %77 = extractelement <2 x i32> %69, i32 0
  %78 = bitcast i64* %67 to i32*
  store i32 %77, i32* %78, align 1, !tbaa !2451
  %79 = extractelement <2 x i32> %69, i32 1
  %80 = getelementptr inbounds i8, i8* %60, i64 12
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 1, !tbaa !2451
  %82 = bitcast %union.VectorReg* %4 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 1
  %84 = load <2 x i32>, <2 x i32>* %68, align 1
  %85 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 1
  %87 = extractelement <2 x float> %83, i32 0
  %88 = extractelement <2 x float> %86, i32 0
  %89 = fdiv float %87, %88
  store float %89, float* %73, align 1, !tbaa !2451
  %90 = bitcast <2 x float> %83 to <2 x i32>
  %91 = extractelement <2 x i32> %90, i32 1
  store i32 %91, i32* %76, align 1, !tbaa !2451
  %92 = extractelement <2 x i32> %84, i32 0
  store i32 %92, i32* %78, align 1, !tbaa !2451
  %93 = extractelement <2 x i32> %84, i32 1
  store i32 %93, i32* %81, align 1, !tbaa !2451
  %94 = add i64 %61, -4
  %95 = add i64 %63, 15
  store i64 %95, i64* %PC, align 8
  %96 = load <2 x float>, <2 x float>* %82, align 1
  %97 = extractelement <2 x float> %96, i32 0
  %98 = inttoptr i64 %94 to float*
  store float %97, float* %98, align 4
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -4
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 5
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %48, align 1, !tbaa !2451
  store float 0.000000e+00, float* %50, align 1, !tbaa !2451
  store float 0.000000e+00, float* %52, align 1, !tbaa !2451
  store float 0.000000e+00, float* %54, align 1, !tbaa !2451
  %105 = load i64, i64* %RSP, align 8
  %106 = add i64 %105, 16
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %107 = icmp ugt i64 %105, -17
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %14, align 1, !tbaa !2432
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #10
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i64 %105, 16
  %116 = xor i64 %115, %106
  %117 = lshr i64 %116, 4
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  store i8 %119, i8* %27, align 1, !tbaa !2447
  %120 = icmp eq i64 %106, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %30, align 1, !tbaa !2448
  %122 = lshr i64 %106, 63
  %123 = trunc i64 %122 to i8
  store i8 %123, i8* %33, align 1, !tbaa !2449
  %124 = lshr i64 %105, 63
  %125 = xor i64 %122, %124
  %126 = add nuw nsw i64 %125, %122
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %39, align 1, !tbaa !2450
  %129 = add i64 %101, 10
  store i64 %129, i64* %PC, align 8
  %130 = add i64 %105, 24
  %131 = inttoptr i64 %106 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %133 = add i64 %101, 11
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %130 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  %136 = add i64 %105, 32
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %44
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401fc0_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401fc0:
  %var_2_4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %var_2_4 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %var_2_87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %var_2_101 = load i64, i64* %RBP, align 8
  %var_2_102 = add i64 %var_2_101, -44
  %var_2_105 = inttoptr i64 %var_2_102 to i32*
  %var_2_106 = load i32, i32* %var_2_105, align 4
  %var_2_107 = add i32 %var_2_106, -1
  %var_2_108 = icmp eq i32 %var_2_106, 0
  %var_2_109 = zext i1 %var_2_108 to i8
  store i8 %var_2_109, i8* %var_2_87, align 1
  %var_2_121 = lshr i32 %var_2_107, 31
  %var_2_123 = lshr i32 %var_2_106, 31
  %var_2_124 = xor i32 %var_2_121, %var_2_123
  %var_2_125 = add nuw nsw i32 %var_2_124, %var_2_123
  %var_2_126 = icmp eq i32 %var_2_125, 2
  %var_2_128 = icmp ne i32 %var_2_121, 0
  %var_2_129 = xor i1 %var_2_128, %var_2_126
  br i1 %var_2_129, label %block_402069, label %block_401ff9

block_401ff9:                                     ; preds = %block_401fc0
  %var_2_170 = load i32, i32* %var_2_105, align 4
  %var_2_173 = icmp eq i32 %var_2_170, 0
  %var_2_174 = zext i1 %var_2_173 to i8
  store i8 %var_2_174, i8* %var_2_87, align 1
  %var_2_293592 = add i64 %var_2_101, -48
  %var_2_293793 = inttoptr i64 %var_2_293592 to i32*
  %var_2_293894 = load i32, i32* %var_2_293793, align 4
  %var_2_294095 = add i64 %var_2_101, -4
  %var_2_294296 = inttoptr i64 %var_2_294095 to i32*
  %var_2_294397 = load i32, i32* %var_2_294296, align 4
  %var_2_294498 = sub i32 %var_2_293894, %var_2_294397
  %var_2_295999 = lshr i32 %var_2_294498, 31
  %var_2_2961100 = lshr i32 %var_2_293894, 31
  %var_2_2962101 = lshr i32 %var_2_294397, 31
  %var_2_2963102 = xor i32 %var_2_2962101, %var_2_2961100
  %var_2_2964103 = xor i32 %var_2_295999, %var_2_2961100
  %var_2_2965104 = add nuw nsw i32 %var_2_2964103, %var_2_2963102
  %var_2_2966105 = icmp eq i32 %var_2_2965104, 2
  %var_2_2968106 = icmp ne i32 %var_2_295999, 0
  %var_2_2969107 = xor i1 %var_2_2968106, %var_2_2966105
  br i1 %var_2_2969107, label %block_402015.preheader, label %block_402069

block_402015.preheader:                           ; preds = %block_401ff9
  %var_2_3794 = add i64 %var_2_101, -24
  %var_2_3796 = inttoptr i64 %var_2_3794 to i32*
  br label %block_402015

block_402069.loopexit:                            ; preds = %block_402015
  br label %block_402069

block_402069:                                     ; preds = %block_402069.loopexit, %block_401ff9, %block_401fc0
  %var_2_237 = load i32, i32* %ECX, align 4
  %var_2_238 = zext i32 %var_2_237 to i64
  %var_2_240 = sext i32 %var_2_237 to i64
  %var_2_241 = and i64 %var_2_240, -4294967296
  %var_2_243 = add i64 %var_2_101, -60
  %var_2_245 = inttoptr i64 %var_2_243 to i32*
  %var_2_246 = load i32, i32* %var_2_245, align 4
  %var_2_249 = sext i32 %var_2_246 to i64
  %var_2_251 = or i64 %var_2_241, %var_2_238
  %var_2_252 = sdiv i64 %var_2_251, %var_2_249
  %var_2_253 = shl i64 %var_2_252, 32
  %var_2_254 = ashr exact i64 %var_2_253, 32
  %var_2_255 = icmp eq i64 %var_2_252, %var_2_254
  br i1 %var_2_255, label %var_2_258, label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

var_2_258:                                        ; preds = %block_402069
  store i8 0, i8* %var_2_87, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %var_2_258, %block_402069
  %var_2_275 = load i32, i32* %var_2_105, align 4
  %var_2_276 = add i32 %var_2_275, -2
  %var_2_290 = lshr i32 %var_2_276, 31
  %var_2_292 = lshr i32 %var_2_275, 31
  %var_2_293 = xor i32 %var_2_290, %var_2_292
  %var_2_294 = add nuw nsw i32 %var_2_293, %var_2_292
  %var_2_295 = icmp eq i32 %var_2_294, 2
  %var_2_297 = icmp ne i32 %var_2_290, 0
  %var_2_298 = xor i1 %var_2_297, %var_2_295
  br i1 %var_2_298, label %block_40212a, label %block_402089

block_402475:                                     ; preds = %block_402475.preheader, %block_402475
  %var_2_809 = phi i64 [ %var_2_1307, %block_402475 ], [ %var_2_31071, %block_402475.preheader ]
  %var_2_316 = add i64 %var_2_809, -44
  %var_2_318 = inttoptr i64 %var_2_316 to i32*
  %var_2_319 = load i32, i32* %var_2_318, align 4
  %var_2_320 = add i32 %var_2_319, -15
  %var_2_321 = zext i32 %var_2_320 to i64
  store i64 %var_2_321, i64* %RDX, align 8
  %var_2_352 = add i64 %var_2_809, -24
  %var_2_354 = inttoptr i64 %var_2_352 to i32*
  %var_2_355 = load i32, i32* %var_2_354, align 4
  %var_2_356 = zext i32 %var_2_355 to i64
  store i64 %var_2_356, i64* %RDX, align 8
  %var_2_358 = load i32, i32* %var_2_318, align 4
  %var_2_359 = add i32 %var_2_358, -15
  %var_2_361 = sext i32 %var_2_355 to i64
  %var_2_362 = sext i32 %var_2_359 to i64
  %var_2_363 = mul nsw i64 %var_2_362, %var_2_361
  %var_2_365 = and i64 %var_2_363, 4294967295
  store i64 %var_2_365, i64* %RDX, align 8
  %var_2_378 = add i64 %var_2_809, -48
  %var_2_380 = trunc i64 %var_2_363 to i32
  %var_2_381 = inttoptr i64 %var_2_378 to i32*
  %var_2_382 = load i32, i32* %var_2_381, align 4
  %var_2_383 = add i32 %var_2_380, %var_2_382
  %var_2_384 = zext i32 %var_2_383 to i64
  store i64 %var_2_384, i64* %RDX, align 8
  %var_2_442 = load i32, i32* %var_2_318, align 4
  %var_2_443 = add i32 %var_2_442, -14
  %var_2_444 = zext i32 %var_2_443 to i64
  store i64 %var_2_444, i64* %RDX, align 8
  %var_2_479 = load i32, i32* %var_2_354, align 4
  %var_2_480 = zext i32 %var_2_479 to i64
  store i64 %var_2_480, i64* %RDX, align 8
  %var_2_484 = load i32, i32* %var_2_318, align 4
  %var_2_485 = add i32 %var_2_484, -14
  %var_2_487 = sext i32 %var_2_479 to i64
  %var_2_488 = sext i32 %var_2_485 to i64
  %var_2_489 = mul nsw i64 %var_2_488, %var_2_487
  %var_2_491 = and i64 %var_2_489, 4294967295
  store i64 %var_2_491, i64* %RDX, align 8
  %var_2_505 = trunc i64 %var_2_489 to i32
  %var_2_507 = load i32, i32* %var_2_381, align 4
  %var_2_508 = add i32 %var_2_505, %var_2_507
  %var_2_509 = zext i32 %var_2_508 to i64
  store i64 %var_2_509, i64* %RDX, align 8
  %var_2_568 = load i32, i32* %var_2_318, align 4
  %var_2_569 = add i32 %var_2_568, -13
  %var_2_570 = zext i32 %var_2_569 to i64
  store i64 %var_2_570, i64* %RDX, align 8
  %var_2_604 = load i32, i32* %var_2_354, align 4
  %var_2_605 = zext i32 %var_2_604 to i64
  store i64 %var_2_605, i64* %RDX, align 8
  %var_2_607 = load i32, i32* %var_2_318, align 4
  %var_2_608 = add i32 %var_2_607, -13
  %var_2_610 = sext i32 %var_2_604 to i64
  %var_2_611 = sext i32 %var_2_608 to i64
  %var_2_612 = mul nsw i64 %var_2_611, %var_2_610
  %var_2_614 = and i64 %var_2_612, 4294967295
  store i64 %var_2_614, i64* %RDX, align 8
  %var_2_629 = trunc i64 %var_2_612 to i32
  %var_2_631 = load i32, i32* %var_2_381, align 4
  %var_2_632 = add i32 %var_2_629, %var_2_631
  %var_2_633 = zext i32 %var_2_632 to i64
  store i64 %var_2_633, i64* %RDX, align 8
  %var_2_691 = load i32, i32* %var_2_318, align 4
  %var_2_692 = add i32 %var_2_691, -12
  %var_2_693 = zext i32 %var_2_692 to i64
  store i64 %var_2_693, i64* %RDX, align 8
  %var_2_728 = load i32, i32* %var_2_354, align 4
  %var_2_729 = zext i32 %var_2_728 to i64
  store i64 %var_2_729, i64* %RDX, align 8
  %var_2_733 = load i32, i32* %var_2_318, align 4
  %var_2_734 = add i32 %var_2_733, -12
  %var_2_736 = sext i32 %var_2_728 to i64
  %var_2_737 = sext i32 %var_2_734 to i64
  %var_2_738 = mul nsw i64 %var_2_737, %var_2_736
  %var_2_740 = and i64 %var_2_738, 4294967295
  store i64 %var_2_740, i64* %RDX, align 8
  %var_2_754 = trunc i64 %var_2_738 to i32
  %var_2_756 = load i32, i32* %var_2_381, align 4
  %var_2_757 = add i32 %var_2_754, %var_2_756
  %var_2_758 = zext i32 %var_2_757 to i64
  store i64 %var_2_758, i64* %RDX, align 8
  %var_2_817 = load i32, i32* %var_2_318, align 4
  %var_2_818 = add i32 %var_2_817, -11
  %var_2_819 = zext i32 %var_2_818 to i64
  store i64 %var_2_819, i64* %RDX, align 8
  %var_2_853 = load i32, i32* %var_2_354, align 4
  %var_2_854 = zext i32 %var_2_853 to i64
  store i64 %var_2_854, i64* %RDX, align 8
  %var_2_856 = load i32, i32* %var_2_318, align 4
  %var_2_857 = add i32 %var_2_856, -11
  %var_2_859 = sext i32 %var_2_853 to i64
  %var_2_860 = sext i32 %var_2_857 to i64
  %var_2_861 = mul nsw i64 %var_2_860, %var_2_859
  %var_2_863 = and i64 %var_2_861, 4294967295
  store i64 %var_2_863, i64* %RDX, align 8
  %var_2_878 = trunc i64 %var_2_861 to i32
  %var_2_880 = load i32, i32* %var_2_381, align 4
  %var_2_881 = add i32 %var_2_878, %var_2_880
  %var_2_882 = zext i32 %var_2_881 to i64
  store i64 %var_2_882, i64* %RDX, align 8
  %var_2_940 = load i32, i32* %var_2_318, align 4
  %var_2_941 = add i32 %var_2_940, -10
  %var_2_942 = zext i32 %var_2_941 to i64
  store i64 %var_2_942, i64* %RDX, align 8
  %var_2_977 = load i32, i32* %var_2_354, align 4
  %var_2_978 = zext i32 %var_2_977 to i64
  store i64 %var_2_978, i64* %RDX, align 8
  %var_2_982 = load i32, i32* %var_2_318, align 4
  %var_2_983 = add i32 %var_2_982, -10
  %var_2_985 = sext i32 %var_2_977 to i64
  %var_2_986 = sext i32 %var_2_983 to i64
  %var_2_987 = mul nsw i64 %var_2_986, %var_2_985
  %var_2_989 = and i64 %var_2_987, 4294967295
  store i64 %var_2_989, i64* %RDX, align 8
  %var_2_1003 = trunc i64 %var_2_987 to i32
  %var_2_1005 = load i32, i32* %var_2_381, align 4
  %var_2_1006 = add i32 %var_2_1003, %var_2_1005
  %var_2_1007 = zext i32 %var_2_1006 to i64
  store i64 %var_2_1007, i64* %RDX, align 8
  %var_2_1066 = load i32, i32* %var_2_318, align 4
  %var_2_1067 = add i32 %var_2_1066, -9
  %var_2_1068 = zext i32 %var_2_1067 to i64
  store i64 %var_2_1068, i64* %RDX, align 8
  %var_2_1102 = load i32, i32* %var_2_354, align 4
  %var_2_1103 = zext i32 %var_2_1102 to i64
  store i64 %var_2_1103, i64* %RDX, align 8
  %var_2_1105 = load i32, i32* %var_2_318, align 4
  %var_2_1106 = add i32 %var_2_1105, -9
  %var_2_1108 = sext i32 %var_2_1102 to i64
  %var_2_1109 = sext i32 %var_2_1106 to i64
  %var_2_1110 = mul nsw i64 %var_2_1109, %var_2_1108
  %var_2_1112 = and i64 %var_2_1110, 4294967295
  store i64 %var_2_1112, i64* %RDX, align 8
  %var_2_1127 = trunc i64 %var_2_1110 to i32
  %var_2_1129 = load i32, i32* %var_2_381, align 4
  %var_2_1130 = add i32 %var_2_1127, %var_2_1129
  %var_2_1131 = zext i32 %var_2_1130 to i64
  store i64 %var_2_1131, i64* %RDX, align 8
  %var_2_1189 = load i32, i32* %var_2_318, align 4
  %var_2_1190 = add i32 %var_2_1189, -8
  %var_2_1191 = zext i32 %var_2_1190 to i64
  store i64 %var_2_1191, i64* %RDX, align 8
  %var_2_1226 = load i32, i32* %var_2_354, align 4
  %var_2_1227 = zext i32 %var_2_1226 to i64
  store i64 %var_2_1227, i64* %RDX, align 8
  %var_2_1231 = load i32, i32* %var_2_318, align 4
  %var_2_1232 = add i32 %var_2_1231, -8
  %var_2_1234 = sext i32 %var_2_1226 to i64
  %var_2_1235 = sext i32 %var_2_1232 to i64
  %var_2_1236 = mul nsw i64 %var_2_1235, %var_2_1234
  %var_2_1238 = and i64 %var_2_1236, 4294967295
  store i64 %var_2_1238, i64* %RDX, align 8
  %var_2_1252 = trunc i64 %var_2_1236 to i32
  %var_2_1254 = load i32, i32* %var_2_381, align 4
  %var_2_1255 = add i32 %var_2_1252, %var_2_1254
  %var_2_1256 = zext i32 %var_2_1255 to i64
  store i64 %var_2_1256, i64* %RDX, align 8
  %var_2_1307 = load i64, i64* %RBP, align 8
  %var_2_1348 = add i64 %var_2_1307, -24
  %var_2_1350 = inttoptr i64 %var_2_1348 to i32*
  %var_2_1351 = load i32, i32* %var_2_1350, align 4
  %var_2_1352 = zext i32 %var_2_1351 to i64
  store i64 %var_2_1352, i64* %RDX, align 8
  %var_2_1475 = load i32, i32* %var_2_1350, align 4
  %var_2_1476 = zext i32 %var_2_1475 to i64
  store i64 %var_2_1476, i64* %RDX, align 8
  %var_2_1600 = load i32, i32* %var_2_1350, align 4
  %var_2_1601 = zext i32 %var_2_1600 to i64
  store i64 %var_2_1601, i64* %RDX, align 8
  %var_2_1724 = load i32, i32* %var_2_1350, align 4
  %var_2_1725 = zext i32 %var_2_1724 to i64
  store i64 %var_2_1725, i64* %RDX, align 8
  %var_2_1810 = add i64 %var_2_1307, -44
  %var_2_1812 = inttoptr i64 %var_2_1810 to i32*
  %var_2_1813 = load i32, i32* %var_2_1812, align 4
  %var_2_1814 = add i32 %var_2_1813, -3
  %var_2_1815 = zext i32 %var_2_1814 to i64
  store i64 %var_2_1815, i64* %RDX, align 8
  %var_2_1849 = load i32, i32* %var_2_1350, align 4
  %var_2_1850 = zext i32 %var_2_1849 to i64
  store i64 %var_2_1850, i64* %RDX, align 8
  %var_2_1852 = load i32, i32* %var_2_1812, align 4
  %var_2_1853 = add i32 %var_2_1852, -3
  %var_2_1855 = sext i32 %var_2_1849 to i64
  %var_2_1856 = sext i32 %var_2_1853 to i64
  %var_2_1857 = mul nsw i64 %var_2_1856, %var_2_1855
  %var_2_1859 = and i64 %var_2_1857, 4294967295
  store i64 %var_2_1859, i64* %RDX, align 8
  %var_2_1872 = add i64 %var_2_1307, -48
  %var_2_1874 = trunc i64 %var_2_1857 to i32
  %var_2_1875 = inttoptr i64 %var_2_1872 to i32*
  %var_2_1876 = load i32, i32* %var_2_1875, align 4
  %var_2_1877 = add i32 %var_2_1874, %var_2_1876
  %var_2_1878 = zext i32 %var_2_1877 to i64
  store i64 %var_2_1878, i64* %RDX, align 8
  %var_2_1936 = load i32, i32* %var_2_1812, align 4
  %var_2_1937 = add i32 %var_2_1936, -2
  %var_2_1938 = zext i32 %var_2_1937 to i64
  store i64 %var_2_1938, i64* %RDX, align 8
  %var_2_1973 = load i32, i32* %var_2_1350, align 4
  %var_2_1974 = zext i32 %var_2_1973 to i64
  store i64 %var_2_1974, i64* %RDX, align 8
  %var_2_1978 = load i32, i32* %var_2_1812, align 4
  %var_2_1979 = add i32 %var_2_1978, -2
  %var_2_1981 = sext i32 %var_2_1973 to i64
  %var_2_1982 = sext i32 %var_2_1979 to i64
  %var_2_1983 = mul nsw i64 %var_2_1982, %var_2_1981
  %var_2_1985 = and i64 %var_2_1983, 4294967295
  store i64 %var_2_1985, i64* %RDX, align 8
  %var_2_1999 = trunc i64 %var_2_1983 to i32
  %var_2_2001 = load i32, i32* %var_2_1875, align 4
  %var_2_2002 = add i32 %var_2_1999, %var_2_2001
  %var_2_2003 = zext i32 %var_2_2002 to i64
  store i64 %var_2_2003, i64* %RDX, align 8
  %var_2_2062 = load i32, i32* %var_2_1812, align 4
  %var_2_2063 = add i32 %var_2_2062, -1
  %var_2_2064 = zext i32 %var_2_2063 to i64
  store i64 %var_2_2064, i64* %RDX, align 8
  %var_2_2065 = icmp eq i32 %var_2_2062, 0
  %var_2_2066 = zext i1 %var_2_2065 to i8
  store i8 %var_2_2066, i8* %var_2_87, align 1
  %var_2_2098 = load i32, i32* %var_2_1350, align 4
  %var_2_2099 = zext i32 %var_2_2098 to i64
  store i64 %var_2_2099, i64* %RDX, align 8
  %var_2_2101 = load i32, i32* %var_2_1812, align 4
  %var_2_2102 = add i32 %var_2_2101, -1
  %var_2_2104 = sext i32 %var_2_2098 to i64
  %var_2_2105 = sext i32 %var_2_2102 to i64
  %var_2_2106 = mul nsw i64 %var_2_2105, %var_2_2104
  %var_2_2108 = and i64 %var_2_2106, 4294967295
  store i64 %var_2_2108, i64* %RDX, align 8
  %var_2_2123 = trunc i64 %var_2_2106 to i32
  %var_2_2125 = load i32, i32* %var_2_1875, align 4
  %var_2_2126 = add i32 %var_2_2123, %var_2_2125
  %var_2_2127 = zext i32 %var_2_2126 to i64
  store i64 %var_2_2127, i64* %RDX, align 8
  %var_2_2200 = load i32, i32* %var_2_1350, align 4
  %var_2_2201 = zext i32 %var_2_2200 to i64
  store i64 %var_2_2201, i64* %RDX, align 8
  %var_2_2205 = load i32, i32* %var_2_1812, align 4
  %var_2_2206 = sext i32 %var_2_2200 to i64
  %var_2_2207 = sext i32 %var_2_2205 to i64
  %var_2_2208 = mul nsw i64 %var_2_2207, %var_2_2206
  %var_2_2210 = and i64 %var_2_2208, 4294967295
  store i64 %var_2_2210, i64* %RDX, align 8
  %var_2_2224 = trunc i64 %var_2_2208 to i32
  %var_2_2226 = load i32, i32* %var_2_1875, align 4
  %var_2_2227 = add i32 %var_2_2224, %var_2_2226
  %var_2_2228 = zext i32 %var_2_2227 to i64
  store i64 %var_2_2228, i64* %RDX, align 8
  %var_2_3111 = load i32, i32* %var_2_1875, align 4
  %var_2_3113 = add i64 %var_2_1307, -4
  %var_2_3115 = inttoptr i64 %var_2_3113 to i32*
  %var_2_3116 = load i32, i32* %var_2_3115, align 4
  %var_2_3117 = sub i32 %var_2_3111, %var_2_3116
  %var_2_3132 = lshr i32 %var_2_3117, 31
  %var_2_3134 = lshr i32 %var_2_3111, 31
  %var_2_3135 = lshr i32 %var_2_3116, 31
  %var_2_3136 = xor i32 %var_2_3135, %var_2_3134
  %var_2_3137 = xor i32 %var_2_3132, %var_2_3134
  %var_2_3138 = add nuw nsw i32 %var_2_3137, %var_2_3136
  %var_2_3139 = icmp eq i32 %var_2_3138, 2
  %var_2_3141 = icmp ne i32 %var_2_3132, 0
  %var_2_3142 = xor i1 %var_2_3141, %var_2_3139
  br i1 %var_2_3142, label %block_402475, label %block_402456.loopexit.loopexit

block_402166:                                     ; preds = %block_402166.block_402166_crit_edge, %block_402166.preheader
  %var_2_2345 = phi i32 [ %var_2_2345.pre, %block_402166.block_402166_crit_edge ], [ %var_2_3643, %block_402166.preheader ]
  %var_2_2346 = add i32 %var_2_2345, -3
  %var_2_2347 = zext i32 %var_2_2346 to i64
  store i64 %var_2_2347, i64* %RDX, align 8
  %var_2_2381 = load i32, i32* %var_2_2380, align 4
  %var_2_2382 = zext i32 %var_2_2381 to i64
  store i64 %var_2_2382, i64* %RDX, align 8
  %var_2_2384 = load i32, i32* %var_2_105, align 4
  %var_2_2385 = add i32 %var_2_2384, -3
  %var_2_2387 = sext i32 %var_2_2381 to i64
  %var_2_2388 = sext i32 %var_2_2385 to i64
  %var_2_2389 = mul nsw i64 %var_2_2388, %var_2_2387
  %var_2_2391 = and i64 %var_2_2389, 4294967295
  store i64 %var_2_2391, i64* %RDX, align 8
  %var_2_2406 = trunc i64 %var_2_2389 to i32
  %var_2_2408 = load i32, i32* %var_2_314857, align 4
  %var_2_2409 = add i32 %var_2_2406, %var_2_2408
  %var_2_2410 = zext i32 %var_2_2409 to i64
  store i64 %var_2_2410, i64* %RDX, align 8
  %var_2_2468 = load i32, i32* %var_2_105, align 4
  %var_2_2469 = add i32 %var_2_2468, -2
  %var_2_2470 = zext i32 %var_2_2469 to i64
  store i64 %var_2_2470, i64* %RDX, align 8
  %var_2_2505 = load i32, i32* %var_2_2380, align 4
  %var_2_2506 = zext i32 %var_2_2505 to i64
  store i64 %var_2_2506, i64* %RDX, align 8
  %var_2_2510 = load i32, i32* %var_2_105, align 4
  %var_2_2511 = add i32 %var_2_2510, -2
  %var_2_2513 = sext i32 %var_2_2505 to i64
  %var_2_2514 = sext i32 %var_2_2511 to i64
  %var_2_2515 = mul nsw i64 %var_2_2514, %var_2_2513
  %var_2_2517 = and i64 %var_2_2515, 4294967295
  store i64 %var_2_2517, i64* %RDX, align 8
  %var_2_2531 = trunc i64 %var_2_2515 to i32
  %var_2_2533 = load i32, i32* %var_2_314857, align 4
  %var_2_2534 = add i32 %var_2_2531, %var_2_2533
  %var_2_2535 = zext i32 %var_2_2534 to i64
  store i64 %var_2_2535, i64* %RDX, align 8
  %var_2_2594 = load i32, i32* %var_2_105, align 4
  %var_2_2595 = add i32 %var_2_2594, -1
  %var_2_2596 = zext i32 %var_2_2595 to i64
  store i64 %var_2_2596, i64* %RDX, align 8
  %var_2_2630 = load i32, i32* %var_2_2380, align 4
  %var_2_2631 = zext i32 %var_2_2630 to i64
  store i64 %var_2_2631, i64* %RDX, align 8
  %var_2_2633 = load i32, i32* %var_2_105, align 4
  %var_2_2634 = add i32 %var_2_2633, -1
  %var_2_2636 = sext i32 %var_2_2630 to i64
  %var_2_2637 = sext i32 %var_2_2634 to i64
  %var_2_2638 = mul nsw i64 %var_2_2637, %var_2_2636
  %var_2_2640 = and i64 %var_2_2638, 4294967295
  store i64 %var_2_2640, i64* %RDX, align 8
  %var_2_2655 = trunc i64 %var_2_2638 to i32
  %var_2_2657 = load i32, i32* %var_2_314857, align 4
  %var_2_2658 = add i32 %var_2_2655, %var_2_2657
  %var_2_2659 = zext i32 %var_2_2658 to i64
  store i64 %var_2_2659, i64* %RDX, align 8
  %var_2_2732 = load i32, i32* %var_2_2380, align 4
  %var_2_2733 = zext i32 %var_2_2732 to i64
  store i64 %var_2_2733, i64* %RDX, align 8
  %var_2_2737 = load i32, i32* %var_2_105, align 4
  %var_2_2738 = sext i32 %var_2_2732 to i64
  %var_2_2739 = sext i32 %var_2_2737 to i64
  %var_2_2740 = mul nsw i64 %var_2_2739, %var_2_2738
  %var_2_2742 = and i64 %var_2_2740, 4294967295
  store i64 %var_2_2742, i64* %RDX, align 8
  %var_2_2756 = trunc i64 %var_2_2740 to i32
  %var_2_2758 = load i32, i32* %var_2_314857, align 4
  %var_2_2759 = add i32 %var_2_2756, %var_2_2758
  %var_2_2760 = zext i32 %var_2_2759 to i64
  store i64 %var_2_2760, i64* %RDX, align 8
  %var_2_3149 = load i32, i32* %var_2_314857, align 4
  %var_2_3154 = load i32, i32* %var_2_315360, align 4
  %var_2_3155 = sub i32 %var_2_3149, %var_2_3154
  %var_2_3170 = lshr i32 %var_2_3155, 31
  %var_2_3172 = lshr i32 %var_2_3149, 31
  %var_2_3173 = lshr i32 %var_2_3154, 31
  %var_2_3174 = xor i32 %var_2_3173, %var_2_3172
  %var_2_3175 = xor i32 %var_2_3170, %var_2_3172
  %var_2_3176 = add nuw nsw i32 %var_2_3175, %var_2_3174
  %var_2_3177 = icmp eq i32 %var_2_3176, 2
  %var_2_3179 = icmp ne i32 %var_2_3170, 0
  %var_2_3180 = xor i1 %var_2_3179, %var_2_3177
  br i1 %var_2_3180, label %block_402166.block_402166_crit_edge, label %block_40224d.loopexit

block_402166.block_402166_crit_edge:              ; preds = %block_402166
  %var_2_2345.pre = load i32, i32* %var_2_105, align 4
  br label %block_402166

block_40224d.loopexit:                            ; preds = %block_402166
  br label %block_40224d

block_40224d:                                     ; preds = %block_40224d.loopexit, %block_40214a, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %var_2_2876 = add i64 %var_2_101, -68
  %var_2_2878 = inttoptr i64 %var_2_2876 to i32*
  %var_2_2879 = load i32, i32* %var_2_2878, align 4
  %var_2_2882 = sext i32 %var_2_2879 to i64
  %var_2_2885 = sdiv i64 %var_2_251, %var_2_2882
  %var_2_2886 = shl i64 %var_2_2885, 32
  %var_2_2887 = ashr exact i64 %var_2_2886, 32
  %var_2_2888 = icmp eq i64 %var_2_2885, %var_2_2887
  br i1 %var_2_2888, label %var_2_2891, label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

var_2_2891:                                       ; preds = %block_40224d
  store i8 0, i8* %var_2_87, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %var_2_2891, %block_40224d
  %var_2_2908 = load i32, i32* %var_2_105, align 4
  %var_2_2909 = add i32 %var_2_2908, -8
  %var_2_2923 = lshr i32 %var_2_2909, 31
  %var_2_2925 = lshr i32 %var_2_2908, 31
  %var_2_2926 = xor i32 %var_2_2923, %var_2_2925
  %var_2_2927 = add nuw nsw i32 %var_2_2926, %var_2_2925
  %var_2_2928 = icmp eq i32 %var_2_2927, 2
  %var_2_2930 = icmp ne i32 %var_2_2923, 0
  %var_2_2931 = xor i1 %var_2_2930, %var_2_2928
  br i1 %var_2_2931, label %block_402434, label %block_40226d

block_4027b6.loopexit:                            ; preds = %block_402456.loopexit
  br label %block_4027b6

block_4027b6:                                     ; preds = %block_4027b6.loopexit, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
; Matched:\<badref\>:  ret %struct.Memory* %2
; ret %struct.Memory* %2
ret %struct.Memory* %2


block_402434.loopexit:                            ; preds = %block_402289
  br label %block_402434

block_402434:                                     ; preds = %block_402434.loopexit, %block_40226d, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %var_2_2997 = add i64 %var_2_101, -72
  %var_2_2999 = inttoptr i64 %var_2_2997 to i32*
  %var_2_3000 = load i32, i32* %var_2_2999, align 4
  %var_2_3003 = sext i32 %var_2_3000 to i64
  %var_2_3006 = sdiv i64 %var_2_251, %var_2_3003
  %var_2_3007 = shl i64 %var_2_3006, 32
  %var_2_3008 = ashr exact i64 %var_2_3007, 32
  %var_2_3009 = icmp eq i64 %var_2_3006, %var_2_3008
  br i1 %var_2_3009, label %var_2_3012, label %var_2_3010

var_2_3010:                                       ; preds = %block_402434
  %.pre35 = load i64, i64* %RDX, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

var_2_3012:                                       ; preds = %block_402434
  %var_2_3013 = srem i64 %var_2_251, %var_2_3003
  %var_2_3015 = and i64 %var_2_3013, 4294967295
  store i8 0, i8* %var_2_87, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %var_2_3012, %var_2_3010
  %var_2_3018 = phi i64 [ %.pre35, %var_2_3010 ], [ %var_2_3015, %var_2_3012 ]
  %var_2_3021 = add i64 %var_2_3018, 16
  %var_2_3022 = and i64 %var_2_3021, 4294967295
  store i64 %var_2_3022, i64* %RDX, align 8
  %var_2_3048 = add i64 %var_2_101, -52
  %var_2_3051 = inttoptr i64 %var_2_3048 to i32*
  %var_2_3052 = load i32, i32* %var_2_3051, align 4
  %var_2_3053 = add i32 %var_2_3052, -1
  %var_2_3054 = zext i32 %var_2_3053 to i64
  store i64 %var_2_3054, i64* %RDX, align 8
  %var_2_356222 = load i32, i32* %var_2_105, align 4
  %var_2_356423 = add i64 %var_2_101, -20
  %var_2_356624 = inttoptr i64 %var_2_356423 to i32*
  %var_2_356725 = load i32, i32* %var_2_356624, align 4
  %var_2_356826 = sub i32 %var_2_356222, %var_2_356725
  %var_2_358327 = lshr i32 %var_2_356826, 31
  %var_2_358528 = lshr i32 %var_2_356222, 31
  %var_2_358629 = lshr i32 %var_2_356725, 31
  %var_2_358730 = xor i32 %var_2_358629, %var_2_358528
  %var_2_358831 = xor i32 %var_2_358327, %var_2_358528
  %var_2_358932 = add nuw nsw i32 %var_2_358831, %var_2_358730
  %var_2_359033 = icmp eq i32 %var_2_358932, 2
  %var_2_359234 = icmp ne i32 %var_2_358327, 0
  %var_2_359335 = xor i1 %var_2_359234, %var_2_359033
  br i1 %var_2_359335, label %block_402462.preheader, label %block_4027b6

block_402462.preheader:                           ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  br label %block_402462

block_402462:                                     ; preds = %block_402462.preheader, %block_402456.loopexit
  %var_2_31071 = phi i64 [ %var_2_310713, %block_402456.loopexit ], [ %var_2_101, %block_402462.preheader ]
  %var_2_31082 = add i64 %var_2_31071, -48
  %var_2_31103 = inttoptr i64 %var_2_31082 to i32*
  %var_2_31114 = load i32, i32* %var_2_31103, align 4
  %var_2_31135 = add i64 %var_2_31071, -4
  %var_2_31156 = inttoptr i64 %var_2_31135 to i32*
  %var_2_31167 = load i32, i32* %var_2_31156, align 4
  %var_2_31178 = sub i32 %var_2_31114, %var_2_31167
  %var_2_31329 = lshr i32 %var_2_31178, 31
  %var_2_313410 = lshr i32 %var_2_31114, 31
  %var_2_313511 = lshr i32 %var_2_31167, 31
  %var_2_313612 = xor i32 %var_2_313511, %var_2_313410
  %var_2_313713 = xor i32 %var_2_31329, %var_2_313410
  %var_2_313814 = add nuw nsw i32 %var_2_313713, %var_2_313612
  %var_2_313915 = icmp eq i32 %var_2_313814, 2
  %var_2_314116 = icmp ne i32 %var_2_31329, 0
  %var_2_314217 = xor i1 %var_2_314116, %var_2_313915
  br i1 %var_2_314217, label %block_402475.preheader, label %block_402456.loopexit

block_402475.preheader:                           ; preds = %block_402462
  br label %block_402475

block_4020a5:                                     ; preds = %block_4020a5.preheader, %block_4020a5
  %var_2_3205 = load i32, i32* %var_2_105, align 4
  %var_2_3206 = add i32 %var_2_3205, -1
  %var_2_3207 = zext i32 %var_2_3206 to i64
  store i64 %var_2_3207, i64* %RDX, align 8
  %var_2_3208 = icmp eq i32 %var_2_3205, 0
  %var_2_3209 = zext i1 %var_2_3208 to i8
  store i8 %var_2_3209, i8* %var_2_87, align 1
  %var_2_3241 = load i32, i32* %var_2_3240, align 4
  %var_2_3242 = zext i32 %var_2_3241 to i64
  store i64 %var_2_3242, i64* %RDX, align 8
  %var_2_3244 = load i32, i32* %var_2_105, align 4
  %var_2_3245 = add i32 %var_2_3244, -1
  %var_2_3247 = sext i32 %var_2_3241 to i64
  %var_2_3248 = sext i32 %var_2_3245 to i64
  %var_2_3249 = mul nsw i64 %var_2_3248, %var_2_3247
  %var_2_3251 = and i64 %var_2_3249, 4294967295
  store i64 %var_2_3251, i64* %RDX, align 8
  %var_2_3266 = trunc i64 %var_2_3249 to i32
  %var_2_3268 = load i32, i32* %var_2_367275, align 4
  %var_2_3269 = add i32 %var_2_3266, %var_2_3268
  %var_2_3270 = zext i32 %var_2_3269 to i64
  store i64 %var_2_3270, i64* %RDX, align 8
  %var_2_3343 = load i32, i32* %var_2_3240, align 4
  %var_2_3344 = zext i32 %var_2_3343 to i64
  store i64 %var_2_3344, i64* %RDX, align 8
  %var_2_3348 = load i32, i32* %var_2_105, align 4
  %var_2_3349 = sext i32 %var_2_3343 to i64
  %var_2_3350 = sext i32 %var_2_3348 to i64
  %var_2_3351 = mul nsw i64 %var_2_3350, %var_2_3349
  %var_2_3353 = and i64 %var_2_3351, 4294967295
  store i64 %var_2_3353, i64* %RDX, align 8
  %var_2_3367 = trunc i64 %var_2_3351 to i32
  %var_2_3369 = load i32, i32* %var_2_367275, align 4
  %var_2_3370 = add i32 %var_2_3367, %var_2_3369
  %var_2_3371 = zext i32 %var_2_3370 to i64
  store i64 %var_2_3371, i64* %RDX, align 8
  %var_2_3673 = load i32, i32* %var_2_367275, align 4
  %var_2_3678 = load i32, i32* %var_2_367778, align 4
  %var_2_3679 = sub i32 %var_2_3673, %var_2_3678
  %var_2_3694 = lshr i32 %var_2_3679, 31
  %var_2_3696 = lshr i32 %var_2_3673, 31
  %var_2_3697 = lshr i32 %var_2_3678, 31
  %var_2_3698 = xor i32 %var_2_3697, %var_2_3696
  %var_2_3699 = xor i32 %var_2_3694, %var_2_3696
  %var_2_3700 = add nuw nsw i32 %var_2_3699, %var_2_3698
  %var_2_3701 = icmp eq i32 %var_2_3700, 2
  %var_2_3703 = icmp ne i32 %var_2_3694, 0
  %var_2_3704 = xor i1 %var_2_3703, %var_2_3701
  br i1 %var_2_3704, label %block_4020a5, label %block_40212a.loopexit

block_40226d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %var_2_13338 = add i64 %var_2_101, -48
  %var_2_13539 = inttoptr i64 %var_2_13338 to i32*
  %var_2_13640 = load i32, i32* %var_2_13539, align 4
  %var_2_13841 = add i64 %var_2_101, -4
  %var_2_14042 = inttoptr i64 %var_2_13841 to i32*
  %var_2_14143 = load i32, i32* %var_2_14042, align 4
  %var_2_14244 = sub i32 %var_2_13640, %var_2_14143
  %var_2_15745 = lshr i32 %var_2_14244, 31
  %var_2_15946 = lshr i32 %var_2_13640, 31
  %var_2_16047 = lshr i32 %var_2_14143, 31
  %var_2_16148 = xor i32 %var_2_16047, %var_2_15946
  %var_2_16249 = xor i32 %var_2_15745, %var_2_15946
  %var_2_16350 = add nuw nsw i32 %var_2_16249, %var_2_16148
  %var_2_16451 = icmp eq i32 %var_2_16350, 2
  %var_2_16652 = icmp ne i32 %var_2_15745, 0
  %var_2_16753 = xor i1 %var_2_16652, %var_2_16451
  br i1 %var_2_16753, label %block_402289.preheader, label %block_402434

block_402289.preheader:                           ; preds = %block_40226d
  %var_2_4029 = add i64 %var_2_101, -24
  %var_2_4031 = inttoptr i64 %var_2_4029 to i32*
  br label %block_402289

block_402456.loopexit.loopexit:                   ; preds = %block_402475
  br label %block_402456.loopexit

block_402456.loopexit:                            ; preds = %block_402456.loopexit.loopexit, %block_402462
  %var_2_310713 = phi i64 [ %var_2_31071, %block_402462 ], [ %var_2_1307, %block_402456.loopexit.loopexit ]
  %var_2_3559 = add i64 %var_2_310713, -44
  %var_2_3561 = inttoptr i64 %var_2_3559 to i32*
  %var_2_3562 = load i32, i32* %var_2_3561, align 4
  %var_2_3564 = add i64 %var_2_310713, -20
  %var_2_3566 = inttoptr i64 %var_2_3564 to i32*
  %var_2_3567 = load i32, i32* %var_2_3566, align 4
  %var_2_3568 = sub i32 %var_2_3562, %var_2_3567
  %var_2_3583 = lshr i32 %var_2_3568, 31
  %var_2_3585 = lshr i32 %var_2_3562, 31
  %var_2_3586 = lshr i32 %var_2_3567, 31
  %var_2_3587 = xor i32 %var_2_3586, %var_2_3585
  %var_2_3588 = xor i32 %var_2_3583, %var_2_3585
  %var_2_3589 = add nuw nsw i32 %var_2_3588, %var_2_3587
  %var_2_3590 = icmp eq i32 %var_2_3589, 2
  %var_2_3592 = icmp ne i32 %var_2_3583, 0
  %var_2_3593 = xor i1 %var_2_3592, %var_2_3590
  br i1 %var_2_3593, label %block_402462, label %block_4027b6.loopexit

block_40212a.loopexit:                            ; preds = %block_4020a5
  br label %block_40212a

block_40212a:                                     ; preds = %block_40212a.loopexit, %block_402089, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %var_2_3611 = add i64 %var_2_101, -64
  %var_2_3613 = inttoptr i64 %var_2_3611 to i32*
  %var_2_3614 = load i32, i32* %var_2_3613, align 4
  %var_2_3617 = sext i32 %var_2_3614 to i64
  %var_2_3620 = sdiv i64 %var_2_251, %var_2_3617
  %var_2_3621 = shl i64 %var_2_3620, 32
  %var_2_3622 = ashr exact i64 %var_2_3621, 32
  %var_2_3623 = icmp eq i64 %var_2_3620, %var_2_3622
  br i1 %var_2_3623, label %var_2_3626, label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

var_2_3626:                                       ; preds = %block_40212a
  store i8 0, i8* %var_2_87, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %var_2_3626, %block_40212a
  %var_2_3643 = load i32, i32* %var_2_105, align 4
  %var_2_3644 = add i32 %var_2_3643, -4
  %var_2_3658 = lshr i32 %var_2_3644, 31
  %var_2_3660 = lshr i32 %var_2_3643, 31
  %var_2_3661 = xor i32 %var_2_3658, %var_2_3660
  %var_2_3662 = add nuw nsw i32 %var_2_3661, %var_2_3660
  %var_2_3663 = icmp eq i32 %var_2_3662, 2
  %var_2_3665 = icmp ne i32 %var_2_3658, 0
  %var_2_3666 = xor i1 %var_2_3665, %var_2_3663
  br i1 %var_2_3666, label %block_40224d, label %block_40214a

block_402089:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %var_2_3710 = icmp eq i32 %var_2_275, 0
  %var_2_3711 = zext i1 %var_2_3710 to i8
  store i8 %var_2_3711, i8* %var_2_87, align 1
  %var_2_367074 = add i64 %var_2_101, -48
  %var_2_367275 = inttoptr i64 %var_2_367074 to i32*
  %var_2_367376 = load i32, i32* %var_2_367275, align 4
  %var_2_367577 = add i64 %var_2_101, -4
  %var_2_367778 = inttoptr i64 %var_2_367577 to i32*
  %var_2_367879 = load i32, i32* %var_2_367778, align 4
  %var_2_367980 = sub i32 %var_2_367376, %var_2_367879
  %var_2_369481 = lshr i32 %var_2_367980, 31
  %var_2_369682 = lshr i32 %var_2_367376, 31
  %var_2_369783 = lshr i32 %var_2_367879, 31
  %var_2_369884 = xor i32 %var_2_369783, %var_2_369682
  %var_2_369985 = xor i32 %var_2_369481, %var_2_369682
  %var_2_370086 = add nuw nsw i32 %var_2_369985, %var_2_369884
  %var_2_370187 = icmp eq i32 %var_2_370086, 2
  %var_2_370388 = icmp ne i32 %var_2_369481, 0
  %var_2_370489 = xor i1 %var_2_370388, %var_2_370187
  br i1 %var_2_370489, label %block_4020a5.preheader, label %block_40212a

block_4020a5.preheader:                           ; preds = %block_402089
  %var_2_3238 = add i64 %var_2_101, -24
  %var_2_3240 = inttoptr i64 %var_2_3238 to i32*
  br label %block_4020a5

block_402015:                                     ; preds = %block_402015, %block_402015.preheader
  %var_2_3797 = load i32, i32* %var_2_3796, align 4
  %var_2_3798 = zext i32 %var_2_3797 to i64
  store i64 %var_2_3798, i64* %RDX, align 8
  %var_2_3800 = load i32, i32* %var_2_105, align 4
  %var_2_3801 = sext i32 %var_2_3797 to i64
  %var_2_3802 = sext i32 %var_2_3800 to i64
  %var_2_3803 = mul nsw i64 %var_2_3802, %var_2_3801
  %var_2_3805 = and i64 %var_2_3803, 4294967295
  store i64 %var_2_3805, i64* %RDX, align 8
  %var_2_3818 = trunc i64 %var_2_3803 to i32
  %var_2_3819 = load i32, i32* %var_2_293793, align 4
  %var_2_3820 = add i32 %var_2_3818, %var_2_3819
  %var_2_3821 = zext i32 %var_2_3820 to i64
  store i64 %var_2_3821, i64* %RDX, align 8
  %var_2_2938 = load i32, i32* %var_2_293793, align 4
  %var_2_2943 = load i32, i32* %var_2_294296, align 4
  %var_2_2944 = sub i32 %var_2_2938, %var_2_2943
  %var_2_2959 = lshr i32 %var_2_2944, 31
  %var_2_2961 = lshr i32 %var_2_2938, 31
  %var_2_2962 = lshr i32 %var_2_2943, 31
  %var_2_2963 = xor i32 %var_2_2962, %var_2_2961
  %var_2_2964 = xor i32 %var_2_2959, %var_2_2961
  %var_2_2965 = add nuw nsw i32 %var_2_2964, %var_2_2963
  %var_2_2966 = icmp eq i32 %var_2_2965, 2
  %var_2_2968 = icmp ne i32 %var_2_2959, 0
  %var_2_2969 = xor i1 %var_2_2968, %var_2_2966
  br i1 %var_2_2969, label %block_402015, label %block_402069.loopexit

block_40214a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %var_2_314656 = add i64 %var_2_101, -48
  %var_2_314857 = inttoptr i64 %var_2_314656 to i32*
  %var_2_314958 = load i32, i32* %var_2_314857, align 4
  %var_2_315159 = add i64 %var_2_101, -4
  %var_2_315360 = inttoptr i64 %var_2_315159 to i32*
  %var_2_315461 = load i32, i32* %var_2_315360, align 4
  %var_2_315562 = sub i32 %var_2_314958, %var_2_315461
  %var_2_317063 = lshr i32 %var_2_315562, 31
  %var_2_317264 = lshr i32 %var_2_314958, 31
  %var_2_317365 = lshr i32 %var_2_315461, 31
  %var_2_317466 = xor i32 %var_2_317365, %var_2_317264
  %var_2_317567 = xor i32 %var_2_317063, %var_2_317264
  %var_2_317668 = add nuw nsw i32 %var_2_317567, %var_2_317466
  %var_2_317769 = icmp eq i32 %var_2_317668, 2
  %var_2_317970 = icmp ne i32 %var_2_317063, 0
  %var_2_318071 = xor i1 %var_2_317970, %var_2_317769
  br i1 %var_2_318071, label %block_402166.preheader, label %block_40224d

block_402166.preheader:                           ; preds = %block_40214a
  %var_2_2378 = add i64 %var_2_101, -24
  %var_2_2380 = inttoptr i64 %var_2_2378 to i32*
  br label %block_402166

block_402289:                                     ; preds = %block_402289, %block_402289.preheader
  %var_2_4032 = load i32, i32* %var_2_4031, align 4
  %var_2_4033 = zext i32 %var_2_4032 to i64
  store i64 %var_2_4033, i64* %RDX, align 8
  %var_2_4156 = load i32, i32* %var_2_4031, align 4
  %var_2_4157 = zext i32 %var_2_4156 to i64
  store i64 %var_2_4157, i64* %RDX, align 8
  %var_2_4281 = load i32, i32* %var_2_4031, align 4
  %var_2_4282 = zext i32 %var_2_4281 to i64
  store i64 %var_2_4282, i64* %RDX, align 8
  %var_2_4405 = load i32, i32* %var_2_4031, align 4
  %var_2_4406 = zext i32 %var_2_4405 to i64
  store i64 %var_2_4406, i64* %RDX, align 8
  %var_2_4494 = load i32, i32* %var_2_105, align 4
  %var_2_4495 = add i32 %var_2_4494, -3
  %var_2_4496 = zext i32 %var_2_4495 to i64
  store i64 %var_2_4496, i64* %RDX, align 8
  %var_2_4530 = load i32, i32* %var_2_4031, align 4
  %var_2_4531 = zext i32 %var_2_4530 to i64
  store i64 %var_2_4531, i64* %RDX, align 8
  %var_2_4533 = load i32, i32* %var_2_105, align 4
  %var_2_4534 = add i32 %var_2_4533, -3
  %var_2_4536 = sext i32 %var_2_4530 to i64
  %var_2_4537 = sext i32 %var_2_4534 to i64
  %var_2_4538 = mul nsw i64 %var_2_4537, %var_2_4536
  %var_2_4540 = and i64 %var_2_4538, 4294967295
  store i64 %var_2_4540, i64* %RDX, align 8
  %var_2_4555 = trunc i64 %var_2_4538 to i32
  %var_2_4557 = load i32, i32* %var_2_13539, align 4
  %var_2_4558 = add i32 %var_2_4555, %var_2_4557
  %var_2_4559 = zext i32 %var_2_4558 to i64
  store i64 %var_2_4559, i64* %RDX, align 8
  %var_2_4617 = load i32, i32* %var_2_105, align 4
  %var_2_4618 = add i32 %var_2_4617, -2
  %var_2_4619 = zext i32 %var_2_4618 to i64
  store i64 %var_2_4619, i64* %RDX, align 8
  %var_2_4654 = load i32, i32* %var_2_4031, align 4
  %var_2_4655 = zext i32 %var_2_4654 to i64
  store i64 %var_2_4655, i64* %RDX, align 8
  %var_2_4659 = load i32, i32* %var_2_105, align 4
  %var_2_4660 = add i32 %var_2_4659, -2
  %var_2_4662 = sext i32 %var_2_4654 to i64
  %var_2_4663 = sext i32 %var_2_4660 to i64
  %var_2_4664 = mul nsw i64 %var_2_4663, %var_2_4662
  %var_2_4666 = and i64 %var_2_4664, 4294967295
  store i64 %var_2_4666, i64* %RDX, align 8
  %var_2_4680 = trunc i64 %var_2_4664 to i32
  %var_2_4682 = load i32, i32* %var_2_13539, align 4
  %var_2_4683 = add i32 %var_2_4680, %var_2_4682
  %var_2_4684 = zext i32 %var_2_4683 to i64
  store i64 %var_2_4684, i64* %RDX, align 8
  %var_2_4743 = load i32, i32* %var_2_105, align 4
  %var_2_4744 = add i32 %var_2_4743, -1
  %var_2_4745 = zext i32 %var_2_4744 to i64
  store i64 %var_2_4745, i64* %RDX, align 8
  %var_2_4779 = load i32, i32* %var_2_4031, align 4
  %var_2_4780 = zext i32 %var_2_4779 to i64
  store i64 %var_2_4780, i64* %RDX, align 8
  %var_2_4782 = load i32, i32* %var_2_105, align 4
  %var_2_4783 = add i32 %var_2_4782, -1
  %var_2_4785 = sext i32 %var_2_4779 to i64
  %var_2_4786 = sext i32 %var_2_4783 to i64
  %var_2_4787 = mul nsw i64 %var_2_4786, %var_2_4785
  %var_2_4789 = and i64 %var_2_4787, 4294967295
  store i64 %var_2_4789, i64* %RDX, align 8
  %var_2_4804 = trunc i64 %var_2_4787 to i32
  %var_2_4806 = load i32, i32* %var_2_13539, align 4
  %var_2_4807 = add i32 %var_2_4804, %var_2_4806
  %var_2_4808 = zext i32 %var_2_4807 to i64
  store i64 %var_2_4808, i64* %RDX, align 8
  %var_2_4881 = load i32, i32* %var_2_4031, align 4
  %var_2_4882 = zext i32 %var_2_4881 to i64
  store i64 %var_2_4882, i64* %RDX, align 8
  %var_2_4886 = load i32, i32* %var_2_105, align 4
  %var_2_4887 = sext i32 %var_2_4881 to i64
  %var_2_4888 = sext i32 %var_2_4886 to i64
  %var_2_4889 = mul nsw i64 %var_2_4888, %var_2_4887
  %var_2_4891 = and i64 %var_2_4889, 4294967295
  store i64 %var_2_4891, i64* %RDX, align 8
  %var_2_4905 = trunc i64 %var_2_4889 to i32
  %var_2_4907 = load i32, i32* %var_2_13539, align 4
  %var_2_4908 = add i32 %var_2_4905, %var_2_4907
  %var_2_4909 = zext i32 %var_2_4908 to i64
  store i64 %var_2_4909, i64* %RDX, align 8
  %var_2_136 = load i32, i32* %var_2_13539, align 4
  %var_2_141 = load i32, i32* %var_2_14042, align 4
  %var_2_142 = sub i32 %var_2_136, %var_2_141
  %var_2_157 = lshr i32 %var_2_142, 31
  %var_2_159 = lshr i32 %var_2_136, 31
  %var_2_160 = lshr i32 %var_2_141, 31
  %var_2_161 = xor i32 %var_2_160, %var_2_159
  %var_2_162 = xor i32 %var_2_157, %var_2_159
  %var_2_163 = add nuw nsw i32 %var_2_162, %var_2_161
  %var_2_164 = icmp eq i32 %var_2_163, 2
  %var_2_166 = icmp ne i32 %var_2_157, 0
  %var_2_167 = xor i1 %var_2_166, %var_2_164
  br i1 %var_2_167, label %block_402289, label %block_402434.loopexit
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402e34__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_402e34:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2432
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #10
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2446
  store i8 %10, i8* %11, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2448
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2449
  store i8 %19, i8* %20, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402b50_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_402b50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i32, i32* %EDI, align 4
  %16 = add i64 %13, 6
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %17, align 4
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -20
  %26 = load i32, i32* %EDX, align 4
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 3
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %29, align 4
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = icmp eq i32 %35, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = and i32 %36, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #10
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2446
  %46 = xor i32 %36, %35
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i32 %36, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %36, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = lshr i32 %35, 31
  %58 = xor i32 %54, %57
  %59 = add nuw nsw i32 %58, %57
  %60 = icmp eq i32 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = icmp ne i8 %55, 0
  %64 = xor i1 %63, %60
  %.v = select i1 %64, i64 10, i64 22
  %65 = add i64 %.v, %32
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  br i1 %64, label %block_402b68, label %block_402b74

block_402bd3:                                     ; preds = %block_402bc7
  %66 = add i64 %606, -16
  %67 = add i64 %642, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = add i64 %606, -32
  %71 = add i64 %642, 8
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  store i64 %74, i64* %RCX, align 8, !tbaa !2428
  %75 = shl nsw i64 %74, 2
  %76 = add i64 %75, %69
  %77 = add i64 %642, 13
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to float*
  %79 = load float, float* %78, align 4
  %80 = fpext float %79 to double
  %81 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %82 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %83 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %84 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %81, i32* %417, align 1, !tbaa !2451
  store i32 %82, i32* %419, align 1, !tbaa !2451
  store i32 %83, i32* %421, align 1, !tbaa !2451
  store i32 %84, i32* %423, align 1, !tbaa !2451
  %85 = bitcast double %80 to i64
  %86 = load i64, i64* %425, align 1
  %87 = load i64, i64* %427, align 1
  %88 = load i64, i64* %420, align 1
  %89 = and i64 %87, %85
  %90 = and i64 %88, %86
  %91 = trunc i64 %89 to i32
  %92 = lshr i64 %89, 32
  %93 = trunc i64 %92 to i32
  store i32 %91, i32* %435, align 1, !tbaa !2453
  store i32 %93, i32* %437, align 1, !tbaa !2453
  %94 = trunc i64 %90 to i32
  store i32 %94, i32* %439, align 1, !tbaa !2453
  %95 = lshr i64 %90, 32
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %443, align 1, !tbaa !2453
  %97 = add i64 %606, -24
  %98 = add i64 %642, 29
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to float*
  %100 = load float, float* %99, align 4
  %101 = fpext float %100 to double
  store double %101, double* %503, align 1, !tbaa !2454
  %102 = add i64 %642, 33
  store i64 %102, i64* %PC, align 8
  %103 = load double, double* %411, align 1
  %104 = fcmp uno double %103, %101
  br i1 %104, label %105, label %115

; <label>:105:                                    ; preds = %block_402bd3
  %106 = fadd double %101, %103
  %107 = bitcast double %106 to i64
  %108 = and i64 %107, 9221120237041090560
  %109 = icmp eq i64 %108, 9218868437227405312
  %110 = and i64 %107, 2251799813685247
  %111 = icmp ne i64 %110, 0
  %112 = and i1 %109, %111
  br i1 %112, label %113, label %121

; <label>:113:                                    ; preds = %105
  %114 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %102, %struct.Memory* %MEMORY.3) #13
  %.pre17 = load i64, i64* %PC, align 8
  %.pre18 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre19 = load i8, i8* %53, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:115:                                    ; preds = %block_402bd3
  %116 = fcmp ogt double %103, %101
  br i1 %116, label %121, label %117

; <label>:117:                                    ; preds = %115
  %118 = fcmp olt double %103, %101
  br i1 %118, label %121, label %119

; <label>:119:                                    ; preds = %117
  %120 = fcmp oeq double %103, %101
  br i1 %120, label %121, label %125

; <label>:121:                                    ; preds = %119, %117, %115, %105
  %122 = phi i8 [ 0, %115 ], [ 0, %117 ], [ 1, %119 ], [ 1, %105 ]
  %123 = phi i8 [ 0, %115 ], [ 0, %117 ], [ 0, %119 ], [ 1, %105 ]
  %124 = phi i8 [ 0, %115 ], [ 1, %117 ], [ 0, %119 ], [ 1, %105 ]
  store i8 %122, i8* %53, align 1, !tbaa !2456
  store i8 %123, i8* %45, align 1, !tbaa !2456
  store i8 %124, i8* %39, align 1, !tbaa !2456
  br label %125

; <label>:125:                                    ; preds = %121, %119
  %126 = phi i8 [ %122, %121 ], [ %630, %119 ]
  %127 = phi i8 [ %124, %121 ], [ %618, %119 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %125, %113
  %128 = phi i8 [ %.pre19, %113 ], [ %126, %125 ]
  %129 = phi i8 [ %.pre18, %113 ], [ %127, %125 ]
  %130 = phi i64 [ %.pre17, %113 ], [ %102, %125 ]
  %131 = phi %struct.Memory* [ %114, %113 ], [ %MEMORY.3, %125 ]
  %132 = or i8 %129, %128
  %133 = icmp ne i8 %132, 0
  %.v30 = select i1 %133, i64 45, i64 6
  %134 = add i64 %.v30, %130
  store i64 %134, i64* %PC, align 8, !tbaa !2428
  br i1 %133, label %block_402c21, label %block_402bfa

block_402bfa:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -28
  %137 = add i64 %134, 3
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i32*
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = add i64 %135, -36
  %142 = add i64 %134, 6
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i32*
  store i32 %139, i32* %143, align 4
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -16
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC, align 8
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %RCX, align 8, !tbaa !2428
  %150 = add i64 %144, -32
  %151 = add i64 %146, 8
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = sext i32 %153 to i64
  store i64 %154, i64* %RDX, align 8, !tbaa !2428
  %155 = shl nsw i64 %154, 2
  %156 = add i64 %155, %149
  %157 = add i64 %146, 13
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to float*
  %159 = load float, float* %158, align 4
  %160 = fpext float %159 to double
  %161 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %162 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %163 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %164 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %161, i32* %417, align 1, !tbaa !2451
  store i32 %162, i32* %419, align 1, !tbaa !2451
  store i32 %163, i32* %421, align 1, !tbaa !2451
  store i32 %164, i32* %423, align 1, !tbaa !2451
  %165 = bitcast double %160 to i64
  %166 = load i64, i64* %425, align 1
  %167 = load i64, i64* %427, align 1
  %168 = load i64, i64* %420, align 1
  %169 = and i64 %167, %165
  %170 = and i64 %168, %166
  %171 = trunc i64 %169 to i32
  %172 = lshr i64 %169, 32
  %173 = trunc i64 %172 to i32
  store i32 %171, i32* %435, align 1, !tbaa !2453
  store i32 %173, i32* %437, align 1, !tbaa !2453
  %174 = trunc i64 %170 to i32
  store i32 %174, i32* %439, align 1, !tbaa !2453
  %175 = lshr i64 %170, 32
  %176 = trunc i64 %175 to i32
  store i32 %176, i32* %443, align 1, !tbaa !2453
  %177 = load <2 x i32>, <2 x i32>* %444, align 1
  %178 = load <2 x i32>, <2 x i32>* %446, align 1
  %.cast12 = bitcast <2 x i32> %177 to double
  %179 = fptrunc double %.cast12 to float
  store float %179, float* %449, align 1, !tbaa !2451
  %180 = extractelement <2 x i32> %177, i32 1
  store i32 %180, i32* %437, align 1, !tbaa !2451
  %181 = extractelement <2 x i32> %178, i32 0
  store i32 %181, i32* %439, align 1, !tbaa !2451
  %182 = extractelement <2 x i32> %178, i32 1
  store i32 %182, i32* %443, align 1, !tbaa !2451
  %183 = add i64 %144, -24
  %184 = add i64 %146, 33
  store i64 %184, i64* %PC, align 8
  %185 = load <2 x float>, <2 x float>* %455, align 1
  %186 = extractelement <2 x float> %185, i32 0
  %187 = inttoptr i64 %183 to float*
  store float %186, float* %187, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_402c21

block_402cdf:                                     ; preds = %block_402cd9, %block_402b68, %block_402b7e
  %188 = phi i64 [ %.pre26, %block_402cd9 ], [ %328, %block_402b7e ], [ %604, %block_402b68 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_402cd9 ], [ %2, %block_402b7e ], [ %2, %block_402b68 ]
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -4
  %191 = add i64 %188, 3
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i32*
  %193 = load i32, i32* %192, align 4
  %194 = zext i32 %193 to i64
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %188, 4
  store i64 %195, i64* %PC, align 8
  %196 = load i64, i64* %9, align 8, !tbaa !2428
  %197 = add i64 %196, 8
  %198 = inttoptr i64 %196 to i64*
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %RBP, align 8, !tbaa !2428
  store i64 %197, i64* %9, align 8, !tbaa !2428
  %200 = add i64 %188, 5
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %197 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %PC, align 8, !tbaa !2428
  %203 = add i64 %196, 16
  store i64 %203, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402c9a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %204 = load i64, i64* %RBP, align 8
  %205 = add i64 %204, -28
  %206 = add i64 %323, 3
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to i32*
  %208 = load i32, i32* %207, align 4
  %209 = zext i32 %208 to i64
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = add i64 %204, -36
  %211 = add i64 %323, 6
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i32*
  store i32 %208, i32* %212, align 4
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -16
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %214 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = add i64 %213, -28
  %220 = add i64 %215, 8
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = sext i32 %222 to i64
  store i64 %223, i64* %RDX, align 8, !tbaa !2428
  %224 = shl nsw i64 %223, 2
  %225 = add i64 %224, %218
  %226 = add i64 %215, 13
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to float*
  %228 = load float, float* %227, align 4
  %229 = fpext float %228 to double
  %230 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %231 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %232 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %233 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %230, i32* %349, align 1, !tbaa !2451
  store i32 %231, i32* %351, align 1, !tbaa !2451
  store i32 %232, i32* %353, align 1, !tbaa !2451
  store i32 %233, i32* %355, align 1, !tbaa !2451
  %234 = bitcast double %229 to i64
  %235 = load i64, i64* %357, align 1
  %236 = load i64, i64* %359, align 1
  %237 = load i64, i64* %352, align 1
  %238 = and i64 %236, %234
  %239 = and i64 %237, %235
  %240 = trunc i64 %238 to i32
  %241 = lshr i64 %238, 32
  %242 = trunc i64 %241 to i32
  store i32 %240, i32* %367, align 1, !tbaa !2453
  store i32 %242, i32* %369, align 1, !tbaa !2453
  %243 = trunc i64 %239 to i32
  store i32 %243, i32* %371, align 1, !tbaa !2453
  %244 = lshr i64 %239, 32
  %245 = trunc i64 %244 to i32
  store i32 %245, i32* %375, align 1, !tbaa !2453
  %246 = load <2 x i32>, <2 x i32>* %376, align 1
  %247 = load <2 x i32>, <2 x i32>* %378, align 1
  %.cast14 = bitcast <2 x i32> %246 to double
  %248 = fptrunc double %.cast14 to float
  store float %248, float* %381, align 1, !tbaa !2451
  %249 = extractelement <2 x i32> %246, i32 1
  store i32 %249, i32* %369, align 1, !tbaa !2451
  %250 = extractelement <2 x i32> %247, i32 0
  store i32 %250, i32* %371, align 1, !tbaa !2451
  %251 = extractelement <2 x i32> %247, i32 1
  store i32 %251, i32* %375, align 1, !tbaa !2451
  %252 = add i64 %213, -24
  %253 = add i64 %215, 33
  store i64 %253, i64* %PC, align 8
  %254 = load <2 x float>, <2 x float>* %387, align 1
  %255 = extractelement <2 x float> %254, i32 0
  %256 = inttoptr i64 %252 to float*
  store float %255, float* %256, align 4
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_402cc1

block_402c73:                                     ; preds = %block_402c67
  %257 = add i64 %505, -16
  %258 = add i64 %541, 4
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = add i64 %541, 8
  store i64 %261, i64* %PC, align 8
  %262 = load i32, i32* %508, align 4
  %263 = sext i32 %262 to i64
  store i64 %263, i64* %RCX, align 8, !tbaa !2428
  %264 = shl nsw i64 %263, 2
  %265 = add i64 %264, %260
  %266 = add i64 %541, 13
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to float*
  %268 = load float, float* %267, align 4
  %269 = fpext float %268 to double
  %270 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %271 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %272 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %273 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  store i32 %270, i32* %349, align 1, !tbaa !2451
  store i32 %271, i32* %351, align 1, !tbaa !2451
  store i32 %272, i32* %353, align 1, !tbaa !2451
  store i32 %273, i32* %355, align 1, !tbaa !2451
  %274 = bitcast double %269 to i64
  %275 = load i64, i64* %357, align 1
  %276 = load i64, i64* %359, align 1
  %277 = load i64, i64* %352, align 1
  %278 = and i64 %276, %274
  %279 = and i64 %277, %275
  %280 = trunc i64 %278 to i32
  %281 = lshr i64 %278, 32
  %282 = trunc i64 %281 to i32
  store i32 %280, i32* %367, align 1, !tbaa !2453
  store i32 %282, i32* %369, align 1, !tbaa !2453
  %283 = trunc i64 %279 to i32
  store i32 %283, i32* %371, align 1, !tbaa !2453
  %284 = lshr i64 %279, 32
  %285 = trunc i64 %284 to i32
  store i32 %285, i32* %375, align 1, !tbaa !2453
  %286 = add i64 %505, -24
  %287 = add i64 %541, 29
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to float*
  %289 = load float, float* %288, align 4
  %290 = fpext float %289 to double
  store double %290, double* %396, align 1, !tbaa !2454
  %291 = add i64 %541, 33
  store i64 %291, i64* %PC, align 8
  %292 = load double, double* %343, align 1
  %293 = fcmp uno double %292, %290
  br i1 %293, label %294, label %304

; <label>:294:                                    ; preds = %block_402c73
  %295 = fadd double %290, %292
  %296 = bitcast double %295 to i64
  %297 = and i64 %296, 9221120237041090560
  %298 = icmp eq i64 %297, 9218868437227405312
  %299 = and i64 %296, 2251799813685247
  %300 = icmp ne i64 %299, 0
  %301 = and i1 %298, %300
  br i1 %301, label %302, label %310

; <label>:302:                                    ; preds = %294
  %303 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %291, %struct.Memory* %MEMORY.1) #13
  %.pre22 = load i64, i64* %PC, align 8
  %.pre23 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre24 = load i8, i8* %53, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:304:                                    ; preds = %block_402c73
  %305 = fcmp ogt double %292, %290
  br i1 %305, label %310, label %306

; <label>:306:                                    ; preds = %304
  %307 = fcmp olt double %292, %290
  br i1 %307, label %310, label %308

; <label>:308:                                    ; preds = %306
  %309 = fcmp oeq double %292, %290
  br i1 %309, label %310, label %314

; <label>:310:                                    ; preds = %308, %306, %304, %294
  %311 = phi i8 [ 0, %304 ], [ 0, %306 ], [ 1, %308 ], [ 1, %294 ]
  %312 = phi i8 [ 0, %304 ], [ 0, %306 ], [ 0, %308 ], [ 1, %294 ]
  %313 = phi i8 [ 0, %304 ], [ 1, %306 ], [ 0, %308 ], [ 1, %294 ]
  store i8 %311, i8* %53, align 1, !tbaa !2456
  store i8 %312, i8* %45, align 1, !tbaa !2456
  store i8 %313, i8* %39, align 1, !tbaa !2456
  br label %314

; <label>:314:                                    ; preds = %310, %308
  %315 = phi i8 [ %311, %310 ], [ %529, %308 ]
  %316 = phi i8 [ %313, %310 ], [ %517, %308 ]
  store i8 0, i8* %62, align 1, !tbaa !2456
  store i8 0, i8* %56, align 1, !tbaa !2456
  store i8 0, i8* %50, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %314, %302
  %317 = phi i8 [ %.pre24, %302 ], [ %315, %314 ]
  %318 = phi i8 [ %.pre23, %302 ], [ %316, %314 ]
  %319 = phi i64 [ %.pre22, %302 ], [ %291, %314 ]
  %320 = phi %struct.Memory* [ %303, %302 ], [ %MEMORY.1, %314 ]
  %321 = or i8 %318, %317
  %322 = icmp ne i8 %321, 0
  %.v32 = select i1 %322, i64 45, i64 6
  %323 = add i64 %.v32, %319
  store i64 %323, i64* %PC, align 8, !tbaa !2428
  br i1 %322, label %block_402cc1, label %block_402c9a

block_402b7e:                                     ; preds = %block_402b74
  %324 = add i64 %30, -4
  %325 = add i64 %666, 7
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i32*
  store i32 0, i32* %326, align 4
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 346
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  br label %block_402cdf

block_402c3d:                                     ; preds = %block_402b8a
  %329 = add i64 %30, -36
  %330 = add i64 %567, 7
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i32*
  store i32 0, i32* %331, align 4
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -16
  %334 = load i64, i64* %PC, align 8
  %335 = add i64 %334, 4
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %333 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %339 = add i64 %334, 8
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %337 to float*
  %341 = load float, float* %340, align 4
  %342 = fpext float %341 to double
  %343 = bitcast [32 x %union.VectorReg]* %5 to double*
  %344 = bitcast %union.VectorReg* %6 to i8*
  %345 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %346 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %347 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %348 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  %349 = bitcast %union.VectorReg* %6 to i32*
  store i32 %345, i32* %349, align 1, !tbaa !2451
  %350 = getelementptr inbounds i8, i8* %344, i64 4
  %351 = bitcast i8* %350 to i32*
  store i32 %346, i32* %351, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %353 = bitcast i64* %352 to i32*
  store i32 %347, i32* %353, align 1, !tbaa !2451
  %354 = getelementptr inbounds i8, i8* %344, i64 12
  %355 = bitcast i8* %354 to i32*
  store i32 %348, i32* %355, align 1, !tbaa !2451
  %356 = bitcast double %342 to i64
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %358 = load i64, i64* %357, align 1
  %359 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %360 = load i64, i64* %359, align 1
  %361 = load i64, i64* %352, align 1
  %362 = and i64 %360, %356
  %363 = and i64 %361, %358
  %364 = trunc i64 %362 to i32
  %365 = lshr i64 %362, 32
  %366 = trunc i64 %365 to i32
  %367 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %364, i32* %367, align 1, !tbaa !2453
  %368 = getelementptr inbounds i8, i8* %338, i64 4
  %369 = bitcast i8* %368 to i32*
  store i32 %366, i32* %369, align 1, !tbaa !2453
  %370 = trunc i64 %363 to i32
  %371 = bitcast i64* %357 to i32*
  store i32 %370, i32* %371, align 1, !tbaa !2453
  %372 = lshr i64 %363, 32
  %373 = trunc i64 %372 to i32
  %374 = getelementptr inbounds i8, i8* %338, i64 12
  %375 = bitcast i8* %374 to i32*
  store i32 %373, i32* %375, align 1, !tbaa !2453
  %376 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %377 = load <2 x i32>, <2 x i32>* %376, align 1
  %378 = bitcast i64* %357 to <2 x i32>*
  %379 = load <2 x i32>, <2 x i32>* %378, align 1
  %.cast13 = bitcast <2 x i32> %377 to double
  %380 = fptrunc double %.cast13 to float
  %381 = bitcast [32 x %union.VectorReg]* %5 to float*
  store float %380, float* %381, align 1, !tbaa !2451
  %382 = extractelement <2 x i32> %377, i32 1
  store i32 %382, i32* %369, align 1, !tbaa !2451
  %383 = extractelement <2 x i32> %379, i32 0
  store i32 %383, i32* %371, align 1, !tbaa !2451
  %384 = extractelement <2 x i32> %379, i32 1
  store i32 %384, i32* %375, align 1, !tbaa !2451
  %385 = add i64 %332, -24
  %386 = add i64 %334, 28
  store i64 %386, i64* %PC, align 8
  %387 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %388 = load <2 x float>, <2 x float>* %387, align 1
  %389 = extractelement <2 x float> %388, i32 0
  %390 = inttoptr i64 %385 to float*
  store float %389, float* %390, align 4
  %391 = load i64, i64* %RBP, align 8
  %392 = add i64 %391, -28
  %393 = load i64, i64* %PC, align 8
  %394 = add i64 %393, 7
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %392 to i32*
  store i32 1, i32* %395, align 4
  %396 = bitcast %union.VectorReg* %6 to double*
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_402c67

block_402b94:                                     ; preds = %block_402b8a
  %397 = add i64 %30, -32
  %398 = add i64 %567, 7
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %397 to i32*
  store i32 1, i32* %399, align 4
  %400 = load i64, i64* %RBP, align 8
  %401 = add i64 %400, -16
  %402 = load i64, i64* %PC, align 8
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404, align 8
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %407 = add i64 %402, 8
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %405 to float*
  %409 = load float, float* %408, align 4
  %410 = fpext float %409 to double
  %411 = bitcast [32 x %union.VectorReg]* %5 to double*
  %412 = bitcast %union.VectorReg* %6 to i8*
  %413 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 96) to i32*), align 16
  %414 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 100) to i32*), align 4
  %415 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 104) to i32*), align 8
  %416 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 108) to i32*), align 4
  %417 = bitcast %union.VectorReg* %6 to i32*
  store i32 %413, i32* %417, align 1, !tbaa !2451
  %418 = getelementptr inbounds i8, i8* %412, i64 4
  %419 = bitcast i8* %418 to i32*
  store i32 %414, i32* %419, align 1, !tbaa !2451
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %421 = bitcast i64* %420 to i32*
  store i32 %415, i32* %421, align 1, !tbaa !2451
  %422 = getelementptr inbounds i8, i8* %412, i64 12
  %423 = bitcast i8* %422 to i32*
  store i32 %416, i32* %423, align 1, !tbaa !2451
  %424 = bitcast double %410 to i64
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %426 = load i64, i64* %425, align 1
  %427 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %428 = load i64, i64* %427, align 1
  %429 = load i64, i64* %420, align 1
  %430 = and i64 %428, %424
  %431 = and i64 %429, %426
  %432 = trunc i64 %430 to i32
  %433 = lshr i64 %430, 32
  %434 = trunc i64 %433 to i32
  %435 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %432, i32* %435, align 1, !tbaa !2453
  %436 = getelementptr inbounds i8, i8* %406, i64 4
  %437 = bitcast i8* %436 to i32*
  store i32 %434, i32* %437, align 1, !tbaa !2453
  %438 = trunc i64 %431 to i32
  %439 = bitcast i64* %425 to i32*
  store i32 %438, i32* %439, align 1, !tbaa !2453
  %440 = lshr i64 %431, 32
  %441 = trunc i64 %440 to i32
  %442 = getelementptr inbounds i8, i8* %406, i64 12
  %443 = bitcast i8* %442 to i32*
  store i32 %441, i32* %443, align 1, !tbaa !2453
  %444 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %445 = load <2 x i32>, <2 x i32>* %444, align 1
  %446 = bitcast i64* %425 to <2 x i32>*
  %447 = load <2 x i32>, <2 x i32>* %446, align 1
  %.cast = bitcast <2 x i32> %445 to double
  %448 = fptrunc double %.cast to float
  %449 = bitcast [32 x %union.VectorReg]* %5 to float*
  store float %448, float* %449, align 1, !tbaa !2451
  %450 = extractelement <2 x i32> %445, i32 1
  store i32 %450, i32* %437, align 1, !tbaa !2451
  %451 = extractelement <2 x i32> %447, i32 0
  store i32 %451, i32* %439, align 1, !tbaa !2451
  %452 = extractelement <2 x i32> %447, i32 1
  store i32 %452, i32* %443, align 1, !tbaa !2451
  %453 = add i64 %400, -24
  %454 = add i64 %402, 28
  store i64 %454, i64* %PC, align 8
  %455 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %456 = load <2 x float>, <2 x float>* %455, align 1
  %457 = extractelement <2 x float> %456, i32 0
  %458 = inttoptr i64 %453 to float*
  store float %457, float* %458, align 4
  %459 = load i64, i64* %RBP, align 8
  %460 = add i64 %459, -32
  %461 = load i64, i64* %PC, align 8
  %462 = add i64 %461, 3
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %460 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = zext i32 %464 to i64
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = add i64 %459, -20
  %467 = add i64 %461, 6
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i32*
  %469 = load i32, i32* %468, align 4
  %470 = add i32 %469, %464
  %471 = zext i32 %470 to i64
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = icmp ult i32 %470, %464
  %473 = icmp ult i32 %470, %469
  %474 = or i1 %472, %473
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %39, align 1, !tbaa !2432
  %476 = and i32 %470, 255
  %477 = tail call i32 @llvm.ctpop.i32(i32 %476) #10
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = xor i8 %479, 1
  store i8 %480, i8* %45, align 1, !tbaa !2446
  %481 = xor i32 %469, %464
  %482 = xor i32 %481, %470
  %483 = lshr i32 %482, 4
  %484 = trunc i32 %483 to i8
  %485 = and i8 %484, 1
  store i8 %485, i8* %50, align 1, !tbaa !2447
  %486 = icmp eq i32 %470, 0
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %53, align 1, !tbaa !2448
  %488 = lshr i32 %470, 31
  %489 = trunc i32 %488 to i8
  store i8 %489, i8* %56, align 1, !tbaa !2449
  %490 = lshr i32 %464, 31
  %491 = lshr i32 %469, 31
  %492 = xor i32 %488, %490
  %493 = xor i32 %488, %491
  %494 = add nuw nsw i32 %492, %493
  %495 = icmp eq i32 %494, 2
  %496 = zext i1 %495 to i8
  store i8 %496, i8* %62, align 1, !tbaa !2450
  %497 = add i64 %461, 9
  store i64 %497, i64* %PC, align 8
  store i32 %470, i32* %463, align 4
  %498 = load i64, i64* %RBP, align 8
  %499 = add i64 %498, -28
  %500 = load i64, i64* %PC, align 8
  %501 = add i64 %500, 7
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %499 to i32*
  store i32 1, i32* %502, align 4
  %503 = bitcast %union.VectorReg* %6 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402bc7

block_402c67:                                     ; preds = %block_402cc1, %block_402c3d
  %504 = phi i64 [ %.pre21, %block_402c3d ], [ %599, %block_402cc1 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_402c3d ], [ %320, %block_402cc1 ]
  %505 = load i64, i64* %RBP, align 8
  %506 = add i64 %505, -28
  %507 = add i64 %504, 3
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i32*
  %509 = load i32, i32* %508, align 4
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = add i64 %505, -8
  %512 = add i64 %504, 6
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i32*
  %514 = load i32, i32* %513, align 4
  %515 = sub i32 %509, %514
  %516 = icmp ult i32 %509, %514
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %39, align 1, !tbaa !2432
  %518 = and i32 %515, 255
  %519 = tail call i32 @llvm.ctpop.i32(i32 %518) #10
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  store i8 %522, i8* %45, align 1, !tbaa !2446
  %523 = xor i32 %514, %509
  %524 = xor i32 %523, %515
  %525 = lshr i32 %524, 4
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  store i8 %527, i8* %50, align 1, !tbaa !2447
  %528 = icmp eq i32 %515, 0
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %53, align 1, !tbaa !2448
  %530 = lshr i32 %515, 31
  %531 = trunc i32 %530 to i8
  store i8 %531, i8* %56, align 1, !tbaa !2449
  %532 = lshr i32 %509, 31
  %533 = lshr i32 %514, 31
  %534 = xor i32 %533, %532
  %535 = xor i32 %530, %532
  %536 = add nuw nsw i32 %535, %534
  %537 = icmp eq i32 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %62, align 1, !tbaa !2450
  %539 = icmp ne i8 %531, 0
  %540 = xor i1 %539, %537
  %.v31 = select i1 %540, i64 12, i64 109
  %541 = add i64 %.v31, %504
  store i64 %541, i64* %PC, align 8, !tbaa !2428
  br i1 %540, label %block_402c73, label %block_402cd9.loopexit

block_402b8a:                                     ; preds = %block_402b74
  %542 = add i64 %30, -20
  %543 = add i64 %666, 4
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i32*
  %545 = load i32, i32* %544, align 4
  %546 = add i32 %545, -1
  %547 = icmp eq i32 %545, 0
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %39, align 1, !tbaa !2432
  %549 = and i32 %546, 255
  %550 = tail call i32 @llvm.ctpop.i32(i32 %549) #10
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  store i8 %553, i8* %45, align 1, !tbaa !2446
  %554 = xor i32 %546, %545
  %555 = lshr i32 %554, 4
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  store i8 %557, i8* %50, align 1, !tbaa !2447
  %558 = icmp eq i32 %546, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %53, align 1, !tbaa !2448
  %560 = lshr i32 %546, 31
  %561 = trunc i32 %560 to i8
  store i8 %561, i8* %56, align 1, !tbaa !2449
  %562 = lshr i32 %545, 31
  %563 = xor i32 %560, %562
  %564 = add nuw nsw i32 %563, %562
  %565 = icmp eq i32 %564, 2
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %62, align 1, !tbaa !2450
  %.v28 = select i1 %558, i64 179, i64 10
  %567 = add i64 %.v28, %666
  store i64 %567, i64* %PC, align 8, !tbaa !2428
  br i1 %558, label %block_402c3d, label %block_402b94

block_402cc1:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402c9a
  %568 = phi i64 [ %323, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %.pre25, %block_402c9a ]
  %569 = load i64, i64* %RBP, align 8
  %570 = add i64 %569, -28
  %571 = add i64 %568, 8
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i32*
  %573 = load i32, i32* %572, align 4
  %574 = add i32 %573, 1
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = icmp eq i32 %573, -1
  %577 = icmp eq i32 %574, 0
  %578 = or i1 %576, %577
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %39, align 1, !tbaa !2432
  %580 = and i32 %574, 255
  %581 = tail call i32 @llvm.ctpop.i32(i32 %580) #10
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = xor i8 %583, 1
  store i8 %584, i8* %45, align 1, !tbaa !2446
  %585 = xor i32 %574, %573
  %586 = lshr i32 %585, 4
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  store i8 %588, i8* %50, align 1, !tbaa !2447
  %589 = zext i1 %577 to i8
  store i8 %589, i8* %53, align 1, !tbaa !2448
  %590 = lshr i32 %574, 31
  %591 = trunc i32 %590 to i8
  store i8 %591, i8* %56, align 1, !tbaa !2449
  %592 = lshr i32 %573, 31
  %593 = xor i32 %590, %592
  %594 = add nuw nsw i32 %593, %590
  %595 = icmp eq i32 %594, 2
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %62, align 1, !tbaa !2450
  %597 = add i64 %568, 14
  store i64 %597, i64* %PC, align 8
  store i32 %574, i32* %572, align 4
  %598 = load i64, i64* %PC, align 8
  %599 = add i64 %598, -104
  store i64 %599, i64* %PC, align 8, !tbaa !2428
  br label %block_402c67

block_402b68:                                     ; preds = %block_402b50
  %600 = add i64 %30, -4
  %601 = add i64 %65, 7
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i32*
  store i32 -1, i32* %602, align 4
  %603 = load i64, i64* %PC, align 8
  %604 = add i64 %603, 368
  store i64 %604, i64* %PC, align 8, !tbaa !2428
  br label %block_402cdf

block_402bc7:                                     ; preds = %block_402c21, %block_402b94
  %605 = phi i64 [ %.pre, %block_402b94 ], [ %748, %block_402c21 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402b94 ], [ %131, %block_402c21 ]
  %606 = load i64, i64* %RBP, align 8
  %607 = add i64 %606, -28
  %608 = add i64 %605, 3
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %607 to i32*
  %610 = load i32, i32* %609, align 4
  %611 = zext i32 %610 to i64
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = add i64 %606, -8
  %613 = add i64 %605, 6
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i32*
  %615 = load i32, i32* %614, align 4
  %616 = sub i32 %610, %615
  %617 = icmp ult i32 %610, %615
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %39, align 1, !tbaa !2432
  %619 = and i32 %616, 255
  %620 = tail call i32 @llvm.ctpop.i32(i32 %619) #10
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = xor i8 %622, 1
  store i8 %623, i8* %45, align 1, !tbaa !2446
  %624 = xor i32 %615, %610
  %625 = xor i32 %624, %616
  %626 = lshr i32 %625, 4
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %50, align 1, !tbaa !2447
  %629 = icmp eq i32 %616, 0
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %53, align 1, !tbaa !2448
  %631 = lshr i32 %616, 31
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %56, align 1, !tbaa !2449
  %633 = lshr i32 %610, 31
  %634 = lshr i32 %615, 31
  %635 = xor i32 %634, %633
  %636 = xor i32 %631, %633
  %637 = add nuw nsw i32 %636, %635
  %638 = icmp eq i32 %637, 2
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %62, align 1, !tbaa !2450
  %640 = icmp ne i8 %632, 0
  %641 = xor i1 %640, %638
  %.v29 = select i1 %641, i64 12, i64 113
  %642 = add i64 %.v29, %605
  store i64 %642, i64* %PC, align 8, !tbaa !2428
  br i1 %641, label %block_402bd3, label %block_402cd9.loopexit17

block_402b74:                                     ; preds = %block_402b50
  %643 = add i64 %65, 4
  store i64 %643, i64* %PC, align 8
  %644 = load i32, i32* %34, align 4
  %645 = add i32 %644, -1
  %646 = icmp eq i32 %644, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %39, align 1, !tbaa !2432
  %648 = and i32 %645, 255
  %649 = tail call i32 @llvm.ctpop.i32(i32 %648) #10
  %650 = trunc i32 %649 to i8
  %651 = and i8 %650, 1
  %652 = xor i8 %651, 1
  store i8 %652, i8* %45, align 1, !tbaa !2446
  %653 = xor i32 %645, %644
  %654 = lshr i32 %653, 4
  %655 = trunc i32 %654 to i8
  %656 = and i8 %655, 1
  store i8 %656, i8* %50, align 1, !tbaa !2447
  %657 = icmp eq i32 %645, 0
  %658 = zext i1 %657 to i8
  store i8 %658, i8* %53, align 1, !tbaa !2448
  %659 = lshr i32 %645, 31
  %660 = trunc i32 %659 to i8
  store i8 %660, i8* %56, align 1, !tbaa !2449
  %661 = lshr i32 %644, 31
  %662 = xor i32 %659, %661
  %663 = add nuw nsw i32 %662, %661
  %664 = icmp eq i32 %663, 2
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %62, align 1, !tbaa !2450
  %.v27 = select i1 %657, i64 10, i64 22
  %666 = add i64 %.v27, %65
  store i64 %666, i64* %PC, align 8, !tbaa !2428
  br i1 %657, label %block_402b7e, label %block_402b8a

block_402cd9.loopexit:                            ; preds = %block_402c67
  br label %block_402cd9

block_402cd9.loopexit17:                          ; preds = %block_402bc7
  br label %block_402cd9

block_402cd9:                                     ; preds = %block_402cd9.loopexit17, %block_402cd9.loopexit
  %667 = phi i64 [ %505, %block_402cd9.loopexit ], [ %606, %block_402cd9.loopexit17 ]
  %668 = phi i64 [ %541, %block_402cd9.loopexit ], [ %642, %block_402cd9.loopexit17 ]
  %.sink5 = phi i64 [ 5, %block_402cd9.loopexit ], [ 161, %block_402cd9.loopexit17 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.1, %block_402cd9.loopexit ], [ %MEMORY.3, %block_402cd9.loopexit17 ]
  %669 = add i64 %.sink5, %668
  %670 = add i64 %667, -36
  %671 = add i64 %669, 3
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %670 to i32*
  %673 = load i32, i32* %672, align 4
  %674 = zext i32 %673 to i64
  store i64 %674, i64* %RAX, align 8, !tbaa !2428
  %675 = add i64 %667, -4
  %676 = add i64 %669, 6
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i32*
  store i32 %673, i32* %677, align 4
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_402cdf

block_402c21:                                     ; preds = %block_402bfa, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %678 = phi i64 [ %.pre20, %block_402bfa ], [ %134, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -32
  %681 = add i64 %678, 3
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %680 to i32*
  %683 = load i32, i32* %682, align 4
  %684 = zext i32 %683 to i64
  store i64 %684, i64* %RAX, align 8, !tbaa !2428
  %685 = add i64 %679, -20
  %686 = add i64 %678, 6
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to i32*
  %688 = load i32, i32* %687, align 4
  %689 = add i32 %688, %683
  %690 = zext i32 %689 to i64
  store i64 %690, i64* %RAX, align 8, !tbaa !2428
  %691 = icmp ult i32 %689, %683
  %692 = icmp ult i32 %689, %688
  %693 = or i1 %691, %692
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %39, align 1, !tbaa !2432
  %695 = and i32 %689, 255
  %696 = tail call i32 @llvm.ctpop.i32(i32 %695) #10
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  store i8 %699, i8* %45, align 1, !tbaa !2446
  %700 = xor i32 %688, %683
  %701 = xor i32 %700, %689
  %702 = lshr i32 %701, 4
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  store i8 %704, i8* %50, align 1, !tbaa !2447
  %705 = icmp eq i32 %689, 0
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %53, align 1, !tbaa !2448
  %707 = lshr i32 %689, 31
  %708 = trunc i32 %707 to i8
  store i8 %708, i8* %56, align 1, !tbaa !2449
  %709 = lshr i32 %683, 31
  %710 = lshr i32 %688, 31
  %711 = xor i32 %707, %709
  %712 = xor i32 %707, %710
  %713 = add nuw nsw i32 %711, %712
  %714 = icmp eq i32 %713, 2
  %715 = zext i1 %714 to i8
  store i8 %715, i8* %62, align 1, !tbaa !2450
  %716 = add i64 %678, 9
  store i64 %716, i64* %PC, align 8
  store i32 %689, i32* %682, align 4
  %717 = load i64, i64* %RBP, align 8
  %718 = add i64 %717, -28
  %719 = load i64, i64* %PC, align 8
  %720 = add i64 %719, 3
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %718 to i32*
  %722 = load i32, i32* %721, align 4
  %723 = add i32 %722, 1
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  %725 = icmp eq i32 %722, -1
  %726 = icmp eq i32 %723, 0
  %727 = or i1 %725, %726
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %39, align 1, !tbaa !2432
  %729 = and i32 %723, 255
  %730 = tail call i32 @llvm.ctpop.i32(i32 %729) #10
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  %733 = xor i8 %732, 1
  store i8 %733, i8* %45, align 1, !tbaa !2446
  %734 = xor i32 %723, %722
  %735 = lshr i32 %734, 4
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  store i8 %737, i8* %50, align 1, !tbaa !2447
  %738 = zext i1 %726 to i8
  store i8 %738, i8* %53, align 1, !tbaa !2448
  %739 = lshr i32 %723, 31
  %740 = trunc i32 %739 to i8
  store i8 %740, i8* %56, align 1, !tbaa !2449
  %741 = lshr i32 %722, 31
  %742 = xor i32 %739, %741
  %743 = add nuw nsw i32 %742, %739
  %744 = icmp eq i32 %743, 2
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %62, align 1, !tbaa !2450
  %746 = add i64 %719, 9
  store i64 %746, i64* %PC, align 8
  store i32 %723, i32* %721, align 4
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, -108
  store i64 %748, i64* %PC, align 8, !tbaa !2428
  br label %block_402bc7
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_402e30___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402e30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402cf0_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_402cf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -12
  %14 = load i32, i32* %EDI, align 4
  %15 = add i64 %12, 6
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 5
  store i64 %20, i64* %PC, align 8
  %21 = bitcast %union.VectorReg* %5 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = extractelement <2 x float> %22, i32 0
  %24 = inttoptr i64 %18 to float*
  store float %23, float* %24, align 4
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -16
  %27 = load i64, i64* %RSI, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -20
  %33 = load i32, i32* %EDX, align 4
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -32
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -28
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %52, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #10
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %60, align 1, !tbaa !2447
  %61 = icmp eq i32 %52, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = lshr i32 %52, 31
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %67, align 1, !tbaa !2450
  %68 = xor i1 %61, true
  %69 = icmp eq i8 %65, 0
  %70 = and i1 %69, %68
  %.v = select i1 %70, i64 15, i64 10
  %71 = add i64 %.v, %49
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  br i1 %70, label %block_402d20, label %block_402db9.sink.split

block_402d3b:                                     ; preds = %block_402d47, %block_402d2a
  %72 = phi i64 [ %360, %block_402d47 ], [ %.pre, %block_402d2a ]
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -24
  %75 = add i64 %72, 3
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %73, -36
  %80 = add i64 %72, 6
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = sub i32 %77, %82
  %84 = icmp ult i32 %77, %82
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %53, align 1, !tbaa !2432
  %86 = and i32 %83, 255
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #10
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %59, align 1, !tbaa !2446
  %91 = xor i32 %82, %77
  %92 = xor i32 %91, %83
  %93 = lshr i32 %92, 4
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %60, align 1, !tbaa !2447
  %96 = icmp eq i32 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %63, align 1, !tbaa !2448
  %98 = lshr i32 %83, 31
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %66, align 1, !tbaa !2449
  %100 = lshr i32 %77, 31
  %101 = lshr i32 %82, 31
  %102 = xor i32 %101, %100
  %103 = xor i32 %98, %100
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %67, align 1, !tbaa !2450
  %107 = icmp ne i8 %99, 0
  %108 = xor i1 %107, %105
  %.v11 = select i1 %108, i64 12, i64 57
  %109 = add i64 %.v11, %72
  store i64 %109, i64* %PC, align 8, !tbaa !2428
  br i1 %108, label %block_402d47, label %block_402db9.sink.split.loopexit

block_402d79:                                     ; preds = %block_402d20
  %110 = add i64 %47, -24
  %111 = add i64 %386, 7
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i32*
  store i32 0, i32* %112, align 4
  %113 = bitcast %union.VectorReg* %5 to i8*
  %114 = bitcast %union.VectorReg* %5 to float*
  %115 = bitcast %union.VectorReg* %5 to i32*
  %116 = getelementptr inbounds i8, i8* %113, i64 4
  %117 = bitcast i8* %116 to float*
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %119 = bitcast i64* %118 to float*
  %120 = getelementptr inbounds i8, i8* %113, i64 12
  %121 = bitcast i8* %120 to float*
  %122 = bitcast i64* %118 to <2 x i32>*
  %123 = bitcast i8* %116 to i32*
  %124 = bitcast i64* %118 to i32*
  %125 = bitcast i8* %120 to i32*
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402d80

block_402d8c:                                     ; preds = %block_402d80
  %126 = add i64 %248, -8
  %127 = add i64 %284, 5
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i32*
  %129 = load i32, i32* %128, align 4
  store i32 %129, i32* %115, align 1, !tbaa !2451
  store float 0.000000e+00, float* %117, align 1, !tbaa !2451
  store float 0.000000e+00, float* %119, align 1, !tbaa !2451
  store float 0.000000e+00, float* %121, align 1, !tbaa !2451
  %130 = add i64 %248, -16
  %131 = add i64 %284, 9
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = add i64 %284, 13
  store i64 %134, i64* %PC, align 8
  %135 = load i32, i32* %251, align 4
  %136 = sext i32 %135 to i64
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = shl nsw i64 %136, 2
  %138 = add i64 %137, %133
  %139 = add i64 %284, 18
  store i64 %139, i64* %PC, align 8
  %140 = load <2 x float>, <2 x float>* %21, align 1
  %141 = load <2 x i32>, <2 x i32>* %122, align 1
  %142 = inttoptr i64 %138 to float*
  %143 = load float, float* %142, align 4
  %144 = extractelement <2 x float> %140, i32 0
  %145 = fmul float %144, %143
  store float %145, float* %114, align 1, !tbaa !2451
  %146 = bitcast <2 x float> %140 to <2 x i32>
  %147 = extractelement <2 x i32> %146, i32 1
  store i32 %147, i32* %123, align 1, !tbaa !2451
  %148 = extractelement <2 x i32> %141, i32 0
  store i32 %148, i32* %124, align 1, !tbaa !2451
  %149 = extractelement <2 x i32> %141, i32 1
  store i32 %149, i32* %125, align 1, !tbaa !2451
  %150 = add i64 %284, 22
  store i64 %150, i64* %PC, align 8
  %151 = load i64, i64* %132, align 8
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = add i64 %284, 26
  store i64 %152, i64* %PC, align 8
  %153 = load i32, i32* %251, align 4
  %154 = sext i32 %153 to i64
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = shl nsw i64 %154, 2
  %156 = add i64 %155, %151
  %157 = add i64 %284, 31
  store i64 %157, i64* %PC, align 8
  %158 = load <2 x float>, <2 x float>* %21, align 1
  %159 = extractelement <2 x float> %158, i32 0
  %160 = inttoptr i64 %156 to float*
  store float %159, float* %160, align 4
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -24
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %162 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = add i32 %166, 1
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = icmp eq i32 %166, -1
  %170 = icmp eq i32 %167, 0
  %171 = or i1 %169, %170
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %53, align 1, !tbaa !2432
  %173 = and i32 %167, 255
  %174 = tail call i32 @llvm.ctpop.i32(i32 %173) #10
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = xor i8 %176, 1
  store i8 %177, i8* %59, align 1, !tbaa !2446
  %178 = xor i32 %167, %166
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %60, align 1, !tbaa !2447
  %182 = zext i1 %170 to i8
  store i8 %182, i8* %63, align 1, !tbaa !2448
  %183 = lshr i32 %167, 31
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %66, align 1, !tbaa !2449
  %185 = lshr i32 %166, 31
  %186 = xor i32 %183, %185
  %187 = add nuw nsw i32 %186, %183
  %188 = icmp eq i32 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %67, align 1, !tbaa !2450
  %190 = add i64 %163, 9
  store i64 %190, i64* %PC, align 8
  store i32 %167, i32* %165, align 4
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, -52
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  br label %block_402d80

block_402db9.sink.split.loopexit:                 ; preds = %block_402d3b
  br label %block_402db9.sink.split

block_402db9.sink.split:                          ; preds = %block_402db9.sink.split.loopexit, %block_402cf0
  %193 = phi i64 [ %71, %block_402cf0 ], [ %109, %block_402db9.sink.split.loopexit ]
  %.sink5 = phi i64 [ 158, %block_402cf0 ], [ 69, %block_402db9.sink.split.loopexit ]
  %194 = add i64 %.sink5, %193
  store i64 %194, i64* %PC, align 8, !tbaa !2428
  br label %block_402db9

block_402db9.loopexit:                            ; preds = %block_402d80
  br label %block_402db9

block_402db9:                                     ; preds = %block_402db9.loopexit, %block_402db9.sink.split
  %195 = phi i64 [ %194, %block_402db9.sink.split ], [ %284, %block_402db9.loopexit ]
  %196 = add i64 %195, 1
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %8, align 8, !tbaa !2428
  %198 = add i64 %197, 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RBP, align 8, !tbaa !2428
  store i64 %198, i64* %8, align 8, !tbaa !2428
  %201 = add i64 %195, 2
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %198 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  %204 = add i64 %197, 16
  store i64 %204, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402d2a:                                     ; preds = %block_402d20
  %205 = add i64 %386, 3
  store i64 %205, i64* %PC, align 8
  %206 = load i32, i32* %51, align 4
  %207 = zext i32 %206 to i64
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = add i64 %386, 7
  store i64 %208, i64* %PC, align 8
  %209 = load i32, i32* %363, align 4
  %210 = sext i32 %206 to i64
  %211 = sext i32 %209 to i64
  %212 = mul nsw i64 %211, %210
  %213 = trunc i64 %212 to i32
  %214 = and i64 %212, 4294967295
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = shl i64 %212, 32
  %216 = ashr exact i64 %215, 32
  %217 = icmp ne i64 %216, %212
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %53, align 1, !tbaa !2432
  %219 = and i32 %213, 255
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #10
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  store i8 %223, i8* %59, align 1, !tbaa !2446
  store i8 0, i8* %60, align 1, !tbaa !2447
  store i8 0, i8* %63, align 1, !tbaa !2448
  %224 = lshr i32 %213, 31
  %225 = trunc i32 %224 to i8
  store i8 %225, i8* %66, align 1, !tbaa !2449
  store i8 %218, i8* %67, align 1, !tbaa !2450
  %226 = add i64 %47, -36
  %227 = add i64 %386, 10
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i32*
  store i32 %213, i32* %228, align 4
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -24
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i32*
  store i32 0, i32* %233, align 4
  %234 = bitcast %union.VectorReg* %5 to i8*
  %235 = bitcast %union.VectorReg* %5 to float*
  %236 = bitcast %union.VectorReg* %5 to i32*
  %237 = getelementptr inbounds i8, i8* %234, i64 4
  %238 = bitcast i8* %237 to float*
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %240 = bitcast i64* %239 to float*
  %241 = getelementptr inbounds i8, i8* %234, i64 12
  %242 = bitcast i8* %241 to float*
  %243 = bitcast i64* %239 to <2 x i32>*
  %244 = bitcast i8* %237 to i32*
  %245 = bitcast i64* %239 to i32*
  %246 = bitcast i8* %241 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402d3b

block_402d80:                                     ; preds = %block_402d8c, %block_402d79
  %247 = phi i64 [ %192, %block_402d8c ], [ %.pre9, %block_402d79 ]
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -24
  %250 = add i64 %247, 3
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %249 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i64
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = add i64 %248, -4
  %255 = add i64 %247, 6
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = sub i32 %252, %257
  %259 = icmp ult i32 %252, %257
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %53, align 1, !tbaa !2432
  %261 = and i32 %258, 255
  %262 = tail call i32 @llvm.ctpop.i32(i32 %261) #10
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  store i8 %265, i8* %59, align 1, !tbaa !2446
  %266 = xor i32 %257, %252
  %267 = xor i32 %266, %258
  %268 = lshr i32 %267, 4
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  store i8 %270, i8* %60, align 1, !tbaa !2447
  %271 = icmp eq i32 %258, 0
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %63, align 1, !tbaa !2448
  %273 = lshr i32 %258, 31
  %274 = trunc i32 %273 to i8
  store i8 %274, i8* %66, align 1, !tbaa !2449
  %275 = lshr i32 %252, 31
  %276 = lshr i32 %257, 31
  %277 = xor i32 %276, %275
  %278 = xor i32 %273, %275
  %279 = add nuw nsw i32 %278, %277
  %280 = icmp eq i32 %279, 2
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %67, align 1, !tbaa !2450
  %282 = icmp ne i8 %274, 0
  %283 = xor i1 %282, %280
  %.v12 = select i1 %283, i64 12, i64 57
  %284 = add i64 %.v12, %247
  store i64 %284, i64* %PC, align 8, !tbaa !2428
  br i1 %283, label %block_402d8c, label %block_402db9.loopexit

block_402d47:                                     ; preds = %block_402d3b
  %285 = add i64 %73, -8
  %286 = add i64 %109, 5
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %285 to i32*
  %288 = load i32, i32* %287, align 4
  store i32 %288, i32* %236, align 1, !tbaa !2451
  store float 0.000000e+00, float* %238, align 1, !tbaa !2451
  store float 0.000000e+00, float* %240, align 1, !tbaa !2451
  store float 0.000000e+00, float* %242, align 1, !tbaa !2451
  %289 = add i64 %73, -16
  %290 = add i64 %109, 9
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = add i64 %109, 13
  store i64 %293, i64* %PC, align 8
  %294 = load i32, i32* %76, align 4
  %295 = sext i32 %294 to i64
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = shl nsw i64 %295, 2
  %297 = add i64 %296, %292
  %298 = add i64 %109, 18
  store i64 %298, i64* %PC, align 8
  %299 = load <2 x float>, <2 x float>* %21, align 1
  %300 = load <2 x i32>, <2 x i32>* %243, align 1
  %301 = inttoptr i64 %297 to float*
  %302 = load float, float* %301, align 4
  %303 = extractelement <2 x float> %299, i32 0
  %304 = fmul float %303, %302
  store float %304, float* %235, align 1, !tbaa !2451
  %305 = bitcast <2 x float> %299 to <2 x i32>
  %306 = extractelement <2 x i32> %305, i32 1
  store i32 %306, i32* %244, align 1, !tbaa !2451
  %307 = extractelement <2 x i32> %300, i32 0
  store i32 %307, i32* %245, align 1, !tbaa !2451
  %308 = extractelement <2 x i32> %300, i32 1
  store i32 %308, i32* %246, align 1, !tbaa !2451
  %309 = add i64 %109, 22
  store i64 %309, i64* %PC, align 8
  %310 = load i64, i64* %291, align 8
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = add i64 %109, 26
  store i64 %311, i64* %PC, align 8
  %312 = load i32, i32* %76, align 4
  %313 = sext i32 %312 to i64
  store i64 %313, i64* %RCX, align 8, !tbaa !2428
  %314 = shl nsw i64 %313, 2
  %315 = add i64 %314, %310
  %316 = add i64 %109, 31
  store i64 %316, i64* %PC, align 8
  %317 = load <2 x float>, <2 x float>* %21, align 1
  %318 = extractelement <2 x float> %317, i32 0
  %319 = inttoptr i64 %315 to float*
  store float %318, float* %319, align 4
  %320 = load i64, i64* %RBP, align 8
  %321 = add i64 %320, -24
  %322 = load i64, i64* %PC, align 8
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %321 to i32*
  %325 = load i32, i32* %324, align 4
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = add i64 %320, -20
  %328 = add i64 %322, 6
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = add i32 %330, %325
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = icmp ult i32 %331, %325
  %334 = icmp ult i32 %331, %330
  %335 = or i1 %333, %334
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %53, align 1, !tbaa !2432
  %337 = and i32 %331, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #10
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %59, align 1, !tbaa !2446
  %342 = xor i32 %330, %325
  %343 = xor i32 %342, %331
  %344 = lshr i32 %343, 4
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  store i8 %346, i8* %60, align 1, !tbaa !2447
  %347 = icmp eq i32 %331, 0
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %63, align 1, !tbaa !2448
  %349 = lshr i32 %331, 31
  %350 = trunc i32 %349 to i8
  store i8 %350, i8* %66, align 1, !tbaa !2449
  %351 = lshr i32 %325, 31
  %352 = lshr i32 %330, 31
  %353 = xor i32 %349, %351
  %354 = xor i32 %349, %352
  %355 = add nuw nsw i32 %353, %354
  %356 = icmp eq i32 %355, 2
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %67, align 1, !tbaa !2450
  %358 = add i64 %322, 9
  store i64 %358, i64* %PC, align 8
  store i32 %331, i32* %324, align 4
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, -52
  store i64 %360, i64* %PC, align 8, !tbaa !2428
  br label %block_402d3b

block_402d20:                                     ; preds = %block_402cf0
  %361 = add i64 %47, -20
  %362 = add i64 %71, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i32*
  %364 = load i32, i32* %363, align 4
  %365 = add i32 %364, -1
  %366 = icmp eq i32 %364, 0
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %53, align 1, !tbaa !2432
  %368 = and i32 %365, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #10
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %59, align 1, !tbaa !2446
  %373 = xor i32 %365, %364
  %374 = lshr i32 %373, 4
  %375 = trunc i32 %374 to i8
  %376 = and i8 %375, 1
  store i8 %376, i8* %60, align 1, !tbaa !2447
  %377 = icmp eq i32 %365, 0
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %63, align 1, !tbaa !2448
  %379 = lshr i32 %365, 31
  %380 = trunc i32 %379 to i8
  store i8 %380, i8* %66, align 1, !tbaa !2449
  %381 = lshr i32 %364, 31
  %382 = xor i32 %379, %381
  %383 = add nuw nsw i32 %382, %381
  %384 = icmp eq i32 %383, 2
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %67, align 1, !tbaa !2450
  %.v10 = select i1 %377, i64 89, i64 10
  %386 = add i64 %.v10, %71
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  br i1 %377, label %block_402d79, label %block_402d2a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400500__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_400500:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2428
  store i64 %12, i64* %RDX, align 8, !tbaa !2428
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #10
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2446
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2448
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402e30___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402dc0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %38 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = tail call fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401760_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #8 {
block_401760:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast i64* %17 to i32*
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  %24 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %24, align 1, !tbaa !2453
  %25 = add i64 %12, -16
  %26 = load i64, i64* %RDI, align 8
  %27 = add i64 %15, 10
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %28, align 8
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -12
  %31 = load i32, i32* %ESI, align 4
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %30 to i32*
  store i32 %31, i32* %34, align 4
  %35 = load i64, i64* %RBP, align 8
  %36 = add i64 %35, -16
  %37 = load i32, i32* %EDX, align 4
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %40, align 4
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RCX, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -32
  %49 = load i64, i64* %R8, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -36
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %54 to i32*
  store i32 1325, i32* %57, align 4
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -32
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = add i64 %60, 8
  store i64 %64, i64* %PC, align 8
  %65 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = extractelement <2 x float> %66, i32 0
  %68 = inttoptr i64 %63 to float*
  store float %67, float* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -44
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  store i32 0, i32* %73, align 4
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %80 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %81 = bitcast i64* %17 to double*
  %82 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %84 = bitcast i64* %83 to double*
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %86 = bitcast %union.VectorReg* %8 to double*
  %87 = bitcast %union.VectorReg* %7 to double*
  %88 = bitcast [32 x %union.VectorReg]* %6 to double*
  %89 = bitcast i64* %17 to <2 x i32>*
  %90 = bitcast [32 x %union.VectorReg]* %6 to float*
  %91 = bitcast i8* %19 to float*
  %92 = bitcast i64* %17 to float*
  %93 = bitcast i8* %22 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40178f

block_4018d4:                                     ; preds = %block_4018c8
  %94 = add i64 %298, -24
  %95 = add i64 %334, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %334, 8
  store i64 %98, i64* %PC, align 8
  %99 = load i32, i32* %301, align 4
  %100 = sext i32 %99 to i64
  store i64 %100, i64* %RCX, align 8, !tbaa !2428
  %101 = shl nsw i64 %100, 2
  %102 = add i64 %101, %97
  %103 = add i64 %334, 13
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %106 = add i64 %298, -8
  %107 = add i64 %334, 17
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %298, -12
  %111 = add i64 %334, 20
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i32*
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i64
  store i64 %114, i64* %RDX, align 8, !tbaa !2428
  %115 = add i64 %298, -44
  %116 = add i64 %334, 24
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = sext i32 %113 to i64
  %120 = sext i32 %118 to i64
  %121 = mul nsw i64 %120, %119
  %122 = trunc i64 %121 to i32
  %123 = and i64 %121, 4294967295
  store i64 %123, i64* %RDX, align 8, !tbaa !2428
  %124 = shl i64 %121, 32
  %125 = ashr exact i64 %124, 32
  %126 = icmp ne i64 %125, %121
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %74, align 1, !tbaa !2432
  %128 = and i32 %122, 255
  %129 = tail call i32 @llvm.ctpop.i32(i32 %128) #10
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %133 = lshr i32 %122, 31
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %78, align 1, !tbaa !2449
  store i8 %127, i8* %79, align 1, !tbaa !2450
  %135 = add i64 %334, 27
  store i64 %135, i64* %PC, align 8
  %136 = load i32, i32* %301, align 4
  %137 = add i32 %136, %122
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RDX, align 8, !tbaa !2428
  %139 = icmp ult i32 %137, %122
  %140 = icmp ult i32 %137, %136
  %141 = or i1 %139, %140
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %74, align 1, !tbaa !2432
  %143 = and i32 %137, 255
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #10
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %75, align 1, !tbaa !2446
  %148 = xor i32 %136, %122
  %149 = xor i32 %148, %137
  %150 = lshr i32 %149, 4
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* %76, align 1, !tbaa !2447
  %153 = icmp eq i32 %137, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %77, align 1, !tbaa !2448
  %155 = lshr i32 %137, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %78, align 1, !tbaa !2449
  %157 = lshr i32 %136, 31
  %158 = xor i32 %155, %133
  %159 = xor i32 %155, %157
  %160 = add nuw nsw i32 %158, %159
  %161 = icmp eq i32 %160, 2
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %79, align 1, !tbaa !2450
  %163 = sext i32 %137 to i64
  store i64 %163, i64* %RCX, align 8, !tbaa !2428
  %164 = shl nsw i64 %163, 2
  %165 = add i64 %164, %109
  %166 = add i64 %334, 35
  store i64 %166, i64* %PC, align 8
  %167 = load <2 x float>, <2 x float>* %65, align 1
  %168 = load <2 x i32>, <2 x i32>* %89, align 1
  %169 = inttoptr i64 %165 to float*
  %170 = load float, float* %169, align 4
  %171 = extractelement <2 x float> %167, i32 0
  %172 = fadd float %171, %170
  store float %172, float* %90, align 1, !tbaa !2451
  %173 = bitcast <2 x float> %167 to <2 x i32>
  %174 = extractelement <2 x i32> %173, i32 1
  store i32 %174, i32* %20, align 1, !tbaa !2451
  %175 = extractelement <2 x i32> %168, i32 0
  store i32 %175, i32* %21, align 1, !tbaa !2451
  %176 = extractelement <2 x i32> %168, i32 1
  store i32 %176, i32* %23, align 1, !tbaa !2451
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  %179 = add i64 %334, 39
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %RAX, align 8, !tbaa !2428
  %182 = add i64 %177, -40
  %183 = add i64 %334, 43
  store i64 %183, i64* %PC, align 8
  %184 = inttoptr i64 %182 to i32*
  %185 = load i32, i32* %184, align 4
  %186 = sext i32 %185 to i64
  store i64 %186, i64* %RCX, align 8, !tbaa !2428
  %187 = shl nsw i64 %186, 2
  %188 = add i64 %187, %181
  %189 = add i64 %334, 48
  store i64 %189, i64* %PC, align 8
  %190 = load <2 x float>, <2 x float>* %65, align 1
  %191 = extractelement <2 x float> %190, i32 0
  %192 = inttoptr i64 %188 to float*
  store float %191, float* %192, align 4
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -40
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = add i32 %198, 1
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = icmp eq i32 %198, -1
  %202 = icmp eq i32 %199, 0
  %203 = or i1 %201, %202
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %74, align 1, !tbaa !2432
  %205 = and i32 %199, 255
  %206 = tail call i32 @llvm.ctpop.i32(i32 %205) #10
  %207 = trunc i32 %206 to i8
  %208 = and i8 %207, 1
  %209 = xor i8 %208, 1
  store i8 %209, i8* %75, align 1, !tbaa !2446
  %210 = xor i32 %199, %198
  %211 = lshr i32 %210, 4
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  store i8 %213, i8* %76, align 1, !tbaa !2447
  %214 = zext i1 %202 to i8
  store i8 %214, i8* %77, align 1, !tbaa !2448
  %215 = lshr i32 %199, 31
  %216 = trunc i32 %215 to i8
  store i8 %216, i8* %78, align 1, !tbaa !2449
  %217 = lshr i32 %198, 31
  %218 = xor i32 %215, %217
  %219 = add nuw nsw i32 %218, %215
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %79, align 1, !tbaa !2450
  %222 = add i64 %195, 9
  store i64 %222, i64* %PC, align 8
  store i32 %199, i32* %197, align 4
  %223 = load i64, i64* %PC, align 8
  %224 = add i64 %223, -69
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br label %block_4018c8

block_401822:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %225 = add i64 %713, -8
  %226 = add i64 %712, 4
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i64*
  %228 = load i64, i64* %227, align 8
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = add i64 %713, -12
  %230 = add i64 %712, 7
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = add i64 %713, -44
  %235 = add i64 %712, 11
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i32*
  %237 = load i32, i32* %236, align 4
  %238 = sext i32 %232 to i64
  %239 = sext i32 %237 to i64
  %240 = mul nsw i64 %239, %238
  %241 = trunc i64 %240 to i32
  %242 = and i64 %240, 4294967295
  store i64 %242, i64* %RCX, align 8, !tbaa !2428
  %243 = shl i64 %240, 32
  %244 = ashr exact i64 %243, 32
  %245 = icmp ne i64 %244, %240
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %74, align 1, !tbaa !2432
  %247 = and i32 %241, 255
  %248 = tail call i32 @llvm.ctpop.i32(i32 %247) #10
  %249 = trunc i32 %248 to i8
  %250 = and i8 %249, 1
  %251 = xor i8 %250, 1
  store i8 %251, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %252 = lshr i32 %241, 31
  %253 = trunc i32 %252 to i8
  store i8 %253, i8* %78, align 1, !tbaa !2449
  store i8 %246, i8* %79, align 1, !tbaa !2450
  %254 = add i64 %713, -40
  %255 = add i64 %712, 14
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = add i32 %257, %241
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = icmp ult i32 %258, %241
  %261 = icmp ult i32 %258, %257
  %262 = or i1 %260, %261
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %74, align 1, !tbaa !2432
  %264 = and i32 %258, 255
  %265 = tail call i32 @llvm.ctpop.i32(i32 %264) #10
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  store i8 %268, i8* %75, align 1, !tbaa !2446
  %269 = xor i32 %257, %241
  %270 = xor i32 %269, %258
  %271 = lshr i32 %270, 4
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  store i8 %273, i8* %76, align 1, !tbaa !2447
  %274 = icmp eq i32 %258, 0
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %77, align 1, !tbaa !2448
  %276 = lshr i32 %258, 31
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %78, align 1, !tbaa !2449
  %278 = lshr i32 %257, 31
  %279 = xor i32 %276, %252
  %280 = xor i32 %276, %278
  %281 = add nuw nsw i32 %279, %280
  %282 = icmp eq i32 %281, 2
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %79, align 1, !tbaa !2450
  %284 = sext i32 %258 to i64
  store i64 %284, i64* %RDX, align 8, !tbaa !2428
  %285 = shl nsw i64 %284, 2
  %286 = add i64 %285, %228
  %287 = add i64 %712, 22
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i32*
  %289 = load i32, i32* %288, align 4
  store i32 %289, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %290 = add i64 %713, -52
  %291 = add i64 %712, 27
  store i64 %291, i64* %PC, align 8
  %292 = load <2 x float>, <2 x float>* %65, align 1
  %293 = extractelement <2 x float> %292, i32 0
  %294 = inttoptr i64 %290 to float*
  store float %293, float* %294, align 4
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 18
  store i64 %296, i64* %PC, align 8, !tbaa !2428
  br label %block_40184f

block_4018c8:                                     ; preds = %block_4018c1, %block_4018d4
  %297 = phi i64 [ %.pre20, %block_4018c1 ], [ %224, %block_4018d4 ]
  %298 = load i64, i64* %RBP, align 8
  %299 = add i64 %298, -40
  %300 = add i64 %297, 3
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %299 to i32*
  %302 = load i32, i32* %301, align 4
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = add i64 %298, -16
  %305 = add i64 %297, 6
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = sub i32 %302, %307
  %309 = icmp ult i32 %302, %307
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %74, align 1, !tbaa !2432
  %311 = and i32 %308, 255
  %312 = tail call i32 @llvm.ctpop.i32(i32 %311) #10
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = xor i8 %314, 1
  store i8 %315, i8* %75, align 1, !tbaa !2446
  %316 = xor i32 %307, %302
  %317 = xor i32 %316, %308
  %318 = lshr i32 %317, 4
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  store i8 %320, i8* %76, align 1, !tbaa !2447
  %321 = icmp eq i32 %308, 0
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %77, align 1, !tbaa !2448
  %323 = lshr i32 %308, 31
  %324 = trunc i32 %323 to i8
  store i8 %324, i8* %78, align 1, !tbaa !2449
  %325 = lshr i32 %302, 31
  %326 = lshr i32 %307, 31
  %327 = xor i32 %326, %325
  %328 = xor i32 %323, %325
  %329 = add nuw nsw i32 %328, %327
  %330 = icmp eq i32 %329, 2
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %79, align 1, !tbaa !2450
  %332 = icmp ne i8 %324, 0
  %333 = xor i1 %332, %330
  %.v29 = select i1 %333, i64 12, i64 74
  %334 = add i64 %.v29, %297
  store i64 %334, i64* %PC, align 8, !tbaa !2428
  br i1 %333, label %block_4018d4, label %block_401912

block_4018c1:                                     ; preds = %block_4018b5
  %335 = add i64 %351, -40
  %336 = add i64 %387, 7
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i32*
  store i32 0, i32* %337, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4018c8

block_401842:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %338 = add i64 %713, -32
  %339 = add i64 %712, 4
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %338 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = add i64 %712, 8
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i32*
  %344 = load i32, i32* %343, align 4
  store i32 %344, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %345 = add i64 %713, -52
  %346 = add i64 %712, 13
  store i64 %346, i64* %PC, align 8
  %347 = load <2 x float>, <2 x float>* %65, align 1
  %348 = extractelement <2 x float> %347, i32 0
  %349 = inttoptr i64 %345 to float*
  store float %348, float* %349, align 4
  %.pre28 = load i64, i64* %PC, align 8
  br label %block_40184f

block_4018b5:                                     ; preds = %block_401912, %block_4018ae
  %350 = phi i64 [ %781, %block_401912 ], [ %.pre19, %block_4018ae ]
  %351 = load i64, i64* %RBP, align 8
  %352 = add i64 %351, -44
  %353 = add i64 %350, 3
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %352 to i32*
  %355 = load i32, i32* %354, align 4
  %356 = zext i32 %355 to i64
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = add i64 %351, -16
  %358 = add i64 %350, 6
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i32*
  %360 = load i32, i32* %359, align 4
  %361 = sub i32 %355, %360
  %362 = icmp ult i32 %355, %360
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %74, align 1, !tbaa !2432
  %364 = and i32 %361, 255
  %365 = tail call i32 @llvm.ctpop.i32(i32 %364) #10
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  store i8 %368, i8* %75, align 1, !tbaa !2446
  %369 = xor i32 %360, %355
  %370 = xor i32 %369, %361
  %371 = lshr i32 %370, 4
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  store i8 %373, i8* %76, align 1, !tbaa !2447
  %374 = icmp eq i32 %361, 0
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %77, align 1, !tbaa !2448
  %376 = lshr i32 %361, 31
  %377 = trunc i32 %376 to i8
  store i8 %377, i8* %78, align 1, !tbaa !2449
  %378 = lshr i32 %355, 31
  %379 = lshr i32 %360, 31
  %380 = xor i32 %379, %378
  %381 = xor i32 %376, %378
  %382 = add nuw nsw i32 %381, %380
  %383 = icmp eq i32 %382, 2
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %79, align 1, !tbaa !2450
  %385 = icmp ne i8 %377, 0
  %386 = xor i1 %385, %383
  %.v32 = select i1 %386, i64 12, i64 112
  %387 = add i64 %.v32, %350
  store i64 %387, i64* %PC, align 8, !tbaa !2428
  br i1 %386, label %block_4018c1, label %block_401925

block_4018ae:                                     ; preds = %block_401884
  %388 = add i64 %876, -44
  %389 = add i64 %912, 7
  store i64 %389, i64* %PC, align 8
  %390 = inttoptr i64 %388 to i32*
  store i32 0, i32* %390, align 4
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4018b5

block_40186a:                                     ; preds = %block_4017a2
  %391 = add i64 %715, -44
  %392 = add i64 %751, 8
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %391 to i32*
  %394 = load i32, i32* %393, align 4
  %395 = add i32 %394, 1
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = icmp eq i32 %394, -1
  %398 = icmp eq i32 %395, 0
  %399 = or i1 %397, %398
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %74, align 1, !tbaa !2432
  %401 = and i32 %395, 255
  %402 = tail call i32 @llvm.ctpop.i32(i32 %401) #10
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  store i8 %405, i8* %75, align 1, !tbaa !2446
  %406 = xor i32 %395, %394
  %407 = lshr i32 %406, 4
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  store i8 %409, i8* %76, align 1, !tbaa !2447
  %410 = zext i1 %398 to i8
  store i8 %410, i8* %77, align 1, !tbaa !2448
  %411 = lshr i32 %395, 31
  %412 = trunc i32 %411 to i8
  store i8 %412, i8* %78, align 1, !tbaa !2449
  %413 = lshr i32 %394, 31
  %414 = xor i32 %411, %413
  %415 = add nuw nsw i32 %414, %411
  %416 = icmp eq i32 %415, 2
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %79, align 1, !tbaa !2450
  %418 = add i64 %751, 14
  store i64 %418, i64* %PC, align 8
  store i32 %395, i32* %393, align 4
  %419 = load i64, i64* %PC, align 8
  %420 = add i64 %419, -233
  store i64 %420, i64* %PC, align 8, !tbaa !2428
  br label %block_40178f

block_40184f:                                     ; preds = %block_401842, %block_401822
  %421 = phi i64 [ %.pre28, %block_401842 ], [ %296, %block_401822 ]
  %422 = load i64, i64* %RBP, align 8
  %423 = add i64 %422, -52
  %424 = add i64 %421, 5
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i32*
  %426 = load i32, i32* %425, align 4
  store i32 %426, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %427 = add i64 %422, -32
  %428 = add i64 %421, 9
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %421, 13
  store i64 %431, i64* %PC, align 8
  %432 = load <2 x float>, <2 x float>* %65, align 1
  %433 = extractelement <2 x float> %432, i32 0
  %434 = inttoptr i64 %430 to float*
  store float %433, float* %434, align 4
  %435 = load i64, i64* %RBP, align 8
  %436 = add i64 %435, -40
  %437 = load i64, i64* %PC, align 8
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %436 to i32*
  %440 = load i32, i32* %439, align 4
  %441 = add i32 %440, 1
  %442 = zext i32 %441 to i64
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = icmp eq i32 %440, -1
  %444 = icmp eq i32 %441, 0
  %445 = or i1 %443, %444
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %74, align 1, !tbaa !2432
  %447 = and i32 %441, 255
  %448 = tail call i32 @llvm.ctpop.i32(i32 %447) #10
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  store i8 %451, i8* %75, align 1, !tbaa !2446
  %452 = xor i32 %441, %440
  %453 = lshr i32 %452, 4
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  store i8 %455, i8* %76, align 1, !tbaa !2447
  %456 = zext i1 %444 to i8
  store i8 %456, i8* %77, align 1, !tbaa !2448
  %457 = lshr i32 %441, 31
  %458 = trunc i32 %457 to i8
  store i8 %458, i8* %78, align 1, !tbaa !2449
  %459 = lshr i32 %440, 31
  %460 = xor i32 %457, %459
  %461 = add nuw nsw i32 %460, %457
  %462 = icmp eq i32 %461, 2
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %79, align 1, !tbaa !2450
  %464 = add i64 %437, 9
  store i64 %464, i64* %PC, align 8
  store i32 %441, i32* %439, align 4
  %465 = load i64, i64* %PC, align 8
  %466 = add i64 %465, -195
  store i64 %466, i64* %PC, align 8, !tbaa !2428
  br label %block_4017a2

block_4017ae:                                     ; preds = %block_4017a2
  %467 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 56) to i64*), align 8
  store i64 %467, i64* %80, align 1, !tbaa !2454
  store double 0.000000e+00, double* %81, align 1, !tbaa !2454
  %468 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e40__rodata_type* @seg_402e40__rodata to i64), i64 64) to i64*), align 16
  store i64 %468, i64* %82, align 1, !tbaa !2454
  store double 0.000000e+00, double* %84, align 1, !tbaa !2454
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %469 = add i64 %715, -36
  %470 = add i64 %751, 28
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %469 to i32*
  %472 = load i32, i32* %471, align 4
  %473 = sext i32 %472 to i64
  %474 = mul nsw i64 %473, 3125
  %475 = trunc i64 %474 to i32
  %476 = and i64 %474, 4294967295
  store i64 %476, i64* %RCX, align 8, !tbaa !2428
  %477 = mul i64 %473, 13421772800000
  %478 = ashr exact i64 %477, 32
  %479 = icmp ne i64 %478, %474
  %480 = zext i1 %479 to i8
  store i8 %480, i8* %74, align 1, !tbaa !2432
  %481 = and i32 %475, 255
  %482 = tail call i32 @llvm.ctpop.i32(i32 %481) #10
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  %485 = xor i8 %484, 1
  store i8 %485, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %486 = lshr i32 %475, 31
  %487 = trunc i32 %486 to i8
  store i8 %487, i8* %78, align 1, !tbaa !2449
  store i8 %480, i8* %79, align 1, !tbaa !2450
  %488 = add i64 %715, -48
  %489 = add i64 %751, 31
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %488 to i32*
  store i32 65536, i32* %490, align 4
  %491 = load i32, i32* %ECX, align 4
  %492 = zext i32 %491 to i64
  %493 = load i64, i64* %PC, align 8
  store i64 %492, i64* %RAX, align 8, !tbaa !2428
  %494 = sext i32 %491 to i64
  %495 = lshr i64 %494, 32
  store i64 %495, i64* %85, align 8, !tbaa !2428
  %496 = load i64, i64* %RBP, align 8
  %497 = add i64 %496, -48
  %498 = add i64 %493, 6
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i32*
  %500 = load i32, i32* %499, align 4
  %501 = zext i32 %500 to i64
  store i64 %501, i64* %RCX, align 8, !tbaa !2428
  %502 = add i64 %493, 8
  store i64 %502, i64* %PC, align 8
  %503 = sext i32 %500 to i64
  %504 = shl nuw i64 %495, 32
  %505 = or i64 %504, %492
  %506 = sdiv i64 %505, %503
  %507 = shl i64 %506, 32
  %508 = ashr exact i64 %507, 32
  %509 = icmp eq i64 %506, %508
  br i1 %509, label %512, label %510

; <label>:510:                                    ; preds = %block_4017ae
  %511 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %502, %struct.Memory* %MEMORY.3) #13
  %.pre22 = load i64, i64* %RBP, align 8
  %.pre23 = load i32, i32* %EDX, align 4
  %.pre24 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:512:                                    ; preds = %block_4017ae
  %513 = srem i64 %505, %503
  %514 = and i64 %506, 4294967295
  store i64 %514, i64* %RAX, align 8, !tbaa !2428
  %515 = and i64 %513, 4294967295
  store i64 %515, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %74, align 1, !tbaa !2432
  store i8 0, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %78, align 1, !tbaa !2449
  store i8 0, i8* %79, align 1, !tbaa !2450
  %516 = trunc i64 %513 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %512, %510
  %517 = phi i64 [ %.pre24, %510 ], [ %502, %512 ]
  %518 = phi i32 [ %.pre23, %510 ], [ %516, %512 ]
  %519 = phi i64 [ %.pre22, %510 ], [ %496, %512 ]
  %520 = phi %struct.Memory* [ %511, %510 ], [ %MEMORY.3, %512 ]
  %521 = add i64 %519, -36
  %522 = add i64 %517, 3
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i32*
  store i32 %518, i32* %523, align 4
  %524 = load i64, i64* %RBP, align 8
  %525 = add i64 %524, -36
  %526 = load i64, i64* %PC, align 8
  %527 = add i64 %526, 5
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528, align 4
  %530 = sitofp i32 %529 to double
  %531 = load double, double* %87, align 1
  %532 = fsub double %530, %531
  %533 = load double, double* %88, align 1
  %534 = fdiv double %532, %533
  store double %534, double* %86, align 1, !tbaa !2454
  %.cast = bitcast double %533 to <2 x i32>
  %535 = load <2 x i32>, <2 x i32>* %89, align 1
  %536 = fptrunc double %534 to float
  store float %536, float* %90, align 1, !tbaa !2451
  %537 = extractelement <2 x i32> %.cast, i32 1
  store i32 %537, i32* %20, align 1, !tbaa !2451
  %538 = extractelement <2 x i32> %535, i32 0
  store i32 %538, i32* %21, align 1, !tbaa !2451
  %539 = extractelement <2 x i32> %535, i32 1
  store i32 %539, i32* %23, align 1, !tbaa !2451
  %540 = add i64 %524, -8
  %541 = add i64 %526, 21
  store i64 %541, i64* %PC, align 8
  %542 = inttoptr i64 %540 to i64*
  %543 = load i64, i64* %542, align 8
  store i64 %543, i64* %RSI, align 8, !tbaa !2428
  %544 = add i64 %524, -12
  %545 = add i64 %526, 24
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %544 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = zext i32 %547 to i64
  store i64 %548, i64* %RDX, align 8, !tbaa !2428
  %549 = add i64 %524, -44
  %550 = add i64 %526, 28
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i32*
  %552 = load i32, i32* %551, align 4
  %553 = sext i32 %547 to i64
  %554 = sext i32 %552 to i64
  %555 = mul nsw i64 %554, %553
  %556 = trunc i64 %555 to i32
  %557 = and i64 %555, 4294967295
  store i64 %557, i64* %RDX, align 8, !tbaa !2428
  %558 = shl i64 %555, 32
  %559 = ashr exact i64 %558, 32
  %560 = icmp ne i64 %559, %555
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %74, align 1, !tbaa !2432
  %562 = and i32 %556, 255
  %563 = tail call i32 @llvm.ctpop.i32(i32 %562) #10
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  store i8 %566, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %567 = lshr i32 %556, 31
  %568 = trunc i32 %567 to i8
  store i8 %568, i8* %78, align 1, !tbaa !2449
  store i8 %561, i8* %79, align 1, !tbaa !2450
  %569 = add i64 %524, -40
  %570 = add i64 %526, 31
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i32*
  %572 = load i32, i32* %571, align 4
  %573 = add i32 %572, %556
  %574 = zext i32 %573 to i64
  store i64 %574, i64* %RDX, align 8, !tbaa !2428
  %575 = icmp ult i32 %573, %556
  %576 = icmp ult i32 %573, %572
  %577 = or i1 %575, %576
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %74, align 1, !tbaa !2432
  %579 = and i32 %573, 255
  %580 = tail call i32 @llvm.ctpop.i32(i32 %579) #10
  %581 = trunc i32 %580 to i8
  %582 = and i8 %581, 1
  %583 = xor i8 %582, 1
  store i8 %583, i8* %75, align 1, !tbaa !2446
  %584 = xor i32 %572, %556
  %585 = xor i32 %584, %573
  %586 = lshr i32 %585, 4
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  store i8 %588, i8* %76, align 1, !tbaa !2447
  %589 = icmp eq i32 %573, 0
  %590 = zext i1 %589 to i8
  store i8 %590, i8* %77, align 1, !tbaa !2448
  %591 = lshr i32 %573, 31
  %592 = trunc i32 %591 to i8
  store i8 %592, i8* %78, align 1, !tbaa !2449
  %593 = lshr i32 %572, 31
  %594 = xor i32 %591, %567
  %595 = xor i32 %591, %593
  %596 = add nuw nsw i32 %594, %595
  %597 = icmp eq i32 %596, 2
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %79, align 1, !tbaa !2450
  %599 = sext i32 %573 to i64
  store i64 %599, i64* %RDI, align 8, !tbaa !2428
  %600 = shl nsw i64 %599, 2
  %601 = add i64 %600, %543
  %602 = add i64 %526, 39
  store i64 %602, i64* %PC, align 8
  %603 = load <2 x float>, <2 x float>* %65, align 1
  %604 = extractelement <2 x float> %603, i32 0
  %605 = inttoptr i64 %601 to float*
  store float %604, float* %605, align 4
  %606 = load i64, i64* %RBP, align 8
  %607 = add i64 %606, -8
  %608 = load i64, i64* %PC, align 8
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %607 to i64*
  %611 = load i64, i64* %610, align 8
  store i64 %611, i64* %RSI, align 8, !tbaa !2428
  %612 = add i64 %606, -12
  %613 = add i64 %608, 7
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i32*
  %615 = load i32, i32* %614, align 4
  %616 = zext i32 %615 to i64
  store i64 %616, i64* %RDX, align 8, !tbaa !2428
  %617 = add i64 %606, -44
  %618 = add i64 %608, 11
  store i64 %618, i64* %PC, align 8
  %619 = inttoptr i64 %617 to i32*
  %620 = load i32, i32* %619, align 4
  %621 = sext i32 %615 to i64
  %622 = sext i32 %620 to i64
  %623 = mul nsw i64 %622, %621
  %624 = trunc i64 %623 to i32
  %625 = and i64 %623, 4294967295
  store i64 %625, i64* %RDX, align 8, !tbaa !2428
  %626 = shl i64 %623, 32
  %627 = ashr exact i64 %626, 32
  %628 = icmp ne i64 %627, %623
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %74, align 1, !tbaa !2432
  %630 = and i32 %624, 255
  %631 = tail call i32 @llvm.ctpop.i32(i32 %630) #10
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = xor i8 %633, 1
  store i8 %634, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %635 = lshr i32 %624, 31
  %636 = trunc i32 %635 to i8
  store i8 %636, i8* %78, align 1, !tbaa !2449
  store i8 %629, i8* %79, align 1, !tbaa !2450
  %637 = add i64 %606, -40
  %638 = add i64 %608, 14
  store i64 %638, i64* %PC, align 8
  %639 = inttoptr i64 %637 to i32*
  %640 = load i32, i32* %639, align 4
  %641 = add i32 %640, %624
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RDX, align 8, !tbaa !2428
  %643 = icmp ult i32 %641, %624
  %644 = icmp ult i32 %641, %640
  %645 = or i1 %643, %644
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %74, align 1, !tbaa !2432
  %647 = and i32 %641, 255
  %648 = tail call i32 @llvm.ctpop.i32(i32 %647) #10
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  %651 = xor i8 %650, 1
  store i8 %651, i8* %75, align 1, !tbaa !2446
  %652 = xor i32 %640, %624
  %653 = xor i32 %652, %641
  %654 = lshr i32 %653, 4
  %655 = trunc i32 %654 to i8
  %656 = and i8 %655, 1
  store i8 %656, i8* %76, align 1, !tbaa !2447
  %657 = icmp eq i32 %641, 0
  %658 = zext i1 %657 to i8
  store i8 %658, i8* %77, align 1, !tbaa !2448
  %659 = lshr i32 %641, 31
  %660 = trunc i32 %659 to i8
  store i8 %660, i8* %78, align 1, !tbaa !2449
  %661 = lshr i32 %640, 31
  %662 = xor i32 %659, %635
  %663 = xor i32 %659, %661
  %664 = add nuw nsw i32 %662, %663
  %665 = icmp eq i32 %664, 2
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %79, align 1, !tbaa !2450
  %667 = sext i32 %641 to i64
  store i64 %667, i64* %RDI, align 8, !tbaa !2428
  %668 = shl nsw i64 %667, 2
  %669 = add i64 %668, %611
  %670 = add i64 %608, 22
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to i32*
  %672 = load i32, i32* %671, align 4
  store i32 %672, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %673 = add i64 %606, -32
  %674 = add i64 %608, 26
  store i64 %674, i64* %PC, align 8
  %675 = inttoptr i64 %673 to i64*
  %676 = load i64, i64* %675, align 8
  store i64 %676, i64* %RSI, align 8, !tbaa !2428
  %677 = add i64 %608, 29
  store i64 %677, i64* %PC, align 8
  %678 = load <2 x float>, <2 x float>* %65, align 1
  %679 = extractelement <2 x float> %678, i32 0
  %680 = inttoptr i64 %676 to float*
  %681 = load float, float* %680, align 4
  %682 = fcmp uno float %679, %681
  br i1 %682, label %683, label %693

; <label>:683:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %684 = fadd float %679, %681
  %685 = bitcast float %684 to i32
  %686 = and i32 %685, 2143289344
  %687 = icmp eq i32 %686, 2139095040
  %688 = and i32 %685, 4194303
  %689 = icmp ne i32 %688, 0
  %690 = and i1 %687, %689
  br i1 %690, label %691, label %699

; <label>:691:                                    ; preds = %683
  %692 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %677, %struct.Memory* %520) #13
  %.pre25 = load i64, i64* %PC, align 8
  %.pre26 = load i8, i8* %74, align 1, !tbaa !2432
  %.pre27 = load i8, i8* %77, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:693:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %694 = fcmp ogt float %679, %681
  br i1 %694, label %699, label %695

; <label>:695:                                    ; preds = %693
  %696 = fcmp olt float %679, %681
  br i1 %696, label %699, label %697

; <label>:697:                                    ; preds = %695
  %698 = fcmp oeq float %679, %681
  br i1 %698, label %699, label %703

; <label>:699:                                    ; preds = %697, %695, %693, %683
  %700 = phi i8 [ 0, %693 ], [ 0, %695 ], [ 1, %697 ], [ 1, %683 ]
  %701 = phi i8 [ 0, %693 ], [ 0, %695 ], [ 0, %697 ], [ 1, %683 ]
  %702 = phi i8 [ 0, %693 ], [ 1, %695 ], [ 0, %697 ], [ 1, %683 ]
  store i8 %700, i8* %77, align 1, !tbaa !2456
  store i8 %701, i8* %75, align 1, !tbaa !2456
  store i8 %702, i8* %74, align 1, !tbaa !2456
  br label %703

; <label>:703:                                    ; preds = %699, %697
  %704 = phi i8 [ %700, %699 ], [ %658, %697 ]
  %705 = phi i8 [ %702, %699 ], [ %646, %697 ]
  store i8 0, i8* %79, align 1, !tbaa !2456
  store i8 0, i8* %78, align 1, !tbaa !2456
  store i8 0, i8* %76, align 1, !tbaa !2456
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %703, %691
  %706 = phi i8 [ %.pre27, %691 ], [ %704, %703 ]
  %707 = phi i8 [ %.pre26, %691 ], [ %705, %703 ]
  %708 = phi i64 [ %.pre25, %691 ], [ %677, %703 ]
  %709 = phi %struct.Memory* [ %692, %691 ], [ %520, %703 ]
  %710 = or i8 %707, %706
  %711 = icmp ne i8 %710, 0
  %.v33 = select i1 %711, i64 38, i64 6
  %712 = add i64 %.v33, %708
  store i64 %712, i64* %PC, align 8, !tbaa !2428
  %713 = load i64, i64* %RBP, align 8
  br i1 %711, label %block_401842, label %block_401822

block_4017a2:                                     ; preds = %block_4017a2.preheader, %block_40184f
  %714 = phi i64 [ %466, %block_40184f ], [ %.pre21, %block_4017a2.preheader ]
  %MEMORY.3 = phi %struct.Memory* [ %709, %block_40184f ], [ %MEMORY.4, %block_4017a2.preheader ]
  %715 = load i64, i64* %RBP, align 8
  %716 = add i64 %715, -40
  %717 = add i64 %714, 3
  store i64 %717, i64* %PC, align 8
  %718 = inttoptr i64 %716 to i32*
  %719 = load i32, i32* %718, align 4
  %720 = zext i32 %719 to i64
  store i64 %720, i64* %RAX, align 8, !tbaa !2428
  %721 = add i64 %715, -16
  %722 = add i64 %714, 6
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %721 to i32*
  %724 = load i32, i32* %723, align 4
  %725 = sub i32 %719, %724
  %726 = icmp ult i32 %719, %724
  %727 = zext i1 %726 to i8
  store i8 %727, i8* %74, align 1, !tbaa !2432
  %728 = and i32 %725, 255
  %729 = tail call i32 @llvm.ctpop.i32(i32 %728) #10
  %730 = trunc i32 %729 to i8
  %731 = and i8 %730, 1
  %732 = xor i8 %731, 1
  store i8 %732, i8* %75, align 1, !tbaa !2446
  %733 = xor i32 %724, %719
  %734 = xor i32 %733, %725
  %735 = lshr i32 %734, 4
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  store i8 %737, i8* %76, align 1, !tbaa !2447
  %738 = icmp eq i32 %725, 0
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %77, align 1, !tbaa !2448
  %740 = lshr i32 %725, 31
  %741 = trunc i32 %740 to i8
  store i8 %741, i8* %78, align 1, !tbaa !2449
  %742 = lshr i32 %719, 31
  %743 = lshr i32 %724, 31
  %744 = xor i32 %743, %742
  %745 = xor i32 %740, %742
  %746 = add nuw nsw i32 %745, %744
  %747 = icmp eq i32 %746, 2
  %748 = zext i1 %747 to i8
  store i8 %748, i8* %79, align 1, !tbaa !2450
  %749 = icmp ne i8 %741, 0
  %750 = xor i1 %749, %747
  %.v30 = select i1 %750, i64 12, i64 200
  %751 = add i64 %.v30, %714
  store i64 %751, i64* %PC, align 8, !tbaa !2428
  br i1 %750, label %block_4017ae, label %block_40186a

block_401912:                                     ; preds = %block_4018c8
  %752 = add i64 %298, -44
  %753 = add i64 %334, 8
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i32*
  %755 = load i32, i32* %754, align 4
  %756 = add i32 %755, 1
  %757 = zext i32 %756 to i64
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = icmp eq i32 %755, -1
  %759 = icmp eq i32 %756, 0
  %760 = or i1 %758, %759
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %74, align 1, !tbaa !2432
  %762 = and i32 %756, 255
  %763 = tail call i32 @llvm.ctpop.i32(i32 %762) #10
  %764 = trunc i32 %763 to i8
  %765 = and i8 %764, 1
  %766 = xor i8 %765, 1
  store i8 %766, i8* %75, align 1, !tbaa !2446
  %767 = xor i32 %756, %755
  %768 = lshr i32 %767, 4
  %769 = trunc i32 %768 to i8
  %770 = and i8 %769, 1
  store i8 %770, i8* %76, align 1, !tbaa !2447
  %771 = zext i1 %759 to i8
  store i8 %771, i8* %77, align 1, !tbaa !2448
  %772 = lshr i32 %756, 31
  %773 = trunc i32 %772 to i8
  store i8 %773, i8* %78, align 1, !tbaa !2449
  %774 = lshr i32 %755, 31
  %775 = xor i32 %772, %774
  %776 = add nuw nsw i32 %775, %772
  %777 = icmp eq i32 %776, 2
  %778 = zext i1 %777 to i8
  store i8 %778, i8* %79, align 1, !tbaa !2450
  %779 = add i64 %334, 14
  store i64 %779, i64* %PC, align 8
  store i32 %756, i32* %754, align 4
  %780 = load i64, i64* %PC, align 8
  %781 = add i64 %780, -107
  store i64 %781, i64* %PC, align 8, !tbaa !2428
  br label %block_4018b5

block_401890:                                     ; preds = %block_401884
  store <4 x i32> zeroinitializer, <4 x i32>* %24, align 1, !tbaa !2453
  %782 = add i64 %876, -24
  %783 = add i64 %912, 7
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %782 to i64*
  %785 = load i64, i64* %784, align 8
  store i64 %785, i64* %RAX, align 8, !tbaa !2428
  %786 = add i64 %912, 11
  store i64 %786, i64* %PC, align 8
  %787 = load i32, i32* %879, align 4
  %788 = sext i32 %787 to i64
  store i64 %788, i64* %RCX, align 8, !tbaa !2428
  %789 = shl nsw i64 %788, 2
  %790 = add i64 %789, %785
  %791 = add i64 %912, 16
  store i64 %791, i64* %PC, align 8
  %792 = inttoptr i64 %790 to float*
  store float 0.000000e+00, float* %792, align 4
  %793 = load i64, i64* %RBP, align 8
  %794 = add i64 %793, -40
  %795 = load i64, i64* %PC, align 8
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC, align 8
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797, align 4
  %799 = add i32 %798, 1
  %800 = zext i32 %799 to i64
  store i64 %800, i64* %RAX, align 8, !tbaa !2428
  %801 = icmp eq i32 %798, -1
  %802 = icmp eq i32 %799, 0
  %803 = or i1 %801, %802
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %74, align 1, !tbaa !2432
  %805 = and i32 %799, 255
  %806 = tail call i32 @llvm.ctpop.i32(i32 %805) #10
  %807 = trunc i32 %806 to i8
  %808 = and i8 %807, 1
  %809 = xor i8 %808, 1
  store i8 %809, i8* %75, align 1, !tbaa !2446
  %810 = xor i32 %799, %798
  %811 = lshr i32 %810, 4
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  store i8 %813, i8* %76, align 1, !tbaa !2447
  %814 = zext i1 %802 to i8
  store i8 %814, i8* %77, align 1, !tbaa !2448
  %815 = lshr i32 %799, 31
  %816 = trunc i32 %815 to i8
  store i8 %816, i8* %78, align 1, !tbaa !2449
  %817 = lshr i32 %798, 31
  %818 = xor i32 %815, %817
  %819 = add nuw nsw i32 %818, %815
  %820 = icmp eq i32 %819, 2
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %79, align 1, !tbaa !2450
  %822 = add i64 %795, 9
  store i64 %822, i64* %PC, align 8
  store i32 %799, i32* %797, align 4
  %823 = load i64, i64* %PC, align 8
  %824 = add i64 %823, -37
  store i64 %824, i64* %PC, align 8, !tbaa !2428
  br label %block_401884

block_40178f:                                     ; preds = %block_40186a, %block_401760
  %825 = phi i64 [ %.pre, %block_401760 ], [ %420, %block_40186a ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401760 ], [ %MEMORY.3, %block_40186a ]
  %826 = load i64, i64* %RBP, align 8
  %827 = add i64 %826, -44
  %828 = add i64 %825, 3
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i32*
  %830 = load i32, i32* %829, align 4
  %831 = zext i32 %830 to i64
  store i64 %831, i64* %RAX, align 8, !tbaa !2428
  %832 = add i64 %826, -16
  %833 = add i64 %825, 6
  store i64 %833, i64* %PC, align 8
  %834 = inttoptr i64 %832 to i32*
  %835 = load i32, i32* %834, align 4
  %836 = sub i32 %830, %835
  %837 = icmp ult i32 %830, %835
  %838 = zext i1 %837 to i8
  store i8 %838, i8* %74, align 1, !tbaa !2432
  %839 = and i32 %836, 255
  %840 = tail call i32 @llvm.ctpop.i32(i32 %839) #10
  %841 = trunc i32 %840 to i8
  %842 = and i8 %841, 1
  %843 = xor i8 %842, 1
  store i8 %843, i8* %75, align 1, !tbaa !2446
  %844 = xor i32 %835, %830
  %845 = xor i32 %844, %836
  %846 = lshr i32 %845, 4
  %847 = trunc i32 %846 to i8
  %848 = and i8 %847, 1
  store i8 %848, i8* %76, align 1, !tbaa !2447
  %849 = icmp eq i32 %836, 0
  %850 = zext i1 %849 to i8
  store i8 %850, i8* %77, align 1, !tbaa !2448
  %851 = lshr i32 %836, 31
  %852 = trunc i32 %851 to i8
  store i8 %852, i8* %78, align 1, !tbaa !2449
  %853 = lshr i32 %830, 31
  %854 = lshr i32 %835, 31
  %855 = xor i32 %854, %853
  %856 = xor i32 %851, %853
  %857 = add nuw nsw i32 %856, %855
  %858 = icmp eq i32 %857, 2
  %859 = zext i1 %858 to i8
  store i8 %859, i8* %79, align 1, !tbaa !2450
  %860 = icmp ne i8 %852, 0
  %861 = xor i1 %860, %858
  %.v = select i1 %861, i64 12, i64 238
  %862 = add i64 %826, -40
  %863 = add i64 %825, 7
  %864 = add i64 %863, %.v
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %862 to i32*
  store i32 0, i32* %865, align 4
  %.pre21 = load i64, i64* %PC, align 8
  br i1 %861, label %block_4017a2.preheader, label %block_401884.preheader

block_4017a2.preheader:                           ; preds = %block_40178f
  br label %block_4017a2

block_401884.preheader:                           ; preds = %block_40178f
  br label %block_401884

block_401925:                                     ; preds = %block_4018b5
  %866 = add i64 %387, 1
  store i64 %866, i64* %PC, align 8
  %867 = load i64, i64* %11, align 8, !tbaa !2428
  %868 = add i64 %867, 8
  %869 = inttoptr i64 %867 to i64*
  %870 = load i64, i64* %869, align 8
  store i64 %870, i64* %RBP, align 8, !tbaa !2428
  store i64 %868, i64* %11, align 8, !tbaa !2428
  %871 = add i64 %387, 2
  store i64 %871, i64* %PC, align 8
  %872 = inttoptr i64 %868 to i64*
  %873 = load i64, i64* %872, align 8
  store i64 %873, i64* %PC, align 8, !tbaa !2428
  %874 = add i64 %867, 16
  store i64 %874, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_401884:                                     ; preds = %block_401884.preheader, %block_401890
  %875 = phi i64 [ %824, %block_401890 ], [ %.pre21, %block_401884.preheader ]
  %876 = load i64, i64* %RBP, align 8
  %877 = add i64 %876, -40
  %878 = add i64 %875, 3
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %877 to i32*
  %880 = load i32, i32* %879, align 4
  %881 = zext i32 %880 to i64
  store i64 %881, i64* %RAX, align 8, !tbaa !2428
  %882 = add i64 %876, -16
  %883 = add i64 %875, 6
  store i64 %883, i64* %PC, align 8
  %884 = inttoptr i64 %882 to i32*
  %885 = load i32, i32* %884, align 4
  %886 = sub i32 %880, %885
  %887 = icmp ult i32 %880, %885
  %888 = zext i1 %887 to i8
  store i8 %888, i8* %74, align 1, !tbaa !2432
  %889 = and i32 %886, 255
  %890 = tail call i32 @llvm.ctpop.i32(i32 %889) #10
  %891 = trunc i32 %890 to i8
  %892 = and i8 %891, 1
  %893 = xor i8 %892, 1
  store i8 %893, i8* %75, align 1, !tbaa !2446
  %894 = xor i32 %885, %880
  %895 = xor i32 %894, %886
  %896 = lshr i32 %895, 4
  %897 = trunc i32 %896 to i8
  %898 = and i8 %897, 1
  store i8 %898, i8* %76, align 1, !tbaa !2447
  %899 = icmp eq i32 %886, 0
  %900 = zext i1 %899 to i8
  store i8 %900, i8* %77, align 1, !tbaa !2448
  %901 = lshr i32 %886, 31
  %902 = trunc i32 %901 to i8
  store i8 %902, i8* %78, align 1, !tbaa !2449
  %903 = lshr i32 %880, 31
  %904 = lshr i32 %885, 31
  %905 = xor i32 %904, %903
  %906 = xor i32 %901, %903
  %907 = add nuw nsw i32 %906, %905
  %908 = icmp eq i32 %907, 2
  %909 = zext i1 %908 to i8
  store i8 %909, i8* %79, align 1, !tbaa !2450
  %910 = icmp ne i8 %902, 0
  %911 = xor i1 %910, %908
  %.v31 = select i1 %911, i64 12, i64 42
  %912 = add i64 %.v31, %875
  store i64 %912, i64* %PC, align 8, !tbaa !2428
  br i1 %911, label %block_401890, label %block_4018ae
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4029f0_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_4029f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %17 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %18 = getelementptr inbounds i8, i8* %15, i64 4
  %19 = bitcast i8* %18 to i32*
  %20 = bitcast i64* %16 to i32*
  %21 = getelementptr inbounds i8, i8* %15, i64 12
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %23, align 1, !tbaa !2453
  %24 = add i64 %11, -16
  %25 = load i32, i32* %EDI, align 4
  %26 = add i64 %14, 9
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %27, align 4
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %RSI, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33, align 8
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -20
  %36 = load i32, i32* %EDX, align 4
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %39, align 4
  %40 = load i64, i64* %RBP, align 8
  %41 = add i64 %40, -32
  %42 = load i64, i64* %RCX, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %45, align 8
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -36
  %48 = load i32, i32* %R8D, align 4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %51, align 4
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -60
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i32*
  store i32 0, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -56
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 7
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  store i32 0, i32* %61, align 4
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -40
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC, align 8
  %66 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 1
  %68 = extractelement <2 x float> %67, i32 0
  %69 = inttoptr i64 %63 to float*
  store float %68, float* %69, align 4
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = and i32 %75, 255
  %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #10
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2446
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %83, align 1, !tbaa !2447
  %84 = icmp eq i32 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i32 %75, 31
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = xor i1 %84, true
  %92 = icmp eq i8 %88, 0
  %93 = and i1 %92, %91
  %.v23 = select i1 %93, i64 23, i64 10
  %94 = add i64 %.v23, %72
  store i64 %94, i64* %PC, align 8, !tbaa !2428
  br i1 %93, label %block_402a33, label %block_402a26

block_402b3a:                                     ; preds = %block_402af8
  %95 = add i64 %116, -4
  %96 = add i64 %152, 10
  store i64 %96, i64* %PC, align 8
  %97 = load <2 x float>, <2 x float>* %66, align 1
  %98 = extractelement <2 x float> %97, i32 0
  %99 = inttoptr i64 %95 to float*
  store float %98, float* %99, align 4
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_402b44

block_402b44:                                     ; preds = %block_402ae2, %block_402a26, %block_402b3a
  %.pre-phi20 = phi float* [ %484, %block_402ae2 ], [ %.pre19, %block_402a26 ], [ %586, %block_402b3a ]
  %.pre-phi18 = phi float* [ %483, %block_402ae2 ], [ %.pre17, %block_402a26 ], [ %585, %block_402b3a ]
  %.pre-phi = phi float* [ %482, %block_402ae2 ], [ %.pre16, %block_402a26 ], [ %584, %block_402b3a ]
  %100 = phi i64 [ %687, %block_402ae2 ], [ %554, %block_402a26 ], [ %.pre15, %block_402b3a ]
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -4
  %103 = add i64 %100, 5
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi20, align 1, !tbaa !2451
  %106 = add i64 %100, 6
  store i64 %106, i64* %PC, align 8
  %107 = load i64, i64* %10, align 8, !tbaa !2428
  %108 = add i64 %107, 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %10, align 8, !tbaa !2428
  %111 = add i64 %100, 7
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %107, 16
  store i64 %114, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402af8:                                     ; preds = %block_402b04, %block_402af1
  %115 = phi i64 [ %680, %block_402b04 ], [ %.pre, %block_402af1 ]
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -44
  %118 = add i64 %115, 3
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = add i64 %116, -8
  %123 = add i64 %115, 6
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %122 to i32*
  %125 = load i32, i32* %124, align 4
  %126 = sub i32 %120, %125
  %127 = icmp ult i32 %120, %125
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %76, align 1, !tbaa !2432
  %129 = and i32 %126, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #10
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %82, align 1, !tbaa !2446
  %134 = xor i32 %125, %120
  %135 = xor i32 %134, %126
  %136 = lshr i32 %135, 4
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %83, align 1, !tbaa !2447
  %139 = icmp eq i32 %126, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %86, align 1, !tbaa !2448
  %141 = lshr i32 %126, 31
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %89, align 1, !tbaa !2449
  %143 = lshr i32 %120, 31
  %144 = lshr i32 %125, 31
  %145 = xor i32 %144, %143
  %146 = xor i32 %141, %143
  %147 = add nuw nsw i32 %146, %145
  %148 = icmp eq i32 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %90, align 1, !tbaa !2450
  %150 = icmp ne i8 %142, 0
  %151 = xor i1 %150, %148
  %.v22 = select i1 %151, i64 12, i64 66
  %152 = add i64 %.v22, %115
  %153 = add i64 %116, -40
  %154 = add i64 %152, 5
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i32*
  %156 = load i32, i32* %155, align 4
  store i32 %156, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %584, align 1, !tbaa !2451
  store float 0.000000e+00, float* %585, align 1, !tbaa !2451
  store float 0.000000e+00, float* %586, align 1, !tbaa !2451
  br i1 %151, label %block_402b04, label %block_402b3a

block_402a8e:                                     ; preds = %block_402a87, %block_402a9a
  %157 = phi i64 [ %.pre14, %block_402a87 ], [ %476, %block_402a9a ]
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -44
  %160 = add i64 %157, 3
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %159 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = zext i32 %162 to i64
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %158, -8
  %165 = add i64 %157, 6
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i32*
  %167 = load i32, i32* %166, align 4
  %168 = sub i32 %162, %167
  %169 = icmp ult i32 %162, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %76, align 1, !tbaa !2432
  %171 = and i32 %168, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #10
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %82, align 1, !tbaa !2446
  %176 = xor i32 %167, %162
  %177 = xor i32 %176, %168
  %178 = lshr i32 %177, 4
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %83, align 1, !tbaa !2447
  %181 = icmp eq i32 %168, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %86, align 1, !tbaa !2448
  %183 = lshr i32 %168, 31
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %89, align 1, !tbaa !2449
  %185 = lshr i32 %162, 31
  %186 = lshr i32 %167, 31
  %187 = xor i32 %186, %185
  %188 = xor i32 %183, %185
  %189 = add nuw nsw i32 %188, %187
  %190 = icmp eq i32 %189, 2
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %90, align 1, !tbaa !2450
  %192 = icmp ne i8 %184, 0
  %193 = xor i1 %192, %190
  %.v21 = select i1 %193, i64 12, i64 84
  %194 = add i64 %.v21, %157
  %195 = add i64 %158, -40
  %196 = add i64 %194, 5
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i32*
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %482, align 1, !tbaa !2451
  store float 0.000000e+00, float* %483, align 1, !tbaa !2451
  store float 0.000000e+00, float* %484, align 1, !tbaa !2451
  br i1 %193, label %block_402a9a, label %block_402ae2

block_402a3d:                                     ; preds = %block_402a33
  %199 = add i64 %70, -36
  %200 = add i64 %580, 4
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = add i32 %202, -1
  %204 = icmp eq i32 %202, 0
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %76, align 1, !tbaa !2432
  %206 = and i32 %203, 255
  %207 = tail call i32 @llvm.ctpop.i32(i32 %206) #10
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %82, align 1, !tbaa !2446
  %211 = xor i32 %203, %202
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  store i8 %214, i8* %83, align 1, !tbaa !2447
  %215 = icmp eq i32 %203, 0
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %86, align 1, !tbaa !2448
  %217 = lshr i32 %203, 31
  %218 = trunc i32 %217 to i8
  store i8 %218, i8* %89, align 1, !tbaa !2449
  %219 = lshr i32 %202, 31
  %220 = xor i32 %217, %219
  %221 = add nuw nsw i32 %220, %219
  %222 = icmp eq i32 %221, 2
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %90, align 1, !tbaa !2450
  %.v25 = select i1 %215, i64 180, i64 10
  %224 = add i64 %.v25, %580
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %215, label %block_402af1, label %block_402a47

block_402a6e:                                     ; preds = %block_402a5f, %block_402a47
  %225 = phi i64 [ %267, %block_402a47 ], [ %.pre11, %block_402a5f ]
  %226 = phi i64 [ %251, %block_402a47 ], [ %.pre10, %block_402a5f ]
  %227 = add i64 %226, -36
  %228 = add i64 %225, 4
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i32*
  %230 = load i32, i32* %229, align 4
  store i8 0, i8* %76, align 1, !tbaa !2432
  %231 = and i32 %230, 255
  %232 = tail call i32 @llvm.ctpop.i32(i32 %231) #10
  %233 = trunc i32 %232 to i8
  %234 = and i8 %233, 1
  %235 = xor i8 %234, 1
  store i8 %235, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  %236 = icmp eq i32 %230, 0
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %86, align 1, !tbaa !2448
  %238 = lshr i32 %230, 31
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  %240 = icmp ne i8 %239, 0
  %.v7 = select i1 %240, i64 6, i64 21
  %241 = add i64 %.v7, %228
  store i64 %241, i64* %PC, align 8, !tbaa !2428
  br i1 %240, label %block_402a78, label %block_402a87

block_402a47:                                     ; preds = %block_402a33, %block_402a3d
  %242 = phi i64 [ %580, %block_402a33 ], [ %224, %block_402a3d ]
  %243 = add i64 %70, -48
  %244 = add i64 %242, 7
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i32*
  store i32 0, i32* %245, align 4
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -52
  %248 = load i64, i64* %PC, align 8
  %249 = add i64 %248, 7
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %247 to i32*
  store i32 0, i32* %250, align 4
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -20
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255, align 4
  store i8 0, i8* %76, align 1, !tbaa !2432
  %257 = and i32 %256, 255
  %258 = tail call i32 @llvm.ctpop.i32(i32 %257) #10
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  store i8 %261, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  %262 = icmp eq i32 %256, 0
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %86, align 1, !tbaa !2448
  %264 = lshr i32 %256, 31
  %265 = trunc i32 %264 to i8
  store i8 %265, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  %266 = icmp ne i8 %265, 0
  %.v = select i1 %266, i64 6, i64 21
  %267 = add i64 %.v, %254
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  br i1 %266, label %block_402a5f, label %block_402a6e

block_402a78:                                     ; preds = %block_402a6e
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %76, align 1, !tbaa !2432
  store i8 1, i8* %82, align 1, !tbaa !2446
  store i8 1, i8* %86, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  store i8 0, i8* %83, align 1, !tbaa !2447
  %268 = add i64 %226, -8
  %269 = add i64 %241, 5
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %268 to i32*
  %271 = load i32, i32* %270, align 4
  %272 = sub i32 0, %271
  %273 = lshr i32 %272, 31
  %274 = sub i32 1, %271
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = icmp eq i32 %272, -1
  %277 = icmp eq i32 %274, 0
  %278 = or i1 %276, %277
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %76, align 1, !tbaa !2432
  %280 = and i32 %274, 255
  %281 = tail call i32 @llvm.ctpop.i32(i32 %280) #10
  %282 = trunc i32 %281 to i8
  %283 = and i8 %282, 1
  %284 = xor i8 %283, 1
  store i8 %284, i8* %82, align 1, !tbaa !2446
  %285 = xor i32 %274, %272
  %286 = lshr i32 %285, 4
  %287 = trunc i32 %286 to i8
  %288 = and i8 %287, 1
  store i8 %288, i8* %83, align 1, !tbaa !2447
  %289 = zext i1 %277 to i8
  store i8 %289, i8* %86, align 1, !tbaa !2448
  %290 = lshr i32 %274, 31
  %291 = trunc i32 %290 to i8
  store i8 %291, i8* %89, align 1, !tbaa !2449
  %292 = xor i32 %290, %273
  %293 = add nuw nsw i32 %292, %290
  %294 = icmp eq i32 %293, 2
  %295 = zext i1 %294 to i8
  store i8 %295, i8* %90, align 1, !tbaa !2450
  %296 = add i64 %241, 12
  store i64 %296, i64* %PC, align 8
  %297 = load i32, i32* %229, align 4
  %298 = sext i32 %274 to i64
  %299 = sext i32 %297 to i64
  %300 = mul nsw i64 %299, %298
  %301 = trunc i64 %300 to i32
  %302 = and i64 %300, 4294967295
  store i64 %302, i64* %RAX, align 8, !tbaa !2428
  %303 = shl i64 %300, 32
  %304 = ashr exact i64 %303, 32
  %305 = icmp ne i64 %304, %300
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %76, align 1, !tbaa !2432
  %307 = and i32 %301, 255
  %308 = tail call i32 @llvm.ctpop.i32(i32 %307) #10
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  store i8 %311, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  store i8 0, i8* %86, align 1, !tbaa !2448
  %312 = lshr i32 %301, 31
  %313 = trunc i32 %312 to i8
  store i8 %313, i8* %89, align 1, !tbaa !2449
  store i8 %306, i8* %90, align 1, !tbaa !2450
  %314 = add i64 %226, -52
  %315 = add i64 %241, 15
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to i32*
  store i32 %301, i32* %316, align 4
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %PC, align 8
  br label %block_402a87

block_402a9a:                                     ; preds = %block_402a8e
  %317 = add i64 %158, -16
  %318 = add i64 %194, 9
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %158, -48
  %322 = add i64 %194, 13
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i32*
  %324 = load i32, i32* %323, align 4
  %325 = sext i32 %324 to i64
  store i64 %325, i64* %RCX, align 8, !tbaa !2428
  %326 = shl nsw i64 %325, 2
  %327 = add i64 %326, %320
  %328 = add i64 %194, 18
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %488, align 1, !tbaa !2451
  store float 0.000000e+00, float* %490, align 1, !tbaa !2451
  store float 0.000000e+00, float* %492, align 1, !tbaa !2451
  store float 0.000000e+00, float* %494, align 1, !tbaa !2451
  %331 = add i64 %158, -32
  %332 = add i64 %194, 22
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = add i64 %158, -52
  %336 = add i64 %194, 26
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = sext i32 %338 to i64
  store i64 %339, i64* %RCX, align 8, !tbaa !2428
  %340 = shl nsw i64 %339, 2
  %341 = add i64 %340, %334
  %342 = add i64 %194, 31
  store i64 %342, i64* %PC, align 8
  %343 = load <2 x float>, <2 x float>* %495, align 1
  %344 = load <2 x i32>, <2 x i32>* %496, align 1
  %345 = inttoptr i64 %341 to float*
  %346 = load float, float* %345, align 4
  %347 = extractelement <2 x float> %343, i32 0
  %348 = fmul float %347, %346
  store float %348, float* %487, align 1, !tbaa !2451
  %349 = bitcast <2 x float> %343 to <2 x i32>
  %350 = extractelement <2 x i32> %349, i32 1
  store i32 %350, i32* %497, align 1, !tbaa !2451
  %351 = extractelement <2 x i32> %344, i32 0
  store i32 %351, i32* %498, align 1, !tbaa !2451
  %352 = extractelement <2 x i32> %344, i32 1
  store i32 %352, i32* %499, align 1, !tbaa !2451
  %353 = load <2 x float>, <2 x float>* %66, align 1
  %354 = load <2 x i32>, <2 x i32>* %500, align 1
  %355 = load <2 x float>, <2 x float>* %495, align 1
  %356 = extractelement <2 x float> %353, i32 0
  %357 = extractelement <2 x float> %355, i32 0
  %358 = fadd float %356, %357
  store float %358, float* %485, align 1, !tbaa !2451
  %359 = bitcast <2 x float> %353 to <2 x i32>
  %360 = extractelement <2 x i32> %359, i32 1
  store i32 %360, i32* %19, align 1, !tbaa !2451
  %361 = extractelement <2 x i32> %354, i32 0
  store i32 %361, i32* %20, align 1, !tbaa !2451
  %362 = extractelement <2 x i32> %354, i32 1
  store i32 %362, i32* %22, align 1, !tbaa !2451
  %363 = add i64 %194, 40
  store i64 %363, i64* %PC, align 8
  %364 = load <2 x float>, <2 x float>* %66, align 1
  %365 = extractelement <2 x float> %364, i32 0
  %366 = inttoptr i64 %195 to float*
  store float %365, float* %366, align 4
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -48
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 3
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %368 to i32*
  %372 = load i32, i32* %371, align 4
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %RDX, align 8, !tbaa !2428
  %374 = add i64 %367, -20
  %375 = add i64 %369, 6
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i32*
  %377 = load i32, i32* %376, align 4
  %378 = add i32 %377, %372
  %379 = zext i32 %378 to i64
  store i64 %379, i64* %RDX, align 8, !tbaa !2428
  %380 = icmp ult i32 %378, %372
  %381 = icmp ult i32 %378, %377
  %382 = or i1 %380, %381
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %76, align 1, !tbaa !2432
  %384 = and i32 %378, 255
  %385 = tail call i32 @llvm.ctpop.i32(i32 %384) #10
  %386 = trunc i32 %385 to i8
  %387 = and i8 %386, 1
  %388 = xor i8 %387, 1
  store i8 %388, i8* %82, align 1, !tbaa !2446
  %389 = xor i32 %377, %372
  %390 = xor i32 %389, %378
  %391 = lshr i32 %390, 4
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  store i8 %393, i8* %83, align 1, !tbaa !2447
  %394 = icmp eq i32 %378, 0
  %395 = zext i1 %394 to i8
  store i8 %395, i8* %86, align 1, !tbaa !2448
  %396 = lshr i32 %378, 31
  %397 = trunc i32 %396 to i8
  store i8 %397, i8* %89, align 1, !tbaa !2449
  %398 = lshr i32 %372, 31
  %399 = lshr i32 %377, 31
  %400 = xor i32 %396, %398
  %401 = xor i32 %396, %399
  %402 = add nuw nsw i32 %400, %401
  %403 = icmp eq i32 %402, 2
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %90, align 1, !tbaa !2450
  %405 = add i64 %369, 9
  store i64 %405, i64* %PC, align 8
  store i32 %378, i32* %371, align 4
  %406 = load i64, i64* %RBP, align 8
  %407 = add i64 %406, -52
  %408 = load i64, i64* %PC, align 8
  %409 = add i64 %408, 3
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %407 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = zext i32 %411 to i64
  store i64 %412, i64* %RDX, align 8, !tbaa !2428
  %413 = add i64 %406, -36
  %414 = add i64 %408, 6
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %413 to i32*
  %416 = load i32, i32* %415, align 4
  %417 = add i32 %416, %411
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDX, align 8, !tbaa !2428
  %419 = icmp ult i32 %417, %411
  %420 = icmp ult i32 %417, %416
  %421 = or i1 %419, %420
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %76, align 1, !tbaa !2432
  %423 = and i32 %417, 255
  %424 = tail call i32 @llvm.ctpop.i32(i32 %423) #10
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  %427 = xor i8 %426, 1
  store i8 %427, i8* %82, align 1, !tbaa !2446
  %428 = xor i32 %416, %411
  %429 = xor i32 %428, %417
  %430 = lshr i32 %429, 4
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  store i8 %432, i8* %83, align 1, !tbaa !2447
  %433 = icmp eq i32 %417, 0
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %86, align 1, !tbaa !2448
  %435 = lshr i32 %417, 31
  %436 = trunc i32 %435 to i8
  store i8 %436, i8* %89, align 1, !tbaa !2449
  %437 = lshr i32 %411, 31
  %438 = lshr i32 %416, 31
  %439 = xor i32 %435, %437
  %440 = xor i32 %435, %438
  %441 = add nuw nsw i32 %439, %440
  %442 = icmp eq i32 %441, 2
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %90, align 1, !tbaa !2450
  %444 = add i64 %408, 9
  store i64 %444, i64* %PC, align 8
  store i32 %417, i32* %410, align 4
  %445 = load i64, i64* %RBP, align 8
  %446 = add i64 %445, -44
  %447 = load i64, i64* %PC, align 8
  %448 = add i64 %447, 3
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449, align 4
  %451 = add i32 %450, 1
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %RAX, align 8, !tbaa !2428
  %453 = icmp eq i32 %450, -1
  %454 = icmp eq i32 %451, 0
  %455 = or i1 %453, %454
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %76, align 1, !tbaa !2432
  %457 = and i32 %451, 255
  %458 = tail call i32 @llvm.ctpop.i32(i32 %457) #10
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  store i8 %461, i8* %82, align 1, !tbaa !2446
  %462 = xor i32 %451, %450
  %463 = lshr i32 %462, 4
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %83, align 1, !tbaa !2447
  %466 = zext i1 %454 to i8
  store i8 %466, i8* %86, align 1, !tbaa !2448
  %467 = lshr i32 %451, 31
  %468 = trunc i32 %467 to i8
  store i8 %468, i8* %89, align 1, !tbaa !2449
  %469 = lshr i32 %450, 31
  %470 = xor i32 %467, %469
  %471 = add nuw nsw i32 %470, %467
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %90, align 1, !tbaa !2450
  %474 = add i64 %447, 9
  store i64 %474, i64* %PC, align 8
  store i32 %451, i32* %449, align 4
  %475 = load i64, i64* %PC, align 8
  %476 = add i64 %475, -79
  store i64 %476, i64* %PC, align 8, !tbaa !2428
  br label %block_402a8e

block_402a87:                                     ; preds = %block_402a78, %block_402a6e
  %477 = phi i64 [ %241, %block_402a6e ], [ %.pre13, %block_402a78 ]
  %478 = phi i64 [ %226, %block_402a6e ], [ %.pre12, %block_402a78 ]
  %479 = add i64 %478, -44
  %480 = add i64 %477, 7
  store i64 %480, i64* %PC, align 8
  %481 = inttoptr i64 %479 to i32*
  store i32 0, i32* %481, align 4
  %482 = bitcast i8* %18 to float*
  %483 = bitcast i64* %16 to float*
  %484 = bitcast i8* %21 to float*
  %485 = bitcast [32 x %union.VectorReg]* %6 to float*
  %486 = bitcast %union.VectorReg* %7 to i8*
  %487 = bitcast %union.VectorReg* %7 to float*
  %488 = bitcast %union.VectorReg* %7 to i32*
  %489 = getelementptr inbounds i8, i8* %486, i64 4
  %490 = bitcast i8* %489 to float*
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %492 = bitcast i64* %491 to float*
  %493 = getelementptr inbounds i8, i8* %486, i64 12
  %494 = bitcast i8* %493 to float*
  %495 = bitcast %union.VectorReg* %7 to <2 x float>*
  %496 = bitcast i64* %491 to <2 x i32>*
  %497 = bitcast i8* %489 to i32*
  %498 = bitcast i64* %491 to i32*
  %499 = bitcast i8* %493 to i32*
  %500 = bitcast i64* %16 to <2 x i32>*
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_402a8e

block_402a5f:                                     ; preds = %block_402a47
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %76, align 1, !tbaa !2432
  store i8 1, i8* %82, align 1, !tbaa !2446
  store i8 1, i8* %86, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  store i8 0, i8* %83, align 1, !tbaa !2447
  %501 = add i64 %251, -8
  %502 = add i64 %267, 5
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i32*
  %504 = load i32, i32* %503, align 4
  %505 = sub i32 0, %504
  %506 = lshr i32 %505, 31
  %507 = sub i32 1, %504
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %RAX, align 8, !tbaa !2428
  %509 = icmp eq i32 %505, -1
  %510 = icmp eq i32 %507, 0
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %76, align 1, !tbaa !2432
  %513 = and i32 %507, 255
  %514 = tail call i32 @llvm.ctpop.i32(i32 %513) #10
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = xor i8 %516, 1
  store i8 %517, i8* %82, align 1, !tbaa !2446
  %518 = xor i32 %507, %505
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  store i8 %521, i8* %83, align 1, !tbaa !2447
  %522 = zext i1 %510 to i8
  store i8 %522, i8* %86, align 1, !tbaa !2448
  %523 = lshr i32 %507, 31
  %524 = trunc i32 %523 to i8
  store i8 %524, i8* %89, align 1, !tbaa !2449
  %525 = xor i32 %523, %506
  %526 = add nuw nsw i32 %525, %523
  %527 = icmp eq i32 %526, 2
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %90, align 1, !tbaa !2450
  %529 = add i64 %267, 12
  store i64 %529, i64* %PC, align 8
  %530 = load i32, i32* %255, align 4
  %531 = sext i32 %507 to i64
  %532 = sext i32 %530 to i64
  %533 = mul nsw i64 %532, %531
  %534 = trunc i64 %533 to i32
  %535 = and i64 %533, 4294967295
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = shl i64 %533, 32
  %537 = ashr exact i64 %536, 32
  %538 = icmp ne i64 %537, %533
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %76, align 1, !tbaa !2432
  %540 = and i32 %534, 255
  %541 = tail call i32 @llvm.ctpop.i32(i32 %540) #10
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = xor i8 %543, 1
  store i8 %544, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  store i8 0, i8* %86, align 1, !tbaa !2448
  %545 = lshr i32 %534, 31
  %546 = trunc i32 %545 to i8
  store i8 %546, i8* %89, align 1, !tbaa !2449
  store i8 %539, i8* %90, align 1, !tbaa !2450
  %547 = add i64 %251, -48
  %548 = add i64 %267, 15
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i32*
  store i32 %534, i32* %549, align 4
  %.pre10 = load i64, i64* %RBP, align 8
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_402a6e

block_402a26:                                     ; preds = %block_4029f0
  store <4 x i32> zeroinitializer, <4 x i32>* %23, align 1, !tbaa !2453
  %550 = add i64 %70, -4
  %551 = add i64 %94, 8
  store i64 %551, i64* %PC, align 8
  %552 = inttoptr i64 %550 to float*
  store float 0.000000e+00, float* %552, align 4
  %553 = load i64, i64* %PC, align 8
  %554 = add i64 %553, 278
  store i64 %554, i64* %PC, align 8, !tbaa !2428
  %.pre16 = bitcast i8* %18 to float*
  %.pre17 = bitcast i64* %16 to float*
  %.pre19 = bitcast i8* %21 to float*
  br label %block_402b44

block_402a33:                                     ; preds = %block_4029f0
  %555 = add i64 %70, -20
  %556 = add i64 %94, 4
  store i64 %556, i64* %PC, align 8
  %557 = inttoptr i64 %555 to i32*
  %558 = load i32, i32* %557, align 4
  %559 = add i32 %558, -1
  %560 = icmp eq i32 %558, 0
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %76, align 1, !tbaa !2432
  %562 = and i32 %559, 255
  %563 = tail call i32 @llvm.ctpop.i32(i32 %562) #10
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  store i8 %566, i8* %82, align 1, !tbaa !2446
  %567 = xor i32 %559, %558
  %568 = lshr i32 %567, 4
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  store i8 %570, i8* %83, align 1, !tbaa !2447
  %571 = icmp eq i32 %559, 0
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %86, align 1, !tbaa !2448
  %573 = lshr i32 %559, 31
  %574 = trunc i32 %573 to i8
  store i8 %574, i8* %89, align 1, !tbaa !2449
  %575 = lshr i32 %558, 31
  %576 = xor i32 %573, %575
  %577 = add nuw nsw i32 %576, %575
  %578 = icmp eq i32 %577, 2
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %90, align 1, !tbaa !2450
  %.v24 = select i1 %571, i64 10, i64 20
  %580 = add i64 %.v24, %94
  store i64 %580, i64* %PC, align 8, !tbaa !2428
  br i1 %571, label %block_402a3d, label %block_402a47

block_402af1:                                     ; preds = %block_402a3d
  %581 = add i64 %70, -44
  %582 = add i64 %224, 7
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %581 to i32*
  store i32 0, i32* %583, align 4
  %584 = bitcast i8* %18 to float*
  %585 = bitcast i64* %16 to float*
  %586 = bitcast i8* %21 to float*
  %587 = bitcast [32 x %union.VectorReg]* %6 to float*
  %588 = bitcast %union.VectorReg* %7 to i8*
  %589 = bitcast %union.VectorReg* %7 to float*
  %590 = bitcast %union.VectorReg* %7 to i32*
  %591 = getelementptr inbounds i8, i8* %588, i64 4
  %592 = bitcast i8* %591 to float*
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %594 = bitcast i64* %593 to float*
  %595 = getelementptr inbounds i8, i8* %588, i64 12
  %596 = bitcast i8* %595 to float*
  %597 = bitcast %union.VectorReg* %7 to <2 x float>*
  %598 = bitcast i64* %593 to <2 x i32>*
  %599 = bitcast i8* %591 to i32*
  %600 = bitcast i64* %593 to i32*
  %601 = bitcast i8* %595 to i32*
  %602 = bitcast i64* %16 to <2 x i32>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402af8

block_402b04:                                     ; preds = %block_402af8
  %603 = add i64 %116, -16
  %604 = add i64 %152, 9
  store i64 %604, i64* %PC, align 8
  %605 = inttoptr i64 %603 to i64*
  %606 = load i64, i64* %605, align 8
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = add i64 %152, 13
  store i64 %607, i64* %PC, align 8
  %608 = load i32, i32* %119, align 4
  %609 = sext i32 %608 to i64
  store i64 %609, i64* %RCX, align 8, !tbaa !2428
  %610 = shl nsw i64 %609, 2
  %611 = add i64 %610, %606
  %612 = add i64 %152, 18
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %611 to i32*
  %614 = load i32, i32* %613, align 4
  store i32 %614, i32* %590, align 1, !tbaa !2451
  store float 0.000000e+00, float* %592, align 1, !tbaa !2451
  store float 0.000000e+00, float* %594, align 1, !tbaa !2451
  store float 0.000000e+00, float* %596, align 1, !tbaa !2451
  %615 = add i64 %116, -32
  %616 = add i64 %152, 22
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i64*
  %618 = load i64, i64* %617, align 8
  store i64 %618, i64* %RAX, align 8, !tbaa !2428
  %619 = add i64 %152, 26
  store i64 %619, i64* %PC, align 8
  %620 = load i32, i32* %119, align 4
  %621 = sext i32 %620 to i64
  store i64 %621, i64* %RCX, align 8, !tbaa !2428
  %622 = shl nsw i64 %621, 2
  %623 = add i64 %622, %618
  %624 = add i64 %152, 31
  store i64 %624, i64* %PC, align 8
  %625 = load <2 x float>, <2 x float>* %597, align 1
  %626 = load <2 x i32>, <2 x i32>* %598, align 1
  %627 = inttoptr i64 %623 to float*
  %628 = load float, float* %627, align 4
  %629 = extractelement <2 x float> %625, i32 0
  %630 = fmul float %629, %628
  store float %630, float* %589, align 1, !tbaa !2451
  %631 = bitcast <2 x float> %625 to <2 x i32>
  %632 = extractelement <2 x i32> %631, i32 1
  store i32 %632, i32* %599, align 1, !tbaa !2451
  %633 = extractelement <2 x i32> %626, i32 0
  store i32 %633, i32* %600, align 1, !tbaa !2451
  %634 = extractelement <2 x i32> %626, i32 1
  store i32 %634, i32* %601, align 1, !tbaa !2451
  %635 = load <2 x float>, <2 x float>* %66, align 1
  %636 = load <2 x i32>, <2 x i32>* %602, align 1
  %637 = load <2 x float>, <2 x float>* %597, align 1
  %638 = extractelement <2 x float> %635, i32 0
  %639 = extractelement <2 x float> %637, i32 0
  %640 = fadd float %638, %639
  store float %640, float* %587, align 1, !tbaa !2451
  %641 = bitcast <2 x float> %635 to <2 x i32>
  %642 = extractelement <2 x i32> %641, i32 1
  store i32 %642, i32* %19, align 1, !tbaa !2451
  %643 = extractelement <2 x i32> %636, i32 0
  store i32 %643, i32* %20, align 1, !tbaa !2451
  %644 = extractelement <2 x i32> %636, i32 1
  store i32 %644, i32* %22, align 1, !tbaa !2451
  %645 = add i64 %152, 40
  store i64 %645, i64* %PC, align 8
  %646 = load <2 x float>, <2 x float>* %66, align 1
  %647 = extractelement <2 x float> %646, i32 0
  %648 = inttoptr i64 %153 to float*
  store float %647, float* %648, align 4
  %649 = load i64, i64* %RBP, align 8
  %650 = add i64 %649, -44
  %651 = load i64, i64* %PC, align 8
  %652 = add i64 %651, 3
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %650 to i32*
  %654 = load i32, i32* %653, align 4
  %655 = add i32 %654, 1
  %656 = zext i32 %655 to i64
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = icmp eq i32 %654, -1
  %658 = icmp eq i32 %655, 0
  %659 = or i1 %657, %658
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %76, align 1, !tbaa !2432
  %661 = and i32 %655, 255
  %662 = tail call i32 @llvm.ctpop.i32(i32 %661) #10
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  %665 = xor i8 %664, 1
  store i8 %665, i8* %82, align 1, !tbaa !2446
  %666 = xor i32 %655, %654
  %667 = lshr i32 %666, 4
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  store i8 %669, i8* %83, align 1, !tbaa !2447
  %670 = zext i1 %658 to i8
  store i8 %670, i8* %86, align 1, !tbaa !2448
  %671 = lshr i32 %655, 31
  %672 = trunc i32 %671 to i8
  store i8 %672, i8* %89, align 1, !tbaa !2449
  %673 = lshr i32 %654, 31
  %674 = xor i32 %671, %673
  %675 = add nuw nsw i32 %674, %671
  %676 = icmp eq i32 %675, 2
  %677 = zext i1 %676 to i8
  store i8 %677, i8* %90, align 1, !tbaa !2450
  %678 = add i64 %651, 9
  store i64 %678, i64* %PC, align 8
  store i32 %655, i32* %653, align 4
  %679 = load i64, i64* %PC, align 8
  %680 = add i64 %679, -61
  store i64 %680, i64* %PC, align 8, !tbaa !2428
  br label %block_402af8

block_402ae2:                                     ; preds = %block_402a8e
  %681 = add i64 %158, -4
  %682 = add i64 %194, 10
  store i64 %682, i64* %PC, align 8
  %683 = load <2 x float>, <2 x float>* %66, align 1
  %684 = extractelement <2 x float> %683, i32 0
  %685 = inttoptr i64 %681 to float*
  store float %684, float* %685, align 4
  %686 = load i64, i64* %PC, align 8
  %687 = add i64 %686, 88
  store i64 %687, i64* %PC, align 8, !tbaa !2428
  br label %block_402b44
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400570_register_tm_clones(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400570:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = sub i64 %8, ptrtoint (i64* @stderr to i64)
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2428
  store i8 %21, i8* %11, align 1, !tbaa !2456
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #10
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2456
  store i8 0, i8* %13, align 1, !tbaa !2456
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2456
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2456
  store i8 0, i8* %16, align 1, !tbaa !2456
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %.v, %9
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  br i1 %29, label %block_4005a8, label %block_400593

block_400593:                                     ; preds = %block_400570
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  %34 = add i64 %33, 21
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br label %block_4005a8

block_4005a8:                                     ; preds = %block_400593, %block_400570
  %35 = phi i64 [ %34, %block_400593 ], [ %33, %block_400570 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %7, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %38 = add i64 %35, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %5 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %5, 8
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400540_deregister_tm_clones(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400540:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i8), i8* %9, align 1, !tbaa !2432
  %10 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i32), i32 255)) #10
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !2446
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stderr to i64), i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64))), i64 4) to i8), i8 1), i8* %15, align 1, !tbaa !2447
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0) to i8), i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63) to i8), i8* %17, align 1, !tbaa !2449
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %18, align 1, !tbaa !2450
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %8, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16)
  store i64 %19, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), label %block_400568, label %block_400551

block_400551:                                     ; preds = %block_400540
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %9, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  br label %block_400568

block_400568:                                     ; preds = %block_400551, %block_400540
  %21 = phi i64 [ %20, %block_400551 ], [ %19, %block_400540 ]
  %22 = add i64 %21, 1
  store i64 %22, i64* %PC, align 8
  %23 = load i64, i64* %7, align 8
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %24 = add i64 %21, 2
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %5 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %PC, align 8, !tbaa !2428
  %27 = add i64 %5, 8
  store i64 %27, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400530__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400530:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4005e0_frame_dummy() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_4005e0_frame_dummy_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4005e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4005b0___do_global_dtors_aux() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @callback_sub_4005b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4005b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653138_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653148_memset(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653140_clock(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_402e30___libc_csu_fini() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_402e30___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402e30___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_402dc0___libc_csu_init() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402dc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @callback_sub_402dc0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402dc0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400640;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400640_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #11 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dgefa() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401930;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401930_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @what_date() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @what_date_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_400630_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4004a8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4004a8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dgesl() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #10
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401c40_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @epslon() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4027c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4027c0_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @ddot() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4029f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4029f0_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @daxpy() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402880;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402880_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dscal() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402cf0_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @matgen() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401760;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401760_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e34;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402e34__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dmxpy() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_401fc0_dmxpy(%struct.State* %0, i64 undef, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @print_time() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @print_time_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402870_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @idamax() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402b50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_402b50_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @second() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #10
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) #10 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %5, %3
  %6 = tail call %struct.Memory* @sub_4005f0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #10 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %2, %0
  tail call void @callback_sub_402dc0___libc_csu_init()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #10 {
  tail call void @callback_sub_402e30___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { naked nobuiltin noinline nounwind }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind }
attributes #12 = { norecurse nounwind }
attributes #13 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"float", !2430, i64 0}
!2453 = !{!2445, !2445, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"double", !2430, i64 0}
!2456 = !{!2430, !2430, i64 0}
