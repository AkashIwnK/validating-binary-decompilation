; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400498__init_type = type <{ [23 x i8] }>
%seg_4004b0__plt_type = type <{ [64 x i8] }>
%seg_4004f0__text_type = type <{ [60 x i8], i32, [10482 x i8] }>
%seg_402e24__fini_type = type <{ [9 x i8] }>
%seg_402e30__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_403178__eh_frame_hdr_type = type <{ [156 x i8] }>
%seg_403218__eh_frame_type = type <{ [592 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604000__got_plt_type = type <{ [24 x i8], i64, i64, i64 }>
%seg_604030__data_type = type <{ [16 x i8] }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_400498__init = internal constant %seg_400498__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05U; \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4004b0__plt = internal constant %seg_4004b0__plt_type <{ [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%R; \00\00\00\00\00\00\00\00\00\00\00\FF%J; \00\00\00\00\00\00\00\00\00\00\00\FF%B; \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_4004f0__text = internal constant %seg_4004f0__text_type <{ [60 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0 .@\00H\C7\C1\B0-@\00H\C7\C70\06@\00\FF\15\D6: \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00", i32 trunc (i64 add (i64 ptrtoint (%seg_4004f0__text_type* @seg_4004f0__text to i64), i64 6687) to i32), [10482 x i8] c"U\B8@@`\00H=@@`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF@@`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE@@`\00UH\81\EE@@`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF@@`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\A1: \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\8F: \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10\E8\D3\FE\FF\FF\F3\0F\10\05?(\00\00H\89E\F0\F3H\0F*M\F0\F3\0F^\C8\F3\0F\11M\FC\F3\0F\10E\FCH\83\C4\10]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\F0\03\00\00H\BE\DB.@\00\00\00\00\00\F3\0F\10\05\EB'\00\00H\B8\BA.@\00\00\00\00\00H\B9\A0.@\00\00\00\00\001\D2\BF\D0\02\00\00A\89\F8L\8D\8D\C0\FC\FF\FF\C7E\FC\00\00\00\00L\89\CFH\89\B5\B8\FC\FF\FF\89\D6L\89\C2H\89\8D\B0\FC\FF\FF\F3\0F\11\85\AC\FC\FF\FFH\89\85\A0\FC\FF\FF\E8-\FE\FF\FF\C6\85\C0\FC\FF\FF H\8B\85\B0\FC\FF\FFH\89E\A0H\8B\8D\A0\FC\FF\FFH\89M\98\C7\04%P@`\00\C9\00\00\00\C7\04%T@`\00\C8\00\00\00\F3\0F\10\85\AC\FC\FF\FF\F3\0F\11E\F8\C7\04%X@`\00d\00\00\00H\8B<%@@`\00H\8B\B5\B8\FC\FF\FF\B0\00\E8\DC\FD\FF\FFH\BE\E3.@\00\00\00\00\00H\8B<%@@`\00\89\85\9C\FC\FF\FF\B0\00\E8\BD\FD\FF\FFH\BE\EB.@\00\00\00\00\00H\8B<%@@`\00\89\85\98\FC\FF\FF\B0\00\E8\9E\FD\FF\FFH\BE!/@\00\00\00\00\00H\8B<%@@`\00H\8BU\A0\89\85\94\FC\FF\FF\B0\00\E8{\FD\FF\FFH\BE2/@\00\00\00\00\00H\8B<%@@`\00H\8BU\98\89\85\90\FC\FF\FF\B0\00\E8X\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\F2\0F\10\05\A0&\00\00\F2\0F\10\0D\A0&\00\00D\8B\14%X@`\00D\0F\AF\14%X@`\00D\0F\AF\14%X@`\00\F2A\0F*\D2\0F(\D8\F2\0FY\DA\F2\0F^\D9D\8B\14%X@`\00D\0F\AF\14%X@`\00\F2A\0F*\CA\F2\0FY\C1\F2\0FX\D8\F2\0FZ\C3\F3\0F\11E\F4\8B4%P@`\00\8B\14%X@`\00\89\85\8C\FC\FF\FF\E86\0F\00\00\E8\C1\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\F3\0F\11E\D8\8B4%P@`\00\8B\14%X@`\00\E8\CB\10\00\00\E8\86\FD\FF\FF\F3\0F\5CE\D8\F3\0F\11\04%\D0\BAb\00\E8s\FD\FF\FFH\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\F3\0F\11E\D8\8B4%P@`\00\8B\14%X@`\00\E8\8A\13\00\00\E85\FD\FF\FF\F3\0F\5CE\D8\F3\0F\11\04%\0C\BBb\00\F3\0F\10\04%\D0\BAb\00\F3\0FX\04%\0C\BBb\00\F3\0F\11E\F0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8D8\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\80\B4b\00Hc\04%\EC\BCb\00\F3\0F\11\04\85\F0\BCb\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\B4\FF\FF\FFH\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8\FE\0D\00\00\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8DF\00\00\00Hc\04%\EC\BCb\00\F3\0F\10\04\85\80\B4b\00f\0F~\C1\81\F1\00\00\00\80f\0Fn\C1Hc\04%\EC\BCb\00\F3\0F\11\04\85\80\B4b\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A6\FF\FF\FFH\BE\80\B4b\00\00\00\00\00I\B8\F0\BCb\00\00\00\00\00I\B9`@`\00\00\00\00\00\8B<%X@`\00\8B\14%X@`\00\8B\0C%P@`\00\E8\C1\15\00\00\0FW\C0\F3\0F\11E\E4\F3\0F\11E\E8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%X@`\00\0F\8D\FA\00\00\00\F3\0FZE\E4Hc\04%\EC\BCb\00\F3\0FZ\0C\85\80\B4b\00\0F(\15X$\00\00f\0F\DB\CAf\0F.\C1\0F\86\12\00\00\00\F3\0FZE\E4\F2\0F\11\85\80\FC\FF\FF\E9$\00\00\00Hc\04%\EC\BCb\00\F3\0FZ\04\85\80\B4b\00\0F(\0D $\00\00f\0F\DB\C1\F2\0F\11\85\80\FC\FF\FF\F2\0F\10\85\80\FC\FF\FF\F2\0FZ\C0\F3\0F\11E\E4\F3\0FZE\E8Hc\04%\EC\BCb\00\F3\0FZ\0C\85\F0\BCb\00\0F(\15\E6#\00\00f\0F\DB\CAf\0F.\C1\0F\86\12\00\00\00\F3\0FZE\E8\F2\0F\11\85x\FC\FF\FF\E9$\00\00\00Hc\04%\EC\BCb\00\F3\0FZ\04\85\F0\BCb\00\0F(\0D\AE#\00\00f\0F\DB\C1\F2\0F\11\85x\FC\FF\FF\F2\0F\10\85x\FC\FF\FF\F2\0FZ\C0\F3\0F\11E\E8\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\F2\FE\FF\FF\F3\0F\10\05\1F#\00\00\E8\8E\1C\00\00H\BED/@\00\00\00\00\00\F3\0F\10\0D\08#\00\00\F3\0F\11E\DC\F3\0F\10E\E4\F3\0F*\14%X@`\00\F3\0FYU\EC\F3\0FYU\E8\F3\0FYU\DC\F3\0F^\C2\F3\0F\11E\E0\F3\0F\10E\DC\F3\0F\11E\D0\F3\0F\10\04%\F0\BCb\00\F3\0F\5C\C1\F3\0F\11E\CC\8B\04%X@`\00\83\E8\01Hc\C8\F3\0F\10\04\8D\F0\BCb\00\F3\0F\5C\C1\F3\0F\11E\C8H\8B<%@@`\00\B0\00\E87\F9\FF\FFH\BEk/@\00\00\00\00\00H\8B<%@@`\00\89\85t\FC\FF\FF\B0\00\E8\18\F9\FF\FFH\BE\8E/@\00\00\00\00\00H\8B<%@@`\00\F3\0FZE\E0\F3\0FZM\E4\F3\0FZU\D0\F3\0FZ]\CC\F3\0FZe\C8\89\85p\FC\FF\FF\B0\05\E8\E0\F8\FF\FFH\BE\AF/@\00\00\00\00\00H\8B<%@@`\00\8B\14%X@`\00\89\85l\FC\FF\FF\B0\00\E8\BA\F8\FF\FFH\BE\E4/@\00\00\00\00\00H\8B<%@@`\00\8B\14%P@`\00\89\85h\FC\FF\FF\B0\00\E8\94\F8\FF\FFH\BE\1A0@\00\00\00\00\00H\8B<%@@`\00\89\85d\FC\FF\FF\B0\00\E8u\F8\FF\FFH\BER0@\00\00\00\00\00H\8B<%@@`\00\89\85`\FC\FF\FF\B0\00\E8V\F8\FF\FF\0FW\C0\F3\0F\10M\F0\F3\0F\11\0C%H\BBb\00\F3\0FZM\F0f\0F.\C8\89\85\5C\FC\FF\FF\0F\86N\00\00\00\F2\0F\10\05\90!\00\00\F2\0F\10\0D\98!\00\00\F3\0FZU\F4\F3\0FZ]\F0\F2\0FY\CB\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\84\BBb\00\F3\0FZ\0C%\84\BBb\00\F2\0F^\C1\F2\0FZ\C0\F3\0F\11\04%\C0\BBb\00\E9\15\00\00\00\0FW\C0\F3\0F\11\04%\84\BBb\00\F3\0F\11\04%\C0\BBb\001\FF\F3\0F\10E\F0\F3\0F^E\F8\F3\0F\11\04%\FC\BBb\00\E83\1B\00\00H\BE_0@\00\00\00\00\00H\8B<%@@`\00\B0\00\E8\9A\F7\FF\FF\C7E\C0\FD\FF\FF\FF\C7E\BCd\00\00\00\89\85X\FC\FF\FF\E8\81\F8\FF\FF\F3\0F\11E\B0\8BE\C0\83\C0\01\89E\C0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;E\BC\0F\8DA\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8\9D\09\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\AF\FF\FF\FF\E8\12\F8\FF\FFH\BE}0@\00\00\00\00\00\0FW\C9\F3\0F\11E\AC\F3\0F\10E\AC\F3\0F\5CE\B0\F3\0F\11E\B8H\8B<%@@`\00\8BU\BC\0F(\C1\B0\01\E8\DC\F6\FF\FF\83}\C0\00\89\85T\FC\FF\FF\0F\8D\09\00\00\00\8BE\BC\C1\E0\01\89E\BC\E9\00\00\00\00\83}\C0\00\0F\8C.\FF\FF\FFH\BE\970@\00\00\00\00\00\0FW\C0\F3\0FZM\B8\F2\0F*U\BC\F2\0F^\CA\F2\0FZ\C9\F3\0F\11M\B8H\8B<%@@`\00\B0\01\E8\81\F6\FF\FFH\BE\BE0@\00\00\00\00\00H\8B<%@@`\00\89\85P\FC\FF\FF\B0\00\E8b\F6\FF\FF\C7E\C0\FD\FF\FF\FF\C7\04%\10\C0b\00d\00\00\00\89\85L\FC\FF\FF\E8E\F7\FF\FF\F3\0F\11E\B0\8BE\C0\83\C0\01\89E\C0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8]\08\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%P@`\00\8B\14%X@`\00\E8\FC\09\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8\A1\F6\FF\FFH\BE}0@\00\00\00\00\00\0FW\C9\F3\0F\5CE\B0\F3\0F\11E\ACH\8B<%@@`\00\8B\14%\10\C0b\00\0F(\C1\B0\01\E8q\F5\FF\FF\83}\C0\00\89\85H\FC\FF\FF\0F\8D\11\00\00\00\8B\04%\10\C0b\00\C1\E0\01\89\04%\10\C0b\00\E9\00\00\00\00\83}\C0\00\0F\8C\F7\FE\FF\FF\C7\04%\10\C0b\00\E8\03\00\00\83<%\10\C0b\00\00\0F\85\0B\00\00\00\C7\04%\10\C0b\00\01\00\00\00H\BE\ED0@\00\00\00\00\001\D2H\8B<%@@`\00\B0\00\E8\02\F5\FF\FFH\BE\011@\00\00\00\00\00H\8B<%@@`\00\8B\14%P@`\00\89\85D\FC\FF\FF\B0\00\E8\DC\F4\FF\FFH\BE\1A0@\00\00\00\00\00H\8B<%@@`\00\89\85@\FC\FF\FF\B0\00\E8\BD\F4\FF\FFH\BER0@\00\00\00\00\00H\8B<%@@`\00\89\85<\FC\FF\FF\B0\00\E8\9E\F4\FF\FF\0FW\C0\F3\0F*\0C%\10\C0b\00\F3\0FYM\B8\F3\0F\11M\D4\F3\0F\11\04%\9C\BBb\00\C7\04%\14\C0b\00\01\00\00\00\89\858\FC\FF\FF\83<%\14\C0b\00\06\0F\8Da\02\00\00\E8[\F5\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF`@`\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%P@`\00\8B\14%X@`\00\E8|\06\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%P@`\00\8B\14%X@`\00\E8\1B\08\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8\C0\F4\FF\FF\F3\0F\5CE\D8\F3\0F\5CE\D4\F3\0F*\0C%\10\C0b\00\F3\0F^\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\D0\BAb\00\E8\93\F4\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8DJ\00\00\00H\BF`@`\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\8B4%P@`\00\8B\14%X@`\00\E8\8B\0A\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A2\FF\FF\FF\E8 \F4\FF\FF\F2\0F\10\0D\80\1C\00\00\F2\0F\10\15\88\1C\00\00\F3\0F\5CE\D8\F3\0F*\1C%\10\C0b\00\F3\0F^\C3Hc\04%\14\C0b\00\F3\0F\11\04\85\0C\BBb\00Hc\04%\14\C0b\00\F3\0F\10\04\85\D0\BAb\00Hc\04%\14\C0b\00\F3\0FX\04\85\0C\BBb\00\F3\0F\11E\F0\F3\0F\10E\F0Hc\04%\14\C0b\00\F3\0F\11\04\85H\BBb\00\F3\0FZE\F4\F3\0FZ]\F0\F2\0FY\D3\F2\0F^\C2\F2\0FZ\C0Hc\04%\14\C0b\00\F3\0F\11\04\85\84\BBb\00Hc\04%\14\C0b\00\F3\0FZ\04\85\84\BBb\00\F2\0F^\C8\F2\0FZ\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\C0\BBb\00\F3\0F\10E\F0\F3\0F^E\F8Hc\04%\14\C0b\00\F3\0F\11\04\85\FC\BBb\00\F3\0F\10\04%\9C\BBb\00Hc\04%\14\C0b\00\F3\0FX\04\85\84\BBb\00\F3\0F\11\04%\9C\BBb\00\8B<%\14\C0b\00\E8\95\15\00\00\8B\04%\14\C0b\00\83\C0\01\89\04%\14\C0b\00\E9\91\FD\FF\FFH\BE01@\00\00\00\00\00\0FW\C0\F2\0F\10\0Dj\1B\00\00\F3\0FZ\14%\9C\BBb\00\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\9C\BBb\00H\8B<%@@`\00\B0\01\E8\C1\F1\FF\FFH\BEY1@\00\00\00\00\00H\8B<%@@`\00\89\854\FC\FF\FF\B0\00\E8\A2\F1\FF\FF\89\850\FC\FF\FF\E8\97\F2\FF\FF\F3\0F\11E\B0\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;E\BC\0F\8DA\00\00\00H\BF \C0b\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%T@`\00\8B\14%X@`\00\E8\BC\03\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\AF\FF\FF\FF\E81\F2\FF\FFH\BE\970@\00\00\00\00\00\0FW\C9\F3\0F\11E\AC\F3\0F\10E\AC\F3\0F\5CE\B0\F3\0F\11E\B4\F3\0FZE\B4\F2\0F*U\BC\F2\0F^\C2\F2\0FZ\C0\F3\0F\11E\B4H\8B<%@@`\00\0F(\C1\B0\01\E8\E7\F0\FF\FFH\BE\011@\00\00\00\00\00H\8B<%@@`\00\8B\14%T@`\00\89\85,\FC\FF\FF\B0\00\E8\C1\F0\FF\FFH\BE\1A0@\00\00\00\00\00H\8B<%@@`\00\89\85(\FC\FF\FF\B0\00\E8\A2\F0\FF\FFH\BER0@\00\00\00\00\00H\8B<%@@`\00\89\85$\FC\FF\FF\B0\00\E8\83\F0\FF\FF\0FW\C0\F3\0F*\0C%\10\C0b\00\F3\0FYM\B4\F3\0F\11M\D4\F3\0F\11\04%\B4\BBb\00\C7\04%\14\C0b\00\07\00\00\00\89\85 \FC\FF\FF\83<%\14\C0b\00\0C\0F\8Da\02\00\00\E8@\F1\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8Dr\00\00\00H\BF \C0b\00\00\00\00\00H\B9\80\B4b\00\00\00\00\00L\8DE\EC\8B4%T@`\00\8B\14%X@`\00\E8a\02\00\00H\BF \C0b\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\C0\BAb\00\00\00\00\00\8B4%T@`\00\8B\14%X@`\00\E8\00\04\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9z\FF\FF\FF\E8\A5\F0\FF\FF\F3\0F\5CE\D8\F3\0F\5CE\D4\F3\0F*\0C%\10\C0b\00\F3\0F^\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\D0\BAb\00\E8x\F0\FF\FF\F3\0F\11E\D8\C7\04%\EC\BCb\00\00\00\00\00\8B\04%\EC\BCb\00;\04%\10\C0b\00\0F\8DJ\00\00\00H\BF \C0b\00\00\00\00\00H\B9\A0\B7b\00\00\00\00\00I\B8\80\B4b\00\00\00\00\00E1\C9\8B4%T@`\00\8B\14%X@`\00\E8p\06\00\00\8B\04%\EC\BCb\00\83\C0\01\89\04%\EC\BCb\00\E9\A2\FF\FF\FF\E8\05\F0\FF\FF\F2\0F\10\0De\18\00\00\F2\0F\10\15m\18\00\00\F3\0F\5CE\D8\F3\0F*\1C%\10\C0b\00\F3\0F^\C3Hc\04%\14\C0b\00\F3\0F\11\04\85\0C\BBb\00Hc\04%\14\C0b\00\F3\0F\10\04\85\D0\BAb\00Hc\04%\14\C0b\00\F3\0FX\04\85\0C\BBb\00\F3\0F\11E\F0\F3\0F\10E\F0Hc\04%\14\C0b\00\F3\0F\11\04\85H\BBb\00\F3\0FZE\F4\F3\0FZ]\F0\F2\0FY\D3\F2\0F^\C2\F2\0FZ\C0Hc\04%\14\C0b\00\F3\0F\11\04\85\84\BBb\00Hc\04%\14\C0b\00\F3\0FZ\04\85\84\BBb\00\F2\0F^\C8\F2\0FZ\C1Hc\04%\14\C0b\00\F3\0F\11\04\85\C0\BBb\00\F3\0F\10E\F0\F3\0F^E\F8Hc\04%\14\C0b\00\F3\0F\11\04\85\FC\BBb\00\F3\0F\10\04%\B4\BBb\00Hc\04%\14\C0b\00\F3\0FX\04\85\84\BBb\00\F3\0F\11\04%\B4\BBb\00\8B<%\14\C0b\00\E8z\11\00\00\8B\04%\14\C0b\00\83\C0\01\89\04%\14\C0b\00\E9\91\FD\FF\FFH\BE01@\00\00\00\00\00\0FW\C0\F2\0F\10\0DO\17\00\00\F3\0FZ\14%\B4\BBb\00\F2\0F^\D1\F2\0FZ\CA\F3\0F\11\0C%\B4\BBb\00H\8B<%@@`\00\B0\01\E8\A6\ED\FF\FF1\C9\89\85\1C\FC\FF\FF\89\C8H\81\C4\F0\03\00\00]\C3\0F\1F\00UH\89\E5\0FW\C0H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0\C7E\DC-\05\00\00H\8BM\E0\F3\0F\11\01\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8D\E2\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D\BC\00\00\00\F2\0F\10\05\C2\16\00\00\F2\0F\10\0D\C2\16\00\00\B8\00\00\01\00iM\DC5\0C\00\00\89E\D0\89\C8\99\8BM\D0\F7\F9\89U\DC\F2\0F*U\DC\F2\0F\5C\D1\F2\0F^\D0\F2\0FZ\C2H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\FA\F3\0F\11\04\BEH\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\FA\F3\0F\10\04\BEH\8Bu\E0\0F.\06\0F\86 \00\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\D8Hc\D1\F3\0F\10\04\90\F3\0F\11E\CC\E9\0D\00\00\00H\8BE\E0\F3\0F\10\00\F3\0F\11E\CC\F3\0F\10E\CCH\8BE\E0\F3\0F\11\00\8BE\D8\83\C0\01\89E\D8\E98\FF\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\12\FF\FF\FF\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D\1E\00\00\00\0FW\C0H\8BE\E8HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\D6\FF\FF\FF\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8Dd\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\F0\0F\8D>\00\00\00H\8BE\E8HcM\D8\F3\0F\10\04\88H\8BE\F8\8BU\F4\0F\AFU\D4\03U\D8Hc\CA\F3\0FX\04\88H\8BE\E8HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\B6\FF\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\90\FF\FF\FF]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0H\8BM\E0\C7\01\00\00\00\00\8BU\F0\83\EA\01\89U\C8\83}\C8\00\0F\8Cq\02\00\00\C7E\D4\00\00\00\00\8BE\D4;E\C8\0F\8DY\02\00\00\BA\01\00\00\00\8BE\D4\83\C0\01\89E\D0\8BE\F0+E\D4H\8BM\F8\8Bu\F4\0F\AFu\D4\03u\D4Hc\FEH\C1\E7\02H\01\F9\89\C7H\89\CE\E8\A0\11\00\00\0FW\C0\03E\D4\89E\CC\8BE\CCH\8BM\E8Hcu\D4\89\04\B1H\8BM\F8\8BE\F4\0F\AFE\D4\03E\CCHc\F0\F3\0FZ\0C\B1f\0F.\C8\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9\C5\01\00\00\8BE\CC;E\D4\0F\84b\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\CCHc\D1\F3\0F\10\04\90\F3\0F\11E\DCH\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\D1\F3\0F\10\04\90H\8BE\F8\8BM\F4\0F\AFM\D4\03M\CCHc\D1\F3\0F\11\04\90\F3\0F\10E\DCH\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\D1\F3\0F\11\04\90\BA\01\00\00\00\F2\0F\10\05\1B\14\00\00H\8BE\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\F1\F3\0FZ\0C\B0\F2\0F^\C1\F2\0FZ\C0\F3\0F\11E\DC\8BM\F0\8B}\D4\83\C7\01)\F9\F3\0F\10E\DCH\8BE\F8\8B}\F4\0F\AF}\D4\03}\D4\83\C7\01Hc\F7H\C1\E6\02H\01\F0\89\CFH\89\C6\E8+\12\00\00\8BM\D0\89M\D8\8BE\D8;E\F0\0F\8D\DB\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D8\03M\CCHc\D1\F3\0F\10\04\90\F3\0F\11E\DC\8BM\CC;M\D4\0F\84G\00\00\00H\8BE\F8\8BM\F4\0F\AFM\D8\03M\D4Hc\D1\F3\0F\10\04\90H\8BE\F8\8BM\F4\0F\AFM\D8\03M\CCHc\D1\F3\0F\11\04\90\F3\0F\10E\DCH\8BE\F8\8BM\F4\0F\AFM\D8\03M\D4Hc\D1\F3\0F\11\04\90\B8\01\00\00\00\8BM\F0\8BU\D4\83\C2\01)\D1\F3\0F\10E\DCH\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\F8\8BU\F4\0F\AFU\D8\03U\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\C0\89\CF\89\C2H\8BM\C0A\89\C0\E8\DC\0C\00\00\8BE\D8\83\C0\01\89E\D8\E9\19\FF\FF\FF\E9\09\00\00\00\8BE\D4H\8BM\E0\89\01\E9\00\00\00\00\8BE\D4\83\C0\01\89E\D4\E9\9B\FD\FF\FF\E9\00\00\00\00\0FW\C0\8BE\F0\83\E8\01H\8BM\E8\8BU\F0\83\EA\01Hc\F2\89\04\B1H\8BM\F8\8BE\F4\8BU\F0\83\EA\01\0F\AF\C2\8BU\F0\83\EA\01\01\D0Hc\F0\F3\0FZ\0C\B1f\0F.\C8\0F\85\12\00\00\00\0F\8A\0C\00\00\00\8BE\F0\83\E8\01H\8BM\E0\89\01H\83\C4@]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC`H\89}\F8\89u\F4\89U\F0H\89M\E8L\89E\E0D\89M\DC\8BU\F0\83\EA\01\89U\C8\83}\DC\00\0F\85\97\01\00\00\83}\C8\01\0F\8C\D6\00\00\00\C7E\D4\00\00\00\00\8BE\D4;E\C8\0F\8D\BE\00\00\00H\8BE\E8HcM\D4\8B\14\88\89U\CCH\8BE\E0HcM\CC\F3\0F\10\04\88\F3\0F\11E\D8\8BU\CC;U\D4\0F\84,\00\00\00H\8BE\E0HcM\D4\F3\0F\10\04\88H\8BE\E0HcM\CC\F3\0F\11\04\88\F3\0F\10E\D8H\8BE\E0HcM\D4\F3\0F\11\04\88\B8\01\00\00\00\8BM\F0\8BU\D4\83\C2\01)\D1\F3\0F\10E\D8H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\E0\8BU\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\C0\89\CF\89\C2H\8BM\C0A\89\C0\E8B\0B\00\00\8BE\D4\83\C0\01\89E\D4\E96\FF\FF\FF\E9\00\00\00\00\C7E\D0\00\00\00\00\8BE\D0;E\F0\0F\8D\9F\00\00\00\B8\01\00\00\00\8BM\F0\8BU\D0\83\C2\01)\D1\89M\D4H\8Bu\E0Hc}\D4\F3\0F\10\04\BEH\8Bu\F8\8BM\F4\0F\AFM\D4\03M\D4Hc\F9\F3\0F^\04\BEH\8Bu\E0Hc}\D4\F3\0F\11\04\BEH\8Bu\E0Hc}\D4\F3\0F\10\04\BEf\0F~\C1\81\F1\00\00\00\80f\0Fn\C1\F3\0F\11E\D8\8B}\D4\F3\0F\10E\D8H\8Bu\F8\8BM\F4\0F\AFM\D4\83\C1\00Lc\C1I\C1\E0\02L\01\C6H\8BM\E0\89\C2A\89\C0\E8\8B\0A\00\00\8BE\D0\83\C0\01\89E\D0\E9U\FF\FF\FF\E9\AF\01\00\00\C7E\D4\00\00\00\00\8BE\D4;E\F0\0F\8D\81\00\00\00\B8\01\00\00\00\8B}\D4H\8BM\F8\8BU\F4\0F\AFU\D4\83\C2\00Hc\F2H\C1\E6\02H\01\F1H\8Bu\E0H\89u\B8H\89\CE\89\C2H\8BM\B8A\89\C0\E8\9C\0B\00\00\F3\0F\11E\D8H\8BM\E0Hcu\D4\F3\0F\10\04\B1\F3\0F\5CE\D8H\8BM\F8\8BE\F4\0F\AFE\D4\03E\D4Hc\F0\F3\0F^\04\B1H\8BM\E0Hcu\D4\F3\0F\11\04\B1\8BE\D4\83\C0\01\89E\D4\E9s\FF\FF\FF\83}\C8\01\0F\8C\0C\01\00\00\C7E\D0\01\00\00\00\8BE\D0;E\C8\0F\8D\F4\00\00\00\B8\01\00\00\00\8BM\F0\8BU\D0\83\C2\01)\D1\89M\D4H\8Bu\E0Hc}\D4\F3\0F\10\04\BE\8BM\F0\8BU\D4\83\C2\01)\D1H\8Bu\F8\8BU\F4\0F\AFU\D4\03U\D4\83\C2\01Hc\FAH\C1\E7\02H\01\FEH\8B}\E0\8BU\D4\83\C2\01Lc\C2I\C1\E0\02L\01\C7H\89}\B0\89\CF\89\C2H\8BM\B0A\89\C0\F3\0F\11E\AC\E8\C4\0A\00\00\F3\0F\10M\AC\F3\0FX\C8H\8BM\E0Hcu\D4\F3\0F\11\0C\B1H\8BM\E8Hcu\D4\8B\04\B1\89E\CC\8BE\CC;E\D4\0F\84>\00\00\00H\8BE\E0HcM\CC\F3\0F\10\04\88\F3\0F\11E\D8H\8BE\E0HcM\D4\F3\0F\10\04\88H\8BE\E0HcM\CC\F3\0F\11\04\88\F3\0F\10E\D8H\8BE\E0HcM\D4\F3\0F\11\04\88\E9\00\00\00\00\8BE\D0\83\C0\01\89E\D0\E9\00\FF\FF\FF\E9\00\00\00\00\E9\00\00\00\00H\83\C4`]\C3\0F\1F\00UH\89\E5\B8\02\00\00\00\89}\FCH\89u\F0\89U\EC\89M\E8L\89E\E0L\89M\D8\8BM\EC\89E\C8\89\C8\99\8BM\C8\F7\F9\89U\D4\83}\D4\01\0F\8Cp\00\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8DO\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\A5\FF\FF\FF\E9\00\00\00\00\B8\04\00\00\00\8BM\EC\89E\C4\89\C8\99\8BM\C4\F7\F9\89U\D4\83}\D4\02\0F\8C\A1\00\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\80\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9t\FF\FF\FF\E9\00\00\00\00\B8\08\00\00\00\8BM\EC\89E\C0\89\C8\99\8BM\C0\F7\F9\89U\D4\83}\D4\04\0F\8C\03\01\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\E2\00\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\12\FF\FF\FF\E9\00\00\00\00\B8\10\00\00\00\8BM\EC\89E\BC\89\C8\99\8BM\BC\F7\F9\89U\D4\83}\D4\08\0F\8C\C7\01\00\00\8BE\D4\83\E8\01\89E\D4\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D\A6\01\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\07Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\07\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\06Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\06\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\05Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\05\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\04Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\04\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9N\FE\FF\FF\E9\00\00\00\00\B8\10\00\00\00\8BM\EC\89E\B8\89\C8\99\8BM\B8\F7\F9\83\C2\10\89U\CC\8BU\CC\83\EA\01\89U\D4\8BE\D4;E\EC\0F\8DT\03\00\00\C7E\D0\00\00\00\00\8BE\D0;E\FC\0F\8D.\03\00\00H\8BE\F0HcM\D0\F3\0F\10\04\88H\8BE\E0\8BU\D4\83\EA\0FHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0F\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0EHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0E\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0DHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0D\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0CHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0C\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0BHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0B\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\0AHc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\0A\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\09Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\09\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\08Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\08\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\07Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\07\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\06Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\06\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\05Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\05\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\04Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\04\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\03Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\03\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\02Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\02\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0\8BU\D4\83\EA\01Hc\CA\F3\0F\10\0C\88H\8BE\D8\8BU\E8\8Bu\D4\83\EE\01\0F\AF\D6\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D4\F3\0F\10\0C\88H\8BE\D8\8BU\E8\0F\AFU\D4\03U\D0Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0HcM\D0\F3\0F\11\04\88\8BE\D0\83\C0\01\89E\D0\E9\C6\FC\FF\FF\E9\00\00\00\00\8BE\D4\83\C0\10\89E\D4\E9\A0\FC\FF\FF]\C3\0F\1F\84\00\00\00\00\00UH\89\E5\0FW\C9\F3\0F\10\15\81\06\00\00\F3\0F\11E\FC\F3\0F\11U\F8\F3\0F\11M\EC\0FW\C0\F3\0FZM\ECf\0F.\C8\0F\85V\00\00\00\0F\8AP\00\00\00\F2\0F\10\05\92\06\00\00\F3\0FZM\F8\F2\0F\5C\C8\F2\0FZ\C9\F3\0F\11M\F4\F3\0F\10M\F4\F3\0FXM\F4\F3\0FXM\F4\F3\0F\11M\F0\F3\0FZM\F0\F2\0F\5C\C8\0F(\05l\06\00\00f\0F\DB\C8\F2\0FZ\C1\F3\0F\11E\EC\E9\98\FF\FF\FF\F3\0FZE\EC\F3\0FZM\FC\0F(\15I\06\00\00f\0F\DB\CA\F2\0FY\C1\F2\0FZ\C0]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC]\C3\0F\1F\80\00\00\00\00UH\89\E5\89}\FC\F3\0F\11E\F8H\89u\F0\89U\ECH\89M\E0D\89E\DC\C7E\C8\00\00\00\00\C7E\CC\00\00\00\00\83}\FC\00\0F\8F\05\00\00\00\E9/\01\00\00\0FW\C0\F3\0FZM\F8f\0F.\C8\0F\85\0B\00\00\00\0F\8A\05\00\00\00\E9\12\01\00\00\83}\EC\01\0F\85\0A\00\00\00\83}\DC\01\0F\84\A8\00\00\00\C7E\D4\00\00\00\00\C7E\D0\00\00\00\00\83}\EC\00\0F\8D\0F\00\00\001\C0+E\FC\83\C0\01\0F\AFE\EC\89E\D4\83}\DC\00\0F\8D\0F\00\00\001\C0+E\FC\83\C0\01\0F\AFE\DC\89E\D0\C7E\D8\00\00\00\00\8BE\D8;E\FC\0F\8DP\00\00\00H\8BE\E0HcM\D0\F3\0F\10\04\88\F3\0F\10M\F8H\8BE\F0HcM\D4\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D0\F3\0F\11\04\88\8BU\D4\03U\EC\89U\D4\8BU\D0\03U\DC\89U\D0\8BE\D8\83\C0\01\89E\D8\E9\A4\FF\FF\FF\E9V\00\00\00\C7E\D8\00\00\00\00\8BE\D8;E\FC\0F\8D>\00\00\00H\8BE\E0HcM\D8\F3\0F\10\04\88\F3\0F\10M\F8H\8BE\F0HcM\D8\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0HcM\D8\F3\0F\11\04\88\8BE\D8\83\C0\01\89E\D8\E9\B6\FF\FF\FF\E9\00\00\00\00]\C3\0F\1F\80\00\00\00\00UH\89\E5\0FW\C0\89}\F8H\89u\F0\89U\ECH\89M\E0D\89E\DC\C7E\C4\00\00\00\00\C7E\C8\00\00\00\00\F3\0F\11E\D8\83}\F8\00\0F\8F\0D\00\00\00\0FW\C0\F3\0F\11E\FC\E9\11\01\00\00\83}\EC\01\0F\85\0A\00\00\00\83}\DC\01\0F\84\AA\00\00\00\C7E\D0\00\00\00\00\C7E\CC\00\00\00\00\83}\EC\00\0F\8D\0F\00\00\001\C0+E\F8\83\C0\01\0F\AFE\EC\89E\D0\83}\DC\00\0F\8D\0F\00\00\001\C0+E\F8\83\C0\01\0F\AFE\DC\89E\CC\C7E\D4\00\00\00\00\8BE\D4;E\F8\0F\8DH\00\00\00\F3\0F\10E\D8H\8BE\F0HcM\D0\F3\0F\10\0C\88H\8BE\E0HcM\CC\F3\0FY\0C\88\F3\0FX\C1\F3\0F\11E\D8\8BU\D0\03U\EC\89U\D0\8BU\CC\03U\DC\89U\CC\8BE\D4\83\C0\01\89E\D4\E9\AC\FF\FF\FF\F3\0F\10E\D8\F3\0F\11E\FC\E9S\00\00\00\C7E\D4\00\00\00\00\8BE\D4;E\F8\0F\8D6\00\00\00\F3\0F\10E\D8H\8BE\F0HcM\D4\F3\0F\10\0C\88H\8BE\E0HcM\D4\F3\0FY\0C\88\F3\0FX\C1\F3\0F\11E\D8\8BE\D4\83\C0\01\89E\D4\E9\BE\FF\FF\FF\F3\0F\10E\D8\F3\0F\11E\FC\F3\0F\10E\FC]\C3\0F\1FD\00\00UH\89\E5\89}\F8H\89u\F0\89U\EC\83}\F8\01\0F\8D\0C\00\00\00\C7E\FC\FF\FF\FF\FF\E9k\01\00\00\83}\F8\01\0F\85\0C\00\00\00\C7E\FC\00\00\00\00\E9U\01\00\00\83}\EC\01\0F\84\A9\00\00\00\C7E\E0\01\00\00\00H\8BE\F0\F3\0FZ\00\0F(\0D\F6\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\8BM\E0\03M\EC\89M\E0\C7E\E4\01\00\00\00\8BE\E4;E\F8\0F\8De\00\00\00H\8BE\F0HcM\E0\F3\0FZ\04\88\0F(\0D\B9\02\00\00f\0F\DB\C1\F3\0FZM\E8f\0F.\C1\0F\86'\00\00\00\8BE\E4\89E\DCH\8BM\F0HcU\E0\F3\0FZ\04\91\0F(\0D\8C\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\8BE\E0\03E\EC\89E\E0\8BE\E4\83\C0\01\89E\E4\E9\8F\FF\FF\FF\E9\9C\00\00\00\C7E\DC\00\00\00\00H\8BE\F0\F3\0FZ\00\0F(\0DM\02\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\C7E\E4\01\00\00\00\8BE\E4;E\F8\0F\8Da\00\00\00H\8BE\F0HcM\E4\F3\0FZ\04\88\0F(\0D\19\02\00\00f\0F\DB\C1\F3\0FZM\E8f\0F.\C1\0F\86'\00\00\00\8BE\E4\89E\DCH\8BM\F0HcU\E4\F3\0FZ\04\91\0F(\0D\EC\01\00\00f\0F\DB\C1\F2\0FZ\C0\F3\0F\11E\E8\E9\00\00\00\00\8BE\E4\83\C0\01\89E\E4\E9\93\FF\FF\FF\E9\00\00\00\00\8BE\DC\89E\FC\8BE\FC]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\F3\0F\11E\F8H\89u\F0\89U\EC\C7E\E0\00\00\00\00\C7E\E4\00\00\00\00\83}\FC\00\0F\8F\05\00\00\00\E9\99\00\00\00\83}\EC\01\0F\84O\00\00\00\8BE\FC\0F\AFE\EC\89E\DC\C7E\E8\00\00\00\00\8BE\E8;E\DC\0F\8D-\00\00\00\F3\0F\10E\F8H\8BE\F0HcM\E8\F3\0FY\04\88H\8BE\F0HcM\E8\F3\0F\11\04\88\8BE\E8\03E\EC\89E\E8\E9\C7\FF\FF\FF\E9@\00\00\00\C7E\E8\00\00\00\00\8BE\E8;E\FC\0F\8D-\00\00\00\F3\0F\10E\F8H\8BE\F0HcM\E8\F3\0FY\04\88H\8BE\F0HcM\E8\F3\0F\11\04\88\8BE\E8\83\C0\01\89E\E8\E9\C7\FF\FF\FF]\C3\0F\1FD\00\00AWAVI\89\D7AUATL\8D%.\10 \00UH\8D-.\10 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\B7\D6\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_402e24__fini = internal constant %seg_402e24__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_402e30__rodata = internal constant %seg_402e30__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_403178__eh_frame_hdr = internal constant %seg_403178__eh_frame_hdr_type <{ [156 x i8] c"\01\1B\03;\9C\00\00\00\12\00\00\008\D3\FF\FF\F8\00\00\00x\D3\FF\FF\B8\00\00\00\A8\D3\FF\FF\E4\00\00\00h\D4\FF\FF \01\00\00\A8\D4\FF\FF<\01\00\00\B8\D4\FF\FFX\01\00\00\D8\E5\FF\FFt\01\00\00\A8\E7\FF\FF\90\01\00\00\B8\EA\FF\FF\AC\01\00\008\EE\FF\FF\C8\01\00\008\F6\FF\FF\E4\01\00\00\E8\F6\FF\FF\00\02\00\00\F8\F6\FF\FF\1C\02\00\00h\F8\FF\FF8\02\00\00\C8\F9\FF\FFT\02\00\00h\FB\FF\FFp\02\00\008\FC\FF\FF\90\02\00\00\A8\FC\FF\FF\D8\02\00\00" }>
@seg_403218__eh_frame = internal constant %seg_403218__eh_frame_type <{ [592 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\B8\D2\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\BC\D2\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\008\D2\FF\FF@\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00@\D3\FF\FF3\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00d\D3\FF\FF\06\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00X\D3\FF\FF\1D\11\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\5C\E4\FF\FF\C7\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\10\E6\FF\FF\03\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\04\E9\FF\FF}\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00h\EC\FF\FF\F8\07\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00L\F4\FF\FF\A5\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\00\E0\F4\FF\FF\09\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00\D4\F4\FF\FFi\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\01\00\00(\F6\FF\FF[\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\01\00\00l\F7\FF\FF\94\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\1C\00\00\00\A8\01\00\00\F0\F8\FF\FF\CB\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\00\00\00\00D\00\00\00\C8\01\00\00\A0\F9\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\10\02\00\00\C8\F9\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4005a0___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604000__got_plt = internal global %seg_604000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 ()* @clock to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64) }>
@seg_604030__data = internal global %seg_604030__data_type zeroinitializer
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005d0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005a0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e20___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402db0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400620_what_date(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400620:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = inttoptr i64 %33 to i64*
  %35 = load i64, i64* %34
  store i64 %35, i64* %31, align 8, !tbaa !2428
  %36 = add i64 %33, 8
  store i64 %36, i64* %32, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005a0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4005c0, label %block_4005a9

block_4005c0:                                     ; preds = %block_4005a0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4005a9:                                     ; preds = %block_4005a0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400530_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400630_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400630:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 17
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %R8D = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 19
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R9D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 21
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %R10D = bitcast %union.anon* %30 to i32*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 1
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RAX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 5
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RCX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 7
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RDX = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 9
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RSI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RDI = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 13
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RSP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 15
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %RBP = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 17
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R8 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 19
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %R9 = bitcast %union.anon* %57 to i64*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %61 to %"class.std::bitset"*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %63 to %"class.std::bitset"*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %65 to %"class.std::bitset"*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %67 to %"class.std::bitset"*
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %69 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %68, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %69 to %union.vec128_t*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %71 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %70, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %71 to %union.vec128_t*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %73 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %72, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %73 to %union.vec128_t*
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %75 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %74, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %75 to %union.vec128_t*
  %76 = load i64, i64* %RBP
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 1
  store i64 %78, i64* %PC
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %80 = load i64, i64* %79, align 8, !tbaa !2428
  %81 = add i64 %80, -8
  %82 = inttoptr i64 %81 to i64*
  store i64 %76, i64* %82
  store i64 %81, i64* %79, align 8, !tbaa !2428
  %83 = load i64, i64* %RSP
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  store i64 %83, i64* %RBP, align 8, !tbaa !2428
  %86 = load i64, i64* %RSP
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = sub i64 %86, 1008
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  %90 = icmp ult i64 %86, 1008
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %91, i8* %92, align 1, !tbaa !2432
  %93 = trunc i64 %89 to i32
  %94 = and i32 %93, 255
  %95 = call i32 @llvm.ctpop.i32(i32 %94) #16
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %98, i8* %99, align 1, !tbaa !2446
  %100 = xor i64 1008, %86
  %101 = xor i64 %100, %89
  %102 = lshr i64 %101, 4
  %103 = trunc i64 %102 to i8
  %104 = and i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = icmp eq i64 %89, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = lshr i64 %89, 63
  %110 = trunc i64 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %110, i8* %111, align 1, !tbaa !2449
  %112 = lshr i64 %86, 63
  %113 = xor i64 %109, %112
  %114 = add nuw nsw i64 %113, %112
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2450
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 10
  store i64 %119, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 8
  store i64 %122, i64* %PC
  %123 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 8) to float*)
  %124 = bitcast i8* %120 to float*
  store float %123, float* %124, align 1, !tbaa !2452
  %125 = getelementptr inbounds i8, i8* %120, i64 4
  %126 = bitcast i8* %125 to float*
  store float 0.000000e+00, float* %126, align 1, !tbaa !2452
  %127 = getelementptr inbounds i8, i8* %120, i64 8
  %128 = bitcast i8* %127 to float*
  store float 0.000000e+00, float* %128, align 1, !tbaa !2452
  %129 = getelementptr inbounds i8, i8* %120, i64 12
  %130 = bitcast i8* %129 to float*
  store float 0.000000e+00, float* %130, align 1, !tbaa !2452
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 10
  store i64 %132, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 10
  store i64 %134, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  %135 = load i64, i64* %RDX
  %136 = load i32, i32* %EDX
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 2
  store i64 %139, i64* %PC
  %140 = xor i64 %137, %135
  %141 = trunc i64 %140 to i32
  %142 = and i64 %140, 4294967295
  store i64 %142, i64* %RDX, align 8, !tbaa !2428
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %143, align 1, !tbaa !2432
  %144 = and i32 %141, 255
  %145 = call i32 @llvm.ctpop.i32(i32 %144) #16
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %148, i8* %149, align 1, !tbaa !2446
  %150 = icmp eq i32 %141, 0
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %151, i8* %152, align 1, !tbaa !2448
  %153 = lshr i32 %141, 31
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %156, align 1, !tbaa !2450
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %157, align 1, !tbaa !2447
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  store i64 720, i64* %RDI, align 8, !tbaa !2428
  %160 = bitcast i32* %R8D to i64*
  %161 = load i32, i32* %EDI
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 3
  store i64 %164, i64* %PC
  %165 = and i64 %162, 4294967295
  store i64 %165, i64* %160, align 8, !tbaa !2428
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 832
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 7
  store i64 %169, i64* %PC
  store i64 %167, i64* %R9, align 8, !tbaa !2428
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 4
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 7
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i32*
  store i32 0, i32* %174
  %175 = load i64, i64* %R9
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 3
  store i64 %177, i64* %PC
  store i64 %175, i64* %RDI, align 8, !tbaa !2428
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 840
  %180 = load i64, i64* %RSI
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 7
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %179 to i64*
  store i64 %180, i64* %183
  %184 = load i32, i32* %EDX
  %185 = zext i32 %184 to i64
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 2
  store i64 %187, i64* %PC
  %188 = and i64 %185, 4294967295
  store i64 %188, i64* %RSI, align 8, !tbaa !2428
  %189 = load i64, i64* %R8
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  store i64 %189, i64* %RDX, align 8, !tbaa !2428
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 848
  %194 = load i64, i64* %RCX
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 7
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %193 to i64*
  store i64 %194, i64* %197
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 852
  %200 = bitcast %union.vec128_t* %XMM0 to i8*
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 8
  store i64 %202, i64* %PC
  %203 = bitcast i8* %200 to <2 x float>*
  %204 = load <2 x float>, <2 x float>* %203, align 1
  %205 = extractelement <2 x float> %204, i32 0
  %206 = inttoptr i64 %199 to float*
  store float %205, float* %206
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 864
  %209 = load i64, i64* %RAX
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %208 to i64*
  store i64 %209, i64* %212
  %213 = load i64, i64* %PC
  %214 = sub i64 %213, 462
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 5
  store i64 %218, i64* %PC
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %220 = load i64, i64* %219, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %216, i64* %222
  store i64 %221, i64* %219, align 8, !tbaa !2428
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %223, align 8, !tbaa !2428
  %224 = load i64, i64* %PC
  %225 = call %struct.Memory* @ext_4004d0_memset(%struct.State* %0, i64 %224, %struct.Memory* %2)
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 832
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 7
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i8*
  store i8 32, i8* %230
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 848
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 7
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 96
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %238 to i64*
  store i64 %239, i64* %242
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 864
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 7
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i64*
  %248 = load i64, i64* %247
  store i64 %248, i64* %RCX, align 8, !tbaa !2428
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 104
  %251 = load i64, i64* %RCX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %254
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 11
  store i64 %256, i64* %PC
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 11
  store i64 %258, i64* %PC
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %259 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 852
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 8
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to float*
  %265 = load float, float* %264
  %266 = bitcast i8* %259 to float*
  store float %265, float* %266, align 1, !tbaa !2452
  %267 = getelementptr inbounds i8, i8* %259, i64 4
  %268 = bitcast i8* %267 to float*
  store float 0.000000e+00, float* %268, align 1, !tbaa !2452
  %269 = getelementptr inbounds i8, i8* %259, i64 8
  %270 = bitcast i8* %269 to float*
  store float 0.000000e+00, float* %270, align 1, !tbaa !2452
  %271 = getelementptr inbounds i8, i8* %259, i64 12
  %272 = bitcast i8* %271 to float*
  store float 0.000000e+00, float* %272, align 1, !tbaa !2452
  %273 = load i64, i64* %RBP
  %274 = sub i64 %273, 8
  %275 = bitcast %union.vec128_t* %XMM0 to i8*
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 5
  store i64 %277, i64* %PC
  %278 = bitcast i8* %275 to <2 x float>*
  %279 = load <2 x float>, <2 x float>* %278, align 1
  %280 = extractelement <2 x float> %279, i32 0
  %281 = inttoptr i64 %274 to float*
  store float %280, float* %281
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 11
  store i64 %283, i64* %PC
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 8
  store i64 %285, i64* %PC
  %286 = load i64, i64* @stderr
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = load i64, i64* %RBP
  %288 = sub i64 %287, 840
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 7
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RSI, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 2
  store i64 %294, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %295 = load i64, i64* %PC
  %296 = sub i64 %295, 543
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 5
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 5
  store i64 %300, i64* %PC
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %302 = load i64, i64* %301, align 8, !tbaa !2428
  %303 = add i64 %302, -8
  %304 = inttoptr i64 %303 to i64*
  store i64 %298, i64* %304
  store i64 %303, i64* %301, align 8, !tbaa !2428
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %296, i64* %305, align 8, !tbaa !2428
  %306 = load i64, i64* %PC
  %307 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %306, %struct.Memory* %225)
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 10
  store i64 %309, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 8
  store i64 %311, i64* %PC
  %312 = load i64, i64* @stderr
  store i64 %312, i64* %RDI, align 8, !tbaa !2428
  %313 = load i64, i64* %RBP
  %314 = sub i64 %313, 868
  %315 = load i32, i32* %EAX
  %316 = zext i32 %315 to i64
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 6
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %314 to i32*
  store i32 %315, i32* %319
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 2
  store i64 %321, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %322 = load i64, i64* %PC
  %323 = sub i64 %322, 574
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 5
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 5
  store i64 %327, i64* %PC
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %329 = load i64, i64* %328, align 8, !tbaa !2428
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 %325, i64* %331
  store i64 %330, i64* %328, align 8, !tbaa !2428
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %323, i64* %332, align 8, !tbaa !2428
  %333 = load i64, i64* %PC
  %334 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %333, %struct.Memory* %307)
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 10
  store i64 %336, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 8
  store i64 %338, i64* %PC
  %339 = load i64, i64* @stderr
  store i64 %339, i64* %RDI, align 8, !tbaa !2428
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 872
  %342 = load i32, i32* %EAX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 6
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %341 to i32*
  store i32 %342, i32* %346
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 2
  store i64 %348, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %349 = load i64, i64* %PC
  %350 = sub i64 %349, 605
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 5
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  store i64 %354, i64* %PC
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %356 = load i64, i64* %355, align 8, !tbaa !2428
  %357 = add i64 %356, -8
  %358 = inttoptr i64 %357 to i64*
  store i64 %352, i64* %358
  store i64 %357, i64* %355, align 8, !tbaa !2428
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %350, i64* %359, align 8, !tbaa !2428
  %360 = load i64, i64* %PC
  %361 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %360, %struct.Memory* %334)
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 10
  store i64 %363, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 8
  store i64 %365, i64* %PC
  %366 = load i64, i64* @stderr
  store i64 %366, i64* %RDI, align 8, !tbaa !2428
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 96
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %RDX, align 8, !tbaa !2428
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 876
  %375 = load i32, i32* %EAX
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 6
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %374 to i32*
  store i32 %375, i32* %379
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 2
  store i64 %381, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %382 = load i64, i64* %PC
  %383 = sub i64 %382, 640
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %389 = load i64, i64* %388, align 8, !tbaa !2428
  %390 = add i64 %389, -8
  %391 = inttoptr i64 %390 to i64*
  store i64 %385, i64* %391
  store i64 %390, i64* %388, align 8, !tbaa !2428
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %383, i64* %392, align 8, !tbaa !2428
  %393 = load i64, i64* %PC
  %394 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %393, %struct.Memory* %361)
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 10
  store i64 %396, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 8
  store i64 %398, i64* %PC
  %399 = load i64, i64* @stderr
  store i64 %399, i64* %RDI, align 8, !tbaa !2428
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 104
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %RDX, align 8, !tbaa !2428
  %406 = load i64, i64* %RBP
  %407 = sub i64 %406, 880
  %408 = load i32, i32* %EAX
  %409 = zext i32 %408 to i64
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 6
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %407 to i32*
  store i32 %408, i32* %412
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 2
  store i64 %414, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %415 = load i64, i64* %PC
  %416 = sub i64 %415, 675
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 5
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 5
  store i64 %420, i64* %PC
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %422 = load i64, i64* %421, align 8, !tbaa !2428
  %423 = add i64 %422, -8
  %424 = inttoptr i64 %423 to i64*
  store i64 %418, i64* %424
  store i64 %423, i64* %421, align 8, !tbaa !2428
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %416, i64* %425, align 8, !tbaa !2428
  %426 = load i64, i64* %PC
  %427 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %426, %struct.Memory* %394)
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 10
  store i64 %429, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 10
  store i64 %431, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 20
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 4
  store i64 %435, i64* %PC
  store i64 %433, i64* %R8, align 8, !tbaa !2428
  %436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 8
  store i64 %438, i64* %PC
  %439 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to double*)
  %440 = bitcast i8* %436 to double*
  store double %439, double* %440, align 1, !tbaa !2454
  %441 = getelementptr inbounds i8, i8* %436, i64 8
  %442 = bitcast i8* %441 to double*
  store double 0.000000e+00, double* %442, align 1, !tbaa !2454
  %443 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 8
  store i64 %445, i64* %PC
  %446 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 32) to double*)
  %447 = bitcast i8* %443 to double*
  store double %446, double* %447, align 1, !tbaa !2454
  %448 = getelementptr inbounds i8, i8* %443, i64 8
  %449 = bitcast i8* %448 to double*
  store double 0.000000e+00, double* %449, align 1, !tbaa !2454
  %450 = bitcast i32* %R10D to i64*
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 8
  store i64 %452, i64* %PC
  %453 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %454 = zext i32 %453 to i64
  store i64 %454, i64* %450, align 8, !tbaa !2428
  %455 = bitcast i32* %R10D to i64*
  %456 = load i32, i32* %R10D
  %457 = zext i32 %456 to i64
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 9
  store i64 %459, i64* %PC
  %460 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %461 = shl i64 %457, 32
  %462 = ashr exact i64 %461, 32
  %463 = sext i32 %460 to i64
  %464 = mul nsw i64 %463, %462
  %465 = trunc i64 %464 to i32
  %466 = and i64 %464, 4294967295
  store i64 %466, i64* %455, align 8, !tbaa !2428
  %467 = shl i64 %464, 32
  %468 = ashr exact i64 %467, 32
  %469 = icmp ne i64 %468, %464
  %470 = zext i1 %469 to i8
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %470, i8* %471, align 1, !tbaa !2432
  %472 = and i32 %465, 255
  %473 = call i32 @llvm.ctpop.i32(i32 %472) #16
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = xor i8 %475, 1
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %476, i8* %477, align 1, !tbaa !2446
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %478, align 1, !tbaa !2447
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %479, align 1, !tbaa !2448
  %480 = lshr i32 %465, 31
  %481 = trunc i32 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %470, i8* %483, align 1, !tbaa !2450
  %484 = bitcast i32* %R10D to i64*
  %485 = load i32, i32* %R10D
  %486 = zext i32 %485 to i64
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 9
  store i64 %488, i64* %PC
  %489 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %490 = shl i64 %486, 32
  %491 = ashr exact i64 %490, 32
  %492 = sext i32 %489 to i64
  %493 = mul nsw i64 %492, %491
  %494 = trunc i64 %493 to i32
  %495 = and i64 %493, 4294967295
  store i64 %495, i64* %484, align 8, !tbaa !2428
  %496 = shl i64 %493, 32
  %497 = ashr exact i64 %496, 32
  %498 = icmp ne i64 %497, %493
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %499, i8* %500, align 1, !tbaa !2432
  %501 = and i32 %494, 255
  %502 = call i32 @llvm.ctpop.i32(i32 %501) #16
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %505, i8* %506, align 1, !tbaa !2446
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %507, align 1, !tbaa !2447
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %508, align 1, !tbaa !2448
  %509 = lshr i32 %494, 31
  %510 = trunc i32 %509 to i8
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %510, i8* %511, align 1, !tbaa !2449
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %499, i8* %512, align 1, !tbaa !2450
  %513 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %514 = load i32, i32* %R10D
  %515 = zext i32 %514 to i64
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = sitofp i32 %514 to double
  %519 = bitcast i8* %513 to double*
  store double %518, double* %519, align 1, !tbaa !2454
  %520 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %521 = bitcast %union.vec128_t* %XMM0 to i8*
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 3
  store i64 %523, i64* %PC
  %524 = bitcast i8* %521 to <2 x i32>*
  %525 = load <2 x i32>, <2 x i32>* %524, align 1
  %526 = getelementptr inbounds i8, i8* %521, i64 8
  %527 = bitcast i8* %526 to <2 x i32>*
  %528 = load <2 x i32>, <2 x i32>* %527, align 1
  %529 = extractelement <2 x i32> %525, i32 0
  %530 = bitcast i8* %520 to i32*
  store i32 %529, i32* %530, align 1, !tbaa !2452
  %531 = extractelement <2 x i32> %525, i32 1
  %532 = getelementptr inbounds i8, i8* %520, i64 4
  %533 = bitcast i8* %532 to i32*
  store i32 %531, i32* %533, align 1, !tbaa !2452
  %534 = extractelement <2 x i32> %528, i32 0
  %535 = getelementptr inbounds i8, i8* %520, i64 8
  %536 = bitcast i8* %535 to i32*
  store i32 %534, i32* %536, align 1, !tbaa !2452
  %537 = extractelement <2 x i32> %528, i32 1
  %538 = getelementptr inbounds i8, i8* %520, i64 12
  %539 = bitcast i8* %538 to i32*
  store i32 %537, i32* %539, align 1, !tbaa !2452
  %540 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %541 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %542 = bitcast %union.vec128_t* %XMM2 to i8*
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = bitcast i8* %541 to double*
  %546 = load double, double* %545, align 1
  %547 = getelementptr inbounds i8, i8* %541, i64 8
  %548 = bitcast i8* %547 to i64*
  %549 = load i64, i64* %548, align 1
  %550 = bitcast i8* %542 to double*
  %551 = load double, double* %550, align 1
  %552 = fmul double %546, %551
  %553 = bitcast i8* %540 to double*
  store double %552, double* %553, align 1, !tbaa !2454
  %554 = getelementptr inbounds i8, i8* %540, i64 8
  %555 = bitcast i8* %554 to i64*
  store i64 %549, i64* %555, align 1, !tbaa !2454
  %556 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %557 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %558 = bitcast %union.vec128_t* %XMM1 to i8*
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = bitcast i8* %557 to double*
  %562 = load double, double* %561, align 1
  %563 = getelementptr inbounds i8, i8* %557, i64 8
  %564 = bitcast i8* %563 to i64*
  %565 = load i64, i64* %564, align 1
  %566 = bitcast i8* %558 to double*
  %567 = load double, double* %566, align 1
  %568 = fdiv double %562, %567
  %569 = bitcast i8* %556 to double*
  store double %568, double* %569, align 1, !tbaa !2454
  %570 = getelementptr inbounds i8, i8* %556, i64 8
  %571 = bitcast i8* %570 to i64*
  store i64 %565, i64* %571, align 1, !tbaa !2454
  %572 = bitcast i32* %R10D to i64*
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 8
  store i64 %574, i64* %PC
  %575 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %576 = zext i32 %575 to i64
  store i64 %576, i64* %572, align 8, !tbaa !2428
  %577 = bitcast i32* %R10D to i64*
  %578 = load i32, i32* %R10D
  %579 = zext i32 %578 to i64
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 9
  store i64 %581, i64* %PC
  %582 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %583 = shl i64 %579, 32
  %584 = ashr exact i64 %583, 32
  %585 = sext i32 %582 to i64
  %586 = mul nsw i64 %585, %584
  %587 = trunc i64 %586 to i32
  %588 = and i64 %586, 4294967295
  store i64 %588, i64* %577, align 8, !tbaa !2428
  %589 = shl i64 %586, 32
  %590 = ashr exact i64 %589, 32
  %591 = icmp ne i64 %590, %586
  %592 = zext i1 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %592, i8* %593, align 1, !tbaa !2432
  %594 = and i32 %587, 255
  %595 = call i32 @llvm.ctpop.i32(i32 %594) #16
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %598, i8* %599, align 1, !tbaa !2446
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %600, align 1, !tbaa !2447
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %601, align 1, !tbaa !2448
  %602 = lshr i32 %587, 31
  %603 = trunc i32 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %603, i8* %604, align 1, !tbaa !2449
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %592, i8* %605, align 1, !tbaa !2450
  %606 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %607 = load i32, i32* %R10D
  %608 = zext i32 %607 to i64
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 5
  store i64 %610, i64* %PC
  %611 = sitofp i32 %607 to double
  %612 = bitcast i8* %606 to double*
  store double %611, double* %612, align 1, !tbaa !2454
  %613 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %614 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %615 = bitcast %union.vec128_t* %XMM1 to i8*
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 4
  store i64 %617, i64* %PC
  %618 = bitcast i8* %614 to double*
  %619 = load double, double* %618, align 1
  %620 = getelementptr inbounds i8, i8* %614, i64 8
  %621 = bitcast i8* %620 to i64*
  %622 = load i64, i64* %621, align 1
  %623 = bitcast i8* %615 to double*
  %624 = load double, double* %623, align 1
  %625 = fmul double %619, %624
  %626 = bitcast i8* %613 to double*
  store double %625, double* %626, align 1, !tbaa !2454
  %627 = getelementptr inbounds i8, i8* %613, i64 8
  %628 = bitcast i8* %627 to i64*
  store i64 %622, i64* %628, align 1, !tbaa !2454
  %629 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %630 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %631 = bitcast %union.vec128_t* %XMM0 to i8*
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC
  %634 = bitcast i8* %630 to double*
  %635 = load double, double* %634, align 1
  %636 = getelementptr inbounds i8, i8* %630, i64 8
  %637 = bitcast i8* %636 to i64*
  %638 = load i64, i64* %637, align 1
  %639 = bitcast i8* %631 to double*
  %640 = load double, double* %639, align 1
  %641 = fadd double %635, %640
  %642 = bitcast i8* %629 to double*
  store double %641, double* %642, align 1, !tbaa !2454
  %643 = getelementptr inbounds i8, i8* %629, i64 8
  %644 = bitcast i8* %643 to i64*
  store i64 %638, i64* %644, align 1, !tbaa !2454
  %645 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %646 = bitcast %union.vec128_t* %XMM3 to i8*
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 4
  store i64 %648, i64* %PC
  %649 = bitcast i8* %645 to <2 x i32>*
  %650 = load <2 x i32>, <2 x i32>* %649, align 1
  %651 = getelementptr inbounds i8, i8* %645, i64 8
  %652 = bitcast i8* %651 to <2 x i32>*
  %653 = load <2 x i32>, <2 x i32>* %652, align 1
  %654 = bitcast i8* %646 to double*
  %655 = load double, double* %654, align 1
  %656 = fptrunc double %655 to float
  %657 = bitcast i8* %645 to float*
  store float %656, float* %657, align 1, !tbaa !2452
  %658 = extractelement <2 x i32> %650, i32 1
  %659 = getelementptr inbounds i8, i8* %645, i64 4
  %660 = bitcast i8* %659 to i32*
  store i32 %658, i32* %660, align 1, !tbaa !2452
  %661 = extractelement <2 x i32> %653, i32 0
  %662 = bitcast i8* %651 to i32*
  store i32 %661, i32* %662, align 1, !tbaa !2452
  %663 = extractelement <2 x i32> %653, i32 1
  %664 = getelementptr inbounds i8, i8* %645, i64 12
  %665 = bitcast i8* %664 to i32*
  store i32 %663, i32* %665, align 1, !tbaa !2452
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 12
  %668 = bitcast %union.vec128_t* %XMM0 to i8*
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 5
  store i64 %670, i64* %PC
  %671 = bitcast i8* %668 to <2 x float>*
  %672 = load <2 x float>, <2 x float>* %671, align 1
  %673 = extractelement <2 x float> %672, i32 0
  %674 = inttoptr i64 %667 to float*
  store float %673, float* %674
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 7
  store i64 %676, i64* %PC
  %677 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %678 = zext i32 %677 to i64
  store i64 %678, i64* %RSI, align 8, !tbaa !2428
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 7
  store i64 %680, i64* %PC
  %681 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RDX, align 8, !tbaa !2428
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 884
  %685 = load i32, i32* %EAX
  %686 = zext i32 %685 to i64
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 6
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %684 to i32*
  store i32 %685, i32* %689
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 3899
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 5
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 5
  store i64 %695, i64* %PC
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %697 = load i64, i64* %696, align 8, !tbaa !2428
  %698 = add i64 %697, -8
  %699 = inttoptr i64 %698 to i64*
  store i64 %693, i64* %699
  store i64 %698, i64* %696, align 8, !tbaa !2428
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %691, i64* %700, align 8, !tbaa !2428
  %701 = load i64, i64* %PC
  %702 = call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %701, %struct.Memory* %427)
  %703 = load i64, i64* %PC
  %704 = sub i64 %703, 570
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 5
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 5
  store i64 %708, i64* %PC
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %710 = load i64, i64* %709, align 8, !tbaa !2428
  %711 = add i64 %710, -8
  %712 = inttoptr i64 %711 to i64*
  store i64 %706, i64* %712
  store i64 %711, i64* %709, align 8, !tbaa !2428
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %704, i64* %713, align 8, !tbaa !2428
  %714 = load i64, i64* %PC
  %715 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %714, %struct.Memory* %702)
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 10
  store i64 %717, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 10
  store i64 %719, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 10
  store i64 %721, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 40
  %724 = bitcast %union.vec128_t* %XMM0 to i8*
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 5
  store i64 %726, i64* %PC
  %727 = bitcast i8* %724 to <2 x float>*
  %728 = load <2 x float>, <2 x float>* %727, align 1
  %729 = extractelement <2 x float> %728, i32 0
  %730 = inttoptr i64 %723 to float*
  store float %729, float* %730
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 7
  store i64 %732, i64* %PC
  %733 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %734 = zext i32 %733 to i64
  store i64 %734, i64* %RSI, align 8, !tbaa !2428
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 7
  store i64 %736, i64* %PC
  %737 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %738 = zext i32 %737 to i64
  store i64 %738, i64* %RDX, align 8, !tbaa !2428
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 4304
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 5
  store i64 %744, i64* %PC
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %746 = load i64, i64* %745, align 8, !tbaa !2428
  %747 = add i64 %746, -8
  %748 = inttoptr i64 %747 to i64*
  store i64 %742, i64* %748
  store i64 %747, i64* %745, align 8, !tbaa !2428
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %740, i64* %749, align 8, !tbaa !2428
  %750 = load i64, i64* %PC
  %751 = call %struct.Memory* @sub_401920_dgefa(%struct.State* %0, i64 %750, %struct.Memory* %715)
  %752 = load i64, i64* %PC
  %753 = sub i64 %752, 629
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 5
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = add i64 %759, -8
  %761 = inttoptr i64 %760 to i64*
  store i64 %755, i64* %761
  store i64 %760, i64* %758, align 8, !tbaa !2428
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %763, %struct.Memory* %751)
  %765 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %766 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %767 = load i64, i64* %RBP
  %768 = sub i64 %767, 40
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 5
  store i64 %770, i64* %PC
  %771 = bitcast i8* %766 to <2 x float>*
  %772 = load <2 x float>, <2 x float>* %771, align 1
  %773 = getelementptr inbounds i8, i8* %766, i64 8
  %774 = bitcast i8* %773 to <2 x i32>*
  %775 = load <2 x i32>, <2 x i32>* %774, align 1
  %776 = inttoptr i64 %768 to float*
  %777 = load float, float* %776
  %778 = extractelement <2 x float> %772, i32 0
  %779 = fsub float %778, %777
  %780 = bitcast i8* %765 to float*
  store float %779, float* %780, align 1, !tbaa !2452
  %781 = bitcast <2 x float> %772 to <2 x i32>
  %782 = extractelement <2 x i32> %781, i32 1
  %783 = getelementptr inbounds i8, i8* %765, i64 4
  %784 = bitcast i8* %783 to i32*
  store i32 %782, i32* %784, align 1, !tbaa !2452
  %785 = extractelement <2 x i32> %775, i32 0
  %786 = getelementptr inbounds i8, i8* %765, i64 8
  %787 = bitcast i8* %786 to i32*
  store i32 %785, i32* %787, align 1, !tbaa !2452
  %788 = extractelement <2 x i32> %775, i32 1
  %789 = getelementptr inbounds i8, i8* %765, i64 12
  %790 = bitcast i8* %789 to i32*
  store i32 %788, i32* %790, align 1, !tbaa !2452
  %791 = bitcast %union.vec128_t* %XMM0 to i8*
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 9
  store i64 %793, i64* %PC
  %794 = bitcast i8* %791 to <2 x float>*
  %795 = load <2 x float>, <2 x float>* %794, align 1
  %796 = extractelement <2 x float> %795, i32 0
  store float %796, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*)
  %797 = load i64, i64* %PC
  %798 = sub i64 %797, 648
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 5
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 5
  store i64 %802, i64* %PC
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %804 = load i64, i64* %803, align 8, !tbaa !2428
  %805 = add i64 %804, -8
  %806 = inttoptr i64 %805 to i64*
  store i64 %800, i64* %806
  store i64 %805, i64* %803, align 8, !tbaa !2428
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %798, i64* %807, align 8, !tbaa !2428
  %808 = load i64, i64* %PC
  %809 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %808, %struct.Memory* %764)
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 10
  store i64 %811, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 10
  store i64 %813, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 10
  store i64 %815, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %816 = bitcast i32* %R9D to i64*
  %817 = load i32, i32* %R9D
  %818 = zext i32 %817 to i64
  %819 = load i32, i32* %R9D
  %820 = zext i32 %819 to i64
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 3
  store i64 %822, i64* %PC
  %823 = xor i64 %820, %818
  %824 = trunc i64 %823 to i32
  %825 = and i64 %823, 4294967295
  store i64 %825, i64* %816, align 8, !tbaa !2428
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %826, align 1, !tbaa !2432
  %827 = and i32 %824, 255
  %828 = call i32 @llvm.ctpop.i32(i32 %827) #16
  %829 = trunc i32 %828 to i8
  %830 = and i8 %829, 1
  %831 = xor i8 %830, 1
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %831, i8* %832, align 1, !tbaa !2446
  %833 = icmp eq i32 %824, 0
  %834 = zext i1 %833 to i8
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %834, i8* %835, align 1, !tbaa !2448
  %836 = lshr i32 %824, 31
  %837 = trunc i32 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %837, i8* %838, align 1, !tbaa !2449
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %839, align 1, !tbaa !2450
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %840, align 1, !tbaa !2447
  %841 = load i64, i64* %RBP
  %842 = sub i64 %841, 40
  %843 = bitcast %union.vec128_t* %XMM0 to i8*
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  store i64 %845, i64* %PC
  %846 = bitcast i8* %843 to <2 x float>*
  %847 = load <2 x float>, <2 x float>* %846, align 1
  %848 = extractelement <2 x float> %847, i32 0
  %849 = inttoptr i64 %842 to float*
  store float %848, float* %849
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 7
  store i64 %851, i64* %PC
  %852 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %853 = zext i32 %852 to i64
  store i64 %853, i64* %RSI, align 8, !tbaa !2428
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 7
  store i64 %855, i64* %PC
  %856 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %857 = zext i32 %856 to i64
  store i64 %857, i64* %RDX, align 8, !tbaa !2428
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 5007
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 5
  %862 = load i64, i64* %PC
  %863 = add i64 %862, 5
  store i64 %863, i64* %PC
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %865 = load i64, i64* %864, align 8, !tbaa !2428
  %866 = add i64 %865, -8
  %867 = inttoptr i64 %866 to i64*
  store i64 %861, i64* %867
  store i64 %866, i64* %864, align 8, !tbaa !2428
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %859, i64* %868, align 8, !tbaa !2428
  %869 = load i64, i64* %PC
  %870 = call %struct.Memory* @sub_401c30_dgesl(%struct.State* %0, i64 %869, %struct.Memory* %809)
  %871 = load i64, i64* %PC
  %872 = sub i64 %871, 710
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 5
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 5
  store i64 %876, i64* %PC
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %878 = load i64, i64* %877, align 8, !tbaa !2428
  %879 = add i64 %878, -8
  %880 = inttoptr i64 %879 to i64*
  store i64 %874, i64* %880
  store i64 %879, i64* %877, align 8, !tbaa !2428
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %872, i64* %881, align 8, !tbaa !2428
  %882 = load i64, i64* %PC
  %883 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %882, %struct.Memory* %870)
  %884 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %885 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 40
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 5
  store i64 %889, i64* %PC
  %890 = bitcast i8* %885 to <2 x float>*
  %891 = load <2 x float>, <2 x float>* %890, align 1
  %892 = getelementptr inbounds i8, i8* %885, i64 8
  %893 = bitcast i8* %892 to <2 x i32>*
  %894 = load <2 x i32>, <2 x i32>* %893, align 1
  %895 = inttoptr i64 %887 to float*
  %896 = load float, float* %895
  %897 = extractelement <2 x float> %891, i32 0
  %898 = fsub float %897, %896
  %899 = bitcast i8* %884 to float*
  store float %898, float* %899, align 1, !tbaa !2452
  %900 = bitcast <2 x float> %891 to <2 x i32>
  %901 = extractelement <2 x i32> %900, i32 1
  %902 = getelementptr inbounds i8, i8* %884, i64 4
  %903 = bitcast i8* %902 to i32*
  store i32 %901, i32* %903, align 1, !tbaa !2452
  %904 = extractelement <2 x i32> %894, i32 0
  %905 = getelementptr inbounds i8, i8* %884, i64 8
  %906 = bitcast i8* %905 to i32*
  store i32 %904, i32* %906, align 1, !tbaa !2452
  %907 = extractelement <2 x i32> %894, i32 1
  %908 = getelementptr inbounds i8, i8* %884, i64 12
  %909 = bitcast i8* %908 to i32*
  store i32 %907, i32* %909, align 1, !tbaa !2452
  %910 = bitcast %union.vec128_t* %XMM0 to i8*
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 9
  store i64 %912, i64* %PC
  %913 = bitcast i8* %910 to <2 x float>*
  %914 = load <2 x float>, <2 x float>* %913, align 1
  %915 = extractelement <2 x float> %914, i32 0
  store float %915, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*)
  %916 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 9
  store i64 %918, i64* %PC
  %919 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*)
  %920 = bitcast i8* %916 to float*
  store float %919, float* %920, align 1, !tbaa !2452
  %921 = getelementptr inbounds i8, i8* %916, i64 4
  %922 = bitcast i8* %921 to float*
  store float 0.000000e+00, float* %922, align 1, !tbaa !2452
  %923 = getelementptr inbounds i8, i8* %916, i64 8
  %924 = bitcast i8* %923 to float*
  store float 0.000000e+00, float* %924, align 1, !tbaa !2452
  %925 = getelementptr inbounds i8, i8* %916, i64 12
  %926 = bitcast i8* %925 to float*
  store float 0.000000e+00, float* %926, align 1, !tbaa !2452
  %927 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %928 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 9
  store i64 %930, i64* %PC
  %931 = bitcast i8* %928 to <2 x float>*
  %932 = load <2 x float>, <2 x float>* %931, align 1
  %933 = getelementptr inbounds i8, i8* %928, i64 8
  %934 = bitcast i8* %933 to <2 x i32>*
  %935 = load <2 x i32>, <2 x i32>* %934, align 1
  %936 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*)
  %937 = extractelement <2 x float> %932, i32 0
  %938 = fadd float %937, %936
  %939 = bitcast i8* %927 to float*
  store float %938, float* %939, align 1, !tbaa !2452
  %940 = bitcast <2 x float> %932 to <2 x i32>
  %941 = extractelement <2 x i32> %940, i32 1
  %942 = getelementptr inbounds i8, i8* %927, i64 4
  %943 = bitcast i8* %942 to i32*
  store i32 %941, i32* %943, align 1, !tbaa !2452
  %944 = extractelement <2 x i32> %935, i32 0
  %945 = getelementptr inbounds i8, i8* %927, i64 8
  %946 = bitcast i8* %945 to i32*
  store i32 %944, i32* %946, align 1, !tbaa !2452
  %947 = extractelement <2 x i32> %935, i32 1
  %948 = getelementptr inbounds i8, i8* %927, i64 12
  %949 = bitcast i8* %948 to i32*
  store i32 %947, i32* %949, align 1, !tbaa !2452
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 16
  %952 = bitcast %union.vec128_t* %XMM0 to i8*
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 5
  store i64 %954, i64* %PC
  %955 = bitcast i8* %952 to <2 x float>*
  %956 = load <2 x float>, <2 x float>* %955, align 1
  %957 = extractelement <2 x float> %956, i32 0
  %958 = inttoptr i64 %951 to float*
  store float %957, float* %958
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 11
  store i64 %960, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4008db

block_400cfe:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %961 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %962 = bitcast %union.vec128_t* %XMM0 to i8*
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC
  %965 = bitcast i8* %961 to i64*
  %966 = load i64, i64* %965, align 1
  %967 = getelementptr inbounds i8, i8* %961, i64 8
  %968 = bitcast i8* %967 to i64*
  %969 = load i64, i64* %968, align 1
  %970 = bitcast i8* %962 to i64*
  %971 = load i64, i64* %970, align 1
  %972 = getelementptr inbounds i8, i8* %962, i64 8
  %973 = bitcast i8* %972 to i64*
  %974 = load i64, i64* %973, align 1
  %975 = xor i64 %971, %966
  %976 = xor i64 %974, %969
  %977 = trunc i64 %975 to i32
  %978 = lshr i64 %975, 32
  %979 = trunc i64 %978 to i32
  %980 = bitcast i8* %6167 to i32*
  store i32 %977, i32* %980, align 1, !tbaa !2456
  %981 = getelementptr inbounds i8, i8* %6167, i64 4
  %982 = bitcast i8* %981 to i32*
  store i32 %979, i32* %982, align 1, !tbaa !2456
  %983 = trunc i64 %976 to i32
  %984 = getelementptr inbounds i8, i8* %6167, i64 8
  %985 = bitcast i8* %984 to i32*
  store i32 %983, i32* %985, align 1, !tbaa !2456
  %986 = lshr i64 %976, 32
  %987 = trunc i64 %986 to i32
  %988 = getelementptr inbounds i8, i8* %6167, i64 12
  %989 = bitcast i8* %988 to i32*
  store i32 %987, i32* %989, align 1, !tbaa !2456
  %990 = bitcast %union.vec128_t* %XMM0 to i8*
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 9
  store i64 %992, i64* %PC
  %993 = bitcast i8* %990 to <2 x float>*
  %994 = load <2 x float>, <2 x float>* %993, align 1
  %995 = extractelement <2 x float> %994, i32 0
  store float %995, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %996 = bitcast %union.vec128_t* %XMM0 to i8*
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 9
  store i64 %998, i64* %PC
  %999 = bitcast i8* %996 to <2 x float>*
  %1000 = load <2 x float>, <2 x float>* %999, align 1
  %1001 = extractelement <2 x float> %1000, i32 0
  store float %1001, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*)
  br label %block_400d13

block_401072:                                     ; preds = %block_4011bb, %block_400fc3
  %MEMORY.0 = phi %struct.Memory* [ %2892, %block_400fc3 ], [ %3532, %block_4011bb ]
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 8
  store i64 %1003, i64* %PC
  %1004 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1005 = sub i32 %1004, 6
  %1006 = icmp ult i32 %1004, 6
  %1007 = zext i1 %1006 to i8
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1007, i8* %1008, align 1, !tbaa !2432
  %1009 = and i32 %1005, 255
  %1010 = call i32 @llvm.ctpop.i32(i32 %1009) #16
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1013, i8* %1014, align 1, !tbaa !2446
  %1015 = xor i32 %1004, 6
  %1016 = xor i32 %1015, %1005
  %1017 = lshr i32 %1016, 4
  %1018 = trunc i32 %1017 to i8
  %1019 = and i8 %1018, 1
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1019, i8* %1020, align 1, !tbaa !2447
  %1021 = icmp eq i32 %1005, 0
  %1022 = zext i1 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1022, i8* %1023, align 1, !tbaa !2448
  %1024 = lshr i32 %1005, 31
  %1025 = trunc i32 %1024 to i8
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1025, i8* %1026, align 1, !tbaa !2449
  %1027 = lshr i32 %1004, 31
  %1028 = xor i32 %1024, %1027
  %1029 = add nuw nsw i32 %1028, %1027
  %1030 = icmp eq i32 %1029, 2
  %1031 = zext i1 %1030 to i8
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1031, i8* %1032, align 1, !tbaa !2450
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 615
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 6
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 6
  store i64 %1038, i64* %PC
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1040 = load i8, i8* %1039, align 1, !tbaa !2449
  %1041 = icmp ne i8 %1040, 0
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1043 = load i8, i8* %1042, align 1, !tbaa !2450
  %1044 = icmp ne i8 %1043, 0
  %1045 = xor i1 %1041, %1044
  %1046 = xor i1 %1045, true
  %1047 = zext i1 %1046 to i8
  store i8 %1047, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1049 = select i1 %1045, i64 %1036, i64 %1034
  store i64 %1049, i64* %1048, align 8, !tbaa !2428
  %1050 = load i8, i8* %BRANCH_TAKEN
  %1051 = icmp eq i8 %1050, 1
  %1052 = load i64, i64* %PC
  br i1 %1051, label %block_4012e1, label %block_401080

block_401171:                                     ; preds = %block_40115d
  %1053 = add i64 %1374, 10
  store i64 %1053, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 10
  store i64 %1055, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 10
  store i64 %1057, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %1058 = bitcast i32* %R9D to i64*
  %1059 = load i32, i32* %R9D
  %1060 = zext i32 %1059 to i64
  %1061 = load i32, i32* %R9D
  %1062 = zext i32 %1061 to i64
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 3
  store i64 %1064, i64* %PC
  %1065 = xor i64 %1062, %1060
  %1066 = trunc i64 %1065 to i32
  %1067 = and i64 %1065, 4294967295
  store i64 %1067, i64* %1058, align 8, !tbaa !2428
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1068, align 1, !tbaa !2432
  %1069 = and i32 %1066, 255
  %1070 = call i32 @llvm.ctpop.i32(i32 %1069) #16
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = xor i8 %1072, 1
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1073, i8* %1074, align 1, !tbaa !2446
  %1075 = icmp eq i32 %1066, 0
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1076, i8* %1077, align 1, !tbaa !2448
  %1078 = lshr i32 %1066, 31
  %1079 = trunc i32 %1078 to i8
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1079, i8* %1080, align 1, !tbaa !2449
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1081, align 1, !tbaa !2450
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1082, align 1, !tbaa !2447
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 7
  store i64 %1084, i64* %PC
  %1085 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %1086 = zext i32 %1085 to i64
  store i64 %1086, i64* %RSI, align 8, !tbaa !2428
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 7
  store i64 %1088, i64* %PC
  %1089 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %1090 = zext i32 %1089 to i64
  store i64 %1090, i64* %RDX, align 8, !tbaa !2428
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 2704
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 5
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 5
  store i64 %1096, i64* %PC
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1098 = load i64, i64* %1097, align 8, !tbaa !2428
  %1099 = add i64 %1098, -8
  %1100 = inttoptr i64 %1099 to i64*
  store i64 %1094, i64* %1100
  store i64 %1099, i64* %1097, align 8, !tbaa !2428
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1092, i64* %1101, align 8, !tbaa !2428
  %1102 = load i64, i64* %PC
  %1103 = call %struct.Memory* @sub_401c30_dgesl(%struct.State* %0, i64 %1102, %struct.Memory* %MEMORY.1)
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 7
  store i64 %1105, i64* %PC
  %1106 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1107 = zext i32 %1106 to i64
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = load i64, i64* %RAX
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 3
  store i64 %1110, i64* %PC
  %1111 = trunc i64 %1108 to i32
  %1112 = add i32 1, %1111
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RAX, align 8, !tbaa !2428
  %1114 = icmp ult i32 %1112, %1111
  %1115 = icmp ult i32 %1112, 1
  %1116 = or i1 %1114, %1115
  %1117 = zext i1 %1116 to i8
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1117, i8* %1118, align 1, !tbaa !2432
  %1119 = and i32 %1112, 255
  %1120 = call i32 @llvm.ctpop.i32(i32 %1119) #16
  %1121 = trunc i32 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = xor i8 %1122, 1
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1123, i8* %1124, align 1, !tbaa !2446
  %1125 = xor i64 1, %1108
  %1126 = trunc i64 %1125 to i32
  %1127 = xor i32 %1126, %1112
  %1128 = lshr i32 %1127, 4
  %1129 = trunc i32 %1128 to i8
  %1130 = and i8 %1129, 1
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1130, i8* %1131, align 1, !tbaa !2447
  %1132 = icmp eq i32 %1112, 0
  %1133 = zext i1 %1132 to i8
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1133, i8* %1134, align 1, !tbaa !2448
  %1135 = lshr i32 %1112, 31
  %1136 = trunc i32 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1136, i8* %1137, align 1, !tbaa !2449
  %1138 = lshr i32 %1111, 31
  %1139 = xor i32 %1135, %1138
  %1140 = add nuw nsw i32 %1139, %1135
  %1141 = icmp eq i32 %1140, 2
  %1142 = zext i1 %1141 to i8
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1142, i8* %1143, align 1, !tbaa !2450
  %1144 = load i32, i32* %EAX
  %1145 = zext i32 %1144 to i64
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 7
  store i64 %1147, i64* %PC
  store i32 %1144, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1148 = load i64, i64* %PC
  %1149 = sub i64 %1148, 89
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 5
  store i64 %1151, i64* %PC
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1149, i64* %1152, align 8, !tbaa !2428
  br label %block_40115d

block_4012e1:                                     ; preds = %block_401072
  %1153 = add i64 %1052, 10
  store i64 %1153, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %1154 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1155 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1156 = bitcast %union.vec128_t* %XMM0 to i8*
  %1157 = load i64, i64* %PC
  %1158 = add i64 %1157, 3
  store i64 %1158, i64* %PC
  %1159 = bitcast i8* %1155 to i64*
  %1160 = load i64, i64* %1159, align 1
  %1161 = getelementptr inbounds i8, i8* %1155, i64 8
  %1162 = bitcast i8* %1161 to i64*
  %1163 = load i64, i64* %1162, align 1
  %1164 = bitcast i8* %1156 to i64*
  %1165 = load i64, i64* %1164, align 1
  %1166 = getelementptr inbounds i8, i8* %1156, i64 8
  %1167 = bitcast i8* %1166 to i64*
  %1168 = load i64, i64* %1167, align 1
  %1169 = xor i64 %1165, %1160
  %1170 = xor i64 %1168, %1163
  %1171 = trunc i64 %1169 to i32
  %1172 = lshr i64 %1169, 32
  %1173 = trunc i64 %1172 to i32
  %1174 = bitcast i8* %1154 to i32*
  store i32 %1171, i32* %1174, align 1, !tbaa !2456
  %1175 = getelementptr inbounds i8, i8* %1154, i64 4
  %1176 = bitcast i8* %1175 to i32*
  store i32 %1173, i32* %1176, align 1, !tbaa !2456
  %1177 = trunc i64 %1170 to i32
  %1178 = getelementptr inbounds i8, i8* %1154, i64 8
  %1179 = bitcast i8* %1178 to i32*
  store i32 %1177, i32* %1179, align 1, !tbaa !2456
  %1180 = lshr i64 %1170, 32
  %1181 = trunc i64 %1180 to i32
  %1182 = getelementptr inbounds i8, i8* %1154, i64 12
  %1183 = bitcast i8* %1182 to i32*
  store i32 %1181, i32* %1183, align 1, !tbaa !2456
  %1184 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 8
  store i64 %1186, i64* %PC
  %1187 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 48) to double*)
  %1188 = bitcast i8* %1184 to double*
  store double %1187, double* %1188, align 1, !tbaa !2454
  %1189 = getelementptr inbounds i8, i8* %1184, i64 8
  %1190 = bitcast i8* %1189 to double*
  store double 0.000000e+00, double* %1190, align 1, !tbaa !2454
  %1191 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 9
  store i64 %1193, i64* %PC
  %1194 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %1195 = fpext float %1194 to double
  %1196 = bitcast i8* %1191 to double*
  store double %1195, double* %1196, align 1, !tbaa !2454
  %1197 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1198 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1199 = bitcast %union.vec128_t* %XMM1 to i8*
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 4
  store i64 %1201, i64* %PC
  %1202 = bitcast i8* %1198 to double*
  %1203 = load double, double* %1202, align 1
  %1204 = getelementptr inbounds i8, i8* %1198, i64 8
  %1205 = bitcast i8* %1204 to i64*
  %1206 = load i64, i64* %1205, align 1
  %1207 = bitcast i8* %1199 to double*
  %1208 = load double, double* %1207, align 1
  %1209 = fdiv double %1203, %1208
  %1210 = bitcast i8* %1197 to double*
  store double %1209, double* %1210, align 1, !tbaa !2454
  %1211 = getelementptr inbounds i8, i8* %1197, i64 8
  %1212 = bitcast i8* %1211 to i64*
  store i64 %1206, i64* %1212, align 1, !tbaa !2454
  %1213 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1214 = bitcast %union.vec128_t* %XMM2 to i8*
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 4
  store i64 %1216, i64* %PC
  %1217 = bitcast i8* %1213 to <2 x i32>*
  %1218 = load <2 x i32>, <2 x i32>* %1217, align 1
  %1219 = getelementptr inbounds i8, i8* %1213, i64 8
  %1220 = bitcast i8* %1219 to <2 x i32>*
  %1221 = load <2 x i32>, <2 x i32>* %1220, align 1
  %1222 = bitcast i8* %1214 to double*
  %1223 = load double, double* %1222, align 1
  %1224 = fptrunc double %1223 to float
  %1225 = bitcast i8* %1213 to float*
  store float %1224, float* %1225, align 1, !tbaa !2452
  %1226 = extractelement <2 x i32> %1218, i32 1
  %1227 = getelementptr inbounds i8, i8* %1213, i64 4
  %1228 = bitcast i8* %1227 to i32*
  store i32 %1226, i32* %1228, align 1, !tbaa !2452
  %1229 = extractelement <2 x i32> %1221, i32 0
  %1230 = bitcast i8* %1219 to i32*
  store i32 %1229, i32* %1230, align 1, !tbaa !2452
  %1231 = extractelement <2 x i32> %1221, i32 1
  %1232 = getelementptr inbounds i8, i8* %1213, i64 12
  %1233 = bitcast i8* %1232 to i32*
  store i32 %1231, i32* %1233, align 1, !tbaa !2452
  %1234 = bitcast %union.vec128_t* %XMM1 to i8*
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 9
  store i64 %1236, i64* %PC
  %1237 = bitcast i8* %1234 to <2 x float>*
  %1238 = load <2 x float>, <2 x float>* %1237, align 1
  %1239 = extractelement <2 x float> %1238, i32 0
  store float %1239, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 8
  store i64 %1241, i64* %PC
  %1242 = load i64, i64* @stderr
  store i64 %1242, i64* %RDI, align 8, !tbaa !2428
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 2
  store i64 %1244, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1245 = load i64, i64* %PC
  %1246 = sub i64 %1245, 3642
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 5
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 5
  store i64 %1250, i64* %PC
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1252 = load i64, i64* %1251, align 8, !tbaa !2428
  %1253 = add i64 %1252, -8
  %1254 = inttoptr i64 %1253 to i64*
  store i64 %1248, i64* %1254
  store i64 %1253, i64* %1251, align 8, !tbaa !2428
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1246, i64* %1255, align 8, !tbaa !2428
  %1256 = load i64, i64* %PC
  %1257 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %1256, %struct.Memory* %MEMORY.0)
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 10
  store i64 %1259, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 8
  store i64 %1261, i64* %PC
  %1262 = load i64, i64* @stderr
  store i64 %1262, i64* %RDI, align 8, !tbaa !2428
  %1263 = load i64, i64* %RBP
  %1264 = sub i64 %1263, 972
  %1265 = load i32, i32* %EAX
  %1266 = zext i32 %1265 to i64
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 6
  store i64 %1268, i64* %PC
  %1269 = inttoptr i64 %1264 to i32*
  store i32 %1265, i32* %1269
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 2
  store i64 %1271, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1272 = load i64, i64* %PC
  %1273 = sub i64 %1272, 3673
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 5
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 5
  store i64 %1277, i64* %PC
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1279 = load i64, i64* %1278, align 8, !tbaa !2428
  %1280 = add i64 %1279, -8
  %1281 = inttoptr i64 %1280 to i64*
  store i64 %1275, i64* %1281
  store i64 %1280, i64* %1278, align 8, !tbaa !2428
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1273, i64* %1282, align 8, !tbaa !2428
  %1283 = load i64, i64* %PC
  %1284 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %1283, %struct.Memory* %1257)
  %1285 = load i64, i64* %RBP
  %1286 = sub i64 %1285, 976
  %1287 = load i32, i32* %EAX
  %1288 = zext i32 %1287 to i64
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 6
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1286 to i32*
  store i32 %1287, i32* %1291
  %1292 = load i64, i64* %PC
  %1293 = sub i64 %1292, 3428
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 5
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  store i64 %1297, i64* %PC
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1299 = load i64, i64* %1298, align 8, !tbaa !2428
  %1300 = add i64 %1299, -8
  %1301 = inttoptr i64 %1300 to i64*
  store i64 %1295, i64* %1301
  store i64 %1300, i64* %1298, align 8, !tbaa !2428
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1293, i64* %1302, align 8, !tbaa !2428
  %1303 = load i64, i64* %PC
  %1304 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %1303, %struct.Memory* %1284)
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 80
  %1307 = bitcast %union.vec128_t* %XMM0 to i8*
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 5
  store i64 %1309, i64* %PC
  %1310 = bitcast i8* %1307 to <2 x float>*
  %1311 = load <2 x float>, <2 x float>* %1310, align 1
  %1312 = extractelement <2 x float> %1311, i32 0
  %1313 = inttoptr i64 %1306 to float*
  store float %1312, float* %1313
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 11
  store i64 %1315, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_401359

block_40115d:                                     ; preds = %block_40111b, %block_401171
  %MEMORY.1 = phi %struct.Memory* [ %5147, %block_40111b ], [ %1103, %block_401171 ]
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 7
  store i64 %1317, i64* %PC
  %1318 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1319 = zext i32 %1318 to i64
  store i64 %1319, i64* %RAX, align 8, !tbaa !2428
  %1320 = load i32, i32* %EAX
  %1321 = zext i32 %1320 to i64
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 7
  store i64 %1323, i64* %PC
  %1324 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %1325 = sub i32 %1320, %1324
  %1326 = icmp ult i32 %1320, %1324
  %1327 = zext i1 %1326 to i8
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1327, i8* %1328, align 1, !tbaa !2432
  %1329 = and i32 %1325, 255
  %1330 = call i32 @llvm.ctpop.i32(i32 %1329) #16
  %1331 = trunc i32 %1330 to i8
  %1332 = and i8 %1331, 1
  %1333 = xor i8 %1332, 1
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1333, i8* %1334, align 1, !tbaa !2446
  %1335 = xor i32 %1324, %1320
  %1336 = xor i32 %1335, %1325
  %1337 = lshr i32 %1336, 4
  %1338 = trunc i32 %1337 to i8
  %1339 = and i8 %1338, 1
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1339, i8* %1340, align 1, !tbaa !2447
  %1341 = icmp eq i32 %1325, 0
  %1342 = zext i1 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1342, i8* %1343, align 1, !tbaa !2448
  %1344 = lshr i32 %1325, 31
  %1345 = trunc i32 %1344 to i8
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1345, i8* %1346, align 1, !tbaa !2449
  %1347 = lshr i32 %1320, 31
  %1348 = lshr i32 %1324, 31
  %1349 = xor i32 %1348, %1347
  %1350 = xor i32 %1344, %1347
  %1351 = add nuw nsw i32 %1350, %1349
  %1352 = icmp eq i32 %1351, 2
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1353, i8* %1354, align 1, !tbaa !2450
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 80
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 6
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 6
  store i64 %1360, i64* %PC
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1362 = load i8, i8* %1361, align 1, !tbaa !2449
  %1363 = icmp ne i8 %1362, 0
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1365 = load i8, i8* %1364, align 1, !tbaa !2450
  %1366 = icmp ne i8 %1365, 0
  %1367 = xor i1 %1363, %1366
  %1368 = xor i1 %1367, true
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1371 = select i1 %1367, i64 %1358, i64 %1356
  store i64 %1371, i64* %1370, align 8, !tbaa !2428
  %1372 = load i8, i8* %BRANCH_TAKEN
  %1373 = icmp eq i8 %1372, 1
  %1374 = load i64, i64* %PC
  br i1 %1373, label %block_4011bb, label %block_401171

block_400aee:                                     ; preds = %block_400ab8, %block_400aca
  %MEMORY.2 = phi %struct.Memory* [ %6884, %block_400aca ], [ %6884, %block_400ab8 ]
  %1375 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1376 = load i64, i64* %RBP
  %1377 = sub i64 %1376, 904
  %1378 = load i64, i64* %PC
  %1379 = add i64 %1378, 8
  store i64 %1379, i64* %PC
  %1380 = inttoptr i64 %1377 to double*
  %1381 = load double, double* %1380
  %1382 = bitcast i8* %1375 to double*
  store double %1381, double* %1382, align 1, !tbaa !2454
  %1383 = getelementptr inbounds i8, i8* %1375, i64 8
  %1384 = bitcast i8* %1383 to double*
  store double 0.000000e+00, double* %1384, align 1, !tbaa !2454
  %1385 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1386 = bitcast %union.vec128_t* %XMM0 to i8*
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 4
  store i64 %1388, i64* %PC
  %1389 = bitcast i8* %1385 to <2 x i32>*
  %1390 = load <2 x i32>, <2 x i32>* %1389, align 1
  %1391 = getelementptr inbounds i8, i8* %1385, i64 8
  %1392 = bitcast i8* %1391 to <2 x i32>*
  %1393 = load <2 x i32>, <2 x i32>* %1392, align 1
  %1394 = bitcast i8* %1386 to double*
  %1395 = load double, double* %1394, align 1
  %1396 = fptrunc double %1395 to float
  %1397 = bitcast i8* %1385 to float*
  store float %1396, float* %1397, align 1, !tbaa !2452
  %1398 = extractelement <2 x i32> %1390, i32 1
  %1399 = getelementptr inbounds i8, i8* %1385, i64 4
  %1400 = bitcast i8* %1399 to i32*
  store i32 %1398, i32* %1400, align 1, !tbaa !2452
  %1401 = extractelement <2 x i32> %1393, i32 0
  %1402 = bitcast i8* %1391 to i32*
  store i32 %1401, i32* %1402, align 1, !tbaa !2452
  %1403 = extractelement <2 x i32> %1393, i32 1
  %1404 = getelementptr inbounds i8, i8* %1385, i64 12
  %1405 = bitcast i8* %1404 to i32*
  store i32 %1403, i32* %1405, align 1, !tbaa !2452
  %1406 = load i64, i64* %RBP
  %1407 = sub i64 %1406, 24
  %1408 = bitcast %union.vec128_t* %XMM0 to i8*
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 5
  store i64 %1410, i64* %PC
  %1411 = bitcast i8* %1408 to <2 x float>*
  %1412 = load <2 x float>, <2 x float>* %1411, align 1
  %1413 = extractelement <2 x float> %1412, i32 0
  %1414 = inttoptr i64 %1407 to float*
  store float %1413, float* %1414
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 7
  store i64 %1416, i64* %PC
  %1417 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1418 = zext i32 %1417 to i64
  store i64 %1418, i64* %RAX, align 8, !tbaa !2428
  %1419 = load i64, i64* %RAX
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 3
  store i64 %1421, i64* %PC
  %1422 = trunc i64 %1419 to i32
  %1423 = add i32 1, %1422
  %1424 = zext i32 %1423 to i64
  store i64 %1424, i64* %RAX, align 8, !tbaa !2428
  %1425 = icmp ult i32 %1423, %1422
  %1426 = icmp ult i32 %1423, 1
  %1427 = or i1 %1425, %1426
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1428, i8* %1429, align 1, !tbaa !2432
  %1430 = and i32 %1423, 255
  %1431 = call i32 @llvm.ctpop.i32(i32 %1430) #16
  %1432 = trunc i32 %1431 to i8
  %1433 = and i8 %1432, 1
  %1434 = xor i8 %1433, 1
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1434, i8* %1435, align 1, !tbaa !2446
  %1436 = xor i64 1, %1419
  %1437 = trunc i64 %1436 to i32
  %1438 = xor i32 %1437, %1423
  %1439 = lshr i32 %1438, 4
  %1440 = trunc i32 %1439 to i8
  %1441 = and i8 %1440, 1
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1441, i8* %1442, align 1, !tbaa !2447
  %1443 = icmp eq i32 %1423, 0
  %1444 = zext i1 %1443 to i8
  %1445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1444, i8* %1445, align 1, !tbaa !2448
  %1446 = lshr i32 %1423, 31
  %1447 = trunc i32 %1446 to i8
  %1448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1447, i8* %1448, align 1, !tbaa !2449
  %1449 = lshr i32 %1422, 31
  %1450 = xor i32 %1446, %1449
  %1451 = add nuw nsw i32 %1450, %1446
  %1452 = icmp eq i32 %1451, 2
  %1453 = zext i1 %1452 to i8
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1453, i8* %1454, align 1, !tbaa !2450
  %1455 = load i32, i32* %EAX
  %1456 = zext i32 %1455 to i64
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 7
  store i64 %1458, i64* %PC
  store i32 %1455, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1459 = load i64, i64* %PC
  %1460 = sub i64 %1459, 265
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 5
  store i64 %1462, i64* %PC
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1460, i64* %1463, align 8, !tbaa !2428
  br label %block_400a07

block_4008db:                                     ; preds = %block_4008ef, %block_400630
  %MEMORY.3 = phi %struct.Memory* [ %883, %block_400630 ], [ %MEMORY.3, %block_4008ef ]
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 7
  store i64 %1465, i64* %PC
  %1466 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1467 = zext i32 %1466 to i64
  store i64 %1467, i64* %RAX, align 8, !tbaa !2428
  %1468 = load i32, i32* %EAX
  %1469 = zext i32 %1468 to i64
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 7
  store i64 %1471, i64* %PC
  %1472 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %1473 = sub i32 %1468, %1472
  %1474 = icmp ult i32 %1468, %1472
  %1475 = zext i1 %1474 to i8
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1475, i8* %1476, align 1, !tbaa !2432
  %1477 = and i32 %1473, 255
  %1478 = call i32 @llvm.ctpop.i32(i32 %1477) #16
  %1479 = trunc i32 %1478 to i8
  %1480 = and i8 %1479, 1
  %1481 = xor i8 %1480, 1
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1481, i8* %1482, align 1, !tbaa !2446
  %1483 = xor i32 %1472, %1468
  %1484 = xor i32 %1483, %1473
  %1485 = lshr i32 %1484, 4
  %1486 = trunc i32 %1485 to i8
  %1487 = and i8 %1486, 1
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1487, i8* %1488, align 1, !tbaa !2447
  %1489 = icmp eq i32 %1473, 0
  %1490 = zext i1 %1489 to i8
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1490, i8* %1491, align 1, !tbaa !2448
  %1492 = lshr i32 %1473, 31
  %1493 = trunc i32 %1492 to i8
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1493, i8* %1494, align 1, !tbaa !2449
  %1495 = lshr i32 %1468, 31
  %1496 = lshr i32 %1472, 31
  %1497 = xor i32 %1496, %1495
  %1498 = xor i32 %1492, %1495
  %1499 = add nuw nsw i32 %1498, %1497
  %1500 = icmp eq i32 %1499, 2
  %1501 = zext i1 %1500 to i8
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1501, i8* %1502, align 1, !tbaa !2450
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 62
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 6
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 6
  store i64 %1508, i64* %PC
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1510 = load i8, i8* %1509, align 1, !tbaa !2449
  %1511 = icmp ne i8 %1510, 0
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1513 = load i8, i8* %1512, align 1, !tbaa !2450
  %1514 = icmp ne i8 %1513, 0
  %1515 = xor i1 %1511, %1514
  %1516 = xor i1 %1515, true
  %1517 = zext i1 %1516 to i8
  store i8 %1517, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1519 = select i1 %1515, i64 %1506, i64 %1504
  store i64 %1519, i64* %1518, align 8, !tbaa !2428
  %1520 = load i8, i8* %BRANCH_TAKEN
  %1521 = icmp eq i8 %1520, 1
  %1522 = load i64, i64* %PC
  br i1 %1521, label %block_400927, label %block_4008ef

block_400a58:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 8
  store i64 %1524, i64* %PC
  %1525 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %1526 = sext i32 %1525 to i64
  store i64 %1526, i64* %RAX, align 8, !tbaa !2428
  %1527 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1528 = load i64, i64* %RAX
  %1529 = mul i64 %1528, 4
  %1530 = add i64 %1529, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 9
  store i64 %1532, i64* %PC
  %1533 = inttoptr i64 %1530 to float*
  %1534 = load float, float* %1533
  %1535 = fpext float %1534 to double
  %1536 = bitcast i8* %1527 to double*
  store double %1535, double* %1536, align 1, !tbaa !2454
  %1537 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 7
  store i64 %1539, i64* %PC
  %1540 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %1541 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %1542 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %1543 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %1544 = bitcast i8* %1537 to float*
  store float %1540, float* %1544, align 1, !tbaa !2452
  %1545 = getelementptr inbounds i8, i8* %1537, i64 4
  %1546 = bitcast i8* %1545 to float*
  store float %1541, float* %1546, align 1, !tbaa !2452
  %1547 = getelementptr inbounds i8, i8* %1537, i64 8
  %1548 = bitcast i8* %1547 to float*
  store float %1542, float* %1548, align 1, !tbaa !2452
  %1549 = getelementptr inbounds i8, i8* %1537, i64 12
  %1550 = bitcast i8* %1549 to float*
  store float %1543, float* %1550, align 1, !tbaa !2452
  %1551 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1552 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1553 = bitcast %union.vec128_t* %XMM1 to i8*
  %1554 = load i64, i64* %PC
  %1555 = add i64 %1554, 4
  store i64 %1555, i64* %PC
  %1556 = bitcast i8* %1552 to i64*
  %1557 = load i64, i64* %1556, align 1
  %1558 = getelementptr inbounds i8, i8* %1552, i64 8
  %1559 = bitcast i8* %1558 to i64*
  %1560 = load i64, i64* %1559, align 1
  %1561 = bitcast i8* %1553 to i64*
  %1562 = load i64, i64* %1561, align 1
  %1563 = getelementptr inbounds i8, i8* %1553, i64 8
  %1564 = bitcast i8* %1563 to i64*
  %1565 = load i64, i64* %1564, align 1
  %1566 = and i64 %1562, %1557
  %1567 = and i64 %1565, %1560
  %1568 = trunc i64 %1566 to i32
  %1569 = lshr i64 %1566, 32
  %1570 = trunc i64 %1569 to i32
  %1571 = bitcast i8* %1551 to i32*
  store i32 %1568, i32* %1571, align 1, !tbaa !2456
  %1572 = getelementptr inbounds i8, i8* %1551, i64 4
  %1573 = bitcast i8* %1572 to i32*
  store i32 %1570, i32* %1573, align 1, !tbaa !2456
  %1574 = trunc i64 %1567 to i32
  %1575 = getelementptr inbounds i8, i8* %1551, i64 8
  %1576 = bitcast i8* %1575 to i32*
  store i32 %1574, i32* %1576, align 1, !tbaa !2456
  %1577 = lshr i64 %1567, 32
  %1578 = trunc i64 %1577 to i32
  %1579 = getelementptr inbounds i8, i8* %1551, i64 12
  %1580 = bitcast i8* %1579 to i32*
  store i32 %1578, i32* %1580, align 1, !tbaa !2456
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 896
  %1583 = bitcast %union.vec128_t* %XMM0 to i8*
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 8
  store i64 %1585, i64* %PC
  %1586 = bitcast i8* %1583 to double*
  %1587 = load double, double* %1586, align 1
  %1588 = inttoptr i64 %1582 to double*
  store double %1587, double* %1588
  br label %block_400a7c

block_4015d6:                                     ; preds = %block_401578
  %1589 = sub i64 %3813, 4086
  %1590 = load i64, i64* %PC
  %1591 = add i64 %1590, 5
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 5
  store i64 %1593, i64* %PC
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1595 = load i64, i64* %1594, align 8, !tbaa !2428
  %1596 = add i64 %1595, -8
  %1597 = inttoptr i64 %1596 to i64*
  store i64 %1591, i64* %1597
  store i64 %1596, i64* %1594, align 8, !tbaa !2428
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1589, i64* %1598, align 8, !tbaa !2428
  %1599 = load i64, i64* %PC
  %1600 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %1599, %struct.Memory* %MEMORY.7)
  %1601 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 8
  store i64 %1603, i64* %PC
  %1604 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to double*)
  %1605 = bitcast i8* %1601 to double*
  store double %1604, double* %1605, align 1, !tbaa !2454
  %1606 = getelementptr inbounds i8, i8* %1601, i64 8
  %1607 = bitcast i8* %1606 to double*
  store double 0.000000e+00, double* %1607, align 1, !tbaa !2454
  %1608 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1609 = load i64, i64* %PC
  %1610 = add i64 %1609, 8
  store i64 %1610, i64* %PC
  %1611 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 40) to double*)
  %1612 = bitcast i8* %1608 to double*
  store double %1611, double* %1612, align 1, !tbaa !2454
  %1613 = getelementptr inbounds i8, i8* %1608, i64 8
  %1614 = bitcast i8* %1613 to double*
  store double 0.000000e+00, double* %1614, align 1, !tbaa !2454
  %1615 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1616 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 40
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 5
  store i64 %1620, i64* %PC
  %1621 = bitcast i8* %1616 to <2 x float>*
  %1622 = load <2 x float>, <2 x float>* %1621, align 1
  %1623 = getelementptr inbounds i8, i8* %1616, i64 8
  %1624 = bitcast i8* %1623 to <2 x i32>*
  %1625 = load <2 x i32>, <2 x i32>* %1624, align 1
  %1626 = inttoptr i64 %1618 to float*
  %1627 = load float, float* %1626
  %1628 = extractelement <2 x float> %1622, i32 0
  %1629 = fsub float %1628, %1627
  %1630 = bitcast i8* %1615 to float*
  store float %1629, float* %1630, align 1, !tbaa !2452
  %1631 = bitcast <2 x float> %1622 to <2 x i32>
  %1632 = extractelement <2 x i32> %1631, i32 1
  %1633 = getelementptr inbounds i8, i8* %1615, i64 4
  %1634 = bitcast i8* %1633 to i32*
  store i32 %1632, i32* %1634, align 1, !tbaa !2452
  %1635 = extractelement <2 x i32> %1625, i32 0
  %1636 = getelementptr inbounds i8, i8* %1615, i64 8
  %1637 = bitcast i8* %1636 to i32*
  store i32 %1635, i32* %1637, align 1, !tbaa !2452
  %1638 = extractelement <2 x i32> %1625, i32 1
  %1639 = getelementptr inbounds i8, i8* %1615, i64 12
  %1640 = bitcast i8* %1639 to i32*
  store i32 %1638, i32* %1640, align 1, !tbaa !2452
  %1641 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 9
  store i64 %1643, i64* %PC
  %1644 = bitcast i8* %1641 to <2 x i32>*
  %1645 = load <2 x i32>, <2 x i32>* %1644, align 1
  %1646 = getelementptr inbounds i8, i8* %1641, i64 8
  %1647 = bitcast i8* %1646 to <2 x i32>*
  %1648 = load <2 x i32>, <2 x i32>* %1647, align 1
  %1649 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %1650 = sitofp i32 %1649 to float
  %1651 = bitcast i8* %1641 to float*
  store float %1650, float* %1651, align 1, !tbaa !2452
  %1652 = extractelement <2 x i32> %1645, i32 1
  %1653 = getelementptr inbounds i8, i8* %1641, i64 4
  %1654 = bitcast i8* %1653 to i32*
  store i32 %1652, i32* %1654, align 1, !tbaa !2452
  %1655 = extractelement <2 x i32> %1648, i32 0
  %1656 = bitcast i8* %1646 to i32*
  store i32 %1655, i32* %1656, align 1, !tbaa !2452
  %1657 = extractelement <2 x i32> %1648, i32 1
  %1658 = getelementptr inbounds i8, i8* %1641, i64 12
  %1659 = bitcast i8* %1658 to i32*
  store i32 %1657, i32* %1659, align 1, !tbaa !2452
  %1660 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1661 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1662 = bitcast %union.vec128_t* %XMM3 to i8*
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 4
  store i64 %1664, i64* %PC
  %1665 = bitcast i8* %1661 to <2 x float>*
  %1666 = load <2 x float>, <2 x float>* %1665, align 1
  %1667 = getelementptr inbounds i8, i8* %1661, i64 8
  %1668 = bitcast i8* %1667 to <2 x i32>*
  %1669 = load <2 x i32>, <2 x i32>* %1668, align 1
  %1670 = bitcast i8* %1662 to <2 x float>*
  %1671 = load <2 x float>, <2 x float>* %1670, align 1
  %1672 = extractelement <2 x float> %1666, i32 0
  %1673 = extractelement <2 x float> %1671, i32 0
  %1674 = fdiv float %1672, %1673
  %1675 = bitcast i8* %1660 to float*
  store float %1674, float* %1675, align 1, !tbaa !2452
  %1676 = bitcast <2 x float> %1666 to <2 x i32>
  %1677 = extractelement <2 x i32> %1676, i32 1
  %1678 = getelementptr inbounds i8, i8* %1660, i64 4
  %1679 = bitcast i8* %1678 to i32*
  store i32 %1677, i32* %1679, align 1, !tbaa !2452
  %1680 = extractelement <2 x i32> %1669, i32 0
  %1681 = getelementptr inbounds i8, i8* %1660, i64 8
  %1682 = bitcast i8* %1681 to i32*
  store i32 %1680, i32* %1682, align 1, !tbaa !2452
  %1683 = extractelement <2 x i32> %1669, i32 1
  %1684 = getelementptr inbounds i8, i8* %1660, i64 12
  %1685 = bitcast i8* %1684 to i32*
  store i32 %1683, i32* %1685, align 1, !tbaa !2452
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 8
  store i64 %1687, i64* %PC
  %1688 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1689 = sext i32 %1688 to i64
  store i64 %1689, i64* %RAX, align 8, !tbaa !2428
  %1690 = load i64, i64* %RAX
  %1691 = mul i64 %1690, 4
  %1692 = add i64 %1691, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1693 = bitcast %union.vec128_t* %XMM0 to i8*
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 9
  store i64 %1695, i64* %PC
  %1696 = bitcast i8* %1693 to <2 x float>*
  %1697 = load <2 x float>, <2 x float>* %1696, align 1
  %1698 = extractelement <2 x float> %1697, i32 0
  %1699 = inttoptr i64 %1692 to float*
  store float %1698, float* %1699
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 8
  store i64 %1701, i64* %PC
  %1702 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1703 = sext i32 %1702 to i64
  store i64 %1703, i64* %RAX, align 8, !tbaa !2428
  %1704 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1705 = load i64, i64* %RAX
  %1706 = mul i64 %1705, 4
  %1707 = add i64 %1706, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 9
  store i64 %1709, i64* %PC
  %1710 = inttoptr i64 %1707 to float*
  %1711 = load float, float* %1710
  %1712 = bitcast i8* %1704 to float*
  store float %1711, float* %1712, align 1, !tbaa !2452
  %1713 = getelementptr inbounds i8, i8* %1704, i64 4
  %1714 = bitcast i8* %1713 to float*
  store float 0.000000e+00, float* %1714, align 1, !tbaa !2452
  %1715 = getelementptr inbounds i8, i8* %1704, i64 8
  %1716 = bitcast i8* %1715 to float*
  store float 0.000000e+00, float* %1716, align 1, !tbaa !2452
  %1717 = getelementptr inbounds i8, i8* %1704, i64 12
  %1718 = bitcast i8* %1717 to float*
  store float 0.000000e+00, float* %1718, align 1, !tbaa !2452
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 8
  store i64 %1720, i64* %PC
  %1721 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1722 = sext i32 %1721 to i64
  store i64 %1722, i64* %RAX, align 8, !tbaa !2428
  %1723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1724 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1725 = load i64, i64* %RAX
  %1726 = mul i64 %1725, 4
  %1727 = add i64 %1726, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 9
  store i64 %1729, i64* %PC
  %1730 = bitcast i8* %1724 to <2 x float>*
  %1731 = load <2 x float>, <2 x float>* %1730, align 1
  %1732 = getelementptr inbounds i8, i8* %1724, i64 8
  %1733 = bitcast i8* %1732 to <2 x i32>*
  %1734 = load <2 x i32>, <2 x i32>* %1733, align 1
  %1735 = inttoptr i64 %1727 to float*
  %1736 = load float, float* %1735
  %1737 = extractelement <2 x float> %1731, i32 0
  %1738 = fadd float %1737, %1736
  %1739 = bitcast i8* %1723 to float*
  store float %1738, float* %1739, align 1, !tbaa !2452
  %1740 = bitcast <2 x float> %1731 to <2 x i32>
  %1741 = extractelement <2 x i32> %1740, i32 1
  %1742 = getelementptr inbounds i8, i8* %1723, i64 4
  %1743 = bitcast i8* %1742 to i32*
  store i32 %1741, i32* %1743, align 1, !tbaa !2452
  %1744 = extractelement <2 x i32> %1734, i32 0
  %1745 = getelementptr inbounds i8, i8* %1723, i64 8
  %1746 = bitcast i8* %1745 to i32*
  store i32 %1744, i32* %1746, align 1, !tbaa !2452
  %1747 = extractelement <2 x i32> %1734, i32 1
  %1748 = getelementptr inbounds i8, i8* %1723, i64 12
  %1749 = bitcast i8* %1748 to i32*
  store i32 %1747, i32* %1749, align 1, !tbaa !2452
  %1750 = load i64, i64* %RBP
  %1751 = sub i64 %1750, 16
  %1752 = bitcast %union.vec128_t* %XMM0 to i8*
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 5
  store i64 %1754, i64* %PC
  %1755 = bitcast i8* %1752 to <2 x float>*
  %1756 = load <2 x float>, <2 x float>* %1755, align 1
  %1757 = extractelement <2 x float> %1756, i32 0
  %1758 = inttoptr i64 %1751 to float*
  store float %1757, float* %1758
  %1759 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1760 = load i64, i64* %RBP
  %1761 = sub i64 %1760, 16
  %1762 = load i64, i64* %PC
  %1763 = add i64 %1762, 5
  store i64 %1763, i64* %PC
  %1764 = inttoptr i64 %1761 to float*
  %1765 = load float, float* %1764
  %1766 = bitcast i8* %1759 to float*
  store float %1765, float* %1766, align 1, !tbaa !2452
  %1767 = getelementptr inbounds i8, i8* %1759, i64 4
  %1768 = bitcast i8* %1767 to float*
  store float 0.000000e+00, float* %1768, align 1, !tbaa !2452
  %1769 = getelementptr inbounds i8, i8* %1759, i64 8
  %1770 = bitcast i8* %1769 to float*
  store float 0.000000e+00, float* %1770, align 1, !tbaa !2452
  %1771 = getelementptr inbounds i8, i8* %1759, i64 12
  %1772 = bitcast i8* %1771 to float*
  store float 0.000000e+00, float* %1772, align 1, !tbaa !2452
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 8
  store i64 %1774, i64* %PC
  %1775 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1776 = sext i32 %1775 to i64
  store i64 %1776, i64* %RAX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RAX
  %1778 = mul i64 %1777, 4
  %1779 = add i64 %1778, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1780 = bitcast %union.vec128_t* %XMM0 to i8*
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 9
  store i64 %1782, i64* %PC
  %1783 = bitcast i8* %1780 to <2 x float>*
  %1784 = load <2 x float>, <2 x float>* %1783, align 1
  %1785 = extractelement <2 x float> %1784, i32 0
  %1786 = inttoptr i64 %1779 to float*
  store float %1785, float* %1786
  %1787 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1788 = load i64, i64* %RBP
  %1789 = sub i64 %1788, 12
  %1790 = load i64, i64* %PC
  %1791 = add i64 %1790, 5
  store i64 %1791, i64* %PC
  %1792 = inttoptr i64 %1789 to float*
  %1793 = load float, float* %1792
  %1794 = fpext float %1793 to double
  %1795 = bitcast i8* %1787 to double*
  store double %1794, double* %1795, align 1, !tbaa !2454
  %1796 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1797 = load i64, i64* %RBP
  %1798 = sub i64 %1797, 16
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 5
  store i64 %1800, i64* %PC
  %1801 = inttoptr i64 %1798 to float*
  %1802 = load float, float* %1801
  %1803 = fpext float %1802 to double
  %1804 = bitcast i8* %1796 to double*
  store double %1803, double* %1804, align 1, !tbaa !2454
  %1805 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1806 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1807 = bitcast %union.vec128_t* %XMM3 to i8*
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = bitcast i8* %1806 to double*
  %1811 = load double, double* %1810, align 1
  %1812 = getelementptr inbounds i8, i8* %1806, i64 8
  %1813 = bitcast i8* %1812 to i64*
  %1814 = load i64, i64* %1813, align 1
  %1815 = bitcast i8* %1807 to double*
  %1816 = load double, double* %1815, align 1
  %1817 = fmul double %1811, %1816
  %1818 = bitcast i8* %1805 to double*
  store double %1817, double* %1818, align 1, !tbaa !2454
  %1819 = getelementptr inbounds i8, i8* %1805, i64 8
  %1820 = bitcast i8* %1819 to i64*
  store i64 %1814, i64* %1820, align 1, !tbaa !2454
  %1821 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1822 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1823 = bitcast %union.vec128_t* %XMM2 to i8*
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 4
  store i64 %1825, i64* %PC
  %1826 = bitcast i8* %1822 to double*
  %1827 = load double, double* %1826, align 1
  %1828 = getelementptr inbounds i8, i8* %1822, i64 8
  %1829 = bitcast i8* %1828 to i64*
  %1830 = load i64, i64* %1829, align 1
  %1831 = bitcast i8* %1823 to double*
  %1832 = load double, double* %1831, align 1
  %1833 = fdiv double %1827, %1832
  %1834 = bitcast i8* %1821 to double*
  store double %1833, double* %1834, align 1, !tbaa !2454
  %1835 = getelementptr inbounds i8, i8* %1821, i64 8
  %1836 = bitcast i8* %1835 to i64*
  store i64 %1830, i64* %1836, align 1, !tbaa !2454
  %1837 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1838 = bitcast %union.vec128_t* %XMM0 to i8*
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 4
  store i64 %1840, i64* %PC
  %1841 = bitcast i8* %1837 to <2 x i32>*
  %1842 = load <2 x i32>, <2 x i32>* %1841, align 1
  %1843 = getelementptr inbounds i8, i8* %1837, i64 8
  %1844 = bitcast i8* %1843 to <2 x i32>*
  %1845 = load <2 x i32>, <2 x i32>* %1844, align 1
  %1846 = bitcast i8* %1838 to double*
  %1847 = load double, double* %1846, align 1
  %1848 = fptrunc double %1847 to float
  %1849 = bitcast i8* %1837 to float*
  store float %1848, float* %1849, align 1, !tbaa !2452
  %1850 = extractelement <2 x i32> %1842, i32 1
  %1851 = getelementptr inbounds i8, i8* %1837, i64 4
  %1852 = bitcast i8* %1851 to i32*
  store i32 %1850, i32* %1852, align 1, !tbaa !2452
  %1853 = extractelement <2 x i32> %1845, i32 0
  %1854 = bitcast i8* %1843 to i32*
  store i32 %1853, i32* %1854, align 1, !tbaa !2452
  %1855 = extractelement <2 x i32> %1845, i32 1
  %1856 = getelementptr inbounds i8, i8* %1837, i64 12
  %1857 = bitcast i8* %1856 to i32*
  store i32 %1855, i32* %1857, align 1, !tbaa !2452
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 8
  store i64 %1859, i64* %PC
  %1860 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1861 = sext i32 %1860 to i64
  store i64 %1861, i64* %RAX, align 8, !tbaa !2428
  %1862 = load i64, i64* %RAX
  %1863 = mul i64 %1862, 4
  %1864 = add i64 %1863, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1865 = bitcast %union.vec128_t* %XMM0 to i8*
  %1866 = load i64, i64* %PC
  %1867 = add i64 %1866, 9
  store i64 %1867, i64* %PC
  %1868 = bitcast i8* %1865 to <2 x float>*
  %1869 = load <2 x float>, <2 x float>* %1868, align 1
  %1870 = extractelement <2 x float> %1869, i32 0
  %1871 = inttoptr i64 %1864 to float*
  store float %1870, float* %1871
  %1872 = load i64, i64* %PC
  %1873 = add i64 %1872, 8
  store i64 %1873, i64* %PC
  %1874 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1875 = sext i32 %1874 to i64
  store i64 %1875, i64* %RAX, align 8, !tbaa !2428
  %1876 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1877 = load i64, i64* %RAX
  %1878 = mul i64 %1877, 4
  %1879 = add i64 %1878, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1880 = load i64, i64* %PC
  %1881 = add i64 %1880, 9
  store i64 %1881, i64* %PC
  %1882 = inttoptr i64 %1879 to float*
  %1883 = load float, float* %1882
  %1884 = fpext float %1883 to double
  %1885 = bitcast i8* %1876 to double*
  store double %1884, double* %1885, align 1, !tbaa !2454
  %1886 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1887 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1888 = bitcast %union.vec128_t* %XMM0 to i8*
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 4
  store i64 %1890, i64* %PC
  %1891 = bitcast i8* %1887 to double*
  %1892 = load double, double* %1891, align 1
  %1893 = getelementptr inbounds i8, i8* %1887, i64 8
  %1894 = bitcast i8* %1893 to i64*
  %1895 = load i64, i64* %1894, align 1
  %1896 = bitcast i8* %1888 to double*
  %1897 = load double, double* %1896, align 1
  %1898 = fdiv double %1892, %1897
  %1899 = bitcast i8* %1886 to double*
  store double %1898, double* %1899, align 1, !tbaa !2454
  %1900 = getelementptr inbounds i8, i8* %1886, i64 8
  %1901 = bitcast i8* %1900 to i64*
  store i64 %1895, i64* %1901, align 1, !tbaa !2454
  %1902 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1903 = bitcast %union.vec128_t* %XMM1 to i8*
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 4
  store i64 %1905, i64* %PC
  %1906 = bitcast i8* %1902 to <2 x i32>*
  %1907 = load <2 x i32>, <2 x i32>* %1906, align 1
  %1908 = getelementptr inbounds i8, i8* %1902, i64 8
  %1909 = bitcast i8* %1908 to <2 x i32>*
  %1910 = load <2 x i32>, <2 x i32>* %1909, align 1
  %1911 = bitcast i8* %1903 to double*
  %1912 = load double, double* %1911, align 1
  %1913 = fptrunc double %1912 to float
  %1914 = bitcast i8* %1902 to float*
  store float %1913, float* %1914, align 1, !tbaa !2452
  %1915 = extractelement <2 x i32> %1907, i32 1
  %1916 = getelementptr inbounds i8, i8* %1902, i64 4
  %1917 = bitcast i8* %1916 to i32*
  store i32 %1915, i32* %1917, align 1, !tbaa !2452
  %1918 = extractelement <2 x i32> %1910, i32 0
  %1919 = bitcast i8* %1908 to i32*
  store i32 %1918, i32* %1919, align 1, !tbaa !2452
  %1920 = extractelement <2 x i32> %1910, i32 1
  %1921 = getelementptr inbounds i8, i8* %1902, i64 12
  %1922 = bitcast i8* %1921 to i32*
  store i32 %1920, i32* %1922, align 1, !tbaa !2452
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 8
  store i64 %1924, i64* %PC
  %1925 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1926 = sext i32 %1925 to i64
  store i64 %1926, i64* %RAX, align 8, !tbaa !2428
  %1927 = load i64, i64* %RAX
  %1928 = mul i64 %1927, 4
  %1929 = add i64 %1928, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1930 = bitcast %union.vec128_t* %XMM0 to i8*
  %1931 = load i64, i64* %PC
  %1932 = add i64 %1931, 9
  store i64 %1932, i64* %PC
  %1933 = bitcast i8* %1930 to <2 x float>*
  %1934 = load <2 x float>, <2 x float>* %1933, align 1
  %1935 = extractelement <2 x float> %1934, i32 0
  %1936 = inttoptr i64 %1929 to float*
  store float %1935, float* %1936
  %1937 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1938 = load i64, i64* %RBP
  %1939 = sub i64 %1938, 16
  %1940 = load i64, i64* %PC
  %1941 = add i64 %1940, 5
  store i64 %1941, i64* %PC
  %1942 = inttoptr i64 %1939 to float*
  %1943 = load float, float* %1942
  %1944 = bitcast i8* %1937 to float*
  store float %1943, float* %1944, align 1, !tbaa !2452
  %1945 = getelementptr inbounds i8, i8* %1937, i64 4
  %1946 = bitcast i8* %1945 to float*
  store float 0.000000e+00, float* %1946, align 1, !tbaa !2452
  %1947 = getelementptr inbounds i8, i8* %1937, i64 8
  %1948 = bitcast i8* %1947 to float*
  store float 0.000000e+00, float* %1948, align 1, !tbaa !2452
  %1949 = getelementptr inbounds i8, i8* %1937, i64 12
  %1950 = bitcast i8* %1949 to float*
  store float 0.000000e+00, float* %1950, align 1, !tbaa !2452
  %1951 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1952 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1953 = load i64, i64* %RBP
  %1954 = sub i64 %1953, 8
  %1955 = load i64, i64* %PC
  %1956 = add i64 %1955, 5
  store i64 %1956, i64* %PC
  %1957 = bitcast i8* %1952 to <2 x float>*
  %1958 = load <2 x float>, <2 x float>* %1957, align 1
  %1959 = getelementptr inbounds i8, i8* %1952, i64 8
  %1960 = bitcast i8* %1959 to <2 x i32>*
  %1961 = load <2 x i32>, <2 x i32>* %1960, align 1
  %1962 = inttoptr i64 %1954 to float*
  %1963 = load float, float* %1962
  %1964 = extractelement <2 x float> %1958, i32 0
  %1965 = fdiv float %1964, %1963
  %1966 = bitcast i8* %1951 to float*
  store float %1965, float* %1966, align 1, !tbaa !2452
  %1967 = bitcast <2 x float> %1958 to <2 x i32>
  %1968 = extractelement <2 x i32> %1967, i32 1
  %1969 = getelementptr inbounds i8, i8* %1951, i64 4
  %1970 = bitcast i8* %1969 to i32*
  store i32 %1968, i32* %1970, align 1, !tbaa !2452
  %1971 = extractelement <2 x i32> %1961, i32 0
  %1972 = getelementptr inbounds i8, i8* %1951, i64 8
  %1973 = bitcast i8* %1972 to i32*
  store i32 %1971, i32* %1973, align 1, !tbaa !2452
  %1974 = extractelement <2 x i32> %1961, i32 1
  %1975 = getelementptr inbounds i8, i8* %1951, i64 12
  %1976 = bitcast i8* %1975 to i32*
  store i32 %1974, i32* %1976, align 1, !tbaa !2452
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 8
  store i64 %1978, i64* %PC
  %1979 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %1980 = sext i32 %1979 to i64
  store i64 %1980, i64* %RAX, align 8, !tbaa !2428
  %1981 = load i64, i64* %RAX
  %1982 = mul i64 %1981, 4
  %1983 = add i64 %1982, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1984 = bitcast %union.vec128_t* %XMM0 to i8*
  %1985 = load i64, i64* %PC
  %1986 = add i64 %1985, 9
  store i64 %1986, i64* %PC
  %1987 = bitcast i8* %1984 to <2 x float>*
  %1988 = load <2 x float>, <2 x float>* %1987, align 1
  %1989 = extractelement <2 x float> %1988, i32 0
  %1990 = inttoptr i64 %1983 to float*
  store float %1989, float* %1990
  %1991 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1992 = load i64, i64* %PC
  %1993 = add i64 %1992, 9
  store i64 %1993, i64* %PC
  %1994 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %1995 = bitcast i8* %1991 to float*
  store float %1994, float* %1995, align 1, !tbaa !2452
  %1996 = getelementptr inbounds i8, i8* %1991, i64 4
  %1997 = bitcast i8* %1996 to float*
  store float 0.000000e+00, float* %1997, align 1, !tbaa !2452
  %1998 = getelementptr inbounds i8, i8* %1991, i64 8
  %1999 = bitcast i8* %1998 to float*
  store float 0.000000e+00, float* %1999, align 1, !tbaa !2452
  %2000 = getelementptr inbounds i8, i8* %1991, i64 12
  %2001 = bitcast i8* %2000 to float*
  store float 0.000000e+00, float* %2001, align 1, !tbaa !2452
  %2002 = load i64, i64* %PC
  %2003 = add i64 %2002, 8
  store i64 %2003, i64* %PC
  %2004 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2005 = sext i32 %2004 to i64
  store i64 %2005, i64* %RAX, align 8, !tbaa !2428
  %2006 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2008 = load i64, i64* %RAX
  %2009 = mul i64 %2008, 4
  %2010 = add i64 %2009, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 9
  store i64 %2012, i64* %PC
  %2013 = bitcast i8* %2007 to <2 x float>*
  %2014 = load <2 x float>, <2 x float>* %2013, align 1
  %2015 = getelementptr inbounds i8, i8* %2007, i64 8
  %2016 = bitcast i8* %2015 to <2 x i32>*
  %2017 = load <2 x i32>, <2 x i32>* %2016, align 1
  %2018 = inttoptr i64 %2010 to float*
  %2019 = load float, float* %2018
  %2020 = extractelement <2 x float> %2014, i32 0
  %2021 = fadd float %2020, %2019
  %2022 = bitcast i8* %2006 to float*
  store float %2021, float* %2022, align 1, !tbaa !2452
  %2023 = bitcast <2 x float> %2014 to <2 x i32>
  %2024 = extractelement <2 x i32> %2023, i32 1
  %2025 = getelementptr inbounds i8, i8* %2006, i64 4
  %2026 = bitcast i8* %2025 to i32*
  store i32 %2024, i32* %2026, align 1, !tbaa !2452
  %2027 = extractelement <2 x i32> %2017, i32 0
  %2028 = getelementptr inbounds i8, i8* %2006, i64 8
  %2029 = bitcast i8* %2028 to i32*
  store i32 %2027, i32* %2029, align 1, !tbaa !2452
  %2030 = extractelement <2 x i32> %2017, i32 1
  %2031 = getelementptr inbounds i8, i8* %2006, i64 12
  %2032 = bitcast i8* %2031 to i32*
  store i32 %2030, i32* %2032, align 1, !tbaa !2452
  %2033 = bitcast %union.vec128_t* %XMM0 to i8*
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 9
  store i64 %2035, i64* %PC
  %2036 = bitcast i8* %2033 to <2 x float>*
  %2037 = load <2 x float>, <2 x float>* %2036, align 1
  %2038 = extractelement <2 x float> %2037, i32 0
  store float %2038, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %2039 = load i64, i64* %PC
  %2040 = add i64 %2039, 7
  store i64 %2040, i64* %PC
  %2041 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2042 = zext i32 %2041 to i64
  store i64 %2042, i64* %RDI, align 8, !tbaa !2428
  %2043 = load i64, i64* %PC
  %2044 = add i64 %2043, 4479
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 5
  %2047 = load i64, i64* %PC
  %2048 = add i64 %2047, 5
  store i64 %2048, i64* %PC
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2050 = load i64, i64* %2049, align 8, !tbaa !2428
  %2051 = add i64 %2050, -8
  %2052 = inttoptr i64 %2051 to i64*
  store i64 %2046, i64* %2052
  store i64 %2051, i64* %2049, align 8, !tbaa !2428
  %2053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2044, i64* %2053, align 8, !tbaa !2428
  %2054 = load i64, i64* %PC
  %2055 = call %struct.Memory* @sub_402860_print_time(%struct.State* %0, i64 %2054, %struct.Memory* %1600)
  %2056 = load i64, i64* %PC
  %2057 = add i64 %2056, 7
  store i64 %2057, i64* %PC
  %2058 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2059 = zext i32 %2058 to i64
  store i64 %2059, i64* %RAX, align 8, !tbaa !2428
  %2060 = load i64, i64* %RAX
  %2061 = load i64, i64* %PC
  %2062 = add i64 %2061, 3
  store i64 %2062, i64* %PC
  %2063 = trunc i64 %2060 to i32
  %2064 = add i32 1, %2063
  %2065 = zext i32 %2064 to i64
  store i64 %2065, i64* %RAX, align 8, !tbaa !2428
  %2066 = icmp ult i32 %2064, %2063
  %2067 = icmp ult i32 %2064, 1
  %2068 = or i1 %2066, %2067
  %2069 = zext i1 %2068 to i8
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2069, i8* %2070, align 1, !tbaa !2432
  %2071 = and i32 %2064, 255
  %2072 = call i32 @llvm.ctpop.i32(i32 %2071) #16
  %2073 = trunc i32 %2072 to i8
  %2074 = and i8 %2073, 1
  %2075 = xor i8 %2074, 1
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2075, i8* %2076, align 1, !tbaa !2446
  %2077 = xor i64 1, %2060
  %2078 = trunc i64 %2077 to i32
  %2079 = xor i32 %2078, %2064
  %2080 = lshr i32 %2079, 4
  %2081 = trunc i32 %2080 to i8
  %2082 = and i8 %2081, 1
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2082, i8* %2083, align 1, !tbaa !2447
  %2084 = icmp eq i32 %2064, 0
  %2085 = zext i1 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2085, i8* %2086, align 1, !tbaa !2448
  %2087 = lshr i32 %2064, 31
  %2088 = trunc i32 %2087 to i8
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2088, i8* %2089, align 1, !tbaa !2449
  %2090 = lshr i32 %2063, 31
  %2091 = xor i32 %2087, %2090
  %2092 = add nuw nsw i32 %2091, %2087
  %2093 = icmp eq i32 %2092, 2
  %2094 = zext i1 %2093 to i8
  %2095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2094, i8* %2095, align 1, !tbaa !2450
  %2096 = load i32, i32* %EAX
  %2097 = zext i32 %2096 to i64
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 7
  store i64 %2099, i64* %PC
  store i32 %2096, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2100 = load i64, i64* %PC
  %2101 = sub i64 %2100, 618
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 5
  store i64 %2103, i64* %PC
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2101, i64* %2104, align 8, !tbaa !2428
  br label %block_40148d

block_40149b:                                     ; preds = %block_40148d
  %2105 = sub i64 %6738, 3771
  %2106 = load i64, i64* %PC
  %2107 = add i64 %2106, 5
  %2108 = load i64, i64* %PC
  %2109 = add i64 %2108, 5
  store i64 %2109, i64* %PC
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2111 = load i64, i64* %2110, align 8, !tbaa !2428
  %2112 = add i64 %2111, -8
  %2113 = inttoptr i64 %2112 to i64*
  store i64 %2107, i64* %2113
  store i64 %2112, i64* %2110, align 8, !tbaa !2428
  %2114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2105, i64* %2114, align 8, !tbaa !2428
  %2115 = load i64, i64* %PC
  %2116 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %2115, %struct.Memory* %MEMORY.16)
  %2117 = load i64, i64* %RBP
  %2118 = sub i64 %2117, 40
  %2119 = bitcast %union.vec128_t* %XMM0 to i8*
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 5
  store i64 %2121, i64* %PC
  %2122 = bitcast i8* %2119 to <2 x float>*
  %2123 = load <2 x float>, <2 x float>* %2122, align 1
  %2124 = extractelement <2 x float> %2123, i32 0
  %2125 = inttoptr i64 %2118 to float*
  store float %2124, float* %2125
  %2126 = load i64, i64* %PC
  %2127 = add i64 %2126, 11
  store i64 %2127, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_4014b0

block_400fb8:                                     ; preds = %block_400f9f
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 11
  store i64 %2129, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  br label %block_400fc3

block_4008ef:                                     ; preds = %block_4008db
  %2130 = add i64 %1522, 8
  store i64 %2130, i64* %PC
  %2131 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2132 = sext i32 %2131 to i64
  store i64 %2132, i64* %RAX, align 8, !tbaa !2428
  %2133 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2134 = load i64, i64* %RAX
  %2135 = mul i64 %2134, 4
  %2136 = add i64 %2135, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2137 = load i64, i64* %PC
  %2138 = add i64 %2137, 9
  store i64 %2138, i64* %PC
  %2139 = inttoptr i64 %2136 to float*
  %2140 = load float, float* %2139
  %2141 = bitcast i8* %2133 to float*
  store float %2140, float* %2141, align 1, !tbaa !2452
  %2142 = getelementptr inbounds i8, i8* %2133, i64 4
  %2143 = bitcast i8* %2142 to float*
  store float 0.000000e+00, float* %2143, align 1, !tbaa !2452
  %2144 = getelementptr inbounds i8, i8* %2133, i64 8
  %2145 = bitcast i8* %2144 to float*
  store float 0.000000e+00, float* %2145, align 1, !tbaa !2452
  %2146 = getelementptr inbounds i8, i8* %2133, i64 12
  %2147 = bitcast i8* %2146 to float*
  store float 0.000000e+00, float* %2147, align 1, !tbaa !2452
  %2148 = load i64, i64* %PC
  %2149 = add i64 %2148, 8
  store i64 %2149, i64* %PC
  %2150 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2151 = sext i32 %2150 to i64
  store i64 %2151, i64* %RAX, align 8, !tbaa !2428
  %2152 = load i64, i64* %RAX
  %2153 = mul i64 %2152, 4
  %2154 = add i64 %2153, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2155 = bitcast %union.vec128_t* %XMM0 to i8*
  %2156 = load i64, i64* %PC
  %2157 = add i64 %2156, 9
  store i64 %2157, i64* %PC
  %2158 = bitcast i8* %2155 to <2 x float>*
  %2159 = load <2 x float>, <2 x float>* %2158, align 1
  %2160 = extractelement <2 x float> %2159, i32 0
  %2161 = inttoptr i64 %2154 to float*
  store float %2160, float* %2161
  %2162 = load i64, i64* %PC
  %2163 = add i64 %2162, 7
  store i64 %2163, i64* %PC
  %2164 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2165 = zext i32 %2164 to i64
  store i64 %2165, i64* %RAX, align 8, !tbaa !2428
  %2166 = load i64, i64* %RAX
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 3
  store i64 %2168, i64* %PC
  %2169 = trunc i64 %2166 to i32
  %2170 = add i32 1, %2169
  %2171 = zext i32 %2170 to i64
  store i64 %2171, i64* %RAX, align 8, !tbaa !2428
  %2172 = icmp ult i32 %2170, %2169
  %2173 = icmp ult i32 %2170, 1
  %2174 = or i1 %2172, %2173
  %2175 = zext i1 %2174 to i8
  %2176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2175, i8* %2176, align 1, !tbaa !2432
  %2177 = and i32 %2170, 255
  %2178 = call i32 @llvm.ctpop.i32(i32 %2177) #16
  %2179 = trunc i32 %2178 to i8
  %2180 = and i8 %2179, 1
  %2181 = xor i8 %2180, 1
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2181, i8* %2182, align 1, !tbaa !2446
  %2183 = xor i64 1, %2166
  %2184 = trunc i64 %2183 to i32
  %2185 = xor i32 %2184, %2170
  %2186 = lshr i32 %2185, 4
  %2187 = trunc i32 %2186 to i8
  %2188 = and i8 %2187, 1
  %2189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2188, i8* %2189, align 1, !tbaa !2447
  %2190 = icmp eq i32 %2170, 0
  %2191 = zext i1 %2190 to i8
  %2192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2191, i8* %2192, align 1, !tbaa !2448
  %2193 = lshr i32 %2170, 31
  %2194 = trunc i32 %2193 to i8
  %2195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2194, i8* %2195, align 1, !tbaa !2449
  %2196 = lshr i32 %2169, 31
  %2197 = xor i32 %2193, %2196
  %2198 = add nuw nsw i32 %2197, %2193
  %2199 = icmp eq i32 %2198, 2
  %2200 = zext i1 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2200, i8* %2201, align 1, !tbaa !2450
  %2202 = load i32, i32* %EAX
  %2203 = zext i32 %2202 to i64
  %2204 = load i64, i64* %PC
  %2205 = add i64 %2204, 7
  store i64 %2205, i64* %PC
  store i32 %2202, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2206 = load i64, i64* %PC
  %2207 = sub i64 %2206, 71
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 5
  store i64 %2209, i64* %PC
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2207, i64* %2210, align 8, !tbaa !2428
  br label %block_4008db

block_4014b0:                                     ; preds = %block_4014c4, %block_40149b
  %MEMORY.4 = phi %struct.Memory* [ %2116, %block_40149b ], [ %2715, %block_4014c4 ]
  %2211 = load i64, i64* %PC
  %2212 = add i64 %2211, 7
  store i64 %2212, i64* %PC
  %2213 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2214 = zext i32 %2213 to i64
  store i64 %2214, i64* %RAX, align 8, !tbaa !2428
  %2215 = load i32, i32* %EAX
  %2216 = zext i32 %2215 to i64
  %2217 = load i64, i64* %PC
  %2218 = add i64 %2217, 7
  store i64 %2218, i64* %PC
  %2219 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %2220 = sub i32 %2215, %2219
  %2221 = icmp ult i32 %2215, %2219
  %2222 = zext i1 %2221 to i8
  %2223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2222, i8* %2223, align 1, !tbaa !2432
  %2224 = and i32 %2220, 255
  %2225 = call i32 @llvm.ctpop.i32(i32 %2224) #16
  %2226 = trunc i32 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = xor i8 %2227, 1
  %2229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2228, i8* %2229, align 1, !tbaa !2446
  %2230 = xor i32 %2219, %2215
  %2231 = xor i32 %2230, %2220
  %2232 = lshr i32 %2231, 4
  %2233 = trunc i32 %2232 to i8
  %2234 = and i8 %2233, 1
  %2235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2234, i8* %2235, align 1, !tbaa !2447
  %2236 = icmp eq i32 %2220, 0
  %2237 = zext i1 %2236 to i8
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2237, i8* %2238, align 1, !tbaa !2448
  %2239 = lshr i32 %2220, 31
  %2240 = trunc i32 %2239 to i8
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2240, i8* %2241, align 1, !tbaa !2449
  %2242 = lshr i32 %2215, 31
  %2243 = lshr i32 %2219, 31
  %2244 = xor i32 %2243, %2242
  %2245 = xor i32 %2239, %2242
  %2246 = add nuw nsw i32 %2245, %2244
  %2247 = icmp eq i32 %2246, 2
  %2248 = zext i1 %2247 to i8
  %2249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2248, i8* %2249, align 1, !tbaa !2450
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 120
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 6
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 6
  store i64 %2255, i64* %PC
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2257 = load i8, i8* %2256, align 1, !tbaa !2449
  %2258 = icmp ne i8 %2257, 0
  %2259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2260 = load i8, i8* %2259, align 1, !tbaa !2450
  %2261 = icmp ne i8 %2260, 0
  %2262 = xor i1 %2258, %2261
  %2263 = xor i1 %2262, true
  %2264 = zext i1 %2263 to i8
  store i8 %2264, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2266 = select i1 %2262, i64 %2253, i64 %2251
  store i64 %2266, i64* %2265, align 8, !tbaa !2428
  %2267 = load i8, i8* %BRANCH_TAKEN
  %2268 = icmp eq i8 %2267, 1
  %2269 = load i64, i64* %PC
  br i1 %2268, label %block_401536, label %block_4014c4

block_400aca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 8
  store i64 %2271, i64* %PC
  %2272 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2273 = sext i32 %2272 to i64
  store i64 %2273, i64* %RAX, align 8, !tbaa !2428
  %2274 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2275 = load i64, i64* %RAX
  %2276 = mul i64 %2275, 4
  %2277 = add i64 %2276, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 9
  store i64 %2279, i64* %PC
  %2280 = inttoptr i64 %2277 to float*
  %2281 = load float, float* %2280
  %2282 = fpext float %2281 to double
  %2283 = bitcast i8* %2274 to double*
  store double %2282, double* %2283, align 1, !tbaa !2454
  %2284 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 7
  store i64 %2286, i64* %PC
  %2287 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %2288 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %2289 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %2290 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %2291 = bitcast i8* %2284 to float*
  store float %2287, float* %2291, align 1, !tbaa !2452
  %2292 = getelementptr inbounds i8, i8* %2284, i64 4
  %2293 = bitcast i8* %2292 to float*
  store float %2288, float* %2293, align 1, !tbaa !2452
  %2294 = getelementptr inbounds i8, i8* %2284, i64 8
  %2295 = bitcast i8* %2294 to float*
  store float %2289, float* %2295, align 1, !tbaa !2452
  %2296 = getelementptr inbounds i8, i8* %2284, i64 12
  %2297 = bitcast i8* %2296 to float*
  store float %2290, float* %2297, align 1, !tbaa !2452
  %2298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2300 = bitcast %union.vec128_t* %XMM1 to i8*
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 4
  store i64 %2302, i64* %PC
  %2303 = bitcast i8* %2299 to i64*
  %2304 = load i64, i64* %2303, align 1
  %2305 = getelementptr inbounds i8, i8* %2299, i64 8
  %2306 = bitcast i8* %2305 to i64*
  %2307 = load i64, i64* %2306, align 1
  %2308 = bitcast i8* %2300 to i64*
  %2309 = load i64, i64* %2308, align 1
  %2310 = getelementptr inbounds i8, i8* %2300, i64 8
  %2311 = bitcast i8* %2310 to i64*
  %2312 = load i64, i64* %2311, align 1
  %2313 = and i64 %2309, %2304
  %2314 = and i64 %2312, %2307
  %2315 = trunc i64 %2313 to i32
  %2316 = lshr i64 %2313, 32
  %2317 = trunc i64 %2316 to i32
  %2318 = bitcast i8* %2298 to i32*
  store i32 %2315, i32* %2318, align 1, !tbaa !2456
  %2319 = getelementptr inbounds i8, i8* %2298, i64 4
  %2320 = bitcast i8* %2319 to i32*
  store i32 %2317, i32* %2320, align 1, !tbaa !2456
  %2321 = trunc i64 %2314 to i32
  %2322 = getelementptr inbounds i8, i8* %2298, i64 8
  %2323 = bitcast i8* %2322 to i32*
  store i32 %2321, i32* %2323, align 1, !tbaa !2456
  %2324 = lshr i64 %2314, 32
  %2325 = trunc i64 %2324 to i32
  %2326 = getelementptr inbounds i8, i8* %2298, i64 12
  %2327 = bitcast i8* %2326 to i32*
  store i32 %2325, i32* %2327, align 1, !tbaa !2456
  %2328 = load i64, i64* %RBP
  %2329 = sub i64 %2328, 904
  %2330 = bitcast %union.vec128_t* %XMM0 to i8*
  %2331 = load i64, i64* %PC
  %2332 = add i64 %2331, 8
  store i64 %2332, i64* %PC
  %2333 = bitcast i8* %2330 to double*
  %2334 = load double, double* %2333, align 1
  %2335 = inttoptr i64 %2329 to double*
  store double %2334, double* %2335
  br label %block_400aee

block_400dc9:                                     ; preds = %block_400d78
  %2336 = sub i64 %7406, 2025
  %2337 = load i64, i64* %PC
  %2338 = add i64 %2337, 5
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 5
  store i64 %2340, i64* %PC
  %2341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2342 = load i64, i64* %2341, align 8, !tbaa !2428
  %2343 = add i64 %2342, -8
  %2344 = inttoptr i64 %2343 to i64*
  store i64 %2338, i64* %2344
  store i64 %2343, i64* %2341, align 8, !tbaa !2428
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2336, i64* %2345, align 8, !tbaa !2428
  %2346 = load i64, i64* %PC
  %2347 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %2346, %struct.Memory* %MEMORY.19)
  %2348 = load i64, i64* %PC
  %2349 = add i64 %2348, 10
  store i64 %2349, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  %2350 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2351 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2352 = bitcast %union.vec128_t* %XMM1 to i8*
  %2353 = load i64, i64* %PC
  %2354 = add i64 %2353, 3
  store i64 %2354, i64* %PC
  %2355 = bitcast i8* %2351 to i64*
  %2356 = load i64, i64* %2355, align 1
  %2357 = getelementptr inbounds i8, i8* %2351, i64 8
  %2358 = bitcast i8* %2357 to i64*
  %2359 = load i64, i64* %2358, align 1
  %2360 = bitcast i8* %2352 to i64*
  %2361 = load i64, i64* %2360, align 1
  %2362 = getelementptr inbounds i8, i8* %2352, i64 8
  %2363 = bitcast i8* %2362 to i64*
  %2364 = load i64, i64* %2363, align 1
  %2365 = xor i64 %2361, %2356
  %2366 = xor i64 %2364, %2359
  %2367 = trunc i64 %2365 to i32
  %2368 = lshr i64 %2365, 32
  %2369 = trunc i64 %2368 to i32
  %2370 = bitcast i8* %2350 to i32*
  store i32 %2367, i32* %2370, align 1, !tbaa !2456
  %2371 = getelementptr inbounds i8, i8* %2350, i64 4
  %2372 = bitcast i8* %2371 to i32*
  store i32 %2369, i32* %2372, align 1, !tbaa !2456
  %2373 = trunc i64 %2366 to i32
  %2374 = getelementptr inbounds i8, i8* %2350, i64 8
  %2375 = bitcast i8* %2374 to i32*
  store i32 %2373, i32* %2375, align 1, !tbaa !2456
  %2376 = lshr i64 %2366, 32
  %2377 = trunc i64 %2376 to i32
  %2378 = getelementptr inbounds i8, i8* %2350, i64 12
  %2379 = bitcast i8* %2378 to i32*
  store i32 %2377, i32* %2379, align 1, !tbaa !2456
  %2380 = load i64, i64* %RBP
  %2381 = sub i64 %2380, 84
  %2382 = bitcast %union.vec128_t* %XMM0 to i8*
  %2383 = load i64, i64* %PC
  %2384 = add i64 %2383, 5
  store i64 %2384, i64* %PC
  %2385 = bitcast i8* %2382 to <2 x float>*
  %2386 = load <2 x float>, <2 x float>* %2385, align 1
  %2387 = extractelement <2 x float> %2386, i32 0
  %2388 = inttoptr i64 %2381 to float*
  store float %2387, float* %2388
  %2389 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2390 = load i64, i64* %RBP
  %2391 = sub i64 %2390, 84
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 5
  store i64 %2393, i64* %PC
  %2394 = inttoptr i64 %2391 to float*
  %2395 = load float, float* %2394
  %2396 = bitcast i8* %2389 to float*
  store float %2395, float* %2396, align 1, !tbaa !2452
  %2397 = getelementptr inbounds i8, i8* %2389, i64 4
  %2398 = bitcast i8* %2397 to float*
  store float 0.000000e+00, float* %2398, align 1, !tbaa !2452
  %2399 = getelementptr inbounds i8, i8* %2389, i64 8
  %2400 = bitcast i8* %2399 to float*
  store float 0.000000e+00, float* %2400, align 1, !tbaa !2452
  %2401 = getelementptr inbounds i8, i8* %2389, i64 12
  %2402 = bitcast i8* %2401 to float*
  store float 0.000000e+00, float* %2402, align 1, !tbaa !2452
  %2403 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2404 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2405 = load i64, i64* %RBP
  %2406 = sub i64 %2405, 80
  %2407 = load i64, i64* %PC
  %2408 = add i64 %2407, 5
  store i64 %2408, i64* %PC
  %2409 = bitcast i8* %2404 to <2 x float>*
  %2410 = load <2 x float>, <2 x float>* %2409, align 1
  %2411 = getelementptr inbounds i8, i8* %2404, i64 8
  %2412 = bitcast i8* %2411 to <2 x i32>*
  %2413 = load <2 x i32>, <2 x i32>* %2412, align 1
  %2414 = inttoptr i64 %2406 to float*
  %2415 = load float, float* %2414
  %2416 = extractelement <2 x float> %2410, i32 0
  %2417 = fsub float %2416, %2415
  %2418 = bitcast i8* %2403 to float*
  store float %2417, float* %2418, align 1, !tbaa !2452
  %2419 = bitcast <2 x float> %2410 to <2 x i32>
  %2420 = extractelement <2 x i32> %2419, i32 1
  %2421 = getelementptr inbounds i8, i8* %2403, i64 4
  %2422 = bitcast i8* %2421 to i32*
  store i32 %2420, i32* %2422, align 1, !tbaa !2452
  %2423 = extractelement <2 x i32> %2413, i32 0
  %2424 = getelementptr inbounds i8, i8* %2403, i64 8
  %2425 = bitcast i8* %2424 to i32*
  store i32 %2423, i32* %2425, align 1, !tbaa !2452
  %2426 = extractelement <2 x i32> %2413, i32 1
  %2427 = getelementptr inbounds i8, i8* %2403, i64 12
  %2428 = bitcast i8* %2427 to i32*
  store i32 %2426, i32* %2428, align 1, !tbaa !2452
  %2429 = load i64, i64* %RBP
  %2430 = sub i64 %2429, 72
  %2431 = bitcast %union.vec128_t* %XMM0 to i8*
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 5
  store i64 %2433, i64* %PC
  %2434 = bitcast i8* %2431 to <2 x float>*
  %2435 = load <2 x float>, <2 x float>* %2434, align 1
  %2436 = extractelement <2 x float> %2435, i32 0
  %2437 = inttoptr i64 %2430 to float*
  store float %2436, float* %2437
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 8
  store i64 %2439, i64* %PC
  %2440 = load i64, i64* @stderr
  store i64 %2440, i64* %RDI, align 8, !tbaa !2428
  %2441 = load i64, i64* %RBP
  %2442 = sub i64 %2441, 68
  %2443 = load i64, i64* %PC
  %2444 = add i64 %2443, 3
  store i64 %2444, i64* %PC
  %2445 = inttoptr i64 %2442 to i32*
  %2446 = load i32, i32* %2445
  %2447 = zext i32 %2446 to i64
  store i64 %2447, i64* %RDX, align 8, !tbaa !2428
  %2448 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2449 = bitcast %union.vec128_t* %XMM1 to i8*
  %2450 = load i64, i64* %PC
  %2451 = add i64 %2450, 3
  store i64 %2451, i64* %PC
  %2452 = bitcast i8* %2449 to <2 x i32>*
  %2453 = load <2 x i32>, <2 x i32>* %2452, align 1
  %2454 = getelementptr inbounds i8, i8* %2449, i64 8
  %2455 = bitcast i8* %2454 to <2 x i32>*
  %2456 = load <2 x i32>, <2 x i32>* %2455, align 1
  %2457 = extractelement <2 x i32> %2453, i32 0
  %2458 = bitcast i8* %2448 to i32*
  store i32 %2457, i32* %2458, align 1, !tbaa !2452
  %2459 = extractelement <2 x i32> %2453, i32 1
  %2460 = getelementptr inbounds i8, i8* %2448, i64 4
  %2461 = bitcast i8* %2460 to i32*
  store i32 %2459, i32* %2461, align 1, !tbaa !2452
  %2462 = extractelement <2 x i32> %2456, i32 0
  %2463 = getelementptr inbounds i8, i8* %2448, i64 8
  %2464 = bitcast i8* %2463 to i32*
  store i32 %2462, i32* %2464, align 1, !tbaa !2452
  %2465 = extractelement <2 x i32> %2456, i32 1
  %2466 = getelementptr inbounds i8, i8* %2448, i64 12
  %2467 = bitcast i8* %2466 to i32*
  store i32 %2465, i32* %2467, align 1, !tbaa !2452
  %2468 = load i64, i64* %PC
  %2469 = add i64 %2468, 2
  store i64 %2469, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2470 = load i64, i64* %PC
  %2471 = sub i64 %2470, 2335
  %2472 = load i64, i64* %PC
  %2473 = add i64 %2472, 5
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 5
  store i64 %2475, i64* %PC
  %2476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2477 = load i64, i64* %2476, align 8, !tbaa !2428
  %2478 = add i64 %2477, -8
  %2479 = inttoptr i64 %2478 to i64*
  store i64 %2473, i64* %2479
  store i64 %2478, i64* %2476, align 8, !tbaa !2428
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2471, i64* %2480, align 8, !tbaa !2428
  %2481 = load i64, i64* %PC
  %2482 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2481, %struct.Memory* %2347)
  %2483 = load i64, i64* %RBP
  %2484 = sub i64 %2483, 64
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 4
  store i64 %2486, i64* %PC
  %2487 = inttoptr i64 %2484 to i32*
  %2488 = load i32, i32* %2487
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2489, align 1, !tbaa !2432
  %2490 = and i32 %2488, 255
  %2491 = call i32 @llvm.ctpop.i32(i32 %2490) #16
  %2492 = trunc i32 %2491 to i8
  %2493 = and i8 %2492, 1
  %2494 = xor i8 %2493, 1
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2494, i8* %2495, align 1, !tbaa !2446
  %2496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2496, align 1, !tbaa !2447
  %2497 = icmp eq i32 %2488, 0
  %2498 = zext i1 %2497 to i8
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2498, i8* %2499, align 1, !tbaa !2448
  %2500 = lshr i32 %2488, 31
  %2501 = trunc i32 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2501, i8* %2502, align 1, !tbaa !2449
  %2503 = lshr i32 %2488, 31
  %2504 = xor i32 %2500, %2503
  %2505 = add nuw nsw i32 %2504, %2503
  %2506 = icmp eq i32 %2505, 2
  %2507 = zext i1 %2506 to i8
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2507, i8* %2508, align 1, !tbaa !2450
  %2509 = load i64, i64* %RBP
  %2510 = sub i64 %2509, 940
  %2511 = load i32, i32* %EAX
  %2512 = zext i32 %2511 to i64
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 6
  store i64 %2514, i64* %PC
  %2515 = inttoptr i64 %2510 to i32*
  store i32 %2511, i32* %2515
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 15
  %2518 = load i64, i64* %PC
  %2519 = add i64 %2518, 6
  %2520 = load i64, i64* %PC
  %2521 = add i64 %2520, 6
  store i64 %2521, i64* %PC
  %2522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2523 = load i8, i8* %2522, align 1, !tbaa !2449
  %2524 = icmp ne i8 %2523, 0
  %2525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2526 = load i8, i8* %2525, align 1, !tbaa !2450
  %2527 = icmp ne i8 %2526, 0
  %2528 = xor i1 %2524, %2527
  %2529 = xor i1 %2528, true
  %2530 = zext i1 %2529 to i8
  store i8 %2530, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2532 = select i1 %2528, i64 %2519, i64 %2517
  store i64 %2532, i64* %2531, align 8, !tbaa !2428
  %2533 = load i8, i8* %BRANCH_TAKEN
  %2534 = icmp eq i8 %2533, 1
  br i1 %2534, label %block_400e1d, label %block_400e14

block_400ec8:                                     ; preds = %block_400eb4
  %2535 = add i64 %4099, 10
  store i64 %2535, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 10
  store i64 %2537, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2538 = load i64, i64* %RBP
  %2539 = sub i64 %2538, 20
  %2540 = load i64, i64* %PC
  %2541 = add i64 %2540, 4
  store i64 %2541, i64* %PC
  store i64 %2539, i64* %R8, align 8, !tbaa !2428
  %2542 = load i64, i64* %PC
  %2543 = add i64 %2542, 7
  store i64 %2543, i64* %PC
  %2544 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %2545 = zext i32 %2544 to i64
  store i64 %2545, i64* %RSI, align 8, !tbaa !2428
  %2546 = load i64, i64* %PC
  %2547 = add i64 %2546, 7
  store i64 %2547, i64* %PC
  %2548 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2549 = zext i32 %2548 to i64
  store i64 %2549, i64* %RDX, align 8, !tbaa !2428
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 2146
  %2552 = load i64, i64* %PC
  %2553 = add i64 %2552, 5
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 5
  store i64 %2555, i64* %PC
  %2556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2557 = load i64, i64* %2556, align 8, !tbaa !2428
  %2558 = add i64 %2557, -8
  %2559 = inttoptr i64 %2558 to i64*
  store i64 %2553, i64* %2559
  store i64 %2558, i64* %2556, align 8, !tbaa !2428
  %2560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2551, i64* %2560, align 8, !tbaa !2428
  %2561 = load i64, i64* %PC
  %2562 = call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %2561, %struct.Memory* %MEMORY.8)
  %2563 = load i64, i64* %PC
  %2564 = add i64 %2563, 10
  store i64 %2564, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 10
  store i64 %2566, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %2567 = load i64, i64* %PC
  %2568 = add i64 %2567, 10
  store i64 %2568, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2569 = load i64, i64* %PC
  %2570 = add i64 %2569, 7
  store i64 %2570, i64* %PC
  %2571 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %2572 = zext i32 %2571 to i64
  store i64 %2572, i64* %RSI, align 8, !tbaa !2428
  %2573 = load i64, i64* %PC
  %2574 = add i64 %2573, 7
  store i64 %2574, i64* %PC
  %2575 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2576 = zext i32 %2575 to i64
  store i64 %2576, i64* %RDX, align 8, !tbaa !2428
  %2577 = load i64, i64* %PC
  %2578 = add i64 %2577, 2561
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 5
  %2581 = load i64, i64* %PC
  %2582 = add i64 %2581, 5
  store i64 %2582, i64* %PC
  %2583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2584 = load i64, i64* %2583, align 8, !tbaa !2428
  %2585 = add i64 %2584, -8
  %2586 = inttoptr i64 %2585 to i64*
  store i64 %2580, i64* %2586
  store i64 %2585, i64* %2583, align 8, !tbaa !2428
  %2587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2578, i64* %2587, align 8, !tbaa !2428
  %2588 = load i64, i64* %PC
  %2589 = call %struct.Memory* @sub_401920_dgefa(%struct.State* %0, i64 %2588, %struct.Memory* %2562)
  %2590 = load i64, i64* %PC
  %2591 = add i64 %2590, 7
  store i64 %2591, i64* %PC
  %2592 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2593 = zext i32 %2592 to i64
  store i64 %2593, i64* %RAX, align 8, !tbaa !2428
  %2594 = load i64, i64* %RAX
  %2595 = load i64, i64* %PC
  %2596 = add i64 %2595, 3
  store i64 %2596, i64* %PC
  %2597 = trunc i64 %2594 to i32
  %2598 = add i32 1, %2597
  %2599 = zext i32 %2598 to i64
  store i64 %2599, i64* %RAX, align 8, !tbaa !2428
  %2600 = icmp ult i32 %2598, %2597
  %2601 = icmp ult i32 %2598, 1
  %2602 = or i1 %2600, %2601
  %2603 = zext i1 %2602 to i8
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2603, i8* %2604, align 1, !tbaa !2432
  %2605 = and i32 %2598, 255
  %2606 = call i32 @llvm.ctpop.i32(i32 %2605) #16
  %2607 = trunc i32 %2606 to i8
  %2608 = and i8 %2607, 1
  %2609 = xor i8 %2608, 1
  %2610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2609, i8* %2610, align 1, !tbaa !2446
  %2611 = xor i64 1, %2594
  %2612 = trunc i64 %2611 to i32
  %2613 = xor i32 %2612, %2598
  %2614 = lshr i32 %2613, 4
  %2615 = trunc i32 %2614 to i8
  %2616 = and i8 %2615, 1
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2616, i8* %2617, align 1, !tbaa !2447
  %2618 = icmp eq i32 %2598, 0
  %2619 = zext i1 %2618 to i8
  %2620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2619, i8* %2620, align 1, !tbaa !2448
  %2621 = lshr i32 %2598, 31
  %2622 = trunc i32 %2621 to i8
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2622, i8* %2623, align 1, !tbaa !2449
  %2624 = lshr i32 %2597, 31
  %2625 = xor i32 %2621, %2624
  %2626 = add nuw nsw i32 %2625, %2621
  %2627 = icmp eq i32 %2626, 2
  %2628 = zext i1 %2627 to i8
  %2629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2628, i8* %2629, align 1, !tbaa !2450
  %2630 = load i32, i32* %EAX
  %2631 = zext i32 %2630 to i64
  %2632 = load i64, i64* %PC
  %2633 = add i64 %2632, 7
  store i64 %2633, i64* %PC
  store i32 %2630, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2634 = load i64, i64* %PC
  %2635 = sub i64 %2634, 129
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 5
  store i64 %2637, i64* %PC
  %2638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2635, i64* %2638, align 8, !tbaa !2428
  br label %block_400eb4

block_400a46:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %2639 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2640 = load i64, i64* %RBP
  %2641 = sub i64 %2640, 28
  %2642 = load i64, i64* %PC
  %2643 = add i64 %2642, 5
  store i64 %2643, i64* %PC
  %2644 = inttoptr i64 %2641 to float*
  %2645 = load float, float* %2644
  %2646 = fpext float %2645 to double
  %2647 = bitcast i8* %2639 to double*
  store double %2646, double* %2647, align 1, !tbaa !2454
  %2648 = load i64, i64* %RBP
  %2649 = sub i64 %2648, 896
  %2650 = bitcast %union.vec128_t* %XMM0 to i8*
  %2651 = load i64, i64* %PC
  %2652 = add i64 %2651, 8
  store i64 %2652, i64* %PC
  %2653 = bitcast i8* %2650 to double*
  %2654 = load double, double* %2653, align 1
  %2655 = inttoptr i64 %2649 to double*
  store double %2654, double* %2655
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 41
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 5
  store i64 %2659, i64* %PC
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2657, i64* %2660, align 8, !tbaa !2428
  br label %block_400a7c

block_4014c4:                                     ; preds = %block_4014b0
  %2661 = add i64 %2269, 10
  store i64 %2661, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %2662 = load i64, i64* %PC
  %2663 = add i64 %2662, 10
  store i64 %2663, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2664 = load i64, i64* %RBP
  %2665 = sub i64 %2664, 20
  %2666 = load i64, i64* %PC
  %2667 = add i64 %2666, 4
  store i64 %2667, i64* %PC
  store i64 %2665, i64* %R8, align 8, !tbaa !2428
  %2668 = load i64, i64* %PC
  %2669 = add i64 %2668, 7
  store i64 %2669, i64* %PC
  %2670 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %2671 = zext i32 %2670 to i64
  store i64 %2671, i64* %RSI, align 8, !tbaa !2428
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 7
  store i64 %2673, i64* %PC
  %2674 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2675 = zext i32 %2674 to i64
  store i64 %2675, i64* %RDX, align 8, !tbaa !2428
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 614
  %2678 = load i64, i64* %PC
  %2679 = add i64 %2678, 5
  %2680 = load i64, i64* %PC
  %2681 = add i64 %2680, 5
  store i64 %2681, i64* %PC
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2683 = load i64, i64* %2682, align 8, !tbaa !2428
  %2684 = add i64 %2683, -8
  %2685 = inttoptr i64 %2684 to i64*
  store i64 %2679, i64* %2685
  store i64 %2684, i64* %2682, align 8, !tbaa !2428
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2677, i64* %2686, align 8, !tbaa !2428
  %2687 = load i64, i64* %PC
  %2688 = call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %2687, %struct.Memory* %MEMORY.4)
  %2689 = load i64, i64* %PC
  %2690 = add i64 %2689, 10
  store i64 %2690, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %2691 = load i64, i64* %PC
  %2692 = add i64 %2691, 10
  store i64 %2692, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %2693 = load i64, i64* %PC
  %2694 = add i64 %2693, 10
  store i64 %2694, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2695 = load i64, i64* %PC
  %2696 = add i64 %2695, 7
  store i64 %2696, i64* %PC
  %2697 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %2698 = zext i32 %2697 to i64
  store i64 %2698, i64* %RSI, align 8, !tbaa !2428
  %2699 = load i64, i64* %PC
  %2700 = add i64 %2699, 7
  store i64 %2700, i64* %PC
  %2701 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %2702 = zext i32 %2701 to i64
  store i64 %2702, i64* %RDX, align 8, !tbaa !2428
  %2703 = load i64, i64* %PC
  %2704 = add i64 %2703, 1029
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 5
  %2707 = load i64, i64* %PC
  %2708 = add i64 %2707, 5
  store i64 %2708, i64* %PC
  %2709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2710 = load i64, i64* %2709, align 8, !tbaa !2428
  %2711 = add i64 %2710, -8
  %2712 = inttoptr i64 %2711 to i64*
  store i64 %2706, i64* %2712
  store i64 %2711, i64* %2709, align 8, !tbaa !2428
  %2713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2704, i64* %2713, align 8, !tbaa !2428
  %2714 = load i64, i64* %PC
  %2715 = call %struct.Memory* @sub_401920_dgefa(%struct.State* %0, i64 %2714, %struct.Memory* %2688)
  %2716 = load i64, i64* %PC
  %2717 = add i64 %2716, 7
  store i64 %2717, i64* %PC
  %2718 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2719 = zext i32 %2718 to i64
  store i64 %2719, i64* %RAX, align 8, !tbaa !2428
  %2720 = load i64, i64* %RAX
  %2721 = load i64, i64* %PC
  %2722 = add i64 %2721, 3
  store i64 %2722, i64* %PC
  %2723 = trunc i64 %2720 to i32
  %2724 = add i32 1, %2723
  %2725 = zext i32 %2724 to i64
  store i64 %2725, i64* %RAX, align 8, !tbaa !2428
  %2726 = icmp ult i32 %2724, %2723
  %2727 = icmp ult i32 %2724, 1
  %2728 = or i1 %2726, %2727
  %2729 = zext i1 %2728 to i8
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2729, i8* %2730, align 1, !tbaa !2432
  %2731 = and i32 %2724, 255
  %2732 = call i32 @llvm.ctpop.i32(i32 %2731) #16
  %2733 = trunc i32 %2732 to i8
  %2734 = and i8 %2733, 1
  %2735 = xor i8 %2734, 1
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2735, i8* %2736, align 1, !tbaa !2446
  %2737 = xor i64 1, %2720
  %2738 = trunc i64 %2737 to i32
  %2739 = xor i32 %2738, %2724
  %2740 = lshr i32 %2739, 4
  %2741 = trunc i32 %2740 to i8
  %2742 = and i8 %2741, 1
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2742, i8* %2743, align 1, !tbaa !2447
  %2744 = icmp eq i32 %2724, 0
  %2745 = zext i1 %2744 to i8
  %2746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2745, i8* %2746, align 1, !tbaa !2448
  %2747 = lshr i32 %2724, 31
  %2748 = trunc i32 %2747 to i8
  %2749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2748, i8* %2749, align 1, !tbaa !2449
  %2750 = lshr i32 %2723, 31
  %2751 = xor i32 %2747, %2750
  %2752 = add nuw nsw i32 %2751, %2747
  %2753 = icmp eq i32 %2752, 2
  %2754 = zext i1 %2753 to i8
  %2755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2754, i8* %2755, align 1, !tbaa !2450
  %2756 = load i32, i32* %EAX
  %2757 = zext i32 %2756 to i64
  %2758 = load i64, i64* %PC
  %2759 = add i64 %2758, 7
  store i64 %2759, i64* %PC
  store i32 %2756, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %2760 = load i64, i64* %PC
  %2761 = sub i64 %2760, 129
  %2762 = load i64, i64* %PC
  %2763 = add i64 %2762, 5
  store i64 %2763, i64* %PC
  %2764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2761, i64* %2764, align 8, !tbaa !2428
  br label %block_4014b0

block_400fc3:                                     ; preds = %block_400f9f, %block_400fb8
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.15, %block_400f9f ], [ %MEMORY.15, %block_400fb8 ]
  %2765 = load i64, i64* %PC
  %2766 = add i64 %2765, 10
  store i64 %2766, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  %2767 = load i64, i64* %RDX
  %2768 = load i32, i32* %EDX
  %2769 = zext i32 %2768 to i64
  %2770 = load i64, i64* %PC
  %2771 = add i64 %2770, 2
  store i64 %2771, i64* %PC
  %2772 = xor i64 %2769, %2767
  %2773 = trunc i64 %2772 to i32
  %2774 = and i64 %2772, 4294967295
  store i64 %2774, i64* %RDX, align 8, !tbaa !2428
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2775, align 1, !tbaa !2432
  %2776 = and i32 %2773, 255
  %2777 = call i32 @llvm.ctpop.i32(i32 %2776) #16
  %2778 = trunc i32 %2777 to i8
  %2779 = and i8 %2778, 1
  %2780 = xor i8 %2779, 1
  %2781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2780, i8* %2781, align 1, !tbaa !2446
  %2782 = icmp eq i32 %2773, 0
  %2783 = zext i1 %2782 to i8
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2783, i8* %2784, align 1, !tbaa !2448
  %2785 = lshr i32 %2773, 31
  %2786 = trunc i32 %2785 to i8
  %2787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2786, i8* %2787, align 1, !tbaa !2449
  %2788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2788, align 1, !tbaa !2450
  %2789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2789, align 1, !tbaa !2447
  %2790 = load i64, i64* %PC
  %2791 = add i64 %2790, 8
  store i64 %2791, i64* %PC
  %2792 = load i64, i64* @stderr
  store i64 %2792, i64* %RDI, align 8, !tbaa !2428
  %2793 = load i64, i64* %PC
  %2794 = add i64 %2793, 2
  store i64 %2794, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2795 = load i64, i64* %PC
  %2796 = sub i64 %2795, 2809
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 5
  %2799 = load i64, i64* %PC
  %2800 = add i64 %2799, 5
  store i64 %2800, i64* %PC
  %2801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2802 = load i64, i64* %2801, align 8, !tbaa !2428
  %2803 = add i64 %2802, -8
  %2804 = inttoptr i64 %2803 to i64*
  store i64 %2798, i64* %2804
  store i64 %2803, i64* %2801, align 8, !tbaa !2428
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2796, i64* %2805, align 8, !tbaa !2428
  %2806 = load i64, i64* %PC
  %2807 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2806, %struct.Memory* %MEMORY.5)
  %2808 = load i64, i64* %PC
  %2809 = add i64 %2808, 10
  store i64 %2809, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %2810 = load i64, i64* %PC
  %2811 = add i64 %2810, 8
  store i64 %2811, i64* %PC
  %2812 = load i64, i64* @stderr
  store i64 %2812, i64* %RDI, align 8, !tbaa !2428
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 7
  store i64 %2814, i64* %PC
  %2815 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %2816 = zext i32 %2815 to i64
  store i64 %2816, i64* %RDX, align 8, !tbaa !2428
  %2817 = load i64, i64* %RBP
  %2818 = sub i64 %2817, 956
  %2819 = load i32, i32* %EAX
  %2820 = zext i32 %2819 to i64
  %2821 = load i64, i64* %PC
  %2822 = add i64 %2821, 6
  store i64 %2822, i64* %PC
  %2823 = inttoptr i64 %2818 to i32*
  store i32 %2819, i32* %2823
  %2824 = load i64, i64* %PC
  %2825 = add i64 %2824, 2
  store i64 %2825, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2826 = load i64, i64* %PC
  %2827 = sub i64 %2826, 2847
  %2828 = load i64, i64* %PC
  %2829 = add i64 %2828, 5
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 5
  store i64 %2831, i64* %PC
  %2832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2833 = load i64, i64* %2832, align 8, !tbaa !2428
  %2834 = add i64 %2833, -8
  %2835 = inttoptr i64 %2834 to i64*
  store i64 %2829, i64* %2835
  store i64 %2834, i64* %2832, align 8, !tbaa !2428
  %2836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2827, i64* %2836, align 8, !tbaa !2428
  %2837 = load i64, i64* %PC
  %2838 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2837, %struct.Memory* %2807)
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 10
  store i64 %2840, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2841 = load i64, i64* %PC
  %2842 = add i64 %2841, 8
  store i64 %2842, i64* %PC
  %2843 = load i64, i64* @stderr
  store i64 %2843, i64* %RDI, align 8, !tbaa !2428
  %2844 = load i64, i64* %RBP
  %2845 = sub i64 %2844, 960
  %2846 = load i32, i32* %EAX
  %2847 = zext i32 %2846 to i64
  %2848 = load i64, i64* %PC
  %2849 = add i64 %2848, 6
  store i64 %2849, i64* %PC
  %2850 = inttoptr i64 %2845 to i32*
  store i32 %2846, i32* %2850
  %2851 = load i64, i64* %PC
  %2852 = add i64 %2851, 2
  store i64 %2852, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2853 = load i64, i64* %PC
  %2854 = sub i64 %2853, 2878
  %2855 = load i64, i64* %PC
  %2856 = add i64 %2855, 5
  %2857 = load i64, i64* %PC
  %2858 = add i64 %2857, 5
  store i64 %2858, i64* %PC
  %2859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2860 = load i64, i64* %2859, align 8, !tbaa !2428
  %2861 = add i64 %2860, -8
  %2862 = inttoptr i64 %2861 to i64*
  store i64 %2856, i64* %2862
  store i64 %2861, i64* %2859, align 8, !tbaa !2428
  %2863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2854, i64* %2863, align 8, !tbaa !2428
  %2864 = load i64, i64* %PC
  %2865 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2864, %struct.Memory* %2838)
  %2866 = load i64, i64* %PC
  %2867 = add i64 %2866, 10
  store i64 %2867, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2868 = load i64, i64* %PC
  %2869 = add i64 %2868, 8
  store i64 %2869, i64* %PC
  %2870 = load i64, i64* @stderr
  store i64 %2870, i64* %RDI, align 8, !tbaa !2428
  %2871 = load i64, i64* %RBP
  %2872 = sub i64 %2871, 964
  %2873 = load i32, i32* %EAX
  %2874 = zext i32 %2873 to i64
  %2875 = load i64, i64* %PC
  %2876 = add i64 %2875, 6
  store i64 %2876, i64* %PC
  %2877 = inttoptr i64 %2872 to i32*
  store i32 %2873, i32* %2877
  %2878 = load i64, i64* %PC
  %2879 = add i64 %2878, 2
  store i64 %2879, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2880 = load i64, i64* %PC
  %2881 = sub i64 %2880, 2909
  %2882 = load i64, i64* %PC
  %2883 = add i64 %2882, 5
  %2884 = load i64, i64* %PC
  %2885 = add i64 %2884, 5
  store i64 %2885, i64* %PC
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2887 = load i64, i64* %2886, align 8, !tbaa !2428
  %2888 = add i64 %2887, -8
  %2889 = inttoptr i64 %2888 to i64*
  store i64 %2883, i64* %2889
  store i64 %2888, i64* %2886, align 8, !tbaa !2428
  %2890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2881, i64* %2890, align 8, !tbaa !2428
  %2891 = load i64, i64* %PC
  %2892 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %2891, %struct.Memory* %2865)
  %2893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2894 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2895 = bitcast %union.vec128_t* %XMM0 to i8*
  %2896 = load i64, i64* %PC
  %2897 = add i64 %2896, 3
  store i64 %2897, i64* %PC
  %2898 = bitcast i8* %2894 to i64*
  %2899 = load i64, i64* %2898, align 1
  %2900 = getelementptr inbounds i8, i8* %2894, i64 8
  %2901 = bitcast i8* %2900 to i64*
  %2902 = load i64, i64* %2901, align 1
  %2903 = bitcast i8* %2895 to i64*
  %2904 = load i64, i64* %2903, align 1
  %2905 = getelementptr inbounds i8, i8* %2895, i64 8
  %2906 = bitcast i8* %2905 to i64*
  %2907 = load i64, i64* %2906, align 1
  %2908 = xor i64 %2904, %2899
  %2909 = xor i64 %2907, %2902
  %2910 = trunc i64 %2908 to i32
  %2911 = lshr i64 %2908, 32
  %2912 = trunc i64 %2911 to i32
  %2913 = bitcast i8* %2893 to i32*
  store i32 %2910, i32* %2913, align 1, !tbaa !2456
  %2914 = getelementptr inbounds i8, i8* %2893, i64 4
  %2915 = bitcast i8* %2914 to i32*
  store i32 %2912, i32* %2915, align 1, !tbaa !2456
  %2916 = trunc i64 %2909 to i32
  %2917 = getelementptr inbounds i8, i8* %2893, i64 8
  %2918 = bitcast i8* %2917 to i32*
  store i32 %2916, i32* %2918, align 1, !tbaa !2456
  %2919 = lshr i64 %2909, 32
  %2920 = trunc i64 %2919 to i32
  %2921 = getelementptr inbounds i8, i8* %2893, i64 12
  %2922 = bitcast i8* %2921 to i32*
  store i32 %2920, i32* %2922, align 1, !tbaa !2456
  %2923 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 9
  store i64 %2925, i64* %PC
  %2926 = bitcast i8* %2923 to <2 x i32>*
  %2927 = load <2 x i32>, <2 x i32>* %2926, align 1
  %2928 = getelementptr inbounds i8, i8* %2923, i64 8
  %2929 = bitcast i8* %2928 to <2 x i32>*
  %2930 = load <2 x i32>, <2 x i32>* %2929, align 1
  %2931 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %2932 = sitofp i32 %2931 to float
  %2933 = bitcast i8* %2923 to float*
  store float %2932, float* %2933, align 1, !tbaa !2452
  %2934 = extractelement <2 x i32> %2927, i32 1
  %2935 = getelementptr inbounds i8, i8* %2923, i64 4
  %2936 = bitcast i8* %2935 to i32*
  store i32 %2934, i32* %2936, align 1, !tbaa !2452
  %2937 = extractelement <2 x i32> %2930, i32 0
  %2938 = bitcast i8* %2928 to i32*
  store i32 %2937, i32* %2938, align 1, !tbaa !2452
  %2939 = extractelement <2 x i32> %2930, i32 1
  %2940 = getelementptr inbounds i8, i8* %2923, i64 12
  %2941 = bitcast i8* %2940 to i32*
  store i32 %2939, i32* %2941, align 1, !tbaa !2452
  %2942 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2943 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2944 = load i64, i64* %RBP
  %2945 = sub i64 %2944, 72
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 5
  store i64 %2947, i64* %PC
  %2948 = bitcast i8* %2943 to <2 x float>*
  %2949 = load <2 x float>, <2 x float>* %2948, align 1
  %2950 = getelementptr inbounds i8, i8* %2943, i64 8
  %2951 = bitcast i8* %2950 to <2 x i32>*
  %2952 = load <2 x i32>, <2 x i32>* %2951, align 1
  %2953 = inttoptr i64 %2945 to float*
  %2954 = load float, float* %2953
  %2955 = extractelement <2 x float> %2949, i32 0
  %2956 = fmul float %2955, %2954
  %2957 = bitcast i8* %2942 to float*
  store float %2956, float* %2957, align 1, !tbaa !2452
  %2958 = bitcast <2 x float> %2949 to <2 x i32>
  %2959 = extractelement <2 x i32> %2958, i32 1
  %2960 = getelementptr inbounds i8, i8* %2942, i64 4
  %2961 = bitcast i8* %2960 to i32*
  store i32 %2959, i32* %2961, align 1, !tbaa !2452
  %2962 = extractelement <2 x i32> %2952, i32 0
  %2963 = getelementptr inbounds i8, i8* %2942, i64 8
  %2964 = bitcast i8* %2963 to i32*
  store i32 %2962, i32* %2964, align 1, !tbaa !2452
  %2965 = extractelement <2 x i32> %2952, i32 1
  %2966 = getelementptr inbounds i8, i8* %2942, i64 12
  %2967 = bitcast i8* %2966 to i32*
  store i32 %2965, i32* %2967, align 1, !tbaa !2452
  %2968 = load i64, i64* %RBP
  %2969 = sub i64 %2968, 44
  %2970 = bitcast %union.vec128_t* %XMM1 to i8*
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 5
  store i64 %2972, i64* %PC
  %2973 = bitcast i8* %2970 to <2 x float>*
  %2974 = load <2 x float>, <2 x float>* %2973, align 1
  %2975 = extractelement <2 x float> %2974, i32 0
  %2976 = inttoptr i64 %2969 to float*
  store float %2975, float* %2976
  %2977 = bitcast %union.vec128_t* %XMM0 to i8*
  %2978 = load i64, i64* %PC
  %2979 = add i64 %2978, 9
  store i64 %2979, i64* %PC
  %2980 = bitcast i8* %2977 to <2 x float>*
  %2981 = load <2 x float>, <2 x float>* %2980, align 1
  %2982 = extractelement <2 x float> %2981, i32 0
  store float %2982, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %2983 = load i64, i64* %PC
  %2984 = add i64 %2983, 11
  store i64 %2984, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %2985 = load i64, i64* %RBP
  %2986 = sub i64 %2985, 968
  %2987 = load i32, i32* %EAX
  %2988 = zext i32 %2987 to i64
  %2989 = load i64, i64* %PC
  %2990 = add i64 %2989, 6
  store i64 %2990, i64* %PC
  %2991 = inttoptr i64 %2986 to i32*
  store i32 %2987, i32* %2991
  br label %block_401072

block_400d5a:                                     ; preds = %block_400d13, %block_400e1d
  %MEMORY.6 = phi %struct.Memory* [ %6498, %block_400d13 ], [ %MEMORY.10, %block_400e1d ]
  %2992 = load i64, i64* %PC
  %2993 = sub i64 %2992, 1914
  %2994 = load i64, i64* %PC
  %2995 = add i64 %2994, 5
  %2996 = load i64, i64* %PC
  %2997 = add i64 %2996, 5
  store i64 %2997, i64* %PC
  %2998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2999 = load i64, i64* %2998, align 8, !tbaa !2428
  %3000 = add i64 %2999, -8
  %3001 = inttoptr i64 %3000 to i64*
  store i64 %2995, i64* %3001
  store i64 %3000, i64* %2998, align 8, !tbaa !2428
  %3002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2993, i64* %3002, align 8, !tbaa !2428
  %3003 = load i64, i64* %PC
  %3004 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %3003, %struct.Memory* %MEMORY.6)
  %3005 = load i64, i64* %RBP
  %3006 = sub i64 %3005, 80
  %3007 = bitcast %union.vec128_t* %XMM0 to i8*
  %3008 = load i64, i64* %PC
  %3009 = add i64 %3008, 5
  store i64 %3009, i64* %PC
  %3010 = bitcast i8* %3007 to <2 x float>*
  %3011 = load <2 x float>, <2 x float>* %3010, align 1
  %3012 = extractelement <2 x float> %3011, i32 0
  %3013 = inttoptr i64 %3006 to float*
  store float %3012, float* %3013
  %3014 = load i64, i64* %RBP
  %3015 = sub i64 %3014, 64
  %3016 = load i64, i64* %PC
  %3017 = add i64 %3016, 3
  store i64 %3017, i64* %PC
  %3018 = inttoptr i64 %3015 to i32*
  %3019 = load i32, i32* %3018
  %3020 = zext i32 %3019 to i64
  store i64 %3020, i64* %RAX, align 8, !tbaa !2428
  %3021 = load i64, i64* %RAX
  %3022 = load i64, i64* %PC
  %3023 = add i64 %3022, 3
  store i64 %3023, i64* %PC
  %3024 = trunc i64 %3021 to i32
  %3025 = add i32 1, %3024
  %3026 = zext i32 %3025 to i64
  store i64 %3026, i64* %RAX, align 8, !tbaa !2428
  %3027 = icmp ult i32 %3025, %3024
  %3028 = icmp ult i32 %3025, 1
  %3029 = or i1 %3027, %3028
  %3030 = zext i1 %3029 to i8
  %3031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3030, i8* %3031, align 1, !tbaa !2432
  %3032 = and i32 %3025, 255
  %3033 = call i32 @llvm.ctpop.i32(i32 %3032) #16
  %3034 = trunc i32 %3033 to i8
  %3035 = and i8 %3034, 1
  %3036 = xor i8 %3035, 1
  %3037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3036, i8* %3037, align 1, !tbaa !2446
  %3038 = xor i64 1, %3021
  %3039 = trunc i64 %3038 to i32
  %3040 = xor i32 %3039, %3025
  %3041 = lshr i32 %3040, 4
  %3042 = trunc i32 %3041 to i8
  %3043 = and i8 %3042, 1
  %3044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3043, i8* %3044, align 1, !tbaa !2447
  %3045 = icmp eq i32 %3025, 0
  %3046 = zext i1 %3045 to i8
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3046, i8* %3047, align 1, !tbaa !2448
  %3048 = lshr i32 %3025, 31
  %3049 = trunc i32 %3048 to i8
  %3050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3049, i8* %3050, align 1, !tbaa !2449
  %3051 = lshr i32 %3024, 31
  %3052 = xor i32 %3048, %3051
  %3053 = add nuw nsw i32 %3052, %3048
  %3054 = icmp eq i32 %3053, 2
  %3055 = zext i1 %3054 to i8
  %3056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3055, i8* %3056, align 1, !tbaa !2450
  %3057 = load i64, i64* %RBP
  %3058 = sub i64 %3057, 64
  %3059 = load i32, i32* %EAX
  %3060 = zext i32 %3059 to i64
  %3061 = load i64, i64* %PC
  %3062 = add i64 %3061, 3
  store i64 %3062, i64* %PC
  %3063 = inttoptr i64 %3058 to i32*
  store i32 %3059, i32* %3063
  %3064 = load i64, i64* %PC
  %3065 = add i64 %3064, 11
  store i64 %3065, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400d78

block_4011bb:                                     ; preds = %block_40115d
  %3066 = sub i64 %1374, 3035
  %3067 = load i64, i64* %PC
  %3068 = add i64 %3067, 5
  %3069 = load i64, i64* %PC
  %3070 = add i64 %3069, 5
  store i64 %3070, i64* %PC
  %3071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3072 = load i64, i64* %3071, align 8, !tbaa !2428
  %3073 = add i64 %3072, -8
  %3074 = inttoptr i64 %3073 to i64*
  store i64 %3068, i64* %3074
  store i64 %3073, i64* %3071, align 8, !tbaa !2428
  %3075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3066, i64* %3075, align 8, !tbaa !2428
  %3076 = load i64, i64* %PC
  %3077 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %3076, %struct.Memory* %MEMORY.1)
  %3078 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3079 = load i64, i64* %PC
  %3080 = add i64 %3079, 8
  store i64 %3080, i64* %PC
  %3081 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to double*)
  %3082 = bitcast i8* %3078 to double*
  store double %3081, double* %3082, align 1, !tbaa !2454
  %3083 = getelementptr inbounds i8, i8* %3078, i64 8
  %3084 = bitcast i8* %3083 to double*
  store double 0.000000e+00, double* %3084, align 1, !tbaa !2454
  %3085 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3086 = load i64, i64* %PC
  %3087 = add i64 %3086, 8
  store i64 %3087, i64* %PC
  %3088 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 40) to double*)
  %3089 = bitcast i8* %3085 to double*
  store double %3088, double* %3089, align 1, !tbaa !2454
  %3090 = getelementptr inbounds i8, i8* %3085, i64 8
  %3091 = bitcast i8* %3090 to double*
  store double 0.000000e+00, double* %3091, align 1, !tbaa !2454
  %3092 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3094 = load i64, i64* %RBP
  %3095 = sub i64 %3094, 40
  %3096 = load i64, i64* %PC
  %3097 = add i64 %3096, 5
  store i64 %3097, i64* %PC
  %3098 = bitcast i8* %3093 to <2 x float>*
  %3099 = load <2 x float>, <2 x float>* %3098, align 1
  %3100 = getelementptr inbounds i8, i8* %3093, i64 8
  %3101 = bitcast i8* %3100 to <2 x i32>*
  %3102 = load <2 x i32>, <2 x i32>* %3101, align 1
  %3103 = inttoptr i64 %3095 to float*
  %3104 = load float, float* %3103
  %3105 = extractelement <2 x float> %3099, i32 0
  %3106 = fsub float %3105, %3104
  %3107 = bitcast i8* %3092 to float*
  store float %3106, float* %3107, align 1, !tbaa !2452
  %3108 = bitcast <2 x float> %3099 to <2 x i32>
  %3109 = extractelement <2 x i32> %3108, i32 1
  %3110 = getelementptr inbounds i8, i8* %3092, i64 4
  %3111 = bitcast i8* %3110 to i32*
  store i32 %3109, i32* %3111, align 1, !tbaa !2452
  %3112 = extractelement <2 x i32> %3102, i32 0
  %3113 = getelementptr inbounds i8, i8* %3092, i64 8
  %3114 = bitcast i8* %3113 to i32*
  store i32 %3112, i32* %3114, align 1, !tbaa !2452
  %3115 = extractelement <2 x i32> %3102, i32 1
  %3116 = getelementptr inbounds i8, i8* %3092, i64 12
  %3117 = bitcast i8* %3116 to i32*
  store i32 %3115, i32* %3117, align 1, !tbaa !2452
  %3118 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 9
  store i64 %3120, i64* %PC
  %3121 = bitcast i8* %3118 to <2 x i32>*
  %3122 = load <2 x i32>, <2 x i32>* %3121, align 1
  %3123 = getelementptr inbounds i8, i8* %3118, i64 8
  %3124 = bitcast i8* %3123 to <2 x i32>*
  %3125 = load <2 x i32>, <2 x i32>* %3124, align 1
  %3126 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3127 = sitofp i32 %3126 to float
  %3128 = bitcast i8* %3118 to float*
  store float %3127, float* %3128, align 1, !tbaa !2452
  %3129 = extractelement <2 x i32> %3122, i32 1
  %3130 = getelementptr inbounds i8, i8* %3118, i64 4
  %3131 = bitcast i8* %3130 to i32*
  store i32 %3129, i32* %3131, align 1, !tbaa !2452
  %3132 = extractelement <2 x i32> %3125, i32 0
  %3133 = bitcast i8* %3123 to i32*
  store i32 %3132, i32* %3133, align 1, !tbaa !2452
  %3134 = extractelement <2 x i32> %3125, i32 1
  %3135 = getelementptr inbounds i8, i8* %3118, i64 12
  %3136 = bitcast i8* %3135 to i32*
  store i32 %3134, i32* %3136, align 1, !tbaa !2452
  %3137 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3138 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3139 = bitcast %union.vec128_t* %XMM3 to i8*
  %3140 = load i64, i64* %PC
  %3141 = add i64 %3140, 4
  store i64 %3141, i64* %PC
  %3142 = bitcast i8* %3138 to <2 x float>*
  %3143 = load <2 x float>, <2 x float>* %3142, align 1
  %3144 = getelementptr inbounds i8, i8* %3138, i64 8
  %3145 = bitcast i8* %3144 to <2 x i32>*
  %3146 = load <2 x i32>, <2 x i32>* %3145, align 1
  %3147 = bitcast i8* %3139 to <2 x float>*
  %3148 = load <2 x float>, <2 x float>* %3147, align 1
  %3149 = extractelement <2 x float> %3143, i32 0
  %3150 = extractelement <2 x float> %3148, i32 0
  %3151 = fdiv float %3149, %3150
  %3152 = bitcast i8* %3137 to float*
  store float %3151, float* %3152, align 1, !tbaa !2452
  %3153 = bitcast <2 x float> %3143 to <2 x i32>
  %3154 = extractelement <2 x i32> %3153, i32 1
  %3155 = getelementptr inbounds i8, i8* %3137, i64 4
  %3156 = bitcast i8* %3155 to i32*
  store i32 %3154, i32* %3156, align 1, !tbaa !2452
  %3157 = extractelement <2 x i32> %3146, i32 0
  %3158 = getelementptr inbounds i8, i8* %3137, i64 8
  %3159 = bitcast i8* %3158 to i32*
  store i32 %3157, i32* %3159, align 1, !tbaa !2452
  %3160 = extractelement <2 x i32> %3146, i32 1
  %3161 = getelementptr inbounds i8, i8* %3137, i64 12
  %3162 = bitcast i8* %3161 to i32*
  store i32 %3160, i32* %3162, align 1, !tbaa !2452
  %3163 = load i64, i64* %PC
  %3164 = add i64 %3163, 8
  store i64 %3164, i64* %PC
  %3165 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3166 = sext i32 %3165 to i64
  store i64 %3166, i64* %RAX, align 8, !tbaa !2428
  %3167 = load i64, i64* %RAX
  %3168 = mul i64 %3167, 4
  %3169 = add i64 %3168, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %3170 = bitcast %union.vec128_t* %XMM0 to i8*
  %3171 = load i64, i64* %PC
  %3172 = add i64 %3171, 9
  store i64 %3172, i64* %PC
  %3173 = bitcast i8* %3170 to <2 x float>*
  %3174 = load <2 x float>, <2 x float>* %3173, align 1
  %3175 = extractelement <2 x float> %3174, i32 0
  %3176 = inttoptr i64 %3169 to float*
  store float %3175, float* %3176
  %3177 = load i64, i64* %PC
  %3178 = add i64 %3177, 8
  store i64 %3178, i64* %PC
  %3179 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3180 = sext i32 %3179 to i64
  store i64 %3180, i64* %RAX, align 8, !tbaa !2428
  %3181 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3182 = load i64, i64* %RAX
  %3183 = mul i64 %3182, 4
  %3184 = add i64 %3183, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %3185 = load i64, i64* %PC
  %3186 = add i64 %3185, 9
  store i64 %3186, i64* %PC
  %3187 = inttoptr i64 %3184 to float*
  %3188 = load float, float* %3187
  %3189 = bitcast i8* %3181 to float*
  store float %3188, float* %3189, align 1, !tbaa !2452
  %3190 = getelementptr inbounds i8, i8* %3181, i64 4
  %3191 = bitcast i8* %3190 to float*
  store float 0.000000e+00, float* %3191, align 1, !tbaa !2452
  %3192 = getelementptr inbounds i8, i8* %3181, i64 8
  %3193 = bitcast i8* %3192 to float*
  store float 0.000000e+00, float* %3193, align 1, !tbaa !2452
  %3194 = getelementptr inbounds i8, i8* %3181, i64 12
  %3195 = bitcast i8* %3194 to float*
  store float 0.000000e+00, float* %3195, align 1, !tbaa !2452
  %3196 = load i64, i64* %PC
  %3197 = add i64 %3196, 8
  store i64 %3197, i64* %PC
  %3198 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3199 = sext i32 %3198 to i64
  store i64 %3199, i64* %RAX, align 8, !tbaa !2428
  %3200 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3201 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3202 = load i64, i64* %RAX
  %3203 = mul i64 %3202, 4
  %3204 = add i64 %3203, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %3205 = load i64, i64* %PC
  %3206 = add i64 %3205, 9
  store i64 %3206, i64* %PC
  %3207 = bitcast i8* %3201 to <2 x float>*
  %3208 = load <2 x float>, <2 x float>* %3207, align 1
  %3209 = getelementptr inbounds i8, i8* %3201, i64 8
  %3210 = bitcast i8* %3209 to <2 x i32>*
  %3211 = load <2 x i32>, <2 x i32>* %3210, align 1
  %3212 = inttoptr i64 %3204 to float*
  %3213 = load float, float* %3212
  %3214 = extractelement <2 x float> %3208, i32 0
  %3215 = fadd float %3214, %3213
  %3216 = bitcast i8* %3200 to float*
  store float %3215, float* %3216, align 1, !tbaa !2452
  %3217 = bitcast <2 x float> %3208 to <2 x i32>
  %3218 = extractelement <2 x i32> %3217, i32 1
  %3219 = getelementptr inbounds i8, i8* %3200, i64 4
  %3220 = bitcast i8* %3219 to i32*
  store i32 %3218, i32* %3220, align 1, !tbaa !2452
  %3221 = extractelement <2 x i32> %3211, i32 0
  %3222 = getelementptr inbounds i8, i8* %3200, i64 8
  %3223 = bitcast i8* %3222 to i32*
  store i32 %3221, i32* %3223, align 1, !tbaa !2452
  %3224 = extractelement <2 x i32> %3211, i32 1
  %3225 = getelementptr inbounds i8, i8* %3200, i64 12
  %3226 = bitcast i8* %3225 to i32*
  store i32 %3224, i32* %3226, align 1, !tbaa !2452
  %3227 = load i64, i64* %RBP
  %3228 = sub i64 %3227, 16
  %3229 = bitcast %union.vec128_t* %XMM0 to i8*
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 5
  store i64 %3231, i64* %PC
  %3232 = bitcast i8* %3229 to <2 x float>*
  %3233 = load <2 x float>, <2 x float>* %3232, align 1
  %3234 = extractelement <2 x float> %3233, i32 0
  %3235 = inttoptr i64 %3228 to float*
  store float %3234, float* %3235
  %3236 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3237 = load i64, i64* %RBP
  %3238 = sub i64 %3237, 16
  %3239 = load i64, i64* %PC
  %3240 = add i64 %3239, 5
  store i64 %3240, i64* %PC
  %3241 = inttoptr i64 %3238 to float*
  %3242 = load float, float* %3241
  %3243 = bitcast i8* %3236 to float*
  store float %3242, float* %3243, align 1, !tbaa !2452
  %3244 = getelementptr inbounds i8, i8* %3236, i64 4
  %3245 = bitcast i8* %3244 to float*
  store float 0.000000e+00, float* %3245, align 1, !tbaa !2452
  %3246 = getelementptr inbounds i8, i8* %3236, i64 8
  %3247 = bitcast i8* %3246 to float*
  store float 0.000000e+00, float* %3247, align 1, !tbaa !2452
  %3248 = getelementptr inbounds i8, i8* %3236, i64 12
  %3249 = bitcast i8* %3248 to float*
  store float 0.000000e+00, float* %3249, align 1, !tbaa !2452
  %3250 = load i64, i64* %PC
  %3251 = add i64 %3250, 8
  store i64 %3251, i64* %PC
  %3252 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3253 = sext i32 %3252 to i64
  store i64 %3253, i64* %RAX, align 8, !tbaa !2428
  %3254 = load i64, i64* %RAX
  %3255 = mul i64 %3254, 4
  %3256 = add i64 %3255, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %3257 = bitcast %union.vec128_t* %XMM0 to i8*
  %3258 = load i64, i64* %PC
  %3259 = add i64 %3258, 9
  store i64 %3259, i64* %PC
  %3260 = bitcast i8* %3257 to <2 x float>*
  %3261 = load <2 x float>, <2 x float>* %3260, align 1
  %3262 = extractelement <2 x float> %3261, i32 0
  %3263 = inttoptr i64 %3256 to float*
  store float %3262, float* %3263
  %3264 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3265 = load i64, i64* %RBP
  %3266 = sub i64 %3265, 12
  %3267 = load i64, i64* %PC
  %3268 = add i64 %3267, 5
  store i64 %3268, i64* %PC
  %3269 = inttoptr i64 %3266 to float*
  %3270 = load float, float* %3269
  %3271 = fpext float %3270 to double
  %3272 = bitcast i8* %3264 to double*
  store double %3271, double* %3272, align 1, !tbaa !2454
  %3273 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3274 = load i64, i64* %RBP
  %3275 = sub i64 %3274, 16
  %3276 = load i64, i64* %PC
  %3277 = add i64 %3276, 5
  store i64 %3277, i64* %PC
  %3278 = inttoptr i64 %3275 to float*
  %3279 = load float, float* %3278
  %3280 = fpext float %3279 to double
  %3281 = bitcast i8* %3273 to double*
  store double %3280, double* %3281, align 1, !tbaa !2454
  %3282 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3283 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3284 = bitcast %union.vec128_t* %XMM3 to i8*
  %3285 = load i64, i64* %PC
  %3286 = add i64 %3285, 4
  store i64 %3286, i64* %PC
  %3287 = bitcast i8* %3283 to double*
  %3288 = load double, double* %3287, align 1
  %3289 = getelementptr inbounds i8, i8* %3283, i64 8
  %3290 = bitcast i8* %3289 to i64*
  %3291 = load i64, i64* %3290, align 1
  %3292 = bitcast i8* %3284 to double*
  %3293 = load double, double* %3292, align 1
  %3294 = fmul double %3288, %3293
  %3295 = bitcast i8* %3282 to double*
  store double %3294, double* %3295, align 1, !tbaa !2454
  %3296 = getelementptr inbounds i8, i8* %3282, i64 8
  %3297 = bitcast i8* %3296 to i64*
  store i64 %3291, i64* %3297, align 1, !tbaa !2454
  %3298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3300 = bitcast %union.vec128_t* %XMM2 to i8*
  %3301 = load i64, i64* %PC
  %3302 = add i64 %3301, 4
  store i64 %3302, i64* %PC
  %3303 = bitcast i8* %3299 to double*
  %3304 = load double, double* %3303, align 1
  %3305 = getelementptr inbounds i8, i8* %3299, i64 8
  %3306 = bitcast i8* %3305 to i64*
  %3307 = load i64, i64* %3306, align 1
  %3308 = bitcast i8* %3300 to double*
  %3309 = load double, double* %3308, align 1
  %3310 = fdiv double %3304, %3309
  %3311 = bitcast i8* %3298 to double*
  store double %3310, double* %3311, align 1, !tbaa !2454
  %3312 = getelementptr inbounds i8, i8* %3298, i64 8
  %3313 = bitcast i8* %3312 to i64*
  store i64 %3307, i64* %3313, align 1, !tbaa !2454
  %3314 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3315 = bitcast %union.vec128_t* %XMM0 to i8*
  %3316 = load i64, i64* %PC
  %3317 = add i64 %3316, 4
  store i64 %3317, i64* %PC
  %3318 = bitcast i8* %3314 to <2 x i32>*
  %3319 = load <2 x i32>, <2 x i32>* %3318, align 1
  %3320 = getelementptr inbounds i8, i8* %3314, i64 8
  %3321 = bitcast i8* %3320 to <2 x i32>*
  %3322 = load <2 x i32>, <2 x i32>* %3321, align 1
  %3323 = bitcast i8* %3315 to double*
  %3324 = load double, double* %3323, align 1
  %3325 = fptrunc double %3324 to float
  %3326 = bitcast i8* %3314 to float*
  store float %3325, float* %3326, align 1, !tbaa !2452
  %3327 = extractelement <2 x i32> %3319, i32 1
  %3328 = getelementptr inbounds i8, i8* %3314, i64 4
  %3329 = bitcast i8* %3328 to i32*
  store i32 %3327, i32* %3329, align 1, !tbaa !2452
  %3330 = extractelement <2 x i32> %3322, i32 0
  %3331 = bitcast i8* %3320 to i32*
  store i32 %3330, i32* %3331, align 1, !tbaa !2452
  %3332 = extractelement <2 x i32> %3322, i32 1
  %3333 = getelementptr inbounds i8, i8* %3314, i64 12
  %3334 = bitcast i8* %3333 to i32*
  store i32 %3332, i32* %3334, align 1, !tbaa !2452
  %3335 = load i64, i64* %PC
  %3336 = add i64 %3335, 8
  store i64 %3336, i64* %PC
  %3337 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3338 = sext i32 %3337 to i64
  store i64 %3338, i64* %RAX, align 8, !tbaa !2428
  %3339 = load i64, i64* %RAX
  %3340 = mul i64 %3339, 4
  %3341 = add i64 %3340, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %3342 = bitcast %union.vec128_t* %XMM0 to i8*
  %3343 = load i64, i64* %PC
  %3344 = add i64 %3343, 9
  store i64 %3344, i64* %PC
  %3345 = bitcast i8* %3342 to <2 x float>*
  %3346 = load <2 x float>, <2 x float>* %3345, align 1
  %3347 = extractelement <2 x float> %3346, i32 0
  %3348 = inttoptr i64 %3341 to float*
  store float %3347, float* %3348
  %3349 = load i64, i64* %PC
  %3350 = add i64 %3349, 8
  store i64 %3350, i64* %PC
  %3351 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3352 = sext i32 %3351 to i64
  store i64 %3352, i64* %RAX, align 8, !tbaa !2428
  %3353 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3354 = load i64, i64* %RAX
  %3355 = mul i64 %3354, 4
  %3356 = add i64 %3355, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %3357 = load i64, i64* %PC
  %3358 = add i64 %3357, 9
  store i64 %3358, i64* %PC
  %3359 = inttoptr i64 %3356 to float*
  %3360 = load float, float* %3359
  %3361 = fpext float %3360 to double
  %3362 = bitcast i8* %3353 to double*
  store double %3361, double* %3362, align 1, !tbaa !2454
  %3363 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3364 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3365 = bitcast %union.vec128_t* %XMM0 to i8*
  %3366 = load i64, i64* %PC
  %3367 = add i64 %3366, 4
  store i64 %3367, i64* %PC
  %3368 = bitcast i8* %3364 to double*
  %3369 = load double, double* %3368, align 1
  %3370 = getelementptr inbounds i8, i8* %3364, i64 8
  %3371 = bitcast i8* %3370 to i64*
  %3372 = load i64, i64* %3371, align 1
  %3373 = bitcast i8* %3365 to double*
  %3374 = load double, double* %3373, align 1
  %3375 = fdiv double %3369, %3374
  %3376 = bitcast i8* %3363 to double*
  store double %3375, double* %3376, align 1, !tbaa !2454
  %3377 = getelementptr inbounds i8, i8* %3363, i64 8
  %3378 = bitcast i8* %3377 to i64*
  store i64 %3372, i64* %3378, align 1, !tbaa !2454
  %3379 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3380 = bitcast %union.vec128_t* %XMM1 to i8*
  %3381 = load i64, i64* %PC
  %3382 = add i64 %3381, 4
  store i64 %3382, i64* %PC
  %3383 = bitcast i8* %3379 to <2 x i32>*
  %3384 = load <2 x i32>, <2 x i32>* %3383, align 1
  %3385 = getelementptr inbounds i8, i8* %3379, i64 8
  %3386 = bitcast i8* %3385 to <2 x i32>*
  %3387 = load <2 x i32>, <2 x i32>* %3386, align 1
  %3388 = bitcast i8* %3380 to double*
  %3389 = load double, double* %3388, align 1
  %3390 = fptrunc double %3389 to float
  %3391 = bitcast i8* %3379 to float*
  store float %3390, float* %3391, align 1, !tbaa !2452
  %3392 = extractelement <2 x i32> %3384, i32 1
  %3393 = getelementptr inbounds i8, i8* %3379, i64 4
  %3394 = bitcast i8* %3393 to i32*
  store i32 %3392, i32* %3394, align 1, !tbaa !2452
  %3395 = extractelement <2 x i32> %3387, i32 0
  %3396 = bitcast i8* %3385 to i32*
  store i32 %3395, i32* %3396, align 1, !tbaa !2452
  %3397 = extractelement <2 x i32> %3387, i32 1
  %3398 = getelementptr inbounds i8, i8* %3379, i64 12
  %3399 = bitcast i8* %3398 to i32*
  store i32 %3397, i32* %3399, align 1, !tbaa !2452
  %3400 = load i64, i64* %PC
  %3401 = add i64 %3400, 8
  store i64 %3401, i64* %PC
  %3402 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3403 = sext i32 %3402 to i64
  store i64 %3403, i64* %RAX, align 8, !tbaa !2428
  %3404 = load i64, i64* %RAX
  %3405 = mul i64 %3404, 4
  %3406 = add i64 %3405, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %3407 = bitcast %union.vec128_t* %XMM0 to i8*
  %3408 = load i64, i64* %PC
  %3409 = add i64 %3408, 9
  store i64 %3409, i64* %PC
  %3410 = bitcast i8* %3407 to <2 x float>*
  %3411 = load <2 x float>, <2 x float>* %3410, align 1
  %3412 = extractelement <2 x float> %3411, i32 0
  %3413 = inttoptr i64 %3406 to float*
  store float %3412, float* %3413
  %3414 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3415 = load i64, i64* %RBP
  %3416 = sub i64 %3415, 16
  %3417 = load i64, i64* %PC
  %3418 = add i64 %3417, 5
  store i64 %3418, i64* %PC
  %3419 = inttoptr i64 %3416 to float*
  %3420 = load float, float* %3419
  %3421 = bitcast i8* %3414 to float*
  store float %3420, float* %3421, align 1, !tbaa !2452
  %3422 = getelementptr inbounds i8, i8* %3414, i64 4
  %3423 = bitcast i8* %3422 to float*
  store float 0.000000e+00, float* %3423, align 1, !tbaa !2452
  %3424 = getelementptr inbounds i8, i8* %3414, i64 8
  %3425 = bitcast i8* %3424 to float*
  store float 0.000000e+00, float* %3425, align 1, !tbaa !2452
  %3426 = getelementptr inbounds i8, i8* %3414, i64 12
  %3427 = bitcast i8* %3426 to float*
  store float 0.000000e+00, float* %3427, align 1, !tbaa !2452
  %3428 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3429 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3430 = load i64, i64* %RBP
  %3431 = sub i64 %3430, 8
  %3432 = load i64, i64* %PC
  %3433 = add i64 %3432, 5
  store i64 %3433, i64* %PC
  %3434 = bitcast i8* %3429 to <2 x float>*
  %3435 = load <2 x float>, <2 x float>* %3434, align 1
  %3436 = getelementptr inbounds i8, i8* %3429, i64 8
  %3437 = bitcast i8* %3436 to <2 x i32>*
  %3438 = load <2 x i32>, <2 x i32>* %3437, align 1
  %3439 = inttoptr i64 %3431 to float*
  %3440 = load float, float* %3439
  %3441 = extractelement <2 x float> %3435, i32 0
  %3442 = fdiv float %3441, %3440
  %3443 = bitcast i8* %3428 to float*
  store float %3442, float* %3443, align 1, !tbaa !2452
  %3444 = bitcast <2 x float> %3435 to <2 x i32>
  %3445 = extractelement <2 x i32> %3444, i32 1
  %3446 = getelementptr inbounds i8, i8* %3428, i64 4
  %3447 = bitcast i8* %3446 to i32*
  store i32 %3445, i32* %3447, align 1, !tbaa !2452
  %3448 = extractelement <2 x i32> %3438, i32 0
  %3449 = getelementptr inbounds i8, i8* %3428, i64 8
  %3450 = bitcast i8* %3449 to i32*
  store i32 %3448, i32* %3450, align 1, !tbaa !2452
  %3451 = extractelement <2 x i32> %3438, i32 1
  %3452 = getelementptr inbounds i8, i8* %3428, i64 12
  %3453 = bitcast i8* %3452 to i32*
  store i32 %3451, i32* %3453, align 1, !tbaa !2452
  %3454 = load i64, i64* %PC
  %3455 = add i64 %3454, 8
  store i64 %3455, i64* %PC
  %3456 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3457 = sext i32 %3456 to i64
  store i64 %3457, i64* %RAX, align 8, !tbaa !2428
  %3458 = load i64, i64* %RAX
  %3459 = mul i64 %3458, 4
  %3460 = add i64 %3459, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %3461 = bitcast %union.vec128_t* %XMM0 to i8*
  %3462 = load i64, i64* %PC
  %3463 = add i64 %3462, 9
  store i64 %3463, i64* %PC
  %3464 = bitcast i8* %3461 to <2 x float>*
  %3465 = load <2 x float>, <2 x float>* %3464, align 1
  %3466 = extractelement <2 x float> %3465, i32 0
  %3467 = inttoptr i64 %3460 to float*
  store float %3466, float* %3467
  %3468 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3469 = load i64, i64* %PC
  %3470 = add i64 %3469, 9
  store i64 %3470, i64* %PC
  %3471 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %3472 = bitcast i8* %3468 to float*
  store float %3471, float* %3472, align 1, !tbaa !2452
  %3473 = getelementptr inbounds i8, i8* %3468, i64 4
  %3474 = bitcast i8* %3473 to float*
  store float 0.000000e+00, float* %3474, align 1, !tbaa !2452
  %3475 = getelementptr inbounds i8, i8* %3468, i64 8
  %3476 = bitcast i8* %3475 to float*
  store float 0.000000e+00, float* %3476, align 1, !tbaa !2452
  %3477 = getelementptr inbounds i8, i8* %3468, i64 12
  %3478 = bitcast i8* %3477 to float*
  store float 0.000000e+00, float* %3478, align 1, !tbaa !2452
  %3479 = load i64, i64* %PC
  %3480 = add i64 %3479, 8
  store i64 %3480, i64* %PC
  %3481 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3482 = sext i32 %3481 to i64
  store i64 %3482, i64* %RAX, align 8, !tbaa !2428
  %3483 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3484 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3485 = load i64, i64* %RAX
  %3486 = mul i64 %3485, 4
  %3487 = add i64 %3486, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %3488 = load i64, i64* %PC
  %3489 = add i64 %3488, 9
  store i64 %3489, i64* %PC
  %3490 = bitcast i8* %3484 to <2 x float>*
  %3491 = load <2 x float>, <2 x float>* %3490, align 1
  %3492 = getelementptr inbounds i8, i8* %3484, i64 8
  %3493 = bitcast i8* %3492 to <2 x i32>*
  %3494 = load <2 x i32>, <2 x i32>* %3493, align 1
  %3495 = inttoptr i64 %3487 to float*
  %3496 = load float, float* %3495
  %3497 = extractelement <2 x float> %3491, i32 0
  %3498 = fadd float %3497, %3496
  %3499 = bitcast i8* %3483 to float*
  store float %3498, float* %3499, align 1, !tbaa !2452
  %3500 = bitcast <2 x float> %3491 to <2 x i32>
  %3501 = extractelement <2 x i32> %3500, i32 1
  %3502 = getelementptr inbounds i8, i8* %3483, i64 4
  %3503 = bitcast i8* %3502 to i32*
  store i32 %3501, i32* %3503, align 1, !tbaa !2452
  %3504 = extractelement <2 x i32> %3494, i32 0
  %3505 = getelementptr inbounds i8, i8* %3483, i64 8
  %3506 = bitcast i8* %3505 to i32*
  store i32 %3504, i32* %3506, align 1, !tbaa !2452
  %3507 = extractelement <2 x i32> %3494, i32 1
  %3508 = getelementptr inbounds i8, i8* %3483, i64 12
  %3509 = bitcast i8* %3508 to i32*
  store i32 %3507, i32* %3509, align 1, !tbaa !2452
  %3510 = bitcast %union.vec128_t* %XMM0 to i8*
  %3511 = load i64, i64* %PC
  %3512 = add i64 %3511, 9
  store i64 %3512, i64* %PC
  %3513 = bitcast i8* %3510 to <2 x float>*
  %3514 = load <2 x float>, <2 x float>* %3513, align 1
  %3515 = extractelement <2 x float> %3514, i32 0
  store float %3515, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*)
  %3516 = load i64, i64* %PC
  %3517 = add i64 %3516, 7
  store i64 %3517, i64* %PC
  %3518 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3519 = zext i32 %3518 to i64
  store i64 %3519, i64* %RDI, align 8, !tbaa !2428
  %3520 = load i64, i64* %PC
  %3521 = add i64 %3520, 5530
  %3522 = load i64, i64* %PC
  %3523 = add i64 %3522, 5
  %3524 = load i64, i64* %PC
  %3525 = add i64 %3524, 5
  store i64 %3525, i64* %PC
  %3526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3527 = load i64, i64* %3526, align 8, !tbaa !2428
  %3528 = add i64 %3527, -8
  %3529 = inttoptr i64 %3528 to i64*
  store i64 %3523, i64* %3529
  store i64 %3528, i64* %3526, align 8, !tbaa !2428
  %3530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3521, i64* %3530, align 8, !tbaa !2428
  %3531 = load i64, i64* %PC
  %3532 = call %struct.Memory* @sub_402860_print_time(%struct.State* %0, i64 %3531, %struct.Memory* %3077)
  %3533 = load i64, i64* %PC
  %3534 = add i64 %3533, 7
  store i64 %3534, i64* %PC
  %3535 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3536 = zext i32 %3535 to i64
  store i64 %3536, i64* %RAX, align 8, !tbaa !2428
  %3537 = load i64, i64* %RAX
  %3538 = load i64, i64* %PC
  %3539 = add i64 %3538, 3
  store i64 %3539, i64* %PC
  %3540 = trunc i64 %3537 to i32
  %3541 = add i32 1, %3540
  %3542 = zext i32 %3541 to i64
  store i64 %3542, i64* %RAX, align 8, !tbaa !2428
  %3543 = icmp ult i32 %3541, %3540
  %3544 = icmp ult i32 %3541, 1
  %3545 = or i1 %3543, %3544
  %3546 = zext i1 %3545 to i8
  %3547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3546, i8* %3547, align 1, !tbaa !2432
  %3548 = and i32 %3541, 255
  %3549 = call i32 @llvm.ctpop.i32(i32 %3548) #16
  %3550 = trunc i32 %3549 to i8
  %3551 = and i8 %3550, 1
  %3552 = xor i8 %3551, 1
  %3553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3552, i8* %3553, align 1, !tbaa !2446
  %3554 = xor i64 1, %3537
  %3555 = trunc i64 %3554 to i32
  %3556 = xor i32 %3555, %3541
  %3557 = lshr i32 %3556, 4
  %3558 = trunc i32 %3557 to i8
  %3559 = and i8 %3558, 1
  %3560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3559, i8* %3560, align 1, !tbaa !2447
  %3561 = icmp eq i32 %3541, 0
  %3562 = zext i1 %3561 to i8
  %3563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3562, i8* %3563, align 1, !tbaa !2448
  %3564 = lshr i32 %3541, 31
  %3565 = trunc i32 %3564 to i8
  %3566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3565, i8* %3566, align 1, !tbaa !2449
  %3567 = lshr i32 %3540, 31
  %3568 = xor i32 %3564, %3567
  %3569 = add nuw nsw i32 %3568, %3564
  %3570 = icmp eq i32 %3569, 2
  %3571 = zext i1 %3570 to i8
  %3572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3571, i8* %3572, align 1, !tbaa !2450
  %3573 = load i32, i32* %EAX
  %3574 = zext i32 %3573 to i64
  %3575 = load i64, i64* %PC
  %3576 = add i64 %3575, 7
  store i64 %3576, i64* %PC
  store i32 %3573, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %3577 = load i64, i64* %PC
  %3578 = sub i64 %3577, 618
  %3579 = load i64, i64* %PC
  %3580 = add i64 %3579, 5
  store i64 %3580, i64* %PC
  %3581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3578, i64* %3581, align 8, !tbaa !2428
  br label %block_401072

block_400f3a:                                     ; preds = %block_400eb4
  %3582 = sub i64 %4099, 2394
  %3583 = load i64, i64* %PC
  %3584 = add i64 %3583, 5
  %3585 = load i64, i64* %PC
  %3586 = add i64 %3585, 5
  store i64 %3586, i64* %PC
  %3587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3588 = load i64, i64* %3587, align 8, !tbaa !2428
  %3589 = add i64 %3588, -8
  %3590 = inttoptr i64 %3589 to i64*
  store i64 %3584, i64* %3590
  store i64 %3589, i64* %3587, align 8, !tbaa !2428
  %3591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3582, i64* %3591, align 8, !tbaa !2428
  %3592 = load i64, i64* %PC
  %3593 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %3592, %struct.Memory* %MEMORY.8)
  %3594 = load i64, i64* %PC
  %3595 = add i64 %3594, 10
  store i64 %3595, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  %3596 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3597 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3598 = bitcast %union.vec128_t* %XMM1 to i8*
  %3599 = load i64, i64* %PC
  %3600 = add i64 %3599, 3
  store i64 %3600, i64* %PC
  %3601 = bitcast i8* %3597 to i64*
  %3602 = load i64, i64* %3601, align 1
  %3603 = getelementptr inbounds i8, i8* %3597, i64 8
  %3604 = bitcast i8* %3603 to i64*
  %3605 = load i64, i64* %3604, align 1
  %3606 = bitcast i8* %3598 to i64*
  %3607 = load i64, i64* %3606, align 1
  %3608 = getelementptr inbounds i8, i8* %3598, i64 8
  %3609 = bitcast i8* %3608 to i64*
  %3610 = load i64, i64* %3609, align 1
  %3611 = xor i64 %3607, %3602
  %3612 = xor i64 %3610, %3605
  %3613 = trunc i64 %3611 to i32
  %3614 = lshr i64 %3611, 32
  %3615 = trunc i64 %3614 to i32
  %3616 = bitcast i8* %3596 to i32*
  store i32 %3613, i32* %3616, align 1, !tbaa !2456
  %3617 = getelementptr inbounds i8, i8* %3596, i64 4
  %3618 = bitcast i8* %3617 to i32*
  store i32 %3615, i32* %3618, align 1, !tbaa !2456
  %3619 = trunc i64 %3612 to i32
  %3620 = getelementptr inbounds i8, i8* %3596, i64 8
  %3621 = bitcast i8* %3620 to i32*
  store i32 %3619, i32* %3621, align 1, !tbaa !2456
  %3622 = lshr i64 %3612, 32
  %3623 = trunc i64 %3622 to i32
  %3624 = getelementptr inbounds i8, i8* %3596, i64 12
  %3625 = bitcast i8* %3624 to i32*
  store i32 %3623, i32* %3625, align 1, !tbaa !2456
  %3626 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3627 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3628 = load i64, i64* %RBP
  %3629 = sub i64 %3628, 80
  %3630 = load i64, i64* %PC
  %3631 = add i64 %3630, 5
  store i64 %3631, i64* %PC
  %3632 = bitcast i8* %3627 to <2 x float>*
  %3633 = load <2 x float>, <2 x float>* %3632, align 1
  %3634 = getelementptr inbounds i8, i8* %3627, i64 8
  %3635 = bitcast i8* %3634 to <2 x i32>*
  %3636 = load <2 x i32>, <2 x i32>* %3635, align 1
  %3637 = inttoptr i64 %3629 to float*
  %3638 = load float, float* %3637
  %3639 = extractelement <2 x float> %3633, i32 0
  %3640 = fsub float %3639, %3638
  %3641 = bitcast i8* %3626 to float*
  store float %3640, float* %3641, align 1, !tbaa !2452
  %3642 = bitcast <2 x float> %3633 to <2 x i32>
  %3643 = extractelement <2 x i32> %3642, i32 1
  %3644 = getelementptr inbounds i8, i8* %3626, i64 4
  %3645 = bitcast i8* %3644 to i32*
  store i32 %3643, i32* %3645, align 1, !tbaa !2452
  %3646 = extractelement <2 x i32> %3636, i32 0
  %3647 = getelementptr inbounds i8, i8* %3626, i64 8
  %3648 = bitcast i8* %3647 to i32*
  store i32 %3646, i32* %3648, align 1, !tbaa !2452
  %3649 = extractelement <2 x i32> %3636, i32 1
  %3650 = getelementptr inbounds i8, i8* %3626, i64 12
  %3651 = bitcast i8* %3650 to i32*
  store i32 %3649, i32* %3651, align 1, !tbaa !2452
  %3652 = load i64, i64* %RBP
  %3653 = sub i64 %3652, 84
  %3654 = bitcast %union.vec128_t* %XMM0 to i8*
  %3655 = load i64, i64* %PC
  %3656 = add i64 %3655, 5
  store i64 %3656, i64* %PC
  %3657 = bitcast i8* %3654 to <2 x float>*
  %3658 = load <2 x float>, <2 x float>* %3657, align 1
  %3659 = extractelement <2 x float> %3658, i32 0
  %3660 = inttoptr i64 %3653 to float*
  store float %3659, float* %3660
  %3661 = load i64, i64* %PC
  %3662 = add i64 %3661, 8
  store i64 %3662, i64* %PC
  %3663 = load i64, i64* @stderr
  store i64 %3663, i64* %RDI, align 8, !tbaa !2428
  %3664 = load i64, i64* %PC
  %3665 = add i64 %3664, 7
  store i64 %3665, i64* %PC
  %3666 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3667 = zext i32 %3666 to i64
  store i64 %3667, i64* %RDX, align 8, !tbaa !2428
  %3668 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3669 = bitcast %union.vec128_t* %XMM1 to i8*
  %3670 = load i64, i64* %PC
  %3671 = add i64 %3670, 3
  store i64 %3671, i64* %PC
  %3672 = bitcast i8* %3669 to <2 x i32>*
  %3673 = load <2 x i32>, <2 x i32>* %3672, align 1
  %3674 = getelementptr inbounds i8, i8* %3669, i64 8
  %3675 = bitcast i8* %3674 to <2 x i32>*
  %3676 = load <2 x i32>, <2 x i32>* %3675, align 1
  %3677 = extractelement <2 x i32> %3673, i32 0
  %3678 = bitcast i8* %3668 to i32*
  store i32 %3677, i32* %3678, align 1, !tbaa !2452
  %3679 = extractelement <2 x i32> %3673, i32 1
  %3680 = getelementptr inbounds i8, i8* %3668, i64 4
  %3681 = bitcast i8* %3680 to i32*
  store i32 %3679, i32* %3681, align 1, !tbaa !2452
  %3682 = extractelement <2 x i32> %3676, i32 0
  %3683 = getelementptr inbounds i8, i8* %3668, i64 8
  %3684 = bitcast i8* %3683 to i32*
  store i32 %3682, i32* %3684, align 1, !tbaa !2452
  %3685 = extractelement <2 x i32> %3676, i32 1
  %3686 = getelementptr inbounds i8, i8* %3668, i64 12
  %3687 = bitcast i8* %3686 to i32*
  store i32 %3685, i32* %3687, align 1, !tbaa !2452
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 2
  store i64 %3689, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %3690 = load i64, i64* %PC
  %3691 = sub i64 %3690, 2698
  %3692 = load i64, i64* %PC
  %3693 = add i64 %3692, 5
  %3694 = load i64, i64* %PC
  %3695 = add i64 %3694, 5
  store i64 %3695, i64* %PC
  %3696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3697 = load i64, i64* %3696, align 8, !tbaa !2428
  %3698 = add i64 %3697, -8
  %3699 = inttoptr i64 %3698 to i64*
  store i64 %3693, i64* %3699
  store i64 %3698, i64* %3696, align 8, !tbaa !2428
  %3700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3691, i64* %3700, align 8, !tbaa !2428
  %3701 = load i64, i64* %PC
  %3702 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %3701, %struct.Memory* %3593)
  %3703 = load i64, i64* %RBP
  %3704 = sub i64 %3703, 64
  %3705 = load i64, i64* %PC
  %3706 = add i64 %3705, 4
  store i64 %3706, i64* %PC
  %3707 = inttoptr i64 %3704 to i32*
  %3708 = load i32, i32* %3707
  %3709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3709, align 1, !tbaa !2432
  %3710 = and i32 %3708, 255
  %3711 = call i32 @llvm.ctpop.i32(i32 %3710) #16
  %3712 = trunc i32 %3711 to i8
  %3713 = and i8 %3712, 1
  %3714 = xor i8 %3713, 1
  %3715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3714, i8* %3715, align 1, !tbaa !2446
  %3716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3716, align 1, !tbaa !2447
  %3717 = icmp eq i32 %3708, 0
  %3718 = zext i1 %3717 to i8
  %3719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3718, i8* %3719, align 1, !tbaa !2448
  %3720 = lshr i32 %3708, 31
  %3721 = trunc i32 %3720 to i8
  %3722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3721, i8* %3722, align 1, !tbaa !2449
  %3723 = lshr i32 %3708, 31
  %3724 = xor i32 %3720, %3723
  %3725 = add nuw nsw i32 %3724, %3723
  %3726 = icmp eq i32 %3725, 2
  %3727 = zext i1 %3726 to i8
  %3728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3727, i8* %3728, align 1, !tbaa !2450
  %3729 = load i64, i64* %RBP
  %3730 = sub i64 %3729, 952
  %3731 = load i32, i32* %EAX
  %3732 = zext i32 %3731 to i64
  %3733 = load i64, i64* %PC
  %3734 = add i64 %3733, 6
  store i64 %3734, i64* %PC
  %3735 = inttoptr i64 %3730 to i32*
  store i32 %3731, i32* %3735
  %3736 = load i64, i64* %PC
  %3737 = add i64 %3736, 23
  %3738 = load i64, i64* %PC
  %3739 = add i64 %3738, 6
  %3740 = load i64, i64* %PC
  %3741 = add i64 %3740, 6
  store i64 %3741, i64* %PC
  %3742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3743 = load i8, i8* %3742, align 1, !tbaa !2449
  %3744 = icmp ne i8 %3743, 0
  %3745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3746 = load i8, i8* %3745, align 1, !tbaa !2450
  %3747 = icmp ne i8 %3746, 0
  %3748 = xor i1 %3744, %3747
  %3749 = xor i1 %3748, true
  %3750 = zext i1 %3749 to i8
  store i8 %3750, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3752 = select i1 %3748, i64 %3739, i64 %3737
  store i64 %3752, i64* %3751, align 8, !tbaa !2428
  %3753 = load i8, i8* %BRANCH_TAKEN
  %3754 = icmp eq i8 %3753, 1
  br i1 %3754, label %block_400f90, label %block_400f7f

block_401578:                                     ; preds = %block_40158c, %block_401536
  %MEMORY.7 = phi %struct.Memory* [ %4029, %block_401536 ], [ %7107, %block_40158c ]
  %3755 = load i64, i64* %PC
  %3756 = add i64 %3755, 7
  store i64 %3756, i64* %PC
  %3757 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %3758 = zext i32 %3757 to i64
  store i64 %3758, i64* %RAX, align 8, !tbaa !2428
  %3759 = load i32, i32* %EAX
  %3760 = zext i32 %3759 to i64
  %3761 = load i64, i64* %PC
  %3762 = add i64 %3761, 7
  store i64 %3762, i64* %PC
  %3763 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3764 = sub i32 %3759, %3763
  %3765 = icmp ult i32 %3759, %3763
  %3766 = zext i1 %3765 to i8
  %3767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3766, i8* %3767, align 1, !tbaa !2432
  %3768 = and i32 %3764, 255
  %3769 = call i32 @llvm.ctpop.i32(i32 %3768) #16
  %3770 = trunc i32 %3769 to i8
  %3771 = and i8 %3770, 1
  %3772 = xor i8 %3771, 1
  %3773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3772, i8* %3773, align 1, !tbaa !2446
  %3774 = xor i32 %3763, %3759
  %3775 = xor i32 %3774, %3764
  %3776 = lshr i32 %3775, 4
  %3777 = trunc i32 %3776 to i8
  %3778 = and i8 %3777, 1
  %3779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3778, i8* %3779, align 1, !tbaa !2447
  %3780 = icmp eq i32 %3764, 0
  %3781 = zext i1 %3780 to i8
  %3782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3781, i8* %3782, align 1, !tbaa !2448
  %3783 = lshr i32 %3764, 31
  %3784 = trunc i32 %3783 to i8
  %3785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3784, i8* %3785, align 1, !tbaa !2449
  %3786 = lshr i32 %3759, 31
  %3787 = lshr i32 %3763, 31
  %3788 = xor i32 %3787, %3786
  %3789 = xor i32 %3783, %3786
  %3790 = add nuw nsw i32 %3789, %3788
  %3791 = icmp eq i32 %3790, 2
  %3792 = zext i1 %3791 to i8
  %3793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3792, i8* %3793, align 1, !tbaa !2450
  %3794 = load i64, i64* %PC
  %3795 = add i64 %3794, 80
  %3796 = load i64, i64* %PC
  %3797 = add i64 %3796, 6
  %3798 = load i64, i64* %PC
  %3799 = add i64 %3798, 6
  store i64 %3799, i64* %PC
  %3800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3801 = load i8, i8* %3800, align 1, !tbaa !2449
  %3802 = icmp ne i8 %3801, 0
  %3803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3804 = load i8, i8* %3803, align 1, !tbaa !2450
  %3805 = icmp ne i8 %3804, 0
  %3806 = xor i1 %3802, %3805
  %3807 = xor i1 %3806, true
  %3808 = zext i1 %3807 to i8
  store i8 %3808, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3810 = select i1 %3806, i64 %3797, i64 %3795
  store i64 %3810, i64* %3809, align 8, !tbaa !2428
  %3811 = load i8, i8* %BRANCH_TAKEN
  %3812 = icmp eq i8 %3811, 1
  %3813 = load i64, i64* %PC
  br i1 %3812, label %block_4015d6, label %block_40158c

block_4009b7:                                     ; preds = %block_40095d
  %3814 = add i64 %4158, 10
  store i64 %3814, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  %3815 = load i64, i64* %PC
  %3816 = add i64 %3815, 10
  store i64 %3816, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  %3817 = load i64, i64* %PC
  %3818 = add i64 %3817, 10
  store i64 %3818, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %3819 = load i64, i64* %PC
  %3820 = add i64 %3819, 7
  store i64 %3820, i64* %PC
  %3821 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %3822 = zext i32 %3821 to i64
  store i64 %3822, i64* %RDI, align 8, !tbaa !2428
  %3823 = load i64, i64* %PC
  %3824 = add i64 %3823, 7
  store i64 %3824, i64* %PC
  %3825 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %3826 = zext i32 %3825 to i64
  store i64 %3826, i64* %RDX, align 8, !tbaa !2428
  %3827 = load i64, i64* %PC
  %3828 = add i64 %3827, 7
  store i64 %3828, i64* %PC
  %3829 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %3830 = zext i32 %3829 to i64
  store i64 %3830, i64* %RCX, align 8, !tbaa !2428
  %3831 = load i64, i64* %PC
  %3832 = add i64 %3831, 5574
  %3833 = load i64, i64* %PC
  %3834 = add i64 %3833, 5
  %3835 = load i64, i64* %PC
  %3836 = add i64 %3835, 5
  store i64 %3836, i64* %PC
  %3837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3838 = load i64, i64* %3837, align 8, !tbaa !2428
  %3839 = add i64 %3838, -8
  %3840 = inttoptr i64 %3839 to i64*
  store i64 %3834, i64* %3840
  store i64 %3839, i64* %3837, align 8, !tbaa !2428
  %3841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3832, i64* %3841, align 8, !tbaa !2428
  %3842 = load i64, i64* %PC
  %3843 = call %struct.Memory* @sub_401fb0_dmxpy(%struct.State* %0, i64 %3842, %struct.Memory* %MEMORY.9)
  %3844 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3845 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3846 = bitcast %union.vec128_t* %XMM0 to i8*
  %3847 = load i64, i64* %PC
  %3848 = add i64 %3847, 3
  store i64 %3848, i64* %PC
  %3849 = bitcast i8* %3845 to i64*
  %3850 = load i64, i64* %3849, align 1
  %3851 = getelementptr inbounds i8, i8* %3845, i64 8
  %3852 = bitcast i8* %3851 to i64*
  %3853 = load i64, i64* %3852, align 1
  %3854 = bitcast i8* %3846 to i64*
  %3855 = load i64, i64* %3854, align 1
  %3856 = getelementptr inbounds i8, i8* %3846, i64 8
  %3857 = bitcast i8* %3856 to i64*
  %3858 = load i64, i64* %3857, align 1
  %3859 = xor i64 %3855, %3850
  %3860 = xor i64 %3858, %3853
  %3861 = trunc i64 %3859 to i32
  %3862 = lshr i64 %3859, 32
  %3863 = trunc i64 %3862 to i32
  %3864 = bitcast i8* %3844 to i32*
  store i32 %3861, i32* %3864, align 1, !tbaa !2456
  %3865 = getelementptr inbounds i8, i8* %3844, i64 4
  %3866 = bitcast i8* %3865 to i32*
  store i32 %3863, i32* %3866, align 1, !tbaa !2456
  %3867 = trunc i64 %3860 to i32
  %3868 = getelementptr inbounds i8, i8* %3844, i64 8
  %3869 = bitcast i8* %3868 to i32*
  store i32 %3867, i32* %3869, align 1, !tbaa !2456
  %3870 = lshr i64 %3860, 32
  %3871 = trunc i64 %3870 to i32
  %3872 = getelementptr inbounds i8, i8* %3844, i64 12
  %3873 = bitcast i8* %3872 to i32*
  store i32 %3871, i32* %3873, align 1, !tbaa !2456
  %3874 = load i64, i64* %RBP
  %3875 = sub i64 %3874, 28
  %3876 = bitcast %union.vec128_t* %XMM0 to i8*
  %3877 = load i64, i64* %PC
  %3878 = add i64 %3877, 5
  store i64 %3878, i64* %PC
  %3879 = bitcast i8* %3876 to <2 x float>*
  %3880 = load <2 x float>, <2 x float>* %3879, align 1
  %3881 = extractelement <2 x float> %3880, i32 0
  %3882 = inttoptr i64 %3875 to float*
  store float %3881, float* %3882
  %3883 = load i64, i64* %RBP
  %3884 = sub i64 %3883, 24
  %3885 = bitcast %union.vec128_t* %XMM0 to i8*
  %3886 = load i64, i64* %PC
  %3887 = add i64 %3886, 5
  store i64 %3887, i64* %PC
  %3888 = bitcast i8* %3885 to <2 x float>*
  %3889 = load <2 x float>, <2 x float>* %3888, align 1
  %3890 = extractelement <2 x float> %3889, i32 0
  %3891 = inttoptr i64 %3884 to float*
  store float %3890, float* %3891
  %3892 = load i64, i64* %PC
  %3893 = add i64 %3892, 11
  store i64 %3893, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400a07

block_401536:                                     ; preds = %block_4014b0
  %3894 = sub i64 %2269, 3926
  %3895 = load i64, i64* %PC
  %3896 = add i64 %3895, 5
  %3897 = load i64, i64* %PC
  %3898 = add i64 %3897, 5
  store i64 %3898, i64* %PC
  %3899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3900 = load i64, i64* %3899, align 8, !tbaa !2428
  %3901 = add i64 %3900, -8
  %3902 = inttoptr i64 %3901 to i64*
  store i64 %3896, i64* %3902
  store i64 %3901, i64* %3899, align 8, !tbaa !2428
  %3903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3894, i64* %3903, align 8, !tbaa !2428
  %3904 = load i64, i64* %PC
  %3905 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %3904, %struct.Memory* %MEMORY.4)
  %3906 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3907 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3908 = load i64, i64* %RBP
  %3909 = sub i64 %3908, 40
  %3910 = load i64, i64* %PC
  %3911 = add i64 %3910, 5
  store i64 %3911, i64* %PC
  %3912 = bitcast i8* %3907 to <2 x float>*
  %3913 = load <2 x float>, <2 x float>* %3912, align 1
  %3914 = getelementptr inbounds i8, i8* %3907, i64 8
  %3915 = bitcast i8* %3914 to <2 x i32>*
  %3916 = load <2 x i32>, <2 x i32>* %3915, align 1
  %3917 = inttoptr i64 %3909 to float*
  %3918 = load float, float* %3917
  %3919 = extractelement <2 x float> %3913, i32 0
  %3920 = fsub float %3919, %3918
  %3921 = bitcast i8* %3906 to float*
  store float %3920, float* %3921, align 1, !tbaa !2452
  %3922 = bitcast <2 x float> %3913 to <2 x i32>
  %3923 = extractelement <2 x i32> %3922, i32 1
  %3924 = getelementptr inbounds i8, i8* %3906, i64 4
  %3925 = bitcast i8* %3924 to i32*
  store i32 %3923, i32* %3925, align 1, !tbaa !2452
  %3926 = extractelement <2 x i32> %3916, i32 0
  %3927 = getelementptr inbounds i8, i8* %3906, i64 8
  %3928 = bitcast i8* %3927 to i32*
  store i32 %3926, i32* %3928, align 1, !tbaa !2452
  %3929 = extractelement <2 x i32> %3916, i32 1
  %3930 = getelementptr inbounds i8, i8* %3906, i64 12
  %3931 = bitcast i8* %3930 to i32*
  store i32 %3929, i32* %3931, align 1, !tbaa !2452
  %3932 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3933 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3934 = load i64, i64* %RBP
  %3935 = sub i64 %3934, 44
  %3936 = load i64, i64* %PC
  %3937 = add i64 %3936, 5
  store i64 %3937, i64* %PC
  %3938 = bitcast i8* %3933 to <2 x float>*
  %3939 = load <2 x float>, <2 x float>* %3938, align 1
  %3940 = getelementptr inbounds i8, i8* %3933, i64 8
  %3941 = bitcast i8* %3940 to <2 x i32>*
  %3942 = load <2 x i32>, <2 x i32>* %3941, align 1
  %3943 = inttoptr i64 %3935 to float*
  %3944 = load float, float* %3943
  %3945 = extractelement <2 x float> %3939, i32 0
  %3946 = fsub float %3945, %3944
  %3947 = bitcast i8* %3932 to float*
  store float %3946, float* %3947, align 1, !tbaa !2452
  %3948 = bitcast <2 x float> %3939 to <2 x i32>
  %3949 = extractelement <2 x i32> %3948, i32 1
  %3950 = getelementptr inbounds i8, i8* %3932, i64 4
  %3951 = bitcast i8* %3950 to i32*
  store i32 %3949, i32* %3951, align 1, !tbaa !2452
  %3952 = extractelement <2 x i32> %3942, i32 0
  %3953 = getelementptr inbounds i8, i8* %3932, i64 8
  %3954 = bitcast i8* %3953 to i32*
  store i32 %3952, i32* %3954, align 1, !tbaa !2452
  %3955 = extractelement <2 x i32> %3942, i32 1
  %3956 = getelementptr inbounds i8, i8* %3932, i64 12
  %3957 = bitcast i8* %3956 to i32*
  store i32 %3955, i32* %3957, align 1, !tbaa !2452
  %3958 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3959 = load i64, i64* %PC
  %3960 = add i64 %3959, 9
  store i64 %3960, i64* %PC
  %3961 = bitcast i8* %3958 to <2 x i32>*
  %3962 = load <2 x i32>, <2 x i32>* %3961, align 1
  %3963 = getelementptr inbounds i8, i8* %3958, i64 8
  %3964 = bitcast i8* %3963 to <2 x i32>*
  %3965 = load <2 x i32>, <2 x i32>* %3964, align 1
  %3966 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %3967 = sitofp i32 %3966 to float
  %3968 = bitcast i8* %3958 to float*
  store float %3967, float* %3968, align 1, !tbaa !2452
  %3969 = extractelement <2 x i32> %3962, i32 1
  %3970 = getelementptr inbounds i8, i8* %3958, i64 4
  %3971 = bitcast i8* %3970 to i32*
  store i32 %3969, i32* %3971, align 1, !tbaa !2452
  %3972 = extractelement <2 x i32> %3965, i32 0
  %3973 = bitcast i8* %3963 to i32*
  store i32 %3972, i32* %3973, align 1, !tbaa !2452
  %3974 = extractelement <2 x i32> %3965, i32 1
  %3975 = getelementptr inbounds i8, i8* %3958, i64 12
  %3976 = bitcast i8* %3975 to i32*
  store i32 %3974, i32* %3976, align 1, !tbaa !2452
  %3977 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3979 = bitcast %union.vec128_t* %XMM1 to i8*
  %3980 = load i64, i64* %PC
  %3981 = add i64 %3980, 4
  store i64 %3981, i64* %PC
  %3982 = bitcast i8* %3978 to <2 x float>*
  %3983 = load <2 x float>, <2 x float>* %3982, align 1
  %3984 = getelementptr inbounds i8, i8* %3978, i64 8
  %3985 = bitcast i8* %3984 to <2 x i32>*
  %3986 = load <2 x i32>, <2 x i32>* %3985, align 1
  %3987 = bitcast i8* %3979 to <2 x float>*
  %3988 = load <2 x float>, <2 x float>* %3987, align 1
  %3989 = extractelement <2 x float> %3983, i32 0
  %3990 = extractelement <2 x float> %3988, i32 0
  %3991 = fdiv float %3989, %3990
  %3992 = bitcast i8* %3977 to float*
  store float %3991, float* %3992, align 1, !tbaa !2452
  %3993 = bitcast <2 x float> %3983 to <2 x i32>
  %3994 = extractelement <2 x i32> %3993, i32 1
  %3995 = getelementptr inbounds i8, i8* %3977, i64 4
  %3996 = bitcast i8* %3995 to i32*
  store i32 %3994, i32* %3996, align 1, !tbaa !2452
  %3997 = extractelement <2 x i32> %3986, i32 0
  %3998 = getelementptr inbounds i8, i8* %3977, i64 8
  %3999 = bitcast i8* %3998 to i32*
  store i32 %3997, i32* %3999, align 1, !tbaa !2452
  %4000 = extractelement <2 x i32> %3986, i32 1
  %4001 = getelementptr inbounds i8, i8* %3977, i64 12
  %4002 = bitcast i8* %4001 to i32*
  store i32 %4000, i32* %4002, align 1, !tbaa !2452
  %4003 = load i64, i64* %PC
  %4004 = add i64 %4003, 8
  store i64 %4004, i64* %PC
  %4005 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4006 = sext i32 %4005 to i64
  store i64 %4006, i64* %RAX, align 8, !tbaa !2428
  %4007 = load i64, i64* %RAX
  %4008 = mul i64 %4007, 4
  %4009 = add i64 %4008, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %4010 = bitcast %union.vec128_t* %XMM0 to i8*
  %4011 = load i64, i64* %PC
  %4012 = add i64 %4011, 9
  store i64 %4012, i64* %PC
  %4013 = bitcast i8* %4010 to <2 x float>*
  %4014 = load <2 x float>, <2 x float>* %4013, align 1
  %4015 = extractelement <2 x float> %4014, i32 0
  %4016 = inttoptr i64 %4009 to float*
  store float %4015, float* %4016
  %4017 = load i64, i64* %PC
  %4018 = sub i64 %4017, 3971
  %4019 = load i64, i64* %PC
  %4020 = add i64 %4019, 5
  %4021 = load i64, i64* %PC
  %4022 = add i64 %4021, 5
  store i64 %4022, i64* %PC
  %4023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4024 = load i64, i64* %4023, align 8, !tbaa !2428
  %4025 = add i64 %4024, -8
  %4026 = inttoptr i64 %4025 to i64*
  store i64 %4020, i64* %4026
  store i64 %4025, i64* %4023, align 8, !tbaa !2428
  %4027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4018, i64* %4027, align 8, !tbaa !2428
  %4028 = load i64, i64* %PC
  %4029 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %4028, %struct.Memory* %3905)
  %4030 = load i64, i64* %RBP
  %4031 = sub i64 %4030, 40
  %4032 = bitcast %union.vec128_t* %XMM0 to i8*
  %4033 = load i64, i64* %PC
  %4034 = add i64 %4033, 5
  store i64 %4034, i64* %PC
  %4035 = bitcast i8* %4032 to <2 x float>*
  %4036 = load <2 x float>, <2 x float>* %4035, align 1
  %4037 = extractelement <2 x float> %4036, i32 0
  %4038 = inttoptr i64 %4031 to float*
  store float %4037, float* %4038
  %4039 = load i64, i64* %PC
  %4040 = add i64 %4039, 11
  store i64 %4040, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_401578

block_400eb4:                                     ; preds = %block_400e96, %block_400ec8
  %MEMORY.8 = phi %struct.Memory* [ %5275, %block_400e96 ], [ %2589, %block_400ec8 ]
  %4041 = load i64, i64* %PC
  %4042 = add i64 %4041, 7
  store i64 %4042, i64* %PC
  %4043 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4044 = zext i32 %4043 to i64
  store i64 %4044, i64* %RAX, align 8, !tbaa !2428
  %4045 = load i32, i32* %EAX
  %4046 = zext i32 %4045 to i64
  %4047 = load i64, i64* %PC
  %4048 = add i64 %4047, 7
  store i64 %4048, i64* %PC
  %4049 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4050 = sub i32 %4045, %4049
  %4051 = icmp ult i32 %4045, %4049
  %4052 = zext i1 %4051 to i8
  %4053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4052, i8* %4053, align 1, !tbaa !2432
  %4054 = and i32 %4050, 255
  %4055 = call i32 @llvm.ctpop.i32(i32 %4054) #16
  %4056 = trunc i32 %4055 to i8
  %4057 = and i8 %4056, 1
  %4058 = xor i8 %4057, 1
  %4059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4058, i8* %4059, align 1, !tbaa !2446
  %4060 = xor i32 %4049, %4045
  %4061 = xor i32 %4060, %4050
  %4062 = lshr i32 %4061, 4
  %4063 = trunc i32 %4062 to i8
  %4064 = and i8 %4063, 1
  %4065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4064, i8* %4065, align 1, !tbaa !2447
  %4066 = icmp eq i32 %4050, 0
  %4067 = zext i1 %4066 to i8
  %4068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4067, i8* %4068, align 1, !tbaa !2448
  %4069 = lshr i32 %4050, 31
  %4070 = trunc i32 %4069 to i8
  %4071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4070, i8* %4071, align 1, !tbaa !2449
  %4072 = lshr i32 %4045, 31
  %4073 = lshr i32 %4049, 31
  %4074 = xor i32 %4073, %4072
  %4075 = xor i32 %4069, %4072
  %4076 = add nuw nsw i32 %4075, %4074
  %4077 = icmp eq i32 %4076, 2
  %4078 = zext i1 %4077 to i8
  %4079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4078, i8* %4079, align 1, !tbaa !2450
  %4080 = load i64, i64* %PC
  %4081 = add i64 %4080, 120
  %4082 = load i64, i64* %PC
  %4083 = add i64 %4082, 6
  %4084 = load i64, i64* %PC
  %4085 = add i64 %4084, 6
  store i64 %4085, i64* %PC
  %4086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4087 = load i8, i8* %4086, align 1, !tbaa !2449
  %4088 = icmp ne i8 %4087, 0
  %4089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4090 = load i8, i8* %4089, align 1, !tbaa !2450
  %4091 = icmp ne i8 %4090, 0
  %4092 = xor i1 %4088, %4091
  %4093 = xor i1 %4092, true
  %4094 = zext i1 %4093 to i8
  store i8 %4094, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4096 = select i1 %4092, i64 %4083, i64 %4081
  store i64 %4096, i64* %4095, align 8, !tbaa !2428
  %4097 = load i8, i8* %BRANCH_TAKEN
  %4098 = icmp eq i8 %4097, 1
  %4099 = load i64, i64* %PC
  br i1 %4098, label %block_400f3a, label %block_400ec8

block_40095d:                                     ; preds = %block_400927, %block_400971
  %MEMORY.9 = phi %struct.Memory* [ %7184, %block_400927 ], [ %MEMORY.9, %block_400971 ]
  %4100 = load i64, i64* %PC
  %4101 = add i64 %4100, 7
  store i64 %4101, i64* %PC
  %4102 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4103 = zext i32 %4102 to i64
  store i64 %4103, i64* %RAX, align 8, !tbaa !2428
  %4104 = load i32, i32* %EAX
  %4105 = zext i32 %4104 to i64
  %4106 = load i64, i64* %PC
  %4107 = add i64 %4106, 7
  store i64 %4107, i64* %PC
  %4108 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %4109 = sub i32 %4104, %4108
  %4110 = icmp ult i32 %4104, %4108
  %4111 = zext i1 %4110 to i8
  %4112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4111, i8* %4112, align 1, !tbaa !2432
  %4113 = and i32 %4109, 255
  %4114 = call i32 @llvm.ctpop.i32(i32 %4113) #16
  %4115 = trunc i32 %4114 to i8
  %4116 = and i8 %4115, 1
  %4117 = xor i8 %4116, 1
  %4118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4117, i8* %4118, align 1, !tbaa !2446
  %4119 = xor i32 %4108, %4104
  %4120 = xor i32 %4119, %4109
  %4121 = lshr i32 %4120, 4
  %4122 = trunc i32 %4121 to i8
  %4123 = and i8 %4122, 1
  %4124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4123, i8* %4124, align 1, !tbaa !2447
  %4125 = icmp eq i32 %4109, 0
  %4126 = zext i1 %4125 to i8
  %4127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4126, i8* %4127, align 1, !tbaa !2448
  %4128 = lshr i32 %4109, 31
  %4129 = trunc i32 %4128 to i8
  %4130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4129, i8* %4130, align 1, !tbaa !2449
  %4131 = lshr i32 %4104, 31
  %4132 = lshr i32 %4108, 31
  %4133 = xor i32 %4132, %4131
  %4134 = xor i32 %4128, %4131
  %4135 = add nuw nsw i32 %4134, %4133
  %4136 = icmp eq i32 %4135, 2
  %4137 = zext i1 %4136 to i8
  %4138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4137, i8* %4138, align 1, !tbaa !2450
  %4139 = load i64, i64* %PC
  %4140 = add i64 %4139, 76
  %4141 = load i64, i64* %PC
  %4142 = add i64 %4141, 6
  %4143 = load i64, i64* %PC
  %4144 = add i64 %4143, 6
  store i64 %4144, i64* %PC
  %4145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4146 = load i8, i8* %4145, align 1, !tbaa !2449
  %4147 = icmp ne i8 %4146, 0
  %4148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4149 = load i8, i8* %4148, align 1, !tbaa !2450
  %4150 = icmp ne i8 %4149, 0
  %4151 = xor i1 %4147, %4150
  %4152 = xor i1 %4151, true
  %4153 = zext i1 %4152 to i8
  store i8 %4153, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4155 = select i1 %4151, i64 %4142, i64 %4140
  store i64 %4155, i64* %4154, align 8, !tbaa !2428
  %4156 = load i8, i8* %BRANCH_TAKEN
  %4157 = icmp eq i8 %4156, 1
  %4158 = load i64, i64* %PC
  br i1 %4157, label %block_4009b7, label %block_400971

block_400a1b:                                     ; preds = %block_400a07
  %4159 = load i64, i64* %RBP
  %4160 = sub i64 %4159, 28
  %4161 = load i64, i64* %PC
  %4162 = add i64 %4161, 5
  store i64 %4162, i64* %PC
  %4163 = inttoptr i64 %4160 to float*
  %4164 = load float, float* %4163
  %4165 = fpext float %4164 to double
  %4166 = bitcast i8* %7344 to double*
  store double %4165, double* %4166, align 1, !tbaa !2454
  %4167 = load i64, i64* %PC
  %4168 = add i64 %4167, 8
  store i64 %4168, i64* %PC
  %4169 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4170 = sext i32 %4169 to i64
  store i64 %4170, i64* %RAX, align 8, !tbaa !2428
  %4171 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4172 = load i64, i64* %RAX
  %4173 = mul i64 %4172, 4
  %4174 = add i64 %4173, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %4175 = load i64, i64* %PC
  %4176 = add i64 %4175, 9
  store i64 %4176, i64* %PC
  %4177 = inttoptr i64 %4174 to float*
  %4178 = load float, float* %4177
  %4179 = fpext float %4178 to double
  %4180 = bitcast i8* %4171 to double*
  store double %4179, double* %4180, align 1, !tbaa !2454
  %4181 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4182 = load i64, i64* %PC
  %4183 = add i64 %4182, 7
  store i64 %4183, i64* %PC
  %4184 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %4185 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %4186 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %4187 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %4188 = bitcast i8* %4181 to float*
  store float %4184, float* %4188, align 1, !tbaa !2452
  %4189 = getelementptr inbounds i8, i8* %4181, i64 4
  %4190 = bitcast i8* %4189 to float*
  store float %4185, float* %4190, align 1, !tbaa !2452
  %4191 = getelementptr inbounds i8, i8* %4181, i64 8
  %4192 = bitcast i8* %4191 to float*
  store float %4186, float* %4192, align 1, !tbaa !2452
  %4193 = getelementptr inbounds i8, i8* %4181, i64 12
  %4194 = bitcast i8* %4193 to float*
  store float %4187, float* %4194, align 1, !tbaa !2452
  %4195 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4196 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4197 = bitcast %union.vec128_t* %XMM2 to i8*
  %4198 = load i64, i64* %PC
  %4199 = add i64 %4198, 4
  store i64 %4199, i64* %PC
  %4200 = bitcast i8* %4196 to i64*
  %4201 = load i64, i64* %4200, align 1
  %4202 = getelementptr inbounds i8, i8* %4196, i64 8
  %4203 = bitcast i8* %4202 to i64*
  %4204 = load i64, i64* %4203, align 1
  %4205 = bitcast i8* %4197 to i64*
  %4206 = load i64, i64* %4205, align 1
  %4207 = getelementptr inbounds i8, i8* %4197, i64 8
  %4208 = bitcast i8* %4207 to i64*
  %4209 = load i64, i64* %4208, align 1
  %4210 = and i64 %4206, %4201
  %4211 = and i64 %4209, %4204
  %4212 = trunc i64 %4210 to i32
  %4213 = lshr i64 %4210, 32
  %4214 = trunc i64 %4213 to i32
  %4215 = bitcast i8* %4195 to i32*
  store i32 %4212, i32* %4215, align 1, !tbaa !2456
  %4216 = getelementptr inbounds i8, i8* %4195, i64 4
  %4217 = bitcast i8* %4216 to i32*
  store i32 %4214, i32* %4217, align 1, !tbaa !2456
  %4218 = trunc i64 %4211 to i32
  %4219 = getelementptr inbounds i8, i8* %4195, i64 8
  %4220 = bitcast i8* %4219 to i32*
  store i32 %4218, i32* %4220, align 1, !tbaa !2456
  %4221 = lshr i64 %4211, 32
  %4222 = trunc i64 %4221 to i32
  %4223 = getelementptr inbounds i8, i8* %4195, i64 12
  %4224 = bitcast i8* %4223 to i32*
  store i32 %4222, i32* %4224, align 1, !tbaa !2456
  %4225 = bitcast %union.vec128_t* %XMM0 to i8*
  %4226 = bitcast %union.vec128_t* %XMM1 to i8*
  %4227 = load i64, i64* %PC
  %4228 = add i64 %4227, 4
  store i64 %4228, i64* %PC
  %4229 = bitcast i8* %4225 to double*
  %4230 = load double, double* %4229, align 1
  %4231 = bitcast i8* %4226 to double*
  %4232 = load double, double* %4231, align 1
  %4233 = fcmp uno double %4230, %4232
  br i1 %4233, label %4234, label %4246

; <label>:4234:                                   ; preds = %block_400a1b
  %4235 = fadd double %4230, %4232
  %4236 = bitcast double %4235 to i64
  %4237 = and i64 %4236, 9221120237041090560
  %4238 = icmp eq i64 %4237, 9218868437227405312
  %4239 = and i64 %4236, 2251799813685247
  %4240 = icmp ne i64 %4239, 0
  %4241 = and i1 %4238, %4240
  br i1 %4241, label %4242, label %4252

; <label>:4242:                                   ; preds = %4234
  %4243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4244 = load i64, i64* %4243, align 8, !tbaa !2428
  %4245 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4244, %struct.Memory* %MEMORY.18) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:4246:                                   ; preds = %block_400a1b
  %4247 = fcmp ogt double %4230, %4232
  br i1 %4247, label %4252, label %4248

; <label>:4248:                                   ; preds = %4246
  %4249 = fcmp olt double %4230, %4232
  br i1 %4249, label %4252, label %4250

; <label>:4250:                                   ; preds = %4248
  %4251 = fcmp oeq double %4230, %4232
  br i1 %4251, label %4252, label %4259

; <label>:4252:                                   ; preds = %4250, %4248, %4246, %4234
  %4253 = phi i8 [ 0, %4246 ], [ 0, %4248 ], [ 1, %4250 ], [ 1, %4234 ]
  %4254 = phi i8 [ 0, %4246 ], [ 0, %4248 ], [ 0, %4250 ], [ 1, %4234 ]
  %4255 = phi i8 [ 0, %4246 ], [ 1, %4248 ], [ 0, %4250 ], [ 1, %4234 ]
  %4256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4253, i8* %4256, align 1, !tbaa !2451
  %4257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4254, i8* %4257, align 1, !tbaa !2451
  %4258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4255, i8* %4258, align 1, !tbaa !2451
  br label %4259

; <label>:4259:                                   ; preds = %4252, %4250
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4260, align 1, !tbaa !2451
  %4261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4261, align 1, !tbaa !2451
  %4262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4262, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %4242, %4259
  %4263 = phi %struct.Memory* [ %4245, %4242 ], [ %MEMORY.18, %4259 ]
  %4264 = load i64, i64* %PC
  %4265 = add i64 %4264, 24
  %4266 = load i64, i64* %PC
  %4267 = add i64 %4266, 6
  %4268 = load i64, i64* %PC
  %4269 = add i64 %4268, 6
  store i64 %4269, i64* %PC
  %4270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4271 = load i8, i8* %4270, align 1, !tbaa !2432
  %4272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4273 = load i8, i8* %4272, align 1, !tbaa !2448
  %4274 = or i8 %4273, %4271
  %4275 = icmp ne i8 %4274, 0
  %4276 = zext i1 %4275 to i8
  store i8 %4276, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4278 = select i1 %4275, i64 %4265, i64 %4267
  store i64 %4278, i64* %4277, align 8, !tbaa !2428
  %4279 = load i8, i8* %BRANCH_TAKEN
  %4280 = icmp eq i8 %4279, 1
  br i1 %4280, label %block_400a58, label %block_400a46

block_4013aa:                                     ; preds = %block_401359
  %4281 = sub i64 %5398, 3530
  %4282 = load i64, i64* %PC
  %4283 = add i64 %4282, 5
  %4284 = load i64, i64* %PC
  %4285 = add i64 %4284, 5
  store i64 %4285, i64* %PC
  %4286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4287 = load i64, i64* %4286, align 8, !tbaa !2428
  %4288 = add i64 %4287, -8
  %4289 = inttoptr i64 %4288 to i64*
  store i64 %4283, i64* %4289
  store i64 %4288, i64* %4286, align 8, !tbaa !2428
  %4290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4281, i64* %4290, align 8, !tbaa !2428
  %4291 = load i64, i64* %PC
  %4292 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %4291, %struct.Memory* %MEMORY.12)
  %4293 = load i64, i64* %PC
  %4294 = add i64 %4293, 10
  store i64 %4294, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %4295 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4296 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4297 = bitcast %union.vec128_t* %XMM1 to i8*
  %4298 = load i64, i64* %PC
  %4299 = add i64 %4298, 3
  store i64 %4299, i64* %PC
  %4300 = bitcast i8* %4296 to i64*
  %4301 = load i64, i64* %4300, align 1
  %4302 = getelementptr inbounds i8, i8* %4296, i64 8
  %4303 = bitcast i8* %4302 to i64*
  %4304 = load i64, i64* %4303, align 1
  %4305 = bitcast i8* %4297 to i64*
  %4306 = load i64, i64* %4305, align 1
  %4307 = getelementptr inbounds i8, i8* %4297, i64 8
  %4308 = bitcast i8* %4307 to i64*
  %4309 = load i64, i64* %4308, align 1
  %4310 = xor i64 %4306, %4301
  %4311 = xor i64 %4309, %4304
  %4312 = trunc i64 %4310 to i32
  %4313 = lshr i64 %4310, 32
  %4314 = trunc i64 %4313 to i32
  %4315 = bitcast i8* %4295 to i32*
  store i32 %4312, i32* %4315, align 1, !tbaa !2456
  %4316 = getelementptr inbounds i8, i8* %4295, i64 4
  %4317 = bitcast i8* %4316 to i32*
  store i32 %4314, i32* %4317, align 1, !tbaa !2456
  %4318 = trunc i64 %4311 to i32
  %4319 = getelementptr inbounds i8, i8* %4295, i64 8
  %4320 = bitcast i8* %4319 to i32*
  store i32 %4318, i32* %4320, align 1, !tbaa !2456
  %4321 = lshr i64 %4311, 32
  %4322 = trunc i64 %4321 to i32
  %4323 = getelementptr inbounds i8, i8* %4295, i64 12
  %4324 = bitcast i8* %4323 to i32*
  store i32 %4322, i32* %4324, align 1, !tbaa !2456
  %4325 = load i64, i64* %RBP
  %4326 = sub i64 %4325, 84
  %4327 = bitcast %union.vec128_t* %XMM0 to i8*
  %4328 = load i64, i64* %PC
  %4329 = add i64 %4328, 5
  store i64 %4329, i64* %PC
  %4330 = bitcast i8* %4327 to <2 x float>*
  %4331 = load <2 x float>, <2 x float>* %4330, align 1
  %4332 = extractelement <2 x float> %4331, i32 0
  %4333 = inttoptr i64 %4326 to float*
  store float %4332, float* %4333
  %4334 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4335 = load i64, i64* %RBP
  %4336 = sub i64 %4335, 84
  %4337 = load i64, i64* %PC
  %4338 = add i64 %4337, 5
  store i64 %4338, i64* %PC
  %4339 = inttoptr i64 %4336 to float*
  %4340 = load float, float* %4339
  %4341 = bitcast i8* %4334 to float*
  store float %4340, float* %4341, align 1, !tbaa !2452
  %4342 = getelementptr inbounds i8, i8* %4334, i64 4
  %4343 = bitcast i8* %4342 to float*
  store float 0.000000e+00, float* %4343, align 1, !tbaa !2452
  %4344 = getelementptr inbounds i8, i8* %4334, i64 8
  %4345 = bitcast i8* %4344 to float*
  store float 0.000000e+00, float* %4345, align 1, !tbaa !2452
  %4346 = getelementptr inbounds i8, i8* %4334, i64 12
  %4347 = bitcast i8* %4346 to float*
  store float 0.000000e+00, float* %4347, align 1, !tbaa !2452
  %4348 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4349 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4350 = load i64, i64* %RBP
  %4351 = sub i64 %4350, 80
  %4352 = load i64, i64* %PC
  %4353 = add i64 %4352, 5
  store i64 %4353, i64* %PC
  %4354 = bitcast i8* %4349 to <2 x float>*
  %4355 = load <2 x float>, <2 x float>* %4354, align 1
  %4356 = getelementptr inbounds i8, i8* %4349, i64 8
  %4357 = bitcast i8* %4356 to <2 x i32>*
  %4358 = load <2 x i32>, <2 x i32>* %4357, align 1
  %4359 = inttoptr i64 %4351 to float*
  %4360 = load float, float* %4359
  %4361 = extractelement <2 x float> %4355, i32 0
  %4362 = fsub float %4361, %4360
  %4363 = bitcast i8* %4348 to float*
  store float %4362, float* %4363, align 1, !tbaa !2452
  %4364 = bitcast <2 x float> %4355 to <2 x i32>
  %4365 = extractelement <2 x i32> %4364, i32 1
  %4366 = getelementptr inbounds i8, i8* %4348, i64 4
  %4367 = bitcast i8* %4366 to i32*
  store i32 %4365, i32* %4367, align 1, !tbaa !2452
  %4368 = extractelement <2 x i32> %4358, i32 0
  %4369 = getelementptr inbounds i8, i8* %4348, i64 8
  %4370 = bitcast i8* %4369 to i32*
  store i32 %4368, i32* %4370, align 1, !tbaa !2452
  %4371 = extractelement <2 x i32> %4358, i32 1
  %4372 = getelementptr inbounds i8, i8* %4348, i64 12
  %4373 = bitcast i8* %4372 to i32*
  store i32 %4371, i32* %4373, align 1, !tbaa !2452
  %4374 = load i64, i64* %RBP
  %4375 = sub i64 %4374, 76
  %4376 = bitcast %union.vec128_t* %XMM0 to i8*
  %4377 = load i64, i64* %PC
  %4378 = add i64 %4377, 5
  store i64 %4378, i64* %PC
  %4379 = bitcast i8* %4376 to <2 x float>*
  %4380 = load <2 x float>, <2 x float>* %4379, align 1
  %4381 = extractelement <2 x float> %4380, i32 0
  %4382 = inttoptr i64 %4375 to float*
  store float %4381, float* %4382
  %4383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4384 = load i64, i64* %RBP
  %4385 = sub i64 %4384, 76
  %4386 = load i64, i64* %PC
  %4387 = add i64 %4386, 5
  store i64 %4387, i64* %PC
  %4388 = inttoptr i64 %4385 to float*
  %4389 = load float, float* %4388
  %4390 = fpext float %4389 to double
  %4391 = bitcast i8* %4383 to double*
  store double %4390, double* %4391, align 1, !tbaa !2454
  %4392 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4393 = load i64, i64* %RBP
  %4394 = sub i64 %4393, 68
  %4395 = load i64, i64* %PC
  %4396 = add i64 %4395, 5
  store i64 %4396, i64* %PC
  %4397 = inttoptr i64 %4394 to i32*
  %4398 = load i32, i32* %4397
  %4399 = sitofp i32 %4398 to double
  %4400 = bitcast i8* %4392 to double*
  store double %4399, double* %4400, align 1, !tbaa !2454
  %4401 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4402 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4403 = bitcast %union.vec128_t* %XMM2 to i8*
  %4404 = load i64, i64* %PC
  %4405 = add i64 %4404, 4
  store i64 %4405, i64* %PC
  %4406 = bitcast i8* %4402 to double*
  %4407 = load double, double* %4406, align 1
  %4408 = getelementptr inbounds i8, i8* %4402, i64 8
  %4409 = bitcast i8* %4408 to i64*
  %4410 = load i64, i64* %4409, align 1
  %4411 = bitcast i8* %4403 to double*
  %4412 = load double, double* %4411, align 1
  %4413 = fdiv double %4407, %4412
  %4414 = bitcast i8* %4401 to double*
  store double %4413, double* %4414, align 1, !tbaa !2454
  %4415 = getelementptr inbounds i8, i8* %4401, i64 8
  %4416 = bitcast i8* %4415 to i64*
  store i64 %4410, i64* %4416, align 1, !tbaa !2454
  %4417 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4418 = bitcast %union.vec128_t* %XMM0 to i8*
  %4419 = load i64, i64* %PC
  %4420 = add i64 %4419, 4
  store i64 %4420, i64* %PC
  %4421 = bitcast i8* %4417 to <2 x i32>*
  %4422 = load <2 x i32>, <2 x i32>* %4421, align 1
  %4423 = getelementptr inbounds i8, i8* %4417, i64 8
  %4424 = bitcast i8* %4423 to <2 x i32>*
  %4425 = load <2 x i32>, <2 x i32>* %4424, align 1
  %4426 = bitcast i8* %4418 to double*
  %4427 = load double, double* %4426, align 1
  %4428 = fptrunc double %4427 to float
  %4429 = bitcast i8* %4417 to float*
  store float %4428, float* %4429, align 1, !tbaa !2452
  %4430 = extractelement <2 x i32> %4422, i32 1
  %4431 = getelementptr inbounds i8, i8* %4417, i64 4
  %4432 = bitcast i8* %4431 to i32*
  store i32 %4430, i32* %4432, align 1, !tbaa !2452
  %4433 = extractelement <2 x i32> %4425, i32 0
  %4434 = bitcast i8* %4423 to i32*
  store i32 %4433, i32* %4434, align 1, !tbaa !2452
  %4435 = extractelement <2 x i32> %4425, i32 1
  %4436 = getelementptr inbounds i8, i8* %4417, i64 12
  %4437 = bitcast i8* %4436 to i32*
  store i32 %4435, i32* %4437, align 1, !tbaa !2452
  %4438 = load i64, i64* %RBP
  %4439 = sub i64 %4438, 76
  %4440 = bitcast %union.vec128_t* %XMM0 to i8*
  %4441 = load i64, i64* %PC
  %4442 = add i64 %4441, 5
  store i64 %4442, i64* %PC
  %4443 = bitcast i8* %4440 to <2 x float>*
  %4444 = load <2 x float>, <2 x float>* %4443, align 1
  %4445 = extractelement <2 x float> %4444, i32 0
  %4446 = inttoptr i64 %4439 to float*
  store float %4445, float* %4446
  %4447 = load i64, i64* %PC
  %4448 = add i64 %4447, 8
  store i64 %4448, i64* %PC
  %4449 = load i64, i64* @stderr
  store i64 %4449, i64* %RDI, align 8, !tbaa !2428
  %4450 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4451 = bitcast %union.vec128_t* %XMM1 to i8*
  %4452 = load i64, i64* %PC
  %4453 = add i64 %4452, 3
  store i64 %4453, i64* %PC
  %4454 = bitcast i8* %4451 to <2 x i32>*
  %4455 = load <2 x i32>, <2 x i32>* %4454, align 1
  %4456 = getelementptr inbounds i8, i8* %4451, i64 8
  %4457 = bitcast i8* %4456 to <2 x i32>*
  %4458 = load <2 x i32>, <2 x i32>* %4457, align 1
  %4459 = extractelement <2 x i32> %4455, i32 0
  %4460 = bitcast i8* %4450 to i32*
  store i32 %4459, i32* %4460, align 1, !tbaa !2452
  %4461 = extractelement <2 x i32> %4455, i32 1
  %4462 = getelementptr inbounds i8, i8* %4450, i64 4
  %4463 = bitcast i8* %4462 to i32*
  store i32 %4461, i32* %4463, align 1, !tbaa !2452
  %4464 = extractelement <2 x i32> %4458, i32 0
  %4465 = getelementptr inbounds i8, i8* %4450, i64 8
  %4466 = bitcast i8* %4465 to i32*
  store i32 %4464, i32* %4466, align 1, !tbaa !2452
  %4467 = extractelement <2 x i32> %4458, i32 1
  %4468 = getelementptr inbounds i8, i8* %4450, i64 12
  %4469 = bitcast i8* %4468 to i32*
  store i32 %4467, i32* %4469, align 1, !tbaa !2452
  %4470 = load i64, i64* %PC
  %4471 = add i64 %4470, 2
  store i64 %4471, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %4472 = load i64, i64* %PC
  %4473 = sub i64 %4472, 3860
  %4474 = load i64, i64* %PC
  %4475 = add i64 %4474, 5
  %4476 = load i64, i64* %PC
  %4477 = add i64 %4476, 5
  store i64 %4477, i64* %PC
  %4478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4479 = load i64, i64* %4478, align 8, !tbaa !2428
  %4480 = add i64 %4479, -8
  %4481 = inttoptr i64 %4480 to i64*
  store i64 %4475, i64* %4481
  store i64 %4480, i64* %4478, align 8, !tbaa !2428
  %4482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4473, i64* %4482, align 8, !tbaa !2428
  %4483 = load i64, i64* %PC
  %4484 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4483, %struct.Memory* %4292)
  %4485 = load i64, i64* %PC
  %4486 = add i64 %4485, 10
  store i64 %4486, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %4487 = load i64, i64* %PC
  %4488 = add i64 %4487, 8
  store i64 %4488, i64* %PC
  %4489 = load i64, i64* @stderr
  store i64 %4489, i64* %RDI, align 8, !tbaa !2428
  %4490 = load i64, i64* %PC
  %4491 = add i64 %4490, 7
  store i64 %4491, i64* %PC
  %4492 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %4493 = zext i32 %4492 to i64
  store i64 %4493, i64* %RDX, align 8, !tbaa !2428
  %4494 = load i64, i64* %RBP
  %4495 = sub i64 %4494, 980
  %4496 = load i32, i32* %EAX
  %4497 = zext i32 %4496 to i64
  %4498 = load i64, i64* %PC
  %4499 = add i64 %4498, 6
  store i64 %4499, i64* %PC
  %4500 = inttoptr i64 %4495 to i32*
  store i32 %4496, i32* %4500
  %4501 = load i64, i64* %PC
  %4502 = add i64 %4501, 2
  store i64 %4502, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4503 = load i64, i64* %PC
  %4504 = sub i64 %4503, 3898
  %4505 = load i64, i64* %PC
  %4506 = add i64 %4505, 5
  %4507 = load i64, i64* %PC
  %4508 = add i64 %4507, 5
  store i64 %4508, i64* %PC
  %4509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4510 = load i64, i64* %4509, align 8, !tbaa !2428
  %4511 = add i64 %4510, -8
  %4512 = inttoptr i64 %4511 to i64*
  store i64 %4506, i64* %4512
  store i64 %4511, i64* %4509, align 8, !tbaa !2428
  %4513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4504, i64* %4513, align 8, !tbaa !2428
  %4514 = load i64, i64* %PC
  %4515 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4514, %struct.Memory* %4484)
  %4516 = load i64, i64* %PC
  %4517 = add i64 %4516, 10
  store i64 %4517, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %4518 = load i64, i64* %PC
  %4519 = add i64 %4518, 8
  store i64 %4519, i64* %PC
  %4520 = load i64, i64* @stderr
  store i64 %4520, i64* %RDI, align 8, !tbaa !2428
  %4521 = load i64, i64* %RBP
  %4522 = sub i64 %4521, 984
  %4523 = load i32, i32* %EAX
  %4524 = zext i32 %4523 to i64
  %4525 = load i64, i64* %PC
  %4526 = add i64 %4525, 6
  store i64 %4526, i64* %PC
  %4527 = inttoptr i64 %4522 to i32*
  store i32 %4523, i32* %4527
  %4528 = load i64, i64* %PC
  %4529 = add i64 %4528, 2
  store i64 %4529, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4530 = load i64, i64* %PC
  %4531 = sub i64 %4530, 3929
  %4532 = load i64, i64* %PC
  %4533 = add i64 %4532, 5
  %4534 = load i64, i64* %PC
  %4535 = add i64 %4534, 5
  store i64 %4535, i64* %PC
  %4536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4537 = load i64, i64* %4536, align 8, !tbaa !2428
  %4538 = add i64 %4537, -8
  %4539 = inttoptr i64 %4538 to i64*
  store i64 %4533, i64* %4539
  store i64 %4538, i64* %4536, align 8, !tbaa !2428
  %4540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4531, i64* %4540, align 8, !tbaa !2428
  %4541 = load i64, i64* %PC
  %4542 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4541, %struct.Memory* %4515)
  %4543 = load i64, i64* %PC
  %4544 = add i64 %4543, 10
  store i64 %4544, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %4545 = load i64, i64* %PC
  %4546 = add i64 %4545, 8
  store i64 %4546, i64* %PC
  %4547 = load i64, i64* @stderr
  store i64 %4547, i64* %RDI, align 8, !tbaa !2428
  %4548 = load i64, i64* %RBP
  %4549 = sub i64 %4548, 988
  %4550 = load i32, i32* %EAX
  %4551 = zext i32 %4550 to i64
  %4552 = load i64, i64* %PC
  %4553 = add i64 %4552, 6
  store i64 %4553, i64* %PC
  %4554 = inttoptr i64 %4549 to i32*
  store i32 %4550, i32* %4554
  %4555 = load i64, i64* %PC
  %4556 = add i64 %4555, 2
  store i64 %4556, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4557 = load i64, i64* %PC
  %4558 = sub i64 %4557, 3960
  %4559 = load i64, i64* %PC
  %4560 = add i64 %4559, 5
  %4561 = load i64, i64* %PC
  %4562 = add i64 %4561, 5
  store i64 %4562, i64* %PC
  %4563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4564 = load i64, i64* %4563, align 8, !tbaa !2428
  %4565 = add i64 %4564, -8
  %4566 = inttoptr i64 %4565 to i64*
  store i64 %4560, i64* %4566
  store i64 %4565, i64* %4563, align 8, !tbaa !2428
  %4567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4558, i64* %4567, align 8, !tbaa !2428
  %4568 = load i64, i64* %PC
  %4569 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %4568, %struct.Memory* %4542)
  %4570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4572 = bitcast %union.vec128_t* %XMM0 to i8*
  %4573 = load i64, i64* %PC
  %4574 = add i64 %4573, 3
  store i64 %4574, i64* %PC
  %4575 = bitcast i8* %4571 to i64*
  %4576 = load i64, i64* %4575, align 1
  %4577 = getelementptr inbounds i8, i8* %4571, i64 8
  %4578 = bitcast i8* %4577 to i64*
  %4579 = load i64, i64* %4578, align 1
  %4580 = bitcast i8* %4572 to i64*
  %4581 = load i64, i64* %4580, align 1
  %4582 = getelementptr inbounds i8, i8* %4572, i64 8
  %4583 = bitcast i8* %4582 to i64*
  %4584 = load i64, i64* %4583, align 1
  %4585 = xor i64 %4581, %4576
  %4586 = xor i64 %4584, %4579
  %4587 = trunc i64 %4585 to i32
  %4588 = lshr i64 %4585, 32
  %4589 = trunc i64 %4588 to i32
  %4590 = bitcast i8* %4570 to i32*
  store i32 %4587, i32* %4590, align 1, !tbaa !2456
  %4591 = getelementptr inbounds i8, i8* %4570, i64 4
  %4592 = bitcast i8* %4591 to i32*
  store i32 %4589, i32* %4592, align 1, !tbaa !2456
  %4593 = trunc i64 %4586 to i32
  %4594 = getelementptr inbounds i8, i8* %4570, i64 8
  %4595 = bitcast i8* %4594 to i32*
  store i32 %4593, i32* %4595, align 1, !tbaa !2456
  %4596 = lshr i64 %4586, 32
  %4597 = trunc i64 %4596 to i32
  %4598 = getelementptr inbounds i8, i8* %4570, i64 12
  %4599 = bitcast i8* %4598 to i32*
  store i32 %4597, i32* %4599, align 1, !tbaa !2456
  %4600 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4601 = load i64, i64* %PC
  %4602 = add i64 %4601, 9
  store i64 %4602, i64* %PC
  %4603 = bitcast i8* %4600 to <2 x i32>*
  %4604 = load <2 x i32>, <2 x i32>* %4603, align 1
  %4605 = getelementptr inbounds i8, i8* %4600, i64 8
  %4606 = bitcast i8* %4605 to <2 x i32>*
  %4607 = load <2 x i32>, <2 x i32>* %4606, align 1
  %4608 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4609 = sitofp i32 %4608 to float
  %4610 = bitcast i8* %4600 to float*
  store float %4609, float* %4610, align 1, !tbaa !2452
  %4611 = extractelement <2 x i32> %4604, i32 1
  %4612 = getelementptr inbounds i8, i8* %4600, i64 4
  %4613 = bitcast i8* %4612 to i32*
  store i32 %4611, i32* %4613, align 1, !tbaa !2452
  %4614 = extractelement <2 x i32> %4607, i32 0
  %4615 = bitcast i8* %4605 to i32*
  store i32 %4614, i32* %4615, align 1, !tbaa !2452
  %4616 = extractelement <2 x i32> %4607, i32 1
  %4617 = getelementptr inbounds i8, i8* %4600, i64 12
  %4618 = bitcast i8* %4617 to i32*
  store i32 %4616, i32* %4618, align 1, !tbaa !2452
  %4619 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4620 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4621 = load i64, i64* %RBP
  %4622 = sub i64 %4621, 76
  %4623 = load i64, i64* %PC
  %4624 = add i64 %4623, 5
  store i64 %4624, i64* %PC
  %4625 = bitcast i8* %4620 to <2 x float>*
  %4626 = load <2 x float>, <2 x float>* %4625, align 1
  %4627 = getelementptr inbounds i8, i8* %4620, i64 8
  %4628 = bitcast i8* %4627 to <2 x i32>*
  %4629 = load <2 x i32>, <2 x i32>* %4628, align 1
  %4630 = inttoptr i64 %4622 to float*
  %4631 = load float, float* %4630
  %4632 = extractelement <2 x float> %4626, i32 0
  %4633 = fmul float %4632, %4631
  %4634 = bitcast i8* %4619 to float*
  store float %4633, float* %4634, align 1, !tbaa !2452
  %4635 = bitcast <2 x float> %4626 to <2 x i32>
  %4636 = extractelement <2 x i32> %4635, i32 1
  %4637 = getelementptr inbounds i8, i8* %4619, i64 4
  %4638 = bitcast i8* %4637 to i32*
  store i32 %4636, i32* %4638, align 1, !tbaa !2452
  %4639 = extractelement <2 x i32> %4629, i32 0
  %4640 = getelementptr inbounds i8, i8* %4619, i64 8
  %4641 = bitcast i8* %4640 to i32*
  store i32 %4639, i32* %4641, align 1, !tbaa !2452
  %4642 = extractelement <2 x i32> %4629, i32 1
  %4643 = getelementptr inbounds i8, i8* %4619, i64 12
  %4644 = bitcast i8* %4643 to i32*
  store i32 %4642, i32* %4644, align 1, !tbaa !2452
  %4645 = load i64, i64* %RBP
  %4646 = sub i64 %4645, 44
  %4647 = bitcast %union.vec128_t* %XMM1 to i8*
  %4648 = load i64, i64* %PC
  %4649 = add i64 %4648, 5
  store i64 %4649, i64* %PC
  %4650 = bitcast i8* %4647 to <2 x float>*
  %4651 = load <2 x float>, <2 x float>* %4650, align 1
  %4652 = extractelement <2 x float> %4651, i32 0
  %4653 = inttoptr i64 %4646 to float*
  store float %4652, float* %4653
  %4654 = bitcast %union.vec128_t* %XMM0 to i8*
  %4655 = load i64, i64* %PC
  %4656 = add i64 %4655, 9
  store i64 %4656, i64* %PC
  %4657 = bitcast i8* %4654 to <2 x float>*
  %4658 = load <2 x float>, <2 x float>* %4657, align 1
  %4659 = extractelement <2 x float> %4658, i32 0
  store float %4659, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %4660 = load i64, i64* %PC
  %4661 = add i64 %4660, 11
  store i64 %4661, i64* %PC
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %4662 = load i64, i64* %RBP
  %4663 = sub i64 %4662, 992
  %4664 = load i32, i32* %EAX
  %4665 = zext i32 %4664 to i64
  %4666 = load i64, i64* %PC
  %4667 = add i64 %4666, 6
  store i64 %4667, i64* %PC
  %4668 = inttoptr i64 %4663 to i32*
  store i32 %4664, i32* %4668
  br label %block_40148d

block_400cb0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %4669 = load i64, i64* %PC
  %4670 = add i64 %4669, 8
  store i64 %4670, i64* %PC
  %4671 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to double*)
  %4672 = bitcast i8* %6167 to double*
  store double %4671, double* %4672, align 1, !tbaa !2454
  %4673 = getelementptr inbounds i8, i8* %6167, i64 8
  %4674 = bitcast i8* %4673 to double*
  store double 0.000000e+00, double* %4674, align 1, !tbaa !2454
  %4675 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4676 = load i64, i64* %PC
  %4677 = add i64 %4676, 8
  store i64 %4677, i64* %PC
  %4678 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 40) to double*)
  %4679 = bitcast i8* %4675 to double*
  store double %4678, double* %4679, align 1, !tbaa !2454
  %4680 = getelementptr inbounds i8, i8* %4675, i64 8
  %4681 = bitcast i8* %4680 to double*
  store double 0.000000e+00, double* %4681, align 1, !tbaa !2454
  %4682 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4683 = load i64, i64* %RBP
  %4684 = sub i64 %4683, 12
  %4685 = load i64, i64* %PC
  %4686 = add i64 %4685, 5
  store i64 %4686, i64* %PC
  %4687 = inttoptr i64 %4684 to float*
  %4688 = load float, float* %4687
  %4689 = fpext float %4688 to double
  %4690 = bitcast i8* %4682 to double*
  store double %4689, double* %4690, align 1, !tbaa !2454
  %4691 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4692 = load i64, i64* %RBP
  %4693 = sub i64 %4692, 16
  %4694 = load i64, i64* %PC
  %4695 = add i64 %4694, 5
  store i64 %4695, i64* %PC
  %4696 = inttoptr i64 %4693 to float*
  %4697 = load float, float* %4696
  %4698 = fpext float %4697 to double
  %4699 = bitcast i8* %4691 to double*
  store double %4698, double* %4699, align 1, !tbaa !2454
  %4700 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4701 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4702 = bitcast %union.vec128_t* %XMM3 to i8*
  %4703 = load i64, i64* %PC
  %4704 = add i64 %4703, 4
  store i64 %4704, i64* %PC
  %4705 = bitcast i8* %4701 to double*
  %4706 = load double, double* %4705, align 1
  %4707 = getelementptr inbounds i8, i8* %4701, i64 8
  %4708 = bitcast i8* %4707 to i64*
  %4709 = load i64, i64* %4708, align 1
  %4710 = bitcast i8* %4702 to double*
  %4711 = load double, double* %4710, align 1
  %4712 = fmul double %4706, %4711
  %4713 = bitcast i8* %4700 to double*
  store double %4712, double* %4713, align 1, !tbaa !2454
  %4714 = getelementptr inbounds i8, i8* %4700, i64 8
  %4715 = bitcast i8* %4714 to i64*
  store i64 %4709, i64* %4715, align 1, !tbaa !2454
  %4716 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4717 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4718 = bitcast %union.vec128_t* %XMM1 to i8*
  %4719 = load i64, i64* %PC
  %4720 = add i64 %4719, 4
  store i64 %4720, i64* %PC
  %4721 = bitcast i8* %4717 to double*
  %4722 = load double, double* %4721, align 1
  %4723 = getelementptr inbounds i8, i8* %4717, i64 8
  %4724 = bitcast i8* %4723 to i64*
  %4725 = load i64, i64* %4724, align 1
  %4726 = bitcast i8* %4718 to double*
  %4727 = load double, double* %4726, align 1
  %4728 = fdiv double %4722, %4727
  %4729 = bitcast i8* %4716 to double*
  store double %4728, double* %4729, align 1, !tbaa !2454
  %4730 = getelementptr inbounds i8, i8* %4716, i64 8
  %4731 = bitcast i8* %4730 to i64*
  store i64 %4725, i64* %4731, align 1, !tbaa !2454
  %4732 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4733 = bitcast %union.vec128_t* %XMM2 to i8*
  %4734 = load i64, i64* %PC
  %4735 = add i64 %4734, 4
  store i64 %4735, i64* %PC
  %4736 = bitcast i8* %4732 to <2 x i32>*
  %4737 = load <2 x i32>, <2 x i32>* %4736, align 1
  %4738 = getelementptr inbounds i8, i8* %4732, i64 8
  %4739 = bitcast i8* %4738 to <2 x i32>*
  %4740 = load <2 x i32>, <2 x i32>* %4739, align 1
  %4741 = bitcast i8* %4733 to double*
  %4742 = load double, double* %4741, align 1
  %4743 = fptrunc double %4742 to float
  %4744 = bitcast i8* %4732 to float*
  store float %4743, float* %4744, align 1, !tbaa !2452
  %4745 = extractelement <2 x i32> %4737, i32 1
  %4746 = getelementptr inbounds i8, i8* %4732, i64 4
  %4747 = bitcast i8* %4746 to i32*
  store i32 %4745, i32* %4747, align 1, !tbaa !2452
  %4748 = extractelement <2 x i32> %4740, i32 0
  %4749 = bitcast i8* %4738 to i32*
  store i32 %4748, i32* %4749, align 1, !tbaa !2452
  %4750 = extractelement <2 x i32> %4740, i32 1
  %4751 = getelementptr inbounds i8, i8* %4732, i64 12
  %4752 = bitcast i8* %4751 to i32*
  store i32 %4750, i32* %4752, align 1, !tbaa !2452
  %4753 = bitcast %union.vec128_t* %XMM1 to i8*
  %4754 = load i64, i64* %PC
  %4755 = add i64 %4754, 9
  store i64 %4755, i64* %PC
  %4756 = bitcast i8* %4753 to <2 x float>*
  %4757 = load <2 x float>, <2 x float>* %4756, align 1
  %4758 = extractelement <2 x float> %4757, i32 0
  store float %4758, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %4759 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4760 = load i64, i64* %PC
  %4761 = add i64 %4760, 9
  store i64 %4761, i64* %PC
  %4762 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*)
  %4763 = fpext float %4762 to double
  %4764 = bitcast i8* %4759 to double*
  store double %4763, double* %4764, align 1, !tbaa !2454
  %4765 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4766 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4767 = bitcast %union.vec128_t* %XMM1 to i8*
  %4768 = load i64, i64* %PC
  %4769 = add i64 %4768, 4
  store i64 %4769, i64* %PC
  %4770 = bitcast i8* %4766 to double*
  %4771 = load double, double* %4770, align 1
  %4772 = getelementptr inbounds i8, i8* %4766, i64 8
  %4773 = bitcast i8* %4772 to i64*
  %4774 = load i64, i64* %4773, align 1
  %4775 = bitcast i8* %4767 to double*
  %4776 = load double, double* %4775, align 1
  %4777 = fdiv double %4771, %4776
  %4778 = bitcast i8* %4765 to double*
  store double %4777, double* %4778, align 1, !tbaa !2454
  %4779 = getelementptr inbounds i8, i8* %4765, i64 8
  %4780 = bitcast i8* %4779 to i64*
  store i64 %4774, i64* %4780, align 1, !tbaa !2454
  %4781 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4782 = bitcast %union.vec128_t* %XMM0 to i8*
  %4783 = load i64, i64* %PC
  %4784 = add i64 %4783, 4
  store i64 %4784, i64* %PC
  %4785 = bitcast i8* %4781 to <2 x i32>*
  %4786 = load <2 x i32>, <2 x i32>* %4785, align 1
  %4787 = getelementptr inbounds i8, i8* %4781, i64 8
  %4788 = bitcast i8* %4787 to <2 x i32>*
  %4789 = load <2 x i32>, <2 x i32>* %4788, align 1
  %4790 = bitcast i8* %4782 to double*
  %4791 = load double, double* %4790, align 1
  %4792 = fptrunc double %4791 to float
  %4793 = bitcast i8* %4781 to float*
  store float %4792, float* %4793, align 1, !tbaa !2452
  %4794 = extractelement <2 x i32> %4786, i32 1
  %4795 = getelementptr inbounds i8, i8* %4781, i64 4
  %4796 = bitcast i8* %4795 to i32*
  store i32 %4794, i32* %4796, align 1, !tbaa !2452
  %4797 = extractelement <2 x i32> %4789, i32 0
  %4798 = bitcast i8* %4787 to i32*
  store i32 %4797, i32* %4798, align 1, !tbaa !2452
  %4799 = extractelement <2 x i32> %4789, i32 1
  %4800 = getelementptr inbounds i8, i8* %4781, i64 12
  %4801 = bitcast i8* %4800 to i32*
  store i32 %4799, i32* %4801, align 1, !tbaa !2452
  %4802 = bitcast %union.vec128_t* %XMM0 to i8*
  %4803 = load i64, i64* %PC
  %4804 = add i64 %4803, 9
  store i64 %4804, i64* %PC
  %4805 = bitcast i8* %4802 to <2 x float>*
  %4806 = load <2 x float>, <2 x float>* %4805, align 1
  %4807 = extractelement <2 x float> %4806, i32 0
  store float %4807, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*)
  %4808 = load i64, i64* %PC
  %4809 = add i64 %4808, 26
  %4810 = load i64, i64* %PC
  %4811 = add i64 %4810, 5
  store i64 %4811, i64* %PC
  %4812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4809, i64* %4812, align 8, !tbaa !2428
  br label %block_400d13

block_400f9f:                                     ; preds = %block_400f90
  %4813 = load i64, i64* %PC
  %4814 = add i64 %4813, 11
  store i64 %4814, i64* %PC
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4815 = load i64, i64* %PC
  %4816 = add i64 %4815, 8
  store i64 %4816, i64* %PC
  %4817 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4818, align 1, !tbaa !2432
  %4819 = and i32 %4817, 255
  %4820 = call i32 @llvm.ctpop.i32(i32 %4819) #16
  %4821 = trunc i32 %4820 to i8
  %4822 = and i8 %4821, 1
  %4823 = xor i8 %4822, 1
  %4824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4823, i8* %4824, align 1, !tbaa !2446
  %4825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4825, align 1, !tbaa !2447
  %4826 = icmp eq i32 %4817, 0
  %4827 = zext i1 %4826 to i8
  %4828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4827, i8* %4828, align 1, !tbaa !2448
  %4829 = lshr i32 %4817, 31
  %4830 = trunc i32 %4829 to i8
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4830, i8* %4831, align 1, !tbaa !2449
  %4832 = lshr i32 %4817, 31
  %4833 = xor i32 %4829, %4832
  %4834 = add nuw nsw i32 %4833, %4832
  %4835 = icmp eq i32 %4834, 2
  %4836 = zext i1 %4835 to i8
  %4837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4836, i8* %4837, align 1, !tbaa !2450
  %4838 = load i64, i64* %PC
  %4839 = add i64 %4838, 17
  %4840 = load i64, i64* %PC
  %4841 = add i64 %4840, 6
  %4842 = load i64, i64* %PC
  %4843 = add i64 %4842, 6
  store i64 %4843, i64* %PC
  %4844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4845 = load i8, i8* %4844, align 1, !tbaa !2448
  %4846 = icmp eq i8 %4845, 0
  %4847 = zext i1 %4846 to i8
  store i8 %4847, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4849 = select i1 %4846, i64 %4839, i64 %4841
  store i64 %4849, i64* %4848, align 8, !tbaa !2428
  %4850 = load i8, i8* %BRANCH_TAKEN
  %4851 = icmp eq i8 %4850, 1
  br i1 %4851, label %block_400fc3, label %block_400fb8

block_400f7f:                                     ; preds = %block_400f3a
  %4852 = load i64, i64* %PC
  %4853 = add i64 %4852, 7
  store i64 %4853, i64* %PC
  %4854 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %4855 = zext i32 %4854 to i64
  store i64 %4855, i64* %RAX, align 8, !tbaa !2428
  %4856 = load i64, i64* %RAX
  %4857 = load i64, i64* %PC
  %4858 = add i64 %4857, 3
  store i64 %4858, i64* %PC
  %4859 = trunc i64 %4856 to i32
  %4860 = shl i32 %4859, 1
  %4861 = icmp slt i32 %4859, 0
  %4862 = icmp slt i32 %4860, 0
  %4863 = xor i1 %4861, %4862
  %4864 = zext i32 %4860 to i64
  store i64 %4864, i64* %RAX, align 8, !tbaa !2428
  %4865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4866 = zext i1 %4861 to i8
  store i8 %4866, i8* %4865, align 1, !tbaa !2451
  %4867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4868 = and i32 %4860, 254
  %4869 = call i32 @llvm.ctpop.i32(i32 %4868) #16
  %4870 = trunc i32 %4869 to i8
  %4871 = and i8 %4870, 1
  %4872 = xor i8 %4871, 1
  store i8 %4872, i8* %4867, align 1, !tbaa !2451
  %4873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4873, align 1, !tbaa !2451
  %4874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4875 = icmp eq i32 %4860, 0
  %4876 = zext i1 %4875 to i8
  store i8 %4876, i8* %4874, align 1, !tbaa !2451
  %4877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4878 = lshr i32 %4860, 31
  %4879 = trunc i32 %4878 to i8
  store i8 %4879, i8* %4877, align 1, !tbaa !2451
  %4880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4881 = zext i1 %4863 to i8
  store i8 %4881, i8* %4880, align 1, !tbaa !2451
  %4882 = load i32, i32* %EAX
  %4883 = zext i32 %4882 to i64
  %4884 = load i64, i64* %PC
  %4885 = add i64 %4884, 7
  store i64 %4885, i64* %PC
  store i32 %4882, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  br label %block_400f90

block_400e1d:                                     ; preds = %block_400e14, %block_400dc9
  %MEMORY.10 = phi %struct.Memory* [ %2482, %block_400dc9 ], [ %2482, %block_400e14 ]
  %4886 = load i64, i64* %PC
  %4887 = add i64 %4886, 5
  %4888 = load i64, i64* %PC
  %4889 = add i64 %4888, 5
  store i64 %4889, i64* %PC
  %4890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4887, i64* %4890, align 8, !tbaa !2428
  %4891 = load i64, i64* %RBP
  %4892 = sub i64 %4891, 64
  %4893 = load i64, i64* %PC
  %4894 = add i64 %4893, 4
  store i64 %4894, i64* %PC
  %4895 = inttoptr i64 %4892 to i32*
  %4896 = load i32, i32* %4895
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4897, align 1, !tbaa !2432
  %4898 = and i32 %4896, 255
  %4899 = call i32 @llvm.ctpop.i32(i32 %4898) #16
  %4900 = trunc i32 %4899 to i8
  %4901 = and i8 %4900, 1
  %4902 = xor i8 %4901, 1
  %4903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4902, i8* %4903, align 1, !tbaa !2446
  %4904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4904, align 1, !tbaa !2447
  %4905 = icmp eq i32 %4896, 0
  %4906 = zext i1 %4905 to i8
  %4907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4906, i8* %4907, align 1, !tbaa !2448
  %4908 = lshr i32 %4896, 31
  %4909 = trunc i32 %4908 to i8
  %4910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4909, i8* %4910, align 1, !tbaa !2449
  %4911 = lshr i32 %4896, 31
  %4912 = xor i32 %4908, %4911
  %4913 = add nuw nsw i32 %4912, %4911
  %4914 = icmp eq i32 %4913, 2
  %4915 = zext i1 %4914 to i8
  %4916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4915, i8* %4916, align 1, !tbaa !2450
  %4917 = load i64, i64* %PC
  %4918 = sub i64 %4917, 204
  %4919 = load i64, i64* %PC
  %4920 = add i64 %4919, 6
  %4921 = load i64, i64* %PC
  %4922 = add i64 %4921, 6
  store i64 %4922, i64* %PC
  %4923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4924 = load i8, i8* %4923, align 1, !tbaa !2449
  %4925 = icmp ne i8 %4924, 0
  %4926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4927 = load i8, i8* %4926, align 1, !tbaa !2450
  %4928 = icmp ne i8 %4927, 0
  %4929 = xor i1 %4925, %4928
  %4930 = zext i1 %4929 to i8
  store i8 %4930, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4932 = select i1 %4929, i64 %4918, i64 %4920
  store i64 %4932, i64* %4931, align 8, !tbaa !2428
  %4933 = load i8, i8* %BRANCH_TAKEN
  %4934 = icmp eq i8 %4933, 1
  br i1 %4934, label %block_400d5a, label %block_400e2c

block_401369:                                     ; preds = %block_401359
  %4935 = add i64 %5398, 10
  store i64 %4935, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %4936 = load i64, i64* %PC
  %4937 = add i64 %4936, 10
  store i64 %4937, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %4938 = load i64, i64* %RBP
  %4939 = sub i64 %4938, 20
  %4940 = load i64, i64* %PC
  %4941 = add i64 %4940, 4
  store i64 %4941, i64* %PC
  store i64 %4939, i64* %R8, align 8, !tbaa !2428
  %4942 = load i64, i64* %PC
  %4943 = add i64 %4942, 7
  store i64 %4943, i64* %PC
  %4944 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %4945 = zext i32 %4944 to i64
  store i64 %4945, i64* %RSI, align 8, !tbaa !2428
  %4946 = load i64, i64* %PC
  %4947 = add i64 %4946, 7
  store i64 %4947, i64* %PC
  %4948 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %4949 = zext i32 %4948 to i64
  store i64 %4949, i64* %RDX, align 8, !tbaa !2428
  %4950 = load i64, i64* %PC
  %4951 = add i64 %4950, 961
  %4952 = load i64, i64* %PC
  %4953 = add i64 %4952, 5
  %4954 = load i64, i64* %PC
  %4955 = add i64 %4954, 5
  store i64 %4955, i64* %PC
  %4956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4957 = load i64, i64* %4956, align 8, !tbaa !2428
  %4958 = add i64 %4957, -8
  %4959 = inttoptr i64 %4958 to i64*
  store i64 %4953, i64* %4959
  store i64 %4958, i64* %4956, align 8, !tbaa !2428
  %4960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4951, i64* %4960, align 8, !tbaa !2428
  %4961 = load i64, i64* %PC
  %4962 = call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %4961, %struct.Memory* %MEMORY.12)
  %4963 = load i64, i64* %PC
  %4964 = add i64 %4963, 7
  store i64 %4964, i64* %PC
  %4965 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %4966 = zext i32 %4965 to i64
  store i64 %4966, i64* %RAX, align 8, !tbaa !2428
  %4967 = load i64, i64* %RAX
  %4968 = load i64, i64* %PC
  %4969 = add i64 %4968, 3
  store i64 %4969, i64* %PC
  %4970 = trunc i64 %4967 to i32
  %4971 = add i32 1, %4970
  %4972 = zext i32 %4971 to i64
  store i64 %4972, i64* %RAX, align 8, !tbaa !2428
  %4973 = icmp ult i32 %4971, %4970
  %4974 = icmp ult i32 %4971, 1
  %4975 = or i1 %4973, %4974
  %4976 = zext i1 %4975 to i8
  %4977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4976, i8* %4977, align 1, !tbaa !2432
  %4978 = and i32 %4971, 255
  %4979 = call i32 @llvm.ctpop.i32(i32 %4978) #16
  %4980 = trunc i32 %4979 to i8
  %4981 = and i8 %4980, 1
  %4982 = xor i8 %4981, 1
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4982, i8* %4983, align 1, !tbaa !2446
  %4984 = xor i64 1, %4967
  %4985 = trunc i64 %4984 to i32
  %4986 = xor i32 %4985, %4971
  %4987 = lshr i32 %4986, 4
  %4988 = trunc i32 %4987 to i8
  %4989 = and i8 %4988, 1
  %4990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4989, i8* %4990, align 1, !tbaa !2447
  %4991 = icmp eq i32 %4971, 0
  %4992 = zext i1 %4991 to i8
  %4993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4992, i8* %4993, align 1, !tbaa !2448
  %4994 = lshr i32 %4971, 31
  %4995 = trunc i32 %4994 to i8
  %4996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4995, i8* %4996, align 1, !tbaa !2449
  %4997 = lshr i32 %4970, 31
  %4998 = xor i32 %4994, %4997
  %4999 = add nuw nsw i32 %4998, %4994
  %5000 = icmp eq i32 %4999, 2
  %5001 = zext i1 %5000 to i8
  %5002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5001, i8* %5002, align 1, !tbaa !2450
  %5003 = load i32, i32* %EAX
  %5004 = zext i32 %5003 to i64
  %5005 = load i64, i64* %PC
  %5006 = add i64 %5005, 7
  store i64 %5006, i64* %PC
  store i32 %5003, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %5007 = load i64, i64* %PC
  %5008 = sub i64 %5007, 76
  %5009 = load i64, i64* %PC
  %5010 = add i64 %5009, 5
  store i64 %5010, i64* %PC
  %5011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5008, i64* %5011, align 8, !tbaa !2428
  br label %block_401359

block_40111b:                                     ; preds = %block_401095
  %5012 = sub i64 %5457, 2875
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 5
  %5015 = load i64, i64* %PC
  %5016 = add i64 %5015, 5
  store i64 %5016, i64* %PC
  %5017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5018 = load i64, i64* %5017, align 8, !tbaa !2428
  %5019 = add i64 %5018, -8
  %5020 = inttoptr i64 %5019 to i64*
  store i64 %5014, i64* %5020
  store i64 %5019, i64* %5017, align 8, !tbaa !2428
  %5021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5012, i64* %5021, align 8, !tbaa !2428
  %5022 = load i64, i64* %PC
  %5023 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %5022, %struct.Memory* %MEMORY.13)
  %5024 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5026 = load i64, i64* %RBP
  %5027 = sub i64 %5026, 40
  %5028 = load i64, i64* %PC
  %5029 = add i64 %5028, 5
  store i64 %5029, i64* %PC
  %5030 = bitcast i8* %5025 to <2 x float>*
  %5031 = load <2 x float>, <2 x float>* %5030, align 1
  %5032 = getelementptr inbounds i8, i8* %5025, i64 8
  %5033 = bitcast i8* %5032 to <2 x i32>*
  %5034 = load <2 x i32>, <2 x i32>* %5033, align 1
  %5035 = inttoptr i64 %5027 to float*
  %5036 = load float, float* %5035
  %5037 = extractelement <2 x float> %5031, i32 0
  %5038 = fsub float %5037, %5036
  %5039 = bitcast i8* %5024 to float*
  store float %5038, float* %5039, align 1, !tbaa !2452
  %5040 = bitcast <2 x float> %5031 to <2 x i32>
  %5041 = extractelement <2 x i32> %5040, i32 1
  %5042 = getelementptr inbounds i8, i8* %5024, i64 4
  %5043 = bitcast i8* %5042 to i32*
  store i32 %5041, i32* %5043, align 1, !tbaa !2452
  %5044 = extractelement <2 x i32> %5034, i32 0
  %5045 = getelementptr inbounds i8, i8* %5024, i64 8
  %5046 = bitcast i8* %5045 to i32*
  store i32 %5044, i32* %5046, align 1, !tbaa !2452
  %5047 = extractelement <2 x i32> %5034, i32 1
  %5048 = getelementptr inbounds i8, i8* %5024, i64 12
  %5049 = bitcast i8* %5048 to i32*
  store i32 %5047, i32* %5049, align 1, !tbaa !2452
  %5050 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5051 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5052 = load i64, i64* %RBP
  %5053 = sub i64 %5052, 44
  %5054 = load i64, i64* %PC
  %5055 = add i64 %5054, 5
  store i64 %5055, i64* %PC
  %5056 = bitcast i8* %5051 to <2 x float>*
  %5057 = load <2 x float>, <2 x float>* %5056, align 1
  %5058 = getelementptr inbounds i8, i8* %5051, i64 8
  %5059 = bitcast i8* %5058 to <2 x i32>*
  %5060 = load <2 x i32>, <2 x i32>* %5059, align 1
  %5061 = inttoptr i64 %5053 to float*
  %5062 = load float, float* %5061
  %5063 = extractelement <2 x float> %5057, i32 0
  %5064 = fsub float %5063, %5062
  %5065 = bitcast i8* %5050 to float*
  store float %5064, float* %5065, align 1, !tbaa !2452
  %5066 = bitcast <2 x float> %5057 to <2 x i32>
  %5067 = extractelement <2 x i32> %5066, i32 1
  %5068 = getelementptr inbounds i8, i8* %5050, i64 4
  %5069 = bitcast i8* %5068 to i32*
  store i32 %5067, i32* %5069, align 1, !tbaa !2452
  %5070 = extractelement <2 x i32> %5060, i32 0
  %5071 = getelementptr inbounds i8, i8* %5050, i64 8
  %5072 = bitcast i8* %5071 to i32*
  store i32 %5070, i32* %5072, align 1, !tbaa !2452
  %5073 = extractelement <2 x i32> %5060, i32 1
  %5074 = getelementptr inbounds i8, i8* %5050, i64 12
  %5075 = bitcast i8* %5074 to i32*
  store i32 %5073, i32* %5075, align 1, !tbaa !2452
  %5076 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5077 = load i64, i64* %PC
  %5078 = add i64 %5077, 9
  store i64 %5078, i64* %PC
  %5079 = bitcast i8* %5076 to <2 x i32>*
  %5080 = load <2 x i32>, <2 x i32>* %5079, align 1
  %5081 = getelementptr inbounds i8, i8* %5076, i64 8
  %5082 = bitcast i8* %5081 to <2 x i32>*
  %5083 = load <2 x i32>, <2 x i32>* %5082, align 1
  %5084 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %5085 = sitofp i32 %5084 to float
  %5086 = bitcast i8* %5076 to float*
  store float %5085, float* %5086, align 1, !tbaa !2452
  %5087 = extractelement <2 x i32> %5080, i32 1
  %5088 = getelementptr inbounds i8, i8* %5076, i64 4
  %5089 = bitcast i8* %5088 to i32*
  store i32 %5087, i32* %5089, align 1, !tbaa !2452
  %5090 = extractelement <2 x i32> %5083, i32 0
  %5091 = bitcast i8* %5081 to i32*
  store i32 %5090, i32* %5091, align 1, !tbaa !2452
  %5092 = extractelement <2 x i32> %5083, i32 1
  %5093 = getelementptr inbounds i8, i8* %5076, i64 12
  %5094 = bitcast i8* %5093 to i32*
  store i32 %5092, i32* %5094, align 1, !tbaa !2452
  %5095 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5096 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5097 = bitcast %union.vec128_t* %XMM1 to i8*
  %5098 = load i64, i64* %PC
  %5099 = add i64 %5098, 4
  store i64 %5099, i64* %PC
  %5100 = bitcast i8* %5096 to <2 x float>*
  %5101 = load <2 x float>, <2 x float>* %5100, align 1
  %5102 = getelementptr inbounds i8, i8* %5096, i64 8
  %5103 = bitcast i8* %5102 to <2 x i32>*
  %5104 = load <2 x i32>, <2 x i32>* %5103, align 1
  %5105 = bitcast i8* %5097 to <2 x float>*
  %5106 = load <2 x float>, <2 x float>* %5105, align 1
  %5107 = extractelement <2 x float> %5101, i32 0
  %5108 = extractelement <2 x float> %5106, i32 0
  %5109 = fdiv float %5107, %5108
  %5110 = bitcast i8* %5095 to float*
  store float %5109, float* %5110, align 1, !tbaa !2452
  %5111 = bitcast <2 x float> %5101 to <2 x i32>
  %5112 = extractelement <2 x i32> %5111, i32 1
  %5113 = getelementptr inbounds i8, i8* %5095, i64 4
  %5114 = bitcast i8* %5113 to i32*
  store i32 %5112, i32* %5114, align 1, !tbaa !2452
  %5115 = extractelement <2 x i32> %5104, i32 0
  %5116 = getelementptr inbounds i8, i8* %5095, i64 8
  %5117 = bitcast i8* %5116 to i32*
  store i32 %5115, i32* %5117, align 1, !tbaa !2452
  %5118 = extractelement <2 x i32> %5104, i32 1
  %5119 = getelementptr inbounds i8, i8* %5095, i64 12
  %5120 = bitcast i8* %5119 to i32*
  store i32 %5118, i32* %5120, align 1, !tbaa !2452
  %5121 = load i64, i64* %PC
  %5122 = add i64 %5121, 8
  store i64 %5122, i64* %PC
  %5123 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %5124 = sext i32 %5123 to i64
  store i64 %5124, i64* %RAX, align 8, !tbaa !2428
  %5125 = load i64, i64* %RAX
  %5126 = mul i64 %5125, 4
  %5127 = add i64 %5126, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %5128 = bitcast %union.vec128_t* %XMM0 to i8*
  %5129 = load i64, i64* %PC
  %5130 = add i64 %5129, 9
  store i64 %5130, i64* %PC
  %5131 = bitcast i8* %5128 to <2 x float>*
  %5132 = load <2 x float>, <2 x float>* %5131, align 1
  %5133 = extractelement <2 x float> %5132, i32 0
  %5134 = inttoptr i64 %5127 to float*
  store float %5133, float* %5134
  %5135 = load i64, i64* %PC
  %5136 = sub i64 %5135, 2920
  %5137 = load i64, i64* %PC
  %5138 = add i64 %5137, 5
  %5139 = load i64, i64* %PC
  %5140 = add i64 %5139, 5
  store i64 %5140, i64* %PC
  %5141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5142 = load i64, i64* %5141, align 8, !tbaa !2428
  %5143 = add i64 %5142, -8
  %5144 = inttoptr i64 %5143 to i64*
  store i64 %5138, i64* %5144
  store i64 %5143, i64* %5141, align 8, !tbaa !2428
  %5145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5136, i64* %5145, align 8, !tbaa !2428
  %5146 = load i64, i64* %PC
  %5147 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %5146, %struct.Memory* %5023)
  %5148 = load i64, i64* %RBP
  %5149 = sub i64 %5148, 40
  %5150 = bitcast %union.vec128_t* %XMM0 to i8*
  %5151 = load i64, i64* %PC
  %5152 = add i64 %5151, 5
  store i64 %5152, i64* %PC
  %5153 = bitcast i8* %5150 to <2 x float>*
  %5154 = load <2 x float>, <2 x float>* %5153, align 1
  %5155 = extractelement <2 x float> %5154, i32 0
  %5156 = inttoptr i64 %5149 to float*
  store float %5155, float* %5156
  %5157 = load i64, i64* %PC
  %5158 = add i64 %5157, 11
  store i64 %5158, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_40115d

block_4010a9:                                     ; preds = %block_401095
  %5159 = add i64 %5457, 10
  store i64 %5159, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %5160 = load i64, i64* %PC
  %5161 = add i64 %5160, 10
  store i64 %5161, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %5162 = load i64, i64* %RBP
  %5163 = sub i64 %5162, 20
  %5164 = load i64, i64* %PC
  %5165 = add i64 %5164, 4
  store i64 %5165, i64* %PC
  store i64 %5163, i64* %R8, align 8, !tbaa !2428
  %5166 = load i64, i64* %PC
  %5167 = add i64 %5166, 7
  store i64 %5167, i64* %PC
  %5168 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %5169 = zext i32 %5168 to i64
  store i64 %5169, i64* %RSI, align 8, !tbaa !2428
  %5170 = load i64, i64* %PC
  %5171 = add i64 %5170, 7
  store i64 %5171, i64* %PC
  %5172 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5173 = zext i32 %5172 to i64
  store i64 %5173, i64* %RDX, align 8, !tbaa !2428
  %5174 = load i64, i64* %PC
  %5175 = add i64 %5174, 1665
  %5176 = load i64, i64* %PC
  %5177 = add i64 %5176, 5
  %5178 = load i64, i64* %PC
  %5179 = add i64 %5178, 5
  store i64 %5179, i64* %PC
  %5180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5181 = load i64, i64* %5180, align 8, !tbaa !2428
  %5182 = add i64 %5181, -8
  %5183 = inttoptr i64 %5182 to i64*
  store i64 %5177, i64* %5183
  store i64 %5182, i64* %5180, align 8, !tbaa !2428
  %5184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5175, i64* %5184, align 8, !tbaa !2428
  %5185 = load i64, i64* %PC
  %5186 = call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %5185, %struct.Memory* %MEMORY.13)
  %5187 = load i64, i64* %PC
  %5188 = add i64 %5187, 10
  store i64 %5188, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %5189 = load i64, i64* %PC
  %5190 = add i64 %5189, 10
  store i64 %5190, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %5191 = load i64, i64* %PC
  %5192 = add i64 %5191, 10
  store i64 %5192, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %5193 = load i64, i64* %PC
  %5194 = add i64 %5193, 7
  store i64 %5194, i64* %PC
  %5195 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %5196 = zext i32 %5195 to i64
  store i64 %5196, i64* %RSI, align 8, !tbaa !2428
  %5197 = load i64, i64* %PC
  %5198 = add i64 %5197, 7
  store i64 %5198, i64* %PC
  %5199 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5200 = zext i32 %5199 to i64
  store i64 %5200, i64* %RDX, align 8, !tbaa !2428
  %5201 = load i64, i64* %PC
  %5202 = add i64 %5201, 2080
  %5203 = load i64, i64* %PC
  %5204 = add i64 %5203, 5
  %5205 = load i64, i64* %PC
  %5206 = add i64 %5205, 5
  store i64 %5206, i64* %PC
  %5207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5208 = load i64, i64* %5207, align 8, !tbaa !2428
  %5209 = add i64 %5208, -8
  %5210 = inttoptr i64 %5209 to i64*
  store i64 %5204, i64* %5210
  store i64 %5209, i64* %5207, align 8, !tbaa !2428
  %5211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5202, i64* %5211, align 8, !tbaa !2428
  %5212 = load i64, i64* %PC
  %5213 = call %struct.Memory* @sub_401920_dgefa(%struct.State* %0, i64 %5212, %struct.Memory* %5186)
  %5214 = load i64, i64* %PC
  %5215 = add i64 %5214, 7
  store i64 %5215, i64* %PC
  %5216 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %5217 = zext i32 %5216 to i64
  store i64 %5217, i64* %RAX, align 8, !tbaa !2428
  %5218 = load i64, i64* %RAX
  %5219 = load i64, i64* %PC
  %5220 = add i64 %5219, 3
  store i64 %5220, i64* %PC
  %5221 = trunc i64 %5218 to i32
  %5222 = add i32 1, %5221
  %5223 = zext i32 %5222 to i64
  store i64 %5223, i64* %RAX, align 8, !tbaa !2428
  %5224 = icmp ult i32 %5222, %5221
  %5225 = icmp ult i32 %5222, 1
  %5226 = or i1 %5224, %5225
  %5227 = zext i1 %5226 to i8
  %5228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5227, i8* %5228, align 1, !tbaa !2432
  %5229 = and i32 %5222, 255
  %5230 = call i32 @llvm.ctpop.i32(i32 %5229) #16
  %5231 = trunc i32 %5230 to i8
  %5232 = and i8 %5231, 1
  %5233 = xor i8 %5232, 1
  %5234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5233, i8* %5234, align 1, !tbaa !2446
  %5235 = xor i64 1, %5218
  %5236 = trunc i64 %5235 to i32
  %5237 = xor i32 %5236, %5222
  %5238 = lshr i32 %5237, 4
  %5239 = trunc i32 %5238 to i8
  %5240 = and i8 %5239, 1
  %5241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5240, i8* %5241, align 1, !tbaa !2447
  %5242 = icmp eq i32 %5222, 0
  %5243 = zext i1 %5242 to i8
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5243, i8* %5244, align 1, !tbaa !2448
  %5245 = lshr i32 %5222, 31
  %5246 = trunc i32 %5245 to i8
  %5247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5246, i8* %5247, align 1, !tbaa !2449
  %5248 = lshr i32 %5221, 31
  %5249 = xor i32 %5245, %5248
  %5250 = add nuw nsw i32 %5249, %5245
  %5251 = icmp eq i32 %5250, 2
  %5252 = zext i1 %5251 to i8
  %5253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5252, i8* %5253, align 1, !tbaa !2450
  %5254 = load i32, i32* %EAX
  %5255 = zext i32 %5254 to i64
  %5256 = load i64, i64* %PC
  %5257 = add i64 %5256, 7
  store i64 %5257, i64* %PC
  store i32 %5254, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %5258 = load i64, i64* %PC
  %5259 = sub i64 %5258, 129
  %5260 = load i64, i64* %PC
  %5261 = add i64 %5260, 5
  store i64 %5261, i64* %PC
  %5262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5259, i64* %5262, align 8, !tbaa !2428
  br label %block_401095

block_400e96:                                     ; preds = %block_400e2c, %block_400f90
  %MEMORY.11 = phi %struct.Memory* [ %7042, %block_400e2c ], [ %MEMORY.15, %block_400f90 ]
  %5263 = load i64, i64* %PC
  %5264 = sub i64 %5263, 2230
  %5265 = load i64, i64* %PC
  %5266 = add i64 %5265, 5
  %5267 = load i64, i64* %PC
  %5268 = add i64 %5267, 5
  store i64 %5268, i64* %PC
  %5269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5270 = load i64, i64* %5269, align 8, !tbaa !2428
  %5271 = add i64 %5270, -8
  %5272 = inttoptr i64 %5271 to i64*
  store i64 %5266, i64* %5272
  store i64 %5271, i64* %5269, align 8, !tbaa !2428
  %5273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5264, i64* %5273, align 8, !tbaa !2428
  %5274 = load i64, i64* %PC
  %5275 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %5274, %struct.Memory* %MEMORY.11)
  %5276 = load i64, i64* %RBP
  %5277 = sub i64 %5276, 80
  %5278 = bitcast %union.vec128_t* %XMM0 to i8*
  %5279 = load i64, i64* %PC
  %5280 = add i64 %5279, 5
  store i64 %5280, i64* %PC
  %5281 = bitcast i8* %5278 to <2 x float>*
  %5282 = load <2 x float>, <2 x float>* %5281, align 1
  %5283 = extractelement <2 x float> %5282, i32 0
  %5284 = inttoptr i64 %5277 to float*
  store float %5283, float* %5284
  %5285 = load i64, i64* %RBP
  %5286 = sub i64 %5285, 64
  %5287 = load i64, i64* %PC
  %5288 = add i64 %5287, 3
  store i64 %5288, i64* %PC
  %5289 = inttoptr i64 %5286 to i32*
  %5290 = load i32, i32* %5289
  %5291 = zext i32 %5290 to i64
  store i64 %5291, i64* %RAX, align 8, !tbaa !2428
  %5292 = load i64, i64* %RAX
  %5293 = load i64, i64* %PC
  %5294 = add i64 %5293, 3
  store i64 %5294, i64* %PC
  %5295 = trunc i64 %5292 to i32
  %5296 = add i32 1, %5295
  %5297 = zext i32 %5296 to i64
  store i64 %5297, i64* %RAX, align 8, !tbaa !2428
  %5298 = icmp ult i32 %5296, %5295
  %5299 = icmp ult i32 %5296, 1
  %5300 = or i1 %5298, %5299
  %5301 = zext i1 %5300 to i8
  %5302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5301, i8* %5302, align 1, !tbaa !2432
  %5303 = and i32 %5296, 255
  %5304 = call i32 @llvm.ctpop.i32(i32 %5303) #16
  %5305 = trunc i32 %5304 to i8
  %5306 = and i8 %5305, 1
  %5307 = xor i8 %5306, 1
  %5308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5307, i8* %5308, align 1, !tbaa !2446
  %5309 = xor i64 1, %5292
  %5310 = trunc i64 %5309 to i32
  %5311 = xor i32 %5310, %5296
  %5312 = lshr i32 %5311, 4
  %5313 = trunc i32 %5312 to i8
  %5314 = and i8 %5313, 1
  %5315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5314, i8* %5315, align 1, !tbaa !2447
  %5316 = icmp eq i32 %5296, 0
  %5317 = zext i1 %5316 to i8
  %5318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5317, i8* %5318, align 1, !tbaa !2448
  %5319 = lshr i32 %5296, 31
  %5320 = trunc i32 %5319 to i8
  %5321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5320, i8* %5321, align 1, !tbaa !2449
  %5322 = lshr i32 %5295, 31
  %5323 = xor i32 %5319, %5322
  %5324 = add nuw nsw i32 %5323, %5319
  %5325 = icmp eq i32 %5324, 2
  %5326 = zext i1 %5325 to i8
  %5327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5326, i8* %5327, align 1, !tbaa !2450
  %5328 = load i64, i64* %RBP
  %5329 = sub i64 %5328, 64
  %5330 = load i32, i32* %EAX
  %5331 = zext i32 %5330 to i64
  %5332 = load i64, i64* %PC
  %5333 = add i64 %5332, 3
  store i64 %5333, i64* %PC
  %5334 = inttoptr i64 %5329 to i32*
  store i32 %5330, i32* %5334
  %5335 = load i64, i64* %PC
  %5336 = add i64 %5335, 11
  store i64 %5336, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_400eb4

block_401359:                                     ; preds = %block_401369, %block_4012e1
  %MEMORY.12 = phi %struct.Memory* [ %1304, %block_4012e1 ], [ %4962, %block_401369 ]
  %5337 = load i64, i64* %PC
  %5338 = add i64 %5337, 7
  store i64 %5338, i64* %PC
  %5339 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %5340 = zext i32 %5339 to i64
  store i64 %5340, i64* %RAX, align 8, !tbaa !2428
  %5341 = load i32, i32* %EAX
  %5342 = zext i32 %5341 to i64
  %5343 = load i64, i64* %RBP
  %5344 = sub i64 %5343, 68
  %5345 = load i64, i64* %PC
  %5346 = add i64 %5345, 3
  store i64 %5346, i64* %PC
  %5347 = inttoptr i64 %5344 to i32*
  %5348 = load i32, i32* %5347
  %5349 = sub i32 %5341, %5348
  %5350 = icmp ult i32 %5341, %5348
  %5351 = zext i1 %5350 to i8
  %5352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5351, i8* %5352, align 1, !tbaa !2432
  %5353 = and i32 %5349, 255
  %5354 = call i32 @llvm.ctpop.i32(i32 %5353) #16
  %5355 = trunc i32 %5354 to i8
  %5356 = and i8 %5355, 1
  %5357 = xor i8 %5356, 1
  %5358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5357, i8* %5358, align 1, !tbaa !2446
  %5359 = xor i32 %5348, %5341
  %5360 = xor i32 %5359, %5349
  %5361 = lshr i32 %5360, 4
  %5362 = trunc i32 %5361 to i8
  %5363 = and i8 %5362, 1
  %5364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5363, i8* %5364, align 1, !tbaa !2447
  %5365 = icmp eq i32 %5349, 0
  %5366 = zext i1 %5365 to i8
  %5367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5366, i8* %5367, align 1, !tbaa !2448
  %5368 = lshr i32 %5349, 31
  %5369 = trunc i32 %5368 to i8
  %5370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5369, i8* %5370, align 1, !tbaa !2449
  %5371 = lshr i32 %5341, 31
  %5372 = lshr i32 %5348, 31
  %5373 = xor i32 %5372, %5371
  %5374 = xor i32 %5368, %5371
  %5375 = add nuw nsw i32 %5374, %5373
  %5376 = icmp eq i32 %5375, 2
  %5377 = zext i1 %5376 to i8
  %5378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5377, i8* %5378, align 1, !tbaa !2450
  %5379 = load i64, i64* %PC
  %5380 = add i64 %5379, 71
  %5381 = load i64, i64* %PC
  %5382 = add i64 %5381, 6
  %5383 = load i64, i64* %PC
  %5384 = add i64 %5383, 6
  store i64 %5384, i64* %PC
  %5385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5386 = load i8, i8* %5385, align 1, !tbaa !2449
  %5387 = icmp ne i8 %5386, 0
  %5388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5389 = load i8, i8* %5388, align 1, !tbaa !2450
  %5390 = icmp ne i8 %5389, 0
  %5391 = xor i1 %5387, %5390
  %5392 = xor i1 %5391, true
  %5393 = zext i1 %5392 to i8
  store i8 %5393, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5395 = select i1 %5391, i64 %5382, i64 %5380
  store i64 %5395, i64* %5394, align 8, !tbaa !2428
  %5396 = load i8, i8* %BRANCH_TAKEN
  %5397 = icmp eq i8 %5396, 1
  %5398 = load i64, i64* %PC
  br i1 %5397, label %block_4013aa, label %block_401369

block_401095:                                     ; preds = %block_401080, %block_4010a9
  %MEMORY.13 = phi %struct.Memory* [ %7418, %block_401080 ], [ %5213, %block_4010a9 ]
  %5399 = load i64, i64* %PC
  %5400 = add i64 %5399, 7
  store i64 %5400, i64* %PC
  %5401 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %5402 = zext i32 %5401 to i64
  store i64 %5402, i64* %RAX, align 8, !tbaa !2428
  %5403 = load i32, i32* %EAX
  %5404 = zext i32 %5403 to i64
  %5405 = load i64, i64* %PC
  %5406 = add i64 %5405, 7
  store i64 %5406, i64* %PC
  %5407 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %5408 = sub i32 %5403, %5407
  %5409 = icmp ult i32 %5403, %5407
  %5410 = zext i1 %5409 to i8
  %5411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5410, i8* %5411, align 1, !tbaa !2432
  %5412 = and i32 %5408, 255
  %5413 = call i32 @llvm.ctpop.i32(i32 %5412) #16
  %5414 = trunc i32 %5413 to i8
  %5415 = and i8 %5414, 1
  %5416 = xor i8 %5415, 1
  %5417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5416, i8* %5417, align 1, !tbaa !2446
  %5418 = xor i32 %5407, %5403
  %5419 = xor i32 %5418, %5408
  %5420 = lshr i32 %5419, 4
  %5421 = trunc i32 %5420 to i8
  %5422 = and i8 %5421, 1
  %5423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5422, i8* %5423, align 1, !tbaa !2447
  %5424 = icmp eq i32 %5408, 0
  %5425 = zext i1 %5424 to i8
  %5426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5425, i8* %5426, align 1, !tbaa !2448
  %5427 = lshr i32 %5408, 31
  %5428 = trunc i32 %5427 to i8
  %5429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5428, i8* %5429, align 1, !tbaa !2449
  %5430 = lshr i32 %5403, 31
  %5431 = lshr i32 %5407, 31
  %5432 = xor i32 %5431, %5430
  %5433 = xor i32 %5427, %5430
  %5434 = add nuw nsw i32 %5433, %5432
  %5435 = icmp eq i32 %5434, 2
  %5436 = zext i1 %5435 to i8
  %5437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5436, i8* %5437, align 1, !tbaa !2450
  %5438 = load i64, i64* %PC
  %5439 = add i64 %5438, 120
  %5440 = load i64, i64* %PC
  %5441 = add i64 %5440, 6
  %5442 = load i64, i64* %PC
  %5443 = add i64 %5442, 6
  store i64 %5443, i64* %PC
  %5444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5445 = load i8, i8* %5444, align 1, !tbaa !2449
  %5446 = icmp ne i8 %5445, 0
  %5447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5448 = load i8, i8* %5447, align 1, !tbaa !2450
  %5449 = icmp ne i8 %5448, 0
  %5450 = xor i1 %5446, %5449
  %5451 = xor i1 %5450, true
  %5452 = zext i1 %5451 to i8
  store i8 %5452, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5454 = select i1 %5450, i64 %5441, i64 %5439
  store i64 %5454, i64* %5453, align 8, !tbaa !2428
  %5455 = load i8, i8* %BRANCH_TAKEN
  %5456 = icmp eq i8 %5455, 1
  %5457 = load i64, i64* %PC
  br i1 %5456, label %block_40111b, label %block_4010a9

block_400b15:                                     ; preds = %block_400a07
  %5458 = load i64, i64* %PC
  %5459 = add i64 %5458, 8
  store i64 %5459, i64* %PC
  %5460 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 12) to float*)
  %5461 = bitcast i8* %7344 to float*
  store float %5460, float* %5461, align 1, !tbaa !2452
  %5462 = getelementptr inbounds i8, i8* %7344, i64 4
  %5463 = bitcast i8* %5462 to float*
  store float 0.000000e+00, float* %5463, align 1, !tbaa !2452
  %5464 = getelementptr inbounds i8, i8* %7344, i64 8
  %5465 = bitcast i8* %5464 to float*
  store float 0.000000e+00, float* %5465, align 1, !tbaa !2452
  %5466 = getelementptr inbounds i8, i8* %7344, i64 12
  %5467 = bitcast i8* %5466 to float*
  store float 0.000000e+00, float* %5467, align 1, !tbaa !2452
  %5468 = load i64, i64* %PC
  %5469 = add i64 %5468, 7315
  %5470 = load i64, i64* %PC
  %5471 = add i64 %5470, 5
  %5472 = load i64, i64* %PC
  %5473 = add i64 %5472, 5
  store i64 %5473, i64* %PC
  %5474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5475 = load i64, i64* %5474, align 8, !tbaa !2428
  %5476 = add i64 %5475, -8
  %5477 = inttoptr i64 %5476 to i64*
  store i64 %5471, i64* %5477
  store i64 %5476, i64* %5474, align 8, !tbaa !2428
  %5478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5469, i64* %5478, align 8, !tbaa !2428
  %5479 = load i64, i64* %PC
  %5480 = call %struct.Memory* @sub_4027b0_epslon(%struct.State* %0, i64 %5479, %struct.Memory* %MEMORY.18)
  %5481 = load i64, i64* %PC
  %5482 = add i64 %5481, 10
  store i64 %5482, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %5483 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5484 = load i64, i64* %PC
  %5485 = add i64 %5484, 8
  store i64 %5485, i64* %PC
  %5486 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 12) to float*)
  %5487 = bitcast i8* %5483 to float*
  store float %5486, float* %5487, align 1, !tbaa !2452
  %5488 = getelementptr inbounds i8, i8* %5483, i64 4
  %5489 = bitcast i8* %5488 to float*
  store float 0.000000e+00, float* %5489, align 1, !tbaa !2452
  %5490 = getelementptr inbounds i8, i8* %5483, i64 8
  %5491 = bitcast i8* %5490 to float*
  store float 0.000000e+00, float* %5491, align 1, !tbaa !2452
  %5492 = getelementptr inbounds i8, i8* %5483, i64 12
  %5493 = bitcast i8* %5492 to float*
  store float 0.000000e+00, float* %5493, align 1, !tbaa !2452
  %5494 = load i64, i64* %RBP
  %5495 = sub i64 %5494, 36
  %5496 = bitcast %union.vec128_t* %XMM0 to i8*
  %5497 = load i64, i64* %PC
  %5498 = add i64 %5497, 5
  store i64 %5498, i64* %PC
  %5499 = bitcast i8* %5496 to <2 x float>*
  %5500 = load <2 x float>, <2 x float>* %5499, align 1
  %5501 = extractelement <2 x float> %5500, i32 0
  %5502 = inttoptr i64 %5495 to float*
  store float %5501, float* %5502
  %5503 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5504 = load i64, i64* %RBP
  %5505 = sub i64 %5504, 28
  %5506 = load i64, i64* %PC
  %5507 = add i64 %5506, 5
  store i64 %5507, i64* %PC
  %5508 = inttoptr i64 %5505 to float*
  %5509 = load float, float* %5508
  %5510 = bitcast i8* %5503 to float*
  store float %5509, float* %5510, align 1, !tbaa !2452
  %5511 = getelementptr inbounds i8, i8* %5503, i64 4
  %5512 = bitcast i8* %5511 to float*
  store float 0.000000e+00, float* %5512, align 1, !tbaa !2452
  %5513 = getelementptr inbounds i8, i8* %5503, i64 8
  %5514 = bitcast i8* %5513 to float*
  store float 0.000000e+00, float* %5514, align 1, !tbaa !2452
  %5515 = getelementptr inbounds i8, i8* %5503, i64 12
  %5516 = bitcast i8* %5515 to float*
  store float 0.000000e+00, float* %5516, align 1, !tbaa !2452
  %5517 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5518 = load i64, i64* %PC
  %5519 = add i64 %5518, 9
  store i64 %5519, i64* %PC
  %5520 = bitcast i8* %5517 to <2 x i32>*
  %5521 = load <2 x i32>, <2 x i32>* %5520, align 1
  %5522 = getelementptr inbounds i8, i8* %5517, i64 8
  %5523 = bitcast i8* %5522 to <2 x i32>*
  %5524 = load <2 x i32>, <2 x i32>* %5523, align 1
  %5525 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5526 = sitofp i32 %5525 to float
  %5527 = bitcast i8* %5517 to float*
  store float %5526, float* %5527, align 1, !tbaa !2452
  %5528 = extractelement <2 x i32> %5521, i32 1
  %5529 = getelementptr inbounds i8, i8* %5517, i64 4
  %5530 = bitcast i8* %5529 to i32*
  store i32 %5528, i32* %5530, align 1, !tbaa !2452
  %5531 = extractelement <2 x i32> %5524, i32 0
  %5532 = bitcast i8* %5522 to i32*
  store i32 %5531, i32* %5532, align 1, !tbaa !2452
  %5533 = extractelement <2 x i32> %5524, i32 1
  %5534 = getelementptr inbounds i8, i8* %5517, i64 12
  %5535 = bitcast i8* %5534 to i32*
  store i32 %5533, i32* %5535, align 1, !tbaa !2452
  %5536 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5537 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5538 = load i64, i64* %RBP
  %5539 = sub i64 %5538, 20
  %5540 = load i64, i64* %PC
  %5541 = add i64 %5540, 5
  store i64 %5541, i64* %PC
  %5542 = bitcast i8* %5537 to <2 x float>*
  %5543 = load <2 x float>, <2 x float>* %5542, align 1
  %5544 = getelementptr inbounds i8, i8* %5537, i64 8
  %5545 = bitcast i8* %5544 to <2 x i32>*
  %5546 = load <2 x i32>, <2 x i32>* %5545, align 1
  %5547 = inttoptr i64 %5539 to float*
  %5548 = load float, float* %5547
  %5549 = extractelement <2 x float> %5543, i32 0
  %5550 = fmul float %5549, %5548
  %5551 = bitcast i8* %5536 to float*
  store float %5550, float* %5551, align 1, !tbaa !2452
  %5552 = bitcast <2 x float> %5543 to <2 x i32>
  %5553 = extractelement <2 x i32> %5552, i32 1
  %5554 = getelementptr inbounds i8, i8* %5536, i64 4
  %5555 = bitcast i8* %5554 to i32*
  store i32 %5553, i32* %5555, align 1, !tbaa !2452
  %5556 = extractelement <2 x i32> %5546, i32 0
  %5557 = getelementptr inbounds i8, i8* %5536, i64 8
  %5558 = bitcast i8* %5557 to i32*
  store i32 %5556, i32* %5558, align 1, !tbaa !2452
  %5559 = extractelement <2 x i32> %5546, i32 1
  %5560 = getelementptr inbounds i8, i8* %5536, i64 12
  %5561 = bitcast i8* %5560 to i32*
  store i32 %5559, i32* %5561, align 1, !tbaa !2452
  %5562 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5563 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5564 = load i64, i64* %RBP
  %5565 = sub i64 %5564, 24
  %5566 = load i64, i64* %PC
  %5567 = add i64 %5566, 5
  store i64 %5567, i64* %PC
  %5568 = bitcast i8* %5563 to <2 x float>*
  %5569 = load <2 x float>, <2 x float>* %5568, align 1
  %5570 = getelementptr inbounds i8, i8* %5563, i64 8
  %5571 = bitcast i8* %5570 to <2 x i32>*
  %5572 = load <2 x i32>, <2 x i32>* %5571, align 1
  %5573 = inttoptr i64 %5565 to float*
  %5574 = load float, float* %5573
  %5575 = extractelement <2 x float> %5569, i32 0
  %5576 = fmul float %5575, %5574
  %5577 = bitcast i8* %5562 to float*
  store float %5576, float* %5577, align 1, !tbaa !2452
  %5578 = bitcast <2 x float> %5569 to <2 x i32>
  %5579 = extractelement <2 x i32> %5578, i32 1
  %5580 = getelementptr inbounds i8, i8* %5562, i64 4
  %5581 = bitcast i8* %5580 to i32*
  store i32 %5579, i32* %5581, align 1, !tbaa !2452
  %5582 = extractelement <2 x i32> %5572, i32 0
  %5583 = getelementptr inbounds i8, i8* %5562, i64 8
  %5584 = bitcast i8* %5583 to i32*
  store i32 %5582, i32* %5584, align 1, !tbaa !2452
  %5585 = extractelement <2 x i32> %5572, i32 1
  %5586 = getelementptr inbounds i8, i8* %5562, i64 12
  %5587 = bitcast i8* %5586 to i32*
  store i32 %5585, i32* %5587, align 1, !tbaa !2452
  %5588 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5589 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5590 = load i64, i64* %RBP
  %5591 = sub i64 %5590, 36
  %5592 = load i64, i64* %PC
  %5593 = add i64 %5592, 5
  store i64 %5593, i64* %PC
  %5594 = bitcast i8* %5589 to <2 x float>*
  %5595 = load <2 x float>, <2 x float>* %5594, align 1
  %5596 = getelementptr inbounds i8, i8* %5589, i64 8
  %5597 = bitcast i8* %5596 to <2 x i32>*
  %5598 = load <2 x i32>, <2 x i32>* %5597, align 1
  %5599 = inttoptr i64 %5591 to float*
  %5600 = load float, float* %5599
  %5601 = extractelement <2 x float> %5595, i32 0
  %5602 = fmul float %5601, %5600
  %5603 = bitcast i8* %5588 to float*
  store float %5602, float* %5603, align 1, !tbaa !2452
  %5604 = bitcast <2 x float> %5595 to <2 x i32>
  %5605 = extractelement <2 x i32> %5604, i32 1
  %5606 = getelementptr inbounds i8, i8* %5588, i64 4
  %5607 = bitcast i8* %5606 to i32*
  store i32 %5605, i32* %5607, align 1, !tbaa !2452
  %5608 = extractelement <2 x i32> %5598, i32 0
  %5609 = getelementptr inbounds i8, i8* %5588, i64 8
  %5610 = bitcast i8* %5609 to i32*
  store i32 %5608, i32* %5610, align 1, !tbaa !2452
  %5611 = extractelement <2 x i32> %5598, i32 1
  %5612 = getelementptr inbounds i8, i8* %5588, i64 12
  %5613 = bitcast i8* %5612 to i32*
  store i32 %5611, i32* %5613, align 1, !tbaa !2452
  %5614 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5615 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5616 = bitcast %union.vec128_t* %XMM2 to i8*
  %5617 = load i64, i64* %PC
  %5618 = add i64 %5617, 4
  store i64 %5618, i64* %PC
  %5619 = bitcast i8* %5615 to <2 x float>*
  %5620 = load <2 x float>, <2 x float>* %5619, align 1
  %5621 = getelementptr inbounds i8, i8* %5615, i64 8
  %5622 = bitcast i8* %5621 to <2 x i32>*
  %5623 = load <2 x i32>, <2 x i32>* %5622, align 1
  %5624 = bitcast i8* %5616 to <2 x float>*
  %5625 = load <2 x float>, <2 x float>* %5624, align 1
  %5626 = extractelement <2 x float> %5620, i32 0
  %5627 = extractelement <2 x float> %5625, i32 0
  %5628 = fdiv float %5626, %5627
  %5629 = bitcast i8* %5614 to float*
  store float %5628, float* %5629, align 1, !tbaa !2452
  %5630 = bitcast <2 x float> %5620 to <2 x i32>
  %5631 = extractelement <2 x i32> %5630, i32 1
  %5632 = getelementptr inbounds i8, i8* %5614, i64 4
  %5633 = bitcast i8* %5632 to i32*
  store i32 %5631, i32* %5633, align 1, !tbaa !2452
  %5634 = extractelement <2 x i32> %5623, i32 0
  %5635 = getelementptr inbounds i8, i8* %5614, i64 8
  %5636 = bitcast i8* %5635 to i32*
  store i32 %5634, i32* %5636, align 1, !tbaa !2452
  %5637 = extractelement <2 x i32> %5623, i32 1
  %5638 = getelementptr inbounds i8, i8* %5614, i64 12
  %5639 = bitcast i8* %5638 to i32*
  store i32 %5637, i32* %5639, align 1, !tbaa !2452
  %5640 = load i64, i64* %RBP
  %5641 = sub i64 %5640, 32
  %5642 = bitcast %union.vec128_t* %XMM0 to i8*
  %5643 = load i64, i64* %PC
  %5644 = add i64 %5643, 5
  store i64 %5644, i64* %PC
  %5645 = bitcast i8* %5642 to <2 x float>*
  %5646 = load <2 x float>, <2 x float>* %5645, align 1
  %5647 = extractelement <2 x float> %5646, i32 0
  %5648 = inttoptr i64 %5641 to float*
  store float %5647, float* %5648
  %5649 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5650 = load i64, i64* %RBP
  %5651 = sub i64 %5650, 36
  %5652 = load i64, i64* %PC
  %5653 = add i64 %5652, 5
  store i64 %5653, i64* %PC
  %5654 = inttoptr i64 %5651 to float*
  %5655 = load float, float* %5654
  %5656 = bitcast i8* %5649 to float*
  store float %5655, float* %5656, align 1, !tbaa !2452
  %5657 = getelementptr inbounds i8, i8* %5649, i64 4
  %5658 = bitcast i8* %5657 to float*
  store float 0.000000e+00, float* %5658, align 1, !tbaa !2452
  %5659 = getelementptr inbounds i8, i8* %5649, i64 8
  %5660 = bitcast i8* %5659 to float*
  store float 0.000000e+00, float* %5660, align 1, !tbaa !2452
  %5661 = getelementptr inbounds i8, i8* %5649, i64 12
  %5662 = bitcast i8* %5661 to float*
  store float 0.000000e+00, float* %5662, align 1, !tbaa !2452
  %5663 = load i64, i64* %RBP
  %5664 = sub i64 %5663, 48
  %5665 = bitcast %union.vec128_t* %XMM0 to i8*
  %5666 = load i64, i64* %PC
  %5667 = add i64 %5666, 5
  store i64 %5667, i64* %PC
  %5668 = bitcast i8* %5665 to <2 x float>*
  %5669 = load <2 x float>, <2 x float>* %5668, align 1
  %5670 = extractelement <2 x float> %5669, i32 0
  %5671 = inttoptr i64 %5664 to float*
  store float %5670, float* %5671
  %5672 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5673 = load i64, i64* %PC
  %5674 = add i64 %5673, 9
  store i64 %5674, i64* %PC
  %5675 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to float*)
  %5676 = bitcast i8* %5672 to float*
  store float %5675, float* %5676, align 1, !tbaa !2452
  %5677 = getelementptr inbounds i8, i8* %5672, i64 4
  %5678 = bitcast i8* %5677 to float*
  store float 0.000000e+00, float* %5678, align 1, !tbaa !2452
  %5679 = getelementptr inbounds i8, i8* %5672, i64 8
  %5680 = bitcast i8* %5679 to float*
  store float 0.000000e+00, float* %5680, align 1, !tbaa !2452
  %5681 = getelementptr inbounds i8, i8* %5672, i64 12
  %5682 = bitcast i8* %5681 to float*
  store float 0.000000e+00, float* %5682, align 1, !tbaa !2452
  %5683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5685 = bitcast %union.vec128_t* %XMM1 to i8*
  %5686 = load i64, i64* %PC
  %5687 = add i64 %5686, 4
  store i64 %5687, i64* %PC
  %5688 = bitcast i8* %5684 to <2 x float>*
  %5689 = load <2 x float>, <2 x float>* %5688, align 1
  %5690 = getelementptr inbounds i8, i8* %5684, i64 8
  %5691 = bitcast i8* %5690 to <2 x i32>*
  %5692 = load <2 x i32>, <2 x i32>* %5691, align 1
  %5693 = bitcast i8* %5685 to <2 x float>*
  %5694 = load <2 x float>, <2 x float>* %5693, align 1
  %5695 = extractelement <2 x float> %5689, i32 0
  %5696 = extractelement <2 x float> %5694, i32 0
  %5697 = fsub float %5695, %5696
  %5698 = bitcast i8* %5683 to float*
  store float %5697, float* %5698, align 1, !tbaa !2452
  %5699 = bitcast <2 x float> %5689 to <2 x i32>
  %5700 = extractelement <2 x i32> %5699, i32 1
  %5701 = getelementptr inbounds i8, i8* %5683, i64 4
  %5702 = bitcast i8* %5701 to i32*
  store i32 %5700, i32* %5702, align 1, !tbaa !2452
  %5703 = extractelement <2 x i32> %5692, i32 0
  %5704 = getelementptr inbounds i8, i8* %5683, i64 8
  %5705 = bitcast i8* %5704 to i32*
  store i32 %5703, i32* %5705, align 1, !tbaa !2452
  %5706 = extractelement <2 x i32> %5692, i32 1
  %5707 = getelementptr inbounds i8, i8* %5683, i64 12
  %5708 = bitcast i8* %5707 to i32*
  store i32 %5706, i32* %5708, align 1, !tbaa !2452
  %5709 = load i64, i64* %RBP
  %5710 = sub i64 %5709, 52
  %5711 = bitcast %union.vec128_t* %XMM0 to i8*
  %5712 = load i64, i64* %PC
  %5713 = add i64 %5712, 5
  store i64 %5713, i64* %PC
  %5714 = bitcast i8* %5711 to <2 x float>*
  %5715 = load <2 x float>, <2 x float>* %5714, align 1
  %5716 = extractelement <2 x float> %5715, i32 0
  %5717 = inttoptr i64 %5710 to float*
  store float %5716, float* %5717
  %5718 = load i64, i64* %PC
  %5719 = add i64 %5718, 7
  store i64 %5719, i64* %PC
  %5720 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5721 = zext i32 %5720 to i64
  store i64 %5721, i64* %RAX, align 8, !tbaa !2428
  %5722 = load i64, i64* %RAX
  %5723 = load i64, i64* %PC
  %5724 = add i64 %5723, 3
  store i64 %5724, i64* %PC
  %5725 = trunc i64 %5722 to i32
  %5726 = sub i32 %5725, 1
  %5727 = zext i32 %5726 to i64
  store i64 %5727, i64* %RAX, align 8, !tbaa !2428
  %5728 = icmp ult i32 %5725, 1
  %5729 = zext i1 %5728 to i8
  %5730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5729, i8* %5730, align 1, !tbaa !2432
  %5731 = and i32 %5726, 255
  %5732 = call i32 @llvm.ctpop.i32(i32 %5731) #16
  %5733 = trunc i32 %5732 to i8
  %5734 = and i8 %5733, 1
  %5735 = xor i8 %5734, 1
  %5736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5735, i8* %5736, align 1, !tbaa !2446
  %5737 = xor i64 1, %5722
  %5738 = trunc i64 %5737 to i32
  %5739 = xor i32 %5738, %5726
  %5740 = lshr i32 %5739, 4
  %5741 = trunc i32 %5740 to i8
  %5742 = and i8 %5741, 1
  %5743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5742, i8* %5743, align 1, !tbaa !2447
  %5744 = icmp eq i32 %5726, 0
  %5745 = zext i1 %5744 to i8
  %5746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5745, i8* %5746, align 1, !tbaa !2448
  %5747 = lshr i32 %5726, 31
  %5748 = trunc i32 %5747 to i8
  %5749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5748, i8* %5749, align 1, !tbaa !2449
  %5750 = lshr i32 %5725, 31
  %5751 = xor i32 %5747, %5750
  %5752 = add nuw nsw i32 %5751, %5750
  %5753 = icmp eq i32 %5752, 2
  %5754 = zext i1 %5753 to i8
  %5755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5754, i8* %5755, align 1, !tbaa !2450
  %5756 = load i32, i32* %EAX
  %5757 = zext i32 %5756 to i64
  %5758 = load i64, i64* %PC
  %5759 = add i64 %5758, 3
  store i64 %5759, i64* %PC
  %5760 = shl i64 %5757, 32
  %5761 = ashr exact i64 %5760, 32
  store i64 %5761, i64* %RCX, align 8, !tbaa !2428
  %5762 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5763 = load i64, i64* %RCX
  %5764 = mul i64 %5763, 4
  %5765 = add i64 %5764, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %5766 = load i64, i64* %PC
  %5767 = add i64 %5766, 9
  store i64 %5767, i64* %PC
  %5768 = inttoptr i64 %5765 to float*
  %5769 = load float, float* %5768
  %5770 = bitcast i8* %5762 to float*
  store float %5769, float* %5770, align 1, !tbaa !2452
  %5771 = getelementptr inbounds i8, i8* %5762, i64 4
  %5772 = bitcast i8* %5771 to float*
  store float 0.000000e+00, float* %5772, align 1, !tbaa !2452
  %5773 = getelementptr inbounds i8, i8* %5762, i64 8
  %5774 = bitcast i8* %5773 to float*
  store float 0.000000e+00, float* %5774, align 1, !tbaa !2452
  %5775 = getelementptr inbounds i8, i8* %5762, i64 12
  %5776 = bitcast i8* %5775 to float*
  store float 0.000000e+00, float* %5776, align 1, !tbaa !2452
  %5777 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5778 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5779 = bitcast %union.vec128_t* %XMM1 to i8*
  %5780 = load i64, i64* %PC
  %5781 = add i64 %5780, 4
  store i64 %5781, i64* %PC
  %5782 = bitcast i8* %5778 to <2 x float>*
  %5783 = load <2 x float>, <2 x float>* %5782, align 1
  %5784 = getelementptr inbounds i8, i8* %5778, i64 8
  %5785 = bitcast i8* %5784 to <2 x i32>*
  %5786 = load <2 x i32>, <2 x i32>* %5785, align 1
  %5787 = bitcast i8* %5779 to <2 x float>*
  %5788 = load <2 x float>, <2 x float>* %5787, align 1
  %5789 = extractelement <2 x float> %5783, i32 0
  %5790 = extractelement <2 x float> %5788, i32 0
  %5791 = fsub float %5789, %5790
  %5792 = bitcast i8* %5777 to float*
  store float %5791, float* %5792, align 1, !tbaa !2452
  %5793 = bitcast <2 x float> %5783 to <2 x i32>
  %5794 = extractelement <2 x i32> %5793, i32 1
  %5795 = getelementptr inbounds i8, i8* %5777, i64 4
  %5796 = bitcast i8* %5795 to i32*
  store i32 %5794, i32* %5796, align 1, !tbaa !2452
  %5797 = extractelement <2 x i32> %5786, i32 0
  %5798 = getelementptr inbounds i8, i8* %5777, i64 8
  %5799 = bitcast i8* %5798 to i32*
  store i32 %5797, i32* %5799, align 1, !tbaa !2452
  %5800 = extractelement <2 x i32> %5786, i32 1
  %5801 = getelementptr inbounds i8, i8* %5777, i64 12
  %5802 = bitcast i8* %5801 to i32*
  store i32 %5800, i32* %5802, align 1, !tbaa !2452
  %5803 = load i64, i64* %RBP
  %5804 = sub i64 %5803, 56
  %5805 = bitcast %union.vec128_t* %XMM0 to i8*
  %5806 = load i64, i64* %PC
  %5807 = add i64 %5806, 5
  store i64 %5807, i64* %PC
  %5808 = bitcast i8* %5805 to <2 x float>*
  %5809 = load <2 x float>, <2 x float>* %5808, align 1
  %5810 = extractelement <2 x float> %5809, i32 0
  %5811 = inttoptr i64 %5804 to float*
  store float %5810, float* %5811
  %5812 = load i64, i64* %PC
  %5813 = add i64 %5812, 8
  store i64 %5813, i64* %PC
  %5814 = load i64, i64* @stderr
  store i64 %5814, i64* %RDI, align 8, !tbaa !2428
  %5815 = load i64, i64* %PC
  %5816 = add i64 %5815, 2
  store i64 %5816, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5817 = load i64, i64* %PC
  %5818 = sub i64 %5817, 1732
  %5819 = load i64, i64* %PC
  %5820 = add i64 %5819, 5
  %5821 = load i64, i64* %PC
  %5822 = add i64 %5821, 5
  store i64 %5822, i64* %PC
  %5823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5824 = load i64, i64* %5823, align 8, !tbaa !2428
  %5825 = add i64 %5824, -8
  %5826 = inttoptr i64 %5825 to i64*
  store i64 %5820, i64* %5826
  store i64 %5825, i64* %5823, align 8, !tbaa !2428
  %5827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5818, i64* %5827, align 8, !tbaa !2428
  %5828 = load i64, i64* %PC
  %5829 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5828, %struct.Memory* %5480)
  %5830 = load i64, i64* %PC
  %5831 = add i64 %5830, 10
  store i64 %5831, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %5832 = load i64, i64* %PC
  %5833 = add i64 %5832, 8
  store i64 %5833, i64* %PC
  %5834 = load i64, i64* @stderr
  store i64 %5834, i64* %RDI, align 8, !tbaa !2428
  %5835 = load i64, i64* %RBP
  %5836 = sub i64 %5835, 908
  %5837 = load i32, i32* %EAX
  %5838 = zext i32 %5837 to i64
  %5839 = load i64, i64* %PC
  %5840 = add i64 %5839, 6
  store i64 %5840, i64* %PC
  %5841 = inttoptr i64 %5836 to i32*
  store i32 %5837, i32* %5841
  %5842 = load i64, i64* %PC
  %5843 = add i64 %5842, 2
  store i64 %5843, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5844 = load i64, i64* %PC
  %5845 = sub i64 %5844, 1763
  %5846 = load i64, i64* %PC
  %5847 = add i64 %5846, 5
  %5848 = load i64, i64* %PC
  %5849 = add i64 %5848, 5
  store i64 %5849, i64* %PC
  %5850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5851 = load i64, i64* %5850, align 8, !tbaa !2428
  %5852 = add i64 %5851, -8
  %5853 = inttoptr i64 %5852 to i64*
  store i64 %5847, i64* %5853
  store i64 %5852, i64* %5850, align 8, !tbaa !2428
  %5854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5845, i64* %5854, align 8, !tbaa !2428
  %5855 = load i64, i64* %PC
  %5856 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5855, %struct.Memory* %5829)
  %5857 = load i64, i64* %PC
  %5858 = add i64 %5857, 10
  store i64 %5858, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %5859 = load i64, i64* %PC
  %5860 = add i64 %5859, 8
  store i64 %5860, i64* %PC
  %5861 = load i64, i64* @stderr
  store i64 %5861, i64* %RDI, align 8, !tbaa !2428
  %5862 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5863 = load i64, i64* %RBP
  %5864 = sub i64 %5863, 32
  %5865 = load i64, i64* %PC
  %5866 = add i64 %5865, 5
  store i64 %5866, i64* %PC
  %5867 = inttoptr i64 %5864 to float*
  %5868 = load float, float* %5867
  %5869 = fpext float %5868 to double
  %5870 = bitcast i8* %5862 to double*
  store double %5869, double* %5870, align 1, !tbaa !2454
  %5871 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5872 = load i64, i64* %RBP
  %5873 = sub i64 %5872, 28
  %5874 = load i64, i64* %PC
  %5875 = add i64 %5874, 5
  store i64 %5875, i64* %PC
  %5876 = inttoptr i64 %5873 to float*
  %5877 = load float, float* %5876
  %5878 = fpext float %5877 to double
  %5879 = bitcast i8* %5871 to double*
  store double %5878, double* %5879, align 1, !tbaa !2454
  %5880 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5881 = load i64, i64* %RBP
  %5882 = sub i64 %5881, 48
  %5883 = load i64, i64* %PC
  %5884 = add i64 %5883, 5
  store i64 %5884, i64* %PC
  %5885 = inttoptr i64 %5882 to float*
  %5886 = load float, float* %5885
  %5887 = fpext float %5886 to double
  %5888 = bitcast i8* %5880 to double*
  store double %5887, double* %5888, align 1, !tbaa !2454
  %5889 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5890 = load i64, i64* %RBP
  %5891 = sub i64 %5890, 52
  %5892 = load i64, i64* %PC
  %5893 = add i64 %5892, 5
  store i64 %5893, i64* %PC
  %5894 = inttoptr i64 %5891 to float*
  %5895 = load float, float* %5894
  %5896 = fpext float %5895 to double
  %5897 = bitcast i8* %5889 to double*
  store double %5896, double* %5897, align 1, !tbaa !2454
  %5898 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5899 = load i64, i64* %RBP
  %5900 = sub i64 %5899, 56
  %5901 = load i64, i64* %PC
  %5902 = add i64 %5901, 5
  store i64 %5902, i64* %PC
  %5903 = inttoptr i64 %5900 to float*
  %5904 = load float, float* %5903
  %5905 = fpext float %5904 to double
  %5906 = bitcast i8* %5898 to double*
  store double %5905, double* %5906, align 1, !tbaa !2454
  %5907 = load i64, i64* %RBP
  %5908 = sub i64 %5907, 912
  %5909 = load i32, i32* %EAX
  %5910 = zext i32 %5909 to i64
  %5911 = load i64, i64* %PC
  %5912 = add i64 %5911, 6
  store i64 %5912, i64* %PC
  %5913 = inttoptr i64 %5908 to i32*
  store i32 %5909, i32* %5913
  %5914 = load i64, i64* %PC
  %5915 = add i64 %5914, 2
  store i64 %5915, i64* %PC
  store i8 5, i8* %AL, align 1, !tbaa !2451
  %5916 = load i64, i64* %PC
  %5917 = sub i64 %5916, 1819
  %5918 = load i64, i64* %PC
  %5919 = add i64 %5918, 5
  %5920 = load i64, i64* %PC
  %5921 = add i64 %5920, 5
  store i64 %5921, i64* %PC
  %5922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5923 = load i64, i64* %5922, align 8, !tbaa !2428
  %5924 = add i64 %5923, -8
  %5925 = inttoptr i64 %5924 to i64*
  store i64 %5919, i64* %5925
  store i64 %5924, i64* %5922, align 8, !tbaa !2428
  %5926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5917, i64* %5926, align 8, !tbaa !2428
  %5927 = load i64, i64* %PC
  %5928 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5927, %struct.Memory* %5856)
  %5929 = load i64, i64* %PC
  %5930 = add i64 %5929, 10
  store i64 %5930, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %5931 = load i64, i64* %PC
  %5932 = add i64 %5931, 8
  store i64 %5932, i64* %PC
  %5933 = load i64, i64* @stderr
  store i64 %5933, i64* %RDI, align 8, !tbaa !2428
  %5934 = load i64, i64* %PC
  %5935 = add i64 %5934, 7
  store i64 %5935, i64* %PC
  %5936 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %5937 = zext i32 %5936 to i64
  store i64 %5937, i64* %RDX, align 8, !tbaa !2428
  %5938 = load i64, i64* %RBP
  %5939 = sub i64 %5938, 916
  %5940 = load i32, i32* %EAX
  %5941 = zext i32 %5940 to i64
  %5942 = load i64, i64* %PC
  %5943 = add i64 %5942, 6
  store i64 %5943, i64* %PC
  %5944 = inttoptr i64 %5939 to i32*
  store i32 %5940, i32* %5944
  %5945 = load i64, i64* %PC
  %5946 = add i64 %5945, 2
  store i64 %5946, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5947 = load i64, i64* %PC
  %5948 = sub i64 %5947, 1857
  %5949 = load i64, i64* %PC
  %5950 = add i64 %5949, 5
  %5951 = load i64, i64* %PC
  %5952 = add i64 %5951, 5
  store i64 %5952, i64* %PC
  %5953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5954 = load i64, i64* %5953, align 8, !tbaa !2428
  %5955 = add i64 %5954, -8
  %5956 = inttoptr i64 %5955 to i64*
  store i64 %5950, i64* %5956
  store i64 %5955, i64* %5953, align 8, !tbaa !2428
  %5957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5948, i64* %5957, align 8, !tbaa !2428
  %5958 = load i64, i64* %PC
  %5959 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5958, %struct.Memory* %5928)
  %5960 = load i64, i64* %PC
  %5961 = add i64 %5960, 10
  store i64 %5961, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %5962 = load i64, i64* %PC
  %5963 = add i64 %5962, 8
  store i64 %5963, i64* %PC
  %5964 = load i64, i64* @stderr
  store i64 %5964, i64* %RDI, align 8, !tbaa !2428
  %5965 = load i64, i64* %PC
  %5966 = add i64 %5965, 7
  store i64 %5966, i64* %PC
  %5967 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %5968 = zext i32 %5967 to i64
  store i64 %5968, i64* %RDX, align 8, !tbaa !2428
  %5969 = load i64, i64* %RBP
  %5970 = sub i64 %5969, 920
  %5971 = load i32, i32* %EAX
  %5972 = zext i32 %5971 to i64
  %5973 = load i64, i64* %PC
  %5974 = add i64 %5973, 6
  store i64 %5974, i64* %PC
  %5975 = inttoptr i64 %5970 to i32*
  store i32 %5971, i32* %5975
  %5976 = load i64, i64* %PC
  %5977 = add i64 %5976, 2
  store i64 %5977, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %5978 = load i64, i64* %PC
  %5979 = sub i64 %5978, 1895
  %5980 = load i64, i64* %PC
  %5981 = add i64 %5980, 5
  %5982 = load i64, i64* %PC
  %5983 = add i64 %5982, 5
  store i64 %5983, i64* %PC
  %5984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5985 = load i64, i64* %5984, align 8, !tbaa !2428
  %5986 = add i64 %5985, -8
  %5987 = inttoptr i64 %5986 to i64*
  store i64 %5981, i64* %5987
  store i64 %5986, i64* %5984, align 8, !tbaa !2428
  %5988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5979, i64* %5988, align 8, !tbaa !2428
  %5989 = load i64, i64* %PC
  %5990 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %5989, %struct.Memory* %5959)
  %5991 = load i64, i64* %PC
  %5992 = add i64 %5991, 10
  store i64 %5992, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %5993 = load i64, i64* %PC
  %5994 = add i64 %5993, 8
  store i64 %5994, i64* %PC
  %5995 = load i64, i64* @stderr
  store i64 %5995, i64* %RDI, align 8, !tbaa !2428
  %5996 = load i64, i64* %RBP
  %5997 = sub i64 %5996, 924
  %5998 = load i32, i32* %EAX
  %5999 = zext i32 %5998 to i64
  %6000 = load i64, i64* %PC
  %6001 = add i64 %6000, 6
  store i64 %6001, i64* %PC
  %6002 = inttoptr i64 %5997 to i32*
  store i32 %5998, i32* %6002
  %6003 = load i64, i64* %PC
  %6004 = add i64 %6003, 2
  store i64 %6004, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %6005 = load i64, i64* %PC
  %6006 = sub i64 %6005, 1926
  %6007 = load i64, i64* %PC
  %6008 = add i64 %6007, 5
  %6009 = load i64, i64* %PC
  %6010 = add i64 %6009, 5
  store i64 %6010, i64* %PC
  %6011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6012 = load i64, i64* %6011, align 8, !tbaa !2428
  %6013 = add i64 %6012, -8
  %6014 = inttoptr i64 %6013 to i64*
  store i64 %6008, i64* %6014
  store i64 %6013, i64* %6011, align 8, !tbaa !2428
  %6015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6006, i64* %6015, align 8, !tbaa !2428
  %6016 = load i64, i64* %PC
  %6017 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %6016, %struct.Memory* %5990)
  %6018 = load i64, i64* %PC
  %6019 = add i64 %6018, 10
  store i64 %6019, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %6020 = load i64, i64* %PC
  %6021 = add i64 %6020, 8
  store i64 %6021, i64* %PC
  %6022 = load i64, i64* @stderr
  store i64 %6022, i64* %RDI, align 8, !tbaa !2428
  %6023 = load i64, i64* %RBP
  %6024 = sub i64 %6023, 928
  %6025 = load i32, i32* %EAX
  %6026 = zext i32 %6025 to i64
  %6027 = load i64, i64* %PC
  %6028 = add i64 %6027, 6
  store i64 %6028, i64* %PC
  %6029 = inttoptr i64 %6024 to i32*
  store i32 %6025, i32* %6029
  %6030 = load i64, i64* %PC
  %6031 = add i64 %6030, 2
  store i64 %6031, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %6032 = load i64, i64* %PC
  %6033 = sub i64 %6032, 1957
  %6034 = load i64, i64* %PC
  %6035 = add i64 %6034, 5
  %6036 = load i64, i64* %PC
  %6037 = add i64 %6036, 5
  store i64 %6037, i64* %PC
  %6038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6039 = load i64, i64* %6038, align 8, !tbaa !2428
  %6040 = add i64 %6039, -8
  %6041 = inttoptr i64 %6040 to i64*
  store i64 %6035, i64* %6041
  store i64 %6040, i64* %6038, align 8, !tbaa !2428
  %6042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6033, i64* %6042, align 8, !tbaa !2428
  %6043 = load i64, i64* %PC
  %6044 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %6043, %struct.Memory* %6017)
  %6045 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6046 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6047 = bitcast %union.vec128_t* %XMM0 to i8*
  %6048 = load i64, i64* %PC
  %6049 = add i64 %6048, 3
  store i64 %6049, i64* %PC
  %6050 = bitcast i8* %6046 to i64*
  %6051 = load i64, i64* %6050, align 1
  %6052 = getelementptr inbounds i8, i8* %6046, i64 8
  %6053 = bitcast i8* %6052 to i64*
  %6054 = load i64, i64* %6053, align 1
  %6055 = bitcast i8* %6047 to i64*
  %6056 = load i64, i64* %6055, align 1
  %6057 = getelementptr inbounds i8, i8* %6047, i64 8
  %6058 = bitcast i8* %6057 to i64*
  %6059 = load i64, i64* %6058, align 1
  %6060 = xor i64 %6056, %6051
  %6061 = xor i64 %6059, %6054
  %6062 = trunc i64 %6060 to i32
  %6063 = lshr i64 %6060, 32
  %6064 = trunc i64 %6063 to i32
  %6065 = bitcast i8* %6045 to i32*
  store i32 %6062, i32* %6065, align 1, !tbaa !2456
  %6066 = getelementptr inbounds i8, i8* %6045, i64 4
  %6067 = bitcast i8* %6066 to i32*
  store i32 %6064, i32* %6067, align 1, !tbaa !2456
  %6068 = trunc i64 %6061 to i32
  %6069 = getelementptr inbounds i8, i8* %6045, i64 8
  %6070 = bitcast i8* %6069 to i32*
  store i32 %6068, i32* %6070, align 1, !tbaa !2456
  %6071 = lshr i64 %6061, 32
  %6072 = trunc i64 %6071 to i32
  %6073 = getelementptr inbounds i8, i8* %6045, i64 12
  %6074 = bitcast i8* %6073 to i32*
  store i32 %6072, i32* %6074, align 1, !tbaa !2456
  %6075 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6076 = load i64, i64* %RBP
  %6077 = sub i64 %6076, 16
  %6078 = load i64, i64* %PC
  %6079 = add i64 %6078, 5
  store i64 %6079, i64* %PC
  %6080 = inttoptr i64 %6077 to float*
  %6081 = load float, float* %6080
  %6082 = bitcast i8* %6075 to float*
  store float %6081, float* %6082, align 1, !tbaa !2452
  %6083 = getelementptr inbounds i8, i8* %6075, i64 4
  %6084 = bitcast i8* %6083 to float*
  store float 0.000000e+00, float* %6084, align 1, !tbaa !2452
  %6085 = getelementptr inbounds i8, i8* %6075, i64 8
  %6086 = bitcast i8* %6085 to float*
  store float 0.000000e+00, float* %6086, align 1, !tbaa !2452
  %6087 = getelementptr inbounds i8, i8* %6075, i64 12
  %6088 = bitcast i8* %6087 to float*
  store float 0.000000e+00, float* %6088, align 1, !tbaa !2452
  %6089 = bitcast %union.vec128_t* %XMM1 to i8*
  %6090 = load i64, i64* %PC
  %6091 = add i64 %6090, 9
  store i64 %6091, i64* %PC
  %6092 = bitcast i8* %6089 to <2 x float>*
  %6093 = load <2 x float>, <2 x float>* %6092, align 1
  %6094 = extractelement <2 x float> %6093, i32 0
  store float %6094, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*)
  %6095 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6096 = load i64, i64* %RBP
  %6097 = sub i64 %6096, 16
  %6098 = load i64, i64* %PC
  %6099 = add i64 %6098, 5
  store i64 %6099, i64* %PC
  %6100 = inttoptr i64 %6097 to float*
  %6101 = load float, float* %6100
  %6102 = fpext float %6101 to double
  %6103 = bitcast i8* %6095 to double*
  store double %6102, double* %6103, align 1, !tbaa !2454
  %6104 = bitcast %union.vec128_t* %XMM1 to i8*
  %6105 = bitcast %union.vec128_t* %XMM0 to i8*
  %6106 = load i64, i64* %PC
  %6107 = add i64 %6106, 4
  store i64 %6107, i64* %PC
  %6108 = bitcast i8* %6104 to double*
  %6109 = load double, double* %6108, align 1
  %6110 = bitcast i8* %6105 to double*
  %6111 = load double, double* %6110, align 1
  %6112 = fcmp uno double %6109, %6111
  br i1 %6112, label %6113, label %6125

; <label>:6113:                                   ; preds = %block_400b15
  %6114 = fadd double %6109, %6111
  %6115 = bitcast double %6114 to i64
  %6116 = and i64 %6115, 9221120237041090560
  %6117 = icmp eq i64 %6116, 9218868437227405312
  %6118 = and i64 %6115, 2251799813685247
  %6119 = icmp ne i64 %6118, 0
  %6120 = and i1 %6117, %6119
  br i1 %6120, label %6121, label %6131

; <label>:6121:                                   ; preds = %6113
  %6122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6123 = load i64, i64* %6122, align 8, !tbaa !2428
  %6124 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6123, %struct.Memory* %6044) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:6125:                                   ; preds = %block_400b15
  %6126 = fcmp ogt double %6109, %6111
  br i1 %6126, label %6131, label %6127

; <label>:6127:                                   ; preds = %6125
  %6128 = fcmp olt double %6109, %6111
  br i1 %6128, label %6131, label %6129

; <label>:6129:                                   ; preds = %6127
  %6130 = fcmp oeq double %6109, %6111
  br i1 %6130, label %6131, label %6138

; <label>:6131:                                   ; preds = %6129, %6127, %6125, %6113
  %6132 = phi i8 [ 0, %6125 ], [ 0, %6127 ], [ 1, %6129 ], [ 1, %6113 ]
  %6133 = phi i8 [ 0, %6125 ], [ 0, %6127 ], [ 0, %6129 ], [ 1, %6113 ]
  %6134 = phi i8 [ 0, %6125 ], [ 1, %6127 ], [ 0, %6129 ], [ 1, %6113 ]
  %6135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6132, i8* %6135, align 1, !tbaa !2451
  %6136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6133, i8* %6136, align 1, !tbaa !2451
  %6137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6134, i8* %6137, align 1, !tbaa !2451
  br label %6138

; <label>:6138:                                   ; preds = %6131, %6129
  %6139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6139, align 1, !tbaa !2451
  %6140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6140, align 1, !tbaa !2451
  %6141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6141, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %6121, %6138
  %6142 = phi %struct.Memory* [ %6124, %6121 ], [ %6044, %6138 ]
  %6143 = load i64, i64* %RBP
  %6144 = sub i64 %6143, 932
  %6145 = load i32, i32* %EAX
  %6146 = zext i32 %6145 to i64
  %6147 = load i64, i64* %PC
  %6148 = add i64 %6147, 6
  store i64 %6148, i64* %PC
  %6149 = inttoptr i64 %6144 to i32*
  store i32 %6145, i32* %6149
  %6150 = load i64, i64* %PC
  %6151 = add i64 %6150, 84
  %6152 = load i64, i64* %PC
  %6153 = add i64 %6152, 6
  %6154 = load i64, i64* %PC
  %6155 = add i64 %6154, 6
  store i64 %6155, i64* %PC
  %6156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6157 = load i8, i8* %6156, align 1, !tbaa !2432
  %6158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6159 = load i8, i8* %6158, align 1, !tbaa !2448
  %6160 = or i8 %6159, %6157
  %6161 = icmp ne i8 %6160, 0
  %6162 = zext i1 %6161 to i8
  store i8 %6162, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6164 = select i1 %6161, i64 %6151, i64 %6153
  store i64 %6164, i64* %6163, align 8, !tbaa !2428
  %6165 = load i8, i8* %BRANCH_TAKEN
  %6166 = icmp eq i8 %6165, 1
  %6167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %6166, label %block_400cfe, label %block_400cb0

block_400e14:                                     ; preds = %block_400dc9
  %6168 = load i64, i64* %RBP
  %6169 = sub i64 %6168, 68
  %6170 = load i64, i64* %PC
  %6171 = add i64 %6170, 3
  store i64 %6171, i64* %PC
  %6172 = inttoptr i64 %6169 to i32*
  %6173 = load i32, i32* %6172
  %6174 = zext i32 %6173 to i64
  store i64 %6174, i64* %RAX, align 8, !tbaa !2428
  %6175 = load i64, i64* %RAX
  %6176 = load i64, i64* %PC
  %6177 = add i64 %6176, 3
  store i64 %6177, i64* %PC
  %6178 = trunc i64 %6175 to i32
  %6179 = shl i32 %6178, 1
  %6180 = icmp slt i32 %6178, 0
  %6181 = icmp slt i32 %6179, 0
  %6182 = xor i1 %6180, %6181
  %6183 = zext i32 %6179 to i64
  store i64 %6183, i64* %RAX, align 8, !tbaa !2428
  %6184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6185 = zext i1 %6180 to i8
  store i8 %6185, i8* %6184, align 1, !tbaa !2451
  %6186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6187 = and i32 %6179, 254
  %6188 = call i32 @llvm.ctpop.i32(i32 %6187) #16
  %6189 = trunc i32 %6188 to i8
  %6190 = and i8 %6189, 1
  %6191 = xor i8 %6190, 1
  store i8 %6191, i8* %6186, align 1, !tbaa !2451
  %6192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6192, align 1, !tbaa !2451
  %6193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6194 = icmp eq i32 %6179, 0
  %6195 = zext i1 %6194 to i8
  store i8 %6195, i8* %6193, align 1, !tbaa !2451
  %6196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6197 = lshr i32 %6179, 31
  %6198 = trunc i32 %6197 to i8
  store i8 %6198, i8* %6196, align 1, !tbaa !2451
  %6199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6200 = zext i1 %6182 to i8
  store i8 %6200, i8* %6199, align 1, !tbaa !2451
  %6201 = load i64, i64* %RBP
  %6202 = sub i64 %6201, 68
  %6203 = load i32, i32* %EAX
  %6204 = zext i32 %6203 to i64
  %6205 = load i64, i64* %PC
  %6206 = add i64 %6205, 3
  store i64 %6206, i64* %PC
  %6207 = inttoptr i64 %6202 to i32*
  store i32 %6203, i32* %6207
  br label %block_400e1d

block_4016fc:                                     ; preds = %block_40148d
  %6208 = add i64 %6738, 10
  store i64 %6208, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %6209 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6210 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6211 = bitcast %union.vec128_t* %XMM0 to i8*
  %6212 = load i64, i64* %PC
  %6213 = add i64 %6212, 3
  store i64 %6213, i64* %PC
  %6214 = bitcast i8* %6210 to i64*
  %6215 = load i64, i64* %6214, align 1
  %6216 = getelementptr inbounds i8, i8* %6210, i64 8
  %6217 = bitcast i8* %6216 to i64*
  %6218 = load i64, i64* %6217, align 1
  %6219 = bitcast i8* %6211 to i64*
  %6220 = load i64, i64* %6219, align 1
  %6221 = getelementptr inbounds i8, i8* %6211, i64 8
  %6222 = bitcast i8* %6221 to i64*
  %6223 = load i64, i64* %6222, align 1
  %6224 = xor i64 %6220, %6215
  %6225 = xor i64 %6223, %6218
  %6226 = trunc i64 %6224 to i32
  %6227 = lshr i64 %6224, 32
  %6228 = trunc i64 %6227 to i32
  %6229 = bitcast i8* %6209 to i32*
  store i32 %6226, i32* %6229, align 1, !tbaa !2456
  %6230 = getelementptr inbounds i8, i8* %6209, i64 4
  %6231 = bitcast i8* %6230 to i32*
  store i32 %6228, i32* %6231, align 1, !tbaa !2456
  %6232 = trunc i64 %6225 to i32
  %6233 = getelementptr inbounds i8, i8* %6209, i64 8
  %6234 = bitcast i8* %6233 to i32*
  store i32 %6232, i32* %6234, align 1, !tbaa !2456
  %6235 = lshr i64 %6225, 32
  %6236 = trunc i64 %6235 to i32
  %6237 = getelementptr inbounds i8, i8* %6209, i64 12
  %6238 = bitcast i8* %6237 to i32*
  store i32 %6236, i32* %6238, align 1, !tbaa !2456
  %6239 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6240 = load i64, i64* %PC
  %6241 = add i64 %6240, 8
  store i64 %6241, i64* %PC
  %6242 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 48) to double*)
  %6243 = bitcast i8* %6239 to double*
  store double %6242, double* %6243, align 1, !tbaa !2454
  %6244 = getelementptr inbounds i8, i8* %6239, i64 8
  %6245 = bitcast i8* %6244 to double*
  store double 0.000000e+00, double* %6245, align 1, !tbaa !2454
  %6246 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6247 = load i64, i64* %PC
  %6248 = add i64 %6247, 9
  store i64 %6248, i64* %PC
  %6249 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %6250 = fpext float %6249 to double
  %6251 = bitcast i8* %6246 to double*
  store double %6250, double* %6251, align 1, !tbaa !2454
  %6252 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6253 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6254 = bitcast %union.vec128_t* %XMM1 to i8*
  %6255 = load i64, i64* %PC
  %6256 = add i64 %6255, 4
  store i64 %6256, i64* %PC
  %6257 = bitcast i8* %6253 to double*
  %6258 = load double, double* %6257, align 1
  %6259 = getelementptr inbounds i8, i8* %6253, i64 8
  %6260 = bitcast i8* %6259 to i64*
  %6261 = load i64, i64* %6260, align 1
  %6262 = bitcast i8* %6254 to double*
  %6263 = load double, double* %6262, align 1
  %6264 = fdiv double %6258, %6263
  %6265 = bitcast i8* %6252 to double*
  store double %6264, double* %6265, align 1, !tbaa !2454
  %6266 = getelementptr inbounds i8, i8* %6252, i64 8
  %6267 = bitcast i8* %6266 to i64*
  store i64 %6261, i64* %6267, align 1, !tbaa !2454
  %6268 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6269 = bitcast %union.vec128_t* %XMM2 to i8*
  %6270 = load i64, i64* %PC
  %6271 = add i64 %6270, 4
  store i64 %6271, i64* %PC
  %6272 = bitcast i8* %6268 to <2 x i32>*
  %6273 = load <2 x i32>, <2 x i32>* %6272, align 1
  %6274 = getelementptr inbounds i8, i8* %6268, i64 8
  %6275 = bitcast i8* %6274 to <2 x i32>*
  %6276 = load <2 x i32>, <2 x i32>* %6275, align 1
  %6277 = bitcast i8* %6269 to double*
  %6278 = load double, double* %6277, align 1
  %6279 = fptrunc double %6278 to float
  %6280 = bitcast i8* %6268 to float*
  store float %6279, float* %6280, align 1, !tbaa !2452
  %6281 = extractelement <2 x i32> %6273, i32 1
  %6282 = getelementptr inbounds i8, i8* %6268, i64 4
  %6283 = bitcast i8* %6282 to i32*
  store i32 %6281, i32* %6283, align 1, !tbaa !2452
  %6284 = extractelement <2 x i32> %6276, i32 0
  %6285 = bitcast i8* %6274 to i32*
  store i32 %6284, i32* %6285, align 1, !tbaa !2452
  %6286 = extractelement <2 x i32> %6276, i32 1
  %6287 = getelementptr inbounds i8, i8* %6268, i64 12
  %6288 = bitcast i8* %6287 to i32*
  store i32 %6286, i32* %6288, align 1, !tbaa !2452
  %6289 = bitcast %union.vec128_t* %XMM1 to i8*
  %6290 = load i64, i64* %PC
  %6291 = add i64 %6290, 9
  store i64 %6291, i64* %PC
  %6292 = bitcast i8* %6289 to <2 x float>*
  %6293 = load <2 x float>, <2 x float>* %6292, align 1
  %6294 = extractelement <2 x float> %6293, i32 0
  store float %6294, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*)
  %6295 = load i64, i64* %PC
  %6296 = add i64 %6295, 8
  store i64 %6296, i64* %PC
  %6297 = load i64, i64* @stderr
  store i64 %6297, i64* %RDI, align 8, !tbaa !2428
  %6298 = load i64, i64* %PC
  %6299 = add i64 %6298, 2
  store i64 %6299, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %6300 = load i64, i64* %PC
  %6301 = sub i64 %6300, 4693
  %6302 = load i64, i64* %PC
  %6303 = add i64 %6302, 5
  %6304 = load i64, i64* %PC
  %6305 = add i64 %6304, 5
  store i64 %6305, i64* %PC
  %6306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6307 = load i64, i64* %6306, align 8, !tbaa !2428
  %6308 = add i64 %6307, -8
  %6309 = inttoptr i64 %6308 to i64*
  store i64 %6303, i64* %6309
  store i64 %6308, i64* %6306, align 8, !tbaa !2428
  %6310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6301, i64* %6310, align 8, !tbaa !2428
  %6311 = load i64, i64* %PC
  %6312 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %6311, %struct.Memory* %MEMORY.16)
  %6313 = load i64, i64* %RCX
  %6314 = load i32, i32* %ECX
  %6315 = zext i32 %6314 to i64
  %6316 = load i64, i64* %PC
  %6317 = add i64 %6316, 2
  store i64 %6317, i64* %PC
  %6318 = xor i64 %6315, %6313
  %6319 = trunc i64 %6318 to i32
  %6320 = and i64 %6318, 4294967295
  store i64 %6320, i64* %RCX, align 8, !tbaa !2428
  %6321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6321, align 1, !tbaa !2432
  %6322 = and i32 %6319, 255
  %6323 = call i32 @llvm.ctpop.i32(i32 %6322) #16
  %6324 = trunc i32 %6323 to i8
  %6325 = and i8 %6324, 1
  %6326 = xor i8 %6325, 1
  %6327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6326, i8* %6327, align 1, !tbaa !2446
  %6328 = icmp eq i32 %6319, 0
  %6329 = zext i1 %6328 to i8
  %6330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6329, i8* %6330, align 1, !tbaa !2448
  %6331 = lshr i32 %6319, 31
  %6332 = trunc i32 %6331 to i8
  %6333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6332, i8* %6333, align 1, !tbaa !2449
  %6334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6334, align 1, !tbaa !2450
  %6335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6335, align 1, !tbaa !2447
  %6336 = load i64, i64* %RBP
  %6337 = sub i64 %6336, 996
  %6338 = load i32, i32* %EAX
  %6339 = zext i32 %6338 to i64
  %6340 = load i64, i64* %PC
  %6341 = add i64 %6340, 6
  store i64 %6341, i64* %PC
  %6342 = inttoptr i64 %6337 to i32*
  store i32 %6338, i32* %6342
  %6343 = load i32, i32* %ECX
  %6344 = zext i32 %6343 to i64
  %6345 = load i64, i64* %PC
  %6346 = add i64 %6345, 2
  store i64 %6346, i64* %PC
  %6347 = and i64 %6344, 4294967295
  store i64 %6347, i64* %RAX, align 8, !tbaa !2428
  %6348 = load i64, i64* %RSP
  %6349 = load i64, i64* %PC
  %6350 = add i64 %6349, 7
  store i64 %6350, i64* %PC
  %6351 = add i64 1008, %6348
  store i64 %6351, i64* %RSP, align 8, !tbaa !2428
  %6352 = icmp ult i64 %6351, %6348
  %6353 = icmp ult i64 %6351, 1008
  %6354 = or i1 %6352, %6353
  %6355 = zext i1 %6354 to i8
  %6356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6355, i8* %6356, align 1, !tbaa !2432
  %6357 = trunc i64 %6351 to i32
  %6358 = and i32 %6357, 255
  %6359 = call i32 @llvm.ctpop.i32(i32 %6358) #16
  %6360 = trunc i32 %6359 to i8
  %6361 = and i8 %6360, 1
  %6362 = xor i8 %6361, 1
  %6363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6362, i8* %6363, align 1, !tbaa !2446
  %6364 = xor i64 1008, %6348
  %6365 = xor i64 %6364, %6351
  %6366 = lshr i64 %6365, 4
  %6367 = trunc i64 %6366 to i8
  %6368 = and i8 %6367, 1
  %6369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6368, i8* %6369, align 1, !tbaa !2447
  %6370 = icmp eq i64 %6351, 0
  %6371 = zext i1 %6370 to i8
  %6372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6371, i8* %6372, align 1, !tbaa !2448
  %6373 = lshr i64 %6351, 63
  %6374 = trunc i64 %6373 to i8
  %6375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6374, i8* %6375, align 1, !tbaa !2449
  %6376 = lshr i64 %6348, 63
  %6377 = xor i64 %6373, %6376
  %6378 = add nuw nsw i64 %6377, %6373
  %6379 = icmp eq i64 %6378, 2
  %6380 = zext i1 %6379 to i8
  %6381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6380, i8* %6381, align 1, !tbaa !2450
  %6382 = load i64, i64* %PC
  %6383 = add i64 %6382, 1
  store i64 %6383, i64* %PC
  %6384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6385 = load i64, i64* %6384, align 8, !tbaa !2428
  %6386 = add i64 %6385, 8
  %6387 = inttoptr i64 %6385 to i64*
  %6388 = load i64, i64* %6387
  store i64 %6388, i64* %RBP, align 8, !tbaa !2428
  store i64 %6386, i64* %6384, align 8, !tbaa !2428
  %6389 = load i64, i64* %PC
  %6390 = add i64 %6389, 1
  store i64 %6390, i64* %PC
  %6391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6393 = load i64, i64* %6392, align 8, !tbaa !2428
  %6394 = inttoptr i64 %6393 to i64*
  %6395 = load i64, i64* %6394
  store i64 %6395, i64* %6391, align 8, !tbaa !2428
  %6396 = add i64 %6393, 8
  store i64 %6396, i64* %6392, align 8, !tbaa !2428
  ret %struct.Memory* %6312

block_400d13:                                     ; preds = %block_400cb0, %block_400cfe
  %MEMORY.14 = phi %struct.Memory* [ %6142, %block_400cfe ], [ %6142, %block_400cb0 ]
  %6397 = load i64, i64* %RDI
  %6398 = load i32, i32* %EDI
  %6399 = zext i32 %6398 to i64
  %6400 = load i64, i64* %PC
  %6401 = add i64 %6400, 2
  store i64 %6401, i64* %PC
  %6402 = xor i64 %6399, %6397
  %6403 = trunc i64 %6402 to i32
  %6404 = and i64 %6402, 4294967295
  store i64 %6404, i64* %RDI, align 8, !tbaa !2428
  %6405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6405, align 1, !tbaa !2432
  %6406 = and i32 %6403, 255
  %6407 = call i32 @llvm.ctpop.i32(i32 %6406) #16
  %6408 = trunc i32 %6407 to i8
  %6409 = and i8 %6408, 1
  %6410 = xor i8 %6409, 1
  %6411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6410, i8* %6411, align 1, !tbaa !2446
  %6412 = icmp eq i32 %6403, 0
  %6413 = zext i1 %6412 to i8
  %6414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6413, i8* %6414, align 1, !tbaa !2448
  %6415 = lshr i32 %6403, 31
  %6416 = trunc i32 %6415 to i8
  %6417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6416, i8* %6417, align 1, !tbaa !2449
  %6418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6418, align 1, !tbaa !2450
  %6419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6419, align 1, !tbaa !2447
  %6420 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6421 = load i64, i64* %RBP
  %6422 = sub i64 %6421, 16
  %6423 = load i64, i64* %PC
  %6424 = add i64 %6423, 5
  store i64 %6424, i64* %PC
  %6425 = inttoptr i64 %6422 to float*
  %6426 = load float, float* %6425
  %6427 = bitcast i8* %6420 to float*
  store float %6426, float* %6427, align 1, !tbaa !2452
  %6428 = getelementptr inbounds i8, i8* %6420, i64 4
  %6429 = bitcast i8* %6428 to float*
  store float 0.000000e+00, float* %6429, align 1, !tbaa !2452
  %6430 = getelementptr inbounds i8, i8* %6420, i64 8
  %6431 = bitcast i8* %6430 to float*
  store float 0.000000e+00, float* %6431, align 1, !tbaa !2452
  %6432 = getelementptr inbounds i8, i8* %6420, i64 12
  %6433 = bitcast i8* %6432 to float*
  store float 0.000000e+00, float* %6433, align 1, !tbaa !2452
  %6434 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6435 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6436 = load i64, i64* %RBP
  %6437 = sub i64 %6436, 8
  %6438 = load i64, i64* %PC
  %6439 = add i64 %6438, 5
  store i64 %6439, i64* %PC
  %6440 = bitcast i8* %6435 to <2 x float>*
  %6441 = load <2 x float>, <2 x float>* %6440, align 1
  %6442 = getelementptr inbounds i8, i8* %6435, i64 8
  %6443 = bitcast i8* %6442 to <2 x i32>*
  %6444 = load <2 x i32>, <2 x i32>* %6443, align 1
  %6445 = inttoptr i64 %6437 to float*
  %6446 = load float, float* %6445
  %6447 = extractelement <2 x float> %6441, i32 0
  %6448 = fdiv float %6447, %6446
  %6449 = bitcast i8* %6434 to float*
  store float %6448, float* %6449, align 1, !tbaa !2452
  %6450 = bitcast <2 x float> %6441 to <2 x i32>
  %6451 = extractelement <2 x i32> %6450, i32 1
  %6452 = getelementptr inbounds i8, i8* %6434, i64 4
  %6453 = bitcast i8* %6452 to i32*
  store i32 %6451, i32* %6453, align 1, !tbaa !2452
  %6454 = extractelement <2 x i32> %6444, i32 0
  %6455 = getelementptr inbounds i8, i8* %6434, i64 8
  %6456 = bitcast i8* %6455 to i32*
  store i32 %6454, i32* %6456, align 1, !tbaa !2452
  %6457 = extractelement <2 x i32> %6444, i32 1
  %6458 = getelementptr inbounds i8, i8* %6434, i64 12
  %6459 = bitcast i8* %6458 to i32*
  store i32 %6457, i32* %6459, align 1, !tbaa !2452
  %6460 = bitcast %union.vec128_t* %XMM0 to i8*
  %6461 = load i64, i64* %PC
  %6462 = add i64 %6461, 9
  store i64 %6462, i64* %PC
  %6463 = bitcast i8* %6460 to <2 x float>*
  %6464 = load <2 x float>, <2 x float>* %6463, align 1
  %6465 = extractelement <2 x float> %6464, i32 0
  store float %6465, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*)
  %6466 = load i64, i64* %PC
  %6467 = add i64 %6466, 6968
  %6468 = load i64, i64* %PC
  %6469 = add i64 %6468, 5
  %6470 = load i64, i64* %PC
  %6471 = add i64 %6470, 5
  store i64 %6471, i64* %PC
  %6472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6473 = load i64, i64* %6472, align 8, !tbaa !2428
  %6474 = add i64 %6473, -8
  %6475 = inttoptr i64 %6474 to i64*
  store i64 %6469, i64* %6475
  store i64 %6474, i64* %6472, align 8, !tbaa !2428
  %6476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6467, i64* %6476, align 8, !tbaa !2428
  %6477 = load i64, i64* %PC
  %6478 = call %struct.Memory* @sub_402860_print_time(%struct.State* %0, i64 %6477, %struct.Memory* %MEMORY.14)
  %6479 = load i64, i64* %PC
  %6480 = add i64 %6479, 10
  store i64 %6480, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %6481 = load i64, i64* %PC
  %6482 = add i64 %6481, 8
  store i64 %6482, i64* %PC
  %6483 = load i64, i64* @stderr
  store i64 %6483, i64* %RDI, align 8, !tbaa !2428
  %6484 = load i64, i64* %PC
  %6485 = add i64 %6484, 2
  store i64 %6485, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %6486 = load i64, i64* %PC
  %6487 = sub i64 %6486, 2145
  %6488 = load i64, i64* %PC
  %6489 = add i64 %6488, 5
  %6490 = load i64, i64* %PC
  %6491 = add i64 %6490, 5
  store i64 %6491, i64* %PC
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6493 = load i64, i64* %6492, align 8, !tbaa !2428
  %6494 = add i64 %6493, -8
  %6495 = inttoptr i64 %6494 to i64*
  store i64 %6489, i64* %6495
  store i64 %6494, i64* %6492, align 8, !tbaa !2428
  %6496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6487, i64* %6496, align 8, !tbaa !2428
  %6497 = load i64, i64* %PC
  %6498 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %6497, %struct.Memory* %6478)
  %6499 = load i64, i64* %RBP
  %6500 = sub i64 %6499, 64
  %6501 = load i64, i64* %PC
  %6502 = add i64 %6501, 7
  store i64 %6502, i64* %PC
  %6503 = inttoptr i64 %6500 to i32*
  store i32 -3, i32* %6503
  %6504 = load i64, i64* %RBP
  %6505 = sub i64 %6504, 68
  %6506 = load i64, i64* %PC
  %6507 = add i64 %6506, 7
  store i64 %6507, i64* %PC
  %6508 = inttoptr i64 %6505 to i32*
  store i32 100, i32* %6508
  %6509 = load i64, i64* %RBP
  %6510 = sub i64 %6509, 936
  %6511 = load i32, i32* %EAX
  %6512 = zext i32 %6511 to i64
  %6513 = load i64, i64* %PC
  %6514 = add i64 %6513, 6
  store i64 %6514, i64* %PC
  %6515 = inttoptr i64 %6510 to i32*
  store i32 %6511, i32* %6515
  br label %block_400d5a

block_400f90:                                     ; preds = %block_400f7f, %block_400f3a
  %MEMORY.15 = phi %struct.Memory* [ %3702, %block_400f3a ], [ %3702, %block_400f7f ]
  %6516 = load i64, i64* %PC
  %6517 = add i64 %6516, 5
  %6518 = load i64, i64* %PC
  %6519 = add i64 %6518, 5
  store i64 %6519, i64* %PC
  %6520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6517, i64* %6520, align 8, !tbaa !2428
  %6521 = load i64, i64* %RBP
  %6522 = sub i64 %6521, 64
  %6523 = load i64, i64* %PC
  %6524 = add i64 %6523, 4
  store i64 %6524, i64* %PC
  %6525 = inttoptr i64 %6522 to i32*
  %6526 = load i32, i32* %6525
  %6527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6527, align 1, !tbaa !2432
  %6528 = and i32 %6526, 255
  %6529 = call i32 @llvm.ctpop.i32(i32 %6528) #16
  %6530 = trunc i32 %6529 to i8
  %6531 = and i8 %6530, 1
  %6532 = xor i8 %6531, 1
  %6533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6532, i8* %6533, align 1, !tbaa !2446
  %6534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6534, align 1, !tbaa !2447
  %6535 = icmp eq i32 %6526, 0
  %6536 = zext i1 %6535 to i8
  %6537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6536, i8* %6537, align 1, !tbaa !2448
  %6538 = lshr i32 %6526, 31
  %6539 = trunc i32 %6538 to i8
  %6540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6539, i8* %6540, align 1, !tbaa !2449
  %6541 = lshr i32 %6526, 31
  %6542 = xor i32 %6538, %6541
  %6543 = add nuw nsw i32 %6542, %6541
  %6544 = icmp eq i32 %6543, 2
  %6545 = zext i1 %6544 to i8
  %6546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6545, i8* %6546, align 1, !tbaa !2450
  %6547 = load i64, i64* %PC
  %6548 = sub i64 %6547, 259
  %6549 = load i64, i64* %PC
  %6550 = add i64 %6549, 6
  %6551 = load i64, i64* %PC
  %6552 = add i64 %6551, 6
  store i64 %6552, i64* %PC
  %6553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6554 = load i8, i8* %6553, align 1, !tbaa !2449
  %6555 = icmp ne i8 %6554, 0
  %6556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6557 = load i8, i8* %6556, align 1, !tbaa !2450
  %6558 = icmp ne i8 %6557, 0
  %6559 = xor i1 %6555, %6558
  %6560 = zext i1 %6559 to i8
  store i8 %6560, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6562 = select i1 %6559, i64 %6548, i64 %6550
  store i64 %6562, i64* %6561, align 8, !tbaa !2428
  %6563 = load i8, i8* %BRANCH_TAKEN
  %6564 = icmp eq i8 %6563, 1
  br i1 %6564, label %block_400e96, label %block_400f9f

block_400971:                                     ; preds = %block_40095d
  %6565 = add i64 %4158, 8
  store i64 %6565, i64* %PC
  %6566 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6567 = sext i32 %6566 to i64
  store i64 %6567, i64* %RAX, align 8, !tbaa !2428
  %6568 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6569 = load i64, i64* %RAX
  %6570 = mul i64 %6569, 4
  %6571 = add i64 %6570, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %6572 = load i64, i64* %PC
  %6573 = add i64 %6572, 9
  store i64 %6573, i64* %PC
  %6574 = inttoptr i64 %6571 to float*
  %6575 = load float, float* %6574
  %6576 = bitcast i8* %6568 to float*
  store float %6575, float* %6576, align 1, !tbaa !2452
  %6577 = getelementptr inbounds i8, i8* %6568, i64 4
  %6578 = bitcast i8* %6577 to float*
  store float 0.000000e+00, float* %6578, align 1, !tbaa !2452
  %6579 = getelementptr inbounds i8, i8* %6568, i64 8
  %6580 = bitcast i8* %6579 to float*
  store float 0.000000e+00, float* %6580, align 1, !tbaa !2452
  %6581 = getelementptr inbounds i8, i8* %6568, i64 12
  %6582 = bitcast i8* %6581 to float*
  store float 0.000000e+00, float* %6582, align 1, !tbaa !2452
  %6583 = bitcast %union.vec128_t* %XMM0 to i8*
  %6584 = load i64, i64* %PC
  %6585 = add i64 %6584, 4
  store i64 %6585, i64* %PC
  %6586 = bitcast i8* %6583 to i64*
  %6587 = load i64, i64* %6586, align 1
  %6588 = trunc i64 %6587 to i32
  %6589 = bitcast i64* %RCX to [2 x i32]*
  %6590 = bitcast i64* %RCX to i32*
  store i32 %6588, i32* %6590, align 1, !tbaa !2456
  %6591 = getelementptr inbounds [2 x i32], [2 x i32]* %6589, i64 0, i64 1
  store i32 0, i32* %6591, align 1, !tbaa !2456
  %6592 = load i64, i64* %RCX
  %6593 = load i64, i64* %PC
  %6594 = add i64 %6593, 6
  store i64 %6594, i64* %PC
  %6595 = xor i64 -2147483648, %6592
  %6596 = trunc i64 %6595 to i32
  %6597 = and i64 %6595, 4294967295
  store i64 %6597, i64* %RCX, align 8, !tbaa !2428
  %6598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6598, align 1, !tbaa !2432
  %6599 = and i32 %6596, 255
  %6600 = call i32 @llvm.ctpop.i32(i32 %6599) #16
  %6601 = trunc i32 %6600 to i8
  %6602 = and i8 %6601, 1
  %6603 = xor i8 %6602, 1
  %6604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6603, i8* %6604, align 1, !tbaa !2446
  %6605 = icmp eq i32 %6596, 0
  %6606 = zext i1 %6605 to i8
  %6607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6606, i8* %6607, align 1, !tbaa !2448
  %6608 = lshr i32 %6596, 31
  %6609 = trunc i32 %6608 to i8
  %6610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6609, i8* %6610, align 1, !tbaa !2449
  %6611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6611, align 1, !tbaa !2450
  %6612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6612, align 1, !tbaa !2447
  %6613 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6614 = load i32, i32* %ECX
  %6615 = zext i32 %6614 to i64
  %6616 = load i64, i64* %PC
  %6617 = add i64 %6616, 4
  store i64 %6617, i64* %PC
  %6618 = bitcast i8* %6613 to i32*
  store i32 %6614, i32* %6618, align 1, !tbaa !2456
  %6619 = getelementptr inbounds i8, i8* %6613, i64 4
  %6620 = bitcast i8* %6619 to i32*
  store i32 0, i32* %6620, align 1, !tbaa !2456
  %6621 = getelementptr inbounds i8, i8* %6613, i64 8
  %6622 = bitcast i8* %6621 to i32*
  store i32 0, i32* %6622, align 1, !tbaa !2456
  %6623 = getelementptr inbounds i8, i8* %6613, i64 12
  %6624 = bitcast i8* %6623 to i32*
  store i32 0, i32* %6624, align 1, !tbaa !2456
  %6625 = load i64, i64* %PC
  %6626 = add i64 %6625, 8
  store i64 %6626, i64* %PC
  %6627 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6628 = sext i32 %6627 to i64
  store i64 %6628, i64* %RAX, align 8, !tbaa !2428
  %6629 = load i64, i64* %RAX
  %6630 = mul i64 %6629, 4
  %6631 = add i64 %6630, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %6632 = bitcast %union.vec128_t* %XMM0 to i8*
  %6633 = load i64, i64* %PC
  %6634 = add i64 %6633, 9
  store i64 %6634, i64* %PC
  %6635 = bitcast i8* %6632 to <2 x float>*
  %6636 = load <2 x float>, <2 x float>* %6635, align 1
  %6637 = extractelement <2 x float> %6636, i32 0
  %6638 = inttoptr i64 %6631 to float*
  store float %6637, float* %6638
  %6639 = load i64, i64* %PC
  %6640 = add i64 %6639, 7
  store i64 %6640, i64* %PC
  %6641 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6642 = zext i32 %6641 to i64
  store i64 %6642, i64* %RAX, align 8, !tbaa !2428
  %6643 = load i64, i64* %RAX
  %6644 = load i64, i64* %PC
  %6645 = add i64 %6644, 3
  store i64 %6645, i64* %PC
  %6646 = trunc i64 %6643 to i32
  %6647 = add i32 1, %6646
  %6648 = zext i32 %6647 to i64
  store i64 %6648, i64* %RAX, align 8, !tbaa !2428
  %6649 = icmp ult i32 %6647, %6646
  %6650 = icmp ult i32 %6647, 1
  %6651 = or i1 %6649, %6650
  %6652 = zext i1 %6651 to i8
  %6653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6652, i8* %6653, align 1, !tbaa !2432
  %6654 = and i32 %6647, 255
  %6655 = call i32 @llvm.ctpop.i32(i32 %6654) #16
  %6656 = trunc i32 %6655 to i8
  %6657 = and i8 %6656, 1
  %6658 = xor i8 %6657, 1
  %6659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6658, i8* %6659, align 1, !tbaa !2446
  %6660 = xor i64 1, %6643
  %6661 = trunc i64 %6660 to i32
  %6662 = xor i32 %6661, %6647
  %6663 = lshr i32 %6662, 4
  %6664 = trunc i32 %6663 to i8
  %6665 = and i8 %6664, 1
  %6666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6665, i8* %6666, align 1, !tbaa !2447
  %6667 = icmp eq i32 %6647, 0
  %6668 = zext i1 %6667 to i8
  %6669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6668, i8* %6669, align 1, !tbaa !2448
  %6670 = lshr i32 %6647, 31
  %6671 = trunc i32 %6670 to i8
  %6672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6671, i8* %6672, align 1, !tbaa !2449
  %6673 = lshr i32 %6646, 31
  %6674 = xor i32 %6670, %6673
  %6675 = add nuw nsw i32 %6674, %6670
  %6676 = icmp eq i32 %6675, 2
  %6677 = zext i1 %6676 to i8
  %6678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6677, i8* %6678, align 1, !tbaa !2450
  %6679 = load i32, i32* %EAX
  %6680 = zext i32 %6679 to i64
  %6681 = load i64, i64* %PC
  %6682 = add i64 %6681, 7
  store i64 %6682, i64* %PC
  store i32 %6679, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6683 = load i64, i64* %PC
  %6684 = sub i64 %6683, 85
  %6685 = load i64, i64* %PC
  %6686 = add i64 %6685, 5
  store i64 %6686, i64* %PC
  %6687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6684, i64* %6687, align 8, !tbaa !2428
  br label %block_40095d

block_40148d:                                     ; preds = %block_4013aa, %block_4015d6
  %MEMORY.16 = phi %struct.Memory* [ %4569, %block_4013aa ], [ %2055, %block_4015d6 ]
  %6688 = load i64, i64* %PC
  %6689 = add i64 %6688, 8
  store i64 %6689, i64* %PC
  %6690 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*)
  %6691 = sub i32 %6690, 12
  %6692 = icmp ult i32 %6690, 12
  %6693 = zext i1 %6692 to i8
  %6694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6693, i8* %6694, align 1, !tbaa !2432
  %6695 = and i32 %6691, 255
  %6696 = call i32 @llvm.ctpop.i32(i32 %6695) #16
  %6697 = trunc i32 %6696 to i8
  %6698 = and i8 %6697, 1
  %6699 = xor i8 %6698, 1
  %6700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6699, i8* %6700, align 1, !tbaa !2446
  %6701 = xor i32 %6690, 12
  %6702 = xor i32 %6701, %6691
  %6703 = lshr i32 %6702, 4
  %6704 = trunc i32 %6703 to i8
  %6705 = and i8 %6704, 1
  %6706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6705, i8* %6706, align 1, !tbaa !2447
  %6707 = icmp eq i32 %6691, 0
  %6708 = zext i1 %6707 to i8
  %6709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6708, i8* %6709, align 1, !tbaa !2448
  %6710 = lshr i32 %6691, 31
  %6711 = trunc i32 %6710 to i8
  %6712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6711, i8* %6712, align 1, !tbaa !2449
  %6713 = lshr i32 %6690, 31
  %6714 = xor i32 %6710, %6713
  %6715 = add nuw nsw i32 %6714, %6713
  %6716 = icmp eq i32 %6715, 2
  %6717 = zext i1 %6716 to i8
  %6718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6717, i8* %6718, align 1, !tbaa !2450
  %6719 = load i64, i64* %PC
  %6720 = add i64 %6719, 615
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 6
  %6723 = load i64, i64* %PC
  %6724 = add i64 %6723, 6
  store i64 %6724, i64* %PC
  %6725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6726 = load i8, i8* %6725, align 1, !tbaa !2449
  %6727 = icmp ne i8 %6726, 0
  %6728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6729 = load i8, i8* %6728, align 1, !tbaa !2450
  %6730 = icmp ne i8 %6729, 0
  %6731 = xor i1 %6727, %6730
  %6732 = xor i1 %6731, true
  %6733 = zext i1 %6732 to i8
  store i8 %6733, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6735 = select i1 %6731, i64 %6722, i64 %6720
  store i64 %6735, i64* %6734, align 8, !tbaa !2428
  %6736 = load i8, i8* %BRANCH_TAKEN
  %6737 = icmp eq i8 %6736, 1
  %6738 = load i64, i64* %PC
  br i1 %6737, label %block_4016fc, label %block_40149b

block_400a7c:                                     ; preds = %block_400a46, %block_400a58
  %MEMORY.17 = phi %struct.Memory* [ %4263, %block_400a58 ], [ %4263, %block_400a46 ]
  %6739 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6740 = load i64, i64* %RBP
  %6741 = sub i64 %6740, 896
  %6742 = load i64, i64* %PC
  %6743 = add i64 %6742, 8
  store i64 %6743, i64* %PC
  %6744 = inttoptr i64 %6741 to double*
  %6745 = load double, double* %6744
  %6746 = bitcast i8* %6739 to double*
  store double %6745, double* %6746, align 1, !tbaa !2454
  %6747 = getelementptr inbounds i8, i8* %6739, i64 8
  %6748 = bitcast i8* %6747 to double*
  store double 0.000000e+00, double* %6748, align 1, !tbaa !2454
  %6749 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6750 = bitcast %union.vec128_t* %XMM0 to i8*
  %6751 = load i64, i64* %PC
  %6752 = add i64 %6751, 4
  store i64 %6752, i64* %PC
  %6753 = bitcast i8* %6749 to <2 x i32>*
  %6754 = load <2 x i32>, <2 x i32>* %6753, align 1
  %6755 = getelementptr inbounds i8, i8* %6749, i64 8
  %6756 = bitcast i8* %6755 to <2 x i32>*
  %6757 = load <2 x i32>, <2 x i32>* %6756, align 1
  %6758 = bitcast i8* %6750 to double*
  %6759 = load double, double* %6758, align 1
  %6760 = fptrunc double %6759 to float
  %6761 = bitcast i8* %6749 to float*
  store float %6760, float* %6761, align 1, !tbaa !2452
  %6762 = extractelement <2 x i32> %6754, i32 1
  %6763 = getelementptr inbounds i8, i8* %6749, i64 4
  %6764 = bitcast i8* %6763 to i32*
  store i32 %6762, i32* %6764, align 1, !tbaa !2452
  %6765 = extractelement <2 x i32> %6757, i32 0
  %6766 = bitcast i8* %6755 to i32*
  store i32 %6765, i32* %6766, align 1, !tbaa !2452
  %6767 = extractelement <2 x i32> %6757, i32 1
  %6768 = getelementptr inbounds i8, i8* %6749, i64 12
  %6769 = bitcast i8* %6768 to i32*
  store i32 %6767, i32* %6769, align 1, !tbaa !2452
  %6770 = load i64, i64* %RBP
  %6771 = sub i64 %6770, 28
  %6772 = bitcast %union.vec128_t* %XMM0 to i8*
  %6773 = load i64, i64* %PC
  %6774 = add i64 %6773, 5
  store i64 %6774, i64* %PC
  %6775 = bitcast i8* %6772 to <2 x float>*
  %6776 = load <2 x float>, <2 x float>* %6775, align 1
  %6777 = extractelement <2 x float> %6776, i32 0
  %6778 = inttoptr i64 %6771 to float*
  store float %6777, float* %6778
  %6779 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6780 = load i64, i64* %RBP
  %6781 = sub i64 %6780, 24
  %6782 = load i64, i64* %PC
  %6783 = add i64 %6782, 5
  store i64 %6783, i64* %PC
  %6784 = inttoptr i64 %6781 to float*
  %6785 = load float, float* %6784
  %6786 = fpext float %6785 to double
  %6787 = bitcast i8* %6779 to double*
  store double %6786, double* %6787, align 1, !tbaa !2454
  %6788 = load i64, i64* %PC
  %6789 = add i64 %6788, 8
  store i64 %6789, i64* %PC
  %6790 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %6791 = sext i32 %6790 to i64
  store i64 %6791, i64* %RAX, align 8, !tbaa !2428
  %6792 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6793 = load i64, i64* %RAX
  %6794 = mul i64 %6793, 4
  %6795 = add i64 %6794, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %6796 = load i64, i64* %PC
  %6797 = add i64 %6796, 9
  store i64 %6797, i64* %PC
  %6798 = inttoptr i64 %6795 to float*
  %6799 = load float, float* %6798
  %6800 = fpext float %6799 to double
  %6801 = bitcast i8* %6792 to double*
  store double %6800, double* %6801, align 1, !tbaa !2454
  %6802 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6803 = load i64, i64* %PC
  %6804 = add i64 %6803, 7
  store i64 %6804, i64* %PC
  %6805 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %6806 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %6807 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %6808 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %6809 = bitcast i8* %6802 to float*
  store float %6805, float* %6809, align 1, !tbaa !2452
  %6810 = getelementptr inbounds i8, i8* %6802, i64 4
  %6811 = bitcast i8* %6810 to float*
  store float %6806, float* %6811, align 1, !tbaa !2452
  %6812 = getelementptr inbounds i8, i8* %6802, i64 8
  %6813 = bitcast i8* %6812 to float*
  store float %6807, float* %6813, align 1, !tbaa !2452
  %6814 = getelementptr inbounds i8, i8* %6802, i64 12
  %6815 = bitcast i8* %6814 to float*
  store float %6808, float* %6815, align 1, !tbaa !2452
  %6816 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6817 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6818 = bitcast %union.vec128_t* %XMM2 to i8*
  %6819 = load i64, i64* %PC
  %6820 = add i64 %6819, 4
  store i64 %6820, i64* %PC
  %6821 = bitcast i8* %6817 to i64*
  %6822 = load i64, i64* %6821, align 1
  %6823 = getelementptr inbounds i8, i8* %6817, i64 8
  %6824 = bitcast i8* %6823 to i64*
  %6825 = load i64, i64* %6824, align 1
  %6826 = bitcast i8* %6818 to i64*
  %6827 = load i64, i64* %6826, align 1
  %6828 = getelementptr inbounds i8, i8* %6818, i64 8
  %6829 = bitcast i8* %6828 to i64*
  %6830 = load i64, i64* %6829, align 1
  %6831 = and i64 %6827, %6822
  %6832 = and i64 %6830, %6825
  %6833 = trunc i64 %6831 to i32
  %6834 = lshr i64 %6831, 32
  %6835 = trunc i64 %6834 to i32
  %6836 = bitcast i8* %6816 to i32*
  store i32 %6833, i32* %6836, align 1, !tbaa !2456
  %6837 = getelementptr inbounds i8, i8* %6816, i64 4
  %6838 = bitcast i8* %6837 to i32*
  store i32 %6835, i32* %6838, align 1, !tbaa !2456
  %6839 = trunc i64 %6832 to i32
  %6840 = getelementptr inbounds i8, i8* %6816, i64 8
  %6841 = bitcast i8* %6840 to i32*
  store i32 %6839, i32* %6841, align 1, !tbaa !2456
  %6842 = lshr i64 %6832, 32
  %6843 = trunc i64 %6842 to i32
  %6844 = getelementptr inbounds i8, i8* %6816, i64 12
  %6845 = bitcast i8* %6844 to i32*
  store i32 %6843, i32* %6845, align 1, !tbaa !2456
  %6846 = bitcast %union.vec128_t* %XMM0 to i8*
  %6847 = bitcast %union.vec128_t* %XMM1 to i8*
  %6848 = load i64, i64* %PC
  %6849 = add i64 %6848, 4
  store i64 %6849, i64* %PC
  %6850 = bitcast i8* %6846 to double*
  %6851 = load double, double* %6850, align 1
  %6852 = bitcast i8* %6847 to double*
  %6853 = load double, double* %6852, align 1
  %6854 = fcmp uno double %6851, %6853
  br i1 %6854, label %6855, label %6867

; <label>:6855:                                   ; preds = %block_400a7c
  %6856 = fadd double %6851, %6853
  %6857 = bitcast double %6856 to i64
  %6858 = and i64 %6857, 9221120237041090560
  %6859 = icmp eq i64 %6858, 9218868437227405312
  %6860 = and i64 %6857, 2251799813685247
  %6861 = icmp ne i64 %6860, 0
  %6862 = and i1 %6859, %6861
  br i1 %6862, label %6863, label %6873

; <label>:6863:                                   ; preds = %6855
  %6864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6865 = load i64, i64* %6864, align 8, !tbaa !2428
  %6866 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6865, %struct.Memory* %MEMORY.17) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:6867:                                   ; preds = %block_400a7c
  %6868 = fcmp ogt double %6851, %6853
  br i1 %6868, label %6873, label %6869

; <label>:6869:                                   ; preds = %6867
  %6870 = fcmp olt double %6851, %6853
  br i1 %6870, label %6873, label %6871

; <label>:6871:                                   ; preds = %6869
  %6872 = fcmp oeq double %6851, %6853
  br i1 %6872, label %6873, label %6880

; <label>:6873:                                   ; preds = %6871, %6869, %6867, %6855
  %6874 = phi i8 [ 0, %6867 ], [ 0, %6869 ], [ 1, %6871 ], [ 1, %6855 ]
  %6875 = phi i8 [ 0, %6867 ], [ 0, %6869 ], [ 0, %6871 ], [ 1, %6855 ]
  %6876 = phi i8 [ 0, %6867 ], [ 1, %6869 ], [ 0, %6871 ], [ 1, %6855 ]
  %6877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6874, i8* %6877, align 1, !tbaa !2451
  %6878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6875, i8* %6878, align 1, !tbaa !2451
  %6879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6876, i8* %6879, align 1, !tbaa !2451
  br label %6880

; <label>:6880:                                   ; preds = %6873, %6871
  %6881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6881, align 1, !tbaa !2451
  %6882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6882, align 1, !tbaa !2451
  %6883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6883, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %6863, %6880
  %6884 = phi %struct.Memory* [ %6866, %6863 ], [ %MEMORY.17, %6880 ]
  %6885 = load i64, i64* %PC
  %6886 = add i64 %6885, 24
  %6887 = load i64, i64* %PC
  %6888 = add i64 %6887, 6
  %6889 = load i64, i64* %PC
  %6890 = add i64 %6889, 6
  store i64 %6890, i64* %PC
  %6891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6892 = load i8, i8* %6891, align 1, !tbaa !2432
  %6893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6894 = load i8, i8* %6893, align 1, !tbaa !2448
  %6895 = or i8 %6894, %6892
  %6896 = icmp ne i8 %6895, 0
  %6897 = zext i1 %6896 to i8
  store i8 %6897, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6899 = select i1 %6896, i64 %6886, i64 %6888
  store i64 %6899, i64* %6898, align 8, !tbaa !2428
  %6900 = load i8, i8* %BRANCH_TAKEN
  %6901 = icmp eq i8 %6900, 1
  br i1 %6901, label %block_400aca, label %block_400ab8

block_400e2c:                                     ; preds = %block_400e1d
  %6902 = load i64, i64* %PC
  %6903 = add i64 %6902, 10
  store i64 %6903, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %6904 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6905 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6906 = bitcast %union.vec128_t* %XMM0 to i8*
  %6907 = load i64, i64* %PC
  %6908 = add i64 %6907, 3
  store i64 %6908, i64* %PC
  %6909 = bitcast i8* %6905 to i64*
  %6910 = load i64, i64* %6909, align 1
  %6911 = getelementptr inbounds i8, i8* %6905, i64 8
  %6912 = bitcast i8* %6911 to i64*
  %6913 = load i64, i64* %6912, align 1
  %6914 = bitcast i8* %6906 to i64*
  %6915 = load i64, i64* %6914, align 1
  %6916 = getelementptr inbounds i8, i8* %6906, i64 8
  %6917 = bitcast i8* %6916 to i64*
  %6918 = load i64, i64* %6917, align 1
  %6919 = xor i64 %6915, %6910
  %6920 = xor i64 %6918, %6913
  %6921 = trunc i64 %6919 to i32
  %6922 = lshr i64 %6919, 32
  %6923 = trunc i64 %6922 to i32
  %6924 = bitcast i8* %6904 to i32*
  store i32 %6921, i32* %6924, align 1, !tbaa !2456
  %6925 = getelementptr inbounds i8, i8* %6904, i64 4
  %6926 = bitcast i8* %6925 to i32*
  store i32 %6923, i32* %6926, align 1, !tbaa !2456
  %6927 = trunc i64 %6920 to i32
  %6928 = getelementptr inbounds i8, i8* %6904, i64 8
  %6929 = bitcast i8* %6928 to i32*
  store i32 %6927, i32* %6929, align 1, !tbaa !2456
  %6930 = lshr i64 %6920, 32
  %6931 = trunc i64 %6930 to i32
  %6932 = getelementptr inbounds i8, i8* %6904, i64 12
  %6933 = bitcast i8* %6932 to i32*
  store i32 %6931, i32* %6933, align 1, !tbaa !2456
  %6934 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6935 = load i64, i64* %RBP
  %6936 = sub i64 %6935, 72
  %6937 = load i64, i64* %PC
  %6938 = add i64 %6937, 5
  store i64 %6938, i64* %PC
  %6939 = inttoptr i64 %6936 to float*
  %6940 = load float, float* %6939
  %6941 = fpext float %6940 to double
  %6942 = bitcast i8* %6934 to double*
  store double %6941, double* %6942, align 1, !tbaa !2454
  %6943 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6944 = load i64, i64* %RBP
  %6945 = sub i64 %6944, 68
  %6946 = load i64, i64* %PC
  %6947 = add i64 %6946, 5
  store i64 %6947, i64* %PC
  %6948 = inttoptr i64 %6945 to i32*
  %6949 = load i32, i32* %6948
  %6950 = sitofp i32 %6949 to double
  %6951 = bitcast i8* %6943 to double*
  store double %6950, double* %6951, align 1, !tbaa !2454
  %6952 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6953 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6954 = bitcast %union.vec128_t* %XMM2 to i8*
  %6955 = load i64, i64* %PC
  %6956 = add i64 %6955, 4
  store i64 %6956, i64* %PC
  %6957 = bitcast i8* %6953 to double*
  %6958 = load double, double* %6957, align 1
  %6959 = getelementptr inbounds i8, i8* %6953, i64 8
  %6960 = bitcast i8* %6959 to i64*
  %6961 = load i64, i64* %6960, align 1
  %6962 = bitcast i8* %6954 to double*
  %6963 = load double, double* %6962, align 1
  %6964 = fdiv double %6958, %6963
  %6965 = bitcast i8* %6952 to double*
  store double %6964, double* %6965, align 1, !tbaa !2454
  %6966 = getelementptr inbounds i8, i8* %6952, i64 8
  %6967 = bitcast i8* %6966 to i64*
  store i64 %6961, i64* %6967, align 1, !tbaa !2454
  %6968 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6969 = bitcast %union.vec128_t* %XMM1 to i8*
  %6970 = load i64, i64* %PC
  %6971 = add i64 %6970, 4
  store i64 %6971, i64* %PC
  %6972 = bitcast i8* %6968 to <2 x i32>*
  %6973 = load <2 x i32>, <2 x i32>* %6972, align 1
  %6974 = getelementptr inbounds i8, i8* %6968, i64 8
  %6975 = bitcast i8* %6974 to <2 x i32>*
  %6976 = load <2 x i32>, <2 x i32>* %6975, align 1
  %6977 = bitcast i8* %6969 to double*
  %6978 = load double, double* %6977, align 1
  %6979 = fptrunc double %6978 to float
  %6980 = bitcast i8* %6968 to float*
  store float %6979, float* %6980, align 1, !tbaa !2452
  %6981 = extractelement <2 x i32> %6973, i32 1
  %6982 = getelementptr inbounds i8, i8* %6968, i64 4
  %6983 = bitcast i8* %6982 to i32*
  store i32 %6981, i32* %6983, align 1, !tbaa !2452
  %6984 = extractelement <2 x i32> %6976, i32 0
  %6985 = bitcast i8* %6974 to i32*
  store i32 %6984, i32* %6985, align 1, !tbaa !2452
  %6986 = extractelement <2 x i32> %6976, i32 1
  %6987 = getelementptr inbounds i8, i8* %6968, i64 12
  %6988 = bitcast i8* %6987 to i32*
  store i32 %6986, i32* %6988, align 1, !tbaa !2452
  %6989 = load i64, i64* %RBP
  %6990 = sub i64 %6989, 72
  %6991 = bitcast %union.vec128_t* %XMM1 to i8*
  %6992 = load i64, i64* %PC
  %6993 = add i64 %6992, 5
  store i64 %6993, i64* %PC
  %6994 = bitcast i8* %6991 to <2 x float>*
  %6995 = load <2 x float>, <2 x float>* %6994, align 1
  %6996 = extractelement <2 x float> %6995, i32 0
  %6997 = inttoptr i64 %6990 to float*
  store float %6996, float* %6997
  %6998 = load i64, i64* %PC
  %6999 = add i64 %6998, 8
  store i64 %6999, i64* %PC
  %7000 = load i64, i64* @stderr
  store i64 %7000, i64* %RDI, align 8, !tbaa !2428
  %7001 = load i64, i64* %PC
  %7002 = add i64 %7001, 2
  store i64 %7002, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %7003 = load i64, i64* %PC
  %7004 = sub i64 %7003, 2426
  %7005 = load i64, i64* %PC
  %7006 = add i64 %7005, 5
  %7007 = load i64, i64* %PC
  %7008 = add i64 %7007, 5
  store i64 %7008, i64* %PC
  %7009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7010 = load i64, i64* %7009, align 8, !tbaa !2428
  %7011 = add i64 %7010, -8
  %7012 = inttoptr i64 %7011 to i64*
  store i64 %7006, i64* %7012
  store i64 %7011, i64* %7009, align 8, !tbaa !2428
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7004, i64* %7013, align 8, !tbaa !2428
  %7014 = load i64, i64* %PC
  %7015 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %7014, %struct.Memory* %MEMORY.10)
  %7016 = load i64, i64* %PC
  %7017 = add i64 %7016, 10
  store i64 %7017, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %7018 = load i64, i64* %PC
  %7019 = add i64 %7018, 8
  store i64 %7019, i64* %PC
  %7020 = load i64, i64* @stderr
  store i64 %7020, i64* %RDI, align 8, !tbaa !2428
  %7021 = load i64, i64* %RBP
  %7022 = sub i64 %7021, 944
  %7023 = load i32, i32* %EAX
  %7024 = zext i32 %7023 to i64
  %7025 = load i64, i64* %PC
  %7026 = add i64 %7025, 6
  store i64 %7026, i64* %PC
  %7027 = inttoptr i64 %7022 to i32*
  store i32 %7023, i32* %7027
  %7028 = load i64, i64* %PC
  %7029 = add i64 %7028, 2
  store i64 %7029, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %7030 = load i64, i64* %PC
  %7031 = sub i64 %7030, 2457
  %7032 = load i64, i64* %PC
  %7033 = add i64 %7032, 5
  %7034 = load i64, i64* %PC
  %7035 = add i64 %7034, 5
  store i64 %7035, i64* %PC
  %7036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7037 = load i64, i64* %7036, align 8, !tbaa !2428
  %7038 = add i64 %7037, -8
  %7039 = inttoptr i64 %7038 to i64*
  store i64 %7033, i64* %7039
  store i64 %7038, i64* %7036, align 8, !tbaa !2428
  %7040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7031, i64* %7040, align 8, !tbaa !2428
  %7041 = load i64, i64* %PC
  %7042 = call %struct.Memory* @ext_653138_fprintf(%struct.State* %0, i64 %7041, %struct.Memory* %7015)
  %7043 = load i64, i64* %RBP
  %7044 = sub i64 %7043, 64
  %7045 = load i64, i64* %PC
  %7046 = add i64 %7045, 7
  store i64 %7046, i64* %PC
  %7047 = inttoptr i64 %7044 to i32*
  store i32 -3, i32* %7047
  %7048 = load i64, i64* %PC
  %7049 = add i64 %7048, 11
  store i64 %7049, i64* %PC
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*)
  %7050 = load i64, i64* %RBP
  %7051 = sub i64 %7050, 948
  %7052 = load i32, i32* %EAX
  %7053 = zext i32 %7052 to i64
  %7054 = load i64, i64* %PC
  %7055 = add i64 %7054, 6
  store i64 %7055, i64* %PC
  %7056 = inttoptr i64 %7051 to i32*
  store i32 %7052, i32* %7056
  br label %block_400e96

block_40158c:                                     ; preds = %block_401578
  %7057 = add i64 %3813, 10
  store i64 %7057, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  %7058 = load i64, i64* %PC
  %7059 = add i64 %7058, 10
  store i64 %7059, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  %7060 = load i64, i64* %PC
  %7061 = add i64 %7060, 10
  store i64 %7061, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  %7062 = bitcast i32* %R9D to i64*
  %7063 = load i32, i32* %R9D
  %7064 = zext i32 %7063 to i64
  %7065 = load i32, i32* %R9D
  %7066 = zext i32 %7065 to i64
  %7067 = load i64, i64* %PC
  %7068 = add i64 %7067, 3
  store i64 %7068, i64* %PC
  %7069 = xor i64 %7066, %7064
  %7070 = trunc i64 %7069 to i32
  %7071 = and i64 %7069, 4294967295
  store i64 %7071, i64* %7062, align 8, !tbaa !2428
  %7072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7072, align 1, !tbaa !2432
  %7073 = and i32 %7070, 255
  %7074 = call i32 @llvm.ctpop.i32(i32 %7073) #16
  %7075 = trunc i32 %7074 to i8
  %7076 = and i8 %7075, 1
  %7077 = xor i8 %7076, 1
  %7078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7077, i8* %7078, align 1, !tbaa !2446
  %7079 = icmp eq i32 %7070, 0
  %7080 = zext i1 %7079 to i8
  %7081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7080, i8* %7081, align 1, !tbaa !2448
  %7082 = lshr i32 %7070, 31
  %7083 = trunc i32 %7082 to i8
  %7084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7083, i8* %7084, align 1, !tbaa !2449
  %7085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7085, align 1, !tbaa !2450
  %7086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7086, align 1, !tbaa !2447
  %7087 = load i64, i64* %PC
  %7088 = add i64 %7087, 7
  store i64 %7088, i64* %PC
  %7089 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*)
  %7090 = zext i32 %7089 to i64
  store i64 %7090, i64* %RSI, align 8, !tbaa !2428
  %7091 = load i64, i64* %PC
  %7092 = add i64 %7091, 7
  store i64 %7092, i64* %PC
  %7093 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7094 = zext i32 %7093 to i64
  store i64 %7094, i64* %RDX, align 8, !tbaa !2428
  %7095 = load i64, i64* %PC
  %7096 = add i64 %7095, 1653
  %7097 = load i64, i64* %PC
  %7098 = add i64 %7097, 5
  %7099 = load i64, i64* %PC
  %7100 = add i64 %7099, 5
  store i64 %7100, i64* %PC
  %7101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7102 = load i64, i64* %7101, align 8, !tbaa !2428
  %7103 = add i64 %7102, -8
  %7104 = inttoptr i64 %7103 to i64*
  store i64 %7098, i64* %7104
  store i64 %7103, i64* %7101, align 8, !tbaa !2428
  %7105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7096, i64* %7105, align 8, !tbaa !2428
  %7106 = load i64, i64* %PC
  %7107 = call %struct.Memory* @sub_401c30_dgesl(%struct.State* %0, i64 %7106, %struct.Memory* %MEMORY.7)
  %7108 = load i64, i64* %PC
  %7109 = add i64 %7108, 7
  store i64 %7109, i64* %PC
  %7110 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7111 = zext i32 %7110 to i64
  store i64 %7111, i64* %RAX, align 8, !tbaa !2428
  %7112 = load i64, i64* %RAX
  %7113 = load i64, i64* %PC
  %7114 = add i64 %7113, 3
  store i64 %7114, i64* %PC
  %7115 = trunc i64 %7112 to i32
  %7116 = add i32 1, %7115
  %7117 = zext i32 %7116 to i64
  store i64 %7117, i64* %RAX, align 8, !tbaa !2428
  %7118 = icmp ult i32 %7116, %7115
  %7119 = icmp ult i32 %7116, 1
  %7120 = or i1 %7118, %7119
  %7121 = zext i1 %7120 to i8
  %7122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7121, i8* %7122, align 1, !tbaa !2432
  %7123 = and i32 %7116, 255
  %7124 = call i32 @llvm.ctpop.i32(i32 %7123) #16
  %7125 = trunc i32 %7124 to i8
  %7126 = and i8 %7125, 1
  %7127 = xor i8 %7126, 1
  %7128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7127, i8* %7128, align 1, !tbaa !2446
  %7129 = xor i64 1, %7112
  %7130 = trunc i64 %7129 to i32
  %7131 = xor i32 %7130, %7116
  %7132 = lshr i32 %7131, 4
  %7133 = trunc i32 %7132 to i8
  %7134 = and i8 %7133, 1
  %7135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7134, i8* %7135, align 1, !tbaa !2447
  %7136 = icmp eq i32 %7116, 0
  %7137 = zext i1 %7136 to i8
  %7138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7137, i8* %7138, align 1, !tbaa !2448
  %7139 = lshr i32 %7116, 31
  %7140 = trunc i32 %7139 to i8
  %7141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7140, i8* %7141, align 1, !tbaa !2449
  %7142 = lshr i32 %7115, 31
  %7143 = xor i32 %7139, %7142
  %7144 = add nuw nsw i32 %7143, %7139
  %7145 = icmp eq i32 %7144, 2
  %7146 = zext i1 %7145 to i8
  %7147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7146, i8* %7147, align 1, !tbaa !2450
  %7148 = load i32, i32* %EAX
  %7149 = zext i32 %7148 to i64
  %7150 = load i64, i64* %PC
  %7151 = add i64 %7150, 7
  store i64 %7151, i64* %PC
  store i32 %7148, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7152 = load i64, i64* %PC
  %7153 = sub i64 %7152, 89
  %7154 = load i64, i64* %PC
  %7155 = add i64 %7154, 5
  store i64 %7155, i64* %PC
  %7156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7153, i64* %7156, align 8, !tbaa !2428
  br label %block_401578

block_400927:                                     ; preds = %block_4008db
  %7157 = add i64 %1522, 10
  store i64 %7157, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %7158 = load i64, i64* %PC
  %7159 = add i64 %7158, 10
  store i64 %7159, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %7160 = load i64, i64* %RBP
  %7161 = sub i64 %7160, 20
  %7162 = load i64, i64* %PC
  %7163 = add i64 %7162, 4
  store i64 %7163, i64* %PC
  store i64 %7161, i64* %R8, align 8, !tbaa !2428
  %7164 = load i64, i64* %PC
  %7165 = add i64 %7164, 7
  store i64 %7165, i64* %PC
  %7166 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %7167 = zext i32 %7166 to i64
  store i64 %7167, i64* %RSI, align 8, !tbaa !2428
  %7168 = load i64, i64* %PC
  %7169 = add i64 %7168, 7
  store i64 %7169, i64* %PC
  %7170 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7171 = zext i32 %7170 to i64
  store i64 %7171, i64* %RDX, align 8, !tbaa !2428
  %7172 = load i64, i64* %PC
  %7173 = add i64 %7172, 3587
  %7174 = load i64, i64* %PC
  %7175 = add i64 %7174, 5
  %7176 = load i64, i64* %PC
  %7177 = add i64 %7176, 5
  store i64 %7177, i64* %PC
  %7178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7179 = load i64, i64* %7178, align 8, !tbaa !2428
  %7180 = add i64 %7179, -8
  %7181 = inttoptr i64 %7180 to i64*
  store i64 %7175, i64* %7181
  store i64 %7180, i64* %7178, align 8, !tbaa !2428
  %7182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7173, i64* %7182, align 8, !tbaa !2428
  %7183 = load i64, i64* %PC
  %7184 = call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %7183, %struct.Memory* %MEMORY.3)
  %7185 = load i64, i64* %PC
  %7186 = add i64 %7185, 11
  store i64 %7186, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_40095d

block_400d88:                                     ; preds = %block_400d78
  %7187 = add i64 %7406, 10
  store i64 %7187, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  %7188 = load i64, i64* %PC
  %7189 = add i64 %7188, 10
  store i64 %7189, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %7190 = load i64, i64* %RBP
  %7191 = sub i64 %7190, 20
  %7192 = load i64, i64* %PC
  %7193 = add i64 %7192, 4
  store i64 %7193, i64* %PC
  store i64 %7191, i64* %R8, align 8, !tbaa !2428
  %7194 = load i64, i64* %PC
  %7195 = add i64 %7194, 7
  store i64 %7195, i64* %PC
  %7196 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*)
  %7197 = zext i32 %7196 to i64
  store i64 %7197, i64* %RSI, align 8, !tbaa !2428
  %7198 = load i64, i64* %PC
  %7199 = add i64 %7198, 7
  store i64 %7199, i64* %PC
  %7200 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7201 = zext i32 %7200 to i64
  store i64 %7201, i64* %RDX, align 8, !tbaa !2428
  %7202 = load i64, i64* %PC
  %7203 = add i64 %7202, 2466
  %7204 = load i64, i64* %PC
  %7205 = add i64 %7204, 5
  %7206 = load i64, i64* %PC
  %7207 = add i64 %7206, 5
  store i64 %7207, i64* %PC
  %7208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7209 = load i64, i64* %7208, align 8, !tbaa !2428
  %7210 = add i64 %7209, -8
  %7211 = inttoptr i64 %7210 to i64*
  store i64 %7205, i64* %7211
  store i64 %7210, i64* %7208, align 8, !tbaa !2428
  %7212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7203, i64* %7212, align 8, !tbaa !2428
  %7213 = load i64, i64* %PC
  %7214 = call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %7213, %struct.Memory* %MEMORY.19)
  %7215 = load i64, i64* %PC
  %7216 = add i64 %7215, 7
  store i64 %7216, i64* %PC
  %7217 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7218 = zext i32 %7217 to i64
  store i64 %7218, i64* %RAX, align 8, !tbaa !2428
  %7219 = load i64, i64* %RAX
  %7220 = load i64, i64* %PC
  %7221 = add i64 %7220, 3
  store i64 %7221, i64* %PC
  %7222 = trunc i64 %7219 to i32
  %7223 = add i32 1, %7222
  %7224 = zext i32 %7223 to i64
  store i64 %7224, i64* %RAX, align 8, !tbaa !2428
  %7225 = icmp ult i32 %7223, %7222
  %7226 = icmp ult i32 %7223, 1
  %7227 = or i1 %7225, %7226
  %7228 = zext i1 %7227 to i8
  %7229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7228, i8* %7229, align 1, !tbaa !2432
  %7230 = and i32 %7223, 255
  %7231 = call i32 @llvm.ctpop.i32(i32 %7230) #16
  %7232 = trunc i32 %7231 to i8
  %7233 = and i8 %7232, 1
  %7234 = xor i8 %7233, 1
  %7235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7234, i8* %7235, align 1, !tbaa !2446
  %7236 = xor i64 1, %7219
  %7237 = trunc i64 %7236 to i32
  %7238 = xor i32 %7237, %7223
  %7239 = lshr i32 %7238, 4
  %7240 = trunc i32 %7239 to i8
  %7241 = and i8 %7240, 1
  %7242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7241, i8* %7242, align 1, !tbaa !2447
  %7243 = icmp eq i32 %7223, 0
  %7244 = zext i1 %7243 to i8
  %7245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7244, i8* %7245, align 1, !tbaa !2448
  %7246 = lshr i32 %7223, 31
  %7247 = trunc i32 %7246 to i8
  %7248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7247, i8* %7248, align 1, !tbaa !2449
  %7249 = lshr i32 %7222, 31
  %7250 = xor i32 %7246, %7249
  %7251 = add nuw nsw i32 %7250, %7246
  %7252 = icmp eq i32 %7251, 2
  %7253 = zext i1 %7252 to i8
  %7254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7253, i8* %7254, align 1, !tbaa !2450
  %7255 = load i32, i32* %EAX
  %7256 = zext i32 %7255 to i64
  %7257 = load i64, i64* %PC
  %7258 = add i64 %7257, 7
  store i64 %7258, i64* %PC
  store i32 %7255, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7259 = load i64, i64* %PC
  %7260 = sub i64 %7259, 76
  %7261 = load i64, i64* %PC
  %7262 = add i64 %7261, 5
  store i64 %7262, i64* %PC
  %7263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7260, i64* %7263, align 8, !tbaa !2428
  br label %block_400d78

block_400ab8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %7264 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7265 = load i64, i64* %RBP
  %7266 = sub i64 %7265, 24
  %7267 = load i64, i64* %PC
  %7268 = add i64 %7267, 5
  store i64 %7268, i64* %PC
  %7269 = inttoptr i64 %7266 to float*
  %7270 = load float, float* %7269
  %7271 = fpext float %7270 to double
  %7272 = bitcast i8* %7264 to double*
  store double %7271, double* %7272, align 1, !tbaa !2454
  %7273 = load i64, i64* %RBP
  %7274 = sub i64 %7273, 904
  %7275 = bitcast %union.vec128_t* %XMM0 to i8*
  %7276 = load i64, i64* %PC
  %7277 = add i64 %7276, 8
  store i64 %7277, i64* %PC
  %7278 = bitcast i8* %7275 to double*
  %7279 = load double, double* %7278, align 1
  %7280 = inttoptr i64 %7274 to double*
  store double %7279, double* %7280
  %7281 = load i64, i64* %PC
  %7282 = add i64 %7281, 41
  %7283 = load i64, i64* %PC
  %7284 = add i64 %7283, 5
  store i64 %7284, i64* %PC
  %7285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7282, i64* %7285, align 8, !tbaa !2428
  br label %block_400aee

block_400a07:                                     ; preds = %block_4009b7, %block_400aee
  %MEMORY.18 = phi %struct.Memory* [ %3843, %block_4009b7 ], [ %MEMORY.2, %block_400aee ]
  %7286 = load i64, i64* %PC
  %7287 = add i64 %7286, 7
  store i64 %7287, i64* %PC
  %7288 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7289 = zext i32 %7288 to i64
  store i64 %7289, i64* %RAX, align 8, !tbaa !2428
  %7290 = load i32, i32* %EAX
  %7291 = zext i32 %7290 to i64
  %7292 = load i64, i64* %PC
  %7293 = add i64 %7292, 7
  store i64 %7293, i64* %PC
  %7294 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*)
  %7295 = sub i32 %7290, %7294
  %7296 = icmp ult i32 %7290, %7294
  %7297 = zext i1 %7296 to i8
  %7298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7297, i8* %7298, align 1, !tbaa !2432
  %7299 = and i32 %7295, 255
  %7300 = call i32 @llvm.ctpop.i32(i32 %7299) #16
  %7301 = trunc i32 %7300 to i8
  %7302 = and i8 %7301, 1
  %7303 = xor i8 %7302, 1
  %7304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7303, i8* %7304, align 1, !tbaa !2446
  %7305 = xor i32 %7294, %7290
  %7306 = xor i32 %7305, %7295
  %7307 = lshr i32 %7306, 4
  %7308 = trunc i32 %7307 to i8
  %7309 = and i8 %7308, 1
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7309, i8* %7310, align 1, !tbaa !2447
  %7311 = icmp eq i32 %7295, 0
  %7312 = zext i1 %7311 to i8
  %7313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7312, i8* %7313, align 1, !tbaa !2448
  %7314 = lshr i32 %7295, 31
  %7315 = trunc i32 %7314 to i8
  %7316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7315, i8* %7316, align 1, !tbaa !2449
  %7317 = lshr i32 %7290, 31
  %7318 = lshr i32 %7294, 31
  %7319 = xor i32 %7318, %7317
  %7320 = xor i32 %7314, %7317
  %7321 = add nuw nsw i32 %7320, %7319
  %7322 = icmp eq i32 %7321, 2
  %7323 = zext i1 %7322 to i8
  %7324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7323, i8* %7324, align 1, !tbaa !2450
  %7325 = load i64, i64* %PC
  %7326 = add i64 %7325, 256
  %7327 = load i64, i64* %PC
  %7328 = add i64 %7327, 6
  %7329 = load i64, i64* %PC
  %7330 = add i64 %7329, 6
  store i64 %7330, i64* %PC
  %7331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7332 = load i8, i8* %7331, align 1, !tbaa !2449
  %7333 = icmp ne i8 %7332, 0
  %7334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7335 = load i8, i8* %7334, align 1, !tbaa !2450
  %7336 = icmp ne i8 %7335, 0
  %7337 = xor i1 %7333, %7336
  %7338 = xor i1 %7337, true
  %7339 = zext i1 %7338 to i8
  store i8 %7339, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7341 = select i1 %7337, i64 %7328, i64 %7326
  store i64 %7341, i64* %7340, align 8, !tbaa !2428
  %7342 = load i8, i8* %BRANCH_TAKEN
  %7343 = icmp eq i8 %7342, 1
  %7344 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %7343, label %block_400b15, label %block_400a1b

block_400d78:                                     ; preds = %block_400d88, %block_400d5a
  %MEMORY.19 = phi %struct.Memory* [ %3004, %block_400d5a ], [ %7214, %block_400d88 ]
  %7345 = load i64, i64* %PC
  %7346 = add i64 %7345, 7
  store i64 %7346, i64* %PC
  %7347 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  %7348 = zext i32 %7347 to i64
  store i64 %7348, i64* %RAX, align 8, !tbaa !2428
  %7349 = load i32, i32* %EAX
  %7350 = zext i32 %7349 to i64
  %7351 = load i64, i64* %RBP
  %7352 = sub i64 %7351, 68
  %7353 = load i64, i64* %PC
  %7354 = add i64 %7353, 3
  store i64 %7354, i64* %PC
  %7355 = inttoptr i64 %7352 to i32*
  %7356 = load i32, i32* %7355
  %7357 = sub i32 %7349, %7356
  %7358 = icmp ult i32 %7349, %7356
  %7359 = zext i1 %7358 to i8
  %7360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7359, i8* %7360, align 1, !tbaa !2432
  %7361 = and i32 %7357, 255
  %7362 = call i32 @llvm.ctpop.i32(i32 %7361) #16
  %7363 = trunc i32 %7362 to i8
  %7364 = and i8 %7363, 1
  %7365 = xor i8 %7364, 1
  %7366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7365, i8* %7366, align 1, !tbaa !2446
  %7367 = xor i32 %7356, %7349
  %7368 = xor i32 %7367, %7357
  %7369 = lshr i32 %7368, 4
  %7370 = trunc i32 %7369 to i8
  %7371 = and i8 %7370, 1
  %7372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7371, i8* %7372, align 1, !tbaa !2447
  %7373 = icmp eq i32 %7357, 0
  %7374 = zext i1 %7373 to i8
  %7375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7374, i8* %7375, align 1, !tbaa !2448
  %7376 = lshr i32 %7357, 31
  %7377 = trunc i32 %7376 to i8
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7377, i8* %7378, align 1, !tbaa !2449
  %7379 = lshr i32 %7349, 31
  %7380 = lshr i32 %7356, 31
  %7381 = xor i32 %7380, %7379
  %7382 = xor i32 %7376, %7379
  %7383 = add nuw nsw i32 %7382, %7381
  %7384 = icmp eq i32 %7383, 2
  %7385 = zext i1 %7384 to i8
  %7386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7385, i8* %7386, align 1, !tbaa !2450
  %7387 = load i64, i64* %PC
  %7388 = add i64 %7387, 71
  %7389 = load i64, i64* %PC
  %7390 = add i64 %7389, 6
  %7391 = load i64, i64* %PC
  %7392 = add i64 %7391, 6
  store i64 %7392, i64* %PC
  %7393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7394 = load i8, i8* %7393, align 1, !tbaa !2449
  %7395 = icmp ne i8 %7394, 0
  %7396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7397 = load i8, i8* %7396, align 1, !tbaa !2450
  %7398 = icmp ne i8 %7397, 0
  %7399 = xor i1 %7395, %7398
  %7400 = xor i1 %7399, true
  %7401 = zext i1 %7400 to i8
  store i8 %7401, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7403 = select i1 %7399, i64 %7390, i64 %7388
  store i64 %7403, i64* %7402, align 8, !tbaa !2428
  %7404 = load i8, i8* %BRANCH_TAKEN
  %7405 = icmp eq i8 %7404, 1
  %7406 = load i64, i64* %PC
  br i1 %7405, label %block_400dc9, label %block_400d88

block_401080:                                     ; preds = %block_401072
  %7407 = sub i64 %1052, 2720
  %7408 = load i64, i64* %PC
  %7409 = add i64 %7408, 5
  %7410 = load i64, i64* %PC
  %7411 = add i64 %7410, 5
  store i64 %7411, i64* %PC
  %7412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7413 = load i64, i64* %7412, align 8, !tbaa !2428
  %7414 = add i64 %7413, -8
  %7415 = inttoptr i64 %7414 to i64*
  store i64 %7409, i64* %7415
  store i64 %7414, i64* %7412, align 8, !tbaa !2428
  %7416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7407, i64* %7416, align 8, !tbaa !2428
  %7417 = load i64, i64* %PC
  %7418 = call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %7417, %struct.Memory* %MEMORY.0)
  %7419 = load i64, i64* %RBP
  %7420 = sub i64 %7419, 40
  %7421 = bitcast %union.vec128_t* %XMM0 to i8*
  %7422 = load i64, i64* %PC
  %7423 = add i64 %7422, 5
  store i64 %7423, i64* %PC
  %7424 = bitcast i8* %7421 to <2 x float>*
  %7425 = load <2 x float>, <2 x float>* %7424, align 1
  %7426 = extractelement <2 x float> %7425, i32 0
  %7427 = inttoptr i64 %7420 to float*
  store float %7426, float* %7427
  %7428 = load i64, i64* %PC
  %7429 = add i64 %7428, 11
  store i64 %7429, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*)
  br label %block_401095
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004f0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402e20___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402db0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_653150___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_402ce0_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402ce0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i32, i32* %EDI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = bitcast %union.vec128_t* %XMM0 to i8*
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  store i64 %55, i64* %PC
  %56 = bitcast i8* %53 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 1
  %58 = extractelement <2 x float> %57, i32 0
  %59 = inttoptr i64 %52 to float*
  store float %58, float* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 16
  %62 = load i64, i64* %RSI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 20
  %68 = load i32, i32* %EDX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 32
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 28
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 7
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i32*
  store i32 0, i32* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 4
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i32*
  %88 = load i32, i32* %87
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %89, align 1, !tbaa !2432
  %90 = and i32 %88, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #16
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %94, i8* %95, align 1, !tbaa !2446
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %96, align 1, !tbaa !2447
  %97 = icmp eq i32 %88, 0
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %98, i8* %99, align 1, !tbaa !2448
  %100 = lshr i32 %88, 31
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = lshr i32 %88, 31
  %104 = xor i32 %100, %103
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %107, i8* %108, align 1, !tbaa !2450
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 11
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 6
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 6
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %116 = load i8, i8* %115, align 1, !tbaa !2448
  %117 = icmp eq i8 %116, 0
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %119 = load i8, i8* %118, align 1, !tbaa !2449
  %120 = icmp ne i8 %119, 0
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %122 = load i8, i8* %121, align 1, !tbaa !2450
  %123 = icmp ne i8 %122, 0
  %124 = xor i1 %120, %123
  %125 = xor i1 %124, true
  %126 = and i1 %117, %125
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %129 = select i1 %126, i64 %110, i64 %112
  store i64 %129, i64* %128, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_402d10, label %block_402d0b

block_402d1a:                                     ; preds = %block_402d10
  %132 = sub i64 %523, 4
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  %136 = load i32, i32* %135
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = load i64, i64* %RAX
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 20
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %140 to i32*
  %144 = load i32, i32* %143
  %145 = shl i64 %138, 32
  %146 = ashr exact i64 %145, 32
  %147 = sext i32 %144 to i64
  %148 = mul nsw i64 %147, %146
  %149 = trunc i64 %148 to i32
  %150 = and i64 %148, 4294967295
  store i64 %150, i64* %RAX, align 8, !tbaa !2428
  %151 = shl i64 %148, 32
  %152 = ashr exact i64 %151, 32
  %153 = icmp ne i64 %152, %148
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %154, i8* %155, align 1, !tbaa !2432
  %156 = and i32 %149, 255
  %157 = call i32 @llvm.ctpop.i32(i32 %156) #16
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %160, i8* %161, align 1, !tbaa !2446
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %162, align 1, !tbaa !2447
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %163, align 1, !tbaa !2448
  %164 = lshr i32 %149, 31
  %165 = trunc i32 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %167, align 1, !tbaa !2450
  %168 = load i64, i64* %RBP
  %169 = sub i64 %168, 36
  %170 = load i32, i32* %EAX
  %171 = zext i32 %170 to i64
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 3
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %169 to i32*
  store i32 %170, i32* %174
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 24
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 7
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i32*
  store i32 0, i32* %179
  br label %block_402d2b

block_402da9:                                     ; preds = %block_402d0b, %block_402d64, %block_402d70
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_402d70 ], [ %MEMORY.2, %block_402d64 ], [ %2, %block_402d0b ]
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 1
  store i64 %181, i64* %PC
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %183 = load i64, i64* %182, align 8, !tbaa !2428
  %184 = add i64 %183, 8
  %185 = inttoptr i64 %183 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RBP, align 8, !tbaa !2428
  store i64 %184, i64* %182, align 8, !tbaa !2428
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 1
  store i64 %188, i64* %PC
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %191 = load i64, i64* %190, align 8, !tbaa !2428
  %192 = inttoptr i64 %191 to i64*
  %193 = load i64, i64* %192
  store i64 %193, i64* %189, align 8, !tbaa !2428
  %194 = add i64 %191, 8
  store i64 %194, i64* %190, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402d70:                                     ; preds = %block_402d7c, %block_402d69
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_402d69 ], [ %MEMORY.1, %block_402d7c ]
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 24
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 3
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %196 to i32*
  %200 = load i32, i32* %199
  %201 = zext i32 %200 to i64
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = load i32, i32* %EAX
  %203 = zext i32 %202 to i64
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 4
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 3
  store i64 %207, i64* %PC
  %208 = inttoptr i64 %205 to i32*
  %209 = load i32, i32* %208
  %210 = sub i32 %202, %209
  %211 = icmp ult i32 %202, %209
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %212, i8* %213, align 1, !tbaa !2432
  %214 = and i32 %210, 255
  %215 = call i32 @llvm.ctpop.i32(i32 %214) #16
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %218, i8* %219, align 1, !tbaa !2446
  %220 = xor i32 %209, %202
  %221 = xor i32 %220, %210
  %222 = lshr i32 %221, 4
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %224, i8* %225, align 1, !tbaa !2447
  %226 = icmp eq i32 %210, 0
  %227 = zext i1 %226 to i8
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %227, i8* %228, align 1, !tbaa !2448
  %229 = lshr i32 %210, 31
  %230 = trunc i32 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %230, i8* %231, align 1, !tbaa !2449
  %232 = lshr i32 %202, 31
  %233 = lshr i32 %209, 31
  %234 = xor i32 %233, %232
  %235 = xor i32 %229, %232
  %236 = add nuw nsw i32 %235, %234
  %237 = icmp eq i32 %236, 2
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %238, i8* %239, align 1, !tbaa !2450
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 51
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 6
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 6
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %247 = load i8, i8* %246, align 1, !tbaa !2449
  %248 = icmp ne i8 %247, 0
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %250 = load i8, i8* %249, align 1, !tbaa !2450
  %251 = icmp ne i8 %250, 0
  %252 = xor i1 %248, %251
  %253 = xor i1 %252, true
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %256 = select i1 %252, i64 %243, i64 %241
  store i64 %256, i64* %255, align 8, !tbaa !2428
  %257 = load i8, i8* %BRANCH_TAKEN
  %258 = icmp eq i8 %257, 1
  br i1 %258, label %block_402da9, label %block_402d7c

block_402d2b:                                     ; preds = %block_402d37, %block_402d1a
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_402d1a ], [ %MEMORY.2, %block_402d37 ]
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 24
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 36
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 3
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %269 to i32*
  %273 = load i32, i32* %272
  %274 = sub i32 %266, %273
  %275 = icmp ult i32 %266, %273
  %276 = zext i1 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %276, i8* %277, align 1, !tbaa !2432
  %278 = and i32 %274, 255
  %279 = call i32 @llvm.ctpop.i32(i32 %278) #16
  %280 = trunc i32 %279 to i8
  %281 = and i8 %280, 1
  %282 = xor i8 %281, 1
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %282, i8* %283, align 1, !tbaa !2446
  %284 = xor i32 %273, %266
  %285 = xor i32 %284, %274
  %286 = lshr i32 %285, 4
  %287 = trunc i32 %286 to i8
  %288 = and i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %288, i8* %289, align 1, !tbaa !2447
  %290 = icmp eq i32 %274, 0
  %291 = zext i1 %290 to i8
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %291, i8* %292, align 1, !tbaa !2448
  %293 = lshr i32 %274, 31
  %294 = trunc i32 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %294, i8* %295, align 1, !tbaa !2449
  %296 = lshr i32 %266, 31
  %297 = lshr i32 %273, 31
  %298 = xor i32 %297, %296
  %299 = xor i32 %293, %296
  %300 = add nuw nsw i32 %299, %298
  %301 = icmp eq i32 %300, 2
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %302, i8* %303, align 1, !tbaa !2450
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 51
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 6
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 6
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %311 = load i8, i8* %310, align 1, !tbaa !2449
  %312 = icmp ne i8 %311, 0
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %314 = load i8, i8* %313, align 1, !tbaa !2450
  %315 = icmp ne i8 %314, 0
  %316 = xor i1 %312, %315
  %317 = xor i1 %316, true
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %320 = select i1 %316, i64 %307, i64 %305
  store i64 %320, i64* %319, align 8, !tbaa !2428
  %321 = load i8, i8* %BRANCH_TAKEN
  %322 = icmp eq i8 %321, 1
  br i1 %322, label %block_402d64, label %block_402d37

block_402d69:                                     ; preds = %block_402d10
  %323 = sub i64 %523, 24
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 7
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i32*
  store i32 0, i32* %326
  br label %block_402d70

block_402d64:                                     ; preds = %block_402d2b
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 69
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 5
  store i64 %330, i64* %PC
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %328, i64* %331, align 8, !tbaa !2428
  br label %block_402da9

block_402d0b:                                     ; preds = %block_402ce0
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 158
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %336, align 8, !tbaa !2428
  br label %block_402da9

block_402d37:                                     ; preds = %block_402d2b
  %337 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %338 = load i64, i64* %RBP
  %339 = sub i64 %338, 8
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 5
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to float*
  %343 = load float, float* %342
  %344 = bitcast i8* %337 to float*
  store float %343, float* %344, align 1, !tbaa !2452
  %345 = getelementptr inbounds i8, i8* %337, i64 4
  %346 = bitcast i8* %345 to float*
  store float 0.000000e+00, float* %346, align 1, !tbaa !2452
  %347 = getelementptr inbounds i8, i8* %337, i64 8
  %348 = bitcast i8* %347 to float*
  store float 0.000000e+00, float* %348, align 1, !tbaa !2452
  %349 = getelementptr inbounds i8, i8* %337, i64 12
  %350 = bitcast i8* %349 to float*
  store float 0.000000e+00, float* %350, align 1, !tbaa !2452
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 16
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to i64*
  %356 = load i64, i64* %355
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = load i64, i64* %RBP
  %358 = sub i64 %357, 24
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %358 to i32*
  %362 = load i32, i32* %361
  %363 = sext i32 %362 to i64
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %365 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %366 = load i64, i64* %RAX
  %367 = load i64, i64* %RCX
  %368 = mul i64 %367, 4
  %369 = add i64 %368, %366
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 5
  store i64 %371, i64* %PC
  %372 = bitcast i8* %365 to <2 x float>*
  %373 = load <2 x float>, <2 x float>* %372, align 1
  %374 = getelementptr inbounds i8, i8* %365, i64 8
  %375 = bitcast i8* %374 to <2 x i32>*
  %376 = load <2 x i32>, <2 x i32>* %375, align 1
  %377 = inttoptr i64 %369 to float*
  %378 = load float, float* %377
  %379 = extractelement <2 x float> %373, i32 0
  %380 = fmul float %379, %378
  %381 = bitcast i8* %364 to float*
  store float %380, float* %381, align 1, !tbaa !2452
  %382 = bitcast <2 x float> %373 to <2 x i32>
  %383 = extractelement <2 x i32> %382, i32 1
  %384 = getelementptr inbounds i8, i8* %364, i64 4
  %385 = bitcast i8* %384 to i32*
  store i32 %383, i32* %385, align 1, !tbaa !2452
  %386 = extractelement <2 x i32> %376, i32 0
  %387 = getelementptr inbounds i8, i8* %364, i64 8
  %388 = bitcast i8* %387 to i32*
  store i32 %386, i32* %388, align 1, !tbaa !2452
  %389 = extractelement <2 x i32> %376, i32 1
  %390 = getelementptr inbounds i8, i8* %364, i64 12
  %391 = bitcast i8* %390 to i32*
  store i32 %389, i32* %391, align 1, !tbaa !2452
  %392 = load i64, i64* %RBP
  %393 = sub i64 %392, 16
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = load i64, i64* %RBP
  %399 = sub i64 %398, 24
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i32*
  %403 = load i32, i32* %402
  %404 = sext i32 %403 to i64
  store i64 %404, i64* %RCX, align 8, !tbaa !2428
  %405 = load i64, i64* %RAX
  %406 = load i64, i64* %RCX
  %407 = mul i64 %406, 4
  %408 = add i64 %407, %405
  %409 = bitcast %union.vec128_t* %XMM0 to i8*
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 5
  store i64 %411, i64* %PC
  %412 = bitcast i8* %409 to <2 x float>*
  %413 = load <2 x float>, <2 x float>* %412, align 1
  %414 = extractelement <2 x float> %413, i32 0
  %415 = inttoptr i64 %408 to float*
  store float %414, float* %415
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 24
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 3
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i32*
  %421 = load i32, i32* %420
  %422 = zext i32 %421 to i64
  store i64 %422, i64* %RAX, align 8, !tbaa !2428
  %423 = load i64, i64* %RAX
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 20
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 3
  store i64 %427, i64* %PC
  %428 = trunc i64 %423 to i32
  %429 = inttoptr i64 %425 to i32*
  %430 = load i32, i32* %429
  %431 = add i32 %430, %428
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RAX, align 8, !tbaa !2428
  %433 = icmp ult i32 %431, %428
  %434 = icmp ult i32 %431, %430
  %435 = or i1 %433, %434
  %436 = zext i1 %435 to i8
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %436, i8* %437, align 1, !tbaa !2432
  %438 = and i32 %431, 255
  %439 = call i32 @llvm.ctpop.i32(i32 %438) #16
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %442, i8* %443, align 1, !tbaa !2446
  %444 = xor i32 %430, %428
  %445 = xor i32 %444, %431
  %446 = lshr i32 %445, 4
  %447 = trunc i32 %446 to i8
  %448 = and i8 %447, 1
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %448, i8* %449, align 1, !tbaa !2447
  %450 = icmp eq i32 %431, 0
  %451 = zext i1 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %451, i8* %452, align 1, !tbaa !2448
  %453 = lshr i32 %431, 31
  %454 = trunc i32 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %454, i8* %455, align 1, !tbaa !2449
  %456 = lshr i32 %428, 31
  %457 = lshr i32 %430, 31
  %458 = xor i32 %453, %456
  %459 = xor i32 %453, %457
  %460 = add nuw nsw i32 %458, %459
  %461 = icmp eq i32 %460, 2
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %462, i8* %463, align 1, !tbaa !2450
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 24
  %466 = load i32, i32* %EAX
  %467 = zext i32 %466 to i64
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 3
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %465 to i32*
  store i32 %466, i32* %470
  %471 = load i64, i64* %PC
  %472 = sub i64 %471, 52
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 5
  store i64 %474, i64* %PC
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %472, i64* %475, align 8, !tbaa !2428
  br label %block_402d2b

block_402d10:                                     ; preds = %block_402ce0
  %476 = load i64, i64* %RBP
  %477 = sub i64 %476, 20
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC
  %480 = inttoptr i64 %477 to i32*
  %481 = load i32, i32* %480
  %482 = sub i32 %481, 1
  %483 = icmp ult i32 %481, 1
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %484, i8* %485, align 1, !tbaa !2432
  %486 = and i32 %482, 255
  %487 = call i32 @llvm.ctpop.i32(i32 %486) #16
  %488 = trunc i32 %487 to i8
  %489 = and i8 %488, 1
  %490 = xor i8 %489, 1
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %490, i8* %491, align 1, !tbaa !2446
  %492 = xor i32 %481, 1
  %493 = xor i32 %492, %482
  %494 = lshr i32 %493, 4
  %495 = trunc i32 %494 to i8
  %496 = and i8 %495, 1
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %496, i8* %497, align 1, !tbaa !2447
  %498 = icmp eq i32 %482, 0
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %499, i8* %500, align 1, !tbaa !2448
  %501 = lshr i32 %482, 31
  %502 = trunc i32 %501 to i8
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %502, i8* %503, align 1, !tbaa !2449
  %504 = lshr i32 %481, 31
  %505 = xor i32 %501, %504
  %506 = add nuw nsw i32 %505, %504
  %507 = icmp eq i32 %506, 2
  %508 = zext i1 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %508, i8* %509, align 1, !tbaa !2450
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 85
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 6
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 6
  store i64 %515, i64* %PC
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %517 = load i8, i8* %516, align 1, !tbaa !2448
  store i8 %517, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %519 = icmp ne i8 %517, 0
  %520 = select i1 %519, i64 %511, i64 %513
  store i64 %520, i64* %518, align 8, !tbaa !2428
  %521 = load i8, i8* %BRANCH_TAKEN
  %522 = icmp eq i8 %521, 1
  %523 = load i64, i64* %RBP
  br i1 %522, label %block_402d69, label %block_402d1a

block_402d7c:                                     ; preds = %block_402d70
  %524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %525 = load i64, i64* %RBP
  %526 = sub i64 %525, 8
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = inttoptr i64 %526 to float*
  %530 = load float, float* %529
  %531 = bitcast i8* %524 to float*
  store float %530, float* %531, align 1, !tbaa !2452
  %532 = getelementptr inbounds i8, i8* %524, i64 4
  %533 = bitcast i8* %532 to float*
  store float 0.000000e+00, float* %533, align 1, !tbaa !2452
  %534 = getelementptr inbounds i8, i8* %524, i64 8
  %535 = bitcast i8* %534 to float*
  store float 0.000000e+00, float* %535, align 1, !tbaa !2452
  %536 = getelementptr inbounds i8, i8* %524, i64 12
  %537 = bitcast i8* %536 to float*
  store float 0.000000e+00, float* %537, align 1, !tbaa !2452
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 16
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %RAX, align 8, !tbaa !2428
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 24
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i32*
  %549 = load i32, i32* %548
  %550 = sext i32 %549 to i64
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %551 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %552 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %553 = load i64, i64* %RAX
  %554 = load i64, i64* %RCX
  %555 = mul i64 %554, 4
  %556 = add i64 %555, %553
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 5
  store i64 %558, i64* %PC
  %559 = bitcast i8* %552 to <2 x float>*
  %560 = load <2 x float>, <2 x float>* %559, align 1
  %561 = getelementptr inbounds i8, i8* %552, i64 8
  %562 = bitcast i8* %561 to <2 x i32>*
  %563 = load <2 x i32>, <2 x i32>* %562, align 1
  %564 = inttoptr i64 %556 to float*
  %565 = load float, float* %564
  %566 = extractelement <2 x float> %560, i32 0
  %567 = fmul float %566, %565
  %568 = bitcast i8* %551 to float*
  store float %567, float* %568, align 1, !tbaa !2452
  %569 = bitcast <2 x float> %560 to <2 x i32>
  %570 = extractelement <2 x i32> %569, i32 1
  %571 = getelementptr inbounds i8, i8* %551, i64 4
  %572 = bitcast i8* %571 to i32*
  store i32 %570, i32* %572, align 1, !tbaa !2452
  %573 = extractelement <2 x i32> %563, i32 0
  %574 = getelementptr inbounds i8, i8* %551, i64 8
  %575 = bitcast i8* %574 to i32*
  store i32 %573, i32* %575, align 1, !tbaa !2452
  %576 = extractelement <2 x i32> %563, i32 1
  %577 = getelementptr inbounds i8, i8* %551, i64 12
  %578 = bitcast i8* %577 to i32*
  store i32 %576, i32* %578, align 1, !tbaa !2452
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 16
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = load i64, i64* %RBP
  %586 = sub i64 %585, 24
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 4
  store i64 %588, i64* %PC
  %589 = inttoptr i64 %586 to i32*
  %590 = load i32, i32* %589
  %591 = sext i32 %590 to i64
  store i64 %591, i64* %RCX, align 8, !tbaa !2428
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %RCX
  %594 = mul i64 %593, 4
  %595 = add i64 %594, %592
  %596 = bitcast %union.vec128_t* %XMM0 to i8*
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = bitcast i8* %596 to <2 x float>*
  %600 = load <2 x float>, <2 x float>* %599, align 1
  %601 = extractelement <2 x float> %600, i32 0
  %602 = inttoptr i64 %595 to float*
  store float %601, float* %602
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 24
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = zext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 3
  store i64 %612, i64* %PC
  %613 = trunc i64 %610 to i32
  %614 = add i32 1, %613
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = icmp ult i32 %614, %613
  %617 = icmp ult i32 %614, 1
  %618 = or i1 %616, %617
  %619 = zext i1 %618 to i8
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %619, i8* %620, align 1, !tbaa !2432
  %621 = and i32 %614, 255
  %622 = call i32 @llvm.ctpop.i32(i32 %621) #16
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  %625 = xor i8 %624, 1
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %625, i8* %626, align 1, !tbaa !2446
  %627 = xor i64 1, %610
  %628 = trunc i64 %627 to i32
  %629 = xor i32 %628, %614
  %630 = lshr i32 %629, 4
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %632, i8* %633, align 1, !tbaa !2447
  %634 = icmp eq i32 %614, 0
  %635 = zext i1 %634 to i8
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %635, i8* %636, align 1, !tbaa !2448
  %637 = lshr i32 %614, 31
  %638 = trunc i32 %637 to i8
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %638, i8* %639, align 1, !tbaa !2449
  %640 = lshr i32 %613, 31
  %641 = xor i32 %637, %640
  %642 = add nuw nsw i32 %641, %637
  %643 = icmp eq i32 %642, 2
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %644, i8* %645, align 1, !tbaa !2450
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 24
  %648 = load i32, i32* %EAX
  %649 = zext i32 %648 to i64
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 3
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %647 to i32*
  store i32 %648, i32* %652
  %653 = load i64, i64* %PC
  %654 = sub i64 %653, 52
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  store i64 %656, i64* %PC
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %654, i64* %657, align 8, !tbaa !2428
  br label %block_402d70
}

; Function Attrs: noinline
define %struct.Memory* @sub_400520__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400520:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402860_print_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402860:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = load i64, i64* %RBP
  %16 = load i64, i64* %PC
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %19 = load i64, i64* %18, align 8, !tbaa !2428
  %20 = add i64 %19, -8
  %21 = inttoptr i64 %20 to i64*
  store i64 %15, i64* %21
  store i64 %20, i64* %18, align 8, !tbaa !2428
  %22 = load i64, i64* %RSP
  %23 = load i64, i64* %PC
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  %25 = load i64, i64* %RBP
  %26 = sub i64 %25, 4
  %27 = load i32, i32* %EDI
  %28 = zext i32 %27 to i64
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  %31 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %31
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %43 = load i64, i64* %42, align 8, !tbaa !2428
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %41, align 8, !tbaa !2428
  %46 = add i64 %43, 8
  store i64 %46, i64* %42, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402870_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402870:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 4
  %56 = load i32, i32* %EDI
  %57 = zext i32 %56 to i64
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %60
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 8
  %63 = bitcast %union.vec128_t* %XMM0 to i8*
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC
  %66 = bitcast i8* %63 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 1
  %68 = extractelement <2 x float> %67, i32 0
  %69 = inttoptr i64 %62 to float*
  store float %68, float* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 16
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 20
  %78 = load i32, i32* %EDX
  %79 = zext i32 %78 to i64
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %77 to i32*
  store i32 %78, i32* %82
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 32
  %85 = load i64, i64* %RCX
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 36
  %91 = load i32, i32* %R8D
  %92 = zext i32 %91 to i64
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %90 to i32*
  store i32 %91, i32* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 56
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 7
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i32*
  store i32 0, i32* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 52
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 7
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  store i32 0, i32* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 4
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i32*
  %111 = load i32, i32* %110
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %112, align 1, !tbaa !2432
  %113 = and i32 %111, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2446
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %119, align 1, !tbaa !2447
  %120 = icmp eq i32 %111, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2448
  %123 = lshr i32 %111, 31
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2449
  %126 = lshr i32 %111, 31
  %127 = xor i32 %123, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 11
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 6
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  store i64 %137, i64* %PC
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %139 = load i8, i8* %138, align 1, !tbaa !2448
  %140 = icmp eq i8 %139, 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %142 = load i8, i8* %141, align 1, !tbaa !2449
  %143 = icmp ne i8 %142, 0
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %145 = load i8, i8* %144, align 1, !tbaa !2450
  %146 = icmp ne i8 %145, 0
  %147 = xor i1 %143, %146
  %148 = xor i1 %147, true
  %149 = and i1 %140, %148
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %152 = select i1 %149, i64 %133, i64 %135
  store i64 %152, i64* %151, align 8, !tbaa !2428
  %153 = load i8, i8* %BRANCH_TAKEN
  %154 = icmp eq i8 %153, 1
  br i1 %154, label %block_4028a8, label %block_4028a3

block_402919:                                     ; preds = %block_402900, %block_40290a
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.6, %block_402900 ], [ %MEMORY.6, %block_40290a ]
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 40
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 7
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  store i32 0, i32* %159
  br label %block_402920

block_4028d9:                                     ; preds = %block_4028c5, %block_4028cf
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.5, %block_4028c5 ], [ %MEMORY.5, %block_4028cf ]
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 44
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 7
  store i64 %163, i64* %PC
  %164 = inttoptr i64 %161 to i32*
  store i32 0, i32* %164
  %165 = load i64, i64* %RBP
  %166 = sub i64 %165, 48
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 7
  store i64 %168, i64* %PC
  %169 = inttoptr i64 %166 to i32*
  store i32 0, i32* %169
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 20
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i32*
  %175 = load i32, i32* %174
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %176, align 1, !tbaa !2432
  %177 = and i32 %175, 255
  %178 = call i32 @llvm.ctpop.i32(i32 %177) #16
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %181, i8* %182, align 1, !tbaa !2446
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %183, align 1, !tbaa !2447
  %184 = icmp eq i32 %175, 0
  %185 = zext i1 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %185, i8* %186, align 1, !tbaa !2448
  %187 = lshr i32 %175, 31
  %188 = trunc i32 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %188, i8* %189, align 1, !tbaa !2449
  %190 = lshr i32 %175, 31
  %191 = xor i32 %187, %190
  %192 = add nuw nsw i32 %191, %190
  %193 = icmp eq i32 %192, 2
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %194, i8* %195, align 1, !tbaa !2450
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 21
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 6
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 6
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %203 = load i8, i8* %202, align 1, !tbaa !2449
  %204 = icmp ne i8 %203, 0
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %206 = load i8, i8* %205, align 1, !tbaa !2450
  %207 = icmp ne i8 %206, 0
  %208 = xor i1 %204, %207
  %209 = xor i1 %208, true
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %212 = select i1 %208, i64 %199, i64 %197
  store i64 %212, i64* %211, align 8, !tbaa !2428
  %213 = load i8, i8* %BRANCH_TAKEN
  %214 = icmp eq i8 %213, 1
  br i1 %214, label %block_402900, label %block_4028f1

block_4029d2:                                     ; preds = %block_402988
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 5
  store i64 %218, i64* %PC
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %216, i64* %219, align 8, !tbaa !2428
  br label %block_4029d7

block_4028a8:                                     ; preds = %block_402870
  %220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %222 = bitcast %union.vec128_t* %XMM0 to i8*
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = bitcast i8* %221 to i64*
  %226 = load i64, i64* %225, align 1
  %227 = getelementptr inbounds i8, i8* %221, i64 8
  %228 = bitcast i8* %227 to i64*
  %229 = load i64, i64* %228, align 1
  %230 = bitcast i8* %222 to i64*
  %231 = load i64, i64* %230, align 1
  %232 = getelementptr inbounds i8, i8* %222, i64 8
  %233 = bitcast i8* %232 to i64*
  %234 = load i64, i64* %233, align 1
  %235 = xor i64 %231, %226
  %236 = xor i64 %234, %229
  %237 = trunc i64 %235 to i32
  %238 = lshr i64 %235, 32
  %239 = trunc i64 %238 to i32
  %240 = bitcast i8* %220 to i32*
  store i32 %237, i32* %240, align 1, !tbaa !2456
  %241 = getelementptr inbounds i8, i8* %220, i64 4
  %242 = bitcast i8* %241 to i32*
  store i32 %239, i32* %242, align 1, !tbaa !2456
  %243 = trunc i64 %236 to i32
  %244 = getelementptr inbounds i8, i8* %220, i64 8
  %245 = bitcast i8* %244 to i32*
  store i32 %243, i32* %245, align 1, !tbaa !2456
  %246 = lshr i64 %236, 32
  %247 = trunc i64 %246 to i32
  %248 = getelementptr inbounds i8, i8* %220, i64 12
  %249 = bitcast i8* %248 to i32*
  store i32 %247, i32* %249, align 1, !tbaa !2456
  %250 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 8
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to float*
  %256 = load float, float* %255
  %257 = fpext float %256 to double
  %258 = bitcast i8* %250 to double*
  store double %257, double* %258, align 1, !tbaa !2454
  %259 = bitcast %union.vec128_t* %XMM1 to i8*
  %260 = bitcast %union.vec128_t* %XMM0 to i8*
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 4
  store i64 %262, i64* %PC
  %263 = bitcast i8* %259 to double*
  %264 = load double, double* %263, align 1
  %265 = bitcast i8* %260 to double*
  %266 = load double, double* %265, align 1
  %267 = fcmp uno double %264, %266
  br i1 %267, label %268, label %280

; <label>:268:                                    ; preds = %block_4028a8
  %269 = fadd double %264, %266
  %270 = bitcast double %269 to i64
  %271 = and i64 %270, 9221120237041090560
  %272 = icmp eq i64 %271, 9218868437227405312
  %273 = and i64 %270, 2251799813685247
  %274 = icmp ne i64 %273, 0
  %275 = and i1 %272, %274
  br i1 %275, label %276, label %286

; <label>:276:                                    ; preds = %268
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %278 = load i64, i64* %277, align 8, !tbaa !2428
  %279 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %278, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:280:                                    ; preds = %block_4028a8
  %281 = fcmp ogt double %264, %266
  br i1 %281, label %286, label %282

; <label>:282:                                    ; preds = %280
  %283 = fcmp olt double %264, %266
  br i1 %283, label %286, label %284

; <label>:284:                                    ; preds = %282
  %285 = fcmp oeq double %264, %266
  br i1 %285, label %286, label %293

; <label>:286:                                    ; preds = %284, %282, %280, %268
  %287 = phi i8 [ 0, %280 ], [ 0, %282 ], [ 1, %284 ], [ 1, %268 ]
  %288 = phi i8 [ 0, %280 ], [ 0, %282 ], [ 0, %284 ], [ 1, %268 ]
  %289 = phi i8 [ 0, %280 ], [ 1, %282 ], [ 0, %284 ], [ 1, %268 ]
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %287, i8* %290, align 1, !tbaa !2451
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %288, i8* %291, align 1, !tbaa !2451
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %289, i8* %292, align 1, !tbaa !2451
  br label %293

; <label>:293:                                    ; preds = %286, %284
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %294, align 1, !tbaa !2451
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %295, align 1, !tbaa !2451
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %296, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %276, %293
  %297 = phi %struct.Memory* [ %279, %276 ], [ %2, %293 ]
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 17
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 6
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 6
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %305 = load i8, i8* %304, align 1, !tbaa !2448
  %306 = icmp eq i8 %305, 0
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %309 = select i1 %306, i64 %299, i64 %301
  store i64 %309, i64* %308, align 8, !tbaa !2428
  %310 = load i8, i8* %BRANCH_TAKEN
  %311 = icmp eq i8 %310, 1
  br i1 %311, label %block_4028c5, label %block_4028ba

block_4028cf:                                     ; preds = %block_4028c5
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 36
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i32*
  %317 = load i32, i32* %316
  %318 = sub i32 %317, 1
  %319 = icmp ult i32 %317, 1
  %320 = zext i1 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %320, i8* %321, align 1, !tbaa !2432
  %322 = and i32 %318, 255
  %323 = call i32 @llvm.ctpop.i32(i32 %322) #16
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = xor i8 %325, 1
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %326, i8* %327, align 1, !tbaa !2446
  %328 = xor i32 %317, 1
  %329 = xor i32 %328, %318
  %330 = lshr i32 %329, 4
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %332, i8* %333, align 1, !tbaa !2447
  %334 = icmp eq i32 %318, 0
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %335, i8* %336, align 1, !tbaa !2448
  %337 = lshr i32 %318, 31
  %338 = trunc i32 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %338, i8* %339, align 1, !tbaa !2449
  %340 = lshr i32 %317, 31
  %341 = xor i32 %337, %340
  %342 = add nuw nsw i32 %341, %340
  %343 = icmp eq i32 %342, 2
  %344 = zext i1 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %344, i8* %345, align 1, !tbaa !2450
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 174
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 6
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 6
  store i64 %351, i64* %PC
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %353 = load i8, i8* %352, align 1, !tbaa !2448
  store i8 %353, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %355 = icmp ne i8 %353, 0
  %356 = select i1 %355, i64 %347, i64 %349
  store i64 %356, i64* %354, align 8, !tbaa !2428
  %357 = load i8, i8* %BRANCH_TAKEN
  %358 = icmp eq i8 %357, 1
  br i1 %358, label %block_402981, label %block_4028d9

block_4029d7:                                     ; preds = %block_4028c0, %block_4028a3, %block_40297c, %block_4029d2
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_40297c ], [ %MEMORY.4, %block_4029d2 ], [ %297, %block_4028c0 ], [ %2, %block_4028a3 ]
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 1
  store i64 %360, i64* %PC
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %362 = load i64, i64* %361, align 8, !tbaa !2428
  %363 = add i64 %362, 8
  %364 = inttoptr i64 %362 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %RBP, align 8, !tbaa !2428
  store i64 %363, i64* %361, align 8, !tbaa !2428
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 1
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %370 = load i64, i64* %369, align 8, !tbaa !2428
  %371 = inttoptr i64 %370 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %368, align 8, !tbaa !2428
  %373 = add i64 %370, 8
  store i64 %373, i64* %369, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4028f1:                                     ; preds = %block_4028d9
  %374 = load i64, i64* %RAX
  %375 = load i32, i32* %EAX
  %376 = zext i32 %375 to i64
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 2
  store i64 %378, i64* %PC
  %379 = xor i64 %376, %374
  %380 = trunc i64 %379 to i32
  %381 = and i64 %379, 4294967295
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %382, align 1, !tbaa !2432
  %383 = and i32 %380, 255
  %384 = call i32 @llvm.ctpop.i32(i32 %383) #16
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  %387 = xor i8 %386, 1
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %387, i8* %388, align 1, !tbaa !2446
  %389 = icmp eq i32 %380, 0
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %390, i8* %391, align 1, !tbaa !2448
  %392 = lshr i32 %380, 31
  %393 = trunc i32 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %393, i8* %394, align 1, !tbaa !2449
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %395, align 1, !tbaa !2450
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %396, align 1, !tbaa !2447
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %RBP
  %399 = sub i64 %398, 4
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 3
  store i64 %401, i64* %PC
  %402 = trunc i64 %397 to i32
  %403 = inttoptr i64 %399 to i32*
  %404 = load i32, i32* %403
  %405 = sub i32 %402, %404
  %406 = zext i32 %405 to i64
  store i64 %406, i64* %RAX, align 8, !tbaa !2428
  %407 = icmp ult i32 %402, %404
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %408, i8* %409, align 1, !tbaa !2432
  %410 = and i32 %405, 255
  %411 = call i32 @llvm.ctpop.i32(i32 %410) #16
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %414, i8* %415, align 1, !tbaa !2446
  %416 = xor i32 %404, %402
  %417 = xor i32 %416, %405
  %418 = lshr i32 %417, 4
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %420, i8* %421, align 1, !tbaa !2447
  %422 = icmp eq i32 %405, 0
  %423 = zext i1 %422 to i8
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %423, i8* %424, align 1, !tbaa !2448
  %425 = lshr i32 %405, 31
  %426 = trunc i32 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %426, i8* %427, align 1, !tbaa !2449
  %428 = lshr i32 %402, 31
  %429 = lshr i32 %404, 31
  %430 = xor i32 %429, %428
  %431 = xor i32 %425, %428
  %432 = add nuw nsw i32 %431, %430
  %433 = icmp eq i32 %432, 2
  %434 = zext i1 %433 to i8
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %434, i8* %435, align 1, !tbaa !2450
  %436 = load i64, i64* %RAX
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = trunc i64 %436 to i32
  %440 = add i32 1, %439
  %441 = zext i32 %440 to i64
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = icmp ult i32 %440, %439
  %443 = icmp ult i32 %440, 1
  %444 = or i1 %442, %443
  %445 = zext i1 %444 to i8
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %445, i8* %446, align 1, !tbaa !2432
  %447 = and i32 %440, 255
  %448 = call i32 @llvm.ctpop.i32(i32 %447) #16
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %451, i8* %452, align 1, !tbaa !2446
  %453 = xor i64 1, %436
  %454 = trunc i64 %453 to i32
  %455 = xor i32 %454, %440
  %456 = lshr i32 %455, 4
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %458, i8* %459, align 1, !tbaa !2447
  %460 = icmp eq i32 %440, 0
  %461 = zext i1 %460 to i8
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %461, i8* %462, align 1, !tbaa !2448
  %463 = lshr i32 %440, 31
  %464 = trunc i32 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %464, i8* %465, align 1, !tbaa !2449
  %466 = lshr i32 %439, 31
  %467 = xor i32 %463, %466
  %468 = add nuw nsw i32 %467, %463
  %469 = icmp eq i32 %468, 2
  %470 = zext i1 %469 to i8
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %470, i8* %471, align 1, !tbaa !2450
  %472 = load i64, i64* %RAX
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 20
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 4
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %474 to i32*
  %478 = load i32, i32* %477
  %479 = shl i64 %472, 32
  %480 = ashr exact i64 %479, 32
  %481 = sext i32 %478 to i64
  %482 = mul nsw i64 %481, %480
  %483 = trunc i64 %482 to i32
  %484 = and i64 %482, 4294967295
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = shl i64 %482, 32
  %486 = ashr exact i64 %485, 32
  %487 = icmp ne i64 %486, %482
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %488, i8* %489, align 1, !tbaa !2432
  %490 = and i32 %483, 255
  %491 = call i32 @llvm.ctpop.i32(i32 %490) #16
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %494, i8* %495, align 1, !tbaa !2446
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %496, align 1, !tbaa !2447
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %497, align 1, !tbaa !2448
  %498 = lshr i32 %483, 31
  %499 = trunc i32 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %499, i8* %500, align 1, !tbaa !2449
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %488, i8* %501, align 1, !tbaa !2450
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 44
  %504 = load i32, i32* %EAX
  %505 = zext i32 %504 to i64
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 3
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %503 to i32*
  store i32 %504, i32* %508
  br label %block_402900

block_402920:                                     ; preds = %block_40292c, %block_402919
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_402919 ], [ %MEMORY.3, %block_40292c ]
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 40
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RAX, align 8, !tbaa !2428
  %516 = load i32, i32* %EAX
  %517 = zext i32 %516 to i64
  %518 = load i64, i64* %RBP
  %519 = sub i64 %518, 4
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 3
  store i64 %521, i64* %PC
  %522 = inttoptr i64 %519 to i32*
  %523 = load i32, i32* %522
  %524 = sub i32 %516, %523
  %525 = icmp ult i32 %516, %523
  %526 = zext i1 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %526, i8* %527, align 1, !tbaa !2432
  %528 = and i32 %524, 255
  %529 = call i32 @llvm.ctpop.i32(i32 %528) #16
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %532, i8* %533, align 1, !tbaa !2446
  %534 = xor i32 %523, %516
  %535 = xor i32 %534, %524
  %536 = lshr i32 %535, 4
  %537 = trunc i32 %536 to i8
  %538 = and i8 %537, 1
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %538, i8* %539, align 1, !tbaa !2447
  %540 = icmp eq i32 %524, 0
  %541 = zext i1 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %541, i8* %542, align 1, !tbaa !2448
  %543 = lshr i32 %524, 31
  %544 = trunc i32 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %544, i8* %545, align 1, !tbaa !2449
  %546 = lshr i32 %516, 31
  %547 = lshr i32 %523, 31
  %548 = xor i32 %547, %546
  %549 = xor i32 %543, %546
  %550 = add nuw nsw i32 %549, %548
  %551 = icmp eq i32 %550, 2
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %553, align 1, !tbaa !2450
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 86
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 6
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 6
  store i64 %559, i64* %PC
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %561 = load i8, i8* %560, align 1, !tbaa !2449
  %562 = icmp ne i8 %561, 0
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %564 = load i8, i8* %563, align 1, !tbaa !2450
  %565 = icmp ne i8 %564, 0
  %566 = xor i1 %562, %565
  %567 = xor i1 %566, true
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %570 = select i1 %566, i64 %557, i64 %555
  store i64 %570, i64* %569, align 8, !tbaa !2428
  %571 = load i8, i8* %BRANCH_TAKEN
  %572 = icmp eq i8 %571, 1
  br i1 %572, label %block_40297c, label %block_40292c

block_40297c:                                     ; preds = %block_402920
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 91
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 5
  store i64 %576, i64* %PC
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %574, i64* %577, align 8, !tbaa !2428
  br label %block_4029d7

block_40292c:                                     ; preds = %block_402920
  %578 = load i64, i64* %RBP
  %579 = sub i64 %578, 32
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 4
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %579 to i64*
  %583 = load i64, i64* %582
  store i64 %583, i64* %RAX, align 8, !tbaa !2428
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 48
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 4
  store i64 %587, i64* %PC
  %588 = inttoptr i64 %585 to i32*
  %589 = load i32, i32* %588
  %590 = sext i32 %589 to i64
  store i64 %590, i64* %RCX, align 8, !tbaa !2428
  %591 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %RCX
  %594 = mul i64 %593, 4
  %595 = add i64 %594, %592
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 5
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %595 to float*
  %599 = load float, float* %598
  %600 = bitcast i8* %591 to float*
  store float %599, float* %600, align 1, !tbaa !2452
  %601 = getelementptr inbounds i8, i8* %591, i64 4
  %602 = bitcast i8* %601 to float*
  store float 0.000000e+00, float* %602, align 1, !tbaa !2452
  %603 = getelementptr inbounds i8, i8* %591, i64 8
  %604 = bitcast i8* %603 to float*
  store float 0.000000e+00, float* %604, align 1, !tbaa !2452
  %605 = getelementptr inbounds i8, i8* %591, i64 12
  %606 = bitcast i8* %605 to float*
  store float 0.000000e+00, float* %606, align 1, !tbaa !2452
  %607 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %608 = load i64, i64* %RBP
  %609 = sub i64 %608, 8
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 5
  store i64 %611, i64* %PC
  %612 = inttoptr i64 %609 to float*
  %613 = load float, float* %612
  %614 = bitcast i8* %607 to float*
  store float %613, float* %614, align 1, !tbaa !2452
  %615 = getelementptr inbounds i8, i8* %607, i64 4
  %616 = bitcast i8* %615 to float*
  store float 0.000000e+00, float* %616, align 1, !tbaa !2452
  %617 = getelementptr inbounds i8, i8* %607, i64 8
  %618 = bitcast i8* %617 to float*
  store float 0.000000e+00, float* %618, align 1, !tbaa !2452
  %619 = getelementptr inbounds i8, i8* %607, i64 12
  %620 = bitcast i8* %619 to float*
  store float 0.000000e+00, float* %620, align 1, !tbaa !2452
  %621 = load i64, i64* %RBP
  %622 = sub i64 %621, 16
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to i64*
  %626 = load i64, i64* %625
  store i64 %626, i64* %RAX, align 8, !tbaa !2428
  %627 = load i64, i64* %RBP
  %628 = sub i64 %627, 44
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 4
  store i64 %630, i64* %PC
  %631 = inttoptr i64 %628 to i32*
  %632 = load i32, i32* %631
  %633 = sext i32 %632 to i64
  store i64 %633, i64* %RCX, align 8, !tbaa !2428
  %634 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %635 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %636 = load i64, i64* %RAX
  %637 = load i64, i64* %RCX
  %638 = mul i64 %637, 4
  %639 = add i64 %638, %636
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 5
  store i64 %641, i64* %PC
  %642 = bitcast i8* %635 to <2 x float>*
  %643 = load <2 x float>, <2 x float>* %642, align 1
  %644 = getelementptr inbounds i8, i8* %635, i64 8
  %645 = bitcast i8* %644 to <2 x i32>*
  %646 = load <2 x i32>, <2 x i32>* %645, align 1
  %647 = inttoptr i64 %639 to float*
  %648 = load float, float* %647
  %649 = extractelement <2 x float> %643, i32 0
  %650 = fmul float %649, %648
  %651 = bitcast i8* %634 to float*
  store float %650, float* %651, align 1, !tbaa !2452
  %652 = bitcast <2 x float> %643 to <2 x i32>
  %653 = extractelement <2 x i32> %652, i32 1
  %654 = getelementptr inbounds i8, i8* %634, i64 4
  %655 = bitcast i8* %654 to i32*
  store i32 %653, i32* %655, align 1, !tbaa !2452
  %656 = extractelement <2 x i32> %646, i32 0
  %657 = getelementptr inbounds i8, i8* %634, i64 8
  %658 = bitcast i8* %657 to i32*
  store i32 %656, i32* %658, align 1, !tbaa !2452
  %659 = extractelement <2 x i32> %646, i32 1
  %660 = getelementptr inbounds i8, i8* %634, i64 12
  %661 = bitcast i8* %660 to i32*
  store i32 %659, i32* %661, align 1, !tbaa !2452
  %662 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %663 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %664 = bitcast %union.vec128_t* %XMM1 to i8*
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 4
  store i64 %666, i64* %PC
  %667 = bitcast i8* %663 to <2 x float>*
  %668 = load <2 x float>, <2 x float>* %667, align 1
  %669 = getelementptr inbounds i8, i8* %663, i64 8
  %670 = bitcast i8* %669 to <2 x i32>*
  %671 = load <2 x i32>, <2 x i32>* %670, align 1
  %672 = bitcast i8* %664 to <2 x float>*
  %673 = load <2 x float>, <2 x float>* %672, align 1
  %674 = extractelement <2 x float> %668, i32 0
  %675 = extractelement <2 x float> %673, i32 0
  %676 = fadd float %674, %675
  %677 = bitcast i8* %662 to float*
  store float %676, float* %677, align 1, !tbaa !2452
  %678 = bitcast <2 x float> %668 to <2 x i32>
  %679 = extractelement <2 x i32> %678, i32 1
  %680 = getelementptr inbounds i8, i8* %662, i64 4
  %681 = bitcast i8* %680 to i32*
  store i32 %679, i32* %681, align 1, !tbaa !2452
  %682 = extractelement <2 x i32> %671, i32 0
  %683 = getelementptr inbounds i8, i8* %662, i64 8
  %684 = bitcast i8* %683 to i32*
  store i32 %682, i32* %684, align 1, !tbaa !2452
  %685 = extractelement <2 x i32> %671, i32 1
  %686 = getelementptr inbounds i8, i8* %662, i64 12
  %687 = bitcast i8* %686 to i32*
  store i32 %685, i32* %687, align 1, !tbaa !2452
  %688 = load i64, i64* %RBP
  %689 = sub i64 %688, 32
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 4
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i64*
  %693 = load i64, i64* %692
  store i64 %693, i64* %RAX, align 8, !tbaa !2428
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 48
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 4
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to i32*
  %699 = load i32, i32* %698
  %700 = sext i32 %699 to i64
  store i64 %700, i64* %RCX, align 8, !tbaa !2428
  %701 = load i64, i64* %RAX
  %702 = load i64, i64* %RCX
  %703 = mul i64 %702, 4
  %704 = add i64 %703, %701
  %705 = bitcast %union.vec128_t* %XMM0 to i8*
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 5
  store i64 %707, i64* %PC
  %708 = bitcast i8* %705 to <2 x float>*
  %709 = load <2 x float>, <2 x float>* %708, align 1
  %710 = extractelement <2 x float> %709, i32 0
  %711 = inttoptr i64 %704 to float*
  store float %710, float* %711
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 44
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  %717 = load i32, i32* %716
  %718 = zext i32 %717 to i64
  store i64 %718, i64* %RDX, align 8, !tbaa !2428
  %719 = load i64, i64* %RDX
  %720 = load i64, i64* %RBP
  %721 = sub i64 %720, 20
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = trunc i64 %719 to i32
  %725 = inttoptr i64 %721 to i32*
  %726 = load i32, i32* %725
  %727 = add i32 %726, %724
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %RDX, align 8, !tbaa !2428
  %729 = icmp ult i32 %727, %724
  %730 = icmp ult i32 %727, %726
  %731 = or i1 %729, %730
  %732 = zext i1 %731 to i8
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %732, i8* %733, align 1, !tbaa !2432
  %734 = and i32 %727, 255
  %735 = call i32 @llvm.ctpop.i32(i32 %734) #16
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = xor i8 %737, 1
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %738, i8* %739, align 1, !tbaa !2446
  %740 = xor i32 %726, %724
  %741 = xor i32 %740, %727
  %742 = lshr i32 %741, 4
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %744, i8* %745, align 1, !tbaa !2447
  %746 = icmp eq i32 %727, 0
  %747 = zext i1 %746 to i8
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %747, i8* %748, align 1, !tbaa !2448
  %749 = lshr i32 %727, 31
  %750 = trunc i32 %749 to i8
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %750, i8* %751, align 1, !tbaa !2449
  %752 = lshr i32 %724, 31
  %753 = lshr i32 %726, 31
  %754 = xor i32 %749, %752
  %755 = xor i32 %749, %753
  %756 = add nuw nsw i32 %754, %755
  %757 = icmp eq i32 %756, 2
  %758 = zext i1 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %758, i8* %759, align 1, !tbaa !2450
  %760 = load i64, i64* %RBP
  %761 = sub i64 %760, 44
  %762 = load i32, i32* %EDX
  %763 = zext i32 %762 to i64
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 3
  store i64 %765, i64* %PC
  %766 = inttoptr i64 %761 to i32*
  store i32 %762, i32* %766
  %767 = load i64, i64* %RBP
  %768 = sub i64 %767, 48
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 3
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %768 to i32*
  %772 = load i32, i32* %771
  %773 = zext i32 %772 to i64
  store i64 %773, i64* %RDX, align 8, !tbaa !2428
  %774 = load i64, i64* %RDX
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 36
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC
  %779 = trunc i64 %774 to i32
  %780 = inttoptr i64 %776 to i32*
  %781 = load i32, i32* %780
  %782 = add i32 %781, %779
  %783 = zext i32 %782 to i64
  store i64 %783, i64* %RDX, align 8, !tbaa !2428
  %784 = icmp ult i32 %782, %779
  %785 = icmp ult i32 %782, %781
  %786 = or i1 %784, %785
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %787, i8* %788, align 1, !tbaa !2432
  %789 = and i32 %782, 255
  %790 = call i32 @llvm.ctpop.i32(i32 %789) #16
  %791 = trunc i32 %790 to i8
  %792 = and i8 %791, 1
  %793 = xor i8 %792, 1
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %793, i8* %794, align 1, !tbaa !2446
  %795 = xor i32 %781, %779
  %796 = xor i32 %795, %782
  %797 = lshr i32 %796, 4
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 1
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %799, i8* %800, align 1, !tbaa !2447
  %801 = icmp eq i32 %782, 0
  %802 = zext i1 %801 to i8
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %802, i8* %803, align 1, !tbaa !2448
  %804 = lshr i32 %782, 31
  %805 = trunc i32 %804 to i8
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %805, i8* %806, align 1, !tbaa !2449
  %807 = lshr i32 %779, 31
  %808 = lshr i32 %781, 31
  %809 = xor i32 %804, %807
  %810 = xor i32 %804, %808
  %811 = add nuw nsw i32 %809, %810
  %812 = icmp eq i32 %811, 2
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %813, i8* %814, align 1, !tbaa !2450
  %815 = load i64, i64* %RBP
  %816 = sub i64 %815, 48
  %817 = load i32, i32* %EDX
  %818 = zext i32 %817 to i64
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 3
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %816 to i32*
  store i32 %817, i32* %821
  %822 = load i64, i64* %RBP
  %823 = sub i64 %822, 40
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 3
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %823 to i32*
  %827 = load i32, i32* %826
  %828 = zext i32 %827 to i64
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = load i64, i64* %RAX
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 3
  store i64 %831, i64* %PC
  %832 = trunc i64 %829 to i32
  %833 = add i32 1, %832
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %RAX, align 8, !tbaa !2428
  %835 = icmp ult i32 %833, %832
  %836 = icmp ult i32 %833, 1
  %837 = or i1 %835, %836
  %838 = zext i1 %837 to i8
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %838, i8* %839, align 1, !tbaa !2432
  %840 = and i32 %833, 255
  %841 = call i32 @llvm.ctpop.i32(i32 %840) #16
  %842 = trunc i32 %841 to i8
  %843 = and i8 %842, 1
  %844 = xor i8 %843, 1
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %844, i8* %845, align 1, !tbaa !2446
  %846 = xor i64 1, %829
  %847 = trunc i64 %846 to i32
  %848 = xor i32 %847, %833
  %849 = lshr i32 %848, 4
  %850 = trunc i32 %849 to i8
  %851 = and i8 %850, 1
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %851, i8* %852, align 1, !tbaa !2447
  %853 = icmp eq i32 %833, 0
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %854, i8* %855, align 1, !tbaa !2448
  %856 = lshr i32 %833, 31
  %857 = trunc i32 %856 to i8
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %857, i8* %858, align 1, !tbaa !2449
  %859 = lshr i32 %832, 31
  %860 = xor i32 %856, %859
  %861 = add nuw nsw i32 %860, %856
  %862 = icmp eq i32 %861, 2
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %863, i8* %864, align 1, !tbaa !2450
  %865 = load i64, i64* %RBP
  %866 = sub i64 %865, 40
  %867 = load i32, i32* %EAX
  %868 = zext i32 %867 to i64
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 3
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %866 to i32*
  store i32 %867, i32* %871
  %872 = load i64, i64* %PC
  %873 = sub i64 %872, 87
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 5
  store i64 %875, i64* %PC
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %873, i64* %876, align 8, !tbaa !2428
  br label %block_402920

block_402988:                                     ; preds = %block_402994, %block_402981
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_402981 ], [ %MEMORY.4, %block_402994 ]
  %877 = load i64, i64* %RBP
  %878 = sub i64 %877, 40
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %878 to i32*
  %882 = load i32, i32* %881
  %883 = zext i32 %882 to i64
  store i64 %883, i64* %RAX, align 8, !tbaa !2428
  %884 = load i32, i32* %EAX
  %885 = zext i32 %884 to i64
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 4
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 3
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i32*
  %891 = load i32, i32* %890
  %892 = sub i32 %884, %891
  %893 = icmp ult i32 %884, %891
  %894 = zext i1 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %894, i8* %895, align 1, !tbaa !2432
  %896 = and i32 %892, 255
  %897 = call i32 @llvm.ctpop.i32(i32 %896) #16
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  %900 = xor i8 %899, 1
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %900, i8* %901, align 1, !tbaa !2446
  %902 = xor i32 %891, %884
  %903 = xor i32 %902, %892
  %904 = lshr i32 %903, 4
  %905 = trunc i32 %904 to i8
  %906 = and i8 %905, 1
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %906, i8* %907, align 1, !tbaa !2447
  %908 = icmp eq i32 %892, 0
  %909 = zext i1 %908 to i8
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %909, i8* %910, align 1, !tbaa !2448
  %911 = lshr i32 %892, 31
  %912 = trunc i32 %911 to i8
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %912, i8* %913, align 1, !tbaa !2449
  %914 = lshr i32 %884, 31
  %915 = lshr i32 %891, 31
  %916 = xor i32 %915, %914
  %917 = xor i32 %911, %914
  %918 = add nuw nsw i32 %917, %916
  %919 = icmp eq i32 %918, 2
  %920 = zext i1 %919 to i8
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %920, i8* %921, align 1, !tbaa !2450
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 68
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 6
  %926 = load i64, i64* %PC
  %927 = add i64 %926, 6
  store i64 %927, i64* %PC
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %929 = load i8, i8* %928, align 1, !tbaa !2449
  %930 = icmp ne i8 %929, 0
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %932 = load i8, i8* %931, align 1, !tbaa !2450
  %933 = icmp ne i8 %932, 0
  %934 = xor i1 %930, %933
  %935 = xor i1 %934, true
  %936 = zext i1 %935 to i8
  store i8 %936, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %938 = select i1 %934, i64 %925, i64 %923
  store i64 %938, i64* %937, align 8, !tbaa !2428
  %939 = load i8, i8* %BRANCH_TAKEN
  %940 = icmp eq i8 %939, 1
  br i1 %940, label %block_4029d2, label %block_402994

block_402981:                                     ; preds = %block_4028cf
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 40
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 7
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %942 to i32*
  store i32 0, i32* %945
  br label %block_402988

block_402994:                                     ; preds = %block_402988
  %946 = load i64, i64* %RBP
  %947 = sub i64 %946, 32
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to i64*
  %951 = load i64, i64* %950
  store i64 %951, i64* %RAX, align 8, !tbaa !2428
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 40
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i32*
  %957 = load i32, i32* %956
  %958 = sext i32 %957 to i64
  store i64 %958, i64* %RCX, align 8, !tbaa !2428
  %959 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %960 = load i64, i64* %RAX
  %961 = load i64, i64* %RCX
  %962 = mul i64 %961, 4
  %963 = add i64 %962, %960
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 5
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to float*
  %967 = load float, float* %966
  %968 = bitcast i8* %959 to float*
  store float %967, float* %968, align 1, !tbaa !2452
  %969 = getelementptr inbounds i8, i8* %959, i64 4
  %970 = bitcast i8* %969 to float*
  store float 0.000000e+00, float* %970, align 1, !tbaa !2452
  %971 = getelementptr inbounds i8, i8* %959, i64 8
  %972 = bitcast i8* %971 to float*
  store float 0.000000e+00, float* %972, align 1, !tbaa !2452
  %973 = getelementptr inbounds i8, i8* %959, i64 12
  %974 = bitcast i8* %973 to float*
  store float 0.000000e+00, float* %974, align 1, !tbaa !2452
  %975 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 8
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 5
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to float*
  %981 = load float, float* %980
  %982 = bitcast i8* %975 to float*
  store float %981, float* %982, align 1, !tbaa !2452
  %983 = getelementptr inbounds i8, i8* %975, i64 4
  %984 = bitcast i8* %983 to float*
  store float 0.000000e+00, float* %984, align 1, !tbaa !2452
  %985 = getelementptr inbounds i8, i8* %975, i64 8
  %986 = bitcast i8* %985 to float*
  store float 0.000000e+00, float* %986, align 1, !tbaa !2452
  %987 = getelementptr inbounds i8, i8* %975, i64 12
  %988 = bitcast i8* %987 to float*
  store float 0.000000e+00, float* %988, align 1, !tbaa !2452
  %989 = load i64, i64* %RBP
  %990 = sub i64 %989, 16
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 4
  store i64 %992, i64* %PC
  %993 = inttoptr i64 %990 to i64*
  %994 = load i64, i64* %993
  store i64 %994, i64* %RAX, align 8, !tbaa !2428
  %995 = load i64, i64* %RBP
  %996 = sub i64 %995, 40
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 4
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %996 to i32*
  %1000 = load i32, i32* %999
  %1001 = sext i32 %1000 to i64
  store i64 %1001, i64* %RCX, align 8, !tbaa !2428
  %1002 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1003 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1004 = load i64, i64* %RAX
  %1005 = load i64, i64* %RCX
  %1006 = mul i64 %1005, 4
  %1007 = add i64 %1006, %1004
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 5
  store i64 %1009, i64* %PC
  %1010 = bitcast i8* %1003 to <2 x float>*
  %1011 = load <2 x float>, <2 x float>* %1010, align 1
  %1012 = getelementptr inbounds i8, i8* %1003, i64 8
  %1013 = bitcast i8* %1012 to <2 x i32>*
  %1014 = load <2 x i32>, <2 x i32>* %1013, align 1
  %1015 = inttoptr i64 %1007 to float*
  %1016 = load float, float* %1015
  %1017 = extractelement <2 x float> %1011, i32 0
  %1018 = fmul float %1017, %1016
  %1019 = bitcast i8* %1002 to float*
  store float %1018, float* %1019, align 1, !tbaa !2452
  %1020 = bitcast <2 x float> %1011 to <2 x i32>
  %1021 = extractelement <2 x i32> %1020, i32 1
  %1022 = getelementptr inbounds i8, i8* %1002, i64 4
  %1023 = bitcast i8* %1022 to i32*
  store i32 %1021, i32* %1023, align 1, !tbaa !2452
  %1024 = extractelement <2 x i32> %1014, i32 0
  %1025 = getelementptr inbounds i8, i8* %1002, i64 8
  %1026 = bitcast i8* %1025 to i32*
  store i32 %1024, i32* %1026, align 1, !tbaa !2452
  %1027 = extractelement <2 x i32> %1014, i32 1
  %1028 = getelementptr inbounds i8, i8* %1002, i64 12
  %1029 = bitcast i8* %1028 to i32*
  store i32 %1027, i32* %1029, align 1, !tbaa !2452
  %1030 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1032 = bitcast %union.vec128_t* %XMM1 to i8*
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 4
  store i64 %1034, i64* %PC
  %1035 = bitcast i8* %1031 to <2 x float>*
  %1036 = load <2 x float>, <2 x float>* %1035, align 1
  %1037 = getelementptr inbounds i8, i8* %1031, i64 8
  %1038 = bitcast i8* %1037 to <2 x i32>*
  %1039 = load <2 x i32>, <2 x i32>* %1038, align 1
  %1040 = bitcast i8* %1032 to <2 x float>*
  %1041 = load <2 x float>, <2 x float>* %1040, align 1
  %1042 = extractelement <2 x float> %1036, i32 0
  %1043 = extractelement <2 x float> %1041, i32 0
  %1044 = fadd float %1042, %1043
  %1045 = bitcast i8* %1030 to float*
  store float %1044, float* %1045, align 1, !tbaa !2452
  %1046 = bitcast <2 x float> %1036 to <2 x i32>
  %1047 = extractelement <2 x i32> %1046, i32 1
  %1048 = getelementptr inbounds i8, i8* %1030, i64 4
  %1049 = bitcast i8* %1048 to i32*
  store i32 %1047, i32* %1049, align 1, !tbaa !2452
  %1050 = extractelement <2 x i32> %1039, i32 0
  %1051 = getelementptr inbounds i8, i8* %1030, i64 8
  %1052 = bitcast i8* %1051 to i32*
  store i32 %1050, i32* %1052, align 1, !tbaa !2452
  %1053 = extractelement <2 x i32> %1039, i32 1
  %1054 = getelementptr inbounds i8, i8* %1030, i64 12
  %1055 = bitcast i8* %1054 to i32*
  store i32 %1053, i32* %1055, align 1, !tbaa !2452
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 32
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 4
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = load i64, i64* %RBP
  %1063 = sub i64 %1062, 40
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 4
  store i64 %1065, i64* %PC
  %1066 = inttoptr i64 %1063 to i32*
  %1067 = load i32, i32* %1066
  %1068 = sext i32 %1067 to i64
  store i64 %1068, i64* %RCX, align 8, !tbaa !2428
  %1069 = load i64, i64* %RAX
  %1070 = load i64, i64* %RCX
  %1071 = mul i64 %1070, 4
  %1072 = add i64 %1071, %1069
  %1073 = bitcast %union.vec128_t* %XMM0 to i8*
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 5
  store i64 %1075, i64* %PC
  %1076 = bitcast i8* %1073 to <2 x float>*
  %1077 = load <2 x float>, <2 x float>* %1076, align 1
  %1078 = extractelement <2 x float> %1077, i32 0
  %1079 = inttoptr i64 %1072 to float*
  store float %1078, float* %1079
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 40
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 3
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1081 to i32*
  %1085 = load i32, i32* %1084
  %1086 = zext i32 %1085 to i64
  store i64 %1086, i64* %RAX, align 8, !tbaa !2428
  %1087 = load i64, i64* %RAX
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 3
  store i64 %1089, i64* %PC
  %1090 = trunc i64 %1087 to i32
  %1091 = add i32 1, %1090
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RAX, align 8, !tbaa !2428
  %1093 = icmp ult i32 %1091, %1090
  %1094 = icmp ult i32 %1091, 1
  %1095 = or i1 %1093, %1094
  %1096 = zext i1 %1095 to i8
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1096, i8* %1097, align 1, !tbaa !2432
  %1098 = and i32 %1091, 255
  %1099 = call i32 @llvm.ctpop.i32(i32 %1098) #16
  %1100 = trunc i32 %1099 to i8
  %1101 = and i8 %1100, 1
  %1102 = xor i8 %1101, 1
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1102, i8* %1103, align 1, !tbaa !2446
  %1104 = xor i64 1, %1087
  %1105 = trunc i64 %1104 to i32
  %1106 = xor i32 %1105, %1091
  %1107 = lshr i32 %1106, 4
  %1108 = trunc i32 %1107 to i8
  %1109 = and i8 %1108, 1
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1109, i8* %1110, align 1, !tbaa !2447
  %1111 = icmp eq i32 %1091, 0
  %1112 = zext i1 %1111 to i8
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1112, i8* %1113, align 1, !tbaa !2448
  %1114 = lshr i32 %1091, 31
  %1115 = trunc i32 %1114 to i8
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1115, i8* %1116, align 1, !tbaa !2449
  %1117 = lshr i32 %1090, 31
  %1118 = xor i32 %1114, %1117
  %1119 = add nuw nsw i32 %1118, %1114
  %1120 = icmp eq i32 %1119, 2
  %1121 = zext i1 %1120 to i8
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1121, i8* %1122, align 1, !tbaa !2450
  %1123 = load i64, i64* %RBP
  %1124 = sub i64 %1123, 40
  %1125 = load i32, i32* %EAX
  %1126 = zext i32 %1125 to i64
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 3
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1124 to i32*
  store i32 %1125, i32* %1129
  %1130 = load i64, i64* %PC
  %1131 = sub i64 %1130, 69
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 5
  store i64 %1133, i64* %PC
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1131, i64* %1134, align 8, !tbaa !2428
  br label %block_402988

block_40290a:                                     ; preds = %block_402900
  %1135 = load i64, i64* %RAX
  %1136 = load i32, i32* %EAX
  %1137 = zext i32 %1136 to i64
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 2
  store i64 %1139, i64* %PC
  %1140 = xor i64 %1137, %1135
  %1141 = trunc i64 %1140 to i32
  %1142 = and i64 %1140, 4294967295
  store i64 %1142, i64* %RAX, align 8, !tbaa !2428
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1143, align 1, !tbaa !2432
  %1144 = and i32 %1141, 255
  %1145 = call i32 @llvm.ctpop.i32(i32 %1144) #16
  %1146 = trunc i32 %1145 to i8
  %1147 = and i8 %1146, 1
  %1148 = xor i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1148, i8* %1149, align 1, !tbaa !2446
  %1150 = icmp eq i32 %1141, 0
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1151, i8* %1152, align 1, !tbaa !2448
  %1153 = lshr i32 %1141, 31
  %1154 = trunc i32 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1154, i8* %1155, align 1, !tbaa !2449
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1156, align 1, !tbaa !2450
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1157, align 1, !tbaa !2447
  %1158 = load i64, i64* %RAX
  %1159 = load i64, i64* %RBP
  %1160 = sub i64 %1159, 4
  %1161 = load i64, i64* %PC
  %1162 = add i64 %1161, 3
  store i64 %1162, i64* %PC
  %1163 = trunc i64 %1158 to i32
  %1164 = inttoptr i64 %1160 to i32*
  %1165 = load i32, i32* %1164
  %1166 = sub i32 %1163, %1165
  %1167 = zext i32 %1166 to i64
  store i64 %1167, i64* %RAX, align 8, !tbaa !2428
  %1168 = icmp ult i32 %1163, %1165
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1169, i8* %1170, align 1, !tbaa !2432
  %1171 = and i32 %1166, 255
  %1172 = call i32 @llvm.ctpop.i32(i32 %1171) #16
  %1173 = trunc i32 %1172 to i8
  %1174 = and i8 %1173, 1
  %1175 = xor i8 %1174, 1
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1175, i8* %1176, align 1, !tbaa !2446
  %1177 = xor i32 %1165, %1163
  %1178 = xor i32 %1177, %1166
  %1179 = lshr i32 %1178, 4
  %1180 = trunc i32 %1179 to i8
  %1181 = and i8 %1180, 1
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1181, i8* %1182, align 1, !tbaa !2447
  %1183 = icmp eq i32 %1166, 0
  %1184 = zext i1 %1183 to i8
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1184, i8* %1185, align 1, !tbaa !2448
  %1186 = lshr i32 %1166, 31
  %1187 = trunc i32 %1186 to i8
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1187, i8* %1188, align 1, !tbaa !2449
  %1189 = lshr i32 %1163, 31
  %1190 = lshr i32 %1165, 31
  %1191 = xor i32 %1190, %1189
  %1192 = xor i32 %1186, %1189
  %1193 = add nuw nsw i32 %1192, %1191
  %1194 = icmp eq i32 %1193, 2
  %1195 = zext i1 %1194 to i8
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1195, i8* %1196, align 1, !tbaa !2450
  %1197 = load i64, i64* %RAX
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 3
  store i64 %1199, i64* %PC
  %1200 = trunc i64 %1197 to i32
  %1201 = add i32 1, %1200
  %1202 = zext i32 %1201 to i64
  store i64 %1202, i64* %RAX, align 8, !tbaa !2428
  %1203 = icmp ult i32 %1201, %1200
  %1204 = icmp ult i32 %1201, 1
  %1205 = or i1 %1203, %1204
  %1206 = zext i1 %1205 to i8
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1206, i8* %1207, align 1, !tbaa !2432
  %1208 = and i32 %1201, 255
  %1209 = call i32 @llvm.ctpop.i32(i32 %1208) #16
  %1210 = trunc i32 %1209 to i8
  %1211 = and i8 %1210, 1
  %1212 = xor i8 %1211, 1
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1212, i8* %1213, align 1, !tbaa !2446
  %1214 = xor i64 1, %1197
  %1215 = trunc i64 %1214 to i32
  %1216 = xor i32 %1215, %1201
  %1217 = lshr i32 %1216, 4
  %1218 = trunc i32 %1217 to i8
  %1219 = and i8 %1218, 1
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1219, i8* %1220, align 1, !tbaa !2447
  %1221 = icmp eq i32 %1201, 0
  %1222 = zext i1 %1221 to i8
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1222, i8* %1223, align 1, !tbaa !2448
  %1224 = lshr i32 %1201, 31
  %1225 = trunc i32 %1224 to i8
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1225, i8* %1226, align 1, !tbaa !2449
  %1227 = lshr i32 %1200, 31
  %1228 = xor i32 %1224, %1227
  %1229 = add nuw nsw i32 %1228, %1224
  %1230 = icmp eq i32 %1229, 2
  %1231 = zext i1 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1231, i8* %1232, align 1, !tbaa !2450
  %1233 = load i64, i64* %RAX
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 36
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = shl i64 %1233, 32
  %1241 = ashr exact i64 %1240, 32
  %1242 = sext i32 %1239 to i64
  %1243 = mul nsw i64 %1242, %1241
  %1244 = trunc i64 %1243 to i32
  %1245 = and i64 %1243, 4294967295
  store i64 %1245, i64* %RAX, align 8, !tbaa !2428
  %1246 = shl i64 %1243, 32
  %1247 = ashr exact i64 %1246, 32
  %1248 = icmp ne i64 %1247, %1243
  %1249 = zext i1 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1249, i8* %1250, align 1, !tbaa !2432
  %1251 = and i32 %1244, 255
  %1252 = call i32 @llvm.ctpop.i32(i32 %1251) #16
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = xor i8 %1254, 1
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1255, i8* %1256, align 1, !tbaa !2446
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1257, align 1, !tbaa !2447
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1258, align 1, !tbaa !2448
  %1259 = lshr i32 %1244, 31
  %1260 = trunc i32 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1260, i8* %1261, align 1, !tbaa !2449
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1249, i8* %1262, align 1, !tbaa !2450
  %1263 = load i64, i64* %RBP
  %1264 = sub i64 %1263, 48
  %1265 = load i32, i32* %EAX
  %1266 = zext i32 %1265 to i64
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 3
  store i64 %1268, i64* %PC
  %1269 = inttoptr i64 %1264 to i32*
  store i32 %1265, i32* %1269
  br label %block_402919

block_4028c5:                                     ; preds = %block_4028ba, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.5 = phi %struct.Memory* [ %297, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %297, %block_4028ba ]
  %1270 = load i64, i64* %RBP
  %1271 = sub i64 %1270, 20
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 4
  store i64 %1273, i64* %PC
  %1274 = inttoptr i64 %1271 to i32*
  %1275 = load i32, i32* %1274
  %1276 = sub i32 %1275, 1
  %1277 = icmp ult i32 %1275, 1
  %1278 = zext i1 %1277 to i8
  %1279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1278, i8* %1279, align 1, !tbaa !2432
  %1280 = and i32 %1276, 255
  %1281 = call i32 @llvm.ctpop.i32(i32 %1280) #16
  %1282 = trunc i32 %1281 to i8
  %1283 = and i8 %1282, 1
  %1284 = xor i8 %1283, 1
  %1285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1284, i8* %1285, align 1, !tbaa !2446
  %1286 = xor i32 %1275, 1
  %1287 = xor i32 %1286, %1276
  %1288 = lshr i32 %1287, 4
  %1289 = trunc i32 %1288 to i8
  %1290 = and i8 %1289, 1
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1290, i8* %1291, align 1, !tbaa !2447
  %1292 = icmp eq i32 %1276, 0
  %1293 = zext i1 %1292 to i8
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1293, i8* %1294, align 1, !tbaa !2448
  %1295 = lshr i32 %1276, 31
  %1296 = trunc i32 %1295 to i8
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1296, i8* %1297, align 1, !tbaa !2449
  %1298 = lshr i32 %1275, 31
  %1299 = xor i32 %1295, %1298
  %1300 = add nuw nsw i32 %1299, %1298
  %1301 = icmp eq i32 %1300, 2
  %1302 = zext i1 %1301 to i8
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1302, i8* %1303, align 1, !tbaa !2450
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 16
  %1306 = load i64, i64* %PC
  %1307 = add i64 %1306, 6
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 6
  store i64 %1309, i64* %PC
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1311 = load i8, i8* %1310, align 1, !tbaa !2448
  %1312 = icmp eq i8 %1311, 0
  %1313 = zext i1 %1312 to i8
  store i8 %1313, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1315 = select i1 %1312, i64 %1305, i64 %1307
  store i64 %1315, i64* %1314, align 8, !tbaa !2428
  %1316 = load i8, i8* %BRANCH_TAKEN
  %1317 = icmp eq i8 %1316, 1
  br i1 %1317, label %block_4028d9, label %block_4028cf

block_4028ba:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 11
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 6
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 6
  store i64 %1323, i64* %PC
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1325 = load i8, i8* %1324, align 1, !tbaa !2446
  store i8 %1325, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1327 = icmp ne i8 %1325, 0
  %1328 = select i1 %1327, i64 %1319, i64 %1321
  store i64 %1328, i64* %1326, align 8, !tbaa !2428
  %1329 = load i8, i8* %BRANCH_TAKEN
  %1330 = icmp eq i8 %1329, 1
  br i1 %1330, label %block_4028c5, label %block_4028c0

block_4028a3:                                     ; preds = %block_402870
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 308
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  store i64 %1334, i64* %PC
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1332, i64* %1335, align 8, !tbaa !2428
  br label %block_4029d7

block_402900:                                     ; preds = %block_4028f1, %block_4028d9
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.1, %block_4028d9 ], [ %MEMORY.1, %block_4028f1 ]
  %1336 = load i64, i64* %RBP
  %1337 = sub i64 %1336, 36
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 4
  store i64 %1339, i64* %PC
  %1340 = inttoptr i64 %1337 to i32*
  %1341 = load i32, i32* %1340
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1342, align 1, !tbaa !2432
  %1343 = and i32 %1341, 255
  %1344 = call i32 @llvm.ctpop.i32(i32 %1343) #16
  %1345 = trunc i32 %1344 to i8
  %1346 = and i8 %1345, 1
  %1347 = xor i8 %1346, 1
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1347, i8* %1348, align 1, !tbaa !2446
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1349, align 1, !tbaa !2447
  %1350 = icmp eq i32 %1341, 0
  %1351 = zext i1 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1351, i8* %1352, align 1, !tbaa !2448
  %1353 = lshr i32 %1341, 31
  %1354 = trunc i32 %1353 to i8
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1354, i8* %1355, align 1, !tbaa !2449
  %1356 = lshr i32 %1341, 31
  %1357 = xor i32 %1353, %1356
  %1358 = add nuw nsw i32 %1357, %1356
  %1359 = icmp eq i32 %1358, 2
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1360, i8* %1361, align 1, !tbaa !2450
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 21
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 6
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 6
  store i64 %1367, i64* %PC
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1369 = load i8, i8* %1368, align 1, !tbaa !2449
  %1370 = icmp ne i8 %1369, 0
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1372 = load i8, i8* %1371, align 1, !tbaa !2450
  %1373 = icmp ne i8 %1372, 0
  %1374 = xor i1 %1370, %1373
  %1375 = xor i1 %1374, true
  %1376 = zext i1 %1375 to i8
  store i8 %1376, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1378 = select i1 %1374, i64 %1365, i64 %1363
  store i64 %1378, i64* %1377, align 8, !tbaa !2428
  %1379 = load i8, i8* %BRANCH_TAKEN
  %1380 = icmp eq i8 %1379, 1
  br i1 %1380, label %block_402919, label %block_40290a

block_4028c0:                                     ; preds = %block_4028ba
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 279
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 5
  store i64 %1384, i64* %PC
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1382, i64* %1385, align 8, !tbaa !2428
  br label %block_4029d7
}

; Function Attrs: noinline
define %struct.Memory* @sub_400498__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400498:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4004aa, label %block_4004a8

block_4004a8:                                     ; preds = %block_400498
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4004aa

block_4004aa:                                     ; preds = %block_4004a8, %block_400498
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400498 ], [ %92, %block_4004a8 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005d0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400560_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_402db0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402db0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 10564
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400498__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_402e06, label %block_402de6

block_402e06:                                     ; preds = %block_402df0, %block_402db0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_402db0 ], [ %387, %block_402df0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402de6:                                     ; preds = %block_402db0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_402df0

block_402df0:                                     ; preds = %block_402df0, %block_402de6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_402de6 ], [ %387, %block_402df0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_402df0, label %block_402e06
}

; Function Attrs: noinline
define %struct.Memory* @sub_401920_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401920:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 17
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %R8D = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 7
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 9
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RDI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 13
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RSP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 15
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RBP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 17
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R8 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = sub i64 %66, 64
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  %70 = icmp ult i64 %66, 64
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2432
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2446
  %80 = xor i64 64, %66
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %66, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %RDI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 12
  %106 = load i32, i32* %ESI
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 16
  %113 = load i32, i32* %EDX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 24
  %120 = load i64, i64* %RCX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 32
  %126 = load i64, i64* %R8
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 32
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %RCX, align 8, !tbaa !2428
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 6
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i32*
  store i32 0, i32* %139
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 16
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144
  %146 = zext i32 %145 to i64
  store i64 %146, i64* %RDX, align 8, !tbaa !2428
  %147 = load i64, i64* %RDX
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 3
  store i64 %149, i64* %PC
  %150 = trunc i64 %147 to i32
  %151 = sub i32 %150, 1
  %152 = zext i32 %151 to i64
  store i64 %152, i64* %RDX, align 8, !tbaa !2428
  %153 = icmp ult i32 %150, 1
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %154, i8* %155, align 1, !tbaa !2432
  %156 = and i32 %151, 255
  %157 = call i32 @llvm.ctpop.i32(i32 %156) #16
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %160, i8* %161, align 1, !tbaa !2446
  %162 = xor i64 1, %147
  %163 = trunc i64 %162 to i32
  %164 = xor i32 %163, %151
  %165 = lshr i32 %164, 4
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %167, i8* %168, align 1, !tbaa !2447
  %169 = icmp eq i32 %151, 0
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %170, i8* %171, align 1, !tbaa !2448
  %172 = lshr i32 %151, 31
  %173 = trunc i32 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %173, i8* %174, align 1, !tbaa !2449
  %175 = lshr i32 %150, 31
  %176 = xor i32 %172, %175
  %177 = add nuw nsw i32 %176, %175
  %178 = icmp eq i32 %177, 2
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %179, i8* %180, align 1, !tbaa !2450
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 56
  %183 = load i32, i32* %EDX
  %184 = zext i32 %183 to i64
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 3
  store i64 %186, i64* %PC
  %187 = inttoptr i64 %182 to i32*
  store i32 %183, i32* %187
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 56
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %189 to i32*
  %193 = load i32, i32* %192
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %194, align 1, !tbaa !2432
  %195 = and i32 %193, 255
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %199, i8* %200, align 1, !tbaa !2446
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %201, align 1, !tbaa !2447
  %202 = icmp eq i32 %193, 0
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %203, i8* %204, align 1, !tbaa !2448
  %205 = lshr i32 %193, 31
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %206, i8* %207, align 1, !tbaa !2449
  %208 = lshr i32 %193, 31
  %209 = xor i32 %205, %208
  %210 = add nuw nsw i32 %209, %208
  %211 = icmp eq i32 %210, 2
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %212, i8* %213, align 1, !tbaa !2450
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 631
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 6
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 6
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %221 = load i8, i8* %220, align 1, !tbaa !2449
  %222 = icmp ne i8 %221, 0
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %224 = load i8, i8* %223, align 1, !tbaa !2450
  %225 = icmp ne i8 %224, 0
  %226 = xor i1 %222, %225
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %215, i64 %217
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_401bc8, label %block_401957

block_401c0b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 18
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 6
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 6
  store i64 %237, i64* %PC
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %239 = load i8, i8* %238, align 1, !tbaa !2446
  store i8 %239, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %241 = icmp ne i8 %239, 0
  %242 = select i1 %241, i64 %233, i64 %235
  store i64 %242, i64* %240, align 8, !tbaa !2428
  %243 = load i8, i8* %BRANCH_TAKEN
  %244 = icmp eq i8 %243, 1
  br i1 %244, label %block_401c1d, label %block_401c11

block_401aee:                                     ; preds = %block_401ac7
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 8
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 12
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RCX, align 8, !tbaa !2428
  %258 = load i64, i64* %RCX
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 40
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 4
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263
  %265 = shl i64 %258, 32
  %266 = ashr exact i64 %265, 32
  %267 = sext i32 %264 to i64
  %268 = mul nsw i64 %267, %266
  %269 = trunc i64 %268 to i32
  %270 = and i64 %268, 4294967295
  store i64 %270, i64* %RCX, align 8, !tbaa !2428
  %271 = shl i64 %268, 32
  %272 = ashr exact i64 %271, 32
  %273 = icmp ne i64 %272, %268
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %274, i8* %275, align 1, !tbaa !2432
  %276 = and i32 %269, 255
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #16
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %280, i8* %281, align 1, !tbaa !2446
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %282, align 1, !tbaa !2447
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %283, align 1, !tbaa !2448
  %284 = lshr i32 %269, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %274, i8* %287, align 1, !tbaa !2450
  %288 = load i64, i64* %RCX
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 44
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 3
  store i64 %292, i64* %PC
  %293 = trunc i64 %288 to i32
  %294 = inttoptr i64 %290 to i32*
  %295 = load i32, i32* %294
  %296 = add i32 %295, %293
  %297 = zext i32 %296 to i64
  store i64 %297, i64* %RCX, align 8, !tbaa !2428
  %298 = icmp ult i32 %296, %293
  %299 = icmp ult i32 %296, %295
  %300 = or i1 %298, %299
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %301, i8* %302, align 1, !tbaa !2432
  %303 = and i32 %296, 255
  %304 = call i32 @llvm.ctpop.i32(i32 %303) #16
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %307, i8* %308, align 1, !tbaa !2446
  %309 = xor i32 %295, %293
  %310 = xor i32 %309, %296
  %311 = lshr i32 %310, 4
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %313, i8* %314, align 1, !tbaa !2447
  %315 = icmp eq i32 %296, 0
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %316, i8* %317, align 1, !tbaa !2448
  %318 = lshr i32 %296, 31
  %319 = trunc i32 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %319, i8* %320, align 1, !tbaa !2449
  %321 = lshr i32 %293, 31
  %322 = lshr i32 %295, 31
  %323 = xor i32 %318, %321
  %324 = xor i32 %318, %322
  %325 = add nuw nsw i32 %323, %324
  %326 = icmp eq i32 %325, 2
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %327, i8* %328, align 1, !tbaa !2450
  %329 = load i32, i32* %ECX
  %330 = zext i32 %329 to i64
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = shl i64 %330, 32
  %334 = ashr exact i64 %333, 32
  store i64 %334, i64* %RDX, align 8, !tbaa !2428
  %335 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %336 = load i64, i64* %RAX
  %337 = load i64, i64* %RDX
  %338 = mul i64 %337, 4
  %339 = add i64 %338, %336
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 5
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to float*
  %343 = load float, float* %342
  %344 = bitcast i8* %335 to float*
  store float %343, float* %344, align 1, !tbaa !2452
  %345 = getelementptr inbounds i8, i8* %335, i64 4
  %346 = bitcast i8* %345 to float*
  store float 0.000000e+00, float* %346, align 1, !tbaa !2452
  %347 = getelementptr inbounds i8, i8* %335, i64 8
  %348 = bitcast i8* %347 to float*
  store float 0.000000e+00, float* %348, align 1, !tbaa !2452
  %349 = getelementptr inbounds i8, i8* %335, i64 12
  %350 = bitcast i8* %349 to float*
  store float 0.000000e+00, float* %350, align 1, !tbaa !2452
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 8
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to i64*
  %356 = load i64, i64* %355
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = load i64, i64* %RBP
  %358 = sub i64 %357, 12
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 3
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %358 to i32*
  %362 = load i32, i32* %361
  %363 = zext i32 %362 to i64
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = load i64, i64* %RCX
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 40
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i32*
  %370 = load i32, i32* %369
  %371 = shl i64 %364, 32
  %372 = ashr exact i64 %371, 32
  %373 = sext i32 %370 to i64
  %374 = mul nsw i64 %373, %372
  %375 = trunc i64 %374 to i32
  %376 = and i64 %374, 4294967295
  store i64 %376, i64* %RCX, align 8, !tbaa !2428
  %377 = shl i64 %374, 32
  %378 = ashr exact i64 %377, 32
  %379 = icmp ne i64 %378, %374
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %380, i8* %381, align 1, !tbaa !2432
  %382 = and i32 %375, 255
  %383 = call i32 @llvm.ctpop.i32(i32 %382) #16
  %384 = trunc i32 %383 to i8
  %385 = and i8 %384, 1
  %386 = xor i8 %385, 1
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %386, i8* %387, align 1, !tbaa !2446
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %388, align 1, !tbaa !2447
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %389, align 1, !tbaa !2448
  %390 = lshr i32 %375, 31
  %391 = trunc i32 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %391, i8* %392, align 1, !tbaa !2449
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %380, i8* %393, align 1, !tbaa !2450
  %394 = load i64, i64* %RCX
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 52
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 3
  store i64 %398, i64* %PC
  %399 = trunc i64 %394 to i32
  %400 = inttoptr i64 %396 to i32*
  %401 = load i32, i32* %400
  %402 = add i32 %401, %399
  %403 = zext i32 %402 to i64
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = icmp ult i32 %402, %399
  %405 = icmp ult i32 %402, %401
  %406 = or i1 %404, %405
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %407, i8* %408, align 1, !tbaa !2432
  %409 = and i32 %402, 255
  %410 = call i32 @llvm.ctpop.i32(i32 %409) #16
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  %413 = xor i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %413, i8* %414, align 1, !tbaa !2446
  %415 = xor i32 %401, %399
  %416 = xor i32 %415, %402
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %419, i8* %420, align 1, !tbaa !2447
  %421 = icmp eq i32 %402, 0
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %422, i8* %423, align 1, !tbaa !2448
  %424 = lshr i32 %402, 31
  %425 = trunc i32 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %425, i8* %426, align 1, !tbaa !2449
  %427 = lshr i32 %399, 31
  %428 = lshr i32 %401, 31
  %429 = xor i32 %424, %427
  %430 = xor i32 %424, %428
  %431 = add nuw nsw i32 %429, %430
  %432 = icmp eq i32 %431, 2
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %433, i8* %434, align 1, !tbaa !2450
  %435 = load i32, i32* %ECX
  %436 = zext i32 %435 to i64
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = shl i64 %436, 32
  %440 = ashr exact i64 %439, 32
  store i64 %440, i64* %RDX, align 8, !tbaa !2428
  %441 = load i64, i64* %RAX
  %442 = load i64, i64* %RDX
  %443 = mul i64 %442, 4
  %444 = add i64 %443, %441
  %445 = bitcast %union.vec128_t* %XMM0 to i8*
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 5
  store i64 %447, i64* %PC
  %448 = bitcast i8* %445 to <2 x float>*
  %449 = load <2 x float>, <2 x float>* %448, align 1
  %450 = extractelement <2 x float> %449, i32 0
  %451 = inttoptr i64 %444 to float*
  store float %450, float* %451
  %452 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 36
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 5
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to float*
  %458 = load float, float* %457
  %459 = bitcast i8* %452 to float*
  store float %458, float* %459, align 1, !tbaa !2452
  %460 = getelementptr inbounds i8, i8* %452, i64 4
  %461 = bitcast i8* %460 to float*
  store float 0.000000e+00, float* %461, align 1, !tbaa !2452
  %462 = getelementptr inbounds i8, i8* %452, i64 8
  %463 = bitcast i8* %462 to float*
  store float 0.000000e+00, float* %463, align 1, !tbaa !2452
  %464 = getelementptr inbounds i8, i8* %452, i64 12
  %465 = bitcast i8* %464 to float*
  store float 0.000000e+00, float* %465, align 1, !tbaa !2452
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 8
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 4
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %467 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %RAX, align 8, !tbaa !2428
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 12
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 3
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  %477 = load i32, i32* %476
  %478 = zext i32 %477 to i64
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = load i64, i64* %RCX
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 40
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i32*
  %485 = load i32, i32* %484
  %486 = shl i64 %479, 32
  %487 = ashr exact i64 %486, 32
  %488 = sext i32 %485 to i64
  %489 = mul nsw i64 %488, %487
  %490 = trunc i64 %489 to i32
  %491 = and i64 %489, 4294967295
  store i64 %491, i64* %RCX, align 8, !tbaa !2428
  %492 = shl i64 %489, 32
  %493 = ashr exact i64 %492, 32
  %494 = icmp ne i64 %493, %489
  %495 = zext i1 %494 to i8
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %495, i8* %496, align 1, !tbaa !2432
  %497 = and i32 %490, 255
  %498 = call i32 @llvm.ctpop.i32(i32 %497) #16
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  %501 = xor i8 %500, 1
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %501, i8* %502, align 1, !tbaa !2446
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %503, align 1, !tbaa !2447
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %504, align 1, !tbaa !2448
  %505 = lshr i32 %490, 31
  %506 = trunc i32 %505 to i8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %506, i8* %507, align 1, !tbaa !2449
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %495, i8* %508, align 1, !tbaa !2450
  %509 = load i64, i64* %RCX
  %510 = load i64, i64* %RBP
  %511 = sub i64 %510, 44
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 3
  store i64 %513, i64* %PC
  %514 = trunc i64 %509 to i32
  %515 = inttoptr i64 %511 to i32*
  %516 = load i32, i32* %515
  %517 = add i32 %516, %514
  %518 = zext i32 %517 to i64
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = icmp ult i32 %517, %514
  %520 = icmp ult i32 %517, %516
  %521 = or i1 %519, %520
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %522, i8* %523, align 1, !tbaa !2432
  %524 = and i32 %517, 255
  %525 = call i32 @llvm.ctpop.i32(i32 %524) #16
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  %528 = xor i8 %527, 1
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %528, i8* %529, align 1, !tbaa !2446
  %530 = xor i32 %516, %514
  %531 = xor i32 %530, %517
  %532 = lshr i32 %531, 4
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %534, i8* %535, align 1, !tbaa !2447
  %536 = icmp eq i32 %517, 0
  %537 = zext i1 %536 to i8
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %537, i8* %538, align 1, !tbaa !2448
  %539 = lshr i32 %517, 31
  %540 = trunc i32 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %540, i8* %541, align 1, !tbaa !2449
  %542 = lshr i32 %514, 31
  %543 = lshr i32 %516, 31
  %544 = xor i32 %539, %542
  %545 = xor i32 %539, %543
  %546 = add nuw nsw i32 %544, %545
  %547 = icmp eq i32 %546, 2
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %548, i8* %549, align 1, !tbaa !2450
  %550 = load i32, i32* %ECX
  %551 = zext i32 %550 to i64
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC
  %554 = shl i64 %551, 32
  %555 = ashr exact i64 %554, 32
  store i64 %555, i64* %RDX, align 8, !tbaa !2428
  %556 = load i64, i64* %RAX
  %557 = load i64, i64* %RDX
  %558 = mul i64 %557, 4
  %559 = add i64 %558, %556
  %560 = bitcast %union.vec128_t* %XMM0 to i8*
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 5
  store i64 %562, i64* %PC
  %563 = bitcast i8* %560 to <2 x float>*
  %564 = load <2 x float>, <2 x float>* %563, align 1
  %565 = extractelement <2 x float> %564, i32 0
  %566 = inttoptr i64 %559 to float*
  store float %565, float* %566
  br label %block_401b35

block_4019e2:                                     ; preds = %block_4019d7, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %MEMORY.0 = phi %struct.Memory* [ %1204, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %1204, %block_4019d7 ]
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 52
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 3
  store i64 %570, i64* %PC
  %571 = inttoptr i64 %568 to i32*
  %572 = load i32, i32* %571
  %573 = zext i32 %572 to i64
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = load i32, i32* %EAX
  %575 = zext i32 %574 to i64
  %576 = load i64, i64* %RBP
  %577 = sub i64 %576, 44
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 3
  store i64 %579, i64* %PC
  %580 = inttoptr i64 %577 to i32*
  %581 = load i32, i32* %580
  %582 = sub i32 %574, %581
  %583 = icmp ult i32 %574, %581
  %584 = zext i1 %583 to i8
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %584, i8* %585, align 1, !tbaa !2432
  %586 = and i32 %582, 255
  %587 = call i32 @llvm.ctpop.i32(i32 %586) #16
  %588 = trunc i32 %587 to i8
  %589 = and i8 %588, 1
  %590 = xor i8 %589, 1
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %590, i8* %591, align 1, !tbaa !2446
  %592 = xor i32 %581, %574
  %593 = xor i32 %592, %582
  %594 = lshr i32 %593, 4
  %595 = trunc i32 %594 to i8
  %596 = and i8 %595, 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %596, i8* %597, align 1, !tbaa !2447
  %598 = icmp eq i32 %582, 0
  %599 = zext i1 %598 to i8
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %599, i8* %600, align 1, !tbaa !2448
  %601 = lshr i32 %582, 31
  %602 = trunc i32 %601 to i8
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %602, i8* %603, align 1, !tbaa !2449
  %604 = lshr i32 %574, 31
  %605 = lshr i32 %581, 31
  %606 = xor i32 %605, %604
  %607 = xor i32 %601, %604
  %608 = add nuw nsw i32 %607, %606
  %609 = icmp eq i32 %608, 2
  %610 = zext i1 %609 to i8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %610, i8* %611, align 1, !tbaa !2450
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 104
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 6
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 6
  store i64 %617, i64* %PC
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %619 = load i8, i8* %618, align 1, !tbaa !2448
  store i8 %619, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %621 = icmp ne i8 %619, 0
  %622 = select i1 %621, i64 %613, i64 %615
  store i64 %622, i64* %620, align 8, !tbaa !2428
  %623 = load i8, i8* %BRANCH_TAKEN
  %624 = icmp eq i8 %623, 1
  br i1 %624, label %block_401a50, label %block_4019ee

block_40195e:                                     ; preds = %block_401bb0, %block_401957
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401957 ], [ %MEMORY.6, %block_401bb0 ]
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 44
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 3
  store i64 %628, i64* %PC
  %629 = inttoptr i64 %626 to i32*
  %630 = load i32, i32* %629
  %631 = zext i32 %630 to i64
  store i64 %631, i64* %RAX, align 8, !tbaa !2428
  %632 = load i32, i32* %EAX
  %633 = zext i32 %632 to i64
  %634 = load i64, i64* %RBP
  %635 = sub i64 %634, 56
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 3
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %635 to i32*
  %639 = load i32, i32* %638
  %640 = sub i32 %632, %639
  %641 = icmp ult i32 %632, %639
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %642, i8* %643, align 1, !tbaa !2432
  %644 = and i32 %640, 255
  %645 = call i32 @llvm.ctpop.i32(i32 %644) #16
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  %648 = xor i8 %647, 1
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %648, i8* %649, align 1, !tbaa !2446
  %650 = xor i32 %639, %632
  %651 = xor i32 %650, %640
  %652 = lshr i32 %651, 4
  %653 = trunc i32 %652 to i8
  %654 = and i8 %653, 1
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %654, i8* %655, align 1, !tbaa !2447
  %656 = icmp eq i32 %640, 0
  %657 = zext i1 %656 to i8
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %657, i8* %658, align 1, !tbaa !2448
  %659 = lshr i32 %640, 31
  %660 = trunc i32 %659 to i8
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %660, i8* %661, align 1, !tbaa !2449
  %662 = lshr i32 %632, 31
  %663 = lshr i32 %639, 31
  %664 = xor i32 %663, %662
  %665 = xor i32 %659, %662
  %666 = add nuw nsw i32 %665, %664
  %667 = icmp eq i32 %666, 2
  %668 = zext i1 %667 to i8
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %668, i8* %669, align 1, !tbaa !2450
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 607
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 6
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 6
  store i64 %675, i64* %PC
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %677 = load i8, i8* %676, align 1, !tbaa !2449
  %678 = icmp ne i8 %677, 0
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %680 = load i8, i8* %679, align 1, !tbaa !2450
  %681 = icmp ne i8 %680, 0
  %682 = xor i1 %678, %681
  %683 = xor i1 %682, true
  %684 = zext i1 %683 to i8
  store i8 %684, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %686 = select i1 %682, i64 %673, i64 %671
  store i64 %686, i64* %685, align 8, !tbaa !2428
  %687 = load i8, i8* %BRANCH_TAKEN
  %688 = icmp eq i8 %687, 1
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 5
  br i1 %688, label %block_401bc3, label %block_40196a

block_40196a:                                     ; preds = %block_40195e
  store i64 %690, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 44
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 3
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i32*
  %696 = load i32, i32* %695
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RAX, align 8, !tbaa !2428
  %698 = load i64, i64* %RAX
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 3
  store i64 %700, i64* %PC
  %701 = trunc i64 %698 to i32
  %702 = add i32 1, %701
  %703 = zext i32 %702 to i64
  store i64 %703, i64* %RAX, align 8, !tbaa !2428
  %704 = icmp ult i32 %702, %701
  %705 = icmp ult i32 %702, 1
  %706 = or i1 %704, %705
  %707 = zext i1 %706 to i8
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %707, i8* %708, align 1, !tbaa !2432
  %709 = and i32 %702, 255
  %710 = call i32 @llvm.ctpop.i32(i32 %709) #16
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  %713 = xor i8 %712, 1
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %713, i8* %714, align 1, !tbaa !2446
  %715 = xor i64 1, %698
  %716 = trunc i64 %715 to i32
  %717 = xor i32 %716, %702
  %718 = lshr i32 %717, 4
  %719 = trunc i32 %718 to i8
  %720 = and i8 %719, 1
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %720, i8* %721, align 1, !tbaa !2447
  %722 = icmp eq i32 %702, 0
  %723 = zext i1 %722 to i8
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %723, i8* %724, align 1, !tbaa !2448
  %725 = lshr i32 %702, 31
  %726 = trunc i32 %725 to i8
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %726, i8* %727, align 1, !tbaa !2449
  %728 = lshr i32 %701, 31
  %729 = xor i32 %725, %728
  %730 = add nuw nsw i32 %729, %725
  %731 = icmp eq i32 %730, 2
  %732 = zext i1 %731 to i8
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %732, i8* %733, align 1, !tbaa !2450
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 48
  %736 = load i32, i32* %EAX
  %737 = zext i32 %736 to i64
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 3
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %735 to i32*
  store i32 %736, i32* %740
  %741 = load i64, i64* %RBP
  %742 = sub i64 %741, 16
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 3
  store i64 %744, i64* %PC
  %745 = inttoptr i64 %742 to i32*
  %746 = load i32, i32* %745
  %747 = zext i32 %746 to i64
  store i64 %747, i64* %RAX, align 8, !tbaa !2428
  %748 = load i64, i64* %RAX
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 44
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC
  %753 = trunc i64 %748 to i32
  %754 = inttoptr i64 %750 to i32*
  %755 = load i32, i32* %754
  %756 = sub i32 %753, %755
  %757 = zext i32 %756 to i64
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = icmp ult i32 %753, %755
  %759 = zext i1 %758 to i8
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %759, i8* %760, align 1, !tbaa !2432
  %761 = and i32 %756, 255
  %762 = call i32 @llvm.ctpop.i32(i32 %761) #16
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %765, i8* %766, align 1, !tbaa !2446
  %767 = xor i32 %755, %753
  %768 = xor i32 %767, %756
  %769 = lshr i32 %768, 4
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %771, i8* %772, align 1, !tbaa !2447
  %773 = icmp eq i32 %756, 0
  %774 = zext i1 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %774, i8* %775, align 1, !tbaa !2448
  %776 = lshr i32 %756, 31
  %777 = trunc i32 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %777, i8* %778, align 1, !tbaa !2449
  %779 = lshr i32 %753, 31
  %780 = lshr i32 %755, 31
  %781 = xor i32 %780, %779
  %782 = xor i32 %776, %779
  %783 = add nuw nsw i32 %782, %781
  %784 = icmp eq i32 %783, 2
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %785, i8* %786, align 1, !tbaa !2450
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 8
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 4
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %788 to i64*
  %792 = load i64, i64* %791
  store i64 %792, i64* %RCX, align 8, !tbaa !2428
  %793 = load i64, i64* %RBP
  %794 = sub i64 %793, 12
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RSI, align 8, !tbaa !2428
  %800 = load i64, i64* %RSI
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 44
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i32*
  %806 = load i32, i32* %805
  %807 = shl i64 %800, 32
  %808 = ashr exact i64 %807, 32
  %809 = sext i32 %806 to i64
  %810 = mul nsw i64 %809, %808
  %811 = trunc i64 %810 to i32
  %812 = and i64 %810, 4294967295
  store i64 %812, i64* %RSI, align 8, !tbaa !2428
  %813 = shl i64 %810, 32
  %814 = ashr exact i64 %813, 32
  %815 = icmp ne i64 %814, %810
  %816 = zext i1 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %816, i8* %817, align 1, !tbaa !2432
  %818 = and i32 %811, 255
  %819 = call i32 @llvm.ctpop.i32(i32 %818) #16
  %820 = trunc i32 %819 to i8
  %821 = and i8 %820, 1
  %822 = xor i8 %821, 1
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %822, i8* %823, align 1, !tbaa !2446
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %824, align 1, !tbaa !2447
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %825, align 1, !tbaa !2448
  %826 = lshr i32 %811, 31
  %827 = trunc i32 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %827, i8* %828, align 1, !tbaa !2449
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %816, i8* %829, align 1, !tbaa !2450
  %830 = load i64, i64* %RSI
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 44
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 3
  store i64 %834, i64* %PC
  %835 = trunc i64 %830 to i32
  %836 = inttoptr i64 %832 to i32*
  %837 = load i32, i32* %836
  %838 = add i32 %837, %835
  %839 = zext i32 %838 to i64
  store i64 %839, i64* %RSI, align 8, !tbaa !2428
  %840 = icmp ult i32 %838, %835
  %841 = icmp ult i32 %838, %837
  %842 = or i1 %840, %841
  %843 = zext i1 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %843, i8* %844, align 1, !tbaa !2432
  %845 = and i32 %838, 255
  %846 = call i32 @llvm.ctpop.i32(i32 %845) #16
  %847 = trunc i32 %846 to i8
  %848 = and i8 %847, 1
  %849 = xor i8 %848, 1
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %849, i8* %850, align 1, !tbaa !2446
  %851 = xor i32 %837, %835
  %852 = xor i32 %851, %838
  %853 = lshr i32 %852, 4
  %854 = trunc i32 %853 to i8
  %855 = and i8 %854, 1
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %855, i8* %856, align 1, !tbaa !2447
  %857 = icmp eq i32 %838, 0
  %858 = zext i1 %857 to i8
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %858, i8* %859, align 1, !tbaa !2448
  %860 = lshr i32 %838, 31
  %861 = trunc i32 %860 to i8
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %861, i8* %862, align 1, !tbaa !2449
  %863 = lshr i32 %835, 31
  %864 = lshr i32 %837, 31
  %865 = xor i32 %860, %863
  %866 = xor i32 %860, %864
  %867 = add nuw nsw i32 %865, %866
  %868 = icmp eq i32 %867, 2
  %869 = zext i1 %868 to i8
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %869, i8* %870, align 1, !tbaa !2450
  %871 = load i32, i32* %ESI
  %872 = zext i32 %871 to i64
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 3
  store i64 %874, i64* %PC
  %875 = shl i64 %872, 32
  %876 = ashr exact i64 %875, 32
  store i64 %876, i64* %RDI, align 8, !tbaa !2428
  %877 = load i64, i64* %RDI
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 4
  store i64 %879, i64* %PC
  %880 = shl i64 %877, 1
  %881 = icmp slt i64 %880, 0
  %882 = shl i64 %880, 1
  store i64 %882, i64* %RDI, align 8, !tbaa !2428
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %884 = zext i1 %881 to i8
  store i8 %884, i8* %883, align 1, !tbaa !2451
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %886 = trunc i64 %882 to i32
  %887 = and i32 %886, 254
  %888 = call i32 @llvm.ctpop.i32(i32 %887) #16
  %889 = trunc i32 %888 to i8
  %890 = and i8 %889, 1
  %891 = xor i8 %890, 1
  store i8 %891, i8* %885, align 1, !tbaa !2451
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %892, align 1, !tbaa !2451
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %894 = icmp eq i64 %882, 0
  %895 = zext i1 %894 to i8
  store i8 %895, i8* %893, align 1, !tbaa !2451
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %897 = lshr i64 %882, 63
  %898 = trunc i64 %897 to i8
  store i8 %898, i8* %896, align 1, !tbaa !2451
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %899, align 1, !tbaa !2451
  %900 = load i64, i64* %RCX
  %901 = load i64, i64* %RDI
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 3
  store i64 %903, i64* %PC
  %904 = add i64 %901, %900
  store i64 %904, i64* %RCX, align 8, !tbaa !2428
  %905 = icmp ult i64 %904, %900
  %906 = icmp ult i64 %904, %901
  %907 = or i1 %905, %906
  %908 = zext i1 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %908, i8* %909, align 1, !tbaa !2432
  %910 = trunc i64 %904 to i32
  %911 = and i32 %910, 255
  %912 = call i32 @llvm.ctpop.i32(i32 %911) #16
  %913 = trunc i32 %912 to i8
  %914 = and i8 %913, 1
  %915 = xor i8 %914, 1
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %915, i8* %916, align 1, !tbaa !2446
  %917 = xor i64 %901, %900
  %918 = xor i64 %917, %904
  %919 = lshr i64 %918, 4
  %920 = trunc i64 %919 to i8
  %921 = and i8 %920, 1
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %921, i8* %922, align 1, !tbaa !2447
  %923 = icmp eq i64 %904, 0
  %924 = zext i1 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %924, i8* %925, align 1, !tbaa !2448
  %926 = lshr i64 %904, 63
  %927 = trunc i64 %926 to i8
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %927, i8* %928, align 1, !tbaa !2449
  %929 = lshr i64 %900, 63
  %930 = lshr i64 %901, 63
  %931 = xor i64 %926, %929
  %932 = xor i64 %926, %930
  %933 = add nuw nsw i64 %931, %932
  %934 = icmp eq i64 %933, 2
  %935 = zext i1 %934 to i8
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %935, i8* %936, align 1, !tbaa !2450
  %937 = load i32, i32* %EAX
  %938 = zext i32 %937 to i64
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 2
  store i64 %940, i64* %PC
  %941 = and i64 %938, 4294967295
  store i64 %941, i64* %RDI, align 8, !tbaa !2428
  %942 = load i64, i64* %RCX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  store i64 %942, i64* %RSI, align 8, !tbaa !2428
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 4517
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 5
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 5
  store i64 %950, i64* %PC
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %952 = load i64, i64* %951, align 8, !tbaa !2428
  %953 = add i64 %952, -8
  %954 = inttoptr i64 %953 to i64*
  store i64 %948, i64* %954
  store i64 %953, i64* %951, align 8, !tbaa !2428
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %946, i64* %955, align 8, !tbaa !2428
  %956 = load i64, i64* %PC
  %957 = call %struct.Memory* @sub_402b40_idamax(%struct.State* %0, i64 %956, %struct.Memory* %MEMORY.1)
  %958 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %959 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %960 = bitcast %union.vec128_t* %XMM0 to i8*
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 3
  store i64 %962, i64* %PC
  %963 = bitcast i8* %959 to i64*
  %964 = load i64, i64* %963, align 1
  %965 = getelementptr inbounds i8, i8* %959, i64 8
  %966 = bitcast i8* %965 to i64*
  %967 = load i64, i64* %966, align 1
  %968 = bitcast i8* %960 to i64*
  %969 = load i64, i64* %968, align 1
  %970 = getelementptr inbounds i8, i8* %960, i64 8
  %971 = bitcast i8* %970 to i64*
  %972 = load i64, i64* %971, align 1
  %973 = xor i64 %969, %964
  %974 = xor i64 %972, %967
  %975 = trunc i64 %973 to i32
  %976 = lshr i64 %973, 32
  %977 = trunc i64 %976 to i32
  %978 = bitcast i8* %958 to i32*
  store i32 %975, i32* %978, align 1, !tbaa !2456
  %979 = getelementptr inbounds i8, i8* %958, i64 4
  %980 = bitcast i8* %979 to i32*
  store i32 %977, i32* %980, align 1, !tbaa !2456
  %981 = trunc i64 %974 to i32
  %982 = getelementptr inbounds i8, i8* %958, i64 8
  %983 = bitcast i8* %982 to i32*
  store i32 %981, i32* %983, align 1, !tbaa !2456
  %984 = lshr i64 %974, 32
  %985 = trunc i64 %984 to i32
  %986 = getelementptr inbounds i8, i8* %958, i64 12
  %987 = bitcast i8* %986 to i32*
  store i32 %985, i32* %987, align 1, !tbaa !2456
  %988 = load i64, i64* %RAX
  %989 = load i64, i64* %RBP
  %990 = sub i64 %989, 44
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 3
  store i64 %992, i64* %PC
  %993 = trunc i64 %988 to i32
  %994 = inttoptr i64 %990 to i32*
  %995 = load i32, i32* %994
  %996 = add i32 %995, %993
  %997 = zext i32 %996 to i64
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = icmp ult i32 %996, %993
  %999 = icmp ult i32 %996, %995
  %1000 = or i1 %998, %999
  %1001 = zext i1 %1000 to i8
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1001, i8* %1002, align 1, !tbaa !2432
  %1003 = and i32 %996, 255
  %1004 = call i32 @llvm.ctpop.i32(i32 %1003) #16
  %1005 = trunc i32 %1004 to i8
  %1006 = and i8 %1005, 1
  %1007 = xor i8 %1006, 1
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1007, i8* %1008, align 1, !tbaa !2446
  %1009 = xor i32 %995, %993
  %1010 = xor i32 %1009, %996
  %1011 = lshr i32 %1010, 4
  %1012 = trunc i32 %1011 to i8
  %1013 = and i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1013, i8* %1014, align 1, !tbaa !2447
  %1015 = icmp eq i32 %996, 0
  %1016 = zext i1 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1016, i8* %1017, align 1, !tbaa !2448
  %1018 = lshr i32 %996, 31
  %1019 = trunc i32 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1019, i8* %1020, align 1, !tbaa !2449
  %1021 = lshr i32 %993, 31
  %1022 = lshr i32 %995, 31
  %1023 = xor i32 %1018, %1021
  %1024 = xor i32 %1018, %1022
  %1025 = add nuw nsw i32 %1023, %1024
  %1026 = icmp eq i32 %1025, 2
  %1027 = zext i1 %1026 to i8
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1027, i8* %1028, align 1, !tbaa !2450
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 52
  %1031 = load i32, i32* %EAX
  %1032 = zext i32 %1031 to i64
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 3
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1030 to i32*
  store i32 %1031, i32* %1035
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 52
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 3
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i32*
  %1041 = load i32, i32* %1040
  %1042 = zext i32 %1041 to i64
  store i64 %1042, i64* %RAX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RBP
  %1044 = sub i64 %1043, 24
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 4
  store i64 %1046, i64* %PC
  %1047 = inttoptr i64 %1044 to i64*
  %1048 = load i64, i64* %1047
  store i64 %1048, i64* %RCX, align 8, !tbaa !2428
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 44
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 4
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i32*
  %1054 = load i32, i32* %1053
  %1055 = sext i32 %1054 to i64
  store i64 %1055, i64* %RSI, align 8, !tbaa !2428
  %1056 = load i64, i64* %RCX
  %1057 = load i64, i64* %RSI
  %1058 = mul i64 %1057, 4
  %1059 = add i64 %1058, %1056
  %1060 = load i32, i32* %EAX
  %1061 = zext i32 %1060 to i64
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1059 to i32*
  store i32 %1060, i32* %1064
  %1065 = load i64, i64* %RBP
  %1066 = sub i64 %1065, 8
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 4
  store i64 %1068, i64* %PC
  %1069 = inttoptr i64 %1066 to i64*
  %1070 = load i64, i64* %1069
  store i64 %1070, i64* %RCX, align 8, !tbaa !2428
  %1071 = load i64, i64* %RBP
  %1072 = sub i64 %1071, 12
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 3
  store i64 %1074, i64* %PC
  %1075 = inttoptr i64 %1072 to i32*
  %1076 = load i32, i32* %1075
  %1077 = zext i32 %1076 to i64
  store i64 %1077, i64* %RAX, align 8, !tbaa !2428
  %1078 = load i64, i64* %RAX
  %1079 = load i64, i64* %RBP
  %1080 = sub i64 %1079, 44
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 4
  store i64 %1082, i64* %PC
  %1083 = inttoptr i64 %1080 to i32*
  %1084 = load i32, i32* %1083
  %1085 = shl i64 %1078, 32
  %1086 = ashr exact i64 %1085, 32
  %1087 = sext i32 %1084 to i64
  %1088 = mul nsw i64 %1087, %1086
  %1089 = trunc i64 %1088 to i32
  %1090 = and i64 %1088, 4294967295
  store i64 %1090, i64* %RAX, align 8, !tbaa !2428
  %1091 = shl i64 %1088, 32
  %1092 = ashr exact i64 %1091, 32
  %1093 = icmp ne i64 %1092, %1088
  %1094 = zext i1 %1093 to i8
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1094, i8* %1095, align 1, !tbaa !2432
  %1096 = and i32 %1089, 255
  %1097 = call i32 @llvm.ctpop.i32(i32 %1096) #16
  %1098 = trunc i32 %1097 to i8
  %1099 = and i8 %1098, 1
  %1100 = xor i8 %1099, 1
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1100, i8* %1101, align 1, !tbaa !2446
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1102, align 1, !tbaa !2447
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1103, align 1, !tbaa !2448
  %1104 = lshr i32 %1089, 31
  %1105 = trunc i32 %1104 to i8
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1105, i8* %1106, align 1, !tbaa !2449
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1094, i8* %1107, align 1, !tbaa !2450
  %1108 = load i64, i64* %RAX
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 52
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 3
  store i64 %1112, i64* %PC
  %1113 = trunc i64 %1108 to i32
  %1114 = inttoptr i64 %1110 to i32*
  %1115 = load i32, i32* %1114
  %1116 = add i32 %1115, %1113
  %1117 = zext i32 %1116 to i64
  store i64 %1117, i64* %RAX, align 8, !tbaa !2428
  %1118 = icmp ult i32 %1116, %1113
  %1119 = icmp ult i32 %1116, %1115
  %1120 = or i1 %1118, %1119
  %1121 = zext i1 %1120 to i8
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1121, i8* %1122, align 1, !tbaa !2432
  %1123 = and i32 %1116, 255
  %1124 = call i32 @llvm.ctpop.i32(i32 %1123) #16
  %1125 = trunc i32 %1124 to i8
  %1126 = and i8 %1125, 1
  %1127 = xor i8 %1126, 1
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1127, i8* %1128, align 1, !tbaa !2446
  %1129 = xor i32 %1115, %1113
  %1130 = xor i32 %1129, %1116
  %1131 = lshr i32 %1130, 4
  %1132 = trunc i32 %1131 to i8
  %1133 = and i8 %1132, 1
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1133, i8* %1134, align 1, !tbaa !2447
  %1135 = icmp eq i32 %1116, 0
  %1136 = zext i1 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1136, i8* %1137, align 1, !tbaa !2448
  %1138 = lshr i32 %1116, 31
  %1139 = trunc i32 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1139, i8* %1140, align 1, !tbaa !2449
  %1141 = lshr i32 %1113, 31
  %1142 = lshr i32 %1115, 31
  %1143 = xor i32 %1138, %1141
  %1144 = xor i32 %1138, %1142
  %1145 = add nuw nsw i32 %1143, %1144
  %1146 = icmp eq i32 %1145, 2
  %1147 = zext i1 %1146 to i8
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1147, i8* %1148, align 1, !tbaa !2450
  %1149 = load i32, i32* %EAX
  %1150 = zext i32 %1149 to i64
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 3
  store i64 %1152, i64* %PC
  %1153 = shl i64 %1150, 32
  %1154 = ashr exact i64 %1153, 32
  store i64 %1154, i64* %RSI, align 8, !tbaa !2428
  %1155 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1156 = load i64, i64* %RCX
  %1157 = load i64, i64* %RSI
  %1158 = mul i64 %1157, 4
  %1159 = add i64 %1158, %1156
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 5
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to float*
  %1163 = load float, float* %1162
  %1164 = fpext float %1163 to double
  %1165 = bitcast i8* %1155 to double*
  store double %1164, double* %1165, align 1, !tbaa !2454
  %1166 = bitcast %union.vec128_t* %XMM1 to i8*
  %1167 = bitcast %union.vec128_t* %XMM0 to i8*
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 4
  store i64 %1169, i64* %PC
  %1170 = bitcast i8* %1166 to double*
  %1171 = load double, double* %1170, align 1
  %1172 = bitcast i8* %1167 to double*
  %1173 = load double, double* %1172, align 1
  %1174 = fcmp uno double %1171, %1173
  br i1 %1174, label %1175, label %1187

; <label>:1175:                                   ; preds = %block_40196a
  %1176 = fadd double %1171, %1173
  %1177 = bitcast double %1176 to i64
  %1178 = and i64 %1177, 9221120237041090560
  %1179 = icmp eq i64 %1178, 9218868437227405312
  %1180 = and i64 %1177, 2251799813685247
  %1181 = icmp ne i64 %1180, 0
  %1182 = and i1 %1179, %1181
  br i1 %1182, label %1183, label %1193

; <label>:1183:                                   ; preds = %1175
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1185 = load i64, i64* %1184, align 8, !tbaa !2428
  %1186 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1185, %struct.Memory* %957) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:1187:                                   ; preds = %block_40196a
  %1188 = fcmp ogt double %1171, %1173
  br i1 %1188, label %1193, label %1189

; <label>:1189:                                   ; preds = %1187
  %1190 = fcmp olt double %1171, %1173
  br i1 %1190, label %1193, label %1191

; <label>:1191:                                   ; preds = %1189
  %1192 = fcmp oeq double %1171, %1173
  br i1 %1192, label %1193, label %1200

; <label>:1193:                                   ; preds = %1191, %1189, %1187, %1175
  %1194 = phi i8 [ 0, %1187 ], [ 0, %1189 ], [ 1, %1191 ], [ 1, %1175 ]
  %1195 = phi i8 [ 0, %1187 ], [ 0, %1189 ], [ 0, %1191 ], [ 1, %1175 ]
  %1196 = phi i8 [ 0, %1187 ], [ 1, %1189 ], [ 0, %1191 ], [ 1, %1175 ]
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1194, i8* %1197, align 1, !tbaa !2451
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1195, i8* %1198, align 1, !tbaa !2451
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1196, i8* %1199, align 1, !tbaa !2451
  br label %1200

; <label>:1200:                                   ; preds = %1193, %1191
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1201, align 1, !tbaa !2451
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1202, align 1, !tbaa !2451
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1203, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %1183, %1200
  %1204 = phi %struct.Memory* [ %1186, %1183 ], [ %957, %1200 ]
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 17
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 6
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 6
  store i64 %1210, i64* %PC
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1212 = load i8, i8* %1211, align 1, !tbaa !2448
  %1213 = icmp eq i8 %1212, 0
  %1214 = zext i1 %1213 to i8
  store i8 %1214, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1216 = select i1 %1213, i64 %1206, i64 %1208
  store i64 %1216, i64* %1215, align 8, !tbaa !2428
  %1217 = load i8, i8* %BRANCH_TAKEN
  %1218 = icmp eq i8 %1217, 1
  br i1 %1218, label %block_4019e2, label %block_4019d7

block_4019dd:                                     ; preds = %block_4019d7
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 458
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1220, i64* %1223, align 8, !tbaa !2428
  %1224 = load i64, i64* %RBP
  %1225 = sub i64 %1224, 44
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 3
  store i64 %1227, i64* %PC
  %1228 = inttoptr i64 %1225 to i32*
  %1229 = load i32, i32* %1228
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RAX, align 8, !tbaa !2428
  %1231 = load i64, i64* %RBP
  %1232 = sub i64 %1231, 32
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 4
  store i64 %1234, i64* %PC
  %1235 = inttoptr i64 %1232 to i64*
  %1236 = load i64, i64* %1235
  store i64 %1236, i64* %RCX, align 8, !tbaa !2428
  %1237 = load i64, i64* %RCX
  %1238 = load i32, i32* %EAX
  %1239 = zext i32 %1238 to i64
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 2
  store i64 %1241, i64* %PC
  %1242 = inttoptr i64 %1237 to i32*
  store i32 %1238, i32* %1242
  br label %block_401bb0

block_401a50:                                     ; preds = %block_4019ee, %block_4019e2
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_4019e2 ], [ %MEMORY.0, %block_4019ee ]
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 5
  store i64 %1244, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %1245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 8
  store i64 %1247, i64* %PC
  %1248 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 72) to double*)
  %1249 = bitcast i8* %1245 to double*
  store double %1248, double* %1249, align 1, !tbaa !2454
  %1250 = getelementptr inbounds i8, i8* %1245, i64 8
  %1251 = bitcast i8* %1250 to double*
  store double 0.000000e+00, double* %1251, align 1, !tbaa !2454
  %1252 = load i64, i64* %RBP
  %1253 = sub i64 %1252, 8
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 4
  store i64 %1255, i64* %PC
  %1256 = inttoptr i64 %1253 to i64*
  %1257 = load i64, i64* %1256
  store i64 %1257, i64* %RAX, align 8, !tbaa !2428
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 12
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 3
  store i64 %1261, i64* %PC
  %1262 = inttoptr i64 %1259 to i32*
  %1263 = load i32, i32* %1262
  %1264 = zext i32 %1263 to i64
  store i64 %1264, i64* %RCX, align 8, !tbaa !2428
  %1265 = load i64, i64* %RCX
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 44
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 4
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i32*
  %1271 = load i32, i32* %1270
  %1272 = shl i64 %1265, 32
  %1273 = ashr exact i64 %1272, 32
  %1274 = sext i32 %1271 to i64
  %1275 = mul nsw i64 %1274, %1273
  %1276 = trunc i64 %1275 to i32
  %1277 = and i64 %1275, 4294967295
  store i64 %1277, i64* %RCX, align 8, !tbaa !2428
  %1278 = shl i64 %1275, 32
  %1279 = ashr exact i64 %1278, 32
  %1280 = icmp ne i64 %1279, %1275
  %1281 = zext i1 %1280 to i8
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1281, i8* %1282, align 1, !tbaa !2432
  %1283 = and i32 %1276, 255
  %1284 = call i32 @llvm.ctpop.i32(i32 %1283) #16
  %1285 = trunc i32 %1284 to i8
  %1286 = and i8 %1285, 1
  %1287 = xor i8 %1286, 1
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1287, i8* %1288, align 1, !tbaa !2446
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1289, align 1, !tbaa !2447
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1290, align 1, !tbaa !2448
  %1291 = lshr i32 %1276, 31
  %1292 = trunc i32 %1291 to i8
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1292, i8* %1293, align 1, !tbaa !2449
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1281, i8* %1294, align 1, !tbaa !2450
  %1295 = load i64, i64* %RCX
  %1296 = load i64, i64* %RBP
  %1297 = sub i64 %1296, 44
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 3
  store i64 %1299, i64* %PC
  %1300 = trunc i64 %1295 to i32
  %1301 = inttoptr i64 %1297 to i32*
  %1302 = load i32, i32* %1301
  %1303 = add i32 %1302, %1300
  %1304 = zext i32 %1303 to i64
  store i64 %1304, i64* %RCX, align 8, !tbaa !2428
  %1305 = icmp ult i32 %1303, %1300
  %1306 = icmp ult i32 %1303, %1302
  %1307 = or i1 %1305, %1306
  %1308 = zext i1 %1307 to i8
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1308, i8* %1309, align 1, !tbaa !2432
  %1310 = and i32 %1303, 255
  %1311 = call i32 @llvm.ctpop.i32(i32 %1310) #16
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = xor i8 %1313, 1
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1314, i8* %1315, align 1, !tbaa !2446
  %1316 = xor i32 %1302, %1300
  %1317 = xor i32 %1316, %1303
  %1318 = lshr i32 %1317, 4
  %1319 = trunc i32 %1318 to i8
  %1320 = and i8 %1319, 1
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1320, i8* %1321, align 1, !tbaa !2447
  %1322 = icmp eq i32 %1303, 0
  %1323 = zext i1 %1322 to i8
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1323, i8* %1324, align 1, !tbaa !2448
  %1325 = lshr i32 %1303, 31
  %1326 = trunc i32 %1325 to i8
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1326, i8* %1327, align 1, !tbaa !2449
  %1328 = lshr i32 %1300, 31
  %1329 = lshr i32 %1302, 31
  %1330 = xor i32 %1325, %1328
  %1331 = xor i32 %1325, %1329
  %1332 = add nuw nsw i32 %1330, %1331
  %1333 = icmp eq i32 %1332, 2
  %1334 = zext i1 %1333 to i8
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1334, i8* %1335, align 1, !tbaa !2450
  %1336 = load i32, i32* %ECX
  %1337 = zext i32 %1336 to i64
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 3
  store i64 %1339, i64* %PC
  %1340 = shl i64 %1337, 32
  %1341 = ashr exact i64 %1340, 32
  store i64 %1341, i64* %RSI, align 8, !tbaa !2428
  %1342 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %RSI
  %1345 = mul i64 %1344, 4
  %1346 = add i64 %1345, %1343
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 5
  store i64 %1348, i64* %PC
  %1349 = inttoptr i64 %1346 to float*
  %1350 = load float, float* %1349
  %1351 = fpext float %1350 to double
  %1352 = bitcast i8* %1342 to double*
  store double %1351, double* %1352, align 1, !tbaa !2454
  %1353 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1354 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1355 = bitcast %union.vec128_t* %XMM1 to i8*
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 4
  store i64 %1357, i64* %PC
  %1358 = bitcast i8* %1354 to double*
  %1359 = load double, double* %1358, align 1
  %1360 = getelementptr inbounds i8, i8* %1354, i64 8
  %1361 = bitcast i8* %1360 to i64*
  %1362 = load i64, i64* %1361, align 1
  %1363 = bitcast i8* %1355 to double*
  %1364 = load double, double* %1363, align 1
  %1365 = fdiv double %1359, %1364
  %1366 = bitcast i8* %1353 to double*
  store double %1365, double* %1366, align 1, !tbaa !2454
  %1367 = getelementptr inbounds i8, i8* %1353, i64 8
  %1368 = bitcast i8* %1367 to i64*
  store i64 %1362, i64* %1368, align 1, !tbaa !2454
  %1369 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1370 = bitcast %union.vec128_t* %XMM0 to i8*
  %1371 = load i64, i64* %PC
  %1372 = add i64 %1371, 4
  store i64 %1372, i64* %PC
  %1373 = bitcast i8* %1369 to <2 x i32>*
  %1374 = load <2 x i32>, <2 x i32>* %1373, align 1
  %1375 = getelementptr inbounds i8, i8* %1369, i64 8
  %1376 = bitcast i8* %1375 to <2 x i32>*
  %1377 = load <2 x i32>, <2 x i32>* %1376, align 1
  %1378 = bitcast i8* %1370 to double*
  %1379 = load double, double* %1378, align 1
  %1380 = fptrunc double %1379 to float
  %1381 = bitcast i8* %1369 to float*
  store float %1380, float* %1381, align 1, !tbaa !2452
  %1382 = extractelement <2 x i32> %1374, i32 1
  %1383 = getelementptr inbounds i8, i8* %1369, i64 4
  %1384 = bitcast i8* %1383 to i32*
  store i32 %1382, i32* %1384, align 1, !tbaa !2452
  %1385 = extractelement <2 x i32> %1377, i32 0
  %1386 = bitcast i8* %1375 to i32*
  store i32 %1385, i32* %1386, align 1, !tbaa !2452
  %1387 = extractelement <2 x i32> %1377, i32 1
  %1388 = getelementptr inbounds i8, i8* %1369, i64 12
  %1389 = bitcast i8* %1388 to i32*
  store i32 %1387, i32* %1389, align 1, !tbaa !2452
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 36
  %1392 = bitcast %union.vec128_t* %XMM0 to i8*
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 5
  store i64 %1394, i64* %PC
  %1395 = bitcast i8* %1392 to <2 x float>*
  %1396 = load <2 x float>, <2 x float>* %1395, align 1
  %1397 = extractelement <2 x float> %1396, i32 0
  %1398 = inttoptr i64 %1391 to float*
  store float %1397, float* %1398
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 16
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 3
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1400 to i32*
  %1404 = load i32, i32* %1403
  %1405 = zext i32 %1404 to i64
  store i64 %1405, i64* %RCX, align 8, !tbaa !2428
  %1406 = load i64, i64* %RBP
  %1407 = sub i64 %1406, 44
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 3
  store i64 %1409, i64* %PC
  %1410 = inttoptr i64 %1407 to i32*
  %1411 = load i32, i32* %1410
  %1412 = zext i32 %1411 to i64
  store i64 %1412, i64* %RDI, align 8, !tbaa !2428
  %1413 = load i64, i64* %RDI
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 3
  store i64 %1415, i64* %PC
  %1416 = trunc i64 %1413 to i32
  %1417 = add i32 1, %1416
  %1418 = zext i32 %1417 to i64
  store i64 %1418, i64* %RDI, align 8, !tbaa !2428
  %1419 = icmp ult i32 %1417, %1416
  %1420 = icmp ult i32 %1417, 1
  %1421 = or i1 %1419, %1420
  %1422 = zext i1 %1421 to i8
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1422, i8* %1423, align 1, !tbaa !2432
  %1424 = and i32 %1417, 255
  %1425 = call i32 @llvm.ctpop.i32(i32 %1424) #16
  %1426 = trunc i32 %1425 to i8
  %1427 = and i8 %1426, 1
  %1428 = xor i8 %1427, 1
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1428, i8* %1429, align 1, !tbaa !2446
  %1430 = xor i64 1, %1413
  %1431 = trunc i64 %1430 to i32
  %1432 = xor i32 %1431, %1417
  %1433 = lshr i32 %1432, 4
  %1434 = trunc i32 %1433 to i8
  %1435 = and i8 %1434, 1
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1435, i8* %1436, align 1, !tbaa !2447
  %1437 = icmp eq i32 %1417, 0
  %1438 = zext i1 %1437 to i8
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1438, i8* %1439, align 1, !tbaa !2448
  %1440 = lshr i32 %1417, 31
  %1441 = trunc i32 %1440 to i8
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1441, i8* %1442, align 1, !tbaa !2449
  %1443 = lshr i32 %1416, 31
  %1444 = xor i32 %1440, %1443
  %1445 = add nuw nsw i32 %1444, %1440
  %1446 = icmp eq i32 %1445, 2
  %1447 = zext i1 %1446 to i8
  %1448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1447, i8* %1448, align 1, !tbaa !2450
  %1449 = load i64, i64* %RCX
  %1450 = load i32, i32* %EDI
  %1451 = zext i32 %1450 to i64
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 2
  store i64 %1453, i64* %PC
  %1454 = trunc i64 %1449 to i32
  %1455 = sub i32 %1454, %1450
  %1456 = zext i32 %1455 to i64
  store i64 %1456, i64* %RCX, align 8, !tbaa !2428
  %1457 = icmp ult i32 %1454, %1450
  %1458 = zext i1 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1458, i8* %1459, align 1, !tbaa !2432
  %1460 = and i32 %1455, 255
  %1461 = call i32 @llvm.ctpop.i32(i32 %1460) #16
  %1462 = trunc i32 %1461 to i8
  %1463 = and i8 %1462, 1
  %1464 = xor i8 %1463, 1
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1464, i8* %1465, align 1, !tbaa !2446
  %1466 = xor i64 %1451, %1449
  %1467 = trunc i64 %1466 to i32
  %1468 = xor i32 %1467, %1455
  %1469 = lshr i32 %1468, 4
  %1470 = trunc i32 %1469 to i8
  %1471 = and i8 %1470, 1
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1471, i8* %1472, align 1, !tbaa !2447
  %1473 = icmp eq i32 %1455, 0
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1474, i8* %1475, align 1, !tbaa !2448
  %1476 = lshr i32 %1455, 31
  %1477 = trunc i32 %1476 to i8
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1477, i8* %1478, align 1, !tbaa !2449
  %1479 = lshr i32 %1454, 31
  %1480 = lshr i32 %1450, 31
  %1481 = xor i32 %1480, %1479
  %1482 = xor i32 %1476, %1479
  %1483 = add nuw nsw i32 %1482, %1481
  %1484 = icmp eq i32 %1483, 2
  %1485 = zext i1 %1484 to i8
  %1486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1485, i8* %1486, align 1, !tbaa !2450
  %1487 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1488 = load i64, i64* %RBP
  %1489 = sub i64 %1488, 36
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 5
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to float*
  %1493 = load float, float* %1492
  %1494 = bitcast i8* %1487 to float*
  store float %1493, float* %1494, align 1, !tbaa !2452
  %1495 = getelementptr inbounds i8, i8* %1487, i64 4
  %1496 = bitcast i8* %1495 to float*
  store float 0.000000e+00, float* %1496, align 1, !tbaa !2452
  %1497 = getelementptr inbounds i8, i8* %1487, i64 8
  %1498 = bitcast i8* %1497 to float*
  store float 0.000000e+00, float* %1498, align 1, !tbaa !2452
  %1499 = getelementptr inbounds i8, i8* %1487, i64 12
  %1500 = bitcast i8* %1499 to float*
  store float 0.000000e+00, float* %1500, align 1, !tbaa !2452
  %1501 = load i64, i64* %RBP
  %1502 = sub i64 %1501, 8
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 4
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1502 to i64*
  %1506 = load i64, i64* %1505
  store i64 %1506, i64* %RAX, align 8, !tbaa !2428
  %1507 = load i64, i64* %RBP
  %1508 = sub i64 %1507, 12
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 3
  store i64 %1510, i64* %PC
  %1511 = inttoptr i64 %1508 to i32*
  %1512 = load i32, i32* %1511
  %1513 = zext i32 %1512 to i64
  store i64 %1513, i64* %RDI, align 8, !tbaa !2428
  %1514 = load i64, i64* %RDI
  %1515 = load i64, i64* %RBP
  %1516 = sub i64 %1515, 44
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 4
  store i64 %1518, i64* %PC
  %1519 = inttoptr i64 %1516 to i32*
  %1520 = load i32, i32* %1519
  %1521 = shl i64 %1514, 32
  %1522 = ashr exact i64 %1521, 32
  %1523 = sext i32 %1520 to i64
  %1524 = mul nsw i64 %1523, %1522
  %1525 = trunc i64 %1524 to i32
  %1526 = and i64 %1524, 4294967295
  store i64 %1526, i64* %RDI, align 8, !tbaa !2428
  %1527 = shl i64 %1524, 32
  %1528 = ashr exact i64 %1527, 32
  %1529 = icmp ne i64 %1528, %1524
  %1530 = zext i1 %1529 to i8
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1530, i8* %1531, align 1, !tbaa !2432
  %1532 = and i32 %1525, 255
  %1533 = call i32 @llvm.ctpop.i32(i32 %1532) #16
  %1534 = trunc i32 %1533 to i8
  %1535 = and i8 %1534, 1
  %1536 = xor i8 %1535, 1
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1536, i8* %1537, align 1, !tbaa !2446
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1538, align 1, !tbaa !2447
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1539, align 1, !tbaa !2448
  %1540 = lshr i32 %1525, 31
  %1541 = trunc i32 %1540 to i8
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1541, i8* %1542, align 1, !tbaa !2449
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1530, i8* %1543, align 1, !tbaa !2450
  %1544 = load i64, i64* %RDI
  %1545 = load i64, i64* %RBP
  %1546 = sub i64 %1545, 44
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 3
  store i64 %1548, i64* %PC
  %1549 = trunc i64 %1544 to i32
  %1550 = inttoptr i64 %1546 to i32*
  %1551 = load i32, i32* %1550
  %1552 = add i32 %1551, %1549
  %1553 = zext i32 %1552 to i64
  store i64 %1553, i64* %RDI, align 8, !tbaa !2428
  %1554 = icmp ult i32 %1552, %1549
  %1555 = icmp ult i32 %1552, %1551
  %1556 = or i1 %1554, %1555
  %1557 = zext i1 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1557, i8* %1558, align 1, !tbaa !2432
  %1559 = and i32 %1552, 255
  %1560 = call i32 @llvm.ctpop.i32(i32 %1559) #16
  %1561 = trunc i32 %1560 to i8
  %1562 = and i8 %1561, 1
  %1563 = xor i8 %1562, 1
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1563, i8* %1564, align 1, !tbaa !2446
  %1565 = xor i32 %1551, %1549
  %1566 = xor i32 %1565, %1552
  %1567 = lshr i32 %1566, 4
  %1568 = trunc i32 %1567 to i8
  %1569 = and i8 %1568, 1
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1569, i8* %1570, align 1, !tbaa !2447
  %1571 = icmp eq i32 %1552, 0
  %1572 = zext i1 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1572, i8* %1573, align 1, !tbaa !2448
  %1574 = lshr i32 %1552, 31
  %1575 = trunc i32 %1574 to i8
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1575, i8* %1576, align 1, !tbaa !2449
  %1577 = lshr i32 %1549, 31
  %1578 = lshr i32 %1551, 31
  %1579 = xor i32 %1574, %1577
  %1580 = xor i32 %1574, %1578
  %1581 = add nuw nsw i32 %1579, %1580
  %1582 = icmp eq i32 %1581, 2
  %1583 = zext i1 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1583, i8* %1584, align 1, !tbaa !2450
  %1585 = load i64, i64* %RDI
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 3
  store i64 %1587, i64* %PC
  %1588 = trunc i64 %1585 to i32
  %1589 = add i32 1, %1588
  %1590 = zext i32 %1589 to i64
  store i64 %1590, i64* %RDI, align 8, !tbaa !2428
  %1591 = icmp ult i32 %1589, %1588
  %1592 = icmp ult i32 %1589, 1
  %1593 = or i1 %1591, %1592
  %1594 = zext i1 %1593 to i8
  %1595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1594, i8* %1595, align 1, !tbaa !2432
  %1596 = and i32 %1589, 255
  %1597 = call i32 @llvm.ctpop.i32(i32 %1596) #16
  %1598 = trunc i32 %1597 to i8
  %1599 = and i8 %1598, 1
  %1600 = xor i8 %1599, 1
  %1601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1600, i8* %1601, align 1, !tbaa !2446
  %1602 = xor i64 1, %1585
  %1603 = trunc i64 %1602 to i32
  %1604 = xor i32 %1603, %1589
  %1605 = lshr i32 %1604, 4
  %1606 = trunc i32 %1605 to i8
  %1607 = and i8 %1606, 1
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1607, i8* %1608, align 1, !tbaa !2447
  %1609 = icmp eq i32 %1589, 0
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1610, i8* %1611, align 1, !tbaa !2448
  %1612 = lshr i32 %1589, 31
  %1613 = trunc i32 %1612 to i8
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1613, i8* %1614, align 1, !tbaa !2449
  %1615 = lshr i32 %1588, 31
  %1616 = xor i32 %1612, %1615
  %1617 = add nuw nsw i32 %1616, %1612
  %1618 = icmp eq i32 %1617, 2
  %1619 = zext i1 %1618 to i8
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1619, i8* %1620, align 1, !tbaa !2450
  %1621 = load i32, i32* %EDI
  %1622 = zext i32 %1621 to i64
  %1623 = load i64, i64* %PC
  %1624 = add i64 %1623, 3
  store i64 %1624, i64* %PC
  %1625 = shl i64 %1622, 32
  %1626 = ashr exact i64 %1625, 32
  store i64 %1626, i64* %RSI, align 8, !tbaa !2428
  %1627 = load i64, i64* %RSI
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 4
  store i64 %1629, i64* %PC
  %1630 = shl i64 %1627, 1
  %1631 = icmp slt i64 %1630, 0
  %1632 = shl i64 %1630, 1
  store i64 %1632, i64* %RSI, align 8, !tbaa !2428
  %1633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1634 = zext i1 %1631 to i8
  store i8 %1634, i8* %1633, align 1, !tbaa !2451
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1636 = trunc i64 %1632 to i32
  %1637 = and i32 %1636, 254
  %1638 = call i32 @llvm.ctpop.i32(i32 %1637) #16
  %1639 = trunc i32 %1638 to i8
  %1640 = and i8 %1639, 1
  %1641 = xor i8 %1640, 1
  store i8 %1641, i8* %1635, align 1, !tbaa !2451
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1642, align 1, !tbaa !2451
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1644 = icmp eq i64 %1632, 0
  %1645 = zext i1 %1644 to i8
  store i8 %1645, i8* %1643, align 1, !tbaa !2451
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1647 = lshr i64 %1632, 63
  %1648 = trunc i64 %1647 to i8
  store i8 %1648, i8* %1646, align 1, !tbaa !2451
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1649, align 1, !tbaa !2451
  %1650 = load i64, i64* %RAX
  %1651 = load i64, i64* %RSI
  %1652 = load i64, i64* %PC
  %1653 = add i64 %1652, 3
  store i64 %1653, i64* %PC
  %1654 = add i64 %1651, %1650
  store i64 %1654, i64* %RAX, align 8, !tbaa !2428
  %1655 = icmp ult i64 %1654, %1650
  %1656 = icmp ult i64 %1654, %1651
  %1657 = or i1 %1655, %1656
  %1658 = zext i1 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1658, i8* %1659, align 1, !tbaa !2432
  %1660 = trunc i64 %1654 to i32
  %1661 = and i32 %1660, 255
  %1662 = call i32 @llvm.ctpop.i32(i32 %1661) #16
  %1663 = trunc i32 %1662 to i8
  %1664 = and i8 %1663, 1
  %1665 = xor i8 %1664, 1
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1665, i8* %1666, align 1, !tbaa !2446
  %1667 = xor i64 %1651, %1650
  %1668 = xor i64 %1667, %1654
  %1669 = lshr i64 %1668, 4
  %1670 = trunc i64 %1669 to i8
  %1671 = and i8 %1670, 1
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1671, i8* %1672, align 1, !tbaa !2447
  %1673 = icmp eq i64 %1654, 0
  %1674 = zext i1 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1674, i8* %1675, align 1, !tbaa !2448
  %1676 = lshr i64 %1654, 63
  %1677 = trunc i64 %1676 to i8
  %1678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1677, i8* %1678, align 1, !tbaa !2449
  %1679 = lshr i64 %1650, 63
  %1680 = lshr i64 %1651, 63
  %1681 = xor i64 %1676, %1679
  %1682 = xor i64 %1676, %1680
  %1683 = add nuw nsw i64 %1681, %1682
  %1684 = icmp eq i64 %1683, 2
  %1685 = zext i1 %1684 to i8
  %1686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1685, i8* %1686, align 1, !tbaa !2450
  %1687 = load i32, i32* %ECX
  %1688 = zext i32 %1687 to i64
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 2
  store i64 %1690, i64* %PC
  %1691 = and i64 %1688, 4294967295
  store i64 %1691, i64* %RDI, align 8, !tbaa !2428
  %1692 = load i64, i64* %RAX
  %1693 = load i64, i64* %PC
  %1694 = add i64 %1693, 3
  store i64 %1694, i64* %PC
  store i64 %1692, i64* %RSI, align 8, !tbaa !2428
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 4656
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 5
  %1699 = load i64, i64* %PC
  %1700 = add i64 %1699, 5
  store i64 %1700, i64* %PC
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1702 = load i64, i64* %1701, align 8, !tbaa !2428
  %1703 = add i64 %1702, -8
  %1704 = inttoptr i64 %1703 to i64*
  store i64 %1698, i64* %1704
  store i64 %1703, i64* %1701, align 8, !tbaa !2428
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1696, i64* %1705, align 8, !tbaa !2428
  %1706 = load i64, i64* %PC
  %1707 = call %struct.Memory* @sub_402ce0_dscal(%struct.State* %0, i64 %1706, %struct.Memory* %MEMORY.2)
  %1708 = load i64, i64* %RBP
  %1709 = sub i64 %1708, 48
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 3
  store i64 %1711, i64* %PC
  %1712 = inttoptr i64 %1709 to i32*
  %1713 = load i32, i32* %1712
  %1714 = zext i32 %1713 to i64
  store i64 %1714, i64* %RCX, align 8, !tbaa !2428
  %1715 = load i64, i64* %RBP
  %1716 = sub i64 %1715, 40
  %1717 = load i32, i32* %ECX
  %1718 = zext i32 %1717 to i64
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 3
  store i64 %1720, i64* %PC
  %1721 = inttoptr i64 %1716 to i32*
  store i32 %1717, i32* %1721
  br label %block_401abb

block_401bc8:                                     ; preds = %block_401bc3, %block_401920
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_401920 ], [ %MEMORY.1, %block_401bc3 ]
  %1722 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1724 = bitcast %union.vec128_t* %XMM0 to i8*
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 3
  store i64 %1726, i64* %PC
  %1727 = bitcast i8* %1723 to i64*
  %1728 = load i64, i64* %1727, align 1
  %1729 = getelementptr inbounds i8, i8* %1723, i64 8
  %1730 = bitcast i8* %1729 to i64*
  %1731 = load i64, i64* %1730, align 1
  %1732 = bitcast i8* %1724 to i64*
  %1733 = load i64, i64* %1732, align 1
  %1734 = getelementptr inbounds i8, i8* %1724, i64 8
  %1735 = bitcast i8* %1734 to i64*
  %1736 = load i64, i64* %1735, align 1
  %1737 = xor i64 %1733, %1728
  %1738 = xor i64 %1736, %1731
  %1739 = trunc i64 %1737 to i32
  %1740 = lshr i64 %1737, 32
  %1741 = trunc i64 %1740 to i32
  %1742 = bitcast i8* %1722 to i32*
  store i32 %1739, i32* %1742, align 1, !tbaa !2456
  %1743 = getelementptr inbounds i8, i8* %1722, i64 4
  %1744 = bitcast i8* %1743 to i32*
  store i32 %1741, i32* %1744, align 1, !tbaa !2456
  %1745 = trunc i64 %1738 to i32
  %1746 = getelementptr inbounds i8, i8* %1722, i64 8
  %1747 = bitcast i8* %1746 to i32*
  store i32 %1745, i32* %1747, align 1, !tbaa !2456
  %1748 = lshr i64 %1738, 32
  %1749 = trunc i64 %1748 to i32
  %1750 = getelementptr inbounds i8, i8* %1722, i64 12
  %1751 = bitcast i8* %1750 to i32*
  store i32 %1749, i32* %1751, align 1, !tbaa !2456
  %1752 = load i64, i64* %RBP
  %1753 = sub i64 %1752, 16
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 3
  store i64 %1755, i64* %PC
  %1756 = inttoptr i64 %1753 to i32*
  %1757 = load i32, i32* %1756
  %1758 = zext i32 %1757 to i64
  store i64 %1758, i64* %RAX, align 8, !tbaa !2428
  %1759 = load i64, i64* %RAX
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 3
  store i64 %1761, i64* %PC
  %1762 = trunc i64 %1759 to i32
  %1763 = sub i32 %1762, 1
  %1764 = zext i32 %1763 to i64
  store i64 %1764, i64* %RAX, align 8, !tbaa !2428
  %1765 = icmp ult i32 %1762, 1
  %1766 = zext i1 %1765 to i8
  %1767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1766, i8* %1767, align 1, !tbaa !2432
  %1768 = and i32 %1763, 255
  %1769 = call i32 @llvm.ctpop.i32(i32 %1768) #16
  %1770 = trunc i32 %1769 to i8
  %1771 = and i8 %1770, 1
  %1772 = xor i8 %1771, 1
  %1773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1772, i8* %1773, align 1, !tbaa !2446
  %1774 = xor i64 1, %1759
  %1775 = trunc i64 %1774 to i32
  %1776 = xor i32 %1775, %1763
  %1777 = lshr i32 %1776, 4
  %1778 = trunc i32 %1777 to i8
  %1779 = and i8 %1778, 1
  %1780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1779, i8* %1780, align 1, !tbaa !2447
  %1781 = icmp eq i32 %1763, 0
  %1782 = zext i1 %1781 to i8
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1782, i8* %1783, align 1, !tbaa !2448
  %1784 = lshr i32 %1763, 31
  %1785 = trunc i32 %1784 to i8
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1785, i8* %1786, align 1, !tbaa !2449
  %1787 = lshr i32 %1762, 31
  %1788 = xor i32 %1784, %1787
  %1789 = add nuw nsw i32 %1788, %1787
  %1790 = icmp eq i32 %1789, 2
  %1791 = zext i1 %1790 to i8
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1791, i8* %1792, align 1, !tbaa !2450
  %1793 = load i64, i64* %RBP
  %1794 = sub i64 %1793, 24
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 4
  store i64 %1796, i64* %PC
  %1797 = inttoptr i64 %1794 to i64*
  %1798 = load i64, i64* %1797
  store i64 %1798, i64* %RCX, align 8, !tbaa !2428
  %1799 = load i64, i64* %RBP
  %1800 = sub i64 %1799, 16
  %1801 = load i64, i64* %PC
  %1802 = add i64 %1801, 3
  store i64 %1802, i64* %PC
  %1803 = inttoptr i64 %1800 to i32*
  %1804 = load i32, i32* %1803
  %1805 = zext i32 %1804 to i64
  store i64 %1805, i64* %RDX, align 8, !tbaa !2428
  %1806 = load i64, i64* %RDX
  %1807 = load i64, i64* %PC
  %1808 = add i64 %1807, 3
  store i64 %1808, i64* %PC
  %1809 = trunc i64 %1806 to i32
  %1810 = sub i32 %1809, 1
  %1811 = zext i32 %1810 to i64
  store i64 %1811, i64* %RDX, align 8, !tbaa !2428
  %1812 = icmp ult i32 %1809, 1
  %1813 = zext i1 %1812 to i8
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1813, i8* %1814, align 1, !tbaa !2432
  %1815 = and i32 %1810, 255
  %1816 = call i32 @llvm.ctpop.i32(i32 %1815) #16
  %1817 = trunc i32 %1816 to i8
  %1818 = and i8 %1817, 1
  %1819 = xor i8 %1818, 1
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1819, i8* %1820, align 1, !tbaa !2446
  %1821 = xor i64 1, %1806
  %1822 = trunc i64 %1821 to i32
  %1823 = xor i32 %1822, %1810
  %1824 = lshr i32 %1823, 4
  %1825 = trunc i32 %1824 to i8
  %1826 = and i8 %1825, 1
  %1827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1826, i8* %1827, align 1, !tbaa !2447
  %1828 = icmp eq i32 %1810, 0
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1829, i8* %1830, align 1, !tbaa !2448
  %1831 = lshr i32 %1810, 31
  %1832 = trunc i32 %1831 to i8
  %1833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1832, i8* %1833, align 1, !tbaa !2449
  %1834 = lshr i32 %1809, 31
  %1835 = xor i32 %1831, %1834
  %1836 = add nuw nsw i32 %1835, %1834
  %1837 = icmp eq i32 %1836, 2
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1838, i8* %1839, align 1, !tbaa !2450
  %1840 = load i32, i32* %EDX
  %1841 = zext i32 %1840 to i64
  %1842 = load i64, i64* %PC
  %1843 = add i64 %1842, 3
  store i64 %1843, i64* %PC
  %1844 = shl i64 %1841, 32
  %1845 = ashr exact i64 %1844, 32
  store i64 %1845, i64* %RSI, align 8, !tbaa !2428
  %1846 = load i64, i64* %RCX
  %1847 = load i64, i64* %RSI
  %1848 = mul i64 %1847, 4
  %1849 = add i64 %1848, %1846
  %1850 = load i32, i32* %EAX
  %1851 = zext i32 %1850 to i64
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 3
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1849 to i32*
  store i32 %1850, i32* %1854
  %1855 = load i64, i64* %RBP
  %1856 = sub i64 %1855, 8
  %1857 = load i64, i64* %PC
  %1858 = add i64 %1857, 4
  store i64 %1858, i64* %PC
  %1859 = inttoptr i64 %1856 to i64*
  %1860 = load i64, i64* %1859
  store i64 %1860, i64* %RCX, align 8, !tbaa !2428
  %1861 = load i64, i64* %RBP
  %1862 = sub i64 %1861, 12
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 3
  store i64 %1864, i64* %PC
  %1865 = inttoptr i64 %1862 to i32*
  %1866 = load i32, i32* %1865
  %1867 = zext i32 %1866 to i64
  store i64 %1867, i64* %RAX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 16
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 3
  store i64 %1871, i64* %PC
  %1872 = inttoptr i64 %1869 to i32*
  %1873 = load i32, i32* %1872
  %1874 = zext i32 %1873 to i64
  store i64 %1874, i64* %RDX, align 8, !tbaa !2428
  %1875 = load i64, i64* %RDX
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 3
  store i64 %1877, i64* %PC
  %1878 = trunc i64 %1875 to i32
  %1879 = sub i32 %1878, 1
  %1880 = zext i32 %1879 to i64
  store i64 %1880, i64* %RDX, align 8, !tbaa !2428
  %1881 = icmp ult i32 %1878, 1
  %1882 = zext i1 %1881 to i8
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1882, i8* %1883, align 1, !tbaa !2432
  %1884 = and i32 %1879, 255
  %1885 = call i32 @llvm.ctpop.i32(i32 %1884) #16
  %1886 = trunc i32 %1885 to i8
  %1887 = and i8 %1886, 1
  %1888 = xor i8 %1887, 1
  %1889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1888, i8* %1889, align 1, !tbaa !2446
  %1890 = xor i64 1, %1875
  %1891 = trunc i64 %1890 to i32
  %1892 = xor i32 %1891, %1879
  %1893 = lshr i32 %1892, 4
  %1894 = trunc i32 %1893 to i8
  %1895 = and i8 %1894, 1
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1895, i8* %1896, align 1, !tbaa !2447
  %1897 = icmp eq i32 %1879, 0
  %1898 = zext i1 %1897 to i8
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1898, i8* %1899, align 1, !tbaa !2448
  %1900 = lshr i32 %1879, 31
  %1901 = trunc i32 %1900 to i8
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1901, i8* %1902, align 1, !tbaa !2449
  %1903 = lshr i32 %1878, 31
  %1904 = xor i32 %1900, %1903
  %1905 = add nuw nsw i32 %1904, %1903
  %1906 = icmp eq i32 %1905, 2
  %1907 = zext i1 %1906 to i8
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1907, i8* %1908, align 1, !tbaa !2450
  %1909 = load i64, i64* %RAX
  %1910 = load i32, i32* %EDX
  %1911 = zext i32 %1910 to i64
  %1912 = load i64, i64* %PC
  %1913 = add i64 %1912, 3
  store i64 %1913, i64* %PC
  %1914 = shl i64 %1909, 32
  %1915 = ashr exact i64 %1914, 32
  %1916 = shl i64 %1911, 32
  %1917 = ashr exact i64 %1916, 32
  %1918 = mul nsw i64 %1917, %1915
  %1919 = trunc i64 %1918 to i32
  %1920 = and i64 %1918, 4294967295
  store i64 %1920, i64* %RAX, align 8, !tbaa !2428
  %1921 = shl i64 %1918, 32
  %1922 = ashr exact i64 %1921, 32
  %1923 = icmp ne i64 %1922, %1918
  %1924 = zext i1 %1923 to i8
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1924, i8* %1925, align 1, !tbaa !2432
  %1926 = and i32 %1919, 255
  %1927 = call i32 @llvm.ctpop.i32(i32 %1926) #16
  %1928 = trunc i32 %1927 to i8
  %1929 = and i8 %1928, 1
  %1930 = xor i8 %1929, 1
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1930, i8* %1931, align 1, !tbaa !2446
  %1932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1932, align 1, !tbaa !2447
  %1933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1933, align 1, !tbaa !2448
  %1934 = lshr i32 %1919, 31
  %1935 = trunc i32 %1934 to i8
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1935, i8* %1936, align 1, !tbaa !2449
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1924, i8* %1937, align 1, !tbaa !2450
  %1938 = load i64, i64* %RBP
  %1939 = sub i64 %1938, 16
  %1940 = load i64, i64* %PC
  %1941 = add i64 %1940, 3
  store i64 %1941, i64* %PC
  %1942 = inttoptr i64 %1939 to i32*
  %1943 = load i32, i32* %1942
  %1944 = zext i32 %1943 to i64
  store i64 %1944, i64* %RDX, align 8, !tbaa !2428
  %1945 = load i64, i64* %RDX
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 3
  store i64 %1947, i64* %PC
  %1948 = trunc i64 %1945 to i32
  %1949 = sub i32 %1948, 1
  %1950 = zext i32 %1949 to i64
  store i64 %1950, i64* %RDX, align 8, !tbaa !2428
  %1951 = icmp ult i32 %1948, 1
  %1952 = zext i1 %1951 to i8
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1952, i8* %1953, align 1, !tbaa !2432
  %1954 = and i32 %1949, 255
  %1955 = call i32 @llvm.ctpop.i32(i32 %1954) #16
  %1956 = trunc i32 %1955 to i8
  %1957 = and i8 %1956, 1
  %1958 = xor i8 %1957, 1
  %1959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1958, i8* %1959, align 1, !tbaa !2446
  %1960 = xor i64 1, %1945
  %1961 = trunc i64 %1960 to i32
  %1962 = xor i32 %1961, %1949
  %1963 = lshr i32 %1962, 4
  %1964 = trunc i32 %1963 to i8
  %1965 = and i8 %1964, 1
  %1966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1965, i8* %1966, align 1, !tbaa !2447
  %1967 = icmp eq i32 %1949, 0
  %1968 = zext i1 %1967 to i8
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1968, i8* %1969, align 1, !tbaa !2448
  %1970 = lshr i32 %1949, 31
  %1971 = trunc i32 %1970 to i8
  %1972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1971, i8* %1972, align 1, !tbaa !2449
  %1973 = lshr i32 %1948, 31
  %1974 = xor i32 %1970, %1973
  %1975 = add nuw nsw i32 %1974, %1973
  %1976 = icmp eq i32 %1975, 2
  %1977 = zext i1 %1976 to i8
  %1978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1977, i8* %1978, align 1, !tbaa !2450
  %1979 = load i64, i64* %RAX
  %1980 = load i32, i32* %EDX
  %1981 = zext i32 %1980 to i64
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 2
  store i64 %1983, i64* %PC
  %1984 = trunc i64 %1979 to i32
  %1985 = add i32 %1980, %1984
  %1986 = zext i32 %1985 to i64
  store i64 %1986, i64* %RAX, align 8, !tbaa !2428
  %1987 = icmp ult i32 %1985, %1984
  %1988 = icmp ult i32 %1985, %1980
  %1989 = or i1 %1987, %1988
  %1990 = zext i1 %1989 to i8
  %1991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1990, i8* %1991, align 1, !tbaa !2432
  %1992 = and i32 %1985, 255
  %1993 = call i32 @llvm.ctpop.i32(i32 %1992) #16
  %1994 = trunc i32 %1993 to i8
  %1995 = and i8 %1994, 1
  %1996 = xor i8 %1995, 1
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1996, i8* %1997, align 1, !tbaa !2446
  %1998 = xor i64 %1981, %1979
  %1999 = trunc i64 %1998 to i32
  %2000 = xor i32 %1999, %1985
  %2001 = lshr i32 %2000, 4
  %2002 = trunc i32 %2001 to i8
  %2003 = and i8 %2002, 1
  %2004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2003, i8* %2004, align 1, !tbaa !2447
  %2005 = icmp eq i32 %1985, 0
  %2006 = zext i1 %2005 to i8
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2006, i8* %2007, align 1, !tbaa !2448
  %2008 = lshr i32 %1985, 31
  %2009 = trunc i32 %2008 to i8
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2009, i8* %2010, align 1, !tbaa !2449
  %2011 = lshr i32 %1984, 31
  %2012 = lshr i32 %1980, 31
  %2013 = xor i32 %2008, %2011
  %2014 = xor i32 %2008, %2012
  %2015 = add nuw nsw i32 %2013, %2014
  %2016 = icmp eq i32 %2015, 2
  %2017 = zext i1 %2016 to i8
  %2018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2017, i8* %2018, align 1, !tbaa !2450
  %2019 = load i32, i32* %EAX
  %2020 = zext i32 %2019 to i64
  %2021 = load i64, i64* %PC
  %2022 = add i64 %2021, 3
  store i64 %2022, i64* %PC
  %2023 = shl i64 %2020, 32
  %2024 = ashr exact i64 %2023, 32
  store i64 %2024, i64* %RSI, align 8, !tbaa !2428
  %2025 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2026 = load i64, i64* %RCX
  %2027 = load i64, i64* %RSI
  %2028 = mul i64 %2027, 4
  %2029 = add i64 %2028, %2026
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 5
  store i64 %2031, i64* %PC
  %2032 = inttoptr i64 %2029 to float*
  %2033 = load float, float* %2032
  %2034 = fpext float %2033 to double
  %2035 = bitcast i8* %2025 to double*
  store double %2034, double* %2035, align 1, !tbaa !2454
  %2036 = bitcast %union.vec128_t* %XMM1 to i8*
  %2037 = bitcast %union.vec128_t* %XMM0 to i8*
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 4
  store i64 %2039, i64* %PC
  %2040 = bitcast i8* %2036 to double*
  %2041 = load double, double* %2040, align 1
  %2042 = bitcast i8* %2037 to double*
  %2043 = load double, double* %2042, align 1
  %2044 = fcmp uno double %2041, %2043
  br i1 %2044, label %2045, label %2057

; <label>:2045:                                   ; preds = %block_401bc8
  %2046 = fadd double %2041, %2043
  %2047 = bitcast double %2046 to i64
  %2048 = and i64 %2047, 9221120237041090560
  %2049 = icmp eq i64 %2048, 9218868437227405312
  %2050 = and i64 %2047, 2251799813685247
  %2051 = icmp ne i64 %2050, 0
  %2052 = and i1 %2049, %2051
  br i1 %2052, label %2053, label %2063

; <label>:2053:                                   ; preds = %2045
  %2054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2055 = load i64, i64* %2054, align 8, !tbaa !2428
  %2056 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2055, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2057:                                   ; preds = %block_401bc8
  %2058 = fcmp ogt double %2041, %2043
  br i1 %2058, label %2063, label %2059

; <label>:2059:                                   ; preds = %2057
  %2060 = fcmp olt double %2041, %2043
  br i1 %2060, label %2063, label %2061

; <label>:2061:                                   ; preds = %2059
  %2062 = fcmp oeq double %2041, %2043
  br i1 %2062, label %2063, label %2070

; <label>:2063:                                   ; preds = %2061, %2059, %2057, %2045
  %2064 = phi i8 [ 0, %2057 ], [ 0, %2059 ], [ 1, %2061 ], [ 1, %2045 ]
  %2065 = phi i8 [ 0, %2057 ], [ 0, %2059 ], [ 0, %2061 ], [ 1, %2045 ]
  %2066 = phi i8 [ 0, %2057 ], [ 1, %2059 ], [ 0, %2061 ], [ 1, %2045 ]
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2064, i8* %2067, align 1, !tbaa !2451
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2065, i8* %2068, align 1, !tbaa !2451
  %2069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2066, i8* %2069, align 1, !tbaa !2451
  br label %2070

; <label>:2070:                                   ; preds = %2063, %2061
  %2071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2071, align 1, !tbaa !2451
  %2072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2072, align 1, !tbaa !2451
  %2073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2073, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2053, %2070
  %2074 = phi %struct.Memory* [ %2056, %2053 ], [ %MEMORY.3, %2070 ]
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 24
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 6
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 6
  store i64 %2080, i64* %PC
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2082 = load i8, i8* %2081, align 1, !tbaa !2448
  %2083 = icmp eq i8 %2082, 0
  %2084 = zext i1 %2083 to i8
  store i8 %2084, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2086 = select i1 %2083, i64 %2076, i64 %2078
  store i64 %2086, i64* %2085, align 8, !tbaa !2428
  %2087 = load i8, i8* %BRANCH_TAKEN
  %2088 = icmp eq i8 %2087, 1
  br i1 %2088, label %block_401c1d, label %block_401c0b

block_401957:                                     ; preds = %block_401920
  %2089 = load i64, i64* %RBP
  %2090 = sub i64 %2089, 44
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 7
  store i64 %2092, i64* %PC
  %2093 = inttoptr i64 %2090 to i32*
  store i32 0, i32* %2093
  br label %block_40195e

block_401ac7:                                     ; preds = %block_401abb
  %2094 = load i64, i64* %RBP
  %2095 = sub i64 %2094, 8
  %2096 = load i64, i64* %PC
  %2097 = add i64 %2096, 4
  store i64 %2097, i64* %PC
  %2098 = inttoptr i64 %2095 to i64*
  %2099 = load i64, i64* %2098
  store i64 %2099, i64* %RAX, align 8, !tbaa !2428
  %2100 = load i64, i64* %RBP
  %2101 = sub i64 %2100, 12
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 3
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2101 to i32*
  %2105 = load i32, i32* %2104
  %2106 = zext i32 %2105 to i64
  store i64 %2106, i64* %RCX, align 8, !tbaa !2428
  %2107 = load i64, i64* %RCX
  %2108 = load i64, i64* %RBP
  %2109 = sub i64 %2108, 40
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 4
  store i64 %2111, i64* %PC
  %2112 = inttoptr i64 %2109 to i32*
  %2113 = load i32, i32* %2112
  %2114 = shl i64 %2107, 32
  %2115 = ashr exact i64 %2114, 32
  %2116 = sext i32 %2113 to i64
  %2117 = mul nsw i64 %2116, %2115
  %2118 = trunc i64 %2117 to i32
  %2119 = and i64 %2117, 4294967295
  store i64 %2119, i64* %RCX, align 8, !tbaa !2428
  %2120 = shl i64 %2117, 32
  %2121 = ashr exact i64 %2120, 32
  %2122 = icmp ne i64 %2121, %2117
  %2123 = zext i1 %2122 to i8
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2123, i8* %2124, align 1, !tbaa !2432
  %2125 = and i32 %2118, 255
  %2126 = call i32 @llvm.ctpop.i32(i32 %2125) #16
  %2127 = trunc i32 %2126 to i8
  %2128 = and i8 %2127, 1
  %2129 = xor i8 %2128, 1
  %2130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2129, i8* %2130, align 1, !tbaa !2446
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2131, align 1, !tbaa !2447
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2132, align 1, !tbaa !2448
  %2133 = lshr i32 %2118, 31
  %2134 = trunc i32 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2134, i8* %2135, align 1, !tbaa !2449
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2123, i8* %2136, align 1, !tbaa !2450
  %2137 = load i64, i64* %RCX
  %2138 = load i64, i64* %RBP
  %2139 = sub i64 %2138, 52
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 3
  store i64 %2141, i64* %PC
  %2142 = trunc i64 %2137 to i32
  %2143 = inttoptr i64 %2139 to i32*
  %2144 = load i32, i32* %2143
  %2145 = add i32 %2144, %2142
  %2146 = zext i32 %2145 to i64
  store i64 %2146, i64* %RCX, align 8, !tbaa !2428
  %2147 = icmp ult i32 %2145, %2142
  %2148 = icmp ult i32 %2145, %2144
  %2149 = or i1 %2147, %2148
  %2150 = zext i1 %2149 to i8
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2150, i8* %2151, align 1, !tbaa !2432
  %2152 = and i32 %2145, 255
  %2153 = call i32 @llvm.ctpop.i32(i32 %2152) #16
  %2154 = trunc i32 %2153 to i8
  %2155 = and i8 %2154, 1
  %2156 = xor i8 %2155, 1
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2156, i8* %2157, align 1, !tbaa !2446
  %2158 = xor i32 %2144, %2142
  %2159 = xor i32 %2158, %2145
  %2160 = lshr i32 %2159, 4
  %2161 = trunc i32 %2160 to i8
  %2162 = and i8 %2161, 1
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2162, i8* %2163, align 1, !tbaa !2447
  %2164 = icmp eq i32 %2145, 0
  %2165 = zext i1 %2164 to i8
  %2166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2165, i8* %2166, align 1, !tbaa !2448
  %2167 = lshr i32 %2145, 31
  %2168 = trunc i32 %2167 to i8
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2168, i8* %2169, align 1, !tbaa !2449
  %2170 = lshr i32 %2142, 31
  %2171 = lshr i32 %2144, 31
  %2172 = xor i32 %2167, %2170
  %2173 = xor i32 %2167, %2171
  %2174 = add nuw nsw i32 %2172, %2173
  %2175 = icmp eq i32 %2174, 2
  %2176 = zext i1 %2175 to i8
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2176, i8* %2177, align 1, !tbaa !2450
  %2178 = load i32, i32* %ECX
  %2179 = zext i32 %2178 to i64
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 3
  store i64 %2181, i64* %PC
  %2182 = shl i64 %2179, 32
  %2183 = ashr exact i64 %2182, 32
  store i64 %2183, i64* %RDX, align 8, !tbaa !2428
  %2184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2185 = load i64, i64* %RAX
  %2186 = load i64, i64* %RDX
  %2187 = mul i64 %2186, 4
  %2188 = add i64 %2187, %2185
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  store i64 %2190, i64* %PC
  %2191 = inttoptr i64 %2188 to float*
  %2192 = load float, float* %2191
  %2193 = bitcast i8* %2184 to float*
  store float %2192, float* %2193, align 1, !tbaa !2452
  %2194 = getelementptr inbounds i8, i8* %2184, i64 4
  %2195 = bitcast i8* %2194 to float*
  store float 0.000000e+00, float* %2195, align 1, !tbaa !2452
  %2196 = getelementptr inbounds i8, i8* %2184, i64 8
  %2197 = bitcast i8* %2196 to float*
  store float 0.000000e+00, float* %2197, align 1, !tbaa !2452
  %2198 = getelementptr inbounds i8, i8* %2184, i64 12
  %2199 = bitcast i8* %2198 to float*
  store float 0.000000e+00, float* %2199, align 1, !tbaa !2452
  %2200 = load i64, i64* %RBP
  %2201 = sub i64 %2200, 36
  %2202 = bitcast %union.vec128_t* %XMM0 to i8*
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 5
  store i64 %2204, i64* %PC
  %2205 = bitcast i8* %2202 to <2 x float>*
  %2206 = load <2 x float>, <2 x float>* %2205, align 1
  %2207 = extractelement <2 x float> %2206, i32 0
  %2208 = inttoptr i64 %2201 to float*
  store float %2207, float* %2208
  %2209 = load i64, i64* %RBP
  %2210 = sub i64 %2209, 52
  %2211 = load i64, i64* %PC
  %2212 = add i64 %2211, 3
  store i64 %2212, i64* %PC
  %2213 = inttoptr i64 %2210 to i32*
  %2214 = load i32, i32* %2213
  %2215 = zext i32 %2214 to i64
  store i64 %2215, i64* %RCX, align 8, !tbaa !2428
  %2216 = load i32, i32* %ECX
  %2217 = zext i32 %2216 to i64
  %2218 = load i64, i64* %RBP
  %2219 = sub i64 %2218, 44
  %2220 = load i64, i64* %PC
  %2221 = add i64 %2220, 3
  store i64 %2221, i64* %PC
  %2222 = inttoptr i64 %2219 to i32*
  %2223 = load i32, i32* %2222
  %2224 = sub i32 %2216, %2223
  %2225 = icmp ult i32 %2216, %2223
  %2226 = zext i1 %2225 to i8
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2226, i8* %2227, align 1, !tbaa !2432
  %2228 = and i32 %2224, 255
  %2229 = call i32 @llvm.ctpop.i32(i32 %2228) #16
  %2230 = trunc i32 %2229 to i8
  %2231 = and i8 %2230, 1
  %2232 = xor i8 %2231, 1
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2232, i8* %2233, align 1, !tbaa !2446
  %2234 = xor i32 %2223, %2216
  %2235 = xor i32 %2234, %2224
  %2236 = lshr i32 %2235, 4
  %2237 = trunc i32 %2236 to i8
  %2238 = and i8 %2237, 1
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2238, i8* %2239, align 1, !tbaa !2447
  %2240 = icmp eq i32 %2224, 0
  %2241 = zext i1 %2240 to i8
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2241, i8* %2242, align 1, !tbaa !2448
  %2243 = lshr i32 %2224, 31
  %2244 = trunc i32 %2243 to i8
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2244, i8* %2245, align 1, !tbaa !2449
  %2246 = lshr i32 %2216, 31
  %2247 = lshr i32 %2223, 31
  %2248 = xor i32 %2247, %2246
  %2249 = xor i32 %2243, %2246
  %2250 = add nuw nsw i32 %2249, %2248
  %2251 = icmp eq i32 %2250, 2
  %2252 = zext i1 %2251 to i8
  %2253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2252, i8* %2253, align 1, !tbaa !2450
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 77
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 6
  %2258 = load i64, i64* %PC
  %2259 = add i64 %2258, 6
  store i64 %2259, i64* %PC
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2261 = load i8, i8* %2260, align 1, !tbaa !2448
  store i8 %2261, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2263 = icmp ne i8 %2261, 0
  %2264 = select i1 %2263, i64 %2255, i64 %2257
  store i64 %2264, i64* %2262, align 8, !tbaa !2428
  %2265 = load i8, i8* %BRANCH_TAKEN
  %2266 = icmp eq i8 %2265, 1
  br i1 %2266, label %block_401b35, label %block_401aee

block_401bc3:                                     ; preds = %block_40195e
  %2267 = load i64, i64* %PC
  %2268 = add i64 %2267, 5
  store i64 %2268, i64* %PC
  %2269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %690, i64* %2269, align 8, !tbaa !2428
  br label %block_401bc8

block_401b35:                                     ; preds = %block_401ac7, %block_401aee
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_401ac7 ], [ %MEMORY.5, %block_401aee ]
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 5
  store i64 %2271, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2272 = load i64, i64* %RBP
  %2273 = sub i64 %2272, 16
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 3
  store i64 %2275, i64* %PC
  %2276 = inttoptr i64 %2273 to i32*
  %2277 = load i32, i32* %2276
  %2278 = zext i32 %2277 to i64
  store i64 %2278, i64* %RCX, align 8, !tbaa !2428
  %2279 = load i64, i64* %RBP
  %2280 = sub i64 %2279, 44
  %2281 = load i64, i64* %PC
  %2282 = add i64 %2281, 3
  store i64 %2282, i64* %PC
  %2283 = inttoptr i64 %2280 to i32*
  %2284 = load i32, i32* %2283
  %2285 = zext i32 %2284 to i64
  store i64 %2285, i64* %RDX, align 8, !tbaa !2428
  %2286 = load i64, i64* %RDX
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 3
  store i64 %2288, i64* %PC
  %2289 = trunc i64 %2286 to i32
  %2290 = add i32 1, %2289
  %2291 = zext i32 %2290 to i64
  store i64 %2291, i64* %RDX, align 8, !tbaa !2428
  %2292 = icmp ult i32 %2290, %2289
  %2293 = icmp ult i32 %2290, 1
  %2294 = or i1 %2292, %2293
  %2295 = zext i1 %2294 to i8
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2295, i8* %2296, align 1, !tbaa !2432
  %2297 = and i32 %2290, 255
  %2298 = call i32 @llvm.ctpop.i32(i32 %2297) #16
  %2299 = trunc i32 %2298 to i8
  %2300 = and i8 %2299, 1
  %2301 = xor i8 %2300, 1
  %2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2301, i8* %2302, align 1, !tbaa !2446
  %2303 = xor i64 1, %2286
  %2304 = trunc i64 %2303 to i32
  %2305 = xor i32 %2304, %2290
  %2306 = lshr i32 %2305, 4
  %2307 = trunc i32 %2306 to i8
  %2308 = and i8 %2307, 1
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2308, i8* %2309, align 1, !tbaa !2447
  %2310 = icmp eq i32 %2290, 0
  %2311 = zext i1 %2310 to i8
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2311, i8* %2312, align 1, !tbaa !2448
  %2313 = lshr i32 %2290, 31
  %2314 = trunc i32 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2314, i8* %2315, align 1, !tbaa !2449
  %2316 = lshr i32 %2289, 31
  %2317 = xor i32 %2313, %2316
  %2318 = add nuw nsw i32 %2317, %2313
  %2319 = icmp eq i32 %2318, 2
  %2320 = zext i1 %2319 to i8
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2320, i8* %2321, align 1, !tbaa !2450
  %2322 = load i64, i64* %RCX
  %2323 = load i32, i32* %EDX
  %2324 = zext i32 %2323 to i64
  %2325 = load i64, i64* %PC
  %2326 = add i64 %2325, 2
  store i64 %2326, i64* %PC
  %2327 = trunc i64 %2322 to i32
  %2328 = sub i32 %2327, %2323
  %2329 = zext i32 %2328 to i64
  store i64 %2329, i64* %RCX, align 8, !tbaa !2428
  %2330 = icmp ult i32 %2327, %2323
  %2331 = zext i1 %2330 to i8
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2331, i8* %2332, align 1, !tbaa !2432
  %2333 = and i32 %2328, 255
  %2334 = call i32 @llvm.ctpop.i32(i32 %2333) #16
  %2335 = trunc i32 %2334 to i8
  %2336 = and i8 %2335, 1
  %2337 = xor i8 %2336, 1
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2337, i8* %2338, align 1, !tbaa !2446
  %2339 = xor i64 %2324, %2322
  %2340 = trunc i64 %2339 to i32
  %2341 = xor i32 %2340, %2328
  %2342 = lshr i32 %2341, 4
  %2343 = trunc i32 %2342 to i8
  %2344 = and i8 %2343, 1
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2344, i8* %2345, align 1, !tbaa !2447
  %2346 = icmp eq i32 %2328, 0
  %2347 = zext i1 %2346 to i8
  %2348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2347, i8* %2348, align 1, !tbaa !2448
  %2349 = lshr i32 %2328, 31
  %2350 = trunc i32 %2349 to i8
  %2351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2350, i8* %2351, align 1, !tbaa !2449
  %2352 = lshr i32 %2327, 31
  %2353 = lshr i32 %2323, 31
  %2354 = xor i32 %2353, %2352
  %2355 = xor i32 %2349, %2352
  %2356 = add nuw nsw i32 %2355, %2354
  %2357 = icmp eq i32 %2356, 2
  %2358 = zext i1 %2357 to i8
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2358, i8* %2359, align 1, !tbaa !2450
  %2360 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2361 = load i64, i64* %RBP
  %2362 = sub i64 %2361, 36
  %2363 = load i64, i64* %PC
  %2364 = add i64 %2363, 5
  store i64 %2364, i64* %PC
  %2365 = inttoptr i64 %2362 to float*
  %2366 = load float, float* %2365
  %2367 = bitcast i8* %2360 to float*
  store float %2366, float* %2367, align 1, !tbaa !2452
  %2368 = getelementptr inbounds i8, i8* %2360, i64 4
  %2369 = bitcast i8* %2368 to float*
  store float 0.000000e+00, float* %2369, align 1, !tbaa !2452
  %2370 = getelementptr inbounds i8, i8* %2360, i64 8
  %2371 = bitcast i8* %2370 to float*
  store float 0.000000e+00, float* %2371, align 1, !tbaa !2452
  %2372 = getelementptr inbounds i8, i8* %2360, i64 12
  %2373 = bitcast i8* %2372 to float*
  store float 0.000000e+00, float* %2373, align 1, !tbaa !2452
  %2374 = load i64, i64* %RBP
  %2375 = sub i64 %2374, 8
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 4
  store i64 %2377, i64* %PC
  %2378 = inttoptr i64 %2375 to i64*
  %2379 = load i64, i64* %2378
  store i64 %2379, i64* %RSI, align 8, !tbaa !2428
  %2380 = load i64, i64* %RBP
  %2381 = sub i64 %2380, 12
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 3
  store i64 %2383, i64* %PC
  %2384 = inttoptr i64 %2381 to i32*
  %2385 = load i32, i32* %2384
  %2386 = zext i32 %2385 to i64
  store i64 %2386, i64* %RDX, align 8, !tbaa !2428
  %2387 = load i64, i64* %RDX
  %2388 = load i64, i64* %RBP
  %2389 = sub i64 %2388, 44
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 4
  store i64 %2391, i64* %PC
  %2392 = inttoptr i64 %2389 to i32*
  %2393 = load i32, i32* %2392
  %2394 = shl i64 %2387, 32
  %2395 = ashr exact i64 %2394, 32
  %2396 = sext i32 %2393 to i64
  %2397 = mul nsw i64 %2396, %2395
  %2398 = trunc i64 %2397 to i32
  %2399 = and i64 %2397, 4294967295
  store i64 %2399, i64* %RDX, align 8, !tbaa !2428
  %2400 = shl i64 %2397, 32
  %2401 = ashr exact i64 %2400, 32
  %2402 = icmp ne i64 %2401, %2397
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2403, i8* %2404, align 1, !tbaa !2432
  %2405 = and i32 %2398, 255
  %2406 = call i32 @llvm.ctpop.i32(i32 %2405) #16
  %2407 = trunc i32 %2406 to i8
  %2408 = and i8 %2407, 1
  %2409 = xor i8 %2408, 1
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2409, i8* %2410, align 1, !tbaa !2446
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2411, align 1, !tbaa !2447
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2412, align 1, !tbaa !2448
  %2413 = lshr i32 %2398, 31
  %2414 = trunc i32 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2414, i8* %2415, align 1, !tbaa !2449
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2403, i8* %2416, align 1, !tbaa !2450
  %2417 = load i64, i64* %RDX
  %2418 = load i64, i64* %RBP
  %2419 = sub i64 %2418, 44
  %2420 = load i64, i64* %PC
  %2421 = add i64 %2420, 3
  store i64 %2421, i64* %PC
  %2422 = trunc i64 %2417 to i32
  %2423 = inttoptr i64 %2419 to i32*
  %2424 = load i32, i32* %2423
  %2425 = add i32 %2424, %2422
  %2426 = zext i32 %2425 to i64
  store i64 %2426, i64* %RDX, align 8, !tbaa !2428
  %2427 = icmp ult i32 %2425, %2422
  %2428 = icmp ult i32 %2425, %2424
  %2429 = or i1 %2427, %2428
  %2430 = zext i1 %2429 to i8
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2430, i8* %2431, align 1, !tbaa !2432
  %2432 = and i32 %2425, 255
  %2433 = call i32 @llvm.ctpop.i32(i32 %2432) #16
  %2434 = trunc i32 %2433 to i8
  %2435 = and i8 %2434, 1
  %2436 = xor i8 %2435, 1
  %2437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2436, i8* %2437, align 1, !tbaa !2446
  %2438 = xor i32 %2424, %2422
  %2439 = xor i32 %2438, %2425
  %2440 = lshr i32 %2439, 4
  %2441 = trunc i32 %2440 to i8
  %2442 = and i8 %2441, 1
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2442, i8* %2443, align 1, !tbaa !2447
  %2444 = icmp eq i32 %2425, 0
  %2445 = zext i1 %2444 to i8
  %2446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2445, i8* %2446, align 1, !tbaa !2448
  %2447 = lshr i32 %2425, 31
  %2448 = trunc i32 %2447 to i8
  %2449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2448, i8* %2449, align 1, !tbaa !2449
  %2450 = lshr i32 %2422, 31
  %2451 = lshr i32 %2424, 31
  %2452 = xor i32 %2447, %2450
  %2453 = xor i32 %2447, %2451
  %2454 = add nuw nsw i32 %2452, %2453
  %2455 = icmp eq i32 %2454, 2
  %2456 = zext i1 %2455 to i8
  %2457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2456, i8* %2457, align 1, !tbaa !2450
  %2458 = load i64, i64* %RDX
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 3
  store i64 %2460, i64* %PC
  %2461 = trunc i64 %2458 to i32
  %2462 = add i32 1, %2461
  %2463 = zext i32 %2462 to i64
  store i64 %2463, i64* %RDX, align 8, !tbaa !2428
  %2464 = icmp ult i32 %2462, %2461
  %2465 = icmp ult i32 %2462, 1
  %2466 = or i1 %2464, %2465
  %2467 = zext i1 %2466 to i8
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2467, i8* %2468, align 1, !tbaa !2432
  %2469 = and i32 %2462, 255
  %2470 = call i32 @llvm.ctpop.i32(i32 %2469) #16
  %2471 = trunc i32 %2470 to i8
  %2472 = and i8 %2471, 1
  %2473 = xor i8 %2472, 1
  %2474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2473, i8* %2474, align 1, !tbaa !2446
  %2475 = xor i64 1, %2458
  %2476 = trunc i64 %2475 to i32
  %2477 = xor i32 %2476, %2462
  %2478 = lshr i32 %2477, 4
  %2479 = trunc i32 %2478 to i8
  %2480 = and i8 %2479, 1
  %2481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2480, i8* %2481, align 1, !tbaa !2447
  %2482 = icmp eq i32 %2462, 0
  %2483 = zext i1 %2482 to i8
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2483, i8* %2484, align 1, !tbaa !2448
  %2485 = lshr i32 %2462, 31
  %2486 = trunc i32 %2485 to i8
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2486, i8* %2487, align 1, !tbaa !2449
  %2488 = lshr i32 %2461, 31
  %2489 = xor i32 %2485, %2488
  %2490 = add nuw nsw i32 %2489, %2485
  %2491 = icmp eq i32 %2490, 2
  %2492 = zext i1 %2491 to i8
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2492, i8* %2493, align 1, !tbaa !2450
  %2494 = load i32, i32* %EDX
  %2495 = zext i32 %2494 to i64
  %2496 = load i64, i64* %PC
  %2497 = add i64 %2496, 3
  store i64 %2497, i64* %PC
  %2498 = shl i64 %2495, 32
  %2499 = ashr exact i64 %2498, 32
  store i64 %2499, i64* %RDI, align 8, !tbaa !2428
  %2500 = load i64, i64* %RDI
  %2501 = load i64, i64* %PC
  %2502 = add i64 %2501, 4
  store i64 %2502, i64* %PC
  %2503 = shl i64 %2500, 1
  %2504 = icmp slt i64 %2503, 0
  %2505 = shl i64 %2503, 1
  store i64 %2505, i64* %RDI, align 8, !tbaa !2428
  %2506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2507 = zext i1 %2504 to i8
  store i8 %2507, i8* %2506, align 1, !tbaa !2451
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2509 = trunc i64 %2505 to i32
  %2510 = and i32 %2509, 254
  %2511 = call i32 @llvm.ctpop.i32(i32 %2510) #16
  %2512 = trunc i32 %2511 to i8
  %2513 = and i8 %2512, 1
  %2514 = xor i8 %2513, 1
  store i8 %2514, i8* %2508, align 1, !tbaa !2451
  %2515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2515, align 1, !tbaa !2451
  %2516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2517 = icmp eq i64 %2505, 0
  %2518 = zext i1 %2517 to i8
  store i8 %2518, i8* %2516, align 1, !tbaa !2451
  %2519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2520 = lshr i64 %2505, 63
  %2521 = trunc i64 %2520 to i8
  store i8 %2521, i8* %2519, align 1, !tbaa !2451
  %2522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2522, align 1, !tbaa !2451
  %2523 = load i64, i64* %RSI
  %2524 = load i64, i64* %RDI
  %2525 = load i64, i64* %PC
  %2526 = add i64 %2525, 3
  store i64 %2526, i64* %PC
  %2527 = add i64 %2524, %2523
  store i64 %2527, i64* %RSI, align 8, !tbaa !2428
  %2528 = icmp ult i64 %2527, %2523
  %2529 = icmp ult i64 %2527, %2524
  %2530 = or i1 %2528, %2529
  %2531 = zext i1 %2530 to i8
  %2532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2531, i8* %2532, align 1, !tbaa !2432
  %2533 = trunc i64 %2527 to i32
  %2534 = and i32 %2533, 255
  %2535 = call i32 @llvm.ctpop.i32(i32 %2534) #16
  %2536 = trunc i32 %2535 to i8
  %2537 = and i8 %2536, 1
  %2538 = xor i8 %2537, 1
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2538, i8* %2539, align 1, !tbaa !2446
  %2540 = xor i64 %2524, %2523
  %2541 = xor i64 %2540, %2527
  %2542 = lshr i64 %2541, 4
  %2543 = trunc i64 %2542 to i8
  %2544 = and i8 %2543, 1
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2544, i8* %2545, align 1, !tbaa !2447
  %2546 = icmp eq i64 %2527, 0
  %2547 = zext i1 %2546 to i8
  %2548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2547, i8* %2548, align 1, !tbaa !2448
  %2549 = lshr i64 %2527, 63
  %2550 = trunc i64 %2549 to i8
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2550, i8* %2551, align 1, !tbaa !2449
  %2552 = lshr i64 %2523, 63
  %2553 = lshr i64 %2524, 63
  %2554 = xor i64 %2549, %2552
  %2555 = xor i64 %2549, %2553
  %2556 = add nuw nsw i64 %2554, %2555
  %2557 = icmp eq i64 %2556, 2
  %2558 = zext i1 %2557 to i8
  %2559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2558, i8* %2559, align 1, !tbaa !2450
  %2560 = load i64, i64* %RBP
  %2561 = sub i64 %2560, 8
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 4
  store i64 %2563, i64* %PC
  %2564 = inttoptr i64 %2561 to i64*
  %2565 = load i64, i64* %2564
  store i64 %2565, i64* %RDI, align 8, !tbaa !2428
  %2566 = load i64, i64* %RBP
  %2567 = sub i64 %2566, 12
  %2568 = load i64, i64* %PC
  %2569 = add i64 %2568, 3
  store i64 %2569, i64* %PC
  %2570 = inttoptr i64 %2567 to i32*
  %2571 = load i32, i32* %2570
  %2572 = zext i32 %2571 to i64
  store i64 %2572, i64* %RDX, align 8, !tbaa !2428
  %2573 = load i64, i64* %RDX
  %2574 = load i64, i64* %RBP
  %2575 = sub i64 %2574, 40
  %2576 = load i64, i64* %PC
  %2577 = add i64 %2576, 4
  store i64 %2577, i64* %PC
  %2578 = inttoptr i64 %2575 to i32*
  %2579 = load i32, i32* %2578
  %2580 = shl i64 %2573, 32
  %2581 = ashr exact i64 %2580, 32
  %2582 = sext i32 %2579 to i64
  %2583 = mul nsw i64 %2582, %2581
  %2584 = trunc i64 %2583 to i32
  %2585 = and i64 %2583, 4294967295
  store i64 %2585, i64* %RDX, align 8, !tbaa !2428
  %2586 = shl i64 %2583, 32
  %2587 = ashr exact i64 %2586, 32
  %2588 = icmp ne i64 %2587, %2583
  %2589 = zext i1 %2588 to i8
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2589, i8* %2590, align 1, !tbaa !2432
  %2591 = and i32 %2584, 255
  %2592 = call i32 @llvm.ctpop.i32(i32 %2591) #16
  %2593 = trunc i32 %2592 to i8
  %2594 = and i8 %2593, 1
  %2595 = xor i8 %2594, 1
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2595, i8* %2596, align 1, !tbaa !2446
  %2597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2597, align 1, !tbaa !2447
  %2598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2598, align 1, !tbaa !2448
  %2599 = lshr i32 %2584, 31
  %2600 = trunc i32 %2599 to i8
  %2601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2600, i8* %2601, align 1, !tbaa !2449
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2589, i8* %2602, align 1, !tbaa !2450
  %2603 = load i64, i64* %RDX
  %2604 = load i64, i64* %RBP
  %2605 = sub i64 %2604, 44
  %2606 = load i64, i64* %PC
  %2607 = add i64 %2606, 3
  store i64 %2607, i64* %PC
  %2608 = trunc i64 %2603 to i32
  %2609 = inttoptr i64 %2605 to i32*
  %2610 = load i32, i32* %2609
  %2611 = add i32 %2610, %2608
  %2612 = zext i32 %2611 to i64
  store i64 %2612, i64* %RDX, align 8, !tbaa !2428
  %2613 = icmp ult i32 %2611, %2608
  %2614 = icmp ult i32 %2611, %2610
  %2615 = or i1 %2613, %2614
  %2616 = zext i1 %2615 to i8
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2616, i8* %2617, align 1, !tbaa !2432
  %2618 = and i32 %2611, 255
  %2619 = call i32 @llvm.ctpop.i32(i32 %2618) #16
  %2620 = trunc i32 %2619 to i8
  %2621 = and i8 %2620, 1
  %2622 = xor i8 %2621, 1
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2622, i8* %2623, align 1, !tbaa !2446
  %2624 = xor i32 %2610, %2608
  %2625 = xor i32 %2624, %2611
  %2626 = lshr i32 %2625, 4
  %2627 = trunc i32 %2626 to i8
  %2628 = and i8 %2627, 1
  %2629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2628, i8* %2629, align 1, !tbaa !2447
  %2630 = icmp eq i32 %2611, 0
  %2631 = zext i1 %2630 to i8
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2631, i8* %2632, align 1, !tbaa !2448
  %2633 = lshr i32 %2611, 31
  %2634 = trunc i32 %2633 to i8
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2634, i8* %2635, align 1, !tbaa !2449
  %2636 = lshr i32 %2608, 31
  %2637 = lshr i32 %2610, 31
  %2638 = xor i32 %2633, %2636
  %2639 = xor i32 %2633, %2637
  %2640 = add nuw nsw i32 %2638, %2639
  %2641 = icmp eq i32 %2640, 2
  %2642 = zext i1 %2641 to i8
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2642, i8* %2643, align 1, !tbaa !2450
  %2644 = load i64, i64* %RDX
  %2645 = load i64, i64* %PC
  %2646 = add i64 %2645, 3
  store i64 %2646, i64* %PC
  %2647 = trunc i64 %2644 to i32
  %2648 = add i32 1, %2647
  %2649 = zext i32 %2648 to i64
  store i64 %2649, i64* %RDX, align 8, !tbaa !2428
  %2650 = icmp ult i32 %2648, %2647
  %2651 = icmp ult i32 %2648, 1
  %2652 = or i1 %2650, %2651
  %2653 = zext i1 %2652 to i8
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2653, i8* %2654, align 1, !tbaa !2432
  %2655 = and i32 %2648, 255
  %2656 = call i32 @llvm.ctpop.i32(i32 %2655) #16
  %2657 = trunc i32 %2656 to i8
  %2658 = and i8 %2657, 1
  %2659 = xor i8 %2658, 1
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2659, i8* %2660, align 1, !tbaa !2446
  %2661 = xor i64 1, %2644
  %2662 = trunc i64 %2661 to i32
  %2663 = xor i32 %2662, %2648
  %2664 = lshr i32 %2663, 4
  %2665 = trunc i32 %2664 to i8
  %2666 = and i8 %2665, 1
  %2667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2666, i8* %2667, align 1, !tbaa !2447
  %2668 = icmp eq i32 %2648, 0
  %2669 = zext i1 %2668 to i8
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2669, i8* %2670, align 1, !tbaa !2448
  %2671 = lshr i32 %2648, 31
  %2672 = trunc i32 %2671 to i8
  %2673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2672, i8* %2673, align 1, !tbaa !2449
  %2674 = lshr i32 %2647, 31
  %2675 = xor i32 %2671, %2674
  %2676 = add nuw nsw i32 %2675, %2671
  %2677 = icmp eq i32 %2676, 2
  %2678 = zext i1 %2677 to i8
  %2679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2678, i8* %2679, align 1, !tbaa !2450
  %2680 = load i32, i32* %EDX
  %2681 = zext i32 %2680 to i64
  %2682 = load i64, i64* %PC
  %2683 = add i64 %2682, 3
  store i64 %2683, i64* %PC
  %2684 = shl i64 %2681, 32
  %2685 = ashr exact i64 %2684, 32
  store i64 %2685, i64* %R8, align 8, !tbaa !2428
  %2686 = load i64, i64* %R8
  %2687 = load i64, i64* %PC
  %2688 = add i64 %2687, 4
  store i64 %2688, i64* %PC
  %2689 = shl i64 %2686, 1
  %2690 = icmp slt i64 %2689, 0
  %2691 = shl i64 %2689, 1
  store i64 %2691, i64* %R8, align 8, !tbaa !2428
  %2692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2693 = zext i1 %2690 to i8
  store i8 %2693, i8* %2692, align 1, !tbaa !2451
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2695 = trunc i64 %2691 to i32
  %2696 = and i32 %2695, 254
  %2697 = call i32 @llvm.ctpop.i32(i32 %2696) #16
  %2698 = trunc i32 %2697 to i8
  %2699 = and i8 %2698, 1
  %2700 = xor i8 %2699, 1
  store i8 %2700, i8* %2694, align 1, !tbaa !2451
  %2701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2701, align 1, !tbaa !2451
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2703 = icmp eq i64 %2691, 0
  %2704 = zext i1 %2703 to i8
  store i8 %2704, i8* %2702, align 1, !tbaa !2451
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2706 = lshr i64 %2691, 63
  %2707 = trunc i64 %2706 to i8
  store i8 %2707, i8* %2705, align 1, !tbaa !2451
  %2708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2708, align 1, !tbaa !2451
  %2709 = load i64, i64* %RDI
  %2710 = load i64, i64* %R8
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 3
  store i64 %2712, i64* %PC
  %2713 = add i64 %2710, %2709
  store i64 %2713, i64* %RDI, align 8, !tbaa !2428
  %2714 = icmp ult i64 %2713, %2709
  %2715 = icmp ult i64 %2713, %2710
  %2716 = or i1 %2714, %2715
  %2717 = zext i1 %2716 to i8
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2717, i8* %2718, align 1, !tbaa !2432
  %2719 = trunc i64 %2713 to i32
  %2720 = and i32 %2719, 255
  %2721 = call i32 @llvm.ctpop.i32(i32 %2720) #16
  %2722 = trunc i32 %2721 to i8
  %2723 = and i8 %2722, 1
  %2724 = xor i8 %2723, 1
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2724, i8* %2725, align 1, !tbaa !2446
  %2726 = xor i64 %2710, %2709
  %2727 = xor i64 %2726, %2713
  %2728 = lshr i64 %2727, 4
  %2729 = trunc i64 %2728 to i8
  %2730 = and i8 %2729, 1
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2730, i8* %2731, align 1, !tbaa !2447
  %2732 = icmp eq i64 %2713, 0
  %2733 = zext i1 %2732 to i8
  %2734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2733, i8* %2734, align 1, !tbaa !2448
  %2735 = lshr i64 %2713, 63
  %2736 = trunc i64 %2735 to i8
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2736, i8* %2737, align 1, !tbaa !2449
  %2738 = lshr i64 %2709, 63
  %2739 = lshr i64 %2710, 63
  %2740 = xor i64 %2735, %2738
  %2741 = xor i64 %2735, %2739
  %2742 = add nuw nsw i64 %2740, %2741
  %2743 = icmp eq i64 %2742, 2
  %2744 = zext i1 %2743 to i8
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2744, i8* %2745, align 1, !tbaa !2450
  %2746 = load i64, i64* %RBP
  %2747 = sub i64 %2746, 64
  %2748 = load i64, i64* %RDI
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 4
  store i64 %2750, i64* %PC
  %2751 = inttoptr i64 %2747 to i64*
  store i64 %2748, i64* %2751
  %2752 = load i32, i32* %ECX
  %2753 = zext i32 %2752 to i64
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 2
  store i64 %2755, i64* %PC
  %2756 = and i64 %2753, 4294967295
  store i64 %2756, i64* %RDI, align 8, !tbaa !2428
  %2757 = load i32, i32* %EAX
  %2758 = zext i32 %2757 to i64
  %2759 = load i64, i64* %PC
  %2760 = add i64 %2759, 2
  store i64 %2760, i64* %PC
  %2761 = and i64 %2758, 4294967295
  store i64 %2761, i64* %RDX, align 8, !tbaa !2428
  %2762 = load i64, i64* %RBP
  %2763 = sub i64 %2762, 64
  %2764 = load i64, i64* %PC
  %2765 = add i64 %2764, 4
  store i64 %2765, i64* %PC
  %2766 = inttoptr i64 %2763 to i64*
  %2767 = load i64, i64* %2766
  store i64 %2767, i64* %RCX, align 8, !tbaa !2428
  %2768 = bitcast i32* %R8D to i64*
  %2769 = load i32, i32* %EAX
  %2770 = zext i32 %2769 to i64
  %2771 = load i64, i64* %PC
  %2772 = add i64 %2771, 3
  store i64 %2772, i64* %PC
  %2773 = and i64 %2770, 4294967295
  store i64 %2773, i64* %2768, align 8, !tbaa !2428
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 3297
  %2776 = load i64, i64* %PC
  %2777 = add i64 %2776, 5
  %2778 = load i64, i64* %PC
  %2779 = add i64 %2778, 5
  store i64 %2779, i64* %PC
  %2780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2781 = load i64, i64* %2780, align 8, !tbaa !2428
  %2782 = add i64 %2781, -8
  %2783 = inttoptr i64 %2782 to i64*
  store i64 %2777, i64* %2783
  store i64 %2782, i64* %2780, align 8, !tbaa !2428
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2775, i64* %2784, align 8, !tbaa !2428
  %2785 = load i64, i64* %PC
  %2786 = call %struct.Memory* @sub_402870_daxpy(%struct.State* %0, i64 %2785, %struct.Memory* %MEMORY.4)
  %2787 = load i64, i64* %RBP
  %2788 = sub i64 %2787, 40
  %2789 = load i64, i64* %PC
  %2790 = add i64 %2789, 3
  store i64 %2790, i64* %PC
  %2791 = inttoptr i64 %2788 to i32*
  %2792 = load i32, i32* %2791
  %2793 = zext i32 %2792 to i64
  store i64 %2793, i64* %RAX, align 8, !tbaa !2428
  %2794 = load i64, i64* %RAX
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 3
  store i64 %2796, i64* %PC
  %2797 = trunc i64 %2794 to i32
  %2798 = add i32 1, %2797
  %2799 = zext i32 %2798 to i64
  store i64 %2799, i64* %RAX, align 8, !tbaa !2428
  %2800 = icmp ult i32 %2798, %2797
  %2801 = icmp ult i32 %2798, 1
  %2802 = or i1 %2800, %2801
  %2803 = zext i1 %2802 to i8
  %2804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2803, i8* %2804, align 1, !tbaa !2432
  %2805 = and i32 %2798, 255
  %2806 = call i32 @llvm.ctpop.i32(i32 %2805) #16
  %2807 = trunc i32 %2806 to i8
  %2808 = and i8 %2807, 1
  %2809 = xor i8 %2808, 1
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2809, i8* %2810, align 1, !tbaa !2446
  %2811 = xor i64 1, %2794
  %2812 = trunc i64 %2811 to i32
  %2813 = xor i32 %2812, %2798
  %2814 = lshr i32 %2813, 4
  %2815 = trunc i32 %2814 to i8
  %2816 = and i8 %2815, 1
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2816, i8* %2817, align 1, !tbaa !2447
  %2818 = icmp eq i32 %2798, 0
  %2819 = zext i1 %2818 to i8
  %2820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2819, i8* %2820, align 1, !tbaa !2448
  %2821 = lshr i32 %2798, 31
  %2822 = trunc i32 %2821 to i8
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2822, i8* %2823, align 1, !tbaa !2449
  %2824 = lshr i32 %2797, 31
  %2825 = xor i32 %2821, %2824
  %2826 = add nuw nsw i32 %2825, %2821
  %2827 = icmp eq i32 %2826, 2
  %2828 = zext i1 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2828, i8* %2829, align 1, !tbaa !2450
  %2830 = load i64, i64* %RBP
  %2831 = sub i64 %2830, 40
  %2832 = load i32, i32* %EAX
  %2833 = zext i32 %2832 to i64
  %2834 = load i64, i64* %PC
  %2835 = add i64 %2834, 3
  store i64 %2835, i64* %PC
  %2836 = inttoptr i64 %2831 to i32*
  store i32 %2832, i32* %2836
  %2837 = load i64, i64* %PC
  %2838 = sub i64 %2837, 226
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 5
  store i64 %2840, i64* %PC
  %2841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2838, i64* %2841, align 8, !tbaa !2428
  br label %block_401abb

block_401abb:                                     ; preds = %block_401b35, %block_401a50
  %MEMORY.5 = phi %struct.Memory* [ %1707, %block_401a50 ], [ %2786, %block_401b35 ]
  %2842 = load i64, i64* %RBP
  %2843 = sub i64 %2842, 40
  %2844 = load i64, i64* %PC
  %2845 = add i64 %2844, 3
  store i64 %2845, i64* %PC
  %2846 = inttoptr i64 %2843 to i32*
  %2847 = load i32, i32* %2846
  %2848 = zext i32 %2847 to i64
  store i64 %2848, i64* %RAX, align 8, !tbaa !2428
  %2849 = load i32, i32* %EAX
  %2850 = zext i32 %2849 to i64
  %2851 = load i64, i64* %RBP
  %2852 = sub i64 %2851, 16
  %2853 = load i64, i64* %PC
  %2854 = add i64 %2853, 3
  store i64 %2854, i64* %PC
  %2855 = inttoptr i64 %2852 to i32*
  %2856 = load i32, i32* %2855
  %2857 = sub i32 %2849, %2856
  %2858 = icmp ult i32 %2849, %2856
  %2859 = zext i1 %2858 to i8
  %2860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2859, i8* %2860, align 1, !tbaa !2432
  %2861 = and i32 %2857, 255
  %2862 = call i32 @llvm.ctpop.i32(i32 %2861) #16
  %2863 = trunc i32 %2862 to i8
  %2864 = and i8 %2863, 1
  %2865 = xor i8 %2864, 1
  %2866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2865, i8* %2866, align 1, !tbaa !2446
  %2867 = xor i32 %2856, %2849
  %2868 = xor i32 %2867, %2857
  %2869 = lshr i32 %2868, 4
  %2870 = trunc i32 %2869 to i8
  %2871 = and i8 %2870, 1
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2871, i8* %2872, align 1, !tbaa !2447
  %2873 = icmp eq i32 %2857, 0
  %2874 = zext i1 %2873 to i8
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2874, i8* %2875, align 1, !tbaa !2448
  %2876 = lshr i32 %2857, 31
  %2877 = trunc i32 %2876 to i8
  %2878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2877, i8* %2878, align 1, !tbaa !2449
  %2879 = lshr i32 %2849, 31
  %2880 = lshr i32 %2856, 31
  %2881 = xor i32 %2880, %2879
  %2882 = xor i32 %2876, %2879
  %2883 = add nuw nsw i32 %2882, %2881
  %2884 = icmp eq i32 %2883, 2
  %2885 = zext i1 %2884 to i8
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2885, i8* %2886, align 1, !tbaa !2450
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 225
  %2889 = load i64, i64* %PC
  %2890 = add i64 %2889, 6
  %2891 = load i64, i64* %PC
  %2892 = add i64 %2891, 6
  store i64 %2892, i64* %PC
  %2893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2894 = load i8, i8* %2893, align 1, !tbaa !2449
  %2895 = icmp ne i8 %2894, 0
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2897 = load i8, i8* %2896, align 1, !tbaa !2450
  %2898 = icmp ne i8 %2897, 0
  %2899 = xor i1 %2895, %2898
  %2900 = xor i1 %2899, true
  %2901 = zext i1 %2900 to i8
  store i8 %2901, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2903 = select i1 %2899, i64 %2890, i64 %2888
  store i64 %2903, i64* %2902, align 8, !tbaa !2428
  %2904 = load i8, i8* %BRANCH_TAKEN
  %2905 = icmp eq i8 %2904, 1
  br i1 %2905, label %block_401ba2, label %block_401ac7

block_401bb0:                                     ; preds = %block_401ba2, %block_4019dd
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.5, %block_401ba2 ], [ %1204, %block_4019dd ]
  %2906 = load i64, i64* %PC
  %2907 = add i64 %2906, 5
  %2908 = load i64, i64* %PC
  %2909 = add i64 %2908, 5
  store i64 %2909, i64* %PC
  %2910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2907, i64* %2910, align 8, !tbaa !2428
  %2911 = load i64, i64* %RBP
  %2912 = sub i64 %2911, 44
  %2913 = load i64, i64* %PC
  %2914 = add i64 %2913, 3
  store i64 %2914, i64* %PC
  %2915 = inttoptr i64 %2912 to i32*
  %2916 = load i32, i32* %2915
  %2917 = zext i32 %2916 to i64
  store i64 %2917, i64* %RAX, align 8, !tbaa !2428
  %2918 = load i64, i64* %RAX
  %2919 = load i64, i64* %PC
  %2920 = add i64 %2919, 3
  store i64 %2920, i64* %PC
  %2921 = trunc i64 %2918 to i32
  %2922 = add i32 1, %2921
  %2923 = zext i32 %2922 to i64
  store i64 %2923, i64* %RAX, align 8, !tbaa !2428
  %2924 = icmp ult i32 %2922, %2921
  %2925 = icmp ult i32 %2922, 1
  %2926 = or i1 %2924, %2925
  %2927 = zext i1 %2926 to i8
  %2928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2927, i8* %2928, align 1, !tbaa !2432
  %2929 = and i32 %2922, 255
  %2930 = call i32 @llvm.ctpop.i32(i32 %2929) #16
  %2931 = trunc i32 %2930 to i8
  %2932 = and i8 %2931, 1
  %2933 = xor i8 %2932, 1
  %2934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2933, i8* %2934, align 1, !tbaa !2446
  %2935 = xor i64 1, %2918
  %2936 = trunc i64 %2935 to i32
  %2937 = xor i32 %2936, %2922
  %2938 = lshr i32 %2937, 4
  %2939 = trunc i32 %2938 to i8
  %2940 = and i8 %2939, 1
  %2941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2940, i8* %2941, align 1, !tbaa !2447
  %2942 = icmp eq i32 %2922, 0
  %2943 = zext i1 %2942 to i8
  %2944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2943, i8* %2944, align 1, !tbaa !2448
  %2945 = lshr i32 %2922, 31
  %2946 = trunc i32 %2945 to i8
  %2947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2946, i8* %2947, align 1, !tbaa !2449
  %2948 = lshr i32 %2921, 31
  %2949 = xor i32 %2945, %2948
  %2950 = add nuw nsw i32 %2949, %2945
  %2951 = icmp eq i32 %2950, 2
  %2952 = zext i1 %2951 to i8
  %2953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2952, i8* %2953, align 1, !tbaa !2450
  %2954 = load i64, i64* %RBP
  %2955 = sub i64 %2954, 44
  %2956 = load i32, i32* %EAX
  %2957 = zext i32 %2956 to i64
  %2958 = load i64, i64* %PC
  %2959 = add i64 %2958, 3
  store i64 %2959, i64* %PC
  %2960 = inttoptr i64 %2955 to i32*
  store i32 %2956, i32* %2960
  %2961 = load i64, i64* %PC
  %2962 = sub i64 %2961, 608
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 5
  store i64 %2964, i64* %PC
  %2965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2962, i64* %2965, align 8, !tbaa !2428
  br label %block_40195e

block_401ba2:                                     ; preds = %block_401abb
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 14
  %2968 = load i64, i64* %PC
  %2969 = add i64 %2968, 5
  store i64 %2969, i64* %PC
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2967, i64* %2970, align 8, !tbaa !2428
  br label %block_401bb0

block_401c1d:                                     ; preds = %block_401c11, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_401c0b
  %MEMORY.7 = phi %struct.Memory* [ %2074, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %2074, %block_401c0b ], [ %2074, %block_401c11 ]
  %2971 = load i64, i64* %RSP
  %2972 = load i64, i64* %PC
  %2973 = add i64 %2972, 4
  store i64 %2973, i64* %PC
  %2974 = add i64 64, %2971
  store i64 %2974, i64* %RSP, align 8, !tbaa !2428
  %2975 = icmp ult i64 %2974, %2971
  %2976 = icmp ult i64 %2974, 64
  %2977 = or i1 %2975, %2976
  %2978 = zext i1 %2977 to i8
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2978, i8* %2979, align 1, !tbaa !2432
  %2980 = trunc i64 %2974 to i32
  %2981 = and i32 %2980, 255
  %2982 = call i32 @llvm.ctpop.i32(i32 %2981) #16
  %2983 = trunc i32 %2982 to i8
  %2984 = and i8 %2983, 1
  %2985 = xor i8 %2984, 1
  %2986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2985, i8* %2986, align 1, !tbaa !2446
  %2987 = xor i64 64, %2971
  %2988 = xor i64 %2987, %2974
  %2989 = lshr i64 %2988, 4
  %2990 = trunc i64 %2989 to i8
  %2991 = and i8 %2990, 1
  %2992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2991, i8* %2992, align 1, !tbaa !2447
  %2993 = icmp eq i64 %2974, 0
  %2994 = zext i1 %2993 to i8
  %2995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2994, i8* %2995, align 1, !tbaa !2448
  %2996 = lshr i64 %2974, 63
  %2997 = trunc i64 %2996 to i8
  %2998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2997, i8* %2998, align 1, !tbaa !2449
  %2999 = lshr i64 %2971, 63
  %3000 = xor i64 %2996, %2999
  %3001 = add nuw nsw i64 %3000, %2996
  %3002 = icmp eq i64 %3001, 2
  %3003 = zext i1 %3002 to i8
  %3004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3003, i8* %3004, align 1, !tbaa !2450
  %3005 = load i64, i64* %PC
  %3006 = add i64 %3005, 1
  store i64 %3006, i64* %PC
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3008 = load i64, i64* %3007, align 8, !tbaa !2428
  %3009 = add i64 %3008, 8
  %3010 = inttoptr i64 %3008 to i64*
  %3011 = load i64, i64* %3010
  store i64 %3011, i64* %RBP, align 8, !tbaa !2428
  store i64 %3009, i64* %3007, align 8, !tbaa !2428
  %3012 = load i64, i64* %PC
  %3013 = add i64 %3012, 1
  store i64 %3013, i64* %PC
  %3014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3016 = load i64, i64* %3015, align 8, !tbaa !2428
  %3017 = inttoptr i64 %3016 to i64*
  %3018 = load i64, i64* %3017
  store i64 %3018, i64* %3014, align 8, !tbaa !2428
  %3019 = add i64 %3016, 8
  store i64 %3019, i64* %3015, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.7

block_401c11:                                     ; preds = %block_401c0b
  %3020 = load i64, i64* %RBP
  %3021 = sub i64 %3020, 16
  %3022 = load i64, i64* %PC
  %3023 = add i64 %3022, 3
  store i64 %3023, i64* %PC
  %3024 = inttoptr i64 %3021 to i32*
  %3025 = load i32, i32* %3024
  %3026 = zext i32 %3025 to i64
  store i64 %3026, i64* %RAX, align 8, !tbaa !2428
  %3027 = load i64, i64* %RAX
  %3028 = load i64, i64* %PC
  %3029 = add i64 %3028, 3
  store i64 %3029, i64* %PC
  %3030 = trunc i64 %3027 to i32
  %3031 = sub i32 %3030, 1
  %3032 = zext i32 %3031 to i64
  store i64 %3032, i64* %RAX, align 8, !tbaa !2428
  %3033 = icmp ult i32 %3030, 1
  %3034 = zext i1 %3033 to i8
  %3035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3034, i8* %3035, align 1, !tbaa !2432
  %3036 = and i32 %3031, 255
  %3037 = call i32 @llvm.ctpop.i32(i32 %3036) #16
  %3038 = trunc i32 %3037 to i8
  %3039 = and i8 %3038, 1
  %3040 = xor i8 %3039, 1
  %3041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3040, i8* %3041, align 1, !tbaa !2446
  %3042 = xor i64 1, %3027
  %3043 = trunc i64 %3042 to i32
  %3044 = xor i32 %3043, %3031
  %3045 = lshr i32 %3044, 4
  %3046 = trunc i32 %3045 to i8
  %3047 = and i8 %3046, 1
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3047, i8* %3048, align 1, !tbaa !2447
  %3049 = icmp eq i32 %3031, 0
  %3050 = zext i1 %3049 to i8
  %3051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3050, i8* %3051, align 1, !tbaa !2448
  %3052 = lshr i32 %3031, 31
  %3053 = trunc i32 %3052 to i8
  %3054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3053, i8* %3054, align 1, !tbaa !2449
  %3055 = lshr i32 %3030, 31
  %3056 = xor i32 %3052, %3055
  %3057 = add nuw nsw i32 %3056, %3055
  %3058 = icmp eq i32 %3057, 2
  %3059 = zext i1 %3058 to i8
  %3060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3059, i8* %3060, align 1, !tbaa !2450
  %3061 = load i64, i64* %RBP
  %3062 = sub i64 %3061, 32
  %3063 = load i64, i64* %PC
  %3064 = add i64 %3063, 4
  store i64 %3064, i64* %PC
  %3065 = inttoptr i64 %3062 to i64*
  %3066 = load i64, i64* %3065
  store i64 %3066, i64* %RCX, align 8, !tbaa !2428
  %3067 = load i64, i64* %RCX
  %3068 = load i32, i32* %EAX
  %3069 = zext i32 %3068 to i64
  %3070 = load i64, i64* %PC
  %3071 = add i64 %3070, 2
  store i64 %3071, i64* %PC
  %3072 = inttoptr i64 %3067 to i32*
  store i32 %3068, i32* %3072
  br label %block_401c1d

block_4019ee:                                     ; preds = %block_4019e2
  %3073 = load i64, i64* %RBP
  %3074 = sub i64 %3073, 8
  %3075 = load i64, i64* %PC
  %3076 = add i64 %3075, 4
  store i64 %3076, i64* %PC
  %3077 = inttoptr i64 %3074 to i64*
  %3078 = load i64, i64* %3077
  store i64 %3078, i64* %RAX, align 8, !tbaa !2428
  %3079 = load i64, i64* %RBP
  %3080 = sub i64 %3079, 12
  %3081 = load i64, i64* %PC
  %3082 = add i64 %3081, 3
  store i64 %3082, i64* %PC
  %3083 = inttoptr i64 %3080 to i32*
  %3084 = load i32, i32* %3083
  %3085 = zext i32 %3084 to i64
  store i64 %3085, i64* %RCX, align 8, !tbaa !2428
  %3086 = load i64, i64* %RCX
  %3087 = load i64, i64* %RBP
  %3088 = sub i64 %3087, 44
  %3089 = load i64, i64* %PC
  %3090 = add i64 %3089, 4
  store i64 %3090, i64* %PC
  %3091 = inttoptr i64 %3088 to i32*
  %3092 = load i32, i32* %3091
  %3093 = shl i64 %3086, 32
  %3094 = ashr exact i64 %3093, 32
  %3095 = sext i32 %3092 to i64
  %3096 = mul nsw i64 %3095, %3094
  %3097 = trunc i64 %3096 to i32
  %3098 = and i64 %3096, 4294967295
  store i64 %3098, i64* %RCX, align 8, !tbaa !2428
  %3099 = shl i64 %3096, 32
  %3100 = ashr exact i64 %3099, 32
  %3101 = icmp ne i64 %3100, %3096
  %3102 = zext i1 %3101 to i8
  %3103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3102, i8* %3103, align 1, !tbaa !2432
  %3104 = and i32 %3097, 255
  %3105 = call i32 @llvm.ctpop.i32(i32 %3104) #16
  %3106 = trunc i32 %3105 to i8
  %3107 = and i8 %3106, 1
  %3108 = xor i8 %3107, 1
  %3109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3108, i8* %3109, align 1, !tbaa !2446
  %3110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3110, align 1, !tbaa !2447
  %3111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3111, align 1, !tbaa !2448
  %3112 = lshr i32 %3097, 31
  %3113 = trunc i32 %3112 to i8
  %3114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3113, i8* %3114, align 1, !tbaa !2449
  %3115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3102, i8* %3115, align 1, !tbaa !2450
  %3116 = load i64, i64* %RCX
  %3117 = load i64, i64* %RBP
  %3118 = sub i64 %3117, 52
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 3
  store i64 %3120, i64* %PC
  %3121 = trunc i64 %3116 to i32
  %3122 = inttoptr i64 %3118 to i32*
  %3123 = load i32, i32* %3122
  %3124 = add i32 %3123, %3121
  %3125 = zext i32 %3124 to i64
  store i64 %3125, i64* %RCX, align 8, !tbaa !2428
  %3126 = icmp ult i32 %3124, %3121
  %3127 = icmp ult i32 %3124, %3123
  %3128 = or i1 %3126, %3127
  %3129 = zext i1 %3128 to i8
  %3130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3129, i8* %3130, align 1, !tbaa !2432
  %3131 = and i32 %3124, 255
  %3132 = call i32 @llvm.ctpop.i32(i32 %3131) #16
  %3133 = trunc i32 %3132 to i8
  %3134 = and i8 %3133, 1
  %3135 = xor i8 %3134, 1
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3135, i8* %3136, align 1, !tbaa !2446
  %3137 = xor i32 %3123, %3121
  %3138 = xor i32 %3137, %3124
  %3139 = lshr i32 %3138, 4
  %3140 = trunc i32 %3139 to i8
  %3141 = and i8 %3140, 1
  %3142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3141, i8* %3142, align 1, !tbaa !2447
  %3143 = icmp eq i32 %3124, 0
  %3144 = zext i1 %3143 to i8
  %3145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3144, i8* %3145, align 1, !tbaa !2448
  %3146 = lshr i32 %3124, 31
  %3147 = trunc i32 %3146 to i8
  %3148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3147, i8* %3148, align 1, !tbaa !2449
  %3149 = lshr i32 %3121, 31
  %3150 = lshr i32 %3123, 31
  %3151 = xor i32 %3146, %3149
  %3152 = xor i32 %3146, %3150
  %3153 = add nuw nsw i32 %3151, %3152
  %3154 = icmp eq i32 %3153, 2
  %3155 = zext i1 %3154 to i8
  %3156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3155, i8* %3156, align 1, !tbaa !2450
  %3157 = load i32, i32* %ECX
  %3158 = zext i32 %3157 to i64
  %3159 = load i64, i64* %PC
  %3160 = add i64 %3159, 3
  store i64 %3160, i64* %PC
  %3161 = shl i64 %3158, 32
  %3162 = ashr exact i64 %3161, 32
  store i64 %3162, i64* %RDX, align 8, !tbaa !2428
  %3163 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3164 = load i64, i64* %RAX
  %3165 = load i64, i64* %RDX
  %3166 = mul i64 %3165, 4
  %3167 = add i64 %3166, %3164
  %3168 = load i64, i64* %PC
  %3169 = add i64 %3168, 5
  store i64 %3169, i64* %PC
  %3170 = inttoptr i64 %3167 to float*
  %3171 = load float, float* %3170
  %3172 = bitcast i8* %3163 to float*
  store float %3171, float* %3172, align 1, !tbaa !2452
  %3173 = getelementptr inbounds i8, i8* %3163, i64 4
  %3174 = bitcast i8* %3173 to float*
  store float 0.000000e+00, float* %3174, align 1, !tbaa !2452
  %3175 = getelementptr inbounds i8, i8* %3163, i64 8
  %3176 = bitcast i8* %3175 to float*
  store float 0.000000e+00, float* %3176, align 1, !tbaa !2452
  %3177 = getelementptr inbounds i8, i8* %3163, i64 12
  %3178 = bitcast i8* %3177 to float*
  store float 0.000000e+00, float* %3178, align 1, !tbaa !2452
  %3179 = load i64, i64* %RBP
  %3180 = sub i64 %3179, 36
  %3181 = bitcast %union.vec128_t* %XMM0 to i8*
  %3182 = load i64, i64* %PC
  %3183 = add i64 %3182, 5
  store i64 %3183, i64* %PC
  %3184 = bitcast i8* %3181 to <2 x float>*
  %3185 = load <2 x float>, <2 x float>* %3184, align 1
  %3186 = extractelement <2 x float> %3185, i32 0
  %3187 = inttoptr i64 %3180 to float*
  store float %3186, float* %3187
  %3188 = load i64, i64* %RBP
  %3189 = sub i64 %3188, 8
  %3190 = load i64, i64* %PC
  %3191 = add i64 %3190, 4
  store i64 %3191, i64* %PC
  %3192 = inttoptr i64 %3189 to i64*
  %3193 = load i64, i64* %3192
  store i64 %3193, i64* %RAX, align 8, !tbaa !2428
  %3194 = load i64, i64* %RBP
  %3195 = sub i64 %3194, 12
  %3196 = load i64, i64* %PC
  %3197 = add i64 %3196, 3
  store i64 %3197, i64* %PC
  %3198 = inttoptr i64 %3195 to i32*
  %3199 = load i32, i32* %3198
  %3200 = zext i32 %3199 to i64
  store i64 %3200, i64* %RCX, align 8, !tbaa !2428
  %3201 = load i64, i64* %RCX
  %3202 = load i64, i64* %RBP
  %3203 = sub i64 %3202, 44
  %3204 = load i64, i64* %PC
  %3205 = add i64 %3204, 4
  store i64 %3205, i64* %PC
  %3206 = inttoptr i64 %3203 to i32*
  %3207 = load i32, i32* %3206
  %3208 = shl i64 %3201, 32
  %3209 = ashr exact i64 %3208, 32
  %3210 = sext i32 %3207 to i64
  %3211 = mul nsw i64 %3210, %3209
  %3212 = trunc i64 %3211 to i32
  %3213 = and i64 %3211, 4294967295
  store i64 %3213, i64* %RCX, align 8, !tbaa !2428
  %3214 = shl i64 %3211, 32
  %3215 = ashr exact i64 %3214, 32
  %3216 = icmp ne i64 %3215, %3211
  %3217 = zext i1 %3216 to i8
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3217, i8* %3218, align 1, !tbaa !2432
  %3219 = and i32 %3212, 255
  %3220 = call i32 @llvm.ctpop.i32(i32 %3219) #16
  %3221 = trunc i32 %3220 to i8
  %3222 = and i8 %3221, 1
  %3223 = xor i8 %3222, 1
  %3224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3223, i8* %3224, align 1, !tbaa !2446
  %3225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3225, align 1, !tbaa !2447
  %3226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3226, align 1, !tbaa !2448
  %3227 = lshr i32 %3212, 31
  %3228 = trunc i32 %3227 to i8
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3228, i8* %3229, align 1, !tbaa !2449
  %3230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3217, i8* %3230, align 1, !tbaa !2450
  %3231 = load i64, i64* %RCX
  %3232 = load i64, i64* %RBP
  %3233 = sub i64 %3232, 44
  %3234 = load i64, i64* %PC
  %3235 = add i64 %3234, 3
  store i64 %3235, i64* %PC
  %3236 = trunc i64 %3231 to i32
  %3237 = inttoptr i64 %3233 to i32*
  %3238 = load i32, i32* %3237
  %3239 = add i32 %3238, %3236
  %3240 = zext i32 %3239 to i64
  store i64 %3240, i64* %RCX, align 8, !tbaa !2428
  %3241 = icmp ult i32 %3239, %3236
  %3242 = icmp ult i32 %3239, %3238
  %3243 = or i1 %3241, %3242
  %3244 = zext i1 %3243 to i8
  %3245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3244, i8* %3245, align 1, !tbaa !2432
  %3246 = and i32 %3239, 255
  %3247 = call i32 @llvm.ctpop.i32(i32 %3246) #16
  %3248 = trunc i32 %3247 to i8
  %3249 = and i8 %3248, 1
  %3250 = xor i8 %3249, 1
  %3251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3250, i8* %3251, align 1, !tbaa !2446
  %3252 = xor i32 %3238, %3236
  %3253 = xor i32 %3252, %3239
  %3254 = lshr i32 %3253, 4
  %3255 = trunc i32 %3254 to i8
  %3256 = and i8 %3255, 1
  %3257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3256, i8* %3257, align 1, !tbaa !2447
  %3258 = icmp eq i32 %3239, 0
  %3259 = zext i1 %3258 to i8
  %3260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3259, i8* %3260, align 1, !tbaa !2448
  %3261 = lshr i32 %3239, 31
  %3262 = trunc i32 %3261 to i8
  %3263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3262, i8* %3263, align 1, !tbaa !2449
  %3264 = lshr i32 %3236, 31
  %3265 = lshr i32 %3238, 31
  %3266 = xor i32 %3261, %3264
  %3267 = xor i32 %3261, %3265
  %3268 = add nuw nsw i32 %3266, %3267
  %3269 = icmp eq i32 %3268, 2
  %3270 = zext i1 %3269 to i8
  %3271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3270, i8* %3271, align 1, !tbaa !2450
  %3272 = load i32, i32* %ECX
  %3273 = zext i32 %3272 to i64
  %3274 = load i64, i64* %PC
  %3275 = add i64 %3274, 3
  store i64 %3275, i64* %PC
  %3276 = shl i64 %3273, 32
  %3277 = ashr exact i64 %3276, 32
  store i64 %3277, i64* %RDX, align 8, !tbaa !2428
  %3278 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3279 = load i64, i64* %RAX
  %3280 = load i64, i64* %RDX
  %3281 = mul i64 %3280, 4
  %3282 = add i64 %3281, %3279
  %3283 = load i64, i64* %PC
  %3284 = add i64 %3283, 5
  store i64 %3284, i64* %PC
  %3285 = inttoptr i64 %3282 to float*
  %3286 = load float, float* %3285
  %3287 = bitcast i8* %3278 to float*
  store float %3286, float* %3287, align 1, !tbaa !2452
  %3288 = getelementptr inbounds i8, i8* %3278, i64 4
  %3289 = bitcast i8* %3288 to float*
  store float 0.000000e+00, float* %3289, align 1, !tbaa !2452
  %3290 = getelementptr inbounds i8, i8* %3278, i64 8
  %3291 = bitcast i8* %3290 to float*
  store float 0.000000e+00, float* %3291, align 1, !tbaa !2452
  %3292 = getelementptr inbounds i8, i8* %3278, i64 12
  %3293 = bitcast i8* %3292 to float*
  store float 0.000000e+00, float* %3293, align 1, !tbaa !2452
  %3294 = load i64, i64* %RBP
  %3295 = sub i64 %3294, 8
  %3296 = load i64, i64* %PC
  %3297 = add i64 %3296, 4
  store i64 %3297, i64* %PC
  %3298 = inttoptr i64 %3295 to i64*
  %3299 = load i64, i64* %3298
  store i64 %3299, i64* %RAX, align 8, !tbaa !2428
  %3300 = load i64, i64* %RBP
  %3301 = sub i64 %3300, 12
  %3302 = load i64, i64* %PC
  %3303 = add i64 %3302, 3
  store i64 %3303, i64* %PC
  %3304 = inttoptr i64 %3301 to i32*
  %3305 = load i32, i32* %3304
  %3306 = zext i32 %3305 to i64
  store i64 %3306, i64* %RCX, align 8, !tbaa !2428
  %3307 = load i64, i64* %RCX
  %3308 = load i64, i64* %RBP
  %3309 = sub i64 %3308, 44
  %3310 = load i64, i64* %PC
  %3311 = add i64 %3310, 4
  store i64 %3311, i64* %PC
  %3312 = inttoptr i64 %3309 to i32*
  %3313 = load i32, i32* %3312
  %3314 = shl i64 %3307, 32
  %3315 = ashr exact i64 %3314, 32
  %3316 = sext i32 %3313 to i64
  %3317 = mul nsw i64 %3316, %3315
  %3318 = trunc i64 %3317 to i32
  %3319 = and i64 %3317, 4294967295
  store i64 %3319, i64* %RCX, align 8, !tbaa !2428
  %3320 = shl i64 %3317, 32
  %3321 = ashr exact i64 %3320, 32
  %3322 = icmp ne i64 %3321, %3317
  %3323 = zext i1 %3322 to i8
  %3324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3323, i8* %3324, align 1, !tbaa !2432
  %3325 = and i32 %3318, 255
  %3326 = call i32 @llvm.ctpop.i32(i32 %3325) #16
  %3327 = trunc i32 %3326 to i8
  %3328 = and i8 %3327, 1
  %3329 = xor i8 %3328, 1
  %3330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3329, i8* %3330, align 1, !tbaa !2446
  %3331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3331, align 1, !tbaa !2447
  %3332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3332, align 1, !tbaa !2448
  %3333 = lshr i32 %3318, 31
  %3334 = trunc i32 %3333 to i8
  %3335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3334, i8* %3335, align 1, !tbaa !2449
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3323, i8* %3336, align 1, !tbaa !2450
  %3337 = load i64, i64* %RCX
  %3338 = load i64, i64* %RBP
  %3339 = sub i64 %3338, 52
  %3340 = load i64, i64* %PC
  %3341 = add i64 %3340, 3
  store i64 %3341, i64* %PC
  %3342 = trunc i64 %3337 to i32
  %3343 = inttoptr i64 %3339 to i32*
  %3344 = load i32, i32* %3343
  %3345 = add i32 %3344, %3342
  %3346 = zext i32 %3345 to i64
  store i64 %3346, i64* %RCX, align 8, !tbaa !2428
  %3347 = icmp ult i32 %3345, %3342
  %3348 = icmp ult i32 %3345, %3344
  %3349 = or i1 %3347, %3348
  %3350 = zext i1 %3349 to i8
  %3351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3350, i8* %3351, align 1, !tbaa !2432
  %3352 = and i32 %3345, 255
  %3353 = call i32 @llvm.ctpop.i32(i32 %3352) #16
  %3354 = trunc i32 %3353 to i8
  %3355 = and i8 %3354, 1
  %3356 = xor i8 %3355, 1
  %3357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3356, i8* %3357, align 1, !tbaa !2446
  %3358 = xor i32 %3344, %3342
  %3359 = xor i32 %3358, %3345
  %3360 = lshr i32 %3359, 4
  %3361 = trunc i32 %3360 to i8
  %3362 = and i8 %3361, 1
  %3363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3362, i8* %3363, align 1, !tbaa !2447
  %3364 = icmp eq i32 %3345, 0
  %3365 = zext i1 %3364 to i8
  %3366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3365, i8* %3366, align 1, !tbaa !2448
  %3367 = lshr i32 %3345, 31
  %3368 = trunc i32 %3367 to i8
  %3369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3368, i8* %3369, align 1, !tbaa !2449
  %3370 = lshr i32 %3342, 31
  %3371 = lshr i32 %3344, 31
  %3372 = xor i32 %3367, %3370
  %3373 = xor i32 %3367, %3371
  %3374 = add nuw nsw i32 %3372, %3373
  %3375 = icmp eq i32 %3374, 2
  %3376 = zext i1 %3375 to i8
  %3377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3376, i8* %3377, align 1, !tbaa !2450
  %3378 = load i32, i32* %ECX
  %3379 = zext i32 %3378 to i64
  %3380 = load i64, i64* %PC
  %3381 = add i64 %3380, 3
  store i64 %3381, i64* %PC
  %3382 = shl i64 %3379, 32
  %3383 = ashr exact i64 %3382, 32
  store i64 %3383, i64* %RDX, align 8, !tbaa !2428
  %3384 = load i64, i64* %RAX
  %3385 = load i64, i64* %RDX
  %3386 = mul i64 %3385, 4
  %3387 = add i64 %3386, %3384
  %3388 = bitcast %union.vec128_t* %XMM0 to i8*
  %3389 = load i64, i64* %PC
  %3390 = add i64 %3389, 5
  store i64 %3390, i64* %PC
  %3391 = bitcast i8* %3388 to <2 x float>*
  %3392 = load <2 x float>, <2 x float>* %3391, align 1
  %3393 = extractelement <2 x float> %3392, i32 0
  %3394 = inttoptr i64 %3387 to float*
  store float %3393, float* %3394
  %3395 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3396 = load i64, i64* %RBP
  %3397 = sub i64 %3396, 36
  %3398 = load i64, i64* %PC
  %3399 = add i64 %3398, 5
  store i64 %3399, i64* %PC
  %3400 = inttoptr i64 %3397 to float*
  %3401 = load float, float* %3400
  %3402 = bitcast i8* %3395 to float*
  store float %3401, float* %3402, align 1, !tbaa !2452
  %3403 = getelementptr inbounds i8, i8* %3395, i64 4
  %3404 = bitcast i8* %3403 to float*
  store float 0.000000e+00, float* %3404, align 1, !tbaa !2452
  %3405 = getelementptr inbounds i8, i8* %3395, i64 8
  %3406 = bitcast i8* %3405 to float*
  store float 0.000000e+00, float* %3406, align 1, !tbaa !2452
  %3407 = getelementptr inbounds i8, i8* %3395, i64 12
  %3408 = bitcast i8* %3407 to float*
  store float 0.000000e+00, float* %3408, align 1, !tbaa !2452
  %3409 = load i64, i64* %RBP
  %3410 = sub i64 %3409, 8
  %3411 = load i64, i64* %PC
  %3412 = add i64 %3411, 4
  store i64 %3412, i64* %PC
  %3413 = inttoptr i64 %3410 to i64*
  %3414 = load i64, i64* %3413
  store i64 %3414, i64* %RAX, align 8, !tbaa !2428
  %3415 = load i64, i64* %RBP
  %3416 = sub i64 %3415, 12
  %3417 = load i64, i64* %PC
  %3418 = add i64 %3417, 3
  store i64 %3418, i64* %PC
  %3419 = inttoptr i64 %3416 to i32*
  %3420 = load i32, i32* %3419
  %3421 = zext i32 %3420 to i64
  store i64 %3421, i64* %RCX, align 8, !tbaa !2428
  %3422 = load i64, i64* %RCX
  %3423 = load i64, i64* %RBP
  %3424 = sub i64 %3423, 44
  %3425 = load i64, i64* %PC
  %3426 = add i64 %3425, 4
  store i64 %3426, i64* %PC
  %3427 = inttoptr i64 %3424 to i32*
  %3428 = load i32, i32* %3427
  %3429 = shl i64 %3422, 32
  %3430 = ashr exact i64 %3429, 32
  %3431 = sext i32 %3428 to i64
  %3432 = mul nsw i64 %3431, %3430
  %3433 = trunc i64 %3432 to i32
  %3434 = and i64 %3432, 4294967295
  store i64 %3434, i64* %RCX, align 8, !tbaa !2428
  %3435 = shl i64 %3432, 32
  %3436 = ashr exact i64 %3435, 32
  %3437 = icmp ne i64 %3436, %3432
  %3438 = zext i1 %3437 to i8
  %3439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3438, i8* %3439, align 1, !tbaa !2432
  %3440 = and i32 %3433, 255
  %3441 = call i32 @llvm.ctpop.i32(i32 %3440) #16
  %3442 = trunc i32 %3441 to i8
  %3443 = and i8 %3442, 1
  %3444 = xor i8 %3443, 1
  %3445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3444, i8* %3445, align 1, !tbaa !2446
  %3446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3446, align 1, !tbaa !2447
  %3447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3447, align 1, !tbaa !2448
  %3448 = lshr i32 %3433, 31
  %3449 = trunc i32 %3448 to i8
  %3450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3449, i8* %3450, align 1, !tbaa !2449
  %3451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3438, i8* %3451, align 1, !tbaa !2450
  %3452 = load i64, i64* %RCX
  %3453 = load i64, i64* %RBP
  %3454 = sub i64 %3453, 44
  %3455 = load i64, i64* %PC
  %3456 = add i64 %3455, 3
  store i64 %3456, i64* %PC
  %3457 = trunc i64 %3452 to i32
  %3458 = inttoptr i64 %3454 to i32*
  %3459 = load i32, i32* %3458
  %3460 = add i32 %3459, %3457
  %3461 = zext i32 %3460 to i64
  store i64 %3461, i64* %RCX, align 8, !tbaa !2428
  %3462 = icmp ult i32 %3460, %3457
  %3463 = icmp ult i32 %3460, %3459
  %3464 = or i1 %3462, %3463
  %3465 = zext i1 %3464 to i8
  %3466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3465, i8* %3466, align 1, !tbaa !2432
  %3467 = and i32 %3460, 255
  %3468 = call i32 @llvm.ctpop.i32(i32 %3467) #16
  %3469 = trunc i32 %3468 to i8
  %3470 = and i8 %3469, 1
  %3471 = xor i8 %3470, 1
  %3472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3471, i8* %3472, align 1, !tbaa !2446
  %3473 = xor i32 %3459, %3457
  %3474 = xor i32 %3473, %3460
  %3475 = lshr i32 %3474, 4
  %3476 = trunc i32 %3475 to i8
  %3477 = and i8 %3476, 1
  %3478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3477, i8* %3478, align 1, !tbaa !2447
  %3479 = icmp eq i32 %3460, 0
  %3480 = zext i1 %3479 to i8
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3480, i8* %3481, align 1, !tbaa !2448
  %3482 = lshr i32 %3460, 31
  %3483 = trunc i32 %3482 to i8
  %3484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3483, i8* %3484, align 1, !tbaa !2449
  %3485 = lshr i32 %3457, 31
  %3486 = lshr i32 %3459, 31
  %3487 = xor i32 %3482, %3485
  %3488 = xor i32 %3482, %3486
  %3489 = add nuw nsw i32 %3487, %3488
  %3490 = icmp eq i32 %3489, 2
  %3491 = zext i1 %3490 to i8
  %3492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3491, i8* %3492, align 1, !tbaa !2450
  %3493 = load i32, i32* %ECX
  %3494 = zext i32 %3493 to i64
  %3495 = load i64, i64* %PC
  %3496 = add i64 %3495, 3
  store i64 %3496, i64* %PC
  %3497 = shl i64 %3494, 32
  %3498 = ashr exact i64 %3497, 32
  store i64 %3498, i64* %RDX, align 8, !tbaa !2428
  %3499 = load i64, i64* %RAX
  %3500 = load i64, i64* %RDX
  %3501 = mul i64 %3500, 4
  %3502 = add i64 %3501, %3499
  %3503 = bitcast %union.vec128_t* %XMM0 to i8*
  %3504 = load i64, i64* %PC
  %3505 = add i64 %3504, 5
  store i64 %3505, i64* %PC
  %3506 = bitcast i8* %3503 to <2 x float>*
  %3507 = load <2 x float>, <2 x float>* %3506, align 1
  %3508 = extractelement <2 x float> %3507, i32 0
  %3509 = inttoptr i64 %3502 to float*
  store float %3508, float* %3509
  br label %block_401a50

block_4019d7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %3510 = load i64, i64* %PC
  %3511 = add i64 %3510, 11
  %3512 = load i64, i64* %PC
  %3513 = add i64 %3512, 6
  %3514 = load i64, i64* %PC
  %3515 = add i64 %3514, 6
  store i64 %3515, i64* %PC
  %3516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3517 = load i8, i8* %3516, align 1, !tbaa !2446
  store i8 %3517, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3519 = icmp ne i8 %3517, 0
  %3520 = select i1 %3519, i64 %3511, i64 %3513
  store i64 %3520, i64* %3518, align 8, !tbaa !2428
  %3521 = load i8, i8* %BRANCH_TAKEN
  %3522 = icmp eq i8 %3521, 1
  br i1 %3522, label %block_4019e2, label %block_4019dd
}

; Function Attrs: noinline
define %struct.Memory* @sub_4027b0_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4027b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %13 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %12, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %13 to %"class.std::bitset"*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %15 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %14, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %15 to %"class.std::bitset"*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %17 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %16, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %17 to %"class.std::bitset"*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %19 to %union.vec128_t*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %21 to %union.vec128_t*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %23 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %22, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %23 to %union.vec128_t*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %35 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %36 = bitcast %union.vec128_t* %XMM1 to i8*
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC
  %39 = bitcast i8* %35 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = getelementptr inbounds i8, i8* %35, i64 8
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = bitcast i8* %36 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = getelementptr inbounds i8, i8* %36, i64 8
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = xor i64 %45, %40
  %50 = xor i64 %48, %43
  %51 = trunc i64 %49 to i32
  %52 = lshr i64 %49, 32
  %53 = trunc i64 %52 to i32
  %54 = bitcast i8* %34 to i32*
  store i32 %51, i32* %54, align 1, !tbaa !2456
  %55 = getelementptr inbounds i8, i8* %34, i64 4
  %56 = bitcast i8* %55 to i32*
  store i32 %53, i32* %56, align 1, !tbaa !2456
  %57 = trunc i64 %50 to i32
  %58 = getelementptr inbounds i8, i8* %34, i64 8
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !2456
  %60 = lshr i64 %50, 32
  %61 = trunc i64 %60 to i32
  %62 = getelementptr inbounds i8, i8* %34, i64 12
  %63 = bitcast i8* %62 to i32*
  store i32 %61, i32* %63, align 1, !tbaa !2456
  %64 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 8
  store i64 %66, i64* %PC
  %67 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 16) to float*)
  %68 = bitcast i8* %64 to float*
  store float %67, float* %68, align 1, !tbaa !2452
  %69 = getelementptr inbounds i8, i8* %64, i64 4
  %70 = bitcast i8* %69 to float*
  store float 0.000000e+00, float* %70, align 1, !tbaa !2452
  %71 = getelementptr inbounds i8, i8* %64, i64 8
  %72 = bitcast i8* %71 to float*
  store float 0.000000e+00, float* %72, align 1, !tbaa !2452
  %73 = getelementptr inbounds i8, i8* %64, i64 12
  %74 = bitcast i8* %73 to float*
  store float 0.000000e+00, float* %74, align 1, !tbaa !2452
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 4
  %77 = bitcast %union.vec128_t* %XMM0 to i8*
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 5
  store i64 %79, i64* %PC
  %80 = bitcast i8* %77 to <2 x float>*
  %81 = load <2 x float>, <2 x float>* %80, align 1
  %82 = extractelement <2 x float> %81, i32 0
  %83 = inttoptr i64 %76 to float*
  store float %82, float* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = bitcast %union.vec128_t* %XMM2 to i8*
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 5
  store i64 %88, i64* %PC
  %89 = bitcast i8* %86 to <2 x float>*
  %90 = load <2 x float>, <2 x float>* %89, align 1
  %91 = extractelement <2 x float> %90, i32 0
  %92 = inttoptr i64 %85 to float*
  store float %91, float* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 20
  %95 = bitcast %union.vec128_t* %XMM1 to i8*
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  %98 = bitcast i8* %95 to <2 x float>*
  %99 = load <2 x float>, <2 x float>* %98, align 1
  %100 = extractelement <2 x float> %99, i32 0
  %101 = inttoptr i64 %94 to float*
  store float %100, float* %101
  br label %block_4027ce

block_402836:                                     ; preds = %block_4027e0, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.0 = phi %struct.Memory* [ %293, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %293, %block_4027e0 ]
  %102 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 20
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 5
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to float*
  %108 = load float, float* %107
  %109 = fpext float %108 to double
  %110 = bitcast i8* %102 to double*
  store double %109, double* %110, align 1, !tbaa !2454
  %111 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 4
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to float*
  %117 = load float, float* %116
  %118 = fpext float %117 to double
  %119 = bitcast i8* %111 to double*
  store double %118, double* %119, align 1, !tbaa !2454
  %120 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 7
  store i64 %122, i64* %PC
  %123 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %124 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %125 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %126 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %127 = bitcast i8* %120 to float*
  store float %123, float* %127, align 1, !tbaa !2452
  %128 = getelementptr inbounds i8, i8* %120, i64 4
  %129 = bitcast i8* %128 to float*
  store float %124, float* %129, align 1, !tbaa !2452
  %130 = getelementptr inbounds i8, i8* %120, i64 8
  %131 = bitcast i8* %130 to float*
  store float %125, float* %131, align 1, !tbaa !2452
  %132 = getelementptr inbounds i8, i8* %120, i64 12
  %133 = bitcast i8* %132 to float*
  store float %126, float* %133, align 1, !tbaa !2452
  %134 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %135 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %136 = bitcast %union.vec128_t* %XMM2 to i8*
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC
  %139 = bitcast i8* %135 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = getelementptr inbounds i8, i8* %135, i64 8
  %142 = bitcast i8* %141 to i64*
  %143 = load i64, i64* %142, align 1
  %144 = bitcast i8* %136 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = getelementptr inbounds i8, i8* %136, i64 8
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %147, align 1
  %149 = and i64 %145, %140
  %150 = and i64 %148, %143
  %151 = trunc i64 %149 to i32
  %152 = lshr i64 %149, 32
  %153 = trunc i64 %152 to i32
  %154 = bitcast i8* %134 to i32*
  store i32 %151, i32* %154, align 1, !tbaa !2456
  %155 = getelementptr inbounds i8, i8* %134, i64 4
  %156 = bitcast i8* %155 to i32*
  store i32 %153, i32* %156, align 1, !tbaa !2456
  %157 = trunc i64 %150 to i32
  %158 = getelementptr inbounds i8, i8* %134, i64 8
  %159 = bitcast i8* %158 to i32*
  store i32 %157, i32* %159, align 1, !tbaa !2456
  %160 = lshr i64 %150, 32
  %161 = trunc i64 %160 to i32
  %162 = getelementptr inbounds i8, i8* %134, i64 12
  %163 = bitcast i8* %162 to i32*
  store i32 %161, i32* %163, align 1, !tbaa !2456
  %164 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %165 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %166 = bitcast %union.vec128_t* %XMM1 to i8*
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = bitcast i8* %165 to double*
  %170 = load double, double* %169, align 1
  %171 = getelementptr inbounds i8, i8* %165, i64 8
  %172 = bitcast i8* %171 to i64*
  %173 = load i64, i64* %172, align 1
  %174 = bitcast i8* %166 to double*
  %175 = load double, double* %174, align 1
  %176 = fmul double %170, %175
  %177 = bitcast i8* %164 to double*
  store double %176, double* %177, align 1, !tbaa !2454
  %178 = getelementptr inbounds i8, i8* %164, i64 8
  %179 = bitcast i8* %178 to i64*
  store i64 %173, i64* %179, align 1, !tbaa !2454
  %180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %181 = bitcast %union.vec128_t* %XMM0 to i8*
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 4
  store i64 %183, i64* %PC
  %184 = bitcast i8* %180 to <2 x i32>*
  %185 = load <2 x i32>, <2 x i32>* %184, align 1
  %186 = getelementptr inbounds i8, i8* %180, i64 8
  %187 = bitcast i8* %186 to <2 x i32>*
  %188 = load <2 x i32>, <2 x i32>* %187, align 1
  %189 = bitcast i8* %181 to double*
  %190 = load double, double* %189, align 1
  %191 = fptrunc double %190 to float
  %192 = bitcast i8* %180 to float*
  store float %191, float* %192, align 1, !tbaa !2452
  %193 = extractelement <2 x i32> %185, i32 1
  %194 = getelementptr inbounds i8, i8* %180, i64 4
  %195 = bitcast i8* %194 to i32*
  store i32 %193, i32* %195, align 1, !tbaa !2452
  %196 = extractelement <2 x i32> %188, i32 0
  %197 = bitcast i8* %186 to i32*
  store i32 %196, i32* %197, align 1, !tbaa !2452
  %198 = extractelement <2 x i32> %188, i32 1
  %199 = getelementptr inbounds i8, i8* %180, i64 12
  %200 = bitcast i8* %199 to i32*
  store i32 %198, i32* %200, align 1, !tbaa !2452
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 1
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %204 = load i64, i64* %203, align 8, !tbaa !2428
  %205 = add i64 %204, 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206
  store i64 %207, i64* %RBP, align 8, !tbaa !2428
  store i64 %205, i64* %203, align 8, !tbaa !2428
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 1
  store i64 %209, i64* %PC
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %212 = load i64, i64* %211, align 8, !tbaa !2428
  %213 = inttoptr i64 %212 to i64*
  %214 = load i64, i64* %213
  store i64 %214, i64* %210, align 8, !tbaa !2428
  %215 = add i64 %212, 8
  store i64 %215, i64* %211, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4027ce:                                     ; preds = %block_4027e6, %block_4027b0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4027b0 ], [ %293, %block_4027e6 ]
  %216 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %217 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %218 = bitcast %union.vec128_t* %XMM0 to i8*
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 3
  store i64 %220, i64* %PC
  %221 = bitcast i8* %217 to i64*
  %222 = load i64, i64* %221, align 1
  %223 = getelementptr inbounds i8, i8* %217, i64 8
  %224 = bitcast i8* %223 to i64*
  %225 = load i64, i64* %224, align 1
  %226 = bitcast i8* %218 to i64*
  %227 = load i64, i64* %226, align 1
  %228 = getelementptr inbounds i8, i8* %218, i64 8
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 1
  %231 = xor i64 %227, %222
  %232 = xor i64 %230, %225
  %233 = trunc i64 %231 to i32
  %234 = lshr i64 %231, 32
  %235 = trunc i64 %234 to i32
  %236 = bitcast i8* %216 to i32*
  store i32 %233, i32* %236, align 1, !tbaa !2456
  %237 = getelementptr inbounds i8, i8* %216, i64 4
  %238 = bitcast i8* %237 to i32*
  store i32 %235, i32* %238, align 1, !tbaa !2456
  %239 = trunc i64 %232 to i32
  %240 = getelementptr inbounds i8, i8* %216, i64 8
  %241 = bitcast i8* %240 to i32*
  store i32 %239, i32* %241, align 1, !tbaa !2456
  %242 = lshr i64 %232, 32
  %243 = trunc i64 %242 to i32
  %244 = getelementptr inbounds i8, i8* %216, i64 12
  %245 = bitcast i8* %244 to i32*
  store i32 %243, i32* %245, align 1, !tbaa !2456
  %246 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 20
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 5
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %248 to float*
  %252 = load float, float* %251
  %253 = fpext float %252 to double
  %254 = bitcast i8* %246 to double*
  store double %253, double* %254, align 1, !tbaa !2454
  %255 = bitcast %union.vec128_t* %XMM1 to i8*
  %256 = bitcast %union.vec128_t* %XMM0 to i8*
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = bitcast i8* %255 to double*
  %260 = load double, double* %259, align 1
  %261 = bitcast i8* %256 to double*
  %262 = load double, double* %261, align 1
  %263 = fcmp uno double %260, %262
  br i1 %263, label %264, label %276

; <label>:264:                                    ; preds = %block_4027ce
  %265 = fadd double %260, %262
  %266 = bitcast double %265 to i64
  %267 = and i64 %266, 9221120237041090560
  %268 = icmp eq i64 %267, 9218868437227405312
  %269 = and i64 %266, 2251799813685247
  %270 = icmp ne i64 %269, 0
  %271 = and i1 %268, %270
  br i1 %271, label %272, label %282

; <label>:272:                                    ; preds = %264
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %274 = load i64, i64* %273, align 8, !tbaa !2428
  %275 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %274, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:276:                                    ; preds = %block_4027ce
  %277 = fcmp ogt double %260, %262
  br i1 %277, label %282, label %278

; <label>:278:                                    ; preds = %276
  %279 = fcmp olt double %260, %262
  br i1 %279, label %282, label %280

; <label>:280:                                    ; preds = %278
  %281 = fcmp oeq double %260, %262
  br i1 %281, label %282, label %289

; <label>:282:                                    ; preds = %280, %278, %276, %264
  %283 = phi i8 [ 0, %276 ], [ 0, %278 ], [ 1, %280 ], [ 1, %264 ]
  %284 = phi i8 [ 0, %276 ], [ 0, %278 ], [ 0, %280 ], [ 1, %264 ]
  %285 = phi i8 [ 0, %276 ], [ 1, %278 ], [ 0, %280 ], [ 1, %264 ]
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %283, i8* %286, align 1, !tbaa !2451
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %284, i8* %287, align 1, !tbaa !2451
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %288, align 1, !tbaa !2451
  br label %289

; <label>:289:                                    ; preds = %282, %280
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %290, align 1, !tbaa !2451
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %291, align 1, !tbaa !2451
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %292, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %272, %289
  %293 = phi %struct.Memory* [ %275, %272 ], [ %MEMORY.1, %289 ]
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 92
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 6
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 6
  store i64 %299, i64* %PC
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %301 = load i8, i8* %300, align 1, !tbaa !2448
  %302 = icmp eq i8 %301, 0
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %305 = select i1 %302, i64 %295, i64 %297
  store i64 %305, i64* %304, align 8, !tbaa !2428
  %306 = load i8, i8* %BRANCH_TAKEN
  %307 = icmp eq i8 %306, 1
  br i1 %307, label %block_402836, label %block_4027e0

block_4027e6:                                     ; preds = %block_4027e0
  %308 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 8
  store i64 %310, i64* %PC
  %311 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 80) to double*)
  %312 = bitcast i8* %308 to double*
  store double %311, double* %312, align 1, !tbaa !2454
  %313 = getelementptr inbounds i8, i8* %308, i64 8
  %314 = bitcast i8* %313 to double*
  store double 0.000000e+00, double* %314, align 1, !tbaa !2454
  %315 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 8
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 5
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to float*
  %321 = load float, float* %320
  %322 = fpext float %321 to double
  %323 = bitcast i8* %315 to double*
  store double %322, double* %323, align 1, !tbaa !2454
  %324 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %325 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %326 = bitcast %union.vec128_t* %XMM0 to i8*
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = bitcast i8* %325 to double*
  %330 = load double, double* %329, align 1
  %331 = getelementptr inbounds i8, i8* %325, i64 8
  %332 = bitcast i8* %331 to i64*
  %333 = load i64, i64* %332, align 1
  %334 = bitcast i8* %326 to double*
  %335 = load double, double* %334, align 1
  %336 = fsub double %330, %335
  %337 = bitcast i8* %324 to double*
  store double %336, double* %337, align 1, !tbaa !2454
  %338 = getelementptr inbounds i8, i8* %324, i64 8
  %339 = bitcast i8* %338 to i64*
  store i64 %333, i64* %339, align 1, !tbaa !2454
  %340 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %341 = bitcast %union.vec128_t* %XMM1 to i8*
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = bitcast i8* %340 to <2 x i32>*
  %345 = load <2 x i32>, <2 x i32>* %344, align 1
  %346 = getelementptr inbounds i8, i8* %340, i64 8
  %347 = bitcast i8* %346 to <2 x i32>*
  %348 = load <2 x i32>, <2 x i32>* %347, align 1
  %349 = bitcast i8* %341 to double*
  %350 = load double, double* %349, align 1
  %351 = fptrunc double %350 to float
  %352 = bitcast i8* %340 to float*
  store float %351, float* %352, align 1, !tbaa !2452
  %353 = extractelement <2 x i32> %345, i32 1
  %354 = getelementptr inbounds i8, i8* %340, i64 4
  %355 = bitcast i8* %354 to i32*
  store i32 %353, i32* %355, align 1, !tbaa !2452
  %356 = extractelement <2 x i32> %348, i32 0
  %357 = bitcast i8* %346 to i32*
  store i32 %356, i32* %357, align 1, !tbaa !2452
  %358 = extractelement <2 x i32> %348, i32 1
  %359 = getelementptr inbounds i8, i8* %340, i64 12
  %360 = bitcast i8* %359 to i32*
  store i32 %358, i32* %360, align 1, !tbaa !2452
  %361 = load i64, i64* %RBP
  %362 = sub i64 %361, 12
  %363 = bitcast %union.vec128_t* %XMM1 to i8*
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  %366 = bitcast i8* %363 to <2 x float>*
  %367 = load <2 x float>, <2 x float>* %366, align 1
  %368 = extractelement <2 x float> %367, i32 0
  %369 = inttoptr i64 %362 to float*
  store float %368, float* %369
  %370 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 12
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 5
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to float*
  %376 = load float, float* %375
  %377 = bitcast i8* %370 to float*
  store float %376, float* %377, align 1, !tbaa !2452
  %378 = getelementptr inbounds i8, i8* %370, i64 4
  %379 = bitcast i8* %378 to float*
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  %380 = getelementptr inbounds i8, i8* %370, i64 8
  %381 = bitcast i8* %380 to float*
  store float 0.000000e+00, float* %381, align 1, !tbaa !2452
  %382 = getelementptr inbounds i8, i8* %370, i64 12
  %383 = bitcast i8* %382 to float*
  store float 0.000000e+00, float* %383, align 1, !tbaa !2452
  %384 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %385 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 12
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 5
  store i64 %389, i64* %PC
  %390 = bitcast i8* %385 to <2 x float>*
  %391 = load <2 x float>, <2 x float>* %390, align 1
  %392 = getelementptr inbounds i8, i8* %385, i64 8
  %393 = bitcast i8* %392 to <2 x i32>*
  %394 = load <2 x i32>, <2 x i32>* %393, align 1
  %395 = inttoptr i64 %387 to float*
  %396 = load float, float* %395
  %397 = extractelement <2 x float> %391, i32 0
  %398 = fadd float %397, %396
  %399 = bitcast i8* %384 to float*
  store float %398, float* %399, align 1, !tbaa !2452
  %400 = bitcast <2 x float> %391 to <2 x i32>
  %401 = extractelement <2 x i32> %400, i32 1
  %402 = getelementptr inbounds i8, i8* %384, i64 4
  %403 = bitcast i8* %402 to i32*
  store i32 %401, i32* %403, align 1, !tbaa !2452
  %404 = extractelement <2 x i32> %394, i32 0
  %405 = getelementptr inbounds i8, i8* %384, i64 8
  %406 = bitcast i8* %405 to i32*
  store i32 %404, i32* %406, align 1, !tbaa !2452
  %407 = extractelement <2 x i32> %394, i32 1
  %408 = getelementptr inbounds i8, i8* %384, i64 12
  %409 = bitcast i8* %408 to i32*
  store i32 %407, i32* %409, align 1, !tbaa !2452
  %410 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %411 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %412 = load i64, i64* %RBP
  %413 = sub i64 %412, 12
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 5
  store i64 %415, i64* %PC
  %416 = bitcast i8* %411 to <2 x float>*
  %417 = load <2 x float>, <2 x float>* %416, align 1
  %418 = getelementptr inbounds i8, i8* %411, i64 8
  %419 = bitcast i8* %418 to <2 x i32>*
  %420 = load <2 x i32>, <2 x i32>* %419, align 1
  %421 = inttoptr i64 %413 to float*
  %422 = load float, float* %421
  %423 = extractelement <2 x float> %417, i32 0
  %424 = fadd float %423, %422
  %425 = bitcast i8* %410 to float*
  store float %424, float* %425, align 1, !tbaa !2452
  %426 = bitcast <2 x float> %417 to <2 x i32>
  %427 = extractelement <2 x i32> %426, i32 1
  %428 = getelementptr inbounds i8, i8* %410, i64 4
  %429 = bitcast i8* %428 to i32*
  store i32 %427, i32* %429, align 1, !tbaa !2452
  %430 = extractelement <2 x i32> %420, i32 0
  %431 = getelementptr inbounds i8, i8* %410, i64 8
  %432 = bitcast i8* %431 to i32*
  store i32 %430, i32* %432, align 1, !tbaa !2452
  %433 = extractelement <2 x i32> %420, i32 1
  %434 = getelementptr inbounds i8, i8* %410, i64 12
  %435 = bitcast i8* %434 to i32*
  store i32 %433, i32* %435, align 1, !tbaa !2452
  %436 = load i64, i64* %RBP
  %437 = sub i64 %436, 16
  %438 = bitcast %union.vec128_t* %XMM1 to i8*
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 5
  store i64 %440, i64* %PC
  %441 = bitcast i8* %438 to <2 x float>*
  %442 = load <2 x float>, <2 x float>* %441, align 1
  %443 = extractelement <2 x float> %442, i32 0
  %444 = inttoptr i64 %437 to float*
  store float %443, float* %444
  %445 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 16
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 5
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to float*
  %451 = load float, float* %450
  %452 = fpext float %451 to double
  %453 = bitcast i8* %445 to double*
  store double %452, double* %453, align 1, !tbaa !2454
  %454 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %455 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %456 = bitcast %union.vec128_t* %XMM0 to i8*
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 4
  store i64 %458, i64* %PC
  %459 = bitcast i8* %455 to double*
  %460 = load double, double* %459, align 1
  %461 = getelementptr inbounds i8, i8* %455, i64 8
  %462 = bitcast i8* %461 to i64*
  %463 = load i64, i64* %462, align 1
  %464 = bitcast i8* %456 to double*
  %465 = load double, double* %464, align 1
  %466 = fsub double %460, %465
  %467 = bitcast i8* %454 to double*
  store double %466, double* %467, align 1, !tbaa !2454
  %468 = getelementptr inbounds i8, i8* %454, i64 8
  %469 = bitcast i8* %468 to i64*
  store i64 %463, i64* %469, align 1, !tbaa !2454
  %470 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 7
  store i64 %472, i64* %PC
  %473 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %474 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %475 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %476 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %477 = bitcast i8* %470 to float*
  store float %473, float* %477, align 1, !tbaa !2452
  %478 = getelementptr inbounds i8, i8* %470, i64 4
  %479 = bitcast i8* %478 to float*
  store float %474, float* %479, align 1, !tbaa !2452
  %480 = getelementptr inbounds i8, i8* %470, i64 8
  %481 = bitcast i8* %480 to float*
  store float %475, float* %481, align 1, !tbaa !2452
  %482 = getelementptr inbounds i8, i8* %470, i64 12
  %483 = bitcast i8* %482 to float*
  store float %476, float* %483, align 1, !tbaa !2452
  %484 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %485 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %486 = bitcast %union.vec128_t* %XMM0 to i8*
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = bitcast i8* %485 to i64*
  %490 = load i64, i64* %489, align 1
  %491 = getelementptr inbounds i8, i8* %485, i64 8
  %492 = bitcast i8* %491 to i64*
  %493 = load i64, i64* %492, align 1
  %494 = bitcast i8* %486 to i64*
  %495 = load i64, i64* %494, align 1
  %496 = getelementptr inbounds i8, i8* %486, i64 8
  %497 = bitcast i8* %496 to i64*
  %498 = load i64, i64* %497, align 1
  %499 = and i64 %495, %490
  %500 = and i64 %498, %493
  %501 = trunc i64 %499 to i32
  %502 = lshr i64 %499, 32
  %503 = trunc i64 %502 to i32
  %504 = bitcast i8* %484 to i32*
  store i32 %501, i32* %504, align 1, !tbaa !2456
  %505 = getelementptr inbounds i8, i8* %484, i64 4
  %506 = bitcast i8* %505 to i32*
  store i32 %503, i32* %506, align 1, !tbaa !2456
  %507 = trunc i64 %500 to i32
  %508 = getelementptr inbounds i8, i8* %484, i64 8
  %509 = bitcast i8* %508 to i32*
  store i32 %507, i32* %509, align 1, !tbaa !2456
  %510 = lshr i64 %500, 32
  %511 = trunc i64 %510 to i32
  %512 = getelementptr inbounds i8, i8* %484, i64 12
  %513 = bitcast i8* %512 to i32*
  store i32 %511, i32* %513, align 1, !tbaa !2456
  %514 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %515 = bitcast %union.vec128_t* %XMM1 to i8*
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  %518 = bitcast i8* %514 to <2 x i32>*
  %519 = load <2 x i32>, <2 x i32>* %518, align 1
  %520 = getelementptr inbounds i8, i8* %514, i64 8
  %521 = bitcast i8* %520 to <2 x i32>*
  %522 = load <2 x i32>, <2 x i32>* %521, align 1
  %523 = bitcast i8* %515 to double*
  %524 = load double, double* %523, align 1
  %525 = fptrunc double %524 to float
  %526 = bitcast i8* %514 to float*
  store float %525, float* %526, align 1, !tbaa !2452
  %527 = extractelement <2 x i32> %519, i32 1
  %528 = getelementptr inbounds i8, i8* %514, i64 4
  %529 = bitcast i8* %528 to i32*
  store i32 %527, i32* %529, align 1, !tbaa !2452
  %530 = extractelement <2 x i32> %522, i32 0
  %531 = bitcast i8* %520 to i32*
  store i32 %530, i32* %531, align 1, !tbaa !2452
  %532 = extractelement <2 x i32> %522, i32 1
  %533 = getelementptr inbounds i8, i8* %514, i64 12
  %534 = bitcast i8* %533 to i32*
  store i32 %532, i32* %534, align 1, !tbaa !2452
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 20
  %537 = bitcast %union.vec128_t* %XMM0 to i8*
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 5
  store i64 %539, i64* %PC
  %540 = bitcast i8* %537 to <2 x float>*
  %541 = load <2 x float>, <2 x float>* %540, align 1
  %542 = extractelement <2 x float> %541, i32 0
  %543 = inttoptr i64 %536 to float*
  store float %542, float* %543
  %544 = load i64, i64* %PC
  %545 = sub i64 %544, 99
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %545, i64* %548, align 8, !tbaa !2428
  br label %block_4027ce

block_4027e0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 86
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 6
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 6
  store i64 %554, i64* %PC
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %556 = load i8, i8* %555, align 1, !tbaa !2446
  store i8 %556, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %558 = icmp ne i8 %556, 0
  %559 = select i1 %558, i64 %550, i64 %552
  store i64 %559, i64* %557, align 8, !tbaa !2428
  %560 = load i8, i8* %BRANCH_TAKEN
  %561 = icmp eq i8 %560, 1
  br i1 %561, label %block_402836, label %block_4027e6
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c30_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c30:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 17
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %R8D = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 19
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %R9D = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 7
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 9
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RDI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 13
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RSP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 15
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RBP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 17
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R8 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = sub i64 %66, 96
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  %70 = icmp ult i64 %66, 96
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %71, i8* %72, align 1, !tbaa !2432
  %73 = trunc i64 %69 to i32
  %74 = and i32 %73, 255
  %75 = call i32 @llvm.ctpop.i32(i32 %74) #16
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %78, i8* %79, align 1, !tbaa !2446
  %80 = xor i64 96, %66
  %81 = xor i64 %80, %69
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %69, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %69, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %66, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 8
  %100 = load i64, i64* %RDI
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 12
  %106 = load i32, i32* %ESI
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 3
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %105 to i32*
  store i32 %106, i32* %110
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 16
  %113 = load i32, i32* %EDX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 24
  %120 = load i64, i64* %RCX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  %124 = load i64, i64* %RBP
  %125 = sub i64 %124, 32
  %126 = load i64, i64* %R8
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 36
  %132 = load i32, i32* %R9D
  %133 = zext i32 %132 to i64
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %131 to i32*
  store i32 %132, i32* %136
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 16
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  %142 = load i32, i32* %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RDX, align 8, !tbaa !2428
  %144 = load i64, i64* %RDX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  %147 = trunc i64 %144 to i32
  %148 = sub i32 %147, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RDX, align 8, !tbaa !2428
  %150 = icmp ult i32 %147, 1
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2432
  %153 = and i32 %148, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2446
  %159 = xor i64 1, %144
  %160 = trunc i64 %159 to i32
  %161 = xor i32 %160, %148
  %162 = lshr i32 %161, 4
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2447
  %166 = icmp eq i32 %148, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2448
  %169 = lshr i32 %148, 31
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2449
  %172 = lshr i32 %147, 31
  %173 = xor i32 %169, %172
  %174 = add nuw nsw i32 %173, %172
  %175 = icmp eq i32 %174, 2
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %176, i8* %177, align 1, !tbaa !2450
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 56
  %180 = load i32, i32* %EDX
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %179 to i32*
  store i32 %180, i32* %184
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 36
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %191, align 1, !tbaa !2432
  %192 = and i32 %190, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %198, align 1, !tbaa !2447
  %199 = icmp eq i32 %190, 0
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %200, i8* %201, align 1, !tbaa !2448
  %202 = lshr i32 %190, 31
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %203, i8* %204, align 1, !tbaa !2449
  %205 = lshr i32 %190, 31
  %206 = xor i32 %202, %205
  %207 = add nuw nsw i32 %206, %205
  %208 = icmp eq i32 %207, 2
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %209, i8* %210, align 1, !tbaa !2450
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 413
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 6
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 6
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %218 = load i8, i8* %217, align 1, !tbaa !2448
  %219 = icmp eq i8 %218, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %222 = select i1 %219, i64 %212, i64 %214
  store i64 %222, i64* %221, align 8, !tbaa !2428
  %223 = load i8, i8* %BRANCH_TAKEN
  %224 = icmp eq i8 %223, 1
  %225 = load i64, i64* %RBP
  br i1 %224, label %block_401df8, label %block_401c61

block_401dff:                                     ; preds = %block_401e0b, %block_401df8
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401df8 ], [ %2968, %block_401e0b ]
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 44
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 3
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = load i32, i32* %EAX
  %234 = zext i32 %233 to i64
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 16
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = inttoptr i64 %236 to i32*
  %240 = load i32, i32* %239
  %241 = sub i32 %233, %240
  %242 = icmp ult i32 %233, %240
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %243, i8* %244, align 1, !tbaa !2432
  %245 = and i32 %241, 255
  %246 = call i32 @llvm.ctpop.i32(i32 %245) #16
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %249, i8* %250, align 1, !tbaa !2446
  %251 = xor i32 %240, %233
  %252 = xor i32 %251, %241
  %253 = lshr i32 %252, 4
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %255, i8* %256, align 1, !tbaa !2447
  %257 = icmp eq i32 %241, 0
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %258, i8* %259, align 1, !tbaa !2448
  %260 = lshr i32 %241, 31
  %261 = trunc i32 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %261, i8* %262, align 1, !tbaa !2449
  %263 = lshr i32 %233, 31
  %264 = lshr i32 %240, 31
  %265 = xor i32 %264, %263
  %266 = xor i32 %260, %263
  %267 = add nuw nsw i32 %266, %265
  %268 = icmp eq i32 %267, 2
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %269, i8* %270, align 1, !tbaa !2450
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 135
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 6
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 6
  store i64 %276, i64* %PC
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %278 = load i8, i8* %277, align 1, !tbaa !2449
  %279 = icmp ne i8 %278, 0
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %281 = load i8, i8* %280, align 1, !tbaa !2450
  %282 = icmp ne i8 %281, 0
  %283 = xor i1 %279, %282
  %284 = xor i1 %283, true
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %287 = select i1 %283, i64 %274, i64 %272
  store i64 %287, i64* %286, align 8, !tbaa !2428
  %288 = load i8, i8* %BRANCH_TAKEN
  %289 = icmp eq i8 %288, 1
  br i1 %289, label %block_401e8c, label %block_401e0b

block_401df3:                                     ; preds = %block_401d48
  %290 = add i64 %1829, 436
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 5
  store i64 %292, i64* %PC
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %290, i64* %293, align 8, !tbaa !2428
  br label %block_401fa7

block_401c72:                                     ; preds = %block_401cd6, %block_401c6b
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401c6b ], [ %988, %block_401cd6 ]
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 44
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 3
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i32*
  %299 = load i32, i32* %298
  %300 = zext i32 %299 to i64
  store i64 %300, i64* %RAX, align 8, !tbaa !2428
  %301 = load i32, i32* %EAX
  %302 = zext i32 %301 to i64
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 56
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  %308 = load i32, i32* %307
  %309 = sub i32 %301, %308
  %310 = icmp ult i32 %301, %308
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %311, i8* %312, align 1, !tbaa !2432
  %313 = and i32 %309, 255
  %314 = call i32 @llvm.ctpop.i32(i32 %313) #16
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  %317 = xor i8 %316, 1
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %317, i8* %318, align 1, !tbaa !2446
  %319 = xor i32 %308, %301
  %320 = xor i32 %319, %309
  %321 = lshr i32 %320, 4
  %322 = trunc i32 %321 to i8
  %323 = and i8 %322, 1
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %323, i8* %324, align 1, !tbaa !2447
  %325 = icmp eq i32 %309, 0
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %326, i8* %327, align 1, !tbaa !2448
  %328 = lshr i32 %309, 31
  %329 = trunc i32 %328 to i8
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %329, i8* %330, align 1, !tbaa !2449
  %331 = lshr i32 %301, 31
  %332 = lshr i32 %308, 31
  %333 = xor i32 %332, %331
  %334 = xor i32 %328, %331
  %335 = add nuw nsw i32 %334, %333
  %336 = icmp eq i32 %335, 2
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 196
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 6
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 6
  store i64 %344, i64* %PC
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %346 = load i8, i8* %345, align 1, !tbaa !2449
  %347 = icmp ne i8 %346, 0
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %349 = load i8, i8* %348, align 1, !tbaa !2450
  %350 = icmp ne i8 %349, 0
  %351 = xor i1 %347, %350
  %352 = xor i1 %351, true
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %355 = select i1 %351, i64 %342, i64 %340
  store i64 %355, i64* %354, align 8, !tbaa !2428
  %356 = load i8, i8* %BRANCH_TAKEN
  %357 = icmp eq i8 %356, 1
  br i1 %357, label %block_401d3c, label %block_401c7e

block_401c6b:                                     ; preds = %block_401c61
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 44
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 7
  store i64 %361, i64* %PC
  %362 = inttoptr i64 %359 to i32*
  store i32 0, i32* %362
  br label %block_401c72

block_401c7e:                                     ; preds = %block_401c72
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 24
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 4
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i64*
  %368 = load i64, i64* %367
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 44
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 4
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i32*
  %374 = load i32, i32* %373
  %375 = sext i32 %374 to i64
  store i64 %375, i64* %RCX, align 8, !tbaa !2428
  %376 = load i64, i64* %RAX
  %377 = load i64, i64* %RCX
  %378 = mul i64 %377, 4
  %379 = add i64 %378, %376
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 3
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i32*
  %383 = load i32, i32* %382
  %384 = zext i32 %383 to i64
  store i64 %384, i64* %RDX, align 8, !tbaa !2428
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 52
  %387 = load i32, i32* %EDX
  %388 = zext i32 %387 to i64
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 3
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %386 to i32*
  store i32 %387, i32* %391
  %392 = load i64, i64* %RBP
  %393 = sub i64 %392, 32
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = load i64, i64* %RBP
  %399 = sub i64 %398, 52
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i32*
  %403 = load i32, i32* %402
  %404 = sext i32 %403 to i64
  store i64 %404, i64* %RCX, align 8, !tbaa !2428
  %405 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %406 = load i64, i64* %RAX
  %407 = load i64, i64* %RCX
  %408 = mul i64 %407, 4
  %409 = add i64 %408, %406
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 5
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to float*
  %413 = load float, float* %412
  %414 = bitcast i8* %405 to float*
  store float %413, float* %414, align 1, !tbaa !2452
  %415 = getelementptr inbounds i8, i8* %405, i64 4
  %416 = bitcast i8* %415 to float*
  store float 0.000000e+00, float* %416, align 1, !tbaa !2452
  %417 = getelementptr inbounds i8, i8* %405, i64 8
  %418 = bitcast i8* %417 to float*
  store float 0.000000e+00, float* %418, align 1, !tbaa !2452
  %419 = getelementptr inbounds i8, i8* %405, i64 12
  %420 = bitcast i8* %419 to float*
  store float 0.000000e+00, float* %420, align 1, !tbaa !2452
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 40
  %423 = bitcast %union.vec128_t* %XMM0 to i8*
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 5
  store i64 %425, i64* %PC
  %426 = bitcast i8* %423 to <2 x float>*
  %427 = load <2 x float>, <2 x float>* %426, align 1
  %428 = extractelement <2 x float> %427, i32 0
  %429 = inttoptr i64 %422 to float*
  store float %428, float* %429
  %430 = load i64, i64* %RBP
  %431 = sub i64 %430, 52
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 3
  store i64 %433, i64* %PC
  %434 = inttoptr i64 %431 to i32*
  %435 = load i32, i32* %434
  %436 = zext i32 %435 to i64
  store i64 %436, i64* %RDX, align 8, !tbaa !2428
  %437 = load i32, i32* %EDX
  %438 = zext i32 %437 to i64
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 44
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 3
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %440 to i32*
  %444 = load i32, i32* %443
  %445 = sub i32 %437, %444
  %446 = icmp ult i32 %437, %444
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %447, i8* %448, align 1, !tbaa !2432
  %449 = and i32 %445, 255
  %450 = call i32 @llvm.ctpop.i32(i32 %449) #16
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = xor i8 %452, 1
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %453, i8* %454, align 1, !tbaa !2446
  %455 = xor i32 %444, %437
  %456 = xor i32 %455, %445
  %457 = lshr i32 %456, 4
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %459, i8* %460, align 1, !tbaa !2447
  %461 = icmp eq i32 %445, 0
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %462, i8* %463, align 1, !tbaa !2448
  %464 = lshr i32 %445, 31
  %465 = trunc i32 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %465, i8* %466, align 1, !tbaa !2449
  %467 = lshr i32 %437, 31
  %468 = lshr i32 %444, 31
  %469 = xor i32 %468, %467
  %470 = xor i32 %464, %467
  %471 = add nuw nsw i32 %470, %469
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %473, i8* %474, align 1, !tbaa !2450
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 50
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 6
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 6
  store i64 %480, i64* %PC
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %482 = load i8, i8* %481, align 1, !tbaa !2448
  store i8 %482, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %484 = icmp ne i8 %482, 0
  %485 = select i1 %484, i64 %476, i64 %478
  store i64 %485, i64* %483, align 8, !tbaa !2428
  %486 = load i8, i8* %BRANCH_TAKEN
  %487 = icmp eq i8 %486, 1
  br i1 %487, label %block_401cd6, label %block_401caa

block_401c61:                                     ; preds = %block_401c30
  %488 = sub i64 %225, 56
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %488 to i32*
  %492 = load i32, i32* %491
  %493 = sub i32 %492, 1
  %494 = icmp ult i32 %492, 1
  %495 = zext i1 %494 to i8
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %495, i8* %496, align 1, !tbaa !2432
  %497 = and i32 %493, 255
  %498 = call i32 @llvm.ctpop.i32(i32 %497) #16
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  %501 = xor i8 %500, 1
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %501, i8* %502, align 1, !tbaa !2446
  %503 = xor i32 %492, 1
  %504 = xor i32 %503, %493
  %505 = lshr i32 %504, 4
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %507, i8* %508, align 1, !tbaa !2447
  %509 = icmp eq i32 %493, 0
  %510 = zext i1 %509 to i8
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %510, i8* %511, align 1, !tbaa !2448
  %512 = lshr i32 %493, 31
  %513 = trunc i32 %512 to i8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %513, i8* %514, align 1, !tbaa !2449
  %515 = lshr i32 %492, 31
  %516 = xor i32 %512, %515
  %517 = add nuw nsw i32 %516, %515
  %518 = icmp eq i32 %517, 2
  %519 = zext i1 %518 to i8
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %519, i8* %520, align 1, !tbaa !2450
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 220
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 6
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 6
  store i64 %526, i64* %PC
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %528 = load i8, i8* %527, align 1, !tbaa !2449
  %529 = icmp ne i8 %528, 0
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %531 = load i8, i8* %530, align 1, !tbaa !2450
  %532 = icmp ne i8 %531, 0
  %533 = xor i1 %529, %532
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %536 = select i1 %533, i64 %522, i64 %524
  store i64 %536, i64* %535, align 8, !tbaa !2428
  %537 = load i8, i8* %BRANCH_TAKEN
  %538 = icmp eq i8 %537, 1
  br i1 %538, label %block_401d41, label %block_401c6b

block_401df8:                                     ; preds = %block_401c30
  %539 = sub i64 %225, 44
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 7
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i32*
  store i32 0, i32* %542
  br label %block_401dff

block_401cd6:                                     ; preds = %block_401caa, %block_401c7e
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_401c7e ], [ %MEMORY.1, %block_401caa ]
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 5
  store i64 %544, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %545 = load i64, i64* %RBP
  %546 = sub i64 %545, 16
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 3
  store i64 %548, i64* %PC
  %549 = inttoptr i64 %546 to i32*
  %550 = load i32, i32* %549
  %551 = zext i32 %550 to i64
  store i64 %551, i64* %RCX, align 8, !tbaa !2428
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 44
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 3
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %553 to i32*
  %557 = load i32, i32* %556
  %558 = zext i32 %557 to i64
  store i64 %558, i64* %RDX, align 8, !tbaa !2428
  %559 = load i64, i64* %RDX
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = trunc i64 %559 to i32
  %563 = add i32 1, %562
  %564 = zext i32 %563 to i64
  store i64 %564, i64* %RDX, align 8, !tbaa !2428
  %565 = icmp ult i32 %563, %562
  %566 = icmp ult i32 %563, 1
  %567 = or i1 %565, %566
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %568, i8* %569, align 1, !tbaa !2432
  %570 = and i32 %563, 255
  %571 = call i32 @llvm.ctpop.i32(i32 %570) #16
  %572 = trunc i32 %571 to i8
  %573 = and i8 %572, 1
  %574 = xor i8 %573, 1
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %574, i8* %575, align 1, !tbaa !2446
  %576 = xor i64 1, %559
  %577 = trunc i64 %576 to i32
  %578 = xor i32 %577, %563
  %579 = lshr i32 %578, 4
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %581, i8* %582, align 1, !tbaa !2447
  %583 = icmp eq i32 %563, 0
  %584 = zext i1 %583 to i8
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %584, i8* %585, align 1, !tbaa !2448
  %586 = lshr i32 %563, 31
  %587 = trunc i32 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %587, i8* %588, align 1, !tbaa !2449
  %589 = lshr i32 %562, 31
  %590 = xor i32 %586, %589
  %591 = add nuw nsw i32 %590, %586
  %592 = icmp eq i32 %591, 2
  %593 = zext i1 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %593, i8* %594, align 1, !tbaa !2450
  %595 = load i64, i64* %RCX
  %596 = load i32, i32* %EDX
  %597 = zext i32 %596 to i64
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 2
  store i64 %599, i64* %PC
  %600 = trunc i64 %595 to i32
  %601 = sub i32 %600, %596
  %602 = zext i32 %601 to i64
  store i64 %602, i64* %RCX, align 8, !tbaa !2428
  %603 = icmp ult i32 %600, %596
  %604 = zext i1 %603 to i8
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %604, i8* %605, align 1, !tbaa !2432
  %606 = and i32 %601, 255
  %607 = call i32 @llvm.ctpop.i32(i32 %606) #16
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  %610 = xor i8 %609, 1
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %610, i8* %611, align 1, !tbaa !2446
  %612 = xor i64 %597, %595
  %613 = trunc i64 %612 to i32
  %614 = xor i32 %613, %601
  %615 = lshr i32 %614, 4
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %617, i8* %618, align 1, !tbaa !2447
  %619 = icmp eq i32 %601, 0
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %620, i8* %621, align 1, !tbaa !2448
  %622 = lshr i32 %601, 31
  %623 = trunc i32 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %623, i8* %624, align 1, !tbaa !2449
  %625 = lshr i32 %600, 31
  %626 = lshr i32 %596, 31
  %627 = xor i32 %626, %625
  %628 = xor i32 %622, %625
  %629 = add nuw nsw i32 %628, %627
  %630 = icmp eq i32 %629, 2
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %631, i8* %632, align 1, !tbaa !2450
  %633 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %634 = load i64, i64* %RBP
  %635 = sub i64 %634, 40
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 5
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %635 to float*
  %639 = load float, float* %638
  %640 = bitcast i8* %633 to float*
  store float %639, float* %640, align 1, !tbaa !2452
  %641 = getelementptr inbounds i8, i8* %633, i64 4
  %642 = bitcast i8* %641 to float*
  store float 0.000000e+00, float* %642, align 1, !tbaa !2452
  %643 = getelementptr inbounds i8, i8* %633, i64 8
  %644 = bitcast i8* %643 to float*
  store float 0.000000e+00, float* %644, align 1, !tbaa !2452
  %645 = getelementptr inbounds i8, i8* %633, i64 12
  %646 = bitcast i8* %645 to float*
  store float 0.000000e+00, float* %646, align 1, !tbaa !2452
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 8
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RSI, align 8, !tbaa !2428
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 12
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 3
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i32*
  %658 = load i32, i32* %657
  %659 = zext i32 %658 to i64
  store i64 %659, i64* %RDX, align 8, !tbaa !2428
  %660 = load i64, i64* %RDX
  %661 = load i64, i64* %RBP
  %662 = sub i64 %661, 44
  %663 = load i64, i64* %PC
  %664 = add i64 %663, 4
  store i64 %664, i64* %PC
  %665 = inttoptr i64 %662 to i32*
  %666 = load i32, i32* %665
  %667 = shl i64 %660, 32
  %668 = ashr exact i64 %667, 32
  %669 = sext i32 %666 to i64
  %670 = mul nsw i64 %669, %668
  %671 = trunc i64 %670 to i32
  %672 = and i64 %670, 4294967295
  store i64 %672, i64* %RDX, align 8, !tbaa !2428
  %673 = shl i64 %670, 32
  %674 = ashr exact i64 %673, 32
  %675 = icmp ne i64 %674, %670
  %676 = zext i1 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %676, i8* %677, align 1, !tbaa !2432
  %678 = and i32 %671, 255
  %679 = call i32 @llvm.ctpop.i32(i32 %678) #16
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %682, i8* %683, align 1, !tbaa !2446
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %684, align 1, !tbaa !2447
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %685, align 1, !tbaa !2448
  %686 = lshr i32 %671, 31
  %687 = trunc i32 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %687, i8* %688, align 1, !tbaa !2449
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %676, i8* %689, align 1, !tbaa !2450
  %690 = load i64, i64* %RDX
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 44
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 3
  store i64 %694, i64* %PC
  %695 = trunc i64 %690 to i32
  %696 = inttoptr i64 %692 to i32*
  %697 = load i32, i32* %696
  %698 = add i32 %697, %695
  %699 = zext i32 %698 to i64
  store i64 %699, i64* %RDX, align 8, !tbaa !2428
  %700 = icmp ult i32 %698, %695
  %701 = icmp ult i32 %698, %697
  %702 = or i1 %700, %701
  %703 = zext i1 %702 to i8
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %703, i8* %704, align 1, !tbaa !2432
  %705 = and i32 %698, 255
  %706 = call i32 @llvm.ctpop.i32(i32 %705) #16
  %707 = trunc i32 %706 to i8
  %708 = and i8 %707, 1
  %709 = xor i8 %708, 1
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %709, i8* %710, align 1, !tbaa !2446
  %711 = xor i32 %697, %695
  %712 = xor i32 %711, %698
  %713 = lshr i32 %712, 4
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %715, i8* %716, align 1, !tbaa !2447
  %717 = icmp eq i32 %698, 0
  %718 = zext i1 %717 to i8
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %718, i8* %719, align 1, !tbaa !2448
  %720 = lshr i32 %698, 31
  %721 = trunc i32 %720 to i8
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %721, i8* %722, align 1, !tbaa !2449
  %723 = lshr i32 %695, 31
  %724 = lshr i32 %697, 31
  %725 = xor i32 %720, %723
  %726 = xor i32 %720, %724
  %727 = add nuw nsw i32 %725, %726
  %728 = icmp eq i32 %727, 2
  %729 = zext i1 %728 to i8
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %729, i8* %730, align 1, !tbaa !2450
  %731 = load i64, i64* %RDX
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 3
  store i64 %733, i64* %PC
  %734 = trunc i64 %731 to i32
  %735 = add i32 1, %734
  %736 = zext i32 %735 to i64
  store i64 %736, i64* %RDX, align 8, !tbaa !2428
  %737 = icmp ult i32 %735, %734
  %738 = icmp ult i32 %735, 1
  %739 = or i1 %737, %738
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %740, i8* %741, align 1, !tbaa !2432
  %742 = and i32 %735, 255
  %743 = call i32 @llvm.ctpop.i32(i32 %742) #16
  %744 = trunc i32 %743 to i8
  %745 = and i8 %744, 1
  %746 = xor i8 %745, 1
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %746, i8* %747, align 1, !tbaa !2446
  %748 = xor i64 1, %731
  %749 = trunc i64 %748 to i32
  %750 = xor i32 %749, %735
  %751 = lshr i32 %750, 4
  %752 = trunc i32 %751 to i8
  %753 = and i8 %752, 1
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %753, i8* %754, align 1, !tbaa !2447
  %755 = icmp eq i32 %735, 0
  %756 = zext i1 %755 to i8
  %757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %756, i8* %757, align 1, !tbaa !2448
  %758 = lshr i32 %735, 31
  %759 = trunc i32 %758 to i8
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %759, i8* %760, align 1, !tbaa !2449
  %761 = lshr i32 %734, 31
  %762 = xor i32 %758, %761
  %763 = add nuw nsw i32 %762, %758
  %764 = icmp eq i32 %763, 2
  %765 = zext i1 %764 to i8
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %765, i8* %766, align 1, !tbaa !2450
  %767 = load i32, i32* %EDX
  %768 = zext i32 %767 to i64
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 3
  store i64 %770, i64* %PC
  %771 = shl i64 %768, 32
  %772 = ashr exact i64 %771, 32
  store i64 %772, i64* %RDI, align 8, !tbaa !2428
  %773 = load i64, i64* %RDI
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 4
  store i64 %775, i64* %PC
  %776 = shl i64 %773, 1
  %777 = icmp slt i64 %776, 0
  %778 = shl i64 %776, 1
  store i64 %778, i64* %RDI, align 8, !tbaa !2428
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %780 = zext i1 %777 to i8
  store i8 %780, i8* %779, align 1, !tbaa !2451
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %782 = trunc i64 %778 to i32
  %783 = and i32 %782, 254
  %784 = call i32 @llvm.ctpop.i32(i32 %783) #16
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  store i8 %787, i8* %781, align 1, !tbaa !2451
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %788, align 1, !tbaa !2451
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %790 = icmp eq i64 %778, 0
  %791 = zext i1 %790 to i8
  store i8 %791, i8* %789, align 1, !tbaa !2451
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %793 = lshr i64 %778, 63
  %794 = trunc i64 %793 to i8
  store i8 %794, i8* %792, align 1, !tbaa !2451
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %795, align 1, !tbaa !2451
  %796 = load i64, i64* %RSI
  %797 = load i64, i64* %RDI
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 3
  store i64 %799, i64* %PC
  %800 = add i64 %797, %796
  store i64 %800, i64* %RSI, align 8, !tbaa !2428
  %801 = icmp ult i64 %800, %796
  %802 = icmp ult i64 %800, %797
  %803 = or i1 %801, %802
  %804 = zext i1 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %804, i8* %805, align 1, !tbaa !2432
  %806 = trunc i64 %800 to i32
  %807 = and i32 %806, 255
  %808 = call i32 @llvm.ctpop.i32(i32 %807) #16
  %809 = trunc i32 %808 to i8
  %810 = and i8 %809, 1
  %811 = xor i8 %810, 1
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %811, i8* %812, align 1, !tbaa !2446
  %813 = xor i64 %797, %796
  %814 = xor i64 %813, %800
  %815 = lshr i64 %814, 4
  %816 = trunc i64 %815 to i8
  %817 = and i8 %816, 1
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %817, i8* %818, align 1, !tbaa !2447
  %819 = icmp eq i64 %800, 0
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %820, i8* %821, align 1, !tbaa !2448
  %822 = lshr i64 %800, 63
  %823 = trunc i64 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %823, i8* %824, align 1, !tbaa !2449
  %825 = lshr i64 %796, 63
  %826 = lshr i64 %797, 63
  %827 = xor i64 %822, %825
  %828 = xor i64 %822, %826
  %829 = add nuw nsw i64 %827, %828
  %830 = icmp eq i64 %829, 2
  %831 = zext i1 %830 to i8
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %831, i8* %832, align 1, !tbaa !2450
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 32
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 4
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %834 to i64*
  %838 = load i64, i64* %837
  store i64 %838, i64* %RDI, align 8, !tbaa !2428
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 44
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 3
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i32*
  %844 = load i32, i32* %843
  %845 = zext i32 %844 to i64
  store i64 %845, i64* %RDX, align 8, !tbaa !2428
  %846 = load i64, i64* %RDX
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 3
  store i64 %848, i64* %PC
  %849 = trunc i64 %846 to i32
  %850 = add i32 1, %849
  %851 = zext i32 %850 to i64
  store i64 %851, i64* %RDX, align 8, !tbaa !2428
  %852 = icmp ult i32 %850, %849
  %853 = icmp ult i32 %850, 1
  %854 = or i1 %852, %853
  %855 = zext i1 %854 to i8
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %855, i8* %856, align 1, !tbaa !2432
  %857 = and i32 %850, 255
  %858 = call i32 @llvm.ctpop.i32(i32 %857) #16
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = xor i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %861, i8* %862, align 1, !tbaa !2446
  %863 = xor i64 1, %846
  %864 = trunc i64 %863 to i32
  %865 = xor i32 %864, %850
  %866 = lshr i32 %865, 4
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %868, i8* %869, align 1, !tbaa !2447
  %870 = icmp eq i32 %850, 0
  %871 = zext i1 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %871, i8* %872, align 1, !tbaa !2448
  %873 = lshr i32 %850, 31
  %874 = trunc i32 %873 to i8
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %874, i8* %875, align 1, !tbaa !2449
  %876 = lshr i32 %849, 31
  %877 = xor i32 %873, %876
  %878 = add nuw nsw i32 %877, %873
  %879 = icmp eq i32 %878, 2
  %880 = zext i1 %879 to i8
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %880, i8* %881, align 1, !tbaa !2450
  %882 = load i32, i32* %EDX
  %883 = zext i32 %882 to i64
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 3
  store i64 %885, i64* %PC
  %886 = shl i64 %883, 32
  %887 = ashr exact i64 %886, 32
  store i64 %887, i64* %R8, align 8, !tbaa !2428
  %888 = load i64, i64* %R8
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = shl i64 %888, 1
  %892 = icmp slt i64 %891, 0
  %893 = shl i64 %891, 1
  store i64 %893, i64* %R8, align 8, !tbaa !2428
  %894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %895 = zext i1 %892 to i8
  store i8 %895, i8* %894, align 1, !tbaa !2451
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %897 = trunc i64 %893 to i32
  %898 = and i32 %897, 254
  %899 = call i32 @llvm.ctpop.i32(i32 %898) #16
  %900 = trunc i32 %899 to i8
  %901 = and i8 %900, 1
  %902 = xor i8 %901, 1
  store i8 %902, i8* %896, align 1, !tbaa !2451
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %903, align 1, !tbaa !2451
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %905 = icmp eq i64 %893, 0
  %906 = zext i1 %905 to i8
  store i8 %906, i8* %904, align 1, !tbaa !2451
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %908 = lshr i64 %893, 63
  %909 = trunc i64 %908 to i8
  store i8 %909, i8* %907, align 1, !tbaa !2451
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %910, align 1, !tbaa !2451
  %911 = load i64, i64* %RDI
  %912 = load i64, i64* %R8
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 3
  store i64 %914, i64* %PC
  %915 = add i64 %912, %911
  store i64 %915, i64* %RDI, align 8, !tbaa !2428
  %916 = icmp ult i64 %915, %911
  %917 = icmp ult i64 %915, %912
  %918 = or i1 %916, %917
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %919, i8* %920, align 1, !tbaa !2432
  %921 = trunc i64 %915 to i32
  %922 = and i32 %921, 255
  %923 = call i32 @llvm.ctpop.i32(i32 %922) #16
  %924 = trunc i32 %923 to i8
  %925 = and i8 %924, 1
  %926 = xor i8 %925, 1
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %926, i8* %927, align 1, !tbaa !2446
  %928 = xor i64 %912, %911
  %929 = xor i64 %928, %915
  %930 = lshr i64 %929, 4
  %931 = trunc i64 %930 to i8
  %932 = and i8 %931, 1
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %932, i8* %933, align 1, !tbaa !2447
  %934 = icmp eq i64 %915, 0
  %935 = zext i1 %934 to i8
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %935, i8* %936, align 1, !tbaa !2448
  %937 = lshr i64 %915, 63
  %938 = trunc i64 %937 to i8
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %938, i8* %939, align 1, !tbaa !2449
  %940 = lshr i64 %911, 63
  %941 = lshr i64 %912, 63
  %942 = xor i64 %937, %940
  %943 = xor i64 %937, %941
  %944 = add nuw nsw i64 %942, %943
  %945 = icmp eq i64 %944, 2
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %946, i8* %947, align 1, !tbaa !2450
  %948 = load i64, i64* %RBP
  %949 = sub i64 %948, 64
  %950 = load i64, i64* %RDI
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 4
  store i64 %952, i64* %PC
  %953 = inttoptr i64 %949 to i64*
  store i64 %950, i64* %953
  %954 = load i32, i32* %ECX
  %955 = zext i32 %954 to i64
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 2
  store i64 %957, i64* %PC
  %958 = and i64 %955, 4294967295
  store i64 %958, i64* %RDI, align 8, !tbaa !2428
  %959 = load i32, i32* %EAX
  %960 = zext i32 %959 to i64
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 2
  store i64 %962, i64* %PC
  %963 = and i64 %960, 4294967295
  store i64 %963, i64* %RDX, align 8, !tbaa !2428
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 64
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 4
  store i64 %967, i64* %PC
  %968 = inttoptr i64 %965 to i64*
  %969 = load i64, i64* %968
  store i64 %969, i64* %RCX, align 8, !tbaa !2428
  %970 = bitcast i32* %R8D to i64*
  %971 = load i32, i32* %EAX
  %972 = zext i32 %971 to i64
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 3
  store i64 %974, i64* %PC
  %975 = and i64 %972, 4294967295
  store i64 %975, i64* %970, align 8, !tbaa !2428
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 2887
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 5
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 5
  store i64 %981, i64* %PC
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %983 = load i64, i64* %982, align 8, !tbaa !2428
  %984 = add i64 %983, -8
  %985 = inttoptr i64 %984 to i64*
  store i64 %979, i64* %985
  store i64 %984, i64* %982, align 8, !tbaa !2428
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %977, i64* %986, align 8, !tbaa !2428
  %987 = load i64, i64* %PC
  %988 = call %struct.Memory* @sub_402870_daxpy(%struct.State* %0, i64 %987, %struct.Memory* %MEMORY.2)
  %989 = load i64, i64* %RBP
  %990 = sub i64 %989, 44
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 3
  store i64 %992, i64* %PC
  %993 = inttoptr i64 %990 to i32*
  %994 = load i32, i32* %993
  %995 = zext i32 %994 to i64
  store i64 %995, i64* %RAX, align 8, !tbaa !2428
  %996 = load i64, i64* %RAX
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 3
  store i64 %998, i64* %PC
  %999 = trunc i64 %996 to i32
  %1000 = add i32 1, %999
  %1001 = zext i32 %1000 to i64
  store i64 %1001, i64* %RAX, align 8, !tbaa !2428
  %1002 = icmp ult i32 %1000, %999
  %1003 = icmp ult i32 %1000, 1
  %1004 = or i1 %1002, %1003
  %1005 = zext i1 %1004 to i8
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1005, i8* %1006, align 1, !tbaa !2432
  %1007 = and i32 %1000, 255
  %1008 = call i32 @llvm.ctpop.i32(i32 %1007) #16
  %1009 = trunc i32 %1008 to i8
  %1010 = and i8 %1009, 1
  %1011 = xor i8 %1010, 1
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1011, i8* %1012, align 1, !tbaa !2446
  %1013 = xor i64 1, %996
  %1014 = trunc i64 %1013 to i32
  %1015 = xor i32 %1014, %1000
  %1016 = lshr i32 %1015, 4
  %1017 = trunc i32 %1016 to i8
  %1018 = and i8 %1017, 1
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1018, i8* %1019, align 1, !tbaa !2447
  %1020 = icmp eq i32 %1000, 0
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1021, i8* %1022, align 1, !tbaa !2448
  %1023 = lshr i32 %1000, 31
  %1024 = trunc i32 %1023 to i8
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1024, i8* %1025, align 1, !tbaa !2449
  %1026 = lshr i32 %999, 31
  %1027 = xor i32 %1023, %1026
  %1028 = add nuw nsw i32 %1027, %1023
  %1029 = icmp eq i32 %1028, 2
  %1030 = zext i1 %1029 to i8
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1030, i8* %1031, align 1, !tbaa !2450
  %1032 = load i64, i64* %RBP
  %1033 = sub i64 %1032, 44
  %1034 = load i32, i32* %EAX
  %1035 = zext i32 %1034 to i64
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 3
  store i64 %1037, i64* %PC
  %1038 = inttoptr i64 %1033 to i32*
  store i32 %1034, i32* %1038
  %1039 = load i64, i64* %PC
  %1040 = sub i64 %1039, 197
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 5
  store i64 %1042, i64* %PC
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1040, i64* %1043, align 8, !tbaa !2428
  br label %block_401c72

block_401d54:                                     ; preds = %block_401d48
  %1044 = add i64 %1829, 5
  store i64 %1044, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1045 = load i64, i64* %RBP
  %1046 = sub i64 %1045, 16
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to i32*
  %1050 = load i32, i32* %1049
  %1051 = zext i32 %1050 to i64
  store i64 %1051, i64* %RCX, align 8, !tbaa !2428
  %1052 = load i64, i64* %RBP
  %1053 = sub i64 %1052, 48
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 3
  store i64 %1055, i64* %PC
  %1056 = inttoptr i64 %1053 to i32*
  %1057 = load i32, i32* %1056
  %1058 = zext i32 %1057 to i64
  store i64 %1058, i64* %RDX, align 8, !tbaa !2428
  %1059 = load i64, i64* %RDX
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 3
  store i64 %1061, i64* %PC
  %1062 = trunc i64 %1059 to i32
  %1063 = add i32 1, %1062
  %1064 = zext i32 %1063 to i64
  store i64 %1064, i64* %RDX, align 8, !tbaa !2428
  %1065 = icmp ult i32 %1063, %1062
  %1066 = icmp ult i32 %1063, 1
  %1067 = or i1 %1065, %1066
  %1068 = zext i1 %1067 to i8
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1068, i8* %1069, align 1, !tbaa !2432
  %1070 = and i32 %1063, 255
  %1071 = call i32 @llvm.ctpop.i32(i32 %1070) #16
  %1072 = trunc i32 %1071 to i8
  %1073 = and i8 %1072, 1
  %1074 = xor i8 %1073, 1
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1074, i8* %1075, align 1, !tbaa !2446
  %1076 = xor i64 1, %1059
  %1077 = trunc i64 %1076 to i32
  %1078 = xor i32 %1077, %1063
  %1079 = lshr i32 %1078, 4
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1081, i8* %1082, align 1, !tbaa !2447
  %1083 = icmp eq i32 %1063, 0
  %1084 = zext i1 %1083 to i8
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1084, i8* %1085, align 1, !tbaa !2448
  %1086 = lshr i32 %1063, 31
  %1087 = trunc i32 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1087, i8* %1088, align 1, !tbaa !2449
  %1089 = lshr i32 %1062, 31
  %1090 = xor i32 %1086, %1089
  %1091 = add nuw nsw i32 %1090, %1086
  %1092 = icmp eq i32 %1091, 2
  %1093 = zext i1 %1092 to i8
  %1094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1093, i8* %1094, align 1, !tbaa !2450
  %1095 = load i64, i64* %RCX
  %1096 = load i32, i32* %EDX
  %1097 = zext i32 %1096 to i64
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 2
  store i64 %1099, i64* %PC
  %1100 = trunc i64 %1095 to i32
  %1101 = sub i32 %1100, %1096
  %1102 = zext i32 %1101 to i64
  store i64 %1102, i64* %RCX, align 8, !tbaa !2428
  %1103 = icmp ult i32 %1100, %1096
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = and i32 %1101, 255
  %1107 = call i32 @llvm.ctpop.i32(i32 %1106) #16
  %1108 = trunc i32 %1107 to i8
  %1109 = and i8 %1108, 1
  %1110 = xor i8 %1109, 1
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1110, i8* %1111, align 1, !tbaa !2446
  %1112 = xor i64 %1097, %1095
  %1113 = trunc i64 %1112 to i32
  %1114 = xor i32 %1113, %1101
  %1115 = lshr i32 %1114, 4
  %1116 = trunc i32 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i32 %1101, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i32 %1101, 31
  %1123 = trunc i32 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i32 %1100, 31
  %1126 = lshr i32 %1096, 31
  %1127 = xor i32 %1126, %1125
  %1128 = xor i32 %1122, %1125
  %1129 = add nuw nsw i32 %1128, %1127
  %1130 = icmp eq i32 %1129, 2
  %1131 = zext i1 %1130 to i8
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1131, i8* %1132, align 1, !tbaa !2450
  %1133 = load i64, i64* %RBP
  %1134 = sub i64 %1133, 44
  %1135 = load i32, i32* %ECX
  %1136 = zext i32 %1135 to i64
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 3
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1134 to i32*
  store i32 %1135, i32* %1139
  %1140 = load i64, i64* %RBP
  %1141 = sub i64 %1140, 32
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 4
  store i64 %1143, i64* %PC
  %1144 = inttoptr i64 %1141 to i64*
  %1145 = load i64, i64* %1144
  store i64 %1145, i64* %RSI, align 8, !tbaa !2428
  %1146 = load i64, i64* %RBP
  %1147 = sub i64 %1146, 44
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 4
  store i64 %1149, i64* %PC
  %1150 = inttoptr i64 %1147 to i32*
  %1151 = load i32, i32* %1150
  %1152 = sext i32 %1151 to i64
  store i64 %1152, i64* %RDI, align 8, !tbaa !2428
  %1153 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1154 = load i64, i64* %RSI
  %1155 = load i64, i64* %RDI
  %1156 = mul i64 %1155, 4
  %1157 = add i64 %1156, %1154
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = inttoptr i64 %1157 to float*
  %1161 = load float, float* %1160
  %1162 = bitcast i8* %1153 to float*
  store float %1161, float* %1162, align 1, !tbaa !2452
  %1163 = getelementptr inbounds i8, i8* %1153, i64 4
  %1164 = bitcast i8* %1163 to float*
  store float 0.000000e+00, float* %1164, align 1, !tbaa !2452
  %1165 = getelementptr inbounds i8, i8* %1153, i64 8
  %1166 = bitcast i8* %1165 to float*
  store float 0.000000e+00, float* %1166, align 1, !tbaa !2452
  %1167 = getelementptr inbounds i8, i8* %1153, i64 12
  %1168 = bitcast i8* %1167 to float*
  store float 0.000000e+00, float* %1168, align 1, !tbaa !2452
  %1169 = load i64, i64* %RBP
  %1170 = sub i64 %1169, 8
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 4
  store i64 %1172, i64* %PC
  %1173 = inttoptr i64 %1170 to i64*
  %1174 = load i64, i64* %1173
  store i64 %1174, i64* %RSI, align 8, !tbaa !2428
  %1175 = load i64, i64* %RBP
  %1176 = sub i64 %1175, 12
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 3
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179
  %1181 = zext i32 %1180 to i64
  store i64 %1181, i64* %RCX, align 8, !tbaa !2428
  %1182 = load i64, i64* %RCX
  %1183 = load i64, i64* %RBP
  %1184 = sub i64 %1183, 44
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 4
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to i32*
  %1188 = load i32, i32* %1187
  %1189 = shl i64 %1182, 32
  %1190 = ashr exact i64 %1189, 32
  %1191 = sext i32 %1188 to i64
  %1192 = mul nsw i64 %1191, %1190
  %1193 = trunc i64 %1192 to i32
  %1194 = and i64 %1192, 4294967295
  store i64 %1194, i64* %RCX, align 8, !tbaa !2428
  %1195 = shl i64 %1192, 32
  %1196 = ashr exact i64 %1195, 32
  %1197 = icmp ne i64 %1196, %1192
  %1198 = zext i1 %1197 to i8
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1198, i8* %1199, align 1, !tbaa !2432
  %1200 = and i32 %1193, 255
  %1201 = call i32 @llvm.ctpop.i32(i32 %1200) #16
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1204, i8* %1205, align 1, !tbaa !2446
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1206, align 1, !tbaa !2447
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1207, align 1, !tbaa !2448
  %1208 = lshr i32 %1193, 31
  %1209 = trunc i32 %1208 to i8
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1209, i8* %1210, align 1, !tbaa !2449
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1198, i8* %1211, align 1, !tbaa !2450
  %1212 = load i64, i64* %RCX
  %1213 = load i64, i64* %RBP
  %1214 = sub i64 %1213, 44
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 3
  store i64 %1216, i64* %PC
  %1217 = trunc i64 %1212 to i32
  %1218 = inttoptr i64 %1214 to i32*
  %1219 = load i32, i32* %1218
  %1220 = add i32 %1219, %1217
  %1221 = zext i32 %1220 to i64
  store i64 %1221, i64* %RCX, align 8, !tbaa !2428
  %1222 = icmp ult i32 %1220, %1217
  %1223 = icmp ult i32 %1220, %1219
  %1224 = or i1 %1222, %1223
  %1225 = zext i1 %1224 to i8
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1225, i8* %1226, align 1, !tbaa !2432
  %1227 = and i32 %1220, 255
  %1228 = call i32 @llvm.ctpop.i32(i32 %1227) #16
  %1229 = trunc i32 %1228 to i8
  %1230 = and i8 %1229, 1
  %1231 = xor i8 %1230, 1
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1231, i8* %1232, align 1, !tbaa !2446
  %1233 = xor i32 %1219, %1217
  %1234 = xor i32 %1233, %1220
  %1235 = lshr i32 %1234, 4
  %1236 = trunc i32 %1235 to i8
  %1237 = and i8 %1236, 1
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1237, i8* %1238, align 1, !tbaa !2447
  %1239 = icmp eq i32 %1220, 0
  %1240 = zext i1 %1239 to i8
  %1241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1240, i8* %1241, align 1, !tbaa !2448
  %1242 = lshr i32 %1220, 31
  %1243 = trunc i32 %1242 to i8
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1243, i8* %1244, align 1, !tbaa !2449
  %1245 = lshr i32 %1217, 31
  %1246 = lshr i32 %1219, 31
  %1247 = xor i32 %1242, %1245
  %1248 = xor i32 %1242, %1246
  %1249 = add nuw nsw i32 %1247, %1248
  %1250 = icmp eq i32 %1249, 2
  %1251 = zext i1 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1251, i8* %1252, align 1, !tbaa !2450
  %1253 = load i32, i32* %ECX
  %1254 = zext i32 %1253 to i64
  %1255 = load i64, i64* %PC
  %1256 = add i64 %1255, 3
  store i64 %1256, i64* %PC
  %1257 = shl i64 %1254, 32
  %1258 = ashr exact i64 %1257, 32
  store i64 %1258, i64* %RDI, align 8, !tbaa !2428
  %1259 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1260 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1261 = load i64, i64* %RSI
  %1262 = load i64, i64* %RDI
  %1263 = mul i64 %1262, 4
  %1264 = add i64 %1263, %1261
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 5
  store i64 %1266, i64* %PC
  %1267 = bitcast i8* %1260 to <2 x float>*
  %1268 = load <2 x float>, <2 x float>* %1267, align 1
  %1269 = getelementptr inbounds i8, i8* %1260, i64 8
  %1270 = bitcast i8* %1269 to <2 x i32>*
  %1271 = load <2 x i32>, <2 x i32>* %1270, align 1
  %1272 = inttoptr i64 %1264 to float*
  %1273 = load float, float* %1272
  %1274 = extractelement <2 x float> %1268, i32 0
  %1275 = fdiv float %1274, %1273
  %1276 = bitcast i8* %1259 to float*
  store float %1275, float* %1276, align 1, !tbaa !2452
  %1277 = bitcast <2 x float> %1268 to <2 x i32>
  %1278 = extractelement <2 x i32> %1277, i32 1
  %1279 = getelementptr inbounds i8, i8* %1259, i64 4
  %1280 = bitcast i8* %1279 to i32*
  store i32 %1278, i32* %1280, align 1, !tbaa !2452
  %1281 = extractelement <2 x i32> %1271, i32 0
  %1282 = getelementptr inbounds i8, i8* %1259, i64 8
  %1283 = bitcast i8* %1282 to i32*
  store i32 %1281, i32* %1283, align 1, !tbaa !2452
  %1284 = extractelement <2 x i32> %1271, i32 1
  %1285 = getelementptr inbounds i8, i8* %1259, i64 12
  %1286 = bitcast i8* %1285 to i32*
  store i32 %1284, i32* %1286, align 1, !tbaa !2452
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 32
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 4
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1288 to i64*
  %1292 = load i64, i64* %1291
  store i64 %1292, i64* %RSI, align 8, !tbaa !2428
  %1293 = load i64, i64* %RBP
  %1294 = sub i64 %1293, 44
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 4
  store i64 %1296, i64* %PC
  %1297 = inttoptr i64 %1294 to i32*
  %1298 = load i32, i32* %1297
  %1299 = sext i32 %1298 to i64
  store i64 %1299, i64* %RDI, align 8, !tbaa !2428
  %1300 = load i64, i64* %RSI
  %1301 = load i64, i64* %RDI
  %1302 = mul i64 %1301, 4
  %1303 = add i64 %1302, %1300
  %1304 = bitcast %union.vec128_t* %XMM0 to i8*
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 5
  store i64 %1306, i64* %PC
  %1307 = bitcast i8* %1304 to <2 x float>*
  %1308 = load <2 x float>, <2 x float>* %1307, align 1
  %1309 = extractelement <2 x float> %1308, i32 0
  %1310 = inttoptr i64 %1303 to float*
  store float %1309, float* %1310
  %1311 = load i64, i64* %RBP
  %1312 = sub i64 %1311, 32
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 4
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1312 to i64*
  %1316 = load i64, i64* %1315
  store i64 %1316, i64* %RSI, align 8, !tbaa !2428
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 44
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 4
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  %1322 = load i32, i32* %1321
  %1323 = sext i32 %1322 to i64
  store i64 %1323, i64* %RDI, align 8, !tbaa !2428
  %1324 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1325 = load i64, i64* %RSI
  %1326 = load i64, i64* %RDI
  %1327 = mul i64 %1326, 4
  %1328 = add i64 %1327, %1325
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 5
  store i64 %1330, i64* %PC
  %1331 = inttoptr i64 %1328 to float*
  %1332 = load float, float* %1331
  %1333 = bitcast i8* %1324 to float*
  store float %1332, float* %1333, align 1, !tbaa !2452
  %1334 = getelementptr inbounds i8, i8* %1324, i64 4
  %1335 = bitcast i8* %1334 to float*
  store float 0.000000e+00, float* %1335, align 1, !tbaa !2452
  %1336 = getelementptr inbounds i8, i8* %1324, i64 8
  %1337 = bitcast i8* %1336 to float*
  store float 0.000000e+00, float* %1337, align 1, !tbaa !2452
  %1338 = getelementptr inbounds i8, i8* %1324, i64 12
  %1339 = bitcast i8* %1338 to float*
  store float 0.000000e+00, float* %1339, align 1, !tbaa !2452
  %1340 = bitcast %union.vec128_t* %XMM0 to i8*
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 4
  store i64 %1342, i64* %PC
  %1343 = bitcast i8* %1340 to i64*
  %1344 = load i64, i64* %1343, align 1
  %1345 = trunc i64 %1344 to i32
  %1346 = bitcast i64* %RCX to [2 x i32]*
  %1347 = bitcast i64* %RCX to i32*
  store i32 %1345, i32* %1347, align 1, !tbaa !2456
  %1348 = getelementptr inbounds [2 x i32], [2 x i32]* %1346, i64 0, i64 1
  store i32 0, i32* %1348, align 1, !tbaa !2456
  %1349 = load i64, i64* %RCX
  %1350 = load i64, i64* %PC
  %1351 = add i64 %1350, 6
  store i64 %1351, i64* %PC
  %1352 = xor i64 -2147483648, %1349
  %1353 = trunc i64 %1352 to i32
  %1354 = and i64 %1352, 4294967295
  store i64 %1354, i64* %RCX, align 8, !tbaa !2428
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1355, align 1, !tbaa !2432
  %1356 = and i32 %1353, 255
  %1357 = call i32 @llvm.ctpop.i32(i32 %1356) #16
  %1358 = trunc i32 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = xor i8 %1359, 1
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1360, i8* %1361, align 1, !tbaa !2446
  %1362 = icmp eq i32 %1353, 0
  %1363 = zext i1 %1362 to i8
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1363, i8* %1364, align 1, !tbaa !2448
  %1365 = lshr i32 %1353, 31
  %1366 = trunc i32 %1365 to i8
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1366, i8* %1367, align 1, !tbaa !2449
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1368, align 1, !tbaa !2450
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1369, align 1, !tbaa !2447
  %1370 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1371 = load i32, i32* %ECX
  %1372 = zext i32 %1371 to i64
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 4
  store i64 %1374, i64* %PC
  %1375 = bitcast i8* %1370 to i32*
  store i32 %1371, i32* %1375, align 1, !tbaa !2456
  %1376 = getelementptr inbounds i8, i8* %1370, i64 4
  %1377 = bitcast i8* %1376 to i32*
  store i32 0, i32* %1377, align 1, !tbaa !2456
  %1378 = getelementptr inbounds i8, i8* %1370, i64 8
  %1379 = bitcast i8* %1378 to i32*
  store i32 0, i32* %1379, align 1, !tbaa !2456
  %1380 = getelementptr inbounds i8, i8* %1370, i64 12
  %1381 = bitcast i8* %1380 to i32*
  store i32 0, i32* %1381, align 1, !tbaa !2456
  %1382 = load i64, i64* %RBP
  %1383 = sub i64 %1382, 40
  %1384 = bitcast %union.vec128_t* %XMM0 to i8*
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 5
  store i64 %1386, i64* %PC
  %1387 = bitcast i8* %1384 to <2 x float>*
  %1388 = load <2 x float>, <2 x float>* %1387, align 1
  %1389 = extractelement <2 x float> %1388, i32 0
  %1390 = inttoptr i64 %1383 to float*
  store float %1389, float* %1390
  %1391 = load i64, i64* %RBP
  %1392 = sub i64 %1391, 44
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 3
  store i64 %1394, i64* %PC
  %1395 = inttoptr i64 %1392 to i32*
  %1396 = load i32, i32* %1395
  %1397 = zext i32 %1396 to i64
  store i64 %1397, i64* %RDI, align 8, !tbaa !2428
  %1398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 40
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 5
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1400 to float*
  %1404 = load float, float* %1403
  %1405 = bitcast i8* %1398 to float*
  store float %1404, float* %1405, align 1, !tbaa !2452
  %1406 = getelementptr inbounds i8, i8* %1398, i64 4
  %1407 = bitcast i8* %1406 to float*
  store float 0.000000e+00, float* %1407, align 1, !tbaa !2452
  %1408 = getelementptr inbounds i8, i8* %1398, i64 8
  %1409 = bitcast i8* %1408 to float*
  store float 0.000000e+00, float* %1409, align 1, !tbaa !2452
  %1410 = getelementptr inbounds i8, i8* %1398, i64 12
  %1411 = bitcast i8* %1410 to float*
  store float 0.000000e+00, float* %1411, align 1, !tbaa !2452
  %1412 = load i64, i64* %RBP
  %1413 = sub i64 %1412, 8
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 4
  store i64 %1415, i64* %PC
  %1416 = inttoptr i64 %1413 to i64*
  %1417 = load i64, i64* %1416
  store i64 %1417, i64* %RSI, align 8, !tbaa !2428
  %1418 = load i64, i64* %RBP
  %1419 = sub i64 %1418, 12
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 3
  store i64 %1421, i64* %PC
  %1422 = inttoptr i64 %1419 to i32*
  %1423 = load i32, i32* %1422
  %1424 = zext i32 %1423 to i64
  store i64 %1424, i64* %RCX, align 8, !tbaa !2428
  %1425 = load i64, i64* %RCX
  %1426 = load i64, i64* %RBP
  %1427 = sub i64 %1426, 44
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 4
  store i64 %1429, i64* %PC
  %1430 = inttoptr i64 %1427 to i32*
  %1431 = load i32, i32* %1430
  %1432 = shl i64 %1425, 32
  %1433 = ashr exact i64 %1432, 32
  %1434 = sext i32 %1431 to i64
  %1435 = mul nsw i64 %1434, %1433
  %1436 = trunc i64 %1435 to i32
  %1437 = and i64 %1435, 4294967295
  store i64 %1437, i64* %RCX, align 8, !tbaa !2428
  %1438 = shl i64 %1435, 32
  %1439 = ashr exact i64 %1438, 32
  %1440 = icmp ne i64 %1439, %1435
  %1441 = zext i1 %1440 to i8
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1441, i8* %1442, align 1, !tbaa !2432
  %1443 = and i32 %1436, 255
  %1444 = call i32 @llvm.ctpop.i32(i32 %1443) #16
  %1445 = trunc i32 %1444 to i8
  %1446 = and i8 %1445, 1
  %1447 = xor i8 %1446, 1
  %1448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1447, i8* %1448, align 1, !tbaa !2446
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1449, align 1, !tbaa !2447
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1450, align 1, !tbaa !2448
  %1451 = lshr i32 %1436, 31
  %1452 = trunc i32 %1451 to i8
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1452, i8* %1453, align 1, !tbaa !2449
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1441, i8* %1454, align 1, !tbaa !2450
  %1455 = load i64, i64* %RCX
  %1456 = load i64, i64* %PC
  %1457 = add i64 %1456, 3
  store i64 %1457, i64* %PC
  %1458 = trunc i64 %1455 to i32
  %1459 = zext i32 %1458 to i64
  store i64 %1459, i64* %RCX, align 8, !tbaa !2428
  %1460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1460, align 1, !tbaa !2432
  %1461 = and i32 %1458, 255
  %1462 = call i32 @llvm.ctpop.i32(i32 %1461) #16
  %1463 = trunc i32 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = xor i8 %1464, 1
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1465, i8* %1466, align 1, !tbaa !2446
  %1467 = trunc i64 %1455 to i32
  %1468 = xor i32 %1467, %1458
  %1469 = lshr i32 %1468, 4
  %1470 = trunc i32 %1469 to i8
  %1471 = and i8 %1470, 1
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1471, i8* %1472, align 1, !tbaa !2447
  %1473 = icmp eq i32 %1458, 0
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1474, i8* %1475, align 1, !tbaa !2448
  %1476 = lshr i32 %1458, 31
  %1477 = trunc i32 %1476 to i8
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1477, i8* %1478, align 1, !tbaa !2449
  %1479 = lshr i32 %1458, 31
  %1480 = xor i32 %1476, %1479
  %1481 = add nuw nsw i32 %1480, %1476
  %1482 = icmp eq i32 %1481, 2
  %1483 = zext i1 %1482 to i8
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1483, i8* %1484, align 1, !tbaa !2450
  %1485 = load i32, i32* %ECX
  %1486 = zext i32 %1485 to i64
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 3
  store i64 %1488, i64* %PC
  %1489 = shl i64 %1486, 32
  %1490 = ashr exact i64 %1489, 32
  store i64 %1490, i64* %R8, align 8, !tbaa !2428
  %1491 = load i64, i64* %R8
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 4
  store i64 %1493, i64* %PC
  %1494 = shl i64 %1491, 1
  %1495 = icmp slt i64 %1494, 0
  %1496 = shl i64 %1494, 1
  store i64 %1496, i64* %R8, align 8, !tbaa !2428
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1498 = zext i1 %1495 to i8
  store i8 %1498, i8* %1497, align 1, !tbaa !2451
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1500 = trunc i64 %1496 to i32
  %1501 = and i32 %1500, 254
  %1502 = call i32 @llvm.ctpop.i32(i32 %1501) #16
  %1503 = trunc i32 %1502 to i8
  %1504 = and i8 %1503, 1
  %1505 = xor i8 %1504, 1
  store i8 %1505, i8* %1499, align 1, !tbaa !2451
  %1506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1506, align 1, !tbaa !2451
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1508 = icmp eq i64 %1496, 0
  %1509 = zext i1 %1508 to i8
  store i8 %1509, i8* %1507, align 1, !tbaa !2451
  %1510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1511 = lshr i64 %1496, 63
  %1512 = trunc i64 %1511 to i8
  store i8 %1512, i8* %1510, align 1, !tbaa !2451
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1513, align 1, !tbaa !2451
  %1514 = load i64, i64* %RSI
  %1515 = load i64, i64* %R8
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 3
  store i64 %1517, i64* %PC
  %1518 = add i64 %1515, %1514
  store i64 %1518, i64* %RSI, align 8, !tbaa !2428
  %1519 = icmp ult i64 %1518, %1514
  %1520 = icmp ult i64 %1518, %1515
  %1521 = or i1 %1519, %1520
  %1522 = zext i1 %1521 to i8
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1522, i8* %1523, align 1, !tbaa !2432
  %1524 = trunc i64 %1518 to i32
  %1525 = and i32 %1524, 255
  %1526 = call i32 @llvm.ctpop.i32(i32 %1525) #16
  %1527 = trunc i32 %1526 to i8
  %1528 = and i8 %1527, 1
  %1529 = xor i8 %1528, 1
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1529, i8* %1530, align 1, !tbaa !2446
  %1531 = xor i64 %1515, %1514
  %1532 = xor i64 %1531, %1518
  %1533 = lshr i64 %1532, 4
  %1534 = trunc i64 %1533 to i8
  %1535 = and i8 %1534, 1
  %1536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1535, i8* %1536, align 1, !tbaa !2447
  %1537 = icmp eq i64 %1518, 0
  %1538 = zext i1 %1537 to i8
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1538, i8* %1539, align 1, !tbaa !2448
  %1540 = lshr i64 %1518, 63
  %1541 = trunc i64 %1540 to i8
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1541, i8* %1542, align 1, !tbaa !2449
  %1543 = lshr i64 %1514, 63
  %1544 = lshr i64 %1515, 63
  %1545 = xor i64 %1540, %1543
  %1546 = xor i64 %1540, %1544
  %1547 = add nuw nsw i64 %1545, %1546
  %1548 = icmp eq i64 %1547, 2
  %1549 = zext i1 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1549, i8* %1550, align 1, !tbaa !2450
  %1551 = load i64, i64* %RBP
  %1552 = sub i64 %1551, 32
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 4
  store i64 %1554, i64* %PC
  %1555 = inttoptr i64 %1552 to i64*
  %1556 = load i64, i64* %1555
  store i64 %1556, i64* %RCX, align 8, !tbaa !2428
  %1557 = load i32, i32* %EAX
  %1558 = zext i32 %1557 to i64
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 2
  store i64 %1560, i64* %PC
  %1561 = and i64 %1558, 4294967295
  store i64 %1561, i64* %RDX, align 8, !tbaa !2428
  %1562 = bitcast i32* %R8D to i64*
  %1563 = load i32, i32* %EAX
  %1564 = zext i32 %1563 to i64
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 3
  store i64 %1566, i64* %PC
  %1567 = and i64 %1564, 4294967295
  store i64 %1567, i64* %1562, align 8, !tbaa !2428
  %1568 = load i64, i64* %PC
  %1569 = add i64 %1568, 2704
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 5
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 5
  store i64 %1573, i64* %PC
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1575 = load i64, i64* %1574, align 8, !tbaa !2428
  %1576 = add i64 %1575, -8
  %1577 = inttoptr i64 %1576 to i64*
  store i64 %1571, i64* %1577
  store i64 %1576, i64* %1574, align 8, !tbaa !2428
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1569, i64* %1578, align 8, !tbaa !2428
  %1579 = load i64, i64* %PC
  %1580 = call %struct.Memory* @sub_402870_daxpy(%struct.State* %0, i64 %1579, %struct.Memory* %MEMORY.3)
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 48
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = zext i32 %1586 to i64
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 3
  store i64 %1590, i64* %PC
  %1591 = trunc i64 %1588 to i32
  %1592 = add i32 1, %1591
  %1593 = zext i32 %1592 to i64
  store i64 %1593, i64* %RAX, align 8, !tbaa !2428
  %1594 = icmp ult i32 %1592, %1591
  %1595 = icmp ult i32 %1592, 1
  %1596 = or i1 %1594, %1595
  %1597 = zext i1 %1596 to i8
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1597, i8* %1598, align 1, !tbaa !2432
  %1599 = and i32 %1592, 255
  %1600 = call i32 @llvm.ctpop.i32(i32 %1599) #16
  %1601 = trunc i32 %1600 to i8
  %1602 = and i8 %1601, 1
  %1603 = xor i8 %1602, 1
  %1604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1603, i8* %1604, align 1, !tbaa !2446
  %1605 = xor i64 1, %1588
  %1606 = trunc i64 %1605 to i32
  %1607 = xor i32 %1606, %1592
  %1608 = lshr i32 %1607, 4
  %1609 = trunc i32 %1608 to i8
  %1610 = and i8 %1609, 1
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1610, i8* %1611, align 1, !tbaa !2447
  %1612 = icmp eq i32 %1592, 0
  %1613 = zext i1 %1612 to i8
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1613, i8* %1614, align 1, !tbaa !2448
  %1615 = lshr i32 %1592, 31
  %1616 = trunc i32 %1615 to i8
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1616, i8* %1617, align 1, !tbaa !2449
  %1618 = lshr i32 %1591, 31
  %1619 = xor i32 %1615, %1618
  %1620 = add nuw nsw i32 %1619, %1615
  %1621 = icmp eq i32 %1620, 2
  %1622 = zext i1 %1621 to i8
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1622, i8* %1623, align 1, !tbaa !2450
  %1624 = load i64, i64* %RBP
  %1625 = sub i64 %1624, 48
  %1626 = load i32, i32* %EAX
  %1627 = zext i32 %1626 to i64
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 3
  store i64 %1629, i64* %PC
  %1630 = inttoptr i64 %1625 to i32*
  store i32 %1626, i32* %1630
  %1631 = load i64, i64* %PC
  %1632 = sub i64 %1631, 166
  %1633 = load i64, i64* %PC
  %1634 = add i64 %1633, 5
  store i64 %1634, i64* %PC
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1632, i64* %1635, align 8, !tbaa !2428
  br label %block_401d48

block_401f4c:                                     ; preds = %block_401ea9
  %1636 = load i64, i64* %RBP
  %1637 = sub i64 %1636, 32
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 4
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1637 to i64*
  %1641 = load i64, i64* %1640
  store i64 %1641, i64* %RAX, align 8, !tbaa !2428
  %1642 = load i64, i64* %RBP
  %1643 = sub i64 %1642, 52
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 4
  store i64 %1645, i64* %PC
  %1646 = inttoptr i64 %1643 to i32*
  %1647 = load i32, i32* %1646
  %1648 = sext i32 %1647 to i64
  store i64 %1648, i64* %RCX, align 8, !tbaa !2428
  %1649 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1650 = load i64, i64* %RAX
  %1651 = load i64, i64* %RCX
  %1652 = mul i64 %1651, 4
  %1653 = add i64 %1652, %1650
  %1654 = load i64, i64* %PC
  %1655 = add i64 %1654, 5
  store i64 %1655, i64* %PC
  %1656 = inttoptr i64 %1653 to float*
  %1657 = load float, float* %1656
  %1658 = bitcast i8* %1649 to float*
  store float %1657, float* %1658, align 1, !tbaa !2452
  %1659 = getelementptr inbounds i8, i8* %1649, i64 4
  %1660 = bitcast i8* %1659 to float*
  store float 0.000000e+00, float* %1660, align 1, !tbaa !2452
  %1661 = getelementptr inbounds i8, i8* %1649, i64 8
  %1662 = bitcast i8* %1661 to float*
  store float 0.000000e+00, float* %1662, align 1, !tbaa !2452
  %1663 = getelementptr inbounds i8, i8* %1649, i64 12
  %1664 = bitcast i8* %1663 to float*
  store float 0.000000e+00, float* %1664, align 1, !tbaa !2452
  %1665 = load i64, i64* %RBP
  %1666 = sub i64 %1665, 40
  %1667 = bitcast %union.vec128_t* %XMM0 to i8*
  %1668 = load i64, i64* %PC
  %1669 = add i64 %1668, 5
  store i64 %1669, i64* %PC
  %1670 = bitcast i8* %1667 to <2 x float>*
  %1671 = load <2 x float>, <2 x float>* %1670, align 1
  %1672 = extractelement <2 x float> %1671, i32 0
  %1673 = inttoptr i64 %1666 to float*
  store float %1672, float* %1673
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 32
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 4
  store i64 %1677, i64* %PC
  %1678 = inttoptr i64 %1675 to i64*
  %1679 = load i64, i64* %1678
  store i64 %1679, i64* %RAX, align 8, !tbaa !2428
  %1680 = load i64, i64* %RBP
  %1681 = sub i64 %1680, 44
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 4
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1681 to i32*
  %1685 = load i32, i32* %1684
  %1686 = sext i32 %1685 to i64
  store i64 %1686, i64* %RCX, align 8, !tbaa !2428
  %1687 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1688 = load i64, i64* %RAX
  %1689 = load i64, i64* %RCX
  %1690 = mul i64 %1689, 4
  %1691 = add i64 %1690, %1688
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 5
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to float*
  %1695 = load float, float* %1694
  %1696 = bitcast i8* %1687 to float*
  store float %1695, float* %1696, align 1, !tbaa !2452
  %1697 = getelementptr inbounds i8, i8* %1687, i64 4
  %1698 = bitcast i8* %1697 to float*
  store float 0.000000e+00, float* %1698, align 1, !tbaa !2452
  %1699 = getelementptr inbounds i8, i8* %1687, i64 8
  %1700 = bitcast i8* %1699 to float*
  store float 0.000000e+00, float* %1700, align 1, !tbaa !2452
  %1701 = getelementptr inbounds i8, i8* %1687, i64 12
  %1702 = bitcast i8* %1701 to float*
  store float 0.000000e+00, float* %1702, align 1, !tbaa !2452
  %1703 = load i64, i64* %RBP
  %1704 = sub i64 %1703, 32
  %1705 = load i64, i64* %PC
  %1706 = add i64 %1705, 4
  store i64 %1706, i64* %PC
  %1707 = inttoptr i64 %1704 to i64*
  %1708 = load i64, i64* %1707
  store i64 %1708, i64* %RAX, align 8, !tbaa !2428
  %1709 = load i64, i64* %RBP
  %1710 = sub i64 %1709, 52
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 4
  store i64 %1712, i64* %PC
  %1713 = inttoptr i64 %1710 to i32*
  %1714 = load i32, i32* %1713
  %1715 = sext i32 %1714 to i64
  store i64 %1715, i64* %RCX, align 8, !tbaa !2428
  %1716 = load i64, i64* %RAX
  %1717 = load i64, i64* %RCX
  %1718 = mul i64 %1717, 4
  %1719 = add i64 %1718, %1716
  %1720 = bitcast %union.vec128_t* %XMM0 to i8*
  %1721 = load i64, i64* %PC
  %1722 = add i64 %1721, 5
  store i64 %1722, i64* %PC
  %1723 = bitcast i8* %1720 to <2 x float>*
  %1724 = load <2 x float>, <2 x float>* %1723, align 1
  %1725 = extractelement <2 x float> %1724, i32 0
  %1726 = inttoptr i64 %1719 to float*
  store float %1725, float* %1726
  %1727 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1728 = load i64, i64* %RBP
  %1729 = sub i64 %1728, 40
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 5
  store i64 %1731, i64* %PC
  %1732 = inttoptr i64 %1729 to float*
  %1733 = load float, float* %1732
  %1734 = bitcast i8* %1727 to float*
  store float %1733, float* %1734, align 1, !tbaa !2452
  %1735 = getelementptr inbounds i8, i8* %1727, i64 4
  %1736 = bitcast i8* %1735 to float*
  store float 0.000000e+00, float* %1736, align 1, !tbaa !2452
  %1737 = getelementptr inbounds i8, i8* %1727, i64 8
  %1738 = bitcast i8* %1737 to float*
  store float 0.000000e+00, float* %1738, align 1, !tbaa !2452
  %1739 = getelementptr inbounds i8, i8* %1727, i64 12
  %1740 = bitcast i8* %1739 to float*
  store float 0.000000e+00, float* %1740, align 1, !tbaa !2452
  %1741 = load i64, i64* %RBP
  %1742 = sub i64 %1741, 32
  %1743 = load i64, i64* %PC
  %1744 = add i64 %1743, 4
  store i64 %1744, i64* %PC
  %1745 = inttoptr i64 %1742 to i64*
  %1746 = load i64, i64* %1745
  store i64 %1746, i64* %RAX, align 8, !tbaa !2428
  %1747 = load i64, i64* %RBP
  %1748 = sub i64 %1747, 44
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 4
  store i64 %1750, i64* %PC
  %1751 = inttoptr i64 %1748 to i32*
  %1752 = load i32, i32* %1751
  %1753 = sext i32 %1752 to i64
  store i64 %1753, i64* %RCX, align 8, !tbaa !2428
  %1754 = load i64, i64* %RAX
  %1755 = load i64, i64* %RCX
  %1756 = mul i64 %1755, 4
  %1757 = add i64 %1756, %1754
  %1758 = bitcast %union.vec128_t* %XMM0 to i8*
  %1759 = load i64, i64* %PC
  %1760 = add i64 %1759, 5
  store i64 %1760, i64* %PC
  %1761 = bitcast i8* %1758 to <2 x float>*
  %1762 = load <2 x float>, <2 x float>* %1761, align 1
  %1763 = extractelement <2 x float> %1762, i32 0
  %1764 = inttoptr i64 %1757 to float*
  store float %1763, float* %1764
  br label %block_401f8a

block_401d48:                                     ; preds = %block_401d41, %block_401d54
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_401d41 ], [ %1580, %block_401d54 ]
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 48
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 3
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to i32*
  %1770 = load i32, i32* %1769
  %1771 = zext i32 %1770 to i64
  store i64 %1771, i64* %RAX, align 8, !tbaa !2428
  %1772 = load i32, i32* %EAX
  %1773 = zext i32 %1772 to i64
  %1774 = load i64, i64* %RBP
  %1775 = sub i64 %1774, 16
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 3
  store i64 %1777, i64* %PC
  %1778 = inttoptr i64 %1775 to i32*
  %1779 = load i32, i32* %1778
  %1780 = sub i32 %1772, %1779
  %1781 = icmp ult i32 %1772, %1779
  %1782 = zext i1 %1781 to i8
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1782, i8* %1783, align 1, !tbaa !2432
  %1784 = and i32 %1780, 255
  %1785 = call i32 @llvm.ctpop.i32(i32 %1784) #16
  %1786 = trunc i32 %1785 to i8
  %1787 = and i8 %1786, 1
  %1788 = xor i8 %1787, 1
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1788, i8* %1789, align 1, !tbaa !2446
  %1790 = xor i32 %1779, %1772
  %1791 = xor i32 %1790, %1780
  %1792 = lshr i32 %1791, 4
  %1793 = trunc i32 %1792 to i8
  %1794 = and i8 %1793, 1
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1794, i8* %1795, align 1, !tbaa !2447
  %1796 = icmp eq i32 %1780, 0
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1797, i8* %1798, align 1, !tbaa !2448
  %1799 = lshr i32 %1780, 31
  %1800 = trunc i32 %1799 to i8
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1800, i8* %1801, align 1, !tbaa !2449
  %1802 = lshr i32 %1772, 31
  %1803 = lshr i32 %1779, 31
  %1804 = xor i32 %1803, %1802
  %1805 = xor i32 %1799, %1802
  %1806 = add nuw nsw i32 %1805, %1804
  %1807 = icmp eq i32 %1806, 2
  %1808 = zext i1 %1807 to i8
  %1809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1808, i8* %1809, align 1, !tbaa !2450
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 165
  %1812 = load i64, i64* %PC
  %1813 = add i64 %1812, 6
  %1814 = load i64, i64* %PC
  %1815 = add i64 %1814, 6
  store i64 %1815, i64* %PC
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1817 = load i8, i8* %1816, align 1, !tbaa !2449
  %1818 = icmp ne i8 %1817, 0
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1820 = load i8, i8* %1819, align 1, !tbaa !2450
  %1821 = icmp ne i8 %1820, 0
  %1822 = xor i1 %1818, %1821
  %1823 = xor i1 %1822, true
  %1824 = zext i1 %1823 to i8
  store i8 %1824, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1826 = select i1 %1822, i64 %1813, i64 %1811
  store i64 %1826, i64* %1825, align 8, !tbaa !2428
  %1827 = load i8, i8* %BRANCH_TAKEN
  %1828 = icmp eq i8 %1827, 1
  %1829 = load i64, i64* %PC
  br i1 %1828, label %block_401df3, label %block_401d54

block_401caa:                                     ; preds = %block_401c7e
  %1830 = load i64, i64* %RBP
  %1831 = sub i64 %1830, 32
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 4
  store i64 %1833, i64* %PC
  %1834 = inttoptr i64 %1831 to i64*
  %1835 = load i64, i64* %1834
  store i64 %1835, i64* %RAX, align 8, !tbaa !2428
  %1836 = load i64, i64* %RBP
  %1837 = sub i64 %1836, 44
  %1838 = load i64, i64* %PC
  %1839 = add i64 %1838, 4
  store i64 %1839, i64* %PC
  %1840 = inttoptr i64 %1837 to i32*
  %1841 = load i32, i32* %1840
  %1842 = sext i32 %1841 to i64
  store i64 %1842, i64* %RCX, align 8, !tbaa !2428
  %1843 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1844 = load i64, i64* %RAX
  %1845 = load i64, i64* %RCX
  %1846 = mul i64 %1845, 4
  %1847 = add i64 %1846, %1844
  %1848 = load i64, i64* %PC
  %1849 = add i64 %1848, 5
  store i64 %1849, i64* %PC
  %1850 = inttoptr i64 %1847 to float*
  %1851 = load float, float* %1850
  %1852 = bitcast i8* %1843 to float*
  store float %1851, float* %1852, align 1, !tbaa !2452
  %1853 = getelementptr inbounds i8, i8* %1843, i64 4
  %1854 = bitcast i8* %1853 to float*
  store float 0.000000e+00, float* %1854, align 1, !tbaa !2452
  %1855 = getelementptr inbounds i8, i8* %1843, i64 8
  %1856 = bitcast i8* %1855 to float*
  store float 0.000000e+00, float* %1856, align 1, !tbaa !2452
  %1857 = getelementptr inbounds i8, i8* %1843, i64 12
  %1858 = bitcast i8* %1857 to float*
  store float 0.000000e+00, float* %1858, align 1, !tbaa !2452
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 32
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 4
  store i64 %1862, i64* %PC
  %1863 = inttoptr i64 %1860 to i64*
  %1864 = load i64, i64* %1863
  store i64 %1864, i64* %RAX, align 8, !tbaa !2428
  %1865 = load i64, i64* %RBP
  %1866 = sub i64 %1865, 52
  %1867 = load i64, i64* %PC
  %1868 = add i64 %1867, 4
  store i64 %1868, i64* %PC
  %1869 = inttoptr i64 %1866 to i32*
  %1870 = load i32, i32* %1869
  %1871 = sext i32 %1870 to i64
  store i64 %1871, i64* %RCX, align 8, !tbaa !2428
  %1872 = load i64, i64* %RAX
  %1873 = load i64, i64* %RCX
  %1874 = mul i64 %1873, 4
  %1875 = add i64 %1874, %1872
  %1876 = bitcast %union.vec128_t* %XMM0 to i8*
  %1877 = load i64, i64* %PC
  %1878 = add i64 %1877, 5
  store i64 %1878, i64* %PC
  %1879 = bitcast i8* %1876 to <2 x float>*
  %1880 = load <2 x float>, <2 x float>* %1879, align 1
  %1881 = extractelement <2 x float> %1880, i32 0
  %1882 = inttoptr i64 %1875 to float*
  store float %1881, float* %1882
  %1883 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1884 = load i64, i64* %RBP
  %1885 = sub i64 %1884, 40
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 5
  store i64 %1887, i64* %PC
  %1888 = inttoptr i64 %1885 to float*
  %1889 = load float, float* %1888
  %1890 = bitcast i8* %1883 to float*
  store float %1889, float* %1890, align 1, !tbaa !2452
  %1891 = getelementptr inbounds i8, i8* %1883, i64 4
  %1892 = bitcast i8* %1891 to float*
  store float 0.000000e+00, float* %1892, align 1, !tbaa !2452
  %1893 = getelementptr inbounds i8, i8* %1883, i64 8
  %1894 = bitcast i8* %1893 to float*
  store float 0.000000e+00, float* %1894, align 1, !tbaa !2452
  %1895 = getelementptr inbounds i8, i8* %1883, i64 12
  %1896 = bitcast i8* %1895 to float*
  store float 0.000000e+00, float* %1896, align 1, !tbaa !2452
  %1897 = load i64, i64* %RBP
  %1898 = sub i64 %1897, 32
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 4
  store i64 %1900, i64* %PC
  %1901 = inttoptr i64 %1898 to i64*
  %1902 = load i64, i64* %1901
  store i64 %1902, i64* %RAX, align 8, !tbaa !2428
  %1903 = load i64, i64* %RBP
  %1904 = sub i64 %1903, 44
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 4
  store i64 %1906, i64* %PC
  %1907 = inttoptr i64 %1904 to i32*
  %1908 = load i32, i32* %1907
  %1909 = sext i32 %1908 to i64
  store i64 %1909, i64* %RCX, align 8, !tbaa !2428
  %1910 = load i64, i64* %RAX
  %1911 = load i64, i64* %RCX
  %1912 = mul i64 %1911, 4
  %1913 = add i64 %1912, %1910
  %1914 = bitcast %union.vec128_t* %XMM0 to i8*
  %1915 = load i64, i64* %PC
  %1916 = add i64 %1915, 5
  store i64 %1916, i64* %PC
  %1917 = bitcast i8* %1914 to <2 x float>*
  %1918 = load <2 x float>, <2 x float>* %1917, align 1
  %1919 = extractelement <2 x float> %1918, i32 0
  %1920 = inttoptr i64 %1913 to float*
  store float %1919, float* %1920
  br label %block_401cd6

block_401d41:                                     ; preds = %block_401d3c, %block_401c61
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401c61 ], [ %MEMORY.1, %block_401d3c ]
  %1921 = load i64, i64* %RBP
  %1922 = sub i64 %1921, 48
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 7
  store i64 %1924, i64* %PC
  %1925 = inttoptr i64 %1922 to i32*
  store i32 0, i32* %1925
  br label %block_401d48

block_401e9d:                                     ; preds = %block_401f8a, %block_401e96
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.0, %block_401e96 ], [ %MEMORY.8, %block_401f8a ]
  %1926 = load i64, i64* %RBP
  %1927 = sub i64 %1926, 48
  %1928 = load i64, i64* %PC
  %1929 = add i64 %1928, 3
  store i64 %1929, i64* %PC
  %1930 = inttoptr i64 %1927 to i32*
  %1931 = load i32, i32* %1930
  %1932 = zext i32 %1931 to i64
  store i64 %1932, i64* %RAX, align 8, !tbaa !2428
  %1933 = load i32, i32* %EAX
  %1934 = zext i32 %1933 to i64
  %1935 = load i64, i64* %RBP
  %1936 = sub i64 %1935, 56
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 3
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1936 to i32*
  %1940 = load i32, i32* %1939
  %1941 = sub i32 %1933, %1940
  %1942 = icmp ult i32 %1933, %1940
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1943, i8* %1944, align 1, !tbaa !2432
  %1945 = and i32 %1941, 255
  %1946 = call i32 @llvm.ctpop.i32(i32 %1945) #16
  %1947 = trunc i32 %1946 to i8
  %1948 = and i8 %1947, 1
  %1949 = xor i8 %1948, 1
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1949, i8* %1950, align 1, !tbaa !2446
  %1951 = xor i32 %1940, %1933
  %1952 = xor i32 %1951, %1941
  %1953 = lshr i32 %1952, 4
  %1954 = trunc i32 %1953 to i8
  %1955 = and i8 %1954, 1
  %1956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1955, i8* %1956, align 1, !tbaa !2447
  %1957 = icmp eq i32 %1941, 0
  %1958 = zext i1 %1957 to i8
  %1959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1958, i8* %1959, align 1, !tbaa !2448
  %1960 = lshr i32 %1941, 31
  %1961 = trunc i32 %1960 to i8
  %1962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1961, i8* %1962, align 1, !tbaa !2449
  %1963 = lshr i32 %1933, 31
  %1964 = lshr i32 %1940, 31
  %1965 = xor i32 %1964, %1963
  %1966 = xor i32 %1960, %1963
  %1967 = add nuw nsw i32 %1966, %1965
  %1968 = icmp eq i32 %1967, 2
  %1969 = zext i1 %1968 to i8
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1969, i8* %1970, align 1, !tbaa !2450
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 250
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 6
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 6
  store i64 %1976, i64* %PC
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1978 = load i8, i8* %1977, align 1, !tbaa !2449
  %1979 = icmp ne i8 %1978, 0
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1981 = load i8, i8* %1980, align 1, !tbaa !2450
  %1982 = icmp ne i8 %1981, 0
  %1983 = xor i1 %1979, %1982
  %1984 = xor i1 %1983, true
  %1985 = zext i1 %1984 to i8
  store i8 %1985, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1987 = select i1 %1983, i64 %1974, i64 %1972
  store i64 %1987, i64* %1986, align 8, !tbaa !2428
  %1988 = load i8, i8* %BRANCH_TAKEN
  %1989 = icmp eq i8 %1988, 1
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 5
  br i1 %1989, label %block_401f9d, label %block_401ea9

block_401fa2:                                     ; preds = %block_401e8c, %block_401f9d
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.0, %block_401e8c ], [ %MEMORY.5, %block_401f9d ]
  %1992 = load i64, i64* %PC
  %1993 = add i64 %1992, 5
  %1994 = load i64, i64* %PC
  %1995 = add i64 %1994, 5
  store i64 %1995, i64* %PC
  %1996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1993, i64* %1996, align 8, !tbaa !2428
  br label %block_401fa7

block_401d3c:                                     ; preds = %block_401c72
  %1997 = load i64, i64* %PC
  %1998 = add i64 %1997, 5
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 5
  store i64 %2000, i64* %PC
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1998, i64* %2001, align 8, !tbaa !2428
  br label %block_401d41

block_401f9d:                                     ; preds = %block_401e9d
  %2002 = load i64, i64* %PC
  %2003 = add i64 %2002, 5
  store i64 %2003, i64* %PC
  %2004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1991, i64* %2004, align 8, !tbaa !2428
  br label %block_401fa2

block_401e96:                                     ; preds = %block_401e8c
  %2005 = load i64, i64* %RBP
  %2006 = sub i64 %2005, 48
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 7
  store i64 %2008, i64* %PC
  %2009 = inttoptr i64 %2006 to i32*
  store i32 1, i32* %2009
  br label %block_401e9d

block_401ea9:                                     ; preds = %block_401e9d
  store i64 %1991, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2010 = load i64, i64* %RBP
  %2011 = sub i64 %2010, 16
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 3
  store i64 %2013, i64* %PC
  %2014 = inttoptr i64 %2011 to i32*
  %2015 = load i32, i32* %2014
  %2016 = zext i32 %2015 to i64
  store i64 %2016, i64* %RCX, align 8, !tbaa !2428
  %2017 = load i64, i64* %RBP
  %2018 = sub i64 %2017, 48
  %2019 = load i64, i64* %PC
  %2020 = add i64 %2019, 3
  store i64 %2020, i64* %PC
  %2021 = inttoptr i64 %2018 to i32*
  %2022 = load i32, i32* %2021
  %2023 = zext i32 %2022 to i64
  store i64 %2023, i64* %RDX, align 8, !tbaa !2428
  %2024 = load i64, i64* %RDX
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 3
  store i64 %2026, i64* %PC
  %2027 = trunc i64 %2024 to i32
  %2028 = add i32 1, %2027
  %2029 = zext i32 %2028 to i64
  store i64 %2029, i64* %RDX, align 8, !tbaa !2428
  %2030 = icmp ult i32 %2028, %2027
  %2031 = icmp ult i32 %2028, 1
  %2032 = or i1 %2030, %2031
  %2033 = zext i1 %2032 to i8
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2033, i8* %2034, align 1, !tbaa !2432
  %2035 = and i32 %2028, 255
  %2036 = call i32 @llvm.ctpop.i32(i32 %2035) #16
  %2037 = trunc i32 %2036 to i8
  %2038 = and i8 %2037, 1
  %2039 = xor i8 %2038, 1
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2039, i8* %2040, align 1, !tbaa !2446
  %2041 = xor i64 1, %2024
  %2042 = trunc i64 %2041 to i32
  %2043 = xor i32 %2042, %2028
  %2044 = lshr i32 %2043, 4
  %2045 = trunc i32 %2044 to i8
  %2046 = and i8 %2045, 1
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2046, i8* %2047, align 1, !tbaa !2447
  %2048 = icmp eq i32 %2028, 0
  %2049 = zext i1 %2048 to i8
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2049, i8* %2050, align 1, !tbaa !2448
  %2051 = lshr i32 %2028, 31
  %2052 = trunc i32 %2051 to i8
  %2053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2052, i8* %2053, align 1, !tbaa !2449
  %2054 = lshr i32 %2027, 31
  %2055 = xor i32 %2051, %2054
  %2056 = add nuw nsw i32 %2055, %2051
  %2057 = icmp eq i32 %2056, 2
  %2058 = zext i1 %2057 to i8
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2058, i8* %2059, align 1, !tbaa !2450
  %2060 = load i64, i64* %RCX
  %2061 = load i32, i32* %EDX
  %2062 = zext i32 %2061 to i64
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 2
  store i64 %2064, i64* %PC
  %2065 = trunc i64 %2060 to i32
  %2066 = sub i32 %2065, %2061
  %2067 = zext i32 %2066 to i64
  store i64 %2067, i64* %RCX, align 8, !tbaa !2428
  %2068 = icmp ult i32 %2065, %2061
  %2069 = zext i1 %2068 to i8
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2069, i8* %2070, align 1, !tbaa !2432
  %2071 = and i32 %2066, 255
  %2072 = call i32 @llvm.ctpop.i32(i32 %2071) #16
  %2073 = trunc i32 %2072 to i8
  %2074 = and i8 %2073, 1
  %2075 = xor i8 %2074, 1
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2075, i8* %2076, align 1, !tbaa !2446
  %2077 = xor i64 %2062, %2060
  %2078 = trunc i64 %2077 to i32
  %2079 = xor i32 %2078, %2066
  %2080 = lshr i32 %2079, 4
  %2081 = trunc i32 %2080 to i8
  %2082 = and i8 %2081, 1
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2082, i8* %2083, align 1, !tbaa !2447
  %2084 = icmp eq i32 %2066, 0
  %2085 = zext i1 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2085, i8* %2086, align 1, !tbaa !2448
  %2087 = lshr i32 %2066, 31
  %2088 = trunc i32 %2087 to i8
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2088, i8* %2089, align 1, !tbaa !2449
  %2090 = lshr i32 %2065, 31
  %2091 = lshr i32 %2061, 31
  %2092 = xor i32 %2091, %2090
  %2093 = xor i32 %2087, %2090
  %2094 = add nuw nsw i32 %2093, %2092
  %2095 = icmp eq i32 %2094, 2
  %2096 = zext i1 %2095 to i8
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2096, i8* %2097, align 1, !tbaa !2450
  %2098 = load i64, i64* %RBP
  %2099 = sub i64 %2098, 44
  %2100 = load i32, i32* %ECX
  %2101 = zext i32 %2100 to i64
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 3
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2099 to i32*
  store i32 %2100, i32* %2104
  %2105 = load i64, i64* %RBP
  %2106 = sub i64 %2105, 32
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 4
  store i64 %2108, i64* %PC
  %2109 = inttoptr i64 %2106 to i64*
  %2110 = load i64, i64* %2109
  store i64 %2110, i64* %RSI, align 8, !tbaa !2428
  %2111 = load i64, i64* %RBP
  %2112 = sub i64 %2111, 44
  %2113 = load i64, i64* %PC
  %2114 = add i64 %2113, 4
  store i64 %2114, i64* %PC
  %2115 = inttoptr i64 %2112 to i32*
  %2116 = load i32, i32* %2115
  %2117 = sext i32 %2116 to i64
  store i64 %2117, i64* %RDI, align 8, !tbaa !2428
  %2118 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2119 = load i64, i64* %RSI
  %2120 = load i64, i64* %RDI
  %2121 = mul i64 %2120, 4
  %2122 = add i64 %2121, %2119
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 5
  store i64 %2124, i64* %PC
  %2125 = inttoptr i64 %2122 to float*
  %2126 = load float, float* %2125
  %2127 = bitcast i8* %2118 to float*
  store float %2126, float* %2127, align 1, !tbaa !2452
  %2128 = getelementptr inbounds i8, i8* %2118, i64 4
  %2129 = bitcast i8* %2128 to float*
  store float 0.000000e+00, float* %2129, align 1, !tbaa !2452
  %2130 = getelementptr inbounds i8, i8* %2118, i64 8
  %2131 = bitcast i8* %2130 to float*
  store float 0.000000e+00, float* %2131, align 1, !tbaa !2452
  %2132 = getelementptr inbounds i8, i8* %2118, i64 12
  %2133 = bitcast i8* %2132 to float*
  store float 0.000000e+00, float* %2133, align 1, !tbaa !2452
  %2134 = load i64, i64* %RBP
  %2135 = sub i64 %2134, 16
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 3
  store i64 %2137, i64* %PC
  %2138 = inttoptr i64 %2135 to i32*
  %2139 = load i32, i32* %2138
  %2140 = zext i32 %2139 to i64
  store i64 %2140, i64* %RCX, align 8, !tbaa !2428
  %2141 = load i64, i64* %RBP
  %2142 = sub i64 %2141, 44
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  %2145 = inttoptr i64 %2142 to i32*
  %2146 = load i32, i32* %2145
  %2147 = zext i32 %2146 to i64
  store i64 %2147, i64* %RDX, align 8, !tbaa !2428
  %2148 = load i64, i64* %RDX
  %2149 = load i64, i64* %PC
  %2150 = add i64 %2149, 3
  store i64 %2150, i64* %PC
  %2151 = trunc i64 %2148 to i32
  %2152 = add i32 1, %2151
  %2153 = zext i32 %2152 to i64
  store i64 %2153, i64* %RDX, align 8, !tbaa !2428
  %2154 = icmp ult i32 %2152, %2151
  %2155 = icmp ult i32 %2152, 1
  %2156 = or i1 %2154, %2155
  %2157 = zext i1 %2156 to i8
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2157, i8* %2158, align 1, !tbaa !2432
  %2159 = and i32 %2152, 255
  %2160 = call i32 @llvm.ctpop.i32(i32 %2159) #16
  %2161 = trunc i32 %2160 to i8
  %2162 = and i8 %2161, 1
  %2163 = xor i8 %2162, 1
  %2164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2163, i8* %2164, align 1, !tbaa !2446
  %2165 = xor i64 1, %2148
  %2166 = trunc i64 %2165 to i32
  %2167 = xor i32 %2166, %2152
  %2168 = lshr i32 %2167, 4
  %2169 = trunc i32 %2168 to i8
  %2170 = and i8 %2169, 1
  %2171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2170, i8* %2171, align 1, !tbaa !2447
  %2172 = icmp eq i32 %2152, 0
  %2173 = zext i1 %2172 to i8
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2173, i8* %2174, align 1, !tbaa !2448
  %2175 = lshr i32 %2152, 31
  %2176 = trunc i32 %2175 to i8
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2176, i8* %2177, align 1, !tbaa !2449
  %2178 = lshr i32 %2151, 31
  %2179 = xor i32 %2175, %2178
  %2180 = add nuw nsw i32 %2179, %2175
  %2181 = icmp eq i32 %2180, 2
  %2182 = zext i1 %2181 to i8
  %2183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2182, i8* %2183, align 1, !tbaa !2450
  %2184 = load i64, i64* %RCX
  %2185 = load i32, i32* %EDX
  %2186 = zext i32 %2185 to i64
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 2
  store i64 %2188, i64* %PC
  %2189 = trunc i64 %2184 to i32
  %2190 = sub i32 %2189, %2185
  %2191 = zext i32 %2190 to i64
  store i64 %2191, i64* %RCX, align 8, !tbaa !2428
  %2192 = icmp ult i32 %2189, %2185
  %2193 = zext i1 %2192 to i8
  %2194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2193, i8* %2194, align 1, !tbaa !2432
  %2195 = and i32 %2190, 255
  %2196 = call i32 @llvm.ctpop.i32(i32 %2195) #16
  %2197 = trunc i32 %2196 to i8
  %2198 = and i8 %2197, 1
  %2199 = xor i8 %2198, 1
  %2200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2199, i8* %2200, align 1, !tbaa !2446
  %2201 = xor i64 %2186, %2184
  %2202 = trunc i64 %2201 to i32
  %2203 = xor i32 %2202, %2190
  %2204 = lshr i32 %2203, 4
  %2205 = trunc i32 %2204 to i8
  %2206 = and i8 %2205, 1
  %2207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2206, i8* %2207, align 1, !tbaa !2447
  %2208 = icmp eq i32 %2190, 0
  %2209 = zext i1 %2208 to i8
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2209, i8* %2210, align 1, !tbaa !2448
  %2211 = lshr i32 %2190, 31
  %2212 = trunc i32 %2211 to i8
  %2213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2212, i8* %2213, align 1, !tbaa !2449
  %2214 = lshr i32 %2189, 31
  %2215 = lshr i32 %2185, 31
  %2216 = xor i32 %2215, %2214
  %2217 = xor i32 %2211, %2214
  %2218 = add nuw nsw i32 %2217, %2216
  %2219 = icmp eq i32 %2218, 2
  %2220 = zext i1 %2219 to i8
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2220, i8* %2221, align 1, !tbaa !2450
  %2222 = load i64, i64* %RBP
  %2223 = sub i64 %2222, 8
  %2224 = load i64, i64* %PC
  %2225 = add i64 %2224, 4
  store i64 %2225, i64* %PC
  %2226 = inttoptr i64 %2223 to i64*
  %2227 = load i64, i64* %2226
  store i64 %2227, i64* %RSI, align 8, !tbaa !2428
  %2228 = load i64, i64* %RBP
  %2229 = sub i64 %2228, 12
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 3
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2229 to i32*
  %2233 = load i32, i32* %2232
  %2234 = zext i32 %2233 to i64
  store i64 %2234, i64* %RDX, align 8, !tbaa !2428
  %2235 = load i64, i64* %RDX
  %2236 = load i64, i64* %RBP
  %2237 = sub i64 %2236, 44
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 4
  store i64 %2239, i64* %PC
  %2240 = inttoptr i64 %2237 to i32*
  %2241 = load i32, i32* %2240
  %2242 = shl i64 %2235, 32
  %2243 = ashr exact i64 %2242, 32
  %2244 = sext i32 %2241 to i64
  %2245 = mul nsw i64 %2244, %2243
  %2246 = trunc i64 %2245 to i32
  %2247 = and i64 %2245, 4294967295
  store i64 %2247, i64* %RDX, align 8, !tbaa !2428
  %2248 = shl i64 %2245, 32
  %2249 = ashr exact i64 %2248, 32
  %2250 = icmp ne i64 %2249, %2245
  %2251 = zext i1 %2250 to i8
  %2252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2251, i8* %2252, align 1, !tbaa !2432
  %2253 = and i32 %2246, 255
  %2254 = call i32 @llvm.ctpop.i32(i32 %2253) #16
  %2255 = trunc i32 %2254 to i8
  %2256 = and i8 %2255, 1
  %2257 = xor i8 %2256, 1
  %2258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2257, i8* %2258, align 1, !tbaa !2446
  %2259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2259, align 1, !tbaa !2447
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2260, align 1, !tbaa !2448
  %2261 = lshr i32 %2246, 31
  %2262 = trunc i32 %2261 to i8
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2262, i8* %2263, align 1, !tbaa !2449
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2251, i8* %2264, align 1, !tbaa !2450
  %2265 = load i64, i64* %RDX
  %2266 = load i64, i64* %RBP
  %2267 = sub i64 %2266, 44
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 3
  store i64 %2269, i64* %PC
  %2270 = trunc i64 %2265 to i32
  %2271 = inttoptr i64 %2267 to i32*
  %2272 = load i32, i32* %2271
  %2273 = add i32 %2272, %2270
  %2274 = zext i32 %2273 to i64
  store i64 %2274, i64* %RDX, align 8, !tbaa !2428
  %2275 = icmp ult i32 %2273, %2270
  %2276 = icmp ult i32 %2273, %2272
  %2277 = or i1 %2275, %2276
  %2278 = zext i1 %2277 to i8
  %2279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2278, i8* %2279, align 1, !tbaa !2432
  %2280 = and i32 %2273, 255
  %2281 = call i32 @llvm.ctpop.i32(i32 %2280) #16
  %2282 = trunc i32 %2281 to i8
  %2283 = and i8 %2282, 1
  %2284 = xor i8 %2283, 1
  %2285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2284, i8* %2285, align 1, !tbaa !2446
  %2286 = xor i32 %2272, %2270
  %2287 = xor i32 %2286, %2273
  %2288 = lshr i32 %2287, 4
  %2289 = trunc i32 %2288 to i8
  %2290 = and i8 %2289, 1
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2290, i8* %2291, align 1, !tbaa !2447
  %2292 = icmp eq i32 %2273, 0
  %2293 = zext i1 %2292 to i8
  %2294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2293, i8* %2294, align 1, !tbaa !2448
  %2295 = lshr i32 %2273, 31
  %2296 = trunc i32 %2295 to i8
  %2297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2296, i8* %2297, align 1, !tbaa !2449
  %2298 = lshr i32 %2270, 31
  %2299 = lshr i32 %2272, 31
  %2300 = xor i32 %2295, %2298
  %2301 = xor i32 %2295, %2299
  %2302 = add nuw nsw i32 %2300, %2301
  %2303 = icmp eq i32 %2302, 2
  %2304 = zext i1 %2303 to i8
  %2305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2304, i8* %2305, align 1, !tbaa !2450
  %2306 = load i64, i64* %RDX
  %2307 = load i64, i64* %PC
  %2308 = add i64 %2307, 3
  store i64 %2308, i64* %PC
  %2309 = trunc i64 %2306 to i32
  %2310 = add i32 1, %2309
  %2311 = zext i32 %2310 to i64
  store i64 %2311, i64* %RDX, align 8, !tbaa !2428
  %2312 = icmp ult i32 %2310, %2309
  %2313 = icmp ult i32 %2310, 1
  %2314 = or i1 %2312, %2313
  %2315 = zext i1 %2314 to i8
  %2316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2315, i8* %2316, align 1, !tbaa !2432
  %2317 = and i32 %2310, 255
  %2318 = call i32 @llvm.ctpop.i32(i32 %2317) #16
  %2319 = trunc i32 %2318 to i8
  %2320 = and i8 %2319, 1
  %2321 = xor i8 %2320, 1
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2321, i8* %2322, align 1, !tbaa !2446
  %2323 = xor i64 1, %2306
  %2324 = trunc i64 %2323 to i32
  %2325 = xor i32 %2324, %2310
  %2326 = lshr i32 %2325, 4
  %2327 = trunc i32 %2326 to i8
  %2328 = and i8 %2327, 1
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2328, i8* %2329, align 1, !tbaa !2447
  %2330 = icmp eq i32 %2310, 0
  %2331 = zext i1 %2330 to i8
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2331, i8* %2332, align 1, !tbaa !2448
  %2333 = lshr i32 %2310, 31
  %2334 = trunc i32 %2333 to i8
  %2335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2334, i8* %2335, align 1, !tbaa !2449
  %2336 = lshr i32 %2309, 31
  %2337 = xor i32 %2333, %2336
  %2338 = add nuw nsw i32 %2337, %2333
  %2339 = icmp eq i32 %2338, 2
  %2340 = zext i1 %2339 to i8
  %2341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2340, i8* %2341, align 1, !tbaa !2450
  %2342 = load i32, i32* %EDX
  %2343 = zext i32 %2342 to i64
  %2344 = load i64, i64* %PC
  %2345 = add i64 %2344, 3
  store i64 %2345, i64* %PC
  %2346 = shl i64 %2343, 32
  %2347 = ashr exact i64 %2346, 32
  store i64 %2347, i64* %RDI, align 8, !tbaa !2428
  %2348 = load i64, i64* %RDI
  %2349 = load i64, i64* %PC
  %2350 = add i64 %2349, 4
  store i64 %2350, i64* %PC
  %2351 = shl i64 %2348, 1
  %2352 = icmp slt i64 %2351, 0
  %2353 = shl i64 %2351, 1
  store i64 %2353, i64* %RDI, align 8, !tbaa !2428
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2355 = zext i1 %2352 to i8
  store i8 %2355, i8* %2354, align 1, !tbaa !2451
  %2356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2357 = trunc i64 %2353 to i32
  %2358 = and i32 %2357, 254
  %2359 = call i32 @llvm.ctpop.i32(i32 %2358) #16
  %2360 = trunc i32 %2359 to i8
  %2361 = and i8 %2360, 1
  %2362 = xor i8 %2361, 1
  store i8 %2362, i8* %2356, align 1, !tbaa !2451
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2363, align 1, !tbaa !2451
  %2364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2365 = icmp eq i64 %2353, 0
  %2366 = zext i1 %2365 to i8
  store i8 %2366, i8* %2364, align 1, !tbaa !2451
  %2367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2368 = lshr i64 %2353, 63
  %2369 = trunc i64 %2368 to i8
  store i8 %2369, i8* %2367, align 1, !tbaa !2451
  %2370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2370, align 1, !tbaa !2451
  %2371 = load i64, i64* %RSI
  %2372 = load i64, i64* %RDI
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 3
  store i64 %2374, i64* %PC
  %2375 = add i64 %2372, %2371
  store i64 %2375, i64* %RSI, align 8, !tbaa !2428
  %2376 = icmp ult i64 %2375, %2371
  %2377 = icmp ult i64 %2375, %2372
  %2378 = or i1 %2376, %2377
  %2379 = zext i1 %2378 to i8
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2379, i8* %2380, align 1, !tbaa !2432
  %2381 = trunc i64 %2375 to i32
  %2382 = and i32 %2381, 255
  %2383 = call i32 @llvm.ctpop.i32(i32 %2382) #16
  %2384 = trunc i32 %2383 to i8
  %2385 = and i8 %2384, 1
  %2386 = xor i8 %2385, 1
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2386, i8* %2387, align 1, !tbaa !2446
  %2388 = xor i64 %2372, %2371
  %2389 = xor i64 %2388, %2375
  %2390 = lshr i64 %2389, 4
  %2391 = trunc i64 %2390 to i8
  %2392 = and i8 %2391, 1
  %2393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2392, i8* %2393, align 1, !tbaa !2447
  %2394 = icmp eq i64 %2375, 0
  %2395 = zext i1 %2394 to i8
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2395, i8* %2396, align 1, !tbaa !2448
  %2397 = lshr i64 %2375, 63
  %2398 = trunc i64 %2397 to i8
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2398, i8* %2399, align 1, !tbaa !2449
  %2400 = lshr i64 %2371, 63
  %2401 = lshr i64 %2372, 63
  %2402 = xor i64 %2397, %2400
  %2403 = xor i64 %2397, %2401
  %2404 = add nuw nsw i64 %2402, %2403
  %2405 = icmp eq i64 %2404, 2
  %2406 = zext i1 %2405 to i8
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2406, i8* %2407, align 1, !tbaa !2450
  %2408 = load i64, i64* %RBP
  %2409 = sub i64 %2408, 32
  %2410 = load i64, i64* %PC
  %2411 = add i64 %2410, 4
  store i64 %2411, i64* %PC
  %2412 = inttoptr i64 %2409 to i64*
  %2413 = load i64, i64* %2412
  store i64 %2413, i64* %RDI, align 8, !tbaa !2428
  %2414 = load i64, i64* %RBP
  %2415 = sub i64 %2414, 44
  %2416 = load i64, i64* %PC
  %2417 = add i64 %2416, 3
  store i64 %2417, i64* %PC
  %2418 = inttoptr i64 %2415 to i32*
  %2419 = load i32, i32* %2418
  %2420 = zext i32 %2419 to i64
  store i64 %2420, i64* %RDX, align 8, !tbaa !2428
  %2421 = load i64, i64* %RDX
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 3
  store i64 %2423, i64* %PC
  %2424 = trunc i64 %2421 to i32
  %2425 = add i32 1, %2424
  %2426 = zext i32 %2425 to i64
  store i64 %2426, i64* %RDX, align 8, !tbaa !2428
  %2427 = icmp ult i32 %2425, %2424
  %2428 = icmp ult i32 %2425, 1
  %2429 = or i1 %2427, %2428
  %2430 = zext i1 %2429 to i8
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2430, i8* %2431, align 1, !tbaa !2432
  %2432 = and i32 %2425, 255
  %2433 = call i32 @llvm.ctpop.i32(i32 %2432) #16
  %2434 = trunc i32 %2433 to i8
  %2435 = and i8 %2434, 1
  %2436 = xor i8 %2435, 1
  %2437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2436, i8* %2437, align 1, !tbaa !2446
  %2438 = xor i64 1, %2421
  %2439 = trunc i64 %2438 to i32
  %2440 = xor i32 %2439, %2425
  %2441 = lshr i32 %2440, 4
  %2442 = trunc i32 %2441 to i8
  %2443 = and i8 %2442, 1
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2443, i8* %2444, align 1, !tbaa !2447
  %2445 = icmp eq i32 %2425, 0
  %2446 = zext i1 %2445 to i8
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2446, i8* %2447, align 1, !tbaa !2448
  %2448 = lshr i32 %2425, 31
  %2449 = trunc i32 %2448 to i8
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2449, i8* %2450, align 1, !tbaa !2449
  %2451 = lshr i32 %2424, 31
  %2452 = xor i32 %2448, %2451
  %2453 = add nuw nsw i32 %2452, %2448
  %2454 = icmp eq i32 %2453, 2
  %2455 = zext i1 %2454 to i8
  %2456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2455, i8* %2456, align 1, !tbaa !2450
  %2457 = load i32, i32* %EDX
  %2458 = zext i32 %2457 to i64
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 3
  store i64 %2460, i64* %PC
  %2461 = shl i64 %2458, 32
  %2462 = ashr exact i64 %2461, 32
  store i64 %2462, i64* %R8, align 8, !tbaa !2428
  %2463 = load i64, i64* %R8
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 4
  store i64 %2465, i64* %PC
  %2466 = shl i64 %2463, 1
  %2467 = icmp slt i64 %2466, 0
  %2468 = shl i64 %2466, 1
  store i64 %2468, i64* %R8, align 8, !tbaa !2428
  %2469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2470 = zext i1 %2467 to i8
  store i8 %2470, i8* %2469, align 1, !tbaa !2451
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2472 = trunc i64 %2468 to i32
  %2473 = and i32 %2472, 254
  %2474 = call i32 @llvm.ctpop.i32(i32 %2473) #16
  %2475 = trunc i32 %2474 to i8
  %2476 = and i8 %2475, 1
  %2477 = xor i8 %2476, 1
  store i8 %2477, i8* %2471, align 1, !tbaa !2451
  %2478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2478, align 1, !tbaa !2451
  %2479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2480 = icmp eq i64 %2468, 0
  %2481 = zext i1 %2480 to i8
  store i8 %2481, i8* %2479, align 1, !tbaa !2451
  %2482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2483 = lshr i64 %2468, 63
  %2484 = trunc i64 %2483 to i8
  store i8 %2484, i8* %2482, align 1, !tbaa !2451
  %2485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2485, align 1, !tbaa !2451
  %2486 = load i64, i64* %RDI
  %2487 = load i64, i64* %R8
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 3
  store i64 %2489, i64* %PC
  %2490 = add i64 %2487, %2486
  store i64 %2490, i64* %RDI, align 8, !tbaa !2428
  %2491 = icmp ult i64 %2490, %2486
  %2492 = icmp ult i64 %2490, %2487
  %2493 = or i1 %2491, %2492
  %2494 = zext i1 %2493 to i8
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2494, i8* %2495, align 1, !tbaa !2432
  %2496 = trunc i64 %2490 to i32
  %2497 = and i32 %2496, 255
  %2498 = call i32 @llvm.ctpop.i32(i32 %2497) #16
  %2499 = trunc i32 %2498 to i8
  %2500 = and i8 %2499, 1
  %2501 = xor i8 %2500, 1
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2501, i8* %2502, align 1, !tbaa !2446
  %2503 = xor i64 %2487, %2486
  %2504 = xor i64 %2503, %2490
  %2505 = lshr i64 %2504, 4
  %2506 = trunc i64 %2505 to i8
  %2507 = and i8 %2506, 1
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2507, i8* %2508, align 1, !tbaa !2447
  %2509 = icmp eq i64 %2490, 0
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2510, i8* %2511, align 1, !tbaa !2448
  %2512 = lshr i64 %2490, 63
  %2513 = trunc i64 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2513, i8* %2514, align 1, !tbaa !2449
  %2515 = lshr i64 %2486, 63
  %2516 = lshr i64 %2487, 63
  %2517 = xor i64 %2512, %2515
  %2518 = xor i64 %2512, %2516
  %2519 = add nuw nsw i64 %2517, %2518
  %2520 = icmp eq i64 %2519, 2
  %2521 = zext i1 %2520 to i8
  %2522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2521, i8* %2522, align 1, !tbaa !2450
  %2523 = load i64, i64* %RBP
  %2524 = sub i64 %2523, 80
  %2525 = load i64, i64* %RDI
  %2526 = load i64, i64* %PC
  %2527 = add i64 %2526, 4
  store i64 %2527, i64* %PC
  %2528 = inttoptr i64 %2524 to i64*
  store i64 %2525, i64* %2528
  %2529 = load i32, i32* %ECX
  %2530 = zext i32 %2529 to i64
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 2
  store i64 %2532, i64* %PC
  %2533 = and i64 %2530, 4294967295
  store i64 %2533, i64* %RDI, align 8, !tbaa !2428
  %2534 = load i32, i32* %EAX
  %2535 = zext i32 %2534 to i64
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 2
  store i64 %2537, i64* %PC
  %2538 = and i64 %2535, 4294967295
  store i64 %2538, i64* %RDX, align 8, !tbaa !2428
  %2539 = load i64, i64* %RBP
  %2540 = sub i64 %2539, 80
  %2541 = load i64, i64* %PC
  %2542 = add i64 %2541, 4
  store i64 %2542, i64* %PC
  %2543 = inttoptr i64 %2540 to i64*
  %2544 = load i64, i64* %2543
  store i64 %2544, i64* %RCX, align 8, !tbaa !2428
  %2545 = bitcast i32* %R8D to i64*
  %2546 = load i32, i32* %EAX
  %2547 = zext i32 %2546 to i64
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 3
  store i64 %2549, i64* %PC
  %2550 = and i64 %2547, 4294967295
  store i64 %2550, i64* %2545, align 8, !tbaa !2428
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 84
  %2553 = bitcast %union.vec128_t* %XMM0 to i8*
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 5
  store i64 %2555, i64* %PC
  %2556 = bitcast i8* %2553 to <2 x float>*
  %2557 = load <2 x float>, <2 x float>* %2556, align 1
  %2558 = extractelement <2 x float> %2557, i32 0
  %2559 = inttoptr i64 %2552 to float*
  store float %2558, float* %2559
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 2761
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 5
  %2564 = load i64, i64* %PC
  %2565 = add i64 %2564, 5
  store i64 %2565, i64* %PC
  %2566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2567 = load i64, i64* %2566, align 8, !tbaa !2428
  %2568 = add i64 %2567, -8
  %2569 = inttoptr i64 %2568 to i64*
  store i64 %2563, i64* %2569
  store i64 %2568, i64* %2566, align 8, !tbaa !2428
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2561, i64* %2570, align 8, !tbaa !2428
  %2571 = load i64, i64* %PC
  %2572 = call %struct.Memory* @sub_4029e0_ddot(%struct.State* %0, i64 %2571, %struct.Memory* %MEMORY.5)
  %2573 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2574 = load i64, i64* %RBP
  %2575 = sub i64 %2574, 84
  %2576 = load i64, i64* %PC
  %2577 = add i64 %2576, 5
  store i64 %2577, i64* %PC
  %2578 = inttoptr i64 %2575 to float*
  %2579 = load float, float* %2578
  %2580 = bitcast i8* %2573 to float*
  store float %2579, float* %2580, align 1, !tbaa !2452
  %2581 = getelementptr inbounds i8, i8* %2573, i64 4
  %2582 = bitcast i8* %2581 to float*
  store float 0.000000e+00, float* %2582, align 1, !tbaa !2452
  %2583 = getelementptr inbounds i8, i8* %2573, i64 8
  %2584 = bitcast i8* %2583 to float*
  store float 0.000000e+00, float* %2584, align 1, !tbaa !2452
  %2585 = getelementptr inbounds i8, i8* %2573, i64 12
  %2586 = bitcast i8* %2585 to float*
  store float 0.000000e+00, float* %2586, align 1, !tbaa !2452
  %2587 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2588 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2589 = bitcast %union.vec128_t* %XMM0 to i8*
  %2590 = load i64, i64* %PC
  %2591 = add i64 %2590, 4
  store i64 %2591, i64* %PC
  %2592 = bitcast i8* %2588 to <2 x float>*
  %2593 = load <2 x float>, <2 x float>* %2592, align 1
  %2594 = getelementptr inbounds i8, i8* %2588, i64 8
  %2595 = bitcast i8* %2594 to <2 x i32>*
  %2596 = load <2 x i32>, <2 x i32>* %2595, align 1
  %2597 = bitcast i8* %2589 to <2 x float>*
  %2598 = load <2 x float>, <2 x float>* %2597, align 1
  %2599 = extractelement <2 x float> %2593, i32 0
  %2600 = extractelement <2 x float> %2598, i32 0
  %2601 = fadd float %2599, %2600
  %2602 = bitcast i8* %2587 to float*
  store float %2601, float* %2602, align 1, !tbaa !2452
  %2603 = bitcast <2 x float> %2593 to <2 x i32>
  %2604 = extractelement <2 x i32> %2603, i32 1
  %2605 = getelementptr inbounds i8, i8* %2587, i64 4
  %2606 = bitcast i8* %2605 to i32*
  store i32 %2604, i32* %2606, align 1, !tbaa !2452
  %2607 = extractelement <2 x i32> %2596, i32 0
  %2608 = getelementptr inbounds i8, i8* %2587, i64 8
  %2609 = bitcast i8* %2608 to i32*
  store i32 %2607, i32* %2609, align 1, !tbaa !2452
  %2610 = extractelement <2 x i32> %2596, i32 1
  %2611 = getelementptr inbounds i8, i8* %2587, i64 12
  %2612 = bitcast i8* %2611 to i32*
  store i32 %2610, i32* %2612, align 1, !tbaa !2452
  %2613 = load i64, i64* %RBP
  %2614 = sub i64 %2613, 32
  %2615 = load i64, i64* %PC
  %2616 = add i64 %2615, 4
  store i64 %2616, i64* %PC
  %2617 = inttoptr i64 %2614 to i64*
  %2618 = load i64, i64* %2617
  store i64 %2618, i64* %RCX, align 8, !tbaa !2428
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 44
  %2621 = load i64, i64* %PC
  %2622 = add i64 %2621, 4
  store i64 %2622, i64* %PC
  %2623 = inttoptr i64 %2620 to i32*
  %2624 = load i32, i32* %2623
  %2625 = sext i32 %2624 to i64
  store i64 %2625, i64* %RSI, align 8, !tbaa !2428
  %2626 = load i64, i64* %RCX
  %2627 = load i64, i64* %RSI
  %2628 = mul i64 %2627, 4
  %2629 = add i64 %2628, %2626
  %2630 = bitcast %union.vec128_t* %XMM1 to i8*
  %2631 = load i64, i64* %PC
  %2632 = add i64 %2631, 5
  store i64 %2632, i64* %PC
  %2633 = bitcast i8* %2630 to <2 x float>*
  %2634 = load <2 x float>, <2 x float>* %2633, align 1
  %2635 = extractelement <2 x float> %2634, i32 0
  %2636 = inttoptr i64 %2629 to float*
  store float %2635, float* %2636
  %2637 = load i64, i64* %RBP
  %2638 = sub i64 %2637, 24
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 4
  store i64 %2640, i64* %PC
  %2641 = inttoptr i64 %2638 to i64*
  %2642 = load i64, i64* %2641
  store i64 %2642, i64* %RCX, align 8, !tbaa !2428
  %2643 = load i64, i64* %RBP
  %2644 = sub i64 %2643, 44
  %2645 = load i64, i64* %PC
  %2646 = add i64 %2645, 4
  store i64 %2646, i64* %PC
  %2647 = inttoptr i64 %2644 to i32*
  %2648 = load i32, i32* %2647
  %2649 = sext i32 %2648 to i64
  store i64 %2649, i64* %RSI, align 8, !tbaa !2428
  %2650 = load i64, i64* %RCX
  %2651 = load i64, i64* %RSI
  %2652 = mul i64 %2651, 4
  %2653 = add i64 %2652, %2650
  %2654 = load i64, i64* %PC
  %2655 = add i64 %2654, 3
  store i64 %2655, i64* %PC
  %2656 = inttoptr i64 %2653 to i32*
  %2657 = load i32, i32* %2656
  %2658 = zext i32 %2657 to i64
  store i64 %2658, i64* %RAX, align 8, !tbaa !2428
  %2659 = load i64, i64* %RBP
  %2660 = sub i64 %2659, 52
  %2661 = load i32, i32* %EAX
  %2662 = zext i32 %2661 to i64
  %2663 = load i64, i64* %PC
  %2664 = add i64 %2663, 3
  store i64 %2664, i64* %PC
  %2665 = inttoptr i64 %2660 to i32*
  store i32 %2661, i32* %2665
  %2666 = load i64, i64* %RBP
  %2667 = sub i64 %2666, 52
  %2668 = load i64, i64* %PC
  %2669 = add i64 %2668, 3
  store i64 %2669, i64* %PC
  %2670 = inttoptr i64 %2667 to i32*
  %2671 = load i32, i32* %2670
  %2672 = zext i32 %2671 to i64
  store i64 %2672, i64* %RAX, align 8, !tbaa !2428
  %2673 = load i32, i32* %EAX
  %2674 = zext i32 %2673 to i64
  %2675 = load i64, i64* %RBP
  %2676 = sub i64 %2675, 44
  %2677 = load i64, i64* %PC
  %2678 = add i64 %2677, 3
  store i64 %2678, i64* %PC
  %2679 = inttoptr i64 %2676 to i32*
  %2680 = load i32, i32* %2679
  %2681 = sub i32 %2673, %2680
  %2682 = icmp ult i32 %2673, %2680
  %2683 = zext i1 %2682 to i8
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2683, i8* %2684, align 1, !tbaa !2432
  %2685 = and i32 %2681, 255
  %2686 = call i32 @llvm.ctpop.i32(i32 %2685) #16
  %2687 = trunc i32 %2686 to i8
  %2688 = and i8 %2687, 1
  %2689 = xor i8 %2688, 1
  %2690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2689, i8* %2690, align 1, !tbaa !2446
  %2691 = xor i32 %2680, %2673
  %2692 = xor i32 %2691, %2681
  %2693 = lshr i32 %2692, 4
  %2694 = trunc i32 %2693 to i8
  %2695 = and i8 %2694, 1
  %2696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2695, i8* %2696, align 1, !tbaa !2447
  %2697 = icmp eq i32 %2681, 0
  %2698 = zext i1 %2697 to i8
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2698, i8* %2699, align 1, !tbaa !2448
  %2700 = lshr i32 %2681, 31
  %2701 = trunc i32 %2700 to i8
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2701, i8* %2702, align 1, !tbaa !2449
  %2703 = lshr i32 %2673, 31
  %2704 = lshr i32 %2680, 31
  %2705 = xor i32 %2704, %2703
  %2706 = xor i32 %2700, %2703
  %2707 = add nuw nsw i32 %2706, %2705
  %2708 = icmp eq i32 %2707, 2
  %2709 = zext i1 %2708 to i8
  %2710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2709, i8* %2710, align 1, !tbaa !2450
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 68
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 6
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 6
  store i64 %2716, i64* %PC
  %2717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2718 = load i8, i8* %2717, align 1, !tbaa !2448
  store i8 %2718, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2720 = icmp ne i8 %2718, 0
  %2721 = select i1 %2720, i64 %2712, i64 %2714
  store i64 %2721, i64* %2719, align 8, !tbaa !2428
  %2722 = load i8, i8* %BRANCH_TAKEN
  %2723 = icmp eq i8 %2722, 1
  br i1 %2723, label %block_401f8a, label %block_401f4c

block_401e8c:                                     ; preds = %block_401dff
  %2724 = load i64, i64* %RBP
  %2725 = sub i64 %2724, 56
  %2726 = load i64, i64* %PC
  %2727 = add i64 %2726, 4
  store i64 %2727, i64* %PC
  %2728 = inttoptr i64 %2725 to i32*
  %2729 = load i32, i32* %2728
  %2730 = sub i32 %2729, 1
  %2731 = icmp ult i32 %2729, 1
  %2732 = zext i1 %2731 to i8
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2732, i8* %2733, align 1, !tbaa !2432
  %2734 = and i32 %2730, 255
  %2735 = call i32 @llvm.ctpop.i32(i32 %2734) #16
  %2736 = trunc i32 %2735 to i8
  %2737 = and i8 %2736, 1
  %2738 = xor i8 %2737, 1
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2738, i8* %2739, align 1, !tbaa !2446
  %2740 = xor i32 %2729, 1
  %2741 = xor i32 %2740, %2730
  %2742 = lshr i32 %2741, 4
  %2743 = trunc i32 %2742 to i8
  %2744 = and i8 %2743, 1
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2744, i8* %2745, align 1, !tbaa !2447
  %2746 = icmp eq i32 %2730, 0
  %2747 = zext i1 %2746 to i8
  %2748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2747, i8* %2748, align 1, !tbaa !2448
  %2749 = lshr i32 %2730, 31
  %2750 = trunc i32 %2749 to i8
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2750, i8* %2751, align 1, !tbaa !2449
  %2752 = lshr i32 %2729, 31
  %2753 = xor i32 %2749, %2752
  %2754 = add nuw nsw i32 %2753, %2752
  %2755 = icmp eq i32 %2754, 2
  %2756 = zext i1 %2755 to i8
  %2757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2756, i8* %2757, align 1, !tbaa !2450
  %2758 = load i64, i64* %PC
  %2759 = add i64 %2758, 274
  %2760 = load i64, i64* %PC
  %2761 = add i64 %2760, 6
  %2762 = load i64, i64* %PC
  %2763 = add i64 %2762, 6
  store i64 %2763, i64* %PC
  %2764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2765 = load i8, i8* %2764, align 1, !tbaa !2449
  %2766 = icmp ne i8 %2765, 0
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2768 = load i8, i8* %2767, align 1, !tbaa !2450
  %2769 = icmp ne i8 %2768, 0
  %2770 = xor i1 %2766, %2769
  %2771 = zext i1 %2770 to i8
  store i8 %2771, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2773 = select i1 %2770, i64 %2759, i64 %2761
  store i64 %2773, i64* %2772, align 8, !tbaa !2428
  %2774 = load i8, i8* %BRANCH_TAKEN
  %2775 = icmp eq i8 %2774, 1
  br i1 %2775, label %block_401fa2, label %block_401e96

block_401e0b:                                     ; preds = %block_401dff
  %2776 = load i64, i64* %PC
  %2777 = add i64 %2776, 5
  store i64 %2777, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %2778 = load i64, i64* %RBP
  %2779 = sub i64 %2778, 44
  %2780 = load i64, i64* %PC
  %2781 = add i64 %2780, 3
  store i64 %2781, i64* %PC
  %2782 = inttoptr i64 %2779 to i32*
  %2783 = load i32, i32* %2782
  %2784 = zext i32 %2783 to i64
  store i64 %2784, i64* %RDI, align 8, !tbaa !2428
  %2785 = load i64, i64* %RBP
  %2786 = sub i64 %2785, 8
  %2787 = load i64, i64* %PC
  %2788 = add i64 %2787, 4
  store i64 %2788, i64* %PC
  %2789 = inttoptr i64 %2786 to i64*
  %2790 = load i64, i64* %2789
  store i64 %2790, i64* %RCX, align 8, !tbaa !2428
  %2791 = load i64, i64* %RBP
  %2792 = sub i64 %2791, 12
  %2793 = load i64, i64* %PC
  %2794 = add i64 %2793, 3
  store i64 %2794, i64* %PC
  %2795 = inttoptr i64 %2792 to i32*
  %2796 = load i32, i32* %2795
  %2797 = zext i32 %2796 to i64
  store i64 %2797, i64* %RDX, align 8, !tbaa !2428
  %2798 = load i64, i64* %RDX
  %2799 = load i64, i64* %RBP
  %2800 = sub i64 %2799, 44
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 4
  store i64 %2802, i64* %PC
  %2803 = inttoptr i64 %2800 to i32*
  %2804 = load i32, i32* %2803
  %2805 = shl i64 %2798, 32
  %2806 = ashr exact i64 %2805, 32
  %2807 = sext i32 %2804 to i64
  %2808 = mul nsw i64 %2807, %2806
  %2809 = trunc i64 %2808 to i32
  %2810 = and i64 %2808, 4294967295
  store i64 %2810, i64* %RDX, align 8, !tbaa !2428
  %2811 = shl i64 %2808, 32
  %2812 = ashr exact i64 %2811, 32
  %2813 = icmp ne i64 %2812, %2808
  %2814 = zext i1 %2813 to i8
  %2815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2814, i8* %2815, align 1, !tbaa !2432
  %2816 = and i32 %2809, 255
  %2817 = call i32 @llvm.ctpop.i32(i32 %2816) #16
  %2818 = trunc i32 %2817 to i8
  %2819 = and i8 %2818, 1
  %2820 = xor i8 %2819, 1
  %2821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2820, i8* %2821, align 1, !tbaa !2446
  %2822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2822, align 1, !tbaa !2447
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2823, align 1, !tbaa !2448
  %2824 = lshr i32 %2809, 31
  %2825 = trunc i32 %2824 to i8
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2825, i8* %2826, align 1, !tbaa !2449
  %2827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2814, i8* %2827, align 1, !tbaa !2450
  %2828 = load i64, i64* %RDX
  %2829 = load i64, i64* %PC
  %2830 = add i64 %2829, 3
  store i64 %2830, i64* %PC
  %2831 = trunc i64 %2828 to i32
  %2832 = zext i32 %2831 to i64
  store i64 %2832, i64* %RDX, align 8, !tbaa !2428
  %2833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2833, align 1, !tbaa !2432
  %2834 = and i32 %2831, 255
  %2835 = call i32 @llvm.ctpop.i32(i32 %2834) #16
  %2836 = trunc i32 %2835 to i8
  %2837 = and i8 %2836, 1
  %2838 = xor i8 %2837, 1
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2838, i8* %2839, align 1, !tbaa !2446
  %2840 = trunc i64 %2828 to i32
  %2841 = xor i32 %2840, %2831
  %2842 = lshr i32 %2841, 4
  %2843 = trunc i32 %2842 to i8
  %2844 = and i8 %2843, 1
  %2845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2844, i8* %2845, align 1, !tbaa !2447
  %2846 = icmp eq i32 %2831, 0
  %2847 = zext i1 %2846 to i8
  %2848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2847, i8* %2848, align 1, !tbaa !2448
  %2849 = lshr i32 %2831, 31
  %2850 = trunc i32 %2849 to i8
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2850, i8* %2851, align 1, !tbaa !2449
  %2852 = lshr i32 %2831, 31
  %2853 = xor i32 %2849, %2852
  %2854 = add nuw nsw i32 %2853, %2849
  %2855 = icmp eq i32 %2854, 2
  %2856 = zext i1 %2855 to i8
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2856, i8* %2857, align 1, !tbaa !2450
  %2858 = load i32, i32* %EDX
  %2859 = zext i32 %2858 to i64
  %2860 = load i64, i64* %PC
  %2861 = add i64 %2860, 3
  store i64 %2861, i64* %PC
  %2862 = shl i64 %2859, 32
  %2863 = ashr exact i64 %2862, 32
  store i64 %2863, i64* %RSI, align 8, !tbaa !2428
  %2864 = load i64, i64* %RSI
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 4
  store i64 %2866, i64* %PC
  %2867 = shl i64 %2864, 1
  %2868 = icmp slt i64 %2867, 0
  %2869 = shl i64 %2867, 1
  store i64 %2869, i64* %RSI, align 8, !tbaa !2428
  %2870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2871 = zext i1 %2868 to i8
  store i8 %2871, i8* %2870, align 1, !tbaa !2451
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2873 = trunc i64 %2869 to i32
  %2874 = and i32 %2873, 254
  %2875 = call i32 @llvm.ctpop.i32(i32 %2874) #16
  %2876 = trunc i32 %2875 to i8
  %2877 = and i8 %2876, 1
  %2878 = xor i8 %2877, 1
  store i8 %2878, i8* %2872, align 1, !tbaa !2451
  %2879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2879, align 1, !tbaa !2451
  %2880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2881 = icmp eq i64 %2869, 0
  %2882 = zext i1 %2881 to i8
  store i8 %2882, i8* %2880, align 1, !tbaa !2451
  %2883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2884 = lshr i64 %2869, 63
  %2885 = trunc i64 %2884 to i8
  store i8 %2885, i8* %2883, align 1, !tbaa !2451
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2886, align 1, !tbaa !2451
  %2887 = load i64, i64* %RCX
  %2888 = load i64, i64* %RSI
  %2889 = load i64, i64* %PC
  %2890 = add i64 %2889, 3
  store i64 %2890, i64* %PC
  %2891 = add i64 %2888, %2887
  store i64 %2891, i64* %RCX, align 8, !tbaa !2428
  %2892 = icmp ult i64 %2891, %2887
  %2893 = icmp ult i64 %2891, %2888
  %2894 = or i1 %2892, %2893
  %2895 = zext i1 %2894 to i8
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2895, i8* %2896, align 1, !tbaa !2432
  %2897 = trunc i64 %2891 to i32
  %2898 = and i32 %2897, 255
  %2899 = call i32 @llvm.ctpop.i32(i32 %2898) #16
  %2900 = trunc i32 %2899 to i8
  %2901 = and i8 %2900, 1
  %2902 = xor i8 %2901, 1
  %2903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2902, i8* %2903, align 1, !tbaa !2446
  %2904 = xor i64 %2888, %2887
  %2905 = xor i64 %2904, %2891
  %2906 = lshr i64 %2905, 4
  %2907 = trunc i64 %2906 to i8
  %2908 = and i8 %2907, 1
  %2909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2908, i8* %2909, align 1, !tbaa !2447
  %2910 = icmp eq i64 %2891, 0
  %2911 = zext i1 %2910 to i8
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2911, i8* %2912, align 1, !tbaa !2448
  %2913 = lshr i64 %2891, 63
  %2914 = trunc i64 %2913 to i8
  %2915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2914, i8* %2915, align 1, !tbaa !2449
  %2916 = lshr i64 %2887, 63
  %2917 = lshr i64 %2888, 63
  %2918 = xor i64 %2913, %2916
  %2919 = xor i64 %2913, %2917
  %2920 = add nuw nsw i64 %2918, %2919
  %2921 = icmp eq i64 %2920, 2
  %2922 = zext i1 %2921 to i8
  %2923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2922, i8* %2923, align 1, !tbaa !2450
  %2924 = load i64, i64* %RBP
  %2925 = sub i64 %2924, 32
  %2926 = load i64, i64* %PC
  %2927 = add i64 %2926, 4
  store i64 %2927, i64* %PC
  %2928 = inttoptr i64 %2925 to i64*
  %2929 = load i64, i64* %2928
  store i64 %2929, i64* %RSI, align 8, !tbaa !2428
  %2930 = load i64, i64* %RBP
  %2931 = sub i64 %2930, 72
  %2932 = load i64, i64* %RSI
  %2933 = load i64, i64* %PC
  %2934 = add i64 %2933, 4
  store i64 %2934, i64* %PC
  %2935 = inttoptr i64 %2931 to i64*
  store i64 %2932, i64* %2935
  %2936 = load i64, i64* %RCX
  %2937 = load i64, i64* %PC
  %2938 = add i64 %2937, 3
  store i64 %2938, i64* %PC
  store i64 %2936, i64* %RSI, align 8, !tbaa !2428
  %2939 = load i32, i32* %EAX
  %2940 = zext i32 %2939 to i64
  %2941 = load i64, i64* %PC
  %2942 = add i64 %2941, 2
  store i64 %2942, i64* %PC
  %2943 = and i64 %2940, 4294967295
  store i64 %2943, i64* %RDX, align 8, !tbaa !2428
  %2944 = load i64, i64* %RBP
  %2945 = sub i64 %2944, 72
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 4
  store i64 %2947, i64* %PC
  %2948 = inttoptr i64 %2945 to i64*
  %2949 = load i64, i64* %2948
  store i64 %2949, i64* %RCX, align 8, !tbaa !2428
  %2950 = bitcast i32* %R8D to i64*
  %2951 = load i32, i32* %EAX
  %2952 = zext i32 %2951 to i64
  %2953 = load i64, i64* %PC
  %2954 = add i64 %2953, 3
  store i64 %2954, i64* %PC
  %2955 = and i64 %2952, 4294967295
  store i64 %2955, i64* %2950, align 8, !tbaa !2428
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 2977
  %2958 = load i64, i64* %PC
  %2959 = add i64 %2958, 5
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 5
  store i64 %2961, i64* %PC
  %2962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2963 = load i64, i64* %2962, align 8, !tbaa !2428
  %2964 = add i64 %2963, -8
  %2965 = inttoptr i64 %2964 to i64*
  store i64 %2959, i64* %2965
  store i64 %2964, i64* %2962, align 8, !tbaa !2428
  %2966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2957, i64* %2966, align 8, !tbaa !2428
  %2967 = load i64, i64* %PC
  %2968 = call %struct.Memory* @sub_4029e0_ddot(%struct.State* %0, i64 %2967, %struct.Memory* %MEMORY.0)
  %2969 = load i64, i64* %RBP
  %2970 = sub i64 %2969, 40
  %2971 = bitcast %union.vec128_t* %XMM0 to i8*
  %2972 = load i64, i64* %PC
  %2973 = add i64 %2972, 5
  store i64 %2973, i64* %PC
  %2974 = bitcast i8* %2971 to <2 x float>*
  %2975 = load <2 x float>, <2 x float>* %2974, align 1
  %2976 = extractelement <2 x float> %2975, i32 0
  %2977 = inttoptr i64 %2970 to float*
  store float %2976, float* %2977
  %2978 = load i64, i64* %RBP
  %2979 = sub i64 %2978, 32
  %2980 = load i64, i64* %PC
  %2981 = add i64 %2980, 4
  store i64 %2981, i64* %PC
  %2982 = inttoptr i64 %2979 to i64*
  %2983 = load i64, i64* %2982
  store i64 %2983, i64* %RCX, align 8, !tbaa !2428
  %2984 = load i64, i64* %RBP
  %2985 = sub i64 %2984, 44
  %2986 = load i64, i64* %PC
  %2987 = add i64 %2986, 4
  store i64 %2987, i64* %PC
  %2988 = inttoptr i64 %2985 to i32*
  %2989 = load i32, i32* %2988
  %2990 = sext i32 %2989 to i64
  store i64 %2990, i64* %RSI, align 8, !tbaa !2428
  %2991 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2992 = load i64, i64* %RCX
  %2993 = load i64, i64* %RSI
  %2994 = mul i64 %2993, 4
  %2995 = add i64 %2994, %2992
  %2996 = load i64, i64* %PC
  %2997 = add i64 %2996, 5
  store i64 %2997, i64* %PC
  %2998 = inttoptr i64 %2995 to float*
  %2999 = load float, float* %2998
  %3000 = bitcast i8* %2991 to float*
  store float %2999, float* %3000, align 1, !tbaa !2452
  %3001 = getelementptr inbounds i8, i8* %2991, i64 4
  %3002 = bitcast i8* %3001 to float*
  store float 0.000000e+00, float* %3002, align 1, !tbaa !2452
  %3003 = getelementptr inbounds i8, i8* %2991, i64 8
  %3004 = bitcast i8* %3003 to float*
  store float 0.000000e+00, float* %3004, align 1, !tbaa !2452
  %3005 = getelementptr inbounds i8, i8* %2991, i64 12
  %3006 = bitcast i8* %3005 to float*
  store float 0.000000e+00, float* %3006, align 1, !tbaa !2452
  %3007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3008 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3009 = load i64, i64* %RBP
  %3010 = sub i64 %3009, 40
  %3011 = load i64, i64* %PC
  %3012 = add i64 %3011, 5
  store i64 %3012, i64* %PC
  %3013 = bitcast i8* %3008 to <2 x float>*
  %3014 = load <2 x float>, <2 x float>* %3013, align 1
  %3015 = getelementptr inbounds i8, i8* %3008, i64 8
  %3016 = bitcast i8* %3015 to <2 x i32>*
  %3017 = load <2 x i32>, <2 x i32>* %3016, align 1
  %3018 = inttoptr i64 %3010 to float*
  %3019 = load float, float* %3018
  %3020 = extractelement <2 x float> %3014, i32 0
  %3021 = fsub float %3020, %3019
  %3022 = bitcast i8* %3007 to float*
  store float %3021, float* %3022, align 1, !tbaa !2452
  %3023 = bitcast <2 x float> %3014 to <2 x i32>
  %3024 = extractelement <2 x i32> %3023, i32 1
  %3025 = getelementptr inbounds i8, i8* %3007, i64 4
  %3026 = bitcast i8* %3025 to i32*
  store i32 %3024, i32* %3026, align 1, !tbaa !2452
  %3027 = extractelement <2 x i32> %3017, i32 0
  %3028 = getelementptr inbounds i8, i8* %3007, i64 8
  %3029 = bitcast i8* %3028 to i32*
  store i32 %3027, i32* %3029, align 1, !tbaa !2452
  %3030 = extractelement <2 x i32> %3017, i32 1
  %3031 = getelementptr inbounds i8, i8* %3007, i64 12
  %3032 = bitcast i8* %3031 to i32*
  store i32 %3030, i32* %3032, align 1, !tbaa !2452
  %3033 = load i64, i64* %RBP
  %3034 = sub i64 %3033, 8
  %3035 = load i64, i64* %PC
  %3036 = add i64 %3035, 4
  store i64 %3036, i64* %PC
  %3037 = inttoptr i64 %3034 to i64*
  %3038 = load i64, i64* %3037
  store i64 %3038, i64* %RCX, align 8, !tbaa !2428
  %3039 = load i64, i64* %RBP
  %3040 = sub i64 %3039, 12
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 3
  store i64 %3042, i64* %PC
  %3043 = inttoptr i64 %3040 to i32*
  %3044 = load i32, i32* %3043
  %3045 = zext i32 %3044 to i64
  store i64 %3045, i64* %RAX, align 8, !tbaa !2428
  %3046 = load i64, i64* %RAX
  %3047 = load i64, i64* %RBP
  %3048 = sub i64 %3047, 44
  %3049 = load i64, i64* %PC
  %3050 = add i64 %3049, 4
  store i64 %3050, i64* %PC
  %3051 = inttoptr i64 %3048 to i32*
  %3052 = load i32, i32* %3051
  %3053 = shl i64 %3046, 32
  %3054 = ashr exact i64 %3053, 32
  %3055 = sext i32 %3052 to i64
  %3056 = mul nsw i64 %3055, %3054
  %3057 = trunc i64 %3056 to i32
  %3058 = and i64 %3056, 4294967295
  store i64 %3058, i64* %RAX, align 8, !tbaa !2428
  %3059 = shl i64 %3056, 32
  %3060 = ashr exact i64 %3059, 32
  %3061 = icmp ne i64 %3060, %3056
  %3062 = zext i1 %3061 to i8
  %3063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3062, i8* %3063, align 1, !tbaa !2432
  %3064 = and i32 %3057, 255
  %3065 = call i32 @llvm.ctpop.i32(i32 %3064) #16
  %3066 = trunc i32 %3065 to i8
  %3067 = and i8 %3066, 1
  %3068 = xor i8 %3067, 1
  %3069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3068, i8* %3069, align 1, !tbaa !2446
  %3070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3070, align 1, !tbaa !2447
  %3071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3071, align 1, !tbaa !2448
  %3072 = lshr i32 %3057, 31
  %3073 = trunc i32 %3072 to i8
  %3074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3073, i8* %3074, align 1, !tbaa !2449
  %3075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3062, i8* %3075, align 1, !tbaa !2450
  %3076 = load i64, i64* %RAX
  %3077 = load i64, i64* %RBP
  %3078 = sub i64 %3077, 44
  %3079 = load i64, i64* %PC
  %3080 = add i64 %3079, 3
  store i64 %3080, i64* %PC
  %3081 = trunc i64 %3076 to i32
  %3082 = inttoptr i64 %3078 to i32*
  %3083 = load i32, i32* %3082
  %3084 = add i32 %3083, %3081
  %3085 = zext i32 %3084 to i64
  store i64 %3085, i64* %RAX, align 8, !tbaa !2428
  %3086 = icmp ult i32 %3084, %3081
  %3087 = icmp ult i32 %3084, %3083
  %3088 = or i1 %3086, %3087
  %3089 = zext i1 %3088 to i8
  %3090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3089, i8* %3090, align 1, !tbaa !2432
  %3091 = and i32 %3084, 255
  %3092 = call i32 @llvm.ctpop.i32(i32 %3091) #16
  %3093 = trunc i32 %3092 to i8
  %3094 = and i8 %3093, 1
  %3095 = xor i8 %3094, 1
  %3096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3095, i8* %3096, align 1, !tbaa !2446
  %3097 = xor i32 %3083, %3081
  %3098 = xor i32 %3097, %3084
  %3099 = lshr i32 %3098, 4
  %3100 = trunc i32 %3099 to i8
  %3101 = and i8 %3100, 1
  %3102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3101, i8* %3102, align 1, !tbaa !2447
  %3103 = icmp eq i32 %3084, 0
  %3104 = zext i1 %3103 to i8
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3104, i8* %3105, align 1, !tbaa !2448
  %3106 = lshr i32 %3084, 31
  %3107 = trunc i32 %3106 to i8
  %3108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3107, i8* %3108, align 1, !tbaa !2449
  %3109 = lshr i32 %3081, 31
  %3110 = lshr i32 %3083, 31
  %3111 = xor i32 %3106, %3109
  %3112 = xor i32 %3106, %3110
  %3113 = add nuw nsw i32 %3111, %3112
  %3114 = icmp eq i32 %3113, 2
  %3115 = zext i1 %3114 to i8
  %3116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3115, i8* %3116, align 1, !tbaa !2450
  %3117 = load i32, i32* %EAX
  %3118 = zext i32 %3117 to i64
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 3
  store i64 %3120, i64* %PC
  %3121 = shl i64 %3118, 32
  %3122 = ashr exact i64 %3121, 32
  store i64 %3122, i64* %RSI, align 8, !tbaa !2428
  %3123 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3124 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3125 = load i64, i64* %RCX
  %3126 = load i64, i64* %RSI
  %3127 = mul i64 %3126, 4
  %3128 = add i64 %3127, %3125
  %3129 = load i64, i64* %PC
  %3130 = add i64 %3129, 5
  store i64 %3130, i64* %PC
  %3131 = bitcast i8* %3124 to <2 x float>*
  %3132 = load <2 x float>, <2 x float>* %3131, align 1
  %3133 = getelementptr inbounds i8, i8* %3124, i64 8
  %3134 = bitcast i8* %3133 to <2 x i32>*
  %3135 = load <2 x i32>, <2 x i32>* %3134, align 1
  %3136 = inttoptr i64 %3128 to float*
  %3137 = load float, float* %3136
  %3138 = extractelement <2 x float> %3132, i32 0
  %3139 = fdiv float %3138, %3137
  %3140 = bitcast i8* %3123 to float*
  store float %3139, float* %3140, align 1, !tbaa !2452
  %3141 = bitcast <2 x float> %3132 to <2 x i32>
  %3142 = extractelement <2 x i32> %3141, i32 1
  %3143 = getelementptr inbounds i8, i8* %3123, i64 4
  %3144 = bitcast i8* %3143 to i32*
  store i32 %3142, i32* %3144, align 1, !tbaa !2452
  %3145 = extractelement <2 x i32> %3135, i32 0
  %3146 = getelementptr inbounds i8, i8* %3123, i64 8
  %3147 = bitcast i8* %3146 to i32*
  store i32 %3145, i32* %3147, align 1, !tbaa !2452
  %3148 = extractelement <2 x i32> %3135, i32 1
  %3149 = getelementptr inbounds i8, i8* %3123, i64 12
  %3150 = bitcast i8* %3149 to i32*
  store i32 %3148, i32* %3150, align 1, !tbaa !2452
  %3151 = load i64, i64* %RBP
  %3152 = sub i64 %3151, 32
  %3153 = load i64, i64* %PC
  %3154 = add i64 %3153, 4
  store i64 %3154, i64* %PC
  %3155 = inttoptr i64 %3152 to i64*
  %3156 = load i64, i64* %3155
  store i64 %3156, i64* %RCX, align 8, !tbaa !2428
  %3157 = load i64, i64* %RBP
  %3158 = sub i64 %3157, 44
  %3159 = load i64, i64* %PC
  %3160 = add i64 %3159, 4
  store i64 %3160, i64* %PC
  %3161 = inttoptr i64 %3158 to i32*
  %3162 = load i32, i32* %3161
  %3163 = sext i32 %3162 to i64
  store i64 %3163, i64* %RSI, align 8, !tbaa !2428
  %3164 = load i64, i64* %RCX
  %3165 = load i64, i64* %RSI
  %3166 = mul i64 %3165, 4
  %3167 = add i64 %3166, %3164
  %3168 = bitcast %union.vec128_t* %XMM0 to i8*
  %3169 = load i64, i64* %PC
  %3170 = add i64 %3169, 5
  store i64 %3170, i64* %PC
  %3171 = bitcast i8* %3168 to <2 x float>*
  %3172 = load <2 x float>, <2 x float>* %3171, align 1
  %3173 = extractelement <2 x float> %3172, i32 0
  %3174 = inttoptr i64 %3167 to float*
  store float %3173, float* %3174
  %3175 = load i64, i64* %RBP
  %3176 = sub i64 %3175, 44
  %3177 = load i64, i64* %PC
  %3178 = add i64 %3177, 3
  store i64 %3178, i64* %PC
  %3179 = inttoptr i64 %3176 to i32*
  %3180 = load i32, i32* %3179
  %3181 = zext i32 %3180 to i64
  store i64 %3181, i64* %RAX, align 8, !tbaa !2428
  %3182 = load i64, i64* %RAX
  %3183 = load i64, i64* %PC
  %3184 = add i64 %3183, 3
  store i64 %3184, i64* %PC
  %3185 = trunc i64 %3182 to i32
  %3186 = add i32 1, %3185
  %3187 = zext i32 %3186 to i64
  store i64 %3187, i64* %RAX, align 8, !tbaa !2428
  %3188 = icmp ult i32 %3186, %3185
  %3189 = icmp ult i32 %3186, 1
  %3190 = or i1 %3188, %3189
  %3191 = zext i1 %3190 to i8
  %3192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3191, i8* %3192, align 1, !tbaa !2432
  %3193 = and i32 %3186, 255
  %3194 = call i32 @llvm.ctpop.i32(i32 %3193) #16
  %3195 = trunc i32 %3194 to i8
  %3196 = and i8 %3195, 1
  %3197 = xor i8 %3196, 1
  %3198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3197, i8* %3198, align 1, !tbaa !2446
  %3199 = xor i64 1, %3182
  %3200 = trunc i64 %3199 to i32
  %3201 = xor i32 %3200, %3186
  %3202 = lshr i32 %3201, 4
  %3203 = trunc i32 %3202 to i8
  %3204 = and i8 %3203, 1
  %3205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3204, i8* %3205, align 1, !tbaa !2447
  %3206 = icmp eq i32 %3186, 0
  %3207 = zext i1 %3206 to i8
  %3208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3207, i8* %3208, align 1, !tbaa !2448
  %3209 = lshr i32 %3186, 31
  %3210 = trunc i32 %3209 to i8
  %3211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3210, i8* %3211, align 1, !tbaa !2449
  %3212 = lshr i32 %3185, 31
  %3213 = xor i32 %3209, %3212
  %3214 = add nuw nsw i32 %3213, %3209
  %3215 = icmp eq i32 %3214, 2
  %3216 = zext i1 %3215 to i8
  %3217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3216, i8* %3217, align 1, !tbaa !2450
  %3218 = load i64, i64* %RBP
  %3219 = sub i64 %3218, 44
  %3220 = load i32, i32* %EAX
  %3221 = zext i32 %3220 to i64
  %3222 = load i64, i64* %PC
  %3223 = add i64 %3222, 3
  store i64 %3223, i64* %PC
  %3224 = inttoptr i64 %3219 to i32*
  store i32 %3220, i32* %3224
  %3225 = load i64, i64* %PC
  %3226 = sub i64 %3225, 136
  %3227 = load i64, i64* %PC
  %3228 = add i64 %3227, 5
  store i64 %3228, i64* %PC
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3226, i64* %3229, align 8, !tbaa !2428
  br label %block_401dff

block_401fa7:                                     ; preds = %block_401fa2, %block_401df3
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.6, %block_401fa2 ], [ %MEMORY.3, %block_401df3 ]
  %3230 = load i64, i64* %RSP
  %3231 = load i64, i64* %PC
  %3232 = add i64 %3231, 4
  store i64 %3232, i64* %PC
  %3233 = add i64 96, %3230
  store i64 %3233, i64* %RSP, align 8, !tbaa !2428
  %3234 = icmp ult i64 %3233, %3230
  %3235 = icmp ult i64 %3233, 96
  %3236 = or i1 %3234, %3235
  %3237 = zext i1 %3236 to i8
  %3238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3237, i8* %3238, align 1, !tbaa !2432
  %3239 = trunc i64 %3233 to i32
  %3240 = and i32 %3239, 255
  %3241 = call i32 @llvm.ctpop.i32(i32 %3240) #16
  %3242 = trunc i32 %3241 to i8
  %3243 = and i8 %3242, 1
  %3244 = xor i8 %3243, 1
  %3245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3244, i8* %3245, align 1, !tbaa !2446
  %3246 = xor i64 96, %3230
  %3247 = xor i64 %3246, %3233
  %3248 = lshr i64 %3247, 4
  %3249 = trunc i64 %3248 to i8
  %3250 = and i8 %3249, 1
  %3251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3250, i8* %3251, align 1, !tbaa !2447
  %3252 = icmp eq i64 %3233, 0
  %3253 = zext i1 %3252 to i8
  %3254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3253, i8* %3254, align 1, !tbaa !2448
  %3255 = lshr i64 %3233, 63
  %3256 = trunc i64 %3255 to i8
  %3257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3256, i8* %3257, align 1, !tbaa !2449
  %3258 = lshr i64 %3230, 63
  %3259 = xor i64 %3255, %3258
  %3260 = add nuw nsw i64 %3259, %3255
  %3261 = icmp eq i64 %3260, 2
  %3262 = zext i1 %3261 to i8
  %3263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3262, i8* %3263, align 1, !tbaa !2450
  %3264 = load i64, i64* %PC
  %3265 = add i64 %3264, 1
  store i64 %3265, i64* %PC
  %3266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3267 = load i64, i64* %3266, align 8, !tbaa !2428
  %3268 = add i64 %3267, 8
  %3269 = inttoptr i64 %3267 to i64*
  %3270 = load i64, i64* %3269
  store i64 %3270, i64* %RBP, align 8, !tbaa !2428
  store i64 %3268, i64* %3266, align 8, !tbaa !2428
  %3271 = load i64, i64* %PC
  %3272 = add i64 %3271, 1
  store i64 %3272, i64* %PC
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3275 = load i64, i64* %3274, align 8, !tbaa !2428
  %3276 = inttoptr i64 %3275 to i64*
  %3277 = load i64, i64* %3276
  store i64 %3277, i64* %3273, align 8, !tbaa !2428
  %3278 = add i64 %3275, 8
  store i64 %3278, i64* %3274, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.7

block_401f8a:                                     ; preds = %block_401ea9, %block_401f4c
  %MEMORY.8 = phi %struct.Memory* [ %2572, %block_401ea9 ], [ %2572, %block_401f4c ]
  %3279 = load i64, i64* %PC
  %3280 = add i64 %3279, 5
  %3281 = load i64, i64* %PC
  %3282 = add i64 %3281, 5
  store i64 %3282, i64* %PC
  %3283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3280, i64* %3283, align 8, !tbaa !2428
  %3284 = load i64, i64* %RBP
  %3285 = sub i64 %3284, 48
  %3286 = load i64, i64* %PC
  %3287 = add i64 %3286, 3
  store i64 %3287, i64* %PC
  %3288 = inttoptr i64 %3285 to i32*
  %3289 = load i32, i32* %3288
  %3290 = zext i32 %3289 to i64
  store i64 %3290, i64* %RAX, align 8, !tbaa !2428
  %3291 = load i64, i64* %RAX
  %3292 = load i64, i64* %PC
  %3293 = add i64 %3292, 3
  store i64 %3293, i64* %PC
  %3294 = trunc i64 %3291 to i32
  %3295 = add i32 1, %3294
  %3296 = zext i32 %3295 to i64
  store i64 %3296, i64* %RAX, align 8, !tbaa !2428
  %3297 = icmp ult i32 %3295, %3294
  %3298 = icmp ult i32 %3295, 1
  %3299 = or i1 %3297, %3298
  %3300 = zext i1 %3299 to i8
  %3301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3300, i8* %3301, align 1, !tbaa !2432
  %3302 = and i32 %3295, 255
  %3303 = call i32 @llvm.ctpop.i32(i32 %3302) #16
  %3304 = trunc i32 %3303 to i8
  %3305 = and i8 %3304, 1
  %3306 = xor i8 %3305, 1
  %3307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3306, i8* %3307, align 1, !tbaa !2446
  %3308 = xor i64 1, %3291
  %3309 = trunc i64 %3308 to i32
  %3310 = xor i32 %3309, %3295
  %3311 = lshr i32 %3310, 4
  %3312 = trunc i32 %3311 to i8
  %3313 = and i8 %3312, 1
  %3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3313, i8* %3314, align 1, !tbaa !2447
  %3315 = icmp eq i32 %3295, 0
  %3316 = zext i1 %3315 to i8
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3316, i8* %3317, align 1, !tbaa !2448
  %3318 = lshr i32 %3295, 31
  %3319 = trunc i32 %3318 to i8
  %3320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3319, i8* %3320, align 1, !tbaa !2449
  %3321 = lshr i32 %3294, 31
  %3322 = xor i32 %3318, %3321
  %3323 = add nuw nsw i32 %3322, %3318
  %3324 = icmp eq i32 %3323, 2
  %3325 = zext i1 %3324 to i8
  %3326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3325, i8* %3326, align 1, !tbaa !2450
  %3327 = load i64, i64* %RBP
  %3328 = sub i64 %3327, 48
  %3329 = load i32, i32* %EAX
  %3330 = zext i32 %3329 to i64
  %3331 = load i64, i64* %PC
  %3332 = add i64 %3331, 3
  store i64 %3332, i64* %PC
  %3333 = inttoptr i64 %3328 to i32*
  store i32 %3329, i32* %3333
  %3334 = load i64, i64* %PC
  %3335 = sub i64 %3334, 251
  %3336 = load i64, i64* %PC
  %3337 = add i64 %3336, 5
  store i64 %3337, i64* %PC
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3335, i64* %3338, align 8, !tbaa !2428
  br label %block_401e9d
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %16 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %15, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %16 to %"class.std::bitset"*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %18 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %17, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %18 to %"class.std::bitset"*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %20 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %19, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %20 to %union.vec128_t*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %22 to %union.vec128_t*
  %23 = load i64, i64* %RBP
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 1
  store i64 %25, i64* %PC
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %27 = load i64, i64* %26, align 8, !tbaa !2428
  %28 = add i64 %27, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %23, i64* %29
  store i64 %28, i64* %26, align 8, !tbaa !2428
  %30 = load i64, i64* %RSP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 3
  store i64 %32, i64* %PC
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  %33 = load i64, i64* %RSP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 16
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %37 = icmp ult i64 %33, 16
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 16, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %PC
  %66 = sub i64 %65, 296
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 5
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %66, i64* %75, align 8, !tbaa !2428
  %76 = load i64, i64* %PC
  %77 = call %struct.Memory* @ext_653140_clock(%struct.State* %0, i64 %76, %struct.Memory* %2)
  %78 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 8
  store i64 %80, i64* %PC
  %81 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 4) to float*)
  %82 = bitcast i8* %78 to float*
  store float %81, float* %82, align 1, !tbaa !2452
  %83 = getelementptr inbounds i8, i8* %78, i64 4
  %84 = bitcast i8* %83 to float*
  store float 0.000000e+00, float* %84, align 1, !tbaa !2452
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %85 to float*
  store float 0.000000e+00, float* %86, align 1, !tbaa !2452
  %87 = getelementptr inbounds i8, i8* %78, i64 12
  %88 = bitcast i8* %87 to float*
  store float 0.000000e+00, float* %88, align 1, !tbaa !2452
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 16
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 6
  store i64 %99, i64* %PC
  %100 = bitcast i8* %95 to <2 x i32>*
  %101 = load <2 x i32>, <2 x i32>* %100, align 1
  %102 = getelementptr inbounds i8, i8* %95, i64 8
  %103 = bitcast i8* %102 to <2 x i32>*
  %104 = load <2 x i32>, <2 x i32>* %103, align 1
  %105 = inttoptr i64 %97 to i64*
  %106 = load i64, i64* %105
  %107 = sitofp i64 %106 to float
  %108 = bitcast i8* %95 to float*
  store float %107, float* %108, align 1, !tbaa !2452
  %109 = extractelement <2 x i32> %101, i32 1
  %110 = getelementptr inbounds i8, i8* %95, i64 4
  %111 = bitcast i8* %110 to i32*
  store i32 %109, i32* %111, align 1, !tbaa !2452
  %112 = extractelement <2 x i32> %104, i32 0
  %113 = bitcast i8* %102 to i32*
  store i32 %112, i32* %113, align 1, !tbaa !2452
  %114 = extractelement <2 x i32> %104, i32 1
  %115 = getelementptr inbounds i8, i8* %95, i64 12
  %116 = bitcast i8* %115 to i32*
  store i32 %114, i32* %116, align 1, !tbaa !2452
  %117 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %118 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %119 = bitcast %union.vec128_t* %XMM0 to i8*
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = bitcast i8* %118 to <2 x float>*
  %123 = load <2 x float>, <2 x float>* %122, align 1
  %124 = getelementptr inbounds i8, i8* %118, i64 8
  %125 = bitcast i8* %124 to <2 x i32>*
  %126 = load <2 x i32>, <2 x i32>* %125, align 1
  %127 = bitcast i8* %119 to <2 x float>*
  %128 = load <2 x float>, <2 x float>* %127, align 1
  %129 = extractelement <2 x float> %123, i32 0
  %130 = extractelement <2 x float> %128, i32 0
  %131 = fdiv float %129, %130
  %132 = bitcast i8* %117 to float*
  store float %131, float* %132, align 1, !tbaa !2452
  %133 = bitcast <2 x float> %123 to <2 x i32>
  %134 = extractelement <2 x i32> %133, i32 1
  %135 = getelementptr inbounds i8, i8* %117, i64 4
  %136 = bitcast i8* %135 to i32*
  store i32 %134, i32* %136, align 1, !tbaa !2452
  %137 = extractelement <2 x i32> %126, i32 0
  %138 = getelementptr inbounds i8, i8* %117, i64 8
  %139 = bitcast i8* %138 to i32*
  store i32 %137, i32* %139, align 1, !tbaa !2452
  %140 = extractelement <2 x i32> %126, i32 1
  %141 = getelementptr inbounds i8, i8* %117, i64 12
  %142 = bitcast i8* %141 to i32*
  store i32 %140, i32* %142, align 1, !tbaa !2452
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 4
  %145 = bitcast %union.vec128_t* %XMM1 to i8*
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 5
  store i64 %147, i64* %PC
  %148 = bitcast i8* %145 to <2 x float>*
  %149 = load <2 x float>, <2 x float>* %148, align 1
  %150 = extractelement <2 x float> %149, i32 0
  %151 = inttoptr i64 %144 to float*
  store float %150, float* %151
  %152 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 4
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to float*
  %158 = load float, float* %157
  %159 = bitcast i8* %152 to float*
  store float %158, float* %159, align 1, !tbaa !2452
  %160 = getelementptr inbounds i8, i8* %152, i64 4
  %161 = bitcast i8* %160 to float*
  store float 0.000000e+00, float* %161, align 1, !tbaa !2452
  %162 = getelementptr inbounds i8, i8* %152, i64 8
  %163 = bitcast i8* %162 to float*
  store float 0.000000e+00, float* %163, align 1, !tbaa !2452
  %164 = getelementptr inbounds i8, i8* %152, i64 12
  %165 = bitcast i8* %164 to float*
  store float 0.000000e+00, float* %165, align 1, !tbaa !2452
  %166 = load i64, i64* %RSP
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = add i64 16, %166
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  %170 = icmp ult i64 %169, %166
  %171 = icmp ult i64 %169, 16
  %172 = or i1 %170, %171
  %173 = zext i1 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %173, i8* %174, align 1, !tbaa !2432
  %175 = trunc i64 %169 to i32
  %176 = and i32 %175, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2446
  %182 = xor i64 16, %166
  %183 = xor i64 %182, %169
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %186, i8* %187, align 1, !tbaa !2447
  %188 = icmp eq i64 %169, 0
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %189, i8* %190, align 1, !tbaa !2448
  %191 = lshr i64 %169, 63
  %192 = trunc i64 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %192, i8* %193, align 1, !tbaa !2449
  %194 = lshr i64 %166, 63
  %195 = xor i64 %191, %194
  %196 = add nuw nsw i64 %195, %191
  %197 = icmp eq i64 %196, 2
  %198 = zext i1 %197 to i8
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %198, i8* %199, align 1, !tbaa !2450
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e20___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402e24__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402e24:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401fb0_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401fb0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %46 to %"class.std::bitset"*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %48 to %"class.std::bitset"*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %50 to %union.vec128_t*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %52 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %51, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %52 to %union.vec128_t*
  %53 = load i64, i64* %RBP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 1
  store i64 %55, i64* %PC
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %57 = load i64, i64* %56, align 8, !tbaa !2428
  %58 = add i64 %57, -8
  %59 = inttoptr i64 %58 to i64*
  store i64 %53, i64* %59
  store i64 %58, i64* %56, align 8, !tbaa !2428
  %60 = load i64, i64* %RSP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 5
  store i64 %64, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 4
  %67 = load i32, i32* %EDI
  %68 = zext i32 %67 to i64
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %66 to i32*
  store i32 %67, i32* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 16
  %74 = load i64, i64* %RSI
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 20
  %80 = load i32, i32* %EDX
  %81 = zext i32 %80 to i64
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %79 to i32*
  store i32 %80, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 24
  %87 = load i32, i32* %ECX
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 32
  %94 = load i64, i64* %R8
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %93 to i64*
  store i64 %94, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 40
  %100 = load i64, i64* %R9
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 20
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RCX, align 8, !tbaa !2428
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 56
  %113 = load i32, i32* %EAX
  %114 = zext i32 %113 to i64
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %112 to i32*
  store i32 %113, i32* %117
  %118 = load i32, i32* %ECX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 1
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %127 = bitcast %union.anon* %126 to i32*
  %128 = load i32, i32* %127, align 8, !tbaa !2456
  %129 = sext i32 %128 to i64
  %130 = lshr i64 %129, 32
  store i64 %130, i64* %125, align 8, !tbaa !2428
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 56
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  %136 = load i32, i32* %135
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RCX, align 8, !tbaa !2428
  %138 = load i32, i32* %ECX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 2
  store i64 %141, i64* %PC
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %143 = bitcast %union.anon* %142 to i32*
  %144 = load i32, i32* %143, align 8, !tbaa !2456
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %147 = bitcast %union.anon* %146 to i32*
  %148 = load i32, i32* %147, align 8, !tbaa !2456
  %149 = zext i32 %148 to i64
  %150 = shl i64 %139, 32
  %151 = ashr exact i64 %150, 32
  %152 = shl nuw i64 %149, 32
  %153 = or i64 %152, %145
  %154 = sdiv i64 %153, %151
  %155 = shl i64 %154, 32
  %156 = ashr exact i64 %155, 32
  %157 = icmp eq i64 %154, %156
  br i1 %157, label %162, label %158

; <label>:158:                                    ; preds = %block_401fb0
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %160 = load i64, i64* %159, align 8, !tbaa !2428
  %161 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %160, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:162:                                    ; preds = %block_401fb0
  %163 = srem i64 %153, %151
  %164 = getelementptr inbounds %union.anon, %union.anon* %142, i64 0, i32 0
  %165 = and i64 %154, 4294967295
  store i64 %165, i64* %164, align 8, !tbaa !2428
  %166 = getelementptr inbounds %union.anon, %union.anon* %146, i64 0, i32 0
  %167 = and i64 %163, 4294967295
  store i64 %167, i64* %166, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %168, align 1, !tbaa !2432
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %169, align 1, !tbaa !2446
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2447
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %171, align 1, !tbaa !2448
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %172, align 1, !tbaa !2449
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %173, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %158, %162
  %174 = phi %struct.Memory* [ %161, %158 ], [ %2, %162 ]
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 44
  %177 = load i32, i32* %EDX
  %178 = zext i32 %177 to i64
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 3
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %176 to i32*
  store i32 %177, i32* %181
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 44
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i32*
  %187 = load i32, i32* %186
  %188 = sub i32 %187, 1
  %189 = icmp ult i32 %187, 1
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %190, i8* %191, align 1, !tbaa !2432
  %192 = and i32 %188, 255
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %196, i8* %197, align 1, !tbaa !2446
  %198 = xor i32 %187, 1
  %199 = xor i32 %198, %188
  %200 = lshr i32 %199, 4
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %202, i8* %203, align 1, !tbaa !2447
  %204 = icmp eq i32 %188, 0
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %205, i8* %206, align 1, !tbaa !2448
  %207 = lshr i32 %188, 31
  %208 = trunc i32 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %208, i8* %209, align 1, !tbaa !2449
  %210 = lshr i32 %187, 31
  %211 = xor i32 %207, %210
  %212 = add nuw nsw i32 %211, %210
  %213 = icmp eq i32 %212, 2
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %214, i8* %215, align 1, !tbaa !2450
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 118
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 6
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %223 = load i8, i8* %222, align 1, !tbaa !2449
  %224 = icmp ne i8 %223, 0
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %226 = load i8, i8* %225, align 1, !tbaa !2450
  %227 = icmp ne i8 %226, 0
  %228 = xor i1 %224, %227
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %231 = select i1 %228, i64 %217, i64 %219
  store i64 %231, i64* %230, align 8, !tbaa !2428
  %232 = load i8, i8* %BRANCH_TAKEN
  %233 = icmp eq i8 %232, 1
  br i1 %233, label %block_402059, label %block_401fe9

block_40226d:                                     ; preds = %block_40225d, %block_402279
  %MEMORY.0 = phi %struct.Memory* [ %5608, %block_40225d ], [ %MEMORY.0, %block_402279 ]
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 48
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = load i32, i32* %EAX
  %242 = zext i32 %241 to i64
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 4
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 3
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %244 to i32*
  %248 = load i32, i32* %247
  %249 = sub i32 %241, %248
  %250 = icmp ult i32 %241, %248
  %251 = zext i1 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %251, i8* %252, align 1, !tbaa !2432
  %253 = and i32 %249, 255
  %254 = call i32 @llvm.ctpop.i32(i32 %253) #16
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %257, i8* %258, align 1, !tbaa !2446
  %259 = xor i32 %248, %241
  %260 = xor i32 %259, %249
  %261 = lshr i32 %260, 4
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %263, i8* %264, align 1, !tbaa !2447
  %265 = icmp eq i32 %249, 0
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %266, i8* %267, align 1, !tbaa !2448
  %268 = lshr i32 %249, 31
  %269 = trunc i32 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %269, i8* %270, align 1, !tbaa !2449
  %271 = lshr i32 %241, 31
  %272 = lshr i32 %248, 31
  %273 = xor i32 %272, %271
  %274 = xor i32 %268, %271
  %275 = add nuw nsw i32 %274, %273
  %276 = icmp eq i32 %275, 2
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %277, i8* %278, align 1, !tbaa !2450
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 428
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 6
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 6
  store i64 %284, i64* %PC
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %286 = load i8, i8* %285, align 1, !tbaa !2449
  %287 = icmp ne i8 %286, 0
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %289 = load i8, i8* %288, align 1, !tbaa !2450
  %290 = icmp ne i8 %289, 0
  %291 = xor i1 %287, %290
  %292 = xor i1 %291, true
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %295 = select i1 %291, i64 %282, i64 %280
  store i64 %295, i64* %294, align 8, !tbaa !2428
  %296 = load i8, i8* %BRANCH_TAKEN
  %297 = icmp eq i8 %296, 1
  br i1 %297, label %block_40241f, label %block_402279

block_401fe9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 44
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = zext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i64, i64* %RAX
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 3
  store i64 %307, i64* %PC
  %308 = trunc i64 %305 to i32
  %309 = sub i32 %308, 1
  %310 = zext i32 %309 to i64
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = icmp ult i32 %308, 1
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %312, i8* %313, align 1, !tbaa !2432
  %314 = and i32 %309, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #16
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2446
  %320 = xor i64 1, %305
  %321 = trunc i64 %320 to i32
  %322 = xor i32 %321, %309
  %323 = lshr i32 %322, 4
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %325, i8* %326, align 1, !tbaa !2447
  %327 = icmp eq i32 %309, 0
  %328 = zext i1 %327 to i8
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %328, i8* %329, align 1, !tbaa !2448
  %330 = lshr i32 %309, 31
  %331 = trunc i32 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %331, i8* %332, align 1, !tbaa !2449
  %333 = lshr i32 %308, 31
  %334 = xor i32 %330, %333
  %335 = add nuw nsw i32 %334, %333
  %336 = icmp eq i32 %335, 2
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %337, i8* %338, align 1, !tbaa !2450
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 44
  %341 = load i32, i32* %EAX
  %342 = zext i32 %341 to i64
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %340 to i32*
  store i32 %341, i32* %345
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 48
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 7
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i32*
  store i32 0, i32* %350
  br label %block_401ff9

block_402465:                                     ; preds = %block_402459
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 16
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to i64*
  %356 = load i64, i64* %355
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = load i64, i64* %RBP
  %358 = sub i64 %357, 48
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %358 to i32*
  %362 = load i32, i32* %361
  %363 = sext i32 %362 to i64
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %365 = load i64, i64* %RAX
  %366 = load i64, i64* %RCX
  %367 = mul i64 %366, 4
  %368 = add i64 %367, %365
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 5
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to float*
  %372 = load float, float* %371
  %373 = bitcast i8* %364 to float*
  store float %372, float* %373, align 1, !tbaa !2452
  %374 = getelementptr inbounds i8, i8* %364, i64 4
  %375 = bitcast i8* %374 to float*
  store float 0.000000e+00, float* %375, align 1, !tbaa !2452
  %376 = getelementptr inbounds i8, i8* %364, i64 8
  %377 = bitcast i8* %376 to float*
  store float 0.000000e+00, float* %377, align 1, !tbaa !2452
  %378 = getelementptr inbounds i8, i8* %364, i64 12
  %379 = bitcast i8* %378 to float*
  store float 0.000000e+00, float* %379, align 1, !tbaa !2452
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 32
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %RAX, align 8, !tbaa !2428
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 44
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 3
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %387 to i32*
  %391 = load i32, i32* %390
  %392 = zext i32 %391 to i64
  store i64 %392, i64* %RDX, align 8, !tbaa !2428
  %393 = load i64, i64* %RDX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 3
  store i64 %395, i64* %PC
  %396 = trunc i64 %393 to i32
  %397 = sub i32 %396, 15
  %398 = zext i32 %397 to i64
  store i64 %398, i64* %RDX, align 8, !tbaa !2428
  %399 = icmp ult i32 %396, 15
  %400 = zext i1 %399 to i8
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %400, i8* %401, align 1, !tbaa !2432
  %402 = and i32 %397, 255
  %403 = call i32 @llvm.ctpop.i32(i32 %402) #16
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %406, i8* %407, align 1, !tbaa !2446
  %408 = xor i64 15, %393
  %409 = trunc i64 %408 to i32
  %410 = xor i32 %409, %397
  %411 = lshr i32 %410, 4
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %413, i8* %414, align 1, !tbaa !2447
  %415 = icmp eq i32 %397, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2448
  %418 = lshr i32 %397, 31
  %419 = trunc i32 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %419, i8* %420, align 1, !tbaa !2449
  %421 = lshr i32 %396, 31
  %422 = xor i32 %418, %421
  %423 = add nuw nsw i32 %422, %421
  %424 = icmp eq i32 %423, 2
  %425 = zext i1 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = load i32, i32* %EDX
  %428 = zext i32 %427 to i64
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 3
  store i64 %430, i64* %PC
  %431 = shl i64 %428, 32
  %432 = ashr exact i64 %431, 32
  store i64 %432, i64* %RCX, align 8, !tbaa !2428
  %433 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %434 = load i64, i64* %RAX
  %435 = load i64, i64* %RCX
  %436 = mul i64 %435, 4
  %437 = add i64 %436, %434
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 5
  store i64 %439, i64* %PC
  %440 = inttoptr i64 %437 to float*
  %441 = load float, float* %440
  %442 = bitcast i8* %433 to float*
  store float %441, float* %442, align 1, !tbaa !2452
  %443 = getelementptr inbounds i8, i8* %433, i64 4
  %444 = bitcast i8* %443 to float*
  store float 0.000000e+00, float* %444, align 1, !tbaa !2452
  %445 = getelementptr inbounds i8, i8* %433, i64 8
  %446 = bitcast i8* %445 to float*
  store float 0.000000e+00, float* %446, align 1, !tbaa !2452
  %447 = getelementptr inbounds i8, i8* %433, i64 12
  %448 = bitcast i8* %447 to float*
  store float 0.000000e+00, float* %448, align 1, !tbaa !2452
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 40
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i64*
  %454 = load i64, i64* %453
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = load i64, i64* %RBP
  %456 = sub i64 %455, 24
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 3
  store i64 %458, i64* %PC
  %459 = inttoptr i64 %456 to i32*
  %460 = load i32, i32* %459
  %461 = zext i32 %460 to i64
  store i64 %461, i64* %RDX, align 8, !tbaa !2428
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 44
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  %466 = inttoptr i64 %463 to i32*
  %467 = load i32, i32* %466
  %468 = zext i32 %467 to i64
  store i64 %468, i64* %RSI, align 8, !tbaa !2428
  %469 = load i64, i64* %RSI
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 3
  store i64 %471, i64* %PC
  %472 = trunc i64 %469 to i32
  %473 = sub i32 %472, 15
  %474 = zext i32 %473 to i64
  store i64 %474, i64* %RSI, align 8, !tbaa !2428
  %475 = icmp ult i32 %472, 15
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %476, i8* %477, align 1, !tbaa !2432
  %478 = and i32 %473, 255
  %479 = call i32 @llvm.ctpop.i32(i32 %478) #16
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %482, i8* %483, align 1, !tbaa !2446
  %484 = xor i64 15, %469
  %485 = trunc i64 %484 to i32
  %486 = xor i32 %485, %473
  %487 = lshr i32 %486, 4
  %488 = trunc i32 %487 to i8
  %489 = and i8 %488, 1
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %489, i8* %490, align 1, !tbaa !2447
  %491 = icmp eq i32 %473, 0
  %492 = zext i1 %491 to i8
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %492, i8* %493, align 1, !tbaa !2448
  %494 = lshr i32 %473, 31
  %495 = trunc i32 %494 to i8
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %495, i8* %496, align 1, !tbaa !2449
  %497 = lshr i32 %472, 31
  %498 = xor i32 %494, %497
  %499 = add nuw nsw i32 %498, %497
  %500 = icmp eq i32 %499, 2
  %501 = zext i1 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %501, i8* %502, align 1, !tbaa !2450
  %503 = load i64, i64* %RDX
  %504 = load i32, i32* %ESI
  %505 = zext i32 %504 to i64
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 3
  store i64 %507, i64* %PC
  %508 = shl i64 %503, 32
  %509 = ashr exact i64 %508, 32
  %510 = shl i64 %505, 32
  %511 = ashr exact i64 %510, 32
  %512 = mul nsw i64 %511, %509
  %513 = trunc i64 %512 to i32
  %514 = and i64 %512, 4294967295
  store i64 %514, i64* %RDX, align 8, !tbaa !2428
  %515 = shl i64 %512, 32
  %516 = ashr exact i64 %515, 32
  %517 = icmp ne i64 %516, %512
  %518 = zext i1 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %518, i8* %519, align 1, !tbaa !2432
  %520 = and i32 %513, 255
  %521 = call i32 @llvm.ctpop.i32(i32 %520) #16
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  %524 = xor i8 %523, 1
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %524, i8* %525, align 1, !tbaa !2446
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %526, align 1, !tbaa !2447
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %527, align 1, !tbaa !2448
  %528 = lshr i32 %513, 31
  %529 = trunc i32 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %529, i8* %530, align 1, !tbaa !2449
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %518, i8* %531, align 1, !tbaa !2450
  %532 = load i64, i64* %RDX
  %533 = load i64, i64* %RBP
  %534 = sub i64 %533, 48
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 3
  store i64 %536, i64* %PC
  %537 = trunc i64 %532 to i32
  %538 = inttoptr i64 %534 to i32*
  %539 = load i32, i32* %538
  %540 = add i32 %539, %537
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RDX, align 8, !tbaa !2428
  %542 = icmp ult i32 %540, %537
  %543 = icmp ult i32 %540, %539
  %544 = or i1 %542, %543
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %545, i8* %546, align 1, !tbaa !2432
  %547 = and i32 %540, 255
  %548 = call i32 @llvm.ctpop.i32(i32 %547) #16
  %549 = trunc i32 %548 to i8
  %550 = and i8 %549, 1
  %551 = xor i8 %550, 1
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %551, i8* %552, align 1, !tbaa !2446
  %553 = xor i32 %539, %537
  %554 = xor i32 %553, %540
  %555 = lshr i32 %554, 4
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %557, i8* %558, align 1, !tbaa !2447
  %559 = icmp eq i32 %540, 0
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %560, i8* %561, align 1, !tbaa !2448
  %562 = lshr i32 %540, 31
  %563 = trunc i32 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %563, i8* %564, align 1, !tbaa !2449
  %565 = lshr i32 %537, 31
  %566 = lshr i32 %539, 31
  %567 = xor i32 %562, %565
  %568 = xor i32 %562, %566
  %569 = add nuw nsw i32 %567, %568
  %570 = icmp eq i32 %569, 2
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %571, i8* %572, align 1, !tbaa !2450
  %573 = load i32, i32* %EDX
  %574 = zext i32 %573 to i64
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 3
  store i64 %576, i64* %PC
  %577 = shl i64 %574, 32
  %578 = ashr exact i64 %577, 32
  store i64 %578, i64* %RCX, align 8, !tbaa !2428
  %579 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %580 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %581 = load i64, i64* %RAX
  %582 = load i64, i64* %RCX
  %583 = mul i64 %582, 4
  %584 = add i64 %583, %581
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 5
  store i64 %586, i64* %PC
  %587 = bitcast i8* %580 to <2 x float>*
  %588 = load <2 x float>, <2 x float>* %587, align 1
  %589 = getelementptr inbounds i8, i8* %580, i64 8
  %590 = bitcast i8* %589 to <2 x i32>*
  %591 = load <2 x i32>, <2 x i32>* %590, align 1
  %592 = inttoptr i64 %584 to float*
  %593 = load float, float* %592
  %594 = extractelement <2 x float> %588, i32 0
  %595 = fmul float %594, %593
  %596 = bitcast i8* %579 to float*
  store float %595, float* %596, align 1, !tbaa !2452
  %597 = bitcast <2 x float> %588 to <2 x i32>
  %598 = extractelement <2 x i32> %597, i32 1
  %599 = getelementptr inbounds i8, i8* %579, i64 4
  %600 = bitcast i8* %599 to i32*
  store i32 %598, i32* %600, align 1, !tbaa !2452
  %601 = extractelement <2 x i32> %591, i32 0
  %602 = getelementptr inbounds i8, i8* %579, i64 8
  %603 = bitcast i8* %602 to i32*
  store i32 %601, i32* %603, align 1, !tbaa !2452
  %604 = extractelement <2 x i32> %591, i32 1
  %605 = getelementptr inbounds i8, i8* %579, i64 12
  %606 = bitcast i8* %605 to i32*
  store i32 %604, i32* %606, align 1, !tbaa !2452
  %607 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %608 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %609 = bitcast %union.vec128_t* %XMM1 to i8*
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC
  %612 = bitcast i8* %608 to <2 x float>*
  %613 = load <2 x float>, <2 x float>* %612, align 1
  %614 = getelementptr inbounds i8, i8* %608, i64 8
  %615 = bitcast i8* %614 to <2 x i32>*
  %616 = load <2 x i32>, <2 x i32>* %615, align 1
  %617 = bitcast i8* %609 to <2 x float>*
  %618 = load <2 x float>, <2 x float>* %617, align 1
  %619 = extractelement <2 x float> %613, i32 0
  %620 = extractelement <2 x float> %618, i32 0
  %621 = fadd float %619, %620
  %622 = bitcast i8* %607 to float*
  store float %621, float* %622, align 1, !tbaa !2452
  %623 = bitcast <2 x float> %613 to <2 x i32>
  %624 = extractelement <2 x i32> %623, i32 1
  %625 = getelementptr inbounds i8, i8* %607, i64 4
  %626 = bitcast i8* %625 to i32*
  store i32 %624, i32* %626, align 1, !tbaa !2452
  %627 = extractelement <2 x i32> %616, i32 0
  %628 = getelementptr inbounds i8, i8* %607, i64 8
  %629 = bitcast i8* %628 to i32*
  store i32 %627, i32* %629, align 1, !tbaa !2452
  %630 = extractelement <2 x i32> %616, i32 1
  %631 = getelementptr inbounds i8, i8* %607, i64 12
  %632 = bitcast i8* %631 to i32*
  store i32 %630, i32* %632, align 1, !tbaa !2452
  %633 = load i64, i64* %RBP
  %634 = sub i64 %633, 32
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 4
  store i64 %636, i64* %PC
  %637 = inttoptr i64 %634 to i64*
  %638 = load i64, i64* %637
  store i64 %638, i64* %RAX, align 8, !tbaa !2428
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 44
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 3
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to i32*
  %644 = load i32, i32* %643
  %645 = zext i32 %644 to i64
  store i64 %645, i64* %RDX, align 8, !tbaa !2428
  %646 = load i64, i64* %RDX
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 3
  store i64 %648, i64* %PC
  %649 = trunc i64 %646 to i32
  %650 = sub i32 %649, 14
  %651 = zext i32 %650 to i64
  store i64 %651, i64* %RDX, align 8, !tbaa !2428
  %652 = icmp ult i32 %649, 14
  %653 = zext i1 %652 to i8
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %653, i8* %654, align 1, !tbaa !2432
  %655 = and i32 %650, 255
  %656 = call i32 @llvm.ctpop.i32(i32 %655) #16
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  %659 = xor i8 %658, 1
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %659, i8* %660, align 1, !tbaa !2446
  %661 = xor i64 14, %646
  %662 = trunc i64 %661 to i32
  %663 = xor i32 %662, %650
  %664 = lshr i32 %663, 4
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i32 %650, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %650, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %649, 31
  %675 = xor i32 %671, %674
  %676 = add nuw nsw i32 %675, %674
  %677 = icmp eq i32 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i32, i32* %EDX
  %681 = zext i32 %680 to i64
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 3
  store i64 %683, i64* %PC
  %684 = shl i64 %681, 32
  %685 = ashr exact i64 %684, 32
  store i64 %685, i64* %RCX, align 8, !tbaa !2428
  %686 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %687 = load i64, i64* %RAX
  %688 = load i64, i64* %RCX
  %689 = mul i64 %688, 4
  %690 = add i64 %689, %687
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 5
  store i64 %692, i64* %PC
  %693 = inttoptr i64 %690 to float*
  %694 = load float, float* %693
  %695 = bitcast i8* %686 to float*
  store float %694, float* %695, align 1, !tbaa !2452
  %696 = getelementptr inbounds i8, i8* %686, i64 4
  %697 = bitcast i8* %696 to float*
  store float 0.000000e+00, float* %697, align 1, !tbaa !2452
  %698 = getelementptr inbounds i8, i8* %686, i64 8
  %699 = bitcast i8* %698 to float*
  store float 0.000000e+00, float* %699, align 1, !tbaa !2452
  %700 = getelementptr inbounds i8, i8* %686, i64 12
  %701 = bitcast i8* %700 to float*
  store float 0.000000e+00, float* %701, align 1, !tbaa !2452
  %702 = load i64, i64* %RBP
  %703 = sub i64 %702, 40
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 4
  store i64 %705, i64* %PC
  %706 = inttoptr i64 %703 to i64*
  %707 = load i64, i64* %706
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 24
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %709 to i32*
  %713 = load i32, i32* %712
  %714 = zext i32 %713 to i64
  store i64 %714, i64* %RDX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 44
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 3
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i32*
  %720 = load i32, i32* %719
  %721 = zext i32 %720 to i64
  store i64 %721, i64* %RSI, align 8, !tbaa !2428
  %722 = load i64, i64* %RSI
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 3
  store i64 %724, i64* %PC
  %725 = trunc i64 %722 to i32
  %726 = sub i32 %725, 14
  %727 = zext i32 %726 to i64
  store i64 %727, i64* %RSI, align 8, !tbaa !2428
  %728 = icmp ult i32 %725, 14
  %729 = zext i1 %728 to i8
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %729, i8* %730, align 1, !tbaa !2432
  %731 = and i32 %726, 255
  %732 = call i32 @llvm.ctpop.i32(i32 %731) #16
  %733 = trunc i32 %732 to i8
  %734 = and i8 %733, 1
  %735 = xor i8 %734, 1
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %735, i8* %736, align 1, !tbaa !2446
  %737 = xor i64 14, %722
  %738 = trunc i64 %737 to i32
  %739 = xor i32 %738, %726
  %740 = lshr i32 %739, 4
  %741 = trunc i32 %740 to i8
  %742 = and i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %742, i8* %743, align 1, !tbaa !2447
  %744 = icmp eq i32 %726, 0
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %745, i8* %746, align 1, !tbaa !2448
  %747 = lshr i32 %726, 31
  %748 = trunc i32 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %748, i8* %749, align 1, !tbaa !2449
  %750 = lshr i32 %725, 31
  %751 = xor i32 %747, %750
  %752 = add nuw nsw i32 %751, %750
  %753 = icmp eq i32 %752, 2
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %754, i8* %755, align 1, !tbaa !2450
  %756 = load i64, i64* %RDX
  %757 = load i32, i32* %ESI
  %758 = zext i32 %757 to i64
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 3
  store i64 %760, i64* %PC
  %761 = shl i64 %756, 32
  %762 = ashr exact i64 %761, 32
  %763 = shl i64 %758, 32
  %764 = ashr exact i64 %763, 32
  %765 = mul nsw i64 %764, %762
  %766 = trunc i64 %765 to i32
  %767 = and i64 %765, 4294967295
  store i64 %767, i64* %RDX, align 8, !tbaa !2428
  %768 = shl i64 %765, 32
  %769 = ashr exact i64 %768, 32
  %770 = icmp ne i64 %769, %765
  %771 = zext i1 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %771, i8* %772, align 1, !tbaa !2432
  %773 = and i32 %766, 255
  %774 = call i32 @llvm.ctpop.i32(i32 %773) #16
  %775 = trunc i32 %774 to i8
  %776 = and i8 %775, 1
  %777 = xor i8 %776, 1
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %777, i8* %778, align 1, !tbaa !2446
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %779, align 1, !tbaa !2447
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %780, align 1, !tbaa !2448
  %781 = lshr i32 %766, 31
  %782 = trunc i32 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %782, i8* %783, align 1, !tbaa !2449
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %771, i8* %784, align 1, !tbaa !2450
  %785 = load i64, i64* %RDX
  %786 = load i64, i64* %RBP
  %787 = sub i64 %786, 48
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = trunc i64 %785 to i32
  %791 = inttoptr i64 %787 to i32*
  %792 = load i32, i32* %791
  %793 = add i32 %792, %790
  %794 = zext i32 %793 to i64
  store i64 %794, i64* %RDX, align 8, !tbaa !2428
  %795 = icmp ult i32 %793, %790
  %796 = icmp ult i32 %793, %792
  %797 = or i1 %795, %796
  %798 = zext i1 %797 to i8
  %799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %798, i8* %799, align 1, !tbaa !2432
  %800 = and i32 %793, 255
  %801 = call i32 @llvm.ctpop.i32(i32 %800) #16
  %802 = trunc i32 %801 to i8
  %803 = and i8 %802, 1
  %804 = xor i8 %803, 1
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %804, i8* %805, align 1, !tbaa !2446
  %806 = xor i32 %792, %790
  %807 = xor i32 %806, %793
  %808 = lshr i32 %807, 4
  %809 = trunc i32 %808 to i8
  %810 = and i8 %809, 1
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %810, i8* %811, align 1, !tbaa !2447
  %812 = icmp eq i32 %793, 0
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %813, i8* %814, align 1, !tbaa !2448
  %815 = lshr i32 %793, 31
  %816 = trunc i32 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %816, i8* %817, align 1, !tbaa !2449
  %818 = lshr i32 %790, 31
  %819 = lshr i32 %792, 31
  %820 = xor i32 %815, %818
  %821 = xor i32 %815, %819
  %822 = add nuw nsw i32 %820, %821
  %823 = icmp eq i32 %822, 2
  %824 = zext i1 %823 to i8
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %824, i8* %825, align 1, !tbaa !2450
  %826 = load i32, i32* %EDX
  %827 = zext i32 %826 to i64
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 3
  store i64 %829, i64* %PC
  %830 = shl i64 %827, 32
  %831 = ashr exact i64 %830, 32
  store i64 %831, i64* %RCX, align 8, !tbaa !2428
  %832 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %833 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %834 = load i64, i64* %RAX
  %835 = load i64, i64* %RCX
  %836 = mul i64 %835, 4
  %837 = add i64 %836, %834
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 5
  store i64 %839, i64* %PC
  %840 = bitcast i8* %833 to <2 x float>*
  %841 = load <2 x float>, <2 x float>* %840, align 1
  %842 = getelementptr inbounds i8, i8* %833, i64 8
  %843 = bitcast i8* %842 to <2 x i32>*
  %844 = load <2 x i32>, <2 x i32>* %843, align 1
  %845 = inttoptr i64 %837 to float*
  %846 = load float, float* %845
  %847 = extractelement <2 x float> %841, i32 0
  %848 = fmul float %847, %846
  %849 = bitcast i8* %832 to float*
  store float %848, float* %849, align 1, !tbaa !2452
  %850 = bitcast <2 x float> %841 to <2 x i32>
  %851 = extractelement <2 x i32> %850, i32 1
  %852 = getelementptr inbounds i8, i8* %832, i64 4
  %853 = bitcast i8* %852 to i32*
  store i32 %851, i32* %853, align 1, !tbaa !2452
  %854 = extractelement <2 x i32> %844, i32 0
  %855 = getelementptr inbounds i8, i8* %832, i64 8
  %856 = bitcast i8* %855 to i32*
  store i32 %854, i32* %856, align 1, !tbaa !2452
  %857 = extractelement <2 x i32> %844, i32 1
  %858 = getelementptr inbounds i8, i8* %832, i64 12
  %859 = bitcast i8* %858 to i32*
  store i32 %857, i32* %859, align 1, !tbaa !2452
  %860 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %862 = bitcast %union.vec128_t* %XMM1 to i8*
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 4
  store i64 %864, i64* %PC
  %865 = bitcast i8* %861 to <2 x float>*
  %866 = load <2 x float>, <2 x float>* %865, align 1
  %867 = getelementptr inbounds i8, i8* %861, i64 8
  %868 = bitcast i8* %867 to <2 x i32>*
  %869 = load <2 x i32>, <2 x i32>* %868, align 1
  %870 = bitcast i8* %862 to <2 x float>*
  %871 = load <2 x float>, <2 x float>* %870, align 1
  %872 = extractelement <2 x float> %866, i32 0
  %873 = extractelement <2 x float> %871, i32 0
  %874 = fadd float %872, %873
  %875 = bitcast i8* %860 to float*
  store float %874, float* %875, align 1, !tbaa !2452
  %876 = bitcast <2 x float> %866 to <2 x i32>
  %877 = extractelement <2 x i32> %876, i32 1
  %878 = getelementptr inbounds i8, i8* %860, i64 4
  %879 = bitcast i8* %878 to i32*
  store i32 %877, i32* %879, align 1, !tbaa !2452
  %880 = extractelement <2 x i32> %869, i32 0
  %881 = getelementptr inbounds i8, i8* %860, i64 8
  %882 = bitcast i8* %881 to i32*
  store i32 %880, i32* %882, align 1, !tbaa !2452
  %883 = extractelement <2 x i32> %869, i32 1
  %884 = getelementptr inbounds i8, i8* %860, i64 12
  %885 = bitcast i8* %884 to i32*
  store i32 %883, i32* %885, align 1, !tbaa !2452
  %886 = load i64, i64* %RBP
  %887 = sub i64 %886, 32
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 4
  store i64 %889, i64* %PC
  %890 = inttoptr i64 %887 to i64*
  %891 = load i64, i64* %890
  store i64 %891, i64* %RAX, align 8, !tbaa !2428
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 44
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 3
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i32*
  %897 = load i32, i32* %896
  %898 = zext i32 %897 to i64
  store i64 %898, i64* %RDX, align 8, !tbaa !2428
  %899 = load i64, i64* %RDX
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 3
  store i64 %901, i64* %PC
  %902 = trunc i64 %899 to i32
  %903 = sub i32 %902, 13
  %904 = zext i32 %903 to i64
  store i64 %904, i64* %RDX, align 8, !tbaa !2428
  %905 = icmp ult i32 %902, 13
  %906 = zext i1 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %906, i8* %907, align 1, !tbaa !2432
  %908 = and i32 %903, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = xor i64 13, %899
  %915 = trunc i64 %914 to i32
  %916 = xor i32 %915, %903
  %917 = lshr i32 %916, 4
  %918 = trunc i32 %917 to i8
  %919 = and i8 %918, 1
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %919, i8* %920, align 1, !tbaa !2447
  %921 = icmp eq i32 %903, 0
  %922 = zext i1 %921 to i8
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %922, i8* %923, align 1, !tbaa !2448
  %924 = lshr i32 %903, 31
  %925 = trunc i32 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %925, i8* %926, align 1, !tbaa !2449
  %927 = lshr i32 %902, 31
  %928 = xor i32 %924, %927
  %929 = add nuw nsw i32 %928, %927
  %930 = icmp eq i32 %929, 2
  %931 = zext i1 %930 to i8
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %931, i8* %932, align 1, !tbaa !2450
  %933 = load i32, i32* %EDX
  %934 = zext i32 %933 to i64
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 3
  store i64 %936, i64* %PC
  %937 = shl i64 %934, 32
  %938 = ashr exact i64 %937, 32
  store i64 %938, i64* %RCX, align 8, !tbaa !2428
  %939 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %940 = load i64, i64* %RAX
  %941 = load i64, i64* %RCX
  %942 = mul i64 %941, 4
  %943 = add i64 %942, %940
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 5
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %943 to float*
  %947 = load float, float* %946
  %948 = bitcast i8* %939 to float*
  store float %947, float* %948, align 1, !tbaa !2452
  %949 = getelementptr inbounds i8, i8* %939, i64 4
  %950 = bitcast i8* %949 to float*
  store float 0.000000e+00, float* %950, align 1, !tbaa !2452
  %951 = getelementptr inbounds i8, i8* %939, i64 8
  %952 = bitcast i8* %951 to float*
  store float 0.000000e+00, float* %952, align 1, !tbaa !2452
  %953 = getelementptr inbounds i8, i8* %939, i64 12
  %954 = bitcast i8* %953 to float*
  store float 0.000000e+00, float* %954, align 1, !tbaa !2452
  %955 = load i64, i64* %RBP
  %956 = sub i64 %955, 40
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 4
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %956 to i64*
  %960 = load i64, i64* %959
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = load i64, i64* %RBP
  %962 = sub i64 %961, 24
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %962 to i32*
  %966 = load i32, i32* %965
  %967 = zext i32 %966 to i64
  store i64 %967, i64* %RDX, align 8, !tbaa !2428
  %968 = load i64, i64* %RBP
  %969 = sub i64 %968, 44
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 3
  store i64 %971, i64* %PC
  %972 = inttoptr i64 %969 to i32*
  %973 = load i32, i32* %972
  %974 = zext i32 %973 to i64
  store i64 %974, i64* %RSI, align 8, !tbaa !2428
  %975 = load i64, i64* %RSI
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 3
  store i64 %977, i64* %PC
  %978 = trunc i64 %975 to i32
  %979 = sub i32 %978, 13
  %980 = zext i32 %979 to i64
  store i64 %980, i64* %RSI, align 8, !tbaa !2428
  %981 = icmp ult i32 %978, 13
  %982 = zext i1 %981 to i8
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %982, i8* %983, align 1, !tbaa !2432
  %984 = and i32 %979, 255
  %985 = call i32 @llvm.ctpop.i32(i32 %984) #16
  %986 = trunc i32 %985 to i8
  %987 = and i8 %986, 1
  %988 = xor i8 %987, 1
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %988, i8* %989, align 1, !tbaa !2446
  %990 = xor i64 13, %975
  %991 = trunc i64 %990 to i32
  %992 = xor i32 %991, %979
  %993 = lshr i32 %992, 4
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %995, i8* %996, align 1, !tbaa !2447
  %997 = icmp eq i32 %979, 0
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %998, i8* %999, align 1, !tbaa !2448
  %1000 = lshr i32 %979, 31
  %1001 = trunc i32 %1000 to i8
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1001, i8* %1002, align 1, !tbaa !2449
  %1003 = lshr i32 %978, 31
  %1004 = xor i32 %1000, %1003
  %1005 = add nuw nsw i32 %1004, %1003
  %1006 = icmp eq i32 %1005, 2
  %1007 = zext i1 %1006 to i8
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1007, i8* %1008, align 1, !tbaa !2450
  %1009 = load i64, i64* %RDX
  %1010 = load i32, i32* %ESI
  %1011 = zext i32 %1010 to i64
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 3
  store i64 %1013, i64* %PC
  %1014 = shl i64 %1009, 32
  %1015 = ashr exact i64 %1014, 32
  %1016 = shl i64 %1011, 32
  %1017 = ashr exact i64 %1016, 32
  %1018 = mul nsw i64 %1017, %1015
  %1019 = trunc i64 %1018 to i32
  %1020 = and i64 %1018, 4294967295
  store i64 %1020, i64* %RDX, align 8, !tbaa !2428
  %1021 = shl i64 %1018, 32
  %1022 = ashr exact i64 %1021, 32
  %1023 = icmp ne i64 %1022, %1018
  %1024 = zext i1 %1023 to i8
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1024, i8* %1025, align 1, !tbaa !2432
  %1026 = and i32 %1019, 255
  %1027 = call i32 @llvm.ctpop.i32(i32 %1026) #16
  %1028 = trunc i32 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = xor i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1030, i8* %1031, align 1, !tbaa !2446
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1032, align 1, !tbaa !2447
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1033, align 1, !tbaa !2448
  %1034 = lshr i32 %1019, 31
  %1035 = trunc i32 %1034 to i8
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1035, i8* %1036, align 1, !tbaa !2449
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1024, i8* %1037, align 1, !tbaa !2450
  %1038 = load i64, i64* %RDX
  %1039 = load i64, i64* %RBP
  %1040 = sub i64 %1039, 48
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 3
  store i64 %1042, i64* %PC
  %1043 = trunc i64 %1038 to i32
  %1044 = inttoptr i64 %1040 to i32*
  %1045 = load i32, i32* %1044
  %1046 = add i32 %1045, %1043
  %1047 = zext i32 %1046 to i64
  store i64 %1047, i64* %RDX, align 8, !tbaa !2428
  %1048 = icmp ult i32 %1046, %1043
  %1049 = icmp ult i32 %1046, %1045
  %1050 = or i1 %1048, %1049
  %1051 = zext i1 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1051, i8* %1052, align 1, !tbaa !2432
  %1053 = and i32 %1046, 255
  %1054 = call i32 @llvm.ctpop.i32(i32 %1053) #16
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1057, i8* %1058, align 1, !tbaa !2446
  %1059 = xor i32 %1045, %1043
  %1060 = xor i32 %1059, %1046
  %1061 = lshr i32 %1060, 4
  %1062 = trunc i32 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1063, i8* %1064, align 1, !tbaa !2447
  %1065 = icmp eq i32 %1046, 0
  %1066 = zext i1 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1066, i8* %1067, align 1, !tbaa !2448
  %1068 = lshr i32 %1046, 31
  %1069 = trunc i32 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1069, i8* %1070, align 1, !tbaa !2449
  %1071 = lshr i32 %1043, 31
  %1072 = lshr i32 %1045, 31
  %1073 = xor i32 %1068, %1071
  %1074 = xor i32 %1068, %1072
  %1075 = add nuw nsw i32 %1073, %1074
  %1076 = icmp eq i32 %1075, 2
  %1077 = zext i1 %1076 to i8
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1077, i8* %1078, align 1, !tbaa !2450
  %1079 = load i32, i32* %EDX
  %1080 = zext i32 %1079 to i64
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 3
  store i64 %1082, i64* %PC
  %1083 = shl i64 %1080, 32
  %1084 = ashr exact i64 %1083, 32
  store i64 %1084, i64* %RCX, align 8, !tbaa !2428
  %1085 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1086 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1087 = load i64, i64* %RAX
  %1088 = load i64, i64* %RCX
  %1089 = mul i64 %1088, 4
  %1090 = add i64 %1089, %1087
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 5
  store i64 %1092, i64* %PC
  %1093 = bitcast i8* %1086 to <2 x float>*
  %1094 = load <2 x float>, <2 x float>* %1093, align 1
  %1095 = getelementptr inbounds i8, i8* %1086, i64 8
  %1096 = bitcast i8* %1095 to <2 x i32>*
  %1097 = load <2 x i32>, <2 x i32>* %1096, align 1
  %1098 = inttoptr i64 %1090 to float*
  %1099 = load float, float* %1098
  %1100 = extractelement <2 x float> %1094, i32 0
  %1101 = fmul float %1100, %1099
  %1102 = bitcast i8* %1085 to float*
  store float %1101, float* %1102, align 1, !tbaa !2452
  %1103 = bitcast <2 x float> %1094 to <2 x i32>
  %1104 = extractelement <2 x i32> %1103, i32 1
  %1105 = getelementptr inbounds i8, i8* %1085, i64 4
  %1106 = bitcast i8* %1105 to i32*
  store i32 %1104, i32* %1106, align 1, !tbaa !2452
  %1107 = extractelement <2 x i32> %1097, i32 0
  %1108 = getelementptr inbounds i8, i8* %1085, i64 8
  %1109 = bitcast i8* %1108 to i32*
  store i32 %1107, i32* %1109, align 1, !tbaa !2452
  %1110 = extractelement <2 x i32> %1097, i32 1
  %1111 = getelementptr inbounds i8, i8* %1085, i64 12
  %1112 = bitcast i8* %1111 to i32*
  store i32 %1110, i32* %1112, align 1, !tbaa !2452
  %1113 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1114 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1115 = bitcast %union.vec128_t* %XMM1 to i8*
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 4
  store i64 %1117, i64* %PC
  %1118 = bitcast i8* %1114 to <2 x float>*
  %1119 = load <2 x float>, <2 x float>* %1118, align 1
  %1120 = getelementptr inbounds i8, i8* %1114, i64 8
  %1121 = bitcast i8* %1120 to <2 x i32>*
  %1122 = load <2 x i32>, <2 x i32>* %1121, align 1
  %1123 = bitcast i8* %1115 to <2 x float>*
  %1124 = load <2 x float>, <2 x float>* %1123, align 1
  %1125 = extractelement <2 x float> %1119, i32 0
  %1126 = extractelement <2 x float> %1124, i32 0
  %1127 = fadd float %1125, %1126
  %1128 = bitcast i8* %1113 to float*
  store float %1127, float* %1128, align 1, !tbaa !2452
  %1129 = bitcast <2 x float> %1119 to <2 x i32>
  %1130 = extractelement <2 x i32> %1129, i32 1
  %1131 = getelementptr inbounds i8, i8* %1113, i64 4
  %1132 = bitcast i8* %1131 to i32*
  store i32 %1130, i32* %1132, align 1, !tbaa !2452
  %1133 = extractelement <2 x i32> %1122, i32 0
  %1134 = getelementptr inbounds i8, i8* %1113, i64 8
  %1135 = bitcast i8* %1134 to i32*
  store i32 %1133, i32* %1135, align 1, !tbaa !2452
  %1136 = extractelement <2 x i32> %1122, i32 1
  %1137 = getelementptr inbounds i8, i8* %1113, i64 12
  %1138 = bitcast i8* %1137 to i32*
  store i32 %1136, i32* %1138, align 1, !tbaa !2452
  %1139 = load i64, i64* %RBP
  %1140 = sub i64 %1139, 32
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 4
  store i64 %1142, i64* %PC
  %1143 = inttoptr i64 %1140 to i64*
  %1144 = load i64, i64* %1143
  store i64 %1144, i64* %RAX, align 8, !tbaa !2428
  %1145 = load i64, i64* %RBP
  %1146 = sub i64 %1145, 44
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 3
  store i64 %1148, i64* %PC
  %1149 = inttoptr i64 %1146 to i32*
  %1150 = load i32, i32* %1149
  %1151 = zext i32 %1150 to i64
  store i64 %1151, i64* %RDX, align 8, !tbaa !2428
  %1152 = load i64, i64* %RDX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 3
  store i64 %1154, i64* %PC
  %1155 = trunc i64 %1152 to i32
  %1156 = sub i32 %1155, 12
  %1157 = zext i32 %1156 to i64
  store i64 %1157, i64* %RDX, align 8, !tbaa !2428
  %1158 = icmp ult i32 %1155, 12
  %1159 = zext i1 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1159, i8* %1160, align 1, !tbaa !2432
  %1161 = and i32 %1156, 255
  %1162 = call i32 @llvm.ctpop.i32(i32 %1161) #16
  %1163 = trunc i32 %1162 to i8
  %1164 = and i8 %1163, 1
  %1165 = xor i8 %1164, 1
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1165, i8* %1166, align 1, !tbaa !2446
  %1167 = xor i64 12, %1152
  %1168 = trunc i64 %1167 to i32
  %1169 = xor i32 %1168, %1156
  %1170 = lshr i32 %1169, 4
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1172, i8* %1173, align 1, !tbaa !2447
  %1174 = icmp eq i32 %1156, 0
  %1175 = zext i1 %1174 to i8
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1175, i8* %1176, align 1, !tbaa !2448
  %1177 = lshr i32 %1156, 31
  %1178 = trunc i32 %1177 to i8
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1178, i8* %1179, align 1, !tbaa !2449
  %1180 = lshr i32 %1155, 31
  %1181 = xor i32 %1177, %1180
  %1182 = add nuw nsw i32 %1181, %1180
  %1183 = icmp eq i32 %1182, 2
  %1184 = zext i1 %1183 to i8
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1184, i8* %1185, align 1, !tbaa !2450
  %1186 = load i32, i32* %EDX
  %1187 = zext i32 %1186 to i64
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 3
  store i64 %1189, i64* %PC
  %1190 = shl i64 %1187, 32
  %1191 = ashr exact i64 %1190, 32
  store i64 %1191, i64* %RCX, align 8, !tbaa !2428
  %1192 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1193 = load i64, i64* %RAX
  %1194 = load i64, i64* %RCX
  %1195 = mul i64 %1194, 4
  %1196 = add i64 %1195, %1193
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 5
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1196 to float*
  %1200 = load float, float* %1199
  %1201 = bitcast i8* %1192 to float*
  store float %1200, float* %1201, align 1, !tbaa !2452
  %1202 = getelementptr inbounds i8, i8* %1192, i64 4
  %1203 = bitcast i8* %1202 to float*
  store float 0.000000e+00, float* %1203, align 1, !tbaa !2452
  %1204 = getelementptr inbounds i8, i8* %1192, i64 8
  %1205 = bitcast i8* %1204 to float*
  store float 0.000000e+00, float* %1205, align 1, !tbaa !2452
  %1206 = getelementptr inbounds i8, i8* %1192, i64 12
  %1207 = bitcast i8* %1206 to float*
  store float 0.000000e+00, float* %1207, align 1, !tbaa !2452
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 40
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 4
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to i64*
  %1213 = load i64, i64* %1212
  store i64 %1213, i64* %RAX, align 8, !tbaa !2428
  %1214 = load i64, i64* %RBP
  %1215 = sub i64 %1214, 24
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 3
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1215 to i32*
  %1219 = load i32, i32* %1218
  %1220 = zext i32 %1219 to i64
  store i64 %1220, i64* %RDX, align 8, !tbaa !2428
  %1221 = load i64, i64* %RBP
  %1222 = sub i64 %1221, 44
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 3
  store i64 %1224, i64* %PC
  %1225 = inttoptr i64 %1222 to i32*
  %1226 = load i32, i32* %1225
  %1227 = zext i32 %1226 to i64
  store i64 %1227, i64* %RSI, align 8, !tbaa !2428
  %1228 = load i64, i64* %RSI
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 3
  store i64 %1230, i64* %PC
  %1231 = trunc i64 %1228 to i32
  %1232 = sub i32 %1231, 12
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RSI, align 8, !tbaa !2428
  %1234 = icmp ult i32 %1231, 12
  %1235 = zext i1 %1234 to i8
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1235, i8* %1236, align 1, !tbaa !2432
  %1237 = and i32 %1232, 255
  %1238 = call i32 @llvm.ctpop.i32(i32 %1237) #16
  %1239 = trunc i32 %1238 to i8
  %1240 = and i8 %1239, 1
  %1241 = xor i8 %1240, 1
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1241, i8* %1242, align 1, !tbaa !2446
  %1243 = xor i64 12, %1228
  %1244 = trunc i64 %1243 to i32
  %1245 = xor i32 %1244, %1232
  %1246 = lshr i32 %1245, 4
  %1247 = trunc i32 %1246 to i8
  %1248 = and i8 %1247, 1
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1248, i8* %1249, align 1, !tbaa !2447
  %1250 = icmp eq i32 %1232, 0
  %1251 = zext i1 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1251, i8* %1252, align 1, !tbaa !2448
  %1253 = lshr i32 %1232, 31
  %1254 = trunc i32 %1253 to i8
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1254, i8* %1255, align 1, !tbaa !2449
  %1256 = lshr i32 %1231, 31
  %1257 = xor i32 %1253, %1256
  %1258 = add nuw nsw i32 %1257, %1256
  %1259 = icmp eq i32 %1258, 2
  %1260 = zext i1 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1260, i8* %1261, align 1, !tbaa !2450
  %1262 = load i64, i64* %RDX
  %1263 = load i32, i32* %ESI
  %1264 = zext i32 %1263 to i64
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 3
  store i64 %1266, i64* %PC
  %1267 = shl i64 %1262, 32
  %1268 = ashr exact i64 %1267, 32
  %1269 = shl i64 %1264, 32
  %1270 = ashr exact i64 %1269, 32
  %1271 = mul nsw i64 %1270, %1268
  %1272 = trunc i64 %1271 to i32
  %1273 = and i64 %1271, 4294967295
  store i64 %1273, i64* %RDX, align 8, !tbaa !2428
  %1274 = shl i64 %1271, 32
  %1275 = ashr exact i64 %1274, 32
  %1276 = icmp ne i64 %1275, %1271
  %1277 = zext i1 %1276 to i8
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1277, i8* %1278, align 1, !tbaa !2432
  %1279 = and i32 %1272, 255
  %1280 = call i32 @llvm.ctpop.i32(i32 %1279) #16
  %1281 = trunc i32 %1280 to i8
  %1282 = and i8 %1281, 1
  %1283 = xor i8 %1282, 1
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1283, i8* %1284, align 1, !tbaa !2446
  %1285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1285, align 1, !tbaa !2447
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1286, align 1, !tbaa !2448
  %1287 = lshr i32 %1272, 31
  %1288 = trunc i32 %1287 to i8
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1288, i8* %1289, align 1, !tbaa !2449
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1277, i8* %1290, align 1, !tbaa !2450
  %1291 = load i64, i64* %RDX
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 48
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 3
  store i64 %1295, i64* %PC
  %1296 = trunc i64 %1291 to i32
  %1297 = inttoptr i64 %1293 to i32*
  %1298 = load i32, i32* %1297
  %1299 = add i32 %1298, %1296
  %1300 = zext i32 %1299 to i64
  store i64 %1300, i64* %RDX, align 8, !tbaa !2428
  %1301 = icmp ult i32 %1299, %1296
  %1302 = icmp ult i32 %1299, %1298
  %1303 = or i1 %1301, %1302
  %1304 = zext i1 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1304, i8* %1305, align 1, !tbaa !2432
  %1306 = and i32 %1299, 255
  %1307 = call i32 @llvm.ctpop.i32(i32 %1306) #16
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  %1310 = xor i8 %1309, 1
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1310, i8* %1311, align 1, !tbaa !2446
  %1312 = xor i32 %1298, %1296
  %1313 = xor i32 %1312, %1299
  %1314 = lshr i32 %1313, 4
  %1315 = trunc i32 %1314 to i8
  %1316 = and i8 %1315, 1
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1316, i8* %1317, align 1, !tbaa !2447
  %1318 = icmp eq i32 %1299, 0
  %1319 = zext i1 %1318 to i8
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1319, i8* %1320, align 1, !tbaa !2448
  %1321 = lshr i32 %1299, 31
  %1322 = trunc i32 %1321 to i8
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1322, i8* %1323, align 1, !tbaa !2449
  %1324 = lshr i32 %1296, 31
  %1325 = lshr i32 %1298, 31
  %1326 = xor i32 %1321, %1324
  %1327 = xor i32 %1321, %1325
  %1328 = add nuw nsw i32 %1326, %1327
  %1329 = icmp eq i32 %1328, 2
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1330, i8* %1331, align 1, !tbaa !2450
  %1332 = load i32, i32* %EDX
  %1333 = zext i32 %1332 to i64
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 3
  store i64 %1335, i64* %PC
  %1336 = shl i64 %1333, 32
  %1337 = ashr exact i64 %1336, 32
  store i64 %1337, i64* %RCX, align 8, !tbaa !2428
  %1338 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1339 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1340 = load i64, i64* %RAX
  %1341 = load i64, i64* %RCX
  %1342 = mul i64 %1341, 4
  %1343 = add i64 %1342, %1340
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 5
  store i64 %1345, i64* %PC
  %1346 = bitcast i8* %1339 to <2 x float>*
  %1347 = load <2 x float>, <2 x float>* %1346, align 1
  %1348 = getelementptr inbounds i8, i8* %1339, i64 8
  %1349 = bitcast i8* %1348 to <2 x i32>*
  %1350 = load <2 x i32>, <2 x i32>* %1349, align 1
  %1351 = inttoptr i64 %1343 to float*
  %1352 = load float, float* %1351
  %1353 = extractelement <2 x float> %1347, i32 0
  %1354 = fmul float %1353, %1352
  %1355 = bitcast i8* %1338 to float*
  store float %1354, float* %1355, align 1, !tbaa !2452
  %1356 = bitcast <2 x float> %1347 to <2 x i32>
  %1357 = extractelement <2 x i32> %1356, i32 1
  %1358 = getelementptr inbounds i8, i8* %1338, i64 4
  %1359 = bitcast i8* %1358 to i32*
  store i32 %1357, i32* %1359, align 1, !tbaa !2452
  %1360 = extractelement <2 x i32> %1350, i32 0
  %1361 = getelementptr inbounds i8, i8* %1338, i64 8
  %1362 = bitcast i8* %1361 to i32*
  store i32 %1360, i32* %1362, align 1, !tbaa !2452
  %1363 = extractelement <2 x i32> %1350, i32 1
  %1364 = getelementptr inbounds i8, i8* %1338, i64 12
  %1365 = bitcast i8* %1364 to i32*
  store i32 %1363, i32* %1365, align 1, !tbaa !2452
  %1366 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1367 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1368 = bitcast %union.vec128_t* %XMM1 to i8*
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 4
  store i64 %1370, i64* %PC
  %1371 = bitcast i8* %1367 to <2 x float>*
  %1372 = load <2 x float>, <2 x float>* %1371, align 1
  %1373 = getelementptr inbounds i8, i8* %1367, i64 8
  %1374 = bitcast i8* %1373 to <2 x i32>*
  %1375 = load <2 x i32>, <2 x i32>* %1374, align 1
  %1376 = bitcast i8* %1368 to <2 x float>*
  %1377 = load <2 x float>, <2 x float>* %1376, align 1
  %1378 = extractelement <2 x float> %1372, i32 0
  %1379 = extractelement <2 x float> %1377, i32 0
  %1380 = fadd float %1378, %1379
  %1381 = bitcast i8* %1366 to float*
  store float %1380, float* %1381, align 1, !tbaa !2452
  %1382 = bitcast <2 x float> %1372 to <2 x i32>
  %1383 = extractelement <2 x i32> %1382, i32 1
  %1384 = getelementptr inbounds i8, i8* %1366, i64 4
  %1385 = bitcast i8* %1384 to i32*
  store i32 %1383, i32* %1385, align 1, !tbaa !2452
  %1386 = extractelement <2 x i32> %1375, i32 0
  %1387 = getelementptr inbounds i8, i8* %1366, i64 8
  %1388 = bitcast i8* %1387 to i32*
  store i32 %1386, i32* %1388, align 1, !tbaa !2452
  %1389 = extractelement <2 x i32> %1375, i32 1
  %1390 = getelementptr inbounds i8, i8* %1366, i64 12
  %1391 = bitcast i8* %1390 to i32*
  store i32 %1389, i32* %1391, align 1, !tbaa !2452
  %1392 = load i64, i64* %RBP
  %1393 = sub i64 %1392, 32
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 4
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1393 to i64*
  %1397 = load i64, i64* %1396
  store i64 %1397, i64* %RAX, align 8, !tbaa !2428
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 44
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 3
  store i64 %1401, i64* %PC
  %1402 = inttoptr i64 %1399 to i32*
  %1403 = load i32, i32* %1402
  %1404 = zext i32 %1403 to i64
  store i64 %1404, i64* %RDX, align 8, !tbaa !2428
  %1405 = load i64, i64* %RDX
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 3
  store i64 %1407, i64* %PC
  %1408 = trunc i64 %1405 to i32
  %1409 = sub i32 %1408, 11
  %1410 = zext i32 %1409 to i64
  store i64 %1410, i64* %RDX, align 8, !tbaa !2428
  %1411 = icmp ult i32 %1408, 11
  %1412 = zext i1 %1411 to i8
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1412, i8* %1413, align 1, !tbaa !2432
  %1414 = and i32 %1409, 255
  %1415 = call i32 @llvm.ctpop.i32(i32 %1414) #16
  %1416 = trunc i32 %1415 to i8
  %1417 = and i8 %1416, 1
  %1418 = xor i8 %1417, 1
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1418, i8* %1419, align 1, !tbaa !2446
  %1420 = xor i64 11, %1405
  %1421 = trunc i64 %1420 to i32
  %1422 = xor i32 %1421, %1409
  %1423 = lshr i32 %1422, 4
  %1424 = trunc i32 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1425, i8* %1426, align 1, !tbaa !2447
  %1427 = icmp eq i32 %1409, 0
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1428, i8* %1429, align 1, !tbaa !2448
  %1430 = lshr i32 %1409, 31
  %1431 = trunc i32 %1430 to i8
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1431, i8* %1432, align 1, !tbaa !2449
  %1433 = lshr i32 %1408, 31
  %1434 = xor i32 %1430, %1433
  %1435 = add nuw nsw i32 %1434, %1433
  %1436 = icmp eq i32 %1435, 2
  %1437 = zext i1 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1437, i8* %1438, align 1, !tbaa !2450
  %1439 = load i32, i32* %EDX
  %1440 = zext i32 %1439 to i64
  %1441 = load i64, i64* %PC
  %1442 = add i64 %1441, 3
  store i64 %1442, i64* %PC
  %1443 = shl i64 %1440, 32
  %1444 = ashr exact i64 %1443, 32
  store i64 %1444, i64* %RCX, align 8, !tbaa !2428
  %1445 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1446 = load i64, i64* %RAX
  %1447 = load i64, i64* %RCX
  %1448 = mul i64 %1447, 4
  %1449 = add i64 %1448, %1446
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 5
  store i64 %1451, i64* %PC
  %1452 = inttoptr i64 %1449 to float*
  %1453 = load float, float* %1452
  %1454 = bitcast i8* %1445 to float*
  store float %1453, float* %1454, align 1, !tbaa !2452
  %1455 = getelementptr inbounds i8, i8* %1445, i64 4
  %1456 = bitcast i8* %1455 to float*
  store float 0.000000e+00, float* %1456, align 1, !tbaa !2452
  %1457 = getelementptr inbounds i8, i8* %1445, i64 8
  %1458 = bitcast i8* %1457 to float*
  store float 0.000000e+00, float* %1458, align 1, !tbaa !2452
  %1459 = getelementptr inbounds i8, i8* %1445, i64 12
  %1460 = bitcast i8* %1459 to float*
  store float 0.000000e+00, float* %1460, align 1, !tbaa !2452
  %1461 = load i64, i64* %RBP
  %1462 = sub i64 %1461, 40
  %1463 = load i64, i64* %PC
  %1464 = add i64 %1463, 4
  store i64 %1464, i64* %PC
  %1465 = inttoptr i64 %1462 to i64*
  %1466 = load i64, i64* %1465
  store i64 %1466, i64* %RAX, align 8, !tbaa !2428
  %1467 = load i64, i64* %RBP
  %1468 = sub i64 %1467, 24
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 3
  store i64 %1470, i64* %PC
  %1471 = inttoptr i64 %1468 to i32*
  %1472 = load i32, i32* %1471
  %1473 = zext i32 %1472 to i64
  store i64 %1473, i64* %RDX, align 8, !tbaa !2428
  %1474 = load i64, i64* %RBP
  %1475 = sub i64 %1474, 44
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 3
  store i64 %1477, i64* %PC
  %1478 = inttoptr i64 %1475 to i32*
  %1479 = load i32, i32* %1478
  %1480 = zext i32 %1479 to i64
  store i64 %1480, i64* %RSI, align 8, !tbaa !2428
  %1481 = load i64, i64* %RSI
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 3
  store i64 %1483, i64* %PC
  %1484 = trunc i64 %1481 to i32
  %1485 = sub i32 %1484, 11
  %1486 = zext i32 %1485 to i64
  store i64 %1486, i64* %RSI, align 8, !tbaa !2428
  %1487 = icmp ult i32 %1484, 11
  %1488 = zext i1 %1487 to i8
  %1489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1488, i8* %1489, align 1, !tbaa !2432
  %1490 = and i32 %1485, 255
  %1491 = call i32 @llvm.ctpop.i32(i32 %1490) #16
  %1492 = trunc i32 %1491 to i8
  %1493 = and i8 %1492, 1
  %1494 = xor i8 %1493, 1
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1494, i8* %1495, align 1, !tbaa !2446
  %1496 = xor i64 11, %1481
  %1497 = trunc i64 %1496 to i32
  %1498 = xor i32 %1497, %1485
  %1499 = lshr i32 %1498, 4
  %1500 = trunc i32 %1499 to i8
  %1501 = and i8 %1500, 1
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1501, i8* %1502, align 1, !tbaa !2447
  %1503 = icmp eq i32 %1485, 0
  %1504 = zext i1 %1503 to i8
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1504, i8* %1505, align 1, !tbaa !2448
  %1506 = lshr i32 %1485, 31
  %1507 = trunc i32 %1506 to i8
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1507, i8* %1508, align 1, !tbaa !2449
  %1509 = lshr i32 %1484, 31
  %1510 = xor i32 %1506, %1509
  %1511 = add nuw nsw i32 %1510, %1509
  %1512 = icmp eq i32 %1511, 2
  %1513 = zext i1 %1512 to i8
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1513, i8* %1514, align 1, !tbaa !2450
  %1515 = load i64, i64* %RDX
  %1516 = load i32, i32* %ESI
  %1517 = zext i32 %1516 to i64
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 3
  store i64 %1519, i64* %PC
  %1520 = shl i64 %1515, 32
  %1521 = ashr exact i64 %1520, 32
  %1522 = shl i64 %1517, 32
  %1523 = ashr exact i64 %1522, 32
  %1524 = mul nsw i64 %1523, %1521
  %1525 = trunc i64 %1524 to i32
  %1526 = and i64 %1524, 4294967295
  store i64 %1526, i64* %RDX, align 8, !tbaa !2428
  %1527 = shl i64 %1524, 32
  %1528 = ashr exact i64 %1527, 32
  %1529 = icmp ne i64 %1528, %1524
  %1530 = zext i1 %1529 to i8
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1530, i8* %1531, align 1, !tbaa !2432
  %1532 = and i32 %1525, 255
  %1533 = call i32 @llvm.ctpop.i32(i32 %1532) #16
  %1534 = trunc i32 %1533 to i8
  %1535 = and i8 %1534, 1
  %1536 = xor i8 %1535, 1
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1536, i8* %1537, align 1, !tbaa !2446
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1538, align 1, !tbaa !2447
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1539, align 1, !tbaa !2448
  %1540 = lshr i32 %1525, 31
  %1541 = trunc i32 %1540 to i8
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1541, i8* %1542, align 1, !tbaa !2449
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1530, i8* %1543, align 1, !tbaa !2450
  %1544 = load i64, i64* %RDX
  %1545 = load i64, i64* %RBP
  %1546 = sub i64 %1545, 48
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 3
  store i64 %1548, i64* %PC
  %1549 = trunc i64 %1544 to i32
  %1550 = inttoptr i64 %1546 to i32*
  %1551 = load i32, i32* %1550
  %1552 = add i32 %1551, %1549
  %1553 = zext i32 %1552 to i64
  store i64 %1553, i64* %RDX, align 8, !tbaa !2428
  %1554 = icmp ult i32 %1552, %1549
  %1555 = icmp ult i32 %1552, %1551
  %1556 = or i1 %1554, %1555
  %1557 = zext i1 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1557, i8* %1558, align 1, !tbaa !2432
  %1559 = and i32 %1552, 255
  %1560 = call i32 @llvm.ctpop.i32(i32 %1559) #16
  %1561 = trunc i32 %1560 to i8
  %1562 = and i8 %1561, 1
  %1563 = xor i8 %1562, 1
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1563, i8* %1564, align 1, !tbaa !2446
  %1565 = xor i32 %1551, %1549
  %1566 = xor i32 %1565, %1552
  %1567 = lshr i32 %1566, 4
  %1568 = trunc i32 %1567 to i8
  %1569 = and i8 %1568, 1
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1569, i8* %1570, align 1, !tbaa !2447
  %1571 = icmp eq i32 %1552, 0
  %1572 = zext i1 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1572, i8* %1573, align 1, !tbaa !2448
  %1574 = lshr i32 %1552, 31
  %1575 = trunc i32 %1574 to i8
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1575, i8* %1576, align 1, !tbaa !2449
  %1577 = lshr i32 %1549, 31
  %1578 = lshr i32 %1551, 31
  %1579 = xor i32 %1574, %1577
  %1580 = xor i32 %1574, %1578
  %1581 = add nuw nsw i32 %1579, %1580
  %1582 = icmp eq i32 %1581, 2
  %1583 = zext i1 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1583, i8* %1584, align 1, !tbaa !2450
  %1585 = load i32, i32* %EDX
  %1586 = zext i32 %1585 to i64
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 3
  store i64 %1588, i64* %PC
  %1589 = shl i64 %1586, 32
  %1590 = ashr exact i64 %1589, 32
  store i64 %1590, i64* %RCX, align 8, !tbaa !2428
  %1591 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1592 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1593 = load i64, i64* %RAX
  %1594 = load i64, i64* %RCX
  %1595 = mul i64 %1594, 4
  %1596 = add i64 %1595, %1593
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 5
  store i64 %1598, i64* %PC
  %1599 = bitcast i8* %1592 to <2 x float>*
  %1600 = load <2 x float>, <2 x float>* %1599, align 1
  %1601 = getelementptr inbounds i8, i8* %1592, i64 8
  %1602 = bitcast i8* %1601 to <2 x i32>*
  %1603 = load <2 x i32>, <2 x i32>* %1602, align 1
  %1604 = inttoptr i64 %1596 to float*
  %1605 = load float, float* %1604
  %1606 = extractelement <2 x float> %1600, i32 0
  %1607 = fmul float %1606, %1605
  %1608 = bitcast i8* %1591 to float*
  store float %1607, float* %1608, align 1, !tbaa !2452
  %1609 = bitcast <2 x float> %1600 to <2 x i32>
  %1610 = extractelement <2 x i32> %1609, i32 1
  %1611 = getelementptr inbounds i8, i8* %1591, i64 4
  %1612 = bitcast i8* %1611 to i32*
  store i32 %1610, i32* %1612, align 1, !tbaa !2452
  %1613 = extractelement <2 x i32> %1603, i32 0
  %1614 = getelementptr inbounds i8, i8* %1591, i64 8
  %1615 = bitcast i8* %1614 to i32*
  store i32 %1613, i32* %1615, align 1, !tbaa !2452
  %1616 = extractelement <2 x i32> %1603, i32 1
  %1617 = getelementptr inbounds i8, i8* %1591, i64 12
  %1618 = bitcast i8* %1617 to i32*
  store i32 %1616, i32* %1618, align 1, !tbaa !2452
  %1619 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1620 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1621 = bitcast %union.vec128_t* %XMM1 to i8*
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 4
  store i64 %1623, i64* %PC
  %1624 = bitcast i8* %1620 to <2 x float>*
  %1625 = load <2 x float>, <2 x float>* %1624, align 1
  %1626 = getelementptr inbounds i8, i8* %1620, i64 8
  %1627 = bitcast i8* %1626 to <2 x i32>*
  %1628 = load <2 x i32>, <2 x i32>* %1627, align 1
  %1629 = bitcast i8* %1621 to <2 x float>*
  %1630 = load <2 x float>, <2 x float>* %1629, align 1
  %1631 = extractelement <2 x float> %1625, i32 0
  %1632 = extractelement <2 x float> %1630, i32 0
  %1633 = fadd float %1631, %1632
  %1634 = bitcast i8* %1619 to float*
  store float %1633, float* %1634, align 1, !tbaa !2452
  %1635 = bitcast <2 x float> %1625 to <2 x i32>
  %1636 = extractelement <2 x i32> %1635, i32 1
  %1637 = getelementptr inbounds i8, i8* %1619, i64 4
  %1638 = bitcast i8* %1637 to i32*
  store i32 %1636, i32* %1638, align 1, !tbaa !2452
  %1639 = extractelement <2 x i32> %1628, i32 0
  %1640 = getelementptr inbounds i8, i8* %1619, i64 8
  %1641 = bitcast i8* %1640 to i32*
  store i32 %1639, i32* %1641, align 1, !tbaa !2452
  %1642 = extractelement <2 x i32> %1628, i32 1
  %1643 = getelementptr inbounds i8, i8* %1619, i64 12
  %1644 = bitcast i8* %1643 to i32*
  store i32 %1642, i32* %1644, align 1, !tbaa !2452
  %1645 = load i64, i64* %RBP
  %1646 = sub i64 %1645, 32
  %1647 = load i64, i64* %PC
  %1648 = add i64 %1647, 4
  store i64 %1648, i64* %PC
  %1649 = inttoptr i64 %1646 to i64*
  %1650 = load i64, i64* %1649
  store i64 %1650, i64* %RAX, align 8, !tbaa !2428
  %1651 = load i64, i64* %RBP
  %1652 = sub i64 %1651, 44
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 3
  store i64 %1654, i64* %PC
  %1655 = inttoptr i64 %1652 to i32*
  %1656 = load i32, i32* %1655
  %1657 = zext i32 %1656 to i64
  store i64 %1657, i64* %RDX, align 8, !tbaa !2428
  %1658 = load i64, i64* %RDX
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 3
  store i64 %1660, i64* %PC
  %1661 = trunc i64 %1658 to i32
  %1662 = sub i32 %1661, 10
  %1663 = zext i32 %1662 to i64
  store i64 %1663, i64* %RDX, align 8, !tbaa !2428
  %1664 = icmp ult i32 %1661, 10
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1665, i8* %1666, align 1, !tbaa !2432
  %1667 = and i32 %1662, 255
  %1668 = call i32 @llvm.ctpop.i32(i32 %1667) #16
  %1669 = trunc i32 %1668 to i8
  %1670 = and i8 %1669, 1
  %1671 = xor i8 %1670, 1
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1671, i8* %1672, align 1, !tbaa !2446
  %1673 = xor i64 10, %1658
  %1674 = trunc i64 %1673 to i32
  %1675 = xor i32 %1674, %1662
  %1676 = lshr i32 %1675, 4
  %1677 = trunc i32 %1676 to i8
  %1678 = and i8 %1677, 1
  %1679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1678, i8* %1679, align 1, !tbaa !2447
  %1680 = icmp eq i32 %1662, 0
  %1681 = zext i1 %1680 to i8
  %1682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1681, i8* %1682, align 1, !tbaa !2448
  %1683 = lshr i32 %1662, 31
  %1684 = trunc i32 %1683 to i8
  %1685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1684, i8* %1685, align 1, !tbaa !2449
  %1686 = lshr i32 %1661, 31
  %1687 = xor i32 %1683, %1686
  %1688 = add nuw nsw i32 %1687, %1686
  %1689 = icmp eq i32 %1688, 2
  %1690 = zext i1 %1689 to i8
  %1691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1690, i8* %1691, align 1, !tbaa !2450
  %1692 = load i32, i32* %EDX
  %1693 = zext i32 %1692 to i64
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 3
  store i64 %1695, i64* %PC
  %1696 = shl i64 %1693, 32
  %1697 = ashr exact i64 %1696, 32
  store i64 %1697, i64* %RCX, align 8, !tbaa !2428
  %1698 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1699 = load i64, i64* %RAX
  %1700 = load i64, i64* %RCX
  %1701 = mul i64 %1700, 4
  %1702 = add i64 %1701, %1699
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 5
  store i64 %1704, i64* %PC
  %1705 = inttoptr i64 %1702 to float*
  %1706 = load float, float* %1705
  %1707 = bitcast i8* %1698 to float*
  store float %1706, float* %1707, align 1, !tbaa !2452
  %1708 = getelementptr inbounds i8, i8* %1698, i64 4
  %1709 = bitcast i8* %1708 to float*
  store float 0.000000e+00, float* %1709, align 1, !tbaa !2452
  %1710 = getelementptr inbounds i8, i8* %1698, i64 8
  %1711 = bitcast i8* %1710 to float*
  store float 0.000000e+00, float* %1711, align 1, !tbaa !2452
  %1712 = getelementptr inbounds i8, i8* %1698, i64 12
  %1713 = bitcast i8* %1712 to float*
  store float 0.000000e+00, float* %1713, align 1, !tbaa !2452
  %1714 = load i64, i64* %RBP
  %1715 = sub i64 %1714, 40
  %1716 = load i64, i64* %PC
  %1717 = add i64 %1716, 4
  store i64 %1717, i64* %PC
  %1718 = inttoptr i64 %1715 to i64*
  %1719 = load i64, i64* %1718
  store i64 %1719, i64* %RAX, align 8, !tbaa !2428
  %1720 = load i64, i64* %RBP
  %1721 = sub i64 %1720, 24
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 3
  store i64 %1723, i64* %PC
  %1724 = inttoptr i64 %1721 to i32*
  %1725 = load i32, i32* %1724
  %1726 = zext i32 %1725 to i64
  store i64 %1726, i64* %RDX, align 8, !tbaa !2428
  %1727 = load i64, i64* %RBP
  %1728 = sub i64 %1727, 44
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 3
  store i64 %1730, i64* %PC
  %1731 = inttoptr i64 %1728 to i32*
  %1732 = load i32, i32* %1731
  %1733 = zext i32 %1732 to i64
  store i64 %1733, i64* %RSI, align 8, !tbaa !2428
  %1734 = load i64, i64* %RSI
  %1735 = load i64, i64* %PC
  %1736 = add i64 %1735, 3
  store i64 %1736, i64* %PC
  %1737 = trunc i64 %1734 to i32
  %1738 = sub i32 %1737, 10
  %1739 = zext i32 %1738 to i64
  store i64 %1739, i64* %RSI, align 8, !tbaa !2428
  %1740 = icmp ult i32 %1737, 10
  %1741 = zext i1 %1740 to i8
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1741, i8* %1742, align 1, !tbaa !2432
  %1743 = and i32 %1738, 255
  %1744 = call i32 @llvm.ctpop.i32(i32 %1743) #16
  %1745 = trunc i32 %1744 to i8
  %1746 = and i8 %1745, 1
  %1747 = xor i8 %1746, 1
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1747, i8* %1748, align 1, !tbaa !2446
  %1749 = xor i64 10, %1734
  %1750 = trunc i64 %1749 to i32
  %1751 = xor i32 %1750, %1738
  %1752 = lshr i32 %1751, 4
  %1753 = trunc i32 %1752 to i8
  %1754 = and i8 %1753, 1
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1754, i8* %1755, align 1, !tbaa !2447
  %1756 = icmp eq i32 %1738, 0
  %1757 = zext i1 %1756 to i8
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1757, i8* %1758, align 1, !tbaa !2448
  %1759 = lshr i32 %1738, 31
  %1760 = trunc i32 %1759 to i8
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1760, i8* %1761, align 1, !tbaa !2449
  %1762 = lshr i32 %1737, 31
  %1763 = xor i32 %1759, %1762
  %1764 = add nuw nsw i32 %1763, %1762
  %1765 = icmp eq i32 %1764, 2
  %1766 = zext i1 %1765 to i8
  %1767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1766, i8* %1767, align 1, !tbaa !2450
  %1768 = load i64, i64* %RDX
  %1769 = load i32, i32* %ESI
  %1770 = zext i32 %1769 to i64
  %1771 = load i64, i64* %PC
  %1772 = add i64 %1771, 3
  store i64 %1772, i64* %PC
  %1773 = shl i64 %1768, 32
  %1774 = ashr exact i64 %1773, 32
  %1775 = shl i64 %1770, 32
  %1776 = ashr exact i64 %1775, 32
  %1777 = mul nsw i64 %1776, %1774
  %1778 = trunc i64 %1777 to i32
  %1779 = and i64 %1777, 4294967295
  store i64 %1779, i64* %RDX, align 8, !tbaa !2428
  %1780 = shl i64 %1777, 32
  %1781 = ashr exact i64 %1780, 32
  %1782 = icmp ne i64 %1781, %1777
  %1783 = zext i1 %1782 to i8
  %1784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1783, i8* %1784, align 1, !tbaa !2432
  %1785 = and i32 %1778, 255
  %1786 = call i32 @llvm.ctpop.i32(i32 %1785) #16
  %1787 = trunc i32 %1786 to i8
  %1788 = and i8 %1787, 1
  %1789 = xor i8 %1788, 1
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1789, i8* %1790, align 1, !tbaa !2446
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1791, align 1, !tbaa !2447
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1792, align 1, !tbaa !2448
  %1793 = lshr i32 %1778, 31
  %1794 = trunc i32 %1793 to i8
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1794, i8* %1795, align 1, !tbaa !2449
  %1796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1783, i8* %1796, align 1, !tbaa !2450
  %1797 = load i64, i64* %RDX
  %1798 = load i64, i64* %RBP
  %1799 = sub i64 %1798, 48
  %1800 = load i64, i64* %PC
  %1801 = add i64 %1800, 3
  store i64 %1801, i64* %PC
  %1802 = trunc i64 %1797 to i32
  %1803 = inttoptr i64 %1799 to i32*
  %1804 = load i32, i32* %1803
  %1805 = add i32 %1804, %1802
  %1806 = zext i32 %1805 to i64
  store i64 %1806, i64* %RDX, align 8, !tbaa !2428
  %1807 = icmp ult i32 %1805, %1802
  %1808 = icmp ult i32 %1805, %1804
  %1809 = or i1 %1807, %1808
  %1810 = zext i1 %1809 to i8
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1810, i8* %1811, align 1, !tbaa !2432
  %1812 = and i32 %1805, 255
  %1813 = call i32 @llvm.ctpop.i32(i32 %1812) #16
  %1814 = trunc i32 %1813 to i8
  %1815 = and i8 %1814, 1
  %1816 = xor i8 %1815, 1
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1816, i8* %1817, align 1, !tbaa !2446
  %1818 = xor i32 %1804, %1802
  %1819 = xor i32 %1818, %1805
  %1820 = lshr i32 %1819, 4
  %1821 = trunc i32 %1820 to i8
  %1822 = and i8 %1821, 1
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1822, i8* %1823, align 1, !tbaa !2447
  %1824 = icmp eq i32 %1805, 0
  %1825 = zext i1 %1824 to i8
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1825, i8* %1826, align 1, !tbaa !2448
  %1827 = lshr i32 %1805, 31
  %1828 = trunc i32 %1827 to i8
  %1829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1828, i8* %1829, align 1, !tbaa !2449
  %1830 = lshr i32 %1802, 31
  %1831 = lshr i32 %1804, 31
  %1832 = xor i32 %1827, %1830
  %1833 = xor i32 %1827, %1831
  %1834 = add nuw nsw i32 %1832, %1833
  %1835 = icmp eq i32 %1834, 2
  %1836 = zext i1 %1835 to i8
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1836, i8* %1837, align 1, !tbaa !2450
  %1838 = load i32, i32* %EDX
  %1839 = zext i32 %1838 to i64
  %1840 = load i64, i64* %PC
  %1841 = add i64 %1840, 3
  store i64 %1841, i64* %PC
  %1842 = shl i64 %1839, 32
  %1843 = ashr exact i64 %1842, 32
  store i64 %1843, i64* %RCX, align 8, !tbaa !2428
  %1844 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1845 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1846 = load i64, i64* %RAX
  %1847 = load i64, i64* %RCX
  %1848 = mul i64 %1847, 4
  %1849 = add i64 %1848, %1846
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 5
  store i64 %1851, i64* %PC
  %1852 = bitcast i8* %1845 to <2 x float>*
  %1853 = load <2 x float>, <2 x float>* %1852, align 1
  %1854 = getelementptr inbounds i8, i8* %1845, i64 8
  %1855 = bitcast i8* %1854 to <2 x i32>*
  %1856 = load <2 x i32>, <2 x i32>* %1855, align 1
  %1857 = inttoptr i64 %1849 to float*
  %1858 = load float, float* %1857
  %1859 = extractelement <2 x float> %1853, i32 0
  %1860 = fmul float %1859, %1858
  %1861 = bitcast i8* %1844 to float*
  store float %1860, float* %1861, align 1, !tbaa !2452
  %1862 = bitcast <2 x float> %1853 to <2 x i32>
  %1863 = extractelement <2 x i32> %1862, i32 1
  %1864 = getelementptr inbounds i8, i8* %1844, i64 4
  %1865 = bitcast i8* %1864 to i32*
  store i32 %1863, i32* %1865, align 1, !tbaa !2452
  %1866 = extractelement <2 x i32> %1856, i32 0
  %1867 = getelementptr inbounds i8, i8* %1844, i64 8
  %1868 = bitcast i8* %1867 to i32*
  store i32 %1866, i32* %1868, align 1, !tbaa !2452
  %1869 = extractelement <2 x i32> %1856, i32 1
  %1870 = getelementptr inbounds i8, i8* %1844, i64 12
  %1871 = bitcast i8* %1870 to i32*
  store i32 %1869, i32* %1871, align 1, !tbaa !2452
  %1872 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1873 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1874 = bitcast %union.vec128_t* %XMM1 to i8*
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 4
  store i64 %1876, i64* %PC
  %1877 = bitcast i8* %1873 to <2 x float>*
  %1878 = load <2 x float>, <2 x float>* %1877, align 1
  %1879 = getelementptr inbounds i8, i8* %1873, i64 8
  %1880 = bitcast i8* %1879 to <2 x i32>*
  %1881 = load <2 x i32>, <2 x i32>* %1880, align 1
  %1882 = bitcast i8* %1874 to <2 x float>*
  %1883 = load <2 x float>, <2 x float>* %1882, align 1
  %1884 = extractelement <2 x float> %1878, i32 0
  %1885 = extractelement <2 x float> %1883, i32 0
  %1886 = fadd float %1884, %1885
  %1887 = bitcast i8* %1872 to float*
  store float %1886, float* %1887, align 1, !tbaa !2452
  %1888 = bitcast <2 x float> %1878 to <2 x i32>
  %1889 = extractelement <2 x i32> %1888, i32 1
  %1890 = getelementptr inbounds i8, i8* %1872, i64 4
  %1891 = bitcast i8* %1890 to i32*
  store i32 %1889, i32* %1891, align 1, !tbaa !2452
  %1892 = extractelement <2 x i32> %1881, i32 0
  %1893 = getelementptr inbounds i8, i8* %1872, i64 8
  %1894 = bitcast i8* %1893 to i32*
  store i32 %1892, i32* %1894, align 1, !tbaa !2452
  %1895 = extractelement <2 x i32> %1881, i32 1
  %1896 = getelementptr inbounds i8, i8* %1872, i64 12
  %1897 = bitcast i8* %1896 to i32*
  store i32 %1895, i32* %1897, align 1, !tbaa !2452
  %1898 = load i64, i64* %RBP
  %1899 = sub i64 %1898, 32
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 4
  store i64 %1901, i64* %PC
  %1902 = inttoptr i64 %1899 to i64*
  %1903 = load i64, i64* %1902
  store i64 %1903, i64* %RAX, align 8, !tbaa !2428
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 44
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 3
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i32*
  %1909 = load i32, i32* %1908
  %1910 = zext i32 %1909 to i64
  store i64 %1910, i64* %RDX, align 8, !tbaa !2428
  %1911 = load i64, i64* %RDX
  %1912 = load i64, i64* %PC
  %1913 = add i64 %1912, 3
  store i64 %1913, i64* %PC
  %1914 = trunc i64 %1911 to i32
  %1915 = sub i32 %1914, 9
  %1916 = zext i32 %1915 to i64
  store i64 %1916, i64* %RDX, align 8, !tbaa !2428
  %1917 = icmp ult i32 %1914, 9
  %1918 = zext i1 %1917 to i8
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1918, i8* %1919, align 1, !tbaa !2432
  %1920 = and i32 %1915, 255
  %1921 = call i32 @llvm.ctpop.i32(i32 %1920) #16
  %1922 = trunc i32 %1921 to i8
  %1923 = and i8 %1922, 1
  %1924 = xor i8 %1923, 1
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1924, i8* %1925, align 1, !tbaa !2446
  %1926 = xor i64 9, %1911
  %1927 = trunc i64 %1926 to i32
  %1928 = xor i32 %1927, %1915
  %1929 = lshr i32 %1928, 4
  %1930 = trunc i32 %1929 to i8
  %1931 = and i8 %1930, 1
  %1932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1931, i8* %1932, align 1, !tbaa !2447
  %1933 = icmp eq i32 %1915, 0
  %1934 = zext i1 %1933 to i8
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1934, i8* %1935, align 1, !tbaa !2448
  %1936 = lshr i32 %1915, 31
  %1937 = trunc i32 %1936 to i8
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1937, i8* %1938, align 1, !tbaa !2449
  %1939 = lshr i32 %1914, 31
  %1940 = xor i32 %1936, %1939
  %1941 = add nuw nsw i32 %1940, %1939
  %1942 = icmp eq i32 %1941, 2
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1943, i8* %1944, align 1, !tbaa !2450
  %1945 = load i32, i32* %EDX
  %1946 = zext i32 %1945 to i64
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 3
  store i64 %1948, i64* %PC
  %1949 = shl i64 %1946, 32
  %1950 = ashr exact i64 %1949, 32
  store i64 %1950, i64* %RCX, align 8, !tbaa !2428
  %1951 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1952 = load i64, i64* %RAX
  %1953 = load i64, i64* %RCX
  %1954 = mul i64 %1953, 4
  %1955 = add i64 %1954, %1952
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 5
  store i64 %1957, i64* %PC
  %1958 = inttoptr i64 %1955 to float*
  %1959 = load float, float* %1958
  %1960 = bitcast i8* %1951 to float*
  store float %1959, float* %1960, align 1, !tbaa !2452
  %1961 = getelementptr inbounds i8, i8* %1951, i64 4
  %1962 = bitcast i8* %1961 to float*
  store float 0.000000e+00, float* %1962, align 1, !tbaa !2452
  %1963 = getelementptr inbounds i8, i8* %1951, i64 8
  %1964 = bitcast i8* %1963 to float*
  store float 0.000000e+00, float* %1964, align 1, !tbaa !2452
  %1965 = getelementptr inbounds i8, i8* %1951, i64 12
  %1966 = bitcast i8* %1965 to float*
  store float 0.000000e+00, float* %1966, align 1, !tbaa !2452
  %1967 = load i64, i64* %RBP
  %1968 = sub i64 %1967, 40
  %1969 = load i64, i64* %PC
  %1970 = add i64 %1969, 4
  store i64 %1970, i64* %PC
  %1971 = inttoptr i64 %1968 to i64*
  %1972 = load i64, i64* %1971
  store i64 %1972, i64* %RAX, align 8, !tbaa !2428
  %1973 = load i64, i64* %RBP
  %1974 = sub i64 %1973, 24
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 3
  store i64 %1976, i64* %PC
  %1977 = inttoptr i64 %1974 to i32*
  %1978 = load i32, i32* %1977
  %1979 = zext i32 %1978 to i64
  store i64 %1979, i64* %RDX, align 8, !tbaa !2428
  %1980 = load i64, i64* %RBP
  %1981 = sub i64 %1980, 44
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 3
  store i64 %1983, i64* %PC
  %1984 = inttoptr i64 %1981 to i32*
  %1985 = load i32, i32* %1984
  %1986 = zext i32 %1985 to i64
  store i64 %1986, i64* %RSI, align 8, !tbaa !2428
  %1987 = load i64, i64* %RSI
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 3
  store i64 %1989, i64* %PC
  %1990 = trunc i64 %1987 to i32
  %1991 = sub i32 %1990, 9
  %1992 = zext i32 %1991 to i64
  store i64 %1992, i64* %RSI, align 8, !tbaa !2428
  %1993 = icmp ult i32 %1990, 9
  %1994 = zext i1 %1993 to i8
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1994, i8* %1995, align 1, !tbaa !2432
  %1996 = and i32 %1991, 255
  %1997 = call i32 @llvm.ctpop.i32(i32 %1996) #16
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2000, i8* %2001, align 1, !tbaa !2446
  %2002 = xor i64 9, %1987
  %2003 = trunc i64 %2002 to i32
  %2004 = xor i32 %2003, %1991
  %2005 = lshr i32 %2004, 4
  %2006 = trunc i32 %2005 to i8
  %2007 = and i8 %2006, 1
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2007, i8* %2008, align 1, !tbaa !2447
  %2009 = icmp eq i32 %1991, 0
  %2010 = zext i1 %2009 to i8
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2010, i8* %2011, align 1, !tbaa !2448
  %2012 = lshr i32 %1991, 31
  %2013 = trunc i32 %2012 to i8
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2013, i8* %2014, align 1, !tbaa !2449
  %2015 = lshr i32 %1990, 31
  %2016 = xor i32 %2012, %2015
  %2017 = add nuw nsw i32 %2016, %2015
  %2018 = icmp eq i32 %2017, 2
  %2019 = zext i1 %2018 to i8
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2019, i8* %2020, align 1, !tbaa !2450
  %2021 = load i64, i64* %RDX
  %2022 = load i32, i32* %ESI
  %2023 = zext i32 %2022 to i64
  %2024 = load i64, i64* %PC
  %2025 = add i64 %2024, 3
  store i64 %2025, i64* %PC
  %2026 = shl i64 %2021, 32
  %2027 = ashr exact i64 %2026, 32
  %2028 = shl i64 %2023, 32
  %2029 = ashr exact i64 %2028, 32
  %2030 = mul nsw i64 %2029, %2027
  %2031 = trunc i64 %2030 to i32
  %2032 = and i64 %2030, 4294967295
  store i64 %2032, i64* %RDX, align 8, !tbaa !2428
  %2033 = shl i64 %2030, 32
  %2034 = ashr exact i64 %2033, 32
  %2035 = icmp ne i64 %2034, %2030
  %2036 = zext i1 %2035 to i8
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2036, i8* %2037, align 1, !tbaa !2432
  %2038 = and i32 %2031, 255
  %2039 = call i32 @llvm.ctpop.i32(i32 %2038) #16
  %2040 = trunc i32 %2039 to i8
  %2041 = and i8 %2040, 1
  %2042 = xor i8 %2041, 1
  %2043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2042, i8* %2043, align 1, !tbaa !2446
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2044, align 1, !tbaa !2447
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2045, align 1, !tbaa !2448
  %2046 = lshr i32 %2031, 31
  %2047 = trunc i32 %2046 to i8
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2047, i8* %2048, align 1, !tbaa !2449
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2036, i8* %2049, align 1, !tbaa !2450
  %2050 = load i64, i64* %RDX
  %2051 = load i64, i64* %RBP
  %2052 = sub i64 %2051, 48
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 3
  store i64 %2054, i64* %PC
  %2055 = trunc i64 %2050 to i32
  %2056 = inttoptr i64 %2052 to i32*
  %2057 = load i32, i32* %2056
  %2058 = add i32 %2057, %2055
  %2059 = zext i32 %2058 to i64
  store i64 %2059, i64* %RDX, align 8, !tbaa !2428
  %2060 = icmp ult i32 %2058, %2055
  %2061 = icmp ult i32 %2058, %2057
  %2062 = or i1 %2060, %2061
  %2063 = zext i1 %2062 to i8
  %2064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2063, i8* %2064, align 1, !tbaa !2432
  %2065 = and i32 %2058, 255
  %2066 = call i32 @llvm.ctpop.i32(i32 %2065) #16
  %2067 = trunc i32 %2066 to i8
  %2068 = and i8 %2067, 1
  %2069 = xor i8 %2068, 1
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2069, i8* %2070, align 1, !tbaa !2446
  %2071 = xor i32 %2057, %2055
  %2072 = xor i32 %2071, %2058
  %2073 = lshr i32 %2072, 4
  %2074 = trunc i32 %2073 to i8
  %2075 = and i8 %2074, 1
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2075, i8* %2076, align 1, !tbaa !2447
  %2077 = icmp eq i32 %2058, 0
  %2078 = zext i1 %2077 to i8
  %2079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2078, i8* %2079, align 1, !tbaa !2448
  %2080 = lshr i32 %2058, 31
  %2081 = trunc i32 %2080 to i8
  %2082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2081, i8* %2082, align 1, !tbaa !2449
  %2083 = lshr i32 %2055, 31
  %2084 = lshr i32 %2057, 31
  %2085 = xor i32 %2080, %2083
  %2086 = xor i32 %2080, %2084
  %2087 = add nuw nsw i32 %2085, %2086
  %2088 = icmp eq i32 %2087, 2
  %2089 = zext i1 %2088 to i8
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2089, i8* %2090, align 1, !tbaa !2450
  %2091 = load i32, i32* %EDX
  %2092 = zext i32 %2091 to i64
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 3
  store i64 %2094, i64* %PC
  %2095 = shl i64 %2092, 32
  %2096 = ashr exact i64 %2095, 32
  store i64 %2096, i64* %RCX, align 8, !tbaa !2428
  %2097 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2098 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2099 = load i64, i64* %RAX
  %2100 = load i64, i64* %RCX
  %2101 = mul i64 %2100, 4
  %2102 = add i64 %2101, %2099
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 5
  store i64 %2104, i64* %PC
  %2105 = bitcast i8* %2098 to <2 x float>*
  %2106 = load <2 x float>, <2 x float>* %2105, align 1
  %2107 = getelementptr inbounds i8, i8* %2098, i64 8
  %2108 = bitcast i8* %2107 to <2 x i32>*
  %2109 = load <2 x i32>, <2 x i32>* %2108, align 1
  %2110 = inttoptr i64 %2102 to float*
  %2111 = load float, float* %2110
  %2112 = extractelement <2 x float> %2106, i32 0
  %2113 = fmul float %2112, %2111
  %2114 = bitcast i8* %2097 to float*
  store float %2113, float* %2114, align 1, !tbaa !2452
  %2115 = bitcast <2 x float> %2106 to <2 x i32>
  %2116 = extractelement <2 x i32> %2115, i32 1
  %2117 = getelementptr inbounds i8, i8* %2097, i64 4
  %2118 = bitcast i8* %2117 to i32*
  store i32 %2116, i32* %2118, align 1, !tbaa !2452
  %2119 = extractelement <2 x i32> %2109, i32 0
  %2120 = getelementptr inbounds i8, i8* %2097, i64 8
  %2121 = bitcast i8* %2120 to i32*
  store i32 %2119, i32* %2121, align 1, !tbaa !2452
  %2122 = extractelement <2 x i32> %2109, i32 1
  %2123 = getelementptr inbounds i8, i8* %2097, i64 12
  %2124 = bitcast i8* %2123 to i32*
  store i32 %2122, i32* %2124, align 1, !tbaa !2452
  %2125 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2127 = bitcast %union.vec128_t* %XMM1 to i8*
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 4
  store i64 %2129, i64* %PC
  %2130 = bitcast i8* %2126 to <2 x float>*
  %2131 = load <2 x float>, <2 x float>* %2130, align 1
  %2132 = getelementptr inbounds i8, i8* %2126, i64 8
  %2133 = bitcast i8* %2132 to <2 x i32>*
  %2134 = load <2 x i32>, <2 x i32>* %2133, align 1
  %2135 = bitcast i8* %2127 to <2 x float>*
  %2136 = load <2 x float>, <2 x float>* %2135, align 1
  %2137 = extractelement <2 x float> %2131, i32 0
  %2138 = extractelement <2 x float> %2136, i32 0
  %2139 = fadd float %2137, %2138
  %2140 = bitcast i8* %2125 to float*
  store float %2139, float* %2140, align 1, !tbaa !2452
  %2141 = bitcast <2 x float> %2131 to <2 x i32>
  %2142 = extractelement <2 x i32> %2141, i32 1
  %2143 = getelementptr inbounds i8, i8* %2125, i64 4
  %2144 = bitcast i8* %2143 to i32*
  store i32 %2142, i32* %2144, align 1, !tbaa !2452
  %2145 = extractelement <2 x i32> %2134, i32 0
  %2146 = getelementptr inbounds i8, i8* %2125, i64 8
  %2147 = bitcast i8* %2146 to i32*
  store i32 %2145, i32* %2147, align 1, !tbaa !2452
  %2148 = extractelement <2 x i32> %2134, i32 1
  %2149 = getelementptr inbounds i8, i8* %2125, i64 12
  %2150 = bitcast i8* %2149 to i32*
  store i32 %2148, i32* %2150, align 1, !tbaa !2452
  %2151 = load i64, i64* %RBP
  %2152 = sub i64 %2151, 32
  %2153 = load i64, i64* %PC
  %2154 = add i64 %2153, 4
  store i64 %2154, i64* %PC
  %2155 = inttoptr i64 %2152 to i64*
  %2156 = load i64, i64* %2155
  store i64 %2156, i64* %RAX, align 8, !tbaa !2428
  %2157 = load i64, i64* %RBP
  %2158 = sub i64 %2157, 44
  %2159 = load i64, i64* %PC
  %2160 = add i64 %2159, 3
  store i64 %2160, i64* %PC
  %2161 = inttoptr i64 %2158 to i32*
  %2162 = load i32, i32* %2161
  %2163 = zext i32 %2162 to i64
  store i64 %2163, i64* %RDX, align 8, !tbaa !2428
  %2164 = load i64, i64* %RDX
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 3
  store i64 %2166, i64* %PC
  %2167 = trunc i64 %2164 to i32
  %2168 = sub i32 %2167, 8
  %2169 = zext i32 %2168 to i64
  store i64 %2169, i64* %RDX, align 8, !tbaa !2428
  %2170 = icmp ult i32 %2167, 8
  %2171 = zext i1 %2170 to i8
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2171, i8* %2172, align 1, !tbaa !2432
  %2173 = and i32 %2168, 255
  %2174 = call i32 @llvm.ctpop.i32(i32 %2173) #16
  %2175 = trunc i32 %2174 to i8
  %2176 = and i8 %2175, 1
  %2177 = xor i8 %2176, 1
  %2178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2177, i8* %2178, align 1, !tbaa !2446
  %2179 = xor i64 8, %2164
  %2180 = trunc i64 %2179 to i32
  %2181 = xor i32 %2180, %2168
  %2182 = lshr i32 %2181, 4
  %2183 = trunc i32 %2182 to i8
  %2184 = and i8 %2183, 1
  %2185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2184, i8* %2185, align 1, !tbaa !2447
  %2186 = icmp eq i32 %2168, 0
  %2187 = zext i1 %2186 to i8
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2187, i8* %2188, align 1, !tbaa !2448
  %2189 = lshr i32 %2168, 31
  %2190 = trunc i32 %2189 to i8
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2190, i8* %2191, align 1, !tbaa !2449
  %2192 = lshr i32 %2167, 31
  %2193 = xor i32 %2189, %2192
  %2194 = add nuw nsw i32 %2193, %2192
  %2195 = icmp eq i32 %2194, 2
  %2196 = zext i1 %2195 to i8
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2196, i8* %2197, align 1, !tbaa !2450
  %2198 = load i32, i32* %EDX
  %2199 = zext i32 %2198 to i64
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 3
  store i64 %2201, i64* %PC
  %2202 = shl i64 %2199, 32
  %2203 = ashr exact i64 %2202, 32
  store i64 %2203, i64* %RCX, align 8, !tbaa !2428
  %2204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2205 = load i64, i64* %RAX
  %2206 = load i64, i64* %RCX
  %2207 = mul i64 %2206, 4
  %2208 = add i64 %2207, %2205
  %2209 = load i64, i64* %PC
  %2210 = add i64 %2209, 5
  store i64 %2210, i64* %PC
  %2211 = inttoptr i64 %2208 to float*
  %2212 = load float, float* %2211
  %2213 = bitcast i8* %2204 to float*
  store float %2212, float* %2213, align 1, !tbaa !2452
  %2214 = getelementptr inbounds i8, i8* %2204, i64 4
  %2215 = bitcast i8* %2214 to float*
  store float 0.000000e+00, float* %2215, align 1, !tbaa !2452
  %2216 = getelementptr inbounds i8, i8* %2204, i64 8
  %2217 = bitcast i8* %2216 to float*
  store float 0.000000e+00, float* %2217, align 1, !tbaa !2452
  %2218 = getelementptr inbounds i8, i8* %2204, i64 12
  %2219 = bitcast i8* %2218 to float*
  store float 0.000000e+00, float* %2219, align 1, !tbaa !2452
  %2220 = load i64, i64* %RBP
  %2221 = sub i64 %2220, 40
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 4
  store i64 %2223, i64* %PC
  %2224 = inttoptr i64 %2221 to i64*
  %2225 = load i64, i64* %2224
  store i64 %2225, i64* %RAX, align 8, !tbaa !2428
  %2226 = load i64, i64* %RBP
  %2227 = sub i64 %2226, 24
  %2228 = load i64, i64* %PC
  %2229 = add i64 %2228, 3
  store i64 %2229, i64* %PC
  %2230 = inttoptr i64 %2227 to i32*
  %2231 = load i32, i32* %2230
  %2232 = zext i32 %2231 to i64
  store i64 %2232, i64* %RDX, align 8, !tbaa !2428
  %2233 = load i64, i64* %RBP
  %2234 = sub i64 %2233, 44
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 3
  store i64 %2236, i64* %PC
  %2237 = inttoptr i64 %2234 to i32*
  %2238 = load i32, i32* %2237
  %2239 = zext i32 %2238 to i64
  store i64 %2239, i64* %RSI, align 8, !tbaa !2428
  %2240 = load i64, i64* %RSI
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 3
  store i64 %2242, i64* %PC
  %2243 = trunc i64 %2240 to i32
  %2244 = sub i32 %2243, 8
  %2245 = zext i32 %2244 to i64
  store i64 %2245, i64* %RSI, align 8, !tbaa !2428
  %2246 = icmp ult i32 %2243, 8
  %2247 = zext i1 %2246 to i8
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2247, i8* %2248, align 1, !tbaa !2432
  %2249 = and i32 %2244, 255
  %2250 = call i32 @llvm.ctpop.i32(i32 %2249) #16
  %2251 = trunc i32 %2250 to i8
  %2252 = and i8 %2251, 1
  %2253 = xor i8 %2252, 1
  %2254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2253, i8* %2254, align 1, !tbaa !2446
  %2255 = xor i64 8, %2240
  %2256 = trunc i64 %2255 to i32
  %2257 = xor i32 %2256, %2244
  %2258 = lshr i32 %2257, 4
  %2259 = trunc i32 %2258 to i8
  %2260 = and i8 %2259, 1
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2260, i8* %2261, align 1, !tbaa !2447
  %2262 = icmp eq i32 %2244, 0
  %2263 = zext i1 %2262 to i8
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2263, i8* %2264, align 1, !tbaa !2448
  %2265 = lshr i32 %2244, 31
  %2266 = trunc i32 %2265 to i8
  %2267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2266, i8* %2267, align 1, !tbaa !2449
  %2268 = lshr i32 %2243, 31
  %2269 = xor i32 %2265, %2268
  %2270 = add nuw nsw i32 %2269, %2268
  %2271 = icmp eq i32 %2270, 2
  %2272 = zext i1 %2271 to i8
  %2273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2272, i8* %2273, align 1, !tbaa !2450
  %2274 = load i64, i64* %RDX
  %2275 = load i32, i32* %ESI
  %2276 = zext i32 %2275 to i64
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 3
  store i64 %2278, i64* %PC
  %2279 = shl i64 %2274, 32
  %2280 = ashr exact i64 %2279, 32
  %2281 = shl i64 %2276, 32
  %2282 = ashr exact i64 %2281, 32
  %2283 = mul nsw i64 %2282, %2280
  %2284 = trunc i64 %2283 to i32
  %2285 = and i64 %2283, 4294967295
  store i64 %2285, i64* %RDX, align 8, !tbaa !2428
  %2286 = shl i64 %2283, 32
  %2287 = ashr exact i64 %2286, 32
  %2288 = icmp ne i64 %2287, %2283
  %2289 = zext i1 %2288 to i8
  %2290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2289, i8* %2290, align 1, !tbaa !2432
  %2291 = and i32 %2284, 255
  %2292 = call i32 @llvm.ctpop.i32(i32 %2291) #16
  %2293 = trunc i32 %2292 to i8
  %2294 = and i8 %2293, 1
  %2295 = xor i8 %2294, 1
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2295, i8* %2296, align 1, !tbaa !2446
  %2297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2297, align 1, !tbaa !2447
  %2298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2298, align 1, !tbaa !2448
  %2299 = lshr i32 %2284, 31
  %2300 = trunc i32 %2299 to i8
  %2301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2300, i8* %2301, align 1, !tbaa !2449
  %2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2289, i8* %2302, align 1, !tbaa !2450
  %2303 = load i64, i64* %RDX
  %2304 = load i64, i64* %RBP
  %2305 = sub i64 %2304, 48
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 3
  store i64 %2307, i64* %PC
  %2308 = trunc i64 %2303 to i32
  %2309 = inttoptr i64 %2305 to i32*
  %2310 = load i32, i32* %2309
  %2311 = add i32 %2310, %2308
  %2312 = zext i32 %2311 to i64
  store i64 %2312, i64* %RDX, align 8, !tbaa !2428
  %2313 = icmp ult i32 %2311, %2308
  %2314 = icmp ult i32 %2311, %2310
  %2315 = or i1 %2313, %2314
  %2316 = zext i1 %2315 to i8
  %2317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2316, i8* %2317, align 1, !tbaa !2432
  %2318 = and i32 %2311, 255
  %2319 = call i32 @llvm.ctpop.i32(i32 %2318) #16
  %2320 = trunc i32 %2319 to i8
  %2321 = and i8 %2320, 1
  %2322 = xor i8 %2321, 1
  %2323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2322, i8* %2323, align 1, !tbaa !2446
  %2324 = xor i32 %2310, %2308
  %2325 = xor i32 %2324, %2311
  %2326 = lshr i32 %2325, 4
  %2327 = trunc i32 %2326 to i8
  %2328 = and i8 %2327, 1
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2328, i8* %2329, align 1, !tbaa !2447
  %2330 = icmp eq i32 %2311, 0
  %2331 = zext i1 %2330 to i8
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2331, i8* %2332, align 1, !tbaa !2448
  %2333 = lshr i32 %2311, 31
  %2334 = trunc i32 %2333 to i8
  %2335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2334, i8* %2335, align 1, !tbaa !2449
  %2336 = lshr i32 %2308, 31
  %2337 = lshr i32 %2310, 31
  %2338 = xor i32 %2333, %2336
  %2339 = xor i32 %2333, %2337
  %2340 = add nuw nsw i32 %2338, %2339
  %2341 = icmp eq i32 %2340, 2
  %2342 = zext i1 %2341 to i8
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2342, i8* %2343, align 1, !tbaa !2450
  %2344 = load i32, i32* %EDX
  %2345 = zext i32 %2344 to i64
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 3
  store i64 %2347, i64* %PC
  %2348 = shl i64 %2345, 32
  %2349 = ashr exact i64 %2348, 32
  store i64 %2349, i64* %RCX, align 8, !tbaa !2428
  %2350 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2351 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2352 = load i64, i64* %RAX
  %2353 = load i64, i64* %RCX
  %2354 = mul i64 %2353, 4
  %2355 = add i64 %2354, %2352
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 5
  store i64 %2357, i64* %PC
  %2358 = bitcast i8* %2351 to <2 x float>*
  %2359 = load <2 x float>, <2 x float>* %2358, align 1
  %2360 = getelementptr inbounds i8, i8* %2351, i64 8
  %2361 = bitcast i8* %2360 to <2 x i32>*
  %2362 = load <2 x i32>, <2 x i32>* %2361, align 1
  %2363 = inttoptr i64 %2355 to float*
  %2364 = load float, float* %2363
  %2365 = extractelement <2 x float> %2359, i32 0
  %2366 = fmul float %2365, %2364
  %2367 = bitcast i8* %2350 to float*
  store float %2366, float* %2367, align 1, !tbaa !2452
  %2368 = bitcast <2 x float> %2359 to <2 x i32>
  %2369 = extractelement <2 x i32> %2368, i32 1
  %2370 = getelementptr inbounds i8, i8* %2350, i64 4
  %2371 = bitcast i8* %2370 to i32*
  store i32 %2369, i32* %2371, align 1, !tbaa !2452
  %2372 = extractelement <2 x i32> %2362, i32 0
  %2373 = getelementptr inbounds i8, i8* %2350, i64 8
  %2374 = bitcast i8* %2373 to i32*
  store i32 %2372, i32* %2374, align 1, !tbaa !2452
  %2375 = extractelement <2 x i32> %2362, i32 1
  %2376 = getelementptr inbounds i8, i8* %2350, i64 12
  %2377 = bitcast i8* %2376 to i32*
  store i32 %2375, i32* %2377, align 1, !tbaa !2452
  %2378 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2379 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2380 = bitcast %union.vec128_t* %XMM1 to i8*
  %2381 = load i64, i64* %PC
  %2382 = add i64 %2381, 4
  store i64 %2382, i64* %PC
  %2383 = bitcast i8* %2379 to <2 x float>*
  %2384 = load <2 x float>, <2 x float>* %2383, align 1
  %2385 = getelementptr inbounds i8, i8* %2379, i64 8
  %2386 = bitcast i8* %2385 to <2 x i32>*
  %2387 = load <2 x i32>, <2 x i32>* %2386, align 1
  %2388 = bitcast i8* %2380 to <2 x float>*
  %2389 = load <2 x float>, <2 x float>* %2388, align 1
  %2390 = extractelement <2 x float> %2384, i32 0
  %2391 = extractelement <2 x float> %2389, i32 0
  %2392 = fadd float %2390, %2391
  %2393 = bitcast i8* %2378 to float*
  store float %2392, float* %2393, align 1, !tbaa !2452
  %2394 = bitcast <2 x float> %2384 to <2 x i32>
  %2395 = extractelement <2 x i32> %2394, i32 1
  %2396 = getelementptr inbounds i8, i8* %2378, i64 4
  %2397 = bitcast i8* %2396 to i32*
  store i32 %2395, i32* %2397, align 1, !tbaa !2452
  %2398 = extractelement <2 x i32> %2387, i32 0
  %2399 = getelementptr inbounds i8, i8* %2378, i64 8
  %2400 = bitcast i8* %2399 to i32*
  store i32 %2398, i32* %2400, align 1, !tbaa !2452
  %2401 = extractelement <2 x i32> %2387, i32 1
  %2402 = getelementptr inbounds i8, i8* %2378, i64 12
  %2403 = bitcast i8* %2402 to i32*
  store i32 %2401, i32* %2403, align 1, !tbaa !2452
  %2404 = load i64, i64* %RBP
  %2405 = sub i64 %2404, 32
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 4
  store i64 %2407, i64* %PC
  %2408 = inttoptr i64 %2405 to i64*
  %2409 = load i64, i64* %2408
  store i64 %2409, i64* %RAX, align 8, !tbaa !2428
  %2410 = load i64, i64* %RBP
  %2411 = sub i64 %2410, 44
  %2412 = load i64, i64* %PC
  %2413 = add i64 %2412, 3
  store i64 %2413, i64* %PC
  %2414 = inttoptr i64 %2411 to i32*
  %2415 = load i32, i32* %2414
  %2416 = zext i32 %2415 to i64
  store i64 %2416, i64* %RDX, align 8, !tbaa !2428
  %2417 = load i64, i64* %RDX
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 3
  store i64 %2419, i64* %PC
  %2420 = trunc i64 %2417 to i32
  %2421 = sub i32 %2420, 7
  %2422 = zext i32 %2421 to i64
  store i64 %2422, i64* %RDX, align 8, !tbaa !2428
  %2423 = icmp ult i32 %2420, 7
  %2424 = zext i1 %2423 to i8
  %2425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2424, i8* %2425, align 1, !tbaa !2432
  %2426 = and i32 %2421, 255
  %2427 = call i32 @llvm.ctpop.i32(i32 %2426) #16
  %2428 = trunc i32 %2427 to i8
  %2429 = and i8 %2428, 1
  %2430 = xor i8 %2429, 1
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2430, i8* %2431, align 1, !tbaa !2446
  %2432 = xor i64 7, %2417
  %2433 = trunc i64 %2432 to i32
  %2434 = xor i32 %2433, %2421
  %2435 = lshr i32 %2434, 4
  %2436 = trunc i32 %2435 to i8
  %2437 = and i8 %2436, 1
  %2438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2437, i8* %2438, align 1, !tbaa !2447
  %2439 = icmp eq i32 %2421, 0
  %2440 = zext i1 %2439 to i8
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2440, i8* %2441, align 1, !tbaa !2448
  %2442 = lshr i32 %2421, 31
  %2443 = trunc i32 %2442 to i8
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2443, i8* %2444, align 1, !tbaa !2449
  %2445 = lshr i32 %2420, 31
  %2446 = xor i32 %2442, %2445
  %2447 = add nuw nsw i32 %2446, %2445
  %2448 = icmp eq i32 %2447, 2
  %2449 = zext i1 %2448 to i8
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2449, i8* %2450, align 1, !tbaa !2450
  %2451 = load i32, i32* %EDX
  %2452 = zext i32 %2451 to i64
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 3
  store i64 %2454, i64* %PC
  %2455 = shl i64 %2452, 32
  %2456 = ashr exact i64 %2455, 32
  store i64 %2456, i64* %RCX, align 8, !tbaa !2428
  %2457 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2458 = load i64, i64* %RAX
  %2459 = load i64, i64* %RCX
  %2460 = mul i64 %2459, 4
  %2461 = add i64 %2460, %2458
  %2462 = load i64, i64* %PC
  %2463 = add i64 %2462, 5
  store i64 %2463, i64* %PC
  %2464 = inttoptr i64 %2461 to float*
  %2465 = load float, float* %2464
  %2466 = bitcast i8* %2457 to float*
  store float %2465, float* %2466, align 1, !tbaa !2452
  %2467 = getelementptr inbounds i8, i8* %2457, i64 4
  %2468 = bitcast i8* %2467 to float*
  store float 0.000000e+00, float* %2468, align 1, !tbaa !2452
  %2469 = getelementptr inbounds i8, i8* %2457, i64 8
  %2470 = bitcast i8* %2469 to float*
  store float 0.000000e+00, float* %2470, align 1, !tbaa !2452
  %2471 = getelementptr inbounds i8, i8* %2457, i64 12
  %2472 = bitcast i8* %2471 to float*
  store float 0.000000e+00, float* %2472, align 1, !tbaa !2452
  %2473 = load i64, i64* %RBP
  %2474 = sub i64 %2473, 40
  %2475 = load i64, i64* %PC
  %2476 = add i64 %2475, 4
  store i64 %2476, i64* %PC
  %2477 = inttoptr i64 %2474 to i64*
  %2478 = load i64, i64* %2477
  store i64 %2478, i64* %RAX, align 8, !tbaa !2428
  %2479 = load i64, i64* %RBP
  %2480 = sub i64 %2479, 24
  %2481 = load i64, i64* %PC
  %2482 = add i64 %2481, 3
  store i64 %2482, i64* %PC
  %2483 = inttoptr i64 %2480 to i32*
  %2484 = load i32, i32* %2483
  %2485 = zext i32 %2484 to i64
  store i64 %2485, i64* %RDX, align 8, !tbaa !2428
  %2486 = load i64, i64* %RBP
  %2487 = sub i64 %2486, 44
  %2488 = load i64, i64* %PC
  %2489 = add i64 %2488, 3
  store i64 %2489, i64* %PC
  %2490 = inttoptr i64 %2487 to i32*
  %2491 = load i32, i32* %2490
  %2492 = zext i32 %2491 to i64
  store i64 %2492, i64* %RSI, align 8, !tbaa !2428
  %2493 = load i64, i64* %RSI
  %2494 = load i64, i64* %PC
  %2495 = add i64 %2494, 3
  store i64 %2495, i64* %PC
  %2496 = trunc i64 %2493 to i32
  %2497 = sub i32 %2496, 7
  %2498 = zext i32 %2497 to i64
  store i64 %2498, i64* %RSI, align 8, !tbaa !2428
  %2499 = icmp ult i32 %2496, 7
  %2500 = zext i1 %2499 to i8
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2500, i8* %2501, align 1, !tbaa !2432
  %2502 = and i32 %2497, 255
  %2503 = call i32 @llvm.ctpop.i32(i32 %2502) #16
  %2504 = trunc i32 %2503 to i8
  %2505 = and i8 %2504, 1
  %2506 = xor i8 %2505, 1
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2506, i8* %2507, align 1, !tbaa !2446
  %2508 = xor i64 7, %2493
  %2509 = trunc i64 %2508 to i32
  %2510 = xor i32 %2509, %2497
  %2511 = lshr i32 %2510, 4
  %2512 = trunc i32 %2511 to i8
  %2513 = and i8 %2512, 1
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2513, i8* %2514, align 1, !tbaa !2447
  %2515 = icmp eq i32 %2497, 0
  %2516 = zext i1 %2515 to i8
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2516, i8* %2517, align 1, !tbaa !2448
  %2518 = lshr i32 %2497, 31
  %2519 = trunc i32 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2519, i8* %2520, align 1, !tbaa !2449
  %2521 = lshr i32 %2496, 31
  %2522 = xor i32 %2518, %2521
  %2523 = add nuw nsw i32 %2522, %2521
  %2524 = icmp eq i32 %2523, 2
  %2525 = zext i1 %2524 to i8
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2525, i8* %2526, align 1, !tbaa !2450
  %2527 = load i64, i64* %RDX
  %2528 = load i32, i32* %ESI
  %2529 = zext i32 %2528 to i64
  %2530 = load i64, i64* %PC
  %2531 = add i64 %2530, 3
  store i64 %2531, i64* %PC
  %2532 = shl i64 %2527, 32
  %2533 = ashr exact i64 %2532, 32
  %2534 = shl i64 %2529, 32
  %2535 = ashr exact i64 %2534, 32
  %2536 = mul nsw i64 %2535, %2533
  %2537 = trunc i64 %2536 to i32
  %2538 = and i64 %2536, 4294967295
  store i64 %2538, i64* %RDX, align 8, !tbaa !2428
  %2539 = shl i64 %2536, 32
  %2540 = ashr exact i64 %2539, 32
  %2541 = icmp ne i64 %2540, %2536
  %2542 = zext i1 %2541 to i8
  %2543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2542, i8* %2543, align 1, !tbaa !2432
  %2544 = and i32 %2537, 255
  %2545 = call i32 @llvm.ctpop.i32(i32 %2544) #16
  %2546 = trunc i32 %2545 to i8
  %2547 = and i8 %2546, 1
  %2548 = xor i8 %2547, 1
  %2549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2548, i8* %2549, align 1, !tbaa !2446
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2550, align 1, !tbaa !2447
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2551, align 1, !tbaa !2448
  %2552 = lshr i32 %2537, 31
  %2553 = trunc i32 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2553, i8* %2554, align 1, !tbaa !2449
  %2555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2542, i8* %2555, align 1, !tbaa !2450
  %2556 = load i64, i64* %RDX
  %2557 = load i64, i64* %RBP
  %2558 = sub i64 %2557, 48
  %2559 = load i64, i64* %PC
  %2560 = add i64 %2559, 3
  store i64 %2560, i64* %PC
  %2561 = trunc i64 %2556 to i32
  %2562 = inttoptr i64 %2558 to i32*
  %2563 = load i32, i32* %2562
  %2564 = add i32 %2563, %2561
  %2565 = zext i32 %2564 to i64
  store i64 %2565, i64* %RDX, align 8, !tbaa !2428
  %2566 = icmp ult i32 %2564, %2561
  %2567 = icmp ult i32 %2564, %2563
  %2568 = or i1 %2566, %2567
  %2569 = zext i1 %2568 to i8
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2569, i8* %2570, align 1, !tbaa !2432
  %2571 = and i32 %2564, 255
  %2572 = call i32 @llvm.ctpop.i32(i32 %2571) #16
  %2573 = trunc i32 %2572 to i8
  %2574 = and i8 %2573, 1
  %2575 = xor i8 %2574, 1
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2575, i8* %2576, align 1, !tbaa !2446
  %2577 = xor i32 %2563, %2561
  %2578 = xor i32 %2577, %2564
  %2579 = lshr i32 %2578, 4
  %2580 = trunc i32 %2579 to i8
  %2581 = and i8 %2580, 1
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2581, i8* %2582, align 1, !tbaa !2447
  %2583 = icmp eq i32 %2564, 0
  %2584 = zext i1 %2583 to i8
  %2585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2584, i8* %2585, align 1, !tbaa !2448
  %2586 = lshr i32 %2564, 31
  %2587 = trunc i32 %2586 to i8
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2587, i8* %2588, align 1, !tbaa !2449
  %2589 = lshr i32 %2561, 31
  %2590 = lshr i32 %2563, 31
  %2591 = xor i32 %2586, %2589
  %2592 = xor i32 %2586, %2590
  %2593 = add nuw nsw i32 %2591, %2592
  %2594 = icmp eq i32 %2593, 2
  %2595 = zext i1 %2594 to i8
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2595, i8* %2596, align 1, !tbaa !2450
  %2597 = load i32, i32* %EDX
  %2598 = zext i32 %2597 to i64
  %2599 = load i64, i64* %PC
  %2600 = add i64 %2599, 3
  store i64 %2600, i64* %PC
  %2601 = shl i64 %2598, 32
  %2602 = ashr exact i64 %2601, 32
  store i64 %2602, i64* %RCX, align 8, !tbaa !2428
  %2603 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2604 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2605 = load i64, i64* %RAX
  %2606 = load i64, i64* %RCX
  %2607 = mul i64 %2606, 4
  %2608 = add i64 %2607, %2605
  %2609 = load i64, i64* %PC
  %2610 = add i64 %2609, 5
  store i64 %2610, i64* %PC
  %2611 = bitcast i8* %2604 to <2 x float>*
  %2612 = load <2 x float>, <2 x float>* %2611, align 1
  %2613 = getelementptr inbounds i8, i8* %2604, i64 8
  %2614 = bitcast i8* %2613 to <2 x i32>*
  %2615 = load <2 x i32>, <2 x i32>* %2614, align 1
  %2616 = inttoptr i64 %2608 to float*
  %2617 = load float, float* %2616
  %2618 = extractelement <2 x float> %2612, i32 0
  %2619 = fmul float %2618, %2617
  %2620 = bitcast i8* %2603 to float*
  store float %2619, float* %2620, align 1, !tbaa !2452
  %2621 = bitcast <2 x float> %2612 to <2 x i32>
  %2622 = extractelement <2 x i32> %2621, i32 1
  %2623 = getelementptr inbounds i8, i8* %2603, i64 4
  %2624 = bitcast i8* %2623 to i32*
  store i32 %2622, i32* %2624, align 1, !tbaa !2452
  %2625 = extractelement <2 x i32> %2615, i32 0
  %2626 = getelementptr inbounds i8, i8* %2603, i64 8
  %2627 = bitcast i8* %2626 to i32*
  store i32 %2625, i32* %2627, align 1, !tbaa !2452
  %2628 = extractelement <2 x i32> %2615, i32 1
  %2629 = getelementptr inbounds i8, i8* %2603, i64 12
  %2630 = bitcast i8* %2629 to i32*
  store i32 %2628, i32* %2630, align 1, !tbaa !2452
  %2631 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2632 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2633 = bitcast %union.vec128_t* %XMM1 to i8*
  %2634 = load i64, i64* %PC
  %2635 = add i64 %2634, 4
  store i64 %2635, i64* %PC
  %2636 = bitcast i8* %2632 to <2 x float>*
  %2637 = load <2 x float>, <2 x float>* %2636, align 1
  %2638 = getelementptr inbounds i8, i8* %2632, i64 8
  %2639 = bitcast i8* %2638 to <2 x i32>*
  %2640 = load <2 x i32>, <2 x i32>* %2639, align 1
  %2641 = bitcast i8* %2633 to <2 x float>*
  %2642 = load <2 x float>, <2 x float>* %2641, align 1
  %2643 = extractelement <2 x float> %2637, i32 0
  %2644 = extractelement <2 x float> %2642, i32 0
  %2645 = fadd float %2643, %2644
  %2646 = bitcast i8* %2631 to float*
  store float %2645, float* %2646, align 1, !tbaa !2452
  %2647 = bitcast <2 x float> %2637 to <2 x i32>
  %2648 = extractelement <2 x i32> %2647, i32 1
  %2649 = getelementptr inbounds i8, i8* %2631, i64 4
  %2650 = bitcast i8* %2649 to i32*
  store i32 %2648, i32* %2650, align 1, !tbaa !2452
  %2651 = extractelement <2 x i32> %2640, i32 0
  %2652 = getelementptr inbounds i8, i8* %2631, i64 8
  %2653 = bitcast i8* %2652 to i32*
  store i32 %2651, i32* %2653, align 1, !tbaa !2452
  %2654 = extractelement <2 x i32> %2640, i32 1
  %2655 = getelementptr inbounds i8, i8* %2631, i64 12
  %2656 = bitcast i8* %2655 to i32*
  store i32 %2654, i32* %2656, align 1, !tbaa !2452
  %2657 = load i64, i64* %RBP
  %2658 = sub i64 %2657, 32
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 4
  store i64 %2660, i64* %PC
  %2661 = inttoptr i64 %2658 to i64*
  %2662 = load i64, i64* %2661
  store i64 %2662, i64* %RAX, align 8, !tbaa !2428
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 44
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 3
  store i64 %2666, i64* %PC
  %2667 = inttoptr i64 %2664 to i32*
  %2668 = load i32, i32* %2667
  %2669 = zext i32 %2668 to i64
  store i64 %2669, i64* %RDX, align 8, !tbaa !2428
  %2670 = load i64, i64* %RDX
  %2671 = load i64, i64* %PC
  %2672 = add i64 %2671, 3
  store i64 %2672, i64* %PC
  %2673 = trunc i64 %2670 to i32
  %2674 = sub i32 %2673, 6
  %2675 = zext i32 %2674 to i64
  store i64 %2675, i64* %RDX, align 8, !tbaa !2428
  %2676 = icmp ult i32 %2673, 6
  %2677 = zext i1 %2676 to i8
  %2678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2677, i8* %2678, align 1, !tbaa !2432
  %2679 = and i32 %2674, 255
  %2680 = call i32 @llvm.ctpop.i32(i32 %2679) #16
  %2681 = trunc i32 %2680 to i8
  %2682 = and i8 %2681, 1
  %2683 = xor i8 %2682, 1
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2683, i8* %2684, align 1, !tbaa !2446
  %2685 = xor i64 6, %2670
  %2686 = trunc i64 %2685 to i32
  %2687 = xor i32 %2686, %2674
  %2688 = lshr i32 %2687, 4
  %2689 = trunc i32 %2688 to i8
  %2690 = and i8 %2689, 1
  %2691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2690, i8* %2691, align 1, !tbaa !2447
  %2692 = icmp eq i32 %2674, 0
  %2693 = zext i1 %2692 to i8
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2693, i8* %2694, align 1, !tbaa !2448
  %2695 = lshr i32 %2674, 31
  %2696 = trunc i32 %2695 to i8
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2696, i8* %2697, align 1, !tbaa !2449
  %2698 = lshr i32 %2673, 31
  %2699 = xor i32 %2695, %2698
  %2700 = add nuw nsw i32 %2699, %2698
  %2701 = icmp eq i32 %2700, 2
  %2702 = zext i1 %2701 to i8
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2702, i8* %2703, align 1, !tbaa !2450
  %2704 = load i32, i32* %EDX
  %2705 = zext i32 %2704 to i64
  %2706 = load i64, i64* %PC
  %2707 = add i64 %2706, 3
  store i64 %2707, i64* %PC
  %2708 = shl i64 %2705, 32
  %2709 = ashr exact i64 %2708, 32
  store i64 %2709, i64* %RCX, align 8, !tbaa !2428
  %2710 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2711 = load i64, i64* %RAX
  %2712 = load i64, i64* %RCX
  %2713 = mul i64 %2712, 4
  %2714 = add i64 %2713, %2711
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 5
  store i64 %2716, i64* %PC
  %2717 = inttoptr i64 %2714 to float*
  %2718 = load float, float* %2717
  %2719 = bitcast i8* %2710 to float*
  store float %2718, float* %2719, align 1, !tbaa !2452
  %2720 = getelementptr inbounds i8, i8* %2710, i64 4
  %2721 = bitcast i8* %2720 to float*
  store float 0.000000e+00, float* %2721, align 1, !tbaa !2452
  %2722 = getelementptr inbounds i8, i8* %2710, i64 8
  %2723 = bitcast i8* %2722 to float*
  store float 0.000000e+00, float* %2723, align 1, !tbaa !2452
  %2724 = getelementptr inbounds i8, i8* %2710, i64 12
  %2725 = bitcast i8* %2724 to float*
  store float 0.000000e+00, float* %2725, align 1, !tbaa !2452
  %2726 = load i64, i64* %RBP
  %2727 = sub i64 %2726, 40
  %2728 = load i64, i64* %PC
  %2729 = add i64 %2728, 4
  store i64 %2729, i64* %PC
  %2730 = inttoptr i64 %2727 to i64*
  %2731 = load i64, i64* %2730
  store i64 %2731, i64* %RAX, align 8, !tbaa !2428
  %2732 = load i64, i64* %RBP
  %2733 = sub i64 %2732, 24
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 3
  store i64 %2735, i64* %PC
  %2736 = inttoptr i64 %2733 to i32*
  %2737 = load i32, i32* %2736
  %2738 = zext i32 %2737 to i64
  store i64 %2738, i64* %RDX, align 8, !tbaa !2428
  %2739 = load i64, i64* %RBP
  %2740 = sub i64 %2739, 44
  %2741 = load i64, i64* %PC
  %2742 = add i64 %2741, 3
  store i64 %2742, i64* %PC
  %2743 = inttoptr i64 %2740 to i32*
  %2744 = load i32, i32* %2743
  %2745 = zext i32 %2744 to i64
  store i64 %2745, i64* %RSI, align 8, !tbaa !2428
  %2746 = load i64, i64* %RSI
  %2747 = load i64, i64* %PC
  %2748 = add i64 %2747, 3
  store i64 %2748, i64* %PC
  %2749 = trunc i64 %2746 to i32
  %2750 = sub i32 %2749, 6
  %2751 = zext i32 %2750 to i64
  store i64 %2751, i64* %RSI, align 8, !tbaa !2428
  %2752 = icmp ult i32 %2749, 6
  %2753 = zext i1 %2752 to i8
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2753, i8* %2754, align 1, !tbaa !2432
  %2755 = and i32 %2750, 255
  %2756 = call i32 @llvm.ctpop.i32(i32 %2755) #16
  %2757 = trunc i32 %2756 to i8
  %2758 = and i8 %2757, 1
  %2759 = xor i8 %2758, 1
  %2760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2759, i8* %2760, align 1, !tbaa !2446
  %2761 = xor i64 6, %2746
  %2762 = trunc i64 %2761 to i32
  %2763 = xor i32 %2762, %2750
  %2764 = lshr i32 %2763, 4
  %2765 = trunc i32 %2764 to i8
  %2766 = and i8 %2765, 1
  %2767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2766, i8* %2767, align 1, !tbaa !2447
  %2768 = icmp eq i32 %2750, 0
  %2769 = zext i1 %2768 to i8
  %2770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2769, i8* %2770, align 1, !tbaa !2448
  %2771 = lshr i32 %2750, 31
  %2772 = trunc i32 %2771 to i8
  %2773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2772, i8* %2773, align 1, !tbaa !2449
  %2774 = lshr i32 %2749, 31
  %2775 = xor i32 %2771, %2774
  %2776 = add nuw nsw i32 %2775, %2774
  %2777 = icmp eq i32 %2776, 2
  %2778 = zext i1 %2777 to i8
  %2779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2778, i8* %2779, align 1, !tbaa !2450
  %2780 = load i64, i64* %RDX
  %2781 = load i32, i32* %ESI
  %2782 = zext i32 %2781 to i64
  %2783 = load i64, i64* %PC
  %2784 = add i64 %2783, 3
  store i64 %2784, i64* %PC
  %2785 = shl i64 %2780, 32
  %2786 = ashr exact i64 %2785, 32
  %2787 = shl i64 %2782, 32
  %2788 = ashr exact i64 %2787, 32
  %2789 = mul nsw i64 %2788, %2786
  %2790 = trunc i64 %2789 to i32
  %2791 = and i64 %2789, 4294967295
  store i64 %2791, i64* %RDX, align 8, !tbaa !2428
  %2792 = shl i64 %2789, 32
  %2793 = ashr exact i64 %2792, 32
  %2794 = icmp ne i64 %2793, %2789
  %2795 = zext i1 %2794 to i8
  %2796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2795, i8* %2796, align 1, !tbaa !2432
  %2797 = and i32 %2790, 255
  %2798 = call i32 @llvm.ctpop.i32(i32 %2797) #16
  %2799 = trunc i32 %2798 to i8
  %2800 = and i8 %2799, 1
  %2801 = xor i8 %2800, 1
  %2802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2801, i8* %2802, align 1, !tbaa !2446
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2803, align 1, !tbaa !2447
  %2804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2804, align 1, !tbaa !2448
  %2805 = lshr i32 %2790, 31
  %2806 = trunc i32 %2805 to i8
  %2807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2806, i8* %2807, align 1, !tbaa !2449
  %2808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2795, i8* %2808, align 1, !tbaa !2450
  %2809 = load i64, i64* %RDX
  %2810 = load i64, i64* %RBP
  %2811 = sub i64 %2810, 48
  %2812 = load i64, i64* %PC
  %2813 = add i64 %2812, 3
  store i64 %2813, i64* %PC
  %2814 = trunc i64 %2809 to i32
  %2815 = inttoptr i64 %2811 to i32*
  %2816 = load i32, i32* %2815
  %2817 = add i32 %2816, %2814
  %2818 = zext i32 %2817 to i64
  store i64 %2818, i64* %RDX, align 8, !tbaa !2428
  %2819 = icmp ult i32 %2817, %2814
  %2820 = icmp ult i32 %2817, %2816
  %2821 = or i1 %2819, %2820
  %2822 = zext i1 %2821 to i8
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2822, i8* %2823, align 1, !tbaa !2432
  %2824 = and i32 %2817, 255
  %2825 = call i32 @llvm.ctpop.i32(i32 %2824) #16
  %2826 = trunc i32 %2825 to i8
  %2827 = and i8 %2826, 1
  %2828 = xor i8 %2827, 1
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2828, i8* %2829, align 1, !tbaa !2446
  %2830 = xor i32 %2816, %2814
  %2831 = xor i32 %2830, %2817
  %2832 = lshr i32 %2831, 4
  %2833 = trunc i32 %2832 to i8
  %2834 = and i8 %2833, 1
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2834, i8* %2835, align 1, !tbaa !2447
  %2836 = icmp eq i32 %2817, 0
  %2837 = zext i1 %2836 to i8
  %2838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2837, i8* %2838, align 1, !tbaa !2448
  %2839 = lshr i32 %2817, 31
  %2840 = trunc i32 %2839 to i8
  %2841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2840, i8* %2841, align 1, !tbaa !2449
  %2842 = lshr i32 %2814, 31
  %2843 = lshr i32 %2816, 31
  %2844 = xor i32 %2839, %2842
  %2845 = xor i32 %2839, %2843
  %2846 = add nuw nsw i32 %2844, %2845
  %2847 = icmp eq i32 %2846, 2
  %2848 = zext i1 %2847 to i8
  %2849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2848, i8* %2849, align 1, !tbaa !2450
  %2850 = load i32, i32* %EDX
  %2851 = zext i32 %2850 to i64
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 3
  store i64 %2853, i64* %PC
  %2854 = shl i64 %2851, 32
  %2855 = ashr exact i64 %2854, 32
  store i64 %2855, i64* %RCX, align 8, !tbaa !2428
  %2856 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2857 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2858 = load i64, i64* %RAX
  %2859 = load i64, i64* %RCX
  %2860 = mul i64 %2859, 4
  %2861 = add i64 %2860, %2858
  %2862 = load i64, i64* %PC
  %2863 = add i64 %2862, 5
  store i64 %2863, i64* %PC
  %2864 = bitcast i8* %2857 to <2 x float>*
  %2865 = load <2 x float>, <2 x float>* %2864, align 1
  %2866 = getelementptr inbounds i8, i8* %2857, i64 8
  %2867 = bitcast i8* %2866 to <2 x i32>*
  %2868 = load <2 x i32>, <2 x i32>* %2867, align 1
  %2869 = inttoptr i64 %2861 to float*
  %2870 = load float, float* %2869
  %2871 = extractelement <2 x float> %2865, i32 0
  %2872 = fmul float %2871, %2870
  %2873 = bitcast i8* %2856 to float*
  store float %2872, float* %2873, align 1, !tbaa !2452
  %2874 = bitcast <2 x float> %2865 to <2 x i32>
  %2875 = extractelement <2 x i32> %2874, i32 1
  %2876 = getelementptr inbounds i8, i8* %2856, i64 4
  %2877 = bitcast i8* %2876 to i32*
  store i32 %2875, i32* %2877, align 1, !tbaa !2452
  %2878 = extractelement <2 x i32> %2868, i32 0
  %2879 = getelementptr inbounds i8, i8* %2856, i64 8
  %2880 = bitcast i8* %2879 to i32*
  store i32 %2878, i32* %2880, align 1, !tbaa !2452
  %2881 = extractelement <2 x i32> %2868, i32 1
  %2882 = getelementptr inbounds i8, i8* %2856, i64 12
  %2883 = bitcast i8* %2882 to i32*
  store i32 %2881, i32* %2883, align 1, !tbaa !2452
  %2884 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2885 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2886 = bitcast %union.vec128_t* %XMM1 to i8*
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 4
  store i64 %2888, i64* %PC
  %2889 = bitcast i8* %2885 to <2 x float>*
  %2890 = load <2 x float>, <2 x float>* %2889, align 1
  %2891 = getelementptr inbounds i8, i8* %2885, i64 8
  %2892 = bitcast i8* %2891 to <2 x i32>*
  %2893 = load <2 x i32>, <2 x i32>* %2892, align 1
  %2894 = bitcast i8* %2886 to <2 x float>*
  %2895 = load <2 x float>, <2 x float>* %2894, align 1
  %2896 = extractelement <2 x float> %2890, i32 0
  %2897 = extractelement <2 x float> %2895, i32 0
  %2898 = fadd float %2896, %2897
  %2899 = bitcast i8* %2884 to float*
  store float %2898, float* %2899, align 1, !tbaa !2452
  %2900 = bitcast <2 x float> %2890 to <2 x i32>
  %2901 = extractelement <2 x i32> %2900, i32 1
  %2902 = getelementptr inbounds i8, i8* %2884, i64 4
  %2903 = bitcast i8* %2902 to i32*
  store i32 %2901, i32* %2903, align 1, !tbaa !2452
  %2904 = extractelement <2 x i32> %2893, i32 0
  %2905 = getelementptr inbounds i8, i8* %2884, i64 8
  %2906 = bitcast i8* %2905 to i32*
  store i32 %2904, i32* %2906, align 1, !tbaa !2452
  %2907 = extractelement <2 x i32> %2893, i32 1
  %2908 = getelementptr inbounds i8, i8* %2884, i64 12
  %2909 = bitcast i8* %2908 to i32*
  store i32 %2907, i32* %2909, align 1, !tbaa !2452
  %2910 = load i64, i64* %RBP
  %2911 = sub i64 %2910, 32
  %2912 = load i64, i64* %PC
  %2913 = add i64 %2912, 4
  store i64 %2913, i64* %PC
  %2914 = inttoptr i64 %2911 to i64*
  %2915 = load i64, i64* %2914
  store i64 %2915, i64* %RAX, align 8, !tbaa !2428
  %2916 = load i64, i64* %RBP
  %2917 = sub i64 %2916, 44
  %2918 = load i64, i64* %PC
  %2919 = add i64 %2918, 3
  store i64 %2919, i64* %PC
  %2920 = inttoptr i64 %2917 to i32*
  %2921 = load i32, i32* %2920
  %2922 = zext i32 %2921 to i64
  store i64 %2922, i64* %RDX, align 8, !tbaa !2428
  %2923 = load i64, i64* %RDX
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 3
  store i64 %2925, i64* %PC
  %2926 = trunc i64 %2923 to i32
  %2927 = sub i32 %2926, 5
  %2928 = zext i32 %2927 to i64
  store i64 %2928, i64* %RDX, align 8, !tbaa !2428
  %2929 = icmp ult i32 %2926, 5
  %2930 = zext i1 %2929 to i8
  %2931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2930, i8* %2931, align 1, !tbaa !2432
  %2932 = and i32 %2927, 255
  %2933 = call i32 @llvm.ctpop.i32(i32 %2932) #16
  %2934 = trunc i32 %2933 to i8
  %2935 = and i8 %2934, 1
  %2936 = xor i8 %2935, 1
  %2937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2936, i8* %2937, align 1, !tbaa !2446
  %2938 = xor i64 5, %2923
  %2939 = trunc i64 %2938 to i32
  %2940 = xor i32 %2939, %2927
  %2941 = lshr i32 %2940, 4
  %2942 = trunc i32 %2941 to i8
  %2943 = and i8 %2942, 1
  %2944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2943, i8* %2944, align 1, !tbaa !2447
  %2945 = icmp eq i32 %2927, 0
  %2946 = zext i1 %2945 to i8
  %2947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2946, i8* %2947, align 1, !tbaa !2448
  %2948 = lshr i32 %2927, 31
  %2949 = trunc i32 %2948 to i8
  %2950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2949, i8* %2950, align 1, !tbaa !2449
  %2951 = lshr i32 %2926, 31
  %2952 = xor i32 %2948, %2951
  %2953 = add nuw nsw i32 %2952, %2951
  %2954 = icmp eq i32 %2953, 2
  %2955 = zext i1 %2954 to i8
  %2956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2955, i8* %2956, align 1, !tbaa !2450
  %2957 = load i32, i32* %EDX
  %2958 = zext i32 %2957 to i64
  %2959 = load i64, i64* %PC
  %2960 = add i64 %2959, 3
  store i64 %2960, i64* %PC
  %2961 = shl i64 %2958, 32
  %2962 = ashr exact i64 %2961, 32
  store i64 %2962, i64* %RCX, align 8, !tbaa !2428
  %2963 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2964 = load i64, i64* %RAX
  %2965 = load i64, i64* %RCX
  %2966 = mul i64 %2965, 4
  %2967 = add i64 %2966, %2964
  %2968 = load i64, i64* %PC
  %2969 = add i64 %2968, 5
  store i64 %2969, i64* %PC
  %2970 = inttoptr i64 %2967 to float*
  %2971 = load float, float* %2970
  %2972 = bitcast i8* %2963 to float*
  store float %2971, float* %2972, align 1, !tbaa !2452
  %2973 = getelementptr inbounds i8, i8* %2963, i64 4
  %2974 = bitcast i8* %2973 to float*
  store float 0.000000e+00, float* %2974, align 1, !tbaa !2452
  %2975 = getelementptr inbounds i8, i8* %2963, i64 8
  %2976 = bitcast i8* %2975 to float*
  store float 0.000000e+00, float* %2976, align 1, !tbaa !2452
  %2977 = getelementptr inbounds i8, i8* %2963, i64 12
  %2978 = bitcast i8* %2977 to float*
  store float 0.000000e+00, float* %2978, align 1, !tbaa !2452
  %2979 = load i64, i64* %RBP
  %2980 = sub i64 %2979, 40
  %2981 = load i64, i64* %PC
  %2982 = add i64 %2981, 4
  store i64 %2982, i64* %PC
  %2983 = inttoptr i64 %2980 to i64*
  %2984 = load i64, i64* %2983
  store i64 %2984, i64* %RAX, align 8, !tbaa !2428
  %2985 = load i64, i64* %RBP
  %2986 = sub i64 %2985, 24
  %2987 = load i64, i64* %PC
  %2988 = add i64 %2987, 3
  store i64 %2988, i64* %PC
  %2989 = inttoptr i64 %2986 to i32*
  %2990 = load i32, i32* %2989
  %2991 = zext i32 %2990 to i64
  store i64 %2991, i64* %RDX, align 8, !tbaa !2428
  %2992 = load i64, i64* %RBP
  %2993 = sub i64 %2992, 44
  %2994 = load i64, i64* %PC
  %2995 = add i64 %2994, 3
  store i64 %2995, i64* %PC
  %2996 = inttoptr i64 %2993 to i32*
  %2997 = load i32, i32* %2996
  %2998 = zext i32 %2997 to i64
  store i64 %2998, i64* %RSI, align 8, !tbaa !2428
  %2999 = load i64, i64* %RSI
  %3000 = load i64, i64* %PC
  %3001 = add i64 %3000, 3
  store i64 %3001, i64* %PC
  %3002 = trunc i64 %2999 to i32
  %3003 = sub i32 %3002, 5
  %3004 = zext i32 %3003 to i64
  store i64 %3004, i64* %RSI, align 8, !tbaa !2428
  %3005 = icmp ult i32 %3002, 5
  %3006 = zext i1 %3005 to i8
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3006, i8* %3007, align 1, !tbaa !2432
  %3008 = and i32 %3003, 255
  %3009 = call i32 @llvm.ctpop.i32(i32 %3008) #16
  %3010 = trunc i32 %3009 to i8
  %3011 = and i8 %3010, 1
  %3012 = xor i8 %3011, 1
  %3013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3012, i8* %3013, align 1, !tbaa !2446
  %3014 = xor i64 5, %2999
  %3015 = trunc i64 %3014 to i32
  %3016 = xor i32 %3015, %3003
  %3017 = lshr i32 %3016, 4
  %3018 = trunc i32 %3017 to i8
  %3019 = and i8 %3018, 1
  %3020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3019, i8* %3020, align 1, !tbaa !2447
  %3021 = icmp eq i32 %3003, 0
  %3022 = zext i1 %3021 to i8
  %3023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3022, i8* %3023, align 1, !tbaa !2448
  %3024 = lshr i32 %3003, 31
  %3025 = trunc i32 %3024 to i8
  %3026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3025, i8* %3026, align 1, !tbaa !2449
  %3027 = lshr i32 %3002, 31
  %3028 = xor i32 %3024, %3027
  %3029 = add nuw nsw i32 %3028, %3027
  %3030 = icmp eq i32 %3029, 2
  %3031 = zext i1 %3030 to i8
  %3032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3031, i8* %3032, align 1, !tbaa !2450
  %3033 = load i64, i64* %RDX
  %3034 = load i32, i32* %ESI
  %3035 = zext i32 %3034 to i64
  %3036 = load i64, i64* %PC
  %3037 = add i64 %3036, 3
  store i64 %3037, i64* %PC
  %3038 = shl i64 %3033, 32
  %3039 = ashr exact i64 %3038, 32
  %3040 = shl i64 %3035, 32
  %3041 = ashr exact i64 %3040, 32
  %3042 = mul nsw i64 %3041, %3039
  %3043 = trunc i64 %3042 to i32
  %3044 = and i64 %3042, 4294967295
  store i64 %3044, i64* %RDX, align 8, !tbaa !2428
  %3045 = shl i64 %3042, 32
  %3046 = ashr exact i64 %3045, 32
  %3047 = icmp ne i64 %3046, %3042
  %3048 = zext i1 %3047 to i8
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3048, i8* %3049, align 1, !tbaa !2432
  %3050 = and i32 %3043, 255
  %3051 = call i32 @llvm.ctpop.i32(i32 %3050) #16
  %3052 = trunc i32 %3051 to i8
  %3053 = and i8 %3052, 1
  %3054 = xor i8 %3053, 1
  %3055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3054, i8* %3055, align 1, !tbaa !2446
  %3056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3056, align 1, !tbaa !2447
  %3057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3057, align 1, !tbaa !2448
  %3058 = lshr i32 %3043, 31
  %3059 = trunc i32 %3058 to i8
  %3060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3059, i8* %3060, align 1, !tbaa !2449
  %3061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3048, i8* %3061, align 1, !tbaa !2450
  %3062 = load i64, i64* %RDX
  %3063 = load i64, i64* %RBP
  %3064 = sub i64 %3063, 48
  %3065 = load i64, i64* %PC
  %3066 = add i64 %3065, 3
  store i64 %3066, i64* %PC
  %3067 = trunc i64 %3062 to i32
  %3068 = inttoptr i64 %3064 to i32*
  %3069 = load i32, i32* %3068
  %3070 = add i32 %3069, %3067
  %3071 = zext i32 %3070 to i64
  store i64 %3071, i64* %RDX, align 8, !tbaa !2428
  %3072 = icmp ult i32 %3070, %3067
  %3073 = icmp ult i32 %3070, %3069
  %3074 = or i1 %3072, %3073
  %3075 = zext i1 %3074 to i8
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3075, i8* %3076, align 1, !tbaa !2432
  %3077 = and i32 %3070, 255
  %3078 = call i32 @llvm.ctpop.i32(i32 %3077) #16
  %3079 = trunc i32 %3078 to i8
  %3080 = and i8 %3079, 1
  %3081 = xor i8 %3080, 1
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3081, i8* %3082, align 1, !tbaa !2446
  %3083 = xor i32 %3069, %3067
  %3084 = xor i32 %3083, %3070
  %3085 = lshr i32 %3084, 4
  %3086 = trunc i32 %3085 to i8
  %3087 = and i8 %3086, 1
  %3088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3087, i8* %3088, align 1, !tbaa !2447
  %3089 = icmp eq i32 %3070, 0
  %3090 = zext i1 %3089 to i8
  %3091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3090, i8* %3091, align 1, !tbaa !2448
  %3092 = lshr i32 %3070, 31
  %3093 = trunc i32 %3092 to i8
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3093, i8* %3094, align 1, !tbaa !2449
  %3095 = lshr i32 %3067, 31
  %3096 = lshr i32 %3069, 31
  %3097 = xor i32 %3092, %3095
  %3098 = xor i32 %3092, %3096
  %3099 = add nuw nsw i32 %3097, %3098
  %3100 = icmp eq i32 %3099, 2
  %3101 = zext i1 %3100 to i8
  %3102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3101, i8* %3102, align 1, !tbaa !2450
  %3103 = load i32, i32* %EDX
  %3104 = zext i32 %3103 to i64
  %3105 = load i64, i64* %PC
  %3106 = add i64 %3105, 3
  store i64 %3106, i64* %PC
  %3107 = shl i64 %3104, 32
  %3108 = ashr exact i64 %3107, 32
  store i64 %3108, i64* %RCX, align 8, !tbaa !2428
  %3109 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3110 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3111 = load i64, i64* %RAX
  %3112 = load i64, i64* %RCX
  %3113 = mul i64 %3112, 4
  %3114 = add i64 %3113, %3111
  %3115 = load i64, i64* %PC
  %3116 = add i64 %3115, 5
  store i64 %3116, i64* %PC
  %3117 = bitcast i8* %3110 to <2 x float>*
  %3118 = load <2 x float>, <2 x float>* %3117, align 1
  %3119 = getelementptr inbounds i8, i8* %3110, i64 8
  %3120 = bitcast i8* %3119 to <2 x i32>*
  %3121 = load <2 x i32>, <2 x i32>* %3120, align 1
  %3122 = inttoptr i64 %3114 to float*
  %3123 = load float, float* %3122
  %3124 = extractelement <2 x float> %3118, i32 0
  %3125 = fmul float %3124, %3123
  %3126 = bitcast i8* %3109 to float*
  store float %3125, float* %3126, align 1, !tbaa !2452
  %3127 = bitcast <2 x float> %3118 to <2 x i32>
  %3128 = extractelement <2 x i32> %3127, i32 1
  %3129 = getelementptr inbounds i8, i8* %3109, i64 4
  %3130 = bitcast i8* %3129 to i32*
  store i32 %3128, i32* %3130, align 1, !tbaa !2452
  %3131 = extractelement <2 x i32> %3121, i32 0
  %3132 = getelementptr inbounds i8, i8* %3109, i64 8
  %3133 = bitcast i8* %3132 to i32*
  store i32 %3131, i32* %3133, align 1, !tbaa !2452
  %3134 = extractelement <2 x i32> %3121, i32 1
  %3135 = getelementptr inbounds i8, i8* %3109, i64 12
  %3136 = bitcast i8* %3135 to i32*
  store i32 %3134, i32* %3136, align 1, !tbaa !2452
  %3137 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3138 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3139 = bitcast %union.vec128_t* %XMM1 to i8*
  %3140 = load i64, i64* %PC
  %3141 = add i64 %3140, 4
  store i64 %3141, i64* %PC
  %3142 = bitcast i8* %3138 to <2 x float>*
  %3143 = load <2 x float>, <2 x float>* %3142, align 1
  %3144 = getelementptr inbounds i8, i8* %3138, i64 8
  %3145 = bitcast i8* %3144 to <2 x i32>*
  %3146 = load <2 x i32>, <2 x i32>* %3145, align 1
  %3147 = bitcast i8* %3139 to <2 x float>*
  %3148 = load <2 x float>, <2 x float>* %3147, align 1
  %3149 = extractelement <2 x float> %3143, i32 0
  %3150 = extractelement <2 x float> %3148, i32 0
  %3151 = fadd float %3149, %3150
  %3152 = bitcast i8* %3137 to float*
  store float %3151, float* %3152, align 1, !tbaa !2452
  %3153 = bitcast <2 x float> %3143 to <2 x i32>
  %3154 = extractelement <2 x i32> %3153, i32 1
  %3155 = getelementptr inbounds i8, i8* %3137, i64 4
  %3156 = bitcast i8* %3155 to i32*
  store i32 %3154, i32* %3156, align 1, !tbaa !2452
  %3157 = extractelement <2 x i32> %3146, i32 0
  %3158 = getelementptr inbounds i8, i8* %3137, i64 8
  %3159 = bitcast i8* %3158 to i32*
  store i32 %3157, i32* %3159, align 1, !tbaa !2452
  %3160 = extractelement <2 x i32> %3146, i32 1
  %3161 = getelementptr inbounds i8, i8* %3137, i64 12
  %3162 = bitcast i8* %3161 to i32*
  store i32 %3160, i32* %3162, align 1, !tbaa !2452
  %3163 = load i64, i64* %RBP
  %3164 = sub i64 %3163, 32
  %3165 = load i64, i64* %PC
  %3166 = add i64 %3165, 4
  store i64 %3166, i64* %PC
  %3167 = inttoptr i64 %3164 to i64*
  %3168 = load i64, i64* %3167
  store i64 %3168, i64* %RAX, align 8, !tbaa !2428
  %3169 = load i64, i64* %RBP
  %3170 = sub i64 %3169, 44
  %3171 = load i64, i64* %PC
  %3172 = add i64 %3171, 3
  store i64 %3172, i64* %PC
  %3173 = inttoptr i64 %3170 to i32*
  %3174 = load i32, i32* %3173
  %3175 = zext i32 %3174 to i64
  store i64 %3175, i64* %RDX, align 8, !tbaa !2428
  %3176 = load i64, i64* %RDX
  %3177 = load i64, i64* %PC
  %3178 = add i64 %3177, 3
  store i64 %3178, i64* %PC
  %3179 = trunc i64 %3176 to i32
  %3180 = sub i32 %3179, 4
  %3181 = zext i32 %3180 to i64
  store i64 %3181, i64* %RDX, align 8, !tbaa !2428
  %3182 = icmp ult i32 %3179, 4
  %3183 = zext i1 %3182 to i8
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3183, i8* %3184, align 1, !tbaa !2432
  %3185 = and i32 %3180, 255
  %3186 = call i32 @llvm.ctpop.i32(i32 %3185) #16
  %3187 = trunc i32 %3186 to i8
  %3188 = and i8 %3187, 1
  %3189 = xor i8 %3188, 1
  %3190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3189, i8* %3190, align 1, !tbaa !2446
  %3191 = xor i64 4, %3176
  %3192 = trunc i64 %3191 to i32
  %3193 = xor i32 %3192, %3180
  %3194 = lshr i32 %3193, 4
  %3195 = trunc i32 %3194 to i8
  %3196 = and i8 %3195, 1
  %3197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3196, i8* %3197, align 1, !tbaa !2447
  %3198 = icmp eq i32 %3180, 0
  %3199 = zext i1 %3198 to i8
  %3200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3199, i8* %3200, align 1, !tbaa !2448
  %3201 = lshr i32 %3180, 31
  %3202 = trunc i32 %3201 to i8
  %3203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3202, i8* %3203, align 1, !tbaa !2449
  %3204 = lshr i32 %3179, 31
  %3205 = xor i32 %3201, %3204
  %3206 = add nuw nsw i32 %3205, %3204
  %3207 = icmp eq i32 %3206, 2
  %3208 = zext i1 %3207 to i8
  %3209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3208, i8* %3209, align 1, !tbaa !2450
  %3210 = load i32, i32* %EDX
  %3211 = zext i32 %3210 to i64
  %3212 = load i64, i64* %PC
  %3213 = add i64 %3212, 3
  store i64 %3213, i64* %PC
  %3214 = shl i64 %3211, 32
  %3215 = ashr exact i64 %3214, 32
  store i64 %3215, i64* %RCX, align 8, !tbaa !2428
  %3216 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3217 = load i64, i64* %RAX
  %3218 = load i64, i64* %RCX
  %3219 = mul i64 %3218, 4
  %3220 = add i64 %3219, %3217
  %3221 = load i64, i64* %PC
  %3222 = add i64 %3221, 5
  store i64 %3222, i64* %PC
  %3223 = inttoptr i64 %3220 to float*
  %3224 = load float, float* %3223
  %3225 = bitcast i8* %3216 to float*
  store float %3224, float* %3225, align 1, !tbaa !2452
  %3226 = getelementptr inbounds i8, i8* %3216, i64 4
  %3227 = bitcast i8* %3226 to float*
  store float 0.000000e+00, float* %3227, align 1, !tbaa !2452
  %3228 = getelementptr inbounds i8, i8* %3216, i64 8
  %3229 = bitcast i8* %3228 to float*
  store float 0.000000e+00, float* %3229, align 1, !tbaa !2452
  %3230 = getelementptr inbounds i8, i8* %3216, i64 12
  %3231 = bitcast i8* %3230 to float*
  store float 0.000000e+00, float* %3231, align 1, !tbaa !2452
  %3232 = load i64, i64* %RBP
  %3233 = sub i64 %3232, 40
  %3234 = load i64, i64* %PC
  %3235 = add i64 %3234, 4
  store i64 %3235, i64* %PC
  %3236 = inttoptr i64 %3233 to i64*
  %3237 = load i64, i64* %3236
  store i64 %3237, i64* %RAX, align 8, !tbaa !2428
  %3238 = load i64, i64* %RBP
  %3239 = sub i64 %3238, 24
  %3240 = load i64, i64* %PC
  %3241 = add i64 %3240, 3
  store i64 %3241, i64* %PC
  %3242 = inttoptr i64 %3239 to i32*
  %3243 = load i32, i32* %3242
  %3244 = zext i32 %3243 to i64
  store i64 %3244, i64* %RDX, align 8, !tbaa !2428
  %3245 = load i64, i64* %RBP
  %3246 = sub i64 %3245, 44
  %3247 = load i64, i64* %PC
  %3248 = add i64 %3247, 3
  store i64 %3248, i64* %PC
  %3249 = inttoptr i64 %3246 to i32*
  %3250 = load i32, i32* %3249
  %3251 = zext i32 %3250 to i64
  store i64 %3251, i64* %RSI, align 8, !tbaa !2428
  %3252 = load i64, i64* %RSI
  %3253 = load i64, i64* %PC
  %3254 = add i64 %3253, 3
  store i64 %3254, i64* %PC
  %3255 = trunc i64 %3252 to i32
  %3256 = sub i32 %3255, 4
  %3257 = zext i32 %3256 to i64
  store i64 %3257, i64* %RSI, align 8, !tbaa !2428
  %3258 = icmp ult i32 %3255, 4
  %3259 = zext i1 %3258 to i8
  %3260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3259, i8* %3260, align 1, !tbaa !2432
  %3261 = and i32 %3256, 255
  %3262 = call i32 @llvm.ctpop.i32(i32 %3261) #16
  %3263 = trunc i32 %3262 to i8
  %3264 = and i8 %3263, 1
  %3265 = xor i8 %3264, 1
  %3266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3265, i8* %3266, align 1, !tbaa !2446
  %3267 = xor i64 4, %3252
  %3268 = trunc i64 %3267 to i32
  %3269 = xor i32 %3268, %3256
  %3270 = lshr i32 %3269, 4
  %3271 = trunc i32 %3270 to i8
  %3272 = and i8 %3271, 1
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3272, i8* %3273, align 1, !tbaa !2447
  %3274 = icmp eq i32 %3256, 0
  %3275 = zext i1 %3274 to i8
  %3276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3275, i8* %3276, align 1, !tbaa !2448
  %3277 = lshr i32 %3256, 31
  %3278 = trunc i32 %3277 to i8
  %3279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3278, i8* %3279, align 1, !tbaa !2449
  %3280 = lshr i32 %3255, 31
  %3281 = xor i32 %3277, %3280
  %3282 = add nuw nsw i32 %3281, %3280
  %3283 = icmp eq i32 %3282, 2
  %3284 = zext i1 %3283 to i8
  %3285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3284, i8* %3285, align 1, !tbaa !2450
  %3286 = load i64, i64* %RDX
  %3287 = load i32, i32* %ESI
  %3288 = zext i32 %3287 to i64
  %3289 = load i64, i64* %PC
  %3290 = add i64 %3289, 3
  store i64 %3290, i64* %PC
  %3291 = shl i64 %3286, 32
  %3292 = ashr exact i64 %3291, 32
  %3293 = shl i64 %3288, 32
  %3294 = ashr exact i64 %3293, 32
  %3295 = mul nsw i64 %3294, %3292
  %3296 = trunc i64 %3295 to i32
  %3297 = and i64 %3295, 4294967295
  store i64 %3297, i64* %RDX, align 8, !tbaa !2428
  %3298 = shl i64 %3295, 32
  %3299 = ashr exact i64 %3298, 32
  %3300 = icmp ne i64 %3299, %3295
  %3301 = zext i1 %3300 to i8
  %3302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3301, i8* %3302, align 1, !tbaa !2432
  %3303 = and i32 %3296, 255
  %3304 = call i32 @llvm.ctpop.i32(i32 %3303) #16
  %3305 = trunc i32 %3304 to i8
  %3306 = and i8 %3305, 1
  %3307 = xor i8 %3306, 1
  %3308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3307, i8* %3308, align 1, !tbaa !2446
  %3309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3309, align 1, !tbaa !2447
  %3310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3310, align 1, !tbaa !2448
  %3311 = lshr i32 %3296, 31
  %3312 = trunc i32 %3311 to i8
  %3313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3312, i8* %3313, align 1, !tbaa !2449
  %3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3301, i8* %3314, align 1, !tbaa !2450
  %3315 = load i64, i64* %RDX
  %3316 = load i64, i64* %RBP
  %3317 = sub i64 %3316, 48
  %3318 = load i64, i64* %PC
  %3319 = add i64 %3318, 3
  store i64 %3319, i64* %PC
  %3320 = trunc i64 %3315 to i32
  %3321 = inttoptr i64 %3317 to i32*
  %3322 = load i32, i32* %3321
  %3323 = add i32 %3322, %3320
  %3324 = zext i32 %3323 to i64
  store i64 %3324, i64* %RDX, align 8, !tbaa !2428
  %3325 = icmp ult i32 %3323, %3320
  %3326 = icmp ult i32 %3323, %3322
  %3327 = or i1 %3325, %3326
  %3328 = zext i1 %3327 to i8
  %3329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3328, i8* %3329, align 1, !tbaa !2432
  %3330 = and i32 %3323, 255
  %3331 = call i32 @llvm.ctpop.i32(i32 %3330) #16
  %3332 = trunc i32 %3331 to i8
  %3333 = and i8 %3332, 1
  %3334 = xor i8 %3333, 1
  %3335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3334, i8* %3335, align 1, !tbaa !2446
  %3336 = xor i32 %3322, %3320
  %3337 = xor i32 %3336, %3323
  %3338 = lshr i32 %3337, 4
  %3339 = trunc i32 %3338 to i8
  %3340 = and i8 %3339, 1
  %3341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3340, i8* %3341, align 1, !tbaa !2447
  %3342 = icmp eq i32 %3323, 0
  %3343 = zext i1 %3342 to i8
  %3344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3343, i8* %3344, align 1, !tbaa !2448
  %3345 = lshr i32 %3323, 31
  %3346 = trunc i32 %3345 to i8
  %3347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3346, i8* %3347, align 1, !tbaa !2449
  %3348 = lshr i32 %3320, 31
  %3349 = lshr i32 %3322, 31
  %3350 = xor i32 %3345, %3348
  %3351 = xor i32 %3345, %3349
  %3352 = add nuw nsw i32 %3350, %3351
  %3353 = icmp eq i32 %3352, 2
  %3354 = zext i1 %3353 to i8
  %3355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3354, i8* %3355, align 1, !tbaa !2450
  %3356 = load i32, i32* %EDX
  %3357 = zext i32 %3356 to i64
  %3358 = load i64, i64* %PC
  %3359 = add i64 %3358, 3
  store i64 %3359, i64* %PC
  %3360 = shl i64 %3357, 32
  %3361 = ashr exact i64 %3360, 32
  store i64 %3361, i64* %RCX, align 8, !tbaa !2428
  %3362 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3363 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3364 = load i64, i64* %RAX
  %3365 = load i64, i64* %RCX
  %3366 = mul i64 %3365, 4
  %3367 = add i64 %3366, %3364
  %3368 = load i64, i64* %PC
  %3369 = add i64 %3368, 5
  store i64 %3369, i64* %PC
  %3370 = bitcast i8* %3363 to <2 x float>*
  %3371 = load <2 x float>, <2 x float>* %3370, align 1
  %3372 = getelementptr inbounds i8, i8* %3363, i64 8
  %3373 = bitcast i8* %3372 to <2 x i32>*
  %3374 = load <2 x i32>, <2 x i32>* %3373, align 1
  %3375 = inttoptr i64 %3367 to float*
  %3376 = load float, float* %3375
  %3377 = extractelement <2 x float> %3371, i32 0
  %3378 = fmul float %3377, %3376
  %3379 = bitcast i8* %3362 to float*
  store float %3378, float* %3379, align 1, !tbaa !2452
  %3380 = bitcast <2 x float> %3371 to <2 x i32>
  %3381 = extractelement <2 x i32> %3380, i32 1
  %3382 = getelementptr inbounds i8, i8* %3362, i64 4
  %3383 = bitcast i8* %3382 to i32*
  store i32 %3381, i32* %3383, align 1, !tbaa !2452
  %3384 = extractelement <2 x i32> %3374, i32 0
  %3385 = getelementptr inbounds i8, i8* %3362, i64 8
  %3386 = bitcast i8* %3385 to i32*
  store i32 %3384, i32* %3386, align 1, !tbaa !2452
  %3387 = extractelement <2 x i32> %3374, i32 1
  %3388 = getelementptr inbounds i8, i8* %3362, i64 12
  %3389 = bitcast i8* %3388 to i32*
  store i32 %3387, i32* %3389, align 1, !tbaa !2452
  %3390 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3391 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3392 = bitcast %union.vec128_t* %XMM1 to i8*
  %3393 = load i64, i64* %PC
  %3394 = add i64 %3393, 4
  store i64 %3394, i64* %PC
  %3395 = bitcast i8* %3391 to <2 x float>*
  %3396 = load <2 x float>, <2 x float>* %3395, align 1
  %3397 = getelementptr inbounds i8, i8* %3391, i64 8
  %3398 = bitcast i8* %3397 to <2 x i32>*
  %3399 = load <2 x i32>, <2 x i32>* %3398, align 1
  %3400 = bitcast i8* %3392 to <2 x float>*
  %3401 = load <2 x float>, <2 x float>* %3400, align 1
  %3402 = extractelement <2 x float> %3396, i32 0
  %3403 = extractelement <2 x float> %3401, i32 0
  %3404 = fadd float %3402, %3403
  %3405 = bitcast i8* %3390 to float*
  store float %3404, float* %3405, align 1, !tbaa !2452
  %3406 = bitcast <2 x float> %3396 to <2 x i32>
  %3407 = extractelement <2 x i32> %3406, i32 1
  %3408 = getelementptr inbounds i8, i8* %3390, i64 4
  %3409 = bitcast i8* %3408 to i32*
  store i32 %3407, i32* %3409, align 1, !tbaa !2452
  %3410 = extractelement <2 x i32> %3399, i32 0
  %3411 = getelementptr inbounds i8, i8* %3390, i64 8
  %3412 = bitcast i8* %3411 to i32*
  store i32 %3410, i32* %3412, align 1, !tbaa !2452
  %3413 = extractelement <2 x i32> %3399, i32 1
  %3414 = getelementptr inbounds i8, i8* %3390, i64 12
  %3415 = bitcast i8* %3414 to i32*
  store i32 %3413, i32* %3415, align 1, !tbaa !2452
  %3416 = load i64, i64* %RBP
  %3417 = sub i64 %3416, 32
  %3418 = load i64, i64* %PC
  %3419 = add i64 %3418, 4
  store i64 %3419, i64* %PC
  %3420 = inttoptr i64 %3417 to i64*
  %3421 = load i64, i64* %3420
  store i64 %3421, i64* %RAX, align 8, !tbaa !2428
  %3422 = load i64, i64* %RBP
  %3423 = sub i64 %3422, 44
  %3424 = load i64, i64* %PC
  %3425 = add i64 %3424, 3
  store i64 %3425, i64* %PC
  %3426 = inttoptr i64 %3423 to i32*
  %3427 = load i32, i32* %3426
  %3428 = zext i32 %3427 to i64
  store i64 %3428, i64* %RDX, align 8, !tbaa !2428
  %3429 = load i64, i64* %RDX
  %3430 = load i64, i64* %PC
  %3431 = add i64 %3430, 3
  store i64 %3431, i64* %PC
  %3432 = trunc i64 %3429 to i32
  %3433 = sub i32 %3432, 3
  %3434 = zext i32 %3433 to i64
  store i64 %3434, i64* %RDX, align 8, !tbaa !2428
  %3435 = icmp ult i32 %3432, 3
  %3436 = zext i1 %3435 to i8
  %3437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3436, i8* %3437, align 1, !tbaa !2432
  %3438 = and i32 %3433, 255
  %3439 = call i32 @llvm.ctpop.i32(i32 %3438) #16
  %3440 = trunc i32 %3439 to i8
  %3441 = and i8 %3440, 1
  %3442 = xor i8 %3441, 1
  %3443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3442, i8* %3443, align 1, !tbaa !2446
  %3444 = xor i64 3, %3429
  %3445 = trunc i64 %3444 to i32
  %3446 = xor i32 %3445, %3433
  %3447 = lshr i32 %3446, 4
  %3448 = trunc i32 %3447 to i8
  %3449 = and i8 %3448, 1
  %3450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3449, i8* %3450, align 1, !tbaa !2447
  %3451 = icmp eq i32 %3433, 0
  %3452 = zext i1 %3451 to i8
  %3453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3452, i8* %3453, align 1, !tbaa !2448
  %3454 = lshr i32 %3433, 31
  %3455 = trunc i32 %3454 to i8
  %3456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3455, i8* %3456, align 1, !tbaa !2449
  %3457 = lshr i32 %3432, 31
  %3458 = xor i32 %3454, %3457
  %3459 = add nuw nsw i32 %3458, %3457
  %3460 = icmp eq i32 %3459, 2
  %3461 = zext i1 %3460 to i8
  %3462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3461, i8* %3462, align 1, !tbaa !2450
  %3463 = load i32, i32* %EDX
  %3464 = zext i32 %3463 to i64
  %3465 = load i64, i64* %PC
  %3466 = add i64 %3465, 3
  store i64 %3466, i64* %PC
  %3467 = shl i64 %3464, 32
  %3468 = ashr exact i64 %3467, 32
  store i64 %3468, i64* %RCX, align 8, !tbaa !2428
  %3469 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3470 = load i64, i64* %RAX
  %3471 = load i64, i64* %RCX
  %3472 = mul i64 %3471, 4
  %3473 = add i64 %3472, %3470
  %3474 = load i64, i64* %PC
  %3475 = add i64 %3474, 5
  store i64 %3475, i64* %PC
  %3476 = inttoptr i64 %3473 to float*
  %3477 = load float, float* %3476
  %3478 = bitcast i8* %3469 to float*
  store float %3477, float* %3478, align 1, !tbaa !2452
  %3479 = getelementptr inbounds i8, i8* %3469, i64 4
  %3480 = bitcast i8* %3479 to float*
  store float 0.000000e+00, float* %3480, align 1, !tbaa !2452
  %3481 = getelementptr inbounds i8, i8* %3469, i64 8
  %3482 = bitcast i8* %3481 to float*
  store float 0.000000e+00, float* %3482, align 1, !tbaa !2452
  %3483 = getelementptr inbounds i8, i8* %3469, i64 12
  %3484 = bitcast i8* %3483 to float*
  store float 0.000000e+00, float* %3484, align 1, !tbaa !2452
  %3485 = load i64, i64* %RBP
  %3486 = sub i64 %3485, 40
  %3487 = load i64, i64* %PC
  %3488 = add i64 %3487, 4
  store i64 %3488, i64* %PC
  %3489 = inttoptr i64 %3486 to i64*
  %3490 = load i64, i64* %3489
  store i64 %3490, i64* %RAX, align 8, !tbaa !2428
  %3491 = load i64, i64* %RBP
  %3492 = sub i64 %3491, 24
  %3493 = load i64, i64* %PC
  %3494 = add i64 %3493, 3
  store i64 %3494, i64* %PC
  %3495 = inttoptr i64 %3492 to i32*
  %3496 = load i32, i32* %3495
  %3497 = zext i32 %3496 to i64
  store i64 %3497, i64* %RDX, align 8, !tbaa !2428
  %3498 = load i64, i64* %RBP
  %3499 = sub i64 %3498, 44
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 3
  store i64 %3501, i64* %PC
  %3502 = inttoptr i64 %3499 to i32*
  %3503 = load i32, i32* %3502
  %3504 = zext i32 %3503 to i64
  store i64 %3504, i64* %RSI, align 8, !tbaa !2428
  %3505 = load i64, i64* %RSI
  %3506 = load i64, i64* %PC
  %3507 = add i64 %3506, 3
  store i64 %3507, i64* %PC
  %3508 = trunc i64 %3505 to i32
  %3509 = sub i32 %3508, 3
  %3510 = zext i32 %3509 to i64
  store i64 %3510, i64* %RSI, align 8, !tbaa !2428
  %3511 = icmp ult i32 %3508, 3
  %3512 = zext i1 %3511 to i8
  %3513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3512, i8* %3513, align 1, !tbaa !2432
  %3514 = and i32 %3509, 255
  %3515 = call i32 @llvm.ctpop.i32(i32 %3514) #16
  %3516 = trunc i32 %3515 to i8
  %3517 = and i8 %3516, 1
  %3518 = xor i8 %3517, 1
  %3519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3518, i8* %3519, align 1, !tbaa !2446
  %3520 = xor i64 3, %3505
  %3521 = trunc i64 %3520 to i32
  %3522 = xor i32 %3521, %3509
  %3523 = lshr i32 %3522, 4
  %3524 = trunc i32 %3523 to i8
  %3525 = and i8 %3524, 1
  %3526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3525, i8* %3526, align 1, !tbaa !2447
  %3527 = icmp eq i32 %3509, 0
  %3528 = zext i1 %3527 to i8
  %3529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3528, i8* %3529, align 1, !tbaa !2448
  %3530 = lshr i32 %3509, 31
  %3531 = trunc i32 %3530 to i8
  %3532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3531, i8* %3532, align 1, !tbaa !2449
  %3533 = lshr i32 %3508, 31
  %3534 = xor i32 %3530, %3533
  %3535 = add nuw nsw i32 %3534, %3533
  %3536 = icmp eq i32 %3535, 2
  %3537 = zext i1 %3536 to i8
  %3538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3537, i8* %3538, align 1, !tbaa !2450
  %3539 = load i64, i64* %RDX
  %3540 = load i32, i32* %ESI
  %3541 = zext i32 %3540 to i64
  %3542 = load i64, i64* %PC
  %3543 = add i64 %3542, 3
  store i64 %3543, i64* %PC
  %3544 = shl i64 %3539, 32
  %3545 = ashr exact i64 %3544, 32
  %3546 = shl i64 %3541, 32
  %3547 = ashr exact i64 %3546, 32
  %3548 = mul nsw i64 %3547, %3545
  %3549 = trunc i64 %3548 to i32
  %3550 = and i64 %3548, 4294967295
  store i64 %3550, i64* %RDX, align 8, !tbaa !2428
  %3551 = shl i64 %3548, 32
  %3552 = ashr exact i64 %3551, 32
  %3553 = icmp ne i64 %3552, %3548
  %3554 = zext i1 %3553 to i8
  %3555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3554, i8* %3555, align 1, !tbaa !2432
  %3556 = and i32 %3549, 255
  %3557 = call i32 @llvm.ctpop.i32(i32 %3556) #16
  %3558 = trunc i32 %3557 to i8
  %3559 = and i8 %3558, 1
  %3560 = xor i8 %3559, 1
  %3561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3560, i8* %3561, align 1, !tbaa !2446
  %3562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3562, align 1, !tbaa !2447
  %3563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3563, align 1, !tbaa !2448
  %3564 = lshr i32 %3549, 31
  %3565 = trunc i32 %3564 to i8
  %3566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3565, i8* %3566, align 1, !tbaa !2449
  %3567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3554, i8* %3567, align 1, !tbaa !2450
  %3568 = load i64, i64* %RDX
  %3569 = load i64, i64* %RBP
  %3570 = sub i64 %3569, 48
  %3571 = load i64, i64* %PC
  %3572 = add i64 %3571, 3
  store i64 %3572, i64* %PC
  %3573 = trunc i64 %3568 to i32
  %3574 = inttoptr i64 %3570 to i32*
  %3575 = load i32, i32* %3574
  %3576 = add i32 %3575, %3573
  %3577 = zext i32 %3576 to i64
  store i64 %3577, i64* %RDX, align 8, !tbaa !2428
  %3578 = icmp ult i32 %3576, %3573
  %3579 = icmp ult i32 %3576, %3575
  %3580 = or i1 %3578, %3579
  %3581 = zext i1 %3580 to i8
  %3582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3581, i8* %3582, align 1, !tbaa !2432
  %3583 = and i32 %3576, 255
  %3584 = call i32 @llvm.ctpop.i32(i32 %3583) #16
  %3585 = trunc i32 %3584 to i8
  %3586 = and i8 %3585, 1
  %3587 = xor i8 %3586, 1
  %3588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3587, i8* %3588, align 1, !tbaa !2446
  %3589 = xor i32 %3575, %3573
  %3590 = xor i32 %3589, %3576
  %3591 = lshr i32 %3590, 4
  %3592 = trunc i32 %3591 to i8
  %3593 = and i8 %3592, 1
  %3594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3593, i8* %3594, align 1, !tbaa !2447
  %3595 = icmp eq i32 %3576, 0
  %3596 = zext i1 %3595 to i8
  %3597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3596, i8* %3597, align 1, !tbaa !2448
  %3598 = lshr i32 %3576, 31
  %3599 = trunc i32 %3598 to i8
  %3600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3599, i8* %3600, align 1, !tbaa !2449
  %3601 = lshr i32 %3573, 31
  %3602 = lshr i32 %3575, 31
  %3603 = xor i32 %3598, %3601
  %3604 = xor i32 %3598, %3602
  %3605 = add nuw nsw i32 %3603, %3604
  %3606 = icmp eq i32 %3605, 2
  %3607 = zext i1 %3606 to i8
  %3608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3607, i8* %3608, align 1, !tbaa !2450
  %3609 = load i32, i32* %EDX
  %3610 = zext i32 %3609 to i64
  %3611 = load i64, i64* %PC
  %3612 = add i64 %3611, 3
  store i64 %3612, i64* %PC
  %3613 = shl i64 %3610, 32
  %3614 = ashr exact i64 %3613, 32
  store i64 %3614, i64* %RCX, align 8, !tbaa !2428
  %3615 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3616 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3617 = load i64, i64* %RAX
  %3618 = load i64, i64* %RCX
  %3619 = mul i64 %3618, 4
  %3620 = add i64 %3619, %3617
  %3621 = load i64, i64* %PC
  %3622 = add i64 %3621, 5
  store i64 %3622, i64* %PC
  %3623 = bitcast i8* %3616 to <2 x float>*
  %3624 = load <2 x float>, <2 x float>* %3623, align 1
  %3625 = getelementptr inbounds i8, i8* %3616, i64 8
  %3626 = bitcast i8* %3625 to <2 x i32>*
  %3627 = load <2 x i32>, <2 x i32>* %3626, align 1
  %3628 = inttoptr i64 %3620 to float*
  %3629 = load float, float* %3628
  %3630 = extractelement <2 x float> %3624, i32 0
  %3631 = fmul float %3630, %3629
  %3632 = bitcast i8* %3615 to float*
  store float %3631, float* %3632, align 1, !tbaa !2452
  %3633 = bitcast <2 x float> %3624 to <2 x i32>
  %3634 = extractelement <2 x i32> %3633, i32 1
  %3635 = getelementptr inbounds i8, i8* %3615, i64 4
  %3636 = bitcast i8* %3635 to i32*
  store i32 %3634, i32* %3636, align 1, !tbaa !2452
  %3637 = extractelement <2 x i32> %3627, i32 0
  %3638 = getelementptr inbounds i8, i8* %3615, i64 8
  %3639 = bitcast i8* %3638 to i32*
  store i32 %3637, i32* %3639, align 1, !tbaa !2452
  %3640 = extractelement <2 x i32> %3627, i32 1
  %3641 = getelementptr inbounds i8, i8* %3615, i64 12
  %3642 = bitcast i8* %3641 to i32*
  store i32 %3640, i32* %3642, align 1, !tbaa !2452
  %3643 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3644 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3645 = bitcast %union.vec128_t* %XMM1 to i8*
  %3646 = load i64, i64* %PC
  %3647 = add i64 %3646, 4
  store i64 %3647, i64* %PC
  %3648 = bitcast i8* %3644 to <2 x float>*
  %3649 = load <2 x float>, <2 x float>* %3648, align 1
  %3650 = getelementptr inbounds i8, i8* %3644, i64 8
  %3651 = bitcast i8* %3650 to <2 x i32>*
  %3652 = load <2 x i32>, <2 x i32>* %3651, align 1
  %3653 = bitcast i8* %3645 to <2 x float>*
  %3654 = load <2 x float>, <2 x float>* %3653, align 1
  %3655 = extractelement <2 x float> %3649, i32 0
  %3656 = extractelement <2 x float> %3654, i32 0
  %3657 = fadd float %3655, %3656
  %3658 = bitcast i8* %3643 to float*
  store float %3657, float* %3658, align 1, !tbaa !2452
  %3659 = bitcast <2 x float> %3649 to <2 x i32>
  %3660 = extractelement <2 x i32> %3659, i32 1
  %3661 = getelementptr inbounds i8, i8* %3643, i64 4
  %3662 = bitcast i8* %3661 to i32*
  store i32 %3660, i32* %3662, align 1, !tbaa !2452
  %3663 = extractelement <2 x i32> %3652, i32 0
  %3664 = getelementptr inbounds i8, i8* %3643, i64 8
  %3665 = bitcast i8* %3664 to i32*
  store i32 %3663, i32* %3665, align 1, !tbaa !2452
  %3666 = extractelement <2 x i32> %3652, i32 1
  %3667 = getelementptr inbounds i8, i8* %3643, i64 12
  %3668 = bitcast i8* %3667 to i32*
  store i32 %3666, i32* %3668, align 1, !tbaa !2452
  %3669 = load i64, i64* %RBP
  %3670 = sub i64 %3669, 32
  %3671 = load i64, i64* %PC
  %3672 = add i64 %3671, 4
  store i64 %3672, i64* %PC
  %3673 = inttoptr i64 %3670 to i64*
  %3674 = load i64, i64* %3673
  store i64 %3674, i64* %RAX, align 8, !tbaa !2428
  %3675 = load i64, i64* %RBP
  %3676 = sub i64 %3675, 44
  %3677 = load i64, i64* %PC
  %3678 = add i64 %3677, 3
  store i64 %3678, i64* %PC
  %3679 = inttoptr i64 %3676 to i32*
  %3680 = load i32, i32* %3679
  %3681 = zext i32 %3680 to i64
  store i64 %3681, i64* %RDX, align 8, !tbaa !2428
  %3682 = load i64, i64* %RDX
  %3683 = load i64, i64* %PC
  %3684 = add i64 %3683, 3
  store i64 %3684, i64* %PC
  %3685 = trunc i64 %3682 to i32
  %3686 = sub i32 %3685, 2
  %3687 = zext i32 %3686 to i64
  store i64 %3687, i64* %RDX, align 8, !tbaa !2428
  %3688 = icmp ult i32 %3685, 2
  %3689 = zext i1 %3688 to i8
  %3690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3689, i8* %3690, align 1, !tbaa !2432
  %3691 = and i32 %3686, 255
  %3692 = call i32 @llvm.ctpop.i32(i32 %3691) #16
  %3693 = trunc i32 %3692 to i8
  %3694 = and i8 %3693, 1
  %3695 = xor i8 %3694, 1
  %3696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3695, i8* %3696, align 1, !tbaa !2446
  %3697 = xor i64 2, %3682
  %3698 = trunc i64 %3697 to i32
  %3699 = xor i32 %3698, %3686
  %3700 = lshr i32 %3699, 4
  %3701 = trunc i32 %3700 to i8
  %3702 = and i8 %3701, 1
  %3703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3702, i8* %3703, align 1, !tbaa !2447
  %3704 = icmp eq i32 %3686, 0
  %3705 = zext i1 %3704 to i8
  %3706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3705, i8* %3706, align 1, !tbaa !2448
  %3707 = lshr i32 %3686, 31
  %3708 = trunc i32 %3707 to i8
  %3709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3708, i8* %3709, align 1, !tbaa !2449
  %3710 = lshr i32 %3685, 31
  %3711 = xor i32 %3707, %3710
  %3712 = add nuw nsw i32 %3711, %3710
  %3713 = icmp eq i32 %3712, 2
  %3714 = zext i1 %3713 to i8
  %3715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3714, i8* %3715, align 1, !tbaa !2450
  %3716 = load i32, i32* %EDX
  %3717 = zext i32 %3716 to i64
  %3718 = load i64, i64* %PC
  %3719 = add i64 %3718, 3
  store i64 %3719, i64* %PC
  %3720 = shl i64 %3717, 32
  %3721 = ashr exact i64 %3720, 32
  store i64 %3721, i64* %RCX, align 8, !tbaa !2428
  %3722 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3723 = load i64, i64* %RAX
  %3724 = load i64, i64* %RCX
  %3725 = mul i64 %3724, 4
  %3726 = add i64 %3725, %3723
  %3727 = load i64, i64* %PC
  %3728 = add i64 %3727, 5
  store i64 %3728, i64* %PC
  %3729 = inttoptr i64 %3726 to float*
  %3730 = load float, float* %3729
  %3731 = bitcast i8* %3722 to float*
  store float %3730, float* %3731, align 1, !tbaa !2452
  %3732 = getelementptr inbounds i8, i8* %3722, i64 4
  %3733 = bitcast i8* %3732 to float*
  store float 0.000000e+00, float* %3733, align 1, !tbaa !2452
  %3734 = getelementptr inbounds i8, i8* %3722, i64 8
  %3735 = bitcast i8* %3734 to float*
  store float 0.000000e+00, float* %3735, align 1, !tbaa !2452
  %3736 = getelementptr inbounds i8, i8* %3722, i64 12
  %3737 = bitcast i8* %3736 to float*
  store float 0.000000e+00, float* %3737, align 1, !tbaa !2452
  %3738 = load i64, i64* %RBP
  %3739 = sub i64 %3738, 40
  %3740 = load i64, i64* %PC
  %3741 = add i64 %3740, 4
  store i64 %3741, i64* %PC
  %3742 = inttoptr i64 %3739 to i64*
  %3743 = load i64, i64* %3742
  store i64 %3743, i64* %RAX, align 8, !tbaa !2428
  %3744 = load i64, i64* %RBP
  %3745 = sub i64 %3744, 24
  %3746 = load i64, i64* %PC
  %3747 = add i64 %3746, 3
  store i64 %3747, i64* %PC
  %3748 = inttoptr i64 %3745 to i32*
  %3749 = load i32, i32* %3748
  %3750 = zext i32 %3749 to i64
  store i64 %3750, i64* %RDX, align 8, !tbaa !2428
  %3751 = load i64, i64* %RBP
  %3752 = sub i64 %3751, 44
  %3753 = load i64, i64* %PC
  %3754 = add i64 %3753, 3
  store i64 %3754, i64* %PC
  %3755 = inttoptr i64 %3752 to i32*
  %3756 = load i32, i32* %3755
  %3757 = zext i32 %3756 to i64
  store i64 %3757, i64* %RSI, align 8, !tbaa !2428
  %3758 = load i64, i64* %RSI
  %3759 = load i64, i64* %PC
  %3760 = add i64 %3759, 3
  store i64 %3760, i64* %PC
  %3761 = trunc i64 %3758 to i32
  %3762 = sub i32 %3761, 2
  %3763 = zext i32 %3762 to i64
  store i64 %3763, i64* %RSI, align 8, !tbaa !2428
  %3764 = icmp ult i32 %3761, 2
  %3765 = zext i1 %3764 to i8
  %3766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3765, i8* %3766, align 1, !tbaa !2432
  %3767 = and i32 %3762, 255
  %3768 = call i32 @llvm.ctpop.i32(i32 %3767) #16
  %3769 = trunc i32 %3768 to i8
  %3770 = and i8 %3769, 1
  %3771 = xor i8 %3770, 1
  %3772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3771, i8* %3772, align 1, !tbaa !2446
  %3773 = xor i64 2, %3758
  %3774 = trunc i64 %3773 to i32
  %3775 = xor i32 %3774, %3762
  %3776 = lshr i32 %3775, 4
  %3777 = trunc i32 %3776 to i8
  %3778 = and i8 %3777, 1
  %3779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3778, i8* %3779, align 1, !tbaa !2447
  %3780 = icmp eq i32 %3762, 0
  %3781 = zext i1 %3780 to i8
  %3782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3781, i8* %3782, align 1, !tbaa !2448
  %3783 = lshr i32 %3762, 31
  %3784 = trunc i32 %3783 to i8
  %3785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3784, i8* %3785, align 1, !tbaa !2449
  %3786 = lshr i32 %3761, 31
  %3787 = xor i32 %3783, %3786
  %3788 = add nuw nsw i32 %3787, %3786
  %3789 = icmp eq i32 %3788, 2
  %3790 = zext i1 %3789 to i8
  %3791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3790, i8* %3791, align 1, !tbaa !2450
  %3792 = load i64, i64* %RDX
  %3793 = load i32, i32* %ESI
  %3794 = zext i32 %3793 to i64
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 3
  store i64 %3796, i64* %PC
  %3797 = shl i64 %3792, 32
  %3798 = ashr exact i64 %3797, 32
  %3799 = shl i64 %3794, 32
  %3800 = ashr exact i64 %3799, 32
  %3801 = mul nsw i64 %3800, %3798
  %3802 = trunc i64 %3801 to i32
  %3803 = and i64 %3801, 4294967295
  store i64 %3803, i64* %RDX, align 8, !tbaa !2428
  %3804 = shl i64 %3801, 32
  %3805 = ashr exact i64 %3804, 32
  %3806 = icmp ne i64 %3805, %3801
  %3807 = zext i1 %3806 to i8
  %3808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3807, i8* %3808, align 1, !tbaa !2432
  %3809 = and i32 %3802, 255
  %3810 = call i32 @llvm.ctpop.i32(i32 %3809) #16
  %3811 = trunc i32 %3810 to i8
  %3812 = and i8 %3811, 1
  %3813 = xor i8 %3812, 1
  %3814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3813, i8* %3814, align 1, !tbaa !2446
  %3815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3815, align 1, !tbaa !2447
  %3816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3816, align 1, !tbaa !2448
  %3817 = lshr i32 %3802, 31
  %3818 = trunc i32 %3817 to i8
  %3819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3818, i8* %3819, align 1, !tbaa !2449
  %3820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3807, i8* %3820, align 1, !tbaa !2450
  %3821 = load i64, i64* %RDX
  %3822 = load i64, i64* %RBP
  %3823 = sub i64 %3822, 48
  %3824 = load i64, i64* %PC
  %3825 = add i64 %3824, 3
  store i64 %3825, i64* %PC
  %3826 = trunc i64 %3821 to i32
  %3827 = inttoptr i64 %3823 to i32*
  %3828 = load i32, i32* %3827
  %3829 = add i32 %3828, %3826
  %3830 = zext i32 %3829 to i64
  store i64 %3830, i64* %RDX, align 8, !tbaa !2428
  %3831 = icmp ult i32 %3829, %3826
  %3832 = icmp ult i32 %3829, %3828
  %3833 = or i1 %3831, %3832
  %3834 = zext i1 %3833 to i8
  %3835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3834, i8* %3835, align 1, !tbaa !2432
  %3836 = and i32 %3829, 255
  %3837 = call i32 @llvm.ctpop.i32(i32 %3836) #16
  %3838 = trunc i32 %3837 to i8
  %3839 = and i8 %3838, 1
  %3840 = xor i8 %3839, 1
  %3841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3840, i8* %3841, align 1, !tbaa !2446
  %3842 = xor i32 %3828, %3826
  %3843 = xor i32 %3842, %3829
  %3844 = lshr i32 %3843, 4
  %3845 = trunc i32 %3844 to i8
  %3846 = and i8 %3845, 1
  %3847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3846, i8* %3847, align 1, !tbaa !2447
  %3848 = icmp eq i32 %3829, 0
  %3849 = zext i1 %3848 to i8
  %3850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3849, i8* %3850, align 1, !tbaa !2448
  %3851 = lshr i32 %3829, 31
  %3852 = trunc i32 %3851 to i8
  %3853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3852, i8* %3853, align 1, !tbaa !2449
  %3854 = lshr i32 %3826, 31
  %3855 = lshr i32 %3828, 31
  %3856 = xor i32 %3851, %3854
  %3857 = xor i32 %3851, %3855
  %3858 = add nuw nsw i32 %3856, %3857
  %3859 = icmp eq i32 %3858, 2
  %3860 = zext i1 %3859 to i8
  %3861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3860, i8* %3861, align 1, !tbaa !2450
  %3862 = load i32, i32* %EDX
  %3863 = zext i32 %3862 to i64
  %3864 = load i64, i64* %PC
  %3865 = add i64 %3864, 3
  store i64 %3865, i64* %PC
  %3866 = shl i64 %3863, 32
  %3867 = ashr exact i64 %3866, 32
  store i64 %3867, i64* %RCX, align 8, !tbaa !2428
  %3868 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3869 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3870 = load i64, i64* %RAX
  %3871 = load i64, i64* %RCX
  %3872 = mul i64 %3871, 4
  %3873 = add i64 %3872, %3870
  %3874 = load i64, i64* %PC
  %3875 = add i64 %3874, 5
  store i64 %3875, i64* %PC
  %3876 = bitcast i8* %3869 to <2 x float>*
  %3877 = load <2 x float>, <2 x float>* %3876, align 1
  %3878 = getelementptr inbounds i8, i8* %3869, i64 8
  %3879 = bitcast i8* %3878 to <2 x i32>*
  %3880 = load <2 x i32>, <2 x i32>* %3879, align 1
  %3881 = inttoptr i64 %3873 to float*
  %3882 = load float, float* %3881
  %3883 = extractelement <2 x float> %3877, i32 0
  %3884 = fmul float %3883, %3882
  %3885 = bitcast i8* %3868 to float*
  store float %3884, float* %3885, align 1, !tbaa !2452
  %3886 = bitcast <2 x float> %3877 to <2 x i32>
  %3887 = extractelement <2 x i32> %3886, i32 1
  %3888 = getelementptr inbounds i8, i8* %3868, i64 4
  %3889 = bitcast i8* %3888 to i32*
  store i32 %3887, i32* %3889, align 1, !tbaa !2452
  %3890 = extractelement <2 x i32> %3880, i32 0
  %3891 = getelementptr inbounds i8, i8* %3868, i64 8
  %3892 = bitcast i8* %3891 to i32*
  store i32 %3890, i32* %3892, align 1, !tbaa !2452
  %3893 = extractelement <2 x i32> %3880, i32 1
  %3894 = getelementptr inbounds i8, i8* %3868, i64 12
  %3895 = bitcast i8* %3894 to i32*
  store i32 %3893, i32* %3895, align 1, !tbaa !2452
  %3896 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3897 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3898 = bitcast %union.vec128_t* %XMM1 to i8*
  %3899 = load i64, i64* %PC
  %3900 = add i64 %3899, 4
  store i64 %3900, i64* %PC
  %3901 = bitcast i8* %3897 to <2 x float>*
  %3902 = load <2 x float>, <2 x float>* %3901, align 1
  %3903 = getelementptr inbounds i8, i8* %3897, i64 8
  %3904 = bitcast i8* %3903 to <2 x i32>*
  %3905 = load <2 x i32>, <2 x i32>* %3904, align 1
  %3906 = bitcast i8* %3898 to <2 x float>*
  %3907 = load <2 x float>, <2 x float>* %3906, align 1
  %3908 = extractelement <2 x float> %3902, i32 0
  %3909 = extractelement <2 x float> %3907, i32 0
  %3910 = fadd float %3908, %3909
  %3911 = bitcast i8* %3896 to float*
  store float %3910, float* %3911, align 1, !tbaa !2452
  %3912 = bitcast <2 x float> %3902 to <2 x i32>
  %3913 = extractelement <2 x i32> %3912, i32 1
  %3914 = getelementptr inbounds i8, i8* %3896, i64 4
  %3915 = bitcast i8* %3914 to i32*
  store i32 %3913, i32* %3915, align 1, !tbaa !2452
  %3916 = extractelement <2 x i32> %3905, i32 0
  %3917 = getelementptr inbounds i8, i8* %3896, i64 8
  %3918 = bitcast i8* %3917 to i32*
  store i32 %3916, i32* %3918, align 1, !tbaa !2452
  %3919 = extractelement <2 x i32> %3905, i32 1
  %3920 = getelementptr inbounds i8, i8* %3896, i64 12
  %3921 = bitcast i8* %3920 to i32*
  store i32 %3919, i32* %3921, align 1, !tbaa !2452
  %3922 = load i64, i64* %RBP
  %3923 = sub i64 %3922, 32
  %3924 = load i64, i64* %PC
  %3925 = add i64 %3924, 4
  store i64 %3925, i64* %PC
  %3926 = inttoptr i64 %3923 to i64*
  %3927 = load i64, i64* %3926
  store i64 %3927, i64* %RAX, align 8, !tbaa !2428
  %3928 = load i64, i64* %RBP
  %3929 = sub i64 %3928, 44
  %3930 = load i64, i64* %PC
  %3931 = add i64 %3930, 3
  store i64 %3931, i64* %PC
  %3932 = inttoptr i64 %3929 to i32*
  %3933 = load i32, i32* %3932
  %3934 = zext i32 %3933 to i64
  store i64 %3934, i64* %RDX, align 8, !tbaa !2428
  %3935 = load i64, i64* %RDX
  %3936 = load i64, i64* %PC
  %3937 = add i64 %3936, 3
  store i64 %3937, i64* %PC
  %3938 = trunc i64 %3935 to i32
  %3939 = sub i32 %3938, 1
  %3940 = zext i32 %3939 to i64
  store i64 %3940, i64* %RDX, align 8, !tbaa !2428
  %3941 = icmp ult i32 %3938, 1
  %3942 = zext i1 %3941 to i8
  %3943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3942, i8* %3943, align 1, !tbaa !2432
  %3944 = and i32 %3939, 255
  %3945 = call i32 @llvm.ctpop.i32(i32 %3944) #16
  %3946 = trunc i32 %3945 to i8
  %3947 = and i8 %3946, 1
  %3948 = xor i8 %3947, 1
  %3949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3948, i8* %3949, align 1, !tbaa !2446
  %3950 = xor i64 1, %3935
  %3951 = trunc i64 %3950 to i32
  %3952 = xor i32 %3951, %3939
  %3953 = lshr i32 %3952, 4
  %3954 = trunc i32 %3953 to i8
  %3955 = and i8 %3954, 1
  %3956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3955, i8* %3956, align 1, !tbaa !2447
  %3957 = icmp eq i32 %3939, 0
  %3958 = zext i1 %3957 to i8
  %3959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3958, i8* %3959, align 1, !tbaa !2448
  %3960 = lshr i32 %3939, 31
  %3961 = trunc i32 %3960 to i8
  %3962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3961, i8* %3962, align 1, !tbaa !2449
  %3963 = lshr i32 %3938, 31
  %3964 = xor i32 %3960, %3963
  %3965 = add nuw nsw i32 %3964, %3963
  %3966 = icmp eq i32 %3965, 2
  %3967 = zext i1 %3966 to i8
  %3968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3967, i8* %3968, align 1, !tbaa !2450
  %3969 = load i32, i32* %EDX
  %3970 = zext i32 %3969 to i64
  %3971 = load i64, i64* %PC
  %3972 = add i64 %3971, 3
  store i64 %3972, i64* %PC
  %3973 = shl i64 %3970, 32
  %3974 = ashr exact i64 %3973, 32
  store i64 %3974, i64* %RCX, align 8, !tbaa !2428
  %3975 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3976 = load i64, i64* %RAX
  %3977 = load i64, i64* %RCX
  %3978 = mul i64 %3977, 4
  %3979 = add i64 %3978, %3976
  %3980 = load i64, i64* %PC
  %3981 = add i64 %3980, 5
  store i64 %3981, i64* %PC
  %3982 = inttoptr i64 %3979 to float*
  %3983 = load float, float* %3982
  %3984 = bitcast i8* %3975 to float*
  store float %3983, float* %3984, align 1, !tbaa !2452
  %3985 = getelementptr inbounds i8, i8* %3975, i64 4
  %3986 = bitcast i8* %3985 to float*
  store float 0.000000e+00, float* %3986, align 1, !tbaa !2452
  %3987 = getelementptr inbounds i8, i8* %3975, i64 8
  %3988 = bitcast i8* %3987 to float*
  store float 0.000000e+00, float* %3988, align 1, !tbaa !2452
  %3989 = getelementptr inbounds i8, i8* %3975, i64 12
  %3990 = bitcast i8* %3989 to float*
  store float 0.000000e+00, float* %3990, align 1, !tbaa !2452
  %3991 = load i64, i64* %RBP
  %3992 = sub i64 %3991, 40
  %3993 = load i64, i64* %PC
  %3994 = add i64 %3993, 4
  store i64 %3994, i64* %PC
  %3995 = inttoptr i64 %3992 to i64*
  %3996 = load i64, i64* %3995
  store i64 %3996, i64* %RAX, align 8, !tbaa !2428
  %3997 = load i64, i64* %RBP
  %3998 = sub i64 %3997, 24
  %3999 = load i64, i64* %PC
  %4000 = add i64 %3999, 3
  store i64 %4000, i64* %PC
  %4001 = inttoptr i64 %3998 to i32*
  %4002 = load i32, i32* %4001
  %4003 = zext i32 %4002 to i64
  store i64 %4003, i64* %RDX, align 8, !tbaa !2428
  %4004 = load i64, i64* %RBP
  %4005 = sub i64 %4004, 44
  %4006 = load i64, i64* %PC
  %4007 = add i64 %4006, 3
  store i64 %4007, i64* %PC
  %4008 = inttoptr i64 %4005 to i32*
  %4009 = load i32, i32* %4008
  %4010 = zext i32 %4009 to i64
  store i64 %4010, i64* %RSI, align 8, !tbaa !2428
  %4011 = load i64, i64* %RSI
  %4012 = load i64, i64* %PC
  %4013 = add i64 %4012, 3
  store i64 %4013, i64* %PC
  %4014 = trunc i64 %4011 to i32
  %4015 = sub i32 %4014, 1
  %4016 = zext i32 %4015 to i64
  store i64 %4016, i64* %RSI, align 8, !tbaa !2428
  %4017 = icmp ult i32 %4014, 1
  %4018 = zext i1 %4017 to i8
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4018, i8* %4019, align 1, !tbaa !2432
  %4020 = and i32 %4015, 255
  %4021 = call i32 @llvm.ctpop.i32(i32 %4020) #16
  %4022 = trunc i32 %4021 to i8
  %4023 = and i8 %4022, 1
  %4024 = xor i8 %4023, 1
  %4025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4024, i8* %4025, align 1, !tbaa !2446
  %4026 = xor i64 1, %4011
  %4027 = trunc i64 %4026 to i32
  %4028 = xor i32 %4027, %4015
  %4029 = lshr i32 %4028, 4
  %4030 = trunc i32 %4029 to i8
  %4031 = and i8 %4030, 1
  %4032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4031, i8* %4032, align 1, !tbaa !2447
  %4033 = icmp eq i32 %4015, 0
  %4034 = zext i1 %4033 to i8
  %4035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4034, i8* %4035, align 1, !tbaa !2448
  %4036 = lshr i32 %4015, 31
  %4037 = trunc i32 %4036 to i8
  %4038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4037, i8* %4038, align 1, !tbaa !2449
  %4039 = lshr i32 %4014, 31
  %4040 = xor i32 %4036, %4039
  %4041 = add nuw nsw i32 %4040, %4039
  %4042 = icmp eq i32 %4041, 2
  %4043 = zext i1 %4042 to i8
  %4044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4043, i8* %4044, align 1, !tbaa !2450
  %4045 = load i64, i64* %RDX
  %4046 = load i32, i32* %ESI
  %4047 = zext i32 %4046 to i64
  %4048 = load i64, i64* %PC
  %4049 = add i64 %4048, 3
  store i64 %4049, i64* %PC
  %4050 = shl i64 %4045, 32
  %4051 = ashr exact i64 %4050, 32
  %4052 = shl i64 %4047, 32
  %4053 = ashr exact i64 %4052, 32
  %4054 = mul nsw i64 %4053, %4051
  %4055 = trunc i64 %4054 to i32
  %4056 = and i64 %4054, 4294967295
  store i64 %4056, i64* %RDX, align 8, !tbaa !2428
  %4057 = shl i64 %4054, 32
  %4058 = ashr exact i64 %4057, 32
  %4059 = icmp ne i64 %4058, %4054
  %4060 = zext i1 %4059 to i8
  %4061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4060, i8* %4061, align 1, !tbaa !2432
  %4062 = and i32 %4055, 255
  %4063 = call i32 @llvm.ctpop.i32(i32 %4062) #16
  %4064 = trunc i32 %4063 to i8
  %4065 = and i8 %4064, 1
  %4066 = xor i8 %4065, 1
  %4067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4066, i8* %4067, align 1, !tbaa !2446
  %4068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4068, align 1, !tbaa !2447
  %4069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4069, align 1, !tbaa !2448
  %4070 = lshr i32 %4055, 31
  %4071 = trunc i32 %4070 to i8
  %4072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4071, i8* %4072, align 1, !tbaa !2449
  %4073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4060, i8* %4073, align 1, !tbaa !2450
  %4074 = load i64, i64* %RDX
  %4075 = load i64, i64* %RBP
  %4076 = sub i64 %4075, 48
  %4077 = load i64, i64* %PC
  %4078 = add i64 %4077, 3
  store i64 %4078, i64* %PC
  %4079 = trunc i64 %4074 to i32
  %4080 = inttoptr i64 %4076 to i32*
  %4081 = load i32, i32* %4080
  %4082 = add i32 %4081, %4079
  %4083 = zext i32 %4082 to i64
  store i64 %4083, i64* %RDX, align 8, !tbaa !2428
  %4084 = icmp ult i32 %4082, %4079
  %4085 = icmp ult i32 %4082, %4081
  %4086 = or i1 %4084, %4085
  %4087 = zext i1 %4086 to i8
  %4088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4087, i8* %4088, align 1, !tbaa !2432
  %4089 = and i32 %4082, 255
  %4090 = call i32 @llvm.ctpop.i32(i32 %4089) #16
  %4091 = trunc i32 %4090 to i8
  %4092 = and i8 %4091, 1
  %4093 = xor i8 %4092, 1
  %4094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4093, i8* %4094, align 1, !tbaa !2446
  %4095 = xor i32 %4081, %4079
  %4096 = xor i32 %4095, %4082
  %4097 = lshr i32 %4096, 4
  %4098 = trunc i32 %4097 to i8
  %4099 = and i8 %4098, 1
  %4100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4099, i8* %4100, align 1, !tbaa !2447
  %4101 = icmp eq i32 %4082, 0
  %4102 = zext i1 %4101 to i8
  %4103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4102, i8* %4103, align 1, !tbaa !2448
  %4104 = lshr i32 %4082, 31
  %4105 = trunc i32 %4104 to i8
  %4106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4105, i8* %4106, align 1, !tbaa !2449
  %4107 = lshr i32 %4079, 31
  %4108 = lshr i32 %4081, 31
  %4109 = xor i32 %4104, %4107
  %4110 = xor i32 %4104, %4108
  %4111 = add nuw nsw i32 %4109, %4110
  %4112 = icmp eq i32 %4111, 2
  %4113 = zext i1 %4112 to i8
  %4114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4113, i8* %4114, align 1, !tbaa !2450
  %4115 = load i32, i32* %EDX
  %4116 = zext i32 %4115 to i64
  %4117 = load i64, i64* %PC
  %4118 = add i64 %4117, 3
  store i64 %4118, i64* %PC
  %4119 = shl i64 %4116, 32
  %4120 = ashr exact i64 %4119, 32
  store i64 %4120, i64* %RCX, align 8, !tbaa !2428
  %4121 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4122 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4123 = load i64, i64* %RAX
  %4124 = load i64, i64* %RCX
  %4125 = mul i64 %4124, 4
  %4126 = add i64 %4125, %4123
  %4127 = load i64, i64* %PC
  %4128 = add i64 %4127, 5
  store i64 %4128, i64* %PC
  %4129 = bitcast i8* %4122 to <2 x float>*
  %4130 = load <2 x float>, <2 x float>* %4129, align 1
  %4131 = getelementptr inbounds i8, i8* %4122, i64 8
  %4132 = bitcast i8* %4131 to <2 x i32>*
  %4133 = load <2 x i32>, <2 x i32>* %4132, align 1
  %4134 = inttoptr i64 %4126 to float*
  %4135 = load float, float* %4134
  %4136 = extractelement <2 x float> %4130, i32 0
  %4137 = fmul float %4136, %4135
  %4138 = bitcast i8* %4121 to float*
  store float %4137, float* %4138, align 1, !tbaa !2452
  %4139 = bitcast <2 x float> %4130 to <2 x i32>
  %4140 = extractelement <2 x i32> %4139, i32 1
  %4141 = getelementptr inbounds i8, i8* %4121, i64 4
  %4142 = bitcast i8* %4141 to i32*
  store i32 %4140, i32* %4142, align 1, !tbaa !2452
  %4143 = extractelement <2 x i32> %4133, i32 0
  %4144 = getelementptr inbounds i8, i8* %4121, i64 8
  %4145 = bitcast i8* %4144 to i32*
  store i32 %4143, i32* %4145, align 1, !tbaa !2452
  %4146 = extractelement <2 x i32> %4133, i32 1
  %4147 = getelementptr inbounds i8, i8* %4121, i64 12
  %4148 = bitcast i8* %4147 to i32*
  store i32 %4146, i32* %4148, align 1, !tbaa !2452
  %4149 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4150 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4151 = bitcast %union.vec128_t* %XMM1 to i8*
  %4152 = load i64, i64* %PC
  %4153 = add i64 %4152, 4
  store i64 %4153, i64* %PC
  %4154 = bitcast i8* %4150 to <2 x float>*
  %4155 = load <2 x float>, <2 x float>* %4154, align 1
  %4156 = getelementptr inbounds i8, i8* %4150, i64 8
  %4157 = bitcast i8* %4156 to <2 x i32>*
  %4158 = load <2 x i32>, <2 x i32>* %4157, align 1
  %4159 = bitcast i8* %4151 to <2 x float>*
  %4160 = load <2 x float>, <2 x float>* %4159, align 1
  %4161 = extractelement <2 x float> %4155, i32 0
  %4162 = extractelement <2 x float> %4160, i32 0
  %4163 = fadd float %4161, %4162
  %4164 = bitcast i8* %4149 to float*
  store float %4163, float* %4164, align 1, !tbaa !2452
  %4165 = bitcast <2 x float> %4155 to <2 x i32>
  %4166 = extractelement <2 x i32> %4165, i32 1
  %4167 = getelementptr inbounds i8, i8* %4149, i64 4
  %4168 = bitcast i8* %4167 to i32*
  store i32 %4166, i32* %4168, align 1, !tbaa !2452
  %4169 = extractelement <2 x i32> %4158, i32 0
  %4170 = getelementptr inbounds i8, i8* %4149, i64 8
  %4171 = bitcast i8* %4170 to i32*
  store i32 %4169, i32* %4171, align 1, !tbaa !2452
  %4172 = extractelement <2 x i32> %4158, i32 1
  %4173 = getelementptr inbounds i8, i8* %4149, i64 12
  %4174 = bitcast i8* %4173 to i32*
  store i32 %4172, i32* %4174, align 1, !tbaa !2452
  %4175 = load i64, i64* %RBP
  %4176 = sub i64 %4175, 32
  %4177 = load i64, i64* %PC
  %4178 = add i64 %4177, 4
  store i64 %4178, i64* %PC
  %4179 = inttoptr i64 %4176 to i64*
  %4180 = load i64, i64* %4179
  store i64 %4180, i64* %RAX, align 8, !tbaa !2428
  %4181 = load i64, i64* %RBP
  %4182 = sub i64 %4181, 44
  %4183 = load i64, i64* %PC
  %4184 = add i64 %4183, 4
  store i64 %4184, i64* %PC
  %4185 = inttoptr i64 %4182 to i32*
  %4186 = load i32, i32* %4185
  %4187 = sext i32 %4186 to i64
  store i64 %4187, i64* %RCX, align 8, !tbaa !2428
  %4188 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4189 = load i64, i64* %RAX
  %4190 = load i64, i64* %RCX
  %4191 = mul i64 %4190, 4
  %4192 = add i64 %4191, %4189
  %4193 = load i64, i64* %PC
  %4194 = add i64 %4193, 5
  store i64 %4194, i64* %PC
  %4195 = inttoptr i64 %4192 to float*
  %4196 = load float, float* %4195
  %4197 = bitcast i8* %4188 to float*
  store float %4196, float* %4197, align 1, !tbaa !2452
  %4198 = getelementptr inbounds i8, i8* %4188, i64 4
  %4199 = bitcast i8* %4198 to float*
  store float 0.000000e+00, float* %4199, align 1, !tbaa !2452
  %4200 = getelementptr inbounds i8, i8* %4188, i64 8
  %4201 = bitcast i8* %4200 to float*
  store float 0.000000e+00, float* %4201, align 1, !tbaa !2452
  %4202 = getelementptr inbounds i8, i8* %4188, i64 12
  %4203 = bitcast i8* %4202 to float*
  store float 0.000000e+00, float* %4203, align 1, !tbaa !2452
  %4204 = load i64, i64* %RBP
  %4205 = sub i64 %4204, 40
  %4206 = load i64, i64* %PC
  %4207 = add i64 %4206, 4
  store i64 %4207, i64* %PC
  %4208 = inttoptr i64 %4205 to i64*
  %4209 = load i64, i64* %4208
  store i64 %4209, i64* %RAX, align 8, !tbaa !2428
  %4210 = load i64, i64* %RBP
  %4211 = sub i64 %4210, 24
  %4212 = load i64, i64* %PC
  %4213 = add i64 %4212, 3
  store i64 %4213, i64* %PC
  %4214 = inttoptr i64 %4211 to i32*
  %4215 = load i32, i32* %4214
  %4216 = zext i32 %4215 to i64
  store i64 %4216, i64* %RDX, align 8, !tbaa !2428
  %4217 = load i64, i64* %RDX
  %4218 = load i64, i64* %RBP
  %4219 = sub i64 %4218, 44
  %4220 = load i64, i64* %PC
  %4221 = add i64 %4220, 4
  store i64 %4221, i64* %PC
  %4222 = inttoptr i64 %4219 to i32*
  %4223 = load i32, i32* %4222
  %4224 = shl i64 %4217, 32
  %4225 = ashr exact i64 %4224, 32
  %4226 = sext i32 %4223 to i64
  %4227 = mul nsw i64 %4226, %4225
  %4228 = trunc i64 %4227 to i32
  %4229 = and i64 %4227, 4294967295
  store i64 %4229, i64* %RDX, align 8, !tbaa !2428
  %4230 = shl i64 %4227, 32
  %4231 = ashr exact i64 %4230, 32
  %4232 = icmp ne i64 %4231, %4227
  %4233 = zext i1 %4232 to i8
  %4234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4233, i8* %4234, align 1, !tbaa !2432
  %4235 = and i32 %4228, 255
  %4236 = call i32 @llvm.ctpop.i32(i32 %4235) #16
  %4237 = trunc i32 %4236 to i8
  %4238 = and i8 %4237, 1
  %4239 = xor i8 %4238, 1
  %4240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4239, i8* %4240, align 1, !tbaa !2446
  %4241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4241, align 1, !tbaa !2447
  %4242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4242, align 1, !tbaa !2448
  %4243 = lshr i32 %4228, 31
  %4244 = trunc i32 %4243 to i8
  %4245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4244, i8* %4245, align 1, !tbaa !2449
  %4246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4233, i8* %4246, align 1, !tbaa !2450
  %4247 = load i64, i64* %RDX
  %4248 = load i64, i64* %RBP
  %4249 = sub i64 %4248, 48
  %4250 = load i64, i64* %PC
  %4251 = add i64 %4250, 3
  store i64 %4251, i64* %PC
  %4252 = trunc i64 %4247 to i32
  %4253 = inttoptr i64 %4249 to i32*
  %4254 = load i32, i32* %4253
  %4255 = add i32 %4254, %4252
  %4256 = zext i32 %4255 to i64
  store i64 %4256, i64* %RDX, align 8, !tbaa !2428
  %4257 = icmp ult i32 %4255, %4252
  %4258 = icmp ult i32 %4255, %4254
  %4259 = or i1 %4257, %4258
  %4260 = zext i1 %4259 to i8
  %4261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4260, i8* %4261, align 1, !tbaa !2432
  %4262 = and i32 %4255, 255
  %4263 = call i32 @llvm.ctpop.i32(i32 %4262) #16
  %4264 = trunc i32 %4263 to i8
  %4265 = and i8 %4264, 1
  %4266 = xor i8 %4265, 1
  %4267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4266, i8* %4267, align 1, !tbaa !2446
  %4268 = xor i32 %4254, %4252
  %4269 = xor i32 %4268, %4255
  %4270 = lshr i32 %4269, 4
  %4271 = trunc i32 %4270 to i8
  %4272 = and i8 %4271, 1
  %4273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4272, i8* %4273, align 1, !tbaa !2447
  %4274 = icmp eq i32 %4255, 0
  %4275 = zext i1 %4274 to i8
  %4276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4275, i8* %4276, align 1, !tbaa !2448
  %4277 = lshr i32 %4255, 31
  %4278 = trunc i32 %4277 to i8
  %4279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4278, i8* %4279, align 1, !tbaa !2449
  %4280 = lshr i32 %4252, 31
  %4281 = lshr i32 %4254, 31
  %4282 = xor i32 %4277, %4280
  %4283 = xor i32 %4277, %4281
  %4284 = add nuw nsw i32 %4282, %4283
  %4285 = icmp eq i32 %4284, 2
  %4286 = zext i1 %4285 to i8
  %4287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4286, i8* %4287, align 1, !tbaa !2450
  %4288 = load i32, i32* %EDX
  %4289 = zext i32 %4288 to i64
  %4290 = load i64, i64* %PC
  %4291 = add i64 %4290, 3
  store i64 %4291, i64* %PC
  %4292 = shl i64 %4289, 32
  %4293 = ashr exact i64 %4292, 32
  store i64 %4293, i64* %RCX, align 8, !tbaa !2428
  %4294 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4295 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4296 = load i64, i64* %RAX
  %4297 = load i64, i64* %RCX
  %4298 = mul i64 %4297, 4
  %4299 = add i64 %4298, %4296
  %4300 = load i64, i64* %PC
  %4301 = add i64 %4300, 5
  store i64 %4301, i64* %PC
  %4302 = bitcast i8* %4295 to <2 x float>*
  %4303 = load <2 x float>, <2 x float>* %4302, align 1
  %4304 = getelementptr inbounds i8, i8* %4295, i64 8
  %4305 = bitcast i8* %4304 to <2 x i32>*
  %4306 = load <2 x i32>, <2 x i32>* %4305, align 1
  %4307 = inttoptr i64 %4299 to float*
  %4308 = load float, float* %4307
  %4309 = extractelement <2 x float> %4303, i32 0
  %4310 = fmul float %4309, %4308
  %4311 = bitcast i8* %4294 to float*
  store float %4310, float* %4311, align 1, !tbaa !2452
  %4312 = bitcast <2 x float> %4303 to <2 x i32>
  %4313 = extractelement <2 x i32> %4312, i32 1
  %4314 = getelementptr inbounds i8, i8* %4294, i64 4
  %4315 = bitcast i8* %4314 to i32*
  store i32 %4313, i32* %4315, align 1, !tbaa !2452
  %4316 = extractelement <2 x i32> %4306, i32 0
  %4317 = getelementptr inbounds i8, i8* %4294, i64 8
  %4318 = bitcast i8* %4317 to i32*
  store i32 %4316, i32* %4318, align 1, !tbaa !2452
  %4319 = extractelement <2 x i32> %4306, i32 1
  %4320 = getelementptr inbounds i8, i8* %4294, i64 12
  %4321 = bitcast i8* %4320 to i32*
  store i32 %4319, i32* %4321, align 1, !tbaa !2452
  %4322 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4323 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4324 = bitcast %union.vec128_t* %XMM1 to i8*
  %4325 = load i64, i64* %PC
  %4326 = add i64 %4325, 4
  store i64 %4326, i64* %PC
  %4327 = bitcast i8* %4323 to <2 x float>*
  %4328 = load <2 x float>, <2 x float>* %4327, align 1
  %4329 = getelementptr inbounds i8, i8* %4323, i64 8
  %4330 = bitcast i8* %4329 to <2 x i32>*
  %4331 = load <2 x i32>, <2 x i32>* %4330, align 1
  %4332 = bitcast i8* %4324 to <2 x float>*
  %4333 = load <2 x float>, <2 x float>* %4332, align 1
  %4334 = extractelement <2 x float> %4328, i32 0
  %4335 = extractelement <2 x float> %4333, i32 0
  %4336 = fadd float %4334, %4335
  %4337 = bitcast i8* %4322 to float*
  store float %4336, float* %4337, align 1, !tbaa !2452
  %4338 = bitcast <2 x float> %4328 to <2 x i32>
  %4339 = extractelement <2 x i32> %4338, i32 1
  %4340 = getelementptr inbounds i8, i8* %4322, i64 4
  %4341 = bitcast i8* %4340 to i32*
  store i32 %4339, i32* %4341, align 1, !tbaa !2452
  %4342 = extractelement <2 x i32> %4331, i32 0
  %4343 = getelementptr inbounds i8, i8* %4322, i64 8
  %4344 = bitcast i8* %4343 to i32*
  store i32 %4342, i32* %4344, align 1, !tbaa !2452
  %4345 = extractelement <2 x i32> %4331, i32 1
  %4346 = getelementptr inbounds i8, i8* %4322, i64 12
  %4347 = bitcast i8* %4346 to i32*
  store i32 %4345, i32* %4347, align 1, !tbaa !2452
  %4348 = load i64, i64* %RBP
  %4349 = sub i64 %4348, 16
  %4350 = load i64, i64* %PC
  %4351 = add i64 %4350, 4
  store i64 %4351, i64* %PC
  %4352 = inttoptr i64 %4349 to i64*
  %4353 = load i64, i64* %4352
  store i64 %4353, i64* %RAX, align 8, !tbaa !2428
  %4354 = load i64, i64* %RBP
  %4355 = sub i64 %4354, 48
  %4356 = load i64, i64* %PC
  %4357 = add i64 %4356, 4
  store i64 %4357, i64* %PC
  %4358 = inttoptr i64 %4355 to i32*
  %4359 = load i32, i32* %4358
  %4360 = sext i32 %4359 to i64
  store i64 %4360, i64* %RCX, align 8, !tbaa !2428
  %4361 = load i64, i64* %RAX
  %4362 = load i64, i64* %RCX
  %4363 = mul i64 %4362, 4
  %4364 = add i64 %4363, %4361
  %4365 = bitcast %union.vec128_t* %XMM0 to i8*
  %4366 = load i64, i64* %PC
  %4367 = add i64 %4366, 5
  store i64 %4367, i64* %PC
  %4368 = bitcast i8* %4365 to <2 x float>*
  %4369 = load <2 x float>, <2 x float>* %4368, align 1
  %4370 = extractelement <2 x float> %4369, i32 0
  %4371 = inttoptr i64 %4364 to float*
  store float %4370, float* %4371
  %4372 = load i64, i64* %RBP
  %4373 = sub i64 %4372, 48
  %4374 = load i64, i64* %PC
  %4375 = add i64 %4374, 3
  store i64 %4375, i64* %PC
  %4376 = inttoptr i64 %4373 to i32*
  %4377 = load i32, i32* %4376
  %4378 = zext i32 %4377 to i64
  store i64 %4378, i64* %RAX, align 8, !tbaa !2428
  %4379 = load i64, i64* %RAX
  %4380 = load i64, i64* %PC
  %4381 = add i64 %4380, 3
  store i64 %4381, i64* %PC
  %4382 = trunc i64 %4379 to i32
  %4383 = add i32 1, %4382
  %4384 = zext i32 %4383 to i64
  store i64 %4384, i64* %RAX, align 8, !tbaa !2428
  %4385 = icmp ult i32 %4383, %4382
  %4386 = icmp ult i32 %4383, 1
  %4387 = or i1 %4385, %4386
  %4388 = zext i1 %4387 to i8
  %4389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4388, i8* %4389, align 1, !tbaa !2432
  %4390 = and i32 %4383, 255
  %4391 = call i32 @llvm.ctpop.i32(i32 %4390) #16
  %4392 = trunc i32 %4391 to i8
  %4393 = and i8 %4392, 1
  %4394 = xor i8 %4393, 1
  %4395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4394, i8* %4395, align 1, !tbaa !2446
  %4396 = xor i64 1, %4379
  %4397 = trunc i64 %4396 to i32
  %4398 = xor i32 %4397, %4383
  %4399 = lshr i32 %4398, 4
  %4400 = trunc i32 %4399 to i8
  %4401 = and i8 %4400, 1
  %4402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4401, i8* %4402, align 1, !tbaa !2447
  %4403 = icmp eq i32 %4383, 0
  %4404 = zext i1 %4403 to i8
  %4405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4404, i8* %4405, align 1, !tbaa !2448
  %4406 = lshr i32 %4383, 31
  %4407 = trunc i32 %4406 to i8
  %4408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4407, i8* %4408, align 1, !tbaa !2449
  %4409 = lshr i32 %4382, 31
  %4410 = xor i32 %4406, %4409
  %4411 = add nuw nsw i32 %4410, %4406
  %4412 = icmp eq i32 %4411, 2
  %4413 = zext i1 %4412 to i8
  %4414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4413, i8* %4414, align 1, !tbaa !2450
  %4415 = load i64, i64* %RBP
  %4416 = sub i64 %4415, 48
  %4417 = load i32, i32* %EAX
  %4418 = zext i32 %4417 to i64
  %4419 = load i64, i64* %PC
  %4420 = add i64 %4419, 3
  store i64 %4420, i64* %PC
  %4421 = inttoptr i64 %4416 to i32*
  store i32 %4417, i32* %4421
  %4422 = load i64, i64* %PC
  %4423 = sub i64 %4422, 821
  %4424 = load i64, i64* %PC
  %4425 = add i64 %4424, 5
  store i64 %4425, i64* %PC
  %4426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4423, i64* %4426, align 8, !tbaa !2428
  br label %block_402459

block_402156:                                     ; preds = %block_40214a
  %4427 = load i64, i64* %RBP
  %4428 = sub i64 %4427, 16
  %4429 = load i64, i64* %PC
  %4430 = add i64 %4429, 4
  store i64 %4430, i64* %PC
  %4431 = inttoptr i64 %4428 to i64*
  %4432 = load i64, i64* %4431
  store i64 %4432, i64* %RAX, align 8, !tbaa !2428
  %4433 = load i64, i64* %RBP
  %4434 = sub i64 %4433, 48
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 4
  store i64 %4436, i64* %PC
  %4437 = inttoptr i64 %4434 to i32*
  %4438 = load i32, i32* %4437
  %4439 = sext i32 %4438 to i64
  store i64 %4439, i64* %RCX, align 8, !tbaa !2428
  %4440 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4441 = load i64, i64* %RAX
  %4442 = load i64, i64* %RCX
  %4443 = mul i64 %4442, 4
  %4444 = add i64 %4443, %4441
  %4445 = load i64, i64* %PC
  %4446 = add i64 %4445, 5
  store i64 %4446, i64* %PC
  %4447 = inttoptr i64 %4444 to float*
  %4448 = load float, float* %4447
  %4449 = bitcast i8* %4440 to float*
  store float %4448, float* %4449, align 1, !tbaa !2452
  %4450 = getelementptr inbounds i8, i8* %4440, i64 4
  %4451 = bitcast i8* %4450 to float*
  store float 0.000000e+00, float* %4451, align 1, !tbaa !2452
  %4452 = getelementptr inbounds i8, i8* %4440, i64 8
  %4453 = bitcast i8* %4452 to float*
  store float 0.000000e+00, float* %4453, align 1, !tbaa !2452
  %4454 = getelementptr inbounds i8, i8* %4440, i64 12
  %4455 = bitcast i8* %4454 to float*
  store float 0.000000e+00, float* %4455, align 1, !tbaa !2452
  %4456 = load i64, i64* %RBP
  %4457 = sub i64 %4456, 32
  %4458 = load i64, i64* %PC
  %4459 = add i64 %4458, 4
  store i64 %4459, i64* %PC
  %4460 = inttoptr i64 %4457 to i64*
  %4461 = load i64, i64* %4460
  store i64 %4461, i64* %RAX, align 8, !tbaa !2428
  %4462 = load i64, i64* %RBP
  %4463 = sub i64 %4462, 44
  %4464 = load i64, i64* %PC
  %4465 = add i64 %4464, 3
  store i64 %4465, i64* %PC
  %4466 = inttoptr i64 %4463 to i32*
  %4467 = load i32, i32* %4466
  %4468 = zext i32 %4467 to i64
  store i64 %4468, i64* %RDX, align 8, !tbaa !2428
  %4469 = load i64, i64* %RDX
  %4470 = load i64, i64* %PC
  %4471 = add i64 %4470, 3
  store i64 %4471, i64* %PC
  %4472 = trunc i64 %4469 to i32
  %4473 = sub i32 %4472, 3
  %4474 = zext i32 %4473 to i64
  store i64 %4474, i64* %RDX, align 8, !tbaa !2428
  %4475 = icmp ult i32 %4472, 3
  %4476 = zext i1 %4475 to i8
  %4477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4476, i8* %4477, align 1, !tbaa !2432
  %4478 = and i32 %4473, 255
  %4479 = call i32 @llvm.ctpop.i32(i32 %4478) #16
  %4480 = trunc i32 %4479 to i8
  %4481 = and i8 %4480, 1
  %4482 = xor i8 %4481, 1
  %4483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4482, i8* %4483, align 1, !tbaa !2446
  %4484 = xor i64 3, %4469
  %4485 = trunc i64 %4484 to i32
  %4486 = xor i32 %4485, %4473
  %4487 = lshr i32 %4486, 4
  %4488 = trunc i32 %4487 to i8
  %4489 = and i8 %4488, 1
  %4490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4489, i8* %4490, align 1, !tbaa !2447
  %4491 = icmp eq i32 %4473, 0
  %4492 = zext i1 %4491 to i8
  %4493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4492, i8* %4493, align 1, !tbaa !2448
  %4494 = lshr i32 %4473, 31
  %4495 = trunc i32 %4494 to i8
  %4496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4495, i8* %4496, align 1, !tbaa !2449
  %4497 = lshr i32 %4472, 31
  %4498 = xor i32 %4494, %4497
  %4499 = add nuw nsw i32 %4498, %4497
  %4500 = icmp eq i32 %4499, 2
  %4501 = zext i1 %4500 to i8
  %4502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4501, i8* %4502, align 1, !tbaa !2450
  %4503 = load i32, i32* %EDX
  %4504 = zext i32 %4503 to i64
  %4505 = load i64, i64* %PC
  %4506 = add i64 %4505, 3
  store i64 %4506, i64* %PC
  %4507 = shl i64 %4504, 32
  %4508 = ashr exact i64 %4507, 32
  store i64 %4508, i64* %RCX, align 8, !tbaa !2428
  %4509 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4510 = load i64, i64* %RAX
  %4511 = load i64, i64* %RCX
  %4512 = mul i64 %4511, 4
  %4513 = add i64 %4512, %4510
  %4514 = load i64, i64* %PC
  %4515 = add i64 %4514, 5
  store i64 %4515, i64* %PC
  %4516 = inttoptr i64 %4513 to float*
  %4517 = load float, float* %4516
  %4518 = bitcast i8* %4509 to float*
  store float %4517, float* %4518, align 1, !tbaa !2452
  %4519 = getelementptr inbounds i8, i8* %4509, i64 4
  %4520 = bitcast i8* %4519 to float*
  store float 0.000000e+00, float* %4520, align 1, !tbaa !2452
  %4521 = getelementptr inbounds i8, i8* %4509, i64 8
  %4522 = bitcast i8* %4521 to float*
  store float 0.000000e+00, float* %4522, align 1, !tbaa !2452
  %4523 = getelementptr inbounds i8, i8* %4509, i64 12
  %4524 = bitcast i8* %4523 to float*
  store float 0.000000e+00, float* %4524, align 1, !tbaa !2452
  %4525 = load i64, i64* %RBP
  %4526 = sub i64 %4525, 40
  %4527 = load i64, i64* %PC
  %4528 = add i64 %4527, 4
  store i64 %4528, i64* %PC
  %4529 = inttoptr i64 %4526 to i64*
  %4530 = load i64, i64* %4529
  store i64 %4530, i64* %RAX, align 8, !tbaa !2428
  %4531 = load i64, i64* %RBP
  %4532 = sub i64 %4531, 24
  %4533 = load i64, i64* %PC
  %4534 = add i64 %4533, 3
  store i64 %4534, i64* %PC
  %4535 = inttoptr i64 %4532 to i32*
  %4536 = load i32, i32* %4535
  %4537 = zext i32 %4536 to i64
  store i64 %4537, i64* %RDX, align 8, !tbaa !2428
  %4538 = load i64, i64* %RBP
  %4539 = sub i64 %4538, 44
  %4540 = load i64, i64* %PC
  %4541 = add i64 %4540, 3
  store i64 %4541, i64* %PC
  %4542 = inttoptr i64 %4539 to i32*
  %4543 = load i32, i32* %4542
  %4544 = zext i32 %4543 to i64
  store i64 %4544, i64* %RSI, align 8, !tbaa !2428
  %4545 = load i64, i64* %RSI
  %4546 = load i64, i64* %PC
  %4547 = add i64 %4546, 3
  store i64 %4547, i64* %PC
  %4548 = trunc i64 %4545 to i32
  %4549 = sub i32 %4548, 3
  %4550 = zext i32 %4549 to i64
  store i64 %4550, i64* %RSI, align 8, !tbaa !2428
  %4551 = icmp ult i32 %4548, 3
  %4552 = zext i1 %4551 to i8
  %4553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4552, i8* %4553, align 1, !tbaa !2432
  %4554 = and i32 %4549, 255
  %4555 = call i32 @llvm.ctpop.i32(i32 %4554) #16
  %4556 = trunc i32 %4555 to i8
  %4557 = and i8 %4556, 1
  %4558 = xor i8 %4557, 1
  %4559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4558, i8* %4559, align 1, !tbaa !2446
  %4560 = xor i64 3, %4545
  %4561 = trunc i64 %4560 to i32
  %4562 = xor i32 %4561, %4549
  %4563 = lshr i32 %4562, 4
  %4564 = trunc i32 %4563 to i8
  %4565 = and i8 %4564, 1
  %4566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4565, i8* %4566, align 1, !tbaa !2447
  %4567 = icmp eq i32 %4549, 0
  %4568 = zext i1 %4567 to i8
  %4569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4568, i8* %4569, align 1, !tbaa !2448
  %4570 = lshr i32 %4549, 31
  %4571 = trunc i32 %4570 to i8
  %4572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4571, i8* %4572, align 1, !tbaa !2449
  %4573 = lshr i32 %4548, 31
  %4574 = xor i32 %4570, %4573
  %4575 = add nuw nsw i32 %4574, %4573
  %4576 = icmp eq i32 %4575, 2
  %4577 = zext i1 %4576 to i8
  %4578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4577, i8* %4578, align 1, !tbaa !2450
  %4579 = load i64, i64* %RDX
  %4580 = load i32, i32* %ESI
  %4581 = zext i32 %4580 to i64
  %4582 = load i64, i64* %PC
  %4583 = add i64 %4582, 3
  store i64 %4583, i64* %PC
  %4584 = shl i64 %4579, 32
  %4585 = ashr exact i64 %4584, 32
  %4586 = shl i64 %4581, 32
  %4587 = ashr exact i64 %4586, 32
  %4588 = mul nsw i64 %4587, %4585
  %4589 = trunc i64 %4588 to i32
  %4590 = and i64 %4588, 4294967295
  store i64 %4590, i64* %RDX, align 8, !tbaa !2428
  %4591 = shl i64 %4588, 32
  %4592 = ashr exact i64 %4591, 32
  %4593 = icmp ne i64 %4592, %4588
  %4594 = zext i1 %4593 to i8
  %4595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4594, i8* %4595, align 1, !tbaa !2432
  %4596 = and i32 %4589, 255
  %4597 = call i32 @llvm.ctpop.i32(i32 %4596) #16
  %4598 = trunc i32 %4597 to i8
  %4599 = and i8 %4598, 1
  %4600 = xor i8 %4599, 1
  %4601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4600, i8* %4601, align 1, !tbaa !2446
  %4602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4602, align 1, !tbaa !2447
  %4603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4603, align 1, !tbaa !2448
  %4604 = lshr i32 %4589, 31
  %4605 = trunc i32 %4604 to i8
  %4606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4605, i8* %4606, align 1, !tbaa !2449
  %4607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4594, i8* %4607, align 1, !tbaa !2450
  %4608 = load i64, i64* %RDX
  %4609 = load i64, i64* %RBP
  %4610 = sub i64 %4609, 48
  %4611 = load i64, i64* %PC
  %4612 = add i64 %4611, 3
  store i64 %4612, i64* %PC
  %4613 = trunc i64 %4608 to i32
  %4614 = inttoptr i64 %4610 to i32*
  %4615 = load i32, i32* %4614
  %4616 = add i32 %4615, %4613
  %4617 = zext i32 %4616 to i64
  store i64 %4617, i64* %RDX, align 8, !tbaa !2428
  %4618 = icmp ult i32 %4616, %4613
  %4619 = icmp ult i32 %4616, %4615
  %4620 = or i1 %4618, %4619
  %4621 = zext i1 %4620 to i8
  %4622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4621, i8* %4622, align 1, !tbaa !2432
  %4623 = and i32 %4616, 255
  %4624 = call i32 @llvm.ctpop.i32(i32 %4623) #16
  %4625 = trunc i32 %4624 to i8
  %4626 = and i8 %4625, 1
  %4627 = xor i8 %4626, 1
  %4628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4627, i8* %4628, align 1, !tbaa !2446
  %4629 = xor i32 %4615, %4613
  %4630 = xor i32 %4629, %4616
  %4631 = lshr i32 %4630, 4
  %4632 = trunc i32 %4631 to i8
  %4633 = and i8 %4632, 1
  %4634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4633, i8* %4634, align 1, !tbaa !2447
  %4635 = icmp eq i32 %4616, 0
  %4636 = zext i1 %4635 to i8
  %4637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4636, i8* %4637, align 1, !tbaa !2448
  %4638 = lshr i32 %4616, 31
  %4639 = trunc i32 %4638 to i8
  %4640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4639, i8* %4640, align 1, !tbaa !2449
  %4641 = lshr i32 %4613, 31
  %4642 = lshr i32 %4615, 31
  %4643 = xor i32 %4638, %4641
  %4644 = xor i32 %4638, %4642
  %4645 = add nuw nsw i32 %4643, %4644
  %4646 = icmp eq i32 %4645, 2
  %4647 = zext i1 %4646 to i8
  %4648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4647, i8* %4648, align 1, !tbaa !2450
  %4649 = load i32, i32* %EDX
  %4650 = zext i32 %4649 to i64
  %4651 = load i64, i64* %PC
  %4652 = add i64 %4651, 3
  store i64 %4652, i64* %PC
  %4653 = shl i64 %4650, 32
  %4654 = ashr exact i64 %4653, 32
  store i64 %4654, i64* %RCX, align 8, !tbaa !2428
  %4655 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4656 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4657 = load i64, i64* %RAX
  %4658 = load i64, i64* %RCX
  %4659 = mul i64 %4658, 4
  %4660 = add i64 %4659, %4657
  %4661 = load i64, i64* %PC
  %4662 = add i64 %4661, 5
  store i64 %4662, i64* %PC
  %4663 = bitcast i8* %4656 to <2 x float>*
  %4664 = load <2 x float>, <2 x float>* %4663, align 1
  %4665 = getelementptr inbounds i8, i8* %4656, i64 8
  %4666 = bitcast i8* %4665 to <2 x i32>*
  %4667 = load <2 x i32>, <2 x i32>* %4666, align 1
  %4668 = inttoptr i64 %4660 to float*
  %4669 = load float, float* %4668
  %4670 = extractelement <2 x float> %4664, i32 0
  %4671 = fmul float %4670, %4669
  %4672 = bitcast i8* %4655 to float*
  store float %4671, float* %4672, align 1, !tbaa !2452
  %4673 = bitcast <2 x float> %4664 to <2 x i32>
  %4674 = extractelement <2 x i32> %4673, i32 1
  %4675 = getelementptr inbounds i8, i8* %4655, i64 4
  %4676 = bitcast i8* %4675 to i32*
  store i32 %4674, i32* %4676, align 1, !tbaa !2452
  %4677 = extractelement <2 x i32> %4667, i32 0
  %4678 = getelementptr inbounds i8, i8* %4655, i64 8
  %4679 = bitcast i8* %4678 to i32*
  store i32 %4677, i32* %4679, align 1, !tbaa !2452
  %4680 = extractelement <2 x i32> %4667, i32 1
  %4681 = getelementptr inbounds i8, i8* %4655, i64 12
  %4682 = bitcast i8* %4681 to i32*
  store i32 %4680, i32* %4682, align 1, !tbaa !2452
  %4683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4685 = bitcast %union.vec128_t* %XMM1 to i8*
  %4686 = load i64, i64* %PC
  %4687 = add i64 %4686, 4
  store i64 %4687, i64* %PC
  %4688 = bitcast i8* %4684 to <2 x float>*
  %4689 = load <2 x float>, <2 x float>* %4688, align 1
  %4690 = getelementptr inbounds i8, i8* %4684, i64 8
  %4691 = bitcast i8* %4690 to <2 x i32>*
  %4692 = load <2 x i32>, <2 x i32>* %4691, align 1
  %4693 = bitcast i8* %4685 to <2 x float>*
  %4694 = load <2 x float>, <2 x float>* %4693, align 1
  %4695 = extractelement <2 x float> %4689, i32 0
  %4696 = extractelement <2 x float> %4694, i32 0
  %4697 = fadd float %4695, %4696
  %4698 = bitcast i8* %4683 to float*
  store float %4697, float* %4698, align 1, !tbaa !2452
  %4699 = bitcast <2 x float> %4689 to <2 x i32>
  %4700 = extractelement <2 x i32> %4699, i32 1
  %4701 = getelementptr inbounds i8, i8* %4683, i64 4
  %4702 = bitcast i8* %4701 to i32*
  store i32 %4700, i32* %4702, align 1, !tbaa !2452
  %4703 = extractelement <2 x i32> %4692, i32 0
  %4704 = getelementptr inbounds i8, i8* %4683, i64 8
  %4705 = bitcast i8* %4704 to i32*
  store i32 %4703, i32* %4705, align 1, !tbaa !2452
  %4706 = extractelement <2 x i32> %4692, i32 1
  %4707 = getelementptr inbounds i8, i8* %4683, i64 12
  %4708 = bitcast i8* %4707 to i32*
  store i32 %4706, i32* %4708, align 1, !tbaa !2452
  %4709 = load i64, i64* %RBP
  %4710 = sub i64 %4709, 32
  %4711 = load i64, i64* %PC
  %4712 = add i64 %4711, 4
  store i64 %4712, i64* %PC
  %4713 = inttoptr i64 %4710 to i64*
  %4714 = load i64, i64* %4713
  store i64 %4714, i64* %RAX, align 8, !tbaa !2428
  %4715 = load i64, i64* %RBP
  %4716 = sub i64 %4715, 44
  %4717 = load i64, i64* %PC
  %4718 = add i64 %4717, 3
  store i64 %4718, i64* %PC
  %4719 = inttoptr i64 %4716 to i32*
  %4720 = load i32, i32* %4719
  %4721 = zext i32 %4720 to i64
  store i64 %4721, i64* %RDX, align 8, !tbaa !2428
  %4722 = load i64, i64* %RDX
  %4723 = load i64, i64* %PC
  %4724 = add i64 %4723, 3
  store i64 %4724, i64* %PC
  %4725 = trunc i64 %4722 to i32
  %4726 = sub i32 %4725, 2
  %4727 = zext i32 %4726 to i64
  store i64 %4727, i64* %RDX, align 8, !tbaa !2428
  %4728 = icmp ult i32 %4725, 2
  %4729 = zext i1 %4728 to i8
  %4730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4729, i8* %4730, align 1, !tbaa !2432
  %4731 = and i32 %4726, 255
  %4732 = call i32 @llvm.ctpop.i32(i32 %4731) #16
  %4733 = trunc i32 %4732 to i8
  %4734 = and i8 %4733, 1
  %4735 = xor i8 %4734, 1
  %4736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4735, i8* %4736, align 1, !tbaa !2446
  %4737 = xor i64 2, %4722
  %4738 = trunc i64 %4737 to i32
  %4739 = xor i32 %4738, %4726
  %4740 = lshr i32 %4739, 4
  %4741 = trunc i32 %4740 to i8
  %4742 = and i8 %4741, 1
  %4743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4742, i8* %4743, align 1, !tbaa !2447
  %4744 = icmp eq i32 %4726, 0
  %4745 = zext i1 %4744 to i8
  %4746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4745, i8* %4746, align 1, !tbaa !2448
  %4747 = lshr i32 %4726, 31
  %4748 = trunc i32 %4747 to i8
  %4749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4748, i8* %4749, align 1, !tbaa !2449
  %4750 = lshr i32 %4725, 31
  %4751 = xor i32 %4747, %4750
  %4752 = add nuw nsw i32 %4751, %4750
  %4753 = icmp eq i32 %4752, 2
  %4754 = zext i1 %4753 to i8
  %4755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4754, i8* %4755, align 1, !tbaa !2450
  %4756 = load i32, i32* %EDX
  %4757 = zext i32 %4756 to i64
  %4758 = load i64, i64* %PC
  %4759 = add i64 %4758, 3
  store i64 %4759, i64* %PC
  %4760 = shl i64 %4757, 32
  %4761 = ashr exact i64 %4760, 32
  store i64 %4761, i64* %RCX, align 8, !tbaa !2428
  %4762 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4763 = load i64, i64* %RAX
  %4764 = load i64, i64* %RCX
  %4765 = mul i64 %4764, 4
  %4766 = add i64 %4765, %4763
  %4767 = load i64, i64* %PC
  %4768 = add i64 %4767, 5
  store i64 %4768, i64* %PC
  %4769 = inttoptr i64 %4766 to float*
  %4770 = load float, float* %4769
  %4771 = bitcast i8* %4762 to float*
  store float %4770, float* %4771, align 1, !tbaa !2452
  %4772 = getelementptr inbounds i8, i8* %4762, i64 4
  %4773 = bitcast i8* %4772 to float*
  store float 0.000000e+00, float* %4773, align 1, !tbaa !2452
  %4774 = getelementptr inbounds i8, i8* %4762, i64 8
  %4775 = bitcast i8* %4774 to float*
  store float 0.000000e+00, float* %4775, align 1, !tbaa !2452
  %4776 = getelementptr inbounds i8, i8* %4762, i64 12
  %4777 = bitcast i8* %4776 to float*
  store float 0.000000e+00, float* %4777, align 1, !tbaa !2452
  %4778 = load i64, i64* %RBP
  %4779 = sub i64 %4778, 40
  %4780 = load i64, i64* %PC
  %4781 = add i64 %4780, 4
  store i64 %4781, i64* %PC
  %4782 = inttoptr i64 %4779 to i64*
  %4783 = load i64, i64* %4782
  store i64 %4783, i64* %RAX, align 8, !tbaa !2428
  %4784 = load i64, i64* %RBP
  %4785 = sub i64 %4784, 24
  %4786 = load i64, i64* %PC
  %4787 = add i64 %4786, 3
  store i64 %4787, i64* %PC
  %4788 = inttoptr i64 %4785 to i32*
  %4789 = load i32, i32* %4788
  %4790 = zext i32 %4789 to i64
  store i64 %4790, i64* %RDX, align 8, !tbaa !2428
  %4791 = load i64, i64* %RBP
  %4792 = sub i64 %4791, 44
  %4793 = load i64, i64* %PC
  %4794 = add i64 %4793, 3
  store i64 %4794, i64* %PC
  %4795 = inttoptr i64 %4792 to i32*
  %4796 = load i32, i32* %4795
  %4797 = zext i32 %4796 to i64
  store i64 %4797, i64* %RSI, align 8, !tbaa !2428
  %4798 = load i64, i64* %RSI
  %4799 = load i64, i64* %PC
  %4800 = add i64 %4799, 3
  store i64 %4800, i64* %PC
  %4801 = trunc i64 %4798 to i32
  %4802 = sub i32 %4801, 2
  %4803 = zext i32 %4802 to i64
  store i64 %4803, i64* %RSI, align 8, !tbaa !2428
  %4804 = icmp ult i32 %4801, 2
  %4805 = zext i1 %4804 to i8
  %4806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4805, i8* %4806, align 1, !tbaa !2432
  %4807 = and i32 %4802, 255
  %4808 = call i32 @llvm.ctpop.i32(i32 %4807) #16
  %4809 = trunc i32 %4808 to i8
  %4810 = and i8 %4809, 1
  %4811 = xor i8 %4810, 1
  %4812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4811, i8* %4812, align 1, !tbaa !2446
  %4813 = xor i64 2, %4798
  %4814 = trunc i64 %4813 to i32
  %4815 = xor i32 %4814, %4802
  %4816 = lshr i32 %4815, 4
  %4817 = trunc i32 %4816 to i8
  %4818 = and i8 %4817, 1
  %4819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4818, i8* %4819, align 1, !tbaa !2447
  %4820 = icmp eq i32 %4802, 0
  %4821 = zext i1 %4820 to i8
  %4822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4821, i8* %4822, align 1, !tbaa !2448
  %4823 = lshr i32 %4802, 31
  %4824 = trunc i32 %4823 to i8
  %4825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4824, i8* %4825, align 1, !tbaa !2449
  %4826 = lshr i32 %4801, 31
  %4827 = xor i32 %4823, %4826
  %4828 = add nuw nsw i32 %4827, %4826
  %4829 = icmp eq i32 %4828, 2
  %4830 = zext i1 %4829 to i8
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4830, i8* %4831, align 1, !tbaa !2450
  %4832 = load i64, i64* %RDX
  %4833 = load i32, i32* %ESI
  %4834 = zext i32 %4833 to i64
  %4835 = load i64, i64* %PC
  %4836 = add i64 %4835, 3
  store i64 %4836, i64* %PC
  %4837 = shl i64 %4832, 32
  %4838 = ashr exact i64 %4837, 32
  %4839 = shl i64 %4834, 32
  %4840 = ashr exact i64 %4839, 32
  %4841 = mul nsw i64 %4840, %4838
  %4842 = trunc i64 %4841 to i32
  %4843 = and i64 %4841, 4294967295
  store i64 %4843, i64* %RDX, align 8, !tbaa !2428
  %4844 = shl i64 %4841, 32
  %4845 = ashr exact i64 %4844, 32
  %4846 = icmp ne i64 %4845, %4841
  %4847 = zext i1 %4846 to i8
  %4848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4847, i8* %4848, align 1, !tbaa !2432
  %4849 = and i32 %4842, 255
  %4850 = call i32 @llvm.ctpop.i32(i32 %4849) #16
  %4851 = trunc i32 %4850 to i8
  %4852 = and i8 %4851, 1
  %4853 = xor i8 %4852, 1
  %4854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4853, i8* %4854, align 1, !tbaa !2446
  %4855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4855, align 1, !tbaa !2447
  %4856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4856, align 1, !tbaa !2448
  %4857 = lshr i32 %4842, 31
  %4858 = trunc i32 %4857 to i8
  %4859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4858, i8* %4859, align 1, !tbaa !2449
  %4860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4847, i8* %4860, align 1, !tbaa !2450
  %4861 = load i64, i64* %RDX
  %4862 = load i64, i64* %RBP
  %4863 = sub i64 %4862, 48
  %4864 = load i64, i64* %PC
  %4865 = add i64 %4864, 3
  store i64 %4865, i64* %PC
  %4866 = trunc i64 %4861 to i32
  %4867 = inttoptr i64 %4863 to i32*
  %4868 = load i32, i32* %4867
  %4869 = add i32 %4868, %4866
  %4870 = zext i32 %4869 to i64
  store i64 %4870, i64* %RDX, align 8, !tbaa !2428
  %4871 = icmp ult i32 %4869, %4866
  %4872 = icmp ult i32 %4869, %4868
  %4873 = or i1 %4871, %4872
  %4874 = zext i1 %4873 to i8
  %4875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4874, i8* %4875, align 1, !tbaa !2432
  %4876 = and i32 %4869, 255
  %4877 = call i32 @llvm.ctpop.i32(i32 %4876) #16
  %4878 = trunc i32 %4877 to i8
  %4879 = and i8 %4878, 1
  %4880 = xor i8 %4879, 1
  %4881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4880, i8* %4881, align 1, !tbaa !2446
  %4882 = xor i32 %4868, %4866
  %4883 = xor i32 %4882, %4869
  %4884 = lshr i32 %4883, 4
  %4885 = trunc i32 %4884 to i8
  %4886 = and i8 %4885, 1
  %4887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4886, i8* %4887, align 1, !tbaa !2447
  %4888 = icmp eq i32 %4869, 0
  %4889 = zext i1 %4888 to i8
  %4890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4889, i8* %4890, align 1, !tbaa !2448
  %4891 = lshr i32 %4869, 31
  %4892 = trunc i32 %4891 to i8
  %4893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4892, i8* %4893, align 1, !tbaa !2449
  %4894 = lshr i32 %4866, 31
  %4895 = lshr i32 %4868, 31
  %4896 = xor i32 %4891, %4894
  %4897 = xor i32 %4891, %4895
  %4898 = add nuw nsw i32 %4896, %4897
  %4899 = icmp eq i32 %4898, 2
  %4900 = zext i1 %4899 to i8
  %4901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4900, i8* %4901, align 1, !tbaa !2450
  %4902 = load i32, i32* %EDX
  %4903 = zext i32 %4902 to i64
  %4904 = load i64, i64* %PC
  %4905 = add i64 %4904, 3
  store i64 %4905, i64* %PC
  %4906 = shl i64 %4903, 32
  %4907 = ashr exact i64 %4906, 32
  store i64 %4907, i64* %RCX, align 8, !tbaa !2428
  %4908 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4909 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4910 = load i64, i64* %RAX
  %4911 = load i64, i64* %RCX
  %4912 = mul i64 %4911, 4
  %4913 = add i64 %4912, %4910
  %4914 = load i64, i64* %PC
  %4915 = add i64 %4914, 5
  store i64 %4915, i64* %PC
  %4916 = bitcast i8* %4909 to <2 x float>*
  %4917 = load <2 x float>, <2 x float>* %4916, align 1
  %4918 = getelementptr inbounds i8, i8* %4909, i64 8
  %4919 = bitcast i8* %4918 to <2 x i32>*
  %4920 = load <2 x i32>, <2 x i32>* %4919, align 1
  %4921 = inttoptr i64 %4913 to float*
  %4922 = load float, float* %4921
  %4923 = extractelement <2 x float> %4917, i32 0
  %4924 = fmul float %4923, %4922
  %4925 = bitcast i8* %4908 to float*
  store float %4924, float* %4925, align 1, !tbaa !2452
  %4926 = bitcast <2 x float> %4917 to <2 x i32>
  %4927 = extractelement <2 x i32> %4926, i32 1
  %4928 = getelementptr inbounds i8, i8* %4908, i64 4
  %4929 = bitcast i8* %4928 to i32*
  store i32 %4927, i32* %4929, align 1, !tbaa !2452
  %4930 = extractelement <2 x i32> %4920, i32 0
  %4931 = getelementptr inbounds i8, i8* %4908, i64 8
  %4932 = bitcast i8* %4931 to i32*
  store i32 %4930, i32* %4932, align 1, !tbaa !2452
  %4933 = extractelement <2 x i32> %4920, i32 1
  %4934 = getelementptr inbounds i8, i8* %4908, i64 12
  %4935 = bitcast i8* %4934 to i32*
  store i32 %4933, i32* %4935, align 1, !tbaa !2452
  %4936 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4937 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4938 = bitcast %union.vec128_t* %XMM1 to i8*
  %4939 = load i64, i64* %PC
  %4940 = add i64 %4939, 4
  store i64 %4940, i64* %PC
  %4941 = bitcast i8* %4937 to <2 x float>*
  %4942 = load <2 x float>, <2 x float>* %4941, align 1
  %4943 = getelementptr inbounds i8, i8* %4937, i64 8
  %4944 = bitcast i8* %4943 to <2 x i32>*
  %4945 = load <2 x i32>, <2 x i32>* %4944, align 1
  %4946 = bitcast i8* %4938 to <2 x float>*
  %4947 = load <2 x float>, <2 x float>* %4946, align 1
  %4948 = extractelement <2 x float> %4942, i32 0
  %4949 = extractelement <2 x float> %4947, i32 0
  %4950 = fadd float %4948, %4949
  %4951 = bitcast i8* %4936 to float*
  store float %4950, float* %4951, align 1, !tbaa !2452
  %4952 = bitcast <2 x float> %4942 to <2 x i32>
  %4953 = extractelement <2 x i32> %4952, i32 1
  %4954 = getelementptr inbounds i8, i8* %4936, i64 4
  %4955 = bitcast i8* %4954 to i32*
  store i32 %4953, i32* %4955, align 1, !tbaa !2452
  %4956 = extractelement <2 x i32> %4945, i32 0
  %4957 = getelementptr inbounds i8, i8* %4936, i64 8
  %4958 = bitcast i8* %4957 to i32*
  store i32 %4956, i32* %4958, align 1, !tbaa !2452
  %4959 = extractelement <2 x i32> %4945, i32 1
  %4960 = getelementptr inbounds i8, i8* %4936, i64 12
  %4961 = bitcast i8* %4960 to i32*
  store i32 %4959, i32* %4961, align 1, !tbaa !2452
  %4962 = load i64, i64* %RBP
  %4963 = sub i64 %4962, 32
  %4964 = load i64, i64* %PC
  %4965 = add i64 %4964, 4
  store i64 %4965, i64* %PC
  %4966 = inttoptr i64 %4963 to i64*
  %4967 = load i64, i64* %4966
  store i64 %4967, i64* %RAX, align 8, !tbaa !2428
  %4968 = load i64, i64* %RBP
  %4969 = sub i64 %4968, 44
  %4970 = load i64, i64* %PC
  %4971 = add i64 %4970, 3
  store i64 %4971, i64* %PC
  %4972 = inttoptr i64 %4969 to i32*
  %4973 = load i32, i32* %4972
  %4974 = zext i32 %4973 to i64
  store i64 %4974, i64* %RDX, align 8, !tbaa !2428
  %4975 = load i64, i64* %RDX
  %4976 = load i64, i64* %PC
  %4977 = add i64 %4976, 3
  store i64 %4977, i64* %PC
  %4978 = trunc i64 %4975 to i32
  %4979 = sub i32 %4978, 1
  %4980 = zext i32 %4979 to i64
  store i64 %4980, i64* %RDX, align 8, !tbaa !2428
  %4981 = icmp ult i32 %4978, 1
  %4982 = zext i1 %4981 to i8
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4982, i8* %4983, align 1, !tbaa !2432
  %4984 = and i32 %4979, 255
  %4985 = call i32 @llvm.ctpop.i32(i32 %4984) #16
  %4986 = trunc i32 %4985 to i8
  %4987 = and i8 %4986, 1
  %4988 = xor i8 %4987, 1
  %4989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4988, i8* %4989, align 1, !tbaa !2446
  %4990 = xor i64 1, %4975
  %4991 = trunc i64 %4990 to i32
  %4992 = xor i32 %4991, %4979
  %4993 = lshr i32 %4992, 4
  %4994 = trunc i32 %4993 to i8
  %4995 = and i8 %4994, 1
  %4996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4995, i8* %4996, align 1, !tbaa !2447
  %4997 = icmp eq i32 %4979, 0
  %4998 = zext i1 %4997 to i8
  %4999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4998, i8* %4999, align 1, !tbaa !2448
  %5000 = lshr i32 %4979, 31
  %5001 = trunc i32 %5000 to i8
  %5002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5001, i8* %5002, align 1, !tbaa !2449
  %5003 = lshr i32 %4978, 31
  %5004 = xor i32 %5000, %5003
  %5005 = add nuw nsw i32 %5004, %5003
  %5006 = icmp eq i32 %5005, 2
  %5007 = zext i1 %5006 to i8
  %5008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5007, i8* %5008, align 1, !tbaa !2450
  %5009 = load i32, i32* %EDX
  %5010 = zext i32 %5009 to i64
  %5011 = load i64, i64* %PC
  %5012 = add i64 %5011, 3
  store i64 %5012, i64* %PC
  %5013 = shl i64 %5010, 32
  %5014 = ashr exact i64 %5013, 32
  store i64 %5014, i64* %RCX, align 8, !tbaa !2428
  %5015 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5016 = load i64, i64* %RAX
  %5017 = load i64, i64* %RCX
  %5018 = mul i64 %5017, 4
  %5019 = add i64 %5018, %5016
  %5020 = load i64, i64* %PC
  %5021 = add i64 %5020, 5
  store i64 %5021, i64* %PC
  %5022 = inttoptr i64 %5019 to float*
  %5023 = load float, float* %5022
  %5024 = bitcast i8* %5015 to float*
  store float %5023, float* %5024, align 1, !tbaa !2452
  %5025 = getelementptr inbounds i8, i8* %5015, i64 4
  %5026 = bitcast i8* %5025 to float*
  store float 0.000000e+00, float* %5026, align 1, !tbaa !2452
  %5027 = getelementptr inbounds i8, i8* %5015, i64 8
  %5028 = bitcast i8* %5027 to float*
  store float 0.000000e+00, float* %5028, align 1, !tbaa !2452
  %5029 = getelementptr inbounds i8, i8* %5015, i64 12
  %5030 = bitcast i8* %5029 to float*
  store float 0.000000e+00, float* %5030, align 1, !tbaa !2452
  %5031 = load i64, i64* %RBP
  %5032 = sub i64 %5031, 40
  %5033 = load i64, i64* %PC
  %5034 = add i64 %5033, 4
  store i64 %5034, i64* %PC
  %5035 = inttoptr i64 %5032 to i64*
  %5036 = load i64, i64* %5035
  store i64 %5036, i64* %RAX, align 8, !tbaa !2428
  %5037 = load i64, i64* %RBP
  %5038 = sub i64 %5037, 24
  %5039 = load i64, i64* %PC
  %5040 = add i64 %5039, 3
  store i64 %5040, i64* %PC
  %5041 = inttoptr i64 %5038 to i32*
  %5042 = load i32, i32* %5041
  %5043 = zext i32 %5042 to i64
  store i64 %5043, i64* %RDX, align 8, !tbaa !2428
  %5044 = load i64, i64* %RBP
  %5045 = sub i64 %5044, 44
  %5046 = load i64, i64* %PC
  %5047 = add i64 %5046, 3
  store i64 %5047, i64* %PC
  %5048 = inttoptr i64 %5045 to i32*
  %5049 = load i32, i32* %5048
  %5050 = zext i32 %5049 to i64
  store i64 %5050, i64* %RSI, align 8, !tbaa !2428
  %5051 = load i64, i64* %RSI
  %5052 = load i64, i64* %PC
  %5053 = add i64 %5052, 3
  store i64 %5053, i64* %PC
  %5054 = trunc i64 %5051 to i32
  %5055 = sub i32 %5054, 1
  %5056 = zext i32 %5055 to i64
  store i64 %5056, i64* %RSI, align 8, !tbaa !2428
  %5057 = icmp ult i32 %5054, 1
  %5058 = zext i1 %5057 to i8
  %5059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5058, i8* %5059, align 1, !tbaa !2432
  %5060 = and i32 %5055, 255
  %5061 = call i32 @llvm.ctpop.i32(i32 %5060) #16
  %5062 = trunc i32 %5061 to i8
  %5063 = and i8 %5062, 1
  %5064 = xor i8 %5063, 1
  %5065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5064, i8* %5065, align 1, !tbaa !2446
  %5066 = xor i64 1, %5051
  %5067 = trunc i64 %5066 to i32
  %5068 = xor i32 %5067, %5055
  %5069 = lshr i32 %5068, 4
  %5070 = trunc i32 %5069 to i8
  %5071 = and i8 %5070, 1
  %5072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5071, i8* %5072, align 1, !tbaa !2447
  %5073 = icmp eq i32 %5055, 0
  %5074 = zext i1 %5073 to i8
  %5075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5074, i8* %5075, align 1, !tbaa !2448
  %5076 = lshr i32 %5055, 31
  %5077 = trunc i32 %5076 to i8
  %5078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5077, i8* %5078, align 1, !tbaa !2449
  %5079 = lshr i32 %5054, 31
  %5080 = xor i32 %5076, %5079
  %5081 = add nuw nsw i32 %5080, %5079
  %5082 = icmp eq i32 %5081, 2
  %5083 = zext i1 %5082 to i8
  %5084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5083, i8* %5084, align 1, !tbaa !2450
  %5085 = load i64, i64* %RDX
  %5086 = load i32, i32* %ESI
  %5087 = zext i32 %5086 to i64
  %5088 = load i64, i64* %PC
  %5089 = add i64 %5088, 3
  store i64 %5089, i64* %PC
  %5090 = shl i64 %5085, 32
  %5091 = ashr exact i64 %5090, 32
  %5092 = shl i64 %5087, 32
  %5093 = ashr exact i64 %5092, 32
  %5094 = mul nsw i64 %5093, %5091
  %5095 = trunc i64 %5094 to i32
  %5096 = and i64 %5094, 4294967295
  store i64 %5096, i64* %RDX, align 8, !tbaa !2428
  %5097 = shl i64 %5094, 32
  %5098 = ashr exact i64 %5097, 32
  %5099 = icmp ne i64 %5098, %5094
  %5100 = zext i1 %5099 to i8
  %5101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5100, i8* %5101, align 1, !tbaa !2432
  %5102 = and i32 %5095, 255
  %5103 = call i32 @llvm.ctpop.i32(i32 %5102) #16
  %5104 = trunc i32 %5103 to i8
  %5105 = and i8 %5104, 1
  %5106 = xor i8 %5105, 1
  %5107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5106, i8* %5107, align 1, !tbaa !2446
  %5108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5108, align 1, !tbaa !2447
  %5109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5109, align 1, !tbaa !2448
  %5110 = lshr i32 %5095, 31
  %5111 = trunc i32 %5110 to i8
  %5112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5111, i8* %5112, align 1, !tbaa !2449
  %5113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5100, i8* %5113, align 1, !tbaa !2450
  %5114 = load i64, i64* %RDX
  %5115 = load i64, i64* %RBP
  %5116 = sub i64 %5115, 48
  %5117 = load i64, i64* %PC
  %5118 = add i64 %5117, 3
  store i64 %5118, i64* %PC
  %5119 = trunc i64 %5114 to i32
  %5120 = inttoptr i64 %5116 to i32*
  %5121 = load i32, i32* %5120
  %5122 = add i32 %5121, %5119
  %5123 = zext i32 %5122 to i64
  store i64 %5123, i64* %RDX, align 8, !tbaa !2428
  %5124 = icmp ult i32 %5122, %5119
  %5125 = icmp ult i32 %5122, %5121
  %5126 = or i1 %5124, %5125
  %5127 = zext i1 %5126 to i8
  %5128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5127, i8* %5128, align 1, !tbaa !2432
  %5129 = and i32 %5122, 255
  %5130 = call i32 @llvm.ctpop.i32(i32 %5129) #16
  %5131 = trunc i32 %5130 to i8
  %5132 = and i8 %5131, 1
  %5133 = xor i8 %5132, 1
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5133, i8* %5134, align 1, !tbaa !2446
  %5135 = xor i32 %5121, %5119
  %5136 = xor i32 %5135, %5122
  %5137 = lshr i32 %5136, 4
  %5138 = trunc i32 %5137 to i8
  %5139 = and i8 %5138, 1
  %5140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5139, i8* %5140, align 1, !tbaa !2447
  %5141 = icmp eq i32 %5122, 0
  %5142 = zext i1 %5141 to i8
  %5143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5142, i8* %5143, align 1, !tbaa !2448
  %5144 = lshr i32 %5122, 31
  %5145 = trunc i32 %5144 to i8
  %5146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5145, i8* %5146, align 1, !tbaa !2449
  %5147 = lshr i32 %5119, 31
  %5148 = lshr i32 %5121, 31
  %5149 = xor i32 %5144, %5147
  %5150 = xor i32 %5144, %5148
  %5151 = add nuw nsw i32 %5149, %5150
  %5152 = icmp eq i32 %5151, 2
  %5153 = zext i1 %5152 to i8
  %5154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5153, i8* %5154, align 1, !tbaa !2450
  %5155 = load i32, i32* %EDX
  %5156 = zext i32 %5155 to i64
  %5157 = load i64, i64* %PC
  %5158 = add i64 %5157, 3
  store i64 %5158, i64* %PC
  %5159 = shl i64 %5156, 32
  %5160 = ashr exact i64 %5159, 32
  store i64 %5160, i64* %RCX, align 8, !tbaa !2428
  %5161 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5162 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5163 = load i64, i64* %RAX
  %5164 = load i64, i64* %RCX
  %5165 = mul i64 %5164, 4
  %5166 = add i64 %5165, %5163
  %5167 = load i64, i64* %PC
  %5168 = add i64 %5167, 5
  store i64 %5168, i64* %PC
  %5169 = bitcast i8* %5162 to <2 x float>*
  %5170 = load <2 x float>, <2 x float>* %5169, align 1
  %5171 = getelementptr inbounds i8, i8* %5162, i64 8
  %5172 = bitcast i8* %5171 to <2 x i32>*
  %5173 = load <2 x i32>, <2 x i32>* %5172, align 1
  %5174 = inttoptr i64 %5166 to float*
  %5175 = load float, float* %5174
  %5176 = extractelement <2 x float> %5170, i32 0
  %5177 = fmul float %5176, %5175
  %5178 = bitcast i8* %5161 to float*
  store float %5177, float* %5178, align 1, !tbaa !2452
  %5179 = bitcast <2 x float> %5170 to <2 x i32>
  %5180 = extractelement <2 x i32> %5179, i32 1
  %5181 = getelementptr inbounds i8, i8* %5161, i64 4
  %5182 = bitcast i8* %5181 to i32*
  store i32 %5180, i32* %5182, align 1, !tbaa !2452
  %5183 = extractelement <2 x i32> %5173, i32 0
  %5184 = getelementptr inbounds i8, i8* %5161, i64 8
  %5185 = bitcast i8* %5184 to i32*
  store i32 %5183, i32* %5185, align 1, !tbaa !2452
  %5186 = extractelement <2 x i32> %5173, i32 1
  %5187 = getelementptr inbounds i8, i8* %5161, i64 12
  %5188 = bitcast i8* %5187 to i32*
  store i32 %5186, i32* %5188, align 1, !tbaa !2452
  %5189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5190 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5191 = bitcast %union.vec128_t* %XMM1 to i8*
  %5192 = load i64, i64* %PC
  %5193 = add i64 %5192, 4
  store i64 %5193, i64* %PC
  %5194 = bitcast i8* %5190 to <2 x float>*
  %5195 = load <2 x float>, <2 x float>* %5194, align 1
  %5196 = getelementptr inbounds i8, i8* %5190, i64 8
  %5197 = bitcast i8* %5196 to <2 x i32>*
  %5198 = load <2 x i32>, <2 x i32>* %5197, align 1
  %5199 = bitcast i8* %5191 to <2 x float>*
  %5200 = load <2 x float>, <2 x float>* %5199, align 1
  %5201 = extractelement <2 x float> %5195, i32 0
  %5202 = extractelement <2 x float> %5200, i32 0
  %5203 = fadd float %5201, %5202
  %5204 = bitcast i8* %5189 to float*
  store float %5203, float* %5204, align 1, !tbaa !2452
  %5205 = bitcast <2 x float> %5195 to <2 x i32>
  %5206 = extractelement <2 x i32> %5205, i32 1
  %5207 = getelementptr inbounds i8, i8* %5189, i64 4
  %5208 = bitcast i8* %5207 to i32*
  store i32 %5206, i32* %5208, align 1, !tbaa !2452
  %5209 = extractelement <2 x i32> %5198, i32 0
  %5210 = getelementptr inbounds i8, i8* %5189, i64 8
  %5211 = bitcast i8* %5210 to i32*
  store i32 %5209, i32* %5211, align 1, !tbaa !2452
  %5212 = extractelement <2 x i32> %5198, i32 1
  %5213 = getelementptr inbounds i8, i8* %5189, i64 12
  %5214 = bitcast i8* %5213 to i32*
  store i32 %5212, i32* %5214, align 1, !tbaa !2452
  %5215 = load i64, i64* %RBP
  %5216 = sub i64 %5215, 32
  %5217 = load i64, i64* %PC
  %5218 = add i64 %5217, 4
  store i64 %5218, i64* %PC
  %5219 = inttoptr i64 %5216 to i64*
  %5220 = load i64, i64* %5219
  store i64 %5220, i64* %RAX, align 8, !tbaa !2428
  %5221 = load i64, i64* %RBP
  %5222 = sub i64 %5221, 44
  %5223 = load i64, i64* %PC
  %5224 = add i64 %5223, 4
  store i64 %5224, i64* %PC
  %5225 = inttoptr i64 %5222 to i32*
  %5226 = load i32, i32* %5225
  %5227 = sext i32 %5226 to i64
  store i64 %5227, i64* %RCX, align 8, !tbaa !2428
  %5228 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5229 = load i64, i64* %RAX
  %5230 = load i64, i64* %RCX
  %5231 = mul i64 %5230, 4
  %5232 = add i64 %5231, %5229
  %5233 = load i64, i64* %PC
  %5234 = add i64 %5233, 5
  store i64 %5234, i64* %PC
  %5235 = inttoptr i64 %5232 to float*
  %5236 = load float, float* %5235
  %5237 = bitcast i8* %5228 to float*
  store float %5236, float* %5237, align 1, !tbaa !2452
  %5238 = getelementptr inbounds i8, i8* %5228, i64 4
  %5239 = bitcast i8* %5238 to float*
  store float 0.000000e+00, float* %5239, align 1, !tbaa !2452
  %5240 = getelementptr inbounds i8, i8* %5228, i64 8
  %5241 = bitcast i8* %5240 to float*
  store float 0.000000e+00, float* %5241, align 1, !tbaa !2452
  %5242 = getelementptr inbounds i8, i8* %5228, i64 12
  %5243 = bitcast i8* %5242 to float*
  store float 0.000000e+00, float* %5243, align 1, !tbaa !2452
  %5244 = load i64, i64* %RBP
  %5245 = sub i64 %5244, 40
  %5246 = load i64, i64* %PC
  %5247 = add i64 %5246, 4
  store i64 %5247, i64* %PC
  %5248 = inttoptr i64 %5245 to i64*
  %5249 = load i64, i64* %5248
  store i64 %5249, i64* %RAX, align 8, !tbaa !2428
  %5250 = load i64, i64* %RBP
  %5251 = sub i64 %5250, 24
  %5252 = load i64, i64* %PC
  %5253 = add i64 %5252, 3
  store i64 %5253, i64* %PC
  %5254 = inttoptr i64 %5251 to i32*
  %5255 = load i32, i32* %5254
  %5256 = zext i32 %5255 to i64
  store i64 %5256, i64* %RDX, align 8, !tbaa !2428
  %5257 = load i64, i64* %RDX
  %5258 = load i64, i64* %RBP
  %5259 = sub i64 %5258, 44
  %5260 = load i64, i64* %PC
  %5261 = add i64 %5260, 4
  store i64 %5261, i64* %PC
  %5262 = inttoptr i64 %5259 to i32*
  %5263 = load i32, i32* %5262
  %5264 = shl i64 %5257, 32
  %5265 = ashr exact i64 %5264, 32
  %5266 = sext i32 %5263 to i64
  %5267 = mul nsw i64 %5266, %5265
  %5268 = trunc i64 %5267 to i32
  %5269 = and i64 %5267, 4294967295
  store i64 %5269, i64* %RDX, align 8, !tbaa !2428
  %5270 = shl i64 %5267, 32
  %5271 = ashr exact i64 %5270, 32
  %5272 = icmp ne i64 %5271, %5267
  %5273 = zext i1 %5272 to i8
  %5274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5273, i8* %5274, align 1, !tbaa !2432
  %5275 = and i32 %5268, 255
  %5276 = call i32 @llvm.ctpop.i32(i32 %5275) #16
  %5277 = trunc i32 %5276 to i8
  %5278 = and i8 %5277, 1
  %5279 = xor i8 %5278, 1
  %5280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5279, i8* %5280, align 1, !tbaa !2446
  %5281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5281, align 1, !tbaa !2447
  %5282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5282, align 1, !tbaa !2448
  %5283 = lshr i32 %5268, 31
  %5284 = trunc i32 %5283 to i8
  %5285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5284, i8* %5285, align 1, !tbaa !2449
  %5286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5273, i8* %5286, align 1, !tbaa !2450
  %5287 = load i64, i64* %RDX
  %5288 = load i64, i64* %RBP
  %5289 = sub i64 %5288, 48
  %5290 = load i64, i64* %PC
  %5291 = add i64 %5290, 3
  store i64 %5291, i64* %PC
  %5292 = trunc i64 %5287 to i32
  %5293 = inttoptr i64 %5289 to i32*
  %5294 = load i32, i32* %5293
  %5295 = add i32 %5294, %5292
  %5296 = zext i32 %5295 to i64
  store i64 %5296, i64* %RDX, align 8, !tbaa !2428
  %5297 = icmp ult i32 %5295, %5292
  %5298 = icmp ult i32 %5295, %5294
  %5299 = or i1 %5297, %5298
  %5300 = zext i1 %5299 to i8
  %5301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5300, i8* %5301, align 1, !tbaa !2432
  %5302 = and i32 %5295, 255
  %5303 = call i32 @llvm.ctpop.i32(i32 %5302) #16
  %5304 = trunc i32 %5303 to i8
  %5305 = and i8 %5304, 1
  %5306 = xor i8 %5305, 1
  %5307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5306, i8* %5307, align 1, !tbaa !2446
  %5308 = xor i32 %5294, %5292
  %5309 = xor i32 %5308, %5295
  %5310 = lshr i32 %5309, 4
  %5311 = trunc i32 %5310 to i8
  %5312 = and i8 %5311, 1
  %5313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5312, i8* %5313, align 1, !tbaa !2447
  %5314 = icmp eq i32 %5295, 0
  %5315 = zext i1 %5314 to i8
  %5316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5315, i8* %5316, align 1, !tbaa !2448
  %5317 = lshr i32 %5295, 31
  %5318 = trunc i32 %5317 to i8
  %5319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5318, i8* %5319, align 1, !tbaa !2449
  %5320 = lshr i32 %5292, 31
  %5321 = lshr i32 %5294, 31
  %5322 = xor i32 %5317, %5320
  %5323 = xor i32 %5317, %5321
  %5324 = add nuw nsw i32 %5322, %5323
  %5325 = icmp eq i32 %5324, 2
  %5326 = zext i1 %5325 to i8
  %5327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5326, i8* %5327, align 1, !tbaa !2450
  %5328 = load i32, i32* %EDX
  %5329 = zext i32 %5328 to i64
  %5330 = load i64, i64* %PC
  %5331 = add i64 %5330, 3
  store i64 %5331, i64* %PC
  %5332 = shl i64 %5329, 32
  %5333 = ashr exact i64 %5332, 32
  store i64 %5333, i64* %RCX, align 8, !tbaa !2428
  %5334 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5335 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5336 = load i64, i64* %RAX
  %5337 = load i64, i64* %RCX
  %5338 = mul i64 %5337, 4
  %5339 = add i64 %5338, %5336
  %5340 = load i64, i64* %PC
  %5341 = add i64 %5340, 5
  store i64 %5341, i64* %PC
  %5342 = bitcast i8* %5335 to <2 x float>*
  %5343 = load <2 x float>, <2 x float>* %5342, align 1
  %5344 = getelementptr inbounds i8, i8* %5335, i64 8
  %5345 = bitcast i8* %5344 to <2 x i32>*
  %5346 = load <2 x i32>, <2 x i32>* %5345, align 1
  %5347 = inttoptr i64 %5339 to float*
  %5348 = load float, float* %5347
  %5349 = extractelement <2 x float> %5343, i32 0
  %5350 = fmul float %5349, %5348
  %5351 = bitcast i8* %5334 to float*
  store float %5350, float* %5351, align 1, !tbaa !2452
  %5352 = bitcast <2 x float> %5343 to <2 x i32>
  %5353 = extractelement <2 x i32> %5352, i32 1
  %5354 = getelementptr inbounds i8, i8* %5334, i64 4
  %5355 = bitcast i8* %5354 to i32*
  store i32 %5353, i32* %5355, align 1, !tbaa !2452
  %5356 = extractelement <2 x i32> %5346, i32 0
  %5357 = getelementptr inbounds i8, i8* %5334, i64 8
  %5358 = bitcast i8* %5357 to i32*
  store i32 %5356, i32* %5358, align 1, !tbaa !2452
  %5359 = extractelement <2 x i32> %5346, i32 1
  %5360 = getelementptr inbounds i8, i8* %5334, i64 12
  %5361 = bitcast i8* %5360 to i32*
  store i32 %5359, i32* %5361, align 1, !tbaa !2452
  %5362 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5363 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5364 = bitcast %union.vec128_t* %XMM1 to i8*
  %5365 = load i64, i64* %PC
  %5366 = add i64 %5365, 4
  store i64 %5366, i64* %PC
  %5367 = bitcast i8* %5363 to <2 x float>*
  %5368 = load <2 x float>, <2 x float>* %5367, align 1
  %5369 = getelementptr inbounds i8, i8* %5363, i64 8
  %5370 = bitcast i8* %5369 to <2 x i32>*
  %5371 = load <2 x i32>, <2 x i32>* %5370, align 1
  %5372 = bitcast i8* %5364 to <2 x float>*
  %5373 = load <2 x float>, <2 x float>* %5372, align 1
  %5374 = extractelement <2 x float> %5368, i32 0
  %5375 = extractelement <2 x float> %5373, i32 0
  %5376 = fadd float %5374, %5375
  %5377 = bitcast i8* %5362 to float*
  store float %5376, float* %5377, align 1, !tbaa !2452
  %5378 = bitcast <2 x float> %5368 to <2 x i32>
  %5379 = extractelement <2 x i32> %5378, i32 1
  %5380 = getelementptr inbounds i8, i8* %5362, i64 4
  %5381 = bitcast i8* %5380 to i32*
  store i32 %5379, i32* %5381, align 1, !tbaa !2452
  %5382 = extractelement <2 x i32> %5371, i32 0
  %5383 = getelementptr inbounds i8, i8* %5362, i64 8
  %5384 = bitcast i8* %5383 to i32*
  store i32 %5382, i32* %5384, align 1, !tbaa !2452
  %5385 = extractelement <2 x i32> %5371, i32 1
  %5386 = getelementptr inbounds i8, i8* %5362, i64 12
  %5387 = bitcast i8* %5386 to i32*
  store i32 %5385, i32* %5387, align 1, !tbaa !2452
  %5388 = load i64, i64* %RBP
  %5389 = sub i64 %5388, 16
  %5390 = load i64, i64* %PC
  %5391 = add i64 %5390, 4
  store i64 %5391, i64* %PC
  %5392 = inttoptr i64 %5389 to i64*
  %5393 = load i64, i64* %5392
  store i64 %5393, i64* %RAX, align 8, !tbaa !2428
  %5394 = load i64, i64* %RBP
  %5395 = sub i64 %5394, 48
  %5396 = load i64, i64* %PC
  %5397 = add i64 %5396, 4
  store i64 %5397, i64* %PC
  %5398 = inttoptr i64 %5395 to i32*
  %5399 = load i32, i32* %5398
  %5400 = sext i32 %5399 to i64
  store i64 %5400, i64* %RCX, align 8, !tbaa !2428
  %5401 = load i64, i64* %RAX
  %5402 = load i64, i64* %RCX
  %5403 = mul i64 %5402, 4
  %5404 = add i64 %5403, %5401
  %5405 = bitcast %union.vec128_t* %XMM0 to i8*
  %5406 = load i64, i64* %PC
  %5407 = add i64 %5406, 5
  store i64 %5407, i64* %PC
  %5408 = bitcast i8* %5405 to <2 x float>*
  %5409 = load <2 x float>, <2 x float>* %5408, align 1
  %5410 = extractelement <2 x float> %5409, i32 0
  %5411 = inttoptr i64 %5404 to float*
  store float %5410, float* %5411
  %5412 = load i64, i64* %RBP
  %5413 = sub i64 %5412, 48
  %5414 = load i64, i64* %PC
  %5415 = add i64 %5414, 3
  store i64 %5415, i64* %PC
  %5416 = inttoptr i64 %5413 to i32*
  %5417 = load i32, i32* %5416
  %5418 = zext i32 %5417 to i64
  store i64 %5418, i64* %RAX, align 8, !tbaa !2428
  %5419 = load i64, i64* %RAX
  %5420 = load i64, i64* %PC
  %5421 = add i64 %5420, 3
  store i64 %5421, i64* %PC
  %5422 = trunc i64 %5419 to i32
  %5423 = add i32 1, %5422
  %5424 = zext i32 %5423 to i64
  store i64 %5424, i64* %RAX, align 8, !tbaa !2428
  %5425 = icmp ult i32 %5423, %5422
  %5426 = icmp ult i32 %5423, 1
  %5427 = or i1 %5425, %5426
  %5428 = zext i1 %5427 to i8
  %5429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5428, i8* %5429, align 1, !tbaa !2432
  %5430 = and i32 %5423, 255
  %5431 = call i32 @llvm.ctpop.i32(i32 %5430) #16
  %5432 = trunc i32 %5431 to i8
  %5433 = and i8 %5432, 1
  %5434 = xor i8 %5433, 1
  %5435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5434, i8* %5435, align 1, !tbaa !2446
  %5436 = xor i64 1, %5419
  %5437 = trunc i64 %5436 to i32
  %5438 = xor i32 %5437, %5423
  %5439 = lshr i32 %5438, 4
  %5440 = trunc i32 %5439 to i8
  %5441 = and i8 %5440, 1
  %5442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5441, i8* %5442, align 1, !tbaa !2447
  %5443 = icmp eq i32 %5423, 0
  %5444 = zext i1 %5443 to i8
  %5445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5444, i8* %5445, align 1, !tbaa !2448
  %5446 = lshr i32 %5423, 31
  %5447 = trunc i32 %5446 to i8
  %5448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5447, i8* %5448, align 1, !tbaa !2449
  %5449 = lshr i32 %5422, 31
  %5450 = xor i32 %5446, %5449
  %5451 = add nuw nsw i32 %5450, %5446
  %5452 = icmp eq i32 %5451, 2
  %5453 = zext i1 %5452 to i8
  %5454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5453, i8* %5454, align 1, !tbaa !2450
  %5455 = load i64, i64* %RBP
  %5456 = sub i64 %5455, 48
  %5457 = load i32, i32* %EAX
  %5458 = zext i32 %5457 to i64
  %5459 = load i64, i64* %PC
  %5460 = add i64 %5459, 3
  store i64 %5460, i64* %PC
  %5461 = inttoptr i64 %5456 to i32*
  store i32 %5457, i32* %5461
  %5462 = load i64, i64* %PC
  %5463 = sub i64 %5462, 233
  %5464 = load i64, i64* %PC
  %5465 = add i64 %5464, 5
  store i64 %5465, i64* %PC
  %5466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5463, i64* %5466, align 8, !tbaa !2428
  br label %block_40214a

block_402054:                                     ; preds = %block_401ff9
  %5467 = load i64, i64* %PC
  %5468 = add i64 %5467, 5
  %5469 = load i64, i64* %PC
  %5470 = add i64 %5469, 5
  store i64 %5470, i64* %PC
  %5471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5468, i64* %5471, align 8, !tbaa !2428
  br label %block_402059

block_401ff9:                                     ; preds = %block_402005, %block_401fe9
  %MEMORY.1 = phi %struct.Memory* [ %174, %block_401fe9 ], [ %MEMORY.1, %block_402005 ]
  %5472 = load i64, i64* %RBP
  %5473 = sub i64 %5472, 48
  %5474 = load i64, i64* %PC
  %5475 = add i64 %5474, 3
  store i64 %5475, i64* %PC
  %5476 = inttoptr i64 %5473 to i32*
  %5477 = load i32, i32* %5476
  %5478 = zext i32 %5477 to i64
  store i64 %5478, i64* %RAX, align 8, !tbaa !2428
  %5479 = load i32, i32* %EAX
  %5480 = zext i32 %5479 to i64
  %5481 = load i64, i64* %RBP
  %5482 = sub i64 %5481, 4
  %5483 = load i64, i64* %PC
  %5484 = add i64 %5483, 3
  store i64 %5484, i64* %PC
  %5485 = inttoptr i64 %5482 to i32*
  %5486 = load i32, i32* %5485
  %5487 = sub i32 %5479, %5486
  %5488 = icmp ult i32 %5479, %5486
  %5489 = zext i1 %5488 to i8
  %5490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5489, i8* %5490, align 1, !tbaa !2432
  %5491 = and i32 %5487, 255
  %5492 = call i32 @llvm.ctpop.i32(i32 %5491) #16
  %5493 = trunc i32 %5492 to i8
  %5494 = and i8 %5493, 1
  %5495 = xor i8 %5494, 1
  %5496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5495, i8* %5496, align 1, !tbaa !2446
  %5497 = xor i32 %5486, %5479
  %5498 = xor i32 %5497, %5487
  %5499 = lshr i32 %5498, 4
  %5500 = trunc i32 %5499 to i8
  %5501 = and i8 %5500, 1
  %5502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5501, i8* %5502, align 1, !tbaa !2447
  %5503 = icmp eq i32 %5487, 0
  %5504 = zext i1 %5503 to i8
  %5505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5504, i8* %5505, align 1, !tbaa !2448
  %5506 = lshr i32 %5487, 31
  %5507 = trunc i32 %5506 to i8
  %5508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5507, i8* %5508, align 1, !tbaa !2449
  %5509 = lshr i32 %5479, 31
  %5510 = lshr i32 %5486, 31
  %5511 = xor i32 %5510, %5509
  %5512 = xor i32 %5506, %5509
  %5513 = add nuw nsw i32 %5512, %5511
  %5514 = icmp eq i32 %5513, 2
  %5515 = zext i1 %5514 to i8
  %5516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5515, i8* %5516, align 1, !tbaa !2450
  %5517 = load i64, i64* %PC
  %5518 = add i64 %5517, 85
  %5519 = load i64, i64* %PC
  %5520 = add i64 %5519, 6
  %5521 = load i64, i64* %PC
  %5522 = add i64 %5521, 6
  store i64 %5522, i64* %PC
  %5523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5524 = load i8, i8* %5523, align 1, !tbaa !2449
  %5525 = icmp ne i8 %5524, 0
  %5526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5527 = load i8, i8* %5526, align 1, !tbaa !2450
  %5528 = icmp ne i8 %5527, 0
  %5529 = xor i1 %5525, %5528
  %5530 = xor i1 %5529, true
  %5531 = zext i1 %5530 to i8
  store i8 %5531, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5533 = select i1 %5529, i64 %5520, i64 %5518
  store i64 %5533, i64* %5532, align 8, !tbaa !2428
  %5534 = load i8, i8* %BRANCH_TAKEN
  %5535 = icmp eq i8 %5534, 1
  br i1 %5535, label %block_402054, label %block_402005

block_40223d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_402238
  %MEMORY.2 = phi %struct.Memory* [ %9015, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %MEMORY.5, %block_402238 ]
  %5536 = load i64, i64* %PC
  %5537 = add i64 %5536, 5
  store i64 %5537, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %5538 = load i64, i64* %RBP
  %5539 = sub i64 %5538, 20
  %5540 = load i64, i64* %PC
  %5541 = add i64 %5540, 3
  store i64 %5541, i64* %PC
  %5542 = inttoptr i64 %5539 to i32*
  %5543 = load i32, i32* %5542
  %5544 = zext i32 %5543 to i64
  store i64 %5544, i64* %RCX, align 8, !tbaa !2428
  %5545 = load i64, i64* %RBP
  %5546 = sub i64 %5545, 68
  %5547 = load i32, i32* %EAX
  %5548 = zext i32 %5547 to i64
  %5549 = load i64, i64* %PC
  %5550 = add i64 %5549, 3
  store i64 %5550, i64* %PC
  %5551 = inttoptr i64 %5546 to i32*
  store i32 %5547, i32* %5551
  %5552 = load i32, i32* %ECX
  %5553 = zext i32 %5552 to i64
  %5554 = load i64, i64* %PC
  %5555 = add i64 %5554, 2
  store i64 %5555, i64* %PC
  %5556 = and i64 %5553, 4294967295
  store i64 %5556, i64* %RAX, align 8, !tbaa !2428
  %5557 = load i64, i64* %PC
  %5558 = add i64 %5557, 1
  store i64 %5558, i64* %PC
  %5559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %5560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5561 = bitcast %union.anon* %5560 to i32*
  %5562 = load i32, i32* %5561, align 8, !tbaa !2456
  %5563 = sext i32 %5562 to i64
  %5564 = lshr i64 %5563, 32
  store i64 %5564, i64* %5559, align 8, !tbaa !2428
  %5565 = load i64, i64* %RBP
  %5566 = sub i64 %5565, 68
  %5567 = load i64, i64* %PC
  %5568 = add i64 %5567, 3
  store i64 %5568, i64* %PC
  %5569 = inttoptr i64 %5566 to i32*
  %5570 = load i32, i32* %5569
  %5571 = zext i32 %5570 to i64
  store i64 %5571, i64* %RCX, align 8, !tbaa !2428
  %5572 = load i32, i32* %ECX
  %5573 = zext i32 %5572 to i64
  %5574 = load i64, i64* %PC
  %5575 = add i64 %5574, 2
  store i64 %5575, i64* %PC
  %5576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %5577 = bitcast %union.anon* %5576 to i32*
  %5578 = load i32, i32* %5577, align 8, !tbaa !2456
  %5579 = zext i32 %5578 to i64
  %5580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %5581 = bitcast %union.anon* %5580 to i32*
  %5582 = load i32, i32* %5581, align 8, !tbaa !2456
  %5583 = zext i32 %5582 to i64
  %5584 = shl i64 %5573, 32
  %5585 = ashr exact i64 %5584, 32
  %5586 = shl nuw i64 %5583, 32
  %5587 = or i64 %5586, %5579
  %5588 = sdiv i64 %5587, %5585
  %5589 = shl i64 %5588, 32
  %5590 = ashr exact i64 %5589, 32
  %5591 = icmp eq i64 %5588, %5590
  br i1 %5591, label %5596, label %5592

; <label>:5592:                                   ; preds = %block_40223d
  %5593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5594 = load i64, i64* %5593, align 8, !tbaa !2428
  %5595 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5594, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:5596:                                   ; preds = %block_40223d
  %5597 = srem i64 %5587, %5585
  %5598 = getelementptr inbounds %union.anon, %union.anon* %5576, i64 0, i32 0
  %5599 = and i64 %5588, 4294967295
  store i64 %5599, i64* %5598, align 8, !tbaa !2428
  %5600 = getelementptr inbounds %union.anon, %union.anon* %5580, i64 0, i32 0
  %5601 = and i64 %5597, 4294967295
  store i64 %5601, i64* %5600, align 8, !tbaa !2428
  %5602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5602, align 1, !tbaa !2432
  %5603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %5603, align 1, !tbaa !2446
  %5604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5604, align 1, !tbaa !2447
  %5605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5605, align 1, !tbaa !2448
  %5606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5606, align 1, !tbaa !2449
  %5607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5607, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %5592, %5596
  %5608 = phi %struct.Memory* [ %5595, %5592 ], [ %MEMORY.2, %5596 ]
  %5609 = load i64, i64* %RBP
  %5610 = sub i64 %5609, 44
  %5611 = load i32, i32* %EDX
  %5612 = zext i32 %5611 to i64
  %5613 = load i64, i64* %PC
  %5614 = add i64 %5613, 3
  store i64 %5614, i64* %PC
  %5615 = inttoptr i64 %5610 to i32*
  store i32 %5611, i32* %5615
  %5616 = load i64, i64* %RBP
  %5617 = sub i64 %5616, 44
  %5618 = load i64, i64* %PC
  %5619 = add i64 %5618, 4
  store i64 %5619, i64* %PC
  %5620 = inttoptr i64 %5617 to i32*
  %5621 = load i32, i32* %5620
  %5622 = sub i32 %5621, 8
  %5623 = icmp ult i32 %5621, 8
  %5624 = zext i1 %5623 to i8
  %5625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5624, i8* %5625, align 1, !tbaa !2432
  %5626 = and i32 %5622, 255
  %5627 = call i32 @llvm.ctpop.i32(i32 %5626) #16
  %5628 = trunc i32 %5627 to i8
  %5629 = and i8 %5628, 1
  %5630 = xor i8 %5629, 1
  %5631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5630, i8* %5631, align 1, !tbaa !2446
  %5632 = xor i32 %5621, 8
  %5633 = xor i32 %5632, %5622
  %5634 = lshr i32 %5633, 4
  %5635 = trunc i32 %5634 to i8
  %5636 = and i8 %5635, 1
  %5637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5636, i8* %5637, align 1, !tbaa !2447
  %5638 = icmp eq i32 %5622, 0
  %5639 = zext i1 %5638 to i8
  %5640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5639, i8* %5640, align 1, !tbaa !2448
  %5641 = lshr i32 %5622, 31
  %5642 = trunc i32 %5641 to i8
  %5643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5642, i8* %5643, align 1, !tbaa !2449
  %5644 = lshr i32 %5621, 31
  %5645 = xor i32 %5641, %5644
  %5646 = add nuw nsw i32 %5645, %5644
  %5647 = icmp eq i32 %5646, 2
  %5648 = zext i1 %5647 to i8
  %5649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5648, i8* %5649, align 1, !tbaa !2450
  %5650 = load i64, i64* %PC
  %5651 = add i64 %5650, 461
  %5652 = load i64, i64* %PC
  %5653 = add i64 %5652, 6
  %5654 = load i64, i64* %PC
  %5655 = add i64 %5654, 6
  store i64 %5655, i64* %PC
  %5656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5657 = load i8, i8* %5656, align 1, !tbaa !2449
  %5658 = icmp ne i8 %5657, 0
  %5659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5660 = load i8, i8* %5659, align 1, !tbaa !2450
  %5661 = icmp ne i8 %5660, 0
  %5662 = xor i1 %5658, %5661
  %5663 = zext i1 %5662 to i8
  store i8 %5663, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5665 = select i1 %5662, i64 %5651, i64 %5653
  store i64 %5665, i64* %5664, align 8, !tbaa !2428
  %5666 = load i8, i8* %BRANCH_TAKEN
  %5667 = icmp eq i8 %5666, 1
  br i1 %5667, label %block_402424, label %block_40225d

block_402279:                                     ; preds = %block_40226d
  %5668 = load i64, i64* %RBP
  %5669 = sub i64 %5668, 16
  %5670 = load i64, i64* %PC
  %5671 = add i64 %5670, 4
  store i64 %5671, i64* %PC
  %5672 = inttoptr i64 %5669 to i64*
  %5673 = load i64, i64* %5672
  store i64 %5673, i64* %RAX, align 8, !tbaa !2428
  %5674 = load i64, i64* %RBP
  %5675 = sub i64 %5674, 48
  %5676 = load i64, i64* %PC
  %5677 = add i64 %5676, 4
  store i64 %5677, i64* %PC
  %5678 = inttoptr i64 %5675 to i32*
  %5679 = load i32, i32* %5678
  %5680 = sext i32 %5679 to i64
  store i64 %5680, i64* %RCX, align 8, !tbaa !2428
  %5681 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5682 = load i64, i64* %RAX
  %5683 = load i64, i64* %RCX
  %5684 = mul i64 %5683, 4
  %5685 = add i64 %5684, %5682
  %5686 = load i64, i64* %PC
  %5687 = add i64 %5686, 5
  store i64 %5687, i64* %PC
  %5688 = inttoptr i64 %5685 to float*
  %5689 = load float, float* %5688
  %5690 = bitcast i8* %5681 to float*
  store float %5689, float* %5690, align 1, !tbaa !2452
  %5691 = getelementptr inbounds i8, i8* %5681, i64 4
  %5692 = bitcast i8* %5691 to float*
  store float 0.000000e+00, float* %5692, align 1, !tbaa !2452
  %5693 = getelementptr inbounds i8, i8* %5681, i64 8
  %5694 = bitcast i8* %5693 to float*
  store float 0.000000e+00, float* %5694, align 1, !tbaa !2452
  %5695 = getelementptr inbounds i8, i8* %5681, i64 12
  %5696 = bitcast i8* %5695 to float*
  store float 0.000000e+00, float* %5696, align 1, !tbaa !2452
  %5697 = load i64, i64* %RBP
  %5698 = sub i64 %5697, 32
  %5699 = load i64, i64* %PC
  %5700 = add i64 %5699, 4
  store i64 %5700, i64* %PC
  %5701 = inttoptr i64 %5698 to i64*
  %5702 = load i64, i64* %5701
  store i64 %5702, i64* %RAX, align 8, !tbaa !2428
  %5703 = load i64, i64* %RBP
  %5704 = sub i64 %5703, 44
  %5705 = load i64, i64* %PC
  %5706 = add i64 %5705, 3
  store i64 %5706, i64* %PC
  %5707 = inttoptr i64 %5704 to i32*
  %5708 = load i32, i32* %5707
  %5709 = zext i32 %5708 to i64
  store i64 %5709, i64* %RDX, align 8, !tbaa !2428
  %5710 = load i64, i64* %RDX
  %5711 = load i64, i64* %PC
  %5712 = add i64 %5711, 3
  store i64 %5712, i64* %PC
  %5713 = trunc i64 %5710 to i32
  %5714 = sub i32 %5713, 7
  %5715 = zext i32 %5714 to i64
  store i64 %5715, i64* %RDX, align 8, !tbaa !2428
  %5716 = icmp ult i32 %5713, 7
  %5717 = zext i1 %5716 to i8
  %5718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5717, i8* %5718, align 1, !tbaa !2432
  %5719 = and i32 %5714, 255
  %5720 = call i32 @llvm.ctpop.i32(i32 %5719) #16
  %5721 = trunc i32 %5720 to i8
  %5722 = and i8 %5721, 1
  %5723 = xor i8 %5722, 1
  %5724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5723, i8* %5724, align 1, !tbaa !2446
  %5725 = xor i64 7, %5710
  %5726 = trunc i64 %5725 to i32
  %5727 = xor i32 %5726, %5714
  %5728 = lshr i32 %5727, 4
  %5729 = trunc i32 %5728 to i8
  %5730 = and i8 %5729, 1
  %5731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5730, i8* %5731, align 1, !tbaa !2447
  %5732 = icmp eq i32 %5714, 0
  %5733 = zext i1 %5732 to i8
  %5734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5733, i8* %5734, align 1, !tbaa !2448
  %5735 = lshr i32 %5714, 31
  %5736 = trunc i32 %5735 to i8
  %5737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5736, i8* %5737, align 1, !tbaa !2449
  %5738 = lshr i32 %5713, 31
  %5739 = xor i32 %5735, %5738
  %5740 = add nuw nsw i32 %5739, %5738
  %5741 = icmp eq i32 %5740, 2
  %5742 = zext i1 %5741 to i8
  %5743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5742, i8* %5743, align 1, !tbaa !2450
  %5744 = load i32, i32* %EDX
  %5745 = zext i32 %5744 to i64
  %5746 = load i64, i64* %PC
  %5747 = add i64 %5746, 3
  store i64 %5747, i64* %PC
  %5748 = shl i64 %5745, 32
  %5749 = ashr exact i64 %5748, 32
  store i64 %5749, i64* %RCX, align 8, !tbaa !2428
  %5750 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5751 = load i64, i64* %RAX
  %5752 = load i64, i64* %RCX
  %5753 = mul i64 %5752, 4
  %5754 = add i64 %5753, %5751
  %5755 = load i64, i64* %PC
  %5756 = add i64 %5755, 5
  store i64 %5756, i64* %PC
  %5757 = inttoptr i64 %5754 to float*
  %5758 = load float, float* %5757
  %5759 = bitcast i8* %5750 to float*
  store float %5758, float* %5759, align 1, !tbaa !2452
  %5760 = getelementptr inbounds i8, i8* %5750, i64 4
  %5761 = bitcast i8* %5760 to float*
  store float 0.000000e+00, float* %5761, align 1, !tbaa !2452
  %5762 = getelementptr inbounds i8, i8* %5750, i64 8
  %5763 = bitcast i8* %5762 to float*
  store float 0.000000e+00, float* %5763, align 1, !tbaa !2452
  %5764 = getelementptr inbounds i8, i8* %5750, i64 12
  %5765 = bitcast i8* %5764 to float*
  store float 0.000000e+00, float* %5765, align 1, !tbaa !2452
  %5766 = load i64, i64* %RBP
  %5767 = sub i64 %5766, 40
  %5768 = load i64, i64* %PC
  %5769 = add i64 %5768, 4
  store i64 %5769, i64* %PC
  %5770 = inttoptr i64 %5767 to i64*
  %5771 = load i64, i64* %5770
  store i64 %5771, i64* %RAX, align 8, !tbaa !2428
  %5772 = load i64, i64* %RBP
  %5773 = sub i64 %5772, 24
  %5774 = load i64, i64* %PC
  %5775 = add i64 %5774, 3
  store i64 %5775, i64* %PC
  %5776 = inttoptr i64 %5773 to i32*
  %5777 = load i32, i32* %5776
  %5778 = zext i32 %5777 to i64
  store i64 %5778, i64* %RDX, align 8, !tbaa !2428
  %5779 = load i64, i64* %RBP
  %5780 = sub i64 %5779, 44
  %5781 = load i64, i64* %PC
  %5782 = add i64 %5781, 3
  store i64 %5782, i64* %PC
  %5783 = inttoptr i64 %5780 to i32*
  %5784 = load i32, i32* %5783
  %5785 = zext i32 %5784 to i64
  store i64 %5785, i64* %RSI, align 8, !tbaa !2428
  %5786 = load i64, i64* %RSI
  %5787 = load i64, i64* %PC
  %5788 = add i64 %5787, 3
  store i64 %5788, i64* %PC
  %5789 = trunc i64 %5786 to i32
  %5790 = sub i32 %5789, 7
  %5791 = zext i32 %5790 to i64
  store i64 %5791, i64* %RSI, align 8, !tbaa !2428
  %5792 = icmp ult i32 %5789, 7
  %5793 = zext i1 %5792 to i8
  %5794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5793, i8* %5794, align 1, !tbaa !2432
  %5795 = and i32 %5790, 255
  %5796 = call i32 @llvm.ctpop.i32(i32 %5795) #16
  %5797 = trunc i32 %5796 to i8
  %5798 = and i8 %5797, 1
  %5799 = xor i8 %5798, 1
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5799, i8* %5800, align 1, !tbaa !2446
  %5801 = xor i64 7, %5786
  %5802 = trunc i64 %5801 to i32
  %5803 = xor i32 %5802, %5790
  %5804 = lshr i32 %5803, 4
  %5805 = trunc i32 %5804 to i8
  %5806 = and i8 %5805, 1
  %5807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5806, i8* %5807, align 1, !tbaa !2447
  %5808 = icmp eq i32 %5790, 0
  %5809 = zext i1 %5808 to i8
  %5810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5809, i8* %5810, align 1, !tbaa !2448
  %5811 = lshr i32 %5790, 31
  %5812 = trunc i32 %5811 to i8
  %5813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5812, i8* %5813, align 1, !tbaa !2449
  %5814 = lshr i32 %5789, 31
  %5815 = xor i32 %5811, %5814
  %5816 = add nuw nsw i32 %5815, %5814
  %5817 = icmp eq i32 %5816, 2
  %5818 = zext i1 %5817 to i8
  %5819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5818, i8* %5819, align 1, !tbaa !2450
  %5820 = load i64, i64* %RDX
  %5821 = load i32, i32* %ESI
  %5822 = zext i32 %5821 to i64
  %5823 = load i64, i64* %PC
  %5824 = add i64 %5823, 3
  store i64 %5824, i64* %PC
  %5825 = shl i64 %5820, 32
  %5826 = ashr exact i64 %5825, 32
  %5827 = shl i64 %5822, 32
  %5828 = ashr exact i64 %5827, 32
  %5829 = mul nsw i64 %5828, %5826
  %5830 = trunc i64 %5829 to i32
  %5831 = and i64 %5829, 4294967295
  store i64 %5831, i64* %RDX, align 8, !tbaa !2428
  %5832 = shl i64 %5829, 32
  %5833 = ashr exact i64 %5832, 32
  %5834 = icmp ne i64 %5833, %5829
  %5835 = zext i1 %5834 to i8
  %5836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5835, i8* %5836, align 1, !tbaa !2432
  %5837 = and i32 %5830, 255
  %5838 = call i32 @llvm.ctpop.i32(i32 %5837) #16
  %5839 = trunc i32 %5838 to i8
  %5840 = and i8 %5839, 1
  %5841 = xor i8 %5840, 1
  %5842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5841, i8* %5842, align 1, !tbaa !2446
  %5843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5843, align 1, !tbaa !2447
  %5844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5844, align 1, !tbaa !2448
  %5845 = lshr i32 %5830, 31
  %5846 = trunc i32 %5845 to i8
  %5847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5846, i8* %5847, align 1, !tbaa !2449
  %5848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5835, i8* %5848, align 1, !tbaa !2450
  %5849 = load i64, i64* %RDX
  %5850 = load i64, i64* %RBP
  %5851 = sub i64 %5850, 48
  %5852 = load i64, i64* %PC
  %5853 = add i64 %5852, 3
  store i64 %5853, i64* %PC
  %5854 = trunc i64 %5849 to i32
  %5855 = inttoptr i64 %5851 to i32*
  %5856 = load i32, i32* %5855
  %5857 = add i32 %5856, %5854
  %5858 = zext i32 %5857 to i64
  store i64 %5858, i64* %RDX, align 8, !tbaa !2428
  %5859 = icmp ult i32 %5857, %5854
  %5860 = icmp ult i32 %5857, %5856
  %5861 = or i1 %5859, %5860
  %5862 = zext i1 %5861 to i8
  %5863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5862, i8* %5863, align 1, !tbaa !2432
  %5864 = and i32 %5857, 255
  %5865 = call i32 @llvm.ctpop.i32(i32 %5864) #16
  %5866 = trunc i32 %5865 to i8
  %5867 = and i8 %5866, 1
  %5868 = xor i8 %5867, 1
  %5869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5868, i8* %5869, align 1, !tbaa !2446
  %5870 = xor i32 %5856, %5854
  %5871 = xor i32 %5870, %5857
  %5872 = lshr i32 %5871, 4
  %5873 = trunc i32 %5872 to i8
  %5874 = and i8 %5873, 1
  %5875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5874, i8* %5875, align 1, !tbaa !2447
  %5876 = icmp eq i32 %5857, 0
  %5877 = zext i1 %5876 to i8
  %5878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5877, i8* %5878, align 1, !tbaa !2448
  %5879 = lshr i32 %5857, 31
  %5880 = trunc i32 %5879 to i8
  %5881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5880, i8* %5881, align 1, !tbaa !2449
  %5882 = lshr i32 %5854, 31
  %5883 = lshr i32 %5856, 31
  %5884 = xor i32 %5879, %5882
  %5885 = xor i32 %5879, %5883
  %5886 = add nuw nsw i32 %5884, %5885
  %5887 = icmp eq i32 %5886, 2
  %5888 = zext i1 %5887 to i8
  %5889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5888, i8* %5889, align 1, !tbaa !2450
  %5890 = load i32, i32* %EDX
  %5891 = zext i32 %5890 to i64
  %5892 = load i64, i64* %PC
  %5893 = add i64 %5892, 3
  store i64 %5893, i64* %PC
  %5894 = shl i64 %5891, 32
  %5895 = ashr exact i64 %5894, 32
  store i64 %5895, i64* %RCX, align 8, !tbaa !2428
  %5896 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5897 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5898 = load i64, i64* %RAX
  %5899 = load i64, i64* %RCX
  %5900 = mul i64 %5899, 4
  %5901 = add i64 %5900, %5898
  %5902 = load i64, i64* %PC
  %5903 = add i64 %5902, 5
  store i64 %5903, i64* %PC
  %5904 = bitcast i8* %5897 to <2 x float>*
  %5905 = load <2 x float>, <2 x float>* %5904, align 1
  %5906 = getelementptr inbounds i8, i8* %5897, i64 8
  %5907 = bitcast i8* %5906 to <2 x i32>*
  %5908 = load <2 x i32>, <2 x i32>* %5907, align 1
  %5909 = inttoptr i64 %5901 to float*
  %5910 = load float, float* %5909
  %5911 = extractelement <2 x float> %5905, i32 0
  %5912 = fmul float %5911, %5910
  %5913 = bitcast i8* %5896 to float*
  store float %5912, float* %5913, align 1, !tbaa !2452
  %5914 = bitcast <2 x float> %5905 to <2 x i32>
  %5915 = extractelement <2 x i32> %5914, i32 1
  %5916 = getelementptr inbounds i8, i8* %5896, i64 4
  %5917 = bitcast i8* %5916 to i32*
  store i32 %5915, i32* %5917, align 1, !tbaa !2452
  %5918 = extractelement <2 x i32> %5908, i32 0
  %5919 = getelementptr inbounds i8, i8* %5896, i64 8
  %5920 = bitcast i8* %5919 to i32*
  store i32 %5918, i32* %5920, align 1, !tbaa !2452
  %5921 = extractelement <2 x i32> %5908, i32 1
  %5922 = getelementptr inbounds i8, i8* %5896, i64 12
  %5923 = bitcast i8* %5922 to i32*
  store i32 %5921, i32* %5923, align 1, !tbaa !2452
  %5924 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5925 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5926 = bitcast %union.vec128_t* %XMM1 to i8*
  %5927 = load i64, i64* %PC
  %5928 = add i64 %5927, 4
  store i64 %5928, i64* %PC
  %5929 = bitcast i8* %5925 to <2 x float>*
  %5930 = load <2 x float>, <2 x float>* %5929, align 1
  %5931 = getelementptr inbounds i8, i8* %5925, i64 8
  %5932 = bitcast i8* %5931 to <2 x i32>*
  %5933 = load <2 x i32>, <2 x i32>* %5932, align 1
  %5934 = bitcast i8* %5926 to <2 x float>*
  %5935 = load <2 x float>, <2 x float>* %5934, align 1
  %5936 = extractelement <2 x float> %5930, i32 0
  %5937 = extractelement <2 x float> %5935, i32 0
  %5938 = fadd float %5936, %5937
  %5939 = bitcast i8* %5924 to float*
  store float %5938, float* %5939, align 1, !tbaa !2452
  %5940 = bitcast <2 x float> %5930 to <2 x i32>
  %5941 = extractelement <2 x i32> %5940, i32 1
  %5942 = getelementptr inbounds i8, i8* %5924, i64 4
  %5943 = bitcast i8* %5942 to i32*
  store i32 %5941, i32* %5943, align 1, !tbaa !2452
  %5944 = extractelement <2 x i32> %5933, i32 0
  %5945 = getelementptr inbounds i8, i8* %5924, i64 8
  %5946 = bitcast i8* %5945 to i32*
  store i32 %5944, i32* %5946, align 1, !tbaa !2452
  %5947 = extractelement <2 x i32> %5933, i32 1
  %5948 = getelementptr inbounds i8, i8* %5924, i64 12
  %5949 = bitcast i8* %5948 to i32*
  store i32 %5947, i32* %5949, align 1, !tbaa !2452
  %5950 = load i64, i64* %RBP
  %5951 = sub i64 %5950, 32
  %5952 = load i64, i64* %PC
  %5953 = add i64 %5952, 4
  store i64 %5953, i64* %PC
  %5954 = inttoptr i64 %5951 to i64*
  %5955 = load i64, i64* %5954
  store i64 %5955, i64* %RAX, align 8, !tbaa !2428
  %5956 = load i64, i64* %RBP
  %5957 = sub i64 %5956, 44
  %5958 = load i64, i64* %PC
  %5959 = add i64 %5958, 3
  store i64 %5959, i64* %PC
  %5960 = inttoptr i64 %5957 to i32*
  %5961 = load i32, i32* %5960
  %5962 = zext i32 %5961 to i64
  store i64 %5962, i64* %RDX, align 8, !tbaa !2428
  %5963 = load i64, i64* %RDX
  %5964 = load i64, i64* %PC
  %5965 = add i64 %5964, 3
  store i64 %5965, i64* %PC
  %5966 = trunc i64 %5963 to i32
  %5967 = sub i32 %5966, 6
  %5968 = zext i32 %5967 to i64
  store i64 %5968, i64* %RDX, align 8, !tbaa !2428
  %5969 = icmp ult i32 %5966, 6
  %5970 = zext i1 %5969 to i8
  %5971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5970, i8* %5971, align 1, !tbaa !2432
  %5972 = and i32 %5967, 255
  %5973 = call i32 @llvm.ctpop.i32(i32 %5972) #16
  %5974 = trunc i32 %5973 to i8
  %5975 = and i8 %5974, 1
  %5976 = xor i8 %5975, 1
  %5977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5976, i8* %5977, align 1, !tbaa !2446
  %5978 = xor i64 6, %5963
  %5979 = trunc i64 %5978 to i32
  %5980 = xor i32 %5979, %5967
  %5981 = lshr i32 %5980, 4
  %5982 = trunc i32 %5981 to i8
  %5983 = and i8 %5982, 1
  %5984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5983, i8* %5984, align 1, !tbaa !2447
  %5985 = icmp eq i32 %5967, 0
  %5986 = zext i1 %5985 to i8
  %5987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5986, i8* %5987, align 1, !tbaa !2448
  %5988 = lshr i32 %5967, 31
  %5989 = trunc i32 %5988 to i8
  %5990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5989, i8* %5990, align 1, !tbaa !2449
  %5991 = lshr i32 %5966, 31
  %5992 = xor i32 %5988, %5991
  %5993 = add nuw nsw i32 %5992, %5991
  %5994 = icmp eq i32 %5993, 2
  %5995 = zext i1 %5994 to i8
  %5996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5995, i8* %5996, align 1, !tbaa !2450
  %5997 = load i32, i32* %EDX
  %5998 = zext i32 %5997 to i64
  %5999 = load i64, i64* %PC
  %6000 = add i64 %5999, 3
  store i64 %6000, i64* %PC
  %6001 = shl i64 %5998, 32
  %6002 = ashr exact i64 %6001, 32
  store i64 %6002, i64* %RCX, align 8, !tbaa !2428
  %6003 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6004 = load i64, i64* %RAX
  %6005 = load i64, i64* %RCX
  %6006 = mul i64 %6005, 4
  %6007 = add i64 %6006, %6004
  %6008 = load i64, i64* %PC
  %6009 = add i64 %6008, 5
  store i64 %6009, i64* %PC
  %6010 = inttoptr i64 %6007 to float*
  %6011 = load float, float* %6010
  %6012 = bitcast i8* %6003 to float*
  store float %6011, float* %6012, align 1, !tbaa !2452
  %6013 = getelementptr inbounds i8, i8* %6003, i64 4
  %6014 = bitcast i8* %6013 to float*
  store float 0.000000e+00, float* %6014, align 1, !tbaa !2452
  %6015 = getelementptr inbounds i8, i8* %6003, i64 8
  %6016 = bitcast i8* %6015 to float*
  store float 0.000000e+00, float* %6016, align 1, !tbaa !2452
  %6017 = getelementptr inbounds i8, i8* %6003, i64 12
  %6018 = bitcast i8* %6017 to float*
  store float 0.000000e+00, float* %6018, align 1, !tbaa !2452
  %6019 = load i64, i64* %RBP
  %6020 = sub i64 %6019, 40
  %6021 = load i64, i64* %PC
  %6022 = add i64 %6021, 4
  store i64 %6022, i64* %PC
  %6023 = inttoptr i64 %6020 to i64*
  %6024 = load i64, i64* %6023
  store i64 %6024, i64* %RAX, align 8, !tbaa !2428
  %6025 = load i64, i64* %RBP
  %6026 = sub i64 %6025, 24
  %6027 = load i64, i64* %PC
  %6028 = add i64 %6027, 3
  store i64 %6028, i64* %PC
  %6029 = inttoptr i64 %6026 to i32*
  %6030 = load i32, i32* %6029
  %6031 = zext i32 %6030 to i64
  store i64 %6031, i64* %RDX, align 8, !tbaa !2428
  %6032 = load i64, i64* %RBP
  %6033 = sub i64 %6032, 44
  %6034 = load i64, i64* %PC
  %6035 = add i64 %6034, 3
  store i64 %6035, i64* %PC
  %6036 = inttoptr i64 %6033 to i32*
  %6037 = load i32, i32* %6036
  %6038 = zext i32 %6037 to i64
  store i64 %6038, i64* %RSI, align 8, !tbaa !2428
  %6039 = load i64, i64* %RSI
  %6040 = load i64, i64* %PC
  %6041 = add i64 %6040, 3
  store i64 %6041, i64* %PC
  %6042 = trunc i64 %6039 to i32
  %6043 = sub i32 %6042, 6
  %6044 = zext i32 %6043 to i64
  store i64 %6044, i64* %RSI, align 8, !tbaa !2428
  %6045 = icmp ult i32 %6042, 6
  %6046 = zext i1 %6045 to i8
  %6047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6046, i8* %6047, align 1, !tbaa !2432
  %6048 = and i32 %6043, 255
  %6049 = call i32 @llvm.ctpop.i32(i32 %6048) #16
  %6050 = trunc i32 %6049 to i8
  %6051 = and i8 %6050, 1
  %6052 = xor i8 %6051, 1
  %6053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6052, i8* %6053, align 1, !tbaa !2446
  %6054 = xor i64 6, %6039
  %6055 = trunc i64 %6054 to i32
  %6056 = xor i32 %6055, %6043
  %6057 = lshr i32 %6056, 4
  %6058 = trunc i32 %6057 to i8
  %6059 = and i8 %6058, 1
  %6060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6059, i8* %6060, align 1, !tbaa !2447
  %6061 = icmp eq i32 %6043, 0
  %6062 = zext i1 %6061 to i8
  %6063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6062, i8* %6063, align 1, !tbaa !2448
  %6064 = lshr i32 %6043, 31
  %6065 = trunc i32 %6064 to i8
  %6066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6065, i8* %6066, align 1, !tbaa !2449
  %6067 = lshr i32 %6042, 31
  %6068 = xor i32 %6064, %6067
  %6069 = add nuw nsw i32 %6068, %6067
  %6070 = icmp eq i32 %6069, 2
  %6071 = zext i1 %6070 to i8
  %6072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6071, i8* %6072, align 1, !tbaa !2450
  %6073 = load i64, i64* %RDX
  %6074 = load i32, i32* %ESI
  %6075 = zext i32 %6074 to i64
  %6076 = load i64, i64* %PC
  %6077 = add i64 %6076, 3
  store i64 %6077, i64* %PC
  %6078 = shl i64 %6073, 32
  %6079 = ashr exact i64 %6078, 32
  %6080 = shl i64 %6075, 32
  %6081 = ashr exact i64 %6080, 32
  %6082 = mul nsw i64 %6081, %6079
  %6083 = trunc i64 %6082 to i32
  %6084 = and i64 %6082, 4294967295
  store i64 %6084, i64* %RDX, align 8, !tbaa !2428
  %6085 = shl i64 %6082, 32
  %6086 = ashr exact i64 %6085, 32
  %6087 = icmp ne i64 %6086, %6082
  %6088 = zext i1 %6087 to i8
  %6089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6088, i8* %6089, align 1, !tbaa !2432
  %6090 = and i32 %6083, 255
  %6091 = call i32 @llvm.ctpop.i32(i32 %6090) #16
  %6092 = trunc i32 %6091 to i8
  %6093 = and i8 %6092, 1
  %6094 = xor i8 %6093, 1
  %6095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6094, i8* %6095, align 1, !tbaa !2446
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6096, align 1, !tbaa !2447
  %6097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6097, align 1, !tbaa !2448
  %6098 = lshr i32 %6083, 31
  %6099 = trunc i32 %6098 to i8
  %6100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6099, i8* %6100, align 1, !tbaa !2449
  %6101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6088, i8* %6101, align 1, !tbaa !2450
  %6102 = load i64, i64* %RDX
  %6103 = load i64, i64* %RBP
  %6104 = sub i64 %6103, 48
  %6105 = load i64, i64* %PC
  %6106 = add i64 %6105, 3
  store i64 %6106, i64* %PC
  %6107 = trunc i64 %6102 to i32
  %6108 = inttoptr i64 %6104 to i32*
  %6109 = load i32, i32* %6108
  %6110 = add i32 %6109, %6107
  %6111 = zext i32 %6110 to i64
  store i64 %6111, i64* %RDX, align 8, !tbaa !2428
  %6112 = icmp ult i32 %6110, %6107
  %6113 = icmp ult i32 %6110, %6109
  %6114 = or i1 %6112, %6113
  %6115 = zext i1 %6114 to i8
  %6116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6115, i8* %6116, align 1, !tbaa !2432
  %6117 = and i32 %6110, 255
  %6118 = call i32 @llvm.ctpop.i32(i32 %6117) #16
  %6119 = trunc i32 %6118 to i8
  %6120 = and i8 %6119, 1
  %6121 = xor i8 %6120, 1
  %6122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6121, i8* %6122, align 1, !tbaa !2446
  %6123 = xor i32 %6109, %6107
  %6124 = xor i32 %6123, %6110
  %6125 = lshr i32 %6124, 4
  %6126 = trunc i32 %6125 to i8
  %6127 = and i8 %6126, 1
  %6128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6127, i8* %6128, align 1, !tbaa !2447
  %6129 = icmp eq i32 %6110, 0
  %6130 = zext i1 %6129 to i8
  %6131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6130, i8* %6131, align 1, !tbaa !2448
  %6132 = lshr i32 %6110, 31
  %6133 = trunc i32 %6132 to i8
  %6134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6133, i8* %6134, align 1, !tbaa !2449
  %6135 = lshr i32 %6107, 31
  %6136 = lshr i32 %6109, 31
  %6137 = xor i32 %6132, %6135
  %6138 = xor i32 %6132, %6136
  %6139 = add nuw nsw i32 %6137, %6138
  %6140 = icmp eq i32 %6139, 2
  %6141 = zext i1 %6140 to i8
  %6142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6141, i8* %6142, align 1, !tbaa !2450
  %6143 = load i32, i32* %EDX
  %6144 = zext i32 %6143 to i64
  %6145 = load i64, i64* %PC
  %6146 = add i64 %6145, 3
  store i64 %6146, i64* %PC
  %6147 = shl i64 %6144, 32
  %6148 = ashr exact i64 %6147, 32
  store i64 %6148, i64* %RCX, align 8, !tbaa !2428
  %6149 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6150 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6151 = load i64, i64* %RAX
  %6152 = load i64, i64* %RCX
  %6153 = mul i64 %6152, 4
  %6154 = add i64 %6153, %6151
  %6155 = load i64, i64* %PC
  %6156 = add i64 %6155, 5
  store i64 %6156, i64* %PC
  %6157 = bitcast i8* %6150 to <2 x float>*
  %6158 = load <2 x float>, <2 x float>* %6157, align 1
  %6159 = getelementptr inbounds i8, i8* %6150, i64 8
  %6160 = bitcast i8* %6159 to <2 x i32>*
  %6161 = load <2 x i32>, <2 x i32>* %6160, align 1
  %6162 = inttoptr i64 %6154 to float*
  %6163 = load float, float* %6162
  %6164 = extractelement <2 x float> %6158, i32 0
  %6165 = fmul float %6164, %6163
  %6166 = bitcast i8* %6149 to float*
  store float %6165, float* %6166, align 1, !tbaa !2452
  %6167 = bitcast <2 x float> %6158 to <2 x i32>
  %6168 = extractelement <2 x i32> %6167, i32 1
  %6169 = getelementptr inbounds i8, i8* %6149, i64 4
  %6170 = bitcast i8* %6169 to i32*
  store i32 %6168, i32* %6170, align 1, !tbaa !2452
  %6171 = extractelement <2 x i32> %6161, i32 0
  %6172 = getelementptr inbounds i8, i8* %6149, i64 8
  %6173 = bitcast i8* %6172 to i32*
  store i32 %6171, i32* %6173, align 1, !tbaa !2452
  %6174 = extractelement <2 x i32> %6161, i32 1
  %6175 = getelementptr inbounds i8, i8* %6149, i64 12
  %6176 = bitcast i8* %6175 to i32*
  store i32 %6174, i32* %6176, align 1, !tbaa !2452
  %6177 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6178 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6179 = bitcast %union.vec128_t* %XMM1 to i8*
  %6180 = load i64, i64* %PC
  %6181 = add i64 %6180, 4
  store i64 %6181, i64* %PC
  %6182 = bitcast i8* %6178 to <2 x float>*
  %6183 = load <2 x float>, <2 x float>* %6182, align 1
  %6184 = getelementptr inbounds i8, i8* %6178, i64 8
  %6185 = bitcast i8* %6184 to <2 x i32>*
  %6186 = load <2 x i32>, <2 x i32>* %6185, align 1
  %6187 = bitcast i8* %6179 to <2 x float>*
  %6188 = load <2 x float>, <2 x float>* %6187, align 1
  %6189 = extractelement <2 x float> %6183, i32 0
  %6190 = extractelement <2 x float> %6188, i32 0
  %6191 = fadd float %6189, %6190
  %6192 = bitcast i8* %6177 to float*
  store float %6191, float* %6192, align 1, !tbaa !2452
  %6193 = bitcast <2 x float> %6183 to <2 x i32>
  %6194 = extractelement <2 x i32> %6193, i32 1
  %6195 = getelementptr inbounds i8, i8* %6177, i64 4
  %6196 = bitcast i8* %6195 to i32*
  store i32 %6194, i32* %6196, align 1, !tbaa !2452
  %6197 = extractelement <2 x i32> %6186, i32 0
  %6198 = getelementptr inbounds i8, i8* %6177, i64 8
  %6199 = bitcast i8* %6198 to i32*
  store i32 %6197, i32* %6199, align 1, !tbaa !2452
  %6200 = extractelement <2 x i32> %6186, i32 1
  %6201 = getelementptr inbounds i8, i8* %6177, i64 12
  %6202 = bitcast i8* %6201 to i32*
  store i32 %6200, i32* %6202, align 1, !tbaa !2452
  %6203 = load i64, i64* %RBP
  %6204 = sub i64 %6203, 32
  %6205 = load i64, i64* %PC
  %6206 = add i64 %6205, 4
  store i64 %6206, i64* %PC
  %6207 = inttoptr i64 %6204 to i64*
  %6208 = load i64, i64* %6207
  store i64 %6208, i64* %RAX, align 8, !tbaa !2428
  %6209 = load i64, i64* %RBP
  %6210 = sub i64 %6209, 44
  %6211 = load i64, i64* %PC
  %6212 = add i64 %6211, 3
  store i64 %6212, i64* %PC
  %6213 = inttoptr i64 %6210 to i32*
  %6214 = load i32, i32* %6213
  %6215 = zext i32 %6214 to i64
  store i64 %6215, i64* %RDX, align 8, !tbaa !2428
  %6216 = load i64, i64* %RDX
  %6217 = load i64, i64* %PC
  %6218 = add i64 %6217, 3
  store i64 %6218, i64* %PC
  %6219 = trunc i64 %6216 to i32
  %6220 = sub i32 %6219, 5
  %6221 = zext i32 %6220 to i64
  store i64 %6221, i64* %RDX, align 8, !tbaa !2428
  %6222 = icmp ult i32 %6219, 5
  %6223 = zext i1 %6222 to i8
  %6224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6223, i8* %6224, align 1, !tbaa !2432
  %6225 = and i32 %6220, 255
  %6226 = call i32 @llvm.ctpop.i32(i32 %6225) #16
  %6227 = trunc i32 %6226 to i8
  %6228 = and i8 %6227, 1
  %6229 = xor i8 %6228, 1
  %6230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6229, i8* %6230, align 1, !tbaa !2446
  %6231 = xor i64 5, %6216
  %6232 = trunc i64 %6231 to i32
  %6233 = xor i32 %6232, %6220
  %6234 = lshr i32 %6233, 4
  %6235 = trunc i32 %6234 to i8
  %6236 = and i8 %6235, 1
  %6237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6236, i8* %6237, align 1, !tbaa !2447
  %6238 = icmp eq i32 %6220, 0
  %6239 = zext i1 %6238 to i8
  %6240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6239, i8* %6240, align 1, !tbaa !2448
  %6241 = lshr i32 %6220, 31
  %6242 = trunc i32 %6241 to i8
  %6243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6242, i8* %6243, align 1, !tbaa !2449
  %6244 = lshr i32 %6219, 31
  %6245 = xor i32 %6241, %6244
  %6246 = add nuw nsw i32 %6245, %6244
  %6247 = icmp eq i32 %6246, 2
  %6248 = zext i1 %6247 to i8
  %6249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6248, i8* %6249, align 1, !tbaa !2450
  %6250 = load i32, i32* %EDX
  %6251 = zext i32 %6250 to i64
  %6252 = load i64, i64* %PC
  %6253 = add i64 %6252, 3
  store i64 %6253, i64* %PC
  %6254 = shl i64 %6251, 32
  %6255 = ashr exact i64 %6254, 32
  store i64 %6255, i64* %RCX, align 8, !tbaa !2428
  %6256 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6257 = load i64, i64* %RAX
  %6258 = load i64, i64* %RCX
  %6259 = mul i64 %6258, 4
  %6260 = add i64 %6259, %6257
  %6261 = load i64, i64* %PC
  %6262 = add i64 %6261, 5
  store i64 %6262, i64* %PC
  %6263 = inttoptr i64 %6260 to float*
  %6264 = load float, float* %6263
  %6265 = bitcast i8* %6256 to float*
  store float %6264, float* %6265, align 1, !tbaa !2452
  %6266 = getelementptr inbounds i8, i8* %6256, i64 4
  %6267 = bitcast i8* %6266 to float*
  store float 0.000000e+00, float* %6267, align 1, !tbaa !2452
  %6268 = getelementptr inbounds i8, i8* %6256, i64 8
  %6269 = bitcast i8* %6268 to float*
  store float 0.000000e+00, float* %6269, align 1, !tbaa !2452
  %6270 = getelementptr inbounds i8, i8* %6256, i64 12
  %6271 = bitcast i8* %6270 to float*
  store float 0.000000e+00, float* %6271, align 1, !tbaa !2452
  %6272 = load i64, i64* %RBP
  %6273 = sub i64 %6272, 40
  %6274 = load i64, i64* %PC
  %6275 = add i64 %6274, 4
  store i64 %6275, i64* %PC
  %6276 = inttoptr i64 %6273 to i64*
  %6277 = load i64, i64* %6276
  store i64 %6277, i64* %RAX, align 8, !tbaa !2428
  %6278 = load i64, i64* %RBP
  %6279 = sub i64 %6278, 24
  %6280 = load i64, i64* %PC
  %6281 = add i64 %6280, 3
  store i64 %6281, i64* %PC
  %6282 = inttoptr i64 %6279 to i32*
  %6283 = load i32, i32* %6282
  %6284 = zext i32 %6283 to i64
  store i64 %6284, i64* %RDX, align 8, !tbaa !2428
  %6285 = load i64, i64* %RBP
  %6286 = sub i64 %6285, 44
  %6287 = load i64, i64* %PC
  %6288 = add i64 %6287, 3
  store i64 %6288, i64* %PC
  %6289 = inttoptr i64 %6286 to i32*
  %6290 = load i32, i32* %6289
  %6291 = zext i32 %6290 to i64
  store i64 %6291, i64* %RSI, align 8, !tbaa !2428
  %6292 = load i64, i64* %RSI
  %6293 = load i64, i64* %PC
  %6294 = add i64 %6293, 3
  store i64 %6294, i64* %PC
  %6295 = trunc i64 %6292 to i32
  %6296 = sub i32 %6295, 5
  %6297 = zext i32 %6296 to i64
  store i64 %6297, i64* %RSI, align 8, !tbaa !2428
  %6298 = icmp ult i32 %6295, 5
  %6299 = zext i1 %6298 to i8
  %6300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6299, i8* %6300, align 1, !tbaa !2432
  %6301 = and i32 %6296, 255
  %6302 = call i32 @llvm.ctpop.i32(i32 %6301) #16
  %6303 = trunc i32 %6302 to i8
  %6304 = and i8 %6303, 1
  %6305 = xor i8 %6304, 1
  %6306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6305, i8* %6306, align 1, !tbaa !2446
  %6307 = xor i64 5, %6292
  %6308 = trunc i64 %6307 to i32
  %6309 = xor i32 %6308, %6296
  %6310 = lshr i32 %6309, 4
  %6311 = trunc i32 %6310 to i8
  %6312 = and i8 %6311, 1
  %6313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6312, i8* %6313, align 1, !tbaa !2447
  %6314 = icmp eq i32 %6296, 0
  %6315 = zext i1 %6314 to i8
  %6316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6315, i8* %6316, align 1, !tbaa !2448
  %6317 = lshr i32 %6296, 31
  %6318 = trunc i32 %6317 to i8
  %6319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6318, i8* %6319, align 1, !tbaa !2449
  %6320 = lshr i32 %6295, 31
  %6321 = xor i32 %6317, %6320
  %6322 = add nuw nsw i32 %6321, %6320
  %6323 = icmp eq i32 %6322, 2
  %6324 = zext i1 %6323 to i8
  %6325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6324, i8* %6325, align 1, !tbaa !2450
  %6326 = load i64, i64* %RDX
  %6327 = load i32, i32* %ESI
  %6328 = zext i32 %6327 to i64
  %6329 = load i64, i64* %PC
  %6330 = add i64 %6329, 3
  store i64 %6330, i64* %PC
  %6331 = shl i64 %6326, 32
  %6332 = ashr exact i64 %6331, 32
  %6333 = shl i64 %6328, 32
  %6334 = ashr exact i64 %6333, 32
  %6335 = mul nsw i64 %6334, %6332
  %6336 = trunc i64 %6335 to i32
  %6337 = and i64 %6335, 4294967295
  store i64 %6337, i64* %RDX, align 8, !tbaa !2428
  %6338 = shl i64 %6335, 32
  %6339 = ashr exact i64 %6338, 32
  %6340 = icmp ne i64 %6339, %6335
  %6341 = zext i1 %6340 to i8
  %6342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6341, i8* %6342, align 1, !tbaa !2432
  %6343 = and i32 %6336, 255
  %6344 = call i32 @llvm.ctpop.i32(i32 %6343) #16
  %6345 = trunc i32 %6344 to i8
  %6346 = and i8 %6345, 1
  %6347 = xor i8 %6346, 1
  %6348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6347, i8* %6348, align 1, !tbaa !2446
  %6349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6349, align 1, !tbaa !2447
  %6350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6350, align 1, !tbaa !2448
  %6351 = lshr i32 %6336, 31
  %6352 = trunc i32 %6351 to i8
  %6353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6352, i8* %6353, align 1, !tbaa !2449
  %6354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6341, i8* %6354, align 1, !tbaa !2450
  %6355 = load i64, i64* %RDX
  %6356 = load i64, i64* %RBP
  %6357 = sub i64 %6356, 48
  %6358 = load i64, i64* %PC
  %6359 = add i64 %6358, 3
  store i64 %6359, i64* %PC
  %6360 = trunc i64 %6355 to i32
  %6361 = inttoptr i64 %6357 to i32*
  %6362 = load i32, i32* %6361
  %6363 = add i32 %6362, %6360
  %6364 = zext i32 %6363 to i64
  store i64 %6364, i64* %RDX, align 8, !tbaa !2428
  %6365 = icmp ult i32 %6363, %6360
  %6366 = icmp ult i32 %6363, %6362
  %6367 = or i1 %6365, %6366
  %6368 = zext i1 %6367 to i8
  %6369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6368, i8* %6369, align 1, !tbaa !2432
  %6370 = and i32 %6363, 255
  %6371 = call i32 @llvm.ctpop.i32(i32 %6370) #16
  %6372 = trunc i32 %6371 to i8
  %6373 = and i8 %6372, 1
  %6374 = xor i8 %6373, 1
  %6375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6374, i8* %6375, align 1, !tbaa !2446
  %6376 = xor i32 %6362, %6360
  %6377 = xor i32 %6376, %6363
  %6378 = lshr i32 %6377, 4
  %6379 = trunc i32 %6378 to i8
  %6380 = and i8 %6379, 1
  %6381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6380, i8* %6381, align 1, !tbaa !2447
  %6382 = icmp eq i32 %6363, 0
  %6383 = zext i1 %6382 to i8
  %6384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6383, i8* %6384, align 1, !tbaa !2448
  %6385 = lshr i32 %6363, 31
  %6386 = trunc i32 %6385 to i8
  %6387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6386, i8* %6387, align 1, !tbaa !2449
  %6388 = lshr i32 %6360, 31
  %6389 = lshr i32 %6362, 31
  %6390 = xor i32 %6385, %6388
  %6391 = xor i32 %6385, %6389
  %6392 = add nuw nsw i32 %6390, %6391
  %6393 = icmp eq i32 %6392, 2
  %6394 = zext i1 %6393 to i8
  %6395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6394, i8* %6395, align 1, !tbaa !2450
  %6396 = load i32, i32* %EDX
  %6397 = zext i32 %6396 to i64
  %6398 = load i64, i64* %PC
  %6399 = add i64 %6398, 3
  store i64 %6399, i64* %PC
  %6400 = shl i64 %6397, 32
  %6401 = ashr exact i64 %6400, 32
  store i64 %6401, i64* %RCX, align 8, !tbaa !2428
  %6402 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6403 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6404 = load i64, i64* %RAX
  %6405 = load i64, i64* %RCX
  %6406 = mul i64 %6405, 4
  %6407 = add i64 %6406, %6404
  %6408 = load i64, i64* %PC
  %6409 = add i64 %6408, 5
  store i64 %6409, i64* %PC
  %6410 = bitcast i8* %6403 to <2 x float>*
  %6411 = load <2 x float>, <2 x float>* %6410, align 1
  %6412 = getelementptr inbounds i8, i8* %6403, i64 8
  %6413 = bitcast i8* %6412 to <2 x i32>*
  %6414 = load <2 x i32>, <2 x i32>* %6413, align 1
  %6415 = inttoptr i64 %6407 to float*
  %6416 = load float, float* %6415
  %6417 = extractelement <2 x float> %6411, i32 0
  %6418 = fmul float %6417, %6416
  %6419 = bitcast i8* %6402 to float*
  store float %6418, float* %6419, align 1, !tbaa !2452
  %6420 = bitcast <2 x float> %6411 to <2 x i32>
  %6421 = extractelement <2 x i32> %6420, i32 1
  %6422 = getelementptr inbounds i8, i8* %6402, i64 4
  %6423 = bitcast i8* %6422 to i32*
  store i32 %6421, i32* %6423, align 1, !tbaa !2452
  %6424 = extractelement <2 x i32> %6414, i32 0
  %6425 = getelementptr inbounds i8, i8* %6402, i64 8
  %6426 = bitcast i8* %6425 to i32*
  store i32 %6424, i32* %6426, align 1, !tbaa !2452
  %6427 = extractelement <2 x i32> %6414, i32 1
  %6428 = getelementptr inbounds i8, i8* %6402, i64 12
  %6429 = bitcast i8* %6428 to i32*
  store i32 %6427, i32* %6429, align 1, !tbaa !2452
  %6430 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6431 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6432 = bitcast %union.vec128_t* %XMM1 to i8*
  %6433 = load i64, i64* %PC
  %6434 = add i64 %6433, 4
  store i64 %6434, i64* %PC
  %6435 = bitcast i8* %6431 to <2 x float>*
  %6436 = load <2 x float>, <2 x float>* %6435, align 1
  %6437 = getelementptr inbounds i8, i8* %6431, i64 8
  %6438 = bitcast i8* %6437 to <2 x i32>*
  %6439 = load <2 x i32>, <2 x i32>* %6438, align 1
  %6440 = bitcast i8* %6432 to <2 x float>*
  %6441 = load <2 x float>, <2 x float>* %6440, align 1
  %6442 = extractelement <2 x float> %6436, i32 0
  %6443 = extractelement <2 x float> %6441, i32 0
  %6444 = fadd float %6442, %6443
  %6445 = bitcast i8* %6430 to float*
  store float %6444, float* %6445, align 1, !tbaa !2452
  %6446 = bitcast <2 x float> %6436 to <2 x i32>
  %6447 = extractelement <2 x i32> %6446, i32 1
  %6448 = getelementptr inbounds i8, i8* %6430, i64 4
  %6449 = bitcast i8* %6448 to i32*
  store i32 %6447, i32* %6449, align 1, !tbaa !2452
  %6450 = extractelement <2 x i32> %6439, i32 0
  %6451 = getelementptr inbounds i8, i8* %6430, i64 8
  %6452 = bitcast i8* %6451 to i32*
  store i32 %6450, i32* %6452, align 1, !tbaa !2452
  %6453 = extractelement <2 x i32> %6439, i32 1
  %6454 = getelementptr inbounds i8, i8* %6430, i64 12
  %6455 = bitcast i8* %6454 to i32*
  store i32 %6453, i32* %6455, align 1, !tbaa !2452
  %6456 = load i64, i64* %RBP
  %6457 = sub i64 %6456, 32
  %6458 = load i64, i64* %PC
  %6459 = add i64 %6458, 4
  store i64 %6459, i64* %PC
  %6460 = inttoptr i64 %6457 to i64*
  %6461 = load i64, i64* %6460
  store i64 %6461, i64* %RAX, align 8, !tbaa !2428
  %6462 = load i64, i64* %RBP
  %6463 = sub i64 %6462, 44
  %6464 = load i64, i64* %PC
  %6465 = add i64 %6464, 3
  store i64 %6465, i64* %PC
  %6466 = inttoptr i64 %6463 to i32*
  %6467 = load i32, i32* %6466
  %6468 = zext i32 %6467 to i64
  store i64 %6468, i64* %RDX, align 8, !tbaa !2428
  %6469 = load i64, i64* %RDX
  %6470 = load i64, i64* %PC
  %6471 = add i64 %6470, 3
  store i64 %6471, i64* %PC
  %6472 = trunc i64 %6469 to i32
  %6473 = sub i32 %6472, 4
  %6474 = zext i32 %6473 to i64
  store i64 %6474, i64* %RDX, align 8, !tbaa !2428
  %6475 = icmp ult i32 %6472, 4
  %6476 = zext i1 %6475 to i8
  %6477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6476, i8* %6477, align 1, !tbaa !2432
  %6478 = and i32 %6473, 255
  %6479 = call i32 @llvm.ctpop.i32(i32 %6478) #16
  %6480 = trunc i32 %6479 to i8
  %6481 = and i8 %6480, 1
  %6482 = xor i8 %6481, 1
  %6483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6482, i8* %6483, align 1, !tbaa !2446
  %6484 = xor i64 4, %6469
  %6485 = trunc i64 %6484 to i32
  %6486 = xor i32 %6485, %6473
  %6487 = lshr i32 %6486, 4
  %6488 = trunc i32 %6487 to i8
  %6489 = and i8 %6488, 1
  %6490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6489, i8* %6490, align 1, !tbaa !2447
  %6491 = icmp eq i32 %6473, 0
  %6492 = zext i1 %6491 to i8
  %6493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6492, i8* %6493, align 1, !tbaa !2448
  %6494 = lshr i32 %6473, 31
  %6495 = trunc i32 %6494 to i8
  %6496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6495, i8* %6496, align 1, !tbaa !2449
  %6497 = lshr i32 %6472, 31
  %6498 = xor i32 %6494, %6497
  %6499 = add nuw nsw i32 %6498, %6497
  %6500 = icmp eq i32 %6499, 2
  %6501 = zext i1 %6500 to i8
  %6502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6501, i8* %6502, align 1, !tbaa !2450
  %6503 = load i32, i32* %EDX
  %6504 = zext i32 %6503 to i64
  %6505 = load i64, i64* %PC
  %6506 = add i64 %6505, 3
  store i64 %6506, i64* %PC
  %6507 = shl i64 %6504, 32
  %6508 = ashr exact i64 %6507, 32
  store i64 %6508, i64* %RCX, align 8, !tbaa !2428
  %6509 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6510 = load i64, i64* %RAX
  %6511 = load i64, i64* %RCX
  %6512 = mul i64 %6511, 4
  %6513 = add i64 %6512, %6510
  %6514 = load i64, i64* %PC
  %6515 = add i64 %6514, 5
  store i64 %6515, i64* %PC
  %6516 = inttoptr i64 %6513 to float*
  %6517 = load float, float* %6516
  %6518 = bitcast i8* %6509 to float*
  store float %6517, float* %6518, align 1, !tbaa !2452
  %6519 = getelementptr inbounds i8, i8* %6509, i64 4
  %6520 = bitcast i8* %6519 to float*
  store float 0.000000e+00, float* %6520, align 1, !tbaa !2452
  %6521 = getelementptr inbounds i8, i8* %6509, i64 8
  %6522 = bitcast i8* %6521 to float*
  store float 0.000000e+00, float* %6522, align 1, !tbaa !2452
  %6523 = getelementptr inbounds i8, i8* %6509, i64 12
  %6524 = bitcast i8* %6523 to float*
  store float 0.000000e+00, float* %6524, align 1, !tbaa !2452
  %6525 = load i64, i64* %RBP
  %6526 = sub i64 %6525, 40
  %6527 = load i64, i64* %PC
  %6528 = add i64 %6527, 4
  store i64 %6528, i64* %PC
  %6529 = inttoptr i64 %6526 to i64*
  %6530 = load i64, i64* %6529
  store i64 %6530, i64* %RAX, align 8, !tbaa !2428
  %6531 = load i64, i64* %RBP
  %6532 = sub i64 %6531, 24
  %6533 = load i64, i64* %PC
  %6534 = add i64 %6533, 3
  store i64 %6534, i64* %PC
  %6535 = inttoptr i64 %6532 to i32*
  %6536 = load i32, i32* %6535
  %6537 = zext i32 %6536 to i64
  store i64 %6537, i64* %RDX, align 8, !tbaa !2428
  %6538 = load i64, i64* %RBP
  %6539 = sub i64 %6538, 44
  %6540 = load i64, i64* %PC
  %6541 = add i64 %6540, 3
  store i64 %6541, i64* %PC
  %6542 = inttoptr i64 %6539 to i32*
  %6543 = load i32, i32* %6542
  %6544 = zext i32 %6543 to i64
  store i64 %6544, i64* %RSI, align 8, !tbaa !2428
  %6545 = load i64, i64* %RSI
  %6546 = load i64, i64* %PC
  %6547 = add i64 %6546, 3
  store i64 %6547, i64* %PC
  %6548 = trunc i64 %6545 to i32
  %6549 = sub i32 %6548, 4
  %6550 = zext i32 %6549 to i64
  store i64 %6550, i64* %RSI, align 8, !tbaa !2428
  %6551 = icmp ult i32 %6548, 4
  %6552 = zext i1 %6551 to i8
  %6553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6552, i8* %6553, align 1, !tbaa !2432
  %6554 = and i32 %6549, 255
  %6555 = call i32 @llvm.ctpop.i32(i32 %6554) #16
  %6556 = trunc i32 %6555 to i8
  %6557 = and i8 %6556, 1
  %6558 = xor i8 %6557, 1
  %6559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6558, i8* %6559, align 1, !tbaa !2446
  %6560 = xor i64 4, %6545
  %6561 = trunc i64 %6560 to i32
  %6562 = xor i32 %6561, %6549
  %6563 = lshr i32 %6562, 4
  %6564 = trunc i32 %6563 to i8
  %6565 = and i8 %6564, 1
  %6566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6565, i8* %6566, align 1, !tbaa !2447
  %6567 = icmp eq i32 %6549, 0
  %6568 = zext i1 %6567 to i8
  %6569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6568, i8* %6569, align 1, !tbaa !2448
  %6570 = lshr i32 %6549, 31
  %6571 = trunc i32 %6570 to i8
  %6572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6571, i8* %6572, align 1, !tbaa !2449
  %6573 = lshr i32 %6548, 31
  %6574 = xor i32 %6570, %6573
  %6575 = add nuw nsw i32 %6574, %6573
  %6576 = icmp eq i32 %6575, 2
  %6577 = zext i1 %6576 to i8
  %6578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6577, i8* %6578, align 1, !tbaa !2450
  %6579 = load i64, i64* %RDX
  %6580 = load i32, i32* %ESI
  %6581 = zext i32 %6580 to i64
  %6582 = load i64, i64* %PC
  %6583 = add i64 %6582, 3
  store i64 %6583, i64* %PC
  %6584 = shl i64 %6579, 32
  %6585 = ashr exact i64 %6584, 32
  %6586 = shl i64 %6581, 32
  %6587 = ashr exact i64 %6586, 32
  %6588 = mul nsw i64 %6587, %6585
  %6589 = trunc i64 %6588 to i32
  %6590 = and i64 %6588, 4294967295
  store i64 %6590, i64* %RDX, align 8, !tbaa !2428
  %6591 = shl i64 %6588, 32
  %6592 = ashr exact i64 %6591, 32
  %6593 = icmp ne i64 %6592, %6588
  %6594 = zext i1 %6593 to i8
  %6595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6594, i8* %6595, align 1, !tbaa !2432
  %6596 = and i32 %6589, 255
  %6597 = call i32 @llvm.ctpop.i32(i32 %6596) #16
  %6598 = trunc i32 %6597 to i8
  %6599 = and i8 %6598, 1
  %6600 = xor i8 %6599, 1
  %6601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6600, i8* %6601, align 1, !tbaa !2446
  %6602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6602, align 1, !tbaa !2447
  %6603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6603, align 1, !tbaa !2448
  %6604 = lshr i32 %6589, 31
  %6605 = trunc i32 %6604 to i8
  %6606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6605, i8* %6606, align 1, !tbaa !2449
  %6607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6594, i8* %6607, align 1, !tbaa !2450
  %6608 = load i64, i64* %RDX
  %6609 = load i64, i64* %RBP
  %6610 = sub i64 %6609, 48
  %6611 = load i64, i64* %PC
  %6612 = add i64 %6611, 3
  store i64 %6612, i64* %PC
  %6613 = trunc i64 %6608 to i32
  %6614 = inttoptr i64 %6610 to i32*
  %6615 = load i32, i32* %6614
  %6616 = add i32 %6615, %6613
  %6617 = zext i32 %6616 to i64
  store i64 %6617, i64* %RDX, align 8, !tbaa !2428
  %6618 = icmp ult i32 %6616, %6613
  %6619 = icmp ult i32 %6616, %6615
  %6620 = or i1 %6618, %6619
  %6621 = zext i1 %6620 to i8
  %6622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6621, i8* %6622, align 1, !tbaa !2432
  %6623 = and i32 %6616, 255
  %6624 = call i32 @llvm.ctpop.i32(i32 %6623) #16
  %6625 = trunc i32 %6624 to i8
  %6626 = and i8 %6625, 1
  %6627 = xor i8 %6626, 1
  %6628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6627, i8* %6628, align 1, !tbaa !2446
  %6629 = xor i32 %6615, %6613
  %6630 = xor i32 %6629, %6616
  %6631 = lshr i32 %6630, 4
  %6632 = trunc i32 %6631 to i8
  %6633 = and i8 %6632, 1
  %6634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6633, i8* %6634, align 1, !tbaa !2447
  %6635 = icmp eq i32 %6616, 0
  %6636 = zext i1 %6635 to i8
  %6637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6636, i8* %6637, align 1, !tbaa !2448
  %6638 = lshr i32 %6616, 31
  %6639 = trunc i32 %6638 to i8
  %6640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6639, i8* %6640, align 1, !tbaa !2449
  %6641 = lshr i32 %6613, 31
  %6642 = lshr i32 %6615, 31
  %6643 = xor i32 %6638, %6641
  %6644 = xor i32 %6638, %6642
  %6645 = add nuw nsw i32 %6643, %6644
  %6646 = icmp eq i32 %6645, 2
  %6647 = zext i1 %6646 to i8
  %6648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6647, i8* %6648, align 1, !tbaa !2450
  %6649 = load i32, i32* %EDX
  %6650 = zext i32 %6649 to i64
  %6651 = load i64, i64* %PC
  %6652 = add i64 %6651, 3
  store i64 %6652, i64* %PC
  %6653 = shl i64 %6650, 32
  %6654 = ashr exact i64 %6653, 32
  store i64 %6654, i64* %RCX, align 8, !tbaa !2428
  %6655 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6656 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6657 = load i64, i64* %RAX
  %6658 = load i64, i64* %RCX
  %6659 = mul i64 %6658, 4
  %6660 = add i64 %6659, %6657
  %6661 = load i64, i64* %PC
  %6662 = add i64 %6661, 5
  store i64 %6662, i64* %PC
  %6663 = bitcast i8* %6656 to <2 x float>*
  %6664 = load <2 x float>, <2 x float>* %6663, align 1
  %6665 = getelementptr inbounds i8, i8* %6656, i64 8
  %6666 = bitcast i8* %6665 to <2 x i32>*
  %6667 = load <2 x i32>, <2 x i32>* %6666, align 1
  %6668 = inttoptr i64 %6660 to float*
  %6669 = load float, float* %6668
  %6670 = extractelement <2 x float> %6664, i32 0
  %6671 = fmul float %6670, %6669
  %6672 = bitcast i8* %6655 to float*
  store float %6671, float* %6672, align 1, !tbaa !2452
  %6673 = bitcast <2 x float> %6664 to <2 x i32>
  %6674 = extractelement <2 x i32> %6673, i32 1
  %6675 = getelementptr inbounds i8, i8* %6655, i64 4
  %6676 = bitcast i8* %6675 to i32*
  store i32 %6674, i32* %6676, align 1, !tbaa !2452
  %6677 = extractelement <2 x i32> %6667, i32 0
  %6678 = getelementptr inbounds i8, i8* %6655, i64 8
  %6679 = bitcast i8* %6678 to i32*
  store i32 %6677, i32* %6679, align 1, !tbaa !2452
  %6680 = extractelement <2 x i32> %6667, i32 1
  %6681 = getelementptr inbounds i8, i8* %6655, i64 12
  %6682 = bitcast i8* %6681 to i32*
  store i32 %6680, i32* %6682, align 1, !tbaa !2452
  %6683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6685 = bitcast %union.vec128_t* %XMM1 to i8*
  %6686 = load i64, i64* %PC
  %6687 = add i64 %6686, 4
  store i64 %6687, i64* %PC
  %6688 = bitcast i8* %6684 to <2 x float>*
  %6689 = load <2 x float>, <2 x float>* %6688, align 1
  %6690 = getelementptr inbounds i8, i8* %6684, i64 8
  %6691 = bitcast i8* %6690 to <2 x i32>*
  %6692 = load <2 x i32>, <2 x i32>* %6691, align 1
  %6693 = bitcast i8* %6685 to <2 x float>*
  %6694 = load <2 x float>, <2 x float>* %6693, align 1
  %6695 = extractelement <2 x float> %6689, i32 0
  %6696 = extractelement <2 x float> %6694, i32 0
  %6697 = fadd float %6695, %6696
  %6698 = bitcast i8* %6683 to float*
  store float %6697, float* %6698, align 1, !tbaa !2452
  %6699 = bitcast <2 x float> %6689 to <2 x i32>
  %6700 = extractelement <2 x i32> %6699, i32 1
  %6701 = getelementptr inbounds i8, i8* %6683, i64 4
  %6702 = bitcast i8* %6701 to i32*
  store i32 %6700, i32* %6702, align 1, !tbaa !2452
  %6703 = extractelement <2 x i32> %6692, i32 0
  %6704 = getelementptr inbounds i8, i8* %6683, i64 8
  %6705 = bitcast i8* %6704 to i32*
  store i32 %6703, i32* %6705, align 1, !tbaa !2452
  %6706 = extractelement <2 x i32> %6692, i32 1
  %6707 = getelementptr inbounds i8, i8* %6683, i64 12
  %6708 = bitcast i8* %6707 to i32*
  store i32 %6706, i32* %6708, align 1, !tbaa !2452
  %6709 = load i64, i64* %RBP
  %6710 = sub i64 %6709, 32
  %6711 = load i64, i64* %PC
  %6712 = add i64 %6711, 4
  store i64 %6712, i64* %PC
  %6713 = inttoptr i64 %6710 to i64*
  %6714 = load i64, i64* %6713
  store i64 %6714, i64* %RAX, align 8, !tbaa !2428
  %6715 = load i64, i64* %RBP
  %6716 = sub i64 %6715, 44
  %6717 = load i64, i64* %PC
  %6718 = add i64 %6717, 3
  store i64 %6718, i64* %PC
  %6719 = inttoptr i64 %6716 to i32*
  %6720 = load i32, i32* %6719
  %6721 = zext i32 %6720 to i64
  store i64 %6721, i64* %RDX, align 8, !tbaa !2428
  %6722 = load i64, i64* %RDX
  %6723 = load i64, i64* %PC
  %6724 = add i64 %6723, 3
  store i64 %6724, i64* %PC
  %6725 = trunc i64 %6722 to i32
  %6726 = sub i32 %6725, 3
  %6727 = zext i32 %6726 to i64
  store i64 %6727, i64* %RDX, align 8, !tbaa !2428
  %6728 = icmp ult i32 %6725, 3
  %6729 = zext i1 %6728 to i8
  %6730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6729, i8* %6730, align 1, !tbaa !2432
  %6731 = and i32 %6726, 255
  %6732 = call i32 @llvm.ctpop.i32(i32 %6731) #16
  %6733 = trunc i32 %6732 to i8
  %6734 = and i8 %6733, 1
  %6735 = xor i8 %6734, 1
  %6736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6735, i8* %6736, align 1, !tbaa !2446
  %6737 = xor i64 3, %6722
  %6738 = trunc i64 %6737 to i32
  %6739 = xor i32 %6738, %6726
  %6740 = lshr i32 %6739, 4
  %6741 = trunc i32 %6740 to i8
  %6742 = and i8 %6741, 1
  %6743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6742, i8* %6743, align 1, !tbaa !2447
  %6744 = icmp eq i32 %6726, 0
  %6745 = zext i1 %6744 to i8
  %6746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6745, i8* %6746, align 1, !tbaa !2448
  %6747 = lshr i32 %6726, 31
  %6748 = trunc i32 %6747 to i8
  %6749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6748, i8* %6749, align 1, !tbaa !2449
  %6750 = lshr i32 %6725, 31
  %6751 = xor i32 %6747, %6750
  %6752 = add nuw nsw i32 %6751, %6750
  %6753 = icmp eq i32 %6752, 2
  %6754 = zext i1 %6753 to i8
  %6755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6754, i8* %6755, align 1, !tbaa !2450
  %6756 = load i32, i32* %EDX
  %6757 = zext i32 %6756 to i64
  %6758 = load i64, i64* %PC
  %6759 = add i64 %6758, 3
  store i64 %6759, i64* %PC
  %6760 = shl i64 %6757, 32
  %6761 = ashr exact i64 %6760, 32
  store i64 %6761, i64* %RCX, align 8, !tbaa !2428
  %6762 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6763 = load i64, i64* %RAX
  %6764 = load i64, i64* %RCX
  %6765 = mul i64 %6764, 4
  %6766 = add i64 %6765, %6763
  %6767 = load i64, i64* %PC
  %6768 = add i64 %6767, 5
  store i64 %6768, i64* %PC
  %6769 = inttoptr i64 %6766 to float*
  %6770 = load float, float* %6769
  %6771 = bitcast i8* %6762 to float*
  store float %6770, float* %6771, align 1, !tbaa !2452
  %6772 = getelementptr inbounds i8, i8* %6762, i64 4
  %6773 = bitcast i8* %6772 to float*
  store float 0.000000e+00, float* %6773, align 1, !tbaa !2452
  %6774 = getelementptr inbounds i8, i8* %6762, i64 8
  %6775 = bitcast i8* %6774 to float*
  store float 0.000000e+00, float* %6775, align 1, !tbaa !2452
  %6776 = getelementptr inbounds i8, i8* %6762, i64 12
  %6777 = bitcast i8* %6776 to float*
  store float 0.000000e+00, float* %6777, align 1, !tbaa !2452
  %6778 = load i64, i64* %RBP
  %6779 = sub i64 %6778, 40
  %6780 = load i64, i64* %PC
  %6781 = add i64 %6780, 4
  store i64 %6781, i64* %PC
  %6782 = inttoptr i64 %6779 to i64*
  %6783 = load i64, i64* %6782
  store i64 %6783, i64* %RAX, align 8, !tbaa !2428
  %6784 = load i64, i64* %RBP
  %6785 = sub i64 %6784, 24
  %6786 = load i64, i64* %PC
  %6787 = add i64 %6786, 3
  store i64 %6787, i64* %PC
  %6788 = inttoptr i64 %6785 to i32*
  %6789 = load i32, i32* %6788
  %6790 = zext i32 %6789 to i64
  store i64 %6790, i64* %RDX, align 8, !tbaa !2428
  %6791 = load i64, i64* %RBP
  %6792 = sub i64 %6791, 44
  %6793 = load i64, i64* %PC
  %6794 = add i64 %6793, 3
  store i64 %6794, i64* %PC
  %6795 = inttoptr i64 %6792 to i32*
  %6796 = load i32, i32* %6795
  %6797 = zext i32 %6796 to i64
  store i64 %6797, i64* %RSI, align 8, !tbaa !2428
  %6798 = load i64, i64* %RSI
  %6799 = load i64, i64* %PC
  %6800 = add i64 %6799, 3
  store i64 %6800, i64* %PC
  %6801 = trunc i64 %6798 to i32
  %6802 = sub i32 %6801, 3
  %6803 = zext i32 %6802 to i64
  store i64 %6803, i64* %RSI, align 8, !tbaa !2428
  %6804 = icmp ult i32 %6801, 3
  %6805 = zext i1 %6804 to i8
  %6806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6805, i8* %6806, align 1, !tbaa !2432
  %6807 = and i32 %6802, 255
  %6808 = call i32 @llvm.ctpop.i32(i32 %6807) #16
  %6809 = trunc i32 %6808 to i8
  %6810 = and i8 %6809, 1
  %6811 = xor i8 %6810, 1
  %6812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6811, i8* %6812, align 1, !tbaa !2446
  %6813 = xor i64 3, %6798
  %6814 = trunc i64 %6813 to i32
  %6815 = xor i32 %6814, %6802
  %6816 = lshr i32 %6815, 4
  %6817 = trunc i32 %6816 to i8
  %6818 = and i8 %6817, 1
  %6819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6818, i8* %6819, align 1, !tbaa !2447
  %6820 = icmp eq i32 %6802, 0
  %6821 = zext i1 %6820 to i8
  %6822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6821, i8* %6822, align 1, !tbaa !2448
  %6823 = lshr i32 %6802, 31
  %6824 = trunc i32 %6823 to i8
  %6825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6824, i8* %6825, align 1, !tbaa !2449
  %6826 = lshr i32 %6801, 31
  %6827 = xor i32 %6823, %6826
  %6828 = add nuw nsw i32 %6827, %6826
  %6829 = icmp eq i32 %6828, 2
  %6830 = zext i1 %6829 to i8
  %6831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6830, i8* %6831, align 1, !tbaa !2450
  %6832 = load i64, i64* %RDX
  %6833 = load i32, i32* %ESI
  %6834 = zext i32 %6833 to i64
  %6835 = load i64, i64* %PC
  %6836 = add i64 %6835, 3
  store i64 %6836, i64* %PC
  %6837 = shl i64 %6832, 32
  %6838 = ashr exact i64 %6837, 32
  %6839 = shl i64 %6834, 32
  %6840 = ashr exact i64 %6839, 32
  %6841 = mul nsw i64 %6840, %6838
  %6842 = trunc i64 %6841 to i32
  %6843 = and i64 %6841, 4294967295
  store i64 %6843, i64* %RDX, align 8, !tbaa !2428
  %6844 = shl i64 %6841, 32
  %6845 = ashr exact i64 %6844, 32
  %6846 = icmp ne i64 %6845, %6841
  %6847 = zext i1 %6846 to i8
  %6848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6847, i8* %6848, align 1, !tbaa !2432
  %6849 = and i32 %6842, 255
  %6850 = call i32 @llvm.ctpop.i32(i32 %6849) #16
  %6851 = trunc i32 %6850 to i8
  %6852 = and i8 %6851, 1
  %6853 = xor i8 %6852, 1
  %6854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6853, i8* %6854, align 1, !tbaa !2446
  %6855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6855, align 1, !tbaa !2447
  %6856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6856, align 1, !tbaa !2448
  %6857 = lshr i32 %6842, 31
  %6858 = trunc i32 %6857 to i8
  %6859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6858, i8* %6859, align 1, !tbaa !2449
  %6860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6847, i8* %6860, align 1, !tbaa !2450
  %6861 = load i64, i64* %RDX
  %6862 = load i64, i64* %RBP
  %6863 = sub i64 %6862, 48
  %6864 = load i64, i64* %PC
  %6865 = add i64 %6864, 3
  store i64 %6865, i64* %PC
  %6866 = trunc i64 %6861 to i32
  %6867 = inttoptr i64 %6863 to i32*
  %6868 = load i32, i32* %6867
  %6869 = add i32 %6868, %6866
  %6870 = zext i32 %6869 to i64
  store i64 %6870, i64* %RDX, align 8, !tbaa !2428
  %6871 = icmp ult i32 %6869, %6866
  %6872 = icmp ult i32 %6869, %6868
  %6873 = or i1 %6871, %6872
  %6874 = zext i1 %6873 to i8
  %6875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6874, i8* %6875, align 1, !tbaa !2432
  %6876 = and i32 %6869, 255
  %6877 = call i32 @llvm.ctpop.i32(i32 %6876) #16
  %6878 = trunc i32 %6877 to i8
  %6879 = and i8 %6878, 1
  %6880 = xor i8 %6879, 1
  %6881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6880, i8* %6881, align 1, !tbaa !2446
  %6882 = xor i32 %6868, %6866
  %6883 = xor i32 %6882, %6869
  %6884 = lshr i32 %6883, 4
  %6885 = trunc i32 %6884 to i8
  %6886 = and i8 %6885, 1
  %6887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6886, i8* %6887, align 1, !tbaa !2447
  %6888 = icmp eq i32 %6869, 0
  %6889 = zext i1 %6888 to i8
  %6890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6889, i8* %6890, align 1, !tbaa !2448
  %6891 = lshr i32 %6869, 31
  %6892 = trunc i32 %6891 to i8
  %6893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6892, i8* %6893, align 1, !tbaa !2449
  %6894 = lshr i32 %6866, 31
  %6895 = lshr i32 %6868, 31
  %6896 = xor i32 %6891, %6894
  %6897 = xor i32 %6891, %6895
  %6898 = add nuw nsw i32 %6896, %6897
  %6899 = icmp eq i32 %6898, 2
  %6900 = zext i1 %6899 to i8
  %6901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6900, i8* %6901, align 1, !tbaa !2450
  %6902 = load i32, i32* %EDX
  %6903 = zext i32 %6902 to i64
  %6904 = load i64, i64* %PC
  %6905 = add i64 %6904, 3
  store i64 %6905, i64* %PC
  %6906 = shl i64 %6903, 32
  %6907 = ashr exact i64 %6906, 32
  store i64 %6907, i64* %RCX, align 8, !tbaa !2428
  %6908 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6909 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6910 = load i64, i64* %RAX
  %6911 = load i64, i64* %RCX
  %6912 = mul i64 %6911, 4
  %6913 = add i64 %6912, %6910
  %6914 = load i64, i64* %PC
  %6915 = add i64 %6914, 5
  store i64 %6915, i64* %PC
  %6916 = bitcast i8* %6909 to <2 x float>*
  %6917 = load <2 x float>, <2 x float>* %6916, align 1
  %6918 = getelementptr inbounds i8, i8* %6909, i64 8
  %6919 = bitcast i8* %6918 to <2 x i32>*
  %6920 = load <2 x i32>, <2 x i32>* %6919, align 1
  %6921 = inttoptr i64 %6913 to float*
  %6922 = load float, float* %6921
  %6923 = extractelement <2 x float> %6917, i32 0
  %6924 = fmul float %6923, %6922
  %6925 = bitcast i8* %6908 to float*
  store float %6924, float* %6925, align 1, !tbaa !2452
  %6926 = bitcast <2 x float> %6917 to <2 x i32>
  %6927 = extractelement <2 x i32> %6926, i32 1
  %6928 = getelementptr inbounds i8, i8* %6908, i64 4
  %6929 = bitcast i8* %6928 to i32*
  store i32 %6927, i32* %6929, align 1, !tbaa !2452
  %6930 = extractelement <2 x i32> %6920, i32 0
  %6931 = getelementptr inbounds i8, i8* %6908, i64 8
  %6932 = bitcast i8* %6931 to i32*
  store i32 %6930, i32* %6932, align 1, !tbaa !2452
  %6933 = extractelement <2 x i32> %6920, i32 1
  %6934 = getelementptr inbounds i8, i8* %6908, i64 12
  %6935 = bitcast i8* %6934 to i32*
  store i32 %6933, i32* %6935, align 1, !tbaa !2452
  %6936 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6937 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6938 = bitcast %union.vec128_t* %XMM1 to i8*
  %6939 = load i64, i64* %PC
  %6940 = add i64 %6939, 4
  store i64 %6940, i64* %PC
  %6941 = bitcast i8* %6937 to <2 x float>*
  %6942 = load <2 x float>, <2 x float>* %6941, align 1
  %6943 = getelementptr inbounds i8, i8* %6937, i64 8
  %6944 = bitcast i8* %6943 to <2 x i32>*
  %6945 = load <2 x i32>, <2 x i32>* %6944, align 1
  %6946 = bitcast i8* %6938 to <2 x float>*
  %6947 = load <2 x float>, <2 x float>* %6946, align 1
  %6948 = extractelement <2 x float> %6942, i32 0
  %6949 = extractelement <2 x float> %6947, i32 0
  %6950 = fadd float %6948, %6949
  %6951 = bitcast i8* %6936 to float*
  store float %6950, float* %6951, align 1, !tbaa !2452
  %6952 = bitcast <2 x float> %6942 to <2 x i32>
  %6953 = extractelement <2 x i32> %6952, i32 1
  %6954 = getelementptr inbounds i8, i8* %6936, i64 4
  %6955 = bitcast i8* %6954 to i32*
  store i32 %6953, i32* %6955, align 1, !tbaa !2452
  %6956 = extractelement <2 x i32> %6945, i32 0
  %6957 = getelementptr inbounds i8, i8* %6936, i64 8
  %6958 = bitcast i8* %6957 to i32*
  store i32 %6956, i32* %6958, align 1, !tbaa !2452
  %6959 = extractelement <2 x i32> %6945, i32 1
  %6960 = getelementptr inbounds i8, i8* %6936, i64 12
  %6961 = bitcast i8* %6960 to i32*
  store i32 %6959, i32* %6961, align 1, !tbaa !2452
  %6962 = load i64, i64* %RBP
  %6963 = sub i64 %6962, 32
  %6964 = load i64, i64* %PC
  %6965 = add i64 %6964, 4
  store i64 %6965, i64* %PC
  %6966 = inttoptr i64 %6963 to i64*
  %6967 = load i64, i64* %6966
  store i64 %6967, i64* %RAX, align 8, !tbaa !2428
  %6968 = load i64, i64* %RBP
  %6969 = sub i64 %6968, 44
  %6970 = load i64, i64* %PC
  %6971 = add i64 %6970, 3
  store i64 %6971, i64* %PC
  %6972 = inttoptr i64 %6969 to i32*
  %6973 = load i32, i32* %6972
  %6974 = zext i32 %6973 to i64
  store i64 %6974, i64* %RDX, align 8, !tbaa !2428
  %6975 = load i64, i64* %RDX
  %6976 = load i64, i64* %PC
  %6977 = add i64 %6976, 3
  store i64 %6977, i64* %PC
  %6978 = trunc i64 %6975 to i32
  %6979 = sub i32 %6978, 2
  %6980 = zext i32 %6979 to i64
  store i64 %6980, i64* %RDX, align 8, !tbaa !2428
  %6981 = icmp ult i32 %6978, 2
  %6982 = zext i1 %6981 to i8
  %6983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6982, i8* %6983, align 1, !tbaa !2432
  %6984 = and i32 %6979, 255
  %6985 = call i32 @llvm.ctpop.i32(i32 %6984) #16
  %6986 = trunc i32 %6985 to i8
  %6987 = and i8 %6986, 1
  %6988 = xor i8 %6987, 1
  %6989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6988, i8* %6989, align 1, !tbaa !2446
  %6990 = xor i64 2, %6975
  %6991 = trunc i64 %6990 to i32
  %6992 = xor i32 %6991, %6979
  %6993 = lshr i32 %6992, 4
  %6994 = trunc i32 %6993 to i8
  %6995 = and i8 %6994, 1
  %6996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6995, i8* %6996, align 1, !tbaa !2447
  %6997 = icmp eq i32 %6979, 0
  %6998 = zext i1 %6997 to i8
  %6999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6998, i8* %6999, align 1, !tbaa !2448
  %7000 = lshr i32 %6979, 31
  %7001 = trunc i32 %7000 to i8
  %7002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7001, i8* %7002, align 1, !tbaa !2449
  %7003 = lshr i32 %6978, 31
  %7004 = xor i32 %7000, %7003
  %7005 = add nuw nsw i32 %7004, %7003
  %7006 = icmp eq i32 %7005, 2
  %7007 = zext i1 %7006 to i8
  %7008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7007, i8* %7008, align 1, !tbaa !2450
  %7009 = load i32, i32* %EDX
  %7010 = zext i32 %7009 to i64
  %7011 = load i64, i64* %PC
  %7012 = add i64 %7011, 3
  store i64 %7012, i64* %PC
  %7013 = shl i64 %7010, 32
  %7014 = ashr exact i64 %7013, 32
  store i64 %7014, i64* %RCX, align 8, !tbaa !2428
  %7015 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7016 = load i64, i64* %RAX
  %7017 = load i64, i64* %RCX
  %7018 = mul i64 %7017, 4
  %7019 = add i64 %7018, %7016
  %7020 = load i64, i64* %PC
  %7021 = add i64 %7020, 5
  store i64 %7021, i64* %PC
  %7022 = inttoptr i64 %7019 to float*
  %7023 = load float, float* %7022
  %7024 = bitcast i8* %7015 to float*
  store float %7023, float* %7024, align 1, !tbaa !2452
  %7025 = getelementptr inbounds i8, i8* %7015, i64 4
  %7026 = bitcast i8* %7025 to float*
  store float 0.000000e+00, float* %7026, align 1, !tbaa !2452
  %7027 = getelementptr inbounds i8, i8* %7015, i64 8
  %7028 = bitcast i8* %7027 to float*
  store float 0.000000e+00, float* %7028, align 1, !tbaa !2452
  %7029 = getelementptr inbounds i8, i8* %7015, i64 12
  %7030 = bitcast i8* %7029 to float*
  store float 0.000000e+00, float* %7030, align 1, !tbaa !2452
  %7031 = load i64, i64* %RBP
  %7032 = sub i64 %7031, 40
  %7033 = load i64, i64* %PC
  %7034 = add i64 %7033, 4
  store i64 %7034, i64* %PC
  %7035 = inttoptr i64 %7032 to i64*
  %7036 = load i64, i64* %7035
  store i64 %7036, i64* %RAX, align 8, !tbaa !2428
  %7037 = load i64, i64* %RBP
  %7038 = sub i64 %7037, 24
  %7039 = load i64, i64* %PC
  %7040 = add i64 %7039, 3
  store i64 %7040, i64* %PC
  %7041 = inttoptr i64 %7038 to i32*
  %7042 = load i32, i32* %7041
  %7043 = zext i32 %7042 to i64
  store i64 %7043, i64* %RDX, align 8, !tbaa !2428
  %7044 = load i64, i64* %RBP
  %7045 = sub i64 %7044, 44
  %7046 = load i64, i64* %PC
  %7047 = add i64 %7046, 3
  store i64 %7047, i64* %PC
  %7048 = inttoptr i64 %7045 to i32*
  %7049 = load i32, i32* %7048
  %7050 = zext i32 %7049 to i64
  store i64 %7050, i64* %RSI, align 8, !tbaa !2428
  %7051 = load i64, i64* %RSI
  %7052 = load i64, i64* %PC
  %7053 = add i64 %7052, 3
  store i64 %7053, i64* %PC
  %7054 = trunc i64 %7051 to i32
  %7055 = sub i32 %7054, 2
  %7056 = zext i32 %7055 to i64
  store i64 %7056, i64* %RSI, align 8, !tbaa !2428
  %7057 = icmp ult i32 %7054, 2
  %7058 = zext i1 %7057 to i8
  %7059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7058, i8* %7059, align 1, !tbaa !2432
  %7060 = and i32 %7055, 255
  %7061 = call i32 @llvm.ctpop.i32(i32 %7060) #16
  %7062 = trunc i32 %7061 to i8
  %7063 = and i8 %7062, 1
  %7064 = xor i8 %7063, 1
  %7065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7064, i8* %7065, align 1, !tbaa !2446
  %7066 = xor i64 2, %7051
  %7067 = trunc i64 %7066 to i32
  %7068 = xor i32 %7067, %7055
  %7069 = lshr i32 %7068, 4
  %7070 = trunc i32 %7069 to i8
  %7071 = and i8 %7070, 1
  %7072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7071, i8* %7072, align 1, !tbaa !2447
  %7073 = icmp eq i32 %7055, 0
  %7074 = zext i1 %7073 to i8
  %7075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7074, i8* %7075, align 1, !tbaa !2448
  %7076 = lshr i32 %7055, 31
  %7077 = trunc i32 %7076 to i8
  %7078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7077, i8* %7078, align 1, !tbaa !2449
  %7079 = lshr i32 %7054, 31
  %7080 = xor i32 %7076, %7079
  %7081 = add nuw nsw i32 %7080, %7079
  %7082 = icmp eq i32 %7081, 2
  %7083 = zext i1 %7082 to i8
  %7084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7083, i8* %7084, align 1, !tbaa !2450
  %7085 = load i64, i64* %RDX
  %7086 = load i32, i32* %ESI
  %7087 = zext i32 %7086 to i64
  %7088 = load i64, i64* %PC
  %7089 = add i64 %7088, 3
  store i64 %7089, i64* %PC
  %7090 = shl i64 %7085, 32
  %7091 = ashr exact i64 %7090, 32
  %7092 = shl i64 %7087, 32
  %7093 = ashr exact i64 %7092, 32
  %7094 = mul nsw i64 %7093, %7091
  %7095 = trunc i64 %7094 to i32
  %7096 = and i64 %7094, 4294967295
  store i64 %7096, i64* %RDX, align 8, !tbaa !2428
  %7097 = shl i64 %7094, 32
  %7098 = ashr exact i64 %7097, 32
  %7099 = icmp ne i64 %7098, %7094
  %7100 = zext i1 %7099 to i8
  %7101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7100, i8* %7101, align 1, !tbaa !2432
  %7102 = and i32 %7095, 255
  %7103 = call i32 @llvm.ctpop.i32(i32 %7102) #16
  %7104 = trunc i32 %7103 to i8
  %7105 = and i8 %7104, 1
  %7106 = xor i8 %7105, 1
  %7107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7106, i8* %7107, align 1, !tbaa !2446
  %7108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7108, align 1, !tbaa !2447
  %7109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7109, align 1, !tbaa !2448
  %7110 = lshr i32 %7095, 31
  %7111 = trunc i32 %7110 to i8
  %7112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7111, i8* %7112, align 1, !tbaa !2449
  %7113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7100, i8* %7113, align 1, !tbaa !2450
  %7114 = load i64, i64* %RDX
  %7115 = load i64, i64* %RBP
  %7116 = sub i64 %7115, 48
  %7117 = load i64, i64* %PC
  %7118 = add i64 %7117, 3
  store i64 %7118, i64* %PC
  %7119 = trunc i64 %7114 to i32
  %7120 = inttoptr i64 %7116 to i32*
  %7121 = load i32, i32* %7120
  %7122 = add i32 %7121, %7119
  %7123 = zext i32 %7122 to i64
  store i64 %7123, i64* %RDX, align 8, !tbaa !2428
  %7124 = icmp ult i32 %7122, %7119
  %7125 = icmp ult i32 %7122, %7121
  %7126 = or i1 %7124, %7125
  %7127 = zext i1 %7126 to i8
  %7128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7127, i8* %7128, align 1, !tbaa !2432
  %7129 = and i32 %7122, 255
  %7130 = call i32 @llvm.ctpop.i32(i32 %7129) #16
  %7131 = trunc i32 %7130 to i8
  %7132 = and i8 %7131, 1
  %7133 = xor i8 %7132, 1
  %7134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7133, i8* %7134, align 1, !tbaa !2446
  %7135 = xor i32 %7121, %7119
  %7136 = xor i32 %7135, %7122
  %7137 = lshr i32 %7136, 4
  %7138 = trunc i32 %7137 to i8
  %7139 = and i8 %7138, 1
  %7140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7139, i8* %7140, align 1, !tbaa !2447
  %7141 = icmp eq i32 %7122, 0
  %7142 = zext i1 %7141 to i8
  %7143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7142, i8* %7143, align 1, !tbaa !2448
  %7144 = lshr i32 %7122, 31
  %7145 = trunc i32 %7144 to i8
  %7146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7145, i8* %7146, align 1, !tbaa !2449
  %7147 = lshr i32 %7119, 31
  %7148 = lshr i32 %7121, 31
  %7149 = xor i32 %7144, %7147
  %7150 = xor i32 %7144, %7148
  %7151 = add nuw nsw i32 %7149, %7150
  %7152 = icmp eq i32 %7151, 2
  %7153 = zext i1 %7152 to i8
  %7154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7153, i8* %7154, align 1, !tbaa !2450
  %7155 = load i32, i32* %EDX
  %7156 = zext i32 %7155 to i64
  %7157 = load i64, i64* %PC
  %7158 = add i64 %7157, 3
  store i64 %7158, i64* %PC
  %7159 = shl i64 %7156, 32
  %7160 = ashr exact i64 %7159, 32
  store i64 %7160, i64* %RCX, align 8, !tbaa !2428
  %7161 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7162 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7163 = load i64, i64* %RAX
  %7164 = load i64, i64* %RCX
  %7165 = mul i64 %7164, 4
  %7166 = add i64 %7165, %7163
  %7167 = load i64, i64* %PC
  %7168 = add i64 %7167, 5
  store i64 %7168, i64* %PC
  %7169 = bitcast i8* %7162 to <2 x float>*
  %7170 = load <2 x float>, <2 x float>* %7169, align 1
  %7171 = getelementptr inbounds i8, i8* %7162, i64 8
  %7172 = bitcast i8* %7171 to <2 x i32>*
  %7173 = load <2 x i32>, <2 x i32>* %7172, align 1
  %7174 = inttoptr i64 %7166 to float*
  %7175 = load float, float* %7174
  %7176 = extractelement <2 x float> %7170, i32 0
  %7177 = fmul float %7176, %7175
  %7178 = bitcast i8* %7161 to float*
  store float %7177, float* %7178, align 1, !tbaa !2452
  %7179 = bitcast <2 x float> %7170 to <2 x i32>
  %7180 = extractelement <2 x i32> %7179, i32 1
  %7181 = getelementptr inbounds i8, i8* %7161, i64 4
  %7182 = bitcast i8* %7181 to i32*
  store i32 %7180, i32* %7182, align 1, !tbaa !2452
  %7183 = extractelement <2 x i32> %7173, i32 0
  %7184 = getelementptr inbounds i8, i8* %7161, i64 8
  %7185 = bitcast i8* %7184 to i32*
  store i32 %7183, i32* %7185, align 1, !tbaa !2452
  %7186 = extractelement <2 x i32> %7173, i32 1
  %7187 = getelementptr inbounds i8, i8* %7161, i64 12
  %7188 = bitcast i8* %7187 to i32*
  store i32 %7186, i32* %7188, align 1, !tbaa !2452
  %7189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7190 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7191 = bitcast %union.vec128_t* %XMM1 to i8*
  %7192 = load i64, i64* %PC
  %7193 = add i64 %7192, 4
  store i64 %7193, i64* %PC
  %7194 = bitcast i8* %7190 to <2 x float>*
  %7195 = load <2 x float>, <2 x float>* %7194, align 1
  %7196 = getelementptr inbounds i8, i8* %7190, i64 8
  %7197 = bitcast i8* %7196 to <2 x i32>*
  %7198 = load <2 x i32>, <2 x i32>* %7197, align 1
  %7199 = bitcast i8* %7191 to <2 x float>*
  %7200 = load <2 x float>, <2 x float>* %7199, align 1
  %7201 = extractelement <2 x float> %7195, i32 0
  %7202 = extractelement <2 x float> %7200, i32 0
  %7203 = fadd float %7201, %7202
  %7204 = bitcast i8* %7189 to float*
  store float %7203, float* %7204, align 1, !tbaa !2452
  %7205 = bitcast <2 x float> %7195 to <2 x i32>
  %7206 = extractelement <2 x i32> %7205, i32 1
  %7207 = getelementptr inbounds i8, i8* %7189, i64 4
  %7208 = bitcast i8* %7207 to i32*
  store i32 %7206, i32* %7208, align 1, !tbaa !2452
  %7209 = extractelement <2 x i32> %7198, i32 0
  %7210 = getelementptr inbounds i8, i8* %7189, i64 8
  %7211 = bitcast i8* %7210 to i32*
  store i32 %7209, i32* %7211, align 1, !tbaa !2452
  %7212 = extractelement <2 x i32> %7198, i32 1
  %7213 = getelementptr inbounds i8, i8* %7189, i64 12
  %7214 = bitcast i8* %7213 to i32*
  store i32 %7212, i32* %7214, align 1, !tbaa !2452
  %7215 = load i64, i64* %RBP
  %7216 = sub i64 %7215, 32
  %7217 = load i64, i64* %PC
  %7218 = add i64 %7217, 4
  store i64 %7218, i64* %PC
  %7219 = inttoptr i64 %7216 to i64*
  %7220 = load i64, i64* %7219
  store i64 %7220, i64* %RAX, align 8, !tbaa !2428
  %7221 = load i64, i64* %RBP
  %7222 = sub i64 %7221, 44
  %7223 = load i64, i64* %PC
  %7224 = add i64 %7223, 3
  store i64 %7224, i64* %PC
  %7225 = inttoptr i64 %7222 to i32*
  %7226 = load i32, i32* %7225
  %7227 = zext i32 %7226 to i64
  store i64 %7227, i64* %RDX, align 8, !tbaa !2428
  %7228 = load i64, i64* %RDX
  %7229 = load i64, i64* %PC
  %7230 = add i64 %7229, 3
  store i64 %7230, i64* %PC
  %7231 = trunc i64 %7228 to i32
  %7232 = sub i32 %7231, 1
  %7233 = zext i32 %7232 to i64
  store i64 %7233, i64* %RDX, align 8, !tbaa !2428
  %7234 = icmp ult i32 %7231, 1
  %7235 = zext i1 %7234 to i8
  %7236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7235, i8* %7236, align 1, !tbaa !2432
  %7237 = and i32 %7232, 255
  %7238 = call i32 @llvm.ctpop.i32(i32 %7237) #16
  %7239 = trunc i32 %7238 to i8
  %7240 = and i8 %7239, 1
  %7241 = xor i8 %7240, 1
  %7242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7241, i8* %7242, align 1, !tbaa !2446
  %7243 = xor i64 1, %7228
  %7244 = trunc i64 %7243 to i32
  %7245 = xor i32 %7244, %7232
  %7246 = lshr i32 %7245, 4
  %7247 = trunc i32 %7246 to i8
  %7248 = and i8 %7247, 1
  %7249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7248, i8* %7249, align 1, !tbaa !2447
  %7250 = icmp eq i32 %7232, 0
  %7251 = zext i1 %7250 to i8
  %7252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7251, i8* %7252, align 1, !tbaa !2448
  %7253 = lshr i32 %7232, 31
  %7254 = trunc i32 %7253 to i8
  %7255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7254, i8* %7255, align 1, !tbaa !2449
  %7256 = lshr i32 %7231, 31
  %7257 = xor i32 %7253, %7256
  %7258 = add nuw nsw i32 %7257, %7256
  %7259 = icmp eq i32 %7258, 2
  %7260 = zext i1 %7259 to i8
  %7261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7260, i8* %7261, align 1, !tbaa !2450
  %7262 = load i32, i32* %EDX
  %7263 = zext i32 %7262 to i64
  %7264 = load i64, i64* %PC
  %7265 = add i64 %7264, 3
  store i64 %7265, i64* %PC
  %7266 = shl i64 %7263, 32
  %7267 = ashr exact i64 %7266, 32
  store i64 %7267, i64* %RCX, align 8, !tbaa !2428
  %7268 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7269 = load i64, i64* %RAX
  %7270 = load i64, i64* %RCX
  %7271 = mul i64 %7270, 4
  %7272 = add i64 %7271, %7269
  %7273 = load i64, i64* %PC
  %7274 = add i64 %7273, 5
  store i64 %7274, i64* %PC
  %7275 = inttoptr i64 %7272 to float*
  %7276 = load float, float* %7275
  %7277 = bitcast i8* %7268 to float*
  store float %7276, float* %7277, align 1, !tbaa !2452
  %7278 = getelementptr inbounds i8, i8* %7268, i64 4
  %7279 = bitcast i8* %7278 to float*
  store float 0.000000e+00, float* %7279, align 1, !tbaa !2452
  %7280 = getelementptr inbounds i8, i8* %7268, i64 8
  %7281 = bitcast i8* %7280 to float*
  store float 0.000000e+00, float* %7281, align 1, !tbaa !2452
  %7282 = getelementptr inbounds i8, i8* %7268, i64 12
  %7283 = bitcast i8* %7282 to float*
  store float 0.000000e+00, float* %7283, align 1, !tbaa !2452
  %7284 = load i64, i64* %RBP
  %7285 = sub i64 %7284, 40
  %7286 = load i64, i64* %PC
  %7287 = add i64 %7286, 4
  store i64 %7287, i64* %PC
  %7288 = inttoptr i64 %7285 to i64*
  %7289 = load i64, i64* %7288
  store i64 %7289, i64* %RAX, align 8, !tbaa !2428
  %7290 = load i64, i64* %RBP
  %7291 = sub i64 %7290, 24
  %7292 = load i64, i64* %PC
  %7293 = add i64 %7292, 3
  store i64 %7293, i64* %PC
  %7294 = inttoptr i64 %7291 to i32*
  %7295 = load i32, i32* %7294
  %7296 = zext i32 %7295 to i64
  store i64 %7296, i64* %RDX, align 8, !tbaa !2428
  %7297 = load i64, i64* %RBP
  %7298 = sub i64 %7297, 44
  %7299 = load i64, i64* %PC
  %7300 = add i64 %7299, 3
  store i64 %7300, i64* %PC
  %7301 = inttoptr i64 %7298 to i32*
  %7302 = load i32, i32* %7301
  %7303 = zext i32 %7302 to i64
  store i64 %7303, i64* %RSI, align 8, !tbaa !2428
  %7304 = load i64, i64* %RSI
  %7305 = load i64, i64* %PC
  %7306 = add i64 %7305, 3
  store i64 %7306, i64* %PC
  %7307 = trunc i64 %7304 to i32
  %7308 = sub i32 %7307, 1
  %7309 = zext i32 %7308 to i64
  store i64 %7309, i64* %RSI, align 8, !tbaa !2428
  %7310 = icmp ult i32 %7307, 1
  %7311 = zext i1 %7310 to i8
  %7312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7311, i8* %7312, align 1, !tbaa !2432
  %7313 = and i32 %7308, 255
  %7314 = call i32 @llvm.ctpop.i32(i32 %7313) #16
  %7315 = trunc i32 %7314 to i8
  %7316 = and i8 %7315, 1
  %7317 = xor i8 %7316, 1
  %7318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7317, i8* %7318, align 1, !tbaa !2446
  %7319 = xor i64 1, %7304
  %7320 = trunc i64 %7319 to i32
  %7321 = xor i32 %7320, %7308
  %7322 = lshr i32 %7321, 4
  %7323 = trunc i32 %7322 to i8
  %7324 = and i8 %7323, 1
  %7325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7324, i8* %7325, align 1, !tbaa !2447
  %7326 = icmp eq i32 %7308, 0
  %7327 = zext i1 %7326 to i8
  %7328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7327, i8* %7328, align 1, !tbaa !2448
  %7329 = lshr i32 %7308, 31
  %7330 = trunc i32 %7329 to i8
  %7331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7330, i8* %7331, align 1, !tbaa !2449
  %7332 = lshr i32 %7307, 31
  %7333 = xor i32 %7329, %7332
  %7334 = add nuw nsw i32 %7333, %7332
  %7335 = icmp eq i32 %7334, 2
  %7336 = zext i1 %7335 to i8
  %7337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7336, i8* %7337, align 1, !tbaa !2450
  %7338 = load i64, i64* %RDX
  %7339 = load i32, i32* %ESI
  %7340 = zext i32 %7339 to i64
  %7341 = load i64, i64* %PC
  %7342 = add i64 %7341, 3
  store i64 %7342, i64* %PC
  %7343 = shl i64 %7338, 32
  %7344 = ashr exact i64 %7343, 32
  %7345 = shl i64 %7340, 32
  %7346 = ashr exact i64 %7345, 32
  %7347 = mul nsw i64 %7346, %7344
  %7348 = trunc i64 %7347 to i32
  %7349 = and i64 %7347, 4294967295
  store i64 %7349, i64* %RDX, align 8, !tbaa !2428
  %7350 = shl i64 %7347, 32
  %7351 = ashr exact i64 %7350, 32
  %7352 = icmp ne i64 %7351, %7347
  %7353 = zext i1 %7352 to i8
  %7354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7353, i8* %7354, align 1, !tbaa !2432
  %7355 = and i32 %7348, 255
  %7356 = call i32 @llvm.ctpop.i32(i32 %7355) #16
  %7357 = trunc i32 %7356 to i8
  %7358 = and i8 %7357, 1
  %7359 = xor i8 %7358, 1
  %7360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7359, i8* %7360, align 1, !tbaa !2446
  %7361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7361, align 1, !tbaa !2447
  %7362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7362, align 1, !tbaa !2448
  %7363 = lshr i32 %7348, 31
  %7364 = trunc i32 %7363 to i8
  %7365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7364, i8* %7365, align 1, !tbaa !2449
  %7366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7353, i8* %7366, align 1, !tbaa !2450
  %7367 = load i64, i64* %RDX
  %7368 = load i64, i64* %RBP
  %7369 = sub i64 %7368, 48
  %7370 = load i64, i64* %PC
  %7371 = add i64 %7370, 3
  store i64 %7371, i64* %PC
  %7372 = trunc i64 %7367 to i32
  %7373 = inttoptr i64 %7369 to i32*
  %7374 = load i32, i32* %7373
  %7375 = add i32 %7374, %7372
  %7376 = zext i32 %7375 to i64
  store i64 %7376, i64* %RDX, align 8, !tbaa !2428
  %7377 = icmp ult i32 %7375, %7372
  %7378 = icmp ult i32 %7375, %7374
  %7379 = or i1 %7377, %7378
  %7380 = zext i1 %7379 to i8
  %7381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7380, i8* %7381, align 1, !tbaa !2432
  %7382 = and i32 %7375, 255
  %7383 = call i32 @llvm.ctpop.i32(i32 %7382) #16
  %7384 = trunc i32 %7383 to i8
  %7385 = and i8 %7384, 1
  %7386 = xor i8 %7385, 1
  %7387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7386, i8* %7387, align 1, !tbaa !2446
  %7388 = xor i32 %7374, %7372
  %7389 = xor i32 %7388, %7375
  %7390 = lshr i32 %7389, 4
  %7391 = trunc i32 %7390 to i8
  %7392 = and i8 %7391, 1
  %7393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7392, i8* %7393, align 1, !tbaa !2447
  %7394 = icmp eq i32 %7375, 0
  %7395 = zext i1 %7394 to i8
  %7396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7395, i8* %7396, align 1, !tbaa !2448
  %7397 = lshr i32 %7375, 31
  %7398 = trunc i32 %7397 to i8
  %7399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7398, i8* %7399, align 1, !tbaa !2449
  %7400 = lshr i32 %7372, 31
  %7401 = lshr i32 %7374, 31
  %7402 = xor i32 %7397, %7400
  %7403 = xor i32 %7397, %7401
  %7404 = add nuw nsw i32 %7402, %7403
  %7405 = icmp eq i32 %7404, 2
  %7406 = zext i1 %7405 to i8
  %7407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7406, i8* %7407, align 1, !tbaa !2450
  %7408 = load i32, i32* %EDX
  %7409 = zext i32 %7408 to i64
  %7410 = load i64, i64* %PC
  %7411 = add i64 %7410, 3
  store i64 %7411, i64* %PC
  %7412 = shl i64 %7409, 32
  %7413 = ashr exact i64 %7412, 32
  store i64 %7413, i64* %RCX, align 8, !tbaa !2428
  %7414 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7415 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7416 = load i64, i64* %RAX
  %7417 = load i64, i64* %RCX
  %7418 = mul i64 %7417, 4
  %7419 = add i64 %7418, %7416
  %7420 = load i64, i64* %PC
  %7421 = add i64 %7420, 5
  store i64 %7421, i64* %PC
  %7422 = bitcast i8* %7415 to <2 x float>*
  %7423 = load <2 x float>, <2 x float>* %7422, align 1
  %7424 = getelementptr inbounds i8, i8* %7415, i64 8
  %7425 = bitcast i8* %7424 to <2 x i32>*
  %7426 = load <2 x i32>, <2 x i32>* %7425, align 1
  %7427 = inttoptr i64 %7419 to float*
  %7428 = load float, float* %7427
  %7429 = extractelement <2 x float> %7423, i32 0
  %7430 = fmul float %7429, %7428
  %7431 = bitcast i8* %7414 to float*
  store float %7430, float* %7431, align 1, !tbaa !2452
  %7432 = bitcast <2 x float> %7423 to <2 x i32>
  %7433 = extractelement <2 x i32> %7432, i32 1
  %7434 = getelementptr inbounds i8, i8* %7414, i64 4
  %7435 = bitcast i8* %7434 to i32*
  store i32 %7433, i32* %7435, align 1, !tbaa !2452
  %7436 = extractelement <2 x i32> %7426, i32 0
  %7437 = getelementptr inbounds i8, i8* %7414, i64 8
  %7438 = bitcast i8* %7437 to i32*
  store i32 %7436, i32* %7438, align 1, !tbaa !2452
  %7439 = extractelement <2 x i32> %7426, i32 1
  %7440 = getelementptr inbounds i8, i8* %7414, i64 12
  %7441 = bitcast i8* %7440 to i32*
  store i32 %7439, i32* %7441, align 1, !tbaa !2452
  %7442 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7443 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7444 = bitcast %union.vec128_t* %XMM1 to i8*
  %7445 = load i64, i64* %PC
  %7446 = add i64 %7445, 4
  store i64 %7446, i64* %PC
  %7447 = bitcast i8* %7443 to <2 x float>*
  %7448 = load <2 x float>, <2 x float>* %7447, align 1
  %7449 = getelementptr inbounds i8, i8* %7443, i64 8
  %7450 = bitcast i8* %7449 to <2 x i32>*
  %7451 = load <2 x i32>, <2 x i32>* %7450, align 1
  %7452 = bitcast i8* %7444 to <2 x float>*
  %7453 = load <2 x float>, <2 x float>* %7452, align 1
  %7454 = extractelement <2 x float> %7448, i32 0
  %7455 = extractelement <2 x float> %7453, i32 0
  %7456 = fadd float %7454, %7455
  %7457 = bitcast i8* %7442 to float*
  store float %7456, float* %7457, align 1, !tbaa !2452
  %7458 = bitcast <2 x float> %7448 to <2 x i32>
  %7459 = extractelement <2 x i32> %7458, i32 1
  %7460 = getelementptr inbounds i8, i8* %7442, i64 4
  %7461 = bitcast i8* %7460 to i32*
  store i32 %7459, i32* %7461, align 1, !tbaa !2452
  %7462 = extractelement <2 x i32> %7451, i32 0
  %7463 = getelementptr inbounds i8, i8* %7442, i64 8
  %7464 = bitcast i8* %7463 to i32*
  store i32 %7462, i32* %7464, align 1, !tbaa !2452
  %7465 = extractelement <2 x i32> %7451, i32 1
  %7466 = getelementptr inbounds i8, i8* %7442, i64 12
  %7467 = bitcast i8* %7466 to i32*
  store i32 %7465, i32* %7467, align 1, !tbaa !2452
  %7468 = load i64, i64* %RBP
  %7469 = sub i64 %7468, 32
  %7470 = load i64, i64* %PC
  %7471 = add i64 %7470, 4
  store i64 %7471, i64* %PC
  %7472 = inttoptr i64 %7469 to i64*
  %7473 = load i64, i64* %7472
  store i64 %7473, i64* %RAX, align 8, !tbaa !2428
  %7474 = load i64, i64* %RBP
  %7475 = sub i64 %7474, 44
  %7476 = load i64, i64* %PC
  %7477 = add i64 %7476, 4
  store i64 %7477, i64* %PC
  %7478 = inttoptr i64 %7475 to i32*
  %7479 = load i32, i32* %7478
  %7480 = sext i32 %7479 to i64
  store i64 %7480, i64* %RCX, align 8, !tbaa !2428
  %7481 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7482 = load i64, i64* %RAX
  %7483 = load i64, i64* %RCX
  %7484 = mul i64 %7483, 4
  %7485 = add i64 %7484, %7482
  %7486 = load i64, i64* %PC
  %7487 = add i64 %7486, 5
  store i64 %7487, i64* %PC
  %7488 = inttoptr i64 %7485 to float*
  %7489 = load float, float* %7488
  %7490 = bitcast i8* %7481 to float*
  store float %7489, float* %7490, align 1, !tbaa !2452
  %7491 = getelementptr inbounds i8, i8* %7481, i64 4
  %7492 = bitcast i8* %7491 to float*
  store float 0.000000e+00, float* %7492, align 1, !tbaa !2452
  %7493 = getelementptr inbounds i8, i8* %7481, i64 8
  %7494 = bitcast i8* %7493 to float*
  store float 0.000000e+00, float* %7494, align 1, !tbaa !2452
  %7495 = getelementptr inbounds i8, i8* %7481, i64 12
  %7496 = bitcast i8* %7495 to float*
  store float 0.000000e+00, float* %7496, align 1, !tbaa !2452
  %7497 = load i64, i64* %RBP
  %7498 = sub i64 %7497, 40
  %7499 = load i64, i64* %PC
  %7500 = add i64 %7499, 4
  store i64 %7500, i64* %PC
  %7501 = inttoptr i64 %7498 to i64*
  %7502 = load i64, i64* %7501
  store i64 %7502, i64* %RAX, align 8, !tbaa !2428
  %7503 = load i64, i64* %RBP
  %7504 = sub i64 %7503, 24
  %7505 = load i64, i64* %PC
  %7506 = add i64 %7505, 3
  store i64 %7506, i64* %PC
  %7507 = inttoptr i64 %7504 to i32*
  %7508 = load i32, i32* %7507
  %7509 = zext i32 %7508 to i64
  store i64 %7509, i64* %RDX, align 8, !tbaa !2428
  %7510 = load i64, i64* %RDX
  %7511 = load i64, i64* %RBP
  %7512 = sub i64 %7511, 44
  %7513 = load i64, i64* %PC
  %7514 = add i64 %7513, 4
  store i64 %7514, i64* %PC
  %7515 = inttoptr i64 %7512 to i32*
  %7516 = load i32, i32* %7515
  %7517 = shl i64 %7510, 32
  %7518 = ashr exact i64 %7517, 32
  %7519 = sext i32 %7516 to i64
  %7520 = mul nsw i64 %7519, %7518
  %7521 = trunc i64 %7520 to i32
  %7522 = and i64 %7520, 4294967295
  store i64 %7522, i64* %RDX, align 8, !tbaa !2428
  %7523 = shl i64 %7520, 32
  %7524 = ashr exact i64 %7523, 32
  %7525 = icmp ne i64 %7524, %7520
  %7526 = zext i1 %7525 to i8
  %7527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7526, i8* %7527, align 1, !tbaa !2432
  %7528 = and i32 %7521, 255
  %7529 = call i32 @llvm.ctpop.i32(i32 %7528) #16
  %7530 = trunc i32 %7529 to i8
  %7531 = and i8 %7530, 1
  %7532 = xor i8 %7531, 1
  %7533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7532, i8* %7533, align 1, !tbaa !2446
  %7534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7534, align 1, !tbaa !2447
  %7535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7535, align 1, !tbaa !2448
  %7536 = lshr i32 %7521, 31
  %7537 = trunc i32 %7536 to i8
  %7538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7537, i8* %7538, align 1, !tbaa !2449
  %7539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7526, i8* %7539, align 1, !tbaa !2450
  %7540 = load i64, i64* %RDX
  %7541 = load i64, i64* %RBP
  %7542 = sub i64 %7541, 48
  %7543 = load i64, i64* %PC
  %7544 = add i64 %7543, 3
  store i64 %7544, i64* %PC
  %7545 = trunc i64 %7540 to i32
  %7546 = inttoptr i64 %7542 to i32*
  %7547 = load i32, i32* %7546
  %7548 = add i32 %7547, %7545
  %7549 = zext i32 %7548 to i64
  store i64 %7549, i64* %RDX, align 8, !tbaa !2428
  %7550 = icmp ult i32 %7548, %7545
  %7551 = icmp ult i32 %7548, %7547
  %7552 = or i1 %7550, %7551
  %7553 = zext i1 %7552 to i8
  %7554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7553, i8* %7554, align 1, !tbaa !2432
  %7555 = and i32 %7548, 255
  %7556 = call i32 @llvm.ctpop.i32(i32 %7555) #16
  %7557 = trunc i32 %7556 to i8
  %7558 = and i8 %7557, 1
  %7559 = xor i8 %7558, 1
  %7560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7559, i8* %7560, align 1, !tbaa !2446
  %7561 = xor i32 %7547, %7545
  %7562 = xor i32 %7561, %7548
  %7563 = lshr i32 %7562, 4
  %7564 = trunc i32 %7563 to i8
  %7565 = and i8 %7564, 1
  %7566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7565, i8* %7566, align 1, !tbaa !2447
  %7567 = icmp eq i32 %7548, 0
  %7568 = zext i1 %7567 to i8
  %7569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7568, i8* %7569, align 1, !tbaa !2448
  %7570 = lshr i32 %7548, 31
  %7571 = trunc i32 %7570 to i8
  %7572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7571, i8* %7572, align 1, !tbaa !2449
  %7573 = lshr i32 %7545, 31
  %7574 = lshr i32 %7547, 31
  %7575 = xor i32 %7570, %7573
  %7576 = xor i32 %7570, %7574
  %7577 = add nuw nsw i32 %7575, %7576
  %7578 = icmp eq i32 %7577, 2
  %7579 = zext i1 %7578 to i8
  %7580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7579, i8* %7580, align 1, !tbaa !2450
  %7581 = load i32, i32* %EDX
  %7582 = zext i32 %7581 to i64
  %7583 = load i64, i64* %PC
  %7584 = add i64 %7583, 3
  store i64 %7584, i64* %PC
  %7585 = shl i64 %7582, 32
  %7586 = ashr exact i64 %7585, 32
  store i64 %7586, i64* %RCX, align 8, !tbaa !2428
  %7587 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7588 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7589 = load i64, i64* %RAX
  %7590 = load i64, i64* %RCX
  %7591 = mul i64 %7590, 4
  %7592 = add i64 %7591, %7589
  %7593 = load i64, i64* %PC
  %7594 = add i64 %7593, 5
  store i64 %7594, i64* %PC
  %7595 = bitcast i8* %7588 to <2 x float>*
  %7596 = load <2 x float>, <2 x float>* %7595, align 1
  %7597 = getelementptr inbounds i8, i8* %7588, i64 8
  %7598 = bitcast i8* %7597 to <2 x i32>*
  %7599 = load <2 x i32>, <2 x i32>* %7598, align 1
  %7600 = inttoptr i64 %7592 to float*
  %7601 = load float, float* %7600
  %7602 = extractelement <2 x float> %7596, i32 0
  %7603 = fmul float %7602, %7601
  %7604 = bitcast i8* %7587 to float*
  store float %7603, float* %7604, align 1, !tbaa !2452
  %7605 = bitcast <2 x float> %7596 to <2 x i32>
  %7606 = extractelement <2 x i32> %7605, i32 1
  %7607 = getelementptr inbounds i8, i8* %7587, i64 4
  %7608 = bitcast i8* %7607 to i32*
  store i32 %7606, i32* %7608, align 1, !tbaa !2452
  %7609 = extractelement <2 x i32> %7599, i32 0
  %7610 = getelementptr inbounds i8, i8* %7587, i64 8
  %7611 = bitcast i8* %7610 to i32*
  store i32 %7609, i32* %7611, align 1, !tbaa !2452
  %7612 = extractelement <2 x i32> %7599, i32 1
  %7613 = getelementptr inbounds i8, i8* %7587, i64 12
  %7614 = bitcast i8* %7613 to i32*
  store i32 %7612, i32* %7614, align 1, !tbaa !2452
  %7615 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7616 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7617 = bitcast %union.vec128_t* %XMM1 to i8*
  %7618 = load i64, i64* %PC
  %7619 = add i64 %7618, 4
  store i64 %7619, i64* %PC
  %7620 = bitcast i8* %7616 to <2 x float>*
  %7621 = load <2 x float>, <2 x float>* %7620, align 1
  %7622 = getelementptr inbounds i8, i8* %7616, i64 8
  %7623 = bitcast i8* %7622 to <2 x i32>*
  %7624 = load <2 x i32>, <2 x i32>* %7623, align 1
  %7625 = bitcast i8* %7617 to <2 x float>*
  %7626 = load <2 x float>, <2 x float>* %7625, align 1
  %7627 = extractelement <2 x float> %7621, i32 0
  %7628 = extractelement <2 x float> %7626, i32 0
  %7629 = fadd float %7627, %7628
  %7630 = bitcast i8* %7615 to float*
  store float %7629, float* %7630, align 1, !tbaa !2452
  %7631 = bitcast <2 x float> %7621 to <2 x i32>
  %7632 = extractelement <2 x i32> %7631, i32 1
  %7633 = getelementptr inbounds i8, i8* %7615, i64 4
  %7634 = bitcast i8* %7633 to i32*
  store i32 %7632, i32* %7634, align 1, !tbaa !2452
  %7635 = extractelement <2 x i32> %7624, i32 0
  %7636 = getelementptr inbounds i8, i8* %7615, i64 8
  %7637 = bitcast i8* %7636 to i32*
  store i32 %7635, i32* %7637, align 1, !tbaa !2452
  %7638 = extractelement <2 x i32> %7624, i32 1
  %7639 = getelementptr inbounds i8, i8* %7615, i64 12
  %7640 = bitcast i8* %7639 to i32*
  store i32 %7638, i32* %7640, align 1, !tbaa !2452
  %7641 = load i64, i64* %RBP
  %7642 = sub i64 %7641, 16
  %7643 = load i64, i64* %PC
  %7644 = add i64 %7643, 4
  store i64 %7644, i64* %PC
  %7645 = inttoptr i64 %7642 to i64*
  %7646 = load i64, i64* %7645
  store i64 %7646, i64* %RAX, align 8, !tbaa !2428
  %7647 = load i64, i64* %RBP
  %7648 = sub i64 %7647, 48
  %7649 = load i64, i64* %PC
  %7650 = add i64 %7649, 4
  store i64 %7650, i64* %PC
  %7651 = inttoptr i64 %7648 to i32*
  %7652 = load i32, i32* %7651
  %7653 = sext i32 %7652 to i64
  store i64 %7653, i64* %RCX, align 8, !tbaa !2428
  %7654 = load i64, i64* %RAX
  %7655 = load i64, i64* %RCX
  %7656 = mul i64 %7655, 4
  %7657 = add i64 %7656, %7654
  %7658 = bitcast %union.vec128_t* %XMM0 to i8*
  %7659 = load i64, i64* %PC
  %7660 = add i64 %7659, 5
  store i64 %7660, i64* %PC
  %7661 = bitcast i8* %7658 to <2 x float>*
  %7662 = load <2 x float>, <2 x float>* %7661, align 1
  %7663 = extractelement <2 x float> %7662, i32 0
  %7664 = inttoptr i64 %7657 to float*
  store float %7663, float* %7664
  %7665 = load i64, i64* %RBP
  %7666 = sub i64 %7665, 48
  %7667 = load i64, i64* %PC
  %7668 = add i64 %7667, 3
  store i64 %7668, i64* %PC
  %7669 = inttoptr i64 %7666 to i32*
  %7670 = load i32, i32* %7669
  %7671 = zext i32 %7670 to i64
  store i64 %7671, i64* %RAX, align 8, !tbaa !2428
  %7672 = load i64, i64* %RAX
  %7673 = load i64, i64* %PC
  %7674 = add i64 %7673, 3
  store i64 %7674, i64* %PC
  %7675 = trunc i64 %7672 to i32
  %7676 = add i32 1, %7675
  %7677 = zext i32 %7676 to i64
  store i64 %7677, i64* %RAX, align 8, !tbaa !2428
  %7678 = icmp ult i32 %7676, %7675
  %7679 = icmp ult i32 %7676, 1
  %7680 = or i1 %7678, %7679
  %7681 = zext i1 %7680 to i8
  %7682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7681, i8* %7682, align 1, !tbaa !2432
  %7683 = and i32 %7676, 255
  %7684 = call i32 @llvm.ctpop.i32(i32 %7683) #16
  %7685 = trunc i32 %7684 to i8
  %7686 = and i8 %7685, 1
  %7687 = xor i8 %7686, 1
  %7688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7687, i8* %7688, align 1, !tbaa !2446
  %7689 = xor i64 1, %7672
  %7690 = trunc i64 %7689 to i32
  %7691 = xor i32 %7690, %7676
  %7692 = lshr i32 %7691, 4
  %7693 = trunc i32 %7692 to i8
  %7694 = and i8 %7693, 1
  %7695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7694, i8* %7695, align 1, !tbaa !2447
  %7696 = icmp eq i32 %7676, 0
  %7697 = zext i1 %7696 to i8
  %7698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7697, i8* %7698, align 1, !tbaa !2448
  %7699 = lshr i32 %7676, 31
  %7700 = trunc i32 %7699 to i8
  %7701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7700, i8* %7701, align 1, !tbaa !2449
  %7702 = lshr i32 %7675, 31
  %7703 = xor i32 %7699, %7702
  %7704 = add nuw nsw i32 %7703, %7699
  %7705 = icmp eq i32 %7704, 2
  %7706 = zext i1 %7705 to i8
  %7707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7706, i8* %7707, align 1, !tbaa !2450
  %7708 = load i64, i64* %RBP
  %7709 = sub i64 %7708, 48
  %7710 = load i32, i32* %EAX
  %7711 = zext i32 %7710 to i64
  %7712 = load i64, i64* %PC
  %7713 = add i64 %7712, 3
  store i64 %7713, i64* %PC
  %7714 = inttoptr i64 %7709 to i32*
  store i32 %7710, i32* %7714
  %7715 = load i64, i64* %PC
  %7716 = sub i64 %7715, 429
  %7717 = load i64, i64* %PC
  %7718 = add i64 %7717, 5
  store i64 %7718, i64* %PC
  %7719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7716, i64* %7719, align 8, !tbaa !2428
  br label %block_40226d

block_40213a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %7720 = load i64, i64* %RBP
  %7721 = sub i64 %7720, 44
  %7722 = load i64, i64* %PC
  %7723 = add i64 %7722, 3
  store i64 %7723, i64* %PC
  %7724 = inttoptr i64 %7721 to i32*
  %7725 = load i32, i32* %7724
  %7726 = zext i32 %7725 to i64
  store i64 %7726, i64* %RAX, align 8, !tbaa !2428
  %7727 = load i64, i64* %RAX
  %7728 = load i64, i64* %PC
  %7729 = add i64 %7728, 3
  store i64 %7729, i64* %PC
  %7730 = trunc i64 %7727 to i32
  %7731 = sub i32 %7730, 1
  %7732 = zext i32 %7731 to i64
  store i64 %7732, i64* %RAX, align 8, !tbaa !2428
  %7733 = icmp ult i32 %7730, 1
  %7734 = zext i1 %7733 to i8
  %7735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7734, i8* %7735, align 1, !tbaa !2432
  %7736 = and i32 %7731, 255
  %7737 = call i32 @llvm.ctpop.i32(i32 %7736) #16
  %7738 = trunc i32 %7737 to i8
  %7739 = and i8 %7738, 1
  %7740 = xor i8 %7739, 1
  %7741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7740, i8* %7741, align 1, !tbaa !2446
  %7742 = xor i64 1, %7727
  %7743 = trunc i64 %7742 to i32
  %7744 = xor i32 %7743, %7731
  %7745 = lshr i32 %7744, 4
  %7746 = trunc i32 %7745 to i8
  %7747 = and i8 %7746, 1
  %7748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7747, i8* %7748, align 1, !tbaa !2447
  %7749 = icmp eq i32 %7731, 0
  %7750 = zext i1 %7749 to i8
  %7751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7750, i8* %7751, align 1, !tbaa !2448
  %7752 = lshr i32 %7731, 31
  %7753 = trunc i32 %7752 to i8
  %7754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7753, i8* %7754, align 1, !tbaa !2449
  %7755 = lshr i32 %7730, 31
  %7756 = xor i32 %7752, %7755
  %7757 = add nuw nsw i32 %7756, %7755
  %7758 = icmp eq i32 %7757, 2
  %7759 = zext i1 %7758 to i8
  %7760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7759, i8* %7760, align 1, !tbaa !2450
  %7761 = load i64, i64* %RBP
  %7762 = sub i64 %7761, 44
  %7763 = load i32, i32* %EAX
  %7764 = zext i32 %7763 to i64
  %7765 = load i64, i64* %PC
  %7766 = add i64 %7765, 3
  store i64 %7766, i64* %PC
  %7767 = inttoptr i64 %7762 to i32*
  store i32 %7763, i32* %7767
  %7768 = load i64, i64* %RBP
  %7769 = sub i64 %7768, 48
  %7770 = load i64, i64* %PC
  %7771 = add i64 %7770, 7
  store i64 %7771, i64* %PC
  %7772 = inttoptr i64 %7769 to i32*
  store i32 0, i32* %7772
  br label %block_40214a

block_402238:                                     ; preds = %block_40214a
  %7773 = load i64, i64* %PC
  %7774 = add i64 %7773, 5
  %7775 = load i64, i64* %PC
  %7776 = add i64 %7775, 5
  store i64 %7776, i64* %PC
  %7777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7774, i64* %7777, align 8, !tbaa !2428
  br label %block_40223d

block_4027a6:                                     ; preds = %block_402446
  %7778 = load i64, i64* %PC
  %7779 = add i64 %7778, 1
  store i64 %7779, i64* %PC
  %7780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7781 = load i64, i64* %7780, align 8, !tbaa !2428
  %7782 = add i64 %7781, 8
  %7783 = inttoptr i64 %7781 to i64*
  %7784 = load i64, i64* %7783
  store i64 %7784, i64* %RBP, align 8, !tbaa !2428
  store i64 %7782, i64* %7780, align 8, !tbaa !2428
  %7785 = load i64, i64* %PC
  %7786 = add i64 %7785, 1
  store i64 %7786, i64* %PC
  %7787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7789 = load i64, i64* %7788, align 8, !tbaa !2428
  %7790 = inttoptr i64 %7789 to i64*
  %7791 = load i64, i64* %7790
  store i64 %7791, i64* %7787, align 8, !tbaa !2428
  %7792 = add i64 %7789, 8
  store i64 %7792, i64* %7788, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.7

block_402115:                                     ; preds = %block_402089
  %7793 = load i64, i64* %PC
  %7794 = add i64 %7793, 5
  %7795 = load i64, i64* %PC
  %7796 = add i64 %7795, 5
  store i64 %7796, i64* %PC
  %7797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7794, i64* %7797, align 8, !tbaa !2428
  br label %block_40211a

block_402424:                                     ; preds = %block_40241f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %MEMORY.3 = phi %struct.Memory* [ %5608, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ], [ %MEMORY.0, %block_40241f ]
  %7798 = load i64, i64* %PC
  %7799 = add i64 %7798, 5
  store i64 %7799, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %7800 = load i64, i64* %RBP
  %7801 = sub i64 %7800, 20
  %7802 = load i64, i64* %PC
  %7803 = add i64 %7802, 3
  store i64 %7803, i64* %PC
  %7804 = inttoptr i64 %7801 to i32*
  %7805 = load i32, i32* %7804
  %7806 = zext i32 %7805 to i64
  store i64 %7806, i64* %RCX, align 8, !tbaa !2428
  %7807 = load i64, i64* %RBP
  %7808 = sub i64 %7807, 72
  %7809 = load i32, i32* %EAX
  %7810 = zext i32 %7809 to i64
  %7811 = load i64, i64* %PC
  %7812 = add i64 %7811, 3
  store i64 %7812, i64* %PC
  %7813 = inttoptr i64 %7808 to i32*
  store i32 %7809, i32* %7813
  %7814 = load i32, i32* %ECX
  %7815 = zext i32 %7814 to i64
  %7816 = load i64, i64* %PC
  %7817 = add i64 %7816, 2
  store i64 %7817, i64* %PC
  %7818 = and i64 %7815, 4294967295
  store i64 %7818, i64* %RAX, align 8, !tbaa !2428
  %7819 = load i64, i64* %PC
  %7820 = add i64 %7819, 1
  store i64 %7820, i64* %PC
  %7821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %7822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7823 = bitcast %union.anon* %7822 to i32*
  %7824 = load i32, i32* %7823, align 8, !tbaa !2456
  %7825 = sext i32 %7824 to i64
  %7826 = lshr i64 %7825, 32
  store i64 %7826, i64* %7821, align 8, !tbaa !2428
  %7827 = load i64, i64* %RBP
  %7828 = sub i64 %7827, 72
  %7829 = load i64, i64* %PC
  %7830 = add i64 %7829, 3
  store i64 %7830, i64* %PC
  %7831 = inttoptr i64 %7828 to i32*
  %7832 = load i32, i32* %7831
  %7833 = zext i32 %7832 to i64
  store i64 %7833, i64* %RCX, align 8, !tbaa !2428
  %7834 = load i32, i32* %ECX
  %7835 = zext i32 %7834 to i64
  %7836 = load i64, i64* %PC
  %7837 = add i64 %7836, 2
  store i64 %7837, i64* %PC
  %7838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7839 = bitcast %union.anon* %7838 to i32*
  %7840 = load i32, i32* %7839, align 8, !tbaa !2456
  %7841 = zext i32 %7840 to i64
  %7842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %7843 = bitcast %union.anon* %7842 to i32*
  %7844 = load i32, i32* %7843, align 8, !tbaa !2456
  %7845 = zext i32 %7844 to i64
  %7846 = shl i64 %7835, 32
  %7847 = ashr exact i64 %7846, 32
  %7848 = shl nuw i64 %7845, 32
  %7849 = or i64 %7848, %7841
  %7850 = sdiv i64 %7849, %7847
  %7851 = shl i64 %7850, 32
  %7852 = ashr exact i64 %7851, 32
  %7853 = icmp eq i64 %7850, %7852
  br i1 %7853, label %7858, label %7854

; <label>:7854:                                   ; preds = %block_402424
  %7855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7856 = load i64, i64* %7855, align 8, !tbaa !2428
  %7857 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7856, %struct.Memory* %MEMORY.3) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:7858:                                   ; preds = %block_402424
  %7859 = srem i64 %7849, %7847
  %7860 = getelementptr inbounds %union.anon, %union.anon* %7838, i64 0, i32 0
  %7861 = and i64 %7850, 4294967295
  store i64 %7861, i64* %7860, align 8, !tbaa !2428
  %7862 = getelementptr inbounds %union.anon, %union.anon* %7842, i64 0, i32 0
  %7863 = and i64 %7859, 4294967295
  store i64 %7863, i64* %7862, align 8, !tbaa !2428
  %7864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7864, align 1, !tbaa !2432
  %7865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %7865, align 1, !tbaa !2446
  %7866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7866, align 1, !tbaa !2447
  %7867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7867, align 1, !tbaa !2448
  %7868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7868, align 1, !tbaa !2449
  %7869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7869, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %7854, %7858
  %7870 = phi %struct.Memory* [ %7857, %7854 ], [ %MEMORY.3, %7858 ]
  %7871 = load i64, i64* %RDX
  %7872 = load i64, i64* %PC
  %7873 = add i64 %7872, 3
  store i64 %7873, i64* %PC
  %7874 = trunc i64 %7871 to i32
  %7875 = add i32 16, %7874
  %7876 = zext i32 %7875 to i64
  store i64 %7876, i64* %RDX, align 8, !tbaa !2428
  %7877 = icmp ult i32 %7875, %7874
  %7878 = icmp ult i32 %7875, 16
  %7879 = or i1 %7877, %7878
  %7880 = zext i1 %7879 to i8
  %7881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7880, i8* %7881, align 1, !tbaa !2432
  %7882 = and i32 %7875, 255
  %7883 = call i32 @llvm.ctpop.i32(i32 %7882) #16
  %7884 = trunc i32 %7883 to i8
  %7885 = and i8 %7884, 1
  %7886 = xor i8 %7885, 1
  %7887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7886, i8* %7887, align 1, !tbaa !2446
  %7888 = xor i64 16, %7871
  %7889 = trunc i64 %7888 to i32
  %7890 = xor i32 %7889, %7875
  %7891 = lshr i32 %7890, 4
  %7892 = trunc i32 %7891 to i8
  %7893 = and i8 %7892, 1
  %7894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7893, i8* %7894, align 1, !tbaa !2447
  %7895 = icmp eq i32 %7875, 0
  %7896 = zext i1 %7895 to i8
  %7897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7896, i8* %7897, align 1, !tbaa !2448
  %7898 = lshr i32 %7875, 31
  %7899 = trunc i32 %7898 to i8
  %7900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7899, i8* %7900, align 1, !tbaa !2449
  %7901 = lshr i32 %7874, 31
  %7902 = xor i32 %7898, %7901
  %7903 = add nuw nsw i32 %7902, %7898
  %7904 = icmp eq i32 %7903, 2
  %7905 = zext i1 %7904 to i8
  %7906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7905, i8* %7906, align 1, !tbaa !2450
  %7907 = load i64, i64* %RBP
  %7908 = sub i64 %7907, 52
  %7909 = load i32, i32* %EDX
  %7910 = zext i32 %7909 to i64
  %7911 = load i64, i64* %PC
  %7912 = add i64 %7911, 3
  store i64 %7912, i64* %PC
  %7913 = inttoptr i64 %7908 to i32*
  store i32 %7909, i32* %7913
  %7914 = load i64, i64* %RBP
  %7915 = sub i64 %7914, 52
  %7916 = load i64, i64* %PC
  %7917 = add i64 %7916, 3
  store i64 %7917, i64* %PC
  %7918 = inttoptr i64 %7915 to i32*
  %7919 = load i32, i32* %7918
  %7920 = zext i32 %7919 to i64
  store i64 %7920, i64* %RDX, align 8, !tbaa !2428
  %7921 = load i64, i64* %RDX
  %7922 = load i64, i64* %PC
  %7923 = add i64 %7922, 3
  store i64 %7923, i64* %PC
  %7924 = trunc i64 %7921 to i32
  %7925 = sub i32 %7924, 1
  %7926 = zext i32 %7925 to i64
  store i64 %7926, i64* %RDX, align 8, !tbaa !2428
  %7927 = icmp ult i32 %7924, 1
  %7928 = zext i1 %7927 to i8
  %7929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7928, i8* %7929, align 1, !tbaa !2432
  %7930 = and i32 %7925, 255
  %7931 = call i32 @llvm.ctpop.i32(i32 %7930) #16
  %7932 = trunc i32 %7931 to i8
  %7933 = and i8 %7932, 1
  %7934 = xor i8 %7933, 1
  %7935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7934, i8* %7935, align 1, !tbaa !2446
  %7936 = xor i64 1, %7921
  %7937 = trunc i64 %7936 to i32
  %7938 = xor i32 %7937, %7925
  %7939 = lshr i32 %7938, 4
  %7940 = trunc i32 %7939 to i8
  %7941 = and i8 %7940, 1
  %7942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7941, i8* %7942, align 1, !tbaa !2447
  %7943 = icmp eq i32 %7925, 0
  %7944 = zext i1 %7943 to i8
  %7945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7944, i8* %7945, align 1, !tbaa !2448
  %7946 = lshr i32 %7925, 31
  %7947 = trunc i32 %7946 to i8
  %7948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7947, i8* %7948, align 1, !tbaa !2449
  %7949 = lshr i32 %7924, 31
  %7950 = xor i32 %7946, %7949
  %7951 = add nuw nsw i32 %7950, %7949
  %7952 = icmp eq i32 %7951, 2
  %7953 = zext i1 %7952 to i8
  %7954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7953, i8* %7954, align 1, !tbaa !2450
  %7955 = load i64, i64* %RBP
  %7956 = sub i64 %7955, 44
  %7957 = load i32, i32* %EDX
  %7958 = zext i32 %7957 to i64
  %7959 = load i64, i64* %PC
  %7960 = add i64 %7959, 3
  store i64 %7960, i64* %PC
  %7961 = inttoptr i64 %7956 to i32*
  store i32 %7957, i32* %7961
  br label %block_402446

block_402459:                                     ; preds = %block_402452, %block_402465
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.7, %block_402452 ], [ %MEMORY.4, %block_402465 ]
  %7962 = load i64, i64* %RBP
  %7963 = sub i64 %7962, 48
  %7964 = load i64, i64* %PC
  %7965 = add i64 %7964, 3
  store i64 %7965, i64* %PC
  %7966 = inttoptr i64 %7963 to i32*
  %7967 = load i32, i32* %7966
  %7968 = zext i32 %7967 to i64
  store i64 %7968, i64* %RAX, align 8, !tbaa !2428
  %7969 = load i32, i32* %EAX
  %7970 = zext i32 %7969 to i64
  %7971 = load i64, i64* %RBP
  %7972 = sub i64 %7971, 4
  %7973 = load i64, i64* %PC
  %7974 = add i64 %7973, 3
  store i64 %7974, i64* %PC
  %7975 = inttoptr i64 %7972 to i32*
  %7976 = load i32, i32* %7975
  %7977 = sub i32 %7969, %7976
  %7978 = icmp ult i32 %7969, %7976
  %7979 = zext i1 %7978 to i8
  %7980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7979, i8* %7980, align 1, !tbaa !2432
  %7981 = and i32 %7977, 255
  %7982 = call i32 @llvm.ctpop.i32(i32 %7981) #16
  %7983 = trunc i32 %7982 to i8
  %7984 = and i8 %7983, 1
  %7985 = xor i8 %7984, 1
  %7986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7985, i8* %7986, align 1, !tbaa !2446
  %7987 = xor i32 %7976, %7969
  %7988 = xor i32 %7987, %7977
  %7989 = lshr i32 %7988, 4
  %7990 = trunc i32 %7989 to i8
  %7991 = and i8 %7990, 1
  %7992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7991, i8* %7992, align 1, !tbaa !2447
  %7993 = icmp eq i32 %7977, 0
  %7994 = zext i1 %7993 to i8
  %7995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7994, i8* %7995, align 1, !tbaa !2448
  %7996 = lshr i32 %7977, 31
  %7997 = trunc i32 %7996 to i8
  %7998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7997, i8* %7998, align 1, !tbaa !2449
  %7999 = lshr i32 %7969, 31
  %8000 = lshr i32 %7976, 31
  %8001 = xor i32 %8000, %7999
  %8002 = xor i32 %7996, %7999
  %8003 = add nuw nsw i32 %8002, %8001
  %8004 = icmp eq i32 %8003, 2
  %8005 = zext i1 %8004 to i8
  %8006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8005, i8* %8006, align 1, !tbaa !2450
  %8007 = load i64, i64* %PC
  %8008 = add i64 %8007, 820
  %8009 = load i64, i64* %PC
  %8010 = add i64 %8009, 6
  %8011 = load i64, i64* %PC
  %8012 = add i64 %8011, 6
  store i64 %8012, i64* %PC
  %8013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8014 = load i8, i8* %8013, align 1, !tbaa !2449
  %8015 = icmp ne i8 %8014, 0
  %8016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8017 = load i8, i8* %8016, align 1, !tbaa !2450
  %8018 = icmp ne i8 %8017, 0
  %8019 = xor i1 %8015, %8018
  %8020 = xor i1 %8019, true
  %8021 = zext i1 %8020 to i8
  store i8 %8021, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8023 = select i1 %8019, i64 %8010, i64 %8008
  store i64 %8023, i64* %8022, align 8, !tbaa !2428
  %8024 = load i8, i8* %BRANCH_TAKEN
  %8025 = icmp eq i8 %8024, 1
  br i1 %8025, label %block_402793, label %block_402465

block_40214a:                                     ; preds = %block_40213a, %block_402156
  %MEMORY.5 = phi %struct.Memory* [ %9015, %block_40213a ], [ %MEMORY.5, %block_402156 ]
  %8026 = load i64, i64* %RBP
  %8027 = sub i64 %8026, 48
  %8028 = load i64, i64* %PC
  %8029 = add i64 %8028, 3
  store i64 %8029, i64* %PC
  %8030 = inttoptr i64 %8027 to i32*
  %8031 = load i32, i32* %8030
  %8032 = zext i32 %8031 to i64
  store i64 %8032, i64* %RAX, align 8, !tbaa !2428
  %8033 = load i32, i32* %EAX
  %8034 = zext i32 %8033 to i64
  %8035 = load i64, i64* %RBP
  %8036 = sub i64 %8035, 4
  %8037 = load i64, i64* %PC
  %8038 = add i64 %8037, 3
  store i64 %8038, i64* %PC
  %8039 = inttoptr i64 %8036 to i32*
  %8040 = load i32, i32* %8039
  %8041 = sub i32 %8033, %8040
  %8042 = icmp ult i32 %8033, %8040
  %8043 = zext i1 %8042 to i8
  %8044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8043, i8* %8044, align 1, !tbaa !2432
  %8045 = and i32 %8041, 255
  %8046 = call i32 @llvm.ctpop.i32(i32 %8045) #16
  %8047 = trunc i32 %8046 to i8
  %8048 = and i8 %8047, 1
  %8049 = xor i8 %8048, 1
  %8050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8049, i8* %8050, align 1, !tbaa !2446
  %8051 = xor i32 %8040, %8033
  %8052 = xor i32 %8051, %8041
  %8053 = lshr i32 %8052, 4
  %8054 = trunc i32 %8053 to i8
  %8055 = and i8 %8054, 1
  %8056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8055, i8* %8056, align 1, !tbaa !2447
  %8057 = icmp eq i32 %8041, 0
  %8058 = zext i1 %8057 to i8
  %8059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8058, i8* %8059, align 1, !tbaa !2448
  %8060 = lshr i32 %8041, 31
  %8061 = trunc i32 %8060 to i8
  %8062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8061, i8* %8062, align 1, !tbaa !2449
  %8063 = lshr i32 %8033, 31
  %8064 = lshr i32 %8040, 31
  %8065 = xor i32 %8064, %8063
  %8066 = xor i32 %8060, %8063
  %8067 = add nuw nsw i32 %8066, %8065
  %8068 = icmp eq i32 %8067, 2
  %8069 = zext i1 %8068 to i8
  %8070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8069, i8* %8070, align 1, !tbaa !2450
  %8071 = load i64, i64* %PC
  %8072 = add i64 %8071, 232
  %8073 = load i64, i64* %PC
  %8074 = add i64 %8073, 6
  %8075 = load i64, i64* %PC
  %8076 = add i64 %8075, 6
  store i64 %8076, i64* %PC
  %8077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8078 = load i8, i8* %8077, align 1, !tbaa !2449
  %8079 = icmp ne i8 %8078, 0
  %8080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8081 = load i8, i8* %8080, align 1, !tbaa !2450
  %8082 = icmp ne i8 %8081, 0
  %8083 = xor i1 %8079, %8082
  %8084 = xor i1 %8083, true
  %8085 = zext i1 %8084 to i8
  store i8 %8085, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8087 = select i1 %8083, i64 %8074, i64 %8072
  store i64 %8087, i64* %8086, align 8, !tbaa !2428
  %8088 = load i8, i8* %BRANCH_TAKEN
  %8089 = icmp eq i8 %8088, 1
  br i1 %8089, label %block_402238, label %block_402156

block_40241f:                                     ; preds = %block_40226d
  %8090 = load i64, i64* %PC
  %8091 = add i64 %8090, 5
  %8092 = load i64, i64* %PC
  %8093 = add i64 %8092, 5
  store i64 %8093, i64* %PC
  %8094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8091, i64* %8094, align 8, !tbaa !2428
  br label %block_402424

block_402059:                                     ; preds = %block_402054, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %MEMORY.6 = phi %struct.Memory* [ %174, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ], [ %MEMORY.1, %block_402054 ]
  %8095 = load i64, i64* %PC
  %8096 = add i64 %8095, 5
  store i64 %8096, i64* %PC
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %8097 = load i64, i64* %RBP
  %8098 = sub i64 %8097, 20
  %8099 = load i64, i64* %PC
  %8100 = add i64 %8099, 3
  store i64 %8100, i64* %PC
  %8101 = inttoptr i64 %8098 to i32*
  %8102 = load i32, i32* %8101
  %8103 = zext i32 %8102 to i64
  store i64 %8103, i64* %RCX, align 8, !tbaa !2428
  %8104 = load i64, i64* %RBP
  %8105 = sub i64 %8104, 60
  %8106 = load i32, i32* %EAX
  %8107 = zext i32 %8106 to i64
  %8108 = load i64, i64* %PC
  %8109 = add i64 %8108, 3
  store i64 %8109, i64* %PC
  %8110 = inttoptr i64 %8105 to i32*
  store i32 %8106, i32* %8110
  %8111 = load i32, i32* %ECX
  %8112 = zext i32 %8111 to i64
  %8113 = load i64, i64* %PC
  %8114 = add i64 %8113, 2
  store i64 %8114, i64* %PC
  %8115 = and i64 %8112, 4294967295
  store i64 %8115, i64* %RAX, align 8, !tbaa !2428
  %8116 = load i64, i64* %PC
  %8117 = add i64 %8116, 1
  store i64 %8117, i64* %PC
  %8118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8120 = bitcast %union.anon* %8119 to i32*
  %8121 = load i32, i32* %8120, align 8, !tbaa !2456
  %8122 = sext i32 %8121 to i64
  %8123 = lshr i64 %8122, 32
  store i64 %8123, i64* %8118, align 8, !tbaa !2428
  %8124 = load i64, i64* %RBP
  %8125 = sub i64 %8124, 60
  %8126 = load i64, i64* %PC
  %8127 = add i64 %8126, 3
  store i64 %8127, i64* %PC
  %8128 = inttoptr i64 %8125 to i32*
  %8129 = load i32, i32* %8128
  %8130 = zext i32 %8129 to i64
  store i64 %8130, i64* %RCX, align 8, !tbaa !2428
  %8131 = load i32, i32* %ECX
  %8132 = zext i32 %8131 to i64
  %8133 = load i64, i64* %PC
  %8134 = add i64 %8133, 2
  store i64 %8134, i64* %PC
  %8135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8136 = bitcast %union.anon* %8135 to i32*
  %8137 = load i32, i32* %8136, align 8, !tbaa !2456
  %8138 = zext i32 %8137 to i64
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %8140 = bitcast %union.anon* %8139 to i32*
  %8141 = load i32, i32* %8140, align 8, !tbaa !2456
  %8142 = zext i32 %8141 to i64
  %8143 = shl i64 %8132, 32
  %8144 = ashr exact i64 %8143, 32
  %8145 = shl nuw i64 %8142, 32
  %8146 = or i64 %8145, %8138
  %8147 = sdiv i64 %8146, %8144
  %8148 = shl i64 %8147, 32
  %8149 = ashr exact i64 %8148, 32
  %8150 = icmp eq i64 %8147, %8149
  br i1 %8150, label %8155, label %8151

; <label>:8151:                                   ; preds = %block_402059
  %8152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8153 = load i64, i64* %8152, align 8, !tbaa !2428
  %8154 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8153, %struct.Memory* %MEMORY.6) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:8155:                                   ; preds = %block_402059
  %8156 = srem i64 %8146, %8144
  %8157 = getelementptr inbounds %union.anon, %union.anon* %8135, i64 0, i32 0
  %8158 = and i64 %8147, 4294967295
  store i64 %8158, i64* %8157, align 8, !tbaa !2428
  %8159 = getelementptr inbounds %union.anon, %union.anon* %8139, i64 0, i32 0
  %8160 = and i64 %8156, 4294967295
  store i64 %8160, i64* %8159, align 8, !tbaa !2428
  %8161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8161, align 1, !tbaa !2432
  %8162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %8162, align 1, !tbaa !2446
  %8163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8163, align 1, !tbaa !2447
  %8164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8164, align 1, !tbaa !2448
  %8165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8165, align 1, !tbaa !2449
  %8166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8166, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %8151, %8155
  %8167 = phi %struct.Memory* [ %8154, %8151 ], [ %MEMORY.6, %8155 ]
  %8168 = load i64, i64* %RBP
  %8169 = sub i64 %8168, 44
  %8170 = load i32, i32* %EDX
  %8171 = zext i32 %8170 to i64
  %8172 = load i64, i64* %PC
  %8173 = add i64 %8172, 3
  store i64 %8173, i64* %PC
  %8174 = inttoptr i64 %8169 to i32*
  store i32 %8170, i32* %8174
  %8175 = load i64, i64* %RBP
  %8176 = sub i64 %8175, 44
  %8177 = load i64, i64* %PC
  %8178 = add i64 %8177, 4
  store i64 %8178, i64* %PC
  %8179 = inttoptr i64 %8176 to i32*
  %8180 = load i32, i32* %8179
  %8181 = sub i32 %8180, 2
  %8182 = icmp ult i32 %8180, 2
  %8183 = zext i1 %8182 to i8
  %8184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8183, i8* %8184, align 1, !tbaa !2432
  %8185 = and i32 %8181, 255
  %8186 = call i32 @llvm.ctpop.i32(i32 %8185) #16
  %8187 = trunc i32 %8186 to i8
  %8188 = and i8 %8187, 1
  %8189 = xor i8 %8188, 1
  %8190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8189, i8* %8190, align 1, !tbaa !2446
  %8191 = xor i32 %8180, 2
  %8192 = xor i32 %8191, %8181
  %8193 = lshr i32 %8192, 4
  %8194 = trunc i32 %8193 to i8
  %8195 = and i8 %8194, 1
  %8196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8195, i8* %8196, align 1, !tbaa !2447
  %8197 = icmp eq i32 %8181, 0
  %8198 = zext i1 %8197 to i8
  %8199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8198, i8* %8199, align 1, !tbaa !2448
  %8200 = lshr i32 %8181, 31
  %8201 = trunc i32 %8200 to i8
  %8202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8201, i8* %8202, align 1, !tbaa !2449
  %8203 = lshr i32 %8180, 31
  %8204 = xor i32 %8200, %8203
  %8205 = add nuw nsw i32 %8204, %8203
  %8206 = icmp eq i32 %8205, 2
  %8207 = zext i1 %8206 to i8
  %8208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8207, i8* %8208, align 1, !tbaa !2450
  %8209 = load i64, i64* %PC
  %8210 = add i64 %8209, 167
  %8211 = load i64, i64* %PC
  %8212 = add i64 %8211, 6
  %8213 = load i64, i64* %PC
  %8214 = add i64 %8213, 6
  store i64 %8214, i64* %PC
  %8215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8216 = load i8, i8* %8215, align 1, !tbaa !2449
  %8217 = icmp ne i8 %8216, 0
  %8218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8219 = load i8, i8* %8218, align 1, !tbaa !2450
  %8220 = icmp ne i8 %8219, 0
  %8221 = xor i1 %8217, %8220
  %8222 = zext i1 %8221 to i8
  store i8 %8222, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8224 = select i1 %8221, i64 %8210, i64 %8212
  store i64 %8224, i64* %8223, align 8, !tbaa !2428
  %8225 = load i8, i8* %BRANCH_TAKEN
  %8226 = icmp eq i8 %8225, 1
  br i1 %8226, label %block_40211a, label %block_402079

block_402452:                                     ; preds = %block_402446
  %8227 = load i64, i64* %RBP
  %8228 = sub i64 %8227, 48
  %8229 = load i64, i64* %PC
  %8230 = add i64 %8229, 7
  store i64 %8230, i64* %PC
  %8231 = inttoptr i64 %8228 to i32*
  store i32 0, i32* %8231
  br label %block_402459

block_402095:                                     ; preds = %block_402089
  %8232 = load i64, i64* %RBP
  %8233 = sub i64 %8232, 16
  %8234 = load i64, i64* %PC
  %8235 = add i64 %8234, 4
  store i64 %8235, i64* %PC
  %8236 = inttoptr i64 %8233 to i64*
  %8237 = load i64, i64* %8236
  store i64 %8237, i64* %RAX, align 8, !tbaa !2428
  %8238 = load i64, i64* %RBP
  %8239 = sub i64 %8238, 48
  %8240 = load i64, i64* %PC
  %8241 = add i64 %8240, 4
  store i64 %8241, i64* %PC
  %8242 = inttoptr i64 %8239 to i32*
  %8243 = load i32, i32* %8242
  %8244 = sext i32 %8243 to i64
  store i64 %8244, i64* %RCX, align 8, !tbaa !2428
  %8245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8246 = load i64, i64* %RAX
  %8247 = load i64, i64* %RCX
  %8248 = mul i64 %8247, 4
  %8249 = add i64 %8248, %8246
  %8250 = load i64, i64* %PC
  %8251 = add i64 %8250, 5
  store i64 %8251, i64* %PC
  %8252 = inttoptr i64 %8249 to float*
  %8253 = load float, float* %8252
  %8254 = bitcast i8* %8245 to float*
  store float %8253, float* %8254, align 1, !tbaa !2452
  %8255 = getelementptr inbounds i8, i8* %8245, i64 4
  %8256 = bitcast i8* %8255 to float*
  store float 0.000000e+00, float* %8256, align 1, !tbaa !2452
  %8257 = getelementptr inbounds i8, i8* %8245, i64 8
  %8258 = bitcast i8* %8257 to float*
  store float 0.000000e+00, float* %8258, align 1, !tbaa !2452
  %8259 = getelementptr inbounds i8, i8* %8245, i64 12
  %8260 = bitcast i8* %8259 to float*
  store float 0.000000e+00, float* %8260, align 1, !tbaa !2452
  %8261 = load i64, i64* %RBP
  %8262 = sub i64 %8261, 32
  %8263 = load i64, i64* %PC
  %8264 = add i64 %8263, 4
  store i64 %8264, i64* %PC
  %8265 = inttoptr i64 %8262 to i64*
  %8266 = load i64, i64* %8265
  store i64 %8266, i64* %RAX, align 8, !tbaa !2428
  %8267 = load i64, i64* %RBP
  %8268 = sub i64 %8267, 44
  %8269 = load i64, i64* %PC
  %8270 = add i64 %8269, 3
  store i64 %8270, i64* %PC
  %8271 = inttoptr i64 %8268 to i32*
  %8272 = load i32, i32* %8271
  %8273 = zext i32 %8272 to i64
  store i64 %8273, i64* %RDX, align 8, !tbaa !2428
  %8274 = load i64, i64* %RDX
  %8275 = load i64, i64* %PC
  %8276 = add i64 %8275, 3
  store i64 %8276, i64* %PC
  %8277 = trunc i64 %8274 to i32
  %8278 = sub i32 %8277, 1
  %8279 = zext i32 %8278 to i64
  store i64 %8279, i64* %RDX, align 8, !tbaa !2428
  %8280 = icmp ult i32 %8277, 1
  %8281 = zext i1 %8280 to i8
  %8282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8281, i8* %8282, align 1, !tbaa !2432
  %8283 = and i32 %8278, 255
  %8284 = call i32 @llvm.ctpop.i32(i32 %8283) #16
  %8285 = trunc i32 %8284 to i8
  %8286 = and i8 %8285, 1
  %8287 = xor i8 %8286, 1
  %8288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8287, i8* %8288, align 1, !tbaa !2446
  %8289 = xor i64 1, %8274
  %8290 = trunc i64 %8289 to i32
  %8291 = xor i32 %8290, %8278
  %8292 = lshr i32 %8291, 4
  %8293 = trunc i32 %8292 to i8
  %8294 = and i8 %8293, 1
  %8295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8294, i8* %8295, align 1, !tbaa !2447
  %8296 = icmp eq i32 %8278, 0
  %8297 = zext i1 %8296 to i8
  %8298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8297, i8* %8298, align 1, !tbaa !2448
  %8299 = lshr i32 %8278, 31
  %8300 = trunc i32 %8299 to i8
  %8301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8300, i8* %8301, align 1, !tbaa !2449
  %8302 = lshr i32 %8277, 31
  %8303 = xor i32 %8299, %8302
  %8304 = add nuw nsw i32 %8303, %8302
  %8305 = icmp eq i32 %8304, 2
  %8306 = zext i1 %8305 to i8
  %8307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8306, i8* %8307, align 1, !tbaa !2450
  %8308 = load i32, i32* %EDX
  %8309 = zext i32 %8308 to i64
  %8310 = load i64, i64* %PC
  %8311 = add i64 %8310, 3
  store i64 %8311, i64* %PC
  %8312 = shl i64 %8309, 32
  %8313 = ashr exact i64 %8312, 32
  store i64 %8313, i64* %RCX, align 8, !tbaa !2428
  %8314 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8315 = load i64, i64* %RAX
  %8316 = load i64, i64* %RCX
  %8317 = mul i64 %8316, 4
  %8318 = add i64 %8317, %8315
  %8319 = load i64, i64* %PC
  %8320 = add i64 %8319, 5
  store i64 %8320, i64* %PC
  %8321 = inttoptr i64 %8318 to float*
  %8322 = load float, float* %8321
  %8323 = bitcast i8* %8314 to float*
  store float %8322, float* %8323, align 1, !tbaa !2452
  %8324 = getelementptr inbounds i8, i8* %8314, i64 4
  %8325 = bitcast i8* %8324 to float*
  store float 0.000000e+00, float* %8325, align 1, !tbaa !2452
  %8326 = getelementptr inbounds i8, i8* %8314, i64 8
  %8327 = bitcast i8* %8326 to float*
  store float 0.000000e+00, float* %8327, align 1, !tbaa !2452
  %8328 = getelementptr inbounds i8, i8* %8314, i64 12
  %8329 = bitcast i8* %8328 to float*
  store float 0.000000e+00, float* %8329, align 1, !tbaa !2452
  %8330 = load i64, i64* %RBP
  %8331 = sub i64 %8330, 40
  %8332 = load i64, i64* %PC
  %8333 = add i64 %8332, 4
  store i64 %8333, i64* %PC
  %8334 = inttoptr i64 %8331 to i64*
  %8335 = load i64, i64* %8334
  store i64 %8335, i64* %RAX, align 8, !tbaa !2428
  %8336 = load i64, i64* %RBP
  %8337 = sub i64 %8336, 24
  %8338 = load i64, i64* %PC
  %8339 = add i64 %8338, 3
  store i64 %8339, i64* %PC
  %8340 = inttoptr i64 %8337 to i32*
  %8341 = load i32, i32* %8340
  %8342 = zext i32 %8341 to i64
  store i64 %8342, i64* %RDX, align 8, !tbaa !2428
  %8343 = load i64, i64* %RBP
  %8344 = sub i64 %8343, 44
  %8345 = load i64, i64* %PC
  %8346 = add i64 %8345, 3
  store i64 %8346, i64* %PC
  %8347 = inttoptr i64 %8344 to i32*
  %8348 = load i32, i32* %8347
  %8349 = zext i32 %8348 to i64
  store i64 %8349, i64* %RSI, align 8, !tbaa !2428
  %8350 = load i64, i64* %RSI
  %8351 = load i64, i64* %PC
  %8352 = add i64 %8351, 3
  store i64 %8352, i64* %PC
  %8353 = trunc i64 %8350 to i32
  %8354 = sub i32 %8353, 1
  %8355 = zext i32 %8354 to i64
  store i64 %8355, i64* %RSI, align 8, !tbaa !2428
  %8356 = icmp ult i32 %8353, 1
  %8357 = zext i1 %8356 to i8
  %8358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8357, i8* %8358, align 1, !tbaa !2432
  %8359 = and i32 %8354, 255
  %8360 = call i32 @llvm.ctpop.i32(i32 %8359) #16
  %8361 = trunc i32 %8360 to i8
  %8362 = and i8 %8361, 1
  %8363 = xor i8 %8362, 1
  %8364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8363, i8* %8364, align 1, !tbaa !2446
  %8365 = xor i64 1, %8350
  %8366 = trunc i64 %8365 to i32
  %8367 = xor i32 %8366, %8354
  %8368 = lshr i32 %8367, 4
  %8369 = trunc i32 %8368 to i8
  %8370 = and i8 %8369, 1
  %8371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8370, i8* %8371, align 1, !tbaa !2447
  %8372 = icmp eq i32 %8354, 0
  %8373 = zext i1 %8372 to i8
  %8374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8373, i8* %8374, align 1, !tbaa !2448
  %8375 = lshr i32 %8354, 31
  %8376 = trunc i32 %8375 to i8
  %8377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8376, i8* %8377, align 1, !tbaa !2449
  %8378 = lshr i32 %8353, 31
  %8379 = xor i32 %8375, %8378
  %8380 = add nuw nsw i32 %8379, %8378
  %8381 = icmp eq i32 %8380, 2
  %8382 = zext i1 %8381 to i8
  %8383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8382, i8* %8383, align 1, !tbaa !2450
  %8384 = load i64, i64* %RDX
  %8385 = load i32, i32* %ESI
  %8386 = zext i32 %8385 to i64
  %8387 = load i64, i64* %PC
  %8388 = add i64 %8387, 3
  store i64 %8388, i64* %PC
  %8389 = shl i64 %8384, 32
  %8390 = ashr exact i64 %8389, 32
  %8391 = shl i64 %8386, 32
  %8392 = ashr exact i64 %8391, 32
  %8393 = mul nsw i64 %8392, %8390
  %8394 = trunc i64 %8393 to i32
  %8395 = and i64 %8393, 4294967295
  store i64 %8395, i64* %RDX, align 8, !tbaa !2428
  %8396 = shl i64 %8393, 32
  %8397 = ashr exact i64 %8396, 32
  %8398 = icmp ne i64 %8397, %8393
  %8399 = zext i1 %8398 to i8
  %8400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8399, i8* %8400, align 1, !tbaa !2432
  %8401 = and i32 %8394, 255
  %8402 = call i32 @llvm.ctpop.i32(i32 %8401) #16
  %8403 = trunc i32 %8402 to i8
  %8404 = and i8 %8403, 1
  %8405 = xor i8 %8404, 1
  %8406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8405, i8* %8406, align 1, !tbaa !2446
  %8407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8407, align 1, !tbaa !2447
  %8408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8408, align 1, !tbaa !2448
  %8409 = lshr i32 %8394, 31
  %8410 = trunc i32 %8409 to i8
  %8411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8410, i8* %8411, align 1, !tbaa !2449
  %8412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8399, i8* %8412, align 1, !tbaa !2450
  %8413 = load i64, i64* %RDX
  %8414 = load i64, i64* %RBP
  %8415 = sub i64 %8414, 48
  %8416 = load i64, i64* %PC
  %8417 = add i64 %8416, 3
  store i64 %8417, i64* %PC
  %8418 = trunc i64 %8413 to i32
  %8419 = inttoptr i64 %8415 to i32*
  %8420 = load i32, i32* %8419
  %8421 = add i32 %8420, %8418
  %8422 = zext i32 %8421 to i64
  store i64 %8422, i64* %RDX, align 8, !tbaa !2428
  %8423 = icmp ult i32 %8421, %8418
  %8424 = icmp ult i32 %8421, %8420
  %8425 = or i1 %8423, %8424
  %8426 = zext i1 %8425 to i8
  %8427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8426, i8* %8427, align 1, !tbaa !2432
  %8428 = and i32 %8421, 255
  %8429 = call i32 @llvm.ctpop.i32(i32 %8428) #16
  %8430 = trunc i32 %8429 to i8
  %8431 = and i8 %8430, 1
  %8432 = xor i8 %8431, 1
  %8433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8432, i8* %8433, align 1, !tbaa !2446
  %8434 = xor i32 %8420, %8418
  %8435 = xor i32 %8434, %8421
  %8436 = lshr i32 %8435, 4
  %8437 = trunc i32 %8436 to i8
  %8438 = and i8 %8437, 1
  %8439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8438, i8* %8439, align 1, !tbaa !2447
  %8440 = icmp eq i32 %8421, 0
  %8441 = zext i1 %8440 to i8
  %8442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8441, i8* %8442, align 1, !tbaa !2448
  %8443 = lshr i32 %8421, 31
  %8444 = trunc i32 %8443 to i8
  %8445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8444, i8* %8445, align 1, !tbaa !2449
  %8446 = lshr i32 %8418, 31
  %8447 = lshr i32 %8420, 31
  %8448 = xor i32 %8443, %8446
  %8449 = xor i32 %8443, %8447
  %8450 = add nuw nsw i32 %8448, %8449
  %8451 = icmp eq i32 %8450, 2
  %8452 = zext i1 %8451 to i8
  %8453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8452, i8* %8453, align 1, !tbaa !2450
  %8454 = load i32, i32* %EDX
  %8455 = zext i32 %8454 to i64
  %8456 = load i64, i64* %PC
  %8457 = add i64 %8456, 3
  store i64 %8457, i64* %PC
  %8458 = shl i64 %8455, 32
  %8459 = ashr exact i64 %8458, 32
  store i64 %8459, i64* %RCX, align 8, !tbaa !2428
  %8460 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8462 = load i64, i64* %RAX
  %8463 = load i64, i64* %RCX
  %8464 = mul i64 %8463, 4
  %8465 = add i64 %8464, %8462
  %8466 = load i64, i64* %PC
  %8467 = add i64 %8466, 5
  store i64 %8467, i64* %PC
  %8468 = bitcast i8* %8461 to <2 x float>*
  %8469 = load <2 x float>, <2 x float>* %8468, align 1
  %8470 = getelementptr inbounds i8, i8* %8461, i64 8
  %8471 = bitcast i8* %8470 to <2 x i32>*
  %8472 = load <2 x i32>, <2 x i32>* %8471, align 1
  %8473 = inttoptr i64 %8465 to float*
  %8474 = load float, float* %8473
  %8475 = extractelement <2 x float> %8469, i32 0
  %8476 = fmul float %8475, %8474
  %8477 = bitcast i8* %8460 to float*
  store float %8476, float* %8477, align 1, !tbaa !2452
  %8478 = bitcast <2 x float> %8469 to <2 x i32>
  %8479 = extractelement <2 x i32> %8478, i32 1
  %8480 = getelementptr inbounds i8, i8* %8460, i64 4
  %8481 = bitcast i8* %8480 to i32*
  store i32 %8479, i32* %8481, align 1, !tbaa !2452
  %8482 = extractelement <2 x i32> %8472, i32 0
  %8483 = getelementptr inbounds i8, i8* %8460, i64 8
  %8484 = bitcast i8* %8483 to i32*
  store i32 %8482, i32* %8484, align 1, !tbaa !2452
  %8485 = extractelement <2 x i32> %8472, i32 1
  %8486 = getelementptr inbounds i8, i8* %8460, i64 12
  %8487 = bitcast i8* %8486 to i32*
  store i32 %8485, i32* %8487, align 1, !tbaa !2452
  %8488 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8489 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8490 = bitcast %union.vec128_t* %XMM1 to i8*
  %8491 = load i64, i64* %PC
  %8492 = add i64 %8491, 4
  store i64 %8492, i64* %PC
  %8493 = bitcast i8* %8489 to <2 x float>*
  %8494 = load <2 x float>, <2 x float>* %8493, align 1
  %8495 = getelementptr inbounds i8, i8* %8489, i64 8
  %8496 = bitcast i8* %8495 to <2 x i32>*
  %8497 = load <2 x i32>, <2 x i32>* %8496, align 1
  %8498 = bitcast i8* %8490 to <2 x float>*
  %8499 = load <2 x float>, <2 x float>* %8498, align 1
  %8500 = extractelement <2 x float> %8494, i32 0
  %8501 = extractelement <2 x float> %8499, i32 0
  %8502 = fadd float %8500, %8501
  %8503 = bitcast i8* %8488 to float*
  store float %8502, float* %8503, align 1, !tbaa !2452
  %8504 = bitcast <2 x float> %8494 to <2 x i32>
  %8505 = extractelement <2 x i32> %8504, i32 1
  %8506 = getelementptr inbounds i8, i8* %8488, i64 4
  %8507 = bitcast i8* %8506 to i32*
  store i32 %8505, i32* %8507, align 1, !tbaa !2452
  %8508 = extractelement <2 x i32> %8497, i32 0
  %8509 = getelementptr inbounds i8, i8* %8488, i64 8
  %8510 = bitcast i8* %8509 to i32*
  store i32 %8508, i32* %8510, align 1, !tbaa !2452
  %8511 = extractelement <2 x i32> %8497, i32 1
  %8512 = getelementptr inbounds i8, i8* %8488, i64 12
  %8513 = bitcast i8* %8512 to i32*
  store i32 %8511, i32* %8513, align 1, !tbaa !2452
  %8514 = load i64, i64* %RBP
  %8515 = sub i64 %8514, 32
  %8516 = load i64, i64* %PC
  %8517 = add i64 %8516, 4
  store i64 %8517, i64* %PC
  %8518 = inttoptr i64 %8515 to i64*
  %8519 = load i64, i64* %8518
  store i64 %8519, i64* %RAX, align 8, !tbaa !2428
  %8520 = load i64, i64* %RBP
  %8521 = sub i64 %8520, 44
  %8522 = load i64, i64* %PC
  %8523 = add i64 %8522, 4
  store i64 %8523, i64* %PC
  %8524 = inttoptr i64 %8521 to i32*
  %8525 = load i32, i32* %8524
  %8526 = sext i32 %8525 to i64
  store i64 %8526, i64* %RCX, align 8, !tbaa !2428
  %8527 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8528 = load i64, i64* %RAX
  %8529 = load i64, i64* %RCX
  %8530 = mul i64 %8529, 4
  %8531 = add i64 %8530, %8528
  %8532 = load i64, i64* %PC
  %8533 = add i64 %8532, 5
  store i64 %8533, i64* %PC
  %8534 = inttoptr i64 %8531 to float*
  %8535 = load float, float* %8534
  %8536 = bitcast i8* %8527 to float*
  store float %8535, float* %8536, align 1, !tbaa !2452
  %8537 = getelementptr inbounds i8, i8* %8527, i64 4
  %8538 = bitcast i8* %8537 to float*
  store float 0.000000e+00, float* %8538, align 1, !tbaa !2452
  %8539 = getelementptr inbounds i8, i8* %8527, i64 8
  %8540 = bitcast i8* %8539 to float*
  store float 0.000000e+00, float* %8540, align 1, !tbaa !2452
  %8541 = getelementptr inbounds i8, i8* %8527, i64 12
  %8542 = bitcast i8* %8541 to float*
  store float 0.000000e+00, float* %8542, align 1, !tbaa !2452
  %8543 = load i64, i64* %RBP
  %8544 = sub i64 %8543, 40
  %8545 = load i64, i64* %PC
  %8546 = add i64 %8545, 4
  store i64 %8546, i64* %PC
  %8547 = inttoptr i64 %8544 to i64*
  %8548 = load i64, i64* %8547
  store i64 %8548, i64* %RAX, align 8, !tbaa !2428
  %8549 = load i64, i64* %RBP
  %8550 = sub i64 %8549, 24
  %8551 = load i64, i64* %PC
  %8552 = add i64 %8551, 3
  store i64 %8552, i64* %PC
  %8553 = inttoptr i64 %8550 to i32*
  %8554 = load i32, i32* %8553
  %8555 = zext i32 %8554 to i64
  store i64 %8555, i64* %RDX, align 8, !tbaa !2428
  %8556 = load i64, i64* %RDX
  %8557 = load i64, i64* %RBP
  %8558 = sub i64 %8557, 44
  %8559 = load i64, i64* %PC
  %8560 = add i64 %8559, 4
  store i64 %8560, i64* %PC
  %8561 = inttoptr i64 %8558 to i32*
  %8562 = load i32, i32* %8561
  %8563 = shl i64 %8556, 32
  %8564 = ashr exact i64 %8563, 32
  %8565 = sext i32 %8562 to i64
  %8566 = mul nsw i64 %8565, %8564
  %8567 = trunc i64 %8566 to i32
  %8568 = and i64 %8566, 4294967295
  store i64 %8568, i64* %RDX, align 8, !tbaa !2428
  %8569 = shl i64 %8566, 32
  %8570 = ashr exact i64 %8569, 32
  %8571 = icmp ne i64 %8570, %8566
  %8572 = zext i1 %8571 to i8
  %8573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8572, i8* %8573, align 1, !tbaa !2432
  %8574 = and i32 %8567, 255
  %8575 = call i32 @llvm.ctpop.i32(i32 %8574) #16
  %8576 = trunc i32 %8575 to i8
  %8577 = and i8 %8576, 1
  %8578 = xor i8 %8577, 1
  %8579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8578, i8* %8579, align 1, !tbaa !2446
  %8580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8580, align 1, !tbaa !2447
  %8581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8581, align 1, !tbaa !2448
  %8582 = lshr i32 %8567, 31
  %8583 = trunc i32 %8582 to i8
  %8584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8583, i8* %8584, align 1, !tbaa !2449
  %8585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8572, i8* %8585, align 1, !tbaa !2450
  %8586 = load i64, i64* %RDX
  %8587 = load i64, i64* %RBP
  %8588 = sub i64 %8587, 48
  %8589 = load i64, i64* %PC
  %8590 = add i64 %8589, 3
  store i64 %8590, i64* %PC
  %8591 = trunc i64 %8586 to i32
  %8592 = inttoptr i64 %8588 to i32*
  %8593 = load i32, i32* %8592
  %8594 = add i32 %8593, %8591
  %8595 = zext i32 %8594 to i64
  store i64 %8595, i64* %RDX, align 8, !tbaa !2428
  %8596 = icmp ult i32 %8594, %8591
  %8597 = icmp ult i32 %8594, %8593
  %8598 = or i1 %8596, %8597
  %8599 = zext i1 %8598 to i8
  %8600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8599, i8* %8600, align 1, !tbaa !2432
  %8601 = and i32 %8594, 255
  %8602 = call i32 @llvm.ctpop.i32(i32 %8601) #16
  %8603 = trunc i32 %8602 to i8
  %8604 = and i8 %8603, 1
  %8605 = xor i8 %8604, 1
  %8606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8605, i8* %8606, align 1, !tbaa !2446
  %8607 = xor i32 %8593, %8591
  %8608 = xor i32 %8607, %8594
  %8609 = lshr i32 %8608, 4
  %8610 = trunc i32 %8609 to i8
  %8611 = and i8 %8610, 1
  %8612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8611, i8* %8612, align 1, !tbaa !2447
  %8613 = icmp eq i32 %8594, 0
  %8614 = zext i1 %8613 to i8
  %8615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8614, i8* %8615, align 1, !tbaa !2448
  %8616 = lshr i32 %8594, 31
  %8617 = trunc i32 %8616 to i8
  %8618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8617, i8* %8618, align 1, !tbaa !2449
  %8619 = lshr i32 %8591, 31
  %8620 = lshr i32 %8593, 31
  %8621 = xor i32 %8616, %8619
  %8622 = xor i32 %8616, %8620
  %8623 = add nuw nsw i32 %8621, %8622
  %8624 = icmp eq i32 %8623, 2
  %8625 = zext i1 %8624 to i8
  %8626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8625, i8* %8626, align 1, !tbaa !2450
  %8627 = load i32, i32* %EDX
  %8628 = zext i32 %8627 to i64
  %8629 = load i64, i64* %PC
  %8630 = add i64 %8629, 3
  store i64 %8630, i64* %PC
  %8631 = shl i64 %8628, 32
  %8632 = ashr exact i64 %8631, 32
  store i64 %8632, i64* %RCX, align 8, !tbaa !2428
  %8633 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8634 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8635 = load i64, i64* %RAX
  %8636 = load i64, i64* %RCX
  %8637 = mul i64 %8636, 4
  %8638 = add i64 %8637, %8635
  %8639 = load i64, i64* %PC
  %8640 = add i64 %8639, 5
  store i64 %8640, i64* %PC
  %8641 = bitcast i8* %8634 to <2 x float>*
  %8642 = load <2 x float>, <2 x float>* %8641, align 1
  %8643 = getelementptr inbounds i8, i8* %8634, i64 8
  %8644 = bitcast i8* %8643 to <2 x i32>*
  %8645 = load <2 x i32>, <2 x i32>* %8644, align 1
  %8646 = inttoptr i64 %8638 to float*
  %8647 = load float, float* %8646
  %8648 = extractelement <2 x float> %8642, i32 0
  %8649 = fmul float %8648, %8647
  %8650 = bitcast i8* %8633 to float*
  store float %8649, float* %8650, align 1, !tbaa !2452
  %8651 = bitcast <2 x float> %8642 to <2 x i32>
  %8652 = extractelement <2 x i32> %8651, i32 1
  %8653 = getelementptr inbounds i8, i8* %8633, i64 4
  %8654 = bitcast i8* %8653 to i32*
  store i32 %8652, i32* %8654, align 1, !tbaa !2452
  %8655 = extractelement <2 x i32> %8645, i32 0
  %8656 = getelementptr inbounds i8, i8* %8633, i64 8
  %8657 = bitcast i8* %8656 to i32*
  store i32 %8655, i32* %8657, align 1, !tbaa !2452
  %8658 = extractelement <2 x i32> %8645, i32 1
  %8659 = getelementptr inbounds i8, i8* %8633, i64 12
  %8660 = bitcast i8* %8659 to i32*
  store i32 %8658, i32* %8660, align 1, !tbaa !2452
  %8661 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8662 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8663 = bitcast %union.vec128_t* %XMM1 to i8*
  %8664 = load i64, i64* %PC
  %8665 = add i64 %8664, 4
  store i64 %8665, i64* %PC
  %8666 = bitcast i8* %8662 to <2 x float>*
  %8667 = load <2 x float>, <2 x float>* %8666, align 1
  %8668 = getelementptr inbounds i8, i8* %8662, i64 8
  %8669 = bitcast i8* %8668 to <2 x i32>*
  %8670 = load <2 x i32>, <2 x i32>* %8669, align 1
  %8671 = bitcast i8* %8663 to <2 x float>*
  %8672 = load <2 x float>, <2 x float>* %8671, align 1
  %8673 = extractelement <2 x float> %8667, i32 0
  %8674 = extractelement <2 x float> %8672, i32 0
  %8675 = fadd float %8673, %8674
  %8676 = bitcast i8* %8661 to float*
  store float %8675, float* %8676, align 1, !tbaa !2452
  %8677 = bitcast <2 x float> %8667 to <2 x i32>
  %8678 = extractelement <2 x i32> %8677, i32 1
  %8679 = getelementptr inbounds i8, i8* %8661, i64 4
  %8680 = bitcast i8* %8679 to i32*
  store i32 %8678, i32* %8680, align 1, !tbaa !2452
  %8681 = extractelement <2 x i32> %8670, i32 0
  %8682 = getelementptr inbounds i8, i8* %8661, i64 8
  %8683 = bitcast i8* %8682 to i32*
  store i32 %8681, i32* %8683, align 1, !tbaa !2452
  %8684 = extractelement <2 x i32> %8670, i32 1
  %8685 = getelementptr inbounds i8, i8* %8661, i64 12
  %8686 = bitcast i8* %8685 to i32*
  store i32 %8684, i32* %8686, align 1, !tbaa !2452
  %8687 = load i64, i64* %RBP
  %8688 = sub i64 %8687, 16
  %8689 = load i64, i64* %PC
  %8690 = add i64 %8689, 4
  store i64 %8690, i64* %PC
  %8691 = inttoptr i64 %8688 to i64*
  %8692 = load i64, i64* %8691
  store i64 %8692, i64* %RAX, align 8, !tbaa !2428
  %8693 = load i64, i64* %RBP
  %8694 = sub i64 %8693, 48
  %8695 = load i64, i64* %PC
  %8696 = add i64 %8695, 4
  store i64 %8696, i64* %PC
  %8697 = inttoptr i64 %8694 to i32*
  %8698 = load i32, i32* %8697
  %8699 = sext i32 %8698 to i64
  store i64 %8699, i64* %RCX, align 8, !tbaa !2428
  %8700 = load i64, i64* %RAX
  %8701 = load i64, i64* %RCX
  %8702 = mul i64 %8701, 4
  %8703 = add i64 %8702, %8700
  %8704 = bitcast %union.vec128_t* %XMM0 to i8*
  %8705 = load i64, i64* %PC
  %8706 = add i64 %8705, 5
  store i64 %8706, i64* %PC
  %8707 = bitcast i8* %8704 to <2 x float>*
  %8708 = load <2 x float>, <2 x float>* %8707, align 1
  %8709 = extractelement <2 x float> %8708, i32 0
  %8710 = inttoptr i64 %8703 to float*
  store float %8709, float* %8710
  %8711 = load i64, i64* %RBP
  %8712 = sub i64 %8711, 48
  %8713 = load i64, i64* %PC
  %8714 = add i64 %8713, 3
  store i64 %8714, i64* %PC
  %8715 = inttoptr i64 %8712 to i32*
  %8716 = load i32, i32* %8715
  %8717 = zext i32 %8716 to i64
  store i64 %8717, i64* %RAX, align 8, !tbaa !2428
  %8718 = load i64, i64* %RAX
  %8719 = load i64, i64* %PC
  %8720 = add i64 %8719, 3
  store i64 %8720, i64* %PC
  %8721 = trunc i64 %8718 to i32
  %8722 = add i32 1, %8721
  %8723 = zext i32 %8722 to i64
  store i64 %8723, i64* %RAX, align 8, !tbaa !2428
  %8724 = icmp ult i32 %8722, %8721
  %8725 = icmp ult i32 %8722, 1
  %8726 = or i1 %8724, %8725
  %8727 = zext i1 %8726 to i8
  %8728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8727, i8* %8728, align 1, !tbaa !2432
  %8729 = and i32 %8722, 255
  %8730 = call i32 @llvm.ctpop.i32(i32 %8729) #16
  %8731 = trunc i32 %8730 to i8
  %8732 = and i8 %8731, 1
  %8733 = xor i8 %8732, 1
  %8734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8733, i8* %8734, align 1, !tbaa !2446
  %8735 = xor i64 1, %8718
  %8736 = trunc i64 %8735 to i32
  %8737 = xor i32 %8736, %8722
  %8738 = lshr i32 %8737, 4
  %8739 = trunc i32 %8738 to i8
  %8740 = and i8 %8739, 1
  %8741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8740, i8* %8741, align 1, !tbaa !2447
  %8742 = icmp eq i32 %8722, 0
  %8743 = zext i1 %8742 to i8
  %8744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8743, i8* %8744, align 1, !tbaa !2448
  %8745 = lshr i32 %8722, 31
  %8746 = trunc i32 %8745 to i8
  %8747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8746, i8* %8747, align 1, !tbaa !2449
  %8748 = lshr i32 %8721, 31
  %8749 = xor i32 %8745, %8748
  %8750 = add nuw nsw i32 %8749, %8745
  %8751 = icmp eq i32 %8750, 2
  %8752 = zext i1 %8751 to i8
  %8753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8752, i8* %8753, align 1, !tbaa !2450
  %8754 = load i64, i64* %RBP
  %8755 = sub i64 %8754, 48
  %8756 = load i32, i32* %EAX
  %8757 = zext i32 %8756 to i64
  %8758 = load i64, i64* %PC
  %8759 = add i64 %8758, 3
  store i64 %8759, i64* %PC
  %8760 = inttoptr i64 %8755 to i32*
  store i32 %8756, i32* %8760
  %8761 = load i64, i64* %PC
  %8762 = sub i64 %8761, 135
  %8763 = load i64, i64* %PC
  %8764 = add i64 %8763, 5
  store i64 %8764, i64* %PC
  %8765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8762, i64* %8765, align 8, !tbaa !2428
  br label %block_402089

block_40225d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %8766 = load i64, i64* %RBP
  %8767 = sub i64 %8766, 44
  %8768 = load i64, i64* %PC
  %8769 = add i64 %8768, 3
  store i64 %8769, i64* %PC
  %8770 = inttoptr i64 %8767 to i32*
  %8771 = load i32, i32* %8770
  %8772 = zext i32 %8771 to i64
  store i64 %8772, i64* %RAX, align 8, !tbaa !2428
  %8773 = load i64, i64* %RAX
  %8774 = load i64, i64* %PC
  %8775 = add i64 %8774, 3
  store i64 %8775, i64* %PC
  %8776 = trunc i64 %8773 to i32
  %8777 = sub i32 %8776, 1
  %8778 = zext i32 %8777 to i64
  store i64 %8778, i64* %RAX, align 8, !tbaa !2428
  %8779 = icmp ult i32 %8776, 1
  %8780 = zext i1 %8779 to i8
  %8781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8780, i8* %8781, align 1, !tbaa !2432
  %8782 = and i32 %8777, 255
  %8783 = call i32 @llvm.ctpop.i32(i32 %8782) #16
  %8784 = trunc i32 %8783 to i8
  %8785 = and i8 %8784, 1
  %8786 = xor i8 %8785, 1
  %8787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8786, i8* %8787, align 1, !tbaa !2446
  %8788 = xor i64 1, %8773
  %8789 = trunc i64 %8788 to i32
  %8790 = xor i32 %8789, %8777
  %8791 = lshr i32 %8790, 4
  %8792 = trunc i32 %8791 to i8
  %8793 = and i8 %8792, 1
  %8794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8793, i8* %8794, align 1, !tbaa !2447
  %8795 = icmp eq i32 %8777, 0
  %8796 = zext i1 %8795 to i8
  %8797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8796, i8* %8797, align 1, !tbaa !2448
  %8798 = lshr i32 %8777, 31
  %8799 = trunc i32 %8798 to i8
  %8800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8799, i8* %8800, align 1, !tbaa !2449
  %8801 = lshr i32 %8776, 31
  %8802 = xor i32 %8798, %8801
  %8803 = add nuw nsw i32 %8802, %8801
  %8804 = icmp eq i32 %8803, 2
  %8805 = zext i1 %8804 to i8
  %8806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8805, i8* %8806, align 1, !tbaa !2450
  %8807 = load i64, i64* %RBP
  %8808 = sub i64 %8807, 44
  %8809 = load i32, i32* %EAX
  %8810 = zext i32 %8809 to i64
  %8811 = load i64, i64* %PC
  %8812 = add i64 %8811, 3
  store i64 %8812, i64* %PC
  %8813 = inttoptr i64 %8808 to i32*
  store i32 %8809, i32* %8813
  %8814 = load i64, i64* %RBP
  %8815 = sub i64 %8814, 48
  %8816 = load i64, i64* %PC
  %8817 = add i64 %8816, 7
  store i64 %8817, i64* %PC
  %8818 = inttoptr i64 %8815 to i32*
  store i32 0, i32* %8818
  br label %block_40226d

block_402793:                                     ; preds = %block_402459
  %8819 = load i64, i64* %PC
  %8820 = add i64 %8819, 5
  %8821 = load i64, i64* %PC
  %8822 = add i64 %8821, 5
  store i64 %8822, i64* %PC
  %8823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8820, i64* %8823, align 8, !tbaa !2428
  %8824 = load i64, i64* %RBP
  %8825 = sub i64 %8824, 44
  %8826 = load i64, i64* %PC
  %8827 = add i64 %8826, 3
  store i64 %8827, i64* %PC
  %8828 = inttoptr i64 %8825 to i32*
  %8829 = load i32, i32* %8828
  %8830 = zext i32 %8829 to i64
  store i64 %8830, i64* %RAX, align 8, !tbaa !2428
  %8831 = load i64, i64* %RAX
  %8832 = load i64, i64* %PC
  %8833 = add i64 %8832, 3
  store i64 %8833, i64* %PC
  %8834 = trunc i64 %8831 to i32
  %8835 = add i32 16, %8834
  %8836 = zext i32 %8835 to i64
  store i64 %8836, i64* %RAX, align 8, !tbaa !2428
  %8837 = icmp ult i32 %8835, %8834
  %8838 = icmp ult i32 %8835, 16
  %8839 = or i1 %8837, %8838
  %8840 = zext i1 %8839 to i8
  %8841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8840, i8* %8841, align 1, !tbaa !2432
  %8842 = and i32 %8835, 255
  %8843 = call i32 @llvm.ctpop.i32(i32 %8842) #16
  %8844 = trunc i32 %8843 to i8
  %8845 = and i8 %8844, 1
  %8846 = xor i8 %8845, 1
  %8847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8846, i8* %8847, align 1, !tbaa !2446
  %8848 = xor i64 16, %8831
  %8849 = trunc i64 %8848 to i32
  %8850 = xor i32 %8849, %8835
  %8851 = lshr i32 %8850, 4
  %8852 = trunc i32 %8851 to i8
  %8853 = and i8 %8852, 1
  %8854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8853, i8* %8854, align 1, !tbaa !2447
  %8855 = icmp eq i32 %8835, 0
  %8856 = zext i1 %8855 to i8
  %8857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8856, i8* %8857, align 1, !tbaa !2448
  %8858 = lshr i32 %8835, 31
  %8859 = trunc i32 %8858 to i8
  %8860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8859, i8* %8860, align 1, !tbaa !2449
  %8861 = lshr i32 %8834, 31
  %8862 = xor i32 %8858, %8861
  %8863 = add nuw nsw i32 %8862, %8858
  %8864 = icmp eq i32 %8863, 2
  %8865 = zext i1 %8864 to i8
  %8866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8865, i8* %8866, align 1, !tbaa !2450
  %8867 = load i64, i64* %RBP
  %8868 = sub i64 %8867, 44
  %8869 = load i32, i32* %EAX
  %8870 = zext i32 %8869 to i64
  %8871 = load i64, i64* %PC
  %8872 = add i64 %8871, 3
  store i64 %8872, i64* %PC
  %8873 = inttoptr i64 %8868 to i32*
  store i32 %8869, i32* %8873
  %8874 = load i64, i64* %PC
  %8875 = sub i64 %8874, 859
  %8876 = load i64, i64* %PC
  %8877 = add i64 %8876, 5
  store i64 %8877, i64* %PC
  %8878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8875, i64* %8878, align 8, !tbaa !2428
  br label %block_402446

block_402446:                                     ; preds = %block_402793, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %MEMORY.7 = phi %struct.Memory* [ %7870, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ], [ %MEMORY.4, %block_402793 ]
  %8879 = load i64, i64* %RBP
  %8880 = sub i64 %8879, 44
  %8881 = load i64, i64* %PC
  %8882 = add i64 %8881, 3
  store i64 %8882, i64* %PC
  %8883 = inttoptr i64 %8880 to i32*
  %8884 = load i32, i32* %8883
  %8885 = zext i32 %8884 to i64
  store i64 %8885, i64* %RAX, align 8, !tbaa !2428
  %8886 = load i32, i32* %EAX
  %8887 = zext i32 %8886 to i64
  %8888 = load i64, i64* %RBP
  %8889 = sub i64 %8888, 20
  %8890 = load i64, i64* %PC
  %8891 = add i64 %8890, 3
  store i64 %8891, i64* %PC
  %8892 = inttoptr i64 %8889 to i32*
  %8893 = load i32, i32* %8892
  %8894 = sub i32 %8886, %8893
  %8895 = icmp ult i32 %8886, %8893
  %8896 = zext i1 %8895 to i8
  %8897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8896, i8* %8897, align 1, !tbaa !2432
  %8898 = and i32 %8894, 255
  %8899 = call i32 @llvm.ctpop.i32(i32 %8898) #16
  %8900 = trunc i32 %8899 to i8
  %8901 = and i8 %8900, 1
  %8902 = xor i8 %8901, 1
  %8903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8902, i8* %8903, align 1, !tbaa !2446
  %8904 = xor i32 %8893, %8886
  %8905 = xor i32 %8904, %8894
  %8906 = lshr i32 %8905, 4
  %8907 = trunc i32 %8906 to i8
  %8908 = and i8 %8907, 1
  %8909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8908, i8* %8909, align 1, !tbaa !2447
  %8910 = icmp eq i32 %8894, 0
  %8911 = zext i1 %8910 to i8
  %8912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8911, i8* %8912, align 1, !tbaa !2448
  %8913 = lshr i32 %8894, 31
  %8914 = trunc i32 %8913 to i8
  %8915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8914, i8* %8915, align 1, !tbaa !2449
  %8916 = lshr i32 %8886, 31
  %8917 = lshr i32 %8893, 31
  %8918 = xor i32 %8917, %8916
  %8919 = xor i32 %8913, %8916
  %8920 = add nuw nsw i32 %8919, %8918
  %8921 = icmp eq i32 %8920, 2
  %8922 = zext i1 %8921 to i8
  %8923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8922, i8* %8923, align 1, !tbaa !2450
  %8924 = load i64, i64* %PC
  %8925 = add i64 %8924, 858
  %8926 = load i64, i64* %PC
  %8927 = add i64 %8926, 6
  %8928 = load i64, i64* %PC
  %8929 = add i64 %8928, 6
  store i64 %8929, i64* %PC
  %8930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8931 = load i8, i8* %8930, align 1, !tbaa !2449
  %8932 = icmp ne i8 %8931, 0
  %8933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8934 = load i8, i8* %8933, align 1, !tbaa !2450
  %8935 = icmp ne i8 %8934, 0
  %8936 = xor i1 %8932, %8935
  %8937 = xor i1 %8936, true
  %8938 = zext i1 %8937 to i8
  store i8 %8938, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8940 = select i1 %8936, i64 %8927, i64 %8925
  store i64 %8940, i64* %8939, align 8, !tbaa !2428
  %8941 = load i8, i8* %BRANCH_TAKEN
  %8942 = icmp eq i8 %8941, 1
  br i1 %8942, label %block_4027a6, label %block_402452

block_40211a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_402115
  %MEMORY.8 = phi %struct.Memory* [ %8167, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %MEMORY.9, %block_402115 ]
  %8943 = load i64, i64* %PC
  %8944 = add i64 %8943, 5
  store i64 %8944, i64* %PC
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %8945 = load i64, i64* %RBP
  %8946 = sub i64 %8945, 20
  %8947 = load i64, i64* %PC
  %8948 = add i64 %8947, 3
  store i64 %8948, i64* %PC
  %8949 = inttoptr i64 %8946 to i32*
  %8950 = load i32, i32* %8949
  %8951 = zext i32 %8950 to i64
  store i64 %8951, i64* %RCX, align 8, !tbaa !2428
  %8952 = load i64, i64* %RBP
  %8953 = sub i64 %8952, 64
  %8954 = load i32, i32* %EAX
  %8955 = zext i32 %8954 to i64
  %8956 = load i64, i64* %PC
  %8957 = add i64 %8956, 3
  store i64 %8957, i64* %PC
  %8958 = inttoptr i64 %8953 to i32*
  store i32 %8954, i32* %8958
  %8959 = load i32, i32* %ECX
  %8960 = zext i32 %8959 to i64
  %8961 = load i64, i64* %PC
  %8962 = add i64 %8961, 2
  store i64 %8962, i64* %PC
  %8963 = and i64 %8960, 4294967295
  store i64 %8963, i64* %RAX, align 8, !tbaa !2428
  %8964 = load i64, i64* %PC
  %8965 = add i64 %8964, 1
  store i64 %8965, i64* %PC
  %8966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %8967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8968 = bitcast %union.anon* %8967 to i32*
  %8969 = load i32, i32* %8968, align 8, !tbaa !2456
  %8970 = sext i32 %8969 to i64
  %8971 = lshr i64 %8970, 32
  store i64 %8971, i64* %8966, align 8, !tbaa !2428
  %8972 = load i64, i64* %RBP
  %8973 = sub i64 %8972, 64
  %8974 = load i64, i64* %PC
  %8975 = add i64 %8974, 3
  store i64 %8975, i64* %PC
  %8976 = inttoptr i64 %8973 to i32*
  %8977 = load i32, i32* %8976
  %8978 = zext i32 %8977 to i64
  store i64 %8978, i64* %RCX, align 8, !tbaa !2428
  %8979 = load i32, i32* %ECX
  %8980 = zext i32 %8979 to i64
  %8981 = load i64, i64* %PC
  %8982 = add i64 %8981, 2
  store i64 %8982, i64* %PC
  %8983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8984 = bitcast %union.anon* %8983 to i32*
  %8985 = load i32, i32* %8984, align 8, !tbaa !2456
  %8986 = zext i32 %8985 to i64
  %8987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %8988 = bitcast %union.anon* %8987 to i32*
  %8989 = load i32, i32* %8988, align 8, !tbaa !2456
  %8990 = zext i32 %8989 to i64
  %8991 = shl i64 %8980, 32
  %8992 = ashr exact i64 %8991, 32
  %8993 = shl nuw i64 %8990, 32
  %8994 = or i64 %8993, %8986
  %8995 = sdiv i64 %8994, %8992
  %8996 = shl i64 %8995, 32
  %8997 = ashr exact i64 %8996, 32
  %8998 = icmp eq i64 %8995, %8997
  br i1 %8998, label %9003, label %8999

; <label>:8999:                                   ; preds = %block_40211a
  %9000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9001 = load i64, i64* %9000, align 8, !tbaa !2428
  %9002 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9001, %struct.Memory* %MEMORY.8) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:9003:                                   ; preds = %block_40211a
  %9004 = srem i64 %8994, %8992
  %9005 = getelementptr inbounds %union.anon, %union.anon* %8983, i64 0, i32 0
  %9006 = and i64 %8995, 4294967295
  store i64 %9006, i64* %9005, align 8, !tbaa !2428
  %9007 = getelementptr inbounds %union.anon, %union.anon* %8987, i64 0, i32 0
  %9008 = and i64 %9004, 4294967295
  store i64 %9008, i64* %9007, align 8, !tbaa !2428
  %9009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9009, align 1, !tbaa !2432
  %9010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %9010, align 1, !tbaa !2446
  %9011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9011, align 1, !tbaa !2447
  %9012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9012, align 1, !tbaa !2448
  %9013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9013, align 1, !tbaa !2449
  %9014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9014, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %8999, %9003
  %9015 = phi %struct.Memory* [ %9002, %8999 ], [ %MEMORY.8, %9003 ]
  %9016 = load i64, i64* %RBP
  %9017 = sub i64 %9016, 44
  %9018 = load i32, i32* %EDX
  %9019 = zext i32 %9018 to i64
  %9020 = load i64, i64* %PC
  %9021 = add i64 %9020, 3
  store i64 %9021, i64* %PC
  %9022 = inttoptr i64 %9017 to i32*
  store i32 %9018, i32* %9022
  %9023 = load i64, i64* %RBP
  %9024 = sub i64 %9023, 44
  %9025 = load i64, i64* %PC
  %9026 = add i64 %9025, 4
  store i64 %9026, i64* %PC
  %9027 = inttoptr i64 %9024 to i32*
  %9028 = load i32, i32* %9027
  %9029 = sub i32 %9028, 4
  %9030 = icmp ult i32 %9028, 4
  %9031 = zext i1 %9030 to i8
  %9032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9031, i8* %9032, align 1, !tbaa !2432
  %9033 = and i32 %9029, 255
  %9034 = call i32 @llvm.ctpop.i32(i32 %9033) #16
  %9035 = trunc i32 %9034 to i8
  %9036 = and i8 %9035, 1
  %9037 = xor i8 %9036, 1
  %9038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9037, i8* %9038, align 1, !tbaa !2446
  %9039 = xor i32 %9028, 4
  %9040 = xor i32 %9039, %9029
  %9041 = lshr i32 %9040, 4
  %9042 = trunc i32 %9041 to i8
  %9043 = and i8 %9042, 1
  %9044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9043, i8* %9044, align 1, !tbaa !2447
  %9045 = icmp eq i32 %9029, 0
  %9046 = zext i1 %9045 to i8
  %9047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9046, i8* %9047, align 1, !tbaa !2448
  %9048 = lshr i32 %9029, 31
  %9049 = trunc i32 %9048 to i8
  %9050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9049, i8* %9050, align 1, !tbaa !2449
  %9051 = lshr i32 %9028, 31
  %9052 = xor i32 %9048, %9051
  %9053 = add nuw nsw i32 %9052, %9051
  %9054 = icmp eq i32 %9053, 2
  %9055 = zext i1 %9054 to i8
  %9056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9055, i8* %9056, align 1, !tbaa !2450
  %9057 = load i64, i64* %PC
  %9058 = add i64 %9057, 265
  %9059 = load i64, i64* %PC
  %9060 = add i64 %9059, 6
  %9061 = load i64, i64* %PC
  %9062 = add i64 %9061, 6
  store i64 %9062, i64* %PC
  %9063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9064 = load i8, i8* %9063, align 1, !tbaa !2449
  %9065 = icmp ne i8 %9064, 0
  %9066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9067 = load i8, i8* %9066, align 1, !tbaa !2450
  %9068 = icmp ne i8 %9067, 0
  %9069 = xor i1 %9065, %9068
  %9070 = zext i1 %9069 to i8
  store i8 %9070, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9072 = select i1 %9069, i64 %9058, i64 %9060
  store i64 %9072, i64* %9071, align 8, !tbaa !2428
  %9073 = load i8, i8* %BRANCH_TAKEN
  %9074 = icmp eq i8 %9073, 1
  br i1 %9074, label %block_40223d, label %block_40213a

block_402089:                                     ; preds = %block_402079, %block_402095
  %MEMORY.9 = phi %struct.Memory* [ %8167, %block_402079 ], [ %MEMORY.9, %block_402095 ]
  %9075 = load i64, i64* %RBP
  %9076 = sub i64 %9075, 48
  %9077 = load i64, i64* %PC
  %9078 = add i64 %9077, 3
  store i64 %9078, i64* %PC
  %9079 = inttoptr i64 %9076 to i32*
  %9080 = load i32, i32* %9079
  %9081 = zext i32 %9080 to i64
  store i64 %9081, i64* %RAX, align 8, !tbaa !2428
  %9082 = load i32, i32* %EAX
  %9083 = zext i32 %9082 to i64
  %9084 = load i64, i64* %RBP
  %9085 = sub i64 %9084, 4
  %9086 = load i64, i64* %PC
  %9087 = add i64 %9086, 3
  store i64 %9087, i64* %PC
  %9088 = inttoptr i64 %9085 to i32*
  %9089 = load i32, i32* %9088
  %9090 = sub i32 %9082, %9089
  %9091 = icmp ult i32 %9082, %9089
  %9092 = zext i1 %9091 to i8
  %9093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9092, i8* %9093, align 1, !tbaa !2432
  %9094 = and i32 %9090, 255
  %9095 = call i32 @llvm.ctpop.i32(i32 %9094) #16
  %9096 = trunc i32 %9095 to i8
  %9097 = and i8 %9096, 1
  %9098 = xor i8 %9097, 1
  %9099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9098, i8* %9099, align 1, !tbaa !2446
  %9100 = xor i32 %9089, %9082
  %9101 = xor i32 %9100, %9090
  %9102 = lshr i32 %9101, 4
  %9103 = trunc i32 %9102 to i8
  %9104 = and i8 %9103, 1
  %9105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9104, i8* %9105, align 1, !tbaa !2447
  %9106 = icmp eq i32 %9090, 0
  %9107 = zext i1 %9106 to i8
  %9108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9107, i8* %9108, align 1, !tbaa !2448
  %9109 = lshr i32 %9090, 31
  %9110 = trunc i32 %9109 to i8
  %9111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9110, i8* %9111, align 1, !tbaa !2449
  %9112 = lshr i32 %9082, 31
  %9113 = lshr i32 %9089, 31
  %9114 = xor i32 %9113, %9112
  %9115 = xor i32 %9109, %9112
  %9116 = add nuw nsw i32 %9115, %9114
  %9117 = icmp eq i32 %9116, 2
  %9118 = zext i1 %9117 to i8
  %9119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9118, i8* %9119, align 1, !tbaa !2450
  %9120 = load i64, i64* %PC
  %9121 = add i64 %9120, 134
  %9122 = load i64, i64* %PC
  %9123 = add i64 %9122, 6
  %9124 = load i64, i64* %PC
  %9125 = add i64 %9124, 6
  store i64 %9125, i64* %PC
  %9126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9127 = load i8, i8* %9126, align 1, !tbaa !2449
  %9128 = icmp ne i8 %9127, 0
  %9129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9130 = load i8, i8* %9129, align 1, !tbaa !2450
  %9131 = icmp ne i8 %9130, 0
  %9132 = xor i1 %9128, %9131
  %9133 = xor i1 %9132, true
  %9134 = zext i1 %9133 to i8
  store i8 %9134, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9136 = select i1 %9132, i64 %9123, i64 %9121
  store i64 %9136, i64* %9135, align 8, !tbaa !2428
  %9137 = load i8, i8* %BRANCH_TAKEN
  %9138 = icmp eq i8 %9137, 1
  br i1 %9138, label %block_402115, label %block_402095

block_402079:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %9139 = load i64, i64* %RBP
  %9140 = sub i64 %9139, 44
  %9141 = load i64, i64* %PC
  %9142 = add i64 %9141, 3
  store i64 %9142, i64* %PC
  %9143 = inttoptr i64 %9140 to i32*
  %9144 = load i32, i32* %9143
  %9145 = zext i32 %9144 to i64
  store i64 %9145, i64* %RAX, align 8, !tbaa !2428
  %9146 = load i64, i64* %RAX
  %9147 = load i64, i64* %PC
  %9148 = add i64 %9147, 3
  store i64 %9148, i64* %PC
  %9149 = trunc i64 %9146 to i32
  %9150 = sub i32 %9149, 1
  %9151 = zext i32 %9150 to i64
  store i64 %9151, i64* %RAX, align 8, !tbaa !2428
  %9152 = icmp ult i32 %9149, 1
  %9153 = zext i1 %9152 to i8
  %9154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9153, i8* %9154, align 1, !tbaa !2432
  %9155 = and i32 %9150, 255
  %9156 = call i32 @llvm.ctpop.i32(i32 %9155) #16
  %9157 = trunc i32 %9156 to i8
  %9158 = and i8 %9157, 1
  %9159 = xor i8 %9158, 1
  %9160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9159, i8* %9160, align 1, !tbaa !2446
  %9161 = xor i64 1, %9146
  %9162 = trunc i64 %9161 to i32
  %9163 = xor i32 %9162, %9150
  %9164 = lshr i32 %9163, 4
  %9165 = trunc i32 %9164 to i8
  %9166 = and i8 %9165, 1
  %9167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9166, i8* %9167, align 1, !tbaa !2447
  %9168 = icmp eq i32 %9150, 0
  %9169 = zext i1 %9168 to i8
  %9170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9169, i8* %9170, align 1, !tbaa !2448
  %9171 = lshr i32 %9150, 31
  %9172 = trunc i32 %9171 to i8
  %9173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9172, i8* %9173, align 1, !tbaa !2449
  %9174 = lshr i32 %9149, 31
  %9175 = xor i32 %9171, %9174
  %9176 = add nuw nsw i32 %9175, %9174
  %9177 = icmp eq i32 %9176, 2
  %9178 = zext i1 %9177 to i8
  %9179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9178, i8* %9179, align 1, !tbaa !2450
  %9180 = load i64, i64* %RBP
  %9181 = sub i64 %9180, 44
  %9182 = load i32, i32* %EAX
  %9183 = zext i32 %9182 to i64
  %9184 = load i64, i64* %PC
  %9185 = add i64 %9184, 3
  store i64 %9185, i64* %PC
  %9186 = inttoptr i64 %9181 to i32*
  store i32 %9182, i32* %9186
  %9187 = load i64, i64* %RBP
  %9188 = sub i64 %9187, 48
  %9189 = load i64, i64* %PC
  %9190 = add i64 %9189, 7
  store i64 %9190, i64* %PC
  %9191 = inttoptr i64 %9188 to i32*
  store i32 0, i32* %9191
  br label %block_402089

block_402005:                                     ; preds = %block_401ff9
  %9192 = load i64, i64* %RBP
  %9193 = sub i64 %9192, 16
  %9194 = load i64, i64* %PC
  %9195 = add i64 %9194, 4
  store i64 %9195, i64* %PC
  %9196 = inttoptr i64 %9193 to i64*
  %9197 = load i64, i64* %9196
  store i64 %9197, i64* %RAX, align 8, !tbaa !2428
  %9198 = load i64, i64* %RBP
  %9199 = sub i64 %9198, 48
  %9200 = load i64, i64* %PC
  %9201 = add i64 %9200, 4
  store i64 %9201, i64* %PC
  %9202 = inttoptr i64 %9199 to i32*
  %9203 = load i32, i32* %9202
  %9204 = sext i32 %9203 to i64
  store i64 %9204, i64* %RCX, align 8, !tbaa !2428
  %9205 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9206 = load i64, i64* %RAX
  %9207 = load i64, i64* %RCX
  %9208 = mul i64 %9207, 4
  %9209 = add i64 %9208, %9206
  %9210 = load i64, i64* %PC
  %9211 = add i64 %9210, 5
  store i64 %9211, i64* %PC
  %9212 = inttoptr i64 %9209 to float*
  %9213 = load float, float* %9212
  %9214 = bitcast i8* %9205 to float*
  store float %9213, float* %9214, align 1, !tbaa !2452
  %9215 = getelementptr inbounds i8, i8* %9205, i64 4
  %9216 = bitcast i8* %9215 to float*
  store float 0.000000e+00, float* %9216, align 1, !tbaa !2452
  %9217 = getelementptr inbounds i8, i8* %9205, i64 8
  %9218 = bitcast i8* %9217 to float*
  store float 0.000000e+00, float* %9218, align 1, !tbaa !2452
  %9219 = getelementptr inbounds i8, i8* %9205, i64 12
  %9220 = bitcast i8* %9219 to float*
  store float 0.000000e+00, float* %9220, align 1, !tbaa !2452
  %9221 = load i64, i64* %RBP
  %9222 = sub i64 %9221, 32
  %9223 = load i64, i64* %PC
  %9224 = add i64 %9223, 4
  store i64 %9224, i64* %PC
  %9225 = inttoptr i64 %9222 to i64*
  %9226 = load i64, i64* %9225
  store i64 %9226, i64* %RAX, align 8, !tbaa !2428
  %9227 = load i64, i64* %RBP
  %9228 = sub i64 %9227, 44
  %9229 = load i64, i64* %PC
  %9230 = add i64 %9229, 4
  store i64 %9230, i64* %PC
  %9231 = inttoptr i64 %9228 to i32*
  %9232 = load i32, i32* %9231
  %9233 = sext i32 %9232 to i64
  store i64 %9233, i64* %RCX, align 8, !tbaa !2428
  %9234 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9235 = load i64, i64* %RAX
  %9236 = load i64, i64* %RCX
  %9237 = mul i64 %9236, 4
  %9238 = add i64 %9237, %9235
  %9239 = load i64, i64* %PC
  %9240 = add i64 %9239, 5
  store i64 %9240, i64* %PC
  %9241 = inttoptr i64 %9238 to float*
  %9242 = load float, float* %9241
  %9243 = bitcast i8* %9234 to float*
  store float %9242, float* %9243, align 1, !tbaa !2452
  %9244 = getelementptr inbounds i8, i8* %9234, i64 4
  %9245 = bitcast i8* %9244 to float*
  store float 0.000000e+00, float* %9245, align 1, !tbaa !2452
  %9246 = getelementptr inbounds i8, i8* %9234, i64 8
  %9247 = bitcast i8* %9246 to float*
  store float 0.000000e+00, float* %9247, align 1, !tbaa !2452
  %9248 = getelementptr inbounds i8, i8* %9234, i64 12
  %9249 = bitcast i8* %9248 to float*
  store float 0.000000e+00, float* %9249, align 1, !tbaa !2452
  %9250 = load i64, i64* %RBP
  %9251 = sub i64 %9250, 40
  %9252 = load i64, i64* %PC
  %9253 = add i64 %9252, 4
  store i64 %9253, i64* %PC
  %9254 = inttoptr i64 %9251 to i64*
  %9255 = load i64, i64* %9254
  store i64 %9255, i64* %RAX, align 8, !tbaa !2428
  %9256 = load i64, i64* %RBP
  %9257 = sub i64 %9256, 24
  %9258 = load i64, i64* %PC
  %9259 = add i64 %9258, 3
  store i64 %9259, i64* %PC
  %9260 = inttoptr i64 %9257 to i32*
  %9261 = load i32, i32* %9260
  %9262 = zext i32 %9261 to i64
  store i64 %9262, i64* %RDX, align 8, !tbaa !2428
  %9263 = load i64, i64* %RDX
  %9264 = load i64, i64* %RBP
  %9265 = sub i64 %9264, 44
  %9266 = load i64, i64* %PC
  %9267 = add i64 %9266, 4
  store i64 %9267, i64* %PC
  %9268 = inttoptr i64 %9265 to i32*
  %9269 = load i32, i32* %9268
  %9270 = shl i64 %9263, 32
  %9271 = ashr exact i64 %9270, 32
  %9272 = sext i32 %9269 to i64
  %9273 = mul nsw i64 %9272, %9271
  %9274 = trunc i64 %9273 to i32
  %9275 = and i64 %9273, 4294967295
  store i64 %9275, i64* %RDX, align 8, !tbaa !2428
  %9276 = shl i64 %9273, 32
  %9277 = ashr exact i64 %9276, 32
  %9278 = icmp ne i64 %9277, %9273
  %9279 = zext i1 %9278 to i8
  %9280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9279, i8* %9280, align 1, !tbaa !2432
  %9281 = and i32 %9274, 255
  %9282 = call i32 @llvm.ctpop.i32(i32 %9281) #16
  %9283 = trunc i32 %9282 to i8
  %9284 = and i8 %9283, 1
  %9285 = xor i8 %9284, 1
  %9286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9285, i8* %9286, align 1, !tbaa !2446
  %9287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9287, align 1, !tbaa !2447
  %9288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9288, align 1, !tbaa !2448
  %9289 = lshr i32 %9274, 31
  %9290 = trunc i32 %9289 to i8
  %9291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9290, i8* %9291, align 1, !tbaa !2449
  %9292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9279, i8* %9292, align 1, !tbaa !2450
  %9293 = load i64, i64* %RDX
  %9294 = load i64, i64* %RBP
  %9295 = sub i64 %9294, 48
  %9296 = load i64, i64* %PC
  %9297 = add i64 %9296, 3
  store i64 %9297, i64* %PC
  %9298 = trunc i64 %9293 to i32
  %9299 = inttoptr i64 %9295 to i32*
  %9300 = load i32, i32* %9299
  %9301 = add i32 %9300, %9298
  %9302 = zext i32 %9301 to i64
  store i64 %9302, i64* %RDX, align 8, !tbaa !2428
  %9303 = icmp ult i32 %9301, %9298
  %9304 = icmp ult i32 %9301, %9300
  %9305 = or i1 %9303, %9304
  %9306 = zext i1 %9305 to i8
  %9307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9306, i8* %9307, align 1, !tbaa !2432
  %9308 = and i32 %9301, 255
  %9309 = call i32 @llvm.ctpop.i32(i32 %9308) #16
  %9310 = trunc i32 %9309 to i8
  %9311 = and i8 %9310, 1
  %9312 = xor i8 %9311, 1
  %9313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9312, i8* %9313, align 1, !tbaa !2446
  %9314 = xor i32 %9300, %9298
  %9315 = xor i32 %9314, %9301
  %9316 = lshr i32 %9315, 4
  %9317 = trunc i32 %9316 to i8
  %9318 = and i8 %9317, 1
  %9319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9318, i8* %9319, align 1, !tbaa !2447
  %9320 = icmp eq i32 %9301, 0
  %9321 = zext i1 %9320 to i8
  %9322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9321, i8* %9322, align 1, !tbaa !2448
  %9323 = lshr i32 %9301, 31
  %9324 = trunc i32 %9323 to i8
  %9325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9324, i8* %9325, align 1, !tbaa !2449
  %9326 = lshr i32 %9298, 31
  %9327 = lshr i32 %9300, 31
  %9328 = xor i32 %9323, %9326
  %9329 = xor i32 %9323, %9327
  %9330 = add nuw nsw i32 %9328, %9329
  %9331 = icmp eq i32 %9330, 2
  %9332 = zext i1 %9331 to i8
  %9333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9332, i8* %9333, align 1, !tbaa !2450
  %9334 = load i32, i32* %EDX
  %9335 = zext i32 %9334 to i64
  %9336 = load i64, i64* %PC
  %9337 = add i64 %9336, 3
  store i64 %9337, i64* %PC
  %9338 = shl i64 %9335, 32
  %9339 = ashr exact i64 %9338, 32
  store i64 %9339, i64* %RCX, align 8, !tbaa !2428
  %9340 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9341 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9342 = load i64, i64* %RAX
  %9343 = load i64, i64* %RCX
  %9344 = mul i64 %9343, 4
  %9345 = add i64 %9344, %9342
  %9346 = load i64, i64* %PC
  %9347 = add i64 %9346, 5
  store i64 %9347, i64* %PC
  %9348 = bitcast i8* %9341 to <2 x float>*
  %9349 = load <2 x float>, <2 x float>* %9348, align 1
  %9350 = getelementptr inbounds i8, i8* %9341, i64 8
  %9351 = bitcast i8* %9350 to <2 x i32>*
  %9352 = load <2 x i32>, <2 x i32>* %9351, align 1
  %9353 = inttoptr i64 %9345 to float*
  %9354 = load float, float* %9353
  %9355 = extractelement <2 x float> %9349, i32 0
  %9356 = fmul float %9355, %9354
  %9357 = bitcast i8* %9340 to float*
  store float %9356, float* %9357, align 1, !tbaa !2452
  %9358 = bitcast <2 x float> %9349 to <2 x i32>
  %9359 = extractelement <2 x i32> %9358, i32 1
  %9360 = getelementptr inbounds i8, i8* %9340, i64 4
  %9361 = bitcast i8* %9360 to i32*
  store i32 %9359, i32* %9361, align 1, !tbaa !2452
  %9362 = extractelement <2 x i32> %9352, i32 0
  %9363 = getelementptr inbounds i8, i8* %9340, i64 8
  %9364 = bitcast i8* %9363 to i32*
  store i32 %9362, i32* %9364, align 1, !tbaa !2452
  %9365 = extractelement <2 x i32> %9352, i32 1
  %9366 = getelementptr inbounds i8, i8* %9340, i64 12
  %9367 = bitcast i8* %9366 to i32*
  store i32 %9365, i32* %9367, align 1, !tbaa !2452
  %9368 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9369 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9370 = bitcast %union.vec128_t* %XMM1 to i8*
  %9371 = load i64, i64* %PC
  %9372 = add i64 %9371, 4
  store i64 %9372, i64* %PC
  %9373 = bitcast i8* %9369 to <2 x float>*
  %9374 = load <2 x float>, <2 x float>* %9373, align 1
  %9375 = getelementptr inbounds i8, i8* %9369, i64 8
  %9376 = bitcast i8* %9375 to <2 x i32>*
  %9377 = load <2 x i32>, <2 x i32>* %9376, align 1
  %9378 = bitcast i8* %9370 to <2 x float>*
  %9379 = load <2 x float>, <2 x float>* %9378, align 1
  %9380 = extractelement <2 x float> %9374, i32 0
  %9381 = extractelement <2 x float> %9379, i32 0
  %9382 = fadd float %9380, %9381
  %9383 = bitcast i8* %9368 to float*
  store float %9382, float* %9383, align 1, !tbaa !2452
  %9384 = bitcast <2 x float> %9374 to <2 x i32>
  %9385 = extractelement <2 x i32> %9384, i32 1
  %9386 = getelementptr inbounds i8, i8* %9368, i64 4
  %9387 = bitcast i8* %9386 to i32*
  store i32 %9385, i32* %9387, align 1, !tbaa !2452
  %9388 = extractelement <2 x i32> %9377, i32 0
  %9389 = getelementptr inbounds i8, i8* %9368, i64 8
  %9390 = bitcast i8* %9389 to i32*
  store i32 %9388, i32* %9390, align 1, !tbaa !2452
  %9391 = extractelement <2 x i32> %9377, i32 1
  %9392 = getelementptr inbounds i8, i8* %9368, i64 12
  %9393 = bitcast i8* %9392 to i32*
  store i32 %9391, i32* %9393, align 1, !tbaa !2452
  %9394 = load i64, i64* %RBP
  %9395 = sub i64 %9394, 16
  %9396 = load i64, i64* %PC
  %9397 = add i64 %9396, 4
  store i64 %9397, i64* %PC
  %9398 = inttoptr i64 %9395 to i64*
  %9399 = load i64, i64* %9398
  store i64 %9399, i64* %RAX, align 8, !tbaa !2428
  %9400 = load i64, i64* %RBP
  %9401 = sub i64 %9400, 48
  %9402 = load i64, i64* %PC
  %9403 = add i64 %9402, 4
  store i64 %9403, i64* %PC
  %9404 = inttoptr i64 %9401 to i32*
  %9405 = load i32, i32* %9404
  %9406 = sext i32 %9405 to i64
  store i64 %9406, i64* %RCX, align 8, !tbaa !2428
  %9407 = load i64, i64* %RAX
  %9408 = load i64, i64* %RCX
  %9409 = mul i64 %9408, 4
  %9410 = add i64 %9409, %9407
  %9411 = bitcast %union.vec128_t* %XMM0 to i8*
  %9412 = load i64, i64* %PC
  %9413 = add i64 %9412, 5
  store i64 %9413, i64* %PC
  %9414 = bitcast i8* %9411 to <2 x float>*
  %9415 = load <2 x float>, <2 x float>* %9414, align 1
  %9416 = extractelement <2 x float> %9415, i32 0
  %9417 = inttoptr i64 %9410 to float*
  store float %9416, float* %9417
  %9418 = load i64, i64* %RBP
  %9419 = sub i64 %9418, 48
  %9420 = load i64, i64* %PC
  %9421 = add i64 %9420, 3
  store i64 %9421, i64* %PC
  %9422 = inttoptr i64 %9419 to i32*
  %9423 = load i32, i32* %9422
  %9424 = zext i32 %9423 to i64
  store i64 %9424, i64* %RAX, align 8, !tbaa !2428
  %9425 = load i64, i64* %RAX
  %9426 = load i64, i64* %PC
  %9427 = add i64 %9426, 3
  store i64 %9427, i64* %PC
  %9428 = trunc i64 %9425 to i32
  %9429 = add i32 1, %9428
  %9430 = zext i32 %9429 to i64
  store i64 %9430, i64* %RAX, align 8, !tbaa !2428
  %9431 = icmp ult i32 %9429, %9428
  %9432 = icmp ult i32 %9429, 1
  %9433 = or i1 %9431, %9432
  %9434 = zext i1 %9433 to i8
  %9435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9434, i8* %9435, align 1, !tbaa !2432
  %9436 = and i32 %9429, 255
  %9437 = call i32 @llvm.ctpop.i32(i32 %9436) #16
  %9438 = trunc i32 %9437 to i8
  %9439 = and i8 %9438, 1
  %9440 = xor i8 %9439, 1
  %9441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9440, i8* %9441, align 1, !tbaa !2446
  %9442 = xor i64 1, %9425
  %9443 = trunc i64 %9442 to i32
  %9444 = xor i32 %9443, %9429
  %9445 = lshr i32 %9444, 4
  %9446 = trunc i32 %9445 to i8
  %9447 = and i8 %9446, 1
  %9448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9447, i8* %9448, align 1, !tbaa !2447
  %9449 = icmp eq i32 %9429, 0
  %9450 = zext i1 %9449 to i8
  %9451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9450, i8* %9451, align 1, !tbaa !2448
  %9452 = lshr i32 %9429, 31
  %9453 = trunc i32 %9452 to i8
  %9454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9453, i8* %9454, align 1, !tbaa !2449
  %9455 = lshr i32 %9428, 31
  %9456 = xor i32 %9452, %9455
  %9457 = add nuw nsw i32 %9456, %9452
  %9458 = icmp eq i32 %9457, 2
  %9459 = zext i1 %9458 to i8
  %9460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9459, i8* %9460, align 1, !tbaa !2450
  %9461 = load i64, i64* %RBP
  %9462 = sub i64 %9461, 48
  %9463 = load i32, i32* %EAX
  %9464 = zext i32 %9463 to i64
  %9465 = load i64, i64* %PC
  %9466 = add i64 %9465, 3
  store i64 %9466, i64* %PC
  %9467 = inttoptr i64 %9462 to i32*
  store i32 %9463, i32* %9467
  %9468 = load i64, i64* %PC
  %9469 = sub i64 %9468, 86
  %9470 = load i64, i64* %PC
  %9471 = add i64 %9470, 5
  store i64 %9471, i64* %PC
  %9472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9469, i64* %9472, align 8, !tbaa !2428
  br label %block_401ff9
}

; Function Attrs: noinline
define %struct.Memory* @sub_402b40_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402b40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 8
  %56 = load i32, i32* %EDI
  %57 = zext i32 %56 to i64
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %60
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 16
  %63 = load i64, i64* %RSI
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 20
  %69 = load i32, i32* %EDX
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 8
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i32*
  %79 = load i32, i32* %78
  %80 = sub i32 %79, 1
  %81 = icmp ult i32 %79, 1
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %82, i8* %83, align 1, !tbaa !2432
  %84 = and i32 %80, 255
  %85 = call i32 @llvm.ctpop.i32(i32 %84) #16
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 1
  %88 = xor i8 %87, 1
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %88, i8* %89, align 1, !tbaa !2446
  %90 = xor i32 %79, 1
  %91 = xor i32 %90, %80
  %92 = lshr i32 %91, 4
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %94, i8* %95, align 1, !tbaa !2447
  %96 = icmp eq i32 %80, 0
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %97, i8* %98, align 1, !tbaa !2448
  %99 = lshr i32 %80, 31
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %100, i8* %101, align 1, !tbaa !2449
  %102 = lshr i32 %79, 31
  %103 = xor i32 %99, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %106, i8* %107, align 1, !tbaa !2450
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 18
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 6
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %115 = load i8, i8* %114, align 1, !tbaa !2449
  %116 = icmp ne i8 %115, 0
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %118 = load i8, i8* %117, align 1, !tbaa !2450
  %119 = icmp ne i8 %118, 0
  %120 = xor i1 %116, %119
  %121 = xor i1 %120, true
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %124 = select i1 %120, i64 %111, i64 %109
  store i64 %124, i64* %123, align 8, !tbaa !2428
  %125 = load i8, i8* %BRANCH_TAKEN
  %126 = icmp eq i8 %125, 1
  %127 = load i64, i64* %RBP
  br i1 %126, label %block_402b64, label %block_402b58

block_402b7a:                                     ; preds = %block_402b64
  %128 = sub i64 %1181, 20
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i32*
  %132 = load i32, i32* %131
  %133 = sub i32 %132, 1
  %134 = icmp ult i32 %132, 1
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %135, i8* %136, align 1, !tbaa !2432
  %137 = and i32 %133, 255
  %138 = call i32 @llvm.ctpop.i32(i32 %137) #16
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %141, i8* %142, align 1, !tbaa !2446
  %143 = xor i32 %132, 1
  %144 = xor i32 %143, %133
  %145 = lshr i32 %144, 4
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %147, i8* %148, align 1, !tbaa !2447
  %149 = icmp eq i32 %133, 0
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %150, i8* %151, align 1, !tbaa !2448
  %152 = lshr i32 %133, 31
  %153 = trunc i32 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %153, i8* %154, align 1, !tbaa !2449
  %155 = lshr i32 %132, 31
  %156 = xor i32 %152, %155
  %157 = add nuw nsw i32 %156, %155
  %158 = icmp eq i32 %157, 2
  %159 = zext i1 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %159, i8* %160, align 1, !tbaa !2450
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 175
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 6
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 6
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %168 = load i8, i8* %167, align 1, !tbaa !2448
  store i8 %168, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %170 = icmp ne i8 %168, 0
  %171 = select i1 %170, i64 %162, i64 %164
  store i64 %171, i64* %169, align 8, !tbaa !2428
  %172 = load i8, i8* %BRANCH_TAKEN
  %173 = icmp eq i8 %172, 1
  %174 = load i64, i64* %RBP
  br i1 %173, label %block_402c2d, label %block_402b84

block_402b84:                                     ; preds = %block_402b7a
  %175 = sub i64 %174, 32
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 7
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to i32*
  store i32 1, i32* %178
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 16
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %186 = load i64, i64* %RAX
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to float*
  %190 = load float, float* %189
  %191 = fpext float %190 to double
  %192 = bitcast i8* %185 to double*
  store double %191, double* %192, align 1, !tbaa !2454
  %193 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 7
  store i64 %195, i64* %PC
  %196 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %197 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %198 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %199 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %200 = bitcast i8* %193 to float*
  store float %196, float* %200, align 1, !tbaa !2452
  %201 = getelementptr inbounds i8, i8* %193, i64 4
  %202 = bitcast i8* %201 to float*
  store float %197, float* %202, align 1, !tbaa !2452
  %203 = getelementptr inbounds i8, i8* %193, i64 8
  %204 = bitcast i8* %203 to float*
  store float %198, float* %204, align 1, !tbaa !2452
  %205 = getelementptr inbounds i8, i8* %193, i64 12
  %206 = bitcast i8* %205 to float*
  store float %199, float* %206, align 1, !tbaa !2452
  %207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %208 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %209 = bitcast %union.vec128_t* %XMM1 to i8*
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 4
  store i64 %211, i64* %PC
  %212 = bitcast i8* %208 to i64*
  %213 = load i64, i64* %212, align 1
  %214 = getelementptr inbounds i8, i8* %208, i64 8
  %215 = bitcast i8* %214 to i64*
  %216 = load i64, i64* %215, align 1
  %217 = bitcast i8* %209 to i64*
  %218 = load i64, i64* %217, align 1
  %219 = getelementptr inbounds i8, i8* %209, i64 8
  %220 = bitcast i8* %219 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = and i64 %218, %213
  %223 = and i64 %221, %216
  %224 = trunc i64 %222 to i32
  %225 = lshr i64 %222, 32
  %226 = trunc i64 %225 to i32
  %227 = bitcast i8* %207 to i32*
  store i32 %224, i32* %227, align 1, !tbaa !2456
  %228 = getelementptr inbounds i8, i8* %207, i64 4
  %229 = bitcast i8* %228 to i32*
  store i32 %226, i32* %229, align 1, !tbaa !2456
  %230 = trunc i64 %223 to i32
  %231 = getelementptr inbounds i8, i8* %207, i64 8
  %232 = bitcast i8* %231 to i32*
  store i32 %230, i32* %232, align 1, !tbaa !2456
  %233 = lshr i64 %223, 32
  %234 = trunc i64 %233 to i32
  %235 = getelementptr inbounds i8, i8* %207, i64 12
  %236 = bitcast i8* %235 to i32*
  store i32 %234, i32* %236, align 1, !tbaa !2456
  %237 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %238 = bitcast %union.vec128_t* %XMM0 to i8*
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 4
  store i64 %240, i64* %PC
  %241 = bitcast i8* %237 to <2 x i32>*
  %242 = load <2 x i32>, <2 x i32>* %241, align 1
  %243 = getelementptr inbounds i8, i8* %237, i64 8
  %244 = bitcast i8* %243 to <2 x i32>*
  %245 = load <2 x i32>, <2 x i32>* %244, align 1
  %246 = bitcast i8* %238 to double*
  %247 = load double, double* %246, align 1
  %248 = fptrunc double %247 to float
  %249 = bitcast i8* %237 to float*
  store float %248, float* %249, align 1, !tbaa !2452
  %250 = extractelement <2 x i32> %242, i32 1
  %251 = getelementptr inbounds i8, i8* %237, i64 4
  %252 = bitcast i8* %251 to i32*
  store i32 %250, i32* %252, align 1, !tbaa !2452
  %253 = extractelement <2 x i32> %245, i32 0
  %254 = bitcast i8* %243 to i32*
  store i32 %253, i32* %254, align 1, !tbaa !2452
  %255 = extractelement <2 x i32> %245, i32 1
  %256 = getelementptr inbounds i8, i8* %237, i64 12
  %257 = bitcast i8* %256 to i32*
  store i32 %255, i32* %257, align 1, !tbaa !2452
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 24
  %260 = bitcast %union.vec128_t* %XMM0 to i8*
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  store i64 %262, i64* %PC
  %263 = bitcast i8* %260 to <2 x float>*
  %264 = load <2 x float>, <2 x float>* %263, align 1
  %265 = extractelement <2 x float> %264, i32 0
  %266 = inttoptr i64 %259 to float*
  store float %265, float* %266
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 32
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 3
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %268 to i32*
  %272 = load i32, i32* %271
  %273 = zext i32 %272 to i64
  store i64 %273, i64* %RCX, align 8, !tbaa !2428
  %274 = load i64, i64* %RCX
  %275 = load i64, i64* %RBP
  %276 = sub i64 %275, 20
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 3
  store i64 %278, i64* %PC
  %279 = trunc i64 %274 to i32
  %280 = inttoptr i64 %276 to i32*
  %281 = load i32, i32* %280
  %282 = add i32 %281, %279
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %RCX, align 8, !tbaa !2428
  %284 = icmp ult i32 %282, %279
  %285 = icmp ult i32 %282, %281
  %286 = or i1 %284, %285
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %287, i8* %288, align 1, !tbaa !2432
  %289 = and i32 %282, 255
  %290 = call i32 @llvm.ctpop.i32(i32 %289) #16
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %293, i8* %294, align 1, !tbaa !2446
  %295 = xor i32 %281, %279
  %296 = xor i32 %295, %282
  %297 = lshr i32 %296, 4
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %299, i8* %300, align 1, !tbaa !2447
  %301 = icmp eq i32 %282, 0
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %302, i8* %303, align 1, !tbaa !2448
  %304 = lshr i32 %282, 31
  %305 = trunc i32 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %305, i8* %306, align 1, !tbaa !2449
  %307 = lshr i32 %279, 31
  %308 = lshr i32 %281, 31
  %309 = xor i32 %304, %307
  %310 = xor i32 %304, %308
  %311 = add nuw nsw i32 %309, %310
  %312 = icmp eq i32 %311, 2
  %313 = zext i1 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %313, i8* %314, align 1, !tbaa !2450
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 32
  %317 = load i32, i32* %ECX
  %318 = zext i32 %317 to i64
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %316 to i32*
  store i32 %317, i32* %321
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 28
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 7
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i32*
  store i32 1, i32* %326
  br label %block_402bb7

block_402cc4:                                     ; preds = %block_402c57
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 5
  store i64 %330, i64* %PC
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %328, i64* %331, align 8, !tbaa !2428
  br label %block_402cc9

block_402c57:                                     ; preds = %block_402c2d, %block_402cb1
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402c2d ], [ %MEMORY.1, %block_402cb1 ]
  %332 = load i64, i64* %RBP
  %333 = sub i64 %332, 28
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 3
  store i64 %335, i64* %PC
  %336 = inttoptr i64 %333 to i32*
  %337 = load i32, i32* %336
  %338 = zext i32 %337 to i64
  store i64 %338, i64* %RAX, align 8, !tbaa !2428
  %339 = load i32, i32* %EAX
  %340 = zext i32 %339 to i64
  %341 = load i64, i64* %RBP
  %342 = sub i64 %341, 8
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %342 to i32*
  %346 = load i32, i32* %345
  %347 = sub i32 %339, %346
  %348 = icmp ult i32 %339, %346
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %349, i8* %350, align 1, !tbaa !2432
  %351 = and i32 %347, 255
  %352 = call i32 @llvm.ctpop.i32(i32 %351) #16
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  %355 = xor i8 %354, 1
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %355, i8* %356, align 1, !tbaa !2446
  %357 = xor i32 %346, %339
  %358 = xor i32 %357, %347
  %359 = lshr i32 %358, 4
  %360 = trunc i32 %359 to i8
  %361 = and i8 %360, 1
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %361, i8* %362, align 1, !tbaa !2447
  %363 = icmp eq i32 %347, 0
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %364, i8* %365, align 1, !tbaa !2448
  %366 = lshr i32 %347, 31
  %367 = trunc i32 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %367, i8* %368, align 1, !tbaa !2449
  %369 = lshr i32 %339, 31
  %370 = lshr i32 %346, 31
  %371 = xor i32 %370, %369
  %372 = xor i32 %366, %369
  %373 = add nuw nsw i32 %372, %371
  %374 = icmp eq i32 %373, 2
  %375 = zext i1 %374 to i8
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %375, i8* %376, align 1, !tbaa !2450
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 103
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 6
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 6
  store i64 %382, i64* %PC
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %384 = load i8, i8* %383, align 1, !tbaa !2449
  %385 = icmp ne i8 %384, 0
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %387 = load i8, i8* %386, align 1, !tbaa !2450
  %388 = icmp ne i8 %387, 0
  %389 = xor i1 %385, %388
  %390 = xor i1 %389, true
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %393 = select i1 %389, i64 %380, i64 %378
  store i64 %393, i64* %392, align 8, !tbaa !2428
  %394 = load i8, i8* %BRANCH_TAKEN
  %395 = icmp eq i8 %394, 1
  br i1 %395, label %block_402cc4, label %block_402c63

block_402c63:                                     ; preds = %block_402c57
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 16
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 4
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 28
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  %407 = load i32, i32* %406
  %408 = sext i32 %407 to i64
  store i64 %408, i64* %RCX, align 8, !tbaa !2428
  %409 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %410 = load i64, i64* %RAX
  %411 = load i64, i64* %RCX
  %412 = mul i64 %411, 4
  %413 = add i64 %412, %410
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 5
  store i64 %415, i64* %PC
  %416 = inttoptr i64 %413 to float*
  %417 = load float, float* %416
  %418 = fpext float %417 to double
  %419 = bitcast i8* %409 to double*
  store double %418, double* %419, align 1, !tbaa !2454
  %420 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 7
  store i64 %422, i64* %PC
  %423 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %424 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %425 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %426 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %427 = bitcast i8* %420 to float*
  store float %423, float* %427, align 1, !tbaa !2452
  %428 = getelementptr inbounds i8, i8* %420, i64 4
  %429 = bitcast i8* %428 to float*
  store float %424, float* %429, align 1, !tbaa !2452
  %430 = getelementptr inbounds i8, i8* %420, i64 8
  %431 = bitcast i8* %430 to float*
  store float %425, float* %431, align 1, !tbaa !2452
  %432 = getelementptr inbounds i8, i8* %420, i64 12
  %433 = bitcast i8* %432 to float*
  store float %426, float* %433, align 1, !tbaa !2452
  %434 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %435 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %436 = bitcast %union.vec128_t* %XMM1 to i8*
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 4
  store i64 %438, i64* %PC
  %439 = bitcast i8* %435 to i64*
  %440 = load i64, i64* %439, align 1
  %441 = getelementptr inbounds i8, i8* %435, i64 8
  %442 = bitcast i8* %441 to i64*
  %443 = load i64, i64* %442, align 1
  %444 = bitcast i8* %436 to i64*
  %445 = load i64, i64* %444, align 1
  %446 = getelementptr inbounds i8, i8* %436, i64 8
  %447 = bitcast i8* %446 to i64*
  %448 = load i64, i64* %447, align 1
  %449 = and i64 %445, %440
  %450 = and i64 %448, %443
  %451 = trunc i64 %449 to i32
  %452 = lshr i64 %449, 32
  %453 = trunc i64 %452 to i32
  %454 = bitcast i8* %434 to i32*
  store i32 %451, i32* %454, align 1, !tbaa !2456
  %455 = getelementptr inbounds i8, i8* %434, i64 4
  %456 = bitcast i8* %455 to i32*
  store i32 %453, i32* %456, align 1, !tbaa !2456
  %457 = trunc i64 %450 to i32
  %458 = getelementptr inbounds i8, i8* %434, i64 8
  %459 = bitcast i8* %458 to i32*
  store i32 %457, i32* %459, align 1, !tbaa !2456
  %460 = lshr i64 %450, 32
  %461 = trunc i64 %460 to i32
  %462 = getelementptr inbounds i8, i8* %434, i64 12
  %463 = bitcast i8* %462 to i32*
  store i32 %461, i32* %463, align 1, !tbaa !2456
  %464 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %465 = load i64, i64* %RBP
  %466 = sub i64 %465, 24
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 5
  store i64 %468, i64* %PC
  %469 = inttoptr i64 %466 to float*
  %470 = load float, float* %469
  %471 = fpext float %470 to double
  %472 = bitcast i8* %464 to double*
  store double %471, double* %472, align 1, !tbaa !2454
  %473 = bitcast %union.vec128_t* %XMM0 to i8*
  %474 = bitcast %union.vec128_t* %XMM1 to i8*
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 4
  store i64 %476, i64* %PC
  %477 = bitcast i8* %473 to double*
  %478 = load double, double* %477, align 1
  %479 = bitcast i8* %474 to double*
  %480 = load double, double* %479, align 1
  %481 = fcmp uno double %478, %480
  br i1 %481, label %482, label %494

; <label>:482:                                    ; preds = %block_402c63
  %483 = fadd double %478, %480
  %484 = bitcast double %483 to i64
  %485 = and i64 %484, 9221120237041090560
  %486 = icmp eq i64 %485, 9218868437227405312
  %487 = and i64 %484, 2251799813685247
  %488 = icmp ne i64 %487, 0
  %489 = and i1 %486, %488
  br i1 %489, label %490, label %500

; <label>:490:                                    ; preds = %482
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %492 = load i64, i64* %491, align 8, !tbaa !2428
  %493 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %492, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:494:                                    ; preds = %block_402c63
  %495 = fcmp ogt double %478, %480
  br i1 %495, label %500, label %496

; <label>:496:                                    ; preds = %494
  %497 = fcmp olt double %478, %480
  br i1 %497, label %500, label %498

; <label>:498:                                    ; preds = %496
  %499 = fcmp oeq double %478, %480
  br i1 %499, label %500, label %507

; <label>:500:                                    ; preds = %498, %496, %494, %482
  %501 = phi i8 [ 0, %494 ], [ 0, %496 ], [ 1, %498 ], [ 1, %482 ]
  %502 = phi i8 [ 0, %494 ], [ 0, %496 ], [ 0, %498 ], [ 1, %482 ]
  %503 = phi i8 [ 0, %494 ], [ 1, %496 ], [ 0, %498 ], [ 1, %482 ]
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %501, i8* %504, align 1, !tbaa !2451
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %502, i8* %505, align 1, !tbaa !2451
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %503, i8* %506, align 1, !tbaa !2451
  br label %507

; <label>:507:                                    ; preds = %500, %498
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %508, align 1, !tbaa !2451
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %509, align 1, !tbaa !2451
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %510, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %490, %507
  %511 = phi %struct.Memory* [ %493, %490 ], [ %MEMORY.0, %507 ]
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 45
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 6
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 6
  store i64 %517, i64* %PC
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %519 = load i8, i8* %518, align 1, !tbaa !2432
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %521 = load i8, i8* %520, align 1, !tbaa !2448
  %522 = or i8 %521, %519
  %523 = icmp ne i8 %522, 0
  %524 = zext i1 %523 to i8
  store i8 %524, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %526 = select i1 %523, i64 %513, i64 %515
  store i64 %526, i64* %525, align 8, !tbaa !2428
  %527 = load i8, i8* %BRANCH_TAKEN
  %528 = icmp eq i8 %527, 1
  br i1 %528, label %block_402cb1, label %block_402c8a

block_402b58:                                     ; preds = %block_402b40
  %529 = sub i64 %127, 4
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 7
  store i64 %531, i64* %PC
  %532 = inttoptr i64 %529 to i32*
  store i32 -1, i32* %532
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 368
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %534, i64* %537, align 8, !tbaa !2428
  br label %block_402ccf

block_402cb1:                                     ; preds = %block_402c8a, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %MEMORY.1 = phi %struct.Memory* [ %511, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ], [ %511, %block_402c8a ]
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 5
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  store i64 %541, i64* %PC
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %539, i64* %542, align 8, !tbaa !2428
  %543 = load i64, i64* %RBP
  %544 = sub i64 %543, 28
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 3
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547
  %549 = zext i32 %548 to i64
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  %553 = trunc i64 %550 to i32
  %554 = add i32 1, %553
  %555 = zext i32 %554 to i64
  store i64 %555, i64* %RAX, align 8, !tbaa !2428
  %556 = icmp ult i32 %554, %553
  %557 = icmp ult i32 %554, 1
  %558 = or i1 %556, %557
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %559, i8* %560, align 1, !tbaa !2432
  %561 = and i32 %554, 255
  %562 = call i32 @llvm.ctpop.i32(i32 %561) #16
  %563 = trunc i32 %562 to i8
  %564 = and i8 %563, 1
  %565 = xor i8 %564, 1
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %565, i8* %566, align 1, !tbaa !2446
  %567 = xor i64 1, %550
  %568 = trunc i64 %567 to i32
  %569 = xor i32 %568, %554
  %570 = lshr i32 %569, 4
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %572, i8* %573, align 1, !tbaa !2447
  %574 = icmp eq i32 %554, 0
  %575 = zext i1 %574 to i8
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %575, i8* %576, align 1, !tbaa !2448
  %577 = lshr i32 %554, 31
  %578 = trunc i32 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %578, i8* %579, align 1, !tbaa !2449
  %580 = lshr i32 %553, 31
  %581 = xor i32 %577, %580
  %582 = add nuw nsw i32 %581, %577
  %583 = icmp eq i32 %582, 2
  %584 = zext i1 %583 to i8
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %584, i8* %585, align 1, !tbaa !2450
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 28
  %588 = load i32, i32* %EAX
  %589 = zext i32 %588 to i64
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %587 to i32*
  store i32 %588, i32* %592
  %593 = load i64, i64* %PC
  %594 = sub i64 %593, 104
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 5
  store i64 %596, i64* %PC
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %594, i64* %597, align 8, !tbaa !2428
  br label %block_402c57

block_402c2d:                                     ; preds = %block_402b7a
  %598 = sub i64 %174, 36
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 7
  store i64 %600, i64* %PC
  %601 = inttoptr i64 %598 to i32*
  store i32 0, i32* %601
  %602 = load i64, i64* %RBP
  %603 = sub i64 %602, 16
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 4
  store i64 %605, i64* %PC
  %606 = inttoptr i64 %603 to i64*
  %607 = load i64, i64* %606
  store i64 %607, i64* %RAX, align 8, !tbaa !2428
  %608 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %609 = load i64, i64* %RAX
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC
  %612 = inttoptr i64 %609 to float*
  %613 = load float, float* %612
  %614 = fpext float %613 to double
  %615 = bitcast i8* %608 to double*
  store double %614, double* %615, align 1, !tbaa !2454
  %616 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 7
  store i64 %618, i64* %PC
  %619 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %620 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %621 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %622 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %623 = bitcast i8* %616 to float*
  store float %619, float* %623, align 1, !tbaa !2452
  %624 = getelementptr inbounds i8, i8* %616, i64 4
  %625 = bitcast i8* %624 to float*
  store float %620, float* %625, align 1, !tbaa !2452
  %626 = getelementptr inbounds i8, i8* %616, i64 8
  %627 = bitcast i8* %626 to float*
  store float %621, float* %627, align 1, !tbaa !2452
  %628 = getelementptr inbounds i8, i8* %616, i64 12
  %629 = bitcast i8* %628 to float*
  store float %622, float* %629, align 1, !tbaa !2452
  %630 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %631 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %632 = bitcast %union.vec128_t* %XMM1 to i8*
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC
  %635 = bitcast i8* %631 to i64*
  %636 = load i64, i64* %635, align 1
  %637 = getelementptr inbounds i8, i8* %631, i64 8
  %638 = bitcast i8* %637 to i64*
  %639 = load i64, i64* %638, align 1
  %640 = bitcast i8* %632 to i64*
  %641 = load i64, i64* %640, align 1
  %642 = getelementptr inbounds i8, i8* %632, i64 8
  %643 = bitcast i8* %642 to i64*
  %644 = load i64, i64* %643, align 1
  %645 = and i64 %641, %636
  %646 = and i64 %644, %639
  %647 = trunc i64 %645 to i32
  %648 = lshr i64 %645, 32
  %649 = trunc i64 %648 to i32
  %650 = bitcast i8* %630 to i32*
  store i32 %647, i32* %650, align 1, !tbaa !2456
  %651 = getelementptr inbounds i8, i8* %630, i64 4
  %652 = bitcast i8* %651 to i32*
  store i32 %649, i32* %652, align 1, !tbaa !2456
  %653 = trunc i64 %646 to i32
  %654 = getelementptr inbounds i8, i8* %630, i64 8
  %655 = bitcast i8* %654 to i32*
  store i32 %653, i32* %655, align 1, !tbaa !2456
  %656 = lshr i64 %646, 32
  %657 = trunc i64 %656 to i32
  %658 = getelementptr inbounds i8, i8* %630, i64 12
  %659 = bitcast i8* %658 to i32*
  store i32 %657, i32* %659, align 1, !tbaa !2456
  %660 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %661 = bitcast %union.vec128_t* %XMM0 to i8*
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 4
  store i64 %663, i64* %PC
  %664 = bitcast i8* %660 to <2 x i32>*
  %665 = load <2 x i32>, <2 x i32>* %664, align 1
  %666 = getelementptr inbounds i8, i8* %660, i64 8
  %667 = bitcast i8* %666 to <2 x i32>*
  %668 = load <2 x i32>, <2 x i32>* %667, align 1
  %669 = bitcast i8* %661 to double*
  %670 = load double, double* %669, align 1
  %671 = fptrunc double %670 to float
  %672 = bitcast i8* %660 to float*
  store float %671, float* %672, align 1, !tbaa !2452
  %673 = extractelement <2 x i32> %665, i32 1
  %674 = getelementptr inbounds i8, i8* %660, i64 4
  %675 = bitcast i8* %674 to i32*
  store i32 %673, i32* %675, align 1, !tbaa !2452
  %676 = extractelement <2 x i32> %668, i32 0
  %677 = bitcast i8* %666 to i32*
  store i32 %676, i32* %677, align 1, !tbaa !2452
  %678 = extractelement <2 x i32> %668, i32 1
  %679 = getelementptr inbounds i8, i8* %660, i64 12
  %680 = bitcast i8* %679 to i32*
  store i32 %678, i32* %680, align 1, !tbaa !2452
  %681 = load i64, i64* %RBP
  %682 = sub i64 %681, 24
  %683 = bitcast %union.vec128_t* %XMM0 to i8*
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  %686 = bitcast i8* %683 to <2 x float>*
  %687 = load <2 x float>, <2 x float>* %686, align 1
  %688 = extractelement <2 x float> %687, i32 0
  %689 = inttoptr i64 %682 to float*
  store float %688, float* %689
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 28
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 7
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i32*
  store i32 1, i32* %694
  br label %block_402c57

block_402bb7:                                     ; preds = %block_402c11, %block_402b84
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_402b84 ], [ %MEMORY.4, %block_402c11 ]
  %695 = load i64, i64* %RBP
  %696 = sub i64 %695, 28
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 3
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  %700 = load i32, i32* %699
  %701 = zext i32 %700 to i64
  store i64 %701, i64* %RAX, align 8, !tbaa !2428
  %702 = load i32, i32* %EAX
  %703 = zext i32 %702 to i64
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 8
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 3
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i32*
  %709 = load i32, i32* %708
  %710 = sub i32 %702, %709
  %711 = icmp ult i32 %702, %709
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = and i32 %710, 255
  %715 = call i32 @llvm.ctpop.i32(i32 %714) #16
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %718, i8* %719, align 1, !tbaa !2446
  %720 = xor i32 %709, %702
  %721 = xor i32 %720, %710
  %722 = lshr i32 %721, 4
  %723 = trunc i32 %722 to i8
  %724 = and i8 %723, 1
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %724, i8* %725, align 1, !tbaa !2447
  %726 = icmp eq i32 %710, 0
  %727 = zext i1 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %727, i8* %728, align 1, !tbaa !2448
  %729 = lshr i32 %710, 31
  %730 = trunc i32 %729 to i8
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %730, i8* %731, align 1, !tbaa !2449
  %732 = lshr i32 %702, 31
  %733 = lshr i32 %709, 31
  %734 = xor i32 %733, %732
  %735 = xor i32 %729, %732
  %736 = add nuw nsw i32 %735, %734
  %737 = icmp eq i32 %736, 2
  %738 = zext i1 %737 to i8
  %739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %738, i8* %739, align 1, !tbaa !2450
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 107
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 6
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 6
  store i64 %745, i64* %PC
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %747 = load i8, i8* %746, align 1, !tbaa !2449
  %748 = icmp ne i8 %747, 0
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %750 = load i8, i8* %749, align 1, !tbaa !2450
  %751 = icmp ne i8 %750, 0
  %752 = xor i1 %748, %751
  %753 = xor i1 %752, true
  %754 = zext i1 %753 to i8
  store i8 %754, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %756 = select i1 %752, i64 %743, i64 %741
  store i64 %756, i64* %755, align 8, !tbaa !2428
  %757 = load i8, i8* %BRANCH_TAKEN
  %758 = icmp eq i8 %757, 1
  br i1 %758, label %block_402c28, label %block_402bc3

block_402bea:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %759 = load i64, i64* %RBP
  %760 = sub i64 %759, 28
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 3
  store i64 %762, i64* %PC
  %763 = inttoptr i64 %760 to i32*
  %764 = load i32, i32* %763
  %765 = zext i32 %764 to i64
  store i64 %765, i64* %RAX, align 8, !tbaa !2428
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 36
  %768 = load i32, i32* %EAX
  %769 = zext i32 %768 to i64
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 3
  store i64 %771, i64* %PC
  %772 = inttoptr i64 %767 to i32*
  store i32 %768, i32* %772
  %773 = load i64, i64* %RBP
  %774 = sub i64 %773, 16
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 4
  store i64 %776, i64* %PC
  %777 = inttoptr i64 %774 to i64*
  %778 = load i64, i64* %777
  store i64 %778, i64* %RCX, align 8, !tbaa !2428
  %779 = load i64, i64* %RBP
  %780 = sub i64 %779, 32
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 4
  store i64 %782, i64* %PC
  %783 = inttoptr i64 %780 to i32*
  %784 = load i32, i32* %783
  %785 = sext i32 %784 to i64
  store i64 %785, i64* %RDX, align 8, !tbaa !2428
  %786 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %787 = load i64, i64* %RCX
  %788 = load i64, i64* %RDX
  %789 = mul i64 %788, 4
  %790 = add i64 %789, %787
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 5
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %790 to float*
  %794 = load float, float* %793
  %795 = fpext float %794 to double
  %796 = bitcast i8* %786 to double*
  store double %795, double* %796, align 1, !tbaa !2454
  %797 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 7
  store i64 %799, i64* %PC
  %800 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %801 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %802 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %803 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %804 = bitcast i8* %797 to float*
  store float %800, float* %804, align 1, !tbaa !2452
  %805 = getelementptr inbounds i8, i8* %797, i64 4
  %806 = bitcast i8* %805 to float*
  store float %801, float* %806, align 1, !tbaa !2452
  %807 = getelementptr inbounds i8, i8* %797, i64 8
  %808 = bitcast i8* %807 to float*
  store float %802, float* %808, align 1, !tbaa !2452
  %809 = getelementptr inbounds i8, i8* %797, i64 12
  %810 = bitcast i8* %809 to float*
  store float %803, float* %810, align 1, !tbaa !2452
  %811 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %812 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %813 = bitcast %union.vec128_t* %XMM1 to i8*
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 4
  store i64 %815, i64* %PC
  %816 = bitcast i8* %812 to i64*
  %817 = load i64, i64* %816, align 1
  %818 = getelementptr inbounds i8, i8* %812, i64 8
  %819 = bitcast i8* %818 to i64*
  %820 = load i64, i64* %819, align 1
  %821 = bitcast i8* %813 to i64*
  %822 = load i64, i64* %821, align 1
  %823 = getelementptr inbounds i8, i8* %813, i64 8
  %824 = bitcast i8* %823 to i64*
  %825 = load i64, i64* %824, align 1
  %826 = and i64 %822, %817
  %827 = and i64 %825, %820
  %828 = trunc i64 %826 to i32
  %829 = lshr i64 %826, 32
  %830 = trunc i64 %829 to i32
  %831 = bitcast i8* %811 to i32*
  store i32 %828, i32* %831, align 1, !tbaa !2456
  %832 = getelementptr inbounds i8, i8* %811, i64 4
  %833 = bitcast i8* %832 to i32*
  store i32 %830, i32* %833, align 1, !tbaa !2456
  %834 = trunc i64 %827 to i32
  %835 = getelementptr inbounds i8, i8* %811, i64 8
  %836 = bitcast i8* %835 to i32*
  store i32 %834, i32* %836, align 1, !tbaa !2456
  %837 = lshr i64 %827, 32
  %838 = trunc i64 %837 to i32
  %839 = getelementptr inbounds i8, i8* %811, i64 12
  %840 = bitcast i8* %839 to i32*
  store i32 %838, i32* %840, align 1, !tbaa !2456
  %841 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %842 = bitcast %union.vec128_t* %XMM0 to i8*
  %843 = load i64, i64* %PC
  %844 = add i64 %843, 4
  store i64 %844, i64* %PC
  %845 = bitcast i8* %841 to <2 x i32>*
  %846 = load <2 x i32>, <2 x i32>* %845, align 1
  %847 = getelementptr inbounds i8, i8* %841, i64 8
  %848 = bitcast i8* %847 to <2 x i32>*
  %849 = load <2 x i32>, <2 x i32>* %848, align 1
  %850 = bitcast i8* %842 to double*
  %851 = load double, double* %850, align 1
  %852 = fptrunc double %851 to float
  %853 = bitcast i8* %841 to float*
  store float %852, float* %853, align 1, !tbaa !2452
  %854 = extractelement <2 x i32> %846, i32 1
  %855 = getelementptr inbounds i8, i8* %841, i64 4
  %856 = bitcast i8* %855 to i32*
  store i32 %854, i32* %856, align 1, !tbaa !2452
  %857 = extractelement <2 x i32> %849, i32 0
  %858 = bitcast i8* %847 to i32*
  store i32 %857, i32* %858, align 1, !tbaa !2452
  %859 = extractelement <2 x i32> %849, i32 1
  %860 = getelementptr inbounds i8, i8* %841, i64 12
  %861 = bitcast i8* %860 to i32*
  store i32 %859, i32* %861, align 1, !tbaa !2452
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 24
  %864 = bitcast %union.vec128_t* %XMM0 to i8*
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 5
  store i64 %866, i64* %PC
  %867 = bitcast i8* %864 to <2 x float>*
  %868 = load <2 x float>, <2 x float>* %867, align 1
  %869 = extractelement <2 x float> %868, i32 0
  %870 = inttoptr i64 %863 to float*
  store float %869, float* %870
  br label %block_402c11

block_402cc9:                                     ; preds = %block_402c28, %block_402cc4
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_402cc4 ], [ %MEMORY.2, %block_402c28 ]
  %871 = load i64, i64* %RBP
  %872 = sub i64 %871, 36
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 3
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %872 to i32*
  %876 = load i32, i32* %875
  %877 = zext i32 %876 to i64
  store i64 %877, i64* %RAX, align 8, !tbaa !2428
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 4
  %880 = load i32, i32* %EAX
  %881 = zext i32 %880 to i64
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 3
  store i64 %883, i64* %PC
  %884 = inttoptr i64 %879 to i32*
  store i32 %880, i32* %884
  br label %block_402ccf

block_402c28:                                     ; preds = %block_402bb7
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 161
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  store i64 %888, i64* %PC
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %886, i64* %889, align 8, !tbaa !2428
  br label %block_402cc9

block_402c11:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402bea
  %MEMORY.4 = phi %struct.Memory* [ %1297, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %1297, %block_402bea ]
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 32
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 3
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894
  %896 = zext i32 %895 to i64
  store i64 %896, i64* %RAX, align 8, !tbaa !2428
  %897 = load i64, i64* %RAX
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 20
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 3
  store i64 %901, i64* %PC
  %902 = trunc i64 %897 to i32
  %903 = inttoptr i64 %899 to i32*
  %904 = load i32, i32* %903
  %905 = add i32 %904, %902
  %906 = zext i32 %905 to i64
  store i64 %906, i64* %RAX, align 8, !tbaa !2428
  %907 = icmp ult i32 %905, %902
  %908 = icmp ult i32 %905, %904
  %909 = or i1 %907, %908
  %910 = zext i1 %909 to i8
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %910, i8* %911, align 1, !tbaa !2432
  %912 = and i32 %905, 255
  %913 = call i32 @llvm.ctpop.i32(i32 %912) #16
  %914 = trunc i32 %913 to i8
  %915 = and i8 %914, 1
  %916 = xor i8 %915, 1
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %916, i8* %917, align 1, !tbaa !2446
  %918 = xor i32 %904, %902
  %919 = xor i32 %918, %905
  %920 = lshr i32 %919, 4
  %921 = trunc i32 %920 to i8
  %922 = and i8 %921, 1
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %922, i8* %923, align 1, !tbaa !2447
  %924 = icmp eq i32 %905, 0
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %925, i8* %926, align 1, !tbaa !2448
  %927 = lshr i32 %905, 31
  %928 = trunc i32 %927 to i8
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %928, i8* %929, align 1, !tbaa !2449
  %930 = lshr i32 %902, 31
  %931 = lshr i32 %904, 31
  %932 = xor i32 %927, %930
  %933 = xor i32 %927, %931
  %934 = add nuw nsw i32 %932, %933
  %935 = icmp eq i32 %934, 2
  %936 = zext i1 %935 to i8
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %936, i8* %937, align 1, !tbaa !2450
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 32
  %940 = load i32, i32* %EAX
  %941 = zext i32 %940 to i64
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 3
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %939 to i32*
  store i32 %940, i32* %944
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 28
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 3
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i32*
  %950 = load i32, i32* %949
  %951 = zext i32 %950 to i64
  store i64 %951, i64* %RAX, align 8, !tbaa !2428
  %952 = load i64, i64* %RAX
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 3
  store i64 %954, i64* %PC
  %955 = trunc i64 %952 to i32
  %956 = add i32 1, %955
  %957 = zext i32 %956 to i64
  store i64 %957, i64* %RAX, align 8, !tbaa !2428
  %958 = icmp ult i32 %956, %955
  %959 = icmp ult i32 %956, 1
  %960 = or i1 %958, %959
  %961 = zext i1 %960 to i8
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %961, i8* %962, align 1, !tbaa !2432
  %963 = and i32 %956, 255
  %964 = call i32 @llvm.ctpop.i32(i32 %963) #16
  %965 = trunc i32 %964 to i8
  %966 = and i8 %965, 1
  %967 = xor i8 %966, 1
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %967, i8* %968, align 1, !tbaa !2446
  %969 = xor i64 1, %952
  %970 = trunc i64 %969 to i32
  %971 = xor i32 %970, %956
  %972 = lshr i32 %971, 4
  %973 = trunc i32 %972 to i8
  %974 = and i8 %973, 1
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %974, i8* %975, align 1, !tbaa !2447
  %976 = icmp eq i32 %956, 0
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %977, i8* %978, align 1, !tbaa !2448
  %979 = lshr i32 %956, 31
  %980 = trunc i32 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %980, i8* %981, align 1, !tbaa !2449
  %982 = lshr i32 %955, 31
  %983 = xor i32 %979, %982
  %984 = add nuw nsw i32 %983, %979
  %985 = icmp eq i32 %984, 2
  %986 = zext i1 %985 to i8
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %986, i8* %987, align 1, !tbaa !2450
  %988 = load i64, i64* %RBP
  %989 = sub i64 %988, 28
  %990 = load i32, i32* %EAX
  %991 = zext i32 %990 to i64
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 3
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %989 to i32*
  store i32 %990, i32* %994
  %995 = load i64, i64* %PC
  %996 = sub i64 %995, 108
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 5
  store i64 %998, i64* %PC
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %996, i64* %999, align 8, !tbaa !2428
  br label %block_402bb7

block_402ccf:                                     ; preds = %block_402b6e, %block_402cc9, %block_402b58
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.3, %block_402cc9 ], [ %2, %block_402b6e ], [ %2, %block_402b58 ]
  %1000 = load i64, i64* %RBP
  %1001 = sub i64 %1000, 4
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 3
  store i64 %1003, i64* %PC
  %1004 = inttoptr i64 %1001 to i32*
  %1005 = load i32, i32* %1004
  %1006 = zext i32 %1005 to i64
  store i64 %1006, i64* %RAX, align 8, !tbaa !2428
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 1
  store i64 %1008, i64* %PC
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1010 = load i64, i64* %1009, align 8, !tbaa !2428
  %1011 = add i64 %1010, 8
  %1012 = inttoptr i64 %1010 to i64*
  %1013 = load i64, i64* %1012
  store i64 %1013, i64* %RBP, align 8, !tbaa !2428
  store i64 %1011, i64* %1009, align 8, !tbaa !2428
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 1
  store i64 %1015, i64* %PC
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1018 = load i64, i64* %1017, align 8, !tbaa !2428
  %1019 = inttoptr i64 %1018 to i64*
  %1020 = load i64, i64* %1019
  store i64 %1020, i64* %1016, align 8, !tbaa !2428
  %1021 = add i64 %1018, 8
  store i64 %1021, i64* %1017, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_402c8a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1022 = load i64, i64* %RBP
  %1023 = sub i64 %1022, 28
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 3
  store i64 %1025, i64* %PC
  %1026 = inttoptr i64 %1023 to i32*
  %1027 = load i32, i32* %1026
  %1028 = zext i32 %1027 to i64
  store i64 %1028, i64* %RAX, align 8, !tbaa !2428
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 36
  %1031 = load i32, i32* %EAX
  %1032 = zext i32 %1031 to i64
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 3
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1030 to i32*
  store i32 %1031, i32* %1035
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 16
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 4
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i64*
  %1041 = load i64, i64* %1040
  store i64 %1041, i64* %RCX, align 8, !tbaa !2428
  %1042 = load i64, i64* %RBP
  %1043 = sub i64 %1042, 28
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 4
  store i64 %1045, i64* %PC
  %1046 = inttoptr i64 %1043 to i32*
  %1047 = load i32, i32* %1046
  %1048 = sext i32 %1047 to i64
  store i64 %1048, i64* %RDX, align 8, !tbaa !2428
  %1049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1050 = load i64, i64* %RCX
  %1051 = load i64, i64* %RDX
  %1052 = mul i64 %1051, 4
  %1053 = add i64 %1052, %1050
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 5
  store i64 %1055, i64* %PC
  %1056 = inttoptr i64 %1053 to float*
  %1057 = load float, float* %1056
  %1058 = fpext float %1057 to double
  %1059 = bitcast i8* %1049 to double*
  store double %1058, double* %1059, align 1, !tbaa !2454
  %1060 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 7
  store i64 %1062, i64* %PC
  %1063 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %1064 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %1065 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %1066 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %1067 = bitcast i8* %1060 to float*
  store float %1063, float* %1067, align 1, !tbaa !2452
  %1068 = getelementptr inbounds i8, i8* %1060, i64 4
  %1069 = bitcast i8* %1068 to float*
  store float %1064, float* %1069, align 1, !tbaa !2452
  %1070 = getelementptr inbounds i8, i8* %1060, i64 8
  %1071 = bitcast i8* %1070 to float*
  store float %1065, float* %1071, align 1, !tbaa !2452
  %1072 = getelementptr inbounds i8, i8* %1060, i64 12
  %1073 = bitcast i8* %1072 to float*
  store float %1066, float* %1073, align 1, !tbaa !2452
  %1074 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1075 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1076 = bitcast %union.vec128_t* %XMM1 to i8*
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 4
  store i64 %1078, i64* %PC
  %1079 = bitcast i8* %1075 to i64*
  %1080 = load i64, i64* %1079, align 1
  %1081 = getelementptr inbounds i8, i8* %1075, i64 8
  %1082 = bitcast i8* %1081 to i64*
  %1083 = load i64, i64* %1082, align 1
  %1084 = bitcast i8* %1076 to i64*
  %1085 = load i64, i64* %1084, align 1
  %1086 = getelementptr inbounds i8, i8* %1076, i64 8
  %1087 = bitcast i8* %1086 to i64*
  %1088 = load i64, i64* %1087, align 1
  %1089 = and i64 %1085, %1080
  %1090 = and i64 %1088, %1083
  %1091 = trunc i64 %1089 to i32
  %1092 = lshr i64 %1089, 32
  %1093 = trunc i64 %1092 to i32
  %1094 = bitcast i8* %1074 to i32*
  store i32 %1091, i32* %1094, align 1, !tbaa !2456
  %1095 = getelementptr inbounds i8, i8* %1074, i64 4
  %1096 = bitcast i8* %1095 to i32*
  store i32 %1093, i32* %1096, align 1, !tbaa !2456
  %1097 = trunc i64 %1090 to i32
  %1098 = getelementptr inbounds i8, i8* %1074, i64 8
  %1099 = bitcast i8* %1098 to i32*
  store i32 %1097, i32* %1099, align 1, !tbaa !2456
  %1100 = lshr i64 %1090, 32
  %1101 = trunc i64 %1100 to i32
  %1102 = getelementptr inbounds i8, i8* %1074, i64 12
  %1103 = bitcast i8* %1102 to i32*
  store i32 %1101, i32* %1103, align 1, !tbaa !2456
  %1104 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1105 = bitcast %union.vec128_t* %XMM0 to i8*
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 4
  store i64 %1107, i64* %PC
  %1108 = bitcast i8* %1104 to <2 x i32>*
  %1109 = load <2 x i32>, <2 x i32>* %1108, align 1
  %1110 = getelementptr inbounds i8, i8* %1104, i64 8
  %1111 = bitcast i8* %1110 to <2 x i32>*
  %1112 = load <2 x i32>, <2 x i32>* %1111, align 1
  %1113 = bitcast i8* %1105 to double*
  %1114 = load double, double* %1113, align 1
  %1115 = fptrunc double %1114 to float
  %1116 = bitcast i8* %1104 to float*
  store float %1115, float* %1116, align 1, !tbaa !2452
  %1117 = extractelement <2 x i32> %1109, i32 1
  %1118 = getelementptr inbounds i8, i8* %1104, i64 4
  %1119 = bitcast i8* %1118 to i32*
  store i32 %1117, i32* %1119, align 1, !tbaa !2452
  %1120 = extractelement <2 x i32> %1112, i32 0
  %1121 = bitcast i8* %1110 to i32*
  store i32 %1120, i32* %1121, align 1, !tbaa !2452
  %1122 = extractelement <2 x i32> %1112, i32 1
  %1123 = getelementptr inbounds i8, i8* %1104, i64 12
  %1124 = bitcast i8* %1123 to i32*
  store i32 %1122, i32* %1124, align 1, !tbaa !2452
  %1125 = load i64, i64* %RBP
  %1126 = sub i64 %1125, 24
  %1127 = bitcast %union.vec128_t* %XMM0 to i8*
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 5
  store i64 %1129, i64* %PC
  %1130 = bitcast i8* %1127 to <2 x float>*
  %1131 = load <2 x float>, <2 x float>* %1130, align 1
  %1132 = extractelement <2 x float> %1131, i32 0
  %1133 = inttoptr i64 %1126 to float*
  store float %1132, float* %1133
  br label %block_402cb1

block_402b64:                                     ; preds = %block_402b40
  %1134 = sub i64 %127, 8
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 4
  store i64 %1136, i64* %PC
  %1137 = inttoptr i64 %1134 to i32*
  %1138 = load i32, i32* %1137
  %1139 = sub i32 %1138, 1
  %1140 = icmp ult i32 %1138, 1
  %1141 = zext i1 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1141, i8* %1142, align 1, !tbaa !2432
  %1143 = and i32 %1139, 255
  %1144 = call i32 @llvm.ctpop.i32(i32 %1143) #16
  %1145 = trunc i32 %1144 to i8
  %1146 = and i8 %1145, 1
  %1147 = xor i8 %1146, 1
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1147, i8* %1148, align 1, !tbaa !2446
  %1149 = xor i32 %1138, 1
  %1150 = xor i32 %1149, %1139
  %1151 = lshr i32 %1150, 4
  %1152 = trunc i32 %1151 to i8
  %1153 = and i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1153, i8* %1154, align 1, !tbaa !2447
  %1155 = icmp eq i32 %1139, 0
  %1156 = zext i1 %1155 to i8
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1156, i8* %1157, align 1, !tbaa !2448
  %1158 = lshr i32 %1139, 31
  %1159 = trunc i32 %1158 to i8
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1159, i8* %1160, align 1, !tbaa !2449
  %1161 = lshr i32 %1138, 31
  %1162 = xor i32 %1158, %1161
  %1163 = add nuw nsw i32 %1162, %1161
  %1164 = icmp eq i32 %1163, 2
  %1165 = zext i1 %1164 to i8
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1165, i8* %1166, align 1, !tbaa !2450
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 18
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 6
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 6
  store i64 %1172, i64* %PC
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1174 = load i8, i8* %1173, align 1, !tbaa !2448
  %1175 = icmp eq i8 %1174, 0
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1178 = select i1 %1175, i64 %1168, i64 %1170
  store i64 %1178, i64* %1177, align 8, !tbaa !2428
  %1179 = load i8, i8* %BRANCH_TAKEN
  %1180 = icmp eq i8 %1179, 1
  %1181 = load i64, i64* %RBP
  br i1 %1180, label %block_402b7a, label %block_402b6e

block_402bc3:                                     ; preds = %block_402bb7
  %1182 = load i64, i64* %RBP
  %1183 = sub i64 %1182, 16
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 4
  store i64 %1185, i64* %PC
  %1186 = inttoptr i64 %1183 to i64*
  %1187 = load i64, i64* %1186
  store i64 %1187, i64* %RAX, align 8, !tbaa !2428
  %1188 = load i64, i64* %RBP
  %1189 = sub i64 %1188, 32
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 4
  store i64 %1191, i64* %PC
  %1192 = inttoptr i64 %1189 to i32*
  %1193 = load i32, i32* %1192
  %1194 = sext i32 %1193 to i64
  store i64 %1194, i64* %RCX, align 8, !tbaa !2428
  %1195 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1196 = load i64, i64* %RAX
  %1197 = load i64, i64* %RCX
  %1198 = mul i64 %1197, 4
  %1199 = add i64 %1198, %1196
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 5
  store i64 %1201, i64* %PC
  %1202 = inttoptr i64 %1199 to float*
  %1203 = load float, float* %1202
  %1204 = fpext float %1203 to double
  %1205 = bitcast i8* %1195 to double*
  store double %1204, double* %1205, align 1, !tbaa !2454
  %1206 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 7
  store i64 %1208, i64* %PC
  %1209 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to float*)
  %1210 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to float*)
  %1211 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to float*)
  %1212 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to float*)
  %1213 = bitcast i8* %1206 to float*
  store float %1209, float* %1213, align 1, !tbaa !2452
  %1214 = getelementptr inbounds i8, i8* %1206, i64 4
  %1215 = bitcast i8* %1214 to float*
  store float %1210, float* %1215, align 1, !tbaa !2452
  %1216 = getelementptr inbounds i8, i8* %1206, i64 8
  %1217 = bitcast i8* %1216 to float*
  store float %1211, float* %1217, align 1, !tbaa !2452
  %1218 = getelementptr inbounds i8, i8* %1206, i64 12
  %1219 = bitcast i8* %1218 to float*
  store float %1212, float* %1219, align 1, !tbaa !2452
  %1220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1222 = bitcast %union.vec128_t* %XMM1 to i8*
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 4
  store i64 %1224, i64* %PC
  %1225 = bitcast i8* %1221 to i64*
  %1226 = load i64, i64* %1225, align 1
  %1227 = getelementptr inbounds i8, i8* %1221, i64 8
  %1228 = bitcast i8* %1227 to i64*
  %1229 = load i64, i64* %1228, align 1
  %1230 = bitcast i8* %1222 to i64*
  %1231 = load i64, i64* %1230, align 1
  %1232 = getelementptr inbounds i8, i8* %1222, i64 8
  %1233 = bitcast i8* %1232 to i64*
  %1234 = load i64, i64* %1233, align 1
  %1235 = and i64 %1231, %1226
  %1236 = and i64 %1234, %1229
  %1237 = trunc i64 %1235 to i32
  %1238 = lshr i64 %1235, 32
  %1239 = trunc i64 %1238 to i32
  %1240 = bitcast i8* %1220 to i32*
  store i32 %1237, i32* %1240, align 1, !tbaa !2456
  %1241 = getelementptr inbounds i8, i8* %1220, i64 4
  %1242 = bitcast i8* %1241 to i32*
  store i32 %1239, i32* %1242, align 1, !tbaa !2456
  %1243 = trunc i64 %1236 to i32
  %1244 = getelementptr inbounds i8, i8* %1220, i64 8
  %1245 = bitcast i8* %1244 to i32*
  store i32 %1243, i32* %1245, align 1, !tbaa !2456
  %1246 = lshr i64 %1236, 32
  %1247 = trunc i64 %1246 to i32
  %1248 = getelementptr inbounds i8, i8* %1220, i64 12
  %1249 = bitcast i8* %1248 to i32*
  store i32 %1247, i32* %1249, align 1, !tbaa !2456
  %1250 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1251 = load i64, i64* %RBP
  %1252 = sub i64 %1251, 24
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 5
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1252 to float*
  %1256 = load float, float* %1255
  %1257 = fpext float %1256 to double
  %1258 = bitcast i8* %1250 to double*
  store double %1257, double* %1258, align 1, !tbaa !2454
  %1259 = bitcast %union.vec128_t* %XMM0 to i8*
  %1260 = bitcast %union.vec128_t* %XMM1 to i8*
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 4
  store i64 %1262, i64* %PC
  %1263 = bitcast i8* %1259 to double*
  %1264 = load double, double* %1263, align 1
  %1265 = bitcast i8* %1260 to double*
  %1266 = load double, double* %1265, align 1
  %1267 = fcmp uno double %1264, %1266
  br i1 %1267, label %1268, label %1280

; <label>:1268:                                   ; preds = %block_402bc3
  %1269 = fadd double %1264, %1266
  %1270 = bitcast double %1269 to i64
  %1271 = and i64 %1270, 9221120237041090560
  %1272 = icmp eq i64 %1271, 9218868437227405312
  %1273 = and i64 %1270, 2251799813685247
  %1274 = icmp ne i64 %1273, 0
  %1275 = and i1 %1272, %1274
  br i1 %1275, label %1276, label %1286

; <label>:1276:                                   ; preds = %1268
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1278 = load i64, i64* %1277, align 8, !tbaa !2428
  %1279 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1278, %struct.Memory* %MEMORY.2) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1280:                                   ; preds = %block_402bc3
  %1281 = fcmp ogt double %1264, %1266
  br i1 %1281, label %1286, label %1282

; <label>:1282:                                   ; preds = %1280
  %1283 = fcmp olt double %1264, %1266
  br i1 %1283, label %1286, label %1284

; <label>:1284:                                   ; preds = %1282
  %1285 = fcmp oeq double %1264, %1266
  br i1 %1285, label %1286, label %1293

; <label>:1286:                                   ; preds = %1284, %1282, %1280, %1268
  %1287 = phi i8 [ 0, %1280 ], [ 0, %1282 ], [ 1, %1284 ], [ 1, %1268 ]
  %1288 = phi i8 [ 0, %1280 ], [ 0, %1282 ], [ 0, %1284 ], [ 1, %1268 ]
  %1289 = phi i8 [ 0, %1280 ], [ 1, %1282 ], [ 0, %1284 ], [ 1, %1268 ]
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1287, i8* %1290, align 1, !tbaa !2451
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1288, i8* %1291, align 1, !tbaa !2451
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1289, i8* %1292, align 1, !tbaa !2451
  br label %1293

; <label>:1293:                                   ; preds = %1286, %1284
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1294, align 1, !tbaa !2451
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1295, align 1, !tbaa !2451
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1296, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1276, %1293
  %1297 = phi %struct.Memory* [ %1279, %1276 ], [ %MEMORY.2, %1293 ]
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 45
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 6
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 6
  store i64 %1303, i64* %PC
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1305 = load i8, i8* %1304, align 1, !tbaa !2432
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1307 = load i8, i8* %1306, align 1, !tbaa !2448
  %1308 = or i8 %1307, %1305
  %1309 = icmp ne i8 %1308, 0
  %1310 = zext i1 %1309 to i8
  store i8 %1310, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1312 = select i1 %1309, i64 %1299, i64 %1301
  store i64 %1312, i64* %1311, align 8, !tbaa !2428
  %1313 = load i8, i8* %BRANCH_TAKEN
  %1314 = icmp eq i8 %1313, 1
  br i1 %1314, label %block_402c11, label %block_402bea

block_402b6e:                                     ; preds = %block_402b64
  %1315 = sub i64 %1181, 4
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 7
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1315 to i32*
  store i32 0, i32* %1318
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 346
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 5
  store i64 %1322, i64* %PC
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1320, i64* %1323, align 8, !tbaa !2428
  br label %block_402ccf
}

; Function Attrs: noinline
define %struct.Memory* @sub_4029e0_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4029e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %43 to %union.vec128_t*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %55 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %56 = bitcast %union.vec128_t* %XMM0 to i8*
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = bitcast i8* %55 to i64*
  %60 = load i64, i64* %59, align 1
  %61 = getelementptr inbounds i8, i8* %55, i64 8
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 1
  %64 = bitcast i8* %56 to i64*
  %65 = load i64, i64* %64, align 1
  %66 = getelementptr inbounds i8, i8* %56, i64 8
  %67 = bitcast i8* %66 to i64*
  %68 = load i64, i64* %67, align 1
  %69 = xor i64 %65, %60
  %70 = xor i64 %68, %63
  %71 = trunc i64 %69 to i32
  %72 = lshr i64 %69, 32
  %73 = trunc i64 %72 to i32
  %74 = bitcast i8* %54 to i32*
  store i32 %71, i32* %74, align 1, !tbaa !2456
  %75 = getelementptr inbounds i8, i8* %54, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %73, i32* %76, align 1, !tbaa !2456
  %77 = trunc i64 %70 to i32
  %78 = getelementptr inbounds i8, i8* %54, i64 8
  %79 = bitcast i8* %78 to i32*
  store i32 %77, i32* %79, align 1, !tbaa !2456
  %80 = lshr i64 %70, 32
  %81 = trunc i64 %80 to i32
  %82 = getelementptr inbounds i8, i8* %54, i64 12
  %83 = bitcast i8* %82 to i32*
  store i32 %81, i32* %83, align 1, !tbaa !2456
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i32, i32* %EDI
  %87 = zext i32 %86 to i64
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %RSI
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %92 to i64*
  store i64 %93, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 20
  %99 = load i32, i32* %EDX
  %100 = zext i32 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %98 to i32*
  store i32 %99, i32* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 32
  %106 = load i64, i64* %RCX
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %105 to i64*
  store i64 %106, i64* %109
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 36
  %112 = load i32, i32* %R8D
  %113 = zext i32 %112 to i64
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %111 to i32*
  store i32 %112, i32* %116
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 60
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 56
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 7
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  store i32 0, i32* %126
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 40
  %129 = bitcast %union.vec128_t* %XMM0 to i8*
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = bitcast i8* %129 to <2 x float>*
  %133 = load <2 x float>, <2 x float>* %132, align 1
  %134 = extractelement <2 x float> %133, i32 0
  %135 = inttoptr i64 %128 to float*
  store float %134, float* %135
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 8
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i32*
  %141 = load i32, i32* %140
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %142, align 1, !tbaa !2432
  %143 = and i32 %141, 255
  %144 = call i32 @llvm.ctpop.i32(i32 %143) #16
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %147, i8* %148, align 1, !tbaa !2446
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = icmp eq i32 %141, 0
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %151, i8* %152, align 1, !tbaa !2448
  %153 = lshr i32 %141, 31
  %154 = trunc i32 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = lshr i32 %141, 31
  %157 = xor i32 %153, %156
  %158 = add nuw nsw i32 %157, %156
  %159 = icmp eq i32 %158, 2
  %160 = zext i1 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %160, i8* %161, align 1, !tbaa !2450
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 19
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 6
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 6
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %169 = load i8, i8* %168, align 1, !tbaa !2448
  %170 = icmp eq i8 %169, 0
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %172 = load i8, i8* %171, align 1, !tbaa !2449
  %173 = icmp ne i8 %172, 0
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %175 = load i8, i8* %174, align 1, !tbaa !2450
  %176 = icmp ne i8 %175, 0
  %177 = xor i1 %173, %176
  %178 = xor i1 %177, true
  %179 = and i1 %170, %178
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %182 = select i1 %179, i64 %163, i64 %165
  store i64 %182, i64* %181, align 8, !tbaa !2428
  %183 = load i8, i8* %BRANCH_TAKEN
  %184 = icmp eq i8 %183, 1
  br i1 %184, label %block_402a23, label %block_402a16

block_402a7e:                                     ; preds = %block_402a8a, %block_402a77
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.5, %block_402a77 ], [ %MEMORY.0, %block_402a8a ]
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 44
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = load i32, i32* %EAX
  %193 = zext i32 %192 to i64
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 8
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i32*
  %199 = load i32, i32* %198
  %200 = sub i32 %192, %199
  %201 = icmp ult i32 %192, %199
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %202, i8* %203, align 1, !tbaa !2432
  %204 = and i32 %200, 255
  %205 = call i32 @llvm.ctpop.i32(i32 %204) #16
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %208, i8* %209, align 1, !tbaa !2446
  %210 = xor i32 %199, %192
  %211 = xor i32 %210, %200
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %214, i8* %215, align 1, !tbaa !2447
  %216 = icmp eq i32 %200, 0
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %217, i8* %218, align 1, !tbaa !2448
  %219 = lshr i32 %200, 31
  %220 = trunc i32 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %220, i8* %221, align 1, !tbaa !2449
  %222 = lshr i32 %192, 31
  %223 = lshr i32 %199, 31
  %224 = xor i32 %223, %222
  %225 = xor i32 %219, %222
  %226 = add nuw nsw i32 %225, %224
  %227 = icmp eq i32 %226, 2
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %228, i8* %229, align 1, !tbaa !2450
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 78
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 6
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 6
  store i64 %235, i64* %PC
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %237 = load i8, i8* %236, align 1, !tbaa !2449
  %238 = icmp ne i8 %237, 0
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %240 = load i8, i8* %239, align 1, !tbaa !2450
  %241 = icmp ne i8 %240, 0
  %242 = xor i1 %238, %241
  %243 = xor i1 %242, true
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = select i1 %242, i64 %233, i64 %231
  store i64 %246, i64* %245, align 8, !tbaa !2428
  %247 = load i8, i8* %BRANCH_TAKEN
  %248 = icmp eq i8 %247, 1
  %249 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 40
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 5
  store i64 %253, i64* %PC
  %254 = inttoptr i64 %251 to float*
  %255 = load float, float* %254
  %256 = bitcast i8* %249 to float*
  store float %255, float* %256, align 1, !tbaa !2452
  %257 = getelementptr inbounds i8, i8* %249, i64 4
  %258 = bitcast i8* %257 to float*
  store float 0.000000e+00, float* %258, align 1, !tbaa !2452
  %259 = getelementptr inbounds i8, i8* %249, i64 8
  %260 = bitcast i8* %259 to float*
  store float 0.000000e+00, float* %260, align 1, !tbaa !2452
  %261 = getelementptr inbounds i8, i8* %249, i64 12
  %262 = bitcast i8* %261 to float*
  store float 0.000000e+00, float* %262, align 1, !tbaa !2452
  %263 = load i64, i64* %RBP
  br i1 %248, label %block_402ad2, label %block_402a8a

block_402b2a:                                     ; preds = %block_402ae8
  %264 = sub i64 %437, 4
  %265 = bitcast %union.vec128_t* %XMM0 to i8*
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  store i64 %267, i64* %PC
  %268 = bitcast i8* %265 to <2 x float>*
  %269 = load <2 x float>, <2 x float>* %268, align 1
  %270 = extractelement <2 x float> %269, i32 0
  %271 = inttoptr i64 %264 to float*
  store float %270, float* %271
  br label %block_402b34

block_402a5e:                                     ; preds = %block_402a37, %block_402a4f
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_402a37 ], [ %MEMORY.4, %block_402a4f ]
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 36
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 4
  store i64 %275, i64* %PC
  %276 = inttoptr i64 %273 to i32*
  %277 = load i32, i32* %276
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %278, align 1, !tbaa !2432
  %279 = and i32 %277, 255
  %280 = call i32 @llvm.ctpop.i32(i32 %279) #16
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %283, i8* %284, align 1, !tbaa !2446
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %285, align 1, !tbaa !2447
  %286 = icmp eq i32 %277, 0
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %287, i8* %288, align 1, !tbaa !2448
  %289 = lshr i32 %277, 31
  %290 = trunc i32 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %290, i8* %291, align 1, !tbaa !2449
  %292 = lshr i32 %277, 31
  %293 = xor i32 %289, %292
  %294 = add nuw nsw i32 %293, %292
  %295 = icmp eq i32 %294, 2
  %296 = zext i1 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %296, i8* %297, align 1, !tbaa !2450
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 21
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 6
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 6
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %305 = load i8, i8* %304, align 1, !tbaa !2449
  %306 = icmp ne i8 %305, 0
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %308 = load i8, i8* %307, align 1, !tbaa !2450
  %309 = icmp ne i8 %308, 0
  %310 = xor i1 %306, %309
  %311 = xor i1 %310, true
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %314 = select i1 %310, i64 %301, i64 %299
  store i64 %314, i64* %313, align 8, !tbaa !2428
  %315 = load i8, i8* %BRANCH_TAKEN
  %316 = icmp eq i8 %315, 1
  br i1 %316, label %block_402a77, label %block_402a68

block_402ad2:                                     ; preds = %block_402a7e
  %317 = sub i64 %263, 4
  %318 = bitcast %union.vec128_t* %XMM0 to i8*
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 5
  store i64 %320, i64* %PC
  %321 = bitcast i8* %318 to <2 x float>*
  %322 = load <2 x float>, <2 x float>* %321, align 1
  %323 = extractelement <2 x float> %322, i32 0
  %324 = inttoptr i64 %317 to float*
  store float %323, float* %324
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 88
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 5
  store i64 %328, i64* %PC
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %326, i64* %329, align 8, !tbaa !2428
  br label %block_402b34

block_402b34:                                     ; preds = %block_402a16, %block_402ad2, %block_402b2a
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_402ad2 ], [ %MEMORY.3, %block_402b2a ], [ %2, %block_402a16 ]
  %330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 4
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %332 to float*
  %336 = load float, float* %335
  %337 = bitcast i8* %330 to float*
  store float %336, float* %337, align 1, !tbaa !2452
  %338 = getelementptr inbounds i8, i8* %330, i64 4
  %339 = bitcast i8* %338 to float*
  store float 0.000000e+00, float* %339, align 1, !tbaa !2452
  %340 = getelementptr inbounds i8, i8* %330, i64 8
  %341 = bitcast i8* %340 to float*
  store float 0.000000e+00, float* %341, align 1, !tbaa !2452
  %342 = getelementptr inbounds i8, i8* %330, i64 12
  %343 = bitcast i8* %342 to float*
  store float 0.000000e+00, float* %343, align 1, !tbaa !2452
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 1
  store i64 %345, i64* %PC
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %347 = load i64, i64* %346, align 8, !tbaa !2428
  %348 = add i64 %347, 8
  %349 = inttoptr i64 %347 to i64*
  %350 = load i64, i64* %349
  store i64 %350, i64* %RBP, align 8, !tbaa !2428
  store i64 %348, i64* %346, align 8, !tbaa !2428
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 1
  store i64 %352, i64* %PC
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %355 = load i64, i64* %354, align 8, !tbaa !2428
  %356 = inttoptr i64 %355 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %353, align 8, !tbaa !2428
  %358 = add i64 %355, 8
  store i64 %358, i64* %354, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_402ae8:                                     ; preds = %block_402ae1, %block_402af4
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402ae1 ], [ %MEMORY.3, %block_402af4 ]
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 44
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i32*
  %364 = load i32, i32* %363
  %365 = zext i32 %364 to i64
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = load i32, i32* %EAX
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 8
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372
  %374 = sub i32 %366, %373
  %375 = icmp ult i32 %366, %373
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %376, i8* %377, align 1, !tbaa !2432
  %378 = and i32 %374, 255
  %379 = call i32 @llvm.ctpop.i32(i32 %378) #16
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %382, i8* %383, align 1, !tbaa !2446
  %384 = xor i32 %373, %366
  %385 = xor i32 %384, %374
  %386 = lshr i32 %385, 4
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %388, i8* %389, align 1, !tbaa !2447
  %390 = icmp eq i32 %374, 0
  %391 = zext i1 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %391, i8* %392, align 1, !tbaa !2448
  %393 = lshr i32 %374, 31
  %394 = trunc i32 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %394, i8* %395, align 1, !tbaa !2449
  %396 = lshr i32 %366, 31
  %397 = lshr i32 %373, 31
  %398 = xor i32 %397, %396
  %399 = xor i32 %393, %396
  %400 = add nuw nsw i32 %399, %398
  %401 = icmp eq i32 %400, 2
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %402, i8* %403, align 1, !tbaa !2450
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 60
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 6
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 6
  store i64 %409, i64* %PC
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %411 = load i8, i8* %410, align 1, !tbaa !2449
  %412 = icmp ne i8 %411, 0
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %414 = load i8, i8* %413, align 1, !tbaa !2450
  %415 = icmp ne i8 %414, 0
  %416 = xor i1 %412, %415
  %417 = xor i1 %416, true
  %418 = zext i1 %417 to i8
  store i8 %418, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %420 = select i1 %416, i64 %407, i64 %405
  store i64 %420, i64* %419, align 8, !tbaa !2428
  %421 = load i8, i8* %BRANCH_TAKEN
  %422 = icmp eq i8 %421, 1
  %423 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 40
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 5
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to float*
  %429 = load float, float* %428
  %430 = bitcast i8* %423 to float*
  store float %429, float* %430, align 1, !tbaa !2452
  %431 = getelementptr inbounds i8, i8* %423, i64 4
  %432 = bitcast i8* %431 to float*
  store float 0.000000e+00, float* %432, align 1, !tbaa !2452
  %433 = getelementptr inbounds i8, i8* %423, i64 8
  %434 = bitcast i8* %433 to float*
  store float 0.000000e+00, float* %434, align 1, !tbaa !2452
  %435 = getelementptr inbounds i8, i8* %423, i64 12
  %436 = bitcast i8* %435 to float*
  store float 0.000000e+00, float* %436, align 1, !tbaa !2452
  %437 = load i64, i64* %RBP
  br i1 %422, label %block_402b2a, label %block_402af4

block_402a16:                                     ; preds = %block_4029e0
  %438 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %440 = bitcast %union.vec128_t* %XMM0 to i8*
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 3
  store i64 %442, i64* %PC
  %443 = bitcast i8* %439 to i64*
  %444 = load i64, i64* %443, align 1
  %445 = getelementptr inbounds i8, i8* %439, i64 8
  %446 = bitcast i8* %445 to i64*
  %447 = load i64, i64* %446, align 1
  %448 = bitcast i8* %440 to i64*
  %449 = load i64, i64* %448, align 1
  %450 = getelementptr inbounds i8, i8* %440, i64 8
  %451 = bitcast i8* %450 to i64*
  %452 = load i64, i64* %451, align 1
  %453 = xor i64 %449, %444
  %454 = xor i64 %452, %447
  %455 = trunc i64 %453 to i32
  %456 = lshr i64 %453, 32
  %457 = trunc i64 %456 to i32
  %458 = bitcast i8* %438 to i32*
  store i32 %455, i32* %458, align 1, !tbaa !2456
  %459 = getelementptr inbounds i8, i8* %438, i64 4
  %460 = bitcast i8* %459 to i32*
  store i32 %457, i32* %460, align 1, !tbaa !2456
  %461 = trunc i64 %454 to i32
  %462 = getelementptr inbounds i8, i8* %438, i64 8
  %463 = bitcast i8* %462 to i32*
  store i32 %461, i32* %463, align 1, !tbaa !2456
  %464 = lshr i64 %454, 32
  %465 = trunc i64 %464 to i32
  %466 = getelementptr inbounds i8, i8* %438, i64 12
  %467 = bitcast i8* %466 to i32*
  store i32 %465, i32* %467, align 1, !tbaa !2456
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 4
  %470 = bitcast %union.vec128_t* %XMM0 to i8*
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 5
  store i64 %472, i64* %PC
  %473 = bitcast i8* %470 to <2 x float>*
  %474 = load <2 x float>, <2 x float>* %473, align 1
  %475 = extractelement <2 x float> %474, i32 0
  %476 = inttoptr i64 %469 to float*
  store float %475, float* %476
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 278
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 5
  store i64 %480, i64* %PC
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %478, i64* %481, align 8, !tbaa !2428
  br label %block_402b34

block_402a4f:                                     ; preds = %block_402a37
  %482 = load i64, i64* %RAX
  %483 = load i32, i32* %EAX
  %484 = zext i32 %483 to i64
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 2
  store i64 %486, i64* %PC
  %487 = xor i64 %484, %482
  %488 = trunc i64 %487 to i32
  %489 = and i64 %487, 4294967295
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %490, align 1, !tbaa !2432
  %491 = and i32 %488, 255
  %492 = call i32 @llvm.ctpop.i32(i32 %491) #16
  %493 = trunc i32 %492 to i8
  %494 = and i8 %493, 1
  %495 = xor i8 %494, 1
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %495, i8* %496, align 1, !tbaa !2446
  %497 = icmp eq i32 %488, 0
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %498, i8* %499, align 1, !tbaa !2448
  %500 = lshr i32 %488, 31
  %501 = trunc i32 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %501, i8* %502, align 1, !tbaa !2449
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %503, align 1, !tbaa !2450
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %504, align 1, !tbaa !2447
  %505 = load i64, i64* %RAX
  %506 = load i64, i64* %RBP
  %507 = sub i64 %506, 8
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 3
  store i64 %509, i64* %PC
  %510 = trunc i64 %505 to i32
  %511 = inttoptr i64 %507 to i32*
  %512 = load i32, i32* %511
  %513 = sub i32 %510, %512
  %514 = zext i32 %513 to i64
  store i64 %514, i64* %RAX, align 8, !tbaa !2428
  %515 = icmp ult i32 %510, %512
  %516 = zext i1 %515 to i8
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %516, i8* %517, align 1, !tbaa !2432
  %518 = and i32 %513, 255
  %519 = call i32 @llvm.ctpop.i32(i32 %518) #16
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %522, i8* %523, align 1, !tbaa !2446
  %524 = xor i32 %512, %510
  %525 = xor i32 %524, %513
  %526 = lshr i32 %525, 4
  %527 = trunc i32 %526 to i8
  %528 = and i8 %527, 1
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %528, i8* %529, align 1, !tbaa !2447
  %530 = icmp eq i32 %513, 0
  %531 = zext i1 %530 to i8
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %531, i8* %532, align 1, !tbaa !2448
  %533 = lshr i32 %513, 31
  %534 = trunc i32 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %534, i8* %535, align 1, !tbaa !2449
  %536 = lshr i32 %510, 31
  %537 = lshr i32 %512, 31
  %538 = xor i32 %537, %536
  %539 = xor i32 %533, %536
  %540 = add nuw nsw i32 %539, %538
  %541 = icmp eq i32 %540, 2
  %542 = zext i1 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %542, i8* %543, align 1, !tbaa !2450
  %544 = load i64, i64* %RAX
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 3
  store i64 %546, i64* %PC
  %547 = trunc i64 %544 to i32
  %548 = add i32 1, %547
  %549 = zext i32 %548 to i64
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = icmp ult i32 %548, %547
  %551 = icmp ult i32 %548, 1
  %552 = or i1 %550, %551
  %553 = zext i1 %552 to i8
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %553, i8* %554, align 1, !tbaa !2432
  %555 = and i32 %548, 255
  %556 = call i32 @llvm.ctpop.i32(i32 %555) #16
  %557 = trunc i32 %556 to i8
  %558 = and i8 %557, 1
  %559 = xor i8 %558, 1
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %559, i8* %560, align 1, !tbaa !2446
  %561 = xor i64 1, %544
  %562 = trunc i64 %561 to i32
  %563 = xor i32 %562, %548
  %564 = lshr i32 %563, 4
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %566, i8* %567, align 1, !tbaa !2447
  %568 = icmp eq i32 %548, 0
  %569 = zext i1 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %569, i8* %570, align 1, !tbaa !2448
  %571 = lshr i32 %548, 31
  %572 = trunc i32 %571 to i8
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %572, i8* %573, align 1, !tbaa !2449
  %574 = lshr i32 %547, 31
  %575 = xor i32 %571, %574
  %576 = add nuw nsw i32 %575, %571
  %577 = icmp eq i32 %576, 2
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %578, i8* %579, align 1, !tbaa !2450
  %580 = load i64, i64* %RAX
  %581 = load i64, i64* %RBP
  %582 = sub i64 %581, 20
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to i32*
  %586 = load i32, i32* %585
  %587 = shl i64 %580, 32
  %588 = ashr exact i64 %587, 32
  %589 = sext i32 %586 to i64
  %590 = mul nsw i64 %589, %588
  %591 = trunc i64 %590 to i32
  %592 = and i64 %590, 4294967295
  store i64 %592, i64* %RAX, align 8, !tbaa !2428
  %593 = shl i64 %590, 32
  %594 = ashr exact i64 %593, 32
  %595 = icmp ne i64 %594, %590
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %596, i8* %597, align 1, !tbaa !2432
  %598 = and i32 %591, 255
  %599 = call i32 @llvm.ctpop.i32(i32 %598) #16
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  %602 = xor i8 %601, 1
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %602, i8* %603, align 1, !tbaa !2446
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %604, align 1, !tbaa !2447
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %605, align 1, !tbaa !2448
  %606 = lshr i32 %591, 31
  %607 = trunc i32 %606 to i8
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %607, i8* %608, align 1, !tbaa !2449
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %609, align 1, !tbaa !2450
  %610 = load i64, i64* %RBP
  %611 = sub i64 %610, 48
  %612 = load i32, i32* %EAX
  %613 = zext i32 %612 to i64
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 3
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %611 to i32*
  store i32 %612, i32* %616
  br label %block_402a5e

block_402a2d:                                     ; preds = %block_402a23
  %617 = load i64, i64* %RBP
  %618 = sub i64 %617, 36
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = sub i32 %622, 1
  %624 = icmp ult i32 %622, 1
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %625, i8* %626, align 1, !tbaa !2432
  %627 = and i32 %623, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #16
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2446
  %633 = xor i32 %622, 1
  %634 = xor i32 %633, %623
  %635 = lshr i32 %634, 4
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2447
  %639 = icmp eq i32 %623, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2448
  %642 = lshr i32 %623, 31
  %643 = trunc i32 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2449
  %645 = lshr i32 %622, 31
  %646 = xor i32 %642, %645
  %647 = add nuw nsw i32 %646, %645
  %648 = icmp eq i32 %647, 2
  %649 = zext i1 %648 to i8
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %649, i8* %650, align 1, !tbaa !2450
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 176
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 6
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 6
  store i64 %656, i64* %PC
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %658 = load i8, i8* %657, align 1, !tbaa !2448
  store i8 %658, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %660 = icmp ne i8 %658, 0
  %661 = select i1 %660, i64 %652, i64 %654
  store i64 %661, i64* %659, align 8, !tbaa !2428
  %662 = load i8, i8* %BRANCH_TAKEN
  %663 = icmp eq i8 %662, 1
  br i1 %663, label %block_402ae1, label %block_402a37

block_402a37:                                     ; preds = %block_402a23, %block_402a2d
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402a23 ], [ %2, %block_402a2d ]
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 48
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 7
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %665 to i32*
  store i32 0, i32* %668
  %669 = load i64, i64* %RBP
  %670 = sub i64 %669, 52
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 7
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %670 to i32*
  store i32 0, i32* %673
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 20
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %675 to i32*
  %679 = load i32, i32* %678
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %680, align 1, !tbaa !2432
  %681 = and i32 %679, 255
  %682 = call i32 @llvm.ctpop.i32(i32 %681) #16
  %683 = trunc i32 %682 to i8
  %684 = and i8 %683, 1
  %685 = xor i8 %684, 1
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %685, i8* %686, align 1, !tbaa !2446
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %687, align 1, !tbaa !2447
  %688 = icmp eq i32 %679, 0
  %689 = zext i1 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %689, i8* %690, align 1, !tbaa !2448
  %691 = lshr i32 %679, 31
  %692 = trunc i32 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %692, i8* %693, align 1, !tbaa !2449
  %694 = lshr i32 %679, 31
  %695 = xor i32 %691, %694
  %696 = add nuw nsw i32 %695, %694
  %697 = icmp eq i32 %696, 2
  %698 = zext i1 %697 to i8
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %698, i8* %699, align 1, !tbaa !2450
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 21
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 6
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 6
  store i64 %705, i64* %PC
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %707 = load i8, i8* %706, align 1, !tbaa !2449
  %708 = icmp ne i8 %707, 0
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %710 = load i8, i8* %709, align 1, !tbaa !2450
  %711 = icmp ne i8 %710, 0
  %712 = xor i1 %708, %711
  %713 = xor i1 %712, true
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %716 = select i1 %712, i64 %703, i64 %701
  store i64 %716, i64* %715, align 8, !tbaa !2428
  %717 = load i8, i8* %BRANCH_TAKEN
  %718 = icmp eq i8 %717, 1
  br i1 %718, label %block_402a5e, label %block_402a4f

block_402a77:                                     ; preds = %block_402a68, %block_402a5e
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_402a5e ], [ %MEMORY.1, %block_402a68 ]
  %719 = load i64, i64* %RBP
  %720 = sub i64 %719, 44
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 7
  store i64 %722, i64* %PC
  %723 = inttoptr i64 %720 to i32*
  store i32 0, i32* %723
  br label %block_402a7e

block_402a8a:                                     ; preds = %block_402a7e
  %724 = sub i64 %263, 16
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 4
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %724 to i64*
  %728 = load i64, i64* %727
  store i64 %728, i64* %RAX, align 8, !tbaa !2428
  %729 = load i64, i64* %RBP
  %730 = sub i64 %729, 48
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %730 to i32*
  %734 = load i32, i32* %733
  %735 = sext i32 %734 to i64
  store i64 %735, i64* %RCX, align 8, !tbaa !2428
  %736 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %737 = load i64, i64* %RAX
  %738 = load i64, i64* %RCX
  %739 = mul i64 %738, 4
  %740 = add i64 %739, %737
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %740 to float*
  %744 = load float, float* %743
  %745 = bitcast i8* %736 to float*
  store float %744, float* %745, align 1, !tbaa !2452
  %746 = getelementptr inbounds i8, i8* %736, i64 4
  %747 = bitcast i8* %746 to float*
  store float 0.000000e+00, float* %747, align 1, !tbaa !2452
  %748 = getelementptr inbounds i8, i8* %736, i64 8
  %749 = bitcast i8* %748 to float*
  store float 0.000000e+00, float* %749, align 1, !tbaa !2452
  %750 = getelementptr inbounds i8, i8* %736, i64 12
  %751 = bitcast i8* %750 to float*
  store float 0.000000e+00, float* %751, align 1, !tbaa !2452
  %752 = load i64, i64* %RBP
  %753 = sub i64 %752, 32
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 4
  store i64 %755, i64* %PC
  %756 = inttoptr i64 %753 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 52
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 4
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i32*
  %763 = load i32, i32* %762
  %764 = sext i32 %763 to i64
  store i64 %764, i64* %RCX, align 8, !tbaa !2428
  %765 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %766 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %767 = load i64, i64* %RAX
  %768 = load i64, i64* %RCX
  %769 = mul i64 %768, 4
  %770 = add i64 %769, %767
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 5
  store i64 %772, i64* %PC
  %773 = bitcast i8* %766 to <2 x float>*
  %774 = load <2 x float>, <2 x float>* %773, align 1
  %775 = getelementptr inbounds i8, i8* %766, i64 8
  %776 = bitcast i8* %775 to <2 x i32>*
  %777 = load <2 x i32>, <2 x i32>* %776, align 1
  %778 = inttoptr i64 %770 to float*
  %779 = load float, float* %778
  %780 = extractelement <2 x float> %774, i32 0
  %781 = fmul float %780, %779
  %782 = bitcast i8* %765 to float*
  store float %781, float* %782, align 1, !tbaa !2452
  %783 = bitcast <2 x float> %774 to <2 x i32>
  %784 = extractelement <2 x i32> %783, i32 1
  %785 = getelementptr inbounds i8, i8* %765, i64 4
  %786 = bitcast i8* %785 to i32*
  store i32 %784, i32* %786, align 1, !tbaa !2452
  %787 = extractelement <2 x i32> %777, i32 0
  %788 = getelementptr inbounds i8, i8* %765, i64 8
  %789 = bitcast i8* %788 to i32*
  store i32 %787, i32* %789, align 1, !tbaa !2452
  %790 = extractelement <2 x i32> %777, i32 1
  %791 = getelementptr inbounds i8, i8* %765, i64 12
  %792 = bitcast i8* %791 to i32*
  store i32 %790, i32* %792, align 1, !tbaa !2452
  %793 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %794 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %795 = bitcast %union.vec128_t* %XMM1 to i8*
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 4
  store i64 %797, i64* %PC
  %798 = bitcast i8* %794 to <2 x float>*
  %799 = load <2 x float>, <2 x float>* %798, align 1
  %800 = getelementptr inbounds i8, i8* %794, i64 8
  %801 = bitcast i8* %800 to <2 x i32>*
  %802 = load <2 x i32>, <2 x i32>* %801, align 1
  %803 = bitcast i8* %795 to <2 x float>*
  %804 = load <2 x float>, <2 x float>* %803, align 1
  %805 = extractelement <2 x float> %799, i32 0
  %806 = extractelement <2 x float> %804, i32 0
  %807 = fadd float %805, %806
  %808 = bitcast i8* %793 to float*
  store float %807, float* %808, align 1, !tbaa !2452
  %809 = bitcast <2 x float> %799 to <2 x i32>
  %810 = extractelement <2 x i32> %809, i32 1
  %811 = getelementptr inbounds i8, i8* %793, i64 4
  %812 = bitcast i8* %811 to i32*
  store i32 %810, i32* %812, align 1, !tbaa !2452
  %813 = extractelement <2 x i32> %802, i32 0
  %814 = getelementptr inbounds i8, i8* %793, i64 8
  %815 = bitcast i8* %814 to i32*
  store i32 %813, i32* %815, align 1, !tbaa !2452
  %816 = extractelement <2 x i32> %802, i32 1
  %817 = getelementptr inbounds i8, i8* %793, i64 12
  %818 = bitcast i8* %817 to i32*
  store i32 %816, i32* %818, align 1, !tbaa !2452
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 40
  %821 = bitcast %union.vec128_t* %XMM0 to i8*
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 5
  store i64 %823, i64* %PC
  %824 = bitcast i8* %821 to <2 x float>*
  %825 = load <2 x float>, <2 x float>* %824, align 1
  %826 = extractelement <2 x float> %825, i32 0
  %827 = inttoptr i64 %820 to float*
  store float %826, float* %827
  %828 = load i64, i64* %RBP
  %829 = sub i64 %828, 48
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 3
  store i64 %831, i64* %PC
  %832 = inttoptr i64 %829 to i32*
  %833 = load i32, i32* %832
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %RDX, align 8, !tbaa !2428
  %835 = load i64, i64* %RDX
  %836 = load i64, i64* %RBP
  %837 = sub i64 %836, 20
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 3
  store i64 %839, i64* %PC
  %840 = trunc i64 %835 to i32
  %841 = inttoptr i64 %837 to i32*
  %842 = load i32, i32* %841
  %843 = add i32 %842, %840
  %844 = zext i32 %843 to i64
  store i64 %844, i64* %RDX, align 8, !tbaa !2428
  %845 = icmp ult i32 %843, %840
  %846 = icmp ult i32 %843, %842
  %847 = or i1 %845, %846
  %848 = zext i1 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %848, i8* %849, align 1, !tbaa !2432
  %850 = and i32 %843, 255
  %851 = call i32 @llvm.ctpop.i32(i32 %850) #16
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  %854 = xor i8 %853, 1
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %854, i8* %855, align 1, !tbaa !2446
  %856 = xor i32 %842, %840
  %857 = xor i32 %856, %843
  %858 = lshr i32 %857, 4
  %859 = trunc i32 %858 to i8
  %860 = and i8 %859, 1
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %860, i8* %861, align 1, !tbaa !2447
  %862 = icmp eq i32 %843, 0
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %863, i8* %864, align 1, !tbaa !2448
  %865 = lshr i32 %843, 31
  %866 = trunc i32 %865 to i8
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %866, i8* %867, align 1, !tbaa !2449
  %868 = lshr i32 %840, 31
  %869 = lshr i32 %842, 31
  %870 = xor i32 %865, %868
  %871 = xor i32 %865, %869
  %872 = add nuw nsw i32 %870, %871
  %873 = icmp eq i32 %872, 2
  %874 = zext i1 %873 to i8
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %874, i8* %875, align 1, !tbaa !2450
  %876 = load i64, i64* %RBP
  %877 = sub i64 %876, 48
  %878 = load i32, i32* %EDX
  %879 = zext i32 %878 to i64
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 3
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %877 to i32*
  store i32 %878, i32* %882
  %883 = load i64, i64* %RBP
  %884 = sub i64 %883, 52
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 3
  store i64 %886, i64* %PC
  %887 = inttoptr i64 %884 to i32*
  %888 = load i32, i32* %887
  %889 = zext i32 %888 to i64
  store i64 %889, i64* %RDX, align 8, !tbaa !2428
  %890 = load i64, i64* %RDX
  %891 = load i64, i64* %RBP
  %892 = sub i64 %891, 36
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC
  %895 = trunc i64 %890 to i32
  %896 = inttoptr i64 %892 to i32*
  %897 = load i32, i32* %896
  %898 = add i32 %897, %895
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RDX, align 8, !tbaa !2428
  %900 = icmp ult i32 %898, %895
  %901 = icmp ult i32 %898, %897
  %902 = or i1 %900, %901
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %903, i8* %904, align 1, !tbaa !2432
  %905 = and i32 %898, 255
  %906 = call i32 @llvm.ctpop.i32(i32 %905) #16
  %907 = trunc i32 %906 to i8
  %908 = and i8 %907, 1
  %909 = xor i8 %908, 1
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %909, i8* %910, align 1, !tbaa !2446
  %911 = xor i32 %897, %895
  %912 = xor i32 %911, %898
  %913 = lshr i32 %912, 4
  %914 = trunc i32 %913 to i8
  %915 = and i8 %914, 1
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %915, i8* %916, align 1, !tbaa !2447
  %917 = icmp eq i32 %898, 0
  %918 = zext i1 %917 to i8
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %918, i8* %919, align 1, !tbaa !2448
  %920 = lshr i32 %898, 31
  %921 = trunc i32 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %921, i8* %922, align 1, !tbaa !2449
  %923 = lshr i32 %895, 31
  %924 = lshr i32 %897, 31
  %925 = xor i32 %920, %923
  %926 = xor i32 %920, %924
  %927 = add nuw nsw i32 %925, %926
  %928 = icmp eq i32 %927, 2
  %929 = zext i1 %928 to i8
  %930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %929, i8* %930, align 1, !tbaa !2450
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 52
  %933 = load i32, i32* %EDX
  %934 = zext i32 %933 to i64
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 3
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %932 to i32*
  store i32 %933, i32* %937
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 44
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 3
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i32*
  %943 = load i32, i32* %942
  %944 = zext i32 %943 to i64
  store i64 %944, i64* %RAX, align 8, !tbaa !2428
  %945 = load i64, i64* %RAX
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 3
  store i64 %947, i64* %PC
  %948 = trunc i64 %945 to i32
  %949 = add i32 1, %948
  %950 = zext i32 %949 to i64
  store i64 %950, i64* %RAX, align 8, !tbaa !2428
  %951 = icmp ult i32 %949, %948
  %952 = icmp ult i32 %949, 1
  %953 = or i1 %951, %952
  %954 = zext i1 %953 to i8
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %954, i8* %955, align 1, !tbaa !2432
  %956 = and i32 %949, 255
  %957 = call i32 @llvm.ctpop.i32(i32 %956) #16
  %958 = trunc i32 %957 to i8
  %959 = and i8 %958, 1
  %960 = xor i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %960, i8* %961, align 1, !tbaa !2446
  %962 = xor i64 1, %945
  %963 = trunc i64 %962 to i32
  %964 = xor i32 %963, %949
  %965 = lshr i32 %964, 4
  %966 = trunc i32 %965 to i8
  %967 = and i8 %966, 1
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %967, i8* %968, align 1, !tbaa !2447
  %969 = icmp eq i32 %949, 0
  %970 = zext i1 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %970, i8* %971, align 1, !tbaa !2448
  %972 = lshr i32 %949, 31
  %973 = trunc i32 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %973, i8* %974, align 1, !tbaa !2449
  %975 = lshr i32 %948, 31
  %976 = xor i32 %972, %975
  %977 = add nuw nsw i32 %976, %972
  %978 = icmp eq i32 %977, 2
  %979 = zext i1 %978 to i8
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %979, i8* %980, align 1, !tbaa !2450
  %981 = load i64, i64* %RBP
  %982 = sub i64 %981, 44
  %983 = load i32, i32* %EAX
  %984 = zext i32 %983 to i64
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 3
  store i64 %986, i64* %PC
  %987 = inttoptr i64 %982 to i32*
  store i32 %983, i32* %987
  %988 = load i64, i64* %PC
  %989 = sub i64 %988, 79
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 5
  store i64 %991, i64* %PC
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %989, i64* %992, align 8, !tbaa !2428
  br label %block_402a7e

block_402a68:                                     ; preds = %block_402a5e
  %993 = load i64, i64* %RAX
  %994 = load i32, i32* %EAX
  %995 = zext i32 %994 to i64
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 2
  store i64 %997, i64* %PC
  %998 = xor i64 %995, %993
  %999 = trunc i64 %998 to i32
  %1000 = and i64 %998, 4294967295
  store i64 %1000, i64* %RAX, align 8, !tbaa !2428
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1001, align 1, !tbaa !2432
  %1002 = and i32 %999, 255
  %1003 = call i32 @llvm.ctpop.i32(i32 %1002) #16
  %1004 = trunc i32 %1003 to i8
  %1005 = and i8 %1004, 1
  %1006 = xor i8 %1005, 1
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1006, i8* %1007, align 1, !tbaa !2446
  %1008 = icmp eq i32 %999, 0
  %1009 = zext i1 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1009, i8* %1010, align 1, !tbaa !2448
  %1011 = lshr i32 %999, 31
  %1012 = trunc i32 %1011 to i8
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1012, i8* %1013, align 1, !tbaa !2449
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1014, align 1, !tbaa !2450
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1015, align 1, !tbaa !2447
  %1016 = load i64, i64* %RAX
  %1017 = load i64, i64* %RBP
  %1018 = sub i64 %1017, 8
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 3
  store i64 %1020, i64* %PC
  %1021 = trunc i64 %1016 to i32
  %1022 = inttoptr i64 %1018 to i32*
  %1023 = load i32, i32* %1022
  %1024 = sub i32 %1021, %1023
  %1025 = zext i32 %1024 to i64
  store i64 %1025, i64* %RAX, align 8, !tbaa !2428
  %1026 = icmp ult i32 %1021, %1023
  %1027 = zext i1 %1026 to i8
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1027, i8* %1028, align 1, !tbaa !2432
  %1029 = and i32 %1024, 255
  %1030 = call i32 @llvm.ctpop.i32(i32 %1029) #16
  %1031 = trunc i32 %1030 to i8
  %1032 = and i8 %1031, 1
  %1033 = xor i8 %1032, 1
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1033, i8* %1034, align 1, !tbaa !2446
  %1035 = xor i32 %1023, %1021
  %1036 = xor i32 %1035, %1024
  %1037 = lshr i32 %1036, 4
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1039, i8* %1040, align 1, !tbaa !2447
  %1041 = icmp eq i32 %1024, 0
  %1042 = zext i1 %1041 to i8
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1042, i8* %1043, align 1, !tbaa !2448
  %1044 = lshr i32 %1024, 31
  %1045 = trunc i32 %1044 to i8
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1045, i8* %1046, align 1, !tbaa !2449
  %1047 = lshr i32 %1021, 31
  %1048 = lshr i32 %1023, 31
  %1049 = xor i32 %1048, %1047
  %1050 = xor i32 %1044, %1047
  %1051 = add nuw nsw i32 %1050, %1049
  %1052 = icmp eq i32 %1051, 2
  %1053 = zext i1 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1053, i8* %1054, align 1, !tbaa !2450
  %1055 = load i64, i64* %RAX
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 3
  store i64 %1057, i64* %PC
  %1058 = trunc i64 %1055 to i32
  %1059 = add i32 1, %1058
  %1060 = zext i32 %1059 to i64
  store i64 %1060, i64* %RAX, align 8, !tbaa !2428
  %1061 = icmp ult i32 %1059, %1058
  %1062 = icmp ult i32 %1059, 1
  %1063 = or i1 %1061, %1062
  %1064 = zext i1 %1063 to i8
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1064, i8* %1065, align 1, !tbaa !2432
  %1066 = and i32 %1059, 255
  %1067 = call i32 @llvm.ctpop.i32(i32 %1066) #16
  %1068 = trunc i32 %1067 to i8
  %1069 = and i8 %1068, 1
  %1070 = xor i8 %1069, 1
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1070, i8* %1071, align 1, !tbaa !2446
  %1072 = xor i64 1, %1055
  %1073 = trunc i64 %1072 to i32
  %1074 = xor i32 %1073, %1059
  %1075 = lshr i32 %1074, 4
  %1076 = trunc i32 %1075 to i8
  %1077 = and i8 %1076, 1
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1077, i8* %1078, align 1, !tbaa !2447
  %1079 = icmp eq i32 %1059, 0
  %1080 = zext i1 %1079 to i8
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1080, i8* %1081, align 1, !tbaa !2448
  %1082 = lshr i32 %1059, 31
  %1083 = trunc i32 %1082 to i8
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1083, i8* %1084, align 1, !tbaa !2449
  %1085 = lshr i32 %1058, 31
  %1086 = xor i32 %1082, %1085
  %1087 = add nuw nsw i32 %1086, %1082
  %1088 = icmp eq i32 %1087, 2
  %1089 = zext i1 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1089, i8* %1090, align 1, !tbaa !2450
  %1091 = load i64, i64* %RAX
  %1092 = load i64, i64* %RBP
  %1093 = sub i64 %1092, 36
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 4
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1093 to i32*
  %1097 = load i32, i32* %1096
  %1098 = shl i64 %1091, 32
  %1099 = ashr exact i64 %1098, 32
  %1100 = sext i32 %1097 to i64
  %1101 = mul nsw i64 %1100, %1099
  %1102 = trunc i64 %1101 to i32
  %1103 = and i64 %1101, 4294967295
  store i64 %1103, i64* %RAX, align 8, !tbaa !2428
  %1104 = shl i64 %1101, 32
  %1105 = ashr exact i64 %1104, 32
  %1106 = icmp ne i64 %1105, %1101
  %1107 = zext i1 %1106 to i8
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1107, i8* %1108, align 1, !tbaa !2432
  %1109 = and i32 %1102, 255
  %1110 = call i32 @llvm.ctpop.i32(i32 %1109) #16
  %1111 = trunc i32 %1110 to i8
  %1112 = and i8 %1111, 1
  %1113 = xor i8 %1112, 1
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1113, i8* %1114, align 1, !tbaa !2446
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1115, align 1, !tbaa !2447
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1116, align 1, !tbaa !2448
  %1117 = lshr i32 %1102, 31
  %1118 = trunc i32 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1118, i8* %1119, align 1, !tbaa !2449
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1107, i8* %1120, align 1, !tbaa !2450
  %1121 = load i64, i64* %RBP
  %1122 = sub i64 %1121, 52
  %1123 = load i32, i32* %EAX
  %1124 = zext i32 %1123 to i64
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 3
  store i64 %1126, i64* %PC
  %1127 = inttoptr i64 %1122 to i32*
  store i32 %1123, i32* %1127
  br label %block_402a77

block_402af4:                                     ; preds = %block_402ae8
  %1128 = sub i64 %437, 16
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 4
  store i64 %1130, i64* %PC
  %1131 = inttoptr i64 %1128 to i64*
  %1132 = load i64, i64* %1131
  store i64 %1132, i64* %RAX, align 8, !tbaa !2428
  %1133 = load i64, i64* %RBP
  %1134 = sub i64 %1133, 44
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 4
  store i64 %1136, i64* %PC
  %1137 = inttoptr i64 %1134 to i32*
  %1138 = load i32, i32* %1137
  %1139 = sext i32 %1138 to i64
  store i64 %1139, i64* %RCX, align 8, !tbaa !2428
  %1140 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1141 = load i64, i64* %RAX
  %1142 = load i64, i64* %RCX
  %1143 = mul i64 %1142, 4
  %1144 = add i64 %1143, %1141
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 5
  store i64 %1146, i64* %PC
  %1147 = inttoptr i64 %1144 to float*
  %1148 = load float, float* %1147
  %1149 = bitcast i8* %1140 to float*
  store float %1148, float* %1149, align 1, !tbaa !2452
  %1150 = getelementptr inbounds i8, i8* %1140, i64 4
  %1151 = bitcast i8* %1150 to float*
  store float 0.000000e+00, float* %1151, align 1, !tbaa !2452
  %1152 = getelementptr inbounds i8, i8* %1140, i64 8
  %1153 = bitcast i8* %1152 to float*
  store float 0.000000e+00, float* %1153, align 1, !tbaa !2452
  %1154 = getelementptr inbounds i8, i8* %1140, i64 12
  %1155 = bitcast i8* %1154 to float*
  store float 0.000000e+00, float* %1155, align 1, !tbaa !2452
  %1156 = load i64, i64* %RBP
  %1157 = sub i64 %1156, 32
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 4
  store i64 %1159, i64* %PC
  %1160 = inttoptr i64 %1157 to i64*
  %1161 = load i64, i64* %1160
  store i64 %1161, i64* %RAX, align 8, !tbaa !2428
  %1162 = load i64, i64* %RBP
  %1163 = sub i64 %1162, 44
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 4
  store i64 %1165, i64* %PC
  %1166 = inttoptr i64 %1163 to i32*
  %1167 = load i32, i32* %1166
  %1168 = sext i32 %1167 to i64
  store i64 %1168, i64* %RCX, align 8, !tbaa !2428
  %1169 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1171 = load i64, i64* %RAX
  %1172 = load i64, i64* %RCX
  %1173 = mul i64 %1172, 4
  %1174 = add i64 %1173, %1171
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  store i64 %1176, i64* %PC
  %1177 = bitcast i8* %1170 to <2 x float>*
  %1178 = load <2 x float>, <2 x float>* %1177, align 1
  %1179 = getelementptr inbounds i8, i8* %1170, i64 8
  %1180 = bitcast i8* %1179 to <2 x i32>*
  %1181 = load <2 x i32>, <2 x i32>* %1180, align 1
  %1182 = inttoptr i64 %1174 to float*
  %1183 = load float, float* %1182
  %1184 = extractelement <2 x float> %1178, i32 0
  %1185 = fmul float %1184, %1183
  %1186 = bitcast i8* %1169 to float*
  store float %1185, float* %1186, align 1, !tbaa !2452
  %1187 = bitcast <2 x float> %1178 to <2 x i32>
  %1188 = extractelement <2 x i32> %1187, i32 1
  %1189 = getelementptr inbounds i8, i8* %1169, i64 4
  %1190 = bitcast i8* %1189 to i32*
  store i32 %1188, i32* %1190, align 1, !tbaa !2452
  %1191 = extractelement <2 x i32> %1181, i32 0
  %1192 = getelementptr inbounds i8, i8* %1169, i64 8
  %1193 = bitcast i8* %1192 to i32*
  store i32 %1191, i32* %1193, align 1, !tbaa !2452
  %1194 = extractelement <2 x i32> %1181, i32 1
  %1195 = getelementptr inbounds i8, i8* %1169, i64 12
  %1196 = bitcast i8* %1195 to i32*
  store i32 %1194, i32* %1196, align 1, !tbaa !2452
  %1197 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1198 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1199 = bitcast %union.vec128_t* %XMM1 to i8*
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 4
  store i64 %1201, i64* %PC
  %1202 = bitcast i8* %1198 to <2 x float>*
  %1203 = load <2 x float>, <2 x float>* %1202, align 1
  %1204 = getelementptr inbounds i8, i8* %1198, i64 8
  %1205 = bitcast i8* %1204 to <2 x i32>*
  %1206 = load <2 x i32>, <2 x i32>* %1205, align 1
  %1207 = bitcast i8* %1199 to <2 x float>*
  %1208 = load <2 x float>, <2 x float>* %1207, align 1
  %1209 = extractelement <2 x float> %1203, i32 0
  %1210 = extractelement <2 x float> %1208, i32 0
  %1211 = fadd float %1209, %1210
  %1212 = bitcast i8* %1197 to float*
  store float %1211, float* %1212, align 1, !tbaa !2452
  %1213 = bitcast <2 x float> %1203 to <2 x i32>
  %1214 = extractelement <2 x i32> %1213, i32 1
  %1215 = getelementptr inbounds i8, i8* %1197, i64 4
  %1216 = bitcast i8* %1215 to i32*
  store i32 %1214, i32* %1216, align 1, !tbaa !2452
  %1217 = extractelement <2 x i32> %1206, i32 0
  %1218 = getelementptr inbounds i8, i8* %1197, i64 8
  %1219 = bitcast i8* %1218 to i32*
  store i32 %1217, i32* %1219, align 1, !tbaa !2452
  %1220 = extractelement <2 x i32> %1206, i32 1
  %1221 = getelementptr inbounds i8, i8* %1197, i64 12
  %1222 = bitcast i8* %1221 to i32*
  store i32 %1220, i32* %1222, align 1, !tbaa !2452
  %1223 = load i64, i64* %RBP
  %1224 = sub i64 %1223, 40
  %1225 = bitcast %union.vec128_t* %XMM0 to i8*
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 5
  store i64 %1227, i64* %PC
  %1228 = bitcast i8* %1225 to <2 x float>*
  %1229 = load <2 x float>, <2 x float>* %1228, align 1
  %1230 = extractelement <2 x float> %1229, i32 0
  %1231 = inttoptr i64 %1224 to float*
  store float %1230, float* %1231
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 44
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 3
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i32*
  %1237 = load i32, i32* %1236
  %1238 = zext i32 %1237 to i64
  store i64 %1238, i64* %RAX, align 8, !tbaa !2428
  %1239 = load i64, i64* %RAX
  %1240 = load i64, i64* %PC
  %1241 = add i64 %1240, 3
  store i64 %1241, i64* %PC
  %1242 = trunc i64 %1239 to i32
  %1243 = add i32 1, %1242
  %1244 = zext i32 %1243 to i64
  store i64 %1244, i64* %RAX, align 8, !tbaa !2428
  %1245 = icmp ult i32 %1243, %1242
  %1246 = icmp ult i32 %1243, 1
  %1247 = or i1 %1245, %1246
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1248, i8* %1249, align 1, !tbaa !2432
  %1250 = and i32 %1243, 255
  %1251 = call i32 @llvm.ctpop.i32(i32 %1250) #16
  %1252 = trunc i32 %1251 to i8
  %1253 = and i8 %1252, 1
  %1254 = xor i8 %1253, 1
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1254, i8* %1255, align 1, !tbaa !2446
  %1256 = xor i64 1, %1239
  %1257 = trunc i64 %1256 to i32
  %1258 = xor i32 %1257, %1243
  %1259 = lshr i32 %1258, 4
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1261, i8* %1262, align 1, !tbaa !2447
  %1263 = icmp eq i32 %1243, 0
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1264, i8* %1265, align 1, !tbaa !2448
  %1266 = lshr i32 %1243, 31
  %1267 = trunc i32 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1267, i8* %1268, align 1, !tbaa !2449
  %1269 = lshr i32 %1242, 31
  %1270 = xor i32 %1266, %1269
  %1271 = add nuw nsw i32 %1270, %1266
  %1272 = icmp eq i32 %1271, 2
  %1273 = zext i1 %1272 to i8
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1273, i8* %1274, align 1, !tbaa !2450
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 44
  %1277 = load i32, i32* %EAX
  %1278 = zext i32 %1277 to i64
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 3
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1276 to i32*
  store i32 %1277, i32* %1281
  %1282 = load i64, i64* %PC
  %1283 = sub i64 %1282, 61
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 5
  store i64 %1285, i64* %PC
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1283, i64* %1286, align 8, !tbaa !2428
  br label %block_402ae8

block_402a23:                                     ; preds = %block_4029e0
  %1287 = load i64, i64* %RBP
  %1288 = sub i64 %1287, 20
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 4
  store i64 %1290, i64* %PC
  %1291 = inttoptr i64 %1288 to i32*
  %1292 = load i32, i32* %1291
  %1293 = sub i32 %1292, 1
  %1294 = icmp ult i32 %1292, 1
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1295, i8* %1296, align 1, !tbaa !2432
  %1297 = and i32 %1293, 255
  %1298 = call i32 @llvm.ctpop.i32(i32 %1297) #16
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  %1301 = xor i8 %1300, 1
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1301, i8* %1302, align 1, !tbaa !2446
  %1303 = xor i32 %1292, 1
  %1304 = xor i32 %1303, %1293
  %1305 = lshr i32 %1304, 4
  %1306 = trunc i32 %1305 to i8
  %1307 = and i8 %1306, 1
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1307, i8* %1308, align 1, !tbaa !2447
  %1309 = icmp eq i32 %1293, 0
  %1310 = zext i1 %1309 to i8
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1310, i8* %1311, align 1, !tbaa !2448
  %1312 = lshr i32 %1293, 31
  %1313 = trunc i32 %1312 to i8
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1313, i8* %1314, align 1, !tbaa !2449
  %1315 = lshr i32 %1292, 31
  %1316 = xor i32 %1312, %1315
  %1317 = add nuw nsw i32 %1316, %1315
  %1318 = icmp eq i32 %1317, 2
  %1319 = zext i1 %1318 to i8
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1319, i8* %1320, align 1, !tbaa !2450
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 16
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 6
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 6
  store i64 %1326, i64* %PC
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1328 = load i8, i8* %1327, align 1, !tbaa !2448
  %1329 = icmp eq i8 %1328, 0
  %1330 = zext i1 %1329 to i8
  store i8 %1330, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1332 = select i1 %1329, i64 %1322, i64 %1324
  store i64 %1332, i64* %1331, align 8, !tbaa !2428
  %1333 = load i8, i8* %BRANCH_TAKEN
  %1334 = icmp eq i8 %1333, 1
  br i1 %1334, label %block_402a37, label %block_402a2d

block_402ae1:                                     ; preds = %block_402a2d
  %1335 = load i64, i64* %RBP
  %1336 = sub i64 %1335, 44
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 7
  store i64 %1338, i64* %PC
  %1339 = inttoptr i64 %1336 to i32*
  store i32 0, i32* %1339
  br label %block_402ae8
}

; Function Attrs: noinline
define %struct.Memory* @sub_401750_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401750:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %47 to %"class.std::bitset"*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %51 to %union.vec128_t*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = load i64, i64* %RBP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %60
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  %64 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %65 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %66 = bitcast %union.vec128_t* %XMM0 to i8*
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = bitcast i8* %65 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = getelementptr inbounds i8, i8* %65, i64 8
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = bitcast i8* %66 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = getelementptr inbounds i8, i8* %66, i64 8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = xor i64 %75, %70
  %80 = xor i64 %78, %73
  %81 = trunc i64 %79 to i32
  %82 = lshr i64 %79, 32
  %83 = trunc i64 %82 to i32
  %84 = bitcast i8* %64 to i32*
  store i32 %81, i32* %84, align 1, !tbaa !2456
  %85 = getelementptr inbounds i8, i8* %64, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 %83, i32* %86, align 1, !tbaa !2456
  %87 = trunc i64 %80 to i32
  %88 = getelementptr inbounds i8, i8* %64, i64 8
  %89 = bitcast i8* %88 to i32*
  store i32 %87, i32* %89, align 1, !tbaa !2456
  %90 = lshr i64 %80, 32
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i8, i8* %64, i64 12
  %93 = bitcast i8* %92 to i32*
  store i32 %91, i32* %93, align 1, !tbaa !2456
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 8
  %96 = load i64, i64* %RDI
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 12
  %102 = load i32, i32* %ESI
  %103 = zext i32 %102 to i64
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 16
  %109 = load i32, i32* %EDX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %113
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 24
  %116 = load i64, i64* %RCX
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 32
  %122 = load i64, i64* %R8
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %121 to i64*
  store i64 %122, i64* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 36
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 1325, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 32
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = load i64, i64* %RCX
  %138 = bitcast %union.vec128_t* %XMM0 to i8*
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = bitcast i8* %138 to <2 x float>*
  %142 = load <2 x float>, <2 x float>* %141, align 1
  %143 = extractelement <2 x float> %142, i32 0
  %144 = inttoptr i64 %137 to float*
  store float %143, float* %144
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 44
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i32*
  store i32 0, i32* %149
  br label %block_40177f

block_40177f:                                     ; preds = %block_40185a, %block_401750
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401750 ], [ %MEMORY.5, %block_40185a ]
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 44
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 3
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  %155 = load i32, i32* %154
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i32, i32* %EAX
  %158 = zext i32 %157 to i64
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 16
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 3
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i32*
  %164 = load i32, i32* %163
  %165 = sub i32 %157, %164
  %166 = icmp ult i32 %157, %164
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %167, i8* %168, align 1, !tbaa !2432
  %169 = and i32 %165, 255
  %170 = call i32 @llvm.ctpop.i32(i32 %169) #16
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %173, i8* %174, align 1, !tbaa !2446
  %175 = xor i32 %164, %157
  %176 = xor i32 %175, %165
  %177 = lshr i32 %176, 4
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %179, i8* %180, align 1, !tbaa !2447
  %181 = icmp eq i32 %165, 0
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %182, i8* %183, align 1, !tbaa !2448
  %184 = lshr i32 %165, 31
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %185, i8* %186, align 1, !tbaa !2449
  %187 = lshr i32 %157, 31
  %188 = lshr i32 %164, 31
  %189 = xor i32 %188, %187
  %190 = xor i32 %184, %187
  %191 = add nuw nsw i32 %190, %189
  %192 = icmp eq i32 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 232
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 6
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 6
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %202 = load i8, i8* %201, align 1, !tbaa !2449
  %203 = icmp ne i8 %202, 0
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %205 = load i8, i8* %204, align 1, !tbaa !2450
  %206 = icmp ne i8 %205, 0
  %207 = xor i1 %203, %206
  %208 = xor i1 %207, true
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %211 = select i1 %207, i64 %198, i64 %196
  store i64 %211, i64* %210, align 8, !tbaa !2428
  %212 = load i8, i8* %BRANCH_TAKEN
  %213 = icmp eq i8 %212, 1
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 40
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 7
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i32*
  store i32 0, i32* %218
  br i1 %213, label %block_401874, label %block_401792

block_4018c4:                                     ; preds = %block_4018b8
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 24
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 40
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  store i64 %231, i64* %RCX, align 8, !tbaa !2428
  %232 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %233 = load i64, i64* %RAX
  %234 = load i64, i64* %RCX
  %235 = mul i64 %234, 4
  %236 = add i64 %235, %233
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  store i64 %238, i64* %PC
  %239 = inttoptr i64 %236 to float*
  %240 = load float, float* %239
  %241 = bitcast i8* %232 to float*
  store float %240, float* %241, align 1, !tbaa !2452
  %242 = getelementptr inbounds i8, i8* %232, i64 4
  %243 = bitcast i8* %242 to float*
  store float 0.000000e+00, float* %243, align 1, !tbaa !2452
  %244 = getelementptr inbounds i8, i8* %232, i64 8
  %245 = bitcast i8* %244 to float*
  store float 0.000000e+00, float* %245, align 1, !tbaa !2452
  %246 = getelementptr inbounds i8, i8* %232, i64 12
  %247 = bitcast i8* %246 to float*
  store float 0.000000e+00, float* %247, align 1, !tbaa !2452
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 8
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 12
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 3
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i32*
  %259 = load i32, i32* %258
  %260 = zext i32 %259 to i64
  store i64 %260, i64* %RDX, align 8, !tbaa !2428
  %261 = load i64, i64* %RDX
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 44
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i32*
  %267 = load i32, i32* %266
  %268 = shl i64 %261, 32
  %269 = ashr exact i64 %268, 32
  %270 = sext i32 %267 to i64
  %271 = mul nsw i64 %270, %269
  %272 = trunc i64 %271 to i32
  %273 = and i64 %271, 4294967295
  store i64 %273, i64* %RDX, align 8, !tbaa !2428
  %274 = shl i64 %271, 32
  %275 = ashr exact i64 %274, 32
  %276 = icmp ne i64 %275, %271
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %277, i8* %278, align 1, !tbaa !2432
  %279 = and i32 %272, 255
  %280 = call i32 @llvm.ctpop.i32(i32 %279) #16
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %283, i8* %284, align 1, !tbaa !2446
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %285, align 1, !tbaa !2447
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %286, align 1, !tbaa !2448
  %287 = lshr i32 %272, 31
  %288 = trunc i32 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %288, i8* %289, align 1, !tbaa !2449
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %277, i8* %290, align 1, !tbaa !2450
  %291 = load i64, i64* %RDX
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 40
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 3
  store i64 %295, i64* %PC
  %296 = trunc i64 %291 to i32
  %297 = inttoptr i64 %293 to i32*
  %298 = load i32, i32* %297
  %299 = add i32 %298, %296
  %300 = zext i32 %299 to i64
  store i64 %300, i64* %RDX, align 8, !tbaa !2428
  %301 = icmp ult i32 %299, %296
  %302 = icmp ult i32 %299, %298
  %303 = or i1 %301, %302
  %304 = zext i1 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %304, i8* %305, align 1, !tbaa !2432
  %306 = and i32 %299, 255
  %307 = call i32 @llvm.ctpop.i32(i32 %306) #16
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  %310 = xor i8 %309, 1
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %310, i8* %311, align 1, !tbaa !2446
  %312 = xor i32 %298, %296
  %313 = xor i32 %312, %299
  %314 = lshr i32 %313, 4
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %316, i8* %317, align 1, !tbaa !2447
  %318 = icmp eq i32 %299, 0
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %319, i8* %320, align 1, !tbaa !2448
  %321 = lshr i32 %299, 31
  %322 = trunc i32 %321 to i8
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %322, i8* %323, align 1, !tbaa !2449
  %324 = lshr i32 %296, 31
  %325 = lshr i32 %298, 31
  %326 = xor i32 %321, %324
  %327 = xor i32 %321, %325
  %328 = add nuw nsw i32 %326, %327
  %329 = icmp eq i32 %328, 2
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %330, i8* %331, align 1, !tbaa !2450
  %332 = load i32, i32* %EDX
  %333 = zext i32 %332 to i64
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 3
  store i64 %335, i64* %PC
  %336 = shl i64 %333, 32
  %337 = ashr exact i64 %336, 32
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %338 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %339 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %340 = load i64, i64* %RAX
  %341 = load i64, i64* %RCX
  %342 = mul i64 %341, 4
  %343 = add i64 %342, %340
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 5
  store i64 %345, i64* %PC
  %346 = bitcast i8* %339 to <2 x float>*
  %347 = load <2 x float>, <2 x float>* %346, align 1
  %348 = getelementptr inbounds i8, i8* %339, i64 8
  %349 = bitcast i8* %348 to <2 x i32>*
  %350 = load <2 x i32>, <2 x i32>* %349, align 1
  %351 = inttoptr i64 %343 to float*
  %352 = load float, float* %351
  %353 = extractelement <2 x float> %347, i32 0
  %354 = fadd float %353, %352
  %355 = bitcast i8* %338 to float*
  store float %354, float* %355, align 1, !tbaa !2452
  %356 = bitcast <2 x float> %347 to <2 x i32>
  %357 = extractelement <2 x i32> %356, i32 1
  %358 = getelementptr inbounds i8, i8* %338, i64 4
  %359 = bitcast i8* %358 to i32*
  store i32 %357, i32* %359, align 1, !tbaa !2452
  %360 = extractelement <2 x i32> %350, i32 0
  %361 = getelementptr inbounds i8, i8* %338, i64 8
  %362 = bitcast i8* %361 to i32*
  store i32 %360, i32* %362, align 1, !tbaa !2452
  %363 = extractelement <2 x i32> %350, i32 1
  %364 = getelementptr inbounds i8, i8* %338, i64 12
  %365 = bitcast i8* %364 to i32*
  store i32 %363, i32* %365, align 1, !tbaa !2452
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 24
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 40
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %373 to i32*
  %377 = load i32, i32* %376
  %378 = sext i32 %377 to i64
  store i64 %378, i64* %RCX, align 8, !tbaa !2428
  %379 = load i64, i64* %RAX
  %380 = load i64, i64* %RCX
  %381 = mul i64 %380, 4
  %382 = add i64 %381, %379
  %383 = bitcast %union.vec128_t* %XMM0 to i8*
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  store i64 %385, i64* %PC
  %386 = bitcast i8* %383 to <2 x float>*
  %387 = load <2 x float>, <2 x float>* %386, align 1
  %388 = extractelement <2 x float> %387, i32 0
  %389 = inttoptr i64 %382 to float*
  store float %388, float* %389
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 40
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = trunc i64 %397 to i32
  %401 = add i32 1, %400
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = icmp ult i32 %401, %400
  %404 = icmp ult i32 %401, 1
  %405 = or i1 %403, %404
  %406 = zext i1 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %406, i8* %407, align 1, !tbaa !2432
  %408 = and i32 %401, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #16
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2446
  %414 = xor i64 1, %397
  %415 = trunc i64 %414 to i32
  %416 = xor i32 %415, %401
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %419, i8* %420, align 1, !tbaa !2447
  %421 = icmp eq i32 %401, 0
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %422, i8* %423, align 1, !tbaa !2448
  %424 = lshr i32 %401, 31
  %425 = trunc i32 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %425, i8* %426, align 1, !tbaa !2449
  %427 = lshr i32 %400, 31
  %428 = xor i32 %424, %427
  %429 = add nuw nsw i32 %428, %424
  %430 = icmp eq i32 %429, 2
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %431, i8* %432, align 1, !tbaa !2450
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 40
  %435 = load i32, i32* %EAX
  %436 = zext i32 %435 to i64
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = inttoptr i64 %434 to i32*
  store i32 %435, i32* %439
  %440 = load i64, i64* %PC
  %441 = sub i64 %440, 69
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %441, i64* %444, align 8, !tbaa !2428
  br label %block_4018b8

block_4018b8:                                     ; preds = %block_4018b1, %block_4018c4
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_4018b1 ], [ %MEMORY.1, %block_4018c4 ]
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 40
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 3
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %446 to i32*
  %450 = load i32, i32* %449
  %451 = zext i32 %450 to i64
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i32, i32* %EAX
  %453 = zext i32 %452 to i64
  %454 = load i64, i64* %RBP
  %455 = sub i64 %454, 16
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 3
  store i64 %457, i64* %PC
  %458 = inttoptr i64 %455 to i32*
  %459 = load i32, i32* %458
  %460 = sub i32 %452, %459
  %461 = icmp ult i32 %452, %459
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = and i32 %460, 255
  %465 = call i32 @llvm.ctpop.i32(i32 %464) #16
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %468, i8* %469, align 1, !tbaa !2446
  %470 = xor i32 %459, %452
  %471 = xor i32 %470, %460
  %472 = lshr i32 %471, 4
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %474, i8* %475, align 1, !tbaa !2447
  %476 = icmp eq i32 %460, 0
  %477 = zext i1 %476 to i8
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %477, i8* %478, align 1, !tbaa !2448
  %479 = lshr i32 %460, 31
  %480 = trunc i32 %479 to i8
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %480, i8* %481, align 1, !tbaa !2449
  %482 = lshr i32 %452, 31
  %483 = lshr i32 %459, 31
  %484 = xor i32 %483, %482
  %485 = xor i32 %479, %482
  %486 = add nuw nsw i32 %485, %484
  %487 = icmp eq i32 %486, 2
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %488, i8* %489, align 1, !tbaa !2450
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 68
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 6
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 6
  store i64 %495, i64* %PC
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %497 = load i8, i8* %496, align 1, !tbaa !2449
  %498 = icmp ne i8 %497, 0
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %500 = load i8, i8* %499, align 1, !tbaa !2450
  %501 = icmp ne i8 %500, 0
  %502 = xor i1 %498, %501
  %503 = xor i1 %502, true
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %506 = select i1 %502, i64 %493, i64 %491
  store i64 %506, i64* %505, align 8, !tbaa !2428
  %507 = load i8, i8* %BRANCH_TAKEN
  %508 = icmp eq i8 %507, 1
  br i1 %508, label %block_401902, label %block_4018c4

block_40189e:                                     ; preds = %block_401874
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 44
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 7
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  store i32 0, i32* %513
  br label %block_4018a5

block_4018b1:                                     ; preds = %block_4018a5
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 40
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 7
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i32*
  store i32 0, i32* %518
  br label %block_4018b8

block_401832:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %519 = sub i64 %1139, 32
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 4
  store i64 %521, i64* %PC
  %522 = inttoptr i64 %519 to i64*
  %523 = load i64, i64* %522
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %525 = load i64, i64* %RAX
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 4
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to float*
  %529 = load float, float* %528
  %530 = bitcast i8* %524 to float*
  store float %529, float* %530, align 1, !tbaa !2452
  %531 = getelementptr inbounds i8, i8* %524, i64 4
  %532 = bitcast i8* %531 to float*
  store float 0.000000e+00, float* %532, align 1, !tbaa !2452
  %533 = getelementptr inbounds i8, i8* %524, i64 8
  %534 = bitcast i8* %533 to float*
  store float 0.000000e+00, float* %534, align 1, !tbaa !2452
  %535 = getelementptr inbounds i8, i8* %524, i64 12
  %536 = bitcast i8* %535 to float*
  store float 0.000000e+00, float* %536, align 1, !tbaa !2452
  %537 = load i64, i64* %RBP
  %538 = sub i64 %537, 52
  %539 = bitcast %union.vec128_t* %XMM0 to i8*
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  store i64 %541, i64* %PC
  %542 = bitcast i8* %539 to <2 x float>*
  %543 = load <2 x float>, <2 x float>* %542, align 1
  %544 = extractelement <2 x float> %543, i32 0
  %545 = inttoptr i64 %538 to float*
  store float %544, float* %545
  br label %block_40183f

block_4018a5:                                     ; preds = %block_401902, %block_40189e
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_40189e ], [ %MEMORY.1, %block_401902 ]
  %546 = load i64, i64* %RBP
  %547 = sub i64 %546, 44
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 3
  store i64 %549, i64* %PC
  %550 = inttoptr i64 %547 to i32*
  %551 = load i32, i32* %550
  %552 = zext i32 %551 to i64
  store i64 %552, i64* %RAX, align 8, !tbaa !2428
  %553 = load i32, i32* %EAX
  %554 = zext i32 %553 to i64
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 16
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i32*
  %560 = load i32, i32* %559
  %561 = sub i32 %553, %560
  %562 = icmp ult i32 %553, %560
  %563 = zext i1 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %563, i8* %564, align 1, !tbaa !2432
  %565 = and i32 %561, 255
  %566 = call i32 @llvm.ctpop.i32(i32 %565) #16
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %569, i8* %570, align 1, !tbaa !2446
  %571 = xor i32 %560, %553
  %572 = xor i32 %571, %561
  %573 = lshr i32 %572, 4
  %574 = trunc i32 %573 to i8
  %575 = and i8 %574, 1
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %575, i8* %576, align 1, !tbaa !2447
  %577 = icmp eq i32 %561, 0
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %578, i8* %579, align 1, !tbaa !2448
  %580 = lshr i32 %561, 31
  %581 = trunc i32 %580 to i8
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %581, i8* %582, align 1, !tbaa !2449
  %583 = lshr i32 %553, 31
  %584 = lshr i32 %560, 31
  %585 = xor i32 %584, %583
  %586 = xor i32 %580, %583
  %587 = add nuw nsw i32 %586, %585
  %588 = icmp eq i32 %587, 2
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %589, i8* %590, align 1, !tbaa !2450
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 106
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 6
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 6
  store i64 %596, i64* %PC
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %598 = load i8, i8* %597, align 1, !tbaa !2449
  %599 = icmp ne i8 %598, 0
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %601 = load i8, i8* %600, align 1, !tbaa !2450
  %602 = icmp ne i8 %601, 0
  %603 = xor i1 %599, %602
  %604 = xor i1 %603, true
  %605 = zext i1 %604 to i8
  store i8 %605, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %607 = select i1 %603, i64 %594, i64 %592
  store i64 %607, i64* %606, align 8, !tbaa !2428
  %608 = load i8, i8* %BRANCH_TAKEN
  %609 = icmp eq i8 %608, 1
  br i1 %609, label %block_401915, label %block_4018b1

block_40183f:                                     ; preds = %block_401812, %block_401832
  %MEMORY.3 = phi %struct.Memory* [ %1121, %block_401832 ], [ %1121, %block_401812 ]
  %610 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 52
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 5
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to float*
  %616 = load float, float* %615
  %617 = bitcast i8* %610 to float*
  store float %616, float* %617, align 1, !tbaa !2452
  %618 = getelementptr inbounds i8, i8* %610, i64 4
  %619 = bitcast i8* %618 to float*
  store float 0.000000e+00, float* %619, align 1, !tbaa !2452
  %620 = getelementptr inbounds i8, i8* %610, i64 8
  %621 = bitcast i8* %620 to float*
  store float 0.000000e+00, float* %621, align 1, !tbaa !2452
  %622 = getelementptr inbounds i8, i8* %610, i64 12
  %623 = bitcast i8* %622 to float*
  store float 0.000000e+00, float* %623, align 1, !tbaa !2452
  %624 = load i64, i64* %RBP
  %625 = sub i64 %624, 32
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 4
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %625 to i64*
  %629 = load i64, i64* %628
  store i64 %629, i64* %RAX, align 8, !tbaa !2428
  %630 = load i64, i64* %RAX
  %631 = bitcast %union.vec128_t* %XMM0 to i8*
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC
  %634 = bitcast i8* %631 to <2 x float>*
  %635 = load <2 x float>, <2 x float>* %634, align 1
  %636 = extractelement <2 x float> %635, i32 0
  %637 = inttoptr i64 %630 to float*
  store float %636, float* %637
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 40
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 3
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to i32*
  %643 = load i32, i32* %642
  %644 = zext i32 %643 to i64
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = load i64, i64* %RAX
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC
  %648 = trunc i64 %645 to i32
  %649 = add i32 1, %648
  %650 = zext i32 %649 to i64
  store i64 %650, i64* %RAX, align 8, !tbaa !2428
  %651 = icmp ult i32 %649, %648
  %652 = icmp ult i32 %649, 1
  %653 = or i1 %651, %652
  %654 = zext i1 %653 to i8
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %654, i8* %655, align 1, !tbaa !2432
  %656 = and i32 %649, 255
  %657 = call i32 @llvm.ctpop.i32(i32 %656) #16
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %660, i8* %661, align 1, !tbaa !2446
  %662 = xor i64 1, %645
  %663 = trunc i64 %662 to i32
  %664 = xor i32 %663, %649
  %665 = lshr i32 %664, 4
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %667, i8* %668, align 1, !tbaa !2447
  %669 = icmp eq i32 %649, 0
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %670, i8* %671, align 1, !tbaa !2448
  %672 = lshr i32 %649, 31
  %673 = trunc i32 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %673, i8* %674, align 1, !tbaa !2449
  %675 = lshr i32 %648, 31
  %676 = xor i32 %672, %675
  %677 = add nuw nsw i32 %676, %672
  %678 = icmp eq i32 %677, 2
  %679 = zext i1 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %679, i8* %680, align 1, !tbaa !2450
  %681 = load i64, i64* %RBP
  %682 = sub i64 %681, 40
  %683 = load i32, i32* %EAX
  %684 = zext i32 %683 to i64
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 3
  store i64 %686, i64* %PC
  %687 = inttoptr i64 %682 to i32*
  store i32 %683, i32* %687
  %688 = load i64, i64* %PC
  %689 = sub i64 %688, 195
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 5
  store i64 %691, i64* %PC
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %689, i64* %692, align 8, !tbaa !2428
  br label %block_401792

block_40179e:                                     ; preds = %block_401792
  %693 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 8
  store i64 %695, i64* %PC
  %696 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 56) to double*)
  %697 = bitcast i8* %693 to double*
  store double %696, double* %697, align 1, !tbaa !2454
  %698 = getelementptr inbounds i8, i8* %693, i64 8
  %699 = bitcast i8* %698 to double*
  store double 0.000000e+00, double* %699, align 1, !tbaa !2454
  %700 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 8
  store i64 %702, i64* %PC
  %703 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 64) to double*)
  %704 = bitcast i8* %700 to double*
  store double %703, double* %704, align 1, !tbaa !2454
  %705 = getelementptr inbounds i8, i8* %700, i64 8
  %706 = bitcast i8* %705 to double*
  store double 0.000000e+00, double* %706, align 1, !tbaa !2454
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 5
  store i64 %708, i64* %PC
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 36
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 7
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i32*
  %714 = load i32, i32* %713
  %715 = sext i32 %714 to i64
  %716 = mul nsw i64 %715, 3125
  %717 = trunc i64 %716 to i32
  %718 = and i64 %716, 4294967295
  store i64 %718, i64* %RCX, align 8, !tbaa !2428
  %719 = shl i64 %716, 32
  %720 = ashr exact i64 %719, 32
  %721 = icmp ne i64 %720, %716
  %722 = zext i1 %721 to i8
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %722, i8* %723, align 1, !tbaa !2432
  %724 = and i32 %717, 255
  %725 = call i32 @llvm.ctpop.i32(i32 %724) #16
  %726 = trunc i32 %725 to i8
  %727 = and i8 %726, 1
  %728 = xor i8 %727, 1
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %728, i8* %729, align 1, !tbaa !2446
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %730, align 1, !tbaa !2447
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %731, align 1, !tbaa !2448
  %732 = lshr i32 %717, 31
  %733 = trunc i32 %732 to i8
  %734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %733, i8* %734, align 1, !tbaa !2449
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %722, i8* %735, align 1, !tbaa !2450
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 48
  %738 = load i32, i32* %EAX
  %739 = zext i32 %738 to i64
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 3
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %737 to i32*
  store i32 %738, i32* %742
  %743 = load i32, i32* %ECX
  %744 = zext i32 %743 to i64
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 2
  store i64 %746, i64* %PC
  %747 = and i64 %744, 4294967295
  store i64 %747, i64* %RAX, align 8, !tbaa !2428
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 1
  store i64 %749, i64* %PC
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %752 = bitcast %union.anon* %751 to i32*
  %753 = load i32, i32* %752, align 8, !tbaa !2456
  %754 = sext i32 %753 to i64
  %755 = lshr i64 %754, 32
  store i64 %755, i64* %750, align 8, !tbaa !2428
  %756 = load i64, i64* %RBP
  %757 = sub i64 %756, 48
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 3
  store i64 %759, i64* %PC
  %760 = inttoptr i64 %757 to i32*
  %761 = load i32, i32* %760
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RCX, align 8, !tbaa !2428
  %763 = load i32, i32* %ECX
  %764 = zext i32 %763 to i64
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 2
  store i64 %766, i64* %PC
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %768 = bitcast %union.anon* %767 to i32*
  %769 = load i32, i32* %768, align 8, !tbaa !2456
  %770 = zext i32 %769 to i64
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %772 = bitcast %union.anon* %771 to i32*
  %773 = load i32, i32* %772, align 8, !tbaa !2456
  %774 = zext i32 %773 to i64
  %775 = shl i64 %764, 32
  %776 = ashr exact i64 %775, 32
  %777 = shl nuw i64 %774, 32
  %778 = or i64 %777, %770
  %779 = sdiv i64 %778, %776
  %780 = shl i64 %779, 32
  %781 = ashr exact i64 %780, 32
  %782 = icmp eq i64 %779, %781
  br i1 %782, label %787, label %783

; <label>:783:                                    ; preds = %block_40179e
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %785 = load i64, i64* %784, align 8, !tbaa !2428
  %786 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %785, %struct.Memory* %MEMORY.5) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:787:                                    ; preds = %block_40179e
  %788 = srem i64 %778, %776
  %789 = getelementptr inbounds %union.anon, %union.anon* %767, i64 0, i32 0
  %790 = and i64 %779, 4294967295
  store i64 %790, i64* %789, align 8, !tbaa !2428
  %791 = getelementptr inbounds %union.anon, %union.anon* %771, i64 0, i32 0
  %792 = and i64 %788, 4294967295
  store i64 %792, i64* %791, align 8, !tbaa !2428
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %793, align 1, !tbaa !2432
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %794, align 1, !tbaa !2446
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %795, align 1, !tbaa !2447
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %796, align 1, !tbaa !2448
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %797, align 1, !tbaa !2449
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %798, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %783, %787
  %799 = phi %struct.Memory* [ %786, %783 ], [ %MEMORY.5, %787 ]
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 36
  %802 = load i32, i32* %EDX
  %803 = zext i32 %802 to i64
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 3
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %801 to i32*
  store i32 %802, i32* %806
  %807 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 36
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 5
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i32*
  %813 = load i32, i32* %812
  %814 = sitofp i32 %813 to double
  %815 = bitcast i8* %807 to double*
  store double %814, double* %815, align 1, !tbaa !2454
  %816 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %817 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %818 = bitcast %union.vec128_t* %XMM1 to i8*
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 4
  store i64 %820, i64* %PC
  %821 = bitcast i8* %817 to double*
  %822 = load double, double* %821, align 1
  %823 = getelementptr inbounds i8, i8* %817, i64 8
  %824 = bitcast i8* %823 to i64*
  %825 = load i64, i64* %824, align 1
  %826 = bitcast i8* %818 to double*
  %827 = load double, double* %826, align 1
  %828 = fsub double %822, %827
  %829 = bitcast i8* %816 to double*
  store double %828, double* %829, align 1, !tbaa !2454
  %830 = getelementptr inbounds i8, i8* %816, i64 8
  %831 = bitcast i8* %830 to i64*
  store i64 %825, i64* %831, align 1, !tbaa !2454
  %832 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %833 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %834 = bitcast %union.vec128_t* %XMM0 to i8*
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 4
  store i64 %836, i64* %PC
  %837 = bitcast i8* %833 to double*
  %838 = load double, double* %837, align 1
  %839 = getelementptr inbounds i8, i8* %833, i64 8
  %840 = bitcast i8* %839 to i64*
  %841 = load i64, i64* %840, align 1
  %842 = bitcast i8* %834 to double*
  %843 = load double, double* %842, align 1
  %844 = fdiv double %838, %843
  %845 = bitcast i8* %832 to double*
  store double %844, double* %845, align 1, !tbaa !2454
  %846 = getelementptr inbounds i8, i8* %832, i64 8
  %847 = bitcast i8* %846 to i64*
  store i64 %841, i64* %847, align 1, !tbaa !2454
  %848 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %849 = bitcast %union.vec128_t* %XMM2 to i8*
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 4
  store i64 %851, i64* %PC
  %852 = bitcast i8* %848 to <2 x i32>*
  %853 = load <2 x i32>, <2 x i32>* %852, align 1
  %854 = getelementptr inbounds i8, i8* %848, i64 8
  %855 = bitcast i8* %854 to <2 x i32>*
  %856 = load <2 x i32>, <2 x i32>* %855, align 1
  %857 = bitcast i8* %849 to double*
  %858 = load double, double* %857, align 1
  %859 = fptrunc double %858 to float
  %860 = bitcast i8* %848 to float*
  store float %859, float* %860, align 1, !tbaa !2452
  %861 = extractelement <2 x i32> %853, i32 1
  %862 = getelementptr inbounds i8, i8* %848, i64 4
  %863 = bitcast i8* %862 to i32*
  store i32 %861, i32* %863, align 1, !tbaa !2452
  %864 = extractelement <2 x i32> %856, i32 0
  %865 = bitcast i8* %854 to i32*
  store i32 %864, i32* %865, align 1, !tbaa !2452
  %866 = extractelement <2 x i32> %856, i32 1
  %867 = getelementptr inbounds i8, i8* %848, i64 12
  %868 = bitcast i8* %867 to i32*
  store i32 %866, i32* %868, align 1, !tbaa !2452
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 8
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 4
  store i64 %872, i64* %PC
  %873 = inttoptr i64 %870 to i64*
  %874 = load i64, i64* %873
  store i64 %874, i64* %RSI, align 8, !tbaa !2428
  %875 = load i64, i64* %RBP
  %876 = sub i64 %875, 12
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 3
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %876 to i32*
  %880 = load i32, i32* %879
  %881 = zext i32 %880 to i64
  store i64 %881, i64* %RDX, align 8, !tbaa !2428
  %882 = load i64, i64* %RDX
  %883 = load i64, i64* %RBP
  %884 = sub i64 %883, 44
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 4
  store i64 %886, i64* %PC
  %887 = inttoptr i64 %884 to i32*
  %888 = load i32, i32* %887
  %889 = shl i64 %882, 32
  %890 = ashr exact i64 %889, 32
  %891 = sext i32 %888 to i64
  %892 = mul nsw i64 %891, %890
  %893 = trunc i64 %892 to i32
  %894 = and i64 %892, 4294967295
  store i64 %894, i64* %RDX, align 8, !tbaa !2428
  %895 = shl i64 %892, 32
  %896 = ashr exact i64 %895, 32
  %897 = icmp ne i64 %896, %892
  %898 = zext i1 %897 to i8
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %898, i8* %899, align 1, !tbaa !2432
  %900 = and i32 %893, 255
  %901 = call i32 @llvm.ctpop.i32(i32 %900) #16
  %902 = trunc i32 %901 to i8
  %903 = and i8 %902, 1
  %904 = xor i8 %903, 1
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %904, i8* %905, align 1, !tbaa !2446
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %906, align 1, !tbaa !2447
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %907, align 1, !tbaa !2448
  %908 = lshr i32 %893, 31
  %909 = trunc i32 %908 to i8
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %909, i8* %910, align 1, !tbaa !2449
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %898, i8* %911, align 1, !tbaa !2450
  %912 = load i64, i64* %RDX
  %913 = load i64, i64* %RBP
  %914 = sub i64 %913, 40
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 3
  store i64 %916, i64* %PC
  %917 = trunc i64 %912 to i32
  %918 = inttoptr i64 %914 to i32*
  %919 = load i32, i32* %918
  %920 = add i32 %919, %917
  %921 = zext i32 %920 to i64
  store i64 %921, i64* %RDX, align 8, !tbaa !2428
  %922 = icmp ult i32 %920, %917
  %923 = icmp ult i32 %920, %919
  %924 = or i1 %922, %923
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %925, i8* %926, align 1, !tbaa !2432
  %927 = and i32 %920, 255
  %928 = call i32 @llvm.ctpop.i32(i32 %927) #16
  %929 = trunc i32 %928 to i8
  %930 = and i8 %929, 1
  %931 = xor i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %931, i8* %932, align 1, !tbaa !2446
  %933 = xor i32 %919, %917
  %934 = xor i32 %933, %920
  %935 = lshr i32 %934, 4
  %936 = trunc i32 %935 to i8
  %937 = and i8 %936, 1
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %937, i8* %938, align 1, !tbaa !2447
  %939 = icmp eq i32 %920, 0
  %940 = zext i1 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %940, i8* %941, align 1, !tbaa !2448
  %942 = lshr i32 %920, 31
  %943 = trunc i32 %942 to i8
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %943, i8* %944, align 1, !tbaa !2449
  %945 = lshr i32 %917, 31
  %946 = lshr i32 %919, 31
  %947 = xor i32 %942, %945
  %948 = xor i32 %942, %946
  %949 = add nuw nsw i32 %947, %948
  %950 = icmp eq i32 %949, 2
  %951 = zext i1 %950 to i8
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %951, i8* %952, align 1, !tbaa !2450
  %953 = load i32, i32* %EDX
  %954 = zext i32 %953 to i64
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 3
  store i64 %956, i64* %PC
  %957 = shl i64 %954, 32
  %958 = ashr exact i64 %957, 32
  store i64 %958, i64* %RDI, align 8, !tbaa !2428
  %959 = load i64, i64* %RSI
  %960 = load i64, i64* %RDI
  %961 = mul i64 %960, 4
  %962 = add i64 %961, %959
  %963 = bitcast %union.vec128_t* %XMM0 to i8*
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 5
  store i64 %965, i64* %PC
  %966 = bitcast i8* %963 to <2 x float>*
  %967 = load <2 x float>, <2 x float>* %966, align 1
  %968 = extractelement <2 x float> %967, i32 0
  %969 = inttoptr i64 %962 to float*
  store float %968, float* %969
  %970 = load i64, i64* %RBP
  %971 = sub i64 %970, 8
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 4
  store i64 %973, i64* %PC
  %974 = inttoptr i64 %971 to i64*
  %975 = load i64, i64* %974
  store i64 %975, i64* %RSI, align 8, !tbaa !2428
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 12
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 3
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i32*
  %981 = load i32, i32* %980
  %982 = zext i32 %981 to i64
  store i64 %982, i64* %RDX, align 8, !tbaa !2428
  %983 = load i64, i64* %RDX
  %984 = load i64, i64* %RBP
  %985 = sub i64 %984, 44
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 4
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i32*
  %989 = load i32, i32* %988
  %990 = shl i64 %983, 32
  %991 = ashr exact i64 %990, 32
  %992 = sext i32 %989 to i64
  %993 = mul nsw i64 %992, %991
  %994 = trunc i64 %993 to i32
  %995 = and i64 %993, 4294967295
  store i64 %995, i64* %RDX, align 8, !tbaa !2428
  %996 = shl i64 %993, 32
  %997 = ashr exact i64 %996, 32
  %998 = icmp ne i64 %997, %993
  %999 = zext i1 %998 to i8
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %999, i8* %1000, align 1, !tbaa !2432
  %1001 = and i32 %994, 255
  %1002 = call i32 @llvm.ctpop.i32(i32 %1001) #16
  %1003 = trunc i32 %1002 to i8
  %1004 = and i8 %1003, 1
  %1005 = xor i8 %1004, 1
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1005, i8* %1006, align 1, !tbaa !2446
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1007, align 1, !tbaa !2447
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1008, align 1, !tbaa !2448
  %1009 = lshr i32 %994, 31
  %1010 = trunc i32 %1009 to i8
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1010, i8* %1011, align 1, !tbaa !2449
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %999, i8* %1012, align 1, !tbaa !2450
  %1013 = load i64, i64* %RDX
  %1014 = load i64, i64* %RBP
  %1015 = sub i64 %1014, 40
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 3
  store i64 %1017, i64* %PC
  %1018 = trunc i64 %1013 to i32
  %1019 = inttoptr i64 %1015 to i32*
  %1020 = load i32, i32* %1019
  %1021 = add i32 %1020, %1018
  %1022 = zext i32 %1021 to i64
  store i64 %1022, i64* %RDX, align 8, !tbaa !2428
  %1023 = icmp ult i32 %1021, %1018
  %1024 = icmp ult i32 %1021, %1020
  %1025 = or i1 %1023, %1024
  %1026 = zext i1 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1026, i8* %1027, align 1, !tbaa !2432
  %1028 = and i32 %1021, 255
  %1029 = call i32 @llvm.ctpop.i32(i32 %1028) #16
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = xor i8 %1031, 1
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1032, i8* %1033, align 1, !tbaa !2446
  %1034 = xor i32 %1020, %1018
  %1035 = xor i32 %1034, %1021
  %1036 = lshr i32 %1035, 4
  %1037 = trunc i32 %1036 to i8
  %1038 = and i8 %1037, 1
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1038, i8* %1039, align 1, !tbaa !2447
  %1040 = icmp eq i32 %1021, 0
  %1041 = zext i1 %1040 to i8
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1041, i8* %1042, align 1, !tbaa !2448
  %1043 = lshr i32 %1021, 31
  %1044 = trunc i32 %1043 to i8
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1044, i8* %1045, align 1, !tbaa !2449
  %1046 = lshr i32 %1018, 31
  %1047 = lshr i32 %1020, 31
  %1048 = xor i32 %1043, %1046
  %1049 = xor i32 %1043, %1047
  %1050 = add nuw nsw i32 %1048, %1049
  %1051 = icmp eq i32 %1050, 2
  %1052 = zext i1 %1051 to i8
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1052, i8* %1053, align 1, !tbaa !2450
  %1054 = load i32, i32* %EDX
  %1055 = zext i32 %1054 to i64
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 3
  store i64 %1057, i64* %PC
  %1058 = shl i64 %1055, 32
  %1059 = ashr exact i64 %1058, 32
  store i64 %1059, i64* %RDI, align 8, !tbaa !2428
  %1060 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1061 = load i64, i64* %RSI
  %1062 = load i64, i64* %RDI
  %1063 = mul i64 %1062, 4
  %1064 = add i64 %1063, %1061
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 5
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to float*
  %1068 = load float, float* %1067
  %1069 = bitcast i8* %1060 to float*
  store float %1068, float* %1069, align 1, !tbaa !2452
  %1070 = getelementptr inbounds i8, i8* %1060, i64 4
  %1071 = bitcast i8* %1070 to float*
  store float 0.000000e+00, float* %1071, align 1, !tbaa !2452
  %1072 = getelementptr inbounds i8, i8* %1060, i64 8
  %1073 = bitcast i8* %1072 to float*
  store float 0.000000e+00, float* %1073, align 1, !tbaa !2452
  %1074 = getelementptr inbounds i8, i8* %1060, i64 12
  %1075 = bitcast i8* %1074 to float*
  store float 0.000000e+00, float* %1075, align 1, !tbaa !2452
  %1076 = load i64, i64* %RBP
  %1077 = sub i64 %1076, 32
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 4
  store i64 %1079, i64* %PC
  %1080 = inttoptr i64 %1077 to i64*
  %1081 = load i64, i64* %1080
  store i64 %1081, i64* %RSI, align 8, !tbaa !2428
  %1082 = bitcast %union.vec128_t* %XMM0 to i8*
  %1083 = load i64, i64* %RSI
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = bitcast i8* %1082 to <2 x float>*
  %1087 = load <2 x float>, <2 x float>* %1086, align 1
  %1088 = extractelement <2 x float> %1087, i32 0
  %1089 = inttoptr i64 %1083 to float*
  %1090 = load float, float* %1089
  %1091 = fcmp uno float %1088, %1090
  br i1 %1091, label %1092, label %1104

; <label>:1092:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1093 = fadd float %1088, %1090
  %1094 = bitcast float %1093 to i32
  %1095 = and i32 %1094, 2143289344
  %1096 = icmp eq i32 %1095, 2139095040
  %1097 = and i32 %1094, 4194303
  %1098 = icmp ne i32 %1097, 0
  %1099 = and i1 %1096, %1098
  br i1 %1099, label %1100, label %1110

; <label>:1100:                                   ; preds = %1092
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1102 = load i64, i64* %1101, align 8, !tbaa !2428
  %1103 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1102, %struct.Memory* %799) #17
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:1104:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %1105 = fcmp ogt float %1088, %1090
  br i1 %1105, label %1110, label %1106

; <label>:1106:                                   ; preds = %1104
  %1107 = fcmp olt float %1088, %1090
  br i1 %1107, label %1110, label %1108

; <label>:1108:                                   ; preds = %1106
  %1109 = fcmp oeq float %1088, %1090
  br i1 %1109, label %1110, label %1117

; <label>:1110:                                   ; preds = %1108, %1106, %1104, %1092
  %1111 = phi i8 [ 0, %1104 ], [ 0, %1106 ], [ 1, %1108 ], [ 1, %1092 ]
  %1112 = phi i8 [ 0, %1104 ], [ 0, %1106 ], [ 0, %1108 ], [ 1, %1092 ]
  %1113 = phi i8 [ 0, %1104 ], [ 1, %1106 ], [ 0, %1108 ], [ 1, %1092 ]
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1111, i8* %1114, align 1, !tbaa !2451
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1112, i8* %1115, align 1, !tbaa !2451
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1113, i8* %1116, align 1, !tbaa !2451
  br label %1117

; <label>:1117:                                   ; preds = %1110, %1108
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1118, align 1, !tbaa !2451
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1119, align 1, !tbaa !2451
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1120, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %1100, %1117
  %1121 = phi %struct.Memory* [ %1103, %1100 ], [ %799, %1117 ]
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 38
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 6
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 6
  store i64 %1127, i64* %PC
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1129 = load i8, i8* %1128, align 1, !tbaa !2432
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1131 = load i8, i8* %1130, align 1, !tbaa !2448
  %1132 = or i8 %1131, %1129
  %1133 = icmp ne i8 %1132, 0
  %1134 = zext i1 %1133 to i8
  store i8 %1134, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1136 = select i1 %1133, i64 %1123, i64 %1125
  store i64 %1136, i64* %1135, align 8, !tbaa !2428
  %1137 = load i8, i8* %BRANCH_TAKEN
  %1138 = icmp eq i8 %1137, 1
  %1139 = load i64, i64* %RBP
  br i1 %1138, label %block_401832, label %block_401812

block_401874:                                     ; preds = %block_401880, %block_40177f
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_40177f ], [ %MEMORY.4, %block_401880 ]
  %1140 = load i64, i64* %RBP
  %1141 = sub i64 %1140, 40
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 3
  store i64 %1143, i64* %PC
  %1144 = inttoptr i64 %1141 to i32*
  %1145 = load i32, i32* %1144
  %1146 = zext i32 %1145 to i64
  store i64 %1146, i64* %RAX, align 8, !tbaa !2428
  %1147 = load i32, i32* %EAX
  %1148 = zext i32 %1147 to i64
  %1149 = load i64, i64* %RBP
  %1150 = sub i64 %1149, 16
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 3
  store i64 %1152, i64* %PC
  %1153 = inttoptr i64 %1150 to i32*
  %1154 = load i32, i32* %1153
  %1155 = sub i32 %1147, %1154
  %1156 = icmp ult i32 %1147, %1154
  %1157 = zext i1 %1156 to i8
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1157, i8* %1158, align 1, !tbaa !2432
  %1159 = and i32 %1155, 255
  %1160 = call i32 @llvm.ctpop.i32(i32 %1159) #16
  %1161 = trunc i32 %1160 to i8
  %1162 = and i8 %1161, 1
  %1163 = xor i8 %1162, 1
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1163, i8* %1164, align 1, !tbaa !2446
  %1165 = xor i32 %1154, %1147
  %1166 = xor i32 %1165, %1155
  %1167 = lshr i32 %1166, 4
  %1168 = trunc i32 %1167 to i8
  %1169 = and i8 %1168, 1
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1169, i8* %1170, align 1, !tbaa !2447
  %1171 = icmp eq i32 %1155, 0
  %1172 = zext i1 %1171 to i8
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1172, i8* %1173, align 1, !tbaa !2448
  %1174 = lshr i32 %1155, 31
  %1175 = trunc i32 %1174 to i8
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1175, i8* %1176, align 1, !tbaa !2449
  %1177 = lshr i32 %1147, 31
  %1178 = lshr i32 %1154, 31
  %1179 = xor i32 %1178, %1177
  %1180 = xor i32 %1174, %1177
  %1181 = add nuw nsw i32 %1180, %1179
  %1182 = icmp eq i32 %1181, 2
  %1183 = zext i1 %1182 to i8
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1183, i8* %1184, align 1, !tbaa !2450
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 36
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 6
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 6
  store i64 %1190, i64* %PC
  %1191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1192 = load i8, i8* %1191, align 1, !tbaa !2449
  %1193 = icmp ne i8 %1192, 0
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1195 = load i8, i8* %1194, align 1, !tbaa !2450
  %1196 = icmp ne i8 %1195, 0
  %1197 = xor i1 %1193, %1196
  %1198 = xor i1 %1197, true
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1201 = select i1 %1197, i64 %1188, i64 %1186
  store i64 %1201, i64* %1200, align 8, !tbaa !2428
  %1202 = load i8, i8* %BRANCH_TAKEN
  %1203 = icmp eq i8 %1202, 1
  br i1 %1203, label %block_40189e, label %block_401880

block_401915:                                     ; preds = %block_4018a5
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 1
  store i64 %1205, i64* %PC
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1207 = load i64, i64* %1206, align 8, !tbaa !2428
  %1208 = add i64 %1207, 8
  %1209 = inttoptr i64 %1207 to i64*
  %1210 = load i64, i64* %1209
  store i64 %1210, i64* %RBP, align 8, !tbaa !2428
  store i64 %1208, i64* %1206, align 8, !tbaa !2428
  %1211 = load i64, i64* %PC
  %1212 = add i64 %1211, 1
  store i64 %1212, i64* %PC
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1215 = load i64, i64* %1214, align 8, !tbaa !2428
  %1216 = inttoptr i64 %1215 to i64*
  %1217 = load i64, i64* %1216
  store i64 %1217, i64* %1213, align 8, !tbaa !2428
  %1218 = add i64 %1215, 8
  store i64 %1218, i64* %1214, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_401812:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %1219 = sub i64 %1139, 8
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 4
  store i64 %1221, i64* %PC
  %1222 = inttoptr i64 %1219 to i64*
  %1223 = load i64, i64* %1222
  store i64 %1223, i64* %RAX, align 8, !tbaa !2428
  %1224 = load i64, i64* %RBP
  %1225 = sub i64 %1224, 12
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 3
  store i64 %1227, i64* %PC
  %1228 = inttoptr i64 %1225 to i32*
  %1229 = load i32, i32* %1228
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RCX, align 8, !tbaa !2428
  %1231 = load i64, i64* %RCX
  %1232 = load i64, i64* %RBP
  %1233 = sub i64 %1232, 44
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 4
  store i64 %1235, i64* %PC
  %1236 = inttoptr i64 %1233 to i32*
  %1237 = load i32, i32* %1236
  %1238 = shl i64 %1231, 32
  %1239 = ashr exact i64 %1238, 32
  %1240 = sext i32 %1237 to i64
  %1241 = mul nsw i64 %1240, %1239
  %1242 = trunc i64 %1241 to i32
  %1243 = and i64 %1241, 4294967295
  store i64 %1243, i64* %RCX, align 8, !tbaa !2428
  %1244 = shl i64 %1241, 32
  %1245 = ashr exact i64 %1244, 32
  %1246 = icmp ne i64 %1245, %1241
  %1247 = zext i1 %1246 to i8
  %1248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1247, i8* %1248, align 1, !tbaa !2432
  %1249 = and i32 %1242, 255
  %1250 = call i32 @llvm.ctpop.i32(i32 %1249) #16
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1253, i8* %1254, align 1, !tbaa !2446
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1255, align 1, !tbaa !2447
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1256, align 1, !tbaa !2448
  %1257 = lshr i32 %1242, 31
  %1258 = trunc i32 %1257 to i8
  %1259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1258, i8* %1259, align 1, !tbaa !2449
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1247, i8* %1260, align 1, !tbaa !2450
  %1261 = load i64, i64* %RCX
  %1262 = load i64, i64* %RBP
  %1263 = sub i64 %1262, 40
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 3
  store i64 %1265, i64* %PC
  %1266 = trunc i64 %1261 to i32
  %1267 = inttoptr i64 %1263 to i32*
  %1268 = load i32, i32* %1267
  %1269 = add i32 %1268, %1266
  %1270 = zext i32 %1269 to i64
  store i64 %1270, i64* %RCX, align 8, !tbaa !2428
  %1271 = icmp ult i32 %1269, %1266
  %1272 = icmp ult i32 %1269, %1268
  %1273 = or i1 %1271, %1272
  %1274 = zext i1 %1273 to i8
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1274, i8* %1275, align 1, !tbaa !2432
  %1276 = and i32 %1269, 255
  %1277 = call i32 @llvm.ctpop.i32(i32 %1276) #16
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = xor i8 %1279, 1
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1280, i8* %1281, align 1, !tbaa !2446
  %1282 = xor i32 %1268, %1266
  %1283 = xor i32 %1282, %1269
  %1284 = lshr i32 %1283, 4
  %1285 = trunc i32 %1284 to i8
  %1286 = and i8 %1285, 1
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1286, i8* %1287, align 1, !tbaa !2447
  %1288 = icmp eq i32 %1269, 0
  %1289 = zext i1 %1288 to i8
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1289, i8* %1290, align 1, !tbaa !2448
  %1291 = lshr i32 %1269, 31
  %1292 = trunc i32 %1291 to i8
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1292, i8* %1293, align 1, !tbaa !2449
  %1294 = lshr i32 %1266, 31
  %1295 = lshr i32 %1268, 31
  %1296 = xor i32 %1291, %1294
  %1297 = xor i32 %1291, %1295
  %1298 = add nuw nsw i32 %1296, %1297
  %1299 = icmp eq i32 %1298, 2
  %1300 = zext i1 %1299 to i8
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1300, i8* %1301, align 1, !tbaa !2450
  %1302 = load i32, i32* %ECX
  %1303 = zext i32 %1302 to i64
  %1304 = load i64, i64* %PC
  %1305 = add i64 %1304, 3
  store i64 %1305, i64* %PC
  %1306 = shl i64 %1303, 32
  %1307 = ashr exact i64 %1306, 32
  store i64 %1307, i64* %RDX, align 8, !tbaa !2428
  %1308 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1309 = load i64, i64* %RAX
  %1310 = load i64, i64* %RDX
  %1311 = mul i64 %1310, 4
  %1312 = add i64 %1311, %1309
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 5
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1312 to float*
  %1316 = load float, float* %1315
  %1317 = bitcast i8* %1308 to float*
  store float %1316, float* %1317, align 1, !tbaa !2452
  %1318 = getelementptr inbounds i8, i8* %1308, i64 4
  %1319 = bitcast i8* %1318 to float*
  store float 0.000000e+00, float* %1319, align 1, !tbaa !2452
  %1320 = getelementptr inbounds i8, i8* %1308, i64 8
  %1321 = bitcast i8* %1320 to float*
  store float 0.000000e+00, float* %1321, align 1, !tbaa !2452
  %1322 = getelementptr inbounds i8, i8* %1308, i64 12
  %1323 = bitcast i8* %1322 to float*
  store float 0.000000e+00, float* %1323, align 1, !tbaa !2452
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 52
  %1326 = bitcast %union.vec128_t* %XMM0 to i8*
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 5
  store i64 %1328, i64* %PC
  %1329 = bitcast i8* %1326 to <2 x float>*
  %1330 = load <2 x float>, <2 x float>* %1329, align 1
  %1331 = extractelement <2 x float> %1330, i32 0
  %1332 = inttoptr i64 %1325 to float*
  store float %1331, float* %1332
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 18
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  store i64 %1336, i64* %PC
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1334, i64* %1337, align 8, !tbaa !2428
  br label %block_40183f

block_40185a:                                     ; preds = %block_401792
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 5
  %1340 = load i64, i64* %PC
  %1341 = add i64 %1340, 5
  store i64 %1341, i64* %PC
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1339, i64* %1342, align 8, !tbaa !2428
  %1343 = load i64, i64* %RBP
  %1344 = sub i64 %1343, 44
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 3
  store i64 %1346, i64* %PC
  %1347 = inttoptr i64 %1344 to i32*
  %1348 = load i32, i32* %1347
  %1349 = zext i32 %1348 to i64
  store i64 %1349, i64* %RAX, align 8, !tbaa !2428
  %1350 = load i64, i64* %RAX
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 3
  store i64 %1352, i64* %PC
  %1353 = trunc i64 %1350 to i32
  %1354 = add i32 1, %1353
  %1355 = zext i32 %1354 to i64
  store i64 %1355, i64* %RAX, align 8, !tbaa !2428
  %1356 = icmp ult i32 %1354, %1353
  %1357 = icmp ult i32 %1354, 1
  %1358 = or i1 %1356, %1357
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1359, i8* %1360, align 1, !tbaa !2432
  %1361 = and i32 %1354, 255
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #16
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1365, i8* %1366, align 1, !tbaa !2446
  %1367 = xor i64 1, %1350
  %1368 = trunc i64 %1367 to i32
  %1369 = xor i32 %1368, %1354
  %1370 = lshr i32 %1369, 4
  %1371 = trunc i32 %1370 to i8
  %1372 = and i8 %1371, 1
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1372, i8* %1373, align 1, !tbaa !2447
  %1374 = icmp eq i32 %1354, 0
  %1375 = zext i1 %1374 to i8
  %1376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1375, i8* %1376, align 1, !tbaa !2448
  %1377 = lshr i32 %1354, 31
  %1378 = trunc i32 %1377 to i8
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1378, i8* %1379, align 1, !tbaa !2449
  %1380 = lshr i32 %1353, 31
  %1381 = xor i32 %1377, %1380
  %1382 = add nuw nsw i32 %1381, %1377
  %1383 = icmp eq i32 %1382, 2
  %1384 = zext i1 %1383 to i8
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1384, i8* %1385, align 1, !tbaa !2450
  %1386 = load i64, i64* %RBP
  %1387 = sub i64 %1386, 44
  %1388 = load i32, i32* %EAX
  %1389 = zext i32 %1388 to i64
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 3
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1387 to i32*
  store i32 %1388, i32* %1392
  %1393 = load i64, i64* %PC
  %1394 = sub i64 %1393, 233
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 5
  store i64 %1396, i64* %PC
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1394, i64* %1397, align 8, !tbaa !2428
  br label %block_40177f

block_401792:                                     ; preds = %block_40183f, %block_40177f
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.0, %block_40177f ], [ %MEMORY.3, %block_40183f ]
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 40
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 3
  store i64 %1401, i64* %PC
  %1402 = inttoptr i64 %1399 to i32*
  %1403 = load i32, i32* %1402
  %1404 = zext i32 %1403 to i64
  store i64 %1404, i64* %RAX, align 8, !tbaa !2428
  %1405 = load i32, i32* %EAX
  %1406 = zext i32 %1405 to i64
  %1407 = load i64, i64* %RBP
  %1408 = sub i64 %1407, 16
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 3
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1408 to i32*
  %1412 = load i32, i32* %1411
  %1413 = sub i32 %1405, %1412
  %1414 = icmp ult i32 %1405, %1412
  %1415 = zext i1 %1414 to i8
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1415, i8* %1416, align 1, !tbaa !2432
  %1417 = and i32 %1413, 255
  %1418 = call i32 @llvm.ctpop.i32(i32 %1417) #16
  %1419 = trunc i32 %1418 to i8
  %1420 = and i8 %1419, 1
  %1421 = xor i8 %1420, 1
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1421, i8* %1422, align 1, !tbaa !2446
  %1423 = xor i32 %1412, %1405
  %1424 = xor i32 %1423, %1413
  %1425 = lshr i32 %1424, 4
  %1426 = trunc i32 %1425 to i8
  %1427 = and i8 %1426, 1
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1427, i8* %1428, align 1, !tbaa !2447
  %1429 = icmp eq i32 %1413, 0
  %1430 = zext i1 %1429 to i8
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1430, i8* %1431, align 1, !tbaa !2448
  %1432 = lshr i32 %1413, 31
  %1433 = trunc i32 %1432 to i8
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1433, i8* %1434, align 1, !tbaa !2449
  %1435 = lshr i32 %1405, 31
  %1436 = lshr i32 %1412, 31
  %1437 = xor i32 %1436, %1435
  %1438 = xor i32 %1432, %1435
  %1439 = add nuw nsw i32 %1438, %1437
  %1440 = icmp eq i32 %1439, 2
  %1441 = zext i1 %1440 to i8
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1441, i8* %1442, align 1, !tbaa !2450
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 194
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 6
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 6
  store i64 %1448, i64* %PC
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1450 = load i8, i8* %1449, align 1, !tbaa !2449
  %1451 = icmp ne i8 %1450, 0
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1453 = load i8, i8* %1452, align 1, !tbaa !2450
  %1454 = icmp ne i8 %1453, 0
  %1455 = xor i1 %1451, %1454
  %1456 = xor i1 %1455, true
  %1457 = zext i1 %1456 to i8
  store i8 %1457, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1459 = select i1 %1455, i64 %1446, i64 %1444
  store i64 %1459, i64* %1458, align 8, !tbaa !2428
  %1460 = load i8, i8* %BRANCH_TAKEN
  %1461 = icmp eq i8 %1460, 1
  br i1 %1461, label %block_40185a, label %block_40179e

block_401902:                                     ; preds = %block_4018b8
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 5
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 5
  store i64 %1465, i64* %PC
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1463, i64* %1466, align 8, !tbaa !2428
  %1467 = load i64, i64* %RBP
  %1468 = sub i64 %1467, 44
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 3
  store i64 %1470, i64* %PC
  %1471 = inttoptr i64 %1468 to i32*
  %1472 = load i32, i32* %1471
  %1473 = zext i32 %1472 to i64
  store i64 %1473, i64* %RAX, align 8, !tbaa !2428
  %1474 = load i64, i64* %RAX
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 3
  store i64 %1476, i64* %PC
  %1477 = trunc i64 %1474 to i32
  %1478 = add i32 1, %1477
  %1479 = zext i32 %1478 to i64
  store i64 %1479, i64* %RAX, align 8, !tbaa !2428
  %1480 = icmp ult i32 %1478, %1477
  %1481 = icmp ult i32 %1478, 1
  %1482 = or i1 %1480, %1481
  %1483 = zext i1 %1482 to i8
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1483, i8* %1484, align 1, !tbaa !2432
  %1485 = and i32 %1478, 255
  %1486 = call i32 @llvm.ctpop.i32(i32 %1485) #16
  %1487 = trunc i32 %1486 to i8
  %1488 = and i8 %1487, 1
  %1489 = xor i8 %1488, 1
  %1490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1489, i8* %1490, align 1, !tbaa !2446
  %1491 = xor i64 1, %1474
  %1492 = trunc i64 %1491 to i32
  %1493 = xor i32 %1492, %1478
  %1494 = lshr i32 %1493, 4
  %1495 = trunc i32 %1494 to i8
  %1496 = and i8 %1495, 1
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1496, i8* %1497, align 1, !tbaa !2447
  %1498 = icmp eq i32 %1478, 0
  %1499 = zext i1 %1498 to i8
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1499, i8* %1500, align 1, !tbaa !2448
  %1501 = lshr i32 %1478, 31
  %1502 = trunc i32 %1501 to i8
  %1503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1502, i8* %1503, align 1, !tbaa !2449
  %1504 = lshr i32 %1477, 31
  %1505 = xor i32 %1501, %1504
  %1506 = add nuw nsw i32 %1505, %1501
  %1507 = icmp eq i32 %1506, 2
  %1508 = zext i1 %1507 to i8
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1508, i8* %1509, align 1, !tbaa !2450
  %1510 = load i64, i64* %RBP
  %1511 = sub i64 %1510, 44
  %1512 = load i32, i32* %EAX
  %1513 = zext i32 %1512 to i64
  %1514 = load i64, i64* %PC
  %1515 = add i64 %1514, 3
  store i64 %1515, i64* %PC
  %1516 = inttoptr i64 %1511 to i32*
  store i32 %1512, i32* %1516
  %1517 = load i64, i64* %PC
  %1518 = sub i64 %1517, 107
  %1519 = load i64, i64* %PC
  %1520 = add i64 %1519, 5
  store i64 %1520, i64* %PC
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1518, i64* %1521, align 8, !tbaa !2428
  br label %block_4018a5

block_401880:                                     ; preds = %block_401874
  %1522 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1523 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1524 = bitcast %union.vec128_t* %XMM0 to i8*
  %1525 = load i64, i64* %PC
  %1526 = add i64 %1525, 3
  store i64 %1526, i64* %PC
  %1527 = bitcast i8* %1523 to i64*
  %1528 = load i64, i64* %1527, align 1
  %1529 = getelementptr inbounds i8, i8* %1523, i64 8
  %1530 = bitcast i8* %1529 to i64*
  %1531 = load i64, i64* %1530, align 1
  %1532 = bitcast i8* %1524 to i64*
  %1533 = load i64, i64* %1532, align 1
  %1534 = getelementptr inbounds i8, i8* %1524, i64 8
  %1535 = bitcast i8* %1534 to i64*
  %1536 = load i64, i64* %1535, align 1
  %1537 = xor i64 %1533, %1528
  %1538 = xor i64 %1536, %1531
  %1539 = trunc i64 %1537 to i32
  %1540 = lshr i64 %1537, 32
  %1541 = trunc i64 %1540 to i32
  %1542 = bitcast i8* %1522 to i32*
  store i32 %1539, i32* %1542, align 1, !tbaa !2456
  %1543 = getelementptr inbounds i8, i8* %1522, i64 4
  %1544 = bitcast i8* %1543 to i32*
  store i32 %1541, i32* %1544, align 1, !tbaa !2456
  %1545 = trunc i64 %1538 to i32
  %1546 = getelementptr inbounds i8, i8* %1522, i64 8
  %1547 = bitcast i8* %1546 to i32*
  store i32 %1545, i32* %1547, align 1, !tbaa !2456
  %1548 = lshr i64 %1538, 32
  %1549 = trunc i64 %1548 to i32
  %1550 = getelementptr inbounds i8, i8* %1522, i64 12
  %1551 = bitcast i8* %1550 to i32*
  store i32 %1549, i32* %1551, align 1, !tbaa !2456
  %1552 = load i64, i64* %RBP
  %1553 = sub i64 %1552, 24
  %1554 = load i64, i64* %PC
  %1555 = add i64 %1554, 4
  store i64 %1555, i64* %PC
  %1556 = inttoptr i64 %1553 to i64*
  %1557 = load i64, i64* %1556
  store i64 %1557, i64* %RAX, align 8, !tbaa !2428
  %1558 = load i64, i64* %RBP
  %1559 = sub i64 %1558, 40
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 4
  store i64 %1561, i64* %PC
  %1562 = inttoptr i64 %1559 to i32*
  %1563 = load i32, i32* %1562
  %1564 = sext i32 %1563 to i64
  store i64 %1564, i64* %RCX, align 8, !tbaa !2428
  %1565 = load i64, i64* %RAX
  %1566 = load i64, i64* %RCX
  %1567 = mul i64 %1566, 4
  %1568 = add i64 %1567, %1565
  %1569 = bitcast %union.vec128_t* %XMM0 to i8*
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 5
  store i64 %1571, i64* %PC
  %1572 = bitcast i8* %1569 to <2 x float>*
  %1573 = load <2 x float>, <2 x float>* %1572, align 1
  %1574 = extractelement <2 x float> %1573, i32 0
  %1575 = inttoptr i64 %1568 to float*
  store float %1574, float* %1575
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 40
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 3
  store i64 %1579, i64* %PC
  %1580 = inttoptr i64 %1577 to i32*
  %1581 = load i32, i32* %1580
  %1582 = zext i32 %1581 to i64
  store i64 %1582, i64* %RAX, align 8, !tbaa !2428
  %1583 = load i64, i64* %RAX
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 3
  store i64 %1585, i64* %PC
  %1586 = trunc i64 %1583 to i32
  %1587 = add i32 1, %1586
  %1588 = zext i32 %1587 to i64
  store i64 %1588, i64* %RAX, align 8, !tbaa !2428
  %1589 = icmp ult i32 %1587, %1586
  %1590 = icmp ult i32 %1587, 1
  %1591 = or i1 %1589, %1590
  %1592 = zext i1 %1591 to i8
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1592, i8* %1593, align 1, !tbaa !2432
  %1594 = and i32 %1587, 255
  %1595 = call i32 @llvm.ctpop.i32(i32 %1594) #16
  %1596 = trunc i32 %1595 to i8
  %1597 = and i8 %1596, 1
  %1598 = xor i8 %1597, 1
  %1599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1598, i8* %1599, align 1, !tbaa !2446
  %1600 = xor i64 1, %1583
  %1601 = trunc i64 %1600 to i32
  %1602 = xor i32 %1601, %1587
  %1603 = lshr i32 %1602, 4
  %1604 = trunc i32 %1603 to i8
  %1605 = and i8 %1604, 1
  %1606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1605, i8* %1606, align 1, !tbaa !2447
  %1607 = icmp eq i32 %1587, 0
  %1608 = zext i1 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1608, i8* %1609, align 1, !tbaa !2448
  %1610 = lshr i32 %1587, 31
  %1611 = trunc i32 %1610 to i8
  %1612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1611, i8* %1612, align 1, !tbaa !2449
  %1613 = lshr i32 %1586, 31
  %1614 = xor i32 %1610, %1613
  %1615 = add nuw nsw i32 %1614, %1610
  %1616 = icmp eq i32 %1615, 2
  %1617 = zext i1 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1617, i8* %1618, align 1, !tbaa !2450
  %1619 = load i64, i64* %RBP
  %1620 = sub i64 %1619, 40
  %1621 = load i32, i32* %EAX
  %1622 = zext i32 %1621 to i64
  %1623 = load i64, i64* %PC
  %1624 = add i64 %1623, 3
  store i64 %1624, i64* %PC
  %1625 = inttoptr i64 %1620 to i32*
  store i32 %1621, i32* %1625
  %1626 = load i64, i64* %PC
  %1627 = sub i64 %1626, 37
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 5
  store i64 %1629, i64* %PC
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1627, i64* %1630, align 8, !tbaa !2428
  br label %block_401874
}

; Function Attrs: noinline
define %struct.Memory* @sub_400530_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400530:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (i64* @stderr to i64)
  %37 = icmp ult i64 %33, ptrtoint (i64* @stderr to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (i64* @stderr to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400558, label %block_400541

block_400558:                                     ; preds = %block_400541, %block_400553, %block_400530
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400530 ], [ %2, %block_400541 ], [ %2, %block_400553 ]
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %91, align 8, !tbaa !2428
  %96 = add i64 %93, 8
  store i64 %96, i64* %92, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40055a:                                     ; preds = %block_40054b
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = add i64 %98, %97
  %100 = load i16, i16* %AX
  %101 = zext i16 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = load i64, i64* %PC
  %105 = tail call %struct.Memory* @sub_400560_register_tm_clones(%struct.State* %0, i64 %104, %struct.Memory* %2)
  ret %struct.Memory* %105

block_400553:                                     ; preds = %block_40054b
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %RAX
  %108 = add i64 %107, %106
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  br label %block_400558

block_40054b:                                     ; preds = %block_400541
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 1
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %116 = load i64, i64* %115, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %115, align 8, !tbaa !2428
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  switch i64 %126, label %163 [
    i64 4195674, label %block_40055a
    i64 4195667, label %block_400553
  ]

block_400541:                                     ; preds = %block_400530
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  store i64 %128, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %RAX
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  %133 = and i64 %130, %129
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2432
  %135 = trunc i64 %133 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2446
  %142 = icmp eq i64 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %133, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %148, align 1, !tbaa !2450
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 15
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 2
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 2
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2448
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = icmp ne i8 %157, 0
  %160 = select i1 %159, i64 %151, i64 %153
  store i64 %160, i64* %158, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  br i1 %162, label %block_400558, label %block_40054b

; <label>:163:                                    ; preds = %block_40054b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400560_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400560:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (i64* @stderr to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (i64* @stderr to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (i64* @stderr to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_400598, label %block_400583

block_40059a:                                     ; preds = %block_40058d
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %RAX
  %193 = add i64 %192, %191
  %194 = load i16, i16* %AX
  %195 = zext i16 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  store i64 %197, i64* %PC
  %198 = load i64, i64* %PC
  %199 = tail call %struct.Memory* @sub_4005a0___do_global_dtors_aux(%struct.State* %0, i64 %198, %struct.Memory* %2)
  ret %struct.Memory* %199

block_400595:                                     ; preds = %block_40058d
  %200 = load i64, i64* %RAX
  %201 = load i32, i32* %EAX
  %202 = zext i32 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 3
  store i64 %204, i64* %PC
  br label %block_400598

block_40058d:                                     ; preds = %block_400583
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !2428
  %209 = add i64 %208, 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RBP, align 8, !tbaa !2428
  store i64 %209, i64* %207, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 2
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  switch i64 %218, label %270 [
    i64 4195738, label %block_40059a
    i64 4195733, label %block_400595
  ]

block_400598:                                     ; preds = %block_400583, %block_400595, %block_400560
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400560 ], [ %2, %block_400583 ], [ %2, %block_400595 ]
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 1
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = add i64 %222, 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RBP, align 8, !tbaa !2428
  store i64 %223, i64* %221, align 8, !tbaa !2428
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %228, align 8, !tbaa !2428
  %233 = add i64 %230, 8
  store i64 %233, i64* %229, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400583:                                     ; preds = %block_400560
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = and i64 %237, %236
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %241, align 1, !tbaa !2432
  %242 = trunc i64 %240 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #16
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = icmp eq i64 %240, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2448
  %252 = lshr i64 %240, 63
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %255, align 1, !tbaa !2450
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %256, align 1, !tbaa !2447
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 13
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 2
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 2
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %264 = load i8, i8* %263, align 1, !tbaa !2448
  store i8 %264, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %266 = icmp ne i8 %264, 0
  %267 = select i1 %266, i64 %258, i64 %260
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %268 = load i8, i8* %BRANCH_TAKEN
  %269 = icmp eq i8 %268, 1
  br i1 %269, label %block_400598, label %block_40058d

; <label>:270:                                    ; preds = %block_40058d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005d0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4005d0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005d0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4005a0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4005a0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005a0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653138_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4004d0_memset(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402e20___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402e20___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e20___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402db0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402db0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402db0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400630_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653150___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_653140_clock(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @what_date() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400620;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @what_date_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400620_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dmxpy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401fb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401fb0_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgefa() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401920;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401920_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @daxpy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402870_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @ddot() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4029e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4029e0_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400498;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400498__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @epslon() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4027b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4027b0_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dgesl() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c30_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402e24;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402e24__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @matgen() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dscal() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402ce0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402ce0_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @18, void ()** @2)
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @idamax() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @19, void ()** @2)
  ret void
}

define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402b40_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @print_time() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402860;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @20, void ()** @2)
  ret void
}

define internal %struct.Memory* @print_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402860_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_402db0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_402e20___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"float", !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"double", !2430, i64 0}
!2456 = !{!2445, !2445, i64 0}
