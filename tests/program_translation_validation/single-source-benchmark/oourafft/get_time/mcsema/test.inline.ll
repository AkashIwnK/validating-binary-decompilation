; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400678__init_type = type <{ [23 x i8] }>
%seg_400690__plt_type = type <{ [192 x i8] }>
%seg_400750__text_type = type <{ [14642 x i8] }>
%seg_404084__fini_type = type <{ [9 x i8] }>
%seg_404090__rodata_type = type <{ [24 x i8], [88 x i8], [45 x i8], [7 x i8] }>
%seg_404134__eh_frame_hdr_type = type <{ [148 x i8] }>
%seg_4041c8__eh_frame_type = type <{ [560 x i8] }>
%seg_604df0__init_array_type = type <{ i64, i64 }>
%seg_604ff0__got_type = type <{ i64, i64 }>
%seg_605000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_605070__data_type = type <{ [16 x i8] }>
%__bss_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400678__init = internal constant %seg_400678__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05uI \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400690__plt = internal constant %seg_400690__plt_type <{ [192 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%rI \00\00\00\00\00\00\00\00\00\00\00\FF%jI \00\00\00\00\00\00\00\00\00\00\00\FF%bI \00\00\00\00\00\00\00\00\00\00\00\FF%ZI \00\00\00\00\00\00\00\00\00\00\00\FF%RI \00\00\00\00\00\00\00\00\00\00\00\FF%JI \00\00\00\00\00\00\00\00\00\00\00\FF%BI \00\00\00\00\00\00\00\00\00\00\00\FF%:I \00\00\00\00\00\00\00\00\00\00\00\FF%2I \00\00\00\00\00\00\00\00\00\00\00\FF%*I \00\00\00\00\00\00\00\00\00\00\00\FF%\22I \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400750__text = internal constant %seg_400750__text_type <{ [14642 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\80@@\00H\C7\C1\10@@\00H\C7\C7@\08@\00\FF\15vH \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8\80P`\00H=\80P`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF\80P`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE\80P`\00UH\81\EE\80P`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF\80P`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=yH \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05gH \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\E0\00\00\00\B8\10\00\00\00\89\C7\C7E\FC\00\00\00\00H\C7E\A8\00\00\00\00H\89\BDp\FF\FF\FF\E8\B3\05\00\00\F2\0F\11E\C0\E8\A9\05\00\00\F2\0F\11E\B8\F2\0F\10E\B8\F2\0F\10M\C0\F2\0F\5C\C1\F2\0F\11E\B0\F2\0F\10\05\118\00\00\E8\A4\FE\FF\FF\F2\0F\10\0D\0C8\00\00\F2\0FY\C1\F2\0F\10\0D\088\00\00\0F(\D0\F2\0F\5C\D1\F2H\0F,\FAH\B9\00\00\00\00\00\00\00\80H1\CF\F2H\0F,\C8f\0F.\C1H\0FB\F9H\8B\8Dp\FF\FF\FFH\89\BDh\FF\FF\FFH\89\CFH\8B\B5h\FF\FF\FF\E8-\FE\FF\FF\BA\10\00\00\00\89\D7\BA\00P\00\00\89\D6H\89E\E8\E8\16\FE\FF\FF\BF\00\02\00\00H\89E\C8H\8Bu\E8H\8BU\C8\E8@\05\00\00\BF\10\00\00\00A\B8\00@\00\00D\89\C6\E8\ED\FD\FF\FFA\B8\10\00\00\00D\89\C7A\B8\00@\00\00D\89\C6H\89E\E0\E8\D2\FD\FF\FFA\B8\10\00\00\00D\89\C7A\B8\00@\00\00D\89\C6H\89E\D8\E8\B7\FD\FF\FF1\FF\BE\FF\07\00\00H\89E\D0H\8BU\E0\E8S\06\00\00\BF\00\08\00\00\BE\01\00\00\00H\8BU\E0H\8BM\E8L\8BE\C8\E8\B8\06\00\00\BF\00\08\00\00\BE\FF\FF\FF\FFH\8BU\E0H\8BM\E8L\8BE\C8\E8\9D\06\00\001\FF\BE\FF\07\00\00\F2\0F\10\05\DE6\00\00H\8BU\E0\E8%\07\00\00\F2\0F\10\0D\C56\00\00\F2\0F\11E\A0\F2\0F\10E\A0\0F(\15\0C7\00\00f\0F\DB\C2f\0F.\C1\0F\86!\00\00\00H\BF\00A@\00\00\00\00\00\F2\0F\10E\A0\B0\01\E8\C8\FC\FF\FF\89\85d\FF\FF\FF\E8\9D\FC\FF\FF1\C0\BE\FF\03\00\00\B9\00@\00\00\89\CAH\8B}\E0\89\B5`\FF\FF\FF\89\C6\89\85\5C\FF\FF\FF\E8\B8\FC\FF\FFH\8BU\E0\8B\BD\5C\FF\FF\FF\8B\B5`\FF\FF\FF\E8\83\05\00\00\BF\00\08\00\00\BE\01\00\00\00H\8BU\E0H\8BM\E8L\8BE\C8\E8\E8\05\00\00\C7E\F4\00\00\00\00\81}\F4\00\04\00\00\0F\8DO\00\00\00H\B8\00\00\00\00\00\00\00\80H\8BM\E0\8BU\F4\C1\E2\01\83\C2\01Hc\F2\F2\0F\10\04\F1fH\0F~\C1H1\C1fH\0Fn\C1H\8BE\E0\8BU\F4\C1\E2\01\83\C2\01Hc\CA\F2\0F\11\04\C8\8BE\F4\83\C0\01\89E\F4\E9\A4\FF\FF\FF1\C0\BE\FF\03\00\00\B9\00@\00\00\89\CAH\8B}\D0\89\B5X\FF\FF\FF\89\C6\89\85T\FF\FF\FF\E8\00\FC\FF\FFH\8BU\D0\8B\BDT\FF\FF\FF\8B\B5X\FF\FF\FF\E8\CB\04\00\00\E8\16\03\00\00\F2\0F\11E\C0\C7E\F8\00\00\00\00\81}\F8\F0I\02\00\0F\8DZ\01\00\00\BF\00\08\00\00\BE\01\00\00\00\B8\00@\00\00\89\C2H\8BM\D8L\8BE\D0\89\BDP\FF\FF\FFH\89\CF\89\B5L\FF\FF\FFL\89\C6\E8\BD\FB\FF\FFH\8BU\D8H\8BM\E8L\8BE\C8\8B\BDP\FF\FF\FF\8B\B5L\FF\FF\FF\E8\E0\04\00\00\C7E\9C\00\00\00\00\81}\9C\00\04\00\00\0F\8D\D0\00\00\00H\8BE\D8\8BM\9C\C1\E1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11E\90H\8BE\E0\8BM\9C\C1\E1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11E\88H\8BE\D8\8BM\9C\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11E\80H\8BE\E0\8BM\9C\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11\85x\FF\FF\FF\F2\0F\10E\90\F2\0FYE\88\F2\0F\10M\80\F2\0FY\8Dx\FF\FF\FF\F2\0F\5C\C1H\8BE\D8\8BM\9C\C1\E1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\90\F2\0FY\85x\FF\FF\FF\F2\0F\10M\80\F2\0FYM\88\F2\0FX\C1H\8BE\D8\8BM\9C\C1\E1\01\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\9C\83\C0\01\89E\9C\E9#\FF\FF\FF\BF\00\08\00\00\BE\FF\FF\FF\FFH\8BU\D8H\8BM\E8L\8BE\C8\E8\E1\03\00\00\8BE\F8\83\C0\01\89E\F8\E9\99\FE\FF\FF\E8\9E\01\00\00\F2\0F\11E\B8\F2\0F\10E\B8\F2\0F\5CE\C0\F2\0F\5CE\B0\F2\0FXE\A8\F2\0F\11E\A8\C7E\F4\00\00\00\00\81}\F4\00\04\00\00\0F\8D\1A\01\00\00\F2\0F\10\05\044\00\00H\8BE\D8\8BM\F4\C1\E1\01Hc\D1\F2\0F\10\0C\D0\0F(\15\1B4\00\00f\0F\DB\CAf\0F.\C8\0F\86\1F\00\00\00H\8BE\D8\8BM\F4\C1\E1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11\85@\FF\FF\FF\E9\10\00\00\00\0FW\C0\F2\0F\11\85@\FF\FF\FF\E9\00\00\00\00\F2\0F\10\85@\FF\FF\FF\F2\0F\10\0D\9E3\00\00H\8BE\D8\8BM\F4\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\14\D0\0F(\1D\B23\00\00f\0F\DB\D3f\0F.\D1\F2\0F\11\858\FF\FF\FF\0F\86\22\00\00\00H\8BE\D8\8BM\F4\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11\850\FF\FF\FF\E9\10\00\00\00\0FW\C0\F2\0F\11\850\FF\FF\FF\E9\00\00\00\00\F2\0F\10\850\FF\FF\FFH\BF-A@\00\00\00\00\00\F2\0F\10\8D8\FF\FF\FF\F2\0F\11\85(\FF\FF\FF\0F(\C1\F2\0F\10\8D(\FF\FF\FF\B0\02\E8\16\F9\FF\FF\89\85$\FF\FF\FF\8BE\F4\83\C0\01\89E\F4\E9\D9\FE\FF\FFH\8BE\E0H\89\C7\E8\C6\F8\FF\FFH\8BE\C8H\89\C7\E8\BA\F8\FF\FFH\8BE\E8H\89\C7\E8\AE\F8\FF\FFH\8BE\D8H\89\C7\E8\A2\F8\FF\FFH\8BE\D0H\89\C7\E8\96\F8\FF\FF1\C0H\81\C4\E0\00\00\00]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\8D}\F01\C0\89\C6\E8\AB\F8\FF\FF\F2\0F\10\05\8B2\00\00\F2H\0F*M\F0\F2H\0F*U\F8\F2\0FY\D0\F2\0FX\CA\0F(\C1\89E\ECH\83\C4 ]\C3\0F\1F\00UH\89\E5H\83\EC@\89}\FCH\89u\F0H\89U\E8\83}\FC\02\0F\8EI\01\00\00\F2\0F\10\05K2\00\00\8BE\FC\C1\F8\01\89E\E0\E8-\F8\FF\FF\0FW\C9\F2\0F\10\1522\00\00\F2\0F*]\E0\F2\0F^\C3\F2\0F\11E\D8H\8BM\E8\F2\0F\11\11H\8BM\E8\F2\0F\11I\08\F2\0F\10E\D8\F2\0F*M\E0\F2\0FY\C1\E80\F8\FF\FFH\8BM\E8HcU\E0\F2\0F\11\04\D1H\8BM\E8HcU\E0\F2\0F\10\04\D1H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\83}\E0\02\0F\8E\BB\00\00\00\C7E\E4\02\00\00\00\8BE\E4;E\E0\0F\8D\98\00\00\00\F2\0F\10E\D8\F2\0F*M\E4\F2\0FY\C1\E8\D4\F7\FF\FF\F2\0F\11E\D0\F2\0F\10E\D8\F2\0F*M\E4\F2\0FY\C1\E8\EC\F7\FF\FF\F2\0F\11E\C8\F2\0F\10E\D0H\8BE\E8HcM\E4\F2\0F\11\04\C8\F2\0F\10E\C8H\8BE\E8\8BU\E4\83\C2\01Hc\CA\F2\0F\11\04\C8\F2\0F\10E\C8H\8BE\E8\8BU\FC+U\E4Hc\CA\F2\0F\11\04\C8\F2\0F\10E\D0H\8BE\E8\8BU\FC+U\E4\83\C2\01Hc\CA\F2\0F\11\04\C8\8BE\E4\83\C0\02\89E\E4\E9\5C\FF\FF\FF\8B}\FCH\8Bu\F0H\8BU\E8\E8\1F\02\00\00\E9\00\00\00\00H\83\C4@]\C3\0F\1F@\00UH\89\E5\89}\FC\89u\F8H\89U\F0\C7E\E8\00\00\00\00\8Bu\FC\89u\EC\8BE\EC;E\F8\0F\8FK\00\00\00\F2\0F\10\05\D90\00\00\B8\80\F4\03\00iM\E8\E5\1B\00\00\81\C1\F5\D5\00\00\89E\E4\89\C8\99\8BM\E4\F7\F9\89U\E8\F2\0F*\CA\F2\0FY\C8H\8Bu\F0Hc}\EC\F2\0F\11\0C\FE\8BE\EC\83\C0\01\89E\EC\E9\A9\FF\FF\FF]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC \89}\FC\89u\F8H\89U\F0H\89M\E8L\89E\E0\83}\FC\04\0F\8ET\00\00\00\83}\F8\00\0F\8C%\00\00\00\8B}\FCH\8Bu\E8H\8BU\F0\E8R\01\00\00\8B}\FCH\8Bu\F0H\8BU\E0\E8\C2\07\00\00\E9 \00\00\00\8B}\FCH\8Bu\E8H\8BU\F0\E8M\0B\00\00\8B}\FCH\8Bu\F0H\8BU\E0\E8\DD\13\00\00\E9\1F\00\00\00\83}\FC\04\0F\85\10\00\00\00\8B}\FCH\8Bu\F0H\8BU\E0\E8~\07\00\00\E9\00\00\00\00H\83\C4 ]\C3\0F\1F\00UH\89\E5\0FW\C9\89}\FC\89u\F8\F2\0F\11E\F0H\89U\E8\C7E\E0\00\00\00\00\F2\0F\11M\D8\8Bu\FC\89u\E4\8BE\E4;E\F8\0F\8F\A6\00\00\00\F2\0F\10\05\AC/\00\00\B8\80\F4\03\00iM\E0\E5\1B\00\00\81\C1\F5\D5\00\00\89E\CC\89\C8\99\8BM\CC\F7\F9\89U\E0\F2\0F*\CA\F2\0FY\C8H\8Bu\E8Hc}\E4\F2\0F\10\04\FE\F2\0FYE\F0\F2\0F\5C\C8\F2\0F\11M\D0\F2\0F\10E\D8\F2\0F\10M\D0\0F(\15p/\00\00f\0F\DB\CAf\0F.\C1\0F\86\0F\00\00\00\F2\0F\10E\D8\F2\0F\11E\C0\E9\15\00\00\00\F2\0F\10E\D0\0F(\0DG/\00\00f\0F\DB\C1\F2\0F\11E\C0\F2\0F\10E\C0\F2\0F\11E\D8\8BE\E4\83\C0\01\89E\E4\E9N\FF\FF\FF\F2\0F\10E\D8]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FCH\89u\F0H\89U\E8H\8BU\F0\C7\02\00\00\00\00\8B}\FC\89}\D4\C7E\D0\01\00\00\00\8BE\D0\C1\E0\03;E\D4\0F\8DV\00\00\00\8BE\D4\C1\F8\01\89E\D4\C7E\E4\00\00\00\00\8BE\E4;E\D0\0F\8D,\00\00\00H\8BE\F0HcM\E4\8B\14\88\03U\D4H\8BE\F0\8Bu\D0\03u\E4Hc\CE\89\14\88\8BE\E4\83\C0\01\89E\E4\E9\C8\FF\FF\FF\8BE\D0\C1\E0\01\89E\D0\E9\9B\FF\FF\FF\8BE\D0\C1\E0\01\89E\CC\8BE\D0\C1\E0\03;E\D4\0F\85\01\04\00\00\C7E\DC\00\00\00\00\8BE\DC;E\D0\0F\8D\E9\03\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8D\04\03\00\00\8BE\E4\C1\E0\01H\8BM\F0HcU\DC\03\04\91\89E\E0\8BE\DC\C1\E0\01H\8BM\F0HcU\E4\03\04\91\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\C1\E0\01\03E\D8\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\8Bu\D8)\C6\89u\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\C1\E0\01\03E\D8\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\01\89E\E4\E9\F0\FC\FF\FF\8BE\DC\C1\E0\01\03E\CCH\8BM\F0HcU\DC\03\04\91\89E\E0\8BE\E0\03E\CC\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\DC\83\C0\01\89E\DC\E9\0B\FC\FF\FF\E9\CE\01\00\00\C7E\DC\01\00\00\00\8BE\DC;E\D0\0F\8D\B6\01\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8D\90\01\00\00\8BE\E4\C1\E0\01H\8BM\F0HcU\DC\03\04\91\89E\E0\8BE\DC\C1\E0\01H\8BM\F0HcU\E4\03\04\91\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\03E\D8\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\01\89E\E4\E9d\FE\FF\FF\E9\00\00\00\00\8BE\DC\83\C0\01\89E\DC\E9>\FE\FF\FF\E9\00\00\00\00]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECp\89}\FCH\89u\F0H\89U\E8\C7E\D4\02\00\00\00\83}\FC\08\0F\8EL\00\00\00\8B}\FCH\8Bu\F0H\8BU\E8\E8\FC\0F\00\00\C7E\D4\08\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\8D!\00\00\00\8B}\FC\8Bu\D4H\8BU\F0H\8BM\E8\E8c\1A\00\00\8Bu\D4\C1\E6\02\89u\D4\E9\D0\FF\FF\FF\E9\00\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\85-\02\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D\15\02\00\00\8BE\E4\03E\D4\89E\E0\8BE\E0\03E\D4\89E\DC\8BE\DC\03E\D4\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\C8H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\C0H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11E\B8H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11E\B0H\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11E\A8H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\A0H\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11E\98H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11E\90\F2\0F\10E\C8\F2\0FXE\A8H\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\C0\F2\0FXE\A0H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C8\F2\0F\5CE\A8H\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\C0\F2\0F\5CE\A0H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0F\5CE\90H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\B0\F2\0FXE\98H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0FXE\90H\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B0\F2\0F\5CE\98H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9\DF\FD\FF\FF\E9\E8\00\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D\D0\00\00\00\8BE\E4\03E\D4\89E\E0H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11E\C8H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11E\C0H\8BM\F0HcU\E0\F2\0F\10\04\D1H\8BM\F0HcU\E4\F2\0FX\04\D1\F2\0F\11\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\04\D1\F2\0F\10E\C8H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9$\FF\FF\FF\E9\00\00\00\00H\83\C4p]\C3f\0F\1FD\00\00UH\89\E5\89}\FCH\89u\F0H\89U\E8H\8BU\F0\C7\02\00\00\00\00\8B}\FC\89}\D4\C7E\D0\01\00\00\00\8BE\D0\C1\E0\03;E\D4\0F\8DV\00\00\00\8BE\D4\C1\F8\01\89E\D4\C7E\E4\00\00\00\00\8BE\E4;E\D0\0F\8D,\00\00\00H\8BE\F0HcM\E4\8B\14\88\03U\D4H\8BE\F0\8Bu\D0\03u\E4Hc\CE\89\14\88\8BE\E4\83\C0\01\89E\E4\E9\C8\FF\FF\FF\8BE\D0\C1\E0\01\89E\D0\E9\9B\FF\FF\FF\8BE\D0\C1\E0\01\89E\CC\8BE\D0\C1\E0\03;E\D4\0F\85\08\05\00\00\C7E\DC\00\00\00\00\8BE\DC;E\D0\0F\8D\F0\04\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8Dv\03\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\E0\8BM\DC\C1\E1\01H\8BU\F0Hcu\E4\03\0C\B2\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\C1\E1\01\03M\D8\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\8B}\D8)\CF\89}\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\C1\E1\01\03M\D8\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BE\E8HcU\E0\F2\0F\11\04\D0\F2\0F\10E\A8H\8BE\E8\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C0H\8BE\E8HcU\D8\F2\0F\11\04\D0\F2\0F\10E\B8H\8BE\E8\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\01\89E\E4\E9~\FC\FF\FFH\B8\00\00\00\00\00\00\00\80\8BM\DC\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\D8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\D8\03M\CC\89M\E0\8BM\E0\03M\CC\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\D8\89M\D8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\E8\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\DC\83\C0\01\89E\DC\E9\04\FB\FF\FF\E9\E7\02\00\00H\B8\00\00\00\00\00\00\00\80H\8BM\E8\F2\0F\10A\08fH\0F~\C1H1\C1fH\0Fn\C1H\8BM\E8\F2\0F\11A\08H\8BM\E8\8BU\CC\83\C2\01Hc\F2\F2\0F\10\04\F1fH\0F~\C1H1\C1fH\0Fn\C1H\8BE\E8\8BU\CC\83\C2\01Hc\CA\F2\0F\11\04\C8\C7E\DC\01\00\00\00\8BE\DC;E\D0\0F\8Du\02\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8D\CE\01\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\E0\8BM\DC\C1\E1\01H\8BU\F0Hcu\E4\03\0C\B2\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\03M\D8\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BE\E8HcU\E0\F2\0F\11\04\D0\F2\0F\10E\A8H\8BE\E8\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C0H\8BE\E8HcU\D8\F2\0F\11\04\D0\F2\0F\10E\B8H\8BE\E8\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\01\89E\E4\E9&\FE\FF\FFH\B8\00\00\00\00\00\00\00\80\8BM\DC\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\D8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2H\8BU\E8\8BM\D8\03M\CC\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\E8\8BM\D8\03M\CC\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\DC\83\C0\01\89E\DC\E9\7F\FD\FF\FF\E9\00\00\00\00]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECp\89}\FCH\89u\F0H\89U\E8\C7E\D4\02\00\00\00\83}\FC\08\0F\8EL\00\00\00\8B}\FCH\8Bu\F0H\8BU\E8\E8\BC\03\00\00\C7E\D4\08\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\8D!\00\00\00\8B}\FC\8Bu\D4H\8BU\F0H\8BM\E8\E8#\0E\00\00\8Bu\D4\C1\E6\02\89u\D4\E9\D0\FF\FF\FF\E9\00\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\85Q\02\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D9\02\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\03M\D4\89M\E0\8BM\E0\03M\D4\89M\DC\8BM\DC\03M\D4\89M\D8H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0FX\04\F2\F2\0F\11E\C8H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0F\5C\04\F2\F2\0F\11E\C0H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0F\5C\04\F2\F2\0F\11E\B8H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0FX\04\D0\F2\0F\11E\B0H\8BE\F0HcU\DC\F2\0F\10\04\D0H\8BE\F0HcU\D8\F2\0FX\04\D0\F2\0F\11E\A8H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\10\04\D0H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0FX\04\D0\F2\0F\11E\A0H\8BE\F0HcU\DC\F2\0F\10\04\D0H\8BE\F0HcU\D8\F2\0F\5C\04\D0\F2\0F\11E\98H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\10\04\D0H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0F\5C\04\D0\F2\0F\11E\90\F2\0F\10E\C8\F2\0FXE\A8H\8BE\F0HcU\E4\F2\0F\11\04\D0\F2\0F\10E\C0\F2\0F\5CE\A0H\8BE\F0\8BM\E4\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C8\F2\0F\5CE\A8H\8BE\F0HcU\DC\F2\0F\11\04\D0\F2\0F\10E\C0\F2\0FXE\A0H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\B8\F2\0F\5CE\90H\8BE\F0HcU\E0\F2\0F\11\04\D0\F2\0F\10E\B0\F2\0F\5CE\98H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\B8\F2\0FXE\90H\8BE\F0HcU\D8\F2\0F\11\04\D0\F2\0F\10E\B0\F2\0FXE\98H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\02\89E\E4\E9\BB\FD\FF\FF\E9\19\01\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D\01\01\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\03M\D4\89M\E0H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0F\5C\04\F2\F2\0F\11E\C8H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0FX\04\F2\F2\0F\11E\C0H\8BU\F0Hcu\E0\F2\0F\10\04\F2H\8BU\F0Hcu\E4\F2\0FX\04\F2\F2\0F\11\04\F2H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\5C\04\D0H\8BE\F0\8BM\E4\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C8H\8BE\F0HcU\E0\F2\0F\11\04\D0\F2\0F\10E\C0H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\02\89E\E4\E9\F3\FE\FF\FF\E9\00\00\00\00H\83\C4p]\C3\90UH\89\E5H\83\EC\18\89}\FCH\89u\F0H\89U\E8H\8BU\F0\F2\0F\10\02H\8BU\F0\F2\0FXB\10\F2\0F\11E\A0H\8BU\F0\F2\0F\10B\08H\8BU\F0\F2\0FXB\18\F2\0F\11E\98H\8BU\F0\F2\0F\10\02H\8BU\F0\F2\0F\5CB\10\F2\0F\11E\90H\8BU\F0\F2\0F\10B\08H\8BU\F0\F2\0F\5CB\18\F2\0F\11E\88H\8BU\F0\F2\0F\10B H\8BU\F0\F2\0FXB0\F2\0F\11E\80H\8BU\F0\F2\0F\10B(H\8BU\F0\F2\0FXB8\F2\0F\11\85x\FF\FF\FFH\8BU\F0\F2\0F\10B H\8BU\F0\F2\0F\5CB0\F2\0F\11\85p\FF\FF\FFH\8BU\F0\F2\0F\10B(H\8BU\F0\F2\0F\5CB8\F2\0F\11\85h\FF\FF\FF\F2\0F\10E\A0\F2\0FXE\80H\8BU\F0\F2\0F\11\02\F2\0F\10E\98\F2\0FX\85x\FF\FF\FFH\8BU\F0\F2\0F\11B\08\F2\0F\10E\A0\F2\0F\5CE\80H\8BU\F0\F2\0F\11B \F2\0F\10E\98\F2\0F\5C\85x\FF\FF\FFH\8BU\F0\F2\0F\11B(\F2\0F\10E\90\F2\0F\5C\85h\FF\FF\FFH\8BU\F0\F2\0F\11B\10\F2\0F\10E\88\F2\0FX\85p\FF\FF\FFH\8BU\F0\F2\0F\11B\18\F2\0F\10E\90\F2\0FX\85h\FF\FF\FFH\8BU\F0\F2\0F\11B0\F2\0F\10E\88\F2\0F\5C\85p\FF\FF\FFH\8BU\F0\F2\0F\11B8H\8BU\E8\F2\0F\10B\10\F2\0F\11E\D0H\8BU\F0\F2\0F\10B@H\8BU\F0\F2\0FXBP\F2\0F\11E\A0H\8BU\F0\F2\0F\10BHH\8BU\F0\F2\0FXBX\F2\0F\11E\98H\8BU\F0\F2\0F\10B@H\8BU\F0\F2\0F\5CBP\F2\0F\11E\90H\8BU\F0\F2\0F\10BHH\8BU\F0\F2\0F\5CBX\F2\0F\11E\88H\8BU\F0\F2\0F\10B`H\8BU\F0\F2\0FXBp\F2\0F\11E\80H\8BU\F0\F2\0F\10BhH\8BU\F0\F2\0FXBx\F2\0F\11\85x\FF\FF\FFH\8BU\F0\F2\0F\10B`H\8BU\F0\F2\0F\5CBp\F2\0F\11\85p\FF\FF\FFH\8BU\F0\F2\0F\10BhH\8BU\F0\F2\0F\5CBx\F2\0F\11\85h\FF\FF\FF\F2\0F\10E\A0\F2\0FXE\80H\8BU\F0\F2\0F\11B@\F2\0F\10E\98\F2\0FX\85x\FF\FF\FFH\8BU\F0\F2\0F\11BH\F2\0F\10\85x\FF\FF\FF\F2\0F\5CE\98H\8BU\F0\F2\0F\11B`\F2\0F\10E\A0\F2\0F\5CE\80H\8BU\F0\F2\0F\11Bh\F2\0F\10E\90\F2\0F\5C\85h\FF\FF\FF\F2\0F\11E\A0\F2\0F\10E\88\F2\0FX\85p\FF\FF\FF\F2\0F\11E\98\F2\0F\10E\D0\F2\0F\10M\A0\F2\0F\5CM\98\F2\0FY\C1H\8BU\F0\F2\0F\11BP\F2\0F\10E\D0\F2\0F\10M\A0\F2\0FXM\98\F2\0FY\C1H\8BU\F0\F2\0F\11BX\F2\0F\10\85h\FF\FF\FF\F2\0FXE\90\F2\0F\11E\A0\F2\0F\10\85p\FF\FF\FF\F2\0F\5CE\88\F2\0F\11E\98\F2\0F\10E\D0\F2\0F\10M\98\F2\0F\5CM\A0\F2\0FY\C1H\8BU\F0\F2\0F\11Bp\F2\0F\10E\D0\F2\0F\10M\98\F2\0FXM\A0\F2\0FY\C1H\8BU\F0\F2\0F\11Bx\C7E\E0\00\00\00\00\C7E\E4\10\00\00\00\8BE\E4;E\FC\0F\8D\10\07\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10\05\D0\14\00\00\8BM\E0\83\C1\02\89M\E0\8BM\E0\C1\E1\01\89M\DCH\8BU\E8Hcu\E0\F2\0F\10\0C\F2\F2\0F\11M\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\B8H\8BU\E8Hcu\DC\F2\0F\10\0C\F2\F2\0F\11M\D0H\8BU\E8\8BM\DC\83\C1\01Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\C8\F2\0F\10M\D0\0F(\D0\F2\0FYU\B8\F2\0FYU\C8\F2\0F\5C\CA\F2\0F\11M\B0\0F(\C8\F2\0FYM\B8\F2\0FYM\D0\F2\0F\5CM\C8\F2\0F\11M\A8H\8BU\F0Hcu\E4\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\02Hc\F1\F2\0FX\0C\F2\F2\0F\11M\A0H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\03Hc\F1\F2\0FX\0C\F2\F2\0F\11M\98H\8BU\F0Hcu\E4\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\02Hc\F1\F2\0F\5C\0C\F2\F2\0F\11M\90H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\03Hc\F1\F2\0F\5C\0C\F2\F2\0F\11M\88H\8BU\F0\8BM\E4\83\C1\04Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\06Hc\F1\F2\0FX\0C\F2\F2\0F\11M\80H\8BU\F0\8BM\E4\83\C1\05Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\07Hc\F1\F2\0FX\0C\F2\F2\0F\11\8Dx\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\04Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\06Hc\F1\F2\0F\5C\0C\F2\F2\0F\11\8Dp\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\05Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\07Hc\F1\F2\0F\5C\0C\F2\F2\0F\11\8Dh\FF\FF\FF\F2\0F\10M\A0\F2\0FXM\80H\8BU\F0Hcu\E4\F2\0F\11\0C\F2\F2\0F\10M\98\F2\0FX\8Dx\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\80\F2\0F\10U\A0\F2\0F\5C\D1\F2\0F\11U\A0\F2\0F\10\8Dx\FF\FF\FF\F2\0F\10U\98\F2\0F\5C\D1\F2\0F\11U\98\F2\0F\10M\C0\F2\0FYM\A0\F2\0F\10U\B8\F2\0FYU\98\F2\0F\5C\CAH\8BU\F0\8BM\E4\83\C1\04Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\C0\F2\0FYM\98\F2\0F\10U\B8\F2\0FYU\A0\F2\0FX\CAH\8BU\F0\8BM\E4\83\C1\05Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\90\F2\0F\5C\8Dh\FF\FF\FF\F2\0F\11M\A0\F2\0F\10M\88\F2\0FX\8Dp\FF\FF\FF\F2\0F\11M\98\F2\0F\10M\D0\F2\0FYM\A0\F2\0F\10U\C8\F2\0FYU\98\F2\0F\5C\CAH\8BU\F0\8BM\E4\83\C1\02Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\D0\F2\0FYM\98\F2\0F\10U\C8\F2\0FYU\A0\F2\0FX\CAH\8BU\F0\8BM\E4\83\C1\03Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\90\F2\0FX\8Dh\FF\FF\FF\F2\0F\11M\A0\F2\0F\10M\88\F2\0F\5C\8Dp\FF\FF\FF\F2\0F\11M\98\F2\0F\10M\B0\F2\0FYM\A0\F2\0F\10U\A8\F2\0FYU\98\F2\0F\5C\CAH\8BU\F0\8BM\E4\83\C1\06Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\B0\F2\0FYM\98\F2\0F\10U\A8\F2\0FYU\A0\F2\0FX\CAH\8BU\F0\8BM\E4\83\C1\07Hc\F1\F2\0F\11\0C\F2H\8BU\E8\8BM\DC\83\C1\02Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\D0H\8BU\E8\8BM\DC\83\C1\03Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\C8\F2\0F\10M\D0\0F(\D0\F2\0FYU\C0\F2\0FYU\C8\F2\0F\5C\CA\F2\0F\11M\B0\F2\0FYE\C0\F2\0FYE\D0\F2\0F\5CE\C8\F2\0F\11E\A8H\8BU\F0\8BM\E4\83\C1\08Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0AHc\F1\F2\0FX\04\F2\F2\0F\11E\A0H\8BU\F0\8BM\E4\83\C1\09Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0BHc\F1\F2\0FX\04\F2\F2\0F\11E\98H\8BU\F0\8BM\E4\83\C1\08Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0AHc\F1\F2\0F\5C\04\F2\F2\0F\11E\90H\8BU\F0\8BM\E4\83\C1\09Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0BHc\F1\F2\0F\5C\04\F2\F2\0F\11E\88H\8BU\F0\8BM\E4\83\C1\0CHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0EHc\F1\F2\0FX\04\F2\F2\0F\11E\80H\8BU\F0\8BM\E4\83\C1\0DHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0FHc\F1\F2\0FX\04\F2\F2\0F\11\85x\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\0CHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0EHc\F1\F2\0F\5C\04\F2\F2\0F\11\85p\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\0DHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0FHc\F1\F2\0F\5C\04\F2\F2\0F\11\85h\FF\FF\FF\F2\0F\10E\A0\F2\0FXE\80H\8BU\F0\8BM\E4\83\C1\08Hc\F1\F2\0F\11\04\F2\F2\0F\10E\98\F2\0FX\85x\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\09Hc\F1\F2\0F\11\04\F2\F2\0F\10E\80\F2\0F\10M\A0\F2\0F\5C\C8\F2\0F\11M\A0\F2\0F\10\85x\FF\FF\FF\F2\0F\10M\98\F2\0F\5C\C8\F2\0F\11M\98\F2\0F\10E\B8fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\A0\F2\0F\10M\C0\F2\0FYM\98\F2\0F\5C\C1H\8BU\F0\8BM\E4\83\C1\0CHc\F1\F2\0F\11\04\F2\F2\0F\10E\B8fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\98\F2\0F\10M\C0\F2\0FYM\A0\F2\0FX\C1H\8BE\F0\8BM\E4\83\C1\0DHc\D1\F2\0F\11\04\D0\F2\0F\10E\90\F2\0F\5C\85h\FF\FF\FF\F2\0F\11E\A0\F2\0F\10E\88\F2\0FX\85p\FF\FF\FF\F2\0F\11E\98\F2\0F\10E\D0\F2\0FYE\A0\F2\0F\10M\C8\F2\0FYM\98\F2\0F\5C\C1H\8BE\F0\8BM\E4\83\C1\0AHc\D1\F2\0F\11\04\D0\F2\0F\10E\D0\F2\0FYE\98\F2\0F\10M\C8\F2\0FYM\A0\F2\0FX\C1H\8BE\F0\8BM\E4\83\C1\0BHc\D1\F2\0F\11\04\D0\F2\0F\10E\90\F2\0FX\85h\FF\FF\FF\F2\0F\11E\A0\F2\0F\10E\88\F2\0F\5C\85p\FF\FF\FF\F2\0F\11E\98\F2\0F\10E\B0\F2\0FYE\A0\F2\0F\10M\A8\F2\0FYM\98\F2\0F\5C\C1H\8BE\F0\8BM\E4\83\C1\0EHc\D1\F2\0F\11\04\D0\F2\0F\10E\B0\F2\0FYE\98\F2\0F\10M\A8\F2\0FYM\A0\F2\0FX\C1H\8BE\F0\8BM\E4\83\C1\0FHc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\10\89E\E4\E9\E4\F8\FF\FFH\83\C4\18]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0\89}\FC\89u\F8H\89U\F0H\89M\E8\8Bu\F8\C1\E6\02\89u\C8\C7E\E4\00\00\00\00\8BE\E4;E\F8\0F\8DK\02\00\00\8BE\E4\03E\F8\89E\E0\8BE\E0\03E\F8\89E\DC\8BE\DC\03E\F8\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\88H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\80H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11\85x\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85p\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\85`\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11\85X\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\88\F2\0F\5C\85h\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\80\F2\0F\5C\85`\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FFH\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FFH\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0FX\85P\FF\FF\FFH\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10\85p\FF\FF\FF\F2\0F\5C\85X\FF\FF\FFH\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9\A9\FD\FF\FFH\8BE\E8\F2\0F\10@\10\F2\0F\11E\B8\8BM\C8\89M\E4\8BE\E4\8BM\F8\03M\C89\C8\0F\8D\AB\02\00\00\8BE\E4\03E\F8\89E\E0\8BE\E0\03E\F8\89E\DC\8BE\DC\03E\F8\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\88H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\80H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11\85x\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85p\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\85`\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11\85X\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85`\FF\FF\FF\F2\0F\5CE\80H\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\88\F2\0F\5C\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0F\10M\88\F2\0F\5CM\80\F2\0FY\C1H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0F\10M\88\F2\0FXM\80\F2\0FY\C1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85P\FF\FF\FF\F2\0FX\85x\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85X\FF\FF\FF\F2\0F\5C\85p\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0F\10M\80\F2\0F\5CM\88\F2\0FY\C1H\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0F\10M\80\F2\0FXM\88\F2\0FY\C1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9D\FD\FF\FF\C7E\D0\00\00\00\00\8BE\C8\C1\E0\01\89E\C4\8BE\C4\89E\D4\8BE\D4;E\FC\0F\8Do\07\00\00\F2\0F\10\05I\08\00\00\8BE\D0\83\C0\02\89E\D0\8BE\D0\C1\E0\01\89E\CCH\8BM\E8HcU\D0\F2\0F\10\0C\D1\F2\0F\11M\A8H\8BM\E8\8BE\D0\83\C0\01Hc\D0\F2\0F\10\0C\D1\F2\0F\11M\A0H\8BM\E8HcU\CC\F2\0F\10\0C\D1\F2\0F\11M\B8H\8BM\E8\8BE\CC\83\C0\01Hc\D0\F2\0F\10\0C\D1\F2\0F\11M\B0\F2\0F\10M\B8\0F(\D0\F2\0FYU\A0\F2\0FYU\B0\F2\0F\5C\CA\F2\0F\11M\98\F2\0FYE\A0\F2\0FYE\B8\F2\0F\5CE\B0\F2\0F\11E\90\8BE\D4\89E\E4\8BE\E4\8BM\F8\03M\D49\C8\0F\8D\01\03\00\00\8BE\E4\03E\F8\89E\E0\8BE\E0\03E\F8\89E\DC\8BE\DC\03E\F8\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\88H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\80H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11\85x\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85p\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\85`\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11\85X\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85h\FF\FF\FF\F2\0F\10M\88\F2\0F\5C\C8\F2\0F\11M\88\F2\0F\10\85`\FF\FF\FF\F2\0F\10M\80\F2\0F\5C\C8\F2\0F\11M\80\F2\0F\10E\A8\F2\0FYE\88\F2\0F\10M\A0\F2\0FYM\80\F2\0F\5C\C1H\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\A8\F2\0FYE\80\F2\0F\10M\A0\F2\0FYM\88\F2\0FX\C1H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0FYE\88\F2\0F\10M\B0\F2\0FYM\80\F2\0F\5C\C1H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0FYE\80\F2\0F\10M\B0\F2\0FYM\88\F2\0FX\C1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0FX\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0F\5C\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\98\F2\0FYE\88\F2\0F\10M\90\F2\0FYM\80\F2\0F\5C\C1H\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10E\98\F2\0FYE\80\F2\0F\10M\90\F2\0FYM\88\F2\0FX\C1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9\EE\FC\FF\FF\F2\0F\10\05\96\04\00\00H\8BE\E8\8BM\CC\83\C1\02Hc\D1\F2\0F\10\0C\D0\F2\0F\11M\B8H\8BE\E8\8BM\CC\83\C1\03Hc\D1\F2\0F\10\0C\D0\F2\0F\11M\B0\F2\0F\10M\B8\0F(\D0\F2\0FYU\A8\F2\0FYU\B0\F2\0F\5C\CA\F2\0F\11M\98\F2\0FYE\A8\F2\0FYE\B8\F2\0F\5CE\B0\F2\0F\11E\90\8BM\D4\03M\C8\89M\E4\8BE\E4\8BM\F8\8BU\D4\03U\C8\01\D19\C8\0F\8D%\03\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\03M\F8\89M\E0\8BM\E0\03M\F8\89M\DC\8BM\DC\03M\F8\89M\D8H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0FX\04\F2\F2\0F\11E\88H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0FX\04\F2\F2\0F\11E\80H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0F\5C\04\F2\F2\0F\11\85x\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0F\5C\04\F2\F2\0F\11\85p\FF\FF\FFH\8BU\F0Hcu\DC\F2\0F\10\04\F2H\8BU\F0Hcu\D8\F2\0FX\04\F2\F2\0F\11\85h\FF\FF\FFH\8BU\F0\8BM\DC\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\D8\83\C1\01Hc\F1\F2\0FX\04\F2\F2\0F\11\85`\FF\FF\FFH\8BU\F0Hcu\DC\F2\0F\10\04\F2H\8BU\F0Hcu\D8\F2\0F\5C\04\F2\F2\0F\11\85X\FF\FF\FFH\8BU\F0\8BM\DC\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\D8\83\C1\01Hc\F1\F2\0F\5C\04\F2\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BU\F0Hcu\E4\F2\0F\11\04\F2\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10\85h\FF\FF\FF\F2\0F\10M\88\F2\0F\5C\C8\F2\0F\11M\88\F2\0F\10\85`\FF\FF\FF\F2\0F\10M\80\F2\0F\5C\C8\F2\0F\11M\80\F2\0F\10E\A0fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\88\F2\0F\10M\A8\F2\0FYM\80\F2\0F\5C\C1H\8BU\F0Hcu\DC\F2\0F\11\04\F2\F2\0F\10E\A0fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\80\F2\0F\10M\A8\F2\0FYM\88\F2\0FX\C1H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0FYE\88\F2\0F\10M\B0\F2\0FYM\80\F2\0F\5C\C1H\8BE\F0HcU\E0\F2\0F\11\04\D0\F2\0F\10E\B8\F2\0FYE\80\F2\0F\10M\B0\F2\0FYM\88\F2\0FX\C1H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10\85x\FF\FF\FF\F2\0FX\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0F\5C\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\98\F2\0FYE\88\F2\0F\10M\90\F2\0FYM\80\F2\0F\5C\C1H\8BE\F0HcU\D8\F2\0F\11\04\D0\F2\0F\10E\98\F2\0FYE\80\F2\0F\10M\90\F2\0FYM\88\F2\0FX\C1H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\02\89E\E4\E9\C5\FC\FF\FF\E9\00\00\00\00\8BE\C4\03E\D4\89E\D4\E9\85\F8\FF\FFH\83\C40]\C3f.\0F\1F\84\00\00\00\00\00f\90AWAVI\89\D7AUATL\8D%\CE\0D \00UH\8D-\CE\0D \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E87\C6\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_404084__fini = internal constant %seg_404084__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_404090__rodata = internal constant %seg_404090__rodata_type <{ [24 x i8] c"\01\00\02\00\00\00\00\00\BB\BD\D7\D9\DF|\DB=\00\00\00\00\00\00P?", [88 x i8] c"\00\00\00\00\00\00\90@\00\00\00\00\00\00\10@\00\00\00\00\00\00\E0C\95\D6&\E8\0B.\11>\8D\ED\B5\A0\F7\C6\B0>\00\00\00\00\00\00\F0?q\8B\89\C0\85.\D0>\00\00\00\00\00\00\00@\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [45 x i8] c"FFT sanity check failed! Difference is: %le\0A\00", [7 x i8] c"%e %e\0A\00" }>
@seg_404134__eh_frame_hdr = internal constant %seg_404134__eh_frame_hdr_type <{ [148 x i8] c"\01\1B\03;\90\00\00\00\11\00\00\00\5C\C5\FF\FF\EC\00\00\00\1C\C6\FF\FF\AC\00\00\00L\C6\FF\FF\D8\00\00\00\0C\C7\FF\FF\14\01\00\00\EC\CC\FF\FF0\01\00\00,\CD\FF\FFL\01\00\00\9C\CE\FF\FFh\01\00\00\1C\CF\FF\FF\84\01\00\00\BC\CF\FF\FF\A0\01\00\00\AC\D0\FF\FF\BC\01\00\00,\D7\FF\FF\D8\01\00\00\CC\DA\FF\FF\F4\01\00\00l\E3\FF\FF\10\02\00\00\5C\E7\FF\FF,\02\00\00\EC\F1\FF\FFH\02\00\00\DC\FE\FF\FFd\02\00\00L\FF\FF\FF\AC\02\00\00" }>
@seg_4041c8__eh_frame = internal constant %seg_4041c8__eh_frame_type <{ [560 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00h\C5\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00l\C5\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00h\C4\FF\FF\C0\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\F0\C5\FF\FF\D5\05\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\B4\CB\FF\FF=\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\D8\CB\FF\FFl\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00,\CD\FF\FFt\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\90\CD\FF\FF\9D\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\14\CE\FF\FF\E1\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\E8\CE\FF\FFt\06\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00L\D5\FF\FF\9A\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\00\D0\D8\FF\FF\94\08\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00T\E1\FF\FF\EF\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\01\00\00(\E5\FF\FF\84\0A\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\01\00\00\9C\EF\FF\FF\E4\0C\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\A8\01\00\00p\FC\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\F0\01\00\00\98\FC\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_604df0__init_array = internal global %seg_604df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400830_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400800___do_global_dtors_aux to i64) }>
@seg_604ff0__got = internal global %seg_604ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_605000__got_plt = internal global %seg_605000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 ()* @abort to i64), i64 ptrtoint (double (double)* @atan to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), i64 ptrtoint (double (double)* @cos to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), i64 ptrtoint (i64 (i64, i64)* @memalign to i64), i64 ptrtoint (double (double)* @sin to i64), i64 ptrtoint (double (double)* @sqrt to i64) }>
@seg_605070__data = internal global %seg_605070__data_type zeroinitializer
@__bss_start = global %__bss_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400830_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400800___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_404080___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_404010___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @cdft_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @errorcheck_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @get_time_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @putdata_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @makewt_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @abort() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memalign(i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_404010___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404010:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_604df0__init_array_type* @seg_604df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604df0__init_array_type* @seg_604df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #17
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #17
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #17
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 14788
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400678__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #17
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_404066, label %block_404046

block_404066:                                     ; preds = %block_404050, %block_404010
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_404010 ], [ %387, %block_404050 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #17
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404046:                                     ; preds = %block_404010
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #17
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_404050

block_404050:                                     ; preds = %block_404050, %block_404046
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_404046 ], [ %387, %block_404050 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #17
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #17
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_404050, label %block_404066
}

; Function Attrs: noinline
define %struct.Memory* @sub_400678__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400678:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #17
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_604ff0__got_type* @seg_604ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #17
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_40068a, label %block_400688

block_400688:                                     ; preds = %block_400678
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_40068a

block_40068a:                                     ; preds = %block_400688, %block_400678
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400678 ], [ %92, %block_400688 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #17
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400fd0_putdata(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400fd0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %47 to %union.vec128_t*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = load i64, i64* %RBP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 1
  store i64 %52, i64* %PC
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %54 = load i64, i64* %53, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %50, i64* %56
  store i64 %55, i64* %53, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RBP, align 8, !tbaa !2428
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 4
  %62 = load i32, i32* %EDI
  %63 = zext i32 %62 to i64
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i32, i32* %ESI
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 16
  %76 = load i64, i64* %RDX
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 24
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  store i32 0, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %RSI, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 20
  %94 = load i32, i32* %ESI
  %95 = zext i32 %94 to i64
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %93 to i32*
  store i32 %94, i32* %98
  br label %block_400feb

block_400feb:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_400fd0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400fd0 ], [ %302, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 20
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i32, i32* %EAX
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 8
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 3
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i32*
  %113 = load i32, i32* %112
  %114 = sub i32 %106, %113
  %115 = icmp ult i32 %106, %113
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %116, i8* %117, align 1, !tbaa !2432
  %118 = and i32 %114, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #17
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i32 %113, %106
  %125 = xor i32 %124, %114
  %126 = lshr i32 %125, 4
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i32 %114, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i32 %114, 31
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i32 %106, 31
  %137 = lshr i32 %113, 31
  %138 = xor i32 %137, %136
  %139 = xor i32 %133, %136
  %140 = add nuw nsw i32 %139, %138
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 81
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 6
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 6
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %151 = load i8, i8* %150, align 1, !tbaa !2448
  %152 = icmp eq i8 %151, 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %154 = load i8, i8* %153, align 1, !tbaa !2449
  %155 = icmp ne i8 %154, 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %157 = load i8, i8* %156, align 1, !tbaa !2450
  %158 = icmp ne i8 %157, 0
  %159 = xor i1 %155, %158
  %160 = xor i1 %159, true
  %161 = and i1 %152, %160
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = select i1 %161, i64 %145, i64 %147
  store i64 %164, i64* %163, align 8, !tbaa !2428
  %165 = load i8, i8* %BRANCH_TAKEN
  %166 = icmp eq i8 %165, 1
  br i1 %166, label %block_401042, label %block_400ff7

block_400ff7:                                     ; preds = %block_400feb
  %167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 8
  store i64 %169, i64* %PC
  %170 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 72) to double*)
  %171 = bitcast i8* %167 to double*
  store double %170, double* %171, align 1, !tbaa !2452
  %172 = getelementptr inbounds i8, i8* %167, i64 8
  %173 = bitcast i8* %172 to double*
  store double 0.000000e+00, double* %173, align 1, !tbaa !2452
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 5
  store i64 %175, i64* %PC
  store i64 259200, i64* %RAX, align 8, !tbaa !2428
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 24
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  %181 = load i32, i32* %180
  %182 = sext i32 %181 to i64
  %183 = mul nsw i64 %182, 7141
  %184 = trunc i64 %183 to i32
  %185 = and i64 %183, 4294967295
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = shl i64 %183, 32
  %187 = ashr exact i64 %186, 32
  %188 = icmp ne i64 %187, %183
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %189, i8* %190, align 1, !tbaa !2432
  %191 = and i32 %184, 255
  %192 = call i32 @llvm.ctpop.i32(i32 %191) #17
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = xor i8 %194, 1
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %195, i8* %196, align 1, !tbaa !2446
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %197, align 1, !tbaa !2447
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %198, align 1, !tbaa !2448
  %199 = lshr i32 %184, 31
  %200 = trunc i32 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %200, i8* %201, align 1, !tbaa !2449
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %189, i8* %202, align 1, !tbaa !2450
  %203 = load i64, i64* %RCX
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 6
  store i64 %205, i64* %PC
  %206 = trunc i64 %203 to i32
  %207 = add i32 54773, %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = icmp ult i32 %207, %206
  %210 = icmp ult i32 %207, 54773
  %211 = or i1 %209, %210
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %212, i8* %213, align 1, !tbaa !2432
  %214 = and i32 %207, 255
  %215 = call i32 @llvm.ctpop.i32(i32 %214) #17
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %218, i8* %219, align 1, !tbaa !2446
  %220 = xor i64 54773, %203
  %221 = trunc i64 %220 to i32
  %222 = xor i32 %221, %207
  %223 = lshr i32 %222, 4
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %225, i8* %226, align 1, !tbaa !2447
  %227 = icmp eq i32 %207, 0
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %228, i8* %229, align 1, !tbaa !2448
  %230 = lshr i32 %207, 31
  %231 = trunc i32 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %231, i8* %232, align 1, !tbaa !2449
  %233 = lshr i32 %206, 31
  %234 = xor i32 %230, %233
  %235 = add nuw nsw i32 %234, %230
  %236 = icmp eq i32 %235, 2
  %237 = zext i1 %236 to i8
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %237, i8* %238, align 1, !tbaa !2450
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 28
  %241 = load i32, i32* %EAX
  %242 = zext i32 %241 to i64
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  %245 = inttoptr i64 %240 to i32*
  store i32 %241, i32* %245
  %246 = load i32, i32* %ECX
  %247 = zext i32 %246 to i64
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 2
  store i64 %249, i64* %PC
  %250 = and i64 %247, 4294967295
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 1
  store i64 %252, i64* %PC
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %255 = bitcast %union.anon* %254 to i32*
  %256 = load i32, i32* %255, align 8, !tbaa !2454
  %257 = sext i32 %256 to i64
  %258 = lshr i64 %257, 32
  store i64 %258, i64* %253, align 8, !tbaa !2428
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 28
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RCX, align 8, !tbaa !2428
  %266 = load i32, i32* %ECX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 2
  store i64 %269, i64* %PC
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %271 = bitcast %union.anon* %270 to i32*
  %272 = load i32, i32* %271, align 8, !tbaa !2454
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %275 = bitcast %union.anon* %274 to i32*
  %276 = load i32, i32* %275, align 8, !tbaa !2454
  %277 = zext i32 %276 to i64
  %278 = shl i64 %267, 32
  %279 = ashr exact i64 %278, 32
  %280 = shl nuw i64 %277, 32
  %281 = or i64 %280, %273
  %282 = sdiv i64 %281, %279
  %283 = shl i64 %282, 32
  %284 = ashr exact i64 %283, 32
  %285 = icmp eq i64 %282, %284
  br i1 %285, label %290, label %286

; <label>:286:                                    ; preds = %block_400ff7
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %288 = load i64, i64* %287, align 8, !tbaa !2428
  %289 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %288, %struct.Memory* %MEMORY.0) #18
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:290:                                    ; preds = %block_400ff7
  %291 = srem i64 %281, %279
  %292 = getelementptr inbounds %union.anon, %union.anon* %270, i64 0, i32 0
  %293 = and i64 %282, 4294967295
  store i64 %293, i64* %292, align 8, !tbaa !2428
  %294 = getelementptr inbounds %union.anon, %union.anon* %274, i64 0, i32 0
  %295 = and i64 %291, 4294967295
  store i64 %295, i64* %294, align 8, !tbaa !2428
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %296, align 1, !tbaa !2432
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %297, align 1, !tbaa !2446
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %298, align 1, !tbaa !2447
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %299, align 1, !tbaa !2448
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %300, align 1, !tbaa !2449
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %301, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %286, %290
  %302 = phi %struct.Memory* [ %289, %286 ], [ %MEMORY.0, %290 ]
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 24
  %305 = load i32, i32* %EDX
  %306 = zext i32 %305 to i64
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %304 to i32*
  store i32 %305, i32* %309
  %310 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %311 = load i32, i32* %EDX
  %312 = zext i32 %311 to i64
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 4
  store i64 %314, i64* %PC
  %315 = sitofp i32 %311 to double
  %316 = bitcast i8* %310 to double*
  store double %315, double* %316, align 1, !tbaa !2452
  %317 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %318 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %319 = bitcast %union.vec128_t* %XMM0 to i8*
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = bitcast i8* %318 to double*
  %323 = load double, double* %322, align 1
  %324 = getelementptr inbounds i8, i8* %318, i64 8
  %325 = bitcast i8* %324 to i64*
  %326 = load i64, i64* %325, align 1
  %327 = bitcast i8* %319 to double*
  %328 = load double, double* %327, align 1
  %329 = fmul double %323, %328
  %330 = bitcast i8* %317 to double*
  store double %329, double* %330, align 1, !tbaa !2452
  %331 = getelementptr inbounds i8, i8* %317, i64 8
  %332 = bitcast i8* %331 to i64*
  store i64 %326, i64* %332, align 1, !tbaa !2452
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 16
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 4
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i64*
  %338 = load i64, i64* %337
  store i64 %338, i64* %RSI, align 8, !tbaa !2428
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 20
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %340 to i32*
  %344 = load i32, i32* %343
  %345 = sext i32 %344 to i64
  store i64 %345, i64* %RDI, align 8, !tbaa !2428
  %346 = load i64, i64* %RSI
  %347 = load i64, i64* %RDI
  %348 = mul i64 %347, 8
  %349 = add i64 %348, %346
  %350 = bitcast %union.vec128_t* %XMM1 to i8*
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 5
  store i64 %352, i64* %PC
  %353 = bitcast i8* %350 to double*
  %354 = load double, double* %353, align 1
  %355 = inttoptr i64 %349 to double*
  store double %354, double* %355
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 20
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 3
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i32*
  %361 = load i32, i32* %360
  %362 = zext i32 %361 to i64
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = load i64, i64* %RAX
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = trunc i64 %363 to i32
  %367 = add i32 1, %366
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = icmp ult i32 %367, %366
  %370 = icmp ult i32 %367, 1
  %371 = or i1 %369, %370
  %372 = zext i1 %371 to i8
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %372, i8* %373, align 1, !tbaa !2432
  %374 = and i32 %367, 255
  %375 = call i32 @llvm.ctpop.i32(i32 %374) #17
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  %378 = xor i8 %377, 1
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %378, i8* %379, align 1, !tbaa !2446
  %380 = xor i64 1, %363
  %381 = trunc i64 %380 to i32
  %382 = xor i32 %381, %367
  %383 = lshr i32 %382, 4
  %384 = trunc i32 %383 to i8
  %385 = and i8 %384, 1
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %385, i8* %386, align 1, !tbaa !2447
  %387 = icmp eq i32 %367, 0
  %388 = zext i1 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %388, i8* %389, align 1, !tbaa !2448
  %390 = lshr i32 %367, 31
  %391 = trunc i32 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %391, i8* %392, align 1, !tbaa !2449
  %393 = lshr i32 %366, 31
  %394 = xor i32 %390, %393
  %395 = add nuw nsw i32 %394, %390
  %396 = icmp eq i32 %395, 2
  %397 = zext i1 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %397, i8* %398, align 1, !tbaa !2450
  %399 = load i64, i64* %RBP
  %400 = sub i64 %399, 20
  %401 = load i32, i32* %EAX
  %402 = zext i32 %401 to i64
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 3
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %400 to i32*
  store i32 %401, i32* %405
  %406 = load i64, i64* %PC
  %407 = sub i64 %406, 82
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 5
  store i64 %409, i64* %PC
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %407, i64* %410, align 8, !tbaa !2428
  br label %block_400feb

block_401042:                                     ; preds = %block_400feb
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 1
  store i64 %412, i64* %PC
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %414 = load i64, i64* %413, align 8, !tbaa !2428
  %415 = add i64 %414, 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416
  store i64 %417, i64* %RBP, align 8, !tbaa !2428
  store i64 %415, i64* %413, align 8, !tbaa !2428
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 1
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %422 = load i64, i64* %421, align 8, !tbaa !2428
  %423 = inttoptr i64 %422 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %420, align 8, !tbaa !2428
  %425 = add i64 %422, 8
  store i64 %425, i64* %421, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400800___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400800:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #17
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400820, label %block_400809

block_400820:                                     ; preds = %block_400800
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400809:                                     ; preds = %block_400800
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400790_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_403320_cftmdl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403320:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %42 to %"class.std::bitset"*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %44 to %"class.std::bitset"*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %46 to %union.vec128_t*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %48 to %union.vec128_t*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %50 to %union.vec128_t*
  %51 = load i64, i64* %RBP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 1
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %RSP
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  store i64 %58, i64* %RBP, align 8, !tbaa !2428
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = sub i64 %61, 48
  store i64 %64, i64* %RSP, align 8, !tbaa !2428
  %65 = icmp ult i64 %61, 48
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %66, i8* %67, align 1, !tbaa !2432
  %68 = trunc i64 %64 to i32
  %69 = and i32 %68, 255
  %70 = call i32 @llvm.ctpop.i32(i32 %69) #17
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %73, i8* %74, align 1, !tbaa !2446
  %75 = xor i64 48, %61
  %76 = xor i64 %75, %64
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = icmp eq i64 %64, 0
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %82, i8* %83, align 1, !tbaa !2448
  %84 = lshr i64 %64, 63
  %85 = trunc i64 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %85, i8* %86, align 1, !tbaa !2449
  %87 = lshr i64 %61, 63
  %88 = xor i64 %84, %87
  %89 = add nuw nsw i64 %88, %87
  %90 = icmp eq i64 %89, 2
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 4
  %95 = load i32, i32* %EDI
  %96 = zext i32 %95 to i64
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 8
  %102 = load i32, i32* %ESI
  %103 = zext i32 %102 to i64
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 16
  %109 = load i64, i64* %RDX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %108 to i64*
  store i64 %109, i64* %112
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 24
  %115 = load i64, i64* %RCX
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  %124 = load i32, i32* %123
  %125 = zext i32 %124 to i64
  store i64 %125, i64* %RSI, align 8, !tbaa !2428
  %126 = load i64, i64* %RSI
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = and i64 %126, 4294967295
  %130 = shl i64 %129, 1
  %131 = trunc i64 %130 to i32
  %132 = icmp slt i32 %131, 0
  %133 = shl i32 %131, 1
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RSI, align 8, !tbaa !2428
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %136 = zext i1 %132 to i8
  store i8 %136, i8* %135, align 1, !tbaa !2451
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %138 = and i32 %133, 254
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #17
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  store i8 %142, i8* %137, align 1, !tbaa !2451
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %143, align 1, !tbaa !2451
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %145 = icmp eq i32 %133, 0
  %146 = zext i1 %145 to i8
  store i8 %146, i8* %144, align 1, !tbaa !2451
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %148 = lshr i32 %133, 31
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %147, align 1, !tbaa !2451
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %150, align 1, !tbaa !2451
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 56
  %153 = load i32, i32* %ESI
  %154 = zext i32 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 3
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %152 to i32*
  store i32 %153, i32* %157
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 28
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 7
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  store i32 0, i32* %162
  br label %block_403346

block_40359d:                                     ; preds = %block_403346
  %163 = sub i64 %9571, 24
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %169 = load i64, i64* %RAX
  %170 = add i64 %169, 16
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 5
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to double*
  %174 = load double, double* %173
  %175 = bitcast i8* %168 to double*
  store double %174, double* %175, align 1, !tbaa !2452
  %176 = getelementptr inbounds i8, i8* %168, i64 8
  %177 = bitcast i8* %176 to double*
  store double 0.000000e+00, double* %177, align 1, !tbaa !2452
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 72
  %180 = bitcast %union.vec128_t* %XMM0 to i8*
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 5
  store i64 %182, i64* %PC
  %183 = bitcast i8* %180 to double*
  %184 = load double, double* %183, align 1
  %185 = inttoptr i64 %179 to double*
  store double %184, double* %185
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 56
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RCX, align 8, !tbaa !2428
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 28
  %195 = load i32, i32* %ECX
  %196 = zext i32 %195 to i64
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 3
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %194 to i32*
  store i32 %195, i32* %199
  br label %block_4035b1

block_40388f:                                     ; preds = %block_403883
  %200 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 8
  store i64 %202, i64* %PC
  %203 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 80) to double*)
  %204 = bitcast i8* %200 to double*
  store double %203, double* %204, align 1, !tbaa !2452
  %205 = getelementptr inbounds i8, i8* %200, i64 8
  %206 = bitcast i8* %205 to double*
  store double 0.000000e+00, double* %206, align 1, !tbaa !2452
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 48
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 3
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i32*
  %212 = load i32, i32* %211
  %213 = zext i32 %212 to i64
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 3
  store i64 %216, i64* %PC
  %217 = trunc i64 %214 to i32
  %218 = add i32 2, %217
  %219 = zext i32 %218 to i64
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = icmp ult i32 %218, %217
  %221 = icmp ult i32 %218, 2
  %222 = or i1 %220, %221
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %223, i8* %224, align 1, !tbaa !2432
  %225 = and i32 %218, 255
  %226 = call i32 @llvm.ctpop.i32(i32 %225) #17
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %229, i8* %230, align 1, !tbaa !2446
  %231 = xor i64 2, %214
  %232 = trunc i64 %231 to i32
  %233 = xor i32 %232, %218
  %234 = lshr i32 %233, 4
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %236, i8* %237, align 1, !tbaa !2447
  %238 = icmp eq i32 %218, 0
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %239, i8* %240, align 1, !tbaa !2448
  %241 = lshr i32 %218, 31
  %242 = trunc i32 %241 to i8
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %242, i8* %243, align 1, !tbaa !2449
  %244 = lshr i32 %217, 31
  %245 = xor i32 %241, %244
  %246 = add nuw nsw i32 %245, %241
  %247 = icmp eq i32 %246, 2
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %248, i8* %249, align 1, !tbaa !2450
  %250 = load i64, i64* %RBP
  %251 = sub i64 %250, 48
  %252 = load i32, i32* %EAX
  %253 = zext i32 %252 to i64
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 3
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %251 to i32*
  store i32 %252, i32* %256
  %257 = load i64, i64* %RBP
  %258 = sub i64 %257, 48
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 3
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i32*
  %262 = load i32, i32* %261
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = load i64, i64* %RAX
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 3
  store i64 %266, i64* %PC
  %267 = trunc i64 %264 to i32
  %268 = shl i32 %267, 1
  %269 = icmp slt i32 %267, 0
  %270 = icmp slt i32 %268, 0
  %271 = xor i1 %269, %270
  %272 = zext i32 %268 to i64
  store i64 %272, i64* %RAX, align 8, !tbaa !2428
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %274 = zext i1 %269 to i8
  store i8 %274, i8* %273, align 1, !tbaa !2451
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %276 = and i32 %268, 254
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #17
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  store i8 %280, i8* %275, align 1, !tbaa !2451
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %281, align 1, !tbaa !2451
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %283 = icmp eq i32 %268, 0
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %282, align 1, !tbaa !2451
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %286 = lshr i32 %268, 31
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %285, align 1, !tbaa !2451
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %289 = zext i1 %271 to i8
  store i8 %289, i8* %288, align 1, !tbaa !2451
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 52
  %292 = load i32, i32* %EAX
  %293 = zext i32 %292 to i64
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 3
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %291 to i32*
  store i32 %292, i32* %296
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 24
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 48
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  %308 = load i32, i32* %307
  %309 = sext i32 %308 to i64
  store i64 %309, i64* %RDX, align 8, !tbaa !2428
  %310 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %311 = load i64, i64* %RCX
  %312 = load i64, i64* %RDX
  %313 = mul i64 %312, 8
  %314 = add i64 %313, %311
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  store i64 %316, i64* %PC
  %317 = inttoptr i64 %314 to double*
  %318 = load double, double* %317
  %319 = bitcast i8* %310 to double*
  store double %318, double* %319, align 1, !tbaa !2452
  %320 = getelementptr inbounds i8, i8* %310, i64 8
  %321 = bitcast i8* %320 to double*
  store double 0.000000e+00, double* %321, align 1, !tbaa !2452
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 88
  %324 = bitcast %union.vec128_t* %XMM1 to i8*
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = bitcast i8* %324 to double*
  %328 = load double, double* %327, align 1
  %329 = inttoptr i64 %323 to double*
  store double %328, double* %329
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 24
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 4
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i64*
  %335 = load i64, i64* %334
  store i64 %335, i64* %RCX, align 8, !tbaa !2428
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 48
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i32*
  %341 = load i32, i32* %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = load i64, i64* %RAX
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  %346 = trunc i64 %343 to i32
  %347 = add i32 1, %346
  %348 = zext i32 %347 to i64
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = icmp ult i32 %347, %346
  %350 = icmp ult i32 %347, 1
  %351 = or i1 %349, %350
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %352, i8* %353, align 1, !tbaa !2432
  %354 = and i32 %347, 255
  %355 = call i32 @llvm.ctpop.i32(i32 %354) #17
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %358, i8* %359, align 1, !tbaa !2446
  %360 = xor i64 1, %343
  %361 = trunc i64 %360 to i32
  %362 = xor i32 %361, %347
  %363 = lshr i32 %362, 4
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %365, i8* %366, align 1, !tbaa !2447
  %367 = icmp eq i32 %347, 0
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %368, i8* %369, align 1, !tbaa !2448
  %370 = lshr i32 %347, 31
  %371 = trunc i32 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %371, i8* %372, align 1, !tbaa !2449
  %373 = lshr i32 %346, 31
  %374 = xor i32 %370, %373
  %375 = add nuw nsw i32 %374, %370
  %376 = icmp eq i32 %375, 2
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %377, i8* %378, align 1, !tbaa !2450
  %379 = load i32, i32* %EAX
  %380 = zext i32 %379 to i64
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 3
  store i64 %382, i64* %PC
  %383 = shl i64 %380, 32
  %384 = ashr exact i64 %383, 32
  store i64 %384, i64* %RDX, align 8, !tbaa !2428
  %385 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %386 = load i64, i64* %RCX
  %387 = load i64, i64* %RDX
  %388 = mul i64 %387, 8
  %389 = add i64 %388, %386
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 5
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %389 to double*
  %393 = load double, double* %392
  %394 = bitcast i8* %385 to double*
  store double %393, double* %394, align 1, !tbaa !2452
  %395 = getelementptr inbounds i8, i8* %385, i64 8
  %396 = bitcast i8* %395 to double*
  store double 0.000000e+00, double* %396, align 1, !tbaa !2452
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 96
  %399 = bitcast %union.vec128_t* %XMM1 to i8*
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 5
  store i64 %401, i64* %PC
  %402 = bitcast i8* %399 to double*
  %403 = load double, double* %402, align 1
  %404 = inttoptr i64 %398 to double*
  store double %403, double* %404
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 24
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i64*
  %410 = load i64, i64* %409
  store i64 %410, i64* %RCX, align 8, !tbaa !2428
  %411 = load i64, i64* %RBP
  %412 = sub i64 %411, 52
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %412 to i32*
  %416 = load i32, i32* %415
  %417 = sext i32 %416 to i64
  store i64 %417, i64* %RDX, align 8, !tbaa !2428
  %418 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %419 = load i64, i64* %RCX
  %420 = load i64, i64* %RDX
  %421 = mul i64 %420, 8
  %422 = add i64 %421, %419
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 5
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to double*
  %426 = load double, double* %425
  %427 = bitcast i8* %418 to double*
  store double %426, double* %427, align 1, !tbaa !2452
  %428 = getelementptr inbounds i8, i8* %418, i64 8
  %429 = bitcast i8* %428 to double*
  store double 0.000000e+00, double* %429, align 1, !tbaa !2452
  %430 = load i64, i64* %RBP
  %431 = sub i64 %430, 72
  %432 = bitcast %union.vec128_t* %XMM1 to i8*
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  store i64 %434, i64* %PC
  %435 = bitcast i8* %432 to double*
  %436 = load double, double* %435, align 1
  %437 = inttoptr i64 %431 to double*
  store double %436, double* %437
  %438 = load i64, i64* %RBP
  %439 = sub i64 %438, 24
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 4
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %439 to i64*
  %443 = load i64, i64* %442
  store i64 %443, i64* %RCX, align 8, !tbaa !2428
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 52
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 3
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %445 to i32*
  %449 = load i32, i32* %448
  %450 = zext i32 %449 to i64
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = load i64, i64* %RAX
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 3
  store i64 %453, i64* %PC
  %454 = trunc i64 %451 to i32
  %455 = add i32 1, %454
  %456 = zext i32 %455 to i64
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = icmp ult i32 %455, %454
  %458 = icmp ult i32 %455, 1
  %459 = or i1 %457, %458
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %460, i8* %461, align 1, !tbaa !2432
  %462 = and i32 %455, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #17
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 1, %451
  %469 = trunc i64 %468 to i32
  %470 = xor i32 %469, %455
  %471 = lshr i32 %470, 4
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %473, i8* %474, align 1, !tbaa !2447
  %475 = icmp eq i32 %455, 0
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %476, i8* %477, align 1, !tbaa !2448
  %478 = lshr i32 %455, 31
  %479 = trunc i32 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %479, i8* %480, align 1, !tbaa !2449
  %481 = lshr i32 %454, 31
  %482 = xor i32 %478, %481
  %483 = add nuw nsw i32 %482, %478
  %484 = icmp eq i32 %483, 2
  %485 = zext i1 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %485, i8* %486, align 1, !tbaa !2450
  %487 = load i32, i32* %EAX
  %488 = zext i32 %487 to i64
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 3
  store i64 %490, i64* %PC
  %491 = shl i64 %488, 32
  %492 = ashr exact i64 %491, 32
  store i64 %492, i64* %RDX, align 8, !tbaa !2428
  %493 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %494 = load i64, i64* %RCX
  %495 = load i64, i64* %RDX
  %496 = mul i64 %495, 8
  %497 = add i64 %496, %494
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 5
  store i64 %499, i64* %PC
  %500 = inttoptr i64 %497 to double*
  %501 = load double, double* %500
  %502 = bitcast i8* %493 to double*
  store double %501, double* %502, align 1, !tbaa !2452
  %503 = getelementptr inbounds i8, i8* %493, i64 8
  %504 = bitcast i8* %503 to double*
  store double 0.000000e+00, double* %504, align 1, !tbaa !2452
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 80
  %507 = bitcast %union.vec128_t* %XMM1 to i8*
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  store i64 %509, i64* %PC
  %510 = bitcast i8* %507 to double*
  %511 = load double, double* %510, align 1
  %512 = inttoptr i64 %506 to double*
  store double %511, double* %512
  %513 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %514 = load i64, i64* %RBP
  %515 = sub i64 %514, 72
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to double*
  %519 = load double, double* %518
  %520 = bitcast i8* %513 to double*
  store double %519, double* %520, align 1, !tbaa !2452
  %521 = getelementptr inbounds i8, i8* %513, i64 8
  %522 = bitcast i8* %521 to double*
  store double 0.000000e+00, double* %522, align 1, !tbaa !2452
  %523 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %524 = bitcast %union.vec128_t* %XMM0 to i8*
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 3
  store i64 %526, i64* %PC
  %527 = bitcast i8* %524 to <2 x i32>*
  %528 = load <2 x i32>, <2 x i32>* %527, align 1
  %529 = getelementptr inbounds i8, i8* %524, i64 8
  %530 = bitcast i8* %529 to <2 x i32>*
  %531 = load <2 x i32>, <2 x i32>* %530, align 1
  %532 = extractelement <2 x i32> %528, i32 0
  %533 = bitcast i8* %523 to i32*
  store i32 %532, i32* %533, align 1, !tbaa !2455
  %534 = extractelement <2 x i32> %528, i32 1
  %535 = getelementptr inbounds i8, i8* %523, i64 4
  %536 = bitcast i8* %535 to i32*
  store i32 %534, i32* %536, align 1, !tbaa !2455
  %537 = extractelement <2 x i32> %531, i32 0
  %538 = getelementptr inbounds i8, i8* %523, i64 8
  %539 = bitcast i8* %538 to i32*
  store i32 %537, i32* %539, align 1, !tbaa !2455
  %540 = extractelement <2 x i32> %531, i32 1
  %541 = getelementptr inbounds i8, i8* %523, i64 12
  %542 = bitcast i8* %541 to i32*
  store i32 %540, i32* %542, align 1, !tbaa !2455
  %543 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %544 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %545 = load i64, i64* %RBP
  %546 = sub i64 %545, 96
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 5
  store i64 %548, i64* %PC
  %549 = bitcast i8* %544 to double*
  %550 = load double, double* %549, align 1
  %551 = getelementptr inbounds i8, i8* %544, i64 8
  %552 = bitcast i8* %551 to i64*
  %553 = load i64, i64* %552, align 1
  %554 = inttoptr i64 %546 to double*
  %555 = load double, double* %554
  %556 = fmul double %550, %555
  %557 = bitcast i8* %543 to double*
  store double %556, double* %557, align 1, !tbaa !2452
  %558 = getelementptr inbounds i8, i8* %543, i64 8
  %559 = bitcast i8* %558 to i64*
  store i64 %553, i64* %559, align 1, !tbaa !2452
  %560 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %561 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 80
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = bitcast i8* %561 to double*
  %567 = load double, double* %566, align 1
  %568 = getelementptr inbounds i8, i8* %561, i64 8
  %569 = bitcast i8* %568 to i64*
  %570 = load i64, i64* %569, align 1
  %571 = inttoptr i64 %563 to double*
  %572 = load double, double* %571
  %573 = fmul double %567, %572
  %574 = bitcast i8* %560 to double*
  store double %573, double* %574, align 1, !tbaa !2452
  %575 = getelementptr inbounds i8, i8* %560, i64 8
  %576 = bitcast i8* %575 to i64*
  store i64 %570, i64* %576, align 1, !tbaa !2452
  %577 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %578 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %579 = bitcast %union.vec128_t* %XMM2 to i8*
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 4
  store i64 %581, i64* %PC
  %582 = bitcast i8* %578 to double*
  %583 = load double, double* %582, align 1
  %584 = getelementptr inbounds i8, i8* %578, i64 8
  %585 = bitcast i8* %584 to i64*
  %586 = load i64, i64* %585, align 1
  %587 = bitcast i8* %579 to double*
  %588 = load double, double* %587, align 1
  %589 = fsub double %583, %588
  %590 = bitcast i8* %577 to double*
  store double %589, double* %590, align 1, !tbaa !2452
  %591 = getelementptr inbounds i8, i8* %577, i64 8
  %592 = bitcast i8* %591 to i64*
  store i64 %586, i64* %592, align 1, !tbaa !2452
  %593 = load i64, i64* %RBP
  %594 = sub i64 %593, 104
  %595 = bitcast %union.vec128_t* %XMM1 to i8*
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 5
  store i64 %597, i64* %PC
  %598 = bitcast i8* %595 to double*
  %599 = load double, double* %598, align 1
  %600 = inttoptr i64 %594 to double*
  store double %599, double* %600
  %601 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %602 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 96
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC
  %607 = bitcast i8* %602 to double*
  %608 = load double, double* %607, align 1
  %609 = getelementptr inbounds i8, i8* %602, i64 8
  %610 = bitcast i8* %609 to i64*
  %611 = load i64, i64* %610, align 1
  %612 = inttoptr i64 %604 to double*
  %613 = load double, double* %612
  %614 = fmul double %608, %613
  %615 = bitcast i8* %601 to double*
  store double %614, double* %615, align 1, !tbaa !2452
  %616 = getelementptr inbounds i8, i8* %601, i64 8
  %617 = bitcast i8* %616 to i64*
  store i64 %611, i64* %617, align 1, !tbaa !2452
  %618 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %619 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 72
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 5
  store i64 %623, i64* %PC
  %624 = bitcast i8* %619 to double*
  %625 = load double, double* %624, align 1
  %626 = getelementptr inbounds i8, i8* %619, i64 8
  %627 = bitcast i8* %626 to i64*
  %628 = load i64, i64* %627, align 1
  %629 = inttoptr i64 %621 to double*
  %630 = load double, double* %629
  %631 = fmul double %625, %630
  %632 = bitcast i8* %618 to double*
  store double %631, double* %632, align 1, !tbaa !2452
  %633 = getelementptr inbounds i8, i8* %618, i64 8
  %634 = bitcast i8* %633 to i64*
  store i64 %628, i64* %634, align 1, !tbaa !2452
  %635 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %636 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %637 = load i64, i64* %RBP
  %638 = sub i64 %637, 80
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 5
  store i64 %640, i64* %PC
  %641 = bitcast i8* %636 to double*
  %642 = load double, double* %641, align 1
  %643 = getelementptr inbounds i8, i8* %636, i64 8
  %644 = bitcast i8* %643 to i64*
  %645 = load i64, i64* %644, align 1
  %646 = inttoptr i64 %638 to double*
  %647 = load double, double* %646
  %648 = fsub double %642, %647
  %649 = bitcast i8* %635 to double*
  store double %648, double* %649, align 1, !tbaa !2452
  %650 = getelementptr inbounds i8, i8* %635, i64 8
  %651 = bitcast i8* %650 to i64*
  store i64 %645, i64* %651, align 1, !tbaa !2452
  %652 = load i64, i64* %RBP
  %653 = sub i64 %652, 112
  %654 = bitcast %union.vec128_t* %XMM0 to i8*
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  store i64 %656, i64* %PC
  %657 = bitcast i8* %654 to double*
  %658 = load double, double* %657, align 1
  %659 = inttoptr i64 %653 to double*
  store double %658, double* %659
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 44
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 3
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i32*
  %665 = load i32, i32* %664
  %666 = zext i32 %665 to i64
  store i64 %666, i64* %RAX, align 8, !tbaa !2428
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 28
  %669 = load i32, i32* %EAX
  %670 = zext i32 %669 to i64
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 3
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %668 to i32*
  store i32 %669, i32* %673
  br label %block_403930

block_403352:                                     ; preds = %block_403346
  %674 = sub i64 %9571, 28
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 3
  store i64 %676, i64* %PC
  %677 = inttoptr i64 %674 to i32*
  %678 = load i32, i32* %677
  %679 = zext i32 %678 to i64
  store i64 %679, i64* %RAX, align 8, !tbaa !2428
  %680 = load i64, i64* %RAX
  %681 = load i64, i64* %RBP
  %682 = sub i64 %681, 8
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 3
  store i64 %684, i64* %PC
  %685 = trunc i64 %680 to i32
  %686 = inttoptr i64 %682 to i32*
  %687 = load i32, i32* %686
  %688 = add i32 %687, %685
  %689 = zext i32 %688 to i64
  store i64 %689, i64* %RAX, align 8, !tbaa !2428
  %690 = icmp ult i32 %688, %685
  %691 = icmp ult i32 %688, %687
  %692 = or i1 %690, %691
  %693 = zext i1 %692 to i8
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %693, i8* %694, align 1, !tbaa !2432
  %695 = and i32 %688, 255
  %696 = call i32 @llvm.ctpop.i32(i32 %695) #17
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %699, i8* %700, align 1, !tbaa !2446
  %701 = xor i32 %687, %685
  %702 = xor i32 %701, %688
  %703 = lshr i32 %702, 4
  %704 = trunc i32 %703 to i8
  %705 = and i8 %704, 1
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %705, i8* %706, align 1, !tbaa !2447
  %707 = icmp eq i32 %688, 0
  %708 = zext i1 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %708, i8* %709, align 1, !tbaa !2448
  %710 = lshr i32 %688, 31
  %711 = trunc i32 %710 to i8
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %711, i8* %712, align 1, !tbaa !2449
  %713 = lshr i32 %685, 31
  %714 = lshr i32 %687, 31
  %715 = xor i32 %710, %713
  %716 = xor i32 %710, %714
  %717 = add nuw nsw i32 %715, %716
  %718 = icmp eq i32 %717, 2
  %719 = zext i1 %718 to i8
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %719, i8* %720, align 1, !tbaa !2450
  %721 = load i64, i64* %RBP
  %722 = sub i64 %721, 32
  %723 = load i32, i32* %EAX
  %724 = zext i32 %723 to i64
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 3
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %722 to i32*
  store i32 %723, i32* %727
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 32
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 3
  store i64 %731, i64* %PC
  %732 = inttoptr i64 %729 to i32*
  %733 = load i32, i32* %732
  %734 = zext i32 %733 to i64
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = load i64, i64* %RAX
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 8
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 3
  store i64 %739, i64* %PC
  %740 = trunc i64 %735 to i32
  %741 = inttoptr i64 %737 to i32*
  %742 = load i32, i32* %741
  %743 = add i32 %742, %740
  %744 = zext i32 %743 to i64
  store i64 %744, i64* %RAX, align 8, !tbaa !2428
  %745 = icmp ult i32 %743, %740
  %746 = icmp ult i32 %743, %742
  %747 = or i1 %745, %746
  %748 = zext i1 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %748, i8* %749, align 1, !tbaa !2432
  %750 = and i32 %743, 255
  %751 = call i32 @llvm.ctpop.i32(i32 %750) #17
  %752 = trunc i32 %751 to i8
  %753 = and i8 %752, 1
  %754 = xor i8 %753, 1
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %754, i8* %755, align 1, !tbaa !2446
  %756 = xor i32 %742, %740
  %757 = xor i32 %756, %743
  %758 = lshr i32 %757, 4
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %760, i8* %761, align 1, !tbaa !2447
  %762 = icmp eq i32 %743, 0
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %763, i8* %764, align 1, !tbaa !2448
  %765 = lshr i32 %743, 31
  %766 = trunc i32 %765 to i8
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %766, i8* %767, align 1, !tbaa !2449
  %768 = lshr i32 %740, 31
  %769 = lshr i32 %742, 31
  %770 = xor i32 %765, %768
  %771 = xor i32 %765, %769
  %772 = add nuw nsw i32 %770, %771
  %773 = icmp eq i32 %772, 2
  %774 = zext i1 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %774, i8* %775, align 1, !tbaa !2450
  %776 = load i64, i64* %RBP
  %777 = sub i64 %776, 36
  %778 = load i32, i32* %EAX
  %779 = zext i32 %778 to i64
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 3
  store i64 %781, i64* %PC
  %782 = inttoptr i64 %777 to i32*
  store i32 %778, i32* %782
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 36
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 3
  store i64 %786, i64* %PC
  %787 = inttoptr i64 %784 to i32*
  %788 = load i32, i32* %787
  %789 = zext i32 %788 to i64
  store i64 %789, i64* %RAX, align 8, !tbaa !2428
  %790 = load i64, i64* %RAX
  %791 = load i64, i64* %RBP
  %792 = sub i64 %791, 8
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC
  %795 = trunc i64 %790 to i32
  %796 = inttoptr i64 %792 to i32*
  %797 = load i32, i32* %796
  %798 = add i32 %797, %795
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = icmp ult i32 %798, %795
  %801 = icmp ult i32 %798, %797
  %802 = or i1 %800, %801
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %803, i8* %804, align 1, !tbaa !2432
  %805 = and i32 %798, 255
  %806 = call i32 @llvm.ctpop.i32(i32 %805) #17
  %807 = trunc i32 %806 to i8
  %808 = and i8 %807, 1
  %809 = xor i8 %808, 1
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %809, i8* %810, align 1, !tbaa !2446
  %811 = xor i32 %797, %795
  %812 = xor i32 %811, %798
  %813 = lshr i32 %812, 4
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %815, i8* %816, align 1, !tbaa !2447
  %817 = icmp eq i32 %798, 0
  %818 = zext i1 %817 to i8
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %818, i8* %819, align 1, !tbaa !2448
  %820 = lshr i32 %798, 31
  %821 = trunc i32 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %821, i8* %822, align 1, !tbaa !2449
  %823 = lshr i32 %795, 31
  %824 = lshr i32 %797, 31
  %825 = xor i32 %820, %823
  %826 = xor i32 %820, %824
  %827 = add nuw nsw i32 %825, %826
  %828 = icmp eq i32 %827, 2
  %829 = zext i1 %828 to i8
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %829, i8* %830, align 1, !tbaa !2450
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 40
  %833 = load i32, i32* %EAX
  %834 = zext i32 %833 to i64
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 3
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %832 to i32*
  store i32 %833, i32* %837
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 16
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RCX, align 8, !tbaa !2428
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 28
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %845 to i32*
  %849 = load i32, i32* %848
  %850 = sext i32 %849 to i64
  store i64 %850, i64* %RDX, align 8, !tbaa !2428
  %851 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %852 = load i64, i64* %RCX
  %853 = load i64, i64* %RDX
  %854 = mul i64 %853, 8
  %855 = add i64 %854, %852
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %855 to double*
  %859 = load double, double* %858
  %860 = bitcast i8* %851 to double*
  store double %859, double* %860, align 1, !tbaa !2452
  %861 = getelementptr inbounds i8, i8* %851, i64 8
  %862 = bitcast i8* %861 to double*
  store double 0.000000e+00, double* %862, align 1, !tbaa !2452
  %863 = load i64, i64* %RBP
  %864 = sub i64 %863, 16
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 4
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %864 to i64*
  %868 = load i64, i64* %867
  store i64 %868, i64* %RCX, align 8, !tbaa !2428
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 32
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 4
  store i64 %872, i64* %PC
  %873 = inttoptr i64 %870 to i32*
  %874 = load i32, i32* %873
  %875 = sext i32 %874 to i64
  store i64 %875, i64* %RDX, align 8, !tbaa !2428
  %876 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %877 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %878 = load i64, i64* %RCX
  %879 = load i64, i64* %RDX
  %880 = mul i64 %879, 8
  %881 = add i64 %880, %878
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 5
  store i64 %883, i64* %PC
  %884 = bitcast i8* %877 to double*
  %885 = load double, double* %884, align 1
  %886 = getelementptr inbounds i8, i8* %877, i64 8
  %887 = bitcast i8* %886 to i64*
  %888 = load i64, i64* %887, align 1
  %889 = inttoptr i64 %881 to double*
  %890 = load double, double* %889
  %891 = fadd double %885, %890
  %892 = bitcast i8* %876 to double*
  store double %891, double* %892, align 1, !tbaa !2452
  %893 = getelementptr inbounds i8, i8* %876, i64 8
  %894 = bitcast i8* %893 to i64*
  store i64 %888, i64* %894, align 1, !tbaa !2452
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 120
  %897 = bitcast %union.vec128_t* %XMM0 to i8*
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 5
  store i64 %899, i64* %PC
  %900 = bitcast i8* %897 to double*
  %901 = load double, double* %900, align 1
  %902 = inttoptr i64 %896 to double*
  store double %901, double* %902
  %903 = load i64, i64* %RBP
  %904 = sub i64 %903, 16
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 4
  store i64 %906, i64* %PC
  %907 = inttoptr i64 %904 to i64*
  %908 = load i64, i64* %907
  store i64 %908, i64* %RCX, align 8, !tbaa !2428
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 28
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 3
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i32*
  %914 = load i32, i32* %913
  %915 = zext i32 %914 to i64
  store i64 %915, i64* %RAX, align 8, !tbaa !2428
  %916 = load i64, i64* %RAX
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 3
  store i64 %918, i64* %PC
  %919 = trunc i64 %916 to i32
  %920 = add i32 1, %919
  %921 = zext i32 %920 to i64
  store i64 %921, i64* %RAX, align 8, !tbaa !2428
  %922 = icmp ult i32 %920, %919
  %923 = icmp ult i32 %920, 1
  %924 = or i1 %922, %923
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %925, i8* %926, align 1, !tbaa !2432
  %927 = and i32 %920, 255
  %928 = call i32 @llvm.ctpop.i32(i32 %927) #17
  %929 = trunc i32 %928 to i8
  %930 = and i8 %929, 1
  %931 = xor i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %931, i8* %932, align 1, !tbaa !2446
  %933 = xor i64 1, %916
  %934 = trunc i64 %933 to i32
  %935 = xor i32 %934, %920
  %936 = lshr i32 %935, 4
  %937 = trunc i32 %936 to i8
  %938 = and i8 %937, 1
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %938, i8* %939, align 1, !tbaa !2447
  %940 = icmp eq i32 %920, 0
  %941 = zext i1 %940 to i8
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %941, i8* %942, align 1, !tbaa !2448
  %943 = lshr i32 %920, 31
  %944 = trunc i32 %943 to i8
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %944, i8* %945, align 1, !tbaa !2449
  %946 = lshr i32 %919, 31
  %947 = xor i32 %943, %946
  %948 = add nuw nsw i32 %947, %943
  %949 = icmp eq i32 %948, 2
  %950 = zext i1 %949 to i8
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %950, i8* %951, align 1, !tbaa !2450
  %952 = load i32, i32* %EAX
  %953 = zext i32 %952 to i64
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 3
  store i64 %955, i64* %PC
  %956 = shl i64 %953, 32
  %957 = ashr exact i64 %956, 32
  store i64 %957, i64* %RDX, align 8, !tbaa !2428
  %958 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %959 = load i64, i64* %RCX
  %960 = load i64, i64* %RDX
  %961 = mul i64 %960, 8
  %962 = add i64 %961, %959
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 5
  store i64 %964, i64* %PC
  %965 = inttoptr i64 %962 to double*
  %966 = load double, double* %965
  %967 = bitcast i8* %958 to double*
  store double %966, double* %967, align 1, !tbaa !2452
  %968 = getelementptr inbounds i8, i8* %958, i64 8
  %969 = bitcast i8* %968 to double*
  store double 0.000000e+00, double* %969, align 1, !tbaa !2452
  %970 = load i64, i64* %RBP
  %971 = sub i64 %970, 16
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 4
  store i64 %973, i64* %PC
  %974 = inttoptr i64 %971 to i64*
  %975 = load i64, i64* %974
  store i64 %975, i64* %RCX, align 8, !tbaa !2428
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 32
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 3
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i32*
  %981 = load i32, i32* %980
  %982 = zext i32 %981 to i64
  store i64 %982, i64* %RAX, align 8, !tbaa !2428
  %983 = load i64, i64* %RAX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 3
  store i64 %985, i64* %PC
  %986 = trunc i64 %983 to i32
  %987 = add i32 1, %986
  %988 = zext i32 %987 to i64
  store i64 %988, i64* %RAX, align 8, !tbaa !2428
  %989 = icmp ult i32 %987, %986
  %990 = icmp ult i32 %987, 1
  %991 = or i1 %989, %990
  %992 = zext i1 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %992, i8* %993, align 1, !tbaa !2432
  %994 = and i32 %987, 255
  %995 = call i32 @llvm.ctpop.i32(i32 %994) #17
  %996 = trunc i32 %995 to i8
  %997 = and i8 %996, 1
  %998 = xor i8 %997, 1
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %998, i8* %999, align 1, !tbaa !2446
  %1000 = xor i64 1, %983
  %1001 = trunc i64 %1000 to i32
  %1002 = xor i32 %1001, %987
  %1003 = lshr i32 %1002, 4
  %1004 = trunc i32 %1003 to i8
  %1005 = and i8 %1004, 1
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1005, i8* %1006, align 1, !tbaa !2447
  %1007 = icmp eq i32 %987, 0
  %1008 = zext i1 %1007 to i8
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1008, i8* %1009, align 1, !tbaa !2448
  %1010 = lshr i32 %987, 31
  %1011 = trunc i32 %1010 to i8
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1011, i8* %1012, align 1, !tbaa !2449
  %1013 = lshr i32 %986, 31
  %1014 = xor i32 %1010, %1013
  %1015 = add nuw nsw i32 %1014, %1010
  %1016 = icmp eq i32 %1015, 2
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1017, i8* %1018, align 1, !tbaa !2450
  %1019 = load i32, i32* %EAX
  %1020 = zext i32 %1019 to i64
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 3
  store i64 %1022, i64* %PC
  %1023 = shl i64 %1020, 32
  %1024 = ashr exact i64 %1023, 32
  store i64 %1024, i64* %RDX, align 8, !tbaa !2428
  %1025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1026 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1027 = load i64, i64* %RCX
  %1028 = load i64, i64* %RDX
  %1029 = mul i64 %1028, 8
  %1030 = add i64 %1029, %1027
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = bitcast i8* %1026 to double*
  %1034 = load double, double* %1033, align 1
  %1035 = getelementptr inbounds i8, i8* %1026, i64 8
  %1036 = bitcast i8* %1035 to i64*
  %1037 = load i64, i64* %1036, align 1
  %1038 = inttoptr i64 %1030 to double*
  %1039 = load double, double* %1038
  %1040 = fadd double %1034, %1039
  %1041 = bitcast i8* %1025 to double*
  store double %1040, double* %1041, align 1, !tbaa !2452
  %1042 = getelementptr inbounds i8, i8* %1025, i64 8
  %1043 = bitcast i8* %1042 to i64*
  store i64 %1037, i64* %1043, align 1, !tbaa !2452
  %1044 = load i64, i64* %RBP
  %1045 = sub i64 %1044, 128
  %1046 = bitcast %union.vec128_t* %XMM0 to i8*
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 5
  store i64 %1048, i64* %PC
  %1049 = bitcast i8* %1046 to double*
  %1050 = load double, double* %1049, align 1
  %1051 = inttoptr i64 %1045 to double*
  store double %1050, double* %1051
  %1052 = load i64, i64* %RBP
  %1053 = sub i64 %1052, 16
  %1054 = load i64, i64* %PC
  %1055 = add i64 %1054, 4
  store i64 %1055, i64* %PC
  %1056 = inttoptr i64 %1053 to i64*
  %1057 = load i64, i64* %1056
  store i64 %1057, i64* %RCX, align 8, !tbaa !2428
  %1058 = load i64, i64* %RBP
  %1059 = sub i64 %1058, 28
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC
  %1062 = inttoptr i64 %1059 to i32*
  %1063 = load i32, i32* %1062
  %1064 = sext i32 %1063 to i64
  store i64 %1064, i64* %RDX, align 8, !tbaa !2428
  %1065 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1066 = load i64, i64* %RCX
  %1067 = load i64, i64* %RDX
  %1068 = mul i64 %1067, 8
  %1069 = add i64 %1068, %1066
  %1070 = load i64, i64* %PC
  %1071 = add i64 %1070, 5
  store i64 %1071, i64* %PC
  %1072 = inttoptr i64 %1069 to double*
  %1073 = load double, double* %1072
  %1074 = bitcast i8* %1065 to double*
  store double %1073, double* %1074, align 1, !tbaa !2452
  %1075 = getelementptr inbounds i8, i8* %1065, i64 8
  %1076 = bitcast i8* %1075 to double*
  store double 0.000000e+00, double* %1076, align 1, !tbaa !2452
  %1077 = load i64, i64* %RBP
  %1078 = sub i64 %1077, 16
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 4
  store i64 %1080, i64* %PC
  %1081 = inttoptr i64 %1078 to i64*
  %1082 = load i64, i64* %1081
  store i64 %1082, i64* %RCX, align 8, !tbaa !2428
  %1083 = load i64, i64* %RBP
  %1084 = sub i64 %1083, 32
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 4
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1084 to i32*
  %1088 = load i32, i32* %1087
  %1089 = sext i32 %1088 to i64
  store i64 %1089, i64* %RDX, align 8, !tbaa !2428
  %1090 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1091 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1092 = load i64, i64* %RCX
  %1093 = load i64, i64* %RDX
  %1094 = mul i64 %1093, 8
  %1095 = add i64 %1094, %1092
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 5
  store i64 %1097, i64* %PC
  %1098 = bitcast i8* %1091 to double*
  %1099 = load double, double* %1098, align 1
  %1100 = getelementptr inbounds i8, i8* %1091, i64 8
  %1101 = bitcast i8* %1100 to i64*
  %1102 = load i64, i64* %1101, align 1
  %1103 = inttoptr i64 %1095 to double*
  %1104 = load double, double* %1103
  %1105 = fsub double %1099, %1104
  %1106 = bitcast i8* %1090 to double*
  store double %1105, double* %1106, align 1, !tbaa !2452
  %1107 = getelementptr inbounds i8, i8* %1090, i64 8
  %1108 = bitcast i8* %1107 to i64*
  store i64 %1102, i64* %1108, align 1, !tbaa !2452
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 136
  %1111 = bitcast %union.vec128_t* %XMM0 to i8*
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 8
  store i64 %1113, i64* %PC
  %1114 = bitcast i8* %1111 to double*
  %1115 = load double, double* %1114, align 1
  %1116 = inttoptr i64 %1110 to double*
  store double %1115, double* %1116
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 16
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 4
  store i64 %1120, i64* %PC
  %1121 = inttoptr i64 %1118 to i64*
  %1122 = load i64, i64* %1121
  store i64 %1122, i64* %RCX, align 8, !tbaa !2428
  %1123 = load i64, i64* %RBP
  %1124 = sub i64 %1123, 28
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 3
  store i64 %1126, i64* %PC
  %1127 = inttoptr i64 %1124 to i32*
  %1128 = load i32, i32* %1127
  %1129 = zext i32 %1128 to i64
  store i64 %1129, i64* %RAX, align 8, !tbaa !2428
  %1130 = load i64, i64* %RAX
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 3
  store i64 %1132, i64* %PC
  %1133 = trunc i64 %1130 to i32
  %1134 = add i32 1, %1133
  %1135 = zext i32 %1134 to i64
  store i64 %1135, i64* %RAX, align 8, !tbaa !2428
  %1136 = icmp ult i32 %1134, %1133
  %1137 = icmp ult i32 %1134, 1
  %1138 = or i1 %1136, %1137
  %1139 = zext i1 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1139, i8* %1140, align 1, !tbaa !2432
  %1141 = and i32 %1134, 255
  %1142 = call i32 @llvm.ctpop.i32(i32 %1141) #17
  %1143 = trunc i32 %1142 to i8
  %1144 = and i8 %1143, 1
  %1145 = xor i8 %1144, 1
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1145, i8* %1146, align 1, !tbaa !2446
  %1147 = xor i64 1, %1130
  %1148 = trunc i64 %1147 to i32
  %1149 = xor i32 %1148, %1134
  %1150 = lshr i32 %1149, 4
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1152, i8* %1153, align 1, !tbaa !2447
  %1154 = icmp eq i32 %1134, 0
  %1155 = zext i1 %1154 to i8
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1155, i8* %1156, align 1, !tbaa !2448
  %1157 = lshr i32 %1134, 31
  %1158 = trunc i32 %1157 to i8
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1158, i8* %1159, align 1, !tbaa !2449
  %1160 = lshr i32 %1133, 31
  %1161 = xor i32 %1157, %1160
  %1162 = add nuw nsw i32 %1161, %1157
  %1163 = icmp eq i32 %1162, 2
  %1164 = zext i1 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1164, i8* %1165, align 1, !tbaa !2450
  %1166 = load i32, i32* %EAX
  %1167 = zext i32 %1166 to i64
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 3
  store i64 %1169, i64* %PC
  %1170 = shl i64 %1167, 32
  %1171 = ashr exact i64 %1170, 32
  store i64 %1171, i64* %RDX, align 8, !tbaa !2428
  %1172 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1173 = load i64, i64* %RCX
  %1174 = load i64, i64* %RDX
  %1175 = mul i64 %1174, 8
  %1176 = add i64 %1175, %1173
  %1177 = load i64, i64* %PC
  %1178 = add i64 %1177, 5
  store i64 %1178, i64* %PC
  %1179 = inttoptr i64 %1176 to double*
  %1180 = load double, double* %1179
  %1181 = bitcast i8* %1172 to double*
  store double %1180, double* %1181, align 1, !tbaa !2452
  %1182 = getelementptr inbounds i8, i8* %1172, i64 8
  %1183 = bitcast i8* %1182 to double*
  store double 0.000000e+00, double* %1183, align 1, !tbaa !2452
  %1184 = load i64, i64* %RBP
  %1185 = sub i64 %1184, 16
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 4
  store i64 %1187, i64* %PC
  %1188 = inttoptr i64 %1185 to i64*
  %1189 = load i64, i64* %1188
  store i64 %1189, i64* %RCX, align 8, !tbaa !2428
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 32
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 3
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i32*
  %1195 = load i32, i32* %1194
  %1196 = zext i32 %1195 to i64
  store i64 %1196, i64* %RAX, align 8, !tbaa !2428
  %1197 = load i64, i64* %RAX
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 3
  store i64 %1199, i64* %PC
  %1200 = trunc i64 %1197 to i32
  %1201 = add i32 1, %1200
  %1202 = zext i32 %1201 to i64
  store i64 %1202, i64* %RAX, align 8, !tbaa !2428
  %1203 = icmp ult i32 %1201, %1200
  %1204 = icmp ult i32 %1201, 1
  %1205 = or i1 %1203, %1204
  %1206 = zext i1 %1205 to i8
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1206, i8* %1207, align 1, !tbaa !2432
  %1208 = and i32 %1201, 255
  %1209 = call i32 @llvm.ctpop.i32(i32 %1208) #17
  %1210 = trunc i32 %1209 to i8
  %1211 = and i8 %1210, 1
  %1212 = xor i8 %1211, 1
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1212, i8* %1213, align 1, !tbaa !2446
  %1214 = xor i64 1, %1197
  %1215 = trunc i64 %1214 to i32
  %1216 = xor i32 %1215, %1201
  %1217 = lshr i32 %1216, 4
  %1218 = trunc i32 %1217 to i8
  %1219 = and i8 %1218, 1
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1219, i8* %1220, align 1, !tbaa !2447
  %1221 = icmp eq i32 %1201, 0
  %1222 = zext i1 %1221 to i8
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1222, i8* %1223, align 1, !tbaa !2448
  %1224 = lshr i32 %1201, 31
  %1225 = trunc i32 %1224 to i8
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1225, i8* %1226, align 1, !tbaa !2449
  %1227 = lshr i32 %1200, 31
  %1228 = xor i32 %1224, %1227
  %1229 = add nuw nsw i32 %1228, %1224
  %1230 = icmp eq i32 %1229, 2
  %1231 = zext i1 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1231, i8* %1232, align 1, !tbaa !2450
  %1233 = load i32, i32* %EAX
  %1234 = zext i32 %1233 to i64
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 3
  store i64 %1236, i64* %PC
  %1237 = shl i64 %1234, 32
  %1238 = ashr exact i64 %1237, 32
  store i64 %1238, i64* %RDX, align 8, !tbaa !2428
  %1239 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1240 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1241 = load i64, i64* %RCX
  %1242 = load i64, i64* %RDX
  %1243 = mul i64 %1242, 8
  %1244 = add i64 %1243, %1241
  %1245 = load i64, i64* %PC
  %1246 = add i64 %1245, 5
  store i64 %1246, i64* %PC
  %1247 = bitcast i8* %1240 to double*
  %1248 = load double, double* %1247, align 1
  %1249 = getelementptr inbounds i8, i8* %1240, i64 8
  %1250 = bitcast i8* %1249 to i64*
  %1251 = load i64, i64* %1250, align 1
  %1252 = inttoptr i64 %1244 to double*
  %1253 = load double, double* %1252
  %1254 = fsub double %1248, %1253
  %1255 = bitcast i8* %1239 to double*
  store double %1254, double* %1255, align 1, !tbaa !2452
  %1256 = getelementptr inbounds i8, i8* %1239, i64 8
  %1257 = bitcast i8* %1256 to i64*
  store i64 %1251, i64* %1257, align 1, !tbaa !2452
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 144
  %1260 = bitcast %union.vec128_t* %XMM0 to i8*
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 8
  store i64 %1262, i64* %PC
  %1263 = bitcast i8* %1260 to double*
  %1264 = load double, double* %1263, align 1
  %1265 = inttoptr i64 %1259 to double*
  store double %1264, double* %1265
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 16
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 4
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i64*
  %1271 = load i64, i64* %1270
  store i64 %1271, i64* %RCX, align 8, !tbaa !2428
  %1272 = load i64, i64* %RBP
  %1273 = sub i64 %1272, 36
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 4
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1273 to i32*
  %1277 = load i32, i32* %1276
  %1278 = sext i32 %1277 to i64
  store i64 %1278, i64* %RDX, align 8, !tbaa !2428
  %1279 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1280 = load i64, i64* %RCX
  %1281 = load i64, i64* %RDX
  %1282 = mul i64 %1281, 8
  %1283 = add i64 %1282, %1280
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 5
  store i64 %1285, i64* %PC
  %1286 = inttoptr i64 %1283 to double*
  %1287 = load double, double* %1286
  %1288 = bitcast i8* %1279 to double*
  store double %1287, double* %1288, align 1, !tbaa !2452
  %1289 = getelementptr inbounds i8, i8* %1279, i64 8
  %1290 = bitcast i8* %1289 to double*
  store double 0.000000e+00, double* %1290, align 1, !tbaa !2452
  %1291 = load i64, i64* %RBP
  %1292 = sub i64 %1291, 16
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 4
  store i64 %1294, i64* %PC
  %1295 = inttoptr i64 %1292 to i64*
  %1296 = load i64, i64* %1295
  store i64 %1296, i64* %RCX, align 8, !tbaa !2428
  %1297 = load i64, i64* %RBP
  %1298 = sub i64 %1297, 40
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 4
  store i64 %1300, i64* %PC
  %1301 = inttoptr i64 %1298 to i32*
  %1302 = load i32, i32* %1301
  %1303 = sext i32 %1302 to i64
  store i64 %1303, i64* %RDX, align 8, !tbaa !2428
  %1304 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1305 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1306 = load i64, i64* %RCX
  %1307 = load i64, i64* %RDX
  %1308 = mul i64 %1307, 8
  %1309 = add i64 %1308, %1306
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 5
  store i64 %1311, i64* %PC
  %1312 = bitcast i8* %1305 to double*
  %1313 = load double, double* %1312, align 1
  %1314 = getelementptr inbounds i8, i8* %1305, i64 8
  %1315 = bitcast i8* %1314 to i64*
  %1316 = load i64, i64* %1315, align 1
  %1317 = inttoptr i64 %1309 to double*
  %1318 = load double, double* %1317
  %1319 = fadd double %1313, %1318
  %1320 = bitcast i8* %1304 to double*
  store double %1319, double* %1320, align 1, !tbaa !2452
  %1321 = getelementptr inbounds i8, i8* %1304, i64 8
  %1322 = bitcast i8* %1321 to i64*
  store i64 %1316, i64* %1322, align 1, !tbaa !2452
  %1323 = load i64, i64* %RBP
  %1324 = sub i64 %1323, 152
  %1325 = bitcast %union.vec128_t* %XMM0 to i8*
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 8
  store i64 %1327, i64* %PC
  %1328 = bitcast i8* %1325 to double*
  %1329 = load double, double* %1328, align 1
  %1330 = inttoptr i64 %1324 to double*
  store double %1329, double* %1330
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 16
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 4
  store i64 %1334, i64* %PC
  %1335 = inttoptr i64 %1332 to i64*
  %1336 = load i64, i64* %1335
  store i64 %1336, i64* %RCX, align 8, !tbaa !2428
  %1337 = load i64, i64* %RBP
  %1338 = sub i64 %1337, 36
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 3
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1338 to i32*
  %1342 = load i32, i32* %1341
  %1343 = zext i32 %1342 to i64
  store i64 %1343, i64* %RAX, align 8, !tbaa !2428
  %1344 = load i64, i64* %RAX
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 3
  store i64 %1346, i64* %PC
  %1347 = trunc i64 %1344 to i32
  %1348 = add i32 1, %1347
  %1349 = zext i32 %1348 to i64
  store i64 %1349, i64* %RAX, align 8, !tbaa !2428
  %1350 = icmp ult i32 %1348, %1347
  %1351 = icmp ult i32 %1348, 1
  %1352 = or i1 %1350, %1351
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1353, i8* %1354, align 1, !tbaa !2432
  %1355 = and i32 %1348, 255
  %1356 = call i32 @llvm.ctpop.i32(i32 %1355) #17
  %1357 = trunc i32 %1356 to i8
  %1358 = and i8 %1357, 1
  %1359 = xor i8 %1358, 1
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1359, i8* %1360, align 1, !tbaa !2446
  %1361 = xor i64 1, %1344
  %1362 = trunc i64 %1361 to i32
  %1363 = xor i32 %1362, %1348
  %1364 = lshr i32 %1363, 4
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1366, i8* %1367, align 1, !tbaa !2447
  %1368 = icmp eq i32 %1348, 0
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1369, i8* %1370, align 1, !tbaa !2448
  %1371 = lshr i32 %1348, 31
  %1372 = trunc i32 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1372, i8* %1373, align 1, !tbaa !2449
  %1374 = lshr i32 %1347, 31
  %1375 = xor i32 %1371, %1374
  %1376 = add nuw nsw i32 %1375, %1371
  %1377 = icmp eq i32 %1376, 2
  %1378 = zext i1 %1377 to i8
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1378, i8* %1379, align 1, !tbaa !2450
  %1380 = load i32, i32* %EAX
  %1381 = zext i32 %1380 to i64
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 3
  store i64 %1383, i64* %PC
  %1384 = shl i64 %1381, 32
  %1385 = ashr exact i64 %1384, 32
  store i64 %1385, i64* %RDX, align 8, !tbaa !2428
  %1386 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1387 = load i64, i64* %RCX
  %1388 = load i64, i64* %RDX
  %1389 = mul i64 %1388, 8
  %1390 = add i64 %1389, %1387
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 5
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1390 to double*
  %1394 = load double, double* %1393
  %1395 = bitcast i8* %1386 to double*
  store double %1394, double* %1395, align 1, !tbaa !2452
  %1396 = getelementptr inbounds i8, i8* %1386, i64 8
  %1397 = bitcast i8* %1396 to double*
  store double 0.000000e+00, double* %1397, align 1, !tbaa !2452
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 16
  %1400 = load i64, i64* %PC
  %1401 = add i64 %1400, 4
  store i64 %1401, i64* %PC
  %1402 = inttoptr i64 %1399 to i64*
  %1403 = load i64, i64* %1402
  store i64 %1403, i64* %RCX, align 8, !tbaa !2428
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 40
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 3
  store i64 %1407, i64* %PC
  %1408 = inttoptr i64 %1405 to i32*
  %1409 = load i32, i32* %1408
  %1410 = zext i32 %1409 to i64
  store i64 %1410, i64* %RAX, align 8, !tbaa !2428
  %1411 = load i64, i64* %RAX
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 3
  store i64 %1413, i64* %PC
  %1414 = trunc i64 %1411 to i32
  %1415 = add i32 1, %1414
  %1416 = zext i32 %1415 to i64
  store i64 %1416, i64* %RAX, align 8, !tbaa !2428
  %1417 = icmp ult i32 %1415, %1414
  %1418 = icmp ult i32 %1415, 1
  %1419 = or i1 %1417, %1418
  %1420 = zext i1 %1419 to i8
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1420, i8* %1421, align 1, !tbaa !2432
  %1422 = and i32 %1415, 255
  %1423 = call i32 @llvm.ctpop.i32(i32 %1422) #17
  %1424 = trunc i32 %1423 to i8
  %1425 = and i8 %1424, 1
  %1426 = xor i8 %1425, 1
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1426, i8* %1427, align 1, !tbaa !2446
  %1428 = xor i64 1, %1411
  %1429 = trunc i64 %1428 to i32
  %1430 = xor i32 %1429, %1415
  %1431 = lshr i32 %1430, 4
  %1432 = trunc i32 %1431 to i8
  %1433 = and i8 %1432, 1
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1433, i8* %1434, align 1, !tbaa !2447
  %1435 = icmp eq i32 %1415, 0
  %1436 = zext i1 %1435 to i8
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1436, i8* %1437, align 1, !tbaa !2448
  %1438 = lshr i32 %1415, 31
  %1439 = trunc i32 %1438 to i8
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1439, i8* %1440, align 1, !tbaa !2449
  %1441 = lshr i32 %1414, 31
  %1442 = xor i32 %1438, %1441
  %1443 = add nuw nsw i32 %1442, %1438
  %1444 = icmp eq i32 %1443, 2
  %1445 = zext i1 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1445, i8* %1446, align 1, !tbaa !2450
  %1447 = load i32, i32* %EAX
  %1448 = zext i32 %1447 to i64
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 3
  store i64 %1450, i64* %PC
  %1451 = shl i64 %1448, 32
  %1452 = ashr exact i64 %1451, 32
  store i64 %1452, i64* %RDX, align 8, !tbaa !2428
  %1453 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1454 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1455 = load i64, i64* %RCX
  %1456 = load i64, i64* %RDX
  %1457 = mul i64 %1456, 8
  %1458 = add i64 %1457, %1455
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 5
  store i64 %1460, i64* %PC
  %1461 = bitcast i8* %1454 to double*
  %1462 = load double, double* %1461, align 1
  %1463 = getelementptr inbounds i8, i8* %1454, i64 8
  %1464 = bitcast i8* %1463 to i64*
  %1465 = load i64, i64* %1464, align 1
  %1466 = inttoptr i64 %1458 to double*
  %1467 = load double, double* %1466
  %1468 = fadd double %1462, %1467
  %1469 = bitcast i8* %1453 to double*
  store double %1468, double* %1469, align 1, !tbaa !2452
  %1470 = getelementptr inbounds i8, i8* %1453, i64 8
  %1471 = bitcast i8* %1470 to i64*
  store i64 %1465, i64* %1471, align 1, !tbaa !2452
  %1472 = load i64, i64* %RBP
  %1473 = sub i64 %1472, 160
  %1474 = bitcast %union.vec128_t* %XMM0 to i8*
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 8
  store i64 %1476, i64* %PC
  %1477 = bitcast i8* %1474 to double*
  %1478 = load double, double* %1477, align 1
  %1479 = inttoptr i64 %1473 to double*
  store double %1478, double* %1479
  %1480 = load i64, i64* %RBP
  %1481 = sub i64 %1480, 16
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 4
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i64*
  %1485 = load i64, i64* %1484
  store i64 %1485, i64* %RCX, align 8, !tbaa !2428
  %1486 = load i64, i64* %RBP
  %1487 = sub i64 %1486, 36
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 4
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1487 to i32*
  %1491 = load i32, i32* %1490
  %1492 = sext i32 %1491 to i64
  store i64 %1492, i64* %RDX, align 8, !tbaa !2428
  %1493 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1494 = load i64, i64* %RCX
  %1495 = load i64, i64* %RDX
  %1496 = mul i64 %1495, 8
  %1497 = add i64 %1496, %1494
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 5
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1497 to double*
  %1501 = load double, double* %1500
  %1502 = bitcast i8* %1493 to double*
  store double %1501, double* %1502, align 1, !tbaa !2452
  %1503 = getelementptr inbounds i8, i8* %1493, i64 8
  %1504 = bitcast i8* %1503 to double*
  store double 0.000000e+00, double* %1504, align 1, !tbaa !2452
  %1505 = load i64, i64* %RBP
  %1506 = sub i64 %1505, 16
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 4
  store i64 %1508, i64* %PC
  %1509 = inttoptr i64 %1506 to i64*
  %1510 = load i64, i64* %1509
  store i64 %1510, i64* %RCX, align 8, !tbaa !2428
  %1511 = load i64, i64* %RBP
  %1512 = sub i64 %1511, 40
  %1513 = load i64, i64* %PC
  %1514 = add i64 %1513, 4
  store i64 %1514, i64* %PC
  %1515 = inttoptr i64 %1512 to i32*
  %1516 = load i32, i32* %1515
  %1517 = sext i32 %1516 to i64
  store i64 %1517, i64* %RDX, align 8, !tbaa !2428
  %1518 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1519 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1520 = load i64, i64* %RCX
  %1521 = load i64, i64* %RDX
  %1522 = mul i64 %1521, 8
  %1523 = add i64 %1522, %1520
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  store i64 %1525, i64* %PC
  %1526 = bitcast i8* %1519 to double*
  %1527 = load double, double* %1526, align 1
  %1528 = getelementptr inbounds i8, i8* %1519, i64 8
  %1529 = bitcast i8* %1528 to i64*
  %1530 = load i64, i64* %1529, align 1
  %1531 = inttoptr i64 %1523 to double*
  %1532 = load double, double* %1531
  %1533 = fsub double %1527, %1532
  %1534 = bitcast i8* %1518 to double*
  store double %1533, double* %1534, align 1, !tbaa !2452
  %1535 = getelementptr inbounds i8, i8* %1518, i64 8
  %1536 = bitcast i8* %1535 to i64*
  store i64 %1530, i64* %1536, align 1, !tbaa !2452
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 168
  %1539 = bitcast %union.vec128_t* %XMM0 to i8*
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 8
  store i64 %1541, i64* %PC
  %1542 = bitcast i8* %1539 to double*
  %1543 = load double, double* %1542, align 1
  %1544 = inttoptr i64 %1538 to double*
  store double %1543, double* %1544
  %1545 = load i64, i64* %RBP
  %1546 = sub i64 %1545, 16
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 4
  store i64 %1548, i64* %PC
  %1549 = inttoptr i64 %1546 to i64*
  %1550 = load i64, i64* %1549
  store i64 %1550, i64* %RCX, align 8, !tbaa !2428
  %1551 = load i64, i64* %RBP
  %1552 = sub i64 %1551, 36
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 3
  store i64 %1554, i64* %PC
  %1555 = inttoptr i64 %1552 to i32*
  %1556 = load i32, i32* %1555
  %1557 = zext i32 %1556 to i64
  store i64 %1557, i64* %RAX, align 8, !tbaa !2428
  %1558 = load i64, i64* %RAX
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 3
  store i64 %1560, i64* %PC
  %1561 = trunc i64 %1558 to i32
  %1562 = add i32 1, %1561
  %1563 = zext i32 %1562 to i64
  store i64 %1563, i64* %RAX, align 8, !tbaa !2428
  %1564 = icmp ult i32 %1562, %1561
  %1565 = icmp ult i32 %1562, 1
  %1566 = or i1 %1564, %1565
  %1567 = zext i1 %1566 to i8
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1567, i8* %1568, align 1, !tbaa !2432
  %1569 = and i32 %1562, 255
  %1570 = call i32 @llvm.ctpop.i32(i32 %1569) #17
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = xor i8 %1572, 1
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1573, i8* %1574, align 1, !tbaa !2446
  %1575 = xor i64 1, %1558
  %1576 = trunc i64 %1575 to i32
  %1577 = xor i32 %1576, %1562
  %1578 = lshr i32 %1577, 4
  %1579 = trunc i32 %1578 to i8
  %1580 = and i8 %1579, 1
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1580, i8* %1581, align 1, !tbaa !2447
  %1582 = icmp eq i32 %1562, 0
  %1583 = zext i1 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1583, i8* %1584, align 1, !tbaa !2448
  %1585 = lshr i32 %1562, 31
  %1586 = trunc i32 %1585 to i8
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1586, i8* %1587, align 1, !tbaa !2449
  %1588 = lshr i32 %1561, 31
  %1589 = xor i32 %1585, %1588
  %1590 = add nuw nsw i32 %1589, %1585
  %1591 = icmp eq i32 %1590, 2
  %1592 = zext i1 %1591 to i8
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1592, i8* %1593, align 1, !tbaa !2450
  %1594 = load i32, i32* %EAX
  %1595 = zext i32 %1594 to i64
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 3
  store i64 %1597, i64* %PC
  %1598 = shl i64 %1595, 32
  %1599 = ashr exact i64 %1598, 32
  store i64 %1599, i64* %RDX, align 8, !tbaa !2428
  %1600 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1601 = load i64, i64* %RCX
  %1602 = load i64, i64* %RDX
  %1603 = mul i64 %1602, 8
  %1604 = add i64 %1603, %1601
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 5
  store i64 %1606, i64* %PC
  %1607 = inttoptr i64 %1604 to double*
  %1608 = load double, double* %1607
  %1609 = bitcast i8* %1600 to double*
  store double %1608, double* %1609, align 1, !tbaa !2452
  %1610 = getelementptr inbounds i8, i8* %1600, i64 8
  %1611 = bitcast i8* %1610 to double*
  store double 0.000000e+00, double* %1611, align 1, !tbaa !2452
  %1612 = load i64, i64* %RBP
  %1613 = sub i64 %1612, 16
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 4
  store i64 %1615, i64* %PC
  %1616 = inttoptr i64 %1613 to i64*
  %1617 = load i64, i64* %1616
  store i64 %1617, i64* %RCX, align 8, !tbaa !2428
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 40
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 3
  store i64 %1621, i64* %PC
  %1622 = inttoptr i64 %1619 to i32*
  %1623 = load i32, i32* %1622
  %1624 = zext i32 %1623 to i64
  store i64 %1624, i64* %RAX, align 8, !tbaa !2428
  %1625 = load i64, i64* %RAX
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 3
  store i64 %1627, i64* %PC
  %1628 = trunc i64 %1625 to i32
  %1629 = add i32 1, %1628
  %1630 = zext i32 %1629 to i64
  store i64 %1630, i64* %RAX, align 8, !tbaa !2428
  %1631 = icmp ult i32 %1629, %1628
  %1632 = icmp ult i32 %1629, 1
  %1633 = or i1 %1631, %1632
  %1634 = zext i1 %1633 to i8
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1634, i8* %1635, align 1, !tbaa !2432
  %1636 = and i32 %1629, 255
  %1637 = call i32 @llvm.ctpop.i32(i32 %1636) #17
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  %1640 = xor i8 %1639, 1
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1640, i8* %1641, align 1, !tbaa !2446
  %1642 = xor i64 1, %1625
  %1643 = trunc i64 %1642 to i32
  %1644 = xor i32 %1643, %1629
  %1645 = lshr i32 %1644, 4
  %1646 = trunc i32 %1645 to i8
  %1647 = and i8 %1646, 1
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1647, i8* %1648, align 1, !tbaa !2447
  %1649 = icmp eq i32 %1629, 0
  %1650 = zext i1 %1649 to i8
  %1651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1650, i8* %1651, align 1, !tbaa !2448
  %1652 = lshr i32 %1629, 31
  %1653 = trunc i32 %1652 to i8
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1653, i8* %1654, align 1, !tbaa !2449
  %1655 = lshr i32 %1628, 31
  %1656 = xor i32 %1652, %1655
  %1657 = add nuw nsw i32 %1656, %1652
  %1658 = icmp eq i32 %1657, 2
  %1659 = zext i1 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1659, i8* %1660, align 1, !tbaa !2450
  %1661 = load i32, i32* %EAX
  %1662 = zext i32 %1661 to i64
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 3
  store i64 %1664, i64* %PC
  %1665 = shl i64 %1662, 32
  %1666 = ashr exact i64 %1665, 32
  store i64 %1666, i64* %RDX, align 8, !tbaa !2428
  %1667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1668 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1669 = load i64, i64* %RCX
  %1670 = load i64, i64* %RDX
  %1671 = mul i64 %1670, 8
  %1672 = add i64 %1671, %1669
  %1673 = load i64, i64* %PC
  %1674 = add i64 %1673, 5
  store i64 %1674, i64* %PC
  %1675 = bitcast i8* %1668 to double*
  %1676 = load double, double* %1675, align 1
  %1677 = getelementptr inbounds i8, i8* %1668, i64 8
  %1678 = bitcast i8* %1677 to i64*
  %1679 = load i64, i64* %1678, align 1
  %1680 = inttoptr i64 %1672 to double*
  %1681 = load double, double* %1680
  %1682 = fsub double %1676, %1681
  %1683 = bitcast i8* %1667 to double*
  store double %1682, double* %1683, align 1, !tbaa !2452
  %1684 = getelementptr inbounds i8, i8* %1667, i64 8
  %1685 = bitcast i8* %1684 to i64*
  store i64 %1679, i64* %1685, align 1, !tbaa !2452
  %1686 = load i64, i64* %RBP
  %1687 = sub i64 %1686, 176
  %1688 = bitcast %union.vec128_t* %XMM0 to i8*
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 8
  store i64 %1690, i64* %PC
  %1691 = bitcast i8* %1688 to double*
  %1692 = load double, double* %1691, align 1
  %1693 = inttoptr i64 %1687 to double*
  store double %1692, double* %1693
  %1694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 120
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 5
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to double*
  %1700 = load double, double* %1699
  %1701 = bitcast i8* %1694 to double*
  store double %1700, double* %1701, align 1, !tbaa !2452
  %1702 = getelementptr inbounds i8, i8* %1694, i64 8
  %1703 = bitcast i8* %1702 to double*
  store double 0.000000e+00, double* %1703, align 1, !tbaa !2452
  %1704 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1705 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1706 = load i64, i64* %RBP
  %1707 = sub i64 %1706, 152
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 8
  store i64 %1709, i64* %PC
  %1710 = bitcast i8* %1705 to double*
  %1711 = load double, double* %1710, align 1
  %1712 = getelementptr inbounds i8, i8* %1705, i64 8
  %1713 = bitcast i8* %1712 to i64*
  %1714 = load i64, i64* %1713, align 1
  %1715 = inttoptr i64 %1707 to double*
  %1716 = load double, double* %1715
  %1717 = fadd double %1711, %1716
  %1718 = bitcast i8* %1704 to double*
  store double %1717, double* %1718, align 1, !tbaa !2452
  %1719 = getelementptr inbounds i8, i8* %1704, i64 8
  %1720 = bitcast i8* %1719 to i64*
  store i64 %1714, i64* %1720, align 1, !tbaa !2452
  %1721 = load i64, i64* %RBP
  %1722 = sub i64 %1721, 16
  %1723 = load i64, i64* %PC
  %1724 = add i64 %1723, 4
  store i64 %1724, i64* %PC
  %1725 = inttoptr i64 %1722 to i64*
  %1726 = load i64, i64* %1725
  store i64 %1726, i64* %RCX, align 8, !tbaa !2428
  %1727 = load i64, i64* %RBP
  %1728 = sub i64 %1727, 28
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 4
  store i64 %1730, i64* %PC
  %1731 = inttoptr i64 %1728 to i32*
  %1732 = load i32, i32* %1731
  %1733 = sext i32 %1732 to i64
  store i64 %1733, i64* %RDX, align 8, !tbaa !2428
  %1734 = load i64, i64* %RCX
  %1735 = load i64, i64* %RDX
  %1736 = mul i64 %1735, 8
  %1737 = add i64 %1736, %1734
  %1738 = bitcast %union.vec128_t* %XMM0 to i8*
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 5
  store i64 %1740, i64* %PC
  %1741 = bitcast i8* %1738 to double*
  %1742 = load double, double* %1741, align 1
  %1743 = inttoptr i64 %1737 to double*
  store double %1742, double* %1743
  %1744 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1745 = load i64, i64* %RBP
  %1746 = sub i64 %1745, 128
  %1747 = load i64, i64* %PC
  %1748 = add i64 %1747, 5
  store i64 %1748, i64* %PC
  %1749 = inttoptr i64 %1746 to double*
  %1750 = load double, double* %1749
  %1751 = bitcast i8* %1744 to double*
  store double %1750, double* %1751, align 1, !tbaa !2452
  %1752 = getelementptr inbounds i8, i8* %1744, i64 8
  %1753 = bitcast i8* %1752 to double*
  store double 0.000000e+00, double* %1753, align 1, !tbaa !2452
  %1754 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1755 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1756 = load i64, i64* %RBP
  %1757 = sub i64 %1756, 160
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 8
  store i64 %1759, i64* %PC
  %1760 = bitcast i8* %1755 to double*
  %1761 = load double, double* %1760, align 1
  %1762 = getelementptr inbounds i8, i8* %1755, i64 8
  %1763 = bitcast i8* %1762 to i64*
  %1764 = load i64, i64* %1763, align 1
  %1765 = inttoptr i64 %1757 to double*
  %1766 = load double, double* %1765
  %1767 = fadd double %1761, %1766
  %1768 = bitcast i8* %1754 to double*
  store double %1767, double* %1768, align 1, !tbaa !2452
  %1769 = getelementptr inbounds i8, i8* %1754, i64 8
  %1770 = bitcast i8* %1769 to i64*
  store i64 %1764, i64* %1770, align 1, !tbaa !2452
  %1771 = load i64, i64* %RBP
  %1772 = sub i64 %1771, 16
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 4
  store i64 %1774, i64* %PC
  %1775 = inttoptr i64 %1772 to i64*
  %1776 = load i64, i64* %1775
  store i64 %1776, i64* %RCX, align 8, !tbaa !2428
  %1777 = load i64, i64* %RBP
  %1778 = sub i64 %1777, 28
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 3
  store i64 %1780, i64* %PC
  %1781 = inttoptr i64 %1778 to i32*
  %1782 = load i32, i32* %1781
  %1783 = zext i32 %1782 to i64
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = load i64, i64* %RAX
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 3
  store i64 %1786, i64* %PC
  %1787 = trunc i64 %1784 to i32
  %1788 = add i32 1, %1787
  %1789 = zext i32 %1788 to i64
  store i64 %1789, i64* %RAX, align 8, !tbaa !2428
  %1790 = icmp ult i32 %1788, %1787
  %1791 = icmp ult i32 %1788, 1
  %1792 = or i1 %1790, %1791
  %1793 = zext i1 %1792 to i8
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1793, i8* %1794, align 1, !tbaa !2432
  %1795 = and i32 %1788, 255
  %1796 = call i32 @llvm.ctpop.i32(i32 %1795) #17
  %1797 = trunc i32 %1796 to i8
  %1798 = and i8 %1797, 1
  %1799 = xor i8 %1798, 1
  %1800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1799, i8* %1800, align 1, !tbaa !2446
  %1801 = xor i64 1, %1784
  %1802 = trunc i64 %1801 to i32
  %1803 = xor i32 %1802, %1788
  %1804 = lshr i32 %1803, 4
  %1805 = trunc i32 %1804 to i8
  %1806 = and i8 %1805, 1
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1806, i8* %1807, align 1, !tbaa !2447
  %1808 = icmp eq i32 %1788, 0
  %1809 = zext i1 %1808 to i8
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1809, i8* %1810, align 1, !tbaa !2448
  %1811 = lshr i32 %1788, 31
  %1812 = trunc i32 %1811 to i8
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1812, i8* %1813, align 1, !tbaa !2449
  %1814 = lshr i32 %1787, 31
  %1815 = xor i32 %1811, %1814
  %1816 = add nuw nsw i32 %1815, %1811
  %1817 = icmp eq i32 %1816, 2
  %1818 = zext i1 %1817 to i8
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1818, i8* %1819, align 1, !tbaa !2450
  %1820 = load i32, i32* %EAX
  %1821 = zext i32 %1820 to i64
  %1822 = load i64, i64* %PC
  %1823 = add i64 %1822, 3
  store i64 %1823, i64* %PC
  %1824 = shl i64 %1821, 32
  %1825 = ashr exact i64 %1824, 32
  store i64 %1825, i64* %RDX, align 8, !tbaa !2428
  %1826 = load i64, i64* %RCX
  %1827 = load i64, i64* %RDX
  %1828 = mul i64 %1827, 8
  %1829 = add i64 %1828, %1826
  %1830 = bitcast %union.vec128_t* %XMM0 to i8*
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 5
  store i64 %1832, i64* %PC
  %1833 = bitcast i8* %1830 to double*
  %1834 = load double, double* %1833, align 1
  %1835 = inttoptr i64 %1829 to double*
  store double %1834, double* %1835
  %1836 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1837 = load i64, i64* %RBP
  %1838 = sub i64 %1837, 120
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 5
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to double*
  %1842 = load double, double* %1841
  %1843 = bitcast i8* %1836 to double*
  store double %1842, double* %1843, align 1, !tbaa !2452
  %1844 = getelementptr inbounds i8, i8* %1836, i64 8
  %1845 = bitcast i8* %1844 to double*
  store double 0.000000e+00, double* %1845, align 1, !tbaa !2452
  %1846 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1847 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1848 = load i64, i64* %RBP
  %1849 = sub i64 %1848, 152
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 8
  store i64 %1851, i64* %PC
  %1852 = bitcast i8* %1847 to double*
  %1853 = load double, double* %1852, align 1
  %1854 = getelementptr inbounds i8, i8* %1847, i64 8
  %1855 = bitcast i8* %1854 to i64*
  %1856 = load i64, i64* %1855, align 1
  %1857 = inttoptr i64 %1849 to double*
  %1858 = load double, double* %1857
  %1859 = fsub double %1853, %1858
  %1860 = bitcast i8* %1846 to double*
  store double %1859, double* %1860, align 1, !tbaa !2452
  %1861 = getelementptr inbounds i8, i8* %1846, i64 8
  %1862 = bitcast i8* %1861 to i64*
  store i64 %1856, i64* %1862, align 1, !tbaa !2452
  %1863 = load i64, i64* %RBP
  %1864 = sub i64 %1863, 16
  %1865 = load i64, i64* %PC
  %1866 = add i64 %1865, 4
  store i64 %1866, i64* %PC
  %1867 = inttoptr i64 %1864 to i64*
  %1868 = load i64, i64* %1867
  store i64 %1868, i64* %RCX, align 8, !tbaa !2428
  %1869 = load i64, i64* %RBP
  %1870 = sub i64 %1869, 36
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 4
  store i64 %1872, i64* %PC
  %1873 = inttoptr i64 %1870 to i32*
  %1874 = load i32, i32* %1873
  %1875 = sext i32 %1874 to i64
  store i64 %1875, i64* %RDX, align 8, !tbaa !2428
  %1876 = load i64, i64* %RCX
  %1877 = load i64, i64* %RDX
  %1878 = mul i64 %1877, 8
  %1879 = add i64 %1878, %1876
  %1880 = bitcast %union.vec128_t* %XMM0 to i8*
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 5
  store i64 %1882, i64* %PC
  %1883 = bitcast i8* %1880 to double*
  %1884 = load double, double* %1883, align 1
  %1885 = inttoptr i64 %1879 to double*
  store double %1884, double* %1885
  %1886 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1887 = load i64, i64* %RBP
  %1888 = sub i64 %1887, 128
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 5
  store i64 %1890, i64* %PC
  %1891 = inttoptr i64 %1888 to double*
  %1892 = load double, double* %1891
  %1893 = bitcast i8* %1886 to double*
  store double %1892, double* %1893, align 1, !tbaa !2452
  %1894 = getelementptr inbounds i8, i8* %1886, i64 8
  %1895 = bitcast i8* %1894 to double*
  store double 0.000000e+00, double* %1895, align 1, !tbaa !2452
  %1896 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1897 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1898 = load i64, i64* %RBP
  %1899 = sub i64 %1898, 160
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 8
  store i64 %1901, i64* %PC
  %1902 = bitcast i8* %1897 to double*
  %1903 = load double, double* %1902, align 1
  %1904 = getelementptr inbounds i8, i8* %1897, i64 8
  %1905 = bitcast i8* %1904 to i64*
  %1906 = load i64, i64* %1905, align 1
  %1907 = inttoptr i64 %1899 to double*
  %1908 = load double, double* %1907
  %1909 = fsub double %1903, %1908
  %1910 = bitcast i8* %1896 to double*
  store double %1909, double* %1910, align 1, !tbaa !2452
  %1911 = getelementptr inbounds i8, i8* %1896, i64 8
  %1912 = bitcast i8* %1911 to i64*
  store i64 %1906, i64* %1912, align 1, !tbaa !2452
  %1913 = load i64, i64* %RBP
  %1914 = sub i64 %1913, 16
  %1915 = load i64, i64* %PC
  %1916 = add i64 %1915, 4
  store i64 %1916, i64* %PC
  %1917 = inttoptr i64 %1914 to i64*
  %1918 = load i64, i64* %1917
  store i64 %1918, i64* %RCX, align 8, !tbaa !2428
  %1919 = load i64, i64* %RBP
  %1920 = sub i64 %1919, 36
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 3
  store i64 %1922, i64* %PC
  %1923 = inttoptr i64 %1920 to i32*
  %1924 = load i32, i32* %1923
  %1925 = zext i32 %1924 to i64
  store i64 %1925, i64* %RAX, align 8, !tbaa !2428
  %1926 = load i64, i64* %RAX
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 3
  store i64 %1928, i64* %PC
  %1929 = trunc i64 %1926 to i32
  %1930 = add i32 1, %1929
  %1931 = zext i32 %1930 to i64
  store i64 %1931, i64* %RAX, align 8, !tbaa !2428
  %1932 = icmp ult i32 %1930, %1929
  %1933 = icmp ult i32 %1930, 1
  %1934 = or i1 %1932, %1933
  %1935 = zext i1 %1934 to i8
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1935, i8* %1936, align 1, !tbaa !2432
  %1937 = and i32 %1930, 255
  %1938 = call i32 @llvm.ctpop.i32(i32 %1937) #17
  %1939 = trunc i32 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = xor i8 %1940, 1
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1941, i8* %1942, align 1, !tbaa !2446
  %1943 = xor i64 1, %1926
  %1944 = trunc i64 %1943 to i32
  %1945 = xor i32 %1944, %1930
  %1946 = lshr i32 %1945, 4
  %1947 = trunc i32 %1946 to i8
  %1948 = and i8 %1947, 1
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1948, i8* %1949, align 1, !tbaa !2447
  %1950 = icmp eq i32 %1930, 0
  %1951 = zext i1 %1950 to i8
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1951, i8* %1952, align 1, !tbaa !2448
  %1953 = lshr i32 %1930, 31
  %1954 = trunc i32 %1953 to i8
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1954, i8* %1955, align 1, !tbaa !2449
  %1956 = lshr i32 %1929, 31
  %1957 = xor i32 %1953, %1956
  %1958 = add nuw nsw i32 %1957, %1953
  %1959 = icmp eq i32 %1958, 2
  %1960 = zext i1 %1959 to i8
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1960, i8* %1961, align 1, !tbaa !2450
  %1962 = load i32, i32* %EAX
  %1963 = zext i32 %1962 to i64
  %1964 = load i64, i64* %PC
  %1965 = add i64 %1964, 3
  store i64 %1965, i64* %PC
  %1966 = shl i64 %1963, 32
  %1967 = ashr exact i64 %1966, 32
  store i64 %1967, i64* %RDX, align 8, !tbaa !2428
  %1968 = load i64, i64* %RCX
  %1969 = load i64, i64* %RDX
  %1970 = mul i64 %1969, 8
  %1971 = add i64 %1970, %1968
  %1972 = bitcast %union.vec128_t* %XMM0 to i8*
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 5
  store i64 %1974, i64* %PC
  %1975 = bitcast i8* %1972 to double*
  %1976 = load double, double* %1975, align 1
  %1977 = inttoptr i64 %1971 to double*
  store double %1976, double* %1977
  %1978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1979 = load i64, i64* %RBP
  %1980 = sub i64 %1979, 136
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 8
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to double*
  %1984 = load double, double* %1983
  %1985 = bitcast i8* %1978 to double*
  store double %1984, double* %1985, align 1, !tbaa !2452
  %1986 = getelementptr inbounds i8, i8* %1978, i64 8
  %1987 = bitcast i8* %1986 to double*
  store double 0.000000e+00, double* %1987, align 1, !tbaa !2452
  %1988 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1989 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1990 = load i64, i64* %RBP
  %1991 = sub i64 %1990, 176
  %1992 = load i64, i64* %PC
  %1993 = add i64 %1992, 8
  store i64 %1993, i64* %PC
  %1994 = bitcast i8* %1989 to double*
  %1995 = load double, double* %1994, align 1
  %1996 = getelementptr inbounds i8, i8* %1989, i64 8
  %1997 = bitcast i8* %1996 to i64*
  %1998 = load i64, i64* %1997, align 1
  %1999 = inttoptr i64 %1991 to double*
  %2000 = load double, double* %1999
  %2001 = fsub double %1995, %2000
  %2002 = bitcast i8* %1988 to double*
  store double %2001, double* %2002, align 1, !tbaa !2452
  %2003 = getelementptr inbounds i8, i8* %1988, i64 8
  %2004 = bitcast i8* %2003 to i64*
  store i64 %1998, i64* %2004, align 1, !tbaa !2452
  %2005 = load i64, i64* %RBP
  %2006 = sub i64 %2005, 16
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 4
  store i64 %2008, i64* %PC
  %2009 = inttoptr i64 %2006 to i64*
  %2010 = load i64, i64* %2009
  store i64 %2010, i64* %RCX, align 8, !tbaa !2428
  %2011 = load i64, i64* %RBP
  %2012 = sub i64 %2011, 32
  %2013 = load i64, i64* %PC
  %2014 = add i64 %2013, 4
  store i64 %2014, i64* %PC
  %2015 = inttoptr i64 %2012 to i32*
  %2016 = load i32, i32* %2015
  %2017 = sext i32 %2016 to i64
  store i64 %2017, i64* %RDX, align 8, !tbaa !2428
  %2018 = load i64, i64* %RCX
  %2019 = load i64, i64* %RDX
  %2020 = mul i64 %2019, 8
  %2021 = add i64 %2020, %2018
  %2022 = bitcast %union.vec128_t* %XMM0 to i8*
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 5
  store i64 %2024, i64* %PC
  %2025 = bitcast i8* %2022 to double*
  %2026 = load double, double* %2025, align 1
  %2027 = inttoptr i64 %2021 to double*
  store double %2026, double* %2027
  %2028 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2029 = load i64, i64* %RBP
  %2030 = sub i64 %2029, 144
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 8
  store i64 %2032, i64* %PC
  %2033 = inttoptr i64 %2030 to double*
  %2034 = load double, double* %2033
  %2035 = bitcast i8* %2028 to double*
  store double %2034, double* %2035, align 1, !tbaa !2452
  %2036 = getelementptr inbounds i8, i8* %2028, i64 8
  %2037 = bitcast i8* %2036 to double*
  store double 0.000000e+00, double* %2037, align 1, !tbaa !2452
  %2038 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2039 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2040 = load i64, i64* %RBP
  %2041 = sub i64 %2040, 168
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 8
  store i64 %2043, i64* %PC
  %2044 = bitcast i8* %2039 to double*
  %2045 = load double, double* %2044, align 1
  %2046 = getelementptr inbounds i8, i8* %2039, i64 8
  %2047 = bitcast i8* %2046 to i64*
  %2048 = load i64, i64* %2047, align 1
  %2049 = inttoptr i64 %2041 to double*
  %2050 = load double, double* %2049
  %2051 = fadd double %2045, %2050
  %2052 = bitcast i8* %2038 to double*
  store double %2051, double* %2052, align 1, !tbaa !2452
  %2053 = getelementptr inbounds i8, i8* %2038, i64 8
  %2054 = bitcast i8* %2053 to i64*
  store i64 %2048, i64* %2054, align 1, !tbaa !2452
  %2055 = load i64, i64* %RBP
  %2056 = sub i64 %2055, 16
  %2057 = load i64, i64* %PC
  %2058 = add i64 %2057, 4
  store i64 %2058, i64* %PC
  %2059 = inttoptr i64 %2056 to i64*
  %2060 = load i64, i64* %2059
  store i64 %2060, i64* %RCX, align 8, !tbaa !2428
  %2061 = load i64, i64* %RBP
  %2062 = sub i64 %2061, 32
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 3
  store i64 %2064, i64* %PC
  %2065 = inttoptr i64 %2062 to i32*
  %2066 = load i32, i32* %2065
  %2067 = zext i32 %2066 to i64
  store i64 %2067, i64* %RAX, align 8, !tbaa !2428
  %2068 = load i64, i64* %RAX
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 3
  store i64 %2070, i64* %PC
  %2071 = trunc i64 %2068 to i32
  %2072 = add i32 1, %2071
  %2073 = zext i32 %2072 to i64
  store i64 %2073, i64* %RAX, align 8, !tbaa !2428
  %2074 = icmp ult i32 %2072, %2071
  %2075 = icmp ult i32 %2072, 1
  %2076 = or i1 %2074, %2075
  %2077 = zext i1 %2076 to i8
  %2078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2077, i8* %2078, align 1, !tbaa !2432
  %2079 = and i32 %2072, 255
  %2080 = call i32 @llvm.ctpop.i32(i32 %2079) #17
  %2081 = trunc i32 %2080 to i8
  %2082 = and i8 %2081, 1
  %2083 = xor i8 %2082, 1
  %2084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2083, i8* %2084, align 1, !tbaa !2446
  %2085 = xor i64 1, %2068
  %2086 = trunc i64 %2085 to i32
  %2087 = xor i32 %2086, %2072
  %2088 = lshr i32 %2087, 4
  %2089 = trunc i32 %2088 to i8
  %2090 = and i8 %2089, 1
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2090, i8* %2091, align 1, !tbaa !2447
  %2092 = icmp eq i32 %2072, 0
  %2093 = zext i1 %2092 to i8
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2093, i8* %2094, align 1, !tbaa !2448
  %2095 = lshr i32 %2072, 31
  %2096 = trunc i32 %2095 to i8
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2096, i8* %2097, align 1, !tbaa !2449
  %2098 = lshr i32 %2071, 31
  %2099 = xor i32 %2095, %2098
  %2100 = add nuw nsw i32 %2099, %2095
  %2101 = icmp eq i32 %2100, 2
  %2102 = zext i1 %2101 to i8
  %2103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2102, i8* %2103, align 1, !tbaa !2450
  %2104 = load i32, i32* %EAX
  %2105 = zext i32 %2104 to i64
  %2106 = load i64, i64* %PC
  %2107 = add i64 %2106, 3
  store i64 %2107, i64* %PC
  %2108 = shl i64 %2105, 32
  %2109 = ashr exact i64 %2108, 32
  store i64 %2109, i64* %RDX, align 8, !tbaa !2428
  %2110 = load i64, i64* %RCX
  %2111 = load i64, i64* %RDX
  %2112 = mul i64 %2111, 8
  %2113 = add i64 %2112, %2110
  %2114 = bitcast %union.vec128_t* %XMM0 to i8*
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 5
  store i64 %2116, i64* %PC
  %2117 = bitcast i8* %2114 to double*
  %2118 = load double, double* %2117, align 1
  %2119 = inttoptr i64 %2113 to double*
  store double %2118, double* %2119
  %2120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2121 = load i64, i64* %RBP
  %2122 = sub i64 %2121, 136
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 8
  store i64 %2124, i64* %PC
  %2125 = inttoptr i64 %2122 to double*
  %2126 = load double, double* %2125
  %2127 = bitcast i8* %2120 to double*
  store double %2126, double* %2127, align 1, !tbaa !2452
  %2128 = getelementptr inbounds i8, i8* %2120, i64 8
  %2129 = bitcast i8* %2128 to double*
  store double 0.000000e+00, double* %2129, align 1, !tbaa !2452
  %2130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2131 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2132 = load i64, i64* %RBP
  %2133 = sub i64 %2132, 176
  %2134 = load i64, i64* %PC
  %2135 = add i64 %2134, 8
  store i64 %2135, i64* %PC
  %2136 = bitcast i8* %2131 to double*
  %2137 = load double, double* %2136, align 1
  %2138 = getelementptr inbounds i8, i8* %2131, i64 8
  %2139 = bitcast i8* %2138 to i64*
  %2140 = load i64, i64* %2139, align 1
  %2141 = inttoptr i64 %2133 to double*
  %2142 = load double, double* %2141
  %2143 = fadd double %2137, %2142
  %2144 = bitcast i8* %2130 to double*
  store double %2143, double* %2144, align 1, !tbaa !2452
  %2145 = getelementptr inbounds i8, i8* %2130, i64 8
  %2146 = bitcast i8* %2145 to i64*
  store i64 %2140, i64* %2146, align 1, !tbaa !2452
  %2147 = load i64, i64* %RBP
  %2148 = sub i64 %2147, 16
  %2149 = load i64, i64* %PC
  %2150 = add i64 %2149, 4
  store i64 %2150, i64* %PC
  %2151 = inttoptr i64 %2148 to i64*
  %2152 = load i64, i64* %2151
  store i64 %2152, i64* %RCX, align 8, !tbaa !2428
  %2153 = load i64, i64* %RBP
  %2154 = sub i64 %2153, 40
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 4
  store i64 %2156, i64* %PC
  %2157 = inttoptr i64 %2154 to i32*
  %2158 = load i32, i32* %2157
  %2159 = sext i32 %2158 to i64
  store i64 %2159, i64* %RDX, align 8, !tbaa !2428
  %2160 = load i64, i64* %RCX
  %2161 = load i64, i64* %RDX
  %2162 = mul i64 %2161, 8
  %2163 = add i64 %2162, %2160
  %2164 = bitcast %union.vec128_t* %XMM0 to i8*
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 5
  store i64 %2166, i64* %PC
  %2167 = bitcast i8* %2164 to double*
  %2168 = load double, double* %2167, align 1
  %2169 = inttoptr i64 %2163 to double*
  store double %2168, double* %2169
  %2170 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2171 = load i64, i64* %RBP
  %2172 = sub i64 %2171, 144
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 8
  store i64 %2174, i64* %PC
  %2175 = inttoptr i64 %2172 to double*
  %2176 = load double, double* %2175
  %2177 = bitcast i8* %2170 to double*
  store double %2176, double* %2177, align 1, !tbaa !2452
  %2178 = getelementptr inbounds i8, i8* %2170, i64 8
  %2179 = bitcast i8* %2178 to double*
  store double 0.000000e+00, double* %2179, align 1, !tbaa !2452
  %2180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2181 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2182 = load i64, i64* %RBP
  %2183 = sub i64 %2182, 168
  %2184 = load i64, i64* %PC
  %2185 = add i64 %2184, 8
  store i64 %2185, i64* %PC
  %2186 = bitcast i8* %2181 to double*
  %2187 = load double, double* %2186, align 1
  %2188 = getelementptr inbounds i8, i8* %2181, i64 8
  %2189 = bitcast i8* %2188 to i64*
  %2190 = load i64, i64* %2189, align 1
  %2191 = inttoptr i64 %2183 to double*
  %2192 = load double, double* %2191
  %2193 = fsub double %2187, %2192
  %2194 = bitcast i8* %2180 to double*
  store double %2193, double* %2194, align 1, !tbaa !2452
  %2195 = getelementptr inbounds i8, i8* %2180, i64 8
  %2196 = bitcast i8* %2195 to i64*
  store i64 %2190, i64* %2196, align 1, !tbaa !2452
  %2197 = load i64, i64* %RBP
  %2198 = sub i64 %2197, 16
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 4
  store i64 %2200, i64* %PC
  %2201 = inttoptr i64 %2198 to i64*
  %2202 = load i64, i64* %2201
  store i64 %2202, i64* %RCX, align 8, !tbaa !2428
  %2203 = load i64, i64* %RBP
  %2204 = sub i64 %2203, 40
  %2205 = load i64, i64* %PC
  %2206 = add i64 %2205, 3
  store i64 %2206, i64* %PC
  %2207 = inttoptr i64 %2204 to i32*
  %2208 = load i32, i32* %2207
  %2209 = zext i32 %2208 to i64
  store i64 %2209, i64* %RAX, align 8, !tbaa !2428
  %2210 = load i64, i64* %RAX
  %2211 = load i64, i64* %PC
  %2212 = add i64 %2211, 3
  store i64 %2212, i64* %PC
  %2213 = trunc i64 %2210 to i32
  %2214 = add i32 1, %2213
  %2215 = zext i32 %2214 to i64
  store i64 %2215, i64* %RAX, align 8, !tbaa !2428
  %2216 = icmp ult i32 %2214, %2213
  %2217 = icmp ult i32 %2214, 1
  %2218 = or i1 %2216, %2217
  %2219 = zext i1 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2219, i8* %2220, align 1, !tbaa !2432
  %2221 = and i32 %2214, 255
  %2222 = call i32 @llvm.ctpop.i32(i32 %2221) #17
  %2223 = trunc i32 %2222 to i8
  %2224 = and i8 %2223, 1
  %2225 = xor i8 %2224, 1
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2225, i8* %2226, align 1, !tbaa !2446
  %2227 = xor i64 1, %2210
  %2228 = trunc i64 %2227 to i32
  %2229 = xor i32 %2228, %2214
  %2230 = lshr i32 %2229, 4
  %2231 = trunc i32 %2230 to i8
  %2232 = and i8 %2231, 1
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2232, i8* %2233, align 1, !tbaa !2447
  %2234 = icmp eq i32 %2214, 0
  %2235 = zext i1 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2235, i8* %2236, align 1, !tbaa !2448
  %2237 = lshr i32 %2214, 31
  %2238 = trunc i32 %2237 to i8
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2238, i8* %2239, align 1, !tbaa !2449
  %2240 = lshr i32 %2213, 31
  %2241 = xor i32 %2237, %2240
  %2242 = add nuw nsw i32 %2241, %2237
  %2243 = icmp eq i32 %2242, 2
  %2244 = zext i1 %2243 to i8
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2244, i8* %2245, align 1, !tbaa !2450
  %2246 = load i32, i32* %EAX
  %2247 = zext i32 %2246 to i64
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC
  %2250 = shl i64 %2247, 32
  %2251 = ashr exact i64 %2250, 32
  store i64 %2251, i64* %RDX, align 8, !tbaa !2428
  %2252 = load i64, i64* %RCX
  %2253 = load i64, i64* %RDX
  %2254 = mul i64 %2253, 8
  %2255 = add i64 %2254, %2252
  %2256 = bitcast %union.vec128_t* %XMM0 to i8*
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 5
  store i64 %2258, i64* %PC
  %2259 = bitcast i8* %2256 to double*
  %2260 = load double, double* %2259, align 1
  %2261 = inttoptr i64 %2255 to double*
  store double %2260, double* %2261
  %2262 = load i64, i64* %RBP
  %2263 = sub i64 %2262, 28
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 3
  store i64 %2265, i64* %PC
  %2266 = inttoptr i64 %2263 to i32*
  %2267 = load i32, i32* %2266
  %2268 = zext i32 %2267 to i64
  store i64 %2268, i64* %RAX, align 8, !tbaa !2428
  %2269 = load i64, i64* %RAX
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 3
  store i64 %2271, i64* %PC
  %2272 = trunc i64 %2269 to i32
  %2273 = add i32 2, %2272
  %2274 = zext i32 %2273 to i64
  store i64 %2274, i64* %RAX, align 8, !tbaa !2428
  %2275 = icmp ult i32 %2273, %2272
  %2276 = icmp ult i32 %2273, 2
  %2277 = or i1 %2275, %2276
  %2278 = zext i1 %2277 to i8
  %2279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2278, i8* %2279, align 1, !tbaa !2432
  %2280 = and i32 %2273, 255
  %2281 = call i32 @llvm.ctpop.i32(i32 %2280) #17
  %2282 = trunc i32 %2281 to i8
  %2283 = and i8 %2282, 1
  %2284 = xor i8 %2283, 1
  %2285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2284, i8* %2285, align 1, !tbaa !2446
  %2286 = xor i64 2, %2269
  %2287 = trunc i64 %2286 to i32
  %2288 = xor i32 %2287, %2273
  %2289 = lshr i32 %2288, 4
  %2290 = trunc i32 %2289 to i8
  %2291 = and i8 %2290, 1
  %2292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2291, i8* %2292, align 1, !tbaa !2447
  %2293 = icmp eq i32 %2273, 0
  %2294 = zext i1 %2293 to i8
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2294, i8* %2295, align 1, !tbaa !2448
  %2296 = lshr i32 %2273, 31
  %2297 = trunc i32 %2296 to i8
  %2298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2297, i8* %2298, align 1, !tbaa !2449
  %2299 = lshr i32 %2272, 31
  %2300 = xor i32 %2296, %2299
  %2301 = add nuw nsw i32 %2300, %2296
  %2302 = icmp eq i32 %2301, 2
  %2303 = zext i1 %2302 to i8
  %2304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2303, i8* %2304, align 1, !tbaa !2450
  %2305 = load i64, i64* %RBP
  %2306 = sub i64 %2305, 28
  %2307 = load i32, i32* %EAX
  %2308 = zext i32 %2307 to i64
  %2309 = load i64, i64* %PC
  %2310 = add i64 %2309, 3
  store i64 %2310, i64* %PC
  %2311 = inttoptr i64 %2306 to i32*
  store i32 %2307, i32* %2311
  %2312 = load i64, i64* %PC
  %2313 = sub i64 %2312, 594
  %2314 = load i64, i64* %PC
  %2315 = add i64 %2314, 5
  store i64 %2315, i64* %PC
  %2316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2313, i64* %2316, align 8, !tbaa !2428
  br label %block_403346

block_40386d:                                     ; preds = %block_4035b1
  %2317 = sub i64 %5115, 48
  %2318 = load i64, i64* %PC
  %2319 = add i64 %2318, 7
  store i64 %2319, i64* %PC
  %2320 = inttoptr i64 %2317 to i32*
  store i32 0, i32* %2320
  %2321 = load i64, i64* %RBP
  %2322 = sub i64 %2321, 56
  %2323 = load i64, i64* %PC
  %2324 = add i64 %2323, 3
  store i64 %2324, i64* %PC
  %2325 = inttoptr i64 %2322 to i32*
  %2326 = load i32, i32* %2325
  %2327 = zext i32 %2326 to i64
  store i64 %2327, i64* %RAX, align 8, !tbaa !2428
  %2328 = load i64, i64* %RAX
  %2329 = load i64, i64* %PC
  %2330 = add i64 %2329, 3
  store i64 %2330, i64* %PC
  %2331 = trunc i64 %2328 to i32
  %2332 = shl i32 %2331, 1
  %2333 = icmp slt i32 %2331, 0
  %2334 = icmp slt i32 %2332, 0
  %2335 = xor i1 %2333, %2334
  %2336 = zext i32 %2332 to i64
  store i64 %2336, i64* %RAX, align 8, !tbaa !2428
  %2337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2338 = zext i1 %2333 to i8
  store i8 %2338, i8* %2337, align 1, !tbaa !2451
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2340 = and i32 %2332, 254
  %2341 = call i32 @llvm.ctpop.i32(i32 %2340) #17
  %2342 = trunc i32 %2341 to i8
  %2343 = and i8 %2342, 1
  %2344 = xor i8 %2343, 1
  store i8 %2344, i8* %2339, align 1, !tbaa !2451
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2345, align 1, !tbaa !2451
  %2346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2347 = icmp eq i32 %2332, 0
  %2348 = zext i1 %2347 to i8
  store i8 %2348, i8* %2346, align 1, !tbaa !2451
  %2349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2350 = lshr i32 %2332, 31
  %2351 = trunc i32 %2350 to i8
  store i8 %2351, i8* %2349, align 1, !tbaa !2451
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2353 = zext i1 %2335 to i8
  store i8 %2353, i8* %2352, align 1, !tbaa !2451
  %2354 = load i64, i64* %RBP
  %2355 = sub i64 %2354, 60
  %2356 = load i32, i32* %EAX
  %2357 = zext i32 %2356 to i64
  %2358 = load i64, i64* %PC
  %2359 = add i64 %2358, 3
  store i64 %2359, i64* %PC
  %2360 = inttoptr i64 %2355 to i32*
  store i32 %2356, i32* %2360
  %2361 = load i64, i64* %RBP
  %2362 = sub i64 %2361, 60
  %2363 = load i64, i64* %PC
  %2364 = add i64 %2363, 3
  store i64 %2364, i64* %PC
  %2365 = inttoptr i64 %2362 to i32*
  %2366 = load i32, i32* %2365
  %2367 = zext i32 %2366 to i64
  store i64 %2367, i64* %RAX, align 8, !tbaa !2428
  %2368 = load i64, i64* %RBP
  %2369 = sub i64 %2368, 44
  %2370 = load i32, i32* %EAX
  %2371 = zext i32 %2370 to i64
  %2372 = load i64, i64* %PC
  %2373 = add i64 %2372, 3
  store i64 %2373, i64* %PC
  %2374 = inttoptr i64 %2369 to i32*
  store i32 %2370, i32* %2374
  br label %block_403883

block_403c42:                                     ; preds = %block_403930
  %2375 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 8
  store i64 %2377, i64* %PC
  %2378 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 80) to double*)
  %2379 = bitcast i8* %2375 to double*
  store double %2378, double* %2379, align 1, !tbaa !2452
  %2380 = getelementptr inbounds i8, i8* %2375, i64 8
  %2381 = bitcast i8* %2380 to double*
  store double 0.000000e+00, double* %2381, align 1, !tbaa !2452
  %2382 = load i64, i64* %RBP
  %2383 = sub i64 %2382, 24
  %2384 = load i64, i64* %PC
  %2385 = add i64 %2384, 4
  store i64 %2385, i64* %PC
  %2386 = inttoptr i64 %2383 to i64*
  %2387 = load i64, i64* %2386
  store i64 %2387, i64* %RAX, align 8, !tbaa !2428
  %2388 = load i64, i64* %RBP
  %2389 = sub i64 %2388, 52
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 3
  store i64 %2391, i64* %PC
  %2392 = inttoptr i64 %2389 to i32*
  %2393 = load i32, i32* %2392
  %2394 = zext i32 %2393 to i64
  store i64 %2394, i64* %RCX, align 8, !tbaa !2428
  %2395 = load i64, i64* %RCX
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 3
  store i64 %2397, i64* %PC
  %2398 = trunc i64 %2395 to i32
  %2399 = add i32 2, %2398
  %2400 = zext i32 %2399 to i64
  store i64 %2400, i64* %RCX, align 8, !tbaa !2428
  %2401 = icmp ult i32 %2399, %2398
  %2402 = icmp ult i32 %2399, 2
  %2403 = or i1 %2401, %2402
  %2404 = zext i1 %2403 to i8
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2404, i8* %2405, align 1, !tbaa !2432
  %2406 = and i32 %2399, 255
  %2407 = call i32 @llvm.ctpop.i32(i32 %2406) #17
  %2408 = trunc i32 %2407 to i8
  %2409 = and i8 %2408, 1
  %2410 = xor i8 %2409, 1
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2410, i8* %2411, align 1, !tbaa !2446
  %2412 = xor i64 2, %2395
  %2413 = trunc i64 %2412 to i32
  %2414 = xor i32 %2413, %2399
  %2415 = lshr i32 %2414, 4
  %2416 = trunc i32 %2415 to i8
  %2417 = and i8 %2416, 1
  %2418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2417, i8* %2418, align 1, !tbaa !2447
  %2419 = icmp eq i32 %2399, 0
  %2420 = zext i1 %2419 to i8
  %2421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2420, i8* %2421, align 1, !tbaa !2448
  %2422 = lshr i32 %2399, 31
  %2423 = trunc i32 %2422 to i8
  %2424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2423, i8* %2424, align 1, !tbaa !2449
  %2425 = lshr i32 %2398, 31
  %2426 = xor i32 %2422, %2425
  %2427 = add nuw nsw i32 %2426, %2422
  %2428 = icmp eq i32 %2427, 2
  %2429 = zext i1 %2428 to i8
  %2430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2429, i8* %2430, align 1, !tbaa !2450
  %2431 = load i32, i32* %ECX
  %2432 = zext i32 %2431 to i64
  %2433 = load i64, i64* %PC
  %2434 = add i64 %2433, 3
  store i64 %2434, i64* %PC
  %2435 = shl i64 %2432, 32
  %2436 = ashr exact i64 %2435, 32
  store i64 %2436, i64* %RDX, align 8, !tbaa !2428
  %2437 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2438 = load i64, i64* %RAX
  %2439 = load i64, i64* %RDX
  %2440 = mul i64 %2439, 8
  %2441 = add i64 %2440, %2438
  %2442 = load i64, i64* %PC
  %2443 = add i64 %2442, 5
  store i64 %2443, i64* %PC
  %2444 = inttoptr i64 %2441 to double*
  %2445 = load double, double* %2444
  %2446 = bitcast i8* %2437 to double*
  store double %2445, double* %2446, align 1, !tbaa !2452
  %2447 = getelementptr inbounds i8, i8* %2437, i64 8
  %2448 = bitcast i8* %2447 to double*
  store double 0.000000e+00, double* %2448, align 1, !tbaa !2452
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 72
  %2451 = bitcast %union.vec128_t* %XMM1 to i8*
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 5
  store i64 %2453, i64* %PC
  %2454 = bitcast i8* %2451 to double*
  %2455 = load double, double* %2454, align 1
  %2456 = inttoptr i64 %2450 to double*
  store double %2455, double* %2456
  %2457 = load i64, i64* %RBP
  %2458 = sub i64 %2457, 24
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 4
  store i64 %2460, i64* %PC
  %2461 = inttoptr i64 %2458 to i64*
  %2462 = load i64, i64* %2461
  store i64 %2462, i64* %RAX, align 8, !tbaa !2428
  %2463 = load i64, i64* %RBP
  %2464 = sub i64 %2463, 52
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 3
  store i64 %2466, i64* %PC
  %2467 = inttoptr i64 %2464 to i32*
  %2468 = load i32, i32* %2467
  %2469 = zext i32 %2468 to i64
  store i64 %2469, i64* %RCX, align 8, !tbaa !2428
  %2470 = load i64, i64* %RCX
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 3
  store i64 %2472, i64* %PC
  %2473 = trunc i64 %2470 to i32
  %2474 = add i32 3, %2473
  %2475 = zext i32 %2474 to i64
  store i64 %2475, i64* %RCX, align 8, !tbaa !2428
  %2476 = icmp ult i32 %2474, %2473
  %2477 = icmp ult i32 %2474, 3
  %2478 = or i1 %2476, %2477
  %2479 = zext i1 %2478 to i8
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2479, i8* %2480, align 1, !tbaa !2432
  %2481 = and i32 %2474, 255
  %2482 = call i32 @llvm.ctpop.i32(i32 %2481) #17
  %2483 = trunc i32 %2482 to i8
  %2484 = and i8 %2483, 1
  %2485 = xor i8 %2484, 1
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2485, i8* %2486, align 1, !tbaa !2446
  %2487 = xor i64 3, %2470
  %2488 = trunc i64 %2487 to i32
  %2489 = xor i32 %2488, %2474
  %2490 = lshr i32 %2489, 4
  %2491 = trunc i32 %2490 to i8
  %2492 = and i8 %2491, 1
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2492, i8* %2493, align 1, !tbaa !2447
  %2494 = icmp eq i32 %2474, 0
  %2495 = zext i1 %2494 to i8
  %2496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2495, i8* %2496, align 1, !tbaa !2448
  %2497 = lshr i32 %2474, 31
  %2498 = trunc i32 %2497 to i8
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2498, i8* %2499, align 1, !tbaa !2449
  %2500 = lshr i32 %2473, 31
  %2501 = xor i32 %2497, %2500
  %2502 = add nuw nsw i32 %2501, %2497
  %2503 = icmp eq i32 %2502, 2
  %2504 = zext i1 %2503 to i8
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2504, i8* %2505, align 1, !tbaa !2450
  %2506 = load i32, i32* %ECX
  %2507 = zext i32 %2506 to i64
  %2508 = load i64, i64* %PC
  %2509 = add i64 %2508, 3
  store i64 %2509, i64* %PC
  %2510 = shl i64 %2507, 32
  %2511 = ashr exact i64 %2510, 32
  store i64 %2511, i64* %RDX, align 8, !tbaa !2428
  %2512 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2513 = load i64, i64* %RAX
  %2514 = load i64, i64* %RDX
  %2515 = mul i64 %2514, 8
  %2516 = add i64 %2515, %2513
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 5
  store i64 %2518, i64* %PC
  %2519 = inttoptr i64 %2516 to double*
  %2520 = load double, double* %2519
  %2521 = bitcast i8* %2512 to double*
  store double %2520, double* %2521, align 1, !tbaa !2452
  %2522 = getelementptr inbounds i8, i8* %2512, i64 8
  %2523 = bitcast i8* %2522 to double*
  store double 0.000000e+00, double* %2523, align 1, !tbaa !2452
  %2524 = load i64, i64* %RBP
  %2525 = sub i64 %2524, 80
  %2526 = bitcast %union.vec128_t* %XMM1 to i8*
  %2527 = load i64, i64* %PC
  %2528 = add i64 %2527, 5
  store i64 %2528, i64* %PC
  %2529 = bitcast i8* %2526 to double*
  %2530 = load double, double* %2529, align 1
  %2531 = inttoptr i64 %2525 to double*
  store double %2530, double* %2531
  %2532 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2533 = load i64, i64* %RBP
  %2534 = sub i64 %2533, 72
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 5
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to double*
  %2538 = load double, double* %2537
  %2539 = bitcast i8* %2532 to double*
  store double %2538, double* %2539, align 1, !tbaa !2452
  %2540 = getelementptr inbounds i8, i8* %2532, i64 8
  %2541 = bitcast i8* %2540 to double*
  store double 0.000000e+00, double* %2541, align 1, !tbaa !2452
  %2542 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2543 = bitcast %union.vec128_t* %XMM0 to i8*
  %2544 = load i64, i64* %PC
  %2545 = add i64 %2544, 3
  store i64 %2545, i64* %PC
  %2546 = bitcast i8* %2543 to <2 x i32>*
  %2547 = load <2 x i32>, <2 x i32>* %2546, align 1
  %2548 = getelementptr inbounds i8, i8* %2543, i64 8
  %2549 = bitcast i8* %2548 to <2 x i32>*
  %2550 = load <2 x i32>, <2 x i32>* %2549, align 1
  %2551 = extractelement <2 x i32> %2547, i32 0
  %2552 = bitcast i8* %2542 to i32*
  store i32 %2551, i32* %2552, align 1, !tbaa !2455
  %2553 = extractelement <2 x i32> %2547, i32 1
  %2554 = getelementptr inbounds i8, i8* %2542, i64 4
  %2555 = bitcast i8* %2554 to i32*
  store i32 %2553, i32* %2555, align 1, !tbaa !2455
  %2556 = extractelement <2 x i32> %2550, i32 0
  %2557 = getelementptr inbounds i8, i8* %2542, i64 8
  %2558 = bitcast i8* %2557 to i32*
  store i32 %2556, i32* %2558, align 1, !tbaa !2455
  %2559 = extractelement <2 x i32> %2550, i32 1
  %2560 = getelementptr inbounds i8, i8* %2542, i64 12
  %2561 = bitcast i8* %2560 to i32*
  store i32 %2559, i32* %2561, align 1, !tbaa !2455
  %2562 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2563 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2564 = load i64, i64* %RBP
  %2565 = sub i64 %2564, 88
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 5
  store i64 %2567, i64* %PC
  %2568 = bitcast i8* %2563 to double*
  %2569 = load double, double* %2568, align 1
  %2570 = getelementptr inbounds i8, i8* %2563, i64 8
  %2571 = bitcast i8* %2570 to i64*
  %2572 = load i64, i64* %2571, align 1
  %2573 = inttoptr i64 %2565 to double*
  %2574 = load double, double* %2573
  %2575 = fmul double %2569, %2574
  %2576 = bitcast i8* %2562 to double*
  store double %2575, double* %2576, align 1, !tbaa !2452
  %2577 = getelementptr inbounds i8, i8* %2562, i64 8
  %2578 = bitcast i8* %2577 to i64*
  store i64 %2572, i64* %2578, align 1, !tbaa !2452
  %2579 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2580 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2581 = load i64, i64* %RBP
  %2582 = sub i64 %2581, 80
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 5
  store i64 %2584, i64* %PC
  %2585 = bitcast i8* %2580 to double*
  %2586 = load double, double* %2585, align 1
  %2587 = getelementptr inbounds i8, i8* %2580, i64 8
  %2588 = bitcast i8* %2587 to i64*
  %2589 = load i64, i64* %2588, align 1
  %2590 = inttoptr i64 %2582 to double*
  %2591 = load double, double* %2590
  %2592 = fmul double %2586, %2591
  %2593 = bitcast i8* %2579 to double*
  store double %2592, double* %2593, align 1, !tbaa !2452
  %2594 = getelementptr inbounds i8, i8* %2579, i64 8
  %2595 = bitcast i8* %2594 to i64*
  store i64 %2589, i64* %2595, align 1, !tbaa !2452
  %2596 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2597 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2598 = bitcast %union.vec128_t* %XMM2 to i8*
  %2599 = load i64, i64* %PC
  %2600 = add i64 %2599, 4
  store i64 %2600, i64* %PC
  %2601 = bitcast i8* %2597 to double*
  %2602 = load double, double* %2601, align 1
  %2603 = getelementptr inbounds i8, i8* %2597, i64 8
  %2604 = bitcast i8* %2603 to i64*
  %2605 = load i64, i64* %2604, align 1
  %2606 = bitcast i8* %2598 to double*
  %2607 = load double, double* %2606, align 1
  %2608 = fsub double %2602, %2607
  %2609 = bitcast i8* %2596 to double*
  store double %2608, double* %2609, align 1, !tbaa !2452
  %2610 = getelementptr inbounds i8, i8* %2596, i64 8
  %2611 = bitcast i8* %2610 to i64*
  store i64 %2605, i64* %2611, align 1, !tbaa !2452
  %2612 = load i64, i64* %RBP
  %2613 = sub i64 %2612, 104
  %2614 = bitcast %union.vec128_t* %XMM1 to i8*
  %2615 = load i64, i64* %PC
  %2616 = add i64 %2615, 5
  store i64 %2616, i64* %PC
  %2617 = bitcast i8* %2614 to double*
  %2618 = load double, double* %2617, align 1
  %2619 = inttoptr i64 %2613 to double*
  store double %2618, double* %2619
  %2620 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2621 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2622 = load i64, i64* %RBP
  %2623 = sub i64 %2622, 88
  %2624 = load i64, i64* %PC
  %2625 = add i64 %2624, 5
  store i64 %2625, i64* %PC
  %2626 = bitcast i8* %2621 to double*
  %2627 = load double, double* %2626, align 1
  %2628 = getelementptr inbounds i8, i8* %2621, i64 8
  %2629 = bitcast i8* %2628 to i64*
  %2630 = load i64, i64* %2629, align 1
  %2631 = inttoptr i64 %2623 to double*
  %2632 = load double, double* %2631
  %2633 = fmul double %2627, %2632
  %2634 = bitcast i8* %2620 to double*
  store double %2633, double* %2634, align 1, !tbaa !2452
  %2635 = getelementptr inbounds i8, i8* %2620, i64 8
  %2636 = bitcast i8* %2635 to i64*
  store i64 %2630, i64* %2636, align 1, !tbaa !2452
  %2637 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2638 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2639 = load i64, i64* %RBP
  %2640 = sub i64 %2639, 72
  %2641 = load i64, i64* %PC
  %2642 = add i64 %2641, 5
  store i64 %2642, i64* %PC
  %2643 = bitcast i8* %2638 to double*
  %2644 = load double, double* %2643, align 1
  %2645 = getelementptr inbounds i8, i8* %2638, i64 8
  %2646 = bitcast i8* %2645 to i64*
  %2647 = load i64, i64* %2646, align 1
  %2648 = inttoptr i64 %2640 to double*
  %2649 = load double, double* %2648
  %2650 = fmul double %2644, %2649
  %2651 = bitcast i8* %2637 to double*
  store double %2650, double* %2651, align 1, !tbaa !2452
  %2652 = getelementptr inbounds i8, i8* %2637, i64 8
  %2653 = bitcast i8* %2652 to i64*
  store i64 %2647, i64* %2653, align 1, !tbaa !2452
  %2654 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2655 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2656 = load i64, i64* %RBP
  %2657 = sub i64 %2656, 80
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 5
  store i64 %2659, i64* %PC
  %2660 = bitcast i8* %2655 to double*
  %2661 = load double, double* %2660, align 1
  %2662 = getelementptr inbounds i8, i8* %2655, i64 8
  %2663 = bitcast i8* %2662 to i64*
  %2664 = load i64, i64* %2663, align 1
  %2665 = inttoptr i64 %2657 to double*
  %2666 = load double, double* %2665
  %2667 = fsub double %2661, %2666
  %2668 = bitcast i8* %2654 to double*
  store double %2667, double* %2668, align 1, !tbaa !2452
  %2669 = getelementptr inbounds i8, i8* %2654, i64 8
  %2670 = bitcast i8* %2669 to i64*
  store i64 %2664, i64* %2670, align 1, !tbaa !2452
  %2671 = load i64, i64* %RBP
  %2672 = sub i64 %2671, 112
  %2673 = bitcast %union.vec128_t* %XMM0 to i8*
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 5
  store i64 %2675, i64* %PC
  %2676 = bitcast i8* %2673 to double*
  %2677 = load double, double* %2676, align 1
  %2678 = inttoptr i64 %2672 to double*
  store double %2677, double* %2678
  %2679 = load i64, i64* %RBP
  %2680 = sub i64 %2679, 44
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 3
  store i64 %2682, i64* %PC
  %2683 = inttoptr i64 %2680 to i32*
  %2684 = load i32, i32* %2683
  %2685 = zext i32 %2684 to i64
  store i64 %2685, i64* %RCX, align 8, !tbaa !2428
  %2686 = load i64, i64* %RCX
  %2687 = load i64, i64* %RBP
  %2688 = sub i64 %2687, 56
  %2689 = load i64, i64* %PC
  %2690 = add i64 %2689, 3
  store i64 %2690, i64* %PC
  %2691 = trunc i64 %2686 to i32
  %2692 = inttoptr i64 %2688 to i32*
  %2693 = load i32, i32* %2692
  %2694 = add i32 %2693, %2691
  %2695 = zext i32 %2694 to i64
  store i64 %2695, i64* %RCX, align 8, !tbaa !2428
  %2696 = icmp ult i32 %2694, %2691
  %2697 = icmp ult i32 %2694, %2693
  %2698 = or i1 %2696, %2697
  %2699 = zext i1 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2699, i8* %2700, align 1, !tbaa !2432
  %2701 = and i32 %2694, 255
  %2702 = call i32 @llvm.ctpop.i32(i32 %2701) #17
  %2703 = trunc i32 %2702 to i8
  %2704 = and i8 %2703, 1
  %2705 = xor i8 %2704, 1
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2705, i8* %2706, align 1, !tbaa !2446
  %2707 = xor i32 %2693, %2691
  %2708 = xor i32 %2707, %2694
  %2709 = lshr i32 %2708, 4
  %2710 = trunc i32 %2709 to i8
  %2711 = and i8 %2710, 1
  %2712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2711, i8* %2712, align 1, !tbaa !2447
  %2713 = icmp eq i32 %2694, 0
  %2714 = zext i1 %2713 to i8
  %2715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2714, i8* %2715, align 1, !tbaa !2448
  %2716 = lshr i32 %2694, 31
  %2717 = trunc i32 %2716 to i8
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2717, i8* %2718, align 1, !tbaa !2449
  %2719 = lshr i32 %2691, 31
  %2720 = lshr i32 %2693, 31
  %2721 = xor i32 %2716, %2719
  %2722 = xor i32 %2716, %2720
  %2723 = add nuw nsw i32 %2721, %2722
  %2724 = icmp eq i32 %2723, 2
  %2725 = zext i1 %2724 to i8
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2725, i8* %2726, align 1, !tbaa !2450
  %2727 = load i64, i64* %RBP
  %2728 = sub i64 %2727, 28
  %2729 = load i32, i32* %ECX
  %2730 = zext i32 %2729 to i64
  %2731 = load i64, i64* %PC
  %2732 = add i64 %2731, 3
  store i64 %2732, i64* %PC
  %2733 = inttoptr i64 %2728 to i32*
  store i32 %2729, i32* %2733
  br label %block_403cb0

block_403cb0:                                     ; preds = %block_403cc6, %block_403c42
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_403c42 ], [ %MEMORY.0, %block_403cc6 ]
  %2734 = load i64, i64* %RBP
  %2735 = sub i64 %2734, 28
  %2736 = load i64, i64* %PC
  %2737 = add i64 %2736, 3
  store i64 %2737, i64* %PC
  %2738 = inttoptr i64 %2735 to i32*
  %2739 = load i32, i32* %2738
  %2740 = zext i32 %2739 to i64
  store i64 %2740, i64* %RAX, align 8, !tbaa !2428
  %2741 = load i64, i64* %RBP
  %2742 = sub i64 %2741, 8
  %2743 = load i64, i64* %PC
  %2744 = add i64 %2743, 3
  store i64 %2744, i64* %PC
  %2745 = inttoptr i64 %2742 to i32*
  %2746 = load i32, i32* %2745
  %2747 = zext i32 %2746 to i64
  store i64 %2747, i64* %RCX, align 8, !tbaa !2428
  %2748 = load i64, i64* %RBP
  %2749 = sub i64 %2748, 44
  %2750 = load i64, i64* %PC
  %2751 = add i64 %2750, 3
  store i64 %2751, i64* %PC
  %2752 = inttoptr i64 %2749 to i32*
  %2753 = load i32, i32* %2752
  %2754 = zext i32 %2753 to i64
  store i64 %2754, i64* %RDX, align 8, !tbaa !2428
  %2755 = load i64, i64* %RDX
  %2756 = load i64, i64* %RBP
  %2757 = sub i64 %2756, 56
  %2758 = load i64, i64* %PC
  %2759 = add i64 %2758, 3
  store i64 %2759, i64* %PC
  %2760 = trunc i64 %2755 to i32
  %2761 = inttoptr i64 %2757 to i32*
  %2762 = load i32, i32* %2761
  %2763 = add i32 %2762, %2760
  %2764 = zext i32 %2763 to i64
  store i64 %2764, i64* %RDX, align 8, !tbaa !2428
  %2765 = icmp ult i32 %2763, %2760
  %2766 = icmp ult i32 %2763, %2762
  %2767 = or i1 %2765, %2766
  %2768 = zext i1 %2767 to i8
  %2769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2768, i8* %2769, align 1, !tbaa !2432
  %2770 = and i32 %2763, 255
  %2771 = call i32 @llvm.ctpop.i32(i32 %2770) #17
  %2772 = trunc i32 %2771 to i8
  %2773 = and i8 %2772, 1
  %2774 = xor i8 %2773, 1
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2774, i8* %2775, align 1, !tbaa !2446
  %2776 = xor i32 %2762, %2760
  %2777 = xor i32 %2776, %2763
  %2778 = lshr i32 %2777, 4
  %2779 = trunc i32 %2778 to i8
  %2780 = and i8 %2779, 1
  %2781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2780, i8* %2781, align 1, !tbaa !2447
  %2782 = icmp eq i32 %2763, 0
  %2783 = zext i1 %2782 to i8
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2783, i8* %2784, align 1, !tbaa !2448
  %2785 = lshr i32 %2763, 31
  %2786 = trunc i32 %2785 to i8
  %2787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2786, i8* %2787, align 1, !tbaa !2449
  %2788 = lshr i32 %2760, 31
  %2789 = lshr i32 %2762, 31
  %2790 = xor i32 %2785, %2788
  %2791 = xor i32 %2785, %2789
  %2792 = add nuw nsw i32 %2790, %2791
  %2793 = icmp eq i32 %2792, 2
  %2794 = zext i1 %2793 to i8
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2794, i8* %2795, align 1, !tbaa !2450
  %2796 = load i64, i64* %RCX
  %2797 = load i32, i32* %EDX
  %2798 = zext i32 %2797 to i64
  %2799 = load i64, i64* %PC
  %2800 = add i64 %2799, 2
  store i64 %2800, i64* %PC
  %2801 = trunc i64 %2796 to i32
  %2802 = add i32 %2797, %2801
  %2803 = zext i32 %2802 to i64
  store i64 %2803, i64* %RCX, align 8, !tbaa !2428
  %2804 = icmp ult i32 %2802, %2801
  %2805 = icmp ult i32 %2802, %2797
  %2806 = or i1 %2804, %2805
  %2807 = zext i1 %2806 to i8
  %2808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2807, i8* %2808, align 1, !tbaa !2432
  %2809 = and i32 %2802, 255
  %2810 = call i32 @llvm.ctpop.i32(i32 %2809) #17
  %2811 = trunc i32 %2810 to i8
  %2812 = and i8 %2811, 1
  %2813 = xor i8 %2812, 1
  %2814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2813, i8* %2814, align 1, !tbaa !2446
  %2815 = xor i64 %2798, %2796
  %2816 = trunc i64 %2815 to i32
  %2817 = xor i32 %2816, %2802
  %2818 = lshr i32 %2817, 4
  %2819 = trunc i32 %2818 to i8
  %2820 = and i8 %2819, 1
  %2821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2820, i8* %2821, align 1, !tbaa !2447
  %2822 = icmp eq i32 %2802, 0
  %2823 = zext i1 %2822 to i8
  %2824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2823, i8* %2824, align 1, !tbaa !2448
  %2825 = lshr i32 %2802, 31
  %2826 = trunc i32 %2825 to i8
  %2827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2826, i8* %2827, align 1, !tbaa !2449
  %2828 = lshr i32 %2801, 31
  %2829 = lshr i32 %2797, 31
  %2830 = xor i32 %2825, %2828
  %2831 = xor i32 %2825, %2829
  %2832 = add nuw nsw i32 %2830, %2831
  %2833 = icmp eq i32 %2832, 2
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2834, i8* %2835, align 1, !tbaa !2450
  %2836 = load i32, i32* %EAX
  %2837 = zext i32 %2836 to i64
  %2838 = load i32, i32* %ECX
  %2839 = zext i32 %2838 to i64
  %2840 = load i64, i64* %PC
  %2841 = add i64 %2840, 2
  store i64 %2841, i64* %PC
  %2842 = sub i32 %2836, %2838
  %2843 = icmp ult i32 %2836, %2838
  %2844 = zext i1 %2843 to i8
  %2845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2844, i8* %2845, align 1, !tbaa !2432
  %2846 = and i32 %2842, 255
  %2847 = call i32 @llvm.ctpop.i32(i32 %2846) #17
  %2848 = trunc i32 %2847 to i8
  %2849 = and i8 %2848, 1
  %2850 = xor i8 %2849, 1
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2850, i8* %2851, align 1, !tbaa !2446
  %2852 = xor i64 %2839, %2837
  %2853 = trunc i64 %2852 to i32
  %2854 = xor i32 %2853, %2842
  %2855 = lshr i32 %2854, 4
  %2856 = trunc i32 %2855 to i8
  %2857 = and i8 %2856, 1
  %2858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2857, i8* %2858, align 1, !tbaa !2447
  %2859 = icmp eq i32 %2842, 0
  %2860 = zext i1 %2859 to i8
  %2861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2860, i8* %2861, align 1, !tbaa !2448
  %2862 = lshr i32 %2842, 31
  %2863 = trunc i32 %2862 to i8
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2863, i8* %2864, align 1, !tbaa !2449
  %2865 = lshr i32 %2836, 31
  %2866 = lshr i32 %2838, 31
  %2867 = xor i32 %2866, %2865
  %2868 = xor i32 %2862, %2865
  %2869 = add nuw nsw i32 %2868, %2867
  %2870 = icmp eq i32 %2869, 2
  %2871 = zext i1 %2870 to i8
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2871, i8* %2872, align 1, !tbaa !2450
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 811
  %2875 = load i64, i64* %PC
  %2876 = add i64 %2875, 6
  %2877 = load i64, i64* %PC
  %2878 = add i64 %2877, 6
  store i64 %2878, i64* %PC
  %2879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2880 = load i8, i8* %2879, align 1, !tbaa !2449
  %2881 = icmp ne i8 %2880, 0
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2883 = load i8, i8* %2882, align 1, !tbaa !2450
  %2884 = icmp ne i8 %2883, 0
  %2885 = xor i1 %2881, %2884
  %2886 = xor i1 %2885, true
  %2887 = zext i1 %2886 to i8
  store i8 %2887, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2889 = select i1 %2885, i64 %2876, i64 %2874
  store i64 %2889, i64* %2888, align 8, !tbaa !2428
  %2890 = load i8, i8* %BRANCH_TAKEN
  %2891 = icmp eq i8 %2890, 1
  %2892 = load i64, i64* %PC
  br i1 %2891, label %block_403feb, label %block_403cc6

block_403ffe:                                     ; preds = %block_403883
  %2893 = load i64, i64* %RSP
  %2894 = load i64, i64* %PC
  %2895 = add i64 %2894, 4
  store i64 %2895, i64* %PC
  %2896 = add i64 48, %2893
  store i64 %2896, i64* %RSP, align 8, !tbaa !2428
  %2897 = icmp ult i64 %2896, %2893
  %2898 = icmp ult i64 %2896, 48
  %2899 = or i1 %2897, %2898
  %2900 = zext i1 %2899 to i8
  %2901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2900, i8* %2901, align 1, !tbaa !2432
  %2902 = trunc i64 %2896 to i32
  %2903 = and i32 %2902, 255
  %2904 = call i32 @llvm.ctpop.i32(i32 %2903) #17
  %2905 = trunc i32 %2904 to i8
  %2906 = and i8 %2905, 1
  %2907 = xor i8 %2906, 1
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2907, i8* %2908, align 1, !tbaa !2446
  %2909 = xor i64 48, %2893
  %2910 = xor i64 %2909, %2896
  %2911 = lshr i64 %2910, 4
  %2912 = trunc i64 %2911 to i8
  %2913 = and i8 %2912, 1
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2913, i8* %2914, align 1, !tbaa !2447
  %2915 = icmp eq i64 %2896, 0
  %2916 = zext i1 %2915 to i8
  %2917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2916, i8* %2917, align 1, !tbaa !2448
  %2918 = lshr i64 %2896, 63
  %2919 = trunc i64 %2918 to i8
  %2920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2919, i8* %2920, align 1, !tbaa !2449
  %2921 = lshr i64 %2893, 63
  %2922 = xor i64 %2918, %2921
  %2923 = add nuw nsw i64 %2922, %2918
  %2924 = icmp eq i64 %2923, 2
  %2925 = zext i1 %2924 to i8
  %2926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2925, i8* %2926, align 1, !tbaa !2450
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 1
  store i64 %2928, i64* %PC
  %2929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2930 = load i64, i64* %2929, align 8, !tbaa !2428
  %2931 = add i64 %2930, 8
  %2932 = inttoptr i64 %2930 to i64*
  %2933 = load i64, i64* %2932
  store i64 %2933, i64* %RBP, align 8, !tbaa !2428
  store i64 %2931, i64* %2929, align 8, !tbaa !2428
  %2934 = load i64, i64* %PC
  %2935 = add i64 %2934, 1
  store i64 %2935, i64* %PC
  %2936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2938 = load i64, i64* %2937, align 8, !tbaa !2428
  %2939 = inttoptr i64 %2938 to i64*
  %2940 = load i64, i64* %2939
  store i64 %2940, i64* %2936, align 8, !tbaa !2428
  %2941 = add i64 %2938, 8
  store i64 %2941, i64* %2937, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_403feb:                                     ; preds = %block_403cb0
  %2942 = add i64 %2892, 5
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 5
  store i64 %2944, i64* %PC
  %2945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2942, i64* %2945, align 8, !tbaa !2428
  %2946 = load i64, i64* %RBP
  %2947 = sub i64 %2946, 60
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 3
  store i64 %2949, i64* %PC
  %2950 = inttoptr i64 %2947 to i32*
  %2951 = load i32, i32* %2950
  %2952 = zext i32 %2951 to i64
  store i64 %2952, i64* %RAX, align 8, !tbaa !2428
  %2953 = load i64, i64* %RAX
  %2954 = load i64, i64* %RBP
  %2955 = sub i64 %2954, 44
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 3
  store i64 %2957, i64* %PC
  %2958 = trunc i64 %2953 to i32
  %2959 = inttoptr i64 %2955 to i32*
  %2960 = load i32, i32* %2959
  %2961 = add i32 %2960, %2958
  %2962 = zext i32 %2961 to i64
  store i64 %2962, i64* %RAX, align 8, !tbaa !2428
  %2963 = icmp ult i32 %2961, %2958
  %2964 = icmp ult i32 %2961, %2960
  %2965 = or i1 %2963, %2964
  %2966 = zext i1 %2965 to i8
  %2967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2966, i8* %2967, align 1, !tbaa !2432
  %2968 = and i32 %2961, 255
  %2969 = call i32 @llvm.ctpop.i32(i32 %2968) #17
  %2970 = trunc i32 %2969 to i8
  %2971 = and i8 %2970, 1
  %2972 = xor i8 %2971, 1
  %2973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2972, i8* %2973, align 1, !tbaa !2446
  %2974 = xor i32 %2960, %2958
  %2975 = xor i32 %2974, %2961
  %2976 = lshr i32 %2975, 4
  %2977 = trunc i32 %2976 to i8
  %2978 = and i8 %2977, 1
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2978, i8* %2979, align 1, !tbaa !2447
  %2980 = icmp eq i32 %2961, 0
  %2981 = zext i1 %2980 to i8
  %2982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2981, i8* %2982, align 1, !tbaa !2448
  %2983 = lshr i32 %2961, 31
  %2984 = trunc i32 %2983 to i8
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2984, i8* %2985, align 1, !tbaa !2449
  %2986 = lshr i32 %2958, 31
  %2987 = lshr i32 %2960, 31
  %2988 = xor i32 %2983, %2986
  %2989 = xor i32 %2983, %2987
  %2990 = add nuw nsw i32 %2988, %2989
  %2991 = icmp eq i32 %2990, 2
  %2992 = zext i1 %2991 to i8
  %2993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2992, i8* %2993, align 1, !tbaa !2450
  %2994 = load i64, i64* %RBP
  %2995 = sub i64 %2994, 44
  %2996 = load i32, i32* %EAX
  %2997 = zext i32 %2996 to i64
  %2998 = load i64, i64* %PC
  %2999 = add i64 %2998, 3
  store i64 %2999, i64* %PC
  %3000 = inttoptr i64 %2995 to i32*
  store i32 %2996, i32* %3000
  %3001 = load i64, i64* %PC
  %3002 = sub i64 %3001, 1910
  %3003 = load i64, i64* %PC
  %3004 = add i64 %3003, 5
  store i64 %3004, i64* %PC
  %3005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3002, i64* %3005, align 8, !tbaa !2428
  br label %block_403883

block_403930:                                     ; preds = %block_403941, %block_40388f
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_40388f ], [ %MEMORY.1, %block_403941 ]
  %3006 = load i64, i64* %RBP
  %3007 = sub i64 %3006, 28
  %3008 = load i64, i64* %PC
  %3009 = add i64 %3008, 3
  store i64 %3009, i64* %PC
  %3010 = inttoptr i64 %3007 to i32*
  %3011 = load i32, i32* %3010
  %3012 = zext i32 %3011 to i64
  store i64 %3012, i64* %RAX, align 8, !tbaa !2428
  %3013 = load i64, i64* %RBP
  %3014 = sub i64 %3013, 8
  %3015 = load i64, i64* %PC
  %3016 = add i64 %3015, 3
  store i64 %3016, i64* %PC
  %3017 = inttoptr i64 %3014 to i32*
  %3018 = load i32, i32* %3017
  %3019 = zext i32 %3018 to i64
  store i64 %3019, i64* %RCX, align 8, !tbaa !2428
  %3020 = load i64, i64* %RCX
  %3021 = load i64, i64* %RBP
  %3022 = sub i64 %3021, 44
  %3023 = load i64, i64* %PC
  %3024 = add i64 %3023, 3
  store i64 %3024, i64* %PC
  %3025 = trunc i64 %3020 to i32
  %3026 = inttoptr i64 %3022 to i32*
  %3027 = load i32, i32* %3026
  %3028 = add i32 %3027, %3025
  %3029 = zext i32 %3028 to i64
  store i64 %3029, i64* %RCX, align 8, !tbaa !2428
  %3030 = icmp ult i32 %3028, %3025
  %3031 = icmp ult i32 %3028, %3027
  %3032 = or i1 %3030, %3031
  %3033 = zext i1 %3032 to i8
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3033, i8* %3034, align 1, !tbaa !2432
  %3035 = and i32 %3028, 255
  %3036 = call i32 @llvm.ctpop.i32(i32 %3035) #17
  %3037 = trunc i32 %3036 to i8
  %3038 = and i8 %3037, 1
  %3039 = xor i8 %3038, 1
  %3040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3039, i8* %3040, align 1, !tbaa !2446
  %3041 = xor i32 %3027, %3025
  %3042 = xor i32 %3041, %3028
  %3043 = lshr i32 %3042, 4
  %3044 = trunc i32 %3043 to i8
  %3045 = and i8 %3044, 1
  %3046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3045, i8* %3046, align 1, !tbaa !2447
  %3047 = icmp eq i32 %3028, 0
  %3048 = zext i1 %3047 to i8
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3048, i8* %3049, align 1, !tbaa !2448
  %3050 = lshr i32 %3028, 31
  %3051 = trunc i32 %3050 to i8
  %3052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3051, i8* %3052, align 1, !tbaa !2449
  %3053 = lshr i32 %3025, 31
  %3054 = lshr i32 %3027, 31
  %3055 = xor i32 %3050, %3053
  %3056 = xor i32 %3050, %3054
  %3057 = add nuw nsw i32 %3055, %3056
  %3058 = icmp eq i32 %3057, 2
  %3059 = zext i1 %3058 to i8
  %3060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3059, i8* %3060, align 1, !tbaa !2450
  %3061 = load i32, i32* %EAX
  %3062 = zext i32 %3061 to i64
  %3063 = load i32, i32* %ECX
  %3064 = zext i32 %3063 to i64
  %3065 = load i64, i64* %PC
  %3066 = add i64 %3065, 2
  store i64 %3066, i64* %PC
  %3067 = sub i32 %3061, %3063
  %3068 = icmp ult i32 %3061, %3063
  %3069 = zext i1 %3068 to i8
  %3070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3069, i8* %3070, align 1, !tbaa !2432
  %3071 = and i32 %3067, 255
  %3072 = call i32 @llvm.ctpop.i32(i32 %3071) #17
  %3073 = trunc i32 %3072 to i8
  %3074 = and i8 %3073, 1
  %3075 = xor i8 %3074, 1
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3075, i8* %3076, align 1, !tbaa !2446
  %3077 = xor i64 %3064, %3062
  %3078 = trunc i64 %3077 to i32
  %3079 = xor i32 %3078, %3067
  %3080 = lshr i32 %3079, 4
  %3081 = trunc i32 %3080 to i8
  %3082 = and i8 %3081, 1
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3082, i8* %3083, align 1, !tbaa !2447
  %3084 = icmp eq i32 %3067, 0
  %3085 = zext i1 %3084 to i8
  %3086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3085, i8* %3086, align 1, !tbaa !2448
  %3087 = lshr i32 %3067, 31
  %3088 = trunc i32 %3087 to i8
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3088, i8* %3089, align 1, !tbaa !2449
  %3090 = lshr i32 %3061, 31
  %3091 = lshr i32 %3063, 31
  %3092 = xor i32 %3091, %3090
  %3093 = xor i32 %3087, %3090
  %3094 = add nuw nsw i32 %3093, %3092
  %3095 = icmp eq i32 %3094, 2
  %3096 = zext i1 %3095 to i8
  %3097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3096, i8* %3097, align 1, !tbaa !2450
  %3098 = load i64, i64* %PC
  %3099 = add i64 %3098, 775
  %3100 = load i64, i64* %PC
  %3101 = add i64 %3100, 6
  %3102 = load i64, i64* %PC
  %3103 = add i64 %3102, 6
  store i64 %3103, i64* %PC
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3105 = load i8, i8* %3104, align 1, !tbaa !2449
  %3106 = icmp ne i8 %3105, 0
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3108 = load i8, i8* %3107, align 1, !tbaa !2450
  %3109 = icmp ne i8 %3108, 0
  %3110 = xor i1 %3106, %3109
  %3111 = xor i1 %3110, true
  %3112 = zext i1 %3111 to i8
  store i8 %3112, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3114 = select i1 %3110, i64 %3101, i64 %3099
  store i64 %3114, i64* %3113, align 8, !tbaa !2428
  %3115 = load i8, i8* %BRANCH_TAKEN
  %3116 = icmp eq i8 %3115, 1
  br i1 %3116, label %block_403c42, label %block_403941

block_4035c2:                                     ; preds = %block_4035b1
  %3117 = sub i64 %5115, 28
  %3118 = load i64, i64* %PC
  %3119 = add i64 %3118, 3
  store i64 %3119, i64* %PC
  %3120 = inttoptr i64 %3117 to i32*
  %3121 = load i32, i32* %3120
  %3122 = zext i32 %3121 to i64
  store i64 %3122, i64* %RAX, align 8, !tbaa !2428
  %3123 = load i64, i64* %RAX
  %3124 = load i64, i64* %RBP
  %3125 = sub i64 %3124, 8
  %3126 = load i64, i64* %PC
  %3127 = add i64 %3126, 3
  store i64 %3127, i64* %PC
  %3128 = trunc i64 %3123 to i32
  %3129 = inttoptr i64 %3125 to i32*
  %3130 = load i32, i32* %3129
  %3131 = add i32 %3130, %3128
  %3132 = zext i32 %3131 to i64
  store i64 %3132, i64* %RAX, align 8, !tbaa !2428
  %3133 = icmp ult i32 %3131, %3128
  %3134 = icmp ult i32 %3131, %3130
  %3135 = or i1 %3133, %3134
  %3136 = zext i1 %3135 to i8
  %3137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3136, i8* %3137, align 1, !tbaa !2432
  %3138 = and i32 %3131, 255
  %3139 = call i32 @llvm.ctpop.i32(i32 %3138) #17
  %3140 = trunc i32 %3139 to i8
  %3141 = and i8 %3140, 1
  %3142 = xor i8 %3141, 1
  %3143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3142, i8* %3143, align 1, !tbaa !2446
  %3144 = xor i32 %3130, %3128
  %3145 = xor i32 %3144, %3131
  %3146 = lshr i32 %3145, 4
  %3147 = trunc i32 %3146 to i8
  %3148 = and i8 %3147, 1
  %3149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3148, i8* %3149, align 1, !tbaa !2447
  %3150 = icmp eq i32 %3131, 0
  %3151 = zext i1 %3150 to i8
  %3152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3151, i8* %3152, align 1, !tbaa !2448
  %3153 = lshr i32 %3131, 31
  %3154 = trunc i32 %3153 to i8
  %3155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3154, i8* %3155, align 1, !tbaa !2449
  %3156 = lshr i32 %3128, 31
  %3157 = lshr i32 %3130, 31
  %3158 = xor i32 %3153, %3156
  %3159 = xor i32 %3153, %3157
  %3160 = add nuw nsw i32 %3158, %3159
  %3161 = icmp eq i32 %3160, 2
  %3162 = zext i1 %3161 to i8
  %3163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3162, i8* %3163, align 1, !tbaa !2450
  %3164 = load i64, i64* %RBP
  %3165 = sub i64 %3164, 32
  %3166 = load i32, i32* %EAX
  %3167 = zext i32 %3166 to i64
  %3168 = load i64, i64* %PC
  %3169 = add i64 %3168, 3
  store i64 %3169, i64* %PC
  %3170 = inttoptr i64 %3165 to i32*
  store i32 %3166, i32* %3170
  %3171 = load i64, i64* %RBP
  %3172 = sub i64 %3171, 32
  %3173 = load i64, i64* %PC
  %3174 = add i64 %3173, 3
  store i64 %3174, i64* %PC
  %3175 = inttoptr i64 %3172 to i32*
  %3176 = load i32, i32* %3175
  %3177 = zext i32 %3176 to i64
  store i64 %3177, i64* %RAX, align 8, !tbaa !2428
  %3178 = load i64, i64* %RAX
  %3179 = load i64, i64* %RBP
  %3180 = sub i64 %3179, 8
  %3181 = load i64, i64* %PC
  %3182 = add i64 %3181, 3
  store i64 %3182, i64* %PC
  %3183 = trunc i64 %3178 to i32
  %3184 = inttoptr i64 %3180 to i32*
  %3185 = load i32, i32* %3184
  %3186 = add i32 %3185, %3183
  %3187 = zext i32 %3186 to i64
  store i64 %3187, i64* %RAX, align 8, !tbaa !2428
  %3188 = icmp ult i32 %3186, %3183
  %3189 = icmp ult i32 %3186, %3185
  %3190 = or i1 %3188, %3189
  %3191 = zext i1 %3190 to i8
  %3192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3191, i8* %3192, align 1, !tbaa !2432
  %3193 = and i32 %3186, 255
  %3194 = call i32 @llvm.ctpop.i32(i32 %3193) #17
  %3195 = trunc i32 %3194 to i8
  %3196 = and i8 %3195, 1
  %3197 = xor i8 %3196, 1
  %3198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3197, i8* %3198, align 1, !tbaa !2446
  %3199 = xor i32 %3185, %3183
  %3200 = xor i32 %3199, %3186
  %3201 = lshr i32 %3200, 4
  %3202 = trunc i32 %3201 to i8
  %3203 = and i8 %3202, 1
  %3204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3203, i8* %3204, align 1, !tbaa !2447
  %3205 = icmp eq i32 %3186, 0
  %3206 = zext i1 %3205 to i8
  %3207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3206, i8* %3207, align 1, !tbaa !2448
  %3208 = lshr i32 %3186, 31
  %3209 = trunc i32 %3208 to i8
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3209, i8* %3210, align 1, !tbaa !2449
  %3211 = lshr i32 %3183, 31
  %3212 = lshr i32 %3185, 31
  %3213 = xor i32 %3208, %3211
  %3214 = xor i32 %3208, %3212
  %3215 = add nuw nsw i32 %3213, %3214
  %3216 = icmp eq i32 %3215, 2
  %3217 = zext i1 %3216 to i8
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3217, i8* %3218, align 1, !tbaa !2450
  %3219 = load i64, i64* %RBP
  %3220 = sub i64 %3219, 36
  %3221 = load i32, i32* %EAX
  %3222 = zext i32 %3221 to i64
  %3223 = load i64, i64* %PC
  %3224 = add i64 %3223, 3
  store i64 %3224, i64* %PC
  %3225 = inttoptr i64 %3220 to i32*
  store i32 %3221, i32* %3225
  %3226 = load i64, i64* %RBP
  %3227 = sub i64 %3226, 36
  %3228 = load i64, i64* %PC
  %3229 = add i64 %3228, 3
  store i64 %3229, i64* %PC
  %3230 = inttoptr i64 %3227 to i32*
  %3231 = load i32, i32* %3230
  %3232 = zext i32 %3231 to i64
  store i64 %3232, i64* %RAX, align 8, !tbaa !2428
  %3233 = load i64, i64* %RAX
  %3234 = load i64, i64* %RBP
  %3235 = sub i64 %3234, 8
  %3236 = load i64, i64* %PC
  %3237 = add i64 %3236, 3
  store i64 %3237, i64* %PC
  %3238 = trunc i64 %3233 to i32
  %3239 = inttoptr i64 %3235 to i32*
  %3240 = load i32, i32* %3239
  %3241 = add i32 %3240, %3238
  %3242 = zext i32 %3241 to i64
  store i64 %3242, i64* %RAX, align 8, !tbaa !2428
  %3243 = icmp ult i32 %3241, %3238
  %3244 = icmp ult i32 %3241, %3240
  %3245 = or i1 %3243, %3244
  %3246 = zext i1 %3245 to i8
  %3247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3246, i8* %3247, align 1, !tbaa !2432
  %3248 = and i32 %3241, 255
  %3249 = call i32 @llvm.ctpop.i32(i32 %3248) #17
  %3250 = trunc i32 %3249 to i8
  %3251 = and i8 %3250, 1
  %3252 = xor i8 %3251, 1
  %3253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3252, i8* %3253, align 1, !tbaa !2446
  %3254 = xor i32 %3240, %3238
  %3255 = xor i32 %3254, %3241
  %3256 = lshr i32 %3255, 4
  %3257 = trunc i32 %3256 to i8
  %3258 = and i8 %3257, 1
  %3259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3258, i8* %3259, align 1, !tbaa !2447
  %3260 = icmp eq i32 %3241, 0
  %3261 = zext i1 %3260 to i8
  %3262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3261, i8* %3262, align 1, !tbaa !2448
  %3263 = lshr i32 %3241, 31
  %3264 = trunc i32 %3263 to i8
  %3265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3264, i8* %3265, align 1, !tbaa !2449
  %3266 = lshr i32 %3238, 31
  %3267 = lshr i32 %3240, 31
  %3268 = xor i32 %3263, %3266
  %3269 = xor i32 %3263, %3267
  %3270 = add nuw nsw i32 %3268, %3269
  %3271 = icmp eq i32 %3270, 2
  %3272 = zext i1 %3271 to i8
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3272, i8* %3273, align 1, !tbaa !2450
  %3274 = load i64, i64* %RBP
  %3275 = sub i64 %3274, 40
  %3276 = load i32, i32* %EAX
  %3277 = zext i32 %3276 to i64
  %3278 = load i64, i64* %PC
  %3279 = add i64 %3278, 3
  store i64 %3279, i64* %PC
  %3280 = inttoptr i64 %3275 to i32*
  store i32 %3276, i32* %3280
  %3281 = load i64, i64* %RBP
  %3282 = sub i64 %3281, 16
  %3283 = load i64, i64* %PC
  %3284 = add i64 %3283, 4
  store i64 %3284, i64* %PC
  %3285 = inttoptr i64 %3282 to i64*
  %3286 = load i64, i64* %3285
  store i64 %3286, i64* %RCX, align 8, !tbaa !2428
  %3287 = load i64, i64* %RBP
  %3288 = sub i64 %3287, 28
  %3289 = load i64, i64* %PC
  %3290 = add i64 %3289, 4
  store i64 %3290, i64* %PC
  %3291 = inttoptr i64 %3288 to i32*
  %3292 = load i32, i32* %3291
  %3293 = sext i32 %3292 to i64
  store i64 %3293, i64* %RDX, align 8, !tbaa !2428
  %3294 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3295 = load i64, i64* %RCX
  %3296 = load i64, i64* %RDX
  %3297 = mul i64 %3296, 8
  %3298 = add i64 %3297, %3295
  %3299 = load i64, i64* %PC
  %3300 = add i64 %3299, 5
  store i64 %3300, i64* %PC
  %3301 = inttoptr i64 %3298 to double*
  %3302 = load double, double* %3301
  %3303 = bitcast i8* %3294 to double*
  store double %3302, double* %3303, align 1, !tbaa !2452
  %3304 = getelementptr inbounds i8, i8* %3294, i64 8
  %3305 = bitcast i8* %3304 to double*
  store double 0.000000e+00, double* %3305, align 1, !tbaa !2452
  %3306 = load i64, i64* %RBP
  %3307 = sub i64 %3306, 16
  %3308 = load i64, i64* %PC
  %3309 = add i64 %3308, 4
  store i64 %3309, i64* %PC
  %3310 = inttoptr i64 %3307 to i64*
  %3311 = load i64, i64* %3310
  store i64 %3311, i64* %RCX, align 8, !tbaa !2428
  %3312 = load i64, i64* %RBP
  %3313 = sub i64 %3312, 32
  %3314 = load i64, i64* %PC
  %3315 = add i64 %3314, 4
  store i64 %3315, i64* %PC
  %3316 = inttoptr i64 %3313 to i32*
  %3317 = load i32, i32* %3316
  %3318 = sext i32 %3317 to i64
  store i64 %3318, i64* %RDX, align 8, !tbaa !2428
  %3319 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3320 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3321 = load i64, i64* %RCX
  %3322 = load i64, i64* %RDX
  %3323 = mul i64 %3322, 8
  %3324 = add i64 %3323, %3321
  %3325 = load i64, i64* %PC
  %3326 = add i64 %3325, 5
  store i64 %3326, i64* %PC
  %3327 = bitcast i8* %3320 to double*
  %3328 = load double, double* %3327, align 1
  %3329 = getelementptr inbounds i8, i8* %3320, i64 8
  %3330 = bitcast i8* %3329 to i64*
  %3331 = load i64, i64* %3330, align 1
  %3332 = inttoptr i64 %3324 to double*
  %3333 = load double, double* %3332
  %3334 = fadd double %3328, %3333
  %3335 = bitcast i8* %3319 to double*
  store double %3334, double* %3335, align 1, !tbaa !2452
  %3336 = getelementptr inbounds i8, i8* %3319, i64 8
  %3337 = bitcast i8* %3336 to i64*
  store i64 %3331, i64* %3337, align 1, !tbaa !2452
  %3338 = load i64, i64* %RBP
  %3339 = sub i64 %3338, 120
  %3340 = bitcast %union.vec128_t* %XMM0 to i8*
  %3341 = load i64, i64* %PC
  %3342 = add i64 %3341, 5
  store i64 %3342, i64* %PC
  %3343 = bitcast i8* %3340 to double*
  %3344 = load double, double* %3343, align 1
  %3345 = inttoptr i64 %3339 to double*
  store double %3344, double* %3345
  %3346 = load i64, i64* %RBP
  %3347 = sub i64 %3346, 16
  %3348 = load i64, i64* %PC
  %3349 = add i64 %3348, 4
  store i64 %3349, i64* %PC
  %3350 = inttoptr i64 %3347 to i64*
  %3351 = load i64, i64* %3350
  store i64 %3351, i64* %RCX, align 8, !tbaa !2428
  %3352 = load i64, i64* %RBP
  %3353 = sub i64 %3352, 28
  %3354 = load i64, i64* %PC
  %3355 = add i64 %3354, 3
  store i64 %3355, i64* %PC
  %3356 = inttoptr i64 %3353 to i32*
  %3357 = load i32, i32* %3356
  %3358 = zext i32 %3357 to i64
  store i64 %3358, i64* %RAX, align 8, !tbaa !2428
  %3359 = load i64, i64* %RAX
  %3360 = load i64, i64* %PC
  %3361 = add i64 %3360, 3
  store i64 %3361, i64* %PC
  %3362 = trunc i64 %3359 to i32
  %3363 = add i32 1, %3362
  %3364 = zext i32 %3363 to i64
  store i64 %3364, i64* %RAX, align 8, !tbaa !2428
  %3365 = icmp ult i32 %3363, %3362
  %3366 = icmp ult i32 %3363, 1
  %3367 = or i1 %3365, %3366
  %3368 = zext i1 %3367 to i8
  %3369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3368, i8* %3369, align 1, !tbaa !2432
  %3370 = and i32 %3363, 255
  %3371 = call i32 @llvm.ctpop.i32(i32 %3370) #17
  %3372 = trunc i32 %3371 to i8
  %3373 = and i8 %3372, 1
  %3374 = xor i8 %3373, 1
  %3375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3374, i8* %3375, align 1, !tbaa !2446
  %3376 = xor i64 1, %3359
  %3377 = trunc i64 %3376 to i32
  %3378 = xor i32 %3377, %3363
  %3379 = lshr i32 %3378, 4
  %3380 = trunc i32 %3379 to i8
  %3381 = and i8 %3380, 1
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3381, i8* %3382, align 1, !tbaa !2447
  %3383 = icmp eq i32 %3363, 0
  %3384 = zext i1 %3383 to i8
  %3385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3384, i8* %3385, align 1, !tbaa !2448
  %3386 = lshr i32 %3363, 31
  %3387 = trunc i32 %3386 to i8
  %3388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3387, i8* %3388, align 1, !tbaa !2449
  %3389 = lshr i32 %3362, 31
  %3390 = xor i32 %3386, %3389
  %3391 = add nuw nsw i32 %3390, %3386
  %3392 = icmp eq i32 %3391, 2
  %3393 = zext i1 %3392 to i8
  %3394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3393, i8* %3394, align 1, !tbaa !2450
  %3395 = load i32, i32* %EAX
  %3396 = zext i32 %3395 to i64
  %3397 = load i64, i64* %PC
  %3398 = add i64 %3397, 3
  store i64 %3398, i64* %PC
  %3399 = shl i64 %3396, 32
  %3400 = ashr exact i64 %3399, 32
  store i64 %3400, i64* %RDX, align 8, !tbaa !2428
  %3401 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3402 = load i64, i64* %RCX
  %3403 = load i64, i64* %RDX
  %3404 = mul i64 %3403, 8
  %3405 = add i64 %3404, %3402
  %3406 = load i64, i64* %PC
  %3407 = add i64 %3406, 5
  store i64 %3407, i64* %PC
  %3408 = inttoptr i64 %3405 to double*
  %3409 = load double, double* %3408
  %3410 = bitcast i8* %3401 to double*
  store double %3409, double* %3410, align 1, !tbaa !2452
  %3411 = getelementptr inbounds i8, i8* %3401, i64 8
  %3412 = bitcast i8* %3411 to double*
  store double 0.000000e+00, double* %3412, align 1, !tbaa !2452
  %3413 = load i64, i64* %RBP
  %3414 = sub i64 %3413, 16
  %3415 = load i64, i64* %PC
  %3416 = add i64 %3415, 4
  store i64 %3416, i64* %PC
  %3417 = inttoptr i64 %3414 to i64*
  %3418 = load i64, i64* %3417
  store i64 %3418, i64* %RCX, align 8, !tbaa !2428
  %3419 = load i64, i64* %RBP
  %3420 = sub i64 %3419, 32
  %3421 = load i64, i64* %PC
  %3422 = add i64 %3421, 3
  store i64 %3422, i64* %PC
  %3423 = inttoptr i64 %3420 to i32*
  %3424 = load i32, i32* %3423
  %3425 = zext i32 %3424 to i64
  store i64 %3425, i64* %RAX, align 8, !tbaa !2428
  %3426 = load i64, i64* %RAX
  %3427 = load i64, i64* %PC
  %3428 = add i64 %3427, 3
  store i64 %3428, i64* %PC
  %3429 = trunc i64 %3426 to i32
  %3430 = add i32 1, %3429
  %3431 = zext i32 %3430 to i64
  store i64 %3431, i64* %RAX, align 8, !tbaa !2428
  %3432 = icmp ult i32 %3430, %3429
  %3433 = icmp ult i32 %3430, 1
  %3434 = or i1 %3432, %3433
  %3435 = zext i1 %3434 to i8
  %3436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3435, i8* %3436, align 1, !tbaa !2432
  %3437 = and i32 %3430, 255
  %3438 = call i32 @llvm.ctpop.i32(i32 %3437) #17
  %3439 = trunc i32 %3438 to i8
  %3440 = and i8 %3439, 1
  %3441 = xor i8 %3440, 1
  %3442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3441, i8* %3442, align 1, !tbaa !2446
  %3443 = xor i64 1, %3426
  %3444 = trunc i64 %3443 to i32
  %3445 = xor i32 %3444, %3430
  %3446 = lshr i32 %3445, 4
  %3447 = trunc i32 %3446 to i8
  %3448 = and i8 %3447, 1
  %3449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3448, i8* %3449, align 1, !tbaa !2447
  %3450 = icmp eq i32 %3430, 0
  %3451 = zext i1 %3450 to i8
  %3452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3451, i8* %3452, align 1, !tbaa !2448
  %3453 = lshr i32 %3430, 31
  %3454 = trunc i32 %3453 to i8
  %3455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3454, i8* %3455, align 1, !tbaa !2449
  %3456 = lshr i32 %3429, 31
  %3457 = xor i32 %3453, %3456
  %3458 = add nuw nsw i32 %3457, %3453
  %3459 = icmp eq i32 %3458, 2
  %3460 = zext i1 %3459 to i8
  %3461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3460, i8* %3461, align 1, !tbaa !2450
  %3462 = load i32, i32* %EAX
  %3463 = zext i32 %3462 to i64
  %3464 = load i64, i64* %PC
  %3465 = add i64 %3464, 3
  store i64 %3465, i64* %PC
  %3466 = shl i64 %3463, 32
  %3467 = ashr exact i64 %3466, 32
  store i64 %3467, i64* %RDX, align 8, !tbaa !2428
  %3468 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3469 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3470 = load i64, i64* %RCX
  %3471 = load i64, i64* %RDX
  %3472 = mul i64 %3471, 8
  %3473 = add i64 %3472, %3470
  %3474 = load i64, i64* %PC
  %3475 = add i64 %3474, 5
  store i64 %3475, i64* %PC
  %3476 = bitcast i8* %3469 to double*
  %3477 = load double, double* %3476, align 1
  %3478 = getelementptr inbounds i8, i8* %3469, i64 8
  %3479 = bitcast i8* %3478 to i64*
  %3480 = load i64, i64* %3479, align 1
  %3481 = inttoptr i64 %3473 to double*
  %3482 = load double, double* %3481
  %3483 = fadd double %3477, %3482
  %3484 = bitcast i8* %3468 to double*
  store double %3483, double* %3484, align 1, !tbaa !2452
  %3485 = getelementptr inbounds i8, i8* %3468, i64 8
  %3486 = bitcast i8* %3485 to i64*
  store i64 %3480, i64* %3486, align 1, !tbaa !2452
  %3487 = load i64, i64* %RBP
  %3488 = sub i64 %3487, 128
  %3489 = bitcast %union.vec128_t* %XMM0 to i8*
  %3490 = load i64, i64* %PC
  %3491 = add i64 %3490, 5
  store i64 %3491, i64* %PC
  %3492 = bitcast i8* %3489 to double*
  %3493 = load double, double* %3492, align 1
  %3494 = inttoptr i64 %3488 to double*
  store double %3493, double* %3494
  %3495 = load i64, i64* %RBP
  %3496 = sub i64 %3495, 16
  %3497 = load i64, i64* %PC
  %3498 = add i64 %3497, 4
  store i64 %3498, i64* %PC
  %3499 = inttoptr i64 %3496 to i64*
  %3500 = load i64, i64* %3499
  store i64 %3500, i64* %RCX, align 8, !tbaa !2428
  %3501 = load i64, i64* %RBP
  %3502 = sub i64 %3501, 28
  %3503 = load i64, i64* %PC
  %3504 = add i64 %3503, 4
  store i64 %3504, i64* %PC
  %3505 = inttoptr i64 %3502 to i32*
  %3506 = load i32, i32* %3505
  %3507 = sext i32 %3506 to i64
  store i64 %3507, i64* %RDX, align 8, !tbaa !2428
  %3508 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3509 = load i64, i64* %RCX
  %3510 = load i64, i64* %RDX
  %3511 = mul i64 %3510, 8
  %3512 = add i64 %3511, %3509
  %3513 = load i64, i64* %PC
  %3514 = add i64 %3513, 5
  store i64 %3514, i64* %PC
  %3515 = inttoptr i64 %3512 to double*
  %3516 = load double, double* %3515
  %3517 = bitcast i8* %3508 to double*
  store double %3516, double* %3517, align 1, !tbaa !2452
  %3518 = getelementptr inbounds i8, i8* %3508, i64 8
  %3519 = bitcast i8* %3518 to double*
  store double 0.000000e+00, double* %3519, align 1, !tbaa !2452
  %3520 = load i64, i64* %RBP
  %3521 = sub i64 %3520, 16
  %3522 = load i64, i64* %PC
  %3523 = add i64 %3522, 4
  store i64 %3523, i64* %PC
  %3524 = inttoptr i64 %3521 to i64*
  %3525 = load i64, i64* %3524
  store i64 %3525, i64* %RCX, align 8, !tbaa !2428
  %3526 = load i64, i64* %RBP
  %3527 = sub i64 %3526, 32
  %3528 = load i64, i64* %PC
  %3529 = add i64 %3528, 4
  store i64 %3529, i64* %PC
  %3530 = inttoptr i64 %3527 to i32*
  %3531 = load i32, i32* %3530
  %3532 = sext i32 %3531 to i64
  store i64 %3532, i64* %RDX, align 8, !tbaa !2428
  %3533 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3534 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3535 = load i64, i64* %RCX
  %3536 = load i64, i64* %RDX
  %3537 = mul i64 %3536, 8
  %3538 = add i64 %3537, %3535
  %3539 = load i64, i64* %PC
  %3540 = add i64 %3539, 5
  store i64 %3540, i64* %PC
  %3541 = bitcast i8* %3534 to double*
  %3542 = load double, double* %3541, align 1
  %3543 = getelementptr inbounds i8, i8* %3534, i64 8
  %3544 = bitcast i8* %3543 to i64*
  %3545 = load i64, i64* %3544, align 1
  %3546 = inttoptr i64 %3538 to double*
  %3547 = load double, double* %3546
  %3548 = fsub double %3542, %3547
  %3549 = bitcast i8* %3533 to double*
  store double %3548, double* %3549, align 1, !tbaa !2452
  %3550 = getelementptr inbounds i8, i8* %3533, i64 8
  %3551 = bitcast i8* %3550 to i64*
  store i64 %3545, i64* %3551, align 1, !tbaa !2452
  %3552 = load i64, i64* %RBP
  %3553 = sub i64 %3552, 136
  %3554 = bitcast %union.vec128_t* %XMM0 to i8*
  %3555 = load i64, i64* %PC
  %3556 = add i64 %3555, 8
  store i64 %3556, i64* %PC
  %3557 = bitcast i8* %3554 to double*
  %3558 = load double, double* %3557, align 1
  %3559 = inttoptr i64 %3553 to double*
  store double %3558, double* %3559
  %3560 = load i64, i64* %RBP
  %3561 = sub i64 %3560, 16
  %3562 = load i64, i64* %PC
  %3563 = add i64 %3562, 4
  store i64 %3563, i64* %PC
  %3564 = inttoptr i64 %3561 to i64*
  %3565 = load i64, i64* %3564
  store i64 %3565, i64* %RCX, align 8, !tbaa !2428
  %3566 = load i64, i64* %RBP
  %3567 = sub i64 %3566, 28
  %3568 = load i64, i64* %PC
  %3569 = add i64 %3568, 3
  store i64 %3569, i64* %PC
  %3570 = inttoptr i64 %3567 to i32*
  %3571 = load i32, i32* %3570
  %3572 = zext i32 %3571 to i64
  store i64 %3572, i64* %RAX, align 8, !tbaa !2428
  %3573 = load i64, i64* %RAX
  %3574 = load i64, i64* %PC
  %3575 = add i64 %3574, 3
  store i64 %3575, i64* %PC
  %3576 = trunc i64 %3573 to i32
  %3577 = add i32 1, %3576
  %3578 = zext i32 %3577 to i64
  store i64 %3578, i64* %RAX, align 8, !tbaa !2428
  %3579 = icmp ult i32 %3577, %3576
  %3580 = icmp ult i32 %3577, 1
  %3581 = or i1 %3579, %3580
  %3582 = zext i1 %3581 to i8
  %3583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3582, i8* %3583, align 1, !tbaa !2432
  %3584 = and i32 %3577, 255
  %3585 = call i32 @llvm.ctpop.i32(i32 %3584) #17
  %3586 = trunc i32 %3585 to i8
  %3587 = and i8 %3586, 1
  %3588 = xor i8 %3587, 1
  %3589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3588, i8* %3589, align 1, !tbaa !2446
  %3590 = xor i64 1, %3573
  %3591 = trunc i64 %3590 to i32
  %3592 = xor i32 %3591, %3577
  %3593 = lshr i32 %3592, 4
  %3594 = trunc i32 %3593 to i8
  %3595 = and i8 %3594, 1
  %3596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3595, i8* %3596, align 1, !tbaa !2447
  %3597 = icmp eq i32 %3577, 0
  %3598 = zext i1 %3597 to i8
  %3599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3598, i8* %3599, align 1, !tbaa !2448
  %3600 = lshr i32 %3577, 31
  %3601 = trunc i32 %3600 to i8
  %3602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3601, i8* %3602, align 1, !tbaa !2449
  %3603 = lshr i32 %3576, 31
  %3604 = xor i32 %3600, %3603
  %3605 = add nuw nsw i32 %3604, %3600
  %3606 = icmp eq i32 %3605, 2
  %3607 = zext i1 %3606 to i8
  %3608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3607, i8* %3608, align 1, !tbaa !2450
  %3609 = load i32, i32* %EAX
  %3610 = zext i32 %3609 to i64
  %3611 = load i64, i64* %PC
  %3612 = add i64 %3611, 3
  store i64 %3612, i64* %PC
  %3613 = shl i64 %3610, 32
  %3614 = ashr exact i64 %3613, 32
  store i64 %3614, i64* %RDX, align 8, !tbaa !2428
  %3615 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3616 = load i64, i64* %RCX
  %3617 = load i64, i64* %RDX
  %3618 = mul i64 %3617, 8
  %3619 = add i64 %3618, %3616
  %3620 = load i64, i64* %PC
  %3621 = add i64 %3620, 5
  store i64 %3621, i64* %PC
  %3622 = inttoptr i64 %3619 to double*
  %3623 = load double, double* %3622
  %3624 = bitcast i8* %3615 to double*
  store double %3623, double* %3624, align 1, !tbaa !2452
  %3625 = getelementptr inbounds i8, i8* %3615, i64 8
  %3626 = bitcast i8* %3625 to double*
  store double 0.000000e+00, double* %3626, align 1, !tbaa !2452
  %3627 = load i64, i64* %RBP
  %3628 = sub i64 %3627, 16
  %3629 = load i64, i64* %PC
  %3630 = add i64 %3629, 4
  store i64 %3630, i64* %PC
  %3631 = inttoptr i64 %3628 to i64*
  %3632 = load i64, i64* %3631
  store i64 %3632, i64* %RCX, align 8, !tbaa !2428
  %3633 = load i64, i64* %RBP
  %3634 = sub i64 %3633, 32
  %3635 = load i64, i64* %PC
  %3636 = add i64 %3635, 3
  store i64 %3636, i64* %PC
  %3637 = inttoptr i64 %3634 to i32*
  %3638 = load i32, i32* %3637
  %3639 = zext i32 %3638 to i64
  store i64 %3639, i64* %RAX, align 8, !tbaa !2428
  %3640 = load i64, i64* %RAX
  %3641 = load i64, i64* %PC
  %3642 = add i64 %3641, 3
  store i64 %3642, i64* %PC
  %3643 = trunc i64 %3640 to i32
  %3644 = add i32 1, %3643
  %3645 = zext i32 %3644 to i64
  store i64 %3645, i64* %RAX, align 8, !tbaa !2428
  %3646 = icmp ult i32 %3644, %3643
  %3647 = icmp ult i32 %3644, 1
  %3648 = or i1 %3646, %3647
  %3649 = zext i1 %3648 to i8
  %3650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3649, i8* %3650, align 1, !tbaa !2432
  %3651 = and i32 %3644, 255
  %3652 = call i32 @llvm.ctpop.i32(i32 %3651) #17
  %3653 = trunc i32 %3652 to i8
  %3654 = and i8 %3653, 1
  %3655 = xor i8 %3654, 1
  %3656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3655, i8* %3656, align 1, !tbaa !2446
  %3657 = xor i64 1, %3640
  %3658 = trunc i64 %3657 to i32
  %3659 = xor i32 %3658, %3644
  %3660 = lshr i32 %3659, 4
  %3661 = trunc i32 %3660 to i8
  %3662 = and i8 %3661, 1
  %3663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3662, i8* %3663, align 1, !tbaa !2447
  %3664 = icmp eq i32 %3644, 0
  %3665 = zext i1 %3664 to i8
  %3666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3665, i8* %3666, align 1, !tbaa !2448
  %3667 = lshr i32 %3644, 31
  %3668 = trunc i32 %3667 to i8
  %3669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3668, i8* %3669, align 1, !tbaa !2449
  %3670 = lshr i32 %3643, 31
  %3671 = xor i32 %3667, %3670
  %3672 = add nuw nsw i32 %3671, %3667
  %3673 = icmp eq i32 %3672, 2
  %3674 = zext i1 %3673 to i8
  %3675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3674, i8* %3675, align 1, !tbaa !2450
  %3676 = load i32, i32* %EAX
  %3677 = zext i32 %3676 to i64
  %3678 = load i64, i64* %PC
  %3679 = add i64 %3678, 3
  store i64 %3679, i64* %PC
  %3680 = shl i64 %3677, 32
  %3681 = ashr exact i64 %3680, 32
  store i64 %3681, i64* %RDX, align 8, !tbaa !2428
  %3682 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3684 = load i64, i64* %RCX
  %3685 = load i64, i64* %RDX
  %3686 = mul i64 %3685, 8
  %3687 = add i64 %3686, %3684
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 5
  store i64 %3689, i64* %PC
  %3690 = bitcast i8* %3683 to double*
  %3691 = load double, double* %3690, align 1
  %3692 = getelementptr inbounds i8, i8* %3683, i64 8
  %3693 = bitcast i8* %3692 to i64*
  %3694 = load i64, i64* %3693, align 1
  %3695 = inttoptr i64 %3687 to double*
  %3696 = load double, double* %3695
  %3697 = fsub double %3691, %3696
  %3698 = bitcast i8* %3682 to double*
  store double %3697, double* %3698, align 1, !tbaa !2452
  %3699 = getelementptr inbounds i8, i8* %3682, i64 8
  %3700 = bitcast i8* %3699 to i64*
  store i64 %3694, i64* %3700, align 1, !tbaa !2452
  %3701 = load i64, i64* %RBP
  %3702 = sub i64 %3701, 144
  %3703 = bitcast %union.vec128_t* %XMM0 to i8*
  %3704 = load i64, i64* %PC
  %3705 = add i64 %3704, 8
  store i64 %3705, i64* %PC
  %3706 = bitcast i8* %3703 to double*
  %3707 = load double, double* %3706, align 1
  %3708 = inttoptr i64 %3702 to double*
  store double %3707, double* %3708
  %3709 = load i64, i64* %RBP
  %3710 = sub i64 %3709, 16
  %3711 = load i64, i64* %PC
  %3712 = add i64 %3711, 4
  store i64 %3712, i64* %PC
  %3713 = inttoptr i64 %3710 to i64*
  %3714 = load i64, i64* %3713
  store i64 %3714, i64* %RCX, align 8, !tbaa !2428
  %3715 = load i64, i64* %RBP
  %3716 = sub i64 %3715, 36
  %3717 = load i64, i64* %PC
  %3718 = add i64 %3717, 4
  store i64 %3718, i64* %PC
  %3719 = inttoptr i64 %3716 to i32*
  %3720 = load i32, i32* %3719
  %3721 = sext i32 %3720 to i64
  store i64 %3721, i64* %RDX, align 8, !tbaa !2428
  %3722 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3723 = load i64, i64* %RCX
  %3724 = load i64, i64* %RDX
  %3725 = mul i64 %3724, 8
  %3726 = add i64 %3725, %3723
  %3727 = load i64, i64* %PC
  %3728 = add i64 %3727, 5
  store i64 %3728, i64* %PC
  %3729 = inttoptr i64 %3726 to double*
  %3730 = load double, double* %3729
  %3731 = bitcast i8* %3722 to double*
  store double %3730, double* %3731, align 1, !tbaa !2452
  %3732 = getelementptr inbounds i8, i8* %3722, i64 8
  %3733 = bitcast i8* %3732 to double*
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3734 = load i64, i64* %RBP
  %3735 = sub i64 %3734, 16
  %3736 = load i64, i64* %PC
  %3737 = add i64 %3736, 4
  store i64 %3737, i64* %PC
  %3738 = inttoptr i64 %3735 to i64*
  %3739 = load i64, i64* %3738
  store i64 %3739, i64* %RCX, align 8, !tbaa !2428
  %3740 = load i64, i64* %RBP
  %3741 = sub i64 %3740, 40
  %3742 = load i64, i64* %PC
  %3743 = add i64 %3742, 4
  store i64 %3743, i64* %PC
  %3744 = inttoptr i64 %3741 to i32*
  %3745 = load i32, i32* %3744
  %3746 = sext i32 %3745 to i64
  store i64 %3746, i64* %RDX, align 8, !tbaa !2428
  %3747 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3748 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3749 = load i64, i64* %RCX
  %3750 = load i64, i64* %RDX
  %3751 = mul i64 %3750, 8
  %3752 = add i64 %3751, %3749
  %3753 = load i64, i64* %PC
  %3754 = add i64 %3753, 5
  store i64 %3754, i64* %PC
  %3755 = bitcast i8* %3748 to double*
  %3756 = load double, double* %3755, align 1
  %3757 = getelementptr inbounds i8, i8* %3748, i64 8
  %3758 = bitcast i8* %3757 to i64*
  %3759 = load i64, i64* %3758, align 1
  %3760 = inttoptr i64 %3752 to double*
  %3761 = load double, double* %3760
  %3762 = fadd double %3756, %3761
  %3763 = bitcast i8* %3747 to double*
  store double %3762, double* %3763, align 1, !tbaa !2452
  %3764 = getelementptr inbounds i8, i8* %3747, i64 8
  %3765 = bitcast i8* %3764 to i64*
  store i64 %3759, i64* %3765, align 1, !tbaa !2452
  %3766 = load i64, i64* %RBP
  %3767 = sub i64 %3766, 152
  %3768 = bitcast %union.vec128_t* %XMM0 to i8*
  %3769 = load i64, i64* %PC
  %3770 = add i64 %3769, 8
  store i64 %3770, i64* %PC
  %3771 = bitcast i8* %3768 to double*
  %3772 = load double, double* %3771, align 1
  %3773 = inttoptr i64 %3767 to double*
  store double %3772, double* %3773
  %3774 = load i64, i64* %RBP
  %3775 = sub i64 %3774, 16
  %3776 = load i64, i64* %PC
  %3777 = add i64 %3776, 4
  store i64 %3777, i64* %PC
  %3778 = inttoptr i64 %3775 to i64*
  %3779 = load i64, i64* %3778
  store i64 %3779, i64* %RCX, align 8, !tbaa !2428
  %3780 = load i64, i64* %RBP
  %3781 = sub i64 %3780, 36
  %3782 = load i64, i64* %PC
  %3783 = add i64 %3782, 3
  store i64 %3783, i64* %PC
  %3784 = inttoptr i64 %3781 to i32*
  %3785 = load i32, i32* %3784
  %3786 = zext i32 %3785 to i64
  store i64 %3786, i64* %RAX, align 8, !tbaa !2428
  %3787 = load i64, i64* %RAX
  %3788 = load i64, i64* %PC
  %3789 = add i64 %3788, 3
  store i64 %3789, i64* %PC
  %3790 = trunc i64 %3787 to i32
  %3791 = add i32 1, %3790
  %3792 = zext i32 %3791 to i64
  store i64 %3792, i64* %RAX, align 8, !tbaa !2428
  %3793 = icmp ult i32 %3791, %3790
  %3794 = icmp ult i32 %3791, 1
  %3795 = or i1 %3793, %3794
  %3796 = zext i1 %3795 to i8
  %3797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3796, i8* %3797, align 1, !tbaa !2432
  %3798 = and i32 %3791, 255
  %3799 = call i32 @llvm.ctpop.i32(i32 %3798) #17
  %3800 = trunc i32 %3799 to i8
  %3801 = and i8 %3800, 1
  %3802 = xor i8 %3801, 1
  %3803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3802, i8* %3803, align 1, !tbaa !2446
  %3804 = xor i64 1, %3787
  %3805 = trunc i64 %3804 to i32
  %3806 = xor i32 %3805, %3791
  %3807 = lshr i32 %3806, 4
  %3808 = trunc i32 %3807 to i8
  %3809 = and i8 %3808, 1
  %3810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3809, i8* %3810, align 1, !tbaa !2447
  %3811 = icmp eq i32 %3791, 0
  %3812 = zext i1 %3811 to i8
  %3813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3812, i8* %3813, align 1, !tbaa !2448
  %3814 = lshr i32 %3791, 31
  %3815 = trunc i32 %3814 to i8
  %3816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3815, i8* %3816, align 1, !tbaa !2449
  %3817 = lshr i32 %3790, 31
  %3818 = xor i32 %3814, %3817
  %3819 = add nuw nsw i32 %3818, %3814
  %3820 = icmp eq i32 %3819, 2
  %3821 = zext i1 %3820 to i8
  %3822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3821, i8* %3822, align 1, !tbaa !2450
  %3823 = load i32, i32* %EAX
  %3824 = zext i32 %3823 to i64
  %3825 = load i64, i64* %PC
  %3826 = add i64 %3825, 3
  store i64 %3826, i64* %PC
  %3827 = shl i64 %3824, 32
  %3828 = ashr exact i64 %3827, 32
  store i64 %3828, i64* %RDX, align 8, !tbaa !2428
  %3829 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3830 = load i64, i64* %RCX
  %3831 = load i64, i64* %RDX
  %3832 = mul i64 %3831, 8
  %3833 = add i64 %3832, %3830
  %3834 = load i64, i64* %PC
  %3835 = add i64 %3834, 5
  store i64 %3835, i64* %PC
  %3836 = inttoptr i64 %3833 to double*
  %3837 = load double, double* %3836
  %3838 = bitcast i8* %3829 to double*
  store double %3837, double* %3838, align 1, !tbaa !2452
  %3839 = getelementptr inbounds i8, i8* %3829, i64 8
  %3840 = bitcast i8* %3839 to double*
  store double 0.000000e+00, double* %3840, align 1, !tbaa !2452
  %3841 = load i64, i64* %RBP
  %3842 = sub i64 %3841, 16
  %3843 = load i64, i64* %PC
  %3844 = add i64 %3843, 4
  store i64 %3844, i64* %PC
  %3845 = inttoptr i64 %3842 to i64*
  %3846 = load i64, i64* %3845
  store i64 %3846, i64* %RCX, align 8, !tbaa !2428
  %3847 = load i64, i64* %RBP
  %3848 = sub i64 %3847, 40
  %3849 = load i64, i64* %PC
  %3850 = add i64 %3849, 3
  store i64 %3850, i64* %PC
  %3851 = inttoptr i64 %3848 to i32*
  %3852 = load i32, i32* %3851
  %3853 = zext i32 %3852 to i64
  store i64 %3853, i64* %RAX, align 8, !tbaa !2428
  %3854 = load i64, i64* %RAX
  %3855 = load i64, i64* %PC
  %3856 = add i64 %3855, 3
  store i64 %3856, i64* %PC
  %3857 = trunc i64 %3854 to i32
  %3858 = add i32 1, %3857
  %3859 = zext i32 %3858 to i64
  store i64 %3859, i64* %RAX, align 8, !tbaa !2428
  %3860 = icmp ult i32 %3858, %3857
  %3861 = icmp ult i32 %3858, 1
  %3862 = or i1 %3860, %3861
  %3863 = zext i1 %3862 to i8
  %3864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3863, i8* %3864, align 1, !tbaa !2432
  %3865 = and i32 %3858, 255
  %3866 = call i32 @llvm.ctpop.i32(i32 %3865) #17
  %3867 = trunc i32 %3866 to i8
  %3868 = and i8 %3867, 1
  %3869 = xor i8 %3868, 1
  %3870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3869, i8* %3870, align 1, !tbaa !2446
  %3871 = xor i64 1, %3854
  %3872 = trunc i64 %3871 to i32
  %3873 = xor i32 %3872, %3858
  %3874 = lshr i32 %3873, 4
  %3875 = trunc i32 %3874 to i8
  %3876 = and i8 %3875, 1
  %3877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3876, i8* %3877, align 1, !tbaa !2447
  %3878 = icmp eq i32 %3858, 0
  %3879 = zext i1 %3878 to i8
  %3880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3879, i8* %3880, align 1, !tbaa !2448
  %3881 = lshr i32 %3858, 31
  %3882 = trunc i32 %3881 to i8
  %3883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3882, i8* %3883, align 1, !tbaa !2449
  %3884 = lshr i32 %3857, 31
  %3885 = xor i32 %3881, %3884
  %3886 = add nuw nsw i32 %3885, %3881
  %3887 = icmp eq i32 %3886, 2
  %3888 = zext i1 %3887 to i8
  %3889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3888, i8* %3889, align 1, !tbaa !2450
  %3890 = load i32, i32* %EAX
  %3891 = zext i32 %3890 to i64
  %3892 = load i64, i64* %PC
  %3893 = add i64 %3892, 3
  store i64 %3893, i64* %PC
  %3894 = shl i64 %3891, 32
  %3895 = ashr exact i64 %3894, 32
  store i64 %3895, i64* %RDX, align 8, !tbaa !2428
  %3896 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3897 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3898 = load i64, i64* %RCX
  %3899 = load i64, i64* %RDX
  %3900 = mul i64 %3899, 8
  %3901 = add i64 %3900, %3898
  %3902 = load i64, i64* %PC
  %3903 = add i64 %3902, 5
  store i64 %3903, i64* %PC
  %3904 = bitcast i8* %3897 to double*
  %3905 = load double, double* %3904, align 1
  %3906 = getelementptr inbounds i8, i8* %3897, i64 8
  %3907 = bitcast i8* %3906 to i64*
  %3908 = load i64, i64* %3907, align 1
  %3909 = inttoptr i64 %3901 to double*
  %3910 = load double, double* %3909
  %3911 = fadd double %3905, %3910
  %3912 = bitcast i8* %3896 to double*
  store double %3911, double* %3912, align 1, !tbaa !2452
  %3913 = getelementptr inbounds i8, i8* %3896, i64 8
  %3914 = bitcast i8* %3913 to i64*
  store i64 %3908, i64* %3914, align 1, !tbaa !2452
  %3915 = load i64, i64* %RBP
  %3916 = sub i64 %3915, 160
  %3917 = bitcast %union.vec128_t* %XMM0 to i8*
  %3918 = load i64, i64* %PC
  %3919 = add i64 %3918, 8
  store i64 %3919, i64* %PC
  %3920 = bitcast i8* %3917 to double*
  %3921 = load double, double* %3920, align 1
  %3922 = inttoptr i64 %3916 to double*
  store double %3921, double* %3922
  %3923 = load i64, i64* %RBP
  %3924 = sub i64 %3923, 16
  %3925 = load i64, i64* %PC
  %3926 = add i64 %3925, 4
  store i64 %3926, i64* %PC
  %3927 = inttoptr i64 %3924 to i64*
  %3928 = load i64, i64* %3927
  store i64 %3928, i64* %RCX, align 8, !tbaa !2428
  %3929 = load i64, i64* %RBP
  %3930 = sub i64 %3929, 36
  %3931 = load i64, i64* %PC
  %3932 = add i64 %3931, 4
  store i64 %3932, i64* %PC
  %3933 = inttoptr i64 %3930 to i32*
  %3934 = load i32, i32* %3933
  %3935 = sext i32 %3934 to i64
  store i64 %3935, i64* %RDX, align 8, !tbaa !2428
  %3936 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3937 = load i64, i64* %RCX
  %3938 = load i64, i64* %RDX
  %3939 = mul i64 %3938, 8
  %3940 = add i64 %3939, %3937
  %3941 = load i64, i64* %PC
  %3942 = add i64 %3941, 5
  store i64 %3942, i64* %PC
  %3943 = inttoptr i64 %3940 to double*
  %3944 = load double, double* %3943
  %3945 = bitcast i8* %3936 to double*
  store double %3944, double* %3945, align 1, !tbaa !2452
  %3946 = getelementptr inbounds i8, i8* %3936, i64 8
  %3947 = bitcast i8* %3946 to double*
  store double 0.000000e+00, double* %3947, align 1, !tbaa !2452
  %3948 = load i64, i64* %RBP
  %3949 = sub i64 %3948, 16
  %3950 = load i64, i64* %PC
  %3951 = add i64 %3950, 4
  store i64 %3951, i64* %PC
  %3952 = inttoptr i64 %3949 to i64*
  %3953 = load i64, i64* %3952
  store i64 %3953, i64* %RCX, align 8, !tbaa !2428
  %3954 = load i64, i64* %RBP
  %3955 = sub i64 %3954, 40
  %3956 = load i64, i64* %PC
  %3957 = add i64 %3956, 4
  store i64 %3957, i64* %PC
  %3958 = inttoptr i64 %3955 to i32*
  %3959 = load i32, i32* %3958
  %3960 = sext i32 %3959 to i64
  store i64 %3960, i64* %RDX, align 8, !tbaa !2428
  %3961 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3962 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3963 = load i64, i64* %RCX
  %3964 = load i64, i64* %RDX
  %3965 = mul i64 %3964, 8
  %3966 = add i64 %3965, %3963
  %3967 = load i64, i64* %PC
  %3968 = add i64 %3967, 5
  store i64 %3968, i64* %PC
  %3969 = bitcast i8* %3962 to double*
  %3970 = load double, double* %3969, align 1
  %3971 = getelementptr inbounds i8, i8* %3962, i64 8
  %3972 = bitcast i8* %3971 to i64*
  %3973 = load i64, i64* %3972, align 1
  %3974 = inttoptr i64 %3966 to double*
  %3975 = load double, double* %3974
  %3976 = fsub double %3970, %3975
  %3977 = bitcast i8* %3961 to double*
  store double %3976, double* %3977, align 1, !tbaa !2452
  %3978 = getelementptr inbounds i8, i8* %3961, i64 8
  %3979 = bitcast i8* %3978 to i64*
  store i64 %3973, i64* %3979, align 1, !tbaa !2452
  %3980 = load i64, i64* %RBP
  %3981 = sub i64 %3980, 168
  %3982 = bitcast %union.vec128_t* %XMM0 to i8*
  %3983 = load i64, i64* %PC
  %3984 = add i64 %3983, 8
  store i64 %3984, i64* %PC
  %3985 = bitcast i8* %3982 to double*
  %3986 = load double, double* %3985, align 1
  %3987 = inttoptr i64 %3981 to double*
  store double %3986, double* %3987
  %3988 = load i64, i64* %RBP
  %3989 = sub i64 %3988, 16
  %3990 = load i64, i64* %PC
  %3991 = add i64 %3990, 4
  store i64 %3991, i64* %PC
  %3992 = inttoptr i64 %3989 to i64*
  %3993 = load i64, i64* %3992
  store i64 %3993, i64* %RCX, align 8, !tbaa !2428
  %3994 = load i64, i64* %RBP
  %3995 = sub i64 %3994, 36
  %3996 = load i64, i64* %PC
  %3997 = add i64 %3996, 3
  store i64 %3997, i64* %PC
  %3998 = inttoptr i64 %3995 to i32*
  %3999 = load i32, i32* %3998
  %4000 = zext i32 %3999 to i64
  store i64 %4000, i64* %RAX, align 8, !tbaa !2428
  %4001 = load i64, i64* %RAX
  %4002 = load i64, i64* %PC
  %4003 = add i64 %4002, 3
  store i64 %4003, i64* %PC
  %4004 = trunc i64 %4001 to i32
  %4005 = add i32 1, %4004
  %4006 = zext i32 %4005 to i64
  store i64 %4006, i64* %RAX, align 8, !tbaa !2428
  %4007 = icmp ult i32 %4005, %4004
  %4008 = icmp ult i32 %4005, 1
  %4009 = or i1 %4007, %4008
  %4010 = zext i1 %4009 to i8
  %4011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4010, i8* %4011, align 1, !tbaa !2432
  %4012 = and i32 %4005, 255
  %4013 = call i32 @llvm.ctpop.i32(i32 %4012) #17
  %4014 = trunc i32 %4013 to i8
  %4015 = and i8 %4014, 1
  %4016 = xor i8 %4015, 1
  %4017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4016, i8* %4017, align 1, !tbaa !2446
  %4018 = xor i64 1, %4001
  %4019 = trunc i64 %4018 to i32
  %4020 = xor i32 %4019, %4005
  %4021 = lshr i32 %4020, 4
  %4022 = trunc i32 %4021 to i8
  %4023 = and i8 %4022, 1
  %4024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4023, i8* %4024, align 1, !tbaa !2447
  %4025 = icmp eq i32 %4005, 0
  %4026 = zext i1 %4025 to i8
  %4027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4026, i8* %4027, align 1, !tbaa !2448
  %4028 = lshr i32 %4005, 31
  %4029 = trunc i32 %4028 to i8
  %4030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4029, i8* %4030, align 1, !tbaa !2449
  %4031 = lshr i32 %4004, 31
  %4032 = xor i32 %4028, %4031
  %4033 = add nuw nsw i32 %4032, %4028
  %4034 = icmp eq i32 %4033, 2
  %4035 = zext i1 %4034 to i8
  %4036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4035, i8* %4036, align 1, !tbaa !2450
  %4037 = load i32, i32* %EAX
  %4038 = zext i32 %4037 to i64
  %4039 = load i64, i64* %PC
  %4040 = add i64 %4039, 3
  store i64 %4040, i64* %PC
  %4041 = shl i64 %4038, 32
  %4042 = ashr exact i64 %4041, 32
  store i64 %4042, i64* %RDX, align 8, !tbaa !2428
  %4043 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4044 = load i64, i64* %RCX
  %4045 = load i64, i64* %RDX
  %4046 = mul i64 %4045, 8
  %4047 = add i64 %4046, %4044
  %4048 = load i64, i64* %PC
  %4049 = add i64 %4048, 5
  store i64 %4049, i64* %PC
  %4050 = inttoptr i64 %4047 to double*
  %4051 = load double, double* %4050
  %4052 = bitcast i8* %4043 to double*
  store double %4051, double* %4052, align 1, !tbaa !2452
  %4053 = getelementptr inbounds i8, i8* %4043, i64 8
  %4054 = bitcast i8* %4053 to double*
  store double 0.000000e+00, double* %4054, align 1, !tbaa !2452
  %4055 = load i64, i64* %RBP
  %4056 = sub i64 %4055, 16
  %4057 = load i64, i64* %PC
  %4058 = add i64 %4057, 4
  store i64 %4058, i64* %PC
  %4059 = inttoptr i64 %4056 to i64*
  %4060 = load i64, i64* %4059
  store i64 %4060, i64* %RCX, align 8, !tbaa !2428
  %4061 = load i64, i64* %RBP
  %4062 = sub i64 %4061, 40
  %4063 = load i64, i64* %PC
  %4064 = add i64 %4063, 3
  store i64 %4064, i64* %PC
  %4065 = inttoptr i64 %4062 to i32*
  %4066 = load i32, i32* %4065
  %4067 = zext i32 %4066 to i64
  store i64 %4067, i64* %RAX, align 8, !tbaa !2428
  %4068 = load i64, i64* %RAX
  %4069 = load i64, i64* %PC
  %4070 = add i64 %4069, 3
  store i64 %4070, i64* %PC
  %4071 = trunc i64 %4068 to i32
  %4072 = add i32 1, %4071
  %4073 = zext i32 %4072 to i64
  store i64 %4073, i64* %RAX, align 8, !tbaa !2428
  %4074 = icmp ult i32 %4072, %4071
  %4075 = icmp ult i32 %4072, 1
  %4076 = or i1 %4074, %4075
  %4077 = zext i1 %4076 to i8
  %4078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4077, i8* %4078, align 1, !tbaa !2432
  %4079 = and i32 %4072, 255
  %4080 = call i32 @llvm.ctpop.i32(i32 %4079) #17
  %4081 = trunc i32 %4080 to i8
  %4082 = and i8 %4081, 1
  %4083 = xor i8 %4082, 1
  %4084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4083, i8* %4084, align 1, !tbaa !2446
  %4085 = xor i64 1, %4068
  %4086 = trunc i64 %4085 to i32
  %4087 = xor i32 %4086, %4072
  %4088 = lshr i32 %4087, 4
  %4089 = trunc i32 %4088 to i8
  %4090 = and i8 %4089, 1
  %4091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4090, i8* %4091, align 1, !tbaa !2447
  %4092 = icmp eq i32 %4072, 0
  %4093 = zext i1 %4092 to i8
  %4094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4093, i8* %4094, align 1, !tbaa !2448
  %4095 = lshr i32 %4072, 31
  %4096 = trunc i32 %4095 to i8
  %4097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4096, i8* %4097, align 1, !tbaa !2449
  %4098 = lshr i32 %4071, 31
  %4099 = xor i32 %4095, %4098
  %4100 = add nuw nsw i32 %4099, %4095
  %4101 = icmp eq i32 %4100, 2
  %4102 = zext i1 %4101 to i8
  %4103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4102, i8* %4103, align 1, !tbaa !2450
  %4104 = load i32, i32* %EAX
  %4105 = zext i32 %4104 to i64
  %4106 = load i64, i64* %PC
  %4107 = add i64 %4106, 3
  store i64 %4107, i64* %PC
  %4108 = shl i64 %4105, 32
  %4109 = ashr exact i64 %4108, 32
  store i64 %4109, i64* %RDX, align 8, !tbaa !2428
  %4110 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4111 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4112 = load i64, i64* %RCX
  %4113 = load i64, i64* %RDX
  %4114 = mul i64 %4113, 8
  %4115 = add i64 %4114, %4112
  %4116 = load i64, i64* %PC
  %4117 = add i64 %4116, 5
  store i64 %4117, i64* %PC
  %4118 = bitcast i8* %4111 to double*
  %4119 = load double, double* %4118, align 1
  %4120 = getelementptr inbounds i8, i8* %4111, i64 8
  %4121 = bitcast i8* %4120 to i64*
  %4122 = load i64, i64* %4121, align 1
  %4123 = inttoptr i64 %4115 to double*
  %4124 = load double, double* %4123
  %4125 = fsub double %4119, %4124
  %4126 = bitcast i8* %4110 to double*
  store double %4125, double* %4126, align 1, !tbaa !2452
  %4127 = getelementptr inbounds i8, i8* %4110, i64 8
  %4128 = bitcast i8* %4127 to i64*
  store i64 %4122, i64* %4128, align 1, !tbaa !2452
  %4129 = load i64, i64* %RBP
  %4130 = sub i64 %4129, 176
  %4131 = bitcast %union.vec128_t* %XMM0 to i8*
  %4132 = load i64, i64* %PC
  %4133 = add i64 %4132, 8
  store i64 %4133, i64* %PC
  %4134 = bitcast i8* %4131 to double*
  %4135 = load double, double* %4134, align 1
  %4136 = inttoptr i64 %4130 to double*
  store double %4135, double* %4136
  %4137 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4138 = load i64, i64* %RBP
  %4139 = sub i64 %4138, 120
  %4140 = load i64, i64* %PC
  %4141 = add i64 %4140, 5
  store i64 %4141, i64* %PC
  %4142 = inttoptr i64 %4139 to double*
  %4143 = load double, double* %4142
  %4144 = bitcast i8* %4137 to double*
  store double %4143, double* %4144, align 1, !tbaa !2452
  %4145 = getelementptr inbounds i8, i8* %4137, i64 8
  %4146 = bitcast i8* %4145 to double*
  store double 0.000000e+00, double* %4146, align 1, !tbaa !2452
  %4147 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4148 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4149 = load i64, i64* %RBP
  %4150 = sub i64 %4149, 152
  %4151 = load i64, i64* %PC
  %4152 = add i64 %4151, 8
  store i64 %4152, i64* %PC
  %4153 = bitcast i8* %4148 to double*
  %4154 = load double, double* %4153, align 1
  %4155 = getelementptr inbounds i8, i8* %4148, i64 8
  %4156 = bitcast i8* %4155 to i64*
  %4157 = load i64, i64* %4156, align 1
  %4158 = inttoptr i64 %4150 to double*
  %4159 = load double, double* %4158
  %4160 = fadd double %4154, %4159
  %4161 = bitcast i8* %4147 to double*
  store double %4160, double* %4161, align 1, !tbaa !2452
  %4162 = getelementptr inbounds i8, i8* %4147, i64 8
  %4163 = bitcast i8* %4162 to i64*
  store i64 %4157, i64* %4163, align 1, !tbaa !2452
  %4164 = load i64, i64* %RBP
  %4165 = sub i64 %4164, 16
  %4166 = load i64, i64* %PC
  %4167 = add i64 %4166, 4
  store i64 %4167, i64* %PC
  %4168 = inttoptr i64 %4165 to i64*
  %4169 = load i64, i64* %4168
  store i64 %4169, i64* %RCX, align 8, !tbaa !2428
  %4170 = load i64, i64* %RBP
  %4171 = sub i64 %4170, 28
  %4172 = load i64, i64* %PC
  %4173 = add i64 %4172, 4
  store i64 %4173, i64* %PC
  %4174 = inttoptr i64 %4171 to i32*
  %4175 = load i32, i32* %4174
  %4176 = sext i32 %4175 to i64
  store i64 %4176, i64* %RDX, align 8, !tbaa !2428
  %4177 = load i64, i64* %RCX
  %4178 = load i64, i64* %RDX
  %4179 = mul i64 %4178, 8
  %4180 = add i64 %4179, %4177
  %4181 = bitcast %union.vec128_t* %XMM0 to i8*
  %4182 = load i64, i64* %PC
  %4183 = add i64 %4182, 5
  store i64 %4183, i64* %PC
  %4184 = bitcast i8* %4181 to double*
  %4185 = load double, double* %4184, align 1
  %4186 = inttoptr i64 %4180 to double*
  store double %4185, double* %4186
  %4187 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4188 = load i64, i64* %RBP
  %4189 = sub i64 %4188, 128
  %4190 = load i64, i64* %PC
  %4191 = add i64 %4190, 5
  store i64 %4191, i64* %PC
  %4192 = inttoptr i64 %4189 to double*
  %4193 = load double, double* %4192
  %4194 = bitcast i8* %4187 to double*
  store double %4193, double* %4194, align 1, !tbaa !2452
  %4195 = getelementptr inbounds i8, i8* %4187, i64 8
  %4196 = bitcast i8* %4195 to double*
  store double 0.000000e+00, double* %4196, align 1, !tbaa !2452
  %4197 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4198 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4199 = load i64, i64* %RBP
  %4200 = sub i64 %4199, 160
  %4201 = load i64, i64* %PC
  %4202 = add i64 %4201, 8
  store i64 %4202, i64* %PC
  %4203 = bitcast i8* %4198 to double*
  %4204 = load double, double* %4203, align 1
  %4205 = getelementptr inbounds i8, i8* %4198, i64 8
  %4206 = bitcast i8* %4205 to i64*
  %4207 = load i64, i64* %4206, align 1
  %4208 = inttoptr i64 %4200 to double*
  %4209 = load double, double* %4208
  %4210 = fadd double %4204, %4209
  %4211 = bitcast i8* %4197 to double*
  store double %4210, double* %4211, align 1, !tbaa !2452
  %4212 = getelementptr inbounds i8, i8* %4197, i64 8
  %4213 = bitcast i8* %4212 to i64*
  store i64 %4207, i64* %4213, align 1, !tbaa !2452
  %4214 = load i64, i64* %RBP
  %4215 = sub i64 %4214, 16
  %4216 = load i64, i64* %PC
  %4217 = add i64 %4216, 4
  store i64 %4217, i64* %PC
  %4218 = inttoptr i64 %4215 to i64*
  %4219 = load i64, i64* %4218
  store i64 %4219, i64* %RCX, align 8, !tbaa !2428
  %4220 = load i64, i64* %RBP
  %4221 = sub i64 %4220, 28
  %4222 = load i64, i64* %PC
  %4223 = add i64 %4222, 3
  store i64 %4223, i64* %PC
  %4224 = inttoptr i64 %4221 to i32*
  %4225 = load i32, i32* %4224
  %4226 = zext i32 %4225 to i64
  store i64 %4226, i64* %RAX, align 8, !tbaa !2428
  %4227 = load i64, i64* %RAX
  %4228 = load i64, i64* %PC
  %4229 = add i64 %4228, 3
  store i64 %4229, i64* %PC
  %4230 = trunc i64 %4227 to i32
  %4231 = add i32 1, %4230
  %4232 = zext i32 %4231 to i64
  store i64 %4232, i64* %RAX, align 8, !tbaa !2428
  %4233 = icmp ult i32 %4231, %4230
  %4234 = icmp ult i32 %4231, 1
  %4235 = or i1 %4233, %4234
  %4236 = zext i1 %4235 to i8
  %4237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4236, i8* %4237, align 1, !tbaa !2432
  %4238 = and i32 %4231, 255
  %4239 = call i32 @llvm.ctpop.i32(i32 %4238) #17
  %4240 = trunc i32 %4239 to i8
  %4241 = and i8 %4240, 1
  %4242 = xor i8 %4241, 1
  %4243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4242, i8* %4243, align 1, !tbaa !2446
  %4244 = xor i64 1, %4227
  %4245 = trunc i64 %4244 to i32
  %4246 = xor i32 %4245, %4231
  %4247 = lshr i32 %4246, 4
  %4248 = trunc i32 %4247 to i8
  %4249 = and i8 %4248, 1
  %4250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4249, i8* %4250, align 1, !tbaa !2447
  %4251 = icmp eq i32 %4231, 0
  %4252 = zext i1 %4251 to i8
  %4253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4252, i8* %4253, align 1, !tbaa !2448
  %4254 = lshr i32 %4231, 31
  %4255 = trunc i32 %4254 to i8
  %4256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4255, i8* %4256, align 1, !tbaa !2449
  %4257 = lshr i32 %4230, 31
  %4258 = xor i32 %4254, %4257
  %4259 = add nuw nsw i32 %4258, %4254
  %4260 = icmp eq i32 %4259, 2
  %4261 = zext i1 %4260 to i8
  %4262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4261, i8* %4262, align 1, !tbaa !2450
  %4263 = load i32, i32* %EAX
  %4264 = zext i32 %4263 to i64
  %4265 = load i64, i64* %PC
  %4266 = add i64 %4265, 3
  store i64 %4266, i64* %PC
  %4267 = shl i64 %4264, 32
  %4268 = ashr exact i64 %4267, 32
  store i64 %4268, i64* %RDX, align 8, !tbaa !2428
  %4269 = load i64, i64* %RCX
  %4270 = load i64, i64* %RDX
  %4271 = mul i64 %4270, 8
  %4272 = add i64 %4271, %4269
  %4273 = bitcast %union.vec128_t* %XMM0 to i8*
  %4274 = load i64, i64* %PC
  %4275 = add i64 %4274, 5
  store i64 %4275, i64* %PC
  %4276 = bitcast i8* %4273 to double*
  %4277 = load double, double* %4276, align 1
  %4278 = inttoptr i64 %4272 to double*
  store double %4277, double* %4278
  %4279 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4280 = load i64, i64* %RBP
  %4281 = sub i64 %4280, 160
  %4282 = load i64, i64* %PC
  %4283 = add i64 %4282, 8
  store i64 %4283, i64* %PC
  %4284 = inttoptr i64 %4281 to double*
  %4285 = load double, double* %4284
  %4286 = bitcast i8* %4279 to double*
  store double %4285, double* %4286, align 1, !tbaa !2452
  %4287 = getelementptr inbounds i8, i8* %4279, i64 8
  %4288 = bitcast i8* %4287 to double*
  store double 0.000000e+00, double* %4288, align 1, !tbaa !2452
  %4289 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4290 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4291 = load i64, i64* %RBP
  %4292 = sub i64 %4291, 128
  %4293 = load i64, i64* %PC
  %4294 = add i64 %4293, 5
  store i64 %4294, i64* %PC
  %4295 = bitcast i8* %4290 to double*
  %4296 = load double, double* %4295, align 1
  %4297 = getelementptr inbounds i8, i8* %4290, i64 8
  %4298 = bitcast i8* %4297 to i64*
  %4299 = load i64, i64* %4298, align 1
  %4300 = inttoptr i64 %4292 to double*
  %4301 = load double, double* %4300
  %4302 = fsub double %4296, %4301
  %4303 = bitcast i8* %4289 to double*
  store double %4302, double* %4303, align 1, !tbaa !2452
  %4304 = getelementptr inbounds i8, i8* %4289, i64 8
  %4305 = bitcast i8* %4304 to i64*
  store i64 %4299, i64* %4305, align 1, !tbaa !2452
  %4306 = load i64, i64* %RBP
  %4307 = sub i64 %4306, 16
  %4308 = load i64, i64* %PC
  %4309 = add i64 %4308, 4
  store i64 %4309, i64* %PC
  %4310 = inttoptr i64 %4307 to i64*
  %4311 = load i64, i64* %4310
  store i64 %4311, i64* %RCX, align 8, !tbaa !2428
  %4312 = load i64, i64* %RBP
  %4313 = sub i64 %4312, 36
  %4314 = load i64, i64* %PC
  %4315 = add i64 %4314, 4
  store i64 %4315, i64* %PC
  %4316 = inttoptr i64 %4313 to i32*
  %4317 = load i32, i32* %4316
  %4318 = sext i32 %4317 to i64
  store i64 %4318, i64* %RDX, align 8, !tbaa !2428
  %4319 = load i64, i64* %RCX
  %4320 = load i64, i64* %RDX
  %4321 = mul i64 %4320, 8
  %4322 = add i64 %4321, %4319
  %4323 = bitcast %union.vec128_t* %XMM0 to i8*
  %4324 = load i64, i64* %PC
  %4325 = add i64 %4324, 5
  store i64 %4325, i64* %PC
  %4326 = bitcast i8* %4323 to double*
  %4327 = load double, double* %4326, align 1
  %4328 = inttoptr i64 %4322 to double*
  store double %4327, double* %4328
  %4329 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4330 = load i64, i64* %RBP
  %4331 = sub i64 %4330, 120
  %4332 = load i64, i64* %PC
  %4333 = add i64 %4332, 5
  store i64 %4333, i64* %PC
  %4334 = inttoptr i64 %4331 to double*
  %4335 = load double, double* %4334
  %4336 = bitcast i8* %4329 to double*
  store double %4335, double* %4336, align 1, !tbaa !2452
  %4337 = getelementptr inbounds i8, i8* %4329, i64 8
  %4338 = bitcast i8* %4337 to double*
  store double 0.000000e+00, double* %4338, align 1, !tbaa !2452
  %4339 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4341 = load i64, i64* %RBP
  %4342 = sub i64 %4341, 152
  %4343 = load i64, i64* %PC
  %4344 = add i64 %4343, 8
  store i64 %4344, i64* %PC
  %4345 = bitcast i8* %4340 to double*
  %4346 = load double, double* %4345, align 1
  %4347 = getelementptr inbounds i8, i8* %4340, i64 8
  %4348 = bitcast i8* %4347 to i64*
  %4349 = load i64, i64* %4348, align 1
  %4350 = inttoptr i64 %4342 to double*
  %4351 = load double, double* %4350
  %4352 = fsub double %4346, %4351
  %4353 = bitcast i8* %4339 to double*
  store double %4352, double* %4353, align 1, !tbaa !2452
  %4354 = getelementptr inbounds i8, i8* %4339, i64 8
  %4355 = bitcast i8* %4354 to i64*
  store i64 %4349, i64* %4355, align 1, !tbaa !2452
  %4356 = load i64, i64* %RBP
  %4357 = sub i64 %4356, 16
  %4358 = load i64, i64* %PC
  %4359 = add i64 %4358, 4
  store i64 %4359, i64* %PC
  %4360 = inttoptr i64 %4357 to i64*
  %4361 = load i64, i64* %4360
  store i64 %4361, i64* %RCX, align 8, !tbaa !2428
  %4362 = load i64, i64* %RBP
  %4363 = sub i64 %4362, 36
  %4364 = load i64, i64* %PC
  %4365 = add i64 %4364, 3
  store i64 %4365, i64* %PC
  %4366 = inttoptr i64 %4363 to i32*
  %4367 = load i32, i32* %4366
  %4368 = zext i32 %4367 to i64
  store i64 %4368, i64* %RAX, align 8, !tbaa !2428
  %4369 = load i64, i64* %RAX
  %4370 = load i64, i64* %PC
  %4371 = add i64 %4370, 3
  store i64 %4371, i64* %PC
  %4372 = trunc i64 %4369 to i32
  %4373 = add i32 1, %4372
  %4374 = zext i32 %4373 to i64
  store i64 %4374, i64* %RAX, align 8, !tbaa !2428
  %4375 = icmp ult i32 %4373, %4372
  %4376 = icmp ult i32 %4373, 1
  %4377 = or i1 %4375, %4376
  %4378 = zext i1 %4377 to i8
  %4379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4378, i8* %4379, align 1, !tbaa !2432
  %4380 = and i32 %4373, 255
  %4381 = call i32 @llvm.ctpop.i32(i32 %4380) #17
  %4382 = trunc i32 %4381 to i8
  %4383 = and i8 %4382, 1
  %4384 = xor i8 %4383, 1
  %4385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4384, i8* %4385, align 1, !tbaa !2446
  %4386 = xor i64 1, %4369
  %4387 = trunc i64 %4386 to i32
  %4388 = xor i32 %4387, %4373
  %4389 = lshr i32 %4388, 4
  %4390 = trunc i32 %4389 to i8
  %4391 = and i8 %4390, 1
  %4392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4391, i8* %4392, align 1, !tbaa !2447
  %4393 = icmp eq i32 %4373, 0
  %4394 = zext i1 %4393 to i8
  %4395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4394, i8* %4395, align 1, !tbaa !2448
  %4396 = lshr i32 %4373, 31
  %4397 = trunc i32 %4396 to i8
  %4398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4397, i8* %4398, align 1, !tbaa !2449
  %4399 = lshr i32 %4372, 31
  %4400 = xor i32 %4396, %4399
  %4401 = add nuw nsw i32 %4400, %4396
  %4402 = icmp eq i32 %4401, 2
  %4403 = zext i1 %4402 to i8
  %4404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4403, i8* %4404, align 1, !tbaa !2450
  %4405 = load i32, i32* %EAX
  %4406 = zext i32 %4405 to i64
  %4407 = load i64, i64* %PC
  %4408 = add i64 %4407, 3
  store i64 %4408, i64* %PC
  %4409 = shl i64 %4406, 32
  %4410 = ashr exact i64 %4409, 32
  store i64 %4410, i64* %RDX, align 8, !tbaa !2428
  %4411 = load i64, i64* %RCX
  %4412 = load i64, i64* %RDX
  %4413 = mul i64 %4412, 8
  %4414 = add i64 %4413, %4411
  %4415 = bitcast %union.vec128_t* %XMM0 to i8*
  %4416 = load i64, i64* %PC
  %4417 = add i64 %4416, 5
  store i64 %4417, i64* %PC
  %4418 = bitcast i8* %4415 to double*
  %4419 = load double, double* %4418, align 1
  %4420 = inttoptr i64 %4414 to double*
  store double %4419, double* %4420
  %4421 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4422 = load i64, i64* %RBP
  %4423 = sub i64 %4422, 136
  %4424 = load i64, i64* %PC
  %4425 = add i64 %4424, 8
  store i64 %4425, i64* %PC
  %4426 = inttoptr i64 %4423 to double*
  %4427 = load double, double* %4426
  %4428 = bitcast i8* %4421 to double*
  store double %4427, double* %4428, align 1, !tbaa !2452
  %4429 = getelementptr inbounds i8, i8* %4421, i64 8
  %4430 = bitcast i8* %4429 to double*
  store double 0.000000e+00, double* %4430, align 1, !tbaa !2452
  %4431 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4432 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4433 = load i64, i64* %RBP
  %4434 = sub i64 %4433, 176
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 8
  store i64 %4436, i64* %PC
  %4437 = bitcast i8* %4432 to double*
  %4438 = load double, double* %4437, align 1
  %4439 = getelementptr inbounds i8, i8* %4432, i64 8
  %4440 = bitcast i8* %4439 to i64*
  %4441 = load i64, i64* %4440, align 1
  %4442 = inttoptr i64 %4434 to double*
  %4443 = load double, double* %4442
  %4444 = fsub double %4438, %4443
  %4445 = bitcast i8* %4431 to double*
  store double %4444, double* %4445, align 1, !tbaa !2452
  %4446 = getelementptr inbounds i8, i8* %4431, i64 8
  %4447 = bitcast i8* %4446 to i64*
  store i64 %4441, i64* %4447, align 1, !tbaa !2452
  %4448 = load i64, i64* %RBP
  %4449 = sub i64 %4448, 120
  %4450 = bitcast %union.vec128_t* %XMM0 to i8*
  %4451 = load i64, i64* %PC
  %4452 = add i64 %4451, 5
  store i64 %4452, i64* %PC
  %4453 = bitcast i8* %4450 to double*
  %4454 = load double, double* %4453, align 1
  %4455 = inttoptr i64 %4449 to double*
  store double %4454, double* %4455
  %4456 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4457 = load i64, i64* %RBP
  %4458 = sub i64 %4457, 144
  %4459 = load i64, i64* %PC
  %4460 = add i64 %4459, 8
  store i64 %4460, i64* %PC
  %4461 = inttoptr i64 %4458 to double*
  %4462 = load double, double* %4461
  %4463 = bitcast i8* %4456 to double*
  store double %4462, double* %4463, align 1, !tbaa !2452
  %4464 = getelementptr inbounds i8, i8* %4456, i64 8
  %4465 = bitcast i8* %4464 to double*
  store double 0.000000e+00, double* %4465, align 1, !tbaa !2452
  %4466 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4467 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4468 = load i64, i64* %RBP
  %4469 = sub i64 %4468, 168
  %4470 = load i64, i64* %PC
  %4471 = add i64 %4470, 8
  store i64 %4471, i64* %PC
  %4472 = bitcast i8* %4467 to double*
  %4473 = load double, double* %4472, align 1
  %4474 = getelementptr inbounds i8, i8* %4467, i64 8
  %4475 = bitcast i8* %4474 to i64*
  %4476 = load i64, i64* %4475, align 1
  %4477 = inttoptr i64 %4469 to double*
  %4478 = load double, double* %4477
  %4479 = fadd double %4473, %4478
  %4480 = bitcast i8* %4466 to double*
  store double %4479, double* %4480, align 1, !tbaa !2452
  %4481 = getelementptr inbounds i8, i8* %4466, i64 8
  %4482 = bitcast i8* %4481 to i64*
  store i64 %4476, i64* %4482, align 1, !tbaa !2452
  %4483 = load i64, i64* %RBP
  %4484 = sub i64 %4483, 128
  %4485 = bitcast %union.vec128_t* %XMM0 to i8*
  %4486 = load i64, i64* %PC
  %4487 = add i64 %4486, 5
  store i64 %4487, i64* %PC
  %4488 = bitcast i8* %4485 to double*
  %4489 = load double, double* %4488, align 1
  %4490 = inttoptr i64 %4484 to double*
  store double %4489, double* %4490
  %4491 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4492 = load i64, i64* %RBP
  %4493 = sub i64 %4492, 72
  %4494 = load i64, i64* %PC
  %4495 = add i64 %4494, 5
  store i64 %4495, i64* %PC
  %4496 = inttoptr i64 %4493 to double*
  %4497 = load double, double* %4496
  %4498 = bitcast i8* %4491 to double*
  store double %4497, double* %4498, align 1, !tbaa !2452
  %4499 = getelementptr inbounds i8, i8* %4491, i64 8
  %4500 = bitcast i8* %4499 to double*
  store double 0.000000e+00, double* %4500, align 1, !tbaa !2452
  %4501 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4502 = load i64, i64* %RBP
  %4503 = sub i64 %4502, 120
  %4504 = load i64, i64* %PC
  %4505 = add i64 %4504, 5
  store i64 %4505, i64* %PC
  %4506 = inttoptr i64 %4503 to double*
  %4507 = load double, double* %4506
  %4508 = bitcast i8* %4501 to double*
  store double %4507, double* %4508, align 1, !tbaa !2452
  %4509 = getelementptr inbounds i8, i8* %4501, i64 8
  %4510 = bitcast i8* %4509 to double*
  store double 0.000000e+00, double* %4510, align 1, !tbaa !2452
  %4511 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4512 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4513 = load i64, i64* %RBP
  %4514 = sub i64 %4513, 128
  %4515 = load i64, i64* %PC
  %4516 = add i64 %4515, 5
  store i64 %4516, i64* %PC
  %4517 = bitcast i8* %4512 to double*
  %4518 = load double, double* %4517, align 1
  %4519 = getelementptr inbounds i8, i8* %4512, i64 8
  %4520 = bitcast i8* %4519 to i64*
  %4521 = load i64, i64* %4520, align 1
  %4522 = inttoptr i64 %4514 to double*
  %4523 = load double, double* %4522
  %4524 = fsub double %4518, %4523
  %4525 = bitcast i8* %4511 to double*
  store double %4524, double* %4525, align 1, !tbaa !2452
  %4526 = getelementptr inbounds i8, i8* %4511, i64 8
  %4527 = bitcast i8* %4526 to i64*
  store i64 %4521, i64* %4527, align 1, !tbaa !2452
  %4528 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4529 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4530 = bitcast %union.vec128_t* %XMM1 to i8*
  %4531 = load i64, i64* %PC
  %4532 = add i64 %4531, 4
  store i64 %4532, i64* %PC
  %4533 = bitcast i8* %4529 to double*
  %4534 = load double, double* %4533, align 1
  %4535 = getelementptr inbounds i8, i8* %4529, i64 8
  %4536 = bitcast i8* %4535 to i64*
  %4537 = load i64, i64* %4536, align 1
  %4538 = bitcast i8* %4530 to double*
  %4539 = load double, double* %4538, align 1
  %4540 = fmul double %4534, %4539
  %4541 = bitcast i8* %4528 to double*
  store double %4540, double* %4541, align 1, !tbaa !2452
  %4542 = getelementptr inbounds i8, i8* %4528, i64 8
  %4543 = bitcast i8* %4542 to i64*
  store i64 %4537, i64* %4543, align 1, !tbaa !2452
  %4544 = load i64, i64* %RBP
  %4545 = sub i64 %4544, 16
  %4546 = load i64, i64* %PC
  %4547 = add i64 %4546, 4
  store i64 %4547, i64* %PC
  %4548 = inttoptr i64 %4545 to i64*
  %4549 = load i64, i64* %4548
  store i64 %4549, i64* %RCX, align 8, !tbaa !2428
  %4550 = load i64, i64* %RBP
  %4551 = sub i64 %4550, 32
  %4552 = load i64, i64* %PC
  %4553 = add i64 %4552, 4
  store i64 %4553, i64* %PC
  %4554 = inttoptr i64 %4551 to i32*
  %4555 = load i32, i32* %4554
  %4556 = sext i32 %4555 to i64
  store i64 %4556, i64* %RDX, align 8, !tbaa !2428
  %4557 = load i64, i64* %RCX
  %4558 = load i64, i64* %RDX
  %4559 = mul i64 %4558, 8
  %4560 = add i64 %4559, %4557
  %4561 = bitcast %union.vec128_t* %XMM0 to i8*
  %4562 = load i64, i64* %PC
  %4563 = add i64 %4562, 5
  store i64 %4563, i64* %PC
  %4564 = bitcast i8* %4561 to double*
  %4565 = load double, double* %4564, align 1
  %4566 = inttoptr i64 %4560 to double*
  store double %4565, double* %4566
  %4567 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4568 = load i64, i64* %RBP
  %4569 = sub i64 %4568, 72
  %4570 = load i64, i64* %PC
  %4571 = add i64 %4570, 5
  store i64 %4571, i64* %PC
  %4572 = inttoptr i64 %4569 to double*
  %4573 = load double, double* %4572
  %4574 = bitcast i8* %4567 to double*
  store double %4573, double* %4574, align 1, !tbaa !2452
  %4575 = getelementptr inbounds i8, i8* %4567, i64 8
  %4576 = bitcast i8* %4575 to double*
  store double 0.000000e+00, double* %4576, align 1, !tbaa !2452
  %4577 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4578 = load i64, i64* %RBP
  %4579 = sub i64 %4578, 120
  %4580 = load i64, i64* %PC
  %4581 = add i64 %4580, 5
  store i64 %4581, i64* %PC
  %4582 = inttoptr i64 %4579 to double*
  %4583 = load double, double* %4582
  %4584 = bitcast i8* %4577 to double*
  store double %4583, double* %4584, align 1, !tbaa !2452
  %4585 = getelementptr inbounds i8, i8* %4577, i64 8
  %4586 = bitcast i8* %4585 to double*
  store double 0.000000e+00, double* %4586, align 1, !tbaa !2452
  %4587 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4588 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4589 = load i64, i64* %RBP
  %4590 = sub i64 %4589, 128
  %4591 = load i64, i64* %PC
  %4592 = add i64 %4591, 5
  store i64 %4592, i64* %PC
  %4593 = bitcast i8* %4588 to double*
  %4594 = load double, double* %4593, align 1
  %4595 = getelementptr inbounds i8, i8* %4588, i64 8
  %4596 = bitcast i8* %4595 to i64*
  %4597 = load i64, i64* %4596, align 1
  %4598 = inttoptr i64 %4590 to double*
  %4599 = load double, double* %4598
  %4600 = fadd double %4594, %4599
  %4601 = bitcast i8* %4587 to double*
  store double %4600, double* %4601, align 1, !tbaa !2452
  %4602 = getelementptr inbounds i8, i8* %4587, i64 8
  %4603 = bitcast i8* %4602 to i64*
  store i64 %4597, i64* %4603, align 1, !tbaa !2452
  %4604 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4605 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4606 = bitcast %union.vec128_t* %XMM1 to i8*
  %4607 = load i64, i64* %PC
  %4608 = add i64 %4607, 4
  store i64 %4608, i64* %PC
  %4609 = bitcast i8* %4605 to double*
  %4610 = load double, double* %4609, align 1
  %4611 = getelementptr inbounds i8, i8* %4605, i64 8
  %4612 = bitcast i8* %4611 to i64*
  %4613 = load i64, i64* %4612, align 1
  %4614 = bitcast i8* %4606 to double*
  %4615 = load double, double* %4614, align 1
  %4616 = fmul double %4610, %4615
  %4617 = bitcast i8* %4604 to double*
  store double %4616, double* %4617, align 1, !tbaa !2452
  %4618 = getelementptr inbounds i8, i8* %4604, i64 8
  %4619 = bitcast i8* %4618 to i64*
  store i64 %4613, i64* %4619, align 1, !tbaa !2452
  %4620 = load i64, i64* %RBP
  %4621 = sub i64 %4620, 16
  %4622 = load i64, i64* %PC
  %4623 = add i64 %4622, 4
  store i64 %4623, i64* %PC
  %4624 = inttoptr i64 %4621 to i64*
  %4625 = load i64, i64* %4624
  store i64 %4625, i64* %RCX, align 8, !tbaa !2428
  %4626 = load i64, i64* %RBP
  %4627 = sub i64 %4626, 32
  %4628 = load i64, i64* %PC
  %4629 = add i64 %4628, 3
  store i64 %4629, i64* %PC
  %4630 = inttoptr i64 %4627 to i32*
  %4631 = load i32, i32* %4630
  %4632 = zext i32 %4631 to i64
  store i64 %4632, i64* %RAX, align 8, !tbaa !2428
  %4633 = load i64, i64* %RAX
  %4634 = load i64, i64* %PC
  %4635 = add i64 %4634, 3
  store i64 %4635, i64* %PC
  %4636 = trunc i64 %4633 to i32
  %4637 = add i32 1, %4636
  %4638 = zext i32 %4637 to i64
  store i64 %4638, i64* %RAX, align 8, !tbaa !2428
  %4639 = icmp ult i32 %4637, %4636
  %4640 = icmp ult i32 %4637, 1
  %4641 = or i1 %4639, %4640
  %4642 = zext i1 %4641 to i8
  %4643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4642, i8* %4643, align 1, !tbaa !2432
  %4644 = and i32 %4637, 255
  %4645 = call i32 @llvm.ctpop.i32(i32 %4644) #17
  %4646 = trunc i32 %4645 to i8
  %4647 = and i8 %4646, 1
  %4648 = xor i8 %4647, 1
  %4649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4648, i8* %4649, align 1, !tbaa !2446
  %4650 = xor i64 1, %4633
  %4651 = trunc i64 %4650 to i32
  %4652 = xor i32 %4651, %4637
  %4653 = lshr i32 %4652, 4
  %4654 = trunc i32 %4653 to i8
  %4655 = and i8 %4654, 1
  %4656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4655, i8* %4656, align 1, !tbaa !2447
  %4657 = icmp eq i32 %4637, 0
  %4658 = zext i1 %4657 to i8
  %4659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4658, i8* %4659, align 1, !tbaa !2448
  %4660 = lshr i32 %4637, 31
  %4661 = trunc i32 %4660 to i8
  %4662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4661, i8* %4662, align 1, !tbaa !2449
  %4663 = lshr i32 %4636, 31
  %4664 = xor i32 %4660, %4663
  %4665 = add nuw nsw i32 %4664, %4660
  %4666 = icmp eq i32 %4665, 2
  %4667 = zext i1 %4666 to i8
  %4668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4667, i8* %4668, align 1, !tbaa !2450
  %4669 = load i32, i32* %EAX
  %4670 = zext i32 %4669 to i64
  %4671 = load i64, i64* %PC
  %4672 = add i64 %4671, 3
  store i64 %4672, i64* %PC
  %4673 = shl i64 %4670, 32
  %4674 = ashr exact i64 %4673, 32
  store i64 %4674, i64* %RDX, align 8, !tbaa !2428
  %4675 = load i64, i64* %RCX
  %4676 = load i64, i64* %RDX
  %4677 = mul i64 %4676, 8
  %4678 = add i64 %4677, %4675
  %4679 = bitcast %union.vec128_t* %XMM0 to i8*
  %4680 = load i64, i64* %PC
  %4681 = add i64 %4680, 5
  store i64 %4681, i64* %PC
  %4682 = bitcast i8* %4679 to double*
  %4683 = load double, double* %4682, align 1
  %4684 = inttoptr i64 %4678 to double*
  store double %4683, double* %4684
  %4685 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4686 = load i64, i64* %RBP
  %4687 = sub i64 %4686, 176
  %4688 = load i64, i64* %PC
  %4689 = add i64 %4688, 8
  store i64 %4689, i64* %PC
  %4690 = inttoptr i64 %4687 to double*
  %4691 = load double, double* %4690
  %4692 = bitcast i8* %4685 to double*
  store double %4691, double* %4692, align 1, !tbaa !2452
  %4693 = getelementptr inbounds i8, i8* %4685, i64 8
  %4694 = bitcast i8* %4693 to double*
  store double 0.000000e+00, double* %4694, align 1, !tbaa !2452
  %4695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4696 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4697 = load i64, i64* %RBP
  %4698 = sub i64 %4697, 136
  %4699 = load i64, i64* %PC
  %4700 = add i64 %4699, 8
  store i64 %4700, i64* %PC
  %4701 = bitcast i8* %4696 to double*
  %4702 = load double, double* %4701, align 1
  %4703 = getelementptr inbounds i8, i8* %4696, i64 8
  %4704 = bitcast i8* %4703 to i64*
  %4705 = load i64, i64* %4704, align 1
  %4706 = inttoptr i64 %4698 to double*
  %4707 = load double, double* %4706
  %4708 = fadd double %4702, %4707
  %4709 = bitcast i8* %4695 to double*
  store double %4708, double* %4709, align 1, !tbaa !2452
  %4710 = getelementptr inbounds i8, i8* %4695, i64 8
  %4711 = bitcast i8* %4710 to i64*
  store i64 %4705, i64* %4711, align 1, !tbaa !2452
  %4712 = load i64, i64* %RBP
  %4713 = sub i64 %4712, 120
  %4714 = bitcast %union.vec128_t* %XMM0 to i8*
  %4715 = load i64, i64* %PC
  %4716 = add i64 %4715, 5
  store i64 %4716, i64* %PC
  %4717 = bitcast i8* %4714 to double*
  %4718 = load double, double* %4717, align 1
  %4719 = inttoptr i64 %4713 to double*
  store double %4718, double* %4719
  %4720 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4721 = load i64, i64* %RBP
  %4722 = sub i64 %4721, 168
  %4723 = load i64, i64* %PC
  %4724 = add i64 %4723, 8
  store i64 %4724, i64* %PC
  %4725 = inttoptr i64 %4722 to double*
  %4726 = load double, double* %4725
  %4727 = bitcast i8* %4720 to double*
  store double %4726, double* %4727, align 1, !tbaa !2452
  %4728 = getelementptr inbounds i8, i8* %4720, i64 8
  %4729 = bitcast i8* %4728 to double*
  store double 0.000000e+00, double* %4729, align 1, !tbaa !2452
  %4730 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4731 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4732 = load i64, i64* %RBP
  %4733 = sub i64 %4732, 144
  %4734 = load i64, i64* %PC
  %4735 = add i64 %4734, 8
  store i64 %4735, i64* %PC
  %4736 = bitcast i8* %4731 to double*
  %4737 = load double, double* %4736, align 1
  %4738 = getelementptr inbounds i8, i8* %4731, i64 8
  %4739 = bitcast i8* %4738 to i64*
  %4740 = load i64, i64* %4739, align 1
  %4741 = inttoptr i64 %4733 to double*
  %4742 = load double, double* %4741
  %4743 = fsub double %4737, %4742
  %4744 = bitcast i8* %4730 to double*
  store double %4743, double* %4744, align 1, !tbaa !2452
  %4745 = getelementptr inbounds i8, i8* %4730, i64 8
  %4746 = bitcast i8* %4745 to i64*
  store i64 %4740, i64* %4746, align 1, !tbaa !2452
  %4747 = load i64, i64* %RBP
  %4748 = sub i64 %4747, 128
  %4749 = bitcast %union.vec128_t* %XMM0 to i8*
  %4750 = load i64, i64* %PC
  %4751 = add i64 %4750, 5
  store i64 %4751, i64* %PC
  %4752 = bitcast i8* %4749 to double*
  %4753 = load double, double* %4752, align 1
  %4754 = inttoptr i64 %4748 to double*
  store double %4753, double* %4754
  %4755 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4756 = load i64, i64* %RBP
  %4757 = sub i64 %4756, 72
  %4758 = load i64, i64* %PC
  %4759 = add i64 %4758, 5
  store i64 %4759, i64* %PC
  %4760 = inttoptr i64 %4757 to double*
  %4761 = load double, double* %4760
  %4762 = bitcast i8* %4755 to double*
  store double %4761, double* %4762, align 1, !tbaa !2452
  %4763 = getelementptr inbounds i8, i8* %4755, i64 8
  %4764 = bitcast i8* %4763 to double*
  store double 0.000000e+00, double* %4764, align 1, !tbaa !2452
  %4765 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4766 = load i64, i64* %RBP
  %4767 = sub i64 %4766, 128
  %4768 = load i64, i64* %PC
  %4769 = add i64 %4768, 5
  store i64 %4769, i64* %PC
  %4770 = inttoptr i64 %4767 to double*
  %4771 = load double, double* %4770
  %4772 = bitcast i8* %4765 to double*
  store double %4771, double* %4772, align 1, !tbaa !2452
  %4773 = getelementptr inbounds i8, i8* %4765, i64 8
  %4774 = bitcast i8* %4773 to double*
  store double 0.000000e+00, double* %4774, align 1, !tbaa !2452
  %4775 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4776 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4777 = load i64, i64* %RBP
  %4778 = sub i64 %4777, 120
  %4779 = load i64, i64* %PC
  %4780 = add i64 %4779, 5
  store i64 %4780, i64* %PC
  %4781 = bitcast i8* %4776 to double*
  %4782 = load double, double* %4781, align 1
  %4783 = getelementptr inbounds i8, i8* %4776, i64 8
  %4784 = bitcast i8* %4783 to i64*
  %4785 = load i64, i64* %4784, align 1
  %4786 = inttoptr i64 %4778 to double*
  %4787 = load double, double* %4786
  %4788 = fsub double %4782, %4787
  %4789 = bitcast i8* %4775 to double*
  store double %4788, double* %4789, align 1, !tbaa !2452
  %4790 = getelementptr inbounds i8, i8* %4775, i64 8
  %4791 = bitcast i8* %4790 to i64*
  store i64 %4785, i64* %4791, align 1, !tbaa !2452
  %4792 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4793 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4794 = bitcast %union.vec128_t* %XMM1 to i8*
  %4795 = load i64, i64* %PC
  %4796 = add i64 %4795, 4
  store i64 %4796, i64* %PC
  %4797 = bitcast i8* %4793 to double*
  %4798 = load double, double* %4797, align 1
  %4799 = getelementptr inbounds i8, i8* %4793, i64 8
  %4800 = bitcast i8* %4799 to i64*
  %4801 = load i64, i64* %4800, align 1
  %4802 = bitcast i8* %4794 to double*
  %4803 = load double, double* %4802, align 1
  %4804 = fmul double %4798, %4803
  %4805 = bitcast i8* %4792 to double*
  store double %4804, double* %4805, align 1, !tbaa !2452
  %4806 = getelementptr inbounds i8, i8* %4792, i64 8
  %4807 = bitcast i8* %4806 to i64*
  store i64 %4801, i64* %4807, align 1, !tbaa !2452
  %4808 = load i64, i64* %RBP
  %4809 = sub i64 %4808, 16
  %4810 = load i64, i64* %PC
  %4811 = add i64 %4810, 4
  store i64 %4811, i64* %PC
  %4812 = inttoptr i64 %4809 to i64*
  %4813 = load i64, i64* %4812
  store i64 %4813, i64* %RCX, align 8, !tbaa !2428
  %4814 = load i64, i64* %RBP
  %4815 = sub i64 %4814, 40
  %4816 = load i64, i64* %PC
  %4817 = add i64 %4816, 4
  store i64 %4817, i64* %PC
  %4818 = inttoptr i64 %4815 to i32*
  %4819 = load i32, i32* %4818
  %4820 = sext i32 %4819 to i64
  store i64 %4820, i64* %RDX, align 8, !tbaa !2428
  %4821 = load i64, i64* %RCX
  %4822 = load i64, i64* %RDX
  %4823 = mul i64 %4822, 8
  %4824 = add i64 %4823, %4821
  %4825 = bitcast %union.vec128_t* %XMM0 to i8*
  %4826 = load i64, i64* %PC
  %4827 = add i64 %4826, 5
  store i64 %4827, i64* %PC
  %4828 = bitcast i8* %4825 to double*
  %4829 = load double, double* %4828, align 1
  %4830 = inttoptr i64 %4824 to double*
  store double %4829, double* %4830
  %4831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4832 = load i64, i64* %RBP
  %4833 = sub i64 %4832, 72
  %4834 = load i64, i64* %PC
  %4835 = add i64 %4834, 5
  store i64 %4835, i64* %PC
  %4836 = inttoptr i64 %4833 to double*
  %4837 = load double, double* %4836
  %4838 = bitcast i8* %4831 to double*
  store double %4837, double* %4838, align 1, !tbaa !2452
  %4839 = getelementptr inbounds i8, i8* %4831, i64 8
  %4840 = bitcast i8* %4839 to double*
  store double 0.000000e+00, double* %4840, align 1, !tbaa !2452
  %4841 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4842 = load i64, i64* %RBP
  %4843 = sub i64 %4842, 128
  %4844 = load i64, i64* %PC
  %4845 = add i64 %4844, 5
  store i64 %4845, i64* %PC
  %4846 = inttoptr i64 %4843 to double*
  %4847 = load double, double* %4846
  %4848 = bitcast i8* %4841 to double*
  store double %4847, double* %4848, align 1, !tbaa !2452
  %4849 = getelementptr inbounds i8, i8* %4841, i64 8
  %4850 = bitcast i8* %4849 to double*
  store double 0.000000e+00, double* %4850, align 1, !tbaa !2452
  %4851 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4852 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4853 = load i64, i64* %RBP
  %4854 = sub i64 %4853, 120
  %4855 = load i64, i64* %PC
  %4856 = add i64 %4855, 5
  store i64 %4856, i64* %PC
  %4857 = bitcast i8* %4852 to double*
  %4858 = load double, double* %4857, align 1
  %4859 = getelementptr inbounds i8, i8* %4852, i64 8
  %4860 = bitcast i8* %4859 to i64*
  %4861 = load i64, i64* %4860, align 1
  %4862 = inttoptr i64 %4854 to double*
  %4863 = load double, double* %4862
  %4864 = fadd double %4858, %4863
  %4865 = bitcast i8* %4851 to double*
  store double %4864, double* %4865, align 1, !tbaa !2452
  %4866 = getelementptr inbounds i8, i8* %4851, i64 8
  %4867 = bitcast i8* %4866 to i64*
  store i64 %4861, i64* %4867, align 1, !tbaa !2452
  %4868 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4869 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4870 = bitcast %union.vec128_t* %XMM1 to i8*
  %4871 = load i64, i64* %PC
  %4872 = add i64 %4871, 4
  store i64 %4872, i64* %PC
  %4873 = bitcast i8* %4869 to double*
  %4874 = load double, double* %4873, align 1
  %4875 = getelementptr inbounds i8, i8* %4869, i64 8
  %4876 = bitcast i8* %4875 to i64*
  %4877 = load i64, i64* %4876, align 1
  %4878 = bitcast i8* %4870 to double*
  %4879 = load double, double* %4878, align 1
  %4880 = fmul double %4874, %4879
  %4881 = bitcast i8* %4868 to double*
  store double %4880, double* %4881, align 1, !tbaa !2452
  %4882 = getelementptr inbounds i8, i8* %4868, i64 8
  %4883 = bitcast i8* %4882 to i64*
  store i64 %4877, i64* %4883, align 1, !tbaa !2452
  %4884 = load i64, i64* %RBP
  %4885 = sub i64 %4884, 16
  %4886 = load i64, i64* %PC
  %4887 = add i64 %4886, 4
  store i64 %4887, i64* %PC
  %4888 = inttoptr i64 %4885 to i64*
  %4889 = load i64, i64* %4888
  store i64 %4889, i64* %RCX, align 8, !tbaa !2428
  %4890 = load i64, i64* %RBP
  %4891 = sub i64 %4890, 40
  %4892 = load i64, i64* %PC
  %4893 = add i64 %4892, 3
  store i64 %4893, i64* %PC
  %4894 = inttoptr i64 %4891 to i32*
  %4895 = load i32, i32* %4894
  %4896 = zext i32 %4895 to i64
  store i64 %4896, i64* %RAX, align 8, !tbaa !2428
  %4897 = load i64, i64* %RAX
  %4898 = load i64, i64* %PC
  %4899 = add i64 %4898, 3
  store i64 %4899, i64* %PC
  %4900 = trunc i64 %4897 to i32
  %4901 = add i32 1, %4900
  %4902 = zext i32 %4901 to i64
  store i64 %4902, i64* %RAX, align 8, !tbaa !2428
  %4903 = icmp ult i32 %4901, %4900
  %4904 = icmp ult i32 %4901, 1
  %4905 = or i1 %4903, %4904
  %4906 = zext i1 %4905 to i8
  %4907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4906, i8* %4907, align 1, !tbaa !2432
  %4908 = and i32 %4901, 255
  %4909 = call i32 @llvm.ctpop.i32(i32 %4908) #17
  %4910 = trunc i32 %4909 to i8
  %4911 = and i8 %4910, 1
  %4912 = xor i8 %4911, 1
  %4913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4912, i8* %4913, align 1, !tbaa !2446
  %4914 = xor i64 1, %4897
  %4915 = trunc i64 %4914 to i32
  %4916 = xor i32 %4915, %4901
  %4917 = lshr i32 %4916, 4
  %4918 = trunc i32 %4917 to i8
  %4919 = and i8 %4918, 1
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4919, i8* %4920, align 1, !tbaa !2447
  %4921 = icmp eq i32 %4901, 0
  %4922 = zext i1 %4921 to i8
  %4923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4922, i8* %4923, align 1, !tbaa !2448
  %4924 = lshr i32 %4901, 31
  %4925 = trunc i32 %4924 to i8
  %4926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4925, i8* %4926, align 1, !tbaa !2449
  %4927 = lshr i32 %4900, 31
  %4928 = xor i32 %4924, %4927
  %4929 = add nuw nsw i32 %4928, %4924
  %4930 = icmp eq i32 %4929, 2
  %4931 = zext i1 %4930 to i8
  %4932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4931, i8* %4932, align 1, !tbaa !2450
  %4933 = load i32, i32* %EAX
  %4934 = zext i32 %4933 to i64
  %4935 = load i64, i64* %PC
  %4936 = add i64 %4935, 3
  store i64 %4936, i64* %PC
  %4937 = shl i64 %4934, 32
  %4938 = ashr exact i64 %4937, 32
  store i64 %4938, i64* %RDX, align 8, !tbaa !2428
  %4939 = load i64, i64* %RCX
  %4940 = load i64, i64* %RDX
  %4941 = mul i64 %4940, 8
  %4942 = add i64 %4941, %4939
  %4943 = bitcast %union.vec128_t* %XMM0 to i8*
  %4944 = load i64, i64* %PC
  %4945 = add i64 %4944, 5
  store i64 %4945, i64* %PC
  %4946 = bitcast i8* %4943 to double*
  %4947 = load double, double* %4946, align 1
  %4948 = inttoptr i64 %4942 to double*
  store double %4947, double* %4948
  %4949 = load i64, i64* %RBP
  %4950 = sub i64 %4949, 28
  %4951 = load i64, i64* %PC
  %4952 = add i64 %4951, 3
  store i64 %4952, i64* %PC
  %4953 = inttoptr i64 %4950 to i32*
  %4954 = load i32, i32* %4953
  %4955 = zext i32 %4954 to i64
  store i64 %4955, i64* %RAX, align 8, !tbaa !2428
  %4956 = load i64, i64* %RAX
  %4957 = load i64, i64* %PC
  %4958 = add i64 %4957, 3
  store i64 %4958, i64* %PC
  %4959 = trunc i64 %4956 to i32
  %4960 = add i32 2, %4959
  %4961 = zext i32 %4960 to i64
  store i64 %4961, i64* %RAX, align 8, !tbaa !2428
  %4962 = icmp ult i32 %4960, %4959
  %4963 = icmp ult i32 %4960, 2
  %4964 = or i1 %4962, %4963
  %4965 = zext i1 %4964 to i8
  %4966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4965, i8* %4966, align 1, !tbaa !2432
  %4967 = and i32 %4960, 255
  %4968 = call i32 @llvm.ctpop.i32(i32 %4967) #17
  %4969 = trunc i32 %4968 to i8
  %4970 = and i8 %4969, 1
  %4971 = xor i8 %4970, 1
  %4972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4971, i8* %4972, align 1, !tbaa !2446
  %4973 = xor i64 2, %4956
  %4974 = trunc i64 %4973 to i32
  %4975 = xor i32 %4974, %4960
  %4976 = lshr i32 %4975, 4
  %4977 = trunc i32 %4976 to i8
  %4978 = and i8 %4977, 1
  %4979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4978, i8* %4979, align 1, !tbaa !2447
  %4980 = icmp eq i32 %4960, 0
  %4981 = zext i1 %4980 to i8
  %4982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4981, i8* %4982, align 1, !tbaa !2448
  %4983 = lshr i32 %4960, 31
  %4984 = trunc i32 %4983 to i8
  %4985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4984, i8* %4985, align 1, !tbaa !2449
  %4986 = lshr i32 %4959, 31
  %4987 = xor i32 %4983, %4986
  %4988 = add nuw nsw i32 %4987, %4983
  %4989 = icmp eq i32 %4988, 2
  %4990 = zext i1 %4989 to i8
  %4991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4990, i8* %4991, align 1, !tbaa !2450
  %4992 = load i64, i64* %RBP
  %4993 = sub i64 %4992, 28
  %4994 = load i32, i32* %EAX
  %4995 = zext i32 %4994 to i64
  %4996 = load i64, i64* %PC
  %4997 = add i64 %4996, 3
  store i64 %4997, i64* %PC
  %4998 = inttoptr i64 %4993 to i32*
  store i32 %4994, i32* %4998
  %4999 = load i64, i64* %PC
  %5000 = sub i64 %4999, 695
  %5001 = load i64, i64* %PC
  %5002 = add i64 %5001, 5
  store i64 %5002, i64* %PC
  %5003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5000, i64* %5003, align 8, !tbaa !2428
  br label %block_4035b1

block_4035b1:                                     ; preds = %block_4035c2, %block_40359d
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_40359d ], [ %MEMORY.2, %block_4035c2 ]
  %5004 = load i64, i64* %RBP
  %5005 = sub i64 %5004, 28
  %5006 = load i64, i64* %PC
  %5007 = add i64 %5006, 3
  store i64 %5007, i64* %PC
  %5008 = inttoptr i64 %5005 to i32*
  %5009 = load i32, i32* %5008
  %5010 = zext i32 %5009 to i64
  store i64 %5010, i64* %RAX, align 8, !tbaa !2428
  %5011 = load i64, i64* %RBP
  %5012 = sub i64 %5011, 8
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 3
  store i64 %5014, i64* %PC
  %5015 = inttoptr i64 %5012 to i32*
  %5016 = load i32, i32* %5015
  %5017 = zext i32 %5016 to i64
  store i64 %5017, i64* %RCX, align 8, !tbaa !2428
  %5018 = load i64, i64* %RCX
  %5019 = load i64, i64* %RBP
  %5020 = sub i64 %5019, 56
  %5021 = load i64, i64* %PC
  %5022 = add i64 %5021, 3
  store i64 %5022, i64* %PC
  %5023 = trunc i64 %5018 to i32
  %5024 = inttoptr i64 %5020 to i32*
  %5025 = load i32, i32* %5024
  %5026 = add i32 %5025, %5023
  %5027 = zext i32 %5026 to i64
  store i64 %5027, i64* %RCX, align 8, !tbaa !2428
  %5028 = icmp ult i32 %5026, %5023
  %5029 = icmp ult i32 %5026, %5025
  %5030 = or i1 %5028, %5029
  %5031 = zext i1 %5030 to i8
  %5032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5031, i8* %5032, align 1, !tbaa !2432
  %5033 = and i32 %5026, 255
  %5034 = call i32 @llvm.ctpop.i32(i32 %5033) #17
  %5035 = trunc i32 %5034 to i8
  %5036 = and i8 %5035, 1
  %5037 = xor i8 %5036, 1
  %5038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5037, i8* %5038, align 1, !tbaa !2446
  %5039 = xor i32 %5025, %5023
  %5040 = xor i32 %5039, %5026
  %5041 = lshr i32 %5040, 4
  %5042 = trunc i32 %5041 to i8
  %5043 = and i8 %5042, 1
  %5044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5043, i8* %5044, align 1, !tbaa !2447
  %5045 = icmp eq i32 %5026, 0
  %5046 = zext i1 %5045 to i8
  %5047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5046, i8* %5047, align 1, !tbaa !2448
  %5048 = lshr i32 %5026, 31
  %5049 = trunc i32 %5048 to i8
  %5050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5049, i8* %5050, align 1, !tbaa !2449
  %5051 = lshr i32 %5023, 31
  %5052 = lshr i32 %5025, 31
  %5053 = xor i32 %5048, %5051
  %5054 = xor i32 %5048, %5052
  %5055 = add nuw nsw i32 %5053, %5054
  %5056 = icmp eq i32 %5055, 2
  %5057 = zext i1 %5056 to i8
  %5058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5057, i8* %5058, align 1, !tbaa !2450
  %5059 = load i32, i32* %EAX
  %5060 = zext i32 %5059 to i64
  %5061 = load i32, i32* %ECX
  %5062 = zext i32 %5061 to i64
  %5063 = load i64, i64* %PC
  %5064 = add i64 %5063, 2
  store i64 %5064, i64* %PC
  %5065 = sub i32 %5059, %5061
  %5066 = icmp ult i32 %5059, %5061
  %5067 = zext i1 %5066 to i8
  %5068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5067, i8* %5068, align 1, !tbaa !2432
  %5069 = and i32 %5065, 255
  %5070 = call i32 @llvm.ctpop.i32(i32 %5069) #17
  %5071 = trunc i32 %5070 to i8
  %5072 = and i8 %5071, 1
  %5073 = xor i8 %5072, 1
  %5074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5073, i8* %5074, align 1, !tbaa !2446
  %5075 = xor i64 %5062, %5060
  %5076 = trunc i64 %5075 to i32
  %5077 = xor i32 %5076, %5065
  %5078 = lshr i32 %5077, 4
  %5079 = trunc i32 %5078 to i8
  %5080 = and i8 %5079, 1
  %5081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5080, i8* %5081, align 1, !tbaa !2447
  %5082 = icmp eq i32 %5065, 0
  %5083 = zext i1 %5082 to i8
  %5084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5083, i8* %5084, align 1, !tbaa !2448
  %5085 = lshr i32 %5065, 31
  %5086 = trunc i32 %5085 to i8
  %5087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5086, i8* %5087, align 1, !tbaa !2449
  %5088 = lshr i32 %5059, 31
  %5089 = lshr i32 %5061, 31
  %5090 = xor i32 %5089, %5088
  %5091 = xor i32 %5085, %5088
  %5092 = add nuw nsw i32 %5091, %5090
  %5093 = icmp eq i32 %5092, 2
  %5094 = zext i1 %5093 to i8
  %5095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5094, i8* %5095, align 1, !tbaa !2450
  %5096 = load i64, i64* %PC
  %5097 = add i64 %5096, 689
  %5098 = load i64, i64* %PC
  %5099 = add i64 %5098, 6
  %5100 = load i64, i64* %PC
  %5101 = add i64 %5100, 6
  store i64 %5101, i64* %PC
  %5102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5103 = load i8, i8* %5102, align 1, !tbaa !2449
  %5104 = icmp ne i8 %5103, 0
  %5105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5106 = load i8, i8* %5105, align 1, !tbaa !2450
  %5107 = icmp ne i8 %5106, 0
  %5108 = xor i1 %5104, %5107
  %5109 = xor i1 %5108, true
  %5110 = zext i1 %5109 to i8
  store i8 %5110, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5112 = select i1 %5108, i64 %5099, i64 %5097
  store i64 %5112, i64* %5111, align 8, !tbaa !2428
  %5113 = load i8, i8* %BRANCH_TAKEN
  %5114 = icmp eq i8 %5113, 1
  %5115 = load i64, i64* %RBP
  br i1 %5114, label %block_40386d, label %block_4035c2

block_403883:                                     ; preds = %block_403feb, %block_40386d
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_40386d ], [ %MEMORY.0, %block_403feb ]
  %5116 = load i64, i64* %RBP
  %5117 = sub i64 %5116, 44
  %5118 = load i64, i64* %PC
  %5119 = add i64 %5118, 3
  store i64 %5119, i64* %PC
  %5120 = inttoptr i64 %5117 to i32*
  %5121 = load i32, i32* %5120
  %5122 = zext i32 %5121 to i64
  store i64 %5122, i64* %RAX, align 8, !tbaa !2428
  %5123 = load i32, i32* %EAX
  %5124 = zext i32 %5123 to i64
  %5125 = load i64, i64* %RBP
  %5126 = sub i64 %5125, 4
  %5127 = load i64, i64* %PC
  %5128 = add i64 %5127, 3
  store i64 %5128, i64* %PC
  %5129 = inttoptr i64 %5126 to i32*
  %5130 = load i32, i32* %5129
  %5131 = sub i32 %5123, %5130
  %5132 = icmp ult i32 %5123, %5130
  %5133 = zext i1 %5132 to i8
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5133, i8* %5134, align 1, !tbaa !2432
  %5135 = and i32 %5131, 255
  %5136 = call i32 @llvm.ctpop.i32(i32 %5135) #17
  %5137 = trunc i32 %5136 to i8
  %5138 = and i8 %5137, 1
  %5139 = xor i8 %5138, 1
  %5140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5139, i8* %5140, align 1, !tbaa !2446
  %5141 = xor i32 %5130, %5123
  %5142 = xor i32 %5141, %5131
  %5143 = lshr i32 %5142, 4
  %5144 = trunc i32 %5143 to i8
  %5145 = and i8 %5144, 1
  %5146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5145, i8* %5146, align 1, !tbaa !2447
  %5147 = icmp eq i32 %5131, 0
  %5148 = zext i1 %5147 to i8
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5148, i8* %5149, align 1, !tbaa !2448
  %5150 = lshr i32 %5131, 31
  %5151 = trunc i32 %5150 to i8
  %5152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5151, i8* %5152, align 1, !tbaa !2449
  %5153 = lshr i32 %5123, 31
  %5154 = lshr i32 %5130, 31
  %5155 = xor i32 %5154, %5153
  %5156 = xor i32 %5150, %5153
  %5157 = add nuw nsw i32 %5156, %5155
  %5158 = icmp eq i32 %5157, 2
  %5159 = zext i1 %5158 to i8
  %5160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5159, i8* %5160, align 1, !tbaa !2450
  %5161 = load i64, i64* %PC
  %5162 = add i64 %5161, 1909
  %5163 = load i64, i64* %PC
  %5164 = add i64 %5163, 6
  %5165 = load i64, i64* %PC
  %5166 = add i64 %5165, 6
  store i64 %5166, i64* %PC
  %5167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5168 = load i8, i8* %5167, align 1, !tbaa !2449
  %5169 = icmp ne i8 %5168, 0
  %5170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5171 = load i8, i8* %5170, align 1, !tbaa !2450
  %5172 = icmp ne i8 %5171, 0
  %5173 = xor i1 %5169, %5172
  %5174 = xor i1 %5173, true
  %5175 = zext i1 %5174 to i8
  store i8 %5175, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5177 = select i1 %5173, i64 %5164, i64 %5162
  store i64 %5177, i64* %5176, align 8, !tbaa !2428
  %5178 = load i8, i8* %BRANCH_TAKEN
  %5179 = icmp eq i8 %5178, 1
  br i1 %5179, label %block_403ffe, label %block_40388f

block_403941:                                     ; preds = %block_403930
  %5180 = load i64, i64* %RBP
  %5181 = sub i64 %5180, 28
  %5182 = load i64, i64* %PC
  %5183 = add i64 %5182, 3
  store i64 %5183, i64* %PC
  %5184 = inttoptr i64 %5181 to i32*
  %5185 = load i32, i32* %5184
  %5186 = zext i32 %5185 to i64
  store i64 %5186, i64* %RAX, align 8, !tbaa !2428
  %5187 = load i64, i64* %RAX
  %5188 = load i64, i64* %RBP
  %5189 = sub i64 %5188, 8
  %5190 = load i64, i64* %PC
  %5191 = add i64 %5190, 3
  store i64 %5191, i64* %PC
  %5192 = trunc i64 %5187 to i32
  %5193 = inttoptr i64 %5189 to i32*
  %5194 = load i32, i32* %5193
  %5195 = add i32 %5194, %5192
  %5196 = zext i32 %5195 to i64
  store i64 %5196, i64* %RAX, align 8, !tbaa !2428
  %5197 = icmp ult i32 %5195, %5192
  %5198 = icmp ult i32 %5195, %5194
  %5199 = or i1 %5197, %5198
  %5200 = zext i1 %5199 to i8
  %5201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5200, i8* %5201, align 1, !tbaa !2432
  %5202 = and i32 %5195, 255
  %5203 = call i32 @llvm.ctpop.i32(i32 %5202) #17
  %5204 = trunc i32 %5203 to i8
  %5205 = and i8 %5204, 1
  %5206 = xor i8 %5205, 1
  %5207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5206, i8* %5207, align 1, !tbaa !2446
  %5208 = xor i32 %5194, %5192
  %5209 = xor i32 %5208, %5195
  %5210 = lshr i32 %5209, 4
  %5211 = trunc i32 %5210 to i8
  %5212 = and i8 %5211, 1
  %5213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5212, i8* %5213, align 1, !tbaa !2447
  %5214 = icmp eq i32 %5195, 0
  %5215 = zext i1 %5214 to i8
  %5216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5215, i8* %5216, align 1, !tbaa !2448
  %5217 = lshr i32 %5195, 31
  %5218 = trunc i32 %5217 to i8
  %5219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5218, i8* %5219, align 1, !tbaa !2449
  %5220 = lshr i32 %5192, 31
  %5221 = lshr i32 %5194, 31
  %5222 = xor i32 %5217, %5220
  %5223 = xor i32 %5217, %5221
  %5224 = add nuw nsw i32 %5222, %5223
  %5225 = icmp eq i32 %5224, 2
  %5226 = zext i1 %5225 to i8
  %5227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5226, i8* %5227, align 1, !tbaa !2450
  %5228 = load i64, i64* %RBP
  %5229 = sub i64 %5228, 32
  %5230 = load i32, i32* %EAX
  %5231 = zext i32 %5230 to i64
  %5232 = load i64, i64* %PC
  %5233 = add i64 %5232, 3
  store i64 %5233, i64* %PC
  %5234 = inttoptr i64 %5229 to i32*
  store i32 %5230, i32* %5234
  %5235 = load i64, i64* %RBP
  %5236 = sub i64 %5235, 32
  %5237 = load i64, i64* %PC
  %5238 = add i64 %5237, 3
  store i64 %5238, i64* %PC
  %5239 = inttoptr i64 %5236 to i32*
  %5240 = load i32, i32* %5239
  %5241 = zext i32 %5240 to i64
  store i64 %5241, i64* %RAX, align 8, !tbaa !2428
  %5242 = load i64, i64* %RAX
  %5243 = load i64, i64* %RBP
  %5244 = sub i64 %5243, 8
  %5245 = load i64, i64* %PC
  %5246 = add i64 %5245, 3
  store i64 %5246, i64* %PC
  %5247 = trunc i64 %5242 to i32
  %5248 = inttoptr i64 %5244 to i32*
  %5249 = load i32, i32* %5248
  %5250 = add i32 %5249, %5247
  %5251 = zext i32 %5250 to i64
  store i64 %5251, i64* %RAX, align 8, !tbaa !2428
  %5252 = icmp ult i32 %5250, %5247
  %5253 = icmp ult i32 %5250, %5249
  %5254 = or i1 %5252, %5253
  %5255 = zext i1 %5254 to i8
  %5256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5255, i8* %5256, align 1, !tbaa !2432
  %5257 = and i32 %5250, 255
  %5258 = call i32 @llvm.ctpop.i32(i32 %5257) #17
  %5259 = trunc i32 %5258 to i8
  %5260 = and i8 %5259, 1
  %5261 = xor i8 %5260, 1
  %5262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5261, i8* %5262, align 1, !tbaa !2446
  %5263 = xor i32 %5249, %5247
  %5264 = xor i32 %5263, %5250
  %5265 = lshr i32 %5264, 4
  %5266 = trunc i32 %5265 to i8
  %5267 = and i8 %5266, 1
  %5268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5267, i8* %5268, align 1, !tbaa !2447
  %5269 = icmp eq i32 %5250, 0
  %5270 = zext i1 %5269 to i8
  %5271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5270, i8* %5271, align 1, !tbaa !2448
  %5272 = lshr i32 %5250, 31
  %5273 = trunc i32 %5272 to i8
  %5274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5273, i8* %5274, align 1, !tbaa !2449
  %5275 = lshr i32 %5247, 31
  %5276 = lshr i32 %5249, 31
  %5277 = xor i32 %5272, %5275
  %5278 = xor i32 %5272, %5276
  %5279 = add nuw nsw i32 %5277, %5278
  %5280 = icmp eq i32 %5279, 2
  %5281 = zext i1 %5280 to i8
  %5282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5281, i8* %5282, align 1, !tbaa !2450
  %5283 = load i64, i64* %RBP
  %5284 = sub i64 %5283, 36
  %5285 = load i32, i32* %EAX
  %5286 = zext i32 %5285 to i64
  %5287 = load i64, i64* %PC
  %5288 = add i64 %5287, 3
  store i64 %5288, i64* %PC
  %5289 = inttoptr i64 %5284 to i32*
  store i32 %5285, i32* %5289
  %5290 = load i64, i64* %RBP
  %5291 = sub i64 %5290, 36
  %5292 = load i64, i64* %PC
  %5293 = add i64 %5292, 3
  store i64 %5293, i64* %PC
  %5294 = inttoptr i64 %5291 to i32*
  %5295 = load i32, i32* %5294
  %5296 = zext i32 %5295 to i64
  store i64 %5296, i64* %RAX, align 8, !tbaa !2428
  %5297 = load i64, i64* %RAX
  %5298 = load i64, i64* %RBP
  %5299 = sub i64 %5298, 8
  %5300 = load i64, i64* %PC
  %5301 = add i64 %5300, 3
  store i64 %5301, i64* %PC
  %5302 = trunc i64 %5297 to i32
  %5303 = inttoptr i64 %5299 to i32*
  %5304 = load i32, i32* %5303
  %5305 = add i32 %5304, %5302
  %5306 = zext i32 %5305 to i64
  store i64 %5306, i64* %RAX, align 8, !tbaa !2428
  %5307 = icmp ult i32 %5305, %5302
  %5308 = icmp ult i32 %5305, %5304
  %5309 = or i1 %5307, %5308
  %5310 = zext i1 %5309 to i8
  %5311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5310, i8* %5311, align 1, !tbaa !2432
  %5312 = and i32 %5305, 255
  %5313 = call i32 @llvm.ctpop.i32(i32 %5312) #17
  %5314 = trunc i32 %5313 to i8
  %5315 = and i8 %5314, 1
  %5316 = xor i8 %5315, 1
  %5317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5316, i8* %5317, align 1, !tbaa !2446
  %5318 = xor i32 %5304, %5302
  %5319 = xor i32 %5318, %5305
  %5320 = lshr i32 %5319, 4
  %5321 = trunc i32 %5320 to i8
  %5322 = and i8 %5321, 1
  %5323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5322, i8* %5323, align 1, !tbaa !2447
  %5324 = icmp eq i32 %5305, 0
  %5325 = zext i1 %5324 to i8
  %5326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5325, i8* %5326, align 1, !tbaa !2448
  %5327 = lshr i32 %5305, 31
  %5328 = trunc i32 %5327 to i8
  %5329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5328, i8* %5329, align 1, !tbaa !2449
  %5330 = lshr i32 %5302, 31
  %5331 = lshr i32 %5304, 31
  %5332 = xor i32 %5327, %5330
  %5333 = xor i32 %5327, %5331
  %5334 = add nuw nsw i32 %5332, %5333
  %5335 = icmp eq i32 %5334, 2
  %5336 = zext i1 %5335 to i8
  %5337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5336, i8* %5337, align 1, !tbaa !2450
  %5338 = load i64, i64* %RBP
  %5339 = sub i64 %5338, 40
  %5340 = load i32, i32* %EAX
  %5341 = zext i32 %5340 to i64
  %5342 = load i64, i64* %PC
  %5343 = add i64 %5342, 3
  store i64 %5343, i64* %PC
  %5344 = inttoptr i64 %5339 to i32*
  store i32 %5340, i32* %5344
  %5345 = load i64, i64* %RBP
  %5346 = sub i64 %5345, 16
  %5347 = load i64, i64* %PC
  %5348 = add i64 %5347, 4
  store i64 %5348, i64* %PC
  %5349 = inttoptr i64 %5346 to i64*
  %5350 = load i64, i64* %5349
  store i64 %5350, i64* %RCX, align 8, !tbaa !2428
  %5351 = load i64, i64* %RBP
  %5352 = sub i64 %5351, 28
  %5353 = load i64, i64* %PC
  %5354 = add i64 %5353, 4
  store i64 %5354, i64* %PC
  %5355 = inttoptr i64 %5352 to i32*
  %5356 = load i32, i32* %5355
  %5357 = sext i32 %5356 to i64
  store i64 %5357, i64* %RDX, align 8, !tbaa !2428
  %5358 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5359 = load i64, i64* %RCX
  %5360 = load i64, i64* %RDX
  %5361 = mul i64 %5360, 8
  %5362 = add i64 %5361, %5359
  %5363 = load i64, i64* %PC
  %5364 = add i64 %5363, 5
  store i64 %5364, i64* %PC
  %5365 = inttoptr i64 %5362 to double*
  %5366 = load double, double* %5365
  %5367 = bitcast i8* %5358 to double*
  store double %5366, double* %5367, align 1, !tbaa !2452
  %5368 = getelementptr inbounds i8, i8* %5358, i64 8
  %5369 = bitcast i8* %5368 to double*
  store double 0.000000e+00, double* %5369, align 1, !tbaa !2452
  %5370 = load i64, i64* %RBP
  %5371 = sub i64 %5370, 16
  %5372 = load i64, i64* %PC
  %5373 = add i64 %5372, 4
  store i64 %5373, i64* %PC
  %5374 = inttoptr i64 %5371 to i64*
  %5375 = load i64, i64* %5374
  store i64 %5375, i64* %RCX, align 8, !tbaa !2428
  %5376 = load i64, i64* %RBP
  %5377 = sub i64 %5376, 32
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 4
  store i64 %5379, i64* %PC
  %5380 = inttoptr i64 %5377 to i32*
  %5381 = load i32, i32* %5380
  %5382 = sext i32 %5381 to i64
  store i64 %5382, i64* %RDX, align 8, !tbaa !2428
  %5383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5384 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5385 = load i64, i64* %RCX
  %5386 = load i64, i64* %RDX
  %5387 = mul i64 %5386, 8
  %5388 = add i64 %5387, %5385
  %5389 = load i64, i64* %PC
  %5390 = add i64 %5389, 5
  store i64 %5390, i64* %PC
  %5391 = bitcast i8* %5384 to double*
  %5392 = load double, double* %5391, align 1
  %5393 = getelementptr inbounds i8, i8* %5384, i64 8
  %5394 = bitcast i8* %5393 to i64*
  %5395 = load i64, i64* %5394, align 1
  %5396 = inttoptr i64 %5388 to double*
  %5397 = load double, double* %5396
  %5398 = fadd double %5392, %5397
  %5399 = bitcast i8* %5383 to double*
  store double %5398, double* %5399, align 1, !tbaa !2452
  %5400 = getelementptr inbounds i8, i8* %5383, i64 8
  %5401 = bitcast i8* %5400 to i64*
  store i64 %5395, i64* %5401, align 1, !tbaa !2452
  %5402 = load i64, i64* %RBP
  %5403 = sub i64 %5402, 120
  %5404 = bitcast %union.vec128_t* %XMM0 to i8*
  %5405 = load i64, i64* %PC
  %5406 = add i64 %5405, 5
  store i64 %5406, i64* %PC
  %5407 = bitcast i8* %5404 to double*
  %5408 = load double, double* %5407, align 1
  %5409 = inttoptr i64 %5403 to double*
  store double %5408, double* %5409
  %5410 = load i64, i64* %RBP
  %5411 = sub i64 %5410, 16
  %5412 = load i64, i64* %PC
  %5413 = add i64 %5412, 4
  store i64 %5413, i64* %PC
  %5414 = inttoptr i64 %5411 to i64*
  %5415 = load i64, i64* %5414
  store i64 %5415, i64* %RCX, align 8, !tbaa !2428
  %5416 = load i64, i64* %RBP
  %5417 = sub i64 %5416, 28
  %5418 = load i64, i64* %PC
  %5419 = add i64 %5418, 3
  store i64 %5419, i64* %PC
  %5420 = inttoptr i64 %5417 to i32*
  %5421 = load i32, i32* %5420
  %5422 = zext i32 %5421 to i64
  store i64 %5422, i64* %RAX, align 8, !tbaa !2428
  %5423 = load i64, i64* %RAX
  %5424 = load i64, i64* %PC
  %5425 = add i64 %5424, 3
  store i64 %5425, i64* %PC
  %5426 = trunc i64 %5423 to i32
  %5427 = add i32 1, %5426
  %5428 = zext i32 %5427 to i64
  store i64 %5428, i64* %RAX, align 8, !tbaa !2428
  %5429 = icmp ult i32 %5427, %5426
  %5430 = icmp ult i32 %5427, 1
  %5431 = or i1 %5429, %5430
  %5432 = zext i1 %5431 to i8
  %5433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5432, i8* %5433, align 1, !tbaa !2432
  %5434 = and i32 %5427, 255
  %5435 = call i32 @llvm.ctpop.i32(i32 %5434) #17
  %5436 = trunc i32 %5435 to i8
  %5437 = and i8 %5436, 1
  %5438 = xor i8 %5437, 1
  %5439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5438, i8* %5439, align 1, !tbaa !2446
  %5440 = xor i64 1, %5423
  %5441 = trunc i64 %5440 to i32
  %5442 = xor i32 %5441, %5427
  %5443 = lshr i32 %5442, 4
  %5444 = trunc i32 %5443 to i8
  %5445 = and i8 %5444, 1
  %5446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5445, i8* %5446, align 1, !tbaa !2447
  %5447 = icmp eq i32 %5427, 0
  %5448 = zext i1 %5447 to i8
  %5449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5448, i8* %5449, align 1, !tbaa !2448
  %5450 = lshr i32 %5427, 31
  %5451 = trunc i32 %5450 to i8
  %5452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5451, i8* %5452, align 1, !tbaa !2449
  %5453 = lshr i32 %5426, 31
  %5454 = xor i32 %5450, %5453
  %5455 = add nuw nsw i32 %5454, %5450
  %5456 = icmp eq i32 %5455, 2
  %5457 = zext i1 %5456 to i8
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5457, i8* %5458, align 1, !tbaa !2450
  %5459 = load i32, i32* %EAX
  %5460 = zext i32 %5459 to i64
  %5461 = load i64, i64* %PC
  %5462 = add i64 %5461, 3
  store i64 %5462, i64* %PC
  %5463 = shl i64 %5460, 32
  %5464 = ashr exact i64 %5463, 32
  store i64 %5464, i64* %RDX, align 8, !tbaa !2428
  %5465 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5466 = load i64, i64* %RCX
  %5467 = load i64, i64* %RDX
  %5468 = mul i64 %5467, 8
  %5469 = add i64 %5468, %5466
  %5470 = load i64, i64* %PC
  %5471 = add i64 %5470, 5
  store i64 %5471, i64* %PC
  %5472 = inttoptr i64 %5469 to double*
  %5473 = load double, double* %5472
  %5474 = bitcast i8* %5465 to double*
  store double %5473, double* %5474, align 1, !tbaa !2452
  %5475 = getelementptr inbounds i8, i8* %5465, i64 8
  %5476 = bitcast i8* %5475 to double*
  store double 0.000000e+00, double* %5476, align 1, !tbaa !2452
  %5477 = load i64, i64* %RBP
  %5478 = sub i64 %5477, 16
  %5479 = load i64, i64* %PC
  %5480 = add i64 %5479, 4
  store i64 %5480, i64* %PC
  %5481 = inttoptr i64 %5478 to i64*
  %5482 = load i64, i64* %5481
  store i64 %5482, i64* %RCX, align 8, !tbaa !2428
  %5483 = load i64, i64* %RBP
  %5484 = sub i64 %5483, 32
  %5485 = load i64, i64* %PC
  %5486 = add i64 %5485, 3
  store i64 %5486, i64* %PC
  %5487 = inttoptr i64 %5484 to i32*
  %5488 = load i32, i32* %5487
  %5489 = zext i32 %5488 to i64
  store i64 %5489, i64* %RAX, align 8, !tbaa !2428
  %5490 = load i64, i64* %RAX
  %5491 = load i64, i64* %PC
  %5492 = add i64 %5491, 3
  store i64 %5492, i64* %PC
  %5493 = trunc i64 %5490 to i32
  %5494 = add i32 1, %5493
  %5495 = zext i32 %5494 to i64
  store i64 %5495, i64* %RAX, align 8, !tbaa !2428
  %5496 = icmp ult i32 %5494, %5493
  %5497 = icmp ult i32 %5494, 1
  %5498 = or i1 %5496, %5497
  %5499 = zext i1 %5498 to i8
  %5500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5499, i8* %5500, align 1, !tbaa !2432
  %5501 = and i32 %5494, 255
  %5502 = call i32 @llvm.ctpop.i32(i32 %5501) #17
  %5503 = trunc i32 %5502 to i8
  %5504 = and i8 %5503, 1
  %5505 = xor i8 %5504, 1
  %5506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5505, i8* %5506, align 1, !tbaa !2446
  %5507 = xor i64 1, %5490
  %5508 = trunc i64 %5507 to i32
  %5509 = xor i32 %5508, %5494
  %5510 = lshr i32 %5509, 4
  %5511 = trunc i32 %5510 to i8
  %5512 = and i8 %5511, 1
  %5513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5512, i8* %5513, align 1, !tbaa !2447
  %5514 = icmp eq i32 %5494, 0
  %5515 = zext i1 %5514 to i8
  %5516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5515, i8* %5516, align 1, !tbaa !2448
  %5517 = lshr i32 %5494, 31
  %5518 = trunc i32 %5517 to i8
  %5519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5518, i8* %5519, align 1, !tbaa !2449
  %5520 = lshr i32 %5493, 31
  %5521 = xor i32 %5517, %5520
  %5522 = add nuw nsw i32 %5521, %5517
  %5523 = icmp eq i32 %5522, 2
  %5524 = zext i1 %5523 to i8
  %5525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5524, i8* %5525, align 1, !tbaa !2450
  %5526 = load i32, i32* %EAX
  %5527 = zext i32 %5526 to i64
  %5528 = load i64, i64* %PC
  %5529 = add i64 %5528, 3
  store i64 %5529, i64* %PC
  %5530 = shl i64 %5527, 32
  %5531 = ashr exact i64 %5530, 32
  store i64 %5531, i64* %RDX, align 8, !tbaa !2428
  %5532 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5533 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5534 = load i64, i64* %RCX
  %5535 = load i64, i64* %RDX
  %5536 = mul i64 %5535, 8
  %5537 = add i64 %5536, %5534
  %5538 = load i64, i64* %PC
  %5539 = add i64 %5538, 5
  store i64 %5539, i64* %PC
  %5540 = bitcast i8* %5533 to double*
  %5541 = load double, double* %5540, align 1
  %5542 = getelementptr inbounds i8, i8* %5533, i64 8
  %5543 = bitcast i8* %5542 to i64*
  %5544 = load i64, i64* %5543, align 1
  %5545 = inttoptr i64 %5537 to double*
  %5546 = load double, double* %5545
  %5547 = fadd double %5541, %5546
  %5548 = bitcast i8* %5532 to double*
  store double %5547, double* %5548, align 1, !tbaa !2452
  %5549 = getelementptr inbounds i8, i8* %5532, i64 8
  %5550 = bitcast i8* %5549 to i64*
  store i64 %5544, i64* %5550, align 1, !tbaa !2452
  %5551 = load i64, i64* %RBP
  %5552 = sub i64 %5551, 128
  %5553 = bitcast %union.vec128_t* %XMM0 to i8*
  %5554 = load i64, i64* %PC
  %5555 = add i64 %5554, 5
  store i64 %5555, i64* %PC
  %5556 = bitcast i8* %5553 to double*
  %5557 = load double, double* %5556, align 1
  %5558 = inttoptr i64 %5552 to double*
  store double %5557, double* %5558
  %5559 = load i64, i64* %RBP
  %5560 = sub i64 %5559, 16
  %5561 = load i64, i64* %PC
  %5562 = add i64 %5561, 4
  store i64 %5562, i64* %PC
  %5563 = inttoptr i64 %5560 to i64*
  %5564 = load i64, i64* %5563
  store i64 %5564, i64* %RCX, align 8, !tbaa !2428
  %5565 = load i64, i64* %RBP
  %5566 = sub i64 %5565, 28
  %5567 = load i64, i64* %PC
  %5568 = add i64 %5567, 4
  store i64 %5568, i64* %PC
  %5569 = inttoptr i64 %5566 to i32*
  %5570 = load i32, i32* %5569
  %5571 = sext i32 %5570 to i64
  store i64 %5571, i64* %RDX, align 8, !tbaa !2428
  %5572 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5573 = load i64, i64* %RCX
  %5574 = load i64, i64* %RDX
  %5575 = mul i64 %5574, 8
  %5576 = add i64 %5575, %5573
  %5577 = load i64, i64* %PC
  %5578 = add i64 %5577, 5
  store i64 %5578, i64* %PC
  %5579 = inttoptr i64 %5576 to double*
  %5580 = load double, double* %5579
  %5581 = bitcast i8* %5572 to double*
  store double %5580, double* %5581, align 1, !tbaa !2452
  %5582 = getelementptr inbounds i8, i8* %5572, i64 8
  %5583 = bitcast i8* %5582 to double*
  store double 0.000000e+00, double* %5583, align 1, !tbaa !2452
  %5584 = load i64, i64* %RBP
  %5585 = sub i64 %5584, 16
  %5586 = load i64, i64* %PC
  %5587 = add i64 %5586, 4
  store i64 %5587, i64* %PC
  %5588 = inttoptr i64 %5585 to i64*
  %5589 = load i64, i64* %5588
  store i64 %5589, i64* %RCX, align 8, !tbaa !2428
  %5590 = load i64, i64* %RBP
  %5591 = sub i64 %5590, 32
  %5592 = load i64, i64* %PC
  %5593 = add i64 %5592, 4
  store i64 %5593, i64* %PC
  %5594 = inttoptr i64 %5591 to i32*
  %5595 = load i32, i32* %5594
  %5596 = sext i32 %5595 to i64
  store i64 %5596, i64* %RDX, align 8, !tbaa !2428
  %5597 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5598 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5599 = load i64, i64* %RCX
  %5600 = load i64, i64* %RDX
  %5601 = mul i64 %5600, 8
  %5602 = add i64 %5601, %5599
  %5603 = load i64, i64* %PC
  %5604 = add i64 %5603, 5
  store i64 %5604, i64* %PC
  %5605 = bitcast i8* %5598 to double*
  %5606 = load double, double* %5605, align 1
  %5607 = getelementptr inbounds i8, i8* %5598, i64 8
  %5608 = bitcast i8* %5607 to i64*
  %5609 = load i64, i64* %5608, align 1
  %5610 = inttoptr i64 %5602 to double*
  %5611 = load double, double* %5610
  %5612 = fsub double %5606, %5611
  %5613 = bitcast i8* %5597 to double*
  store double %5612, double* %5613, align 1, !tbaa !2452
  %5614 = getelementptr inbounds i8, i8* %5597, i64 8
  %5615 = bitcast i8* %5614 to i64*
  store i64 %5609, i64* %5615, align 1, !tbaa !2452
  %5616 = load i64, i64* %RBP
  %5617 = sub i64 %5616, 136
  %5618 = bitcast %union.vec128_t* %XMM0 to i8*
  %5619 = load i64, i64* %PC
  %5620 = add i64 %5619, 8
  store i64 %5620, i64* %PC
  %5621 = bitcast i8* %5618 to double*
  %5622 = load double, double* %5621, align 1
  %5623 = inttoptr i64 %5617 to double*
  store double %5622, double* %5623
  %5624 = load i64, i64* %RBP
  %5625 = sub i64 %5624, 16
  %5626 = load i64, i64* %PC
  %5627 = add i64 %5626, 4
  store i64 %5627, i64* %PC
  %5628 = inttoptr i64 %5625 to i64*
  %5629 = load i64, i64* %5628
  store i64 %5629, i64* %RCX, align 8, !tbaa !2428
  %5630 = load i64, i64* %RBP
  %5631 = sub i64 %5630, 28
  %5632 = load i64, i64* %PC
  %5633 = add i64 %5632, 3
  store i64 %5633, i64* %PC
  %5634 = inttoptr i64 %5631 to i32*
  %5635 = load i32, i32* %5634
  %5636 = zext i32 %5635 to i64
  store i64 %5636, i64* %RAX, align 8, !tbaa !2428
  %5637 = load i64, i64* %RAX
  %5638 = load i64, i64* %PC
  %5639 = add i64 %5638, 3
  store i64 %5639, i64* %PC
  %5640 = trunc i64 %5637 to i32
  %5641 = add i32 1, %5640
  %5642 = zext i32 %5641 to i64
  store i64 %5642, i64* %RAX, align 8, !tbaa !2428
  %5643 = icmp ult i32 %5641, %5640
  %5644 = icmp ult i32 %5641, 1
  %5645 = or i1 %5643, %5644
  %5646 = zext i1 %5645 to i8
  %5647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5646, i8* %5647, align 1, !tbaa !2432
  %5648 = and i32 %5641, 255
  %5649 = call i32 @llvm.ctpop.i32(i32 %5648) #17
  %5650 = trunc i32 %5649 to i8
  %5651 = and i8 %5650, 1
  %5652 = xor i8 %5651, 1
  %5653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5652, i8* %5653, align 1, !tbaa !2446
  %5654 = xor i64 1, %5637
  %5655 = trunc i64 %5654 to i32
  %5656 = xor i32 %5655, %5641
  %5657 = lshr i32 %5656, 4
  %5658 = trunc i32 %5657 to i8
  %5659 = and i8 %5658, 1
  %5660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5659, i8* %5660, align 1, !tbaa !2447
  %5661 = icmp eq i32 %5641, 0
  %5662 = zext i1 %5661 to i8
  %5663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5662, i8* %5663, align 1, !tbaa !2448
  %5664 = lshr i32 %5641, 31
  %5665 = trunc i32 %5664 to i8
  %5666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5665, i8* %5666, align 1, !tbaa !2449
  %5667 = lshr i32 %5640, 31
  %5668 = xor i32 %5664, %5667
  %5669 = add nuw nsw i32 %5668, %5664
  %5670 = icmp eq i32 %5669, 2
  %5671 = zext i1 %5670 to i8
  %5672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5671, i8* %5672, align 1, !tbaa !2450
  %5673 = load i32, i32* %EAX
  %5674 = zext i32 %5673 to i64
  %5675 = load i64, i64* %PC
  %5676 = add i64 %5675, 3
  store i64 %5676, i64* %PC
  %5677 = shl i64 %5674, 32
  %5678 = ashr exact i64 %5677, 32
  store i64 %5678, i64* %RDX, align 8, !tbaa !2428
  %5679 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5680 = load i64, i64* %RCX
  %5681 = load i64, i64* %RDX
  %5682 = mul i64 %5681, 8
  %5683 = add i64 %5682, %5680
  %5684 = load i64, i64* %PC
  %5685 = add i64 %5684, 5
  store i64 %5685, i64* %PC
  %5686 = inttoptr i64 %5683 to double*
  %5687 = load double, double* %5686
  %5688 = bitcast i8* %5679 to double*
  store double %5687, double* %5688, align 1, !tbaa !2452
  %5689 = getelementptr inbounds i8, i8* %5679, i64 8
  %5690 = bitcast i8* %5689 to double*
  store double 0.000000e+00, double* %5690, align 1, !tbaa !2452
  %5691 = load i64, i64* %RBP
  %5692 = sub i64 %5691, 16
  %5693 = load i64, i64* %PC
  %5694 = add i64 %5693, 4
  store i64 %5694, i64* %PC
  %5695 = inttoptr i64 %5692 to i64*
  %5696 = load i64, i64* %5695
  store i64 %5696, i64* %RCX, align 8, !tbaa !2428
  %5697 = load i64, i64* %RBP
  %5698 = sub i64 %5697, 32
  %5699 = load i64, i64* %PC
  %5700 = add i64 %5699, 3
  store i64 %5700, i64* %PC
  %5701 = inttoptr i64 %5698 to i32*
  %5702 = load i32, i32* %5701
  %5703 = zext i32 %5702 to i64
  store i64 %5703, i64* %RAX, align 8, !tbaa !2428
  %5704 = load i64, i64* %RAX
  %5705 = load i64, i64* %PC
  %5706 = add i64 %5705, 3
  store i64 %5706, i64* %PC
  %5707 = trunc i64 %5704 to i32
  %5708 = add i32 1, %5707
  %5709 = zext i32 %5708 to i64
  store i64 %5709, i64* %RAX, align 8, !tbaa !2428
  %5710 = icmp ult i32 %5708, %5707
  %5711 = icmp ult i32 %5708, 1
  %5712 = or i1 %5710, %5711
  %5713 = zext i1 %5712 to i8
  %5714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5713, i8* %5714, align 1, !tbaa !2432
  %5715 = and i32 %5708, 255
  %5716 = call i32 @llvm.ctpop.i32(i32 %5715) #17
  %5717 = trunc i32 %5716 to i8
  %5718 = and i8 %5717, 1
  %5719 = xor i8 %5718, 1
  %5720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5719, i8* %5720, align 1, !tbaa !2446
  %5721 = xor i64 1, %5704
  %5722 = trunc i64 %5721 to i32
  %5723 = xor i32 %5722, %5708
  %5724 = lshr i32 %5723, 4
  %5725 = trunc i32 %5724 to i8
  %5726 = and i8 %5725, 1
  %5727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5726, i8* %5727, align 1, !tbaa !2447
  %5728 = icmp eq i32 %5708, 0
  %5729 = zext i1 %5728 to i8
  %5730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5729, i8* %5730, align 1, !tbaa !2448
  %5731 = lshr i32 %5708, 31
  %5732 = trunc i32 %5731 to i8
  %5733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5732, i8* %5733, align 1, !tbaa !2449
  %5734 = lshr i32 %5707, 31
  %5735 = xor i32 %5731, %5734
  %5736 = add nuw nsw i32 %5735, %5731
  %5737 = icmp eq i32 %5736, 2
  %5738 = zext i1 %5737 to i8
  %5739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5738, i8* %5739, align 1, !tbaa !2450
  %5740 = load i32, i32* %EAX
  %5741 = zext i32 %5740 to i64
  %5742 = load i64, i64* %PC
  %5743 = add i64 %5742, 3
  store i64 %5743, i64* %PC
  %5744 = shl i64 %5741, 32
  %5745 = ashr exact i64 %5744, 32
  store i64 %5745, i64* %RDX, align 8, !tbaa !2428
  %5746 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5747 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5748 = load i64, i64* %RCX
  %5749 = load i64, i64* %RDX
  %5750 = mul i64 %5749, 8
  %5751 = add i64 %5750, %5748
  %5752 = load i64, i64* %PC
  %5753 = add i64 %5752, 5
  store i64 %5753, i64* %PC
  %5754 = bitcast i8* %5747 to double*
  %5755 = load double, double* %5754, align 1
  %5756 = getelementptr inbounds i8, i8* %5747, i64 8
  %5757 = bitcast i8* %5756 to i64*
  %5758 = load i64, i64* %5757, align 1
  %5759 = inttoptr i64 %5751 to double*
  %5760 = load double, double* %5759
  %5761 = fsub double %5755, %5760
  %5762 = bitcast i8* %5746 to double*
  store double %5761, double* %5762, align 1, !tbaa !2452
  %5763 = getelementptr inbounds i8, i8* %5746, i64 8
  %5764 = bitcast i8* %5763 to i64*
  store i64 %5758, i64* %5764, align 1, !tbaa !2452
  %5765 = load i64, i64* %RBP
  %5766 = sub i64 %5765, 144
  %5767 = bitcast %union.vec128_t* %XMM0 to i8*
  %5768 = load i64, i64* %PC
  %5769 = add i64 %5768, 8
  store i64 %5769, i64* %PC
  %5770 = bitcast i8* %5767 to double*
  %5771 = load double, double* %5770, align 1
  %5772 = inttoptr i64 %5766 to double*
  store double %5771, double* %5772
  %5773 = load i64, i64* %RBP
  %5774 = sub i64 %5773, 16
  %5775 = load i64, i64* %PC
  %5776 = add i64 %5775, 4
  store i64 %5776, i64* %PC
  %5777 = inttoptr i64 %5774 to i64*
  %5778 = load i64, i64* %5777
  store i64 %5778, i64* %RCX, align 8, !tbaa !2428
  %5779 = load i64, i64* %RBP
  %5780 = sub i64 %5779, 36
  %5781 = load i64, i64* %PC
  %5782 = add i64 %5781, 4
  store i64 %5782, i64* %PC
  %5783 = inttoptr i64 %5780 to i32*
  %5784 = load i32, i32* %5783
  %5785 = sext i32 %5784 to i64
  store i64 %5785, i64* %RDX, align 8, !tbaa !2428
  %5786 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5787 = load i64, i64* %RCX
  %5788 = load i64, i64* %RDX
  %5789 = mul i64 %5788, 8
  %5790 = add i64 %5789, %5787
  %5791 = load i64, i64* %PC
  %5792 = add i64 %5791, 5
  store i64 %5792, i64* %PC
  %5793 = inttoptr i64 %5790 to double*
  %5794 = load double, double* %5793
  %5795 = bitcast i8* %5786 to double*
  store double %5794, double* %5795, align 1, !tbaa !2452
  %5796 = getelementptr inbounds i8, i8* %5786, i64 8
  %5797 = bitcast i8* %5796 to double*
  store double 0.000000e+00, double* %5797, align 1, !tbaa !2452
  %5798 = load i64, i64* %RBP
  %5799 = sub i64 %5798, 16
  %5800 = load i64, i64* %PC
  %5801 = add i64 %5800, 4
  store i64 %5801, i64* %PC
  %5802 = inttoptr i64 %5799 to i64*
  %5803 = load i64, i64* %5802
  store i64 %5803, i64* %RCX, align 8, !tbaa !2428
  %5804 = load i64, i64* %RBP
  %5805 = sub i64 %5804, 40
  %5806 = load i64, i64* %PC
  %5807 = add i64 %5806, 4
  store i64 %5807, i64* %PC
  %5808 = inttoptr i64 %5805 to i32*
  %5809 = load i32, i32* %5808
  %5810 = sext i32 %5809 to i64
  store i64 %5810, i64* %RDX, align 8, !tbaa !2428
  %5811 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5812 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5813 = load i64, i64* %RCX
  %5814 = load i64, i64* %RDX
  %5815 = mul i64 %5814, 8
  %5816 = add i64 %5815, %5813
  %5817 = load i64, i64* %PC
  %5818 = add i64 %5817, 5
  store i64 %5818, i64* %PC
  %5819 = bitcast i8* %5812 to double*
  %5820 = load double, double* %5819, align 1
  %5821 = getelementptr inbounds i8, i8* %5812, i64 8
  %5822 = bitcast i8* %5821 to i64*
  %5823 = load i64, i64* %5822, align 1
  %5824 = inttoptr i64 %5816 to double*
  %5825 = load double, double* %5824
  %5826 = fadd double %5820, %5825
  %5827 = bitcast i8* %5811 to double*
  store double %5826, double* %5827, align 1, !tbaa !2452
  %5828 = getelementptr inbounds i8, i8* %5811, i64 8
  %5829 = bitcast i8* %5828 to i64*
  store i64 %5823, i64* %5829, align 1, !tbaa !2452
  %5830 = load i64, i64* %RBP
  %5831 = sub i64 %5830, 152
  %5832 = bitcast %union.vec128_t* %XMM0 to i8*
  %5833 = load i64, i64* %PC
  %5834 = add i64 %5833, 8
  store i64 %5834, i64* %PC
  %5835 = bitcast i8* %5832 to double*
  %5836 = load double, double* %5835, align 1
  %5837 = inttoptr i64 %5831 to double*
  store double %5836, double* %5837
  %5838 = load i64, i64* %RBP
  %5839 = sub i64 %5838, 16
  %5840 = load i64, i64* %PC
  %5841 = add i64 %5840, 4
  store i64 %5841, i64* %PC
  %5842 = inttoptr i64 %5839 to i64*
  %5843 = load i64, i64* %5842
  store i64 %5843, i64* %RCX, align 8, !tbaa !2428
  %5844 = load i64, i64* %RBP
  %5845 = sub i64 %5844, 36
  %5846 = load i64, i64* %PC
  %5847 = add i64 %5846, 3
  store i64 %5847, i64* %PC
  %5848 = inttoptr i64 %5845 to i32*
  %5849 = load i32, i32* %5848
  %5850 = zext i32 %5849 to i64
  store i64 %5850, i64* %RAX, align 8, !tbaa !2428
  %5851 = load i64, i64* %RAX
  %5852 = load i64, i64* %PC
  %5853 = add i64 %5852, 3
  store i64 %5853, i64* %PC
  %5854 = trunc i64 %5851 to i32
  %5855 = add i32 1, %5854
  %5856 = zext i32 %5855 to i64
  store i64 %5856, i64* %RAX, align 8, !tbaa !2428
  %5857 = icmp ult i32 %5855, %5854
  %5858 = icmp ult i32 %5855, 1
  %5859 = or i1 %5857, %5858
  %5860 = zext i1 %5859 to i8
  %5861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5860, i8* %5861, align 1, !tbaa !2432
  %5862 = and i32 %5855, 255
  %5863 = call i32 @llvm.ctpop.i32(i32 %5862) #17
  %5864 = trunc i32 %5863 to i8
  %5865 = and i8 %5864, 1
  %5866 = xor i8 %5865, 1
  %5867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5866, i8* %5867, align 1, !tbaa !2446
  %5868 = xor i64 1, %5851
  %5869 = trunc i64 %5868 to i32
  %5870 = xor i32 %5869, %5855
  %5871 = lshr i32 %5870, 4
  %5872 = trunc i32 %5871 to i8
  %5873 = and i8 %5872, 1
  %5874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5873, i8* %5874, align 1, !tbaa !2447
  %5875 = icmp eq i32 %5855, 0
  %5876 = zext i1 %5875 to i8
  %5877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5876, i8* %5877, align 1, !tbaa !2448
  %5878 = lshr i32 %5855, 31
  %5879 = trunc i32 %5878 to i8
  %5880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5879, i8* %5880, align 1, !tbaa !2449
  %5881 = lshr i32 %5854, 31
  %5882 = xor i32 %5878, %5881
  %5883 = add nuw nsw i32 %5882, %5878
  %5884 = icmp eq i32 %5883, 2
  %5885 = zext i1 %5884 to i8
  %5886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5885, i8* %5886, align 1, !tbaa !2450
  %5887 = load i32, i32* %EAX
  %5888 = zext i32 %5887 to i64
  %5889 = load i64, i64* %PC
  %5890 = add i64 %5889, 3
  store i64 %5890, i64* %PC
  %5891 = shl i64 %5888, 32
  %5892 = ashr exact i64 %5891, 32
  store i64 %5892, i64* %RDX, align 8, !tbaa !2428
  %5893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5894 = load i64, i64* %RCX
  %5895 = load i64, i64* %RDX
  %5896 = mul i64 %5895, 8
  %5897 = add i64 %5896, %5894
  %5898 = load i64, i64* %PC
  %5899 = add i64 %5898, 5
  store i64 %5899, i64* %PC
  %5900 = inttoptr i64 %5897 to double*
  %5901 = load double, double* %5900
  %5902 = bitcast i8* %5893 to double*
  store double %5901, double* %5902, align 1, !tbaa !2452
  %5903 = getelementptr inbounds i8, i8* %5893, i64 8
  %5904 = bitcast i8* %5903 to double*
  store double 0.000000e+00, double* %5904, align 1, !tbaa !2452
  %5905 = load i64, i64* %RBP
  %5906 = sub i64 %5905, 16
  %5907 = load i64, i64* %PC
  %5908 = add i64 %5907, 4
  store i64 %5908, i64* %PC
  %5909 = inttoptr i64 %5906 to i64*
  %5910 = load i64, i64* %5909
  store i64 %5910, i64* %RCX, align 8, !tbaa !2428
  %5911 = load i64, i64* %RBP
  %5912 = sub i64 %5911, 40
  %5913 = load i64, i64* %PC
  %5914 = add i64 %5913, 3
  store i64 %5914, i64* %PC
  %5915 = inttoptr i64 %5912 to i32*
  %5916 = load i32, i32* %5915
  %5917 = zext i32 %5916 to i64
  store i64 %5917, i64* %RAX, align 8, !tbaa !2428
  %5918 = load i64, i64* %RAX
  %5919 = load i64, i64* %PC
  %5920 = add i64 %5919, 3
  store i64 %5920, i64* %PC
  %5921 = trunc i64 %5918 to i32
  %5922 = add i32 1, %5921
  %5923 = zext i32 %5922 to i64
  store i64 %5923, i64* %RAX, align 8, !tbaa !2428
  %5924 = icmp ult i32 %5922, %5921
  %5925 = icmp ult i32 %5922, 1
  %5926 = or i1 %5924, %5925
  %5927 = zext i1 %5926 to i8
  %5928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5927, i8* %5928, align 1, !tbaa !2432
  %5929 = and i32 %5922, 255
  %5930 = call i32 @llvm.ctpop.i32(i32 %5929) #17
  %5931 = trunc i32 %5930 to i8
  %5932 = and i8 %5931, 1
  %5933 = xor i8 %5932, 1
  %5934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5933, i8* %5934, align 1, !tbaa !2446
  %5935 = xor i64 1, %5918
  %5936 = trunc i64 %5935 to i32
  %5937 = xor i32 %5936, %5922
  %5938 = lshr i32 %5937, 4
  %5939 = trunc i32 %5938 to i8
  %5940 = and i8 %5939, 1
  %5941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5940, i8* %5941, align 1, !tbaa !2447
  %5942 = icmp eq i32 %5922, 0
  %5943 = zext i1 %5942 to i8
  %5944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5943, i8* %5944, align 1, !tbaa !2448
  %5945 = lshr i32 %5922, 31
  %5946 = trunc i32 %5945 to i8
  %5947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5946, i8* %5947, align 1, !tbaa !2449
  %5948 = lshr i32 %5921, 31
  %5949 = xor i32 %5945, %5948
  %5950 = add nuw nsw i32 %5949, %5945
  %5951 = icmp eq i32 %5950, 2
  %5952 = zext i1 %5951 to i8
  %5953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5952, i8* %5953, align 1, !tbaa !2450
  %5954 = load i32, i32* %EAX
  %5955 = zext i32 %5954 to i64
  %5956 = load i64, i64* %PC
  %5957 = add i64 %5956, 3
  store i64 %5957, i64* %PC
  %5958 = shl i64 %5955, 32
  %5959 = ashr exact i64 %5958, 32
  store i64 %5959, i64* %RDX, align 8, !tbaa !2428
  %5960 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5961 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5962 = load i64, i64* %RCX
  %5963 = load i64, i64* %RDX
  %5964 = mul i64 %5963, 8
  %5965 = add i64 %5964, %5962
  %5966 = load i64, i64* %PC
  %5967 = add i64 %5966, 5
  store i64 %5967, i64* %PC
  %5968 = bitcast i8* %5961 to double*
  %5969 = load double, double* %5968, align 1
  %5970 = getelementptr inbounds i8, i8* %5961, i64 8
  %5971 = bitcast i8* %5970 to i64*
  %5972 = load i64, i64* %5971, align 1
  %5973 = inttoptr i64 %5965 to double*
  %5974 = load double, double* %5973
  %5975 = fadd double %5969, %5974
  %5976 = bitcast i8* %5960 to double*
  store double %5975, double* %5976, align 1, !tbaa !2452
  %5977 = getelementptr inbounds i8, i8* %5960, i64 8
  %5978 = bitcast i8* %5977 to i64*
  store i64 %5972, i64* %5978, align 1, !tbaa !2452
  %5979 = load i64, i64* %RBP
  %5980 = sub i64 %5979, 160
  %5981 = bitcast %union.vec128_t* %XMM0 to i8*
  %5982 = load i64, i64* %PC
  %5983 = add i64 %5982, 8
  store i64 %5983, i64* %PC
  %5984 = bitcast i8* %5981 to double*
  %5985 = load double, double* %5984, align 1
  %5986 = inttoptr i64 %5980 to double*
  store double %5985, double* %5986
  %5987 = load i64, i64* %RBP
  %5988 = sub i64 %5987, 16
  %5989 = load i64, i64* %PC
  %5990 = add i64 %5989, 4
  store i64 %5990, i64* %PC
  %5991 = inttoptr i64 %5988 to i64*
  %5992 = load i64, i64* %5991
  store i64 %5992, i64* %RCX, align 8, !tbaa !2428
  %5993 = load i64, i64* %RBP
  %5994 = sub i64 %5993, 36
  %5995 = load i64, i64* %PC
  %5996 = add i64 %5995, 4
  store i64 %5996, i64* %PC
  %5997 = inttoptr i64 %5994 to i32*
  %5998 = load i32, i32* %5997
  %5999 = sext i32 %5998 to i64
  store i64 %5999, i64* %RDX, align 8, !tbaa !2428
  %6000 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6001 = load i64, i64* %RCX
  %6002 = load i64, i64* %RDX
  %6003 = mul i64 %6002, 8
  %6004 = add i64 %6003, %6001
  %6005 = load i64, i64* %PC
  %6006 = add i64 %6005, 5
  store i64 %6006, i64* %PC
  %6007 = inttoptr i64 %6004 to double*
  %6008 = load double, double* %6007
  %6009 = bitcast i8* %6000 to double*
  store double %6008, double* %6009, align 1, !tbaa !2452
  %6010 = getelementptr inbounds i8, i8* %6000, i64 8
  %6011 = bitcast i8* %6010 to double*
  store double 0.000000e+00, double* %6011, align 1, !tbaa !2452
  %6012 = load i64, i64* %RBP
  %6013 = sub i64 %6012, 16
  %6014 = load i64, i64* %PC
  %6015 = add i64 %6014, 4
  store i64 %6015, i64* %PC
  %6016 = inttoptr i64 %6013 to i64*
  %6017 = load i64, i64* %6016
  store i64 %6017, i64* %RCX, align 8, !tbaa !2428
  %6018 = load i64, i64* %RBP
  %6019 = sub i64 %6018, 40
  %6020 = load i64, i64* %PC
  %6021 = add i64 %6020, 4
  store i64 %6021, i64* %PC
  %6022 = inttoptr i64 %6019 to i32*
  %6023 = load i32, i32* %6022
  %6024 = sext i32 %6023 to i64
  store i64 %6024, i64* %RDX, align 8, !tbaa !2428
  %6025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6026 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6027 = load i64, i64* %RCX
  %6028 = load i64, i64* %RDX
  %6029 = mul i64 %6028, 8
  %6030 = add i64 %6029, %6027
  %6031 = load i64, i64* %PC
  %6032 = add i64 %6031, 5
  store i64 %6032, i64* %PC
  %6033 = bitcast i8* %6026 to double*
  %6034 = load double, double* %6033, align 1
  %6035 = getelementptr inbounds i8, i8* %6026, i64 8
  %6036 = bitcast i8* %6035 to i64*
  %6037 = load i64, i64* %6036, align 1
  %6038 = inttoptr i64 %6030 to double*
  %6039 = load double, double* %6038
  %6040 = fsub double %6034, %6039
  %6041 = bitcast i8* %6025 to double*
  store double %6040, double* %6041, align 1, !tbaa !2452
  %6042 = getelementptr inbounds i8, i8* %6025, i64 8
  %6043 = bitcast i8* %6042 to i64*
  store i64 %6037, i64* %6043, align 1, !tbaa !2452
  %6044 = load i64, i64* %RBP
  %6045 = sub i64 %6044, 168
  %6046 = bitcast %union.vec128_t* %XMM0 to i8*
  %6047 = load i64, i64* %PC
  %6048 = add i64 %6047, 8
  store i64 %6048, i64* %PC
  %6049 = bitcast i8* %6046 to double*
  %6050 = load double, double* %6049, align 1
  %6051 = inttoptr i64 %6045 to double*
  store double %6050, double* %6051
  %6052 = load i64, i64* %RBP
  %6053 = sub i64 %6052, 16
  %6054 = load i64, i64* %PC
  %6055 = add i64 %6054, 4
  store i64 %6055, i64* %PC
  %6056 = inttoptr i64 %6053 to i64*
  %6057 = load i64, i64* %6056
  store i64 %6057, i64* %RCX, align 8, !tbaa !2428
  %6058 = load i64, i64* %RBP
  %6059 = sub i64 %6058, 36
  %6060 = load i64, i64* %PC
  %6061 = add i64 %6060, 3
  store i64 %6061, i64* %PC
  %6062 = inttoptr i64 %6059 to i32*
  %6063 = load i32, i32* %6062
  %6064 = zext i32 %6063 to i64
  store i64 %6064, i64* %RAX, align 8, !tbaa !2428
  %6065 = load i64, i64* %RAX
  %6066 = load i64, i64* %PC
  %6067 = add i64 %6066, 3
  store i64 %6067, i64* %PC
  %6068 = trunc i64 %6065 to i32
  %6069 = add i32 1, %6068
  %6070 = zext i32 %6069 to i64
  store i64 %6070, i64* %RAX, align 8, !tbaa !2428
  %6071 = icmp ult i32 %6069, %6068
  %6072 = icmp ult i32 %6069, 1
  %6073 = or i1 %6071, %6072
  %6074 = zext i1 %6073 to i8
  %6075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6074, i8* %6075, align 1, !tbaa !2432
  %6076 = and i32 %6069, 255
  %6077 = call i32 @llvm.ctpop.i32(i32 %6076) #17
  %6078 = trunc i32 %6077 to i8
  %6079 = and i8 %6078, 1
  %6080 = xor i8 %6079, 1
  %6081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6080, i8* %6081, align 1, !tbaa !2446
  %6082 = xor i64 1, %6065
  %6083 = trunc i64 %6082 to i32
  %6084 = xor i32 %6083, %6069
  %6085 = lshr i32 %6084, 4
  %6086 = trunc i32 %6085 to i8
  %6087 = and i8 %6086, 1
  %6088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6087, i8* %6088, align 1, !tbaa !2447
  %6089 = icmp eq i32 %6069, 0
  %6090 = zext i1 %6089 to i8
  %6091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6090, i8* %6091, align 1, !tbaa !2448
  %6092 = lshr i32 %6069, 31
  %6093 = trunc i32 %6092 to i8
  %6094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6093, i8* %6094, align 1, !tbaa !2449
  %6095 = lshr i32 %6068, 31
  %6096 = xor i32 %6092, %6095
  %6097 = add nuw nsw i32 %6096, %6092
  %6098 = icmp eq i32 %6097, 2
  %6099 = zext i1 %6098 to i8
  %6100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6099, i8* %6100, align 1, !tbaa !2450
  %6101 = load i32, i32* %EAX
  %6102 = zext i32 %6101 to i64
  %6103 = load i64, i64* %PC
  %6104 = add i64 %6103, 3
  store i64 %6104, i64* %PC
  %6105 = shl i64 %6102, 32
  %6106 = ashr exact i64 %6105, 32
  store i64 %6106, i64* %RDX, align 8, !tbaa !2428
  %6107 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6108 = load i64, i64* %RCX
  %6109 = load i64, i64* %RDX
  %6110 = mul i64 %6109, 8
  %6111 = add i64 %6110, %6108
  %6112 = load i64, i64* %PC
  %6113 = add i64 %6112, 5
  store i64 %6113, i64* %PC
  %6114 = inttoptr i64 %6111 to double*
  %6115 = load double, double* %6114
  %6116 = bitcast i8* %6107 to double*
  store double %6115, double* %6116, align 1, !tbaa !2452
  %6117 = getelementptr inbounds i8, i8* %6107, i64 8
  %6118 = bitcast i8* %6117 to double*
  store double 0.000000e+00, double* %6118, align 1, !tbaa !2452
  %6119 = load i64, i64* %RBP
  %6120 = sub i64 %6119, 16
  %6121 = load i64, i64* %PC
  %6122 = add i64 %6121, 4
  store i64 %6122, i64* %PC
  %6123 = inttoptr i64 %6120 to i64*
  %6124 = load i64, i64* %6123
  store i64 %6124, i64* %RCX, align 8, !tbaa !2428
  %6125 = load i64, i64* %RBP
  %6126 = sub i64 %6125, 40
  %6127 = load i64, i64* %PC
  %6128 = add i64 %6127, 3
  store i64 %6128, i64* %PC
  %6129 = inttoptr i64 %6126 to i32*
  %6130 = load i32, i32* %6129
  %6131 = zext i32 %6130 to i64
  store i64 %6131, i64* %RAX, align 8, !tbaa !2428
  %6132 = load i64, i64* %RAX
  %6133 = load i64, i64* %PC
  %6134 = add i64 %6133, 3
  store i64 %6134, i64* %PC
  %6135 = trunc i64 %6132 to i32
  %6136 = add i32 1, %6135
  %6137 = zext i32 %6136 to i64
  store i64 %6137, i64* %RAX, align 8, !tbaa !2428
  %6138 = icmp ult i32 %6136, %6135
  %6139 = icmp ult i32 %6136, 1
  %6140 = or i1 %6138, %6139
  %6141 = zext i1 %6140 to i8
  %6142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6141, i8* %6142, align 1, !tbaa !2432
  %6143 = and i32 %6136, 255
  %6144 = call i32 @llvm.ctpop.i32(i32 %6143) #17
  %6145 = trunc i32 %6144 to i8
  %6146 = and i8 %6145, 1
  %6147 = xor i8 %6146, 1
  %6148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6147, i8* %6148, align 1, !tbaa !2446
  %6149 = xor i64 1, %6132
  %6150 = trunc i64 %6149 to i32
  %6151 = xor i32 %6150, %6136
  %6152 = lshr i32 %6151, 4
  %6153 = trunc i32 %6152 to i8
  %6154 = and i8 %6153, 1
  %6155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6154, i8* %6155, align 1, !tbaa !2447
  %6156 = icmp eq i32 %6136, 0
  %6157 = zext i1 %6156 to i8
  %6158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6157, i8* %6158, align 1, !tbaa !2448
  %6159 = lshr i32 %6136, 31
  %6160 = trunc i32 %6159 to i8
  %6161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6160, i8* %6161, align 1, !tbaa !2449
  %6162 = lshr i32 %6135, 31
  %6163 = xor i32 %6159, %6162
  %6164 = add nuw nsw i32 %6163, %6159
  %6165 = icmp eq i32 %6164, 2
  %6166 = zext i1 %6165 to i8
  %6167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6166, i8* %6167, align 1, !tbaa !2450
  %6168 = load i32, i32* %EAX
  %6169 = zext i32 %6168 to i64
  %6170 = load i64, i64* %PC
  %6171 = add i64 %6170, 3
  store i64 %6171, i64* %PC
  %6172 = shl i64 %6169, 32
  %6173 = ashr exact i64 %6172, 32
  store i64 %6173, i64* %RDX, align 8, !tbaa !2428
  %6174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6176 = load i64, i64* %RCX
  %6177 = load i64, i64* %RDX
  %6178 = mul i64 %6177, 8
  %6179 = add i64 %6178, %6176
  %6180 = load i64, i64* %PC
  %6181 = add i64 %6180, 5
  store i64 %6181, i64* %PC
  %6182 = bitcast i8* %6175 to double*
  %6183 = load double, double* %6182, align 1
  %6184 = getelementptr inbounds i8, i8* %6175, i64 8
  %6185 = bitcast i8* %6184 to i64*
  %6186 = load i64, i64* %6185, align 1
  %6187 = inttoptr i64 %6179 to double*
  %6188 = load double, double* %6187
  %6189 = fsub double %6183, %6188
  %6190 = bitcast i8* %6174 to double*
  store double %6189, double* %6190, align 1, !tbaa !2452
  %6191 = getelementptr inbounds i8, i8* %6174, i64 8
  %6192 = bitcast i8* %6191 to i64*
  store i64 %6186, i64* %6192, align 1, !tbaa !2452
  %6193 = load i64, i64* %RBP
  %6194 = sub i64 %6193, 176
  %6195 = bitcast %union.vec128_t* %XMM0 to i8*
  %6196 = load i64, i64* %PC
  %6197 = add i64 %6196, 8
  store i64 %6197, i64* %PC
  %6198 = bitcast i8* %6195 to double*
  %6199 = load double, double* %6198, align 1
  %6200 = inttoptr i64 %6194 to double*
  store double %6199, double* %6200
  %6201 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6202 = load i64, i64* %RBP
  %6203 = sub i64 %6202, 120
  %6204 = load i64, i64* %PC
  %6205 = add i64 %6204, 5
  store i64 %6205, i64* %PC
  %6206 = inttoptr i64 %6203 to double*
  %6207 = load double, double* %6206
  %6208 = bitcast i8* %6201 to double*
  store double %6207, double* %6208, align 1, !tbaa !2452
  %6209 = getelementptr inbounds i8, i8* %6201, i64 8
  %6210 = bitcast i8* %6209 to double*
  store double 0.000000e+00, double* %6210, align 1, !tbaa !2452
  %6211 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6212 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6213 = load i64, i64* %RBP
  %6214 = sub i64 %6213, 152
  %6215 = load i64, i64* %PC
  %6216 = add i64 %6215, 8
  store i64 %6216, i64* %PC
  %6217 = bitcast i8* %6212 to double*
  %6218 = load double, double* %6217, align 1
  %6219 = getelementptr inbounds i8, i8* %6212, i64 8
  %6220 = bitcast i8* %6219 to i64*
  %6221 = load i64, i64* %6220, align 1
  %6222 = inttoptr i64 %6214 to double*
  %6223 = load double, double* %6222
  %6224 = fadd double %6218, %6223
  %6225 = bitcast i8* %6211 to double*
  store double %6224, double* %6225, align 1, !tbaa !2452
  %6226 = getelementptr inbounds i8, i8* %6211, i64 8
  %6227 = bitcast i8* %6226 to i64*
  store i64 %6221, i64* %6227, align 1, !tbaa !2452
  %6228 = load i64, i64* %RBP
  %6229 = sub i64 %6228, 16
  %6230 = load i64, i64* %PC
  %6231 = add i64 %6230, 4
  store i64 %6231, i64* %PC
  %6232 = inttoptr i64 %6229 to i64*
  %6233 = load i64, i64* %6232
  store i64 %6233, i64* %RCX, align 8, !tbaa !2428
  %6234 = load i64, i64* %RBP
  %6235 = sub i64 %6234, 28
  %6236 = load i64, i64* %PC
  %6237 = add i64 %6236, 4
  store i64 %6237, i64* %PC
  %6238 = inttoptr i64 %6235 to i32*
  %6239 = load i32, i32* %6238
  %6240 = sext i32 %6239 to i64
  store i64 %6240, i64* %RDX, align 8, !tbaa !2428
  %6241 = load i64, i64* %RCX
  %6242 = load i64, i64* %RDX
  %6243 = mul i64 %6242, 8
  %6244 = add i64 %6243, %6241
  %6245 = bitcast %union.vec128_t* %XMM0 to i8*
  %6246 = load i64, i64* %PC
  %6247 = add i64 %6246, 5
  store i64 %6247, i64* %PC
  %6248 = bitcast i8* %6245 to double*
  %6249 = load double, double* %6248, align 1
  %6250 = inttoptr i64 %6244 to double*
  store double %6249, double* %6250
  %6251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6252 = load i64, i64* %RBP
  %6253 = sub i64 %6252, 128
  %6254 = load i64, i64* %PC
  %6255 = add i64 %6254, 5
  store i64 %6255, i64* %PC
  %6256 = inttoptr i64 %6253 to double*
  %6257 = load double, double* %6256
  %6258 = bitcast i8* %6251 to double*
  store double %6257, double* %6258, align 1, !tbaa !2452
  %6259 = getelementptr inbounds i8, i8* %6251, i64 8
  %6260 = bitcast i8* %6259 to double*
  store double 0.000000e+00, double* %6260, align 1, !tbaa !2452
  %6261 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6262 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6263 = load i64, i64* %RBP
  %6264 = sub i64 %6263, 160
  %6265 = load i64, i64* %PC
  %6266 = add i64 %6265, 8
  store i64 %6266, i64* %PC
  %6267 = bitcast i8* %6262 to double*
  %6268 = load double, double* %6267, align 1
  %6269 = getelementptr inbounds i8, i8* %6262, i64 8
  %6270 = bitcast i8* %6269 to i64*
  %6271 = load i64, i64* %6270, align 1
  %6272 = inttoptr i64 %6264 to double*
  %6273 = load double, double* %6272
  %6274 = fadd double %6268, %6273
  %6275 = bitcast i8* %6261 to double*
  store double %6274, double* %6275, align 1, !tbaa !2452
  %6276 = getelementptr inbounds i8, i8* %6261, i64 8
  %6277 = bitcast i8* %6276 to i64*
  store i64 %6271, i64* %6277, align 1, !tbaa !2452
  %6278 = load i64, i64* %RBP
  %6279 = sub i64 %6278, 16
  %6280 = load i64, i64* %PC
  %6281 = add i64 %6280, 4
  store i64 %6281, i64* %PC
  %6282 = inttoptr i64 %6279 to i64*
  %6283 = load i64, i64* %6282
  store i64 %6283, i64* %RCX, align 8, !tbaa !2428
  %6284 = load i64, i64* %RBP
  %6285 = sub i64 %6284, 28
  %6286 = load i64, i64* %PC
  %6287 = add i64 %6286, 3
  store i64 %6287, i64* %PC
  %6288 = inttoptr i64 %6285 to i32*
  %6289 = load i32, i32* %6288
  %6290 = zext i32 %6289 to i64
  store i64 %6290, i64* %RAX, align 8, !tbaa !2428
  %6291 = load i64, i64* %RAX
  %6292 = load i64, i64* %PC
  %6293 = add i64 %6292, 3
  store i64 %6293, i64* %PC
  %6294 = trunc i64 %6291 to i32
  %6295 = add i32 1, %6294
  %6296 = zext i32 %6295 to i64
  store i64 %6296, i64* %RAX, align 8, !tbaa !2428
  %6297 = icmp ult i32 %6295, %6294
  %6298 = icmp ult i32 %6295, 1
  %6299 = or i1 %6297, %6298
  %6300 = zext i1 %6299 to i8
  %6301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6300, i8* %6301, align 1, !tbaa !2432
  %6302 = and i32 %6295, 255
  %6303 = call i32 @llvm.ctpop.i32(i32 %6302) #17
  %6304 = trunc i32 %6303 to i8
  %6305 = and i8 %6304, 1
  %6306 = xor i8 %6305, 1
  %6307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6306, i8* %6307, align 1, !tbaa !2446
  %6308 = xor i64 1, %6291
  %6309 = trunc i64 %6308 to i32
  %6310 = xor i32 %6309, %6295
  %6311 = lshr i32 %6310, 4
  %6312 = trunc i32 %6311 to i8
  %6313 = and i8 %6312, 1
  %6314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6313, i8* %6314, align 1, !tbaa !2447
  %6315 = icmp eq i32 %6295, 0
  %6316 = zext i1 %6315 to i8
  %6317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6316, i8* %6317, align 1, !tbaa !2448
  %6318 = lshr i32 %6295, 31
  %6319 = trunc i32 %6318 to i8
  %6320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6319, i8* %6320, align 1, !tbaa !2449
  %6321 = lshr i32 %6294, 31
  %6322 = xor i32 %6318, %6321
  %6323 = add nuw nsw i32 %6322, %6318
  %6324 = icmp eq i32 %6323, 2
  %6325 = zext i1 %6324 to i8
  %6326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6325, i8* %6326, align 1, !tbaa !2450
  %6327 = load i32, i32* %EAX
  %6328 = zext i32 %6327 to i64
  %6329 = load i64, i64* %PC
  %6330 = add i64 %6329, 3
  store i64 %6330, i64* %PC
  %6331 = shl i64 %6328, 32
  %6332 = ashr exact i64 %6331, 32
  store i64 %6332, i64* %RDX, align 8, !tbaa !2428
  %6333 = load i64, i64* %RCX
  %6334 = load i64, i64* %RDX
  %6335 = mul i64 %6334, 8
  %6336 = add i64 %6335, %6333
  %6337 = bitcast %union.vec128_t* %XMM0 to i8*
  %6338 = load i64, i64* %PC
  %6339 = add i64 %6338, 5
  store i64 %6339, i64* %PC
  %6340 = bitcast i8* %6337 to double*
  %6341 = load double, double* %6340, align 1
  %6342 = inttoptr i64 %6336 to double*
  store double %6341, double* %6342
  %6343 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6344 = load i64, i64* %RBP
  %6345 = sub i64 %6344, 152
  %6346 = load i64, i64* %PC
  %6347 = add i64 %6346, 8
  store i64 %6347, i64* %PC
  %6348 = inttoptr i64 %6345 to double*
  %6349 = load double, double* %6348
  %6350 = bitcast i8* %6343 to double*
  store double %6349, double* %6350, align 1, !tbaa !2452
  %6351 = getelementptr inbounds i8, i8* %6343, i64 8
  %6352 = bitcast i8* %6351 to double*
  store double 0.000000e+00, double* %6352, align 1, !tbaa !2452
  %6353 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6354 = load i64, i64* %RBP
  %6355 = sub i64 %6354, 120
  %6356 = load i64, i64* %PC
  %6357 = add i64 %6356, 5
  store i64 %6357, i64* %PC
  %6358 = inttoptr i64 %6355 to double*
  %6359 = load double, double* %6358
  %6360 = bitcast i8* %6353 to double*
  store double %6359, double* %6360, align 1, !tbaa !2452
  %6361 = getelementptr inbounds i8, i8* %6353, i64 8
  %6362 = bitcast i8* %6361 to double*
  store double 0.000000e+00, double* %6362, align 1, !tbaa !2452
  %6363 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6364 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6365 = bitcast %union.vec128_t* %XMM0 to i8*
  %6366 = load i64, i64* %PC
  %6367 = add i64 %6366, 4
  store i64 %6367, i64* %PC
  %6368 = bitcast i8* %6364 to double*
  %6369 = load double, double* %6368, align 1
  %6370 = getelementptr inbounds i8, i8* %6364, i64 8
  %6371 = bitcast i8* %6370 to i64*
  %6372 = load i64, i64* %6371, align 1
  %6373 = bitcast i8* %6365 to double*
  %6374 = load double, double* %6373, align 1
  %6375 = fsub double %6369, %6374
  %6376 = bitcast i8* %6363 to double*
  store double %6375, double* %6376, align 1, !tbaa !2452
  %6377 = getelementptr inbounds i8, i8* %6363, i64 8
  %6378 = bitcast i8* %6377 to i64*
  store i64 %6372, i64* %6378, align 1, !tbaa !2452
  %6379 = load i64, i64* %RBP
  %6380 = sub i64 %6379, 120
  %6381 = bitcast %union.vec128_t* %XMM1 to i8*
  %6382 = load i64, i64* %PC
  %6383 = add i64 %6382, 5
  store i64 %6383, i64* %PC
  %6384 = bitcast i8* %6381 to double*
  %6385 = load double, double* %6384, align 1
  %6386 = inttoptr i64 %6380 to double*
  store double %6385, double* %6386
  %6387 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6388 = load i64, i64* %RBP
  %6389 = sub i64 %6388, 160
  %6390 = load i64, i64* %PC
  %6391 = add i64 %6390, 8
  store i64 %6391, i64* %PC
  %6392 = inttoptr i64 %6389 to double*
  %6393 = load double, double* %6392
  %6394 = bitcast i8* %6387 to double*
  store double %6393, double* %6394, align 1, !tbaa !2452
  %6395 = getelementptr inbounds i8, i8* %6387, i64 8
  %6396 = bitcast i8* %6395 to double*
  store double 0.000000e+00, double* %6396, align 1, !tbaa !2452
  %6397 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6398 = load i64, i64* %RBP
  %6399 = sub i64 %6398, 128
  %6400 = load i64, i64* %PC
  %6401 = add i64 %6400, 5
  store i64 %6401, i64* %PC
  %6402 = inttoptr i64 %6399 to double*
  %6403 = load double, double* %6402
  %6404 = bitcast i8* %6397 to double*
  store double %6403, double* %6404, align 1, !tbaa !2452
  %6405 = getelementptr inbounds i8, i8* %6397, i64 8
  %6406 = bitcast i8* %6405 to double*
  store double 0.000000e+00, double* %6406, align 1, !tbaa !2452
  %6407 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6408 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6409 = bitcast %union.vec128_t* %XMM0 to i8*
  %6410 = load i64, i64* %PC
  %6411 = add i64 %6410, 4
  store i64 %6411, i64* %PC
  %6412 = bitcast i8* %6408 to double*
  %6413 = load double, double* %6412, align 1
  %6414 = getelementptr inbounds i8, i8* %6408, i64 8
  %6415 = bitcast i8* %6414 to i64*
  %6416 = load i64, i64* %6415, align 1
  %6417 = bitcast i8* %6409 to double*
  %6418 = load double, double* %6417, align 1
  %6419 = fsub double %6413, %6418
  %6420 = bitcast i8* %6407 to double*
  store double %6419, double* %6420, align 1, !tbaa !2452
  %6421 = getelementptr inbounds i8, i8* %6407, i64 8
  %6422 = bitcast i8* %6421 to i64*
  store i64 %6416, i64* %6422, align 1, !tbaa !2452
  %6423 = load i64, i64* %RBP
  %6424 = sub i64 %6423, 128
  %6425 = bitcast %union.vec128_t* %XMM1 to i8*
  %6426 = load i64, i64* %PC
  %6427 = add i64 %6426, 5
  store i64 %6427, i64* %PC
  %6428 = bitcast i8* %6425 to double*
  %6429 = load double, double* %6428, align 1
  %6430 = inttoptr i64 %6424 to double*
  store double %6429, double* %6430
  %6431 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6432 = load i64, i64* %RBP
  %6433 = sub i64 %6432, 88
  %6434 = load i64, i64* %PC
  %6435 = add i64 %6434, 5
  store i64 %6435, i64* %PC
  %6436 = inttoptr i64 %6433 to double*
  %6437 = load double, double* %6436
  %6438 = bitcast i8* %6431 to double*
  store double %6437, double* %6438, align 1, !tbaa !2452
  %6439 = getelementptr inbounds i8, i8* %6431, i64 8
  %6440 = bitcast i8* %6439 to double*
  store double 0.000000e+00, double* %6440, align 1, !tbaa !2452
  %6441 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6442 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6443 = load i64, i64* %RBP
  %6444 = sub i64 %6443, 120
  %6445 = load i64, i64* %PC
  %6446 = add i64 %6445, 5
  store i64 %6446, i64* %PC
  %6447 = bitcast i8* %6442 to double*
  %6448 = load double, double* %6447, align 1
  %6449 = getelementptr inbounds i8, i8* %6442, i64 8
  %6450 = bitcast i8* %6449 to i64*
  %6451 = load i64, i64* %6450, align 1
  %6452 = inttoptr i64 %6444 to double*
  %6453 = load double, double* %6452
  %6454 = fmul double %6448, %6453
  %6455 = bitcast i8* %6441 to double*
  store double %6454, double* %6455, align 1, !tbaa !2452
  %6456 = getelementptr inbounds i8, i8* %6441, i64 8
  %6457 = bitcast i8* %6456 to i64*
  store i64 %6451, i64* %6457, align 1, !tbaa !2452
  %6458 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6459 = load i64, i64* %RBP
  %6460 = sub i64 %6459, 96
  %6461 = load i64, i64* %PC
  %6462 = add i64 %6461, 5
  store i64 %6462, i64* %PC
  %6463 = inttoptr i64 %6460 to double*
  %6464 = load double, double* %6463
  %6465 = bitcast i8* %6458 to double*
  store double %6464, double* %6465, align 1, !tbaa !2452
  %6466 = getelementptr inbounds i8, i8* %6458, i64 8
  %6467 = bitcast i8* %6466 to double*
  store double 0.000000e+00, double* %6467, align 1, !tbaa !2452
  %6468 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6469 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6470 = load i64, i64* %RBP
  %6471 = sub i64 %6470, 128
  %6472 = load i64, i64* %PC
  %6473 = add i64 %6472, 5
  store i64 %6473, i64* %PC
  %6474 = bitcast i8* %6469 to double*
  %6475 = load double, double* %6474, align 1
  %6476 = getelementptr inbounds i8, i8* %6469, i64 8
  %6477 = bitcast i8* %6476 to i64*
  %6478 = load i64, i64* %6477, align 1
  %6479 = inttoptr i64 %6471 to double*
  %6480 = load double, double* %6479
  %6481 = fmul double %6475, %6480
  %6482 = bitcast i8* %6468 to double*
  store double %6481, double* %6482, align 1, !tbaa !2452
  %6483 = getelementptr inbounds i8, i8* %6468, i64 8
  %6484 = bitcast i8* %6483 to i64*
  store i64 %6478, i64* %6484, align 1, !tbaa !2452
  %6485 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6486 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6487 = bitcast %union.vec128_t* %XMM1 to i8*
  %6488 = load i64, i64* %PC
  %6489 = add i64 %6488, 4
  store i64 %6489, i64* %PC
  %6490 = bitcast i8* %6486 to double*
  %6491 = load double, double* %6490, align 1
  %6492 = getelementptr inbounds i8, i8* %6486, i64 8
  %6493 = bitcast i8* %6492 to i64*
  %6494 = load i64, i64* %6493, align 1
  %6495 = bitcast i8* %6487 to double*
  %6496 = load double, double* %6495, align 1
  %6497 = fsub double %6491, %6496
  %6498 = bitcast i8* %6485 to double*
  store double %6497, double* %6498, align 1, !tbaa !2452
  %6499 = getelementptr inbounds i8, i8* %6485, i64 8
  %6500 = bitcast i8* %6499 to i64*
  store i64 %6494, i64* %6500, align 1, !tbaa !2452
  %6501 = load i64, i64* %RBP
  %6502 = sub i64 %6501, 16
  %6503 = load i64, i64* %PC
  %6504 = add i64 %6503, 4
  store i64 %6504, i64* %PC
  %6505 = inttoptr i64 %6502 to i64*
  %6506 = load i64, i64* %6505
  store i64 %6506, i64* %RCX, align 8, !tbaa !2428
  %6507 = load i64, i64* %RBP
  %6508 = sub i64 %6507, 36
  %6509 = load i64, i64* %PC
  %6510 = add i64 %6509, 4
  store i64 %6510, i64* %PC
  %6511 = inttoptr i64 %6508 to i32*
  %6512 = load i32, i32* %6511
  %6513 = sext i32 %6512 to i64
  store i64 %6513, i64* %RDX, align 8, !tbaa !2428
  %6514 = load i64, i64* %RCX
  %6515 = load i64, i64* %RDX
  %6516 = mul i64 %6515, 8
  %6517 = add i64 %6516, %6514
  %6518 = bitcast %union.vec128_t* %XMM0 to i8*
  %6519 = load i64, i64* %PC
  %6520 = add i64 %6519, 5
  store i64 %6520, i64* %PC
  %6521 = bitcast i8* %6518 to double*
  %6522 = load double, double* %6521, align 1
  %6523 = inttoptr i64 %6517 to double*
  store double %6522, double* %6523
  %6524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6525 = load i64, i64* %RBP
  %6526 = sub i64 %6525, 88
  %6527 = load i64, i64* %PC
  %6528 = add i64 %6527, 5
  store i64 %6528, i64* %PC
  %6529 = inttoptr i64 %6526 to double*
  %6530 = load double, double* %6529
  %6531 = bitcast i8* %6524 to double*
  store double %6530, double* %6531, align 1, !tbaa !2452
  %6532 = getelementptr inbounds i8, i8* %6524, i64 8
  %6533 = bitcast i8* %6532 to double*
  store double 0.000000e+00, double* %6533, align 1, !tbaa !2452
  %6534 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6535 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6536 = load i64, i64* %RBP
  %6537 = sub i64 %6536, 128
  %6538 = load i64, i64* %PC
  %6539 = add i64 %6538, 5
  store i64 %6539, i64* %PC
  %6540 = bitcast i8* %6535 to double*
  %6541 = load double, double* %6540, align 1
  %6542 = getelementptr inbounds i8, i8* %6535, i64 8
  %6543 = bitcast i8* %6542 to i64*
  %6544 = load i64, i64* %6543, align 1
  %6545 = inttoptr i64 %6537 to double*
  %6546 = load double, double* %6545
  %6547 = fmul double %6541, %6546
  %6548 = bitcast i8* %6534 to double*
  store double %6547, double* %6548, align 1, !tbaa !2452
  %6549 = getelementptr inbounds i8, i8* %6534, i64 8
  %6550 = bitcast i8* %6549 to i64*
  store i64 %6544, i64* %6550, align 1, !tbaa !2452
  %6551 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6552 = load i64, i64* %RBP
  %6553 = sub i64 %6552, 96
  %6554 = load i64, i64* %PC
  %6555 = add i64 %6554, 5
  store i64 %6555, i64* %PC
  %6556 = inttoptr i64 %6553 to double*
  %6557 = load double, double* %6556
  %6558 = bitcast i8* %6551 to double*
  store double %6557, double* %6558, align 1, !tbaa !2452
  %6559 = getelementptr inbounds i8, i8* %6551, i64 8
  %6560 = bitcast i8* %6559 to double*
  store double 0.000000e+00, double* %6560, align 1, !tbaa !2452
  %6561 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6562 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6563 = load i64, i64* %RBP
  %6564 = sub i64 %6563, 120
  %6565 = load i64, i64* %PC
  %6566 = add i64 %6565, 5
  store i64 %6566, i64* %PC
  %6567 = bitcast i8* %6562 to double*
  %6568 = load double, double* %6567, align 1
  %6569 = getelementptr inbounds i8, i8* %6562, i64 8
  %6570 = bitcast i8* %6569 to i64*
  %6571 = load i64, i64* %6570, align 1
  %6572 = inttoptr i64 %6564 to double*
  %6573 = load double, double* %6572
  %6574 = fmul double %6568, %6573
  %6575 = bitcast i8* %6561 to double*
  store double %6574, double* %6575, align 1, !tbaa !2452
  %6576 = getelementptr inbounds i8, i8* %6561, i64 8
  %6577 = bitcast i8* %6576 to i64*
  store i64 %6571, i64* %6577, align 1, !tbaa !2452
  %6578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6579 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6580 = bitcast %union.vec128_t* %XMM1 to i8*
  %6581 = load i64, i64* %PC
  %6582 = add i64 %6581, 4
  store i64 %6582, i64* %PC
  %6583 = bitcast i8* %6579 to double*
  %6584 = load double, double* %6583, align 1
  %6585 = getelementptr inbounds i8, i8* %6579, i64 8
  %6586 = bitcast i8* %6585 to i64*
  %6587 = load i64, i64* %6586, align 1
  %6588 = bitcast i8* %6580 to double*
  %6589 = load double, double* %6588, align 1
  %6590 = fadd double %6584, %6589
  %6591 = bitcast i8* %6578 to double*
  store double %6590, double* %6591, align 1, !tbaa !2452
  %6592 = getelementptr inbounds i8, i8* %6578, i64 8
  %6593 = bitcast i8* %6592 to i64*
  store i64 %6587, i64* %6593, align 1, !tbaa !2452
  %6594 = load i64, i64* %RBP
  %6595 = sub i64 %6594, 16
  %6596 = load i64, i64* %PC
  %6597 = add i64 %6596, 4
  store i64 %6597, i64* %PC
  %6598 = inttoptr i64 %6595 to i64*
  %6599 = load i64, i64* %6598
  store i64 %6599, i64* %RCX, align 8, !tbaa !2428
  %6600 = load i64, i64* %RBP
  %6601 = sub i64 %6600, 36
  %6602 = load i64, i64* %PC
  %6603 = add i64 %6602, 3
  store i64 %6603, i64* %PC
  %6604 = inttoptr i64 %6601 to i32*
  %6605 = load i32, i32* %6604
  %6606 = zext i32 %6605 to i64
  store i64 %6606, i64* %RAX, align 8, !tbaa !2428
  %6607 = load i64, i64* %RAX
  %6608 = load i64, i64* %PC
  %6609 = add i64 %6608, 3
  store i64 %6609, i64* %PC
  %6610 = trunc i64 %6607 to i32
  %6611 = add i32 1, %6610
  %6612 = zext i32 %6611 to i64
  store i64 %6612, i64* %RAX, align 8, !tbaa !2428
  %6613 = icmp ult i32 %6611, %6610
  %6614 = icmp ult i32 %6611, 1
  %6615 = or i1 %6613, %6614
  %6616 = zext i1 %6615 to i8
  %6617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6616, i8* %6617, align 1, !tbaa !2432
  %6618 = and i32 %6611, 255
  %6619 = call i32 @llvm.ctpop.i32(i32 %6618) #17
  %6620 = trunc i32 %6619 to i8
  %6621 = and i8 %6620, 1
  %6622 = xor i8 %6621, 1
  %6623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6622, i8* %6623, align 1, !tbaa !2446
  %6624 = xor i64 1, %6607
  %6625 = trunc i64 %6624 to i32
  %6626 = xor i32 %6625, %6611
  %6627 = lshr i32 %6626, 4
  %6628 = trunc i32 %6627 to i8
  %6629 = and i8 %6628, 1
  %6630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6629, i8* %6630, align 1, !tbaa !2447
  %6631 = icmp eq i32 %6611, 0
  %6632 = zext i1 %6631 to i8
  %6633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6632, i8* %6633, align 1, !tbaa !2448
  %6634 = lshr i32 %6611, 31
  %6635 = trunc i32 %6634 to i8
  %6636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6635, i8* %6636, align 1, !tbaa !2449
  %6637 = lshr i32 %6610, 31
  %6638 = xor i32 %6634, %6637
  %6639 = add nuw nsw i32 %6638, %6634
  %6640 = icmp eq i32 %6639, 2
  %6641 = zext i1 %6640 to i8
  %6642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6641, i8* %6642, align 1, !tbaa !2450
  %6643 = load i32, i32* %EAX
  %6644 = zext i32 %6643 to i64
  %6645 = load i64, i64* %PC
  %6646 = add i64 %6645, 3
  store i64 %6646, i64* %PC
  %6647 = shl i64 %6644, 32
  %6648 = ashr exact i64 %6647, 32
  store i64 %6648, i64* %RDX, align 8, !tbaa !2428
  %6649 = load i64, i64* %RCX
  %6650 = load i64, i64* %RDX
  %6651 = mul i64 %6650, 8
  %6652 = add i64 %6651, %6649
  %6653 = bitcast %union.vec128_t* %XMM0 to i8*
  %6654 = load i64, i64* %PC
  %6655 = add i64 %6654, 5
  store i64 %6655, i64* %PC
  %6656 = bitcast i8* %6653 to double*
  %6657 = load double, double* %6656, align 1
  %6658 = inttoptr i64 %6652 to double*
  store double %6657, double* %6658
  %6659 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6660 = load i64, i64* %RBP
  %6661 = sub i64 %6660, 136
  %6662 = load i64, i64* %PC
  %6663 = add i64 %6662, 8
  store i64 %6663, i64* %PC
  %6664 = inttoptr i64 %6661 to double*
  %6665 = load double, double* %6664
  %6666 = bitcast i8* %6659 to double*
  store double %6665, double* %6666, align 1, !tbaa !2452
  %6667 = getelementptr inbounds i8, i8* %6659, i64 8
  %6668 = bitcast i8* %6667 to double*
  store double 0.000000e+00, double* %6668, align 1, !tbaa !2452
  %6669 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6670 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6671 = load i64, i64* %RBP
  %6672 = sub i64 %6671, 176
  %6673 = load i64, i64* %PC
  %6674 = add i64 %6673, 8
  store i64 %6674, i64* %PC
  %6675 = bitcast i8* %6670 to double*
  %6676 = load double, double* %6675, align 1
  %6677 = getelementptr inbounds i8, i8* %6670, i64 8
  %6678 = bitcast i8* %6677 to i64*
  %6679 = load i64, i64* %6678, align 1
  %6680 = inttoptr i64 %6672 to double*
  %6681 = load double, double* %6680
  %6682 = fsub double %6676, %6681
  %6683 = bitcast i8* %6669 to double*
  store double %6682, double* %6683, align 1, !tbaa !2452
  %6684 = getelementptr inbounds i8, i8* %6669, i64 8
  %6685 = bitcast i8* %6684 to i64*
  store i64 %6679, i64* %6685, align 1, !tbaa !2452
  %6686 = load i64, i64* %RBP
  %6687 = sub i64 %6686, 120
  %6688 = bitcast %union.vec128_t* %XMM0 to i8*
  %6689 = load i64, i64* %PC
  %6690 = add i64 %6689, 5
  store i64 %6690, i64* %PC
  %6691 = bitcast i8* %6688 to double*
  %6692 = load double, double* %6691, align 1
  %6693 = inttoptr i64 %6687 to double*
  store double %6692, double* %6693
  %6694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6695 = load i64, i64* %RBP
  %6696 = sub i64 %6695, 144
  %6697 = load i64, i64* %PC
  %6698 = add i64 %6697, 8
  store i64 %6698, i64* %PC
  %6699 = inttoptr i64 %6696 to double*
  %6700 = load double, double* %6699
  %6701 = bitcast i8* %6694 to double*
  store double %6700, double* %6701, align 1, !tbaa !2452
  %6702 = getelementptr inbounds i8, i8* %6694, i64 8
  %6703 = bitcast i8* %6702 to double*
  store double 0.000000e+00, double* %6703, align 1, !tbaa !2452
  %6704 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6705 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6706 = load i64, i64* %RBP
  %6707 = sub i64 %6706, 168
  %6708 = load i64, i64* %PC
  %6709 = add i64 %6708, 8
  store i64 %6709, i64* %PC
  %6710 = bitcast i8* %6705 to double*
  %6711 = load double, double* %6710, align 1
  %6712 = getelementptr inbounds i8, i8* %6705, i64 8
  %6713 = bitcast i8* %6712 to i64*
  %6714 = load i64, i64* %6713, align 1
  %6715 = inttoptr i64 %6707 to double*
  %6716 = load double, double* %6715
  %6717 = fadd double %6711, %6716
  %6718 = bitcast i8* %6704 to double*
  store double %6717, double* %6718, align 1, !tbaa !2452
  %6719 = getelementptr inbounds i8, i8* %6704, i64 8
  %6720 = bitcast i8* %6719 to i64*
  store i64 %6714, i64* %6720, align 1, !tbaa !2452
  %6721 = load i64, i64* %RBP
  %6722 = sub i64 %6721, 128
  %6723 = bitcast %union.vec128_t* %XMM0 to i8*
  %6724 = load i64, i64* %PC
  %6725 = add i64 %6724, 5
  store i64 %6725, i64* %PC
  %6726 = bitcast i8* %6723 to double*
  %6727 = load double, double* %6726, align 1
  %6728 = inttoptr i64 %6722 to double*
  store double %6727, double* %6728
  %6729 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6730 = load i64, i64* %RBP
  %6731 = sub i64 %6730, 72
  %6732 = load i64, i64* %PC
  %6733 = add i64 %6732, 5
  store i64 %6733, i64* %PC
  %6734 = inttoptr i64 %6731 to double*
  %6735 = load double, double* %6734
  %6736 = bitcast i8* %6729 to double*
  store double %6735, double* %6736, align 1, !tbaa !2452
  %6737 = getelementptr inbounds i8, i8* %6729, i64 8
  %6738 = bitcast i8* %6737 to double*
  store double 0.000000e+00, double* %6738, align 1, !tbaa !2452
  %6739 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6740 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6741 = load i64, i64* %RBP
  %6742 = sub i64 %6741, 120
  %6743 = load i64, i64* %PC
  %6744 = add i64 %6743, 5
  store i64 %6744, i64* %PC
  %6745 = bitcast i8* %6740 to double*
  %6746 = load double, double* %6745, align 1
  %6747 = getelementptr inbounds i8, i8* %6740, i64 8
  %6748 = bitcast i8* %6747 to i64*
  %6749 = load i64, i64* %6748, align 1
  %6750 = inttoptr i64 %6742 to double*
  %6751 = load double, double* %6750
  %6752 = fmul double %6746, %6751
  %6753 = bitcast i8* %6739 to double*
  store double %6752, double* %6753, align 1, !tbaa !2452
  %6754 = getelementptr inbounds i8, i8* %6739, i64 8
  %6755 = bitcast i8* %6754 to i64*
  store i64 %6749, i64* %6755, align 1, !tbaa !2452
  %6756 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6757 = load i64, i64* %RBP
  %6758 = sub i64 %6757, 80
  %6759 = load i64, i64* %PC
  %6760 = add i64 %6759, 5
  store i64 %6760, i64* %PC
  %6761 = inttoptr i64 %6758 to double*
  %6762 = load double, double* %6761
  %6763 = bitcast i8* %6756 to double*
  store double %6762, double* %6763, align 1, !tbaa !2452
  %6764 = getelementptr inbounds i8, i8* %6756, i64 8
  %6765 = bitcast i8* %6764 to double*
  store double 0.000000e+00, double* %6765, align 1, !tbaa !2452
  %6766 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6767 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6768 = load i64, i64* %RBP
  %6769 = sub i64 %6768, 128
  %6770 = load i64, i64* %PC
  %6771 = add i64 %6770, 5
  store i64 %6771, i64* %PC
  %6772 = bitcast i8* %6767 to double*
  %6773 = load double, double* %6772, align 1
  %6774 = getelementptr inbounds i8, i8* %6767, i64 8
  %6775 = bitcast i8* %6774 to i64*
  %6776 = load i64, i64* %6775, align 1
  %6777 = inttoptr i64 %6769 to double*
  %6778 = load double, double* %6777
  %6779 = fmul double %6773, %6778
  %6780 = bitcast i8* %6766 to double*
  store double %6779, double* %6780, align 1, !tbaa !2452
  %6781 = getelementptr inbounds i8, i8* %6766, i64 8
  %6782 = bitcast i8* %6781 to i64*
  store i64 %6776, i64* %6782, align 1, !tbaa !2452
  %6783 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6784 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6785 = bitcast %union.vec128_t* %XMM1 to i8*
  %6786 = load i64, i64* %PC
  %6787 = add i64 %6786, 4
  store i64 %6787, i64* %PC
  %6788 = bitcast i8* %6784 to double*
  %6789 = load double, double* %6788, align 1
  %6790 = getelementptr inbounds i8, i8* %6784, i64 8
  %6791 = bitcast i8* %6790 to i64*
  %6792 = load i64, i64* %6791, align 1
  %6793 = bitcast i8* %6785 to double*
  %6794 = load double, double* %6793, align 1
  %6795 = fsub double %6789, %6794
  %6796 = bitcast i8* %6783 to double*
  store double %6795, double* %6796, align 1, !tbaa !2452
  %6797 = getelementptr inbounds i8, i8* %6783, i64 8
  %6798 = bitcast i8* %6797 to i64*
  store i64 %6792, i64* %6798, align 1, !tbaa !2452
  %6799 = load i64, i64* %RBP
  %6800 = sub i64 %6799, 16
  %6801 = load i64, i64* %PC
  %6802 = add i64 %6801, 4
  store i64 %6802, i64* %PC
  %6803 = inttoptr i64 %6800 to i64*
  %6804 = load i64, i64* %6803
  store i64 %6804, i64* %RCX, align 8, !tbaa !2428
  %6805 = load i64, i64* %RBP
  %6806 = sub i64 %6805, 32
  %6807 = load i64, i64* %PC
  %6808 = add i64 %6807, 4
  store i64 %6808, i64* %PC
  %6809 = inttoptr i64 %6806 to i32*
  %6810 = load i32, i32* %6809
  %6811 = sext i32 %6810 to i64
  store i64 %6811, i64* %RDX, align 8, !tbaa !2428
  %6812 = load i64, i64* %RCX
  %6813 = load i64, i64* %RDX
  %6814 = mul i64 %6813, 8
  %6815 = add i64 %6814, %6812
  %6816 = bitcast %union.vec128_t* %XMM0 to i8*
  %6817 = load i64, i64* %PC
  %6818 = add i64 %6817, 5
  store i64 %6818, i64* %PC
  %6819 = bitcast i8* %6816 to double*
  %6820 = load double, double* %6819, align 1
  %6821 = inttoptr i64 %6815 to double*
  store double %6820, double* %6821
  %6822 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6823 = load i64, i64* %RBP
  %6824 = sub i64 %6823, 72
  %6825 = load i64, i64* %PC
  %6826 = add i64 %6825, 5
  store i64 %6826, i64* %PC
  %6827 = inttoptr i64 %6824 to double*
  %6828 = load double, double* %6827
  %6829 = bitcast i8* %6822 to double*
  store double %6828, double* %6829, align 1, !tbaa !2452
  %6830 = getelementptr inbounds i8, i8* %6822, i64 8
  %6831 = bitcast i8* %6830 to double*
  store double 0.000000e+00, double* %6831, align 1, !tbaa !2452
  %6832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6833 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6834 = load i64, i64* %RBP
  %6835 = sub i64 %6834, 128
  %6836 = load i64, i64* %PC
  %6837 = add i64 %6836, 5
  store i64 %6837, i64* %PC
  %6838 = bitcast i8* %6833 to double*
  %6839 = load double, double* %6838, align 1
  %6840 = getelementptr inbounds i8, i8* %6833, i64 8
  %6841 = bitcast i8* %6840 to i64*
  %6842 = load i64, i64* %6841, align 1
  %6843 = inttoptr i64 %6835 to double*
  %6844 = load double, double* %6843
  %6845 = fmul double %6839, %6844
  %6846 = bitcast i8* %6832 to double*
  store double %6845, double* %6846, align 1, !tbaa !2452
  %6847 = getelementptr inbounds i8, i8* %6832, i64 8
  %6848 = bitcast i8* %6847 to i64*
  store i64 %6842, i64* %6848, align 1, !tbaa !2452
  %6849 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6850 = load i64, i64* %RBP
  %6851 = sub i64 %6850, 80
  %6852 = load i64, i64* %PC
  %6853 = add i64 %6852, 5
  store i64 %6853, i64* %PC
  %6854 = inttoptr i64 %6851 to double*
  %6855 = load double, double* %6854
  %6856 = bitcast i8* %6849 to double*
  store double %6855, double* %6856, align 1, !tbaa !2452
  %6857 = getelementptr inbounds i8, i8* %6849, i64 8
  %6858 = bitcast i8* %6857 to double*
  store double 0.000000e+00, double* %6858, align 1, !tbaa !2452
  %6859 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6860 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6861 = load i64, i64* %RBP
  %6862 = sub i64 %6861, 120
  %6863 = load i64, i64* %PC
  %6864 = add i64 %6863, 5
  store i64 %6864, i64* %PC
  %6865 = bitcast i8* %6860 to double*
  %6866 = load double, double* %6865, align 1
  %6867 = getelementptr inbounds i8, i8* %6860, i64 8
  %6868 = bitcast i8* %6867 to i64*
  %6869 = load i64, i64* %6868, align 1
  %6870 = inttoptr i64 %6862 to double*
  %6871 = load double, double* %6870
  %6872 = fmul double %6866, %6871
  %6873 = bitcast i8* %6859 to double*
  store double %6872, double* %6873, align 1, !tbaa !2452
  %6874 = getelementptr inbounds i8, i8* %6859, i64 8
  %6875 = bitcast i8* %6874 to i64*
  store i64 %6869, i64* %6875, align 1, !tbaa !2452
  %6876 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6877 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6878 = bitcast %union.vec128_t* %XMM1 to i8*
  %6879 = load i64, i64* %PC
  %6880 = add i64 %6879, 4
  store i64 %6880, i64* %PC
  %6881 = bitcast i8* %6877 to double*
  %6882 = load double, double* %6881, align 1
  %6883 = getelementptr inbounds i8, i8* %6877, i64 8
  %6884 = bitcast i8* %6883 to i64*
  %6885 = load i64, i64* %6884, align 1
  %6886 = bitcast i8* %6878 to double*
  %6887 = load double, double* %6886, align 1
  %6888 = fadd double %6882, %6887
  %6889 = bitcast i8* %6876 to double*
  store double %6888, double* %6889, align 1, !tbaa !2452
  %6890 = getelementptr inbounds i8, i8* %6876, i64 8
  %6891 = bitcast i8* %6890 to i64*
  store i64 %6885, i64* %6891, align 1, !tbaa !2452
  %6892 = load i64, i64* %RBP
  %6893 = sub i64 %6892, 16
  %6894 = load i64, i64* %PC
  %6895 = add i64 %6894, 4
  store i64 %6895, i64* %PC
  %6896 = inttoptr i64 %6893 to i64*
  %6897 = load i64, i64* %6896
  store i64 %6897, i64* %RCX, align 8, !tbaa !2428
  %6898 = load i64, i64* %RBP
  %6899 = sub i64 %6898, 32
  %6900 = load i64, i64* %PC
  %6901 = add i64 %6900, 3
  store i64 %6901, i64* %PC
  %6902 = inttoptr i64 %6899 to i32*
  %6903 = load i32, i32* %6902
  %6904 = zext i32 %6903 to i64
  store i64 %6904, i64* %RAX, align 8, !tbaa !2428
  %6905 = load i64, i64* %RAX
  %6906 = load i64, i64* %PC
  %6907 = add i64 %6906, 3
  store i64 %6907, i64* %PC
  %6908 = trunc i64 %6905 to i32
  %6909 = add i32 1, %6908
  %6910 = zext i32 %6909 to i64
  store i64 %6910, i64* %RAX, align 8, !tbaa !2428
  %6911 = icmp ult i32 %6909, %6908
  %6912 = icmp ult i32 %6909, 1
  %6913 = or i1 %6911, %6912
  %6914 = zext i1 %6913 to i8
  %6915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6914, i8* %6915, align 1, !tbaa !2432
  %6916 = and i32 %6909, 255
  %6917 = call i32 @llvm.ctpop.i32(i32 %6916) #17
  %6918 = trunc i32 %6917 to i8
  %6919 = and i8 %6918, 1
  %6920 = xor i8 %6919, 1
  %6921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6920, i8* %6921, align 1, !tbaa !2446
  %6922 = xor i64 1, %6905
  %6923 = trunc i64 %6922 to i32
  %6924 = xor i32 %6923, %6909
  %6925 = lshr i32 %6924, 4
  %6926 = trunc i32 %6925 to i8
  %6927 = and i8 %6926, 1
  %6928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6927, i8* %6928, align 1, !tbaa !2447
  %6929 = icmp eq i32 %6909, 0
  %6930 = zext i1 %6929 to i8
  %6931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6930, i8* %6931, align 1, !tbaa !2448
  %6932 = lshr i32 %6909, 31
  %6933 = trunc i32 %6932 to i8
  %6934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6933, i8* %6934, align 1, !tbaa !2449
  %6935 = lshr i32 %6908, 31
  %6936 = xor i32 %6932, %6935
  %6937 = add nuw nsw i32 %6936, %6932
  %6938 = icmp eq i32 %6937, 2
  %6939 = zext i1 %6938 to i8
  %6940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6939, i8* %6940, align 1, !tbaa !2450
  %6941 = load i32, i32* %EAX
  %6942 = zext i32 %6941 to i64
  %6943 = load i64, i64* %PC
  %6944 = add i64 %6943, 3
  store i64 %6944, i64* %PC
  %6945 = shl i64 %6942, 32
  %6946 = ashr exact i64 %6945, 32
  store i64 %6946, i64* %RDX, align 8, !tbaa !2428
  %6947 = load i64, i64* %RCX
  %6948 = load i64, i64* %RDX
  %6949 = mul i64 %6948, 8
  %6950 = add i64 %6949, %6947
  %6951 = bitcast %union.vec128_t* %XMM0 to i8*
  %6952 = load i64, i64* %PC
  %6953 = add i64 %6952, 5
  store i64 %6953, i64* %PC
  %6954 = bitcast i8* %6951 to double*
  %6955 = load double, double* %6954, align 1
  %6956 = inttoptr i64 %6950 to double*
  store double %6955, double* %6956
  %6957 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6958 = load i64, i64* %RBP
  %6959 = sub i64 %6958, 136
  %6960 = load i64, i64* %PC
  %6961 = add i64 %6960, 8
  store i64 %6961, i64* %PC
  %6962 = inttoptr i64 %6959 to double*
  %6963 = load double, double* %6962
  %6964 = bitcast i8* %6957 to double*
  store double %6963, double* %6964, align 1, !tbaa !2452
  %6965 = getelementptr inbounds i8, i8* %6957, i64 8
  %6966 = bitcast i8* %6965 to double*
  store double 0.000000e+00, double* %6966, align 1, !tbaa !2452
  %6967 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6968 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6969 = load i64, i64* %RBP
  %6970 = sub i64 %6969, 176
  %6971 = load i64, i64* %PC
  %6972 = add i64 %6971, 8
  store i64 %6972, i64* %PC
  %6973 = bitcast i8* %6968 to double*
  %6974 = load double, double* %6973, align 1
  %6975 = getelementptr inbounds i8, i8* %6968, i64 8
  %6976 = bitcast i8* %6975 to i64*
  %6977 = load i64, i64* %6976, align 1
  %6978 = inttoptr i64 %6970 to double*
  %6979 = load double, double* %6978
  %6980 = fadd double %6974, %6979
  %6981 = bitcast i8* %6967 to double*
  store double %6980, double* %6981, align 1, !tbaa !2452
  %6982 = getelementptr inbounds i8, i8* %6967, i64 8
  %6983 = bitcast i8* %6982 to i64*
  store i64 %6977, i64* %6983, align 1, !tbaa !2452
  %6984 = load i64, i64* %RBP
  %6985 = sub i64 %6984, 120
  %6986 = bitcast %union.vec128_t* %XMM0 to i8*
  %6987 = load i64, i64* %PC
  %6988 = add i64 %6987, 5
  store i64 %6988, i64* %PC
  %6989 = bitcast i8* %6986 to double*
  %6990 = load double, double* %6989, align 1
  %6991 = inttoptr i64 %6985 to double*
  store double %6990, double* %6991
  %6992 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6993 = load i64, i64* %RBP
  %6994 = sub i64 %6993, 144
  %6995 = load i64, i64* %PC
  %6996 = add i64 %6995, 8
  store i64 %6996, i64* %PC
  %6997 = inttoptr i64 %6994 to double*
  %6998 = load double, double* %6997
  %6999 = bitcast i8* %6992 to double*
  store double %6998, double* %6999, align 1, !tbaa !2452
  %7000 = getelementptr inbounds i8, i8* %6992, i64 8
  %7001 = bitcast i8* %7000 to double*
  store double 0.000000e+00, double* %7001, align 1, !tbaa !2452
  %7002 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7003 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7004 = load i64, i64* %RBP
  %7005 = sub i64 %7004, 168
  %7006 = load i64, i64* %PC
  %7007 = add i64 %7006, 8
  store i64 %7007, i64* %PC
  %7008 = bitcast i8* %7003 to double*
  %7009 = load double, double* %7008, align 1
  %7010 = getelementptr inbounds i8, i8* %7003, i64 8
  %7011 = bitcast i8* %7010 to i64*
  %7012 = load i64, i64* %7011, align 1
  %7013 = inttoptr i64 %7005 to double*
  %7014 = load double, double* %7013
  %7015 = fsub double %7009, %7014
  %7016 = bitcast i8* %7002 to double*
  store double %7015, double* %7016, align 1, !tbaa !2452
  %7017 = getelementptr inbounds i8, i8* %7002, i64 8
  %7018 = bitcast i8* %7017 to i64*
  store i64 %7012, i64* %7018, align 1, !tbaa !2452
  %7019 = load i64, i64* %RBP
  %7020 = sub i64 %7019, 128
  %7021 = bitcast %union.vec128_t* %XMM0 to i8*
  %7022 = load i64, i64* %PC
  %7023 = add i64 %7022, 5
  store i64 %7023, i64* %PC
  %7024 = bitcast i8* %7021 to double*
  %7025 = load double, double* %7024, align 1
  %7026 = inttoptr i64 %7020 to double*
  store double %7025, double* %7026
  %7027 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7028 = load i64, i64* %RBP
  %7029 = sub i64 %7028, 104
  %7030 = load i64, i64* %PC
  %7031 = add i64 %7030, 5
  store i64 %7031, i64* %PC
  %7032 = inttoptr i64 %7029 to double*
  %7033 = load double, double* %7032
  %7034 = bitcast i8* %7027 to double*
  store double %7033, double* %7034, align 1, !tbaa !2452
  %7035 = getelementptr inbounds i8, i8* %7027, i64 8
  %7036 = bitcast i8* %7035 to double*
  store double 0.000000e+00, double* %7036, align 1, !tbaa !2452
  %7037 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7038 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7039 = load i64, i64* %RBP
  %7040 = sub i64 %7039, 120
  %7041 = load i64, i64* %PC
  %7042 = add i64 %7041, 5
  store i64 %7042, i64* %PC
  %7043 = bitcast i8* %7038 to double*
  %7044 = load double, double* %7043, align 1
  %7045 = getelementptr inbounds i8, i8* %7038, i64 8
  %7046 = bitcast i8* %7045 to i64*
  %7047 = load i64, i64* %7046, align 1
  %7048 = inttoptr i64 %7040 to double*
  %7049 = load double, double* %7048
  %7050 = fmul double %7044, %7049
  %7051 = bitcast i8* %7037 to double*
  store double %7050, double* %7051, align 1, !tbaa !2452
  %7052 = getelementptr inbounds i8, i8* %7037, i64 8
  %7053 = bitcast i8* %7052 to i64*
  store i64 %7047, i64* %7053, align 1, !tbaa !2452
  %7054 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7055 = load i64, i64* %RBP
  %7056 = sub i64 %7055, 112
  %7057 = load i64, i64* %PC
  %7058 = add i64 %7057, 5
  store i64 %7058, i64* %PC
  %7059 = inttoptr i64 %7056 to double*
  %7060 = load double, double* %7059
  %7061 = bitcast i8* %7054 to double*
  store double %7060, double* %7061, align 1, !tbaa !2452
  %7062 = getelementptr inbounds i8, i8* %7054, i64 8
  %7063 = bitcast i8* %7062 to double*
  store double 0.000000e+00, double* %7063, align 1, !tbaa !2452
  %7064 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7065 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7066 = load i64, i64* %RBP
  %7067 = sub i64 %7066, 128
  %7068 = load i64, i64* %PC
  %7069 = add i64 %7068, 5
  store i64 %7069, i64* %PC
  %7070 = bitcast i8* %7065 to double*
  %7071 = load double, double* %7070, align 1
  %7072 = getelementptr inbounds i8, i8* %7065, i64 8
  %7073 = bitcast i8* %7072 to i64*
  %7074 = load i64, i64* %7073, align 1
  %7075 = inttoptr i64 %7067 to double*
  %7076 = load double, double* %7075
  %7077 = fmul double %7071, %7076
  %7078 = bitcast i8* %7064 to double*
  store double %7077, double* %7078, align 1, !tbaa !2452
  %7079 = getelementptr inbounds i8, i8* %7064, i64 8
  %7080 = bitcast i8* %7079 to i64*
  store i64 %7074, i64* %7080, align 1, !tbaa !2452
  %7081 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7082 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7083 = bitcast %union.vec128_t* %XMM1 to i8*
  %7084 = load i64, i64* %PC
  %7085 = add i64 %7084, 4
  store i64 %7085, i64* %PC
  %7086 = bitcast i8* %7082 to double*
  %7087 = load double, double* %7086, align 1
  %7088 = getelementptr inbounds i8, i8* %7082, i64 8
  %7089 = bitcast i8* %7088 to i64*
  %7090 = load i64, i64* %7089, align 1
  %7091 = bitcast i8* %7083 to double*
  %7092 = load double, double* %7091, align 1
  %7093 = fsub double %7087, %7092
  %7094 = bitcast i8* %7081 to double*
  store double %7093, double* %7094, align 1, !tbaa !2452
  %7095 = getelementptr inbounds i8, i8* %7081, i64 8
  %7096 = bitcast i8* %7095 to i64*
  store i64 %7090, i64* %7096, align 1, !tbaa !2452
  %7097 = load i64, i64* %RBP
  %7098 = sub i64 %7097, 16
  %7099 = load i64, i64* %PC
  %7100 = add i64 %7099, 4
  store i64 %7100, i64* %PC
  %7101 = inttoptr i64 %7098 to i64*
  %7102 = load i64, i64* %7101
  store i64 %7102, i64* %RCX, align 8, !tbaa !2428
  %7103 = load i64, i64* %RBP
  %7104 = sub i64 %7103, 40
  %7105 = load i64, i64* %PC
  %7106 = add i64 %7105, 4
  store i64 %7106, i64* %PC
  %7107 = inttoptr i64 %7104 to i32*
  %7108 = load i32, i32* %7107
  %7109 = sext i32 %7108 to i64
  store i64 %7109, i64* %RDX, align 8, !tbaa !2428
  %7110 = load i64, i64* %RCX
  %7111 = load i64, i64* %RDX
  %7112 = mul i64 %7111, 8
  %7113 = add i64 %7112, %7110
  %7114 = bitcast %union.vec128_t* %XMM0 to i8*
  %7115 = load i64, i64* %PC
  %7116 = add i64 %7115, 5
  store i64 %7116, i64* %PC
  %7117 = bitcast i8* %7114 to double*
  %7118 = load double, double* %7117, align 1
  %7119 = inttoptr i64 %7113 to double*
  store double %7118, double* %7119
  %7120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7121 = load i64, i64* %RBP
  %7122 = sub i64 %7121, 104
  %7123 = load i64, i64* %PC
  %7124 = add i64 %7123, 5
  store i64 %7124, i64* %PC
  %7125 = inttoptr i64 %7122 to double*
  %7126 = load double, double* %7125
  %7127 = bitcast i8* %7120 to double*
  store double %7126, double* %7127, align 1, !tbaa !2452
  %7128 = getelementptr inbounds i8, i8* %7120, i64 8
  %7129 = bitcast i8* %7128 to double*
  store double 0.000000e+00, double* %7129, align 1, !tbaa !2452
  %7130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7131 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7132 = load i64, i64* %RBP
  %7133 = sub i64 %7132, 128
  %7134 = load i64, i64* %PC
  %7135 = add i64 %7134, 5
  store i64 %7135, i64* %PC
  %7136 = bitcast i8* %7131 to double*
  %7137 = load double, double* %7136, align 1
  %7138 = getelementptr inbounds i8, i8* %7131, i64 8
  %7139 = bitcast i8* %7138 to i64*
  %7140 = load i64, i64* %7139, align 1
  %7141 = inttoptr i64 %7133 to double*
  %7142 = load double, double* %7141
  %7143 = fmul double %7137, %7142
  %7144 = bitcast i8* %7130 to double*
  store double %7143, double* %7144, align 1, !tbaa !2452
  %7145 = getelementptr inbounds i8, i8* %7130, i64 8
  %7146 = bitcast i8* %7145 to i64*
  store i64 %7140, i64* %7146, align 1, !tbaa !2452
  %7147 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7148 = load i64, i64* %RBP
  %7149 = sub i64 %7148, 112
  %7150 = load i64, i64* %PC
  %7151 = add i64 %7150, 5
  store i64 %7151, i64* %PC
  %7152 = inttoptr i64 %7149 to double*
  %7153 = load double, double* %7152
  %7154 = bitcast i8* %7147 to double*
  store double %7153, double* %7154, align 1, !tbaa !2452
  %7155 = getelementptr inbounds i8, i8* %7147, i64 8
  %7156 = bitcast i8* %7155 to double*
  store double 0.000000e+00, double* %7156, align 1, !tbaa !2452
  %7157 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7158 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7159 = load i64, i64* %RBP
  %7160 = sub i64 %7159, 120
  %7161 = load i64, i64* %PC
  %7162 = add i64 %7161, 5
  store i64 %7162, i64* %PC
  %7163 = bitcast i8* %7158 to double*
  %7164 = load double, double* %7163, align 1
  %7165 = getelementptr inbounds i8, i8* %7158, i64 8
  %7166 = bitcast i8* %7165 to i64*
  %7167 = load i64, i64* %7166, align 1
  %7168 = inttoptr i64 %7160 to double*
  %7169 = load double, double* %7168
  %7170 = fmul double %7164, %7169
  %7171 = bitcast i8* %7157 to double*
  store double %7170, double* %7171, align 1, !tbaa !2452
  %7172 = getelementptr inbounds i8, i8* %7157, i64 8
  %7173 = bitcast i8* %7172 to i64*
  store i64 %7167, i64* %7173, align 1, !tbaa !2452
  %7174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7176 = bitcast %union.vec128_t* %XMM1 to i8*
  %7177 = load i64, i64* %PC
  %7178 = add i64 %7177, 4
  store i64 %7178, i64* %PC
  %7179 = bitcast i8* %7175 to double*
  %7180 = load double, double* %7179, align 1
  %7181 = getelementptr inbounds i8, i8* %7175, i64 8
  %7182 = bitcast i8* %7181 to i64*
  %7183 = load i64, i64* %7182, align 1
  %7184 = bitcast i8* %7176 to double*
  %7185 = load double, double* %7184, align 1
  %7186 = fadd double %7180, %7185
  %7187 = bitcast i8* %7174 to double*
  store double %7186, double* %7187, align 1, !tbaa !2452
  %7188 = getelementptr inbounds i8, i8* %7174, i64 8
  %7189 = bitcast i8* %7188 to i64*
  store i64 %7183, i64* %7189, align 1, !tbaa !2452
  %7190 = load i64, i64* %RBP
  %7191 = sub i64 %7190, 16
  %7192 = load i64, i64* %PC
  %7193 = add i64 %7192, 4
  store i64 %7193, i64* %PC
  %7194 = inttoptr i64 %7191 to i64*
  %7195 = load i64, i64* %7194
  store i64 %7195, i64* %RCX, align 8, !tbaa !2428
  %7196 = load i64, i64* %RBP
  %7197 = sub i64 %7196, 40
  %7198 = load i64, i64* %PC
  %7199 = add i64 %7198, 3
  store i64 %7199, i64* %PC
  %7200 = inttoptr i64 %7197 to i32*
  %7201 = load i32, i32* %7200
  %7202 = zext i32 %7201 to i64
  store i64 %7202, i64* %RAX, align 8, !tbaa !2428
  %7203 = load i64, i64* %RAX
  %7204 = load i64, i64* %PC
  %7205 = add i64 %7204, 3
  store i64 %7205, i64* %PC
  %7206 = trunc i64 %7203 to i32
  %7207 = add i32 1, %7206
  %7208 = zext i32 %7207 to i64
  store i64 %7208, i64* %RAX, align 8, !tbaa !2428
  %7209 = icmp ult i32 %7207, %7206
  %7210 = icmp ult i32 %7207, 1
  %7211 = or i1 %7209, %7210
  %7212 = zext i1 %7211 to i8
  %7213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7212, i8* %7213, align 1, !tbaa !2432
  %7214 = and i32 %7207, 255
  %7215 = call i32 @llvm.ctpop.i32(i32 %7214) #17
  %7216 = trunc i32 %7215 to i8
  %7217 = and i8 %7216, 1
  %7218 = xor i8 %7217, 1
  %7219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7218, i8* %7219, align 1, !tbaa !2446
  %7220 = xor i64 1, %7203
  %7221 = trunc i64 %7220 to i32
  %7222 = xor i32 %7221, %7207
  %7223 = lshr i32 %7222, 4
  %7224 = trunc i32 %7223 to i8
  %7225 = and i8 %7224, 1
  %7226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7225, i8* %7226, align 1, !tbaa !2447
  %7227 = icmp eq i32 %7207, 0
  %7228 = zext i1 %7227 to i8
  %7229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7228, i8* %7229, align 1, !tbaa !2448
  %7230 = lshr i32 %7207, 31
  %7231 = trunc i32 %7230 to i8
  %7232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7231, i8* %7232, align 1, !tbaa !2449
  %7233 = lshr i32 %7206, 31
  %7234 = xor i32 %7230, %7233
  %7235 = add nuw nsw i32 %7234, %7230
  %7236 = icmp eq i32 %7235, 2
  %7237 = zext i1 %7236 to i8
  %7238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7237, i8* %7238, align 1, !tbaa !2450
  %7239 = load i32, i32* %EAX
  %7240 = zext i32 %7239 to i64
  %7241 = load i64, i64* %PC
  %7242 = add i64 %7241, 3
  store i64 %7242, i64* %PC
  %7243 = shl i64 %7240, 32
  %7244 = ashr exact i64 %7243, 32
  store i64 %7244, i64* %RDX, align 8, !tbaa !2428
  %7245 = load i64, i64* %RCX
  %7246 = load i64, i64* %RDX
  %7247 = mul i64 %7246, 8
  %7248 = add i64 %7247, %7245
  %7249 = bitcast %union.vec128_t* %XMM0 to i8*
  %7250 = load i64, i64* %PC
  %7251 = add i64 %7250, 5
  store i64 %7251, i64* %PC
  %7252 = bitcast i8* %7249 to double*
  %7253 = load double, double* %7252, align 1
  %7254 = inttoptr i64 %7248 to double*
  store double %7253, double* %7254
  %7255 = load i64, i64* %RBP
  %7256 = sub i64 %7255, 28
  %7257 = load i64, i64* %PC
  %7258 = add i64 %7257, 3
  store i64 %7258, i64* %PC
  %7259 = inttoptr i64 %7256 to i32*
  %7260 = load i32, i32* %7259
  %7261 = zext i32 %7260 to i64
  store i64 %7261, i64* %RAX, align 8, !tbaa !2428
  %7262 = load i64, i64* %RAX
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 3
  store i64 %7264, i64* %PC
  %7265 = trunc i64 %7262 to i32
  %7266 = add i32 2, %7265
  %7267 = zext i32 %7266 to i64
  store i64 %7267, i64* %RAX, align 8, !tbaa !2428
  %7268 = icmp ult i32 %7266, %7265
  %7269 = icmp ult i32 %7266, 2
  %7270 = or i1 %7268, %7269
  %7271 = zext i1 %7270 to i8
  %7272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7271, i8* %7272, align 1, !tbaa !2432
  %7273 = and i32 %7266, 255
  %7274 = call i32 @llvm.ctpop.i32(i32 %7273) #17
  %7275 = trunc i32 %7274 to i8
  %7276 = and i8 %7275, 1
  %7277 = xor i8 %7276, 1
  %7278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7277, i8* %7278, align 1, !tbaa !2446
  %7279 = xor i64 2, %7262
  %7280 = trunc i64 %7279 to i32
  %7281 = xor i32 %7280, %7266
  %7282 = lshr i32 %7281, 4
  %7283 = trunc i32 %7282 to i8
  %7284 = and i8 %7283, 1
  %7285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7284, i8* %7285, align 1, !tbaa !2447
  %7286 = icmp eq i32 %7266, 0
  %7287 = zext i1 %7286 to i8
  %7288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7287, i8* %7288, align 1, !tbaa !2448
  %7289 = lshr i32 %7266, 31
  %7290 = trunc i32 %7289 to i8
  %7291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7290, i8* %7291, align 1, !tbaa !2449
  %7292 = lshr i32 %7265, 31
  %7293 = xor i32 %7289, %7292
  %7294 = add nuw nsw i32 %7293, %7289
  %7295 = icmp eq i32 %7294, 2
  %7296 = zext i1 %7295 to i8
  %7297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7296, i8* %7297, align 1, !tbaa !2450
  %7298 = load i64, i64* %RBP
  %7299 = sub i64 %7298, 28
  %7300 = load i32, i32* %EAX
  %7301 = zext i32 %7300 to i64
  %7302 = load i64, i64* %PC
  %7303 = add i64 %7302, 3
  store i64 %7303, i64* %PC
  %7304 = inttoptr i64 %7299 to i32*
  store i32 %7300, i32* %7304
  %7305 = load i64, i64* %PC
  %7306 = sub i64 %7305, 781
  %7307 = load i64, i64* %PC
  %7308 = add i64 %7307, 5
  store i64 %7308, i64* %PC
  %7309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7306, i64* %7309, align 8, !tbaa !2428
  br label %block_403930

block_403cc6:                                     ; preds = %block_403cb0
  %7310 = add i64 %2892, 10
  store i64 %7310, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %7311 = load i64, i64* %RBP
  %7312 = sub i64 %7311, 28
  %7313 = load i64, i64* %PC
  %7314 = add i64 %7313, 3
  store i64 %7314, i64* %PC
  %7315 = inttoptr i64 %7312 to i32*
  %7316 = load i32, i32* %7315
  %7317 = zext i32 %7316 to i64
  store i64 %7317, i64* %RCX, align 8, !tbaa !2428
  %7318 = load i64, i64* %RCX
  %7319 = load i64, i64* %RBP
  %7320 = sub i64 %7319, 8
  %7321 = load i64, i64* %PC
  %7322 = add i64 %7321, 3
  store i64 %7322, i64* %PC
  %7323 = trunc i64 %7318 to i32
  %7324 = inttoptr i64 %7320 to i32*
  %7325 = load i32, i32* %7324
  %7326 = add i32 %7325, %7323
  %7327 = zext i32 %7326 to i64
  store i64 %7327, i64* %RCX, align 8, !tbaa !2428
  %7328 = icmp ult i32 %7326, %7323
  %7329 = icmp ult i32 %7326, %7325
  %7330 = or i1 %7328, %7329
  %7331 = zext i1 %7330 to i8
  %7332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7331, i8* %7332, align 1, !tbaa !2432
  %7333 = and i32 %7326, 255
  %7334 = call i32 @llvm.ctpop.i32(i32 %7333) #17
  %7335 = trunc i32 %7334 to i8
  %7336 = and i8 %7335, 1
  %7337 = xor i8 %7336, 1
  %7338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7337, i8* %7338, align 1, !tbaa !2446
  %7339 = xor i32 %7325, %7323
  %7340 = xor i32 %7339, %7326
  %7341 = lshr i32 %7340, 4
  %7342 = trunc i32 %7341 to i8
  %7343 = and i8 %7342, 1
  %7344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7343, i8* %7344, align 1, !tbaa !2447
  %7345 = icmp eq i32 %7326, 0
  %7346 = zext i1 %7345 to i8
  %7347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7346, i8* %7347, align 1, !tbaa !2448
  %7348 = lshr i32 %7326, 31
  %7349 = trunc i32 %7348 to i8
  %7350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7349, i8* %7350, align 1, !tbaa !2449
  %7351 = lshr i32 %7323, 31
  %7352 = lshr i32 %7325, 31
  %7353 = xor i32 %7348, %7351
  %7354 = xor i32 %7348, %7352
  %7355 = add nuw nsw i32 %7353, %7354
  %7356 = icmp eq i32 %7355, 2
  %7357 = zext i1 %7356 to i8
  %7358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7357, i8* %7358, align 1, !tbaa !2450
  %7359 = load i64, i64* %RBP
  %7360 = sub i64 %7359, 32
  %7361 = load i32, i32* %ECX
  %7362 = zext i32 %7361 to i64
  %7363 = load i64, i64* %PC
  %7364 = add i64 %7363, 3
  store i64 %7364, i64* %PC
  %7365 = inttoptr i64 %7360 to i32*
  store i32 %7361, i32* %7365
  %7366 = load i64, i64* %RBP
  %7367 = sub i64 %7366, 32
  %7368 = load i64, i64* %PC
  %7369 = add i64 %7368, 3
  store i64 %7369, i64* %PC
  %7370 = inttoptr i64 %7367 to i32*
  %7371 = load i32, i32* %7370
  %7372 = zext i32 %7371 to i64
  store i64 %7372, i64* %RCX, align 8, !tbaa !2428
  %7373 = load i64, i64* %RCX
  %7374 = load i64, i64* %RBP
  %7375 = sub i64 %7374, 8
  %7376 = load i64, i64* %PC
  %7377 = add i64 %7376, 3
  store i64 %7377, i64* %PC
  %7378 = trunc i64 %7373 to i32
  %7379 = inttoptr i64 %7375 to i32*
  %7380 = load i32, i32* %7379
  %7381 = add i32 %7380, %7378
  %7382 = zext i32 %7381 to i64
  store i64 %7382, i64* %RCX, align 8, !tbaa !2428
  %7383 = icmp ult i32 %7381, %7378
  %7384 = icmp ult i32 %7381, %7380
  %7385 = or i1 %7383, %7384
  %7386 = zext i1 %7385 to i8
  %7387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7386, i8* %7387, align 1, !tbaa !2432
  %7388 = and i32 %7381, 255
  %7389 = call i32 @llvm.ctpop.i32(i32 %7388) #17
  %7390 = trunc i32 %7389 to i8
  %7391 = and i8 %7390, 1
  %7392 = xor i8 %7391, 1
  %7393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7392, i8* %7393, align 1, !tbaa !2446
  %7394 = xor i32 %7380, %7378
  %7395 = xor i32 %7394, %7381
  %7396 = lshr i32 %7395, 4
  %7397 = trunc i32 %7396 to i8
  %7398 = and i8 %7397, 1
  %7399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7398, i8* %7399, align 1, !tbaa !2447
  %7400 = icmp eq i32 %7381, 0
  %7401 = zext i1 %7400 to i8
  %7402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7401, i8* %7402, align 1, !tbaa !2448
  %7403 = lshr i32 %7381, 31
  %7404 = trunc i32 %7403 to i8
  %7405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7404, i8* %7405, align 1, !tbaa !2449
  %7406 = lshr i32 %7378, 31
  %7407 = lshr i32 %7380, 31
  %7408 = xor i32 %7403, %7406
  %7409 = xor i32 %7403, %7407
  %7410 = add nuw nsw i32 %7408, %7409
  %7411 = icmp eq i32 %7410, 2
  %7412 = zext i1 %7411 to i8
  %7413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7412, i8* %7413, align 1, !tbaa !2450
  %7414 = load i64, i64* %RBP
  %7415 = sub i64 %7414, 36
  %7416 = load i32, i32* %ECX
  %7417 = zext i32 %7416 to i64
  %7418 = load i64, i64* %PC
  %7419 = add i64 %7418, 3
  store i64 %7419, i64* %PC
  %7420 = inttoptr i64 %7415 to i32*
  store i32 %7416, i32* %7420
  %7421 = load i64, i64* %RBP
  %7422 = sub i64 %7421, 36
  %7423 = load i64, i64* %PC
  %7424 = add i64 %7423, 3
  store i64 %7424, i64* %PC
  %7425 = inttoptr i64 %7422 to i32*
  %7426 = load i32, i32* %7425
  %7427 = zext i32 %7426 to i64
  store i64 %7427, i64* %RCX, align 8, !tbaa !2428
  %7428 = load i64, i64* %RCX
  %7429 = load i64, i64* %RBP
  %7430 = sub i64 %7429, 8
  %7431 = load i64, i64* %PC
  %7432 = add i64 %7431, 3
  store i64 %7432, i64* %PC
  %7433 = trunc i64 %7428 to i32
  %7434 = inttoptr i64 %7430 to i32*
  %7435 = load i32, i32* %7434
  %7436 = add i32 %7435, %7433
  %7437 = zext i32 %7436 to i64
  store i64 %7437, i64* %RCX, align 8, !tbaa !2428
  %7438 = icmp ult i32 %7436, %7433
  %7439 = icmp ult i32 %7436, %7435
  %7440 = or i1 %7438, %7439
  %7441 = zext i1 %7440 to i8
  %7442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7441, i8* %7442, align 1, !tbaa !2432
  %7443 = and i32 %7436, 255
  %7444 = call i32 @llvm.ctpop.i32(i32 %7443) #17
  %7445 = trunc i32 %7444 to i8
  %7446 = and i8 %7445, 1
  %7447 = xor i8 %7446, 1
  %7448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7447, i8* %7448, align 1, !tbaa !2446
  %7449 = xor i32 %7435, %7433
  %7450 = xor i32 %7449, %7436
  %7451 = lshr i32 %7450, 4
  %7452 = trunc i32 %7451 to i8
  %7453 = and i8 %7452, 1
  %7454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7453, i8* %7454, align 1, !tbaa !2447
  %7455 = icmp eq i32 %7436, 0
  %7456 = zext i1 %7455 to i8
  %7457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7456, i8* %7457, align 1, !tbaa !2448
  %7458 = lshr i32 %7436, 31
  %7459 = trunc i32 %7458 to i8
  %7460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7459, i8* %7460, align 1, !tbaa !2449
  %7461 = lshr i32 %7433, 31
  %7462 = lshr i32 %7435, 31
  %7463 = xor i32 %7458, %7461
  %7464 = xor i32 %7458, %7462
  %7465 = add nuw nsw i32 %7463, %7464
  %7466 = icmp eq i32 %7465, 2
  %7467 = zext i1 %7466 to i8
  %7468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7467, i8* %7468, align 1, !tbaa !2450
  %7469 = load i64, i64* %RBP
  %7470 = sub i64 %7469, 40
  %7471 = load i32, i32* %ECX
  %7472 = zext i32 %7471 to i64
  %7473 = load i64, i64* %PC
  %7474 = add i64 %7473, 3
  store i64 %7474, i64* %PC
  %7475 = inttoptr i64 %7470 to i32*
  store i32 %7471, i32* %7475
  %7476 = load i64, i64* %RBP
  %7477 = sub i64 %7476, 16
  %7478 = load i64, i64* %PC
  %7479 = add i64 %7478, 4
  store i64 %7479, i64* %PC
  %7480 = inttoptr i64 %7477 to i64*
  %7481 = load i64, i64* %7480
  store i64 %7481, i64* %RDX, align 8, !tbaa !2428
  %7482 = load i64, i64* %RBP
  %7483 = sub i64 %7482, 28
  %7484 = load i64, i64* %PC
  %7485 = add i64 %7484, 4
  store i64 %7485, i64* %PC
  %7486 = inttoptr i64 %7483 to i32*
  %7487 = load i32, i32* %7486
  %7488 = sext i32 %7487 to i64
  store i64 %7488, i64* %RSI, align 8, !tbaa !2428
  %7489 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7490 = load i64, i64* %RDX
  %7491 = load i64, i64* %RSI
  %7492 = mul i64 %7491, 8
  %7493 = add i64 %7492, %7490
  %7494 = load i64, i64* %PC
  %7495 = add i64 %7494, 5
  store i64 %7495, i64* %PC
  %7496 = inttoptr i64 %7493 to double*
  %7497 = load double, double* %7496
  %7498 = bitcast i8* %7489 to double*
  store double %7497, double* %7498, align 1, !tbaa !2452
  %7499 = getelementptr inbounds i8, i8* %7489, i64 8
  %7500 = bitcast i8* %7499 to double*
  store double 0.000000e+00, double* %7500, align 1, !tbaa !2452
  %7501 = load i64, i64* %RBP
  %7502 = sub i64 %7501, 16
  %7503 = load i64, i64* %PC
  %7504 = add i64 %7503, 4
  store i64 %7504, i64* %PC
  %7505 = inttoptr i64 %7502 to i64*
  %7506 = load i64, i64* %7505
  store i64 %7506, i64* %RDX, align 8, !tbaa !2428
  %7507 = load i64, i64* %RBP
  %7508 = sub i64 %7507, 32
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 4
  store i64 %7510, i64* %PC
  %7511 = inttoptr i64 %7508 to i32*
  %7512 = load i32, i32* %7511
  %7513 = sext i32 %7512 to i64
  store i64 %7513, i64* %RSI, align 8, !tbaa !2428
  %7514 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7515 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7516 = load i64, i64* %RDX
  %7517 = load i64, i64* %RSI
  %7518 = mul i64 %7517, 8
  %7519 = add i64 %7518, %7516
  %7520 = load i64, i64* %PC
  %7521 = add i64 %7520, 5
  store i64 %7521, i64* %PC
  %7522 = bitcast i8* %7515 to double*
  %7523 = load double, double* %7522, align 1
  %7524 = getelementptr inbounds i8, i8* %7515, i64 8
  %7525 = bitcast i8* %7524 to i64*
  %7526 = load i64, i64* %7525, align 1
  %7527 = inttoptr i64 %7519 to double*
  %7528 = load double, double* %7527
  %7529 = fadd double %7523, %7528
  %7530 = bitcast i8* %7514 to double*
  store double %7529, double* %7530, align 1, !tbaa !2452
  %7531 = getelementptr inbounds i8, i8* %7514, i64 8
  %7532 = bitcast i8* %7531 to i64*
  store i64 %7526, i64* %7532, align 1, !tbaa !2452
  %7533 = load i64, i64* %RBP
  %7534 = sub i64 %7533, 120
  %7535 = bitcast %union.vec128_t* %XMM0 to i8*
  %7536 = load i64, i64* %PC
  %7537 = add i64 %7536, 5
  store i64 %7537, i64* %PC
  %7538 = bitcast i8* %7535 to double*
  %7539 = load double, double* %7538, align 1
  %7540 = inttoptr i64 %7534 to double*
  store double %7539, double* %7540
  %7541 = load i64, i64* %RBP
  %7542 = sub i64 %7541, 16
  %7543 = load i64, i64* %PC
  %7544 = add i64 %7543, 4
  store i64 %7544, i64* %PC
  %7545 = inttoptr i64 %7542 to i64*
  %7546 = load i64, i64* %7545
  store i64 %7546, i64* %RDX, align 8, !tbaa !2428
  %7547 = load i64, i64* %RBP
  %7548 = sub i64 %7547, 28
  %7549 = load i64, i64* %PC
  %7550 = add i64 %7549, 3
  store i64 %7550, i64* %PC
  %7551 = inttoptr i64 %7548 to i32*
  %7552 = load i32, i32* %7551
  %7553 = zext i32 %7552 to i64
  store i64 %7553, i64* %RCX, align 8, !tbaa !2428
  %7554 = load i64, i64* %RCX
  %7555 = load i64, i64* %PC
  %7556 = add i64 %7555, 3
  store i64 %7556, i64* %PC
  %7557 = trunc i64 %7554 to i32
  %7558 = add i32 1, %7557
  %7559 = zext i32 %7558 to i64
  store i64 %7559, i64* %RCX, align 8, !tbaa !2428
  %7560 = icmp ult i32 %7558, %7557
  %7561 = icmp ult i32 %7558, 1
  %7562 = or i1 %7560, %7561
  %7563 = zext i1 %7562 to i8
  %7564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7563, i8* %7564, align 1, !tbaa !2432
  %7565 = and i32 %7558, 255
  %7566 = call i32 @llvm.ctpop.i32(i32 %7565) #17
  %7567 = trunc i32 %7566 to i8
  %7568 = and i8 %7567, 1
  %7569 = xor i8 %7568, 1
  %7570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7569, i8* %7570, align 1, !tbaa !2446
  %7571 = xor i64 1, %7554
  %7572 = trunc i64 %7571 to i32
  %7573 = xor i32 %7572, %7558
  %7574 = lshr i32 %7573, 4
  %7575 = trunc i32 %7574 to i8
  %7576 = and i8 %7575, 1
  %7577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7576, i8* %7577, align 1, !tbaa !2447
  %7578 = icmp eq i32 %7558, 0
  %7579 = zext i1 %7578 to i8
  %7580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7579, i8* %7580, align 1, !tbaa !2448
  %7581 = lshr i32 %7558, 31
  %7582 = trunc i32 %7581 to i8
  %7583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7582, i8* %7583, align 1, !tbaa !2449
  %7584 = lshr i32 %7557, 31
  %7585 = xor i32 %7581, %7584
  %7586 = add nuw nsw i32 %7585, %7581
  %7587 = icmp eq i32 %7586, 2
  %7588 = zext i1 %7587 to i8
  %7589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7588, i8* %7589, align 1, !tbaa !2450
  %7590 = load i32, i32* %ECX
  %7591 = zext i32 %7590 to i64
  %7592 = load i64, i64* %PC
  %7593 = add i64 %7592, 3
  store i64 %7593, i64* %PC
  %7594 = shl i64 %7591, 32
  %7595 = ashr exact i64 %7594, 32
  store i64 %7595, i64* %RSI, align 8, !tbaa !2428
  %7596 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7597 = load i64, i64* %RDX
  %7598 = load i64, i64* %RSI
  %7599 = mul i64 %7598, 8
  %7600 = add i64 %7599, %7597
  %7601 = load i64, i64* %PC
  %7602 = add i64 %7601, 5
  store i64 %7602, i64* %PC
  %7603 = inttoptr i64 %7600 to double*
  %7604 = load double, double* %7603
  %7605 = bitcast i8* %7596 to double*
  store double %7604, double* %7605, align 1, !tbaa !2452
  %7606 = getelementptr inbounds i8, i8* %7596, i64 8
  %7607 = bitcast i8* %7606 to double*
  store double 0.000000e+00, double* %7607, align 1, !tbaa !2452
  %7608 = load i64, i64* %RBP
  %7609 = sub i64 %7608, 16
  %7610 = load i64, i64* %PC
  %7611 = add i64 %7610, 4
  store i64 %7611, i64* %PC
  %7612 = inttoptr i64 %7609 to i64*
  %7613 = load i64, i64* %7612
  store i64 %7613, i64* %RDX, align 8, !tbaa !2428
  %7614 = load i64, i64* %RBP
  %7615 = sub i64 %7614, 32
  %7616 = load i64, i64* %PC
  %7617 = add i64 %7616, 3
  store i64 %7617, i64* %PC
  %7618 = inttoptr i64 %7615 to i32*
  %7619 = load i32, i32* %7618
  %7620 = zext i32 %7619 to i64
  store i64 %7620, i64* %RCX, align 8, !tbaa !2428
  %7621 = load i64, i64* %RCX
  %7622 = load i64, i64* %PC
  %7623 = add i64 %7622, 3
  store i64 %7623, i64* %PC
  %7624 = trunc i64 %7621 to i32
  %7625 = add i32 1, %7624
  %7626 = zext i32 %7625 to i64
  store i64 %7626, i64* %RCX, align 8, !tbaa !2428
  %7627 = icmp ult i32 %7625, %7624
  %7628 = icmp ult i32 %7625, 1
  %7629 = or i1 %7627, %7628
  %7630 = zext i1 %7629 to i8
  %7631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7630, i8* %7631, align 1, !tbaa !2432
  %7632 = and i32 %7625, 255
  %7633 = call i32 @llvm.ctpop.i32(i32 %7632) #17
  %7634 = trunc i32 %7633 to i8
  %7635 = and i8 %7634, 1
  %7636 = xor i8 %7635, 1
  %7637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7636, i8* %7637, align 1, !tbaa !2446
  %7638 = xor i64 1, %7621
  %7639 = trunc i64 %7638 to i32
  %7640 = xor i32 %7639, %7625
  %7641 = lshr i32 %7640, 4
  %7642 = trunc i32 %7641 to i8
  %7643 = and i8 %7642, 1
  %7644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7643, i8* %7644, align 1, !tbaa !2447
  %7645 = icmp eq i32 %7625, 0
  %7646 = zext i1 %7645 to i8
  %7647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7646, i8* %7647, align 1, !tbaa !2448
  %7648 = lshr i32 %7625, 31
  %7649 = trunc i32 %7648 to i8
  %7650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7649, i8* %7650, align 1, !tbaa !2449
  %7651 = lshr i32 %7624, 31
  %7652 = xor i32 %7648, %7651
  %7653 = add nuw nsw i32 %7652, %7648
  %7654 = icmp eq i32 %7653, 2
  %7655 = zext i1 %7654 to i8
  %7656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7655, i8* %7656, align 1, !tbaa !2450
  %7657 = load i32, i32* %ECX
  %7658 = zext i32 %7657 to i64
  %7659 = load i64, i64* %PC
  %7660 = add i64 %7659, 3
  store i64 %7660, i64* %PC
  %7661 = shl i64 %7658, 32
  %7662 = ashr exact i64 %7661, 32
  store i64 %7662, i64* %RSI, align 8, !tbaa !2428
  %7663 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7664 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7665 = load i64, i64* %RDX
  %7666 = load i64, i64* %RSI
  %7667 = mul i64 %7666, 8
  %7668 = add i64 %7667, %7665
  %7669 = load i64, i64* %PC
  %7670 = add i64 %7669, 5
  store i64 %7670, i64* %PC
  %7671 = bitcast i8* %7664 to double*
  %7672 = load double, double* %7671, align 1
  %7673 = getelementptr inbounds i8, i8* %7664, i64 8
  %7674 = bitcast i8* %7673 to i64*
  %7675 = load i64, i64* %7674, align 1
  %7676 = inttoptr i64 %7668 to double*
  %7677 = load double, double* %7676
  %7678 = fadd double %7672, %7677
  %7679 = bitcast i8* %7663 to double*
  store double %7678, double* %7679, align 1, !tbaa !2452
  %7680 = getelementptr inbounds i8, i8* %7663, i64 8
  %7681 = bitcast i8* %7680 to i64*
  store i64 %7675, i64* %7681, align 1, !tbaa !2452
  %7682 = load i64, i64* %RBP
  %7683 = sub i64 %7682, 128
  %7684 = bitcast %union.vec128_t* %XMM0 to i8*
  %7685 = load i64, i64* %PC
  %7686 = add i64 %7685, 5
  store i64 %7686, i64* %PC
  %7687 = bitcast i8* %7684 to double*
  %7688 = load double, double* %7687, align 1
  %7689 = inttoptr i64 %7683 to double*
  store double %7688, double* %7689
  %7690 = load i64, i64* %RBP
  %7691 = sub i64 %7690, 16
  %7692 = load i64, i64* %PC
  %7693 = add i64 %7692, 4
  store i64 %7693, i64* %PC
  %7694 = inttoptr i64 %7691 to i64*
  %7695 = load i64, i64* %7694
  store i64 %7695, i64* %RDX, align 8, !tbaa !2428
  %7696 = load i64, i64* %RBP
  %7697 = sub i64 %7696, 28
  %7698 = load i64, i64* %PC
  %7699 = add i64 %7698, 4
  store i64 %7699, i64* %PC
  %7700 = inttoptr i64 %7697 to i32*
  %7701 = load i32, i32* %7700
  %7702 = sext i32 %7701 to i64
  store i64 %7702, i64* %RSI, align 8, !tbaa !2428
  %7703 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7704 = load i64, i64* %RDX
  %7705 = load i64, i64* %RSI
  %7706 = mul i64 %7705, 8
  %7707 = add i64 %7706, %7704
  %7708 = load i64, i64* %PC
  %7709 = add i64 %7708, 5
  store i64 %7709, i64* %PC
  %7710 = inttoptr i64 %7707 to double*
  %7711 = load double, double* %7710
  %7712 = bitcast i8* %7703 to double*
  store double %7711, double* %7712, align 1, !tbaa !2452
  %7713 = getelementptr inbounds i8, i8* %7703, i64 8
  %7714 = bitcast i8* %7713 to double*
  store double 0.000000e+00, double* %7714, align 1, !tbaa !2452
  %7715 = load i64, i64* %RBP
  %7716 = sub i64 %7715, 16
  %7717 = load i64, i64* %PC
  %7718 = add i64 %7717, 4
  store i64 %7718, i64* %PC
  %7719 = inttoptr i64 %7716 to i64*
  %7720 = load i64, i64* %7719
  store i64 %7720, i64* %RDX, align 8, !tbaa !2428
  %7721 = load i64, i64* %RBP
  %7722 = sub i64 %7721, 32
  %7723 = load i64, i64* %PC
  %7724 = add i64 %7723, 4
  store i64 %7724, i64* %PC
  %7725 = inttoptr i64 %7722 to i32*
  %7726 = load i32, i32* %7725
  %7727 = sext i32 %7726 to i64
  store i64 %7727, i64* %RSI, align 8, !tbaa !2428
  %7728 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7729 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7730 = load i64, i64* %RDX
  %7731 = load i64, i64* %RSI
  %7732 = mul i64 %7731, 8
  %7733 = add i64 %7732, %7730
  %7734 = load i64, i64* %PC
  %7735 = add i64 %7734, 5
  store i64 %7735, i64* %PC
  %7736 = bitcast i8* %7729 to double*
  %7737 = load double, double* %7736, align 1
  %7738 = getelementptr inbounds i8, i8* %7729, i64 8
  %7739 = bitcast i8* %7738 to i64*
  %7740 = load i64, i64* %7739, align 1
  %7741 = inttoptr i64 %7733 to double*
  %7742 = load double, double* %7741
  %7743 = fsub double %7737, %7742
  %7744 = bitcast i8* %7728 to double*
  store double %7743, double* %7744, align 1, !tbaa !2452
  %7745 = getelementptr inbounds i8, i8* %7728, i64 8
  %7746 = bitcast i8* %7745 to i64*
  store i64 %7740, i64* %7746, align 1, !tbaa !2452
  %7747 = load i64, i64* %RBP
  %7748 = sub i64 %7747, 136
  %7749 = bitcast %union.vec128_t* %XMM0 to i8*
  %7750 = load i64, i64* %PC
  %7751 = add i64 %7750, 8
  store i64 %7751, i64* %PC
  %7752 = bitcast i8* %7749 to double*
  %7753 = load double, double* %7752, align 1
  %7754 = inttoptr i64 %7748 to double*
  store double %7753, double* %7754
  %7755 = load i64, i64* %RBP
  %7756 = sub i64 %7755, 16
  %7757 = load i64, i64* %PC
  %7758 = add i64 %7757, 4
  store i64 %7758, i64* %PC
  %7759 = inttoptr i64 %7756 to i64*
  %7760 = load i64, i64* %7759
  store i64 %7760, i64* %RDX, align 8, !tbaa !2428
  %7761 = load i64, i64* %RBP
  %7762 = sub i64 %7761, 28
  %7763 = load i64, i64* %PC
  %7764 = add i64 %7763, 3
  store i64 %7764, i64* %PC
  %7765 = inttoptr i64 %7762 to i32*
  %7766 = load i32, i32* %7765
  %7767 = zext i32 %7766 to i64
  store i64 %7767, i64* %RCX, align 8, !tbaa !2428
  %7768 = load i64, i64* %RCX
  %7769 = load i64, i64* %PC
  %7770 = add i64 %7769, 3
  store i64 %7770, i64* %PC
  %7771 = trunc i64 %7768 to i32
  %7772 = add i32 1, %7771
  %7773 = zext i32 %7772 to i64
  store i64 %7773, i64* %RCX, align 8, !tbaa !2428
  %7774 = icmp ult i32 %7772, %7771
  %7775 = icmp ult i32 %7772, 1
  %7776 = or i1 %7774, %7775
  %7777 = zext i1 %7776 to i8
  %7778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7777, i8* %7778, align 1, !tbaa !2432
  %7779 = and i32 %7772, 255
  %7780 = call i32 @llvm.ctpop.i32(i32 %7779) #17
  %7781 = trunc i32 %7780 to i8
  %7782 = and i8 %7781, 1
  %7783 = xor i8 %7782, 1
  %7784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7783, i8* %7784, align 1, !tbaa !2446
  %7785 = xor i64 1, %7768
  %7786 = trunc i64 %7785 to i32
  %7787 = xor i32 %7786, %7772
  %7788 = lshr i32 %7787, 4
  %7789 = trunc i32 %7788 to i8
  %7790 = and i8 %7789, 1
  %7791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7790, i8* %7791, align 1, !tbaa !2447
  %7792 = icmp eq i32 %7772, 0
  %7793 = zext i1 %7792 to i8
  %7794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7793, i8* %7794, align 1, !tbaa !2448
  %7795 = lshr i32 %7772, 31
  %7796 = trunc i32 %7795 to i8
  %7797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7796, i8* %7797, align 1, !tbaa !2449
  %7798 = lshr i32 %7771, 31
  %7799 = xor i32 %7795, %7798
  %7800 = add nuw nsw i32 %7799, %7795
  %7801 = icmp eq i32 %7800, 2
  %7802 = zext i1 %7801 to i8
  %7803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7802, i8* %7803, align 1, !tbaa !2450
  %7804 = load i32, i32* %ECX
  %7805 = zext i32 %7804 to i64
  %7806 = load i64, i64* %PC
  %7807 = add i64 %7806, 3
  store i64 %7807, i64* %PC
  %7808 = shl i64 %7805, 32
  %7809 = ashr exact i64 %7808, 32
  store i64 %7809, i64* %RSI, align 8, !tbaa !2428
  %7810 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7811 = load i64, i64* %RDX
  %7812 = load i64, i64* %RSI
  %7813 = mul i64 %7812, 8
  %7814 = add i64 %7813, %7811
  %7815 = load i64, i64* %PC
  %7816 = add i64 %7815, 5
  store i64 %7816, i64* %PC
  %7817 = inttoptr i64 %7814 to double*
  %7818 = load double, double* %7817
  %7819 = bitcast i8* %7810 to double*
  store double %7818, double* %7819, align 1, !tbaa !2452
  %7820 = getelementptr inbounds i8, i8* %7810, i64 8
  %7821 = bitcast i8* %7820 to double*
  store double 0.000000e+00, double* %7821, align 1, !tbaa !2452
  %7822 = load i64, i64* %RBP
  %7823 = sub i64 %7822, 16
  %7824 = load i64, i64* %PC
  %7825 = add i64 %7824, 4
  store i64 %7825, i64* %PC
  %7826 = inttoptr i64 %7823 to i64*
  %7827 = load i64, i64* %7826
  store i64 %7827, i64* %RDX, align 8, !tbaa !2428
  %7828 = load i64, i64* %RBP
  %7829 = sub i64 %7828, 32
  %7830 = load i64, i64* %PC
  %7831 = add i64 %7830, 3
  store i64 %7831, i64* %PC
  %7832 = inttoptr i64 %7829 to i32*
  %7833 = load i32, i32* %7832
  %7834 = zext i32 %7833 to i64
  store i64 %7834, i64* %RCX, align 8, !tbaa !2428
  %7835 = load i64, i64* %RCX
  %7836 = load i64, i64* %PC
  %7837 = add i64 %7836, 3
  store i64 %7837, i64* %PC
  %7838 = trunc i64 %7835 to i32
  %7839 = add i32 1, %7838
  %7840 = zext i32 %7839 to i64
  store i64 %7840, i64* %RCX, align 8, !tbaa !2428
  %7841 = icmp ult i32 %7839, %7838
  %7842 = icmp ult i32 %7839, 1
  %7843 = or i1 %7841, %7842
  %7844 = zext i1 %7843 to i8
  %7845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7844, i8* %7845, align 1, !tbaa !2432
  %7846 = and i32 %7839, 255
  %7847 = call i32 @llvm.ctpop.i32(i32 %7846) #17
  %7848 = trunc i32 %7847 to i8
  %7849 = and i8 %7848, 1
  %7850 = xor i8 %7849, 1
  %7851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7850, i8* %7851, align 1, !tbaa !2446
  %7852 = xor i64 1, %7835
  %7853 = trunc i64 %7852 to i32
  %7854 = xor i32 %7853, %7839
  %7855 = lshr i32 %7854, 4
  %7856 = trunc i32 %7855 to i8
  %7857 = and i8 %7856, 1
  %7858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7857, i8* %7858, align 1, !tbaa !2447
  %7859 = icmp eq i32 %7839, 0
  %7860 = zext i1 %7859 to i8
  %7861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7860, i8* %7861, align 1, !tbaa !2448
  %7862 = lshr i32 %7839, 31
  %7863 = trunc i32 %7862 to i8
  %7864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7863, i8* %7864, align 1, !tbaa !2449
  %7865 = lshr i32 %7838, 31
  %7866 = xor i32 %7862, %7865
  %7867 = add nuw nsw i32 %7866, %7862
  %7868 = icmp eq i32 %7867, 2
  %7869 = zext i1 %7868 to i8
  %7870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7869, i8* %7870, align 1, !tbaa !2450
  %7871 = load i32, i32* %ECX
  %7872 = zext i32 %7871 to i64
  %7873 = load i64, i64* %PC
  %7874 = add i64 %7873, 3
  store i64 %7874, i64* %PC
  %7875 = shl i64 %7872, 32
  %7876 = ashr exact i64 %7875, 32
  store i64 %7876, i64* %RSI, align 8, !tbaa !2428
  %7877 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7878 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7879 = load i64, i64* %RDX
  %7880 = load i64, i64* %RSI
  %7881 = mul i64 %7880, 8
  %7882 = add i64 %7881, %7879
  %7883 = load i64, i64* %PC
  %7884 = add i64 %7883, 5
  store i64 %7884, i64* %PC
  %7885 = bitcast i8* %7878 to double*
  %7886 = load double, double* %7885, align 1
  %7887 = getelementptr inbounds i8, i8* %7878, i64 8
  %7888 = bitcast i8* %7887 to i64*
  %7889 = load i64, i64* %7888, align 1
  %7890 = inttoptr i64 %7882 to double*
  %7891 = load double, double* %7890
  %7892 = fsub double %7886, %7891
  %7893 = bitcast i8* %7877 to double*
  store double %7892, double* %7893, align 1, !tbaa !2452
  %7894 = getelementptr inbounds i8, i8* %7877, i64 8
  %7895 = bitcast i8* %7894 to i64*
  store i64 %7889, i64* %7895, align 1, !tbaa !2452
  %7896 = load i64, i64* %RBP
  %7897 = sub i64 %7896, 144
  %7898 = bitcast %union.vec128_t* %XMM0 to i8*
  %7899 = load i64, i64* %PC
  %7900 = add i64 %7899, 8
  store i64 %7900, i64* %PC
  %7901 = bitcast i8* %7898 to double*
  %7902 = load double, double* %7901, align 1
  %7903 = inttoptr i64 %7897 to double*
  store double %7902, double* %7903
  %7904 = load i64, i64* %RBP
  %7905 = sub i64 %7904, 16
  %7906 = load i64, i64* %PC
  %7907 = add i64 %7906, 4
  store i64 %7907, i64* %PC
  %7908 = inttoptr i64 %7905 to i64*
  %7909 = load i64, i64* %7908
  store i64 %7909, i64* %RDX, align 8, !tbaa !2428
  %7910 = load i64, i64* %RBP
  %7911 = sub i64 %7910, 36
  %7912 = load i64, i64* %PC
  %7913 = add i64 %7912, 4
  store i64 %7913, i64* %PC
  %7914 = inttoptr i64 %7911 to i32*
  %7915 = load i32, i32* %7914
  %7916 = sext i32 %7915 to i64
  store i64 %7916, i64* %RSI, align 8, !tbaa !2428
  %7917 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7918 = load i64, i64* %RDX
  %7919 = load i64, i64* %RSI
  %7920 = mul i64 %7919, 8
  %7921 = add i64 %7920, %7918
  %7922 = load i64, i64* %PC
  %7923 = add i64 %7922, 5
  store i64 %7923, i64* %PC
  %7924 = inttoptr i64 %7921 to double*
  %7925 = load double, double* %7924
  %7926 = bitcast i8* %7917 to double*
  store double %7925, double* %7926, align 1, !tbaa !2452
  %7927 = getelementptr inbounds i8, i8* %7917, i64 8
  %7928 = bitcast i8* %7927 to double*
  store double 0.000000e+00, double* %7928, align 1, !tbaa !2452
  %7929 = load i64, i64* %RBP
  %7930 = sub i64 %7929, 16
  %7931 = load i64, i64* %PC
  %7932 = add i64 %7931, 4
  store i64 %7932, i64* %PC
  %7933 = inttoptr i64 %7930 to i64*
  %7934 = load i64, i64* %7933
  store i64 %7934, i64* %RDX, align 8, !tbaa !2428
  %7935 = load i64, i64* %RBP
  %7936 = sub i64 %7935, 40
  %7937 = load i64, i64* %PC
  %7938 = add i64 %7937, 4
  store i64 %7938, i64* %PC
  %7939 = inttoptr i64 %7936 to i32*
  %7940 = load i32, i32* %7939
  %7941 = sext i32 %7940 to i64
  store i64 %7941, i64* %RSI, align 8, !tbaa !2428
  %7942 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7943 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7944 = load i64, i64* %RDX
  %7945 = load i64, i64* %RSI
  %7946 = mul i64 %7945, 8
  %7947 = add i64 %7946, %7944
  %7948 = load i64, i64* %PC
  %7949 = add i64 %7948, 5
  store i64 %7949, i64* %PC
  %7950 = bitcast i8* %7943 to double*
  %7951 = load double, double* %7950, align 1
  %7952 = getelementptr inbounds i8, i8* %7943, i64 8
  %7953 = bitcast i8* %7952 to i64*
  %7954 = load i64, i64* %7953, align 1
  %7955 = inttoptr i64 %7947 to double*
  %7956 = load double, double* %7955
  %7957 = fadd double %7951, %7956
  %7958 = bitcast i8* %7942 to double*
  store double %7957, double* %7958, align 1, !tbaa !2452
  %7959 = getelementptr inbounds i8, i8* %7942, i64 8
  %7960 = bitcast i8* %7959 to i64*
  store i64 %7954, i64* %7960, align 1, !tbaa !2452
  %7961 = load i64, i64* %RBP
  %7962 = sub i64 %7961, 152
  %7963 = bitcast %union.vec128_t* %XMM0 to i8*
  %7964 = load i64, i64* %PC
  %7965 = add i64 %7964, 8
  store i64 %7965, i64* %PC
  %7966 = bitcast i8* %7963 to double*
  %7967 = load double, double* %7966, align 1
  %7968 = inttoptr i64 %7962 to double*
  store double %7967, double* %7968
  %7969 = load i64, i64* %RBP
  %7970 = sub i64 %7969, 16
  %7971 = load i64, i64* %PC
  %7972 = add i64 %7971, 4
  store i64 %7972, i64* %PC
  %7973 = inttoptr i64 %7970 to i64*
  %7974 = load i64, i64* %7973
  store i64 %7974, i64* %RDX, align 8, !tbaa !2428
  %7975 = load i64, i64* %RBP
  %7976 = sub i64 %7975, 36
  %7977 = load i64, i64* %PC
  %7978 = add i64 %7977, 3
  store i64 %7978, i64* %PC
  %7979 = inttoptr i64 %7976 to i32*
  %7980 = load i32, i32* %7979
  %7981 = zext i32 %7980 to i64
  store i64 %7981, i64* %RCX, align 8, !tbaa !2428
  %7982 = load i64, i64* %RCX
  %7983 = load i64, i64* %PC
  %7984 = add i64 %7983, 3
  store i64 %7984, i64* %PC
  %7985 = trunc i64 %7982 to i32
  %7986 = add i32 1, %7985
  %7987 = zext i32 %7986 to i64
  store i64 %7987, i64* %RCX, align 8, !tbaa !2428
  %7988 = icmp ult i32 %7986, %7985
  %7989 = icmp ult i32 %7986, 1
  %7990 = or i1 %7988, %7989
  %7991 = zext i1 %7990 to i8
  %7992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7991, i8* %7992, align 1, !tbaa !2432
  %7993 = and i32 %7986, 255
  %7994 = call i32 @llvm.ctpop.i32(i32 %7993) #17
  %7995 = trunc i32 %7994 to i8
  %7996 = and i8 %7995, 1
  %7997 = xor i8 %7996, 1
  %7998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7997, i8* %7998, align 1, !tbaa !2446
  %7999 = xor i64 1, %7982
  %8000 = trunc i64 %7999 to i32
  %8001 = xor i32 %8000, %7986
  %8002 = lshr i32 %8001, 4
  %8003 = trunc i32 %8002 to i8
  %8004 = and i8 %8003, 1
  %8005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8004, i8* %8005, align 1, !tbaa !2447
  %8006 = icmp eq i32 %7986, 0
  %8007 = zext i1 %8006 to i8
  %8008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8007, i8* %8008, align 1, !tbaa !2448
  %8009 = lshr i32 %7986, 31
  %8010 = trunc i32 %8009 to i8
  %8011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8010, i8* %8011, align 1, !tbaa !2449
  %8012 = lshr i32 %7985, 31
  %8013 = xor i32 %8009, %8012
  %8014 = add nuw nsw i32 %8013, %8009
  %8015 = icmp eq i32 %8014, 2
  %8016 = zext i1 %8015 to i8
  %8017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8016, i8* %8017, align 1, !tbaa !2450
  %8018 = load i32, i32* %ECX
  %8019 = zext i32 %8018 to i64
  %8020 = load i64, i64* %PC
  %8021 = add i64 %8020, 3
  store i64 %8021, i64* %PC
  %8022 = shl i64 %8019, 32
  %8023 = ashr exact i64 %8022, 32
  store i64 %8023, i64* %RSI, align 8, !tbaa !2428
  %8024 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8025 = load i64, i64* %RDX
  %8026 = load i64, i64* %RSI
  %8027 = mul i64 %8026, 8
  %8028 = add i64 %8027, %8025
  %8029 = load i64, i64* %PC
  %8030 = add i64 %8029, 5
  store i64 %8030, i64* %PC
  %8031 = inttoptr i64 %8028 to double*
  %8032 = load double, double* %8031
  %8033 = bitcast i8* %8024 to double*
  store double %8032, double* %8033, align 1, !tbaa !2452
  %8034 = getelementptr inbounds i8, i8* %8024, i64 8
  %8035 = bitcast i8* %8034 to double*
  store double 0.000000e+00, double* %8035, align 1, !tbaa !2452
  %8036 = load i64, i64* %RBP
  %8037 = sub i64 %8036, 16
  %8038 = load i64, i64* %PC
  %8039 = add i64 %8038, 4
  store i64 %8039, i64* %PC
  %8040 = inttoptr i64 %8037 to i64*
  %8041 = load i64, i64* %8040
  store i64 %8041, i64* %RDX, align 8, !tbaa !2428
  %8042 = load i64, i64* %RBP
  %8043 = sub i64 %8042, 40
  %8044 = load i64, i64* %PC
  %8045 = add i64 %8044, 3
  store i64 %8045, i64* %PC
  %8046 = inttoptr i64 %8043 to i32*
  %8047 = load i32, i32* %8046
  %8048 = zext i32 %8047 to i64
  store i64 %8048, i64* %RCX, align 8, !tbaa !2428
  %8049 = load i64, i64* %RCX
  %8050 = load i64, i64* %PC
  %8051 = add i64 %8050, 3
  store i64 %8051, i64* %PC
  %8052 = trunc i64 %8049 to i32
  %8053 = add i32 1, %8052
  %8054 = zext i32 %8053 to i64
  store i64 %8054, i64* %RCX, align 8, !tbaa !2428
  %8055 = icmp ult i32 %8053, %8052
  %8056 = icmp ult i32 %8053, 1
  %8057 = or i1 %8055, %8056
  %8058 = zext i1 %8057 to i8
  %8059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8058, i8* %8059, align 1, !tbaa !2432
  %8060 = and i32 %8053, 255
  %8061 = call i32 @llvm.ctpop.i32(i32 %8060) #17
  %8062 = trunc i32 %8061 to i8
  %8063 = and i8 %8062, 1
  %8064 = xor i8 %8063, 1
  %8065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8064, i8* %8065, align 1, !tbaa !2446
  %8066 = xor i64 1, %8049
  %8067 = trunc i64 %8066 to i32
  %8068 = xor i32 %8067, %8053
  %8069 = lshr i32 %8068, 4
  %8070 = trunc i32 %8069 to i8
  %8071 = and i8 %8070, 1
  %8072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8071, i8* %8072, align 1, !tbaa !2447
  %8073 = icmp eq i32 %8053, 0
  %8074 = zext i1 %8073 to i8
  %8075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8074, i8* %8075, align 1, !tbaa !2448
  %8076 = lshr i32 %8053, 31
  %8077 = trunc i32 %8076 to i8
  %8078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8077, i8* %8078, align 1, !tbaa !2449
  %8079 = lshr i32 %8052, 31
  %8080 = xor i32 %8076, %8079
  %8081 = add nuw nsw i32 %8080, %8076
  %8082 = icmp eq i32 %8081, 2
  %8083 = zext i1 %8082 to i8
  %8084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8083, i8* %8084, align 1, !tbaa !2450
  %8085 = load i32, i32* %ECX
  %8086 = zext i32 %8085 to i64
  %8087 = load i64, i64* %PC
  %8088 = add i64 %8087, 3
  store i64 %8088, i64* %PC
  %8089 = shl i64 %8086, 32
  %8090 = ashr exact i64 %8089, 32
  store i64 %8090, i64* %RSI, align 8, !tbaa !2428
  %8091 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8092 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8093 = load i64, i64* %RDX
  %8094 = load i64, i64* %RSI
  %8095 = mul i64 %8094, 8
  %8096 = add i64 %8095, %8093
  %8097 = load i64, i64* %PC
  %8098 = add i64 %8097, 5
  store i64 %8098, i64* %PC
  %8099 = bitcast i8* %8092 to double*
  %8100 = load double, double* %8099, align 1
  %8101 = getelementptr inbounds i8, i8* %8092, i64 8
  %8102 = bitcast i8* %8101 to i64*
  %8103 = load i64, i64* %8102, align 1
  %8104 = inttoptr i64 %8096 to double*
  %8105 = load double, double* %8104
  %8106 = fadd double %8100, %8105
  %8107 = bitcast i8* %8091 to double*
  store double %8106, double* %8107, align 1, !tbaa !2452
  %8108 = getelementptr inbounds i8, i8* %8091, i64 8
  %8109 = bitcast i8* %8108 to i64*
  store i64 %8103, i64* %8109, align 1, !tbaa !2452
  %8110 = load i64, i64* %RBP
  %8111 = sub i64 %8110, 160
  %8112 = bitcast %union.vec128_t* %XMM0 to i8*
  %8113 = load i64, i64* %PC
  %8114 = add i64 %8113, 8
  store i64 %8114, i64* %PC
  %8115 = bitcast i8* %8112 to double*
  %8116 = load double, double* %8115, align 1
  %8117 = inttoptr i64 %8111 to double*
  store double %8116, double* %8117
  %8118 = load i64, i64* %RBP
  %8119 = sub i64 %8118, 16
  %8120 = load i64, i64* %PC
  %8121 = add i64 %8120, 4
  store i64 %8121, i64* %PC
  %8122 = inttoptr i64 %8119 to i64*
  %8123 = load i64, i64* %8122
  store i64 %8123, i64* %RDX, align 8, !tbaa !2428
  %8124 = load i64, i64* %RBP
  %8125 = sub i64 %8124, 36
  %8126 = load i64, i64* %PC
  %8127 = add i64 %8126, 4
  store i64 %8127, i64* %PC
  %8128 = inttoptr i64 %8125 to i32*
  %8129 = load i32, i32* %8128
  %8130 = sext i32 %8129 to i64
  store i64 %8130, i64* %RSI, align 8, !tbaa !2428
  %8131 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8132 = load i64, i64* %RDX
  %8133 = load i64, i64* %RSI
  %8134 = mul i64 %8133, 8
  %8135 = add i64 %8134, %8132
  %8136 = load i64, i64* %PC
  %8137 = add i64 %8136, 5
  store i64 %8137, i64* %PC
  %8138 = inttoptr i64 %8135 to double*
  %8139 = load double, double* %8138
  %8140 = bitcast i8* %8131 to double*
  store double %8139, double* %8140, align 1, !tbaa !2452
  %8141 = getelementptr inbounds i8, i8* %8131, i64 8
  %8142 = bitcast i8* %8141 to double*
  store double 0.000000e+00, double* %8142, align 1, !tbaa !2452
  %8143 = load i64, i64* %RBP
  %8144 = sub i64 %8143, 16
  %8145 = load i64, i64* %PC
  %8146 = add i64 %8145, 4
  store i64 %8146, i64* %PC
  %8147 = inttoptr i64 %8144 to i64*
  %8148 = load i64, i64* %8147
  store i64 %8148, i64* %RDX, align 8, !tbaa !2428
  %8149 = load i64, i64* %RBP
  %8150 = sub i64 %8149, 40
  %8151 = load i64, i64* %PC
  %8152 = add i64 %8151, 4
  store i64 %8152, i64* %PC
  %8153 = inttoptr i64 %8150 to i32*
  %8154 = load i32, i32* %8153
  %8155 = sext i32 %8154 to i64
  store i64 %8155, i64* %RSI, align 8, !tbaa !2428
  %8156 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8157 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8158 = load i64, i64* %RDX
  %8159 = load i64, i64* %RSI
  %8160 = mul i64 %8159, 8
  %8161 = add i64 %8160, %8158
  %8162 = load i64, i64* %PC
  %8163 = add i64 %8162, 5
  store i64 %8163, i64* %PC
  %8164 = bitcast i8* %8157 to double*
  %8165 = load double, double* %8164, align 1
  %8166 = getelementptr inbounds i8, i8* %8157, i64 8
  %8167 = bitcast i8* %8166 to i64*
  %8168 = load i64, i64* %8167, align 1
  %8169 = inttoptr i64 %8161 to double*
  %8170 = load double, double* %8169
  %8171 = fsub double %8165, %8170
  %8172 = bitcast i8* %8156 to double*
  store double %8171, double* %8172, align 1, !tbaa !2452
  %8173 = getelementptr inbounds i8, i8* %8156, i64 8
  %8174 = bitcast i8* %8173 to i64*
  store i64 %8168, i64* %8174, align 1, !tbaa !2452
  %8175 = load i64, i64* %RBP
  %8176 = sub i64 %8175, 168
  %8177 = bitcast %union.vec128_t* %XMM0 to i8*
  %8178 = load i64, i64* %PC
  %8179 = add i64 %8178, 8
  store i64 %8179, i64* %PC
  %8180 = bitcast i8* %8177 to double*
  %8181 = load double, double* %8180, align 1
  %8182 = inttoptr i64 %8176 to double*
  store double %8181, double* %8182
  %8183 = load i64, i64* %RBP
  %8184 = sub i64 %8183, 16
  %8185 = load i64, i64* %PC
  %8186 = add i64 %8185, 4
  store i64 %8186, i64* %PC
  %8187 = inttoptr i64 %8184 to i64*
  %8188 = load i64, i64* %8187
  store i64 %8188, i64* %RDX, align 8, !tbaa !2428
  %8189 = load i64, i64* %RBP
  %8190 = sub i64 %8189, 36
  %8191 = load i64, i64* %PC
  %8192 = add i64 %8191, 3
  store i64 %8192, i64* %PC
  %8193 = inttoptr i64 %8190 to i32*
  %8194 = load i32, i32* %8193
  %8195 = zext i32 %8194 to i64
  store i64 %8195, i64* %RCX, align 8, !tbaa !2428
  %8196 = load i64, i64* %RCX
  %8197 = load i64, i64* %PC
  %8198 = add i64 %8197, 3
  store i64 %8198, i64* %PC
  %8199 = trunc i64 %8196 to i32
  %8200 = add i32 1, %8199
  %8201 = zext i32 %8200 to i64
  store i64 %8201, i64* %RCX, align 8, !tbaa !2428
  %8202 = icmp ult i32 %8200, %8199
  %8203 = icmp ult i32 %8200, 1
  %8204 = or i1 %8202, %8203
  %8205 = zext i1 %8204 to i8
  %8206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8205, i8* %8206, align 1, !tbaa !2432
  %8207 = and i32 %8200, 255
  %8208 = call i32 @llvm.ctpop.i32(i32 %8207) #17
  %8209 = trunc i32 %8208 to i8
  %8210 = and i8 %8209, 1
  %8211 = xor i8 %8210, 1
  %8212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8211, i8* %8212, align 1, !tbaa !2446
  %8213 = xor i64 1, %8196
  %8214 = trunc i64 %8213 to i32
  %8215 = xor i32 %8214, %8200
  %8216 = lshr i32 %8215, 4
  %8217 = trunc i32 %8216 to i8
  %8218 = and i8 %8217, 1
  %8219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8218, i8* %8219, align 1, !tbaa !2447
  %8220 = icmp eq i32 %8200, 0
  %8221 = zext i1 %8220 to i8
  %8222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8221, i8* %8222, align 1, !tbaa !2448
  %8223 = lshr i32 %8200, 31
  %8224 = trunc i32 %8223 to i8
  %8225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8224, i8* %8225, align 1, !tbaa !2449
  %8226 = lshr i32 %8199, 31
  %8227 = xor i32 %8223, %8226
  %8228 = add nuw nsw i32 %8227, %8223
  %8229 = icmp eq i32 %8228, 2
  %8230 = zext i1 %8229 to i8
  %8231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8230, i8* %8231, align 1, !tbaa !2450
  %8232 = load i32, i32* %ECX
  %8233 = zext i32 %8232 to i64
  %8234 = load i64, i64* %PC
  %8235 = add i64 %8234, 3
  store i64 %8235, i64* %PC
  %8236 = shl i64 %8233, 32
  %8237 = ashr exact i64 %8236, 32
  store i64 %8237, i64* %RSI, align 8, !tbaa !2428
  %8238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8239 = load i64, i64* %RDX
  %8240 = load i64, i64* %RSI
  %8241 = mul i64 %8240, 8
  %8242 = add i64 %8241, %8239
  %8243 = load i64, i64* %PC
  %8244 = add i64 %8243, 5
  store i64 %8244, i64* %PC
  %8245 = inttoptr i64 %8242 to double*
  %8246 = load double, double* %8245
  %8247 = bitcast i8* %8238 to double*
  store double %8246, double* %8247, align 1, !tbaa !2452
  %8248 = getelementptr inbounds i8, i8* %8238, i64 8
  %8249 = bitcast i8* %8248 to double*
  store double 0.000000e+00, double* %8249, align 1, !tbaa !2452
  %8250 = load i64, i64* %RBP
  %8251 = sub i64 %8250, 16
  %8252 = load i64, i64* %PC
  %8253 = add i64 %8252, 4
  store i64 %8253, i64* %PC
  %8254 = inttoptr i64 %8251 to i64*
  %8255 = load i64, i64* %8254
  store i64 %8255, i64* %RDX, align 8, !tbaa !2428
  %8256 = load i64, i64* %RBP
  %8257 = sub i64 %8256, 40
  %8258 = load i64, i64* %PC
  %8259 = add i64 %8258, 3
  store i64 %8259, i64* %PC
  %8260 = inttoptr i64 %8257 to i32*
  %8261 = load i32, i32* %8260
  %8262 = zext i32 %8261 to i64
  store i64 %8262, i64* %RCX, align 8, !tbaa !2428
  %8263 = load i64, i64* %RCX
  %8264 = load i64, i64* %PC
  %8265 = add i64 %8264, 3
  store i64 %8265, i64* %PC
  %8266 = trunc i64 %8263 to i32
  %8267 = add i32 1, %8266
  %8268 = zext i32 %8267 to i64
  store i64 %8268, i64* %RCX, align 8, !tbaa !2428
  %8269 = icmp ult i32 %8267, %8266
  %8270 = icmp ult i32 %8267, 1
  %8271 = or i1 %8269, %8270
  %8272 = zext i1 %8271 to i8
  %8273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8272, i8* %8273, align 1, !tbaa !2432
  %8274 = and i32 %8267, 255
  %8275 = call i32 @llvm.ctpop.i32(i32 %8274) #17
  %8276 = trunc i32 %8275 to i8
  %8277 = and i8 %8276, 1
  %8278 = xor i8 %8277, 1
  %8279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8278, i8* %8279, align 1, !tbaa !2446
  %8280 = xor i64 1, %8263
  %8281 = trunc i64 %8280 to i32
  %8282 = xor i32 %8281, %8267
  %8283 = lshr i32 %8282, 4
  %8284 = trunc i32 %8283 to i8
  %8285 = and i8 %8284, 1
  %8286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8285, i8* %8286, align 1, !tbaa !2447
  %8287 = icmp eq i32 %8267, 0
  %8288 = zext i1 %8287 to i8
  %8289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8288, i8* %8289, align 1, !tbaa !2448
  %8290 = lshr i32 %8267, 31
  %8291 = trunc i32 %8290 to i8
  %8292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8291, i8* %8292, align 1, !tbaa !2449
  %8293 = lshr i32 %8266, 31
  %8294 = xor i32 %8290, %8293
  %8295 = add nuw nsw i32 %8294, %8290
  %8296 = icmp eq i32 %8295, 2
  %8297 = zext i1 %8296 to i8
  %8298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8297, i8* %8298, align 1, !tbaa !2450
  %8299 = load i32, i32* %ECX
  %8300 = zext i32 %8299 to i64
  %8301 = load i64, i64* %PC
  %8302 = add i64 %8301, 3
  store i64 %8302, i64* %PC
  %8303 = shl i64 %8300, 32
  %8304 = ashr exact i64 %8303, 32
  store i64 %8304, i64* %RSI, align 8, !tbaa !2428
  %8305 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8306 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8307 = load i64, i64* %RDX
  %8308 = load i64, i64* %RSI
  %8309 = mul i64 %8308, 8
  %8310 = add i64 %8309, %8307
  %8311 = load i64, i64* %PC
  %8312 = add i64 %8311, 5
  store i64 %8312, i64* %PC
  %8313 = bitcast i8* %8306 to double*
  %8314 = load double, double* %8313, align 1
  %8315 = getelementptr inbounds i8, i8* %8306, i64 8
  %8316 = bitcast i8* %8315 to i64*
  %8317 = load i64, i64* %8316, align 1
  %8318 = inttoptr i64 %8310 to double*
  %8319 = load double, double* %8318
  %8320 = fsub double %8314, %8319
  %8321 = bitcast i8* %8305 to double*
  store double %8320, double* %8321, align 1, !tbaa !2452
  %8322 = getelementptr inbounds i8, i8* %8305, i64 8
  %8323 = bitcast i8* %8322 to i64*
  store i64 %8317, i64* %8323, align 1, !tbaa !2452
  %8324 = load i64, i64* %RBP
  %8325 = sub i64 %8324, 176
  %8326 = bitcast %union.vec128_t* %XMM0 to i8*
  %8327 = load i64, i64* %PC
  %8328 = add i64 %8327, 8
  store i64 %8328, i64* %PC
  %8329 = bitcast i8* %8326 to double*
  %8330 = load double, double* %8329, align 1
  %8331 = inttoptr i64 %8325 to double*
  store double %8330, double* %8331
  %8332 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8333 = load i64, i64* %RBP
  %8334 = sub i64 %8333, 120
  %8335 = load i64, i64* %PC
  %8336 = add i64 %8335, 5
  store i64 %8336, i64* %PC
  %8337 = inttoptr i64 %8334 to double*
  %8338 = load double, double* %8337
  %8339 = bitcast i8* %8332 to double*
  store double %8338, double* %8339, align 1, !tbaa !2452
  %8340 = getelementptr inbounds i8, i8* %8332, i64 8
  %8341 = bitcast i8* %8340 to double*
  store double 0.000000e+00, double* %8341, align 1, !tbaa !2452
  %8342 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8343 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8344 = load i64, i64* %RBP
  %8345 = sub i64 %8344, 152
  %8346 = load i64, i64* %PC
  %8347 = add i64 %8346, 8
  store i64 %8347, i64* %PC
  %8348 = bitcast i8* %8343 to double*
  %8349 = load double, double* %8348, align 1
  %8350 = getelementptr inbounds i8, i8* %8343, i64 8
  %8351 = bitcast i8* %8350 to i64*
  %8352 = load i64, i64* %8351, align 1
  %8353 = inttoptr i64 %8345 to double*
  %8354 = load double, double* %8353
  %8355 = fadd double %8349, %8354
  %8356 = bitcast i8* %8342 to double*
  store double %8355, double* %8356, align 1, !tbaa !2452
  %8357 = getelementptr inbounds i8, i8* %8342, i64 8
  %8358 = bitcast i8* %8357 to i64*
  store i64 %8352, i64* %8358, align 1, !tbaa !2452
  %8359 = load i64, i64* %RBP
  %8360 = sub i64 %8359, 16
  %8361 = load i64, i64* %PC
  %8362 = add i64 %8361, 4
  store i64 %8362, i64* %PC
  %8363 = inttoptr i64 %8360 to i64*
  %8364 = load i64, i64* %8363
  store i64 %8364, i64* %RDX, align 8, !tbaa !2428
  %8365 = load i64, i64* %RBP
  %8366 = sub i64 %8365, 28
  %8367 = load i64, i64* %PC
  %8368 = add i64 %8367, 4
  store i64 %8368, i64* %PC
  %8369 = inttoptr i64 %8366 to i32*
  %8370 = load i32, i32* %8369
  %8371 = sext i32 %8370 to i64
  store i64 %8371, i64* %RSI, align 8, !tbaa !2428
  %8372 = load i64, i64* %RDX
  %8373 = load i64, i64* %RSI
  %8374 = mul i64 %8373, 8
  %8375 = add i64 %8374, %8372
  %8376 = bitcast %union.vec128_t* %XMM0 to i8*
  %8377 = load i64, i64* %PC
  %8378 = add i64 %8377, 5
  store i64 %8378, i64* %PC
  %8379 = bitcast i8* %8376 to double*
  %8380 = load double, double* %8379, align 1
  %8381 = inttoptr i64 %8375 to double*
  store double %8380, double* %8381
  %8382 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8383 = load i64, i64* %RBP
  %8384 = sub i64 %8383, 128
  %8385 = load i64, i64* %PC
  %8386 = add i64 %8385, 5
  store i64 %8386, i64* %PC
  %8387 = inttoptr i64 %8384 to double*
  %8388 = load double, double* %8387
  %8389 = bitcast i8* %8382 to double*
  store double %8388, double* %8389, align 1, !tbaa !2452
  %8390 = getelementptr inbounds i8, i8* %8382, i64 8
  %8391 = bitcast i8* %8390 to double*
  store double 0.000000e+00, double* %8391, align 1, !tbaa !2452
  %8392 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8393 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8394 = load i64, i64* %RBP
  %8395 = sub i64 %8394, 160
  %8396 = load i64, i64* %PC
  %8397 = add i64 %8396, 8
  store i64 %8397, i64* %PC
  %8398 = bitcast i8* %8393 to double*
  %8399 = load double, double* %8398, align 1
  %8400 = getelementptr inbounds i8, i8* %8393, i64 8
  %8401 = bitcast i8* %8400 to i64*
  %8402 = load i64, i64* %8401, align 1
  %8403 = inttoptr i64 %8395 to double*
  %8404 = load double, double* %8403
  %8405 = fadd double %8399, %8404
  %8406 = bitcast i8* %8392 to double*
  store double %8405, double* %8406, align 1, !tbaa !2452
  %8407 = getelementptr inbounds i8, i8* %8392, i64 8
  %8408 = bitcast i8* %8407 to i64*
  store i64 %8402, i64* %8408, align 1, !tbaa !2452
  %8409 = load i64, i64* %RBP
  %8410 = sub i64 %8409, 16
  %8411 = load i64, i64* %PC
  %8412 = add i64 %8411, 4
  store i64 %8412, i64* %PC
  %8413 = inttoptr i64 %8410 to i64*
  %8414 = load i64, i64* %8413
  store i64 %8414, i64* %RDX, align 8, !tbaa !2428
  %8415 = load i64, i64* %RBP
  %8416 = sub i64 %8415, 28
  %8417 = load i64, i64* %PC
  %8418 = add i64 %8417, 3
  store i64 %8418, i64* %PC
  %8419 = inttoptr i64 %8416 to i32*
  %8420 = load i32, i32* %8419
  %8421 = zext i32 %8420 to i64
  store i64 %8421, i64* %RCX, align 8, !tbaa !2428
  %8422 = load i64, i64* %RCX
  %8423 = load i64, i64* %PC
  %8424 = add i64 %8423, 3
  store i64 %8424, i64* %PC
  %8425 = trunc i64 %8422 to i32
  %8426 = add i32 1, %8425
  %8427 = zext i32 %8426 to i64
  store i64 %8427, i64* %RCX, align 8, !tbaa !2428
  %8428 = icmp ult i32 %8426, %8425
  %8429 = icmp ult i32 %8426, 1
  %8430 = or i1 %8428, %8429
  %8431 = zext i1 %8430 to i8
  %8432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8431, i8* %8432, align 1, !tbaa !2432
  %8433 = and i32 %8426, 255
  %8434 = call i32 @llvm.ctpop.i32(i32 %8433) #17
  %8435 = trunc i32 %8434 to i8
  %8436 = and i8 %8435, 1
  %8437 = xor i8 %8436, 1
  %8438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8437, i8* %8438, align 1, !tbaa !2446
  %8439 = xor i64 1, %8422
  %8440 = trunc i64 %8439 to i32
  %8441 = xor i32 %8440, %8426
  %8442 = lshr i32 %8441, 4
  %8443 = trunc i32 %8442 to i8
  %8444 = and i8 %8443, 1
  %8445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8444, i8* %8445, align 1, !tbaa !2447
  %8446 = icmp eq i32 %8426, 0
  %8447 = zext i1 %8446 to i8
  %8448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8447, i8* %8448, align 1, !tbaa !2448
  %8449 = lshr i32 %8426, 31
  %8450 = trunc i32 %8449 to i8
  %8451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8450, i8* %8451, align 1, !tbaa !2449
  %8452 = lshr i32 %8425, 31
  %8453 = xor i32 %8449, %8452
  %8454 = add nuw nsw i32 %8453, %8449
  %8455 = icmp eq i32 %8454, 2
  %8456 = zext i1 %8455 to i8
  %8457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8456, i8* %8457, align 1, !tbaa !2450
  %8458 = load i32, i32* %ECX
  %8459 = zext i32 %8458 to i64
  %8460 = load i64, i64* %PC
  %8461 = add i64 %8460, 3
  store i64 %8461, i64* %PC
  %8462 = shl i64 %8459, 32
  %8463 = ashr exact i64 %8462, 32
  store i64 %8463, i64* %RSI, align 8, !tbaa !2428
  %8464 = load i64, i64* %RDX
  %8465 = load i64, i64* %RSI
  %8466 = mul i64 %8465, 8
  %8467 = add i64 %8466, %8464
  %8468 = bitcast %union.vec128_t* %XMM0 to i8*
  %8469 = load i64, i64* %PC
  %8470 = add i64 %8469, 5
  store i64 %8470, i64* %PC
  %8471 = bitcast i8* %8468 to double*
  %8472 = load double, double* %8471, align 1
  %8473 = inttoptr i64 %8467 to double*
  store double %8472, double* %8473
  %8474 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8475 = load i64, i64* %RBP
  %8476 = sub i64 %8475, 152
  %8477 = load i64, i64* %PC
  %8478 = add i64 %8477, 8
  store i64 %8478, i64* %PC
  %8479 = inttoptr i64 %8476 to double*
  %8480 = load double, double* %8479
  %8481 = bitcast i8* %8474 to double*
  store double %8480, double* %8481, align 1, !tbaa !2452
  %8482 = getelementptr inbounds i8, i8* %8474, i64 8
  %8483 = bitcast i8* %8482 to double*
  store double 0.000000e+00, double* %8483, align 1, !tbaa !2452
  %8484 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8485 = load i64, i64* %RBP
  %8486 = sub i64 %8485, 120
  %8487 = load i64, i64* %PC
  %8488 = add i64 %8487, 5
  store i64 %8488, i64* %PC
  %8489 = inttoptr i64 %8486 to double*
  %8490 = load double, double* %8489
  %8491 = bitcast i8* %8484 to double*
  store double %8490, double* %8491, align 1, !tbaa !2452
  %8492 = getelementptr inbounds i8, i8* %8484, i64 8
  %8493 = bitcast i8* %8492 to double*
  store double 0.000000e+00, double* %8493, align 1, !tbaa !2452
  %8494 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8495 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8496 = bitcast %union.vec128_t* %XMM0 to i8*
  %8497 = load i64, i64* %PC
  %8498 = add i64 %8497, 4
  store i64 %8498, i64* %PC
  %8499 = bitcast i8* %8495 to double*
  %8500 = load double, double* %8499, align 1
  %8501 = getelementptr inbounds i8, i8* %8495, i64 8
  %8502 = bitcast i8* %8501 to i64*
  %8503 = load i64, i64* %8502, align 1
  %8504 = bitcast i8* %8496 to double*
  %8505 = load double, double* %8504, align 1
  %8506 = fsub double %8500, %8505
  %8507 = bitcast i8* %8494 to double*
  store double %8506, double* %8507, align 1, !tbaa !2452
  %8508 = getelementptr inbounds i8, i8* %8494, i64 8
  %8509 = bitcast i8* %8508 to i64*
  store i64 %8503, i64* %8509, align 1, !tbaa !2452
  %8510 = load i64, i64* %RBP
  %8511 = sub i64 %8510, 120
  %8512 = bitcast %union.vec128_t* %XMM1 to i8*
  %8513 = load i64, i64* %PC
  %8514 = add i64 %8513, 5
  store i64 %8514, i64* %PC
  %8515 = bitcast i8* %8512 to double*
  %8516 = load double, double* %8515, align 1
  %8517 = inttoptr i64 %8511 to double*
  store double %8516, double* %8517
  %8518 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8519 = load i64, i64* %RBP
  %8520 = sub i64 %8519, 160
  %8521 = load i64, i64* %PC
  %8522 = add i64 %8521, 8
  store i64 %8522, i64* %PC
  %8523 = inttoptr i64 %8520 to double*
  %8524 = load double, double* %8523
  %8525 = bitcast i8* %8518 to double*
  store double %8524, double* %8525, align 1, !tbaa !2452
  %8526 = getelementptr inbounds i8, i8* %8518, i64 8
  %8527 = bitcast i8* %8526 to double*
  store double 0.000000e+00, double* %8527, align 1, !tbaa !2452
  %8528 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8529 = load i64, i64* %RBP
  %8530 = sub i64 %8529, 128
  %8531 = load i64, i64* %PC
  %8532 = add i64 %8531, 5
  store i64 %8532, i64* %PC
  %8533 = inttoptr i64 %8530 to double*
  %8534 = load double, double* %8533
  %8535 = bitcast i8* %8528 to double*
  store double %8534, double* %8535, align 1, !tbaa !2452
  %8536 = getelementptr inbounds i8, i8* %8528, i64 8
  %8537 = bitcast i8* %8536 to double*
  store double 0.000000e+00, double* %8537, align 1, !tbaa !2452
  %8538 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8539 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8540 = bitcast %union.vec128_t* %XMM0 to i8*
  %8541 = load i64, i64* %PC
  %8542 = add i64 %8541, 4
  store i64 %8542, i64* %PC
  %8543 = bitcast i8* %8539 to double*
  %8544 = load double, double* %8543, align 1
  %8545 = getelementptr inbounds i8, i8* %8539, i64 8
  %8546 = bitcast i8* %8545 to i64*
  %8547 = load i64, i64* %8546, align 1
  %8548 = bitcast i8* %8540 to double*
  %8549 = load double, double* %8548, align 1
  %8550 = fsub double %8544, %8549
  %8551 = bitcast i8* %8538 to double*
  store double %8550, double* %8551, align 1, !tbaa !2452
  %8552 = getelementptr inbounds i8, i8* %8538, i64 8
  %8553 = bitcast i8* %8552 to i64*
  store i64 %8547, i64* %8553, align 1, !tbaa !2452
  %8554 = load i64, i64* %RBP
  %8555 = sub i64 %8554, 128
  %8556 = bitcast %union.vec128_t* %XMM1 to i8*
  %8557 = load i64, i64* %PC
  %8558 = add i64 %8557, 5
  store i64 %8558, i64* %PC
  %8559 = bitcast i8* %8556 to double*
  %8560 = load double, double* %8559, align 1
  %8561 = inttoptr i64 %8555 to double*
  store double %8560, double* %8561
  %8562 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8563 = load i64, i64* %RBP
  %8564 = sub i64 %8563, 96
  %8565 = load i64, i64* %PC
  %8566 = add i64 %8565, 5
  store i64 %8566, i64* %PC
  %8567 = inttoptr i64 %8564 to double*
  %8568 = load double, double* %8567
  %8569 = bitcast i8* %8562 to double*
  store double %8568, double* %8569, align 1, !tbaa !2452
  %8570 = getelementptr inbounds i8, i8* %8562, i64 8
  %8571 = bitcast i8* %8570 to double*
  store double 0.000000e+00, double* %8571, align 1, !tbaa !2452
  %8572 = bitcast %union.vec128_t* %XMM0 to i8*
  %8573 = load i64, i64* %PC
  %8574 = add i64 %8573, 5
  store i64 %8574, i64* %PC
  %8575 = bitcast i8* %8572 to i64*
  %8576 = load i64, i64* %8575, align 1
  store i64 %8576, i64* %RDX, align 1, !tbaa !2428
  %8577 = load i64, i64* %RDX
  %8578 = load i64, i64* %RAX
  %8579 = load i64, i64* %PC
  %8580 = add i64 %8579, 3
  store i64 %8580, i64* %PC
  %8581 = xor i64 %8578, %8577
  store i64 %8581, i64* %RDX, align 8, !tbaa !2428
  %8582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8582, align 1, !tbaa !2432
  %8583 = trunc i64 %8581 to i32
  %8584 = and i32 %8583, 255
  %8585 = call i32 @llvm.ctpop.i32(i32 %8584) #17
  %8586 = trunc i32 %8585 to i8
  %8587 = and i8 %8586, 1
  %8588 = xor i8 %8587, 1
  %8589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8588, i8* %8589, align 1, !tbaa !2446
  %8590 = icmp eq i64 %8581, 0
  %8591 = zext i1 %8590 to i8
  %8592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8591, i8* %8592, align 1, !tbaa !2448
  %8593 = lshr i64 %8581, 63
  %8594 = trunc i64 %8593 to i8
  %8595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8594, i8* %8595, align 1, !tbaa !2449
  %8596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8596, align 1, !tbaa !2450
  %8597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8597, align 1, !tbaa !2447
  %8598 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8599 = load i64, i64* %RDX
  %8600 = load i64, i64* %PC
  %8601 = add i64 %8600, 5
  store i64 %8601, i64* %PC
  %8602 = bitcast i8* %8598 to i64*
  store i64 %8599, i64* %8602, align 1, !tbaa !2428
  %8603 = getelementptr inbounds i8, i8* %8598, i64 8
  %8604 = bitcast i8* %8603 to i64*
  store i64 0, i64* %8604, align 1, !tbaa !2428
  %8605 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8606 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8607 = load i64, i64* %RBP
  %8608 = sub i64 %8607, 120
  %8609 = load i64, i64* %PC
  %8610 = add i64 %8609, 5
  store i64 %8610, i64* %PC
  %8611 = bitcast i8* %8606 to double*
  %8612 = load double, double* %8611, align 1
  %8613 = getelementptr inbounds i8, i8* %8606, i64 8
  %8614 = bitcast i8* %8613 to i64*
  %8615 = load i64, i64* %8614, align 1
  %8616 = inttoptr i64 %8608 to double*
  %8617 = load double, double* %8616
  %8618 = fmul double %8612, %8617
  %8619 = bitcast i8* %8605 to double*
  store double %8618, double* %8619, align 1, !tbaa !2452
  %8620 = getelementptr inbounds i8, i8* %8605, i64 8
  %8621 = bitcast i8* %8620 to i64*
  store i64 %8615, i64* %8621, align 1, !tbaa !2452
  %8622 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8623 = load i64, i64* %RBP
  %8624 = sub i64 %8623, 88
  %8625 = load i64, i64* %PC
  %8626 = add i64 %8625, 5
  store i64 %8626, i64* %PC
  %8627 = inttoptr i64 %8624 to double*
  %8628 = load double, double* %8627
  %8629 = bitcast i8* %8622 to double*
  store double %8628, double* %8629, align 1, !tbaa !2452
  %8630 = getelementptr inbounds i8, i8* %8622, i64 8
  %8631 = bitcast i8* %8630 to double*
  store double 0.000000e+00, double* %8631, align 1, !tbaa !2452
  %8632 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8633 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8634 = load i64, i64* %RBP
  %8635 = sub i64 %8634, 128
  %8636 = load i64, i64* %PC
  %8637 = add i64 %8636, 5
  store i64 %8637, i64* %PC
  %8638 = bitcast i8* %8633 to double*
  %8639 = load double, double* %8638, align 1
  %8640 = getelementptr inbounds i8, i8* %8633, i64 8
  %8641 = bitcast i8* %8640 to i64*
  %8642 = load i64, i64* %8641, align 1
  %8643 = inttoptr i64 %8635 to double*
  %8644 = load double, double* %8643
  %8645 = fmul double %8639, %8644
  %8646 = bitcast i8* %8632 to double*
  store double %8645, double* %8646, align 1, !tbaa !2452
  %8647 = getelementptr inbounds i8, i8* %8632, i64 8
  %8648 = bitcast i8* %8647 to i64*
  store i64 %8642, i64* %8648, align 1, !tbaa !2452
  %8649 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8650 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8651 = bitcast %union.vec128_t* %XMM1 to i8*
  %8652 = load i64, i64* %PC
  %8653 = add i64 %8652, 4
  store i64 %8653, i64* %PC
  %8654 = bitcast i8* %8650 to double*
  %8655 = load double, double* %8654, align 1
  %8656 = getelementptr inbounds i8, i8* %8650, i64 8
  %8657 = bitcast i8* %8656 to i64*
  %8658 = load i64, i64* %8657, align 1
  %8659 = bitcast i8* %8651 to double*
  %8660 = load double, double* %8659, align 1
  %8661 = fsub double %8655, %8660
  %8662 = bitcast i8* %8649 to double*
  store double %8661, double* %8662, align 1, !tbaa !2452
  %8663 = getelementptr inbounds i8, i8* %8649, i64 8
  %8664 = bitcast i8* %8663 to i64*
  store i64 %8658, i64* %8664, align 1, !tbaa !2452
  %8665 = load i64, i64* %RBP
  %8666 = sub i64 %8665, 16
  %8667 = load i64, i64* %PC
  %8668 = add i64 %8667, 4
  store i64 %8668, i64* %PC
  %8669 = inttoptr i64 %8666 to i64*
  %8670 = load i64, i64* %8669
  store i64 %8670, i64* %RDX, align 8, !tbaa !2428
  %8671 = load i64, i64* %RBP
  %8672 = sub i64 %8671, 36
  %8673 = load i64, i64* %PC
  %8674 = add i64 %8673, 4
  store i64 %8674, i64* %PC
  %8675 = inttoptr i64 %8672 to i32*
  %8676 = load i32, i32* %8675
  %8677 = sext i32 %8676 to i64
  store i64 %8677, i64* %RSI, align 8, !tbaa !2428
  %8678 = load i64, i64* %RDX
  %8679 = load i64, i64* %RSI
  %8680 = mul i64 %8679, 8
  %8681 = add i64 %8680, %8678
  %8682 = bitcast %union.vec128_t* %XMM0 to i8*
  %8683 = load i64, i64* %PC
  %8684 = add i64 %8683, 5
  store i64 %8684, i64* %PC
  %8685 = bitcast i8* %8682 to double*
  %8686 = load double, double* %8685, align 1
  %8687 = inttoptr i64 %8681 to double*
  store double %8686, double* %8687
  %8688 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8689 = load i64, i64* %RBP
  %8690 = sub i64 %8689, 96
  %8691 = load i64, i64* %PC
  %8692 = add i64 %8691, 5
  store i64 %8692, i64* %PC
  %8693 = inttoptr i64 %8690 to double*
  %8694 = load double, double* %8693
  %8695 = bitcast i8* %8688 to double*
  store double %8694, double* %8695, align 1, !tbaa !2452
  %8696 = getelementptr inbounds i8, i8* %8688, i64 8
  %8697 = bitcast i8* %8696 to double*
  store double 0.000000e+00, double* %8697, align 1, !tbaa !2452
  %8698 = bitcast %union.vec128_t* %XMM0 to i8*
  %8699 = load i64, i64* %PC
  %8700 = add i64 %8699, 5
  store i64 %8700, i64* %PC
  %8701 = bitcast i8* %8698 to i64*
  %8702 = load i64, i64* %8701, align 1
  store i64 %8702, i64* %RDX, align 1, !tbaa !2428
  %8703 = load i64, i64* %RDX
  %8704 = load i64, i64* %RAX
  %8705 = load i64, i64* %PC
  %8706 = add i64 %8705, 3
  store i64 %8706, i64* %PC
  %8707 = xor i64 %8704, %8703
  store i64 %8707, i64* %RDX, align 8, !tbaa !2428
  %8708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8708, align 1, !tbaa !2432
  %8709 = trunc i64 %8707 to i32
  %8710 = and i32 %8709, 255
  %8711 = call i32 @llvm.ctpop.i32(i32 %8710) #17
  %8712 = trunc i32 %8711 to i8
  %8713 = and i8 %8712, 1
  %8714 = xor i8 %8713, 1
  %8715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8714, i8* %8715, align 1, !tbaa !2446
  %8716 = icmp eq i64 %8707, 0
  %8717 = zext i1 %8716 to i8
  %8718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8717, i8* %8718, align 1, !tbaa !2448
  %8719 = lshr i64 %8707, 63
  %8720 = trunc i64 %8719 to i8
  %8721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8720, i8* %8721, align 1, !tbaa !2449
  %8722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8722, align 1, !tbaa !2450
  %8723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8723, align 1, !tbaa !2447
  %8724 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8725 = load i64, i64* %RDX
  %8726 = load i64, i64* %PC
  %8727 = add i64 %8726, 5
  store i64 %8727, i64* %PC
  %8728 = bitcast i8* %8724 to i64*
  store i64 %8725, i64* %8728, align 1, !tbaa !2428
  %8729 = getelementptr inbounds i8, i8* %8724, i64 8
  %8730 = bitcast i8* %8729 to i64*
  store i64 0, i64* %8730, align 1, !tbaa !2428
  %8731 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8732 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8733 = load i64, i64* %RBP
  %8734 = sub i64 %8733, 128
  %8735 = load i64, i64* %PC
  %8736 = add i64 %8735, 5
  store i64 %8736, i64* %PC
  %8737 = bitcast i8* %8732 to double*
  %8738 = load double, double* %8737, align 1
  %8739 = getelementptr inbounds i8, i8* %8732, i64 8
  %8740 = bitcast i8* %8739 to i64*
  %8741 = load i64, i64* %8740, align 1
  %8742 = inttoptr i64 %8734 to double*
  %8743 = load double, double* %8742
  %8744 = fmul double %8738, %8743
  %8745 = bitcast i8* %8731 to double*
  store double %8744, double* %8745, align 1, !tbaa !2452
  %8746 = getelementptr inbounds i8, i8* %8731, i64 8
  %8747 = bitcast i8* %8746 to i64*
  store i64 %8741, i64* %8747, align 1, !tbaa !2452
  %8748 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8749 = load i64, i64* %RBP
  %8750 = sub i64 %8749, 88
  %8751 = load i64, i64* %PC
  %8752 = add i64 %8751, 5
  store i64 %8752, i64* %PC
  %8753 = inttoptr i64 %8750 to double*
  %8754 = load double, double* %8753
  %8755 = bitcast i8* %8748 to double*
  store double %8754, double* %8755, align 1, !tbaa !2452
  %8756 = getelementptr inbounds i8, i8* %8748, i64 8
  %8757 = bitcast i8* %8756 to double*
  store double 0.000000e+00, double* %8757, align 1, !tbaa !2452
  %8758 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8759 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8760 = load i64, i64* %RBP
  %8761 = sub i64 %8760, 120
  %8762 = load i64, i64* %PC
  %8763 = add i64 %8762, 5
  store i64 %8763, i64* %PC
  %8764 = bitcast i8* %8759 to double*
  %8765 = load double, double* %8764, align 1
  %8766 = getelementptr inbounds i8, i8* %8759, i64 8
  %8767 = bitcast i8* %8766 to i64*
  %8768 = load i64, i64* %8767, align 1
  %8769 = inttoptr i64 %8761 to double*
  %8770 = load double, double* %8769
  %8771 = fmul double %8765, %8770
  %8772 = bitcast i8* %8758 to double*
  store double %8771, double* %8772, align 1, !tbaa !2452
  %8773 = getelementptr inbounds i8, i8* %8758, i64 8
  %8774 = bitcast i8* %8773 to i64*
  store i64 %8768, i64* %8774, align 1, !tbaa !2452
  %8775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8776 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8777 = bitcast %union.vec128_t* %XMM1 to i8*
  %8778 = load i64, i64* %PC
  %8779 = add i64 %8778, 4
  store i64 %8779, i64* %PC
  %8780 = bitcast i8* %8776 to double*
  %8781 = load double, double* %8780, align 1
  %8782 = getelementptr inbounds i8, i8* %8776, i64 8
  %8783 = bitcast i8* %8782 to i64*
  %8784 = load i64, i64* %8783, align 1
  %8785 = bitcast i8* %8777 to double*
  %8786 = load double, double* %8785, align 1
  %8787 = fadd double %8781, %8786
  %8788 = bitcast i8* %8775 to double*
  store double %8787, double* %8788, align 1, !tbaa !2452
  %8789 = getelementptr inbounds i8, i8* %8775, i64 8
  %8790 = bitcast i8* %8789 to i64*
  store i64 %8784, i64* %8790, align 1, !tbaa !2452
  %8791 = load i64, i64* %RBP
  %8792 = sub i64 %8791, 16
  %8793 = load i64, i64* %PC
  %8794 = add i64 %8793, 4
  store i64 %8794, i64* %PC
  %8795 = inttoptr i64 %8792 to i64*
  %8796 = load i64, i64* %8795
  store i64 %8796, i64* %RAX, align 8, !tbaa !2428
  %8797 = load i64, i64* %RBP
  %8798 = sub i64 %8797, 36
  %8799 = load i64, i64* %PC
  %8800 = add i64 %8799, 3
  store i64 %8800, i64* %PC
  %8801 = inttoptr i64 %8798 to i32*
  %8802 = load i32, i32* %8801
  %8803 = zext i32 %8802 to i64
  store i64 %8803, i64* %RCX, align 8, !tbaa !2428
  %8804 = load i64, i64* %RCX
  %8805 = load i64, i64* %PC
  %8806 = add i64 %8805, 3
  store i64 %8806, i64* %PC
  %8807 = trunc i64 %8804 to i32
  %8808 = add i32 1, %8807
  %8809 = zext i32 %8808 to i64
  store i64 %8809, i64* %RCX, align 8, !tbaa !2428
  %8810 = icmp ult i32 %8808, %8807
  %8811 = icmp ult i32 %8808, 1
  %8812 = or i1 %8810, %8811
  %8813 = zext i1 %8812 to i8
  %8814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8813, i8* %8814, align 1, !tbaa !2432
  %8815 = and i32 %8808, 255
  %8816 = call i32 @llvm.ctpop.i32(i32 %8815) #17
  %8817 = trunc i32 %8816 to i8
  %8818 = and i8 %8817, 1
  %8819 = xor i8 %8818, 1
  %8820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8819, i8* %8820, align 1, !tbaa !2446
  %8821 = xor i64 1, %8804
  %8822 = trunc i64 %8821 to i32
  %8823 = xor i32 %8822, %8808
  %8824 = lshr i32 %8823, 4
  %8825 = trunc i32 %8824 to i8
  %8826 = and i8 %8825, 1
  %8827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8826, i8* %8827, align 1, !tbaa !2447
  %8828 = icmp eq i32 %8808, 0
  %8829 = zext i1 %8828 to i8
  %8830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8829, i8* %8830, align 1, !tbaa !2448
  %8831 = lshr i32 %8808, 31
  %8832 = trunc i32 %8831 to i8
  %8833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8832, i8* %8833, align 1, !tbaa !2449
  %8834 = lshr i32 %8807, 31
  %8835 = xor i32 %8831, %8834
  %8836 = add nuw nsw i32 %8835, %8831
  %8837 = icmp eq i32 %8836, 2
  %8838 = zext i1 %8837 to i8
  %8839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8838, i8* %8839, align 1, !tbaa !2450
  %8840 = load i32, i32* %ECX
  %8841 = zext i32 %8840 to i64
  %8842 = load i64, i64* %PC
  %8843 = add i64 %8842, 3
  store i64 %8843, i64* %PC
  %8844 = shl i64 %8841, 32
  %8845 = ashr exact i64 %8844, 32
  store i64 %8845, i64* %RDX, align 8, !tbaa !2428
  %8846 = load i64, i64* %RAX
  %8847 = load i64, i64* %RDX
  %8848 = mul i64 %8847, 8
  %8849 = add i64 %8848, %8846
  %8850 = bitcast %union.vec128_t* %XMM0 to i8*
  %8851 = load i64, i64* %PC
  %8852 = add i64 %8851, 5
  store i64 %8852, i64* %PC
  %8853 = bitcast i8* %8850 to double*
  %8854 = load double, double* %8853, align 1
  %8855 = inttoptr i64 %8849 to double*
  store double %8854, double* %8855
  %8856 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8857 = load i64, i64* %RBP
  %8858 = sub i64 %8857, 136
  %8859 = load i64, i64* %PC
  %8860 = add i64 %8859, 8
  store i64 %8860, i64* %PC
  %8861 = inttoptr i64 %8858 to double*
  %8862 = load double, double* %8861
  %8863 = bitcast i8* %8856 to double*
  store double %8862, double* %8863, align 1, !tbaa !2452
  %8864 = getelementptr inbounds i8, i8* %8856, i64 8
  %8865 = bitcast i8* %8864 to double*
  store double 0.000000e+00, double* %8865, align 1, !tbaa !2452
  %8866 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8867 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8868 = load i64, i64* %RBP
  %8869 = sub i64 %8868, 176
  %8870 = load i64, i64* %PC
  %8871 = add i64 %8870, 8
  store i64 %8871, i64* %PC
  %8872 = bitcast i8* %8867 to double*
  %8873 = load double, double* %8872, align 1
  %8874 = getelementptr inbounds i8, i8* %8867, i64 8
  %8875 = bitcast i8* %8874 to i64*
  %8876 = load i64, i64* %8875, align 1
  %8877 = inttoptr i64 %8869 to double*
  %8878 = load double, double* %8877
  %8879 = fsub double %8873, %8878
  %8880 = bitcast i8* %8866 to double*
  store double %8879, double* %8880, align 1, !tbaa !2452
  %8881 = getelementptr inbounds i8, i8* %8866, i64 8
  %8882 = bitcast i8* %8881 to i64*
  store i64 %8876, i64* %8882, align 1, !tbaa !2452
  %8883 = load i64, i64* %RBP
  %8884 = sub i64 %8883, 120
  %8885 = bitcast %union.vec128_t* %XMM0 to i8*
  %8886 = load i64, i64* %PC
  %8887 = add i64 %8886, 5
  store i64 %8887, i64* %PC
  %8888 = bitcast i8* %8885 to double*
  %8889 = load double, double* %8888, align 1
  %8890 = inttoptr i64 %8884 to double*
  store double %8889, double* %8890
  %8891 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8892 = load i64, i64* %RBP
  %8893 = sub i64 %8892, 144
  %8894 = load i64, i64* %PC
  %8895 = add i64 %8894, 8
  store i64 %8895, i64* %PC
  %8896 = inttoptr i64 %8893 to double*
  %8897 = load double, double* %8896
  %8898 = bitcast i8* %8891 to double*
  store double %8897, double* %8898, align 1, !tbaa !2452
  %8899 = getelementptr inbounds i8, i8* %8891, i64 8
  %8900 = bitcast i8* %8899 to double*
  store double 0.000000e+00, double* %8900, align 1, !tbaa !2452
  %8901 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8902 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8903 = load i64, i64* %RBP
  %8904 = sub i64 %8903, 168
  %8905 = load i64, i64* %PC
  %8906 = add i64 %8905, 8
  store i64 %8906, i64* %PC
  %8907 = bitcast i8* %8902 to double*
  %8908 = load double, double* %8907, align 1
  %8909 = getelementptr inbounds i8, i8* %8902, i64 8
  %8910 = bitcast i8* %8909 to i64*
  %8911 = load i64, i64* %8910, align 1
  %8912 = inttoptr i64 %8904 to double*
  %8913 = load double, double* %8912
  %8914 = fadd double %8908, %8913
  %8915 = bitcast i8* %8901 to double*
  store double %8914, double* %8915, align 1, !tbaa !2452
  %8916 = getelementptr inbounds i8, i8* %8901, i64 8
  %8917 = bitcast i8* %8916 to i64*
  store i64 %8911, i64* %8917, align 1, !tbaa !2452
  %8918 = load i64, i64* %RBP
  %8919 = sub i64 %8918, 128
  %8920 = bitcast %union.vec128_t* %XMM0 to i8*
  %8921 = load i64, i64* %PC
  %8922 = add i64 %8921, 5
  store i64 %8922, i64* %PC
  %8923 = bitcast i8* %8920 to double*
  %8924 = load double, double* %8923, align 1
  %8925 = inttoptr i64 %8919 to double*
  store double %8924, double* %8925
  %8926 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8927 = load i64, i64* %RBP
  %8928 = sub i64 %8927, 72
  %8929 = load i64, i64* %PC
  %8930 = add i64 %8929, 5
  store i64 %8930, i64* %PC
  %8931 = inttoptr i64 %8928 to double*
  %8932 = load double, double* %8931
  %8933 = bitcast i8* %8926 to double*
  store double %8932, double* %8933, align 1, !tbaa !2452
  %8934 = getelementptr inbounds i8, i8* %8926, i64 8
  %8935 = bitcast i8* %8934 to double*
  store double 0.000000e+00, double* %8935, align 1, !tbaa !2452
  %8936 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8937 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8938 = load i64, i64* %RBP
  %8939 = sub i64 %8938, 120
  %8940 = load i64, i64* %PC
  %8941 = add i64 %8940, 5
  store i64 %8941, i64* %PC
  %8942 = bitcast i8* %8937 to double*
  %8943 = load double, double* %8942, align 1
  %8944 = getelementptr inbounds i8, i8* %8937, i64 8
  %8945 = bitcast i8* %8944 to i64*
  %8946 = load i64, i64* %8945, align 1
  %8947 = inttoptr i64 %8939 to double*
  %8948 = load double, double* %8947
  %8949 = fmul double %8943, %8948
  %8950 = bitcast i8* %8936 to double*
  store double %8949, double* %8950, align 1, !tbaa !2452
  %8951 = getelementptr inbounds i8, i8* %8936, i64 8
  %8952 = bitcast i8* %8951 to i64*
  store i64 %8946, i64* %8952, align 1, !tbaa !2452
  %8953 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8954 = load i64, i64* %RBP
  %8955 = sub i64 %8954, 80
  %8956 = load i64, i64* %PC
  %8957 = add i64 %8956, 5
  store i64 %8957, i64* %PC
  %8958 = inttoptr i64 %8955 to double*
  %8959 = load double, double* %8958
  %8960 = bitcast i8* %8953 to double*
  store double %8959, double* %8960, align 1, !tbaa !2452
  %8961 = getelementptr inbounds i8, i8* %8953, i64 8
  %8962 = bitcast i8* %8961 to double*
  store double 0.000000e+00, double* %8962, align 1, !tbaa !2452
  %8963 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8964 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8965 = load i64, i64* %RBP
  %8966 = sub i64 %8965, 128
  %8967 = load i64, i64* %PC
  %8968 = add i64 %8967, 5
  store i64 %8968, i64* %PC
  %8969 = bitcast i8* %8964 to double*
  %8970 = load double, double* %8969, align 1
  %8971 = getelementptr inbounds i8, i8* %8964, i64 8
  %8972 = bitcast i8* %8971 to i64*
  %8973 = load i64, i64* %8972, align 1
  %8974 = inttoptr i64 %8966 to double*
  %8975 = load double, double* %8974
  %8976 = fmul double %8970, %8975
  %8977 = bitcast i8* %8963 to double*
  store double %8976, double* %8977, align 1, !tbaa !2452
  %8978 = getelementptr inbounds i8, i8* %8963, i64 8
  %8979 = bitcast i8* %8978 to i64*
  store i64 %8973, i64* %8979, align 1, !tbaa !2452
  %8980 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8981 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8982 = bitcast %union.vec128_t* %XMM1 to i8*
  %8983 = load i64, i64* %PC
  %8984 = add i64 %8983, 4
  store i64 %8984, i64* %PC
  %8985 = bitcast i8* %8981 to double*
  %8986 = load double, double* %8985, align 1
  %8987 = getelementptr inbounds i8, i8* %8981, i64 8
  %8988 = bitcast i8* %8987 to i64*
  %8989 = load i64, i64* %8988, align 1
  %8990 = bitcast i8* %8982 to double*
  %8991 = load double, double* %8990, align 1
  %8992 = fsub double %8986, %8991
  %8993 = bitcast i8* %8980 to double*
  store double %8992, double* %8993, align 1, !tbaa !2452
  %8994 = getelementptr inbounds i8, i8* %8980, i64 8
  %8995 = bitcast i8* %8994 to i64*
  store i64 %8989, i64* %8995, align 1, !tbaa !2452
  %8996 = load i64, i64* %RBP
  %8997 = sub i64 %8996, 16
  %8998 = load i64, i64* %PC
  %8999 = add i64 %8998, 4
  store i64 %8999, i64* %PC
  %9000 = inttoptr i64 %8997 to i64*
  %9001 = load i64, i64* %9000
  store i64 %9001, i64* %RAX, align 8, !tbaa !2428
  %9002 = load i64, i64* %RBP
  %9003 = sub i64 %9002, 32
  %9004 = load i64, i64* %PC
  %9005 = add i64 %9004, 4
  store i64 %9005, i64* %PC
  %9006 = inttoptr i64 %9003 to i32*
  %9007 = load i32, i32* %9006
  %9008 = sext i32 %9007 to i64
  store i64 %9008, i64* %RDX, align 8, !tbaa !2428
  %9009 = load i64, i64* %RAX
  %9010 = load i64, i64* %RDX
  %9011 = mul i64 %9010, 8
  %9012 = add i64 %9011, %9009
  %9013 = bitcast %union.vec128_t* %XMM0 to i8*
  %9014 = load i64, i64* %PC
  %9015 = add i64 %9014, 5
  store i64 %9015, i64* %PC
  %9016 = bitcast i8* %9013 to double*
  %9017 = load double, double* %9016, align 1
  %9018 = inttoptr i64 %9012 to double*
  store double %9017, double* %9018
  %9019 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9020 = load i64, i64* %RBP
  %9021 = sub i64 %9020, 72
  %9022 = load i64, i64* %PC
  %9023 = add i64 %9022, 5
  store i64 %9023, i64* %PC
  %9024 = inttoptr i64 %9021 to double*
  %9025 = load double, double* %9024
  %9026 = bitcast i8* %9019 to double*
  store double %9025, double* %9026, align 1, !tbaa !2452
  %9027 = getelementptr inbounds i8, i8* %9019, i64 8
  %9028 = bitcast i8* %9027 to double*
  store double 0.000000e+00, double* %9028, align 1, !tbaa !2452
  %9029 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9030 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9031 = load i64, i64* %RBP
  %9032 = sub i64 %9031, 128
  %9033 = load i64, i64* %PC
  %9034 = add i64 %9033, 5
  store i64 %9034, i64* %PC
  %9035 = bitcast i8* %9030 to double*
  %9036 = load double, double* %9035, align 1
  %9037 = getelementptr inbounds i8, i8* %9030, i64 8
  %9038 = bitcast i8* %9037 to i64*
  %9039 = load i64, i64* %9038, align 1
  %9040 = inttoptr i64 %9032 to double*
  %9041 = load double, double* %9040
  %9042 = fmul double %9036, %9041
  %9043 = bitcast i8* %9029 to double*
  store double %9042, double* %9043, align 1, !tbaa !2452
  %9044 = getelementptr inbounds i8, i8* %9029, i64 8
  %9045 = bitcast i8* %9044 to i64*
  store i64 %9039, i64* %9045, align 1, !tbaa !2452
  %9046 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9047 = load i64, i64* %RBP
  %9048 = sub i64 %9047, 80
  %9049 = load i64, i64* %PC
  %9050 = add i64 %9049, 5
  store i64 %9050, i64* %PC
  %9051 = inttoptr i64 %9048 to double*
  %9052 = load double, double* %9051
  %9053 = bitcast i8* %9046 to double*
  store double %9052, double* %9053, align 1, !tbaa !2452
  %9054 = getelementptr inbounds i8, i8* %9046, i64 8
  %9055 = bitcast i8* %9054 to double*
  store double 0.000000e+00, double* %9055, align 1, !tbaa !2452
  %9056 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9057 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9058 = load i64, i64* %RBP
  %9059 = sub i64 %9058, 120
  %9060 = load i64, i64* %PC
  %9061 = add i64 %9060, 5
  store i64 %9061, i64* %PC
  %9062 = bitcast i8* %9057 to double*
  %9063 = load double, double* %9062, align 1
  %9064 = getelementptr inbounds i8, i8* %9057, i64 8
  %9065 = bitcast i8* %9064 to i64*
  %9066 = load i64, i64* %9065, align 1
  %9067 = inttoptr i64 %9059 to double*
  %9068 = load double, double* %9067
  %9069 = fmul double %9063, %9068
  %9070 = bitcast i8* %9056 to double*
  store double %9069, double* %9070, align 1, !tbaa !2452
  %9071 = getelementptr inbounds i8, i8* %9056, i64 8
  %9072 = bitcast i8* %9071 to i64*
  store i64 %9066, i64* %9072, align 1, !tbaa !2452
  %9073 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9074 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9075 = bitcast %union.vec128_t* %XMM1 to i8*
  %9076 = load i64, i64* %PC
  %9077 = add i64 %9076, 4
  store i64 %9077, i64* %PC
  %9078 = bitcast i8* %9074 to double*
  %9079 = load double, double* %9078, align 1
  %9080 = getelementptr inbounds i8, i8* %9074, i64 8
  %9081 = bitcast i8* %9080 to i64*
  %9082 = load i64, i64* %9081, align 1
  %9083 = bitcast i8* %9075 to double*
  %9084 = load double, double* %9083, align 1
  %9085 = fadd double %9079, %9084
  %9086 = bitcast i8* %9073 to double*
  store double %9085, double* %9086, align 1, !tbaa !2452
  %9087 = getelementptr inbounds i8, i8* %9073, i64 8
  %9088 = bitcast i8* %9087 to i64*
  store i64 %9082, i64* %9088, align 1, !tbaa !2452
  %9089 = load i64, i64* %RBP
  %9090 = sub i64 %9089, 16
  %9091 = load i64, i64* %PC
  %9092 = add i64 %9091, 4
  store i64 %9092, i64* %PC
  %9093 = inttoptr i64 %9090 to i64*
  %9094 = load i64, i64* %9093
  store i64 %9094, i64* %RAX, align 8, !tbaa !2428
  %9095 = load i64, i64* %RBP
  %9096 = sub i64 %9095, 32
  %9097 = load i64, i64* %PC
  %9098 = add i64 %9097, 3
  store i64 %9098, i64* %PC
  %9099 = inttoptr i64 %9096 to i32*
  %9100 = load i32, i32* %9099
  %9101 = zext i32 %9100 to i64
  store i64 %9101, i64* %RCX, align 8, !tbaa !2428
  %9102 = load i64, i64* %RCX
  %9103 = load i64, i64* %PC
  %9104 = add i64 %9103, 3
  store i64 %9104, i64* %PC
  %9105 = trunc i64 %9102 to i32
  %9106 = add i32 1, %9105
  %9107 = zext i32 %9106 to i64
  store i64 %9107, i64* %RCX, align 8, !tbaa !2428
  %9108 = icmp ult i32 %9106, %9105
  %9109 = icmp ult i32 %9106, 1
  %9110 = or i1 %9108, %9109
  %9111 = zext i1 %9110 to i8
  %9112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9111, i8* %9112, align 1, !tbaa !2432
  %9113 = and i32 %9106, 255
  %9114 = call i32 @llvm.ctpop.i32(i32 %9113) #17
  %9115 = trunc i32 %9114 to i8
  %9116 = and i8 %9115, 1
  %9117 = xor i8 %9116, 1
  %9118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9117, i8* %9118, align 1, !tbaa !2446
  %9119 = xor i64 1, %9102
  %9120 = trunc i64 %9119 to i32
  %9121 = xor i32 %9120, %9106
  %9122 = lshr i32 %9121, 4
  %9123 = trunc i32 %9122 to i8
  %9124 = and i8 %9123, 1
  %9125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9124, i8* %9125, align 1, !tbaa !2447
  %9126 = icmp eq i32 %9106, 0
  %9127 = zext i1 %9126 to i8
  %9128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9127, i8* %9128, align 1, !tbaa !2448
  %9129 = lshr i32 %9106, 31
  %9130 = trunc i32 %9129 to i8
  %9131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9130, i8* %9131, align 1, !tbaa !2449
  %9132 = lshr i32 %9105, 31
  %9133 = xor i32 %9129, %9132
  %9134 = add nuw nsw i32 %9133, %9129
  %9135 = icmp eq i32 %9134, 2
  %9136 = zext i1 %9135 to i8
  %9137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9136, i8* %9137, align 1, !tbaa !2450
  %9138 = load i32, i32* %ECX
  %9139 = zext i32 %9138 to i64
  %9140 = load i64, i64* %PC
  %9141 = add i64 %9140, 3
  store i64 %9141, i64* %PC
  %9142 = shl i64 %9139, 32
  %9143 = ashr exact i64 %9142, 32
  store i64 %9143, i64* %RDX, align 8, !tbaa !2428
  %9144 = load i64, i64* %RAX
  %9145 = load i64, i64* %RDX
  %9146 = mul i64 %9145, 8
  %9147 = add i64 %9146, %9144
  %9148 = bitcast %union.vec128_t* %XMM0 to i8*
  %9149 = load i64, i64* %PC
  %9150 = add i64 %9149, 5
  store i64 %9150, i64* %PC
  %9151 = bitcast i8* %9148 to double*
  %9152 = load double, double* %9151, align 1
  %9153 = inttoptr i64 %9147 to double*
  store double %9152, double* %9153
  %9154 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9155 = load i64, i64* %RBP
  %9156 = sub i64 %9155, 136
  %9157 = load i64, i64* %PC
  %9158 = add i64 %9157, 8
  store i64 %9158, i64* %PC
  %9159 = inttoptr i64 %9156 to double*
  %9160 = load double, double* %9159
  %9161 = bitcast i8* %9154 to double*
  store double %9160, double* %9161, align 1, !tbaa !2452
  %9162 = getelementptr inbounds i8, i8* %9154, i64 8
  %9163 = bitcast i8* %9162 to double*
  store double 0.000000e+00, double* %9163, align 1, !tbaa !2452
  %9164 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9165 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9166 = load i64, i64* %RBP
  %9167 = sub i64 %9166, 176
  %9168 = load i64, i64* %PC
  %9169 = add i64 %9168, 8
  store i64 %9169, i64* %PC
  %9170 = bitcast i8* %9165 to double*
  %9171 = load double, double* %9170, align 1
  %9172 = getelementptr inbounds i8, i8* %9165, i64 8
  %9173 = bitcast i8* %9172 to i64*
  %9174 = load i64, i64* %9173, align 1
  %9175 = inttoptr i64 %9167 to double*
  %9176 = load double, double* %9175
  %9177 = fadd double %9171, %9176
  %9178 = bitcast i8* %9164 to double*
  store double %9177, double* %9178, align 1, !tbaa !2452
  %9179 = getelementptr inbounds i8, i8* %9164, i64 8
  %9180 = bitcast i8* %9179 to i64*
  store i64 %9174, i64* %9180, align 1, !tbaa !2452
  %9181 = load i64, i64* %RBP
  %9182 = sub i64 %9181, 120
  %9183 = bitcast %union.vec128_t* %XMM0 to i8*
  %9184 = load i64, i64* %PC
  %9185 = add i64 %9184, 5
  store i64 %9185, i64* %PC
  %9186 = bitcast i8* %9183 to double*
  %9187 = load double, double* %9186, align 1
  %9188 = inttoptr i64 %9182 to double*
  store double %9187, double* %9188
  %9189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9190 = load i64, i64* %RBP
  %9191 = sub i64 %9190, 144
  %9192 = load i64, i64* %PC
  %9193 = add i64 %9192, 8
  store i64 %9193, i64* %PC
  %9194 = inttoptr i64 %9191 to double*
  %9195 = load double, double* %9194
  %9196 = bitcast i8* %9189 to double*
  store double %9195, double* %9196, align 1, !tbaa !2452
  %9197 = getelementptr inbounds i8, i8* %9189, i64 8
  %9198 = bitcast i8* %9197 to double*
  store double 0.000000e+00, double* %9198, align 1, !tbaa !2452
  %9199 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9200 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9201 = load i64, i64* %RBP
  %9202 = sub i64 %9201, 168
  %9203 = load i64, i64* %PC
  %9204 = add i64 %9203, 8
  store i64 %9204, i64* %PC
  %9205 = bitcast i8* %9200 to double*
  %9206 = load double, double* %9205, align 1
  %9207 = getelementptr inbounds i8, i8* %9200, i64 8
  %9208 = bitcast i8* %9207 to i64*
  %9209 = load i64, i64* %9208, align 1
  %9210 = inttoptr i64 %9202 to double*
  %9211 = load double, double* %9210
  %9212 = fsub double %9206, %9211
  %9213 = bitcast i8* %9199 to double*
  store double %9212, double* %9213, align 1, !tbaa !2452
  %9214 = getelementptr inbounds i8, i8* %9199, i64 8
  %9215 = bitcast i8* %9214 to i64*
  store i64 %9209, i64* %9215, align 1, !tbaa !2452
  %9216 = load i64, i64* %RBP
  %9217 = sub i64 %9216, 128
  %9218 = bitcast %union.vec128_t* %XMM0 to i8*
  %9219 = load i64, i64* %PC
  %9220 = add i64 %9219, 5
  store i64 %9220, i64* %PC
  %9221 = bitcast i8* %9218 to double*
  %9222 = load double, double* %9221, align 1
  %9223 = inttoptr i64 %9217 to double*
  store double %9222, double* %9223
  %9224 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9225 = load i64, i64* %RBP
  %9226 = sub i64 %9225, 104
  %9227 = load i64, i64* %PC
  %9228 = add i64 %9227, 5
  store i64 %9228, i64* %PC
  %9229 = inttoptr i64 %9226 to double*
  %9230 = load double, double* %9229
  %9231 = bitcast i8* %9224 to double*
  store double %9230, double* %9231, align 1, !tbaa !2452
  %9232 = getelementptr inbounds i8, i8* %9224, i64 8
  %9233 = bitcast i8* %9232 to double*
  store double 0.000000e+00, double* %9233, align 1, !tbaa !2452
  %9234 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9235 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9236 = load i64, i64* %RBP
  %9237 = sub i64 %9236, 120
  %9238 = load i64, i64* %PC
  %9239 = add i64 %9238, 5
  store i64 %9239, i64* %PC
  %9240 = bitcast i8* %9235 to double*
  %9241 = load double, double* %9240, align 1
  %9242 = getelementptr inbounds i8, i8* %9235, i64 8
  %9243 = bitcast i8* %9242 to i64*
  %9244 = load i64, i64* %9243, align 1
  %9245 = inttoptr i64 %9237 to double*
  %9246 = load double, double* %9245
  %9247 = fmul double %9241, %9246
  %9248 = bitcast i8* %9234 to double*
  store double %9247, double* %9248, align 1, !tbaa !2452
  %9249 = getelementptr inbounds i8, i8* %9234, i64 8
  %9250 = bitcast i8* %9249 to i64*
  store i64 %9244, i64* %9250, align 1, !tbaa !2452
  %9251 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9252 = load i64, i64* %RBP
  %9253 = sub i64 %9252, 112
  %9254 = load i64, i64* %PC
  %9255 = add i64 %9254, 5
  store i64 %9255, i64* %PC
  %9256 = inttoptr i64 %9253 to double*
  %9257 = load double, double* %9256
  %9258 = bitcast i8* %9251 to double*
  store double %9257, double* %9258, align 1, !tbaa !2452
  %9259 = getelementptr inbounds i8, i8* %9251, i64 8
  %9260 = bitcast i8* %9259 to double*
  store double 0.000000e+00, double* %9260, align 1, !tbaa !2452
  %9261 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9262 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9263 = load i64, i64* %RBP
  %9264 = sub i64 %9263, 128
  %9265 = load i64, i64* %PC
  %9266 = add i64 %9265, 5
  store i64 %9266, i64* %PC
  %9267 = bitcast i8* %9262 to double*
  %9268 = load double, double* %9267, align 1
  %9269 = getelementptr inbounds i8, i8* %9262, i64 8
  %9270 = bitcast i8* %9269 to i64*
  %9271 = load i64, i64* %9270, align 1
  %9272 = inttoptr i64 %9264 to double*
  %9273 = load double, double* %9272
  %9274 = fmul double %9268, %9273
  %9275 = bitcast i8* %9261 to double*
  store double %9274, double* %9275, align 1, !tbaa !2452
  %9276 = getelementptr inbounds i8, i8* %9261, i64 8
  %9277 = bitcast i8* %9276 to i64*
  store i64 %9271, i64* %9277, align 1, !tbaa !2452
  %9278 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9279 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9280 = bitcast %union.vec128_t* %XMM1 to i8*
  %9281 = load i64, i64* %PC
  %9282 = add i64 %9281, 4
  store i64 %9282, i64* %PC
  %9283 = bitcast i8* %9279 to double*
  %9284 = load double, double* %9283, align 1
  %9285 = getelementptr inbounds i8, i8* %9279, i64 8
  %9286 = bitcast i8* %9285 to i64*
  %9287 = load i64, i64* %9286, align 1
  %9288 = bitcast i8* %9280 to double*
  %9289 = load double, double* %9288, align 1
  %9290 = fsub double %9284, %9289
  %9291 = bitcast i8* %9278 to double*
  store double %9290, double* %9291, align 1, !tbaa !2452
  %9292 = getelementptr inbounds i8, i8* %9278, i64 8
  %9293 = bitcast i8* %9292 to i64*
  store i64 %9287, i64* %9293, align 1, !tbaa !2452
  %9294 = load i64, i64* %RBP
  %9295 = sub i64 %9294, 16
  %9296 = load i64, i64* %PC
  %9297 = add i64 %9296, 4
  store i64 %9297, i64* %PC
  %9298 = inttoptr i64 %9295 to i64*
  %9299 = load i64, i64* %9298
  store i64 %9299, i64* %RAX, align 8, !tbaa !2428
  %9300 = load i64, i64* %RBP
  %9301 = sub i64 %9300, 40
  %9302 = load i64, i64* %PC
  %9303 = add i64 %9302, 4
  store i64 %9303, i64* %PC
  %9304 = inttoptr i64 %9301 to i32*
  %9305 = load i32, i32* %9304
  %9306 = sext i32 %9305 to i64
  store i64 %9306, i64* %RDX, align 8, !tbaa !2428
  %9307 = load i64, i64* %RAX
  %9308 = load i64, i64* %RDX
  %9309 = mul i64 %9308, 8
  %9310 = add i64 %9309, %9307
  %9311 = bitcast %union.vec128_t* %XMM0 to i8*
  %9312 = load i64, i64* %PC
  %9313 = add i64 %9312, 5
  store i64 %9313, i64* %PC
  %9314 = bitcast i8* %9311 to double*
  %9315 = load double, double* %9314, align 1
  %9316 = inttoptr i64 %9310 to double*
  store double %9315, double* %9316
  %9317 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9318 = load i64, i64* %RBP
  %9319 = sub i64 %9318, 104
  %9320 = load i64, i64* %PC
  %9321 = add i64 %9320, 5
  store i64 %9321, i64* %PC
  %9322 = inttoptr i64 %9319 to double*
  %9323 = load double, double* %9322
  %9324 = bitcast i8* %9317 to double*
  store double %9323, double* %9324, align 1, !tbaa !2452
  %9325 = getelementptr inbounds i8, i8* %9317, i64 8
  %9326 = bitcast i8* %9325 to double*
  store double 0.000000e+00, double* %9326, align 1, !tbaa !2452
  %9327 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9328 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9329 = load i64, i64* %RBP
  %9330 = sub i64 %9329, 128
  %9331 = load i64, i64* %PC
  %9332 = add i64 %9331, 5
  store i64 %9332, i64* %PC
  %9333 = bitcast i8* %9328 to double*
  %9334 = load double, double* %9333, align 1
  %9335 = getelementptr inbounds i8, i8* %9328, i64 8
  %9336 = bitcast i8* %9335 to i64*
  %9337 = load i64, i64* %9336, align 1
  %9338 = inttoptr i64 %9330 to double*
  %9339 = load double, double* %9338
  %9340 = fmul double %9334, %9339
  %9341 = bitcast i8* %9327 to double*
  store double %9340, double* %9341, align 1, !tbaa !2452
  %9342 = getelementptr inbounds i8, i8* %9327, i64 8
  %9343 = bitcast i8* %9342 to i64*
  store i64 %9337, i64* %9343, align 1, !tbaa !2452
  %9344 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9345 = load i64, i64* %RBP
  %9346 = sub i64 %9345, 112
  %9347 = load i64, i64* %PC
  %9348 = add i64 %9347, 5
  store i64 %9348, i64* %PC
  %9349 = inttoptr i64 %9346 to double*
  %9350 = load double, double* %9349
  %9351 = bitcast i8* %9344 to double*
  store double %9350, double* %9351, align 1, !tbaa !2452
  %9352 = getelementptr inbounds i8, i8* %9344, i64 8
  %9353 = bitcast i8* %9352 to double*
  store double 0.000000e+00, double* %9353, align 1, !tbaa !2452
  %9354 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9355 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9356 = load i64, i64* %RBP
  %9357 = sub i64 %9356, 120
  %9358 = load i64, i64* %PC
  %9359 = add i64 %9358, 5
  store i64 %9359, i64* %PC
  %9360 = bitcast i8* %9355 to double*
  %9361 = load double, double* %9360, align 1
  %9362 = getelementptr inbounds i8, i8* %9355, i64 8
  %9363 = bitcast i8* %9362 to i64*
  %9364 = load i64, i64* %9363, align 1
  %9365 = inttoptr i64 %9357 to double*
  %9366 = load double, double* %9365
  %9367 = fmul double %9361, %9366
  %9368 = bitcast i8* %9354 to double*
  store double %9367, double* %9368, align 1, !tbaa !2452
  %9369 = getelementptr inbounds i8, i8* %9354, i64 8
  %9370 = bitcast i8* %9369 to i64*
  store i64 %9364, i64* %9370, align 1, !tbaa !2452
  %9371 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9372 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9373 = bitcast %union.vec128_t* %XMM1 to i8*
  %9374 = load i64, i64* %PC
  %9375 = add i64 %9374, 4
  store i64 %9375, i64* %PC
  %9376 = bitcast i8* %9372 to double*
  %9377 = load double, double* %9376, align 1
  %9378 = getelementptr inbounds i8, i8* %9372, i64 8
  %9379 = bitcast i8* %9378 to i64*
  %9380 = load i64, i64* %9379, align 1
  %9381 = bitcast i8* %9373 to double*
  %9382 = load double, double* %9381, align 1
  %9383 = fadd double %9377, %9382
  %9384 = bitcast i8* %9371 to double*
  store double %9383, double* %9384, align 1, !tbaa !2452
  %9385 = getelementptr inbounds i8, i8* %9371, i64 8
  %9386 = bitcast i8* %9385 to i64*
  store i64 %9380, i64* %9386, align 1, !tbaa !2452
  %9387 = load i64, i64* %RBP
  %9388 = sub i64 %9387, 16
  %9389 = load i64, i64* %PC
  %9390 = add i64 %9389, 4
  store i64 %9390, i64* %PC
  %9391 = inttoptr i64 %9388 to i64*
  %9392 = load i64, i64* %9391
  store i64 %9392, i64* %RAX, align 8, !tbaa !2428
  %9393 = load i64, i64* %RBP
  %9394 = sub i64 %9393, 40
  %9395 = load i64, i64* %PC
  %9396 = add i64 %9395, 3
  store i64 %9396, i64* %PC
  %9397 = inttoptr i64 %9394 to i32*
  %9398 = load i32, i32* %9397
  %9399 = zext i32 %9398 to i64
  store i64 %9399, i64* %RCX, align 8, !tbaa !2428
  %9400 = load i64, i64* %RCX
  %9401 = load i64, i64* %PC
  %9402 = add i64 %9401, 3
  store i64 %9402, i64* %PC
  %9403 = trunc i64 %9400 to i32
  %9404 = add i32 1, %9403
  %9405 = zext i32 %9404 to i64
  store i64 %9405, i64* %RCX, align 8, !tbaa !2428
  %9406 = icmp ult i32 %9404, %9403
  %9407 = icmp ult i32 %9404, 1
  %9408 = or i1 %9406, %9407
  %9409 = zext i1 %9408 to i8
  %9410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9409, i8* %9410, align 1, !tbaa !2432
  %9411 = and i32 %9404, 255
  %9412 = call i32 @llvm.ctpop.i32(i32 %9411) #17
  %9413 = trunc i32 %9412 to i8
  %9414 = and i8 %9413, 1
  %9415 = xor i8 %9414, 1
  %9416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9415, i8* %9416, align 1, !tbaa !2446
  %9417 = xor i64 1, %9400
  %9418 = trunc i64 %9417 to i32
  %9419 = xor i32 %9418, %9404
  %9420 = lshr i32 %9419, 4
  %9421 = trunc i32 %9420 to i8
  %9422 = and i8 %9421, 1
  %9423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9422, i8* %9423, align 1, !tbaa !2447
  %9424 = icmp eq i32 %9404, 0
  %9425 = zext i1 %9424 to i8
  %9426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9425, i8* %9426, align 1, !tbaa !2448
  %9427 = lshr i32 %9404, 31
  %9428 = trunc i32 %9427 to i8
  %9429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9428, i8* %9429, align 1, !tbaa !2449
  %9430 = lshr i32 %9403, 31
  %9431 = xor i32 %9427, %9430
  %9432 = add nuw nsw i32 %9431, %9427
  %9433 = icmp eq i32 %9432, 2
  %9434 = zext i1 %9433 to i8
  %9435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9434, i8* %9435, align 1, !tbaa !2450
  %9436 = load i32, i32* %ECX
  %9437 = zext i32 %9436 to i64
  %9438 = load i64, i64* %PC
  %9439 = add i64 %9438, 3
  store i64 %9439, i64* %PC
  %9440 = shl i64 %9437, 32
  %9441 = ashr exact i64 %9440, 32
  store i64 %9441, i64* %RDX, align 8, !tbaa !2428
  %9442 = load i64, i64* %RAX
  %9443 = load i64, i64* %RDX
  %9444 = mul i64 %9443, 8
  %9445 = add i64 %9444, %9442
  %9446 = bitcast %union.vec128_t* %XMM0 to i8*
  %9447 = load i64, i64* %PC
  %9448 = add i64 %9447, 5
  store i64 %9448, i64* %PC
  %9449 = bitcast i8* %9446 to double*
  %9450 = load double, double* %9449, align 1
  %9451 = inttoptr i64 %9445 to double*
  store double %9450, double* %9451
  %9452 = load i64, i64* %RBP
  %9453 = sub i64 %9452, 28
  %9454 = load i64, i64* %PC
  %9455 = add i64 %9454, 3
  store i64 %9455, i64* %PC
  %9456 = inttoptr i64 %9453 to i32*
  %9457 = load i32, i32* %9456
  %9458 = zext i32 %9457 to i64
  store i64 %9458, i64* %RAX, align 8, !tbaa !2428
  %9459 = load i64, i64* %RAX
  %9460 = load i64, i64* %PC
  %9461 = add i64 %9460, 3
  store i64 %9461, i64* %PC
  %9462 = trunc i64 %9459 to i32
  %9463 = add i32 2, %9462
  %9464 = zext i32 %9463 to i64
  store i64 %9464, i64* %RAX, align 8, !tbaa !2428
  %9465 = icmp ult i32 %9463, %9462
  %9466 = icmp ult i32 %9463, 2
  %9467 = or i1 %9465, %9466
  %9468 = zext i1 %9467 to i8
  %9469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9468, i8* %9469, align 1, !tbaa !2432
  %9470 = and i32 %9463, 255
  %9471 = call i32 @llvm.ctpop.i32(i32 %9470) #17
  %9472 = trunc i32 %9471 to i8
  %9473 = and i8 %9472, 1
  %9474 = xor i8 %9473, 1
  %9475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9474, i8* %9475, align 1, !tbaa !2446
  %9476 = xor i64 2, %9459
  %9477 = trunc i64 %9476 to i32
  %9478 = xor i32 %9477, %9463
  %9479 = lshr i32 %9478, 4
  %9480 = trunc i32 %9479 to i8
  %9481 = and i8 %9480, 1
  %9482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9481, i8* %9482, align 1, !tbaa !2447
  %9483 = icmp eq i32 %9463, 0
  %9484 = zext i1 %9483 to i8
  %9485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9484, i8* %9485, align 1, !tbaa !2448
  %9486 = lshr i32 %9463, 31
  %9487 = trunc i32 %9486 to i8
  %9488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9487, i8* %9488, align 1, !tbaa !2449
  %9489 = lshr i32 %9462, 31
  %9490 = xor i32 %9486, %9489
  %9491 = add nuw nsw i32 %9490, %9486
  %9492 = icmp eq i32 %9491, 2
  %9493 = zext i1 %9492 to i8
  %9494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9493, i8* %9494, align 1, !tbaa !2450
  %9495 = load i64, i64* %RBP
  %9496 = sub i64 %9495, 28
  %9497 = load i32, i32* %EAX
  %9498 = zext i32 %9497 to i64
  %9499 = load i64, i64* %PC
  %9500 = add i64 %9499, 3
  store i64 %9500, i64* %PC
  %9501 = inttoptr i64 %9496 to i32*
  store i32 %9497, i32* %9501
  %9502 = load i64, i64* %PC
  %9503 = sub i64 %9502, 822
  %9504 = load i64, i64* %PC
  %9505 = add i64 %9504, 5
  store i64 %9505, i64* %PC
  %9506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9503, i64* %9506, align 8, !tbaa !2428
  br label %block_403cb0

block_403346:                                     ; preds = %block_403352, %block_403320
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_403320 ], [ %MEMORY.4, %block_403352 ]
  %9507 = load i64, i64* %RBP
  %9508 = sub i64 %9507, 28
  %9509 = load i64, i64* %PC
  %9510 = add i64 %9509, 3
  store i64 %9510, i64* %PC
  %9511 = inttoptr i64 %9508 to i32*
  %9512 = load i32, i32* %9511
  %9513 = zext i32 %9512 to i64
  store i64 %9513, i64* %RAX, align 8, !tbaa !2428
  %9514 = load i32, i32* %EAX
  %9515 = zext i32 %9514 to i64
  %9516 = load i64, i64* %RBP
  %9517 = sub i64 %9516, 8
  %9518 = load i64, i64* %PC
  %9519 = add i64 %9518, 3
  store i64 %9519, i64* %PC
  %9520 = inttoptr i64 %9517 to i32*
  %9521 = load i32, i32* %9520
  %9522 = sub i32 %9514, %9521
  %9523 = icmp ult i32 %9514, %9521
  %9524 = zext i1 %9523 to i8
  %9525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9524, i8* %9525, align 1, !tbaa !2432
  %9526 = and i32 %9522, 255
  %9527 = call i32 @llvm.ctpop.i32(i32 %9526) #17
  %9528 = trunc i32 %9527 to i8
  %9529 = and i8 %9528, 1
  %9530 = xor i8 %9529, 1
  %9531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9530, i8* %9531, align 1, !tbaa !2446
  %9532 = xor i32 %9521, %9514
  %9533 = xor i32 %9532, %9522
  %9534 = lshr i32 %9533, 4
  %9535 = trunc i32 %9534 to i8
  %9536 = and i8 %9535, 1
  %9537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9536, i8* %9537, align 1, !tbaa !2447
  %9538 = icmp eq i32 %9522, 0
  %9539 = zext i1 %9538 to i8
  %9540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9539, i8* %9540, align 1, !tbaa !2448
  %9541 = lshr i32 %9522, 31
  %9542 = trunc i32 %9541 to i8
  %9543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9542, i8* %9543, align 1, !tbaa !2449
  %9544 = lshr i32 %9514, 31
  %9545 = lshr i32 %9521, 31
  %9546 = xor i32 %9545, %9544
  %9547 = xor i32 %9541, %9544
  %9548 = add nuw nsw i32 %9547, %9546
  %9549 = icmp eq i32 %9548, 2
  %9550 = zext i1 %9549 to i8
  %9551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9550, i8* %9551, align 1, !tbaa !2450
  %9552 = load i64, i64* %PC
  %9553 = add i64 %9552, 593
  %9554 = load i64, i64* %PC
  %9555 = add i64 %9554, 6
  %9556 = load i64, i64* %PC
  %9557 = add i64 %9556, 6
  store i64 %9557, i64* %PC
  %9558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9559 = load i8, i8* %9558, align 1, !tbaa !2449
  %9560 = icmp ne i8 %9559, 0
  %9561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9562 = load i8, i8* %9561, align 1, !tbaa !2450
  %9563 = icmp ne i8 %9562, 0
  %9564 = xor i1 %9560, %9563
  %9565 = xor i1 %9564, true
  %9566 = zext i1 %9565 to i8
  store i8 %9566, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9568 = select i1 %9564, i64 %9555, i64 %9553
  store i64 %9568, i64* %9567, align 8, !tbaa !2428
  %9569 = load i8, i8* %BRANCH_TAKEN
  %9570 = icmp eq i8 %9569, 1
  %9571 = load i64, i64* %RBP
  br i1 %9570, label %block_40359d, label %block_403352
}

; Function Attrs: noinline
define %struct.Memory* @sub_404084__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404084:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #17
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #17
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401860_cftfsub(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401860:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = load i64, i64* %RBP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  store i64 %47, i64* %RBP, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC
  %53 = sub i64 %50, 112
  store i64 %53, i64* %RSP, align 8, !tbaa !2428
  %54 = icmp ult i64 %50, 112
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %55, i8* %56, align 1, !tbaa !2432
  %57 = trunc i64 %53 to i32
  %58 = and i32 %57, 255
  %59 = call i32 @llvm.ctpop.i32(i32 %58) #17
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = xor i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %62, i8* %63, align 1, !tbaa !2446
  %64 = xor i64 112, %50
  %65 = xor i64 %64, %53
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %68, i8* %69, align 1, !tbaa !2447
  %70 = icmp eq i64 %53, 0
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = lshr i64 %53, 63
  %74 = trunc i64 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %50, 63
  %77 = xor i64 %73, %76
  %78 = add nuw nsw i64 %77, %76
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %80, i8* %81, align 1, !tbaa !2450
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i32, i32* %EDI
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RSI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %RDX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 44
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 7
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  store i32 2, i32* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 4
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i32*
  %111 = load i32, i32* %110
  %112 = sub i32 %111, 8
  %113 = icmp ult i32 %111, 8
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %114, i8* %115, align 1, !tbaa !2432
  %116 = and i32 %112, 255
  %117 = call i32 @llvm.ctpop.i32(i32 %116) #17
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %120, i8* %121, align 1, !tbaa !2446
  %122 = xor i32 %111, 8
  %123 = xor i32 %122, %112
  %124 = lshr i32 %123, 4
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %126, i8* %127, align 1, !tbaa !2447
  %128 = icmp eq i32 %112, 0
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %129, i8* %130, align 1, !tbaa !2448
  %131 = lshr i32 %112, 31
  %132 = trunc i32 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %132, i8* %133, align 1, !tbaa !2449
  %134 = lshr i32 %111, 31
  %135 = xor i32 %131, %134
  %136 = add nuw nsw i32 %135, %134
  %137 = icmp eq i32 %136, 2
  %138 = zext i1 %137 to i8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %138, i8* %139, align 1, !tbaa !2450
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 82
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 6
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 6
  store i64 %145, i64* %PC
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %147 = load i8, i8* %146, align 1, !tbaa !2448
  %148 = icmp ne i8 %147, 0
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %150 = load i8, i8* %149, align 1, !tbaa !2449
  %151 = icmp ne i8 %150, 0
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %153 = load i8, i8* %152, align 1, !tbaa !2450
  %154 = icmp ne i8 %153, 0
  %155 = xor i1 %151, %154
  %156 = or i1 %148, %155
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = select i1 %156, i64 %141, i64 %143
  store i64 %159, i64* %158, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_4018d0, label %block_401884

block_401b13:                                     ; preds = %block_401b1f, %block_4018d0
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4018d0 ], [ %MEMORY.0, %block_401b1f ]
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 28
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 3
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %163 to i32*
  %167 = load i32, i32* %166
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = load i32, i32* %EAX
  %170 = zext i32 %169 to i64
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 44
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 3
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i32*
  %176 = load i32, i32* %175
  %177 = sub i32 %169, %176
  %178 = icmp ult i32 %169, %176
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %179, i8* %180, align 1, !tbaa !2432
  %181 = and i32 %177, 255
  %182 = call i32 @llvm.ctpop.i32(i32 %181) #17
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  %185 = xor i8 %184, 1
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %185, i8* %186, align 1, !tbaa !2446
  %187 = xor i32 %176, %169
  %188 = xor i32 %187, %177
  %189 = lshr i32 %188, 4
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %191, i8* %192, align 1, !tbaa !2447
  %193 = icmp eq i32 %177, 0
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %194, i8* %195, align 1, !tbaa !2448
  %196 = lshr i32 %177, 31
  %197 = trunc i32 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %197, i8* %198, align 1, !tbaa !2449
  %199 = lshr i32 %169, 31
  %200 = lshr i32 %176, 31
  %201 = xor i32 %200, %199
  %202 = xor i32 %196, %199
  %203 = add nuw nsw i32 %202, %201
  %204 = icmp eq i32 %203, 2
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %205, i8* %206, align 1, !tbaa !2450
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 214
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 6
  store i64 %212, i64* %PC
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %214 = load i8, i8* %213, align 1, !tbaa !2449
  %215 = icmp ne i8 %214, 0
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %217 = load i8, i8* %216, align 1, !tbaa !2450
  %218 = icmp ne i8 %217, 0
  %219 = xor i1 %215, %218
  %220 = xor i1 %219, true
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %223 = select i1 %219, i64 %210, i64 %208
  store i64 %223, i64* %222, align 8, !tbaa !2428
  %224 = load i8, i8* %BRANCH_TAKEN
  %225 = icmp eq i8 %224, 1
  br i1 %225, label %block_401bef, label %block_401b1f

block_4018f2:                                     ; preds = %block_4018e6
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 28
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 3
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RAX, align 8, !tbaa !2428
  %233 = load i64, i64* %RAX
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 44
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = trunc i64 %233 to i32
  %239 = inttoptr i64 %235 to i32*
  %240 = load i32, i32* %239
  %241 = add i32 %240, %238
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = icmp ult i32 %241, %238
  %244 = icmp ult i32 %241, %240
  %245 = or i1 %243, %244
  %246 = zext i1 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %246, i8* %247, align 1, !tbaa !2432
  %248 = and i32 %241, 255
  %249 = call i32 @llvm.ctpop.i32(i32 %248) #17
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = xor i8 %251, 1
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %252, i8* %253, align 1, !tbaa !2446
  %254 = xor i32 %240, %238
  %255 = xor i32 %254, %241
  %256 = lshr i32 %255, 4
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %258, i8* %259, align 1, !tbaa !2447
  %260 = icmp eq i32 %241, 0
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %261, i8* %262, align 1, !tbaa !2448
  %263 = lshr i32 %241, 31
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %264, i8* %265, align 1, !tbaa !2449
  %266 = lshr i32 %238, 31
  %267 = lshr i32 %240, 31
  %268 = xor i32 %263, %266
  %269 = xor i32 %263, %267
  %270 = add nuw nsw i32 %268, %269
  %271 = icmp eq i32 %270, 2
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %272, i8* %273, align 1, !tbaa !2450
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 32
  %276 = load i32, i32* %EAX
  %277 = zext i32 %276 to i64
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = inttoptr i64 %275 to i32*
  store i32 %276, i32* %280
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 32
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 3
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i32*
  %286 = load i32, i32* %285
  %287 = zext i32 %286 to i64
  store i64 %287, i64* %RAX, align 8, !tbaa !2428
  %288 = load i64, i64* %RAX
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 44
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 3
  store i64 %292, i64* %PC
  %293 = trunc i64 %288 to i32
  %294 = inttoptr i64 %290 to i32*
  %295 = load i32, i32* %294
  %296 = add i32 %295, %293
  %297 = zext i32 %296 to i64
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = icmp ult i32 %296, %293
  %299 = icmp ult i32 %296, %295
  %300 = or i1 %298, %299
  %301 = zext i1 %300 to i8
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %301, i8* %302, align 1, !tbaa !2432
  %303 = and i32 %296, 255
  %304 = call i32 @llvm.ctpop.i32(i32 %303) #17
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %307, i8* %308, align 1, !tbaa !2446
  %309 = xor i32 %295, %293
  %310 = xor i32 %309, %296
  %311 = lshr i32 %310, 4
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %313, i8* %314, align 1, !tbaa !2447
  %315 = icmp eq i32 %296, 0
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %316, i8* %317, align 1, !tbaa !2448
  %318 = lshr i32 %296, 31
  %319 = trunc i32 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %319, i8* %320, align 1, !tbaa !2449
  %321 = lshr i32 %293, 31
  %322 = lshr i32 %295, 31
  %323 = xor i32 %318, %321
  %324 = xor i32 %318, %322
  %325 = add nuw nsw i32 %323, %324
  %326 = icmp eq i32 %325, 2
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %327, i8* %328, align 1, !tbaa !2450
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 36
  %331 = load i32, i32* %EAX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 3
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %330 to i32*
  store i32 %331, i32* %335
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 36
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i32*
  %341 = load i32, i32* %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = load i64, i64* %RAX
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 44
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  %348 = trunc i64 %343 to i32
  %349 = inttoptr i64 %345 to i32*
  %350 = load i32, i32* %349
  %351 = add i32 %350, %348
  %352 = zext i32 %351 to i64
  store i64 %352, i64* %RAX, align 8, !tbaa !2428
  %353 = icmp ult i32 %351, %348
  %354 = icmp ult i32 %351, %350
  %355 = or i1 %353, %354
  %356 = zext i1 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %356, i8* %357, align 1, !tbaa !2432
  %358 = and i32 %351, 255
  %359 = call i32 @llvm.ctpop.i32(i32 %358) #17
  %360 = trunc i32 %359 to i8
  %361 = and i8 %360, 1
  %362 = xor i8 %361, 1
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %362, i8* %363, align 1, !tbaa !2446
  %364 = xor i32 %350, %348
  %365 = xor i32 %364, %351
  %366 = lshr i32 %365, 4
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %368, i8* %369, align 1, !tbaa !2447
  %370 = icmp eq i32 %351, 0
  %371 = zext i1 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %371, i8* %372, align 1, !tbaa !2448
  %373 = lshr i32 %351, 31
  %374 = trunc i32 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %374, i8* %375, align 1, !tbaa !2449
  %376 = lshr i32 %348, 31
  %377 = lshr i32 %350, 31
  %378 = xor i32 %373, %376
  %379 = xor i32 %373, %377
  %380 = add nuw nsw i32 %378, %379
  %381 = icmp eq i32 %380, 2
  %382 = zext i1 %381 to i8
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %382, i8* %383, align 1, !tbaa !2450
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 40
  %386 = load i32, i32* %EAX
  %387 = zext i32 %386 to i64
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 3
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %385 to i32*
  store i32 %386, i32* %390
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 16
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 4
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to i64*
  %396 = load i64, i64* %395
  store i64 %396, i64* %RCX, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 28
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i32*
  %402 = load i32, i32* %401
  %403 = sext i32 %402 to i64
  store i64 %403, i64* %RDX, align 8, !tbaa !2428
  %404 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %405 = load i64, i64* %RCX
  %406 = load i64, i64* %RDX
  %407 = mul i64 %406, 8
  %408 = add i64 %407, %405
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 5
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to double*
  %412 = load double, double* %411
  %413 = bitcast i8* %404 to double*
  store double %412, double* %413, align 1, !tbaa !2452
  %414 = getelementptr inbounds i8, i8* %404, i64 8
  %415 = bitcast i8* %414 to double*
  store double 0.000000e+00, double* %415, align 1, !tbaa !2452
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 16
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i64*
  %421 = load i64, i64* %420
  store i64 %421, i64* %RCX, align 8, !tbaa !2428
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 32
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 4
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %423 to i32*
  %427 = load i32, i32* %426
  %428 = sext i32 %427 to i64
  store i64 %428, i64* %RDX, align 8, !tbaa !2428
  %429 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %430 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %431 = load i64, i64* %RCX
  %432 = load i64, i64* %RDX
  %433 = mul i64 %432, 8
  %434 = add i64 %433, %431
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = bitcast i8* %430 to double*
  %438 = load double, double* %437, align 1
  %439 = getelementptr inbounds i8, i8* %430, i64 8
  %440 = bitcast i8* %439 to i64*
  %441 = load i64, i64* %440, align 1
  %442 = inttoptr i64 %434 to double*
  %443 = load double, double* %442
  %444 = fadd double %438, %443
  %445 = bitcast i8* %429 to double*
  store double %444, double* %445, align 1, !tbaa !2452
  %446 = getelementptr inbounds i8, i8* %429, i64 8
  %447 = bitcast i8* %446 to i64*
  store i64 %441, i64* %447, align 1, !tbaa !2452
  %448 = load i64, i64* %RBP
  %449 = sub i64 %448, 56
  %450 = bitcast %union.vec128_t* %XMM0 to i8*
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 5
  store i64 %452, i64* %PC
  %453 = bitcast i8* %450 to double*
  %454 = load double, double* %453, align 1
  %455 = inttoptr i64 %449 to double*
  store double %454, double* %455
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 16
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 4
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i64*
  %461 = load i64, i64* %460
  store i64 %461, i64* %RCX, align 8, !tbaa !2428
  %462 = load i64, i64* %RBP
  %463 = sub i64 %462, 28
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  %466 = inttoptr i64 %463 to i32*
  %467 = load i32, i32* %466
  %468 = zext i32 %467 to i64
  store i64 %468, i64* %RAX, align 8, !tbaa !2428
  %469 = load i64, i64* %RAX
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 3
  store i64 %471, i64* %PC
  %472 = trunc i64 %469 to i32
  %473 = add i32 1, %472
  %474 = zext i32 %473 to i64
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = icmp ult i32 %473, %472
  %476 = icmp ult i32 %473, 1
  %477 = or i1 %475, %476
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %478, i8* %479, align 1, !tbaa !2432
  %480 = and i32 %473, 255
  %481 = call i32 @llvm.ctpop.i32(i32 %480) #17
  %482 = trunc i32 %481 to i8
  %483 = and i8 %482, 1
  %484 = xor i8 %483, 1
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %484, i8* %485, align 1, !tbaa !2446
  %486 = xor i64 1, %469
  %487 = trunc i64 %486 to i32
  %488 = xor i32 %487, %473
  %489 = lshr i32 %488, 4
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %491, i8* %492, align 1, !tbaa !2447
  %493 = icmp eq i32 %473, 0
  %494 = zext i1 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %494, i8* %495, align 1, !tbaa !2448
  %496 = lshr i32 %473, 31
  %497 = trunc i32 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %497, i8* %498, align 1, !tbaa !2449
  %499 = lshr i32 %472, 31
  %500 = xor i32 %496, %499
  %501 = add nuw nsw i32 %500, %496
  %502 = icmp eq i32 %501, 2
  %503 = zext i1 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %503, i8* %504, align 1, !tbaa !2450
  %505 = load i32, i32* %EAX
  %506 = zext i32 %505 to i64
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 3
  store i64 %508, i64* %PC
  %509 = shl i64 %506, 32
  %510 = ashr exact i64 %509, 32
  store i64 %510, i64* %RDX, align 8, !tbaa !2428
  %511 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %512 = load i64, i64* %RCX
  %513 = load i64, i64* %RDX
  %514 = mul i64 %513, 8
  %515 = add i64 %514, %512
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to double*
  %519 = load double, double* %518
  %520 = bitcast i8* %511 to double*
  store double %519, double* %520, align 1, !tbaa !2452
  %521 = getelementptr inbounds i8, i8* %511, i64 8
  %522 = bitcast i8* %521 to double*
  store double 0.000000e+00, double* %522, align 1, !tbaa !2452
  %523 = load i64, i64* %RBP
  %524 = sub i64 %523, 16
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 4
  store i64 %526, i64* %PC
  %527 = inttoptr i64 %524 to i64*
  %528 = load i64, i64* %527
  store i64 %528, i64* %RCX, align 8, !tbaa !2428
  %529 = load i64, i64* %RBP
  %530 = sub i64 %529, 32
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 3
  store i64 %532, i64* %PC
  %533 = inttoptr i64 %530 to i32*
  %534 = load i32, i32* %533
  %535 = zext i32 %534 to i64
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = load i64, i64* %RAX
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 3
  store i64 %538, i64* %PC
  %539 = trunc i64 %536 to i32
  %540 = add i32 1, %539
  %541 = zext i32 %540 to i64
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = icmp ult i32 %540, %539
  %543 = icmp ult i32 %540, 1
  %544 = or i1 %542, %543
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %545, i8* %546, align 1, !tbaa !2432
  %547 = and i32 %540, 255
  %548 = call i32 @llvm.ctpop.i32(i32 %547) #17
  %549 = trunc i32 %548 to i8
  %550 = and i8 %549, 1
  %551 = xor i8 %550, 1
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %551, i8* %552, align 1, !tbaa !2446
  %553 = xor i64 1, %536
  %554 = trunc i64 %553 to i32
  %555 = xor i32 %554, %540
  %556 = lshr i32 %555, 4
  %557 = trunc i32 %556 to i8
  %558 = and i8 %557, 1
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %558, i8* %559, align 1, !tbaa !2447
  %560 = icmp eq i32 %540, 0
  %561 = zext i1 %560 to i8
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %561, i8* %562, align 1, !tbaa !2448
  %563 = lshr i32 %540, 31
  %564 = trunc i32 %563 to i8
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %564, i8* %565, align 1, !tbaa !2449
  %566 = lshr i32 %539, 31
  %567 = xor i32 %563, %566
  %568 = add nuw nsw i32 %567, %563
  %569 = icmp eq i32 %568, 2
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %570, i8* %571, align 1, !tbaa !2450
  %572 = load i32, i32* %EAX
  %573 = zext i32 %572 to i64
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 3
  store i64 %575, i64* %PC
  %576 = shl i64 %573, 32
  %577 = ashr exact i64 %576, 32
  store i64 %577, i64* %RDX, align 8, !tbaa !2428
  %578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %579 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %580 = load i64, i64* %RCX
  %581 = load i64, i64* %RDX
  %582 = mul i64 %581, 8
  %583 = add i64 %582, %580
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  store i64 %585, i64* %PC
  %586 = bitcast i8* %579 to double*
  %587 = load double, double* %586, align 1
  %588 = getelementptr inbounds i8, i8* %579, i64 8
  %589 = bitcast i8* %588 to i64*
  %590 = load i64, i64* %589, align 1
  %591 = inttoptr i64 %583 to double*
  %592 = load double, double* %591
  %593 = fadd double %587, %592
  %594 = bitcast i8* %578 to double*
  store double %593, double* %594, align 1, !tbaa !2452
  %595 = getelementptr inbounds i8, i8* %578, i64 8
  %596 = bitcast i8* %595 to i64*
  store i64 %590, i64* %596, align 1, !tbaa !2452
  %597 = load i64, i64* %RBP
  %598 = sub i64 %597, 64
  %599 = bitcast %union.vec128_t* %XMM0 to i8*
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 5
  store i64 %601, i64* %PC
  %602 = bitcast i8* %599 to double*
  %603 = load double, double* %602, align 1
  %604 = inttoptr i64 %598 to double*
  store double %603, double* %604
  %605 = load i64, i64* %RBP
  %606 = sub i64 %605, 16
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 4
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i64*
  %610 = load i64, i64* %609
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 28
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 4
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i32*
  %616 = load i32, i32* %615
  %617 = sext i32 %616 to i64
  store i64 %617, i64* %RDX, align 8, !tbaa !2428
  %618 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %619 = load i64, i64* %RCX
  %620 = load i64, i64* %RDX
  %621 = mul i64 %620, 8
  %622 = add i64 %621, %619
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 5
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %622 to double*
  %626 = load double, double* %625
  %627 = bitcast i8* %618 to double*
  store double %626, double* %627, align 1, !tbaa !2452
  %628 = getelementptr inbounds i8, i8* %618, i64 8
  %629 = bitcast i8* %628 to double*
  store double 0.000000e+00, double* %629, align 1, !tbaa !2452
  %630 = load i64, i64* %RBP
  %631 = sub i64 %630, 16
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %631 to i64*
  %635 = load i64, i64* %634
  store i64 %635, i64* %RCX, align 8, !tbaa !2428
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 32
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 4
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640
  %642 = sext i32 %641 to i64
  store i64 %642, i64* %RDX, align 8, !tbaa !2428
  %643 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %644 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %645 = load i64, i64* %RCX
  %646 = load i64, i64* %RDX
  %647 = mul i64 %646, 8
  %648 = add i64 %647, %645
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 5
  store i64 %650, i64* %PC
  %651 = bitcast i8* %644 to double*
  %652 = load double, double* %651, align 1
  %653 = getelementptr inbounds i8, i8* %644, i64 8
  %654 = bitcast i8* %653 to i64*
  %655 = load i64, i64* %654, align 1
  %656 = inttoptr i64 %648 to double*
  %657 = load double, double* %656
  %658 = fsub double %652, %657
  %659 = bitcast i8* %643 to double*
  store double %658, double* %659, align 1, !tbaa !2452
  %660 = getelementptr inbounds i8, i8* %643, i64 8
  %661 = bitcast i8* %660 to i64*
  store i64 %655, i64* %661, align 1, !tbaa !2452
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 72
  %664 = bitcast %union.vec128_t* %XMM0 to i8*
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 5
  store i64 %666, i64* %PC
  %667 = bitcast i8* %664 to double*
  %668 = load double, double* %667, align 1
  %669 = inttoptr i64 %663 to double*
  store double %668, double* %669
  %670 = load i64, i64* %RBP
  %671 = sub i64 %670, 16
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC
  %674 = inttoptr i64 %671 to i64*
  %675 = load i64, i64* %674
  store i64 %675, i64* %RCX, align 8, !tbaa !2428
  %676 = load i64, i64* %RBP
  %677 = sub i64 %676, 28
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 3
  store i64 %679, i64* %PC
  %680 = inttoptr i64 %677 to i32*
  %681 = load i32, i32* %680
  %682 = zext i32 %681 to i64
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = load i64, i64* %RAX
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 3
  store i64 %685, i64* %PC
  %686 = trunc i64 %683 to i32
  %687 = add i32 1, %686
  %688 = zext i32 %687 to i64
  store i64 %688, i64* %RAX, align 8, !tbaa !2428
  %689 = icmp ult i32 %687, %686
  %690 = icmp ult i32 %687, 1
  %691 = or i1 %689, %690
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %692, i8* %693, align 1, !tbaa !2432
  %694 = and i32 %687, 255
  %695 = call i32 @llvm.ctpop.i32(i32 %694) #17
  %696 = trunc i32 %695 to i8
  %697 = and i8 %696, 1
  %698 = xor i8 %697, 1
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %698, i8* %699, align 1, !tbaa !2446
  %700 = xor i64 1, %683
  %701 = trunc i64 %700 to i32
  %702 = xor i32 %701, %687
  %703 = lshr i32 %702, 4
  %704 = trunc i32 %703 to i8
  %705 = and i8 %704, 1
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %705, i8* %706, align 1, !tbaa !2447
  %707 = icmp eq i32 %687, 0
  %708 = zext i1 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %708, i8* %709, align 1, !tbaa !2448
  %710 = lshr i32 %687, 31
  %711 = trunc i32 %710 to i8
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %711, i8* %712, align 1, !tbaa !2449
  %713 = lshr i32 %686, 31
  %714 = xor i32 %710, %713
  %715 = add nuw nsw i32 %714, %710
  %716 = icmp eq i32 %715, 2
  %717 = zext i1 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %717, i8* %718, align 1, !tbaa !2450
  %719 = load i32, i32* %EAX
  %720 = zext i32 %719 to i64
  %721 = load i64, i64* %PC
  %722 = add i64 %721, 3
  store i64 %722, i64* %PC
  %723 = shl i64 %720, 32
  %724 = ashr exact i64 %723, 32
  store i64 %724, i64* %RDX, align 8, !tbaa !2428
  %725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %726 = load i64, i64* %RCX
  %727 = load i64, i64* %RDX
  %728 = mul i64 %727, 8
  %729 = add i64 %728, %726
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 5
  store i64 %731, i64* %PC
  %732 = inttoptr i64 %729 to double*
  %733 = load double, double* %732
  %734 = bitcast i8* %725 to double*
  store double %733, double* %734, align 1, !tbaa !2452
  %735 = getelementptr inbounds i8, i8* %725, i64 8
  %736 = bitcast i8* %735 to double*
  store double 0.000000e+00, double* %736, align 1, !tbaa !2452
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 16
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 4
  store i64 %740, i64* %PC
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741
  store i64 %742, i64* %RCX, align 8, !tbaa !2428
  %743 = load i64, i64* %RBP
  %744 = sub i64 %743, 32
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 3
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %744 to i32*
  %748 = load i32, i32* %747
  %749 = zext i32 %748 to i64
  store i64 %749, i64* %RAX, align 8, !tbaa !2428
  %750 = load i64, i64* %RAX
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC
  %753 = trunc i64 %750 to i32
  %754 = add i32 1, %753
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RAX, align 8, !tbaa !2428
  %756 = icmp ult i32 %754, %753
  %757 = icmp ult i32 %754, 1
  %758 = or i1 %756, %757
  %759 = zext i1 %758 to i8
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %759, i8* %760, align 1, !tbaa !2432
  %761 = and i32 %754, 255
  %762 = call i32 @llvm.ctpop.i32(i32 %761) #17
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %765, i8* %766, align 1, !tbaa !2446
  %767 = xor i64 1, %750
  %768 = trunc i64 %767 to i32
  %769 = xor i32 %768, %754
  %770 = lshr i32 %769, 4
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %772, i8* %773, align 1, !tbaa !2447
  %774 = icmp eq i32 %754, 0
  %775 = zext i1 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %775, i8* %776, align 1, !tbaa !2448
  %777 = lshr i32 %754, 31
  %778 = trunc i32 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %778, i8* %779, align 1, !tbaa !2449
  %780 = lshr i32 %753, 31
  %781 = xor i32 %777, %780
  %782 = add nuw nsw i32 %781, %777
  %783 = icmp eq i32 %782, 2
  %784 = zext i1 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %784, i8* %785, align 1, !tbaa !2450
  %786 = load i32, i32* %EAX
  %787 = zext i32 %786 to i64
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = shl i64 %787, 32
  %791 = ashr exact i64 %790, 32
  store i64 %791, i64* %RDX, align 8, !tbaa !2428
  %792 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %793 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %794 = load i64, i64* %RCX
  %795 = load i64, i64* %RDX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, %794
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 5
  store i64 %799, i64* %PC
  %800 = bitcast i8* %793 to double*
  %801 = load double, double* %800, align 1
  %802 = getelementptr inbounds i8, i8* %793, i64 8
  %803 = bitcast i8* %802 to i64*
  %804 = load i64, i64* %803, align 1
  %805 = inttoptr i64 %797 to double*
  %806 = load double, double* %805
  %807 = fsub double %801, %806
  %808 = bitcast i8* %792 to double*
  store double %807, double* %808, align 1, !tbaa !2452
  %809 = getelementptr inbounds i8, i8* %792, i64 8
  %810 = bitcast i8* %809 to i64*
  store i64 %804, i64* %810, align 1, !tbaa !2452
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 80
  %813 = bitcast %union.vec128_t* %XMM0 to i8*
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 5
  store i64 %815, i64* %PC
  %816 = bitcast i8* %813 to double*
  %817 = load double, double* %816, align 1
  %818 = inttoptr i64 %812 to double*
  store double %817, double* %818
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 16
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 4
  store i64 %822, i64* %PC
  %823 = inttoptr i64 %820 to i64*
  %824 = load i64, i64* %823
  store i64 %824, i64* %RCX, align 8, !tbaa !2428
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 36
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 4
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to i32*
  %830 = load i32, i32* %829
  %831 = sext i32 %830 to i64
  store i64 %831, i64* %RDX, align 8, !tbaa !2428
  %832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %833 = load i64, i64* %RCX
  %834 = load i64, i64* %RDX
  %835 = mul i64 %834, 8
  %836 = add i64 %835, %833
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 5
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to double*
  %840 = load double, double* %839
  %841 = bitcast i8* %832 to double*
  store double %840, double* %841, align 1, !tbaa !2452
  %842 = getelementptr inbounds i8, i8* %832, i64 8
  %843 = bitcast i8* %842 to double*
  store double 0.000000e+00, double* %843, align 1, !tbaa !2452
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 16
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 4
  store i64 %847, i64* %PC
  %848 = inttoptr i64 %845 to i64*
  %849 = load i64, i64* %848
  store i64 %849, i64* %RCX, align 8, !tbaa !2428
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 40
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i32*
  %855 = load i32, i32* %854
  %856 = sext i32 %855 to i64
  store i64 %856, i64* %RDX, align 8, !tbaa !2428
  %857 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %858 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %859 = load i64, i64* %RCX
  %860 = load i64, i64* %RDX
  %861 = mul i64 %860, 8
  %862 = add i64 %861, %859
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 5
  store i64 %864, i64* %PC
  %865 = bitcast i8* %858 to double*
  %866 = load double, double* %865, align 1
  %867 = getelementptr inbounds i8, i8* %858, i64 8
  %868 = bitcast i8* %867 to i64*
  %869 = load i64, i64* %868, align 1
  %870 = inttoptr i64 %862 to double*
  %871 = load double, double* %870
  %872 = fadd double %866, %871
  %873 = bitcast i8* %857 to double*
  store double %872, double* %873, align 1, !tbaa !2452
  %874 = getelementptr inbounds i8, i8* %857, i64 8
  %875 = bitcast i8* %874 to i64*
  store i64 %869, i64* %875, align 1, !tbaa !2452
  %876 = load i64, i64* %RBP
  %877 = sub i64 %876, 88
  %878 = bitcast %union.vec128_t* %XMM0 to i8*
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 5
  store i64 %880, i64* %PC
  %881 = bitcast i8* %878 to double*
  %882 = load double, double* %881, align 1
  %883 = inttoptr i64 %877 to double*
  store double %882, double* %883
  %884 = load i64, i64* %RBP
  %885 = sub i64 %884, 16
  %886 = load i64, i64* %PC
  %887 = add i64 %886, 4
  store i64 %887, i64* %PC
  %888 = inttoptr i64 %885 to i64*
  %889 = load i64, i64* %888
  store i64 %889, i64* %RCX, align 8, !tbaa !2428
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 36
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 3
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i32*
  %895 = load i32, i32* %894
  %896 = zext i32 %895 to i64
  store i64 %896, i64* %RAX, align 8, !tbaa !2428
  %897 = load i64, i64* %RAX
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 3
  store i64 %899, i64* %PC
  %900 = trunc i64 %897 to i32
  %901 = add i32 1, %900
  %902 = zext i32 %901 to i64
  store i64 %902, i64* %RAX, align 8, !tbaa !2428
  %903 = icmp ult i32 %901, %900
  %904 = icmp ult i32 %901, 1
  %905 = or i1 %903, %904
  %906 = zext i1 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %906, i8* %907, align 1, !tbaa !2432
  %908 = and i32 %901, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #17
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = xor i64 1, %897
  %915 = trunc i64 %914 to i32
  %916 = xor i32 %915, %901
  %917 = lshr i32 %916, 4
  %918 = trunc i32 %917 to i8
  %919 = and i8 %918, 1
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %919, i8* %920, align 1, !tbaa !2447
  %921 = icmp eq i32 %901, 0
  %922 = zext i1 %921 to i8
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %922, i8* %923, align 1, !tbaa !2448
  %924 = lshr i32 %901, 31
  %925 = trunc i32 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %925, i8* %926, align 1, !tbaa !2449
  %927 = lshr i32 %900, 31
  %928 = xor i32 %924, %927
  %929 = add nuw nsw i32 %928, %924
  %930 = icmp eq i32 %929, 2
  %931 = zext i1 %930 to i8
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %931, i8* %932, align 1, !tbaa !2450
  %933 = load i32, i32* %EAX
  %934 = zext i32 %933 to i64
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 3
  store i64 %936, i64* %PC
  %937 = shl i64 %934, 32
  %938 = ashr exact i64 %937, 32
  store i64 %938, i64* %RDX, align 8, !tbaa !2428
  %939 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %940 = load i64, i64* %RCX
  %941 = load i64, i64* %RDX
  %942 = mul i64 %941, 8
  %943 = add i64 %942, %940
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 5
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %943 to double*
  %947 = load double, double* %946
  %948 = bitcast i8* %939 to double*
  store double %947, double* %948, align 1, !tbaa !2452
  %949 = getelementptr inbounds i8, i8* %939, i64 8
  %950 = bitcast i8* %949 to double*
  store double 0.000000e+00, double* %950, align 1, !tbaa !2452
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 16
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 4
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %RCX, align 8, !tbaa !2428
  %957 = load i64, i64* %RBP
  %958 = sub i64 %957, 40
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 3
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i32*
  %962 = load i32, i32* %961
  %963 = zext i32 %962 to i64
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = load i64, i64* %RAX
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 3
  store i64 %966, i64* %PC
  %967 = trunc i64 %964 to i32
  %968 = add i32 1, %967
  %969 = zext i32 %968 to i64
  store i64 %969, i64* %RAX, align 8, !tbaa !2428
  %970 = icmp ult i32 %968, %967
  %971 = icmp ult i32 %968, 1
  %972 = or i1 %970, %971
  %973 = zext i1 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %973, i8* %974, align 1, !tbaa !2432
  %975 = and i32 %968, 255
  %976 = call i32 @llvm.ctpop.i32(i32 %975) #17
  %977 = trunc i32 %976 to i8
  %978 = and i8 %977, 1
  %979 = xor i8 %978, 1
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %979, i8* %980, align 1, !tbaa !2446
  %981 = xor i64 1, %964
  %982 = trunc i64 %981 to i32
  %983 = xor i32 %982, %968
  %984 = lshr i32 %983, 4
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %986, i8* %987, align 1, !tbaa !2447
  %988 = icmp eq i32 %968, 0
  %989 = zext i1 %988 to i8
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %989, i8* %990, align 1, !tbaa !2448
  %991 = lshr i32 %968, 31
  %992 = trunc i32 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %992, i8* %993, align 1, !tbaa !2449
  %994 = lshr i32 %967, 31
  %995 = xor i32 %991, %994
  %996 = add nuw nsw i32 %995, %991
  %997 = icmp eq i32 %996, 2
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %998, i8* %999, align 1, !tbaa !2450
  %1000 = load i32, i32* %EAX
  %1001 = zext i32 %1000 to i64
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 3
  store i64 %1003, i64* %PC
  %1004 = shl i64 %1001, 32
  %1005 = ashr exact i64 %1004, 32
  store i64 %1005, i64* %RDX, align 8, !tbaa !2428
  %1006 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1008 = load i64, i64* %RCX
  %1009 = load i64, i64* %RDX
  %1010 = mul i64 %1009, 8
  %1011 = add i64 %1010, %1008
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 5
  store i64 %1013, i64* %PC
  %1014 = bitcast i8* %1007 to double*
  %1015 = load double, double* %1014, align 1
  %1016 = getelementptr inbounds i8, i8* %1007, i64 8
  %1017 = bitcast i8* %1016 to i64*
  %1018 = load i64, i64* %1017, align 1
  %1019 = inttoptr i64 %1011 to double*
  %1020 = load double, double* %1019
  %1021 = fadd double %1015, %1020
  %1022 = bitcast i8* %1006 to double*
  store double %1021, double* %1022, align 1, !tbaa !2452
  %1023 = getelementptr inbounds i8, i8* %1006, i64 8
  %1024 = bitcast i8* %1023 to i64*
  store i64 %1018, i64* %1024, align 1, !tbaa !2452
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 96
  %1027 = bitcast %union.vec128_t* %XMM0 to i8*
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 5
  store i64 %1029, i64* %PC
  %1030 = bitcast i8* %1027 to double*
  %1031 = load double, double* %1030, align 1
  %1032 = inttoptr i64 %1026 to double*
  store double %1031, double* %1032
  %1033 = load i64, i64* %RBP
  %1034 = sub i64 %1033, 16
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 4
  store i64 %1036, i64* %PC
  %1037 = inttoptr i64 %1034 to i64*
  %1038 = load i64, i64* %1037
  store i64 %1038, i64* %RCX, align 8, !tbaa !2428
  %1039 = load i64, i64* %RBP
  %1040 = sub i64 %1039, 36
  %1041 = load i64, i64* %PC
  %1042 = add i64 %1041, 4
  store i64 %1042, i64* %PC
  %1043 = inttoptr i64 %1040 to i32*
  %1044 = load i32, i32* %1043
  %1045 = sext i32 %1044 to i64
  store i64 %1045, i64* %RDX, align 8, !tbaa !2428
  %1046 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1047 = load i64, i64* %RCX
  %1048 = load i64, i64* %RDX
  %1049 = mul i64 %1048, 8
  %1050 = add i64 %1049, %1047
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 5
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to double*
  %1054 = load double, double* %1053
  %1055 = bitcast i8* %1046 to double*
  store double %1054, double* %1055, align 1, !tbaa !2452
  %1056 = getelementptr inbounds i8, i8* %1046, i64 8
  %1057 = bitcast i8* %1056 to double*
  store double 0.000000e+00, double* %1057, align 1, !tbaa !2452
  %1058 = load i64, i64* %RBP
  %1059 = sub i64 %1058, 16
  %1060 = load i64, i64* %PC
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC
  %1062 = inttoptr i64 %1059 to i64*
  %1063 = load i64, i64* %1062
  store i64 %1063, i64* %RCX, align 8, !tbaa !2428
  %1064 = load i64, i64* %RBP
  %1065 = sub i64 %1064, 40
  %1066 = load i64, i64* %PC
  %1067 = add i64 %1066, 4
  store i64 %1067, i64* %PC
  %1068 = inttoptr i64 %1065 to i32*
  %1069 = load i32, i32* %1068
  %1070 = sext i32 %1069 to i64
  store i64 %1070, i64* %RDX, align 8, !tbaa !2428
  %1071 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1073 = load i64, i64* %RCX
  %1074 = load i64, i64* %RDX
  %1075 = mul i64 %1074, 8
  %1076 = add i64 %1075, %1073
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  store i64 %1078, i64* %PC
  %1079 = bitcast i8* %1072 to double*
  %1080 = load double, double* %1079, align 1
  %1081 = getelementptr inbounds i8, i8* %1072, i64 8
  %1082 = bitcast i8* %1081 to i64*
  %1083 = load i64, i64* %1082, align 1
  %1084 = inttoptr i64 %1076 to double*
  %1085 = load double, double* %1084
  %1086 = fsub double %1080, %1085
  %1087 = bitcast i8* %1071 to double*
  store double %1086, double* %1087, align 1, !tbaa !2452
  %1088 = getelementptr inbounds i8, i8* %1071, i64 8
  %1089 = bitcast i8* %1088 to i64*
  store i64 %1083, i64* %1089, align 1, !tbaa !2452
  %1090 = load i64, i64* %RBP
  %1091 = sub i64 %1090, 104
  %1092 = bitcast %union.vec128_t* %XMM0 to i8*
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 5
  store i64 %1094, i64* %PC
  %1095 = bitcast i8* %1092 to double*
  %1096 = load double, double* %1095, align 1
  %1097 = inttoptr i64 %1091 to double*
  store double %1096, double* %1097
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 16
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i64*
  %1103 = load i64, i64* %1102
  store i64 %1103, i64* %RCX, align 8, !tbaa !2428
  %1104 = load i64, i64* %RBP
  %1105 = sub i64 %1104, 36
  %1106 = load i64, i64* %PC
  %1107 = add i64 %1106, 3
  store i64 %1107, i64* %PC
  %1108 = inttoptr i64 %1105 to i32*
  %1109 = load i32, i32* %1108
  %1110 = zext i32 %1109 to i64
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = load i64, i64* %RAX
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 3
  store i64 %1113, i64* %PC
  %1114 = trunc i64 %1111 to i32
  %1115 = add i32 1, %1114
  %1116 = zext i32 %1115 to i64
  store i64 %1116, i64* %RAX, align 8, !tbaa !2428
  %1117 = icmp ult i32 %1115, %1114
  %1118 = icmp ult i32 %1115, 1
  %1119 = or i1 %1117, %1118
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1120, i8* %1121, align 1, !tbaa !2432
  %1122 = and i32 %1115, 255
  %1123 = call i32 @llvm.ctpop.i32(i32 %1122) #17
  %1124 = trunc i32 %1123 to i8
  %1125 = and i8 %1124, 1
  %1126 = xor i8 %1125, 1
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1126, i8* %1127, align 1, !tbaa !2446
  %1128 = xor i64 1, %1111
  %1129 = trunc i64 %1128 to i32
  %1130 = xor i32 %1129, %1115
  %1131 = lshr i32 %1130, 4
  %1132 = trunc i32 %1131 to i8
  %1133 = and i8 %1132, 1
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1133, i8* %1134, align 1, !tbaa !2447
  %1135 = icmp eq i32 %1115, 0
  %1136 = zext i1 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1136, i8* %1137, align 1, !tbaa !2448
  %1138 = lshr i32 %1115, 31
  %1139 = trunc i32 %1138 to i8
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1139, i8* %1140, align 1, !tbaa !2449
  %1141 = lshr i32 %1114, 31
  %1142 = xor i32 %1138, %1141
  %1143 = add nuw nsw i32 %1142, %1138
  %1144 = icmp eq i32 %1143, 2
  %1145 = zext i1 %1144 to i8
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1145, i8* %1146, align 1, !tbaa !2450
  %1147 = load i32, i32* %EAX
  %1148 = zext i32 %1147 to i64
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 3
  store i64 %1150, i64* %PC
  %1151 = shl i64 %1148, 32
  %1152 = ashr exact i64 %1151, 32
  store i64 %1152, i64* %RDX, align 8, !tbaa !2428
  %1153 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1154 = load i64, i64* %RCX
  %1155 = load i64, i64* %RDX
  %1156 = mul i64 %1155, 8
  %1157 = add i64 %1156, %1154
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 5
  store i64 %1159, i64* %PC
  %1160 = inttoptr i64 %1157 to double*
  %1161 = load double, double* %1160
  %1162 = bitcast i8* %1153 to double*
  store double %1161, double* %1162, align 1, !tbaa !2452
  %1163 = getelementptr inbounds i8, i8* %1153, i64 8
  %1164 = bitcast i8* %1163 to double*
  store double 0.000000e+00, double* %1164, align 1, !tbaa !2452
  %1165 = load i64, i64* %RBP
  %1166 = sub i64 %1165, 16
  %1167 = load i64, i64* %PC
  %1168 = add i64 %1167, 4
  store i64 %1168, i64* %PC
  %1169 = inttoptr i64 %1166 to i64*
  %1170 = load i64, i64* %1169
  store i64 %1170, i64* %RCX, align 8, !tbaa !2428
  %1171 = load i64, i64* %RBP
  %1172 = sub i64 %1171, 40
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 3
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1172 to i32*
  %1176 = load i32, i32* %1175
  %1177 = zext i32 %1176 to i64
  store i64 %1177, i64* %RAX, align 8, !tbaa !2428
  %1178 = load i64, i64* %RAX
  %1179 = load i64, i64* %PC
  %1180 = add i64 %1179, 3
  store i64 %1180, i64* %PC
  %1181 = trunc i64 %1178 to i32
  %1182 = add i32 1, %1181
  %1183 = zext i32 %1182 to i64
  store i64 %1183, i64* %RAX, align 8, !tbaa !2428
  %1184 = icmp ult i32 %1182, %1181
  %1185 = icmp ult i32 %1182, 1
  %1186 = or i1 %1184, %1185
  %1187 = zext i1 %1186 to i8
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1187, i8* %1188, align 1, !tbaa !2432
  %1189 = and i32 %1182, 255
  %1190 = call i32 @llvm.ctpop.i32(i32 %1189) #17
  %1191 = trunc i32 %1190 to i8
  %1192 = and i8 %1191, 1
  %1193 = xor i8 %1192, 1
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1193, i8* %1194, align 1, !tbaa !2446
  %1195 = xor i64 1, %1178
  %1196 = trunc i64 %1195 to i32
  %1197 = xor i32 %1196, %1182
  %1198 = lshr i32 %1197, 4
  %1199 = trunc i32 %1198 to i8
  %1200 = and i8 %1199, 1
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1200, i8* %1201, align 1, !tbaa !2447
  %1202 = icmp eq i32 %1182, 0
  %1203 = zext i1 %1202 to i8
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1203, i8* %1204, align 1, !tbaa !2448
  %1205 = lshr i32 %1182, 31
  %1206 = trunc i32 %1205 to i8
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1206, i8* %1207, align 1, !tbaa !2449
  %1208 = lshr i32 %1181, 31
  %1209 = xor i32 %1205, %1208
  %1210 = add nuw nsw i32 %1209, %1205
  %1211 = icmp eq i32 %1210, 2
  %1212 = zext i1 %1211 to i8
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1212, i8* %1213, align 1, !tbaa !2450
  %1214 = load i32, i32* %EAX
  %1215 = zext i32 %1214 to i64
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 3
  store i64 %1217, i64* %PC
  %1218 = shl i64 %1215, 32
  %1219 = ashr exact i64 %1218, 32
  store i64 %1219, i64* %RDX, align 8, !tbaa !2428
  %1220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1222 = load i64, i64* %RCX
  %1223 = load i64, i64* %RDX
  %1224 = mul i64 %1223, 8
  %1225 = add i64 %1224, %1222
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 5
  store i64 %1227, i64* %PC
  %1228 = bitcast i8* %1221 to double*
  %1229 = load double, double* %1228, align 1
  %1230 = getelementptr inbounds i8, i8* %1221, i64 8
  %1231 = bitcast i8* %1230 to i64*
  %1232 = load i64, i64* %1231, align 1
  %1233 = inttoptr i64 %1225 to double*
  %1234 = load double, double* %1233
  %1235 = fsub double %1229, %1234
  %1236 = bitcast i8* %1220 to double*
  store double %1235, double* %1236, align 1, !tbaa !2452
  %1237 = getelementptr inbounds i8, i8* %1220, i64 8
  %1238 = bitcast i8* %1237 to i64*
  store i64 %1232, i64* %1238, align 1, !tbaa !2452
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 112
  %1241 = bitcast %union.vec128_t* %XMM0 to i8*
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 5
  store i64 %1243, i64* %PC
  %1244 = bitcast i8* %1241 to double*
  %1245 = load double, double* %1244, align 1
  %1246 = inttoptr i64 %1240 to double*
  store double %1245, double* %1246
  %1247 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1248 = load i64, i64* %RBP
  %1249 = sub i64 %1248, 56
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 5
  store i64 %1251, i64* %PC
  %1252 = inttoptr i64 %1249 to double*
  %1253 = load double, double* %1252
  %1254 = bitcast i8* %1247 to double*
  store double %1253, double* %1254, align 1, !tbaa !2452
  %1255 = getelementptr inbounds i8, i8* %1247, i64 8
  %1256 = bitcast i8* %1255 to double*
  store double 0.000000e+00, double* %1256, align 1, !tbaa !2452
  %1257 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1258 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 88
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 5
  store i64 %1262, i64* %PC
  %1263 = bitcast i8* %1258 to double*
  %1264 = load double, double* %1263, align 1
  %1265 = getelementptr inbounds i8, i8* %1258, i64 8
  %1266 = bitcast i8* %1265 to i64*
  %1267 = load i64, i64* %1266, align 1
  %1268 = inttoptr i64 %1260 to double*
  %1269 = load double, double* %1268
  %1270 = fadd double %1264, %1269
  %1271 = bitcast i8* %1257 to double*
  store double %1270, double* %1271, align 1, !tbaa !2452
  %1272 = getelementptr inbounds i8, i8* %1257, i64 8
  %1273 = bitcast i8* %1272 to i64*
  store i64 %1267, i64* %1273, align 1, !tbaa !2452
  %1274 = load i64, i64* %RBP
  %1275 = sub i64 %1274, 16
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 4
  store i64 %1277, i64* %PC
  %1278 = inttoptr i64 %1275 to i64*
  %1279 = load i64, i64* %1278
  store i64 %1279, i64* %RCX, align 8, !tbaa !2428
  %1280 = load i64, i64* %RBP
  %1281 = sub i64 %1280, 28
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 4
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1281 to i32*
  %1285 = load i32, i32* %1284
  %1286 = sext i32 %1285 to i64
  store i64 %1286, i64* %RDX, align 8, !tbaa !2428
  %1287 = load i64, i64* %RCX
  %1288 = load i64, i64* %RDX
  %1289 = mul i64 %1288, 8
  %1290 = add i64 %1289, %1287
  %1291 = bitcast %union.vec128_t* %XMM0 to i8*
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 5
  store i64 %1293, i64* %PC
  %1294 = bitcast i8* %1291 to double*
  %1295 = load double, double* %1294, align 1
  %1296 = inttoptr i64 %1290 to double*
  store double %1295, double* %1296
  %1297 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1298 = load i64, i64* %RBP
  %1299 = sub i64 %1298, 64
  %1300 = load i64, i64* %PC
  %1301 = add i64 %1300, 5
  store i64 %1301, i64* %PC
  %1302 = inttoptr i64 %1299 to double*
  %1303 = load double, double* %1302
  %1304 = bitcast i8* %1297 to double*
  store double %1303, double* %1304, align 1, !tbaa !2452
  %1305 = getelementptr inbounds i8, i8* %1297, i64 8
  %1306 = bitcast i8* %1305 to double*
  store double 0.000000e+00, double* %1306, align 1, !tbaa !2452
  %1307 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1308 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 96
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 5
  store i64 %1312, i64* %PC
  %1313 = bitcast i8* %1308 to double*
  %1314 = load double, double* %1313, align 1
  %1315 = getelementptr inbounds i8, i8* %1308, i64 8
  %1316 = bitcast i8* %1315 to i64*
  %1317 = load i64, i64* %1316, align 1
  %1318 = inttoptr i64 %1310 to double*
  %1319 = load double, double* %1318
  %1320 = fadd double %1314, %1319
  %1321 = bitcast i8* %1307 to double*
  store double %1320, double* %1321, align 1, !tbaa !2452
  %1322 = getelementptr inbounds i8, i8* %1307, i64 8
  %1323 = bitcast i8* %1322 to i64*
  store i64 %1317, i64* %1323, align 1, !tbaa !2452
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 16
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 4
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i64*
  %1329 = load i64, i64* %1328
  store i64 %1329, i64* %RCX, align 8, !tbaa !2428
  %1330 = load i64, i64* %RBP
  %1331 = sub i64 %1330, 28
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 3
  store i64 %1333, i64* %PC
  %1334 = inttoptr i64 %1331 to i32*
  %1335 = load i32, i32* %1334
  %1336 = zext i32 %1335 to i64
  store i64 %1336, i64* %RAX, align 8, !tbaa !2428
  %1337 = load i64, i64* %RAX
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 3
  store i64 %1339, i64* %PC
  %1340 = trunc i64 %1337 to i32
  %1341 = add i32 1, %1340
  %1342 = zext i32 %1341 to i64
  store i64 %1342, i64* %RAX, align 8, !tbaa !2428
  %1343 = icmp ult i32 %1341, %1340
  %1344 = icmp ult i32 %1341, 1
  %1345 = or i1 %1343, %1344
  %1346 = zext i1 %1345 to i8
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1346, i8* %1347, align 1, !tbaa !2432
  %1348 = and i32 %1341, 255
  %1349 = call i32 @llvm.ctpop.i32(i32 %1348) #17
  %1350 = trunc i32 %1349 to i8
  %1351 = and i8 %1350, 1
  %1352 = xor i8 %1351, 1
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1352, i8* %1353, align 1, !tbaa !2446
  %1354 = xor i64 1, %1337
  %1355 = trunc i64 %1354 to i32
  %1356 = xor i32 %1355, %1341
  %1357 = lshr i32 %1356, 4
  %1358 = trunc i32 %1357 to i8
  %1359 = and i8 %1358, 1
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1359, i8* %1360, align 1, !tbaa !2447
  %1361 = icmp eq i32 %1341, 0
  %1362 = zext i1 %1361 to i8
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1362, i8* %1363, align 1, !tbaa !2448
  %1364 = lshr i32 %1341, 31
  %1365 = trunc i32 %1364 to i8
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1365, i8* %1366, align 1, !tbaa !2449
  %1367 = lshr i32 %1340, 31
  %1368 = xor i32 %1364, %1367
  %1369 = add nuw nsw i32 %1368, %1364
  %1370 = icmp eq i32 %1369, 2
  %1371 = zext i1 %1370 to i8
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1371, i8* %1372, align 1, !tbaa !2450
  %1373 = load i32, i32* %EAX
  %1374 = zext i32 %1373 to i64
  %1375 = load i64, i64* %PC
  %1376 = add i64 %1375, 3
  store i64 %1376, i64* %PC
  %1377 = shl i64 %1374, 32
  %1378 = ashr exact i64 %1377, 32
  store i64 %1378, i64* %RDX, align 8, !tbaa !2428
  %1379 = load i64, i64* %RCX
  %1380 = load i64, i64* %RDX
  %1381 = mul i64 %1380, 8
  %1382 = add i64 %1381, %1379
  %1383 = bitcast %union.vec128_t* %XMM0 to i8*
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 5
  store i64 %1385, i64* %PC
  %1386 = bitcast i8* %1383 to double*
  %1387 = load double, double* %1386, align 1
  %1388 = inttoptr i64 %1382 to double*
  store double %1387, double* %1388
  %1389 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 56
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 5
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1391 to double*
  %1395 = load double, double* %1394
  %1396 = bitcast i8* %1389 to double*
  store double %1395, double* %1396, align 1, !tbaa !2452
  %1397 = getelementptr inbounds i8, i8* %1389, i64 8
  %1398 = bitcast i8* %1397 to double*
  store double 0.000000e+00, double* %1398, align 1, !tbaa !2452
  %1399 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1400 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 88
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 5
  store i64 %1404, i64* %PC
  %1405 = bitcast i8* %1400 to double*
  %1406 = load double, double* %1405, align 1
  %1407 = getelementptr inbounds i8, i8* %1400, i64 8
  %1408 = bitcast i8* %1407 to i64*
  %1409 = load i64, i64* %1408, align 1
  %1410 = inttoptr i64 %1402 to double*
  %1411 = load double, double* %1410
  %1412 = fsub double %1406, %1411
  %1413 = bitcast i8* %1399 to double*
  store double %1412, double* %1413, align 1, !tbaa !2452
  %1414 = getelementptr inbounds i8, i8* %1399, i64 8
  %1415 = bitcast i8* %1414 to i64*
  store i64 %1409, i64* %1415, align 1, !tbaa !2452
  %1416 = load i64, i64* %RBP
  %1417 = sub i64 %1416, 16
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 4
  store i64 %1419, i64* %PC
  %1420 = inttoptr i64 %1417 to i64*
  %1421 = load i64, i64* %1420
  store i64 %1421, i64* %RCX, align 8, !tbaa !2428
  %1422 = load i64, i64* %RBP
  %1423 = sub i64 %1422, 36
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 4
  store i64 %1425, i64* %PC
  %1426 = inttoptr i64 %1423 to i32*
  %1427 = load i32, i32* %1426
  %1428 = sext i32 %1427 to i64
  store i64 %1428, i64* %RDX, align 8, !tbaa !2428
  %1429 = load i64, i64* %RCX
  %1430 = load i64, i64* %RDX
  %1431 = mul i64 %1430, 8
  %1432 = add i64 %1431, %1429
  %1433 = bitcast %union.vec128_t* %XMM0 to i8*
  %1434 = load i64, i64* %PC
  %1435 = add i64 %1434, 5
  store i64 %1435, i64* %PC
  %1436 = bitcast i8* %1433 to double*
  %1437 = load double, double* %1436, align 1
  %1438 = inttoptr i64 %1432 to double*
  store double %1437, double* %1438
  %1439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1440 = load i64, i64* %RBP
  %1441 = sub i64 %1440, 64
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 5
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1441 to double*
  %1445 = load double, double* %1444
  %1446 = bitcast i8* %1439 to double*
  store double %1445, double* %1446, align 1, !tbaa !2452
  %1447 = getelementptr inbounds i8, i8* %1439, i64 8
  %1448 = bitcast i8* %1447 to double*
  store double 0.000000e+00, double* %1448, align 1, !tbaa !2452
  %1449 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1450 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1451 = load i64, i64* %RBP
  %1452 = sub i64 %1451, 96
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 5
  store i64 %1454, i64* %PC
  %1455 = bitcast i8* %1450 to double*
  %1456 = load double, double* %1455, align 1
  %1457 = getelementptr inbounds i8, i8* %1450, i64 8
  %1458 = bitcast i8* %1457 to i64*
  %1459 = load i64, i64* %1458, align 1
  %1460 = inttoptr i64 %1452 to double*
  %1461 = load double, double* %1460
  %1462 = fsub double %1456, %1461
  %1463 = bitcast i8* %1449 to double*
  store double %1462, double* %1463, align 1, !tbaa !2452
  %1464 = getelementptr inbounds i8, i8* %1449, i64 8
  %1465 = bitcast i8* %1464 to i64*
  store i64 %1459, i64* %1465, align 1, !tbaa !2452
  %1466 = load i64, i64* %RBP
  %1467 = sub i64 %1466, 16
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 4
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1467 to i64*
  %1471 = load i64, i64* %1470
  store i64 %1471, i64* %RCX, align 8, !tbaa !2428
  %1472 = load i64, i64* %RBP
  %1473 = sub i64 %1472, 36
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 3
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1473 to i32*
  %1477 = load i32, i32* %1476
  %1478 = zext i32 %1477 to i64
  store i64 %1478, i64* %RAX, align 8, !tbaa !2428
  %1479 = load i64, i64* %RAX
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 3
  store i64 %1481, i64* %PC
  %1482 = trunc i64 %1479 to i32
  %1483 = add i32 1, %1482
  %1484 = zext i32 %1483 to i64
  store i64 %1484, i64* %RAX, align 8, !tbaa !2428
  %1485 = icmp ult i32 %1483, %1482
  %1486 = icmp ult i32 %1483, 1
  %1487 = or i1 %1485, %1486
  %1488 = zext i1 %1487 to i8
  %1489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1488, i8* %1489, align 1, !tbaa !2432
  %1490 = and i32 %1483, 255
  %1491 = call i32 @llvm.ctpop.i32(i32 %1490) #17
  %1492 = trunc i32 %1491 to i8
  %1493 = and i8 %1492, 1
  %1494 = xor i8 %1493, 1
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1494, i8* %1495, align 1, !tbaa !2446
  %1496 = xor i64 1, %1479
  %1497 = trunc i64 %1496 to i32
  %1498 = xor i32 %1497, %1483
  %1499 = lshr i32 %1498, 4
  %1500 = trunc i32 %1499 to i8
  %1501 = and i8 %1500, 1
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1501, i8* %1502, align 1, !tbaa !2447
  %1503 = icmp eq i32 %1483, 0
  %1504 = zext i1 %1503 to i8
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1504, i8* %1505, align 1, !tbaa !2448
  %1506 = lshr i32 %1483, 31
  %1507 = trunc i32 %1506 to i8
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1507, i8* %1508, align 1, !tbaa !2449
  %1509 = lshr i32 %1482, 31
  %1510 = xor i32 %1506, %1509
  %1511 = add nuw nsw i32 %1510, %1506
  %1512 = icmp eq i32 %1511, 2
  %1513 = zext i1 %1512 to i8
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1513, i8* %1514, align 1, !tbaa !2450
  %1515 = load i32, i32* %EAX
  %1516 = zext i32 %1515 to i64
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 3
  store i64 %1518, i64* %PC
  %1519 = shl i64 %1516, 32
  %1520 = ashr exact i64 %1519, 32
  store i64 %1520, i64* %RDX, align 8, !tbaa !2428
  %1521 = load i64, i64* %RCX
  %1522 = load i64, i64* %RDX
  %1523 = mul i64 %1522, 8
  %1524 = add i64 %1523, %1521
  %1525 = bitcast %union.vec128_t* %XMM0 to i8*
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 5
  store i64 %1527, i64* %PC
  %1528 = bitcast i8* %1525 to double*
  %1529 = load double, double* %1528, align 1
  %1530 = inttoptr i64 %1524 to double*
  store double %1529, double* %1530
  %1531 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1532 = load i64, i64* %RBP
  %1533 = sub i64 %1532, 72
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 5
  store i64 %1535, i64* %PC
  %1536 = inttoptr i64 %1533 to double*
  %1537 = load double, double* %1536
  %1538 = bitcast i8* %1531 to double*
  store double %1537, double* %1538, align 1, !tbaa !2452
  %1539 = getelementptr inbounds i8, i8* %1531, i64 8
  %1540 = bitcast i8* %1539 to double*
  store double 0.000000e+00, double* %1540, align 1, !tbaa !2452
  %1541 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1542 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1543 = load i64, i64* %RBP
  %1544 = sub i64 %1543, 112
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 5
  store i64 %1546, i64* %PC
  %1547 = bitcast i8* %1542 to double*
  %1548 = load double, double* %1547, align 1
  %1549 = getelementptr inbounds i8, i8* %1542, i64 8
  %1550 = bitcast i8* %1549 to i64*
  %1551 = load i64, i64* %1550, align 1
  %1552 = inttoptr i64 %1544 to double*
  %1553 = load double, double* %1552
  %1554 = fsub double %1548, %1553
  %1555 = bitcast i8* %1541 to double*
  store double %1554, double* %1555, align 1, !tbaa !2452
  %1556 = getelementptr inbounds i8, i8* %1541, i64 8
  %1557 = bitcast i8* %1556 to i64*
  store i64 %1551, i64* %1557, align 1, !tbaa !2452
  %1558 = load i64, i64* %RBP
  %1559 = sub i64 %1558, 16
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 4
  store i64 %1561, i64* %PC
  %1562 = inttoptr i64 %1559 to i64*
  %1563 = load i64, i64* %1562
  store i64 %1563, i64* %RCX, align 8, !tbaa !2428
  %1564 = load i64, i64* %RBP
  %1565 = sub i64 %1564, 32
  %1566 = load i64, i64* %PC
  %1567 = add i64 %1566, 4
  store i64 %1567, i64* %PC
  %1568 = inttoptr i64 %1565 to i32*
  %1569 = load i32, i32* %1568
  %1570 = sext i32 %1569 to i64
  store i64 %1570, i64* %RDX, align 8, !tbaa !2428
  %1571 = load i64, i64* %RCX
  %1572 = load i64, i64* %RDX
  %1573 = mul i64 %1572, 8
  %1574 = add i64 %1573, %1571
  %1575 = bitcast %union.vec128_t* %XMM0 to i8*
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 5
  store i64 %1577, i64* %PC
  %1578 = bitcast i8* %1575 to double*
  %1579 = load double, double* %1578, align 1
  %1580 = inttoptr i64 %1574 to double*
  store double %1579, double* %1580
  %1581 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1582 = load i64, i64* %RBP
  %1583 = sub i64 %1582, 80
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 5
  store i64 %1585, i64* %PC
  %1586 = inttoptr i64 %1583 to double*
  %1587 = load double, double* %1586
  %1588 = bitcast i8* %1581 to double*
  store double %1587, double* %1588, align 1, !tbaa !2452
  %1589 = getelementptr inbounds i8, i8* %1581, i64 8
  %1590 = bitcast i8* %1589 to double*
  store double 0.000000e+00, double* %1590, align 1, !tbaa !2452
  %1591 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1592 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 104
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 5
  store i64 %1596, i64* %PC
  %1597 = bitcast i8* %1592 to double*
  %1598 = load double, double* %1597, align 1
  %1599 = getelementptr inbounds i8, i8* %1592, i64 8
  %1600 = bitcast i8* %1599 to i64*
  %1601 = load i64, i64* %1600, align 1
  %1602 = inttoptr i64 %1594 to double*
  %1603 = load double, double* %1602
  %1604 = fadd double %1598, %1603
  %1605 = bitcast i8* %1591 to double*
  store double %1604, double* %1605, align 1, !tbaa !2452
  %1606 = getelementptr inbounds i8, i8* %1591, i64 8
  %1607 = bitcast i8* %1606 to i64*
  store i64 %1601, i64* %1607, align 1, !tbaa !2452
  %1608 = load i64, i64* %RBP
  %1609 = sub i64 %1608, 16
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 4
  store i64 %1611, i64* %PC
  %1612 = inttoptr i64 %1609 to i64*
  %1613 = load i64, i64* %1612
  store i64 %1613, i64* %RCX, align 8, !tbaa !2428
  %1614 = load i64, i64* %RBP
  %1615 = sub i64 %1614, 32
  %1616 = load i64, i64* %PC
  %1617 = add i64 %1616, 3
  store i64 %1617, i64* %PC
  %1618 = inttoptr i64 %1615 to i32*
  %1619 = load i32, i32* %1618
  %1620 = zext i32 %1619 to i64
  store i64 %1620, i64* %RAX, align 8, !tbaa !2428
  %1621 = load i64, i64* %RAX
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 3
  store i64 %1623, i64* %PC
  %1624 = trunc i64 %1621 to i32
  %1625 = add i32 1, %1624
  %1626 = zext i32 %1625 to i64
  store i64 %1626, i64* %RAX, align 8, !tbaa !2428
  %1627 = icmp ult i32 %1625, %1624
  %1628 = icmp ult i32 %1625, 1
  %1629 = or i1 %1627, %1628
  %1630 = zext i1 %1629 to i8
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1630, i8* %1631, align 1, !tbaa !2432
  %1632 = and i32 %1625, 255
  %1633 = call i32 @llvm.ctpop.i32(i32 %1632) #17
  %1634 = trunc i32 %1633 to i8
  %1635 = and i8 %1634, 1
  %1636 = xor i8 %1635, 1
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1636, i8* %1637, align 1, !tbaa !2446
  %1638 = xor i64 1, %1621
  %1639 = trunc i64 %1638 to i32
  %1640 = xor i32 %1639, %1625
  %1641 = lshr i32 %1640, 4
  %1642 = trunc i32 %1641 to i8
  %1643 = and i8 %1642, 1
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1643, i8* %1644, align 1, !tbaa !2447
  %1645 = icmp eq i32 %1625, 0
  %1646 = zext i1 %1645 to i8
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1646, i8* %1647, align 1, !tbaa !2448
  %1648 = lshr i32 %1625, 31
  %1649 = trunc i32 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1649, i8* %1650, align 1, !tbaa !2449
  %1651 = lshr i32 %1624, 31
  %1652 = xor i32 %1648, %1651
  %1653 = add nuw nsw i32 %1652, %1648
  %1654 = icmp eq i32 %1653, 2
  %1655 = zext i1 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1655, i8* %1656, align 1, !tbaa !2450
  %1657 = load i32, i32* %EAX
  %1658 = zext i32 %1657 to i64
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 3
  store i64 %1660, i64* %PC
  %1661 = shl i64 %1658, 32
  %1662 = ashr exact i64 %1661, 32
  store i64 %1662, i64* %RDX, align 8, !tbaa !2428
  %1663 = load i64, i64* %RCX
  %1664 = load i64, i64* %RDX
  %1665 = mul i64 %1664, 8
  %1666 = add i64 %1665, %1663
  %1667 = bitcast %union.vec128_t* %XMM0 to i8*
  %1668 = load i64, i64* %PC
  %1669 = add i64 %1668, 5
  store i64 %1669, i64* %PC
  %1670 = bitcast i8* %1667 to double*
  %1671 = load double, double* %1670, align 1
  %1672 = inttoptr i64 %1666 to double*
  store double %1671, double* %1672
  %1673 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 72
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 5
  store i64 %1677, i64* %PC
  %1678 = inttoptr i64 %1675 to double*
  %1679 = load double, double* %1678
  %1680 = bitcast i8* %1673 to double*
  store double %1679, double* %1680, align 1, !tbaa !2452
  %1681 = getelementptr inbounds i8, i8* %1673, i64 8
  %1682 = bitcast i8* %1681 to double*
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1685 = load i64, i64* %RBP
  %1686 = sub i64 %1685, 112
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 5
  store i64 %1688, i64* %PC
  %1689 = bitcast i8* %1684 to double*
  %1690 = load double, double* %1689, align 1
  %1691 = getelementptr inbounds i8, i8* %1684, i64 8
  %1692 = bitcast i8* %1691 to i64*
  %1693 = load i64, i64* %1692, align 1
  %1694 = inttoptr i64 %1686 to double*
  %1695 = load double, double* %1694
  %1696 = fadd double %1690, %1695
  %1697 = bitcast i8* %1683 to double*
  store double %1696, double* %1697, align 1, !tbaa !2452
  %1698 = getelementptr inbounds i8, i8* %1683, i64 8
  %1699 = bitcast i8* %1698 to i64*
  store i64 %1693, i64* %1699, align 1, !tbaa !2452
  %1700 = load i64, i64* %RBP
  %1701 = sub i64 %1700, 16
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 4
  store i64 %1703, i64* %PC
  %1704 = inttoptr i64 %1701 to i64*
  %1705 = load i64, i64* %1704
  store i64 %1705, i64* %RCX, align 8, !tbaa !2428
  %1706 = load i64, i64* %RBP
  %1707 = sub i64 %1706, 40
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 4
  store i64 %1709, i64* %PC
  %1710 = inttoptr i64 %1707 to i32*
  %1711 = load i32, i32* %1710
  %1712 = sext i32 %1711 to i64
  store i64 %1712, i64* %RDX, align 8, !tbaa !2428
  %1713 = load i64, i64* %RCX
  %1714 = load i64, i64* %RDX
  %1715 = mul i64 %1714, 8
  %1716 = add i64 %1715, %1713
  %1717 = bitcast %union.vec128_t* %XMM0 to i8*
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 5
  store i64 %1719, i64* %PC
  %1720 = bitcast i8* %1717 to double*
  %1721 = load double, double* %1720, align 1
  %1722 = inttoptr i64 %1716 to double*
  store double %1721, double* %1722
  %1723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1724 = load i64, i64* %RBP
  %1725 = sub i64 %1724, 80
  %1726 = load i64, i64* %PC
  %1727 = add i64 %1726, 5
  store i64 %1727, i64* %PC
  %1728 = inttoptr i64 %1725 to double*
  %1729 = load double, double* %1728
  %1730 = bitcast i8* %1723 to double*
  store double %1729, double* %1730, align 1, !tbaa !2452
  %1731 = getelementptr inbounds i8, i8* %1723, i64 8
  %1732 = bitcast i8* %1731 to double*
  store double 0.000000e+00, double* %1732, align 1, !tbaa !2452
  %1733 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1734 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1735 = load i64, i64* %RBP
  %1736 = sub i64 %1735, 104
  %1737 = load i64, i64* %PC
  %1738 = add i64 %1737, 5
  store i64 %1738, i64* %PC
  %1739 = bitcast i8* %1734 to double*
  %1740 = load double, double* %1739, align 1
  %1741 = getelementptr inbounds i8, i8* %1734, i64 8
  %1742 = bitcast i8* %1741 to i64*
  %1743 = load i64, i64* %1742, align 1
  %1744 = inttoptr i64 %1736 to double*
  %1745 = load double, double* %1744
  %1746 = fsub double %1740, %1745
  %1747 = bitcast i8* %1733 to double*
  store double %1746, double* %1747, align 1, !tbaa !2452
  %1748 = getelementptr inbounds i8, i8* %1733, i64 8
  %1749 = bitcast i8* %1748 to i64*
  store i64 %1743, i64* %1749, align 1, !tbaa !2452
  %1750 = load i64, i64* %RBP
  %1751 = sub i64 %1750, 16
  %1752 = load i64, i64* %PC
  %1753 = add i64 %1752, 4
  store i64 %1753, i64* %PC
  %1754 = inttoptr i64 %1751 to i64*
  %1755 = load i64, i64* %1754
  store i64 %1755, i64* %RCX, align 8, !tbaa !2428
  %1756 = load i64, i64* %RBP
  %1757 = sub i64 %1756, 40
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 3
  store i64 %1759, i64* %PC
  %1760 = inttoptr i64 %1757 to i32*
  %1761 = load i32, i32* %1760
  %1762 = zext i32 %1761 to i64
  store i64 %1762, i64* %RAX, align 8, !tbaa !2428
  %1763 = load i64, i64* %RAX
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 3
  store i64 %1765, i64* %PC
  %1766 = trunc i64 %1763 to i32
  %1767 = add i32 1, %1766
  %1768 = zext i32 %1767 to i64
  store i64 %1768, i64* %RAX, align 8, !tbaa !2428
  %1769 = icmp ult i32 %1767, %1766
  %1770 = icmp ult i32 %1767, 1
  %1771 = or i1 %1769, %1770
  %1772 = zext i1 %1771 to i8
  %1773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1772, i8* %1773, align 1, !tbaa !2432
  %1774 = and i32 %1767, 255
  %1775 = call i32 @llvm.ctpop.i32(i32 %1774) #17
  %1776 = trunc i32 %1775 to i8
  %1777 = and i8 %1776, 1
  %1778 = xor i8 %1777, 1
  %1779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1778, i8* %1779, align 1, !tbaa !2446
  %1780 = xor i64 1, %1763
  %1781 = trunc i64 %1780 to i32
  %1782 = xor i32 %1781, %1767
  %1783 = lshr i32 %1782, 4
  %1784 = trunc i32 %1783 to i8
  %1785 = and i8 %1784, 1
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1785, i8* %1786, align 1, !tbaa !2447
  %1787 = icmp eq i32 %1767, 0
  %1788 = zext i1 %1787 to i8
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1788, i8* %1789, align 1, !tbaa !2448
  %1790 = lshr i32 %1767, 31
  %1791 = trunc i32 %1790 to i8
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1791, i8* %1792, align 1, !tbaa !2449
  %1793 = lshr i32 %1766, 31
  %1794 = xor i32 %1790, %1793
  %1795 = add nuw nsw i32 %1794, %1790
  %1796 = icmp eq i32 %1795, 2
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1797, i8* %1798, align 1, !tbaa !2450
  %1799 = load i32, i32* %EAX
  %1800 = zext i32 %1799 to i64
  %1801 = load i64, i64* %PC
  %1802 = add i64 %1801, 3
  store i64 %1802, i64* %PC
  %1803 = shl i64 %1800, 32
  %1804 = ashr exact i64 %1803, 32
  store i64 %1804, i64* %RDX, align 8, !tbaa !2428
  %1805 = load i64, i64* %RCX
  %1806 = load i64, i64* %RDX
  %1807 = mul i64 %1806, 8
  %1808 = add i64 %1807, %1805
  %1809 = bitcast %union.vec128_t* %XMM0 to i8*
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 5
  store i64 %1811, i64* %PC
  %1812 = bitcast i8* %1809 to double*
  %1813 = load double, double* %1812, align 1
  %1814 = inttoptr i64 %1808 to double*
  store double %1813, double* %1814
  %1815 = load i64, i64* %RBP
  %1816 = sub i64 %1815, 28
  %1817 = load i64, i64* %PC
  %1818 = add i64 %1817, 3
  store i64 %1818, i64* %PC
  %1819 = inttoptr i64 %1816 to i32*
  %1820 = load i32, i32* %1819
  %1821 = zext i32 %1820 to i64
  store i64 %1821, i64* %RAX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RAX
  %1823 = load i64, i64* %PC
  %1824 = add i64 %1823, 3
  store i64 %1824, i64* %PC
  %1825 = trunc i64 %1822 to i32
  %1826 = add i32 2, %1825
  %1827 = zext i32 %1826 to i64
  store i64 %1827, i64* %RAX, align 8, !tbaa !2428
  %1828 = icmp ult i32 %1826, %1825
  %1829 = icmp ult i32 %1826, 2
  %1830 = or i1 %1828, %1829
  %1831 = zext i1 %1830 to i8
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1831, i8* %1832, align 1, !tbaa !2432
  %1833 = and i32 %1826, 255
  %1834 = call i32 @llvm.ctpop.i32(i32 %1833) #17
  %1835 = trunc i32 %1834 to i8
  %1836 = and i8 %1835, 1
  %1837 = xor i8 %1836, 1
  %1838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1837, i8* %1838, align 1, !tbaa !2446
  %1839 = xor i64 2, %1822
  %1840 = trunc i64 %1839 to i32
  %1841 = xor i32 %1840, %1826
  %1842 = lshr i32 %1841, 4
  %1843 = trunc i32 %1842 to i8
  %1844 = and i8 %1843, 1
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1844, i8* %1845, align 1, !tbaa !2447
  %1846 = icmp eq i32 %1826, 0
  %1847 = zext i1 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1847, i8* %1848, align 1, !tbaa !2448
  %1849 = lshr i32 %1826, 31
  %1850 = trunc i32 %1849 to i8
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1850, i8* %1851, align 1, !tbaa !2449
  %1852 = lshr i32 %1825, 31
  %1853 = xor i32 %1849, %1852
  %1854 = add nuw nsw i32 %1853, %1849
  %1855 = icmp eq i32 %1854, 2
  %1856 = zext i1 %1855 to i8
  %1857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1856, i8* %1857, align 1, !tbaa !2450
  %1858 = load i64, i64* %RBP
  %1859 = sub i64 %1858, 28
  %1860 = load i32, i32* %EAX
  %1861 = zext i32 %1860 to i64
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 3
  store i64 %1863, i64* %PC
  %1864 = inttoptr i64 %1859 to i32*
  store i32 %1860, i32* %1864
  %1865 = load i64, i64* %PC
  %1866 = sub i64 %1865, 540
  %1867 = load i64, i64* %PC
  %1868 = add i64 %1867, 5
  store i64 %1868, i64* %PC
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1866, i64* %1869, align 8, !tbaa !2428
  br label %block_4018e6

block_4018d0:                                     ; preds = %block_4018cb, %block_401860
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401860 ], [ %MEMORY.2, %block_4018cb ]
  %1870 = load i64, i64* %RBP
  %1871 = sub i64 %1870, 44
  %1872 = load i64, i64* %PC
  %1873 = add i64 %1872, 3
  store i64 %1873, i64* %PC
  %1874 = inttoptr i64 %1871 to i32*
  %1875 = load i32, i32* %1874
  %1876 = zext i32 %1875 to i64
  store i64 %1876, i64* %RAX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RAX
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 3
  store i64 %1879, i64* %PC
  %1880 = and i64 %1877, 4294967295
  %1881 = shl i64 %1880, 1
  %1882 = trunc i64 %1881 to i32
  %1883 = icmp slt i32 %1882, 0
  %1884 = shl i32 %1882, 1
  %1885 = zext i32 %1884 to i64
  store i64 %1885, i64* %RAX, align 8, !tbaa !2428
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1887 = zext i1 %1883 to i8
  store i8 %1887, i8* %1886, align 1, !tbaa !2451
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1889 = and i32 %1884, 254
  %1890 = call i32 @llvm.ctpop.i32(i32 %1889) #17
  %1891 = trunc i32 %1890 to i8
  %1892 = and i8 %1891, 1
  %1893 = xor i8 %1892, 1
  store i8 %1893, i8* %1888, align 1, !tbaa !2451
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1894, align 1, !tbaa !2451
  %1895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1896 = icmp eq i32 %1884, 0
  %1897 = zext i1 %1896 to i8
  store i8 %1897, i8* %1895, align 1, !tbaa !2451
  %1898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1899 = lshr i32 %1884, 31
  %1900 = trunc i32 %1899 to i8
  store i8 %1900, i8* %1898, align 1, !tbaa !2451
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1901, align 1, !tbaa !2451
  %1902 = load i32, i32* %EAX
  %1903 = zext i32 %1902 to i64
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 4
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 3
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i32*
  %1909 = load i32, i32* %1908
  %1910 = sub i32 %1902, %1909
  %1911 = icmp ult i32 %1902, %1909
  %1912 = zext i1 %1911 to i8
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1912, i8* %1913, align 1, !tbaa !2432
  %1914 = and i32 %1910, 255
  %1915 = call i32 @llvm.ctpop.i32(i32 %1914) #17
  %1916 = trunc i32 %1915 to i8
  %1917 = and i8 %1916, 1
  %1918 = xor i8 %1917, 1
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1918, i8* %1919, align 1, !tbaa !2446
  %1920 = xor i32 %1909, %1902
  %1921 = xor i32 %1920, %1910
  %1922 = lshr i32 %1921, 4
  %1923 = trunc i32 %1922 to i8
  %1924 = and i8 %1923, 1
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1924, i8* %1925, align 1, !tbaa !2447
  %1926 = icmp eq i32 %1910, 0
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1927, i8* %1928, align 1, !tbaa !2448
  %1929 = lshr i32 %1910, 31
  %1930 = trunc i32 %1929 to i8
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1930, i8* %1931, align 1, !tbaa !2449
  %1932 = lshr i32 %1902, 31
  %1933 = lshr i32 %1909, 31
  %1934 = xor i32 %1933, %1932
  %1935 = xor i32 %1929, %1932
  %1936 = add nuw nsw i32 %1935, %1934
  %1937 = icmp eq i32 %1936, 2
  %1938 = zext i1 %1937 to i8
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1938, i8* %1939, align 1, !tbaa !2450
  %1940 = load i64, i64* %PC
  %1941 = add i64 %1940, 563
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 6
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 6
  store i64 %1945, i64* %PC
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1947 = load i8, i8* %1946, align 1, !tbaa !2448
  %1948 = icmp eq i8 %1947, 0
  %1949 = zext i1 %1948 to i8
  store i8 %1949, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1951 = select i1 %1948, i64 %1941, i64 %1943
  store i64 %1951, i64* %1950, align 8, !tbaa !2428
  %1952 = load i8, i8* %BRANCH_TAKEN
  %1953 = icmp eq i8 %1952, 1
  %1954 = load i64, i64* %RBP
  %1955 = sub i64 %1954, 28
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 7
  store i64 %1957, i64* %PC
  %1958 = inttoptr i64 %1955 to i32*
  store i32 0, i32* %1958
  br i1 %1953, label %block_401b13, label %block_4018e6

block_401bef:                                     ; preds = %block_401b13
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 5
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 5
  store i64 %1962, i64* %PC
  %1963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1960, i64* %1963, align 8, !tbaa !2428
  br label %block_401bf4

block_40189b:                                     ; preds = %block_401884, %block_4018aa
  %MEMORY.2 = phi %struct.Memory* [ %2940, %block_401884 ], [ %2746, %block_4018aa ]
  %1964 = load i64, i64* %RBP
  %1965 = sub i64 %1964, 44
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 3
  store i64 %1967, i64* %PC
  %1968 = inttoptr i64 %1965 to i32*
  %1969 = load i32, i32* %1968
  %1970 = zext i32 %1969 to i64
  store i64 %1970, i64* %RAX, align 8, !tbaa !2428
  %1971 = load i64, i64* %RAX
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 3
  store i64 %1973, i64* %PC
  %1974 = and i64 %1971, 4294967295
  %1975 = shl i64 %1974, 1
  %1976 = trunc i64 %1975 to i32
  %1977 = icmp slt i32 %1976, 0
  %1978 = shl i32 %1976, 1
  %1979 = zext i32 %1978 to i64
  store i64 %1979, i64* %RAX, align 8, !tbaa !2428
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1981 = zext i1 %1977 to i8
  store i8 %1981, i8* %1980, align 1, !tbaa !2451
  %1982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1983 = and i32 %1978, 254
  %1984 = call i32 @llvm.ctpop.i32(i32 %1983) #17
  %1985 = trunc i32 %1984 to i8
  %1986 = and i8 %1985, 1
  %1987 = xor i8 %1986, 1
  store i8 %1987, i8* %1982, align 1, !tbaa !2451
  %1988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1988, align 1, !tbaa !2451
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1990 = icmp eq i32 %1978, 0
  %1991 = zext i1 %1990 to i8
  store i8 %1991, i8* %1989, align 1, !tbaa !2451
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1993 = lshr i32 %1978, 31
  %1994 = trunc i32 %1993 to i8
  store i8 %1994, i8* %1992, align 1, !tbaa !2451
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1995, align 1, !tbaa !2451
  %1996 = load i32, i32* %EAX
  %1997 = zext i32 %1996 to i64
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 4
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 3
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i32*
  %2003 = load i32, i32* %2002
  %2004 = sub i32 %1996, %2003
  %2005 = icmp ult i32 %1996, %2003
  %2006 = zext i1 %2005 to i8
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2006, i8* %2007, align 1, !tbaa !2432
  %2008 = and i32 %2004, 255
  %2009 = call i32 @llvm.ctpop.i32(i32 %2008) #17
  %2010 = trunc i32 %2009 to i8
  %2011 = and i8 %2010, 1
  %2012 = xor i8 %2011, 1
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2012, i8* %2013, align 1, !tbaa !2446
  %2014 = xor i32 %2003, %1996
  %2015 = xor i32 %2014, %2004
  %2016 = lshr i32 %2015, 4
  %2017 = trunc i32 %2016 to i8
  %2018 = and i8 %2017, 1
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2018, i8* %2019, align 1, !tbaa !2447
  %2020 = icmp eq i32 %2004, 0
  %2021 = zext i1 %2020 to i8
  %2022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2021, i8* %2022, align 1, !tbaa !2448
  %2023 = lshr i32 %2004, 31
  %2024 = trunc i32 %2023 to i8
  %2025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2024, i8* %2025, align 1, !tbaa !2449
  %2026 = lshr i32 %1996, 31
  %2027 = lshr i32 %2003, 31
  %2028 = xor i32 %2027, %2026
  %2029 = xor i32 %2023, %2026
  %2030 = add nuw nsw i32 %2029, %2028
  %2031 = icmp eq i32 %2030, 2
  %2032 = zext i1 %2031 to i8
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2032, i8* %2033, align 1, !tbaa !2450
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 39
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 6
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 6
  store i64 %2039, i64* %PC
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2041 = load i8, i8* %2040, align 1, !tbaa !2449
  %2042 = icmp ne i8 %2041, 0
  %2043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2044 = load i8, i8* %2043, align 1, !tbaa !2450
  %2045 = icmp ne i8 %2044, 0
  %2046 = xor i1 %2042, %2045
  %2047 = xor i1 %2046, true
  %2048 = zext i1 %2047 to i8
  store i8 %2048, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2050 = select i1 %2046, i64 %2037, i64 %2035
  store i64 %2050, i64* %2049, align 8, !tbaa !2428
  %2051 = load i8, i8* %BRANCH_TAKEN
  %2052 = icmp eq i8 %2051, 1
  br i1 %2052, label %block_4018cb, label %block_4018aa

block_4018cb:                                     ; preds = %block_40189b
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 5
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 5
  store i64 %2056, i64* %PC
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2054, i64* %2057, align 8, !tbaa !2428
  br label %block_4018d0

block_401b1f:                                     ; preds = %block_401b13
  %2058 = load i64, i64* %RBP
  %2059 = sub i64 %2058, 28
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 3
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2059 to i32*
  %2063 = load i32, i32* %2062
  %2064 = zext i32 %2063 to i64
  store i64 %2064, i64* %RAX, align 8, !tbaa !2428
  %2065 = load i64, i64* %RAX
  %2066 = load i64, i64* %RBP
  %2067 = sub i64 %2066, 44
  %2068 = load i64, i64* %PC
  %2069 = add i64 %2068, 3
  store i64 %2069, i64* %PC
  %2070 = trunc i64 %2065 to i32
  %2071 = inttoptr i64 %2067 to i32*
  %2072 = load i32, i32* %2071
  %2073 = add i32 %2072, %2070
  %2074 = zext i32 %2073 to i64
  store i64 %2074, i64* %RAX, align 8, !tbaa !2428
  %2075 = icmp ult i32 %2073, %2070
  %2076 = icmp ult i32 %2073, %2072
  %2077 = or i1 %2075, %2076
  %2078 = zext i1 %2077 to i8
  %2079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2078, i8* %2079, align 1, !tbaa !2432
  %2080 = and i32 %2073, 255
  %2081 = call i32 @llvm.ctpop.i32(i32 %2080) #17
  %2082 = trunc i32 %2081 to i8
  %2083 = and i8 %2082, 1
  %2084 = xor i8 %2083, 1
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2084, i8* %2085, align 1, !tbaa !2446
  %2086 = xor i32 %2072, %2070
  %2087 = xor i32 %2086, %2073
  %2088 = lshr i32 %2087, 4
  %2089 = trunc i32 %2088 to i8
  %2090 = and i8 %2089, 1
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2090, i8* %2091, align 1, !tbaa !2447
  %2092 = icmp eq i32 %2073, 0
  %2093 = zext i1 %2092 to i8
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2093, i8* %2094, align 1, !tbaa !2448
  %2095 = lshr i32 %2073, 31
  %2096 = trunc i32 %2095 to i8
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2096, i8* %2097, align 1, !tbaa !2449
  %2098 = lshr i32 %2070, 31
  %2099 = lshr i32 %2072, 31
  %2100 = xor i32 %2095, %2098
  %2101 = xor i32 %2095, %2099
  %2102 = add nuw nsw i32 %2100, %2101
  %2103 = icmp eq i32 %2102, 2
  %2104 = zext i1 %2103 to i8
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2104, i8* %2105, align 1, !tbaa !2450
  %2106 = load i64, i64* %RBP
  %2107 = sub i64 %2106, 32
  %2108 = load i32, i32* %EAX
  %2109 = zext i32 %2108 to i64
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 3
  store i64 %2111, i64* %PC
  %2112 = inttoptr i64 %2107 to i32*
  store i32 %2108, i32* %2112
  %2113 = load i64, i64* %RBP
  %2114 = sub i64 %2113, 16
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 4
  store i64 %2116, i64* %PC
  %2117 = inttoptr i64 %2114 to i64*
  %2118 = load i64, i64* %2117
  store i64 %2118, i64* %RCX, align 8, !tbaa !2428
  %2119 = load i64, i64* %RBP
  %2120 = sub i64 %2119, 28
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 4
  store i64 %2122, i64* %PC
  %2123 = inttoptr i64 %2120 to i32*
  %2124 = load i32, i32* %2123
  %2125 = sext i32 %2124 to i64
  store i64 %2125, i64* %RDX, align 8, !tbaa !2428
  %2126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2127 = load i64, i64* %RCX
  %2128 = load i64, i64* %RDX
  %2129 = mul i64 %2128, 8
  %2130 = add i64 %2129, %2127
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 5
  store i64 %2132, i64* %PC
  %2133 = inttoptr i64 %2130 to double*
  %2134 = load double, double* %2133
  %2135 = bitcast i8* %2126 to double*
  store double %2134, double* %2135, align 1, !tbaa !2452
  %2136 = getelementptr inbounds i8, i8* %2126, i64 8
  %2137 = bitcast i8* %2136 to double*
  store double 0.000000e+00, double* %2137, align 1, !tbaa !2452
  %2138 = load i64, i64* %RBP
  %2139 = sub i64 %2138, 16
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 4
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2139 to i64*
  %2143 = load i64, i64* %2142
  store i64 %2143, i64* %RCX, align 8, !tbaa !2428
  %2144 = load i64, i64* %RBP
  %2145 = sub i64 %2144, 32
  %2146 = load i64, i64* %PC
  %2147 = add i64 %2146, 4
  store i64 %2147, i64* %PC
  %2148 = inttoptr i64 %2145 to i32*
  %2149 = load i32, i32* %2148
  %2150 = sext i32 %2149 to i64
  store i64 %2150, i64* %RDX, align 8, !tbaa !2428
  %2151 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2152 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2153 = load i64, i64* %RCX
  %2154 = load i64, i64* %RDX
  %2155 = mul i64 %2154, 8
  %2156 = add i64 %2155, %2153
  %2157 = load i64, i64* %PC
  %2158 = add i64 %2157, 5
  store i64 %2158, i64* %PC
  %2159 = bitcast i8* %2152 to double*
  %2160 = load double, double* %2159, align 1
  %2161 = getelementptr inbounds i8, i8* %2152, i64 8
  %2162 = bitcast i8* %2161 to i64*
  %2163 = load i64, i64* %2162, align 1
  %2164 = inttoptr i64 %2156 to double*
  %2165 = load double, double* %2164
  %2166 = fsub double %2160, %2165
  %2167 = bitcast i8* %2151 to double*
  store double %2166, double* %2167, align 1, !tbaa !2452
  %2168 = getelementptr inbounds i8, i8* %2151, i64 8
  %2169 = bitcast i8* %2168 to i64*
  store i64 %2163, i64* %2169, align 1, !tbaa !2452
  %2170 = load i64, i64* %RBP
  %2171 = sub i64 %2170, 56
  %2172 = bitcast %union.vec128_t* %XMM0 to i8*
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 5
  store i64 %2174, i64* %PC
  %2175 = bitcast i8* %2172 to double*
  %2176 = load double, double* %2175, align 1
  %2177 = inttoptr i64 %2171 to double*
  store double %2176, double* %2177
  %2178 = load i64, i64* %RBP
  %2179 = sub i64 %2178, 16
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 4
  store i64 %2181, i64* %PC
  %2182 = inttoptr i64 %2179 to i64*
  %2183 = load i64, i64* %2182
  store i64 %2183, i64* %RCX, align 8, !tbaa !2428
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 28
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 3
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i32*
  %2189 = load i32, i32* %2188
  %2190 = zext i32 %2189 to i64
  store i64 %2190, i64* %RAX, align 8, !tbaa !2428
  %2191 = load i64, i64* %RAX
  %2192 = load i64, i64* %PC
  %2193 = add i64 %2192, 3
  store i64 %2193, i64* %PC
  %2194 = trunc i64 %2191 to i32
  %2195 = add i32 1, %2194
  %2196 = zext i32 %2195 to i64
  store i64 %2196, i64* %RAX, align 8, !tbaa !2428
  %2197 = icmp ult i32 %2195, %2194
  %2198 = icmp ult i32 %2195, 1
  %2199 = or i1 %2197, %2198
  %2200 = zext i1 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2200, i8* %2201, align 1, !tbaa !2432
  %2202 = and i32 %2195, 255
  %2203 = call i32 @llvm.ctpop.i32(i32 %2202) #17
  %2204 = trunc i32 %2203 to i8
  %2205 = and i8 %2204, 1
  %2206 = xor i8 %2205, 1
  %2207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2206, i8* %2207, align 1, !tbaa !2446
  %2208 = xor i64 1, %2191
  %2209 = trunc i64 %2208 to i32
  %2210 = xor i32 %2209, %2195
  %2211 = lshr i32 %2210, 4
  %2212 = trunc i32 %2211 to i8
  %2213 = and i8 %2212, 1
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2213, i8* %2214, align 1, !tbaa !2447
  %2215 = icmp eq i32 %2195, 0
  %2216 = zext i1 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2216, i8* %2217, align 1, !tbaa !2448
  %2218 = lshr i32 %2195, 31
  %2219 = trunc i32 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2219, i8* %2220, align 1, !tbaa !2449
  %2221 = lshr i32 %2194, 31
  %2222 = xor i32 %2218, %2221
  %2223 = add nuw nsw i32 %2222, %2218
  %2224 = icmp eq i32 %2223, 2
  %2225 = zext i1 %2224 to i8
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2225, i8* %2226, align 1, !tbaa !2450
  %2227 = load i32, i32* %EAX
  %2228 = zext i32 %2227 to i64
  %2229 = load i64, i64* %PC
  %2230 = add i64 %2229, 3
  store i64 %2230, i64* %PC
  %2231 = shl i64 %2228, 32
  %2232 = ashr exact i64 %2231, 32
  store i64 %2232, i64* %RDX, align 8, !tbaa !2428
  %2233 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2234 = load i64, i64* %RCX
  %2235 = load i64, i64* %RDX
  %2236 = mul i64 %2235, 8
  %2237 = add i64 %2236, %2234
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 5
  store i64 %2239, i64* %PC
  %2240 = inttoptr i64 %2237 to double*
  %2241 = load double, double* %2240
  %2242 = bitcast i8* %2233 to double*
  store double %2241, double* %2242, align 1, !tbaa !2452
  %2243 = getelementptr inbounds i8, i8* %2233, i64 8
  %2244 = bitcast i8* %2243 to double*
  store double 0.000000e+00, double* %2244, align 1, !tbaa !2452
  %2245 = load i64, i64* %RBP
  %2246 = sub i64 %2245, 16
  %2247 = load i64, i64* %PC
  %2248 = add i64 %2247, 4
  store i64 %2248, i64* %PC
  %2249 = inttoptr i64 %2246 to i64*
  %2250 = load i64, i64* %2249
  store i64 %2250, i64* %RCX, align 8, !tbaa !2428
  %2251 = load i64, i64* %RBP
  %2252 = sub i64 %2251, 32
  %2253 = load i64, i64* %PC
  %2254 = add i64 %2253, 3
  store i64 %2254, i64* %PC
  %2255 = inttoptr i64 %2252 to i32*
  %2256 = load i32, i32* %2255
  %2257 = zext i32 %2256 to i64
  store i64 %2257, i64* %RAX, align 8, !tbaa !2428
  %2258 = load i64, i64* %RAX
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 3
  store i64 %2260, i64* %PC
  %2261 = trunc i64 %2258 to i32
  %2262 = add i32 1, %2261
  %2263 = zext i32 %2262 to i64
  store i64 %2263, i64* %RAX, align 8, !tbaa !2428
  %2264 = icmp ult i32 %2262, %2261
  %2265 = icmp ult i32 %2262, 1
  %2266 = or i1 %2264, %2265
  %2267 = zext i1 %2266 to i8
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2267, i8* %2268, align 1, !tbaa !2432
  %2269 = and i32 %2262, 255
  %2270 = call i32 @llvm.ctpop.i32(i32 %2269) #17
  %2271 = trunc i32 %2270 to i8
  %2272 = and i8 %2271, 1
  %2273 = xor i8 %2272, 1
  %2274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2273, i8* %2274, align 1, !tbaa !2446
  %2275 = xor i64 1, %2258
  %2276 = trunc i64 %2275 to i32
  %2277 = xor i32 %2276, %2262
  %2278 = lshr i32 %2277, 4
  %2279 = trunc i32 %2278 to i8
  %2280 = and i8 %2279, 1
  %2281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2280, i8* %2281, align 1, !tbaa !2447
  %2282 = icmp eq i32 %2262, 0
  %2283 = zext i1 %2282 to i8
  %2284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2283, i8* %2284, align 1, !tbaa !2448
  %2285 = lshr i32 %2262, 31
  %2286 = trunc i32 %2285 to i8
  %2287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2286, i8* %2287, align 1, !tbaa !2449
  %2288 = lshr i32 %2261, 31
  %2289 = xor i32 %2285, %2288
  %2290 = add nuw nsw i32 %2289, %2285
  %2291 = icmp eq i32 %2290, 2
  %2292 = zext i1 %2291 to i8
  %2293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2292, i8* %2293, align 1, !tbaa !2450
  %2294 = load i32, i32* %EAX
  %2295 = zext i32 %2294 to i64
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 3
  store i64 %2297, i64* %PC
  %2298 = shl i64 %2295, 32
  %2299 = ashr exact i64 %2298, 32
  store i64 %2299, i64* %RDX, align 8, !tbaa !2428
  %2300 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2301 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2302 = load i64, i64* %RCX
  %2303 = load i64, i64* %RDX
  %2304 = mul i64 %2303, 8
  %2305 = add i64 %2304, %2302
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 5
  store i64 %2307, i64* %PC
  %2308 = bitcast i8* %2301 to double*
  %2309 = load double, double* %2308, align 1
  %2310 = getelementptr inbounds i8, i8* %2301, i64 8
  %2311 = bitcast i8* %2310 to i64*
  %2312 = load i64, i64* %2311, align 1
  %2313 = inttoptr i64 %2305 to double*
  %2314 = load double, double* %2313
  %2315 = fsub double %2309, %2314
  %2316 = bitcast i8* %2300 to double*
  store double %2315, double* %2316, align 1, !tbaa !2452
  %2317 = getelementptr inbounds i8, i8* %2300, i64 8
  %2318 = bitcast i8* %2317 to i64*
  store i64 %2312, i64* %2318, align 1, !tbaa !2452
  %2319 = load i64, i64* %RBP
  %2320 = sub i64 %2319, 64
  %2321 = bitcast %union.vec128_t* %XMM0 to i8*
  %2322 = load i64, i64* %PC
  %2323 = add i64 %2322, 5
  store i64 %2323, i64* %PC
  %2324 = bitcast i8* %2321 to double*
  %2325 = load double, double* %2324, align 1
  %2326 = inttoptr i64 %2320 to double*
  store double %2325, double* %2326
  %2327 = load i64, i64* %RBP
  %2328 = sub i64 %2327, 16
  %2329 = load i64, i64* %PC
  %2330 = add i64 %2329, 4
  store i64 %2330, i64* %PC
  %2331 = inttoptr i64 %2328 to i64*
  %2332 = load i64, i64* %2331
  store i64 %2332, i64* %RCX, align 8, !tbaa !2428
  %2333 = load i64, i64* %RBP
  %2334 = sub i64 %2333, 32
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2334 to i32*
  %2338 = load i32, i32* %2337
  %2339 = sext i32 %2338 to i64
  store i64 %2339, i64* %RDX, align 8, !tbaa !2428
  %2340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2341 = load i64, i64* %RCX
  %2342 = load i64, i64* %RDX
  %2343 = mul i64 %2342, 8
  %2344 = add i64 %2343, %2341
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 5
  store i64 %2346, i64* %PC
  %2347 = inttoptr i64 %2344 to double*
  %2348 = load double, double* %2347
  %2349 = bitcast i8* %2340 to double*
  store double %2348, double* %2349, align 1, !tbaa !2452
  %2350 = getelementptr inbounds i8, i8* %2340, i64 8
  %2351 = bitcast i8* %2350 to double*
  store double 0.000000e+00, double* %2351, align 1, !tbaa !2452
  %2352 = load i64, i64* %RBP
  %2353 = sub i64 %2352, 16
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 4
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2353 to i64*
  %2357 = load i64, i64* %2356
  store i64 %2357, i64* %RCX, align 8, !tbaa !2428
  %2358 = load i64, i64* %RBP
  %2359 = sub i64 %2358, 28
  %2360 = load i64, i64* %PC
  %2361 = add i64 %2360, 4
  store i64 %2361, i64* %PC
  %2362 = inttoptr i64 %2359 to i32*
  %2363 = load i32, i32* %2362
  %2364 = sext i32 %2363 to i64
  store i64 %2364, i64* %RDX, align 8, !tbaa !2428
  %2365 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2366 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2367 = load i64, i64* %RCX
  %2368 = load i64, i64* %RDX
  %2369 = mul i64 %2368, 8
  %2370 = add i64 %2369, %2367
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  store i64 %2372, i64* %PC
  %2373 = bitcast i8* %2366 to double*
  %2374 = load double, double* %2373, align 1
  %2375 = getelementptr inbounds i8, i8* %2366, i64 8
  %2376 = bitcast i8* %2375 to i64*
  %2377 = load i64, i64* %2376, align 1
  %2378 = inttoptr i64 %2370 to double*
  %2379 = load double, double* %2378
  %2380 = fadd double %2374, %2379
  %2381 = bitcast i8* %2365 to double*
  store double %2380, double* %2381, align 1, !tbaa !2452
  %2382 = getelementptr inbounds i8, i8* %2365, i64 8
  %2383 = bitcast i8* %2382 to i64*
  store i64 %2377, i64* %2383, align 1, !tbaa !2452
  %2384 = load i64, i64* %RCX
  %2385 = load i64, i64* %RDX
  %2386 = mul i64 %2385, 8
  %2387 = add i64 %2386, %2384
  %2388 = bitcast %union.vec128_t* %XMM0 to i8*
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 5
  store i64 %2390, i64* %PC
  %2391 = bitcast i8* %2388 to double*
  %2392 = load double, double* %2391, align 1
  %2393 = inttoptr i64 %2387 to double*
  store double %2392, double* %2393
  %2394 = load i64, i64* %RBP
  %2395 = sub i64 %2394, 16
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 4
  store i64 %2397, i64* %PC
  %2398 = inttoptr i64 %2395 to i64*
  %2399 = load i64, i64* %2398
  store i64 %2399, i64* %RCX, align 8, !tbaa !2428
  %2400 = load i64, i64* %RBP
  %2401 = sub i64 %2400, 32
  %2402 = load i64, i64* %PC
  %2403 = add i64 %2402, 3
  store i64 %2403, i64* %PC
  %2404 = inttoptr i64 %2401 to i32*
  %2405 = load i32, i32* %2404
  %2406 = zext i32 %2405 to i64
  store i64 %2406, i64* %RAX, align 8, !tbaa !2428
  %2407 = load i64, i64* %RAX
  %2408 = load i64, i64* %PC
  %2409 = add i64 %2408, 3
  store i64 %2409, i64* %PC
  %2410 = trunc i64 %2407 to i32
  %2411 = add i32 1, %2410
  %2412 = zext i32 %2411 to i64
  store i64 %2412, i64* %RAX, align 8, !tbaa !2428
  %2413 = icmp ult i32 %2411, %2410
  %2414 = icmp ult i32 %2411, 1
  %2415 = or i1 %2413, %2414
  %2416 = zext i1 %2415 to i8
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2416, i8* %2417, align 1, !tbaa !2432
  %2418 = and i32 %2411, 255
  %2419 = call i32 @llvm.ctpop.i32(i32 %2418) #17
  %2420 = trunc i32 %2419 to i8
  %2421 = and i8 %2420, 1
  %2422 = xor i8 %2421, 1
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2422, i8* %2423, align 1, !tbaa !2446
  %2424 = xor i64 1, %2407
  %2425 = trunc i64 %2424 to i32
  %2426 = xor i32 %2425, %2411
  %2427 = lshr i32 %2426, 4
  %2428 = trunc i32 %2427 to i8
  %2429 = and i8 %2428, 1
  %2430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2429, i8* %2430, align 1, !tbaa !2447
  %2431 = icmp eq i32 %2411, 0
  %2432 = zext i1 %2431 to i8
  %2433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2432, i8* %2433, align 1, !tbaa !2448
  %2434 = lshr i32 %2411, 31
  %2435 = trunc i32 %2434 to i8
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2435, i8* %2436, align 1, !tbaa !2449
  %2437 = lshr i32 %2410, 31
  %2438 = xor i32 %2434, %2437
  %2439 = add nuw nsw i32 %2438, %2434
  %2440 = icmp eq i32 %2439, 2
  %2441 = zext i1 %2440 to i8
  %2442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2441, i8* %2442, align 1, !tbaa !2450
  %2443 = load i32, i32* %EAX
  %2444 = zext i32 %2443 to i64
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 3
  store i64 %2446, i64* %PC
  %2447 = shl i64 %2444, 32
  %2448 = ashr exact i64 %2447, 32
  store i64 %2448, i64* %RDX, align 8, !tbaa !2428
  %2449 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2450 = load i64, i64* %RCX
  %2451 = load i64, i64* %RDX
  %2452 = mul i64 %2451, 8
  %2453 = add i64 %2452, %2450
  %2454 = load i64, i64* %PC
  %2455 = add i64 %2454, 5
  store i64 %2455, i64* %PC
  %2456 = inttoptr i64 %2453 to double*
  %2457 = load double, double* %2456
  %2458 = bitcast i8* %2449 to double*
  store double %2457, double* %2458, align 1, !tbaa !2452
  %2459 = getelementptr inbounds i8, i8* %2449, i64 8
  %2460 = bitcast i8* %2459 to double*
  store double 0.000000e+00, double* %2460, align 1, !tbaa !2452
  %2461 = load i64, i64* %RBP
  %2462 = sub i64 %2461, 16
  %2463 = load i64, i64* %PC
  %2464 = add i64 %2463, 4
  store i64 %2464, i64* %PC
  %2465 = inttoptr i64 %2462 to i64*
  %2466 = load i64, i64* %2465
  store i64 %2466, i64* %RCX, align 8, !tbaa !2428
  %2467 = load i64, i64* %RBP
  %2468 = sub i64 %2467, 28
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 3
  store i64 %2470, i64* %PC
  %2471 = inttoptr i64 %2468 to i32*
  %2472 = load i32, i32* %2471
  %2473 = zext i32 %2472 to i64
  store i64 %2473, i64* %RAX, align 8, !tbaa !2428
  %2474 = load i64, i64* %RAX
  %2475 = load i64, i64* %PC
  %2476 = add i64 %2475, 3
  store i64 %2476, i64* %PC
  %2477 = trunc i64 %2474 to i32
  %2478 = add i32 1, %2477
  %2479 = zext i32 %2478 to i64
  store i64 %2479, i64* %RAX, align 8, !tbaa !2428
  %2480 = icmp ult i32 %2478, %2477
  %2481 = icmp ult i32 %2478, 1
  %2482 = or i1 %2480, %2481
  %2483 = zext i1 %2482 to i8
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2483, i8* %2484, align 1, !tbaa !2432
  %2485 = and i32 %2478, 255
  %2486 = call i32 @llvm.ctpop.i32(i32 %2485) #17
  %2487 = trunc i32 %2486 to i8
  %2488 = and i8 %2487, 1
  %2489 = xor i8 %2488, 1
  %2490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2489, i8* %2490, align 1, !tbaa !2446
  %2491 = xor i64 1, %2474
  %2492 = trunc i64 %2491 to i32
  %2493 = xor i32 %2492, %2478
  %2494 = lshr i32 %2493, 4
  %2495 = trunc i32 %2494 to i8
  %2496 = and i8 %2495, 1
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2496, i8* %2497, align 1, !tbaa !2447
  %2498 = icmp eq i32 %2478, 0
  %2499 = zext i1 %2498 to i8
  %2500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2499, i8* %2500, align 1, !tbaa !2448
  %2501 = lshr i32 %2478, 31
  %2502 = trunc i32 %2501 to i8
  %2503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2502, i8* %2503, align 1, !tbaa !2449
  %2504 = lshr i32 %2477, 31
  %2505 = xor i32 %2501, %2504
  %2506 = add nuw nsw i32 %2505, %2501
  %2507 = icmp eq i32 %2506, 2
  %2508 = zext i1 %2507 to i8
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2508, i8* %2509, align 1, !tbaa !2450
  %2510 = load i32, i32* %EAX
  %2511 = zext i32 %2510 to i64
  %2512 = load i64, i64* %PC
  %2513 = add i64 %2512, 3
  store i64 %2513, i64* %PC
  %2514 = shl i64 %2511, 32
  %2515 = ashr exact i64 %2514, 32
  store i64 %2515, i64* %RDX, align 8, !tbaa !2428
  %2516 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2517 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2518 = load i64, i64* %RCX
  %2519 = load i64, i64* %RDX
  %2520 = mul i64 %2519, 8
  %2521 = add i64 %2520, %2518
  %2522 = load i64, i64* %PC
  %2523 = add i64 %2522, 5
  store i64 %2523, i64* %PC
  %2524 = bitcast i8* %2517 to double*
  %2525 = load double, double* %2524, align 1
  %2526 = getelementptr inbounds i8, i8* %2517, i64 8
  %2527 = bitcast i8* %2526 to i64*
  %2528 = load i64, i64* %2527, align 1
  %2529 = inttoptr i64 %2521 to double*
  %2530 = load double, double* %2529
  %2531 = fadd double %2525, %2530
  %2532 = bitcast i8* %2516 to double*
  store double %2531, double* %2532, align 1, !tbaa !2452
  %2533 = getelementptr inbounds i8, i8* %2516, i64 8
  %2534 = bitcast i8* %2533 to i64*
  store i64 %2528, i64* %2534, align 1, !tbaa !2452
  %2535 = load i64, i64* %RCX
  %2536 = load i64, i64* %RDX
  %2537 = mul i64 %2536, 8
  %2538 = add i64 %2537, %2535
  %2539 = bitcast %union.vec128_t* %XMM0 to i8*
  %2540 = load i64, i64* %PC
  %2541 = add i64 %2540, 5
  store i64 %2541, i64* %PC
  %2542 = bitcast i8* %2539 to double*
  %2543 = load double, double* %2542, align 1
  %2544 = inttoptr i64 %2538 to double*
  store double %2543, double* %2544
  %2545 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2546 = load i64, i64* %RBP
  %2547 = sub i64 %2546, 56
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 5
  store i64 %2549, i64* %PC
  %2550 = inttoptr i64 %2547 to double*
  %2551 = load double, double* %2550
  %2552 = bitcast i8* %2545 to double*
  store double %2551, double* %2552, align 1, !tbaa !2452
  %2553 = getelementptr inbounds i8, i8* %2545, i64 8
  %2554 = bitcast i8* %2553 to double*
  store double 0.000000e+00, double* %2554, align 1, !tbaa !2452
  %2555 = load i64, i64* %RBP
  %2556 = sub i64 %2555, 16
  %2557 = load i64, i64* %PC
  %2558 = add i64 %2557, 4
  store i64 %2558, i64* %PC
  %2559 = inttoptr i64 %2556 to i64*
  %2560 = load i64, i64* %2559
  store i64 %2560, i64* %RCX, align 8, !tbaa !2428
  %2561 = load i64, i64* %RBP
  %2562 = sub i64 %2561, 32
  %2563 = load i64, i64* %PC
  %2564 = add i64 %2563, 4
  store i64 %2564, i64* %PC
  %2565 = inttoptr i64 %2562 to i32*
  %2566 = load i32, i32* %2565
  %2567 = sext i32 %2566 to i64
  store i64 %2567, i64* %RDX, align 8, !tbaa !2428
  %2568 = load i64, i64* %RCX
  %2569 = load i64, i64* %RDX
  %2570 = mul i64 %2569, 8
  %2571 = add i64 %2570, %2568
  %2572 = bitcast %union.vec128_t* %XMM0 to i8*
  %2573 = load i64, i64* %PC
  %2574 = add i64 %2573, 5
  store i64 %2574, i64* %PC
  %2575 = bitcast i8* %2572 to double*
  %2576 = load double, double* %2575, align 1
  %2577 = inttoptr i64 %2571 to double*
  store double %2576, double* %2577
  %2578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2579 = load i64, i64* %RBP
  %2580 = sub i64 %2579, 64
  %2581 = load i64, i64* %PC
  %2582 = add i64 %2581, 5
  store i64 %2582, i64* %PC
  %2583 = inttoptr i64 %2580 to double*
  %2584 = load double, double* %2583
  %2585 = bitcast i8* %2578 to double*
  store double %2584, double* %2585, align 1, !tbaa !2452
  %2586 = getelementptr inbounds i8, i8* %2578, i64 8
  %2587 = bitcast i8* %2586 to double*
  store double 0.000000e+00, double* %2587, align 1, !tbaa !2452
  %2588 = load i64, i64* %RBP
  %2589 = sub i64 %2588, 16
  %2590 = load i64, i64* %PC
  %2591 = add i64 %2590, 4
  store i64 %2591, i64* %PC
  %2592 = inttoptr i64 %2589 to i64*
  %2593 = load i64, i64* %2592
  store i64 %2593, i64* %RCX, align 8, !tbaa !2428
  %2594 = load i64, i64* %RBP
  %2595 = sub i64 %2594, 32
  %2596 = load i64, i64* %PC
  %2597 = add i64 %2596, 3
  store i64 %2597, i64* %PC
  %2598 = inttoptr i64 %2595 to i32*
  %2599 = load i32, i32* %2598
  %2600 = zext i32 %2599 to i64
  store i64 %2600, i64* %RAX, align 8, !tbaa !2428
  %2601 = load i64, i64* %RAX
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 3
  store i64 %2603, i64* %PC
  %2604 = trunc i64 %2601 to i32
  %2605 = add i32 1, %2604
  %2606 = zext i32 %2605 to i64
  store i64 %2606, i64* %RAX, align 8, !tbaa !2428
  %2607 = icmp ult i32 %2605, %2604
  %2608 = icmp ult i32 %2605, 1
  %2609 = or i1 %2607, %2608
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2610, i8* %2611, align 1, !tbaa !2432
  %2612 = and i32 %2605, 255
  %2613 = call i32 @llvm.ctpop.i32(i32 %2612) #17
  %2614 = trunc i32 %2613 to i8
  %2615 = and i8 %2614, 1
  %2616 = xor i8 %2615, 1
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2616, i8* %2617, align 1, !tbaa !2446
  %2618 = xor i64 1, %2601
  %2619 = trunc i64 %2618 to i32
  %2620 = xor i32 %2619, %2605
  %2621 = lshr i32 %2620, 4
  %2622 = trunc i32 %2621 to i8
  %2623 = and i8 %2622, 1
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2623, i8* %2624, align 1, !tbaa !2447
  %2625 = icmp eq i32 %2605, 0
  %2626 = zext i1 %2625 to i8
  %2627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2626, i8* %2627, align 1, !tbaa !2448
  %2628 = lshr i32 %2605, 31
  %2629 = trunc i32 %2628 to i8
  %2630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2629, i8* %2630, align 1, !tbaa !2449
  %2631 = lshr i32 %2604, 31
  %2632 = xor i32 %2628, %2631
  %2633 = add nuw nsw i32 %2632, %2628
  %2634 = icmp eq i32 %2633, 2
  %2635 = zext i1 %2634 to i8
  %2636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2635, i8* %2636, align 1, !tbaa !2450
  %2637 = load i32, i32* %EAX
  %2638 = zext i32 %2637 to i64
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 3
  store i64 %2640, i64* %PC
  %2641 = shl i64 %2638, 32
  %2642 = ashr exact i64 %2641, 32
  store i64 %2642, i64* %RDX, align 8, !tbaa !2428
  %2643 = load i64, i64* %RCX
  %2644 = load i64, i64* %RDX
  %2645 = mul i64 %2644, 8
  %2646 = add i64 %2645, %2643
  %2647 = bitcast %union.vec128_t* %XMM0 to i8*
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 5
  store i64 %2649, i64* %PC
  %2650 = bitcast i8* %2647 to double*
  %2651 = load double, double* %2650, align 1
  %2652 = inttoptr i64 %2646 to double*
  store double %2651, double* %2652
  %2653 = load i64, i64* %RBP
  %2654 = sub i64 %2653, 28
  %2655 = load i64, i64* %PC
  %2656 = add i64 %2655, 3
  store i64 %2656, i64* %PC
  %2657 = inttoptr i64 %2654 to i32*
  %2658 = load i32, i32* %2657
  %2659 = zext i32 %2658 to i64
  store i64 %2659, i64* %RAX, align 8, !tbaa !2428
  %2660 = load i64, i64* %RAX
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 3
  store i64 %2662, i64* %PC
  %2663 = trunc i64 %2660 to i32
  %2664 = add i32 2, %2663
  %2665 = zext i32 %2664 to i64
  store i64 %2665, i64* %RAX, align 8, !tbaa !2428
  %2666 = icmp ult i32 %2664, %2663
  %2667 = icmp ult i32 %2664, 2
  %2668 = or i1 %2666, %2667
  %2669 = zext i1 %2668 to i8
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2669, i8* %2670, align 1, !tbaa !2432
  %2671 = and i32 %2664, 255
  %2672 = call i32 @llvm.ctpop.i32(i32 %2671) #17
  %2673 = trunc i32 %2672 to i8
  %2674 = and i8 %2673, 1
  %2675 = xor i8 %2674, 1
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2675, i8* %2676, align 1, !tbaa !2446
  %2677 = xor i64 2, %2660
  %2678 = trunc i64 %2677 to i32
  %2679 = xor i32 %2678, %2664
  %2680 = lshr i32 %2679, 4
  %2681 = trunc i32 %2680 to i8
  %2682 = and i8 %2681, 1
  %2683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2682, i8* %2683, align 1, !tbaa !2447
  %2684 = icmp eq i32 %2664, 0
  %2685 = zext i1 %2684 to i8
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2685, i8* %2686, align 1, !tbaa !2448
  %2687 = lshr i32 %2664, 31
  %2688 = trunc i32 %2687 to i8
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2688, i8* %2689, align 1, !tbaa !2449
  %2690 = lshr i32 %2663, 31
  %2691 = xor i32 %2687, %2690
  %2692 = add nuw nsw i32 %2691, %2687
  %2693 = icmp eq i32 %2692, 2
  %2694 = zext i1 %2693 to i8
  %2695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2694, i8* %2695, align 1, !tbaa !2450
  %2696 = load i64, i64* %RBP
  %2697 = sub i64 %2696, 28
  %2698 = load i32, i32* %EAX
  %2699 = zext i32 %2698 to i64
  %2700 = load i64, i64* %PC
  %2701 = add i64 %2700, 3
  store i64 %2701, i64* %PC
  %2702 = inttoptr i64 %2697 to i32*
  store i32 %2698, i32* %2702
  %2703 = load i64, i64* %PC
  %2704 = sub i64 %2703, 215
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 5
  store i64 %2706, i64* %PC
  %2707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2704, i64* %2707, align 8, !tbaa !2428
  br label %block_401b13

block_4018aa:                                     ; preds = %block_40189b
  %2708 = load i64, i64* %RBP
  %2709 = sub i64 %2708, 4
  %2710 = load i64, i64* %PC
  %2711 = add i64 %2710, 3
  store i64 %2711, i64* %PC
  %2712 = inttoptr i64 %2709 to i32*
  %2713 = load i32, i32* %2712
  %2714 = zext i32 %2713 to i64
  store i64 %2714, i64* %RDI, align 8, !tbaa !2428
  %2715 = load i64, i64* %RBP
  %2716 = sub i64 %2715, 44
  %2717 = load i64, i64* %PC
  %2718 = add i64 %2717, 3
  store i64 %2718, i64* %PC
  %2719 = inttoptr i64 %2716 to i32*
  %2720 = load i32, i32* %2719
  %2721 = zext i32 %2720 to i64
  store i64 %2721, i64* %RSI, align 8, !tbaa !2428
  %2722 = load i64, i64* %RBP
  %2723 = sub i64 %2722, 16
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 4
  store i64 %2725, i64* %PC
  %2726 = inttoptr i64 %2723 to i64*
  %2727 = load i64, i64* %2726
  store i64 %2727, i64* %RDX, align 8, !tbaa !2428
  %2728 = load i64, i64* %RBP
  %2729 = sub i64 %2728, 24
  %2730 = load i64, i64* %PC
  %2731 = add i64 %2730, 4
  store i64 %2731, i64* %PC
  %2732 = inttoptr i64 %2729 to i64*
  %2733 = load i64, i64* %2732
  store i64 %2733, i64* %RCX, align 8, !tbaa !2428
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 6760
  %2736 = load i64, i64* %PC
  %2737 = add i64 %2736, 5
  %2738 = load i64, i64* %PC
  %2739 = add i64 %2738, 5
  store i64 %2739, i64* %PC
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2741 = load i64, i64* %2740, align 8, !tbaa !2428
  %2742 = add i64 %2741, -8
  %2743 = inttoptr i64 %2742 to i64*
  store i64 %2737, i64* %2743
  store i64 %2742, i64* %2740, align 8, !tbaa !2428
  %2744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2735, i64* %2744, align 8, !tbaa !2428
  %2745 = load i64, i64* %PC
  %2746 = call %struct.Memory* @sub_403320_cftmdl(%struct.State* %0, i64 %2745, %struct.Memory* %MEMORY.2)
  %2747 = load i64, i64* %RBP
  %2748 = sub i64 %2747, 44
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 3
  store i64 %2750, i64* %PC
  %2751 = inttoptr i64 %2748 to i32*
  %2752 = load i32, i32* %2751
  %2753 = zext i32 %2752 to i64
  store i64 %2753, i64* %RSI, align 8, !tbaa !2428
  %2754 = load i64, i64* %RSI
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 3
  store i64 %2756, i64* %PC
  %2757 = and i64 %2754, 4294967295
  %2758 = shl i64 %2757, 1
  %2759 = trunc i64 %2758 to i32
  %2760 = icmp slt i32 %2759, 0
  %2761 = shl i32 %2759, 1
  %2762 = zext i32 %2761 to i64
  store i64 %2762, i64* %RSI, align 8, !tbaa !2428
  %2763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2764 = zext i1 %2760 to i8
  store i8 %2764, i8* %2763, align 1, !tbaa !2451
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2766 = and i32 %2761, 254
  %2767 = call i32 @llvm.ctpop.i32(i32 %2766) #17
  %2768 = trunc i32 %2767 to i8
  %2769 = and i8 %2768, 1
  %2770 = xor i8 %2769, 1
  store i8 %2770, i8* %2765, align 1, !tbaa !2451
  %2771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2771, align 1, !tbaa !2451
  %2772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2773 = icmp eq i32 %2761, 0
  %2774 = zext i1 %2773 to i8
  store i8 %2774, i8* %2772, align 1, !tbaa !2451
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2776 = lshr i32 %2761, 31
  %2777 = trunc i32 %2776 to i8
  store i8 %2777, i8* %2775, align 1, !tbaa !2451
  %2778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2778, align 1, !tbaa !2451
  %2779 = load i64, i64* %RBP
  %2780 = sub i64 %2779, 44
  %2781 = load i32, i32* %ESI
  %2782 = zext i32 %2781 to i64
  %2783 = load i64, i64* %PC
  %2784 = add i64 %2783, 3
  store i64 %2784, i64* %PC
  %2785 = inttoptr i64 %2780 to i32*
  store i32 %2781, i32* %2785
  %2786 = load i64, i64* %PC
  %2787 = sub i64 %2786, 43
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 5
  store i64 %2789, i64* %PC
  %2790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2787, i64* %2790, align 8, !tbaa !2428
  br label %block_40189b

block_401b07:                                     ; preds = %block_4018e6
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 237
  %2793 = load i64, i64* %PC
  %2794 = add i64 %2793, 5
  store i64 %2794, i64* %PC
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2792, i64* %2795, align 8, !tbaa !2428
  br label %block_401bf4

block_401bf4:                                     ; preds = %block_401b07, %block_401bef
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_401bef ], [ %MEMORY.4, %block_401b07 ]
  %2796 = load i64, i64* %RSP
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 4
  store i64 %2798, i64* %PC
  %2799 = add i64 112, %2796
  store i64 %2799, i64* %RSP, align 8, !tbaa !2428
  %2800 = icmp ult i64 %2799, %2796
  %2801 = icmp ult i64 %2799, 112
  %2802 = or i1 %2800, %2801
  %2803 = zext i1 %2802 to i8
  %2804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2803, i8* %2804, align 1, !tbaa !2432
  %2805 = trunc i64 %2799 to i32
  %2806 = and i32 %2805, 255
  %2807 = call i32 @llvm.ctpop.i32(i32 %2806) #17
  %2808 = trunc i32 %2807 to i8
  %2809 = and i8 %2808, 1
  %2810 = xor i8 %2809, 1
  %2811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2810, i8* %2811, align 1, !tbaa !2446
  %2812 = xor i64 112, %2796
  %2813 = xor i64 %2812, %2799
  %2814 = lshr i64 %2813, 4
  %2815 = trunc i64 %2814 to i8
  %2816 = and i8 %2815, 1
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2816, i8* %2817, align 1, !tbaa !2447
  %2818 = icmp eq i64 %2799, 0
  %2819 = zext i1 %2818 to i8
  %2820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2819, i8* %2820, align 1, !tbaa !2448
  %2821 = lshr i64 %2799, 63
  %2822 = trunc i64 %2821 to i8
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2822, i8* %2823, align 1, !tbaa !2449
  %2824 = lshr i64 %2796, 63
  %2825 = xor i64 %2821, %2824
  %2826 = add nuw nsw i64 %2825, %2821
  %2827 = icmp eq i64 %2826, 2
  %2828 = zext i1 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2828, i8* %2829, align 1, !tbaa !2450
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 1
  store i64 %2831, i64* %PC
  %2832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2833 = load i64, i64* %2832, align 8, !tbaa !2428
  %2834 = add i64 %2833, 8
  %2835 = inttoptr i64 %2833 to i64*
  %2836 = load i64, i64* %2835
  store i64 %2836, i64* %RBP, align 8, !tbaa !2428
  store i64 %2834, i64* %2832, align 8, !tbaa !2428
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 1
  store i64 %2838, i64* %PC
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2841 = load i64, i64* %2840, align 8, !tbaa !2428
  %2842 = inttoptr i64 %2841 to i64*
  %2843 = load i64, i64* %2842
  store i64 %2843, i64* %2839, align 8, !tbaa !2428
  %2844 = add i64 %2841, 8
  store i64 %2844, i64* %2840, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_4018e6:                                     ; preds = %block_4018d0, %block_4018f2
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.1, %block_4018d0 ], [ %MEMORY.4, %block_4018f2 ]
  %2845 = load i64, i64* %RBP
  %2846 = sub i64 %2845, 28
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 3
  store i64 %2848, i64* %PC
  %2849 = inttoptr i64 %2846 to i32*
  %2850 = load i32, i32* %2849
  %2851 = zext i32 %2850 to i64
  store i64 %2851, i64* %RAX, align 8, !tbaa !2428
  %2852 = load i32, i32* %EAX
  %2853 = zext i32 %2852 to i64
  %2854 = load i64, i64* %RBP
  %2855 = sub i64 %2854, 44
  %2856 = load i64, i64* %PC
  %2857 = add i64 %2856, 3
  store i64 %2857, i64* %PC
  %2858 = inttoptr i64 %2855 to i32*
  %2859 = load i32, i32* %2858
  %2860 = sub i32 %2852, %2859
  %2861 = icmp ult i32 %2852, %2859
  %2862 = zext i1 %2861 to i8
  %2863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2862, i8* %2863, align 1, !tbaa !2432
  %2864 = and i32 %2860, 255
  %2865 = call i32 @llvm.ctpop.i32(i32 %2864) #17
  %2866 = trunc i32 %2865 to i8
  %2867 = and i8 %2866, 1
  %2868 = xor i8 %2867, 1
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2868, i8* %2869, align 1, !tbaa !2446
  %2870 = xor i32 %2859, %2852
  %2871 = xor i32 %2870, %2860
  %2872 = lshr i32 %2871, 4
  %2873 = trunc i32 %2872 to i8
  %2874 = and i8 %2873, 1
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2874, i8* %2875, align 1, !tbaa !2447
  %2876 = icmp eq i32 %2860, 0
  %2877 = zext i1 %2876 to i8
  %2878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2877, i8* %2878, align 1, !tbaa !2448
  %2879 = lshr i32 %2860, 31
  %2880 = trunc i32 %2879 to i8
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2880, i8* %2881, align 1, !tbaa !2449
  %2882 = lshr i32 %2852, 31
  %2883 = lshr i32 %2859, 31
  %2884 = xor i32 %2883, %2882
  %2885 = xor i32 %2879, %2882
  %2886 = add nuw nsw i32 %2885, %2884
  %2887 = icmp eq i32 %2886, 2
  %2888 = zext i1 %2887 to i8
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2888, i8* %2889, align 1, !tbaa !2450
  %2890 = load i64, i64* %PC
  %2891 = add i64 %2890, 539
  %2892 = load i64, i64* %PC
  %2893 = add i64 %2892, 6
  %2894 = load i64, i64* %PC
  %2895 = add i64 %2894, 6
  store i64 %2895, i64* %PC
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2897 = load i8, i8* %2896, align 1, !tbaa !2449
  %2898 = icmp ne i8 %2897, 0
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2900 = load i8, i8* %2899, align 1, !tbaa !2450
  %2901 = icmp ne i8 %2900, 0
  %2902 = xor i1 %2898, %2901
  %2903 = xor i1 %2902, true
  %2904 = zext i1 %2903 to i8
  store i8 %2904, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2906 = select i1 %2902, i64 %2893, i64 %2891
  store i64 %2906, i64* %2905, align 8, !tbaa !2428
  %2907 = load i8, i8* %BRANCH_TAKEN
  %2908 = icmp eq i8 %2907, 1
  br i1 %2908, label %block_401b07, label %block_4018f2

block_401884:                                     ; preds = %block_401860
  %2909 = load i64, i64* %RBP
  %2910 = sub i64 %2909, 4
  %2911 = load i64, i64* %PC
  %2912 = add i64 %2911, 3
  store i64 %2912, i64* %PC
  %2913 = inttoptr i64 %2910 to i32*
  %2914 = load i32, i32* %2913
  %2915 = zext i32 %2914 to i64
  store i64 %2915, i64* %RDI, align 8, !tbaa !2428
  %2916 = load i64, i64* %RBP
  %2917 = sub i64 %2916, 16
  %2918 = load i64, i64* %PC
  %2919 = add i64 %2918, 4
  store i64 %2919, i64* %PC
  %2920 = inttoptr i64 %2917 to i64*
  %2921 = load i64, i64* %2920
  store i64 %2921, i64* %RSI, align 8, !tbaa !2428
  %2922 = load i64, i64* %RBP
  %2923 = sub i64 %2922, 24
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 4
  store i64 %2925, i64* %PC
  %2926 = inttoptr i64 %2923 to i64*
  %2927 = load i64, i64* %2926
  store i64 %2927, i64* %RDX, align 8, !tbaa !2428
  %2928 = load i64, i64* %PC
  %2929 = add i64 %2928, 4097
  %2930 = load i64, i64* %PC
  %2931 = add i64 %2930, 5
  %2932 = load i64, i64* %PC
  %2933 = add i64 %2932, 5
  store i64 %2933, i64* %PC
  %2934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2935 = load i64, i64* %2934, align 8, !tbaa !2428
  %2936 = add i64 %2935, -8
  %2937 = inttoptr i64 %2936 to i64*
  store i64 %2931, i64* %2937
  store i64 %2936, i64* %2934, align 8, !tbaa !2428
  %2938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2929, i64* %2938, align 8, !tbaa !2428
  %2939 = load i64, i64* %PC
  %2940 = call %struct.Memory* @sub_402890_cft1st(%struct.State* %0, i64 %2939, %struct.Memory* %2)
  %2941 = load i64, i64* %RBP
  %2942 = sub i64 %2941, 44
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 7
  store i64 %2944, i64* %PC
  %2945 = inttoptr i64 %2942 to i32*
  store i32 8, i32* %2945
  br label %block_40189b
}

; Function Attrs: noinline
define %struct.Memory* @sub_404080___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404080:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400790_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400790:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %37 = icmp ult i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #17
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_4007b8, label %block_4007a1

block_4007b8:                                     ; preds = %block_4007a1, %block_4007b3, %block_400790
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400790 ], [ %2, %block_4007a1 ], [ %2, %block_4007b3 ]
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %91, align 8, !tbaa !2428
  %96 = add i64 %93, 8
  store i64 %96, i64* %92, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007ba:                                     ; preds = %block_4007ab
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = add i64 %98, %97
  %100 = load i16, i16* %AX
  %101 = zext i16 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = load i64, i64* %PC
  %105 = tail call %struct.Memory* @sub_4007c0_register_tm_clones(%struct.State* %0, i64 %104, %struct.Memory* %2)
  ret %struct.Memory* %105

block_4007b3:                                     ; preds = %block_4007ab
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %RAX
  %108 = add i64 %107, %106
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  br label %block_4007b8

block_4007ab:                                     ; preds = %block_4007a1
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 1
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %116 = load i64, i64* %115, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %115, align 8, !tbaa !2428
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  switch i64 %126, label %163 [
    i64 4196282, label %block_4007ba
    i64 4196275, label %block_4007b3
  ]

block_4007a1:                                     ; preds = %block_400790
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  store i64 %128, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %RAX
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  %133 = and i64 %130, %129
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2432
  %135 = trunc i64 %133 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #17
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2446
  %142 = icmp eq i64 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %133, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %148, align 1, !tbaa !2450
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 15
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 2
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 2
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2448
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = icmp ne i8 %157, 0
  %160 = select i1 %159, i64 %151, i64 %153
  store i64 %160, i64* %158, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  br i1 %162, label %block_4007b8, label %block_4007ab

; <label>:163:                                    ; preds = %block_4007ab
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400830_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400830:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4007c0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007c0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #17
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #17
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #17
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #17
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #17
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4007f8, label %block_4007e3

block_4007fa:                                     ; preds = %block_4007ed
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %RAX
  %193 = add i64 %192, %191
  %194 = load i16, i16* %AX
  %195 = zext i16 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  store i64 %197, i64* %PC
  %198 = load i64, i64* %PC
  %199 = tail call %struct.Memory* @sub_400800___do_global_dtors_aux(%struct.State* %0, i64 %198, %struct.Memory* %2)
  ret %struct.Memory* %199

block_4007f5:                                     ; preds = %block_4007ed
  %200 = load i64, i64* %RAX
  %201 = load i32, i32* %EAX
  %202 = zext i32 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 3
  store i64 %204, i64* %PC
  br label %block_4007f8

block_4007ed:                                     ; preds = %block_4007e3
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !2428
  %209 = add i64 %208, 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RBP, align 8, !tbaa !2428
  store i64 %209, i64* %207, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 2
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  switch i64 %218, label %270 [
    i64 4196346, label %block_4007fa
    i64 4196341, label %block_4007f5
  ]

block_4007f8:                                     ; preds = %block_4007e3, %block_4007f5, %block_4007c0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4007c0 ], [ %2, %block_4007e3 ], [ %2, %block_4007f5 ]
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 1
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = add i64 %222, 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RBP, align 8, !tbaa !2428
  store i64 %223, i64* %221, align 8, !tbaa !2428
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %228, align 8, !tbaa !2428
  %233 = add i64 %230, 8
  store i64 %233, i64* %229, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007e3:                                     ; preds = %block_4007c0
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = and i64 %237, %236
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %241, align 1, !tbaa !2432
  %242 = trunc i64 %240 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #17
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = icmp eq i64 %240, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2448
  %252 = lshr i64 %240, 63
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %255, align 1, !tbaa !2450
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %256, align 1, !tbaa !2447
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 13
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 2
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 2
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %264 = load i8, i8* %263, align 1, !tbaa !2448
  store i8 %264, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %266 = icmp ne i8 %264, 0
  %267 = select i1 %266, i64 %258, i64 %260
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %268 = load i8, i8* %BRANCH_TAKEN
  %269 = icmp eq i8 %268, 1
  br i1 %269, label %block_4007f8, label %block_4007ed

; <label>:270:                                    ; preds = %block_4007ed
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_402890_cft1st(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402890:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %36 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %35, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %36 to %"class.std::bitset"*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %38 to %"class.std::bitset"*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %40 to %union.vec128_t*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %44 to %union.vec128_t*
  %45 = load i64, i64* %RBP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, -8
  %51 = inttoptr i64 %50 to i64*
  store i64 %45, i64* %51
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  %55 = load i64, i64* %RSP
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = sub i64 %55, 24
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  %59 = icmp ult i64 %55, 24
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %58 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #17
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 24, %55
  %70 = xor i64 %69, %58
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %58, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %58, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %55, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %81
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 4
  %89 = load i32, i32* %EDI
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 3
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %88 to i32*
  store i32 %89, i32* %93
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 16
  %96 = load i64, i64* %RSI
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 24
  %102 = load i64, i64* %RDX
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %101 to i64*
  store i64 %102, i64* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 16
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110
  store i64 %111, i64* %RDX, align 8, !tbaa !2428
  %112 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %113 = load i64, i64* %RDX
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to double*
  %117 = load double, double* %116
  %118 = bitcast i8* %112 to double*
  store double %117, double* %118, align 1, !tbaa !2452
  %119 = getelementptr inbounds i8, i8* %112, i64 8
  %120 = bitcast i8* %119 to double*
  store double 0.000000e+00, double* %120, align 1, !tbaa !2452
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 16
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %122 to i64*
  %126 = load i64, i64* %125
  store i64 %126, i64* %RDX, align 8, !tbaa !2428
  %127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %129 = load i64, i64* %RDX
  %130 = add i64 %129, 16
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = bitcast i8* %128 to double*
  %134 = load double, double* %133, align 1
  %135 = getelementptr inbounds i8, i8* %128, i64 8
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = inttoptr i64 %130 to double*
  %139 = load double, double* %138
  %140 = fadd double %134, %139
  %141 = bitcast i8* %127 to double*
  store double %140, double* %141, align 1, !tbaa !2452
  %142 = getelementptr inbounds i8, i8* %127, i64 8
  %143 = bitcast i8* %142 to i64*
  store i64 %137, i64* %143, align 1, !tbaa !2452
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 96
  %146 = bitcast %union.vec128_t* %XMM0 to i8*
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = bitcast i8* %146 to double*
  %150 = load double, double* %149, align 1
  %151 = inttoptr i64 %145 to double*
  store double %150, double* %151
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 16
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RDX, align 8, !tbaa !2428
  %158 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %159 = load i64, i64* %RDX
  %160 = add i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to double*
  %164 = load double, double* %163
  %165 = bitcast i8* %158 to double*
  store double %164, double* %165, align 1, !tbaa !2452
  %166 = getelementptr inbounds i8, i8* %158, i64 8
  %167 = bitcast i8* %166 to double*
  store double 0.000000e+00, double* %167, align 1, !tbaa !2452
  %168 = load i64, i64* %RBP
  %169 = sub i64 %168, 16
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 4
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %169 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %RDX, align 8, !tbaa !2428
  %174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %176 = load i64, i64* %RDX
  %177 = add i64 %176, 24
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = bitcast i8* %175 to double*
  %181 = load double, double* %180, align 1
  %182 = getelementptr inbounds i8, i8* %175, i64 8
  %183 = bitcast i8* %182 to i64*
  %184 = load i64, i64* %183, align 1
  %185 = inttoptr i64 %177 to double*
  %186 = load double, double* %185
  %187 = fadd double %181, %186
  %188 = bitcast i8* %174 to double*
  store double %187, double* %188, align 1, !tbaa !2452
  %189 = getelementptr inbounds i8, i8* %174, i64 8
  %190 = bitcast i8* %189 to i64*
  store i64 %184, i64* %190, align 1, !tbaa !2452
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 104
  %193 = bitcast %union.vec128_t* %XMM0 to i8*
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 5
  store i64 %195, i64* %PC
  %196 = bitcast i8* %193 to double*
  %197 = load double, double* %196, align 1
  %198 = inttoptr i64 %192 to double*
  store double %197, double* %198
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 16
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RDX, align 8, !tbaa !2428
  %205 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %206 = load i64, i64* %RDX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to double*
  %210 = load double, double* %209
  %211 = bitcast i8* %205 to double*
  store double %210, double* %211, align 1, !tbaa !2452
  %212 = getelementptr inbounds i8, i8* %205, i64 8
  %213 = bitcast i8* %212 to double*
  store double 0.000000e+00, double* %213, align 1, !tbaa !2452
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 16
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %RDX, align 8, !tbaa !2428
  %220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %222 = load i64, i64* %RDX
  %223 = add i64 %222, 16
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  store i64 %225, i64* %PC
  %226 = bitcast i8* %221 to double*
  %227 = load double, double* %226, align 1
  %228 = getelementptr inbounds i8, i8* %221, i64 8
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 1
  %231 = inttoptr i64 %223 to double*
  %232 = load double, double* %231
  %233 = fsub double %227, %232
  %234 = bitcast i8* %220 to double*
  store double %233, double* %234, align 1, !tbaa !2452
  %235 = getelementptr inbounds i8, i8* %220, i64 8
  %236 = bitcast i8* %235 to i64*
  store i64 %230, i64* %236, align 1, !tbaa !2452
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 112
  %239 = bitcast %union.vec128_t* %XMM0 to i8*
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 5
  store i64 %241, i64* %PC
  %242 = bitcast i8* %239 to double*
  %243 = load double, double* %242, align 1
  %244 = inttoptr i64 %238 to double*
  store double %243, double* %244
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 16
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RDX, align 8, !tbaa !2428
  %251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %252 = load i64, i64* %RDX
  %253 = add i64 %252, 8
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 5
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %253 to double*
  %257 = load double, double* %256
  %258 = bitcast i8* %251 to double*
  store double %257, double* %258, align 1, !tbaa !2452
  %259 = getelementptr inbounds i8, i8* %251, i64 8
  %260 = bitcast i8* %259 to double*
  store double 0.000000e+00, double* %260, align 1, !tbaa !2452
  %261 = load i64, i64* %RBP
  %262 = sub i64 %261, 16
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to i64*
  %266 = load i64, i64* %265
  store i64 %266, i64* %RDX, align 8, !tbaa !2428
  %267 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %268 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %269 = load i64, i64* %RDX
  %270 = add i64 %269, 24
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 5
  store i64 %272, i64* %PC
  %273 = bitcast i8* %268 to double*
  %274 = load double, double* %273, align 1
  %275 = getelementptr inbounds i8, i8* %268, i64 8
  %276 = bitcast i8* %275 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = inttoptr i64 %270 to double*
  %279 = load double, double* %278
  %280 = fsub double %274, %279
  %281 = bitcast i8* %267 to double*
  store double %280, double* %281, align 1, !tbaa !2452
  %282 = getelementptr inbounds i8, i8* %267, i64 8
  %283 = bitcast i8* %282 to i64*
  store i64 %277, i64* %283, align 1, !tbaa !2452
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 120
  %286 = bitcast %union.vec128_t* %XMM0 to i8*
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  %289 = bitcast i8* %286 to double*
  %290 = load double, double* %289, align 1
  %291 = inttoptr i64 %285 to double*
  store double %290, double* %291
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 16
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296
  store i64 %297, i64* %RDX, align 8, !tbaa !2428
  %298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %299 = load i64, i64* %RDX
  %300 = add i64 %299, 32
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 5
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to double*
  %304 = load double, double* %303
  %305 = bitcast i8* %298 to double*
  store double %304, double* %305, align 1, !tbaa !2452
  %306 = getelementptr inbounds i8, i8* %298, i64 8
  %307 = bitcast i8* %306 to double*
  store double 0.000000e+00, double* %307, align 1, !tbaa !2452
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 16
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312
  store i64 %313, i64* %RDX, align 8, !tbaa !2428
  %314 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %315 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %316 = load i64, i64* %RDX
  %317 = add i64 %316, 48
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 5
  store i64 %319, i64* %PC
  %320 = bitcast i8* %315 to double*
  %321 = load double, double* %320, align 1
  %322 = getelementptr inbounds i8, i8* %315, i64 8
  %323 = bitcast i8* %322 to i64*
  %324 = load i64, i64* %323, align 1
  %325 = inttoptr i64 %317 to double*
  %326 = load double, double* %325
  %327 = fadd double %321, %326
  %328 = bitcast i8* %314 to double*
  store double %327, double* %328, align 1, !tbaa !2452
  %329 = getelementptr inbounds i8, i8* %314, i64 8
  %330 = bitcast i8* %329 to i64*
  store i64 %324, i64* %330, align 1, !tbaa !2452
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 128
  %333 = bitcast %union.vec128_t* %XMM0 to i8*
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = bitcast i8* %333 to double*
  %337 = load double, double* %336, align 1
  %338 = inttoptr i64 %332 to double*
  store double %337, double* %338
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 16
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %340 to i64*
  %344 = load i64, i64* %343
  store i64 %344, i64* %RDX, align 8, !tbaa !2428
  %345 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %346 = load i64, i64* %RDX
  %347 = add i64 %346, 40
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 5
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to double*
  %351 = load double, double* %350
  %352 = bitcast i8* %345 to double*
  store double %351, double* %352, align 1, !tbaa !2452
  %353 = getelementptr inbounds i8, i8* %345, i64 8
  %354 = bitcast i8* %353 to double*
  store double 0.000000e+00, double* %354, align 1, !tbaa !2452
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 16
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %361 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %362 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %363 = load i64, i64* %RDX
  %364 = add i64 %363, 56
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  store i64 %366, i64* %PC
  %367 = bitcast i8* %362 to double*
  %368 = load double, double* %367, align 1
  %369 = getelementptr inbounds i8, i8* %362, i64 8
  %370 = bitcast i8* %369 to i64*
  %371 = load i64, i64* %370, align 1
  %372 = inttoptr i64 %364 to double*
  %373 = load double, double* %372
  %374 = fadd double %368, %373
  %375 = bitcast i8* %361 to double*
  store double %374, double* %375, align 1, !tbaa !2452
  %376 = getelementptr inbounds i8, i8* %361, i64 8
  %377 = bitcast i8* %376 to i64*
  store i64 %371, i64* %377, align 1, !tbaa !2452
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 136
  %380 = bitcast %union.vec128_t* %XMM0 to i8*
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 8
  store i64 %382, i64* %PC
  %383 = bitcast i8* %380 to double*
  %384 = load double, double* %383, align 1
  %385 = inttoptr i64 %379 to double*
  store double %384, double* %385
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 16
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %387 to i64*
  %391 = load i64, i64* %390
  store i64 %391, i64* %RDX, align 8, !tbaa !2428
  %392 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %393 = load i64, i64* %RDX
  %394 = add i64 %393, 32
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to double*
  %398 = load double, double* %397
  %399 = bitcast i8* %392 to double*
  store double %398, double* %399, align 1, !tbaa !2452
  %400 = getelementptr inbounds i8, i8* %392, i64 8
  %401 = bitcast i8* %400 to double*
  store double 0.000000e+00, double* %401, align 1, !tbaa !2452
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 16
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RDX, align 8, !tbaa !2428
  %408 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %409 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %410 = load i64, i64* %RDX
  %411 = add i64 %410, 48
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 5
  store i64 %413, i64* %PC
  %414 = bitcast i8* %409 to double*
  %415 = load double, double* %414, align 1
  %416 = getelementptr inbounds i8, i8* %409, i64 8
  %417 = bitcast i8* %416 to i64*
  %418 = load i64, i64* %417, align 1
  %419 = inttoptr i64 %411 to double*
  %420 = load double, double* %419
  %421 = fsub double %415, %420
  %422 = bitcast i8* %408 to double*
  store double %421, double* %422, align 1, !tbaa !2452
  %423 = getelementptr inbounds i8, i8* %408, i64 8
  %424 = bitcast i8* %423 to i64*
  store i64 %418, i64* %424, align 1, !tbaa !2452
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 144
  %427 = bitcast %union.vec128_t* %XMM0 to i8*
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 8
  store i64 %429, i64* %PC
  %430 = bitcast i8* %427 to double*
  %431 = load double, double* %430, align 1
  %432 = inttoptr i64 %426 to double*
  store double %431, double* %432
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %RDX, align 8, !tbaa !2428
  %439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %440 = load i64, i64* %RDX
  %441 = add i64 %440, 40
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to double*
  %445 = load double, double* %444
  %446 = bitcast i8* %439 to double*
  store double %445, double* %446, align 1, !tbaa !2452
  %447 = getelementptr inbounds i8, i8* %439, i64 8
  %448 = bitcast i8* %447 to double*
  store double 0.000000e+00, double* %448, align 1, !tbaa !2452
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 16
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i64*
  %454 = load i64, i64* %453
  store i64 %454, i64* %RDX, align 8, !tbaa !2428
  %455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %456 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %457 = load i64, i64* %RDX
  %458 = add i64 %457, 56
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC
  %461 = bitcast i8* %456 to double*
  %462 = load double, double* %461, align 1
  %463 = getelementptr inbounds i8, i8* %456, i64 8
  %464 = bitcast i8* %463 to i64*
  %465 = load i64, i64* %464, align 1
  %466 = inttoptr i64 %458 to double*
  %467 = load double, double* %466
  %468 = fsub double %462, %467
  %469 = bitcast i8* %455 to double*
  store double %468, double* %469, align 1, !tbaa !2452
  %470 = getelementptr inbounds i8, i8* %455, i64 8
  %471 = bitcast i8* %470 to i64*
  store i64 %465, i64* %471, align 1, !tbaa !2452
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 152
  %474 = bitcast %union.vec128_t* %XMM0 to i8*
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 8
  store i64 %476, i64* %PC
  %477 = bitcast i8* %474 to double*
  %478 = load double, double* %477, align 1
  %479 = inttoptr i64 %473 to double*
  store double %478, double* %479
  %480 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 96
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 5
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to double*
  %486 = load double, double* %485
  %487 = bitcast i8* %480 to double*
  store double %486, double* %487, align 1, !tbaa !2452
  %488 = getelementptr inbounds i8, i8* %480, i64 8
  %489 = bitcast i8* %488 to double*
  store double 0.000000e+00, double* %489, align 1, !tbaa !2452
  %490 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %491 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %492 = load i64, i64* %RBP
  %493 = sub i64 %492, 128
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  store i64 %495, i64* %PC
  %496 = bitcast i8* %491 to double*
  %497 = load double, double* %496, align 1
  %498 = getelementptr inbounds i8, i8* %491, i64 8
  %499 = bitcast i8* %498 to i64*
  %500 = load i64, i64* %499, align 1
  %501 = inttoptr i64 %493 to double*
  %502 = load double, double* %501
  %503 = fadd double %497, %502
  %504 = bitcast i8* %490 to double*
  store double %503, double* %504, align 1, !tbaa !2452
  %505 = getelementptr inbounds i8, i8* %490, i64 8
  %506 = bitcast i8* %505 to i64*
  store i64 %500, i64* %506, align 1, !tbaa !2452
  %507 = load i64, i64* %RBP
  %508 = sub i64 %507, 16
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i64*
  %512 = load i64, i64* %511
  store i64 %512, i64* %RDX, align 8, !tbaa !2428
  %513 = load i64, i64* %RDX
  %514 = bitcast %union.vec128_t* %XMM0 to i8*
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC
  %517 = bitcast i8* %514 to double*
  %518 = load double, double* %517, align 1
  %519 = inttoptr i64 %513 to double*
  store double %518, double* %519
  %520 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 104
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 5
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to double*
  %526 = load double, double* %525
  %527 = bitcast i8* %520 to double*
  store double %526, double* %527, align 1, !tbaa !2452
  %528 = getelementptr inbounds i8, i8* %520, i64 8
  %529 = bitcast i8* %528 to double*
  store double 0.000000e+00, double* %529, align 1, !tbaa !2452
  %530 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %531 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 136
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 8
  store i64 %535, i64* %PC
  %536 = bitcast i8* %531 to double*
  %537 = load double, double* %536, align 1
  %538 = getelementptr inbounds i8, i8* %531, i64 8
  %539 = bitcast i8* %538 to i64*
  %540 = load i64, i64* %539, align 1
  %541 = inttoptr i64 %533 to double*
  %542 = load double, double* %541
  %543 = fadd double %537, %542
  %544 = bitcast i8* %530 to double*
  store double %543, double* %544, align 1, !tbaa !2452
  %545 = getelementptr inbounds i8, i8* %530, i64 8
  %546 = bitcast i8* %545 to i64*
  store i64 %540, i64* %546, align 1, !tbaa !2452
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 16
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i64*
  %552 = load i64, i64* %551
  store i64 %552, i64* %RDX, align 8, !tbaa !2428
  %553 = load i64, i64* %RDX
  %554 = add i64 %553, 8
  %555 = bitcast %union.vec128_t* %XMM0 to i8*
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 5
  store i64 %557, i64* %PC
  %558 = bitcast i8* %555 to double*
  %559 = load double, double* %558, align 1
  %560 = inttoptr i64 %554 to double*
  store double %559, double* %560
  %561 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 96
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to double*
  %567 = load double, double* %566
  %568 = bitcast i8* %561 to double*
  store double %567, double* %568, align 1, !tbaa !2452
  %569 = getelementptr inbounds i8, i8* %561, i64 8
  %570 = bitcast i8* %569 to double*
  store double 0.000000e+00, double* %570, align 1, !tbaa !2452
  %571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %572 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 128
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 5
  store i64 %576, i64* %PC
  %577 = bitcast i8* %572 to double*
  %578 = load double, double* %577, align 1
  %579 = getelementptr inbounds i8, i8* %572, i64 8
  %580 = bitcast i8* %579 to i64*
  %581 = load i64, i64* %580, align 1
  %582 = inttoptr i64 %574 to double*
  %583 = load double, double* %582
  %584 = fsub double %578, %583
  %585 = bitcast i8* %571 to double*
  store double %584, double* %585, align 1, !tbaa !2452
  %586 = getelementptr inbounds i8, i8* %571, i64 8
  %587 = bitcast i8* %586 to i64*
  store i64 %581, i64* %587, align 1, !tbaa !2452
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 16
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %589 to i64*
  %593 = load i64, i64* %592
  store i64 %593, i64* %RDX, align 8, !tbaa !2428
  %594 = load i64, i64* %RDX
  %595 = add i64 %594, 32
  %596 = bitcast %union.vec128_t* %XMM0 to i8*
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = bitcast i8* %596 to double*
  %600 = load double, double* %599, align 1
  %601 = inttoptr i64 %595 to double*
  store double %600, double* %601
  %602 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 104
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to double*
  %608 = load double, double* %607
  %609 = bitcast i8* %602 to double*
  store double %608, double* %609, align 1, !tbaa !2452
  %610 = getelementptr inbounds i8, i8* %602, i64 8
  %611 = bitcast i8* %610 to double*
  store double 0.000000e+00, double* %611, align 1, !tbaa !2452
  %612 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %613 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 136
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 8
  store i64 %617, i64* %PC
  %618 = bitcast i8* %613 to double*
  %619 = load double, double* %618, align 1
  %620 = getelementptr inbounds i8, i8* %613, i64 8
  %621 = bitcast i8* %620 to i64*
  %622 = load i64, i64* %621, align 1
  %623 = inttoptr i64 %615 to double*
  %624 = load double, double* %623
  %625 = fsub double %619, %624
  %626 = bitcast i8* %612 to double*
  store double %625, double* %626, align 1, !tbaa !2452
  %627 = getelementptr inbounds i8, i8* %612, i64 8
  %628 = bitcast i8* %627 to i64*
  store i64 %622, i64* %628, align 1, !tbaa !2452
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 16
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 4
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i64*
  %634 = load i64, i64* %633
  store i64 %634, i64* %RDX, align 8, !tbaa !2428
  %635 = load i64, i64* %RDX
  %636 = add i64 %635, 40
  %637 = bitcast %union.vec128_t* %XMM0 to i8*
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  %640 = bitcast i8* %637 to double*
  %641 = load double, double* %640, align 1
  %642 = inttoptr i64 %636 to double*
  store double %641, double* %642
  %643 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 112
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 5
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to double*
  %649 = load double, double* %648
  %650 = bitcast i8* %643 to double*
  store double %649, double* %650, align 1, !tbaa !2452
  %651 = getelementptr inbounds i8, i8* %643, i64 8
  %652 = bitcast i8* %651 to double*
  store double 0.000000e+00, double* %652, align 1, !tbaa !2452
  %653 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %654 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 152
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 8
  store i64 %658, i64* %PC
  %659 = bitcast i8* %654 to double*
  %660 = load double, double* %659, align 1
  %661 = getelementptr inbounds i8, i8* %654, i64 8
  %662 = bitcast i8* %661 to i64*
  %663 = load i64, i64* %662, align 1
  %664 = inttoptr i64 %656 to double*
  %665 = load double, double* %664
  %666 = fsub double %660, %665
  %667 = bitcast i8* %653 to double*
  store double %666, double* %667, align 1, !tbaa !2452
  %668 = getelementptr inbounds i8, i8* %653, i64 8
  %669 = bitcast i8* %668 to i64*
  store i64 %663, i64* %669, align 1, !tbaa !2452
  %670 = load i64, i64* %RBP
  %671 = sub i64 %670, 16
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC
  %674 = inttoptr i64 %671 to i64*
  %675 = load i64, i64* %674
  store i64 %675, i64* %RDX, align 8, !tbaa !2428
  %676 = load i64, i64* %RDX
  %677 = add i64 %676, 16
  %678 = bitcast %union.vec128_t* %XMM0 to i8*
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 5
  store i64 %680, i64* %PC
  %681 = bitcast i8* %678 to double*
  %682 = load double, double* %681, align 1
  %683 = inttoptr i64 %677 to double*
  store double %682, double* %683
  %684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 120
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 5
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %686 to double*
  %690 = load double, double* %689
  %691 = bitcast i8* %684 to double*
  store double %690, double* %691, align 1, !tbaa !2452
  %692 = getelementptr inbounds i8, i8* %684, i64 8
  %693 = bitcast i8* %692 to double*
  store double 0.000000e+00, double* %693, align 1, !tbaa !2452
  %694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 144
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 8
  store i64 %699, i64* %PC
  %700 = bitcast i8* %695 to double*
  %701 = load double, double* %700, align 1
  %702 = getelementptr inbounds i8, i8* %695, i64 8
  %703 = bitcast i8* %702 to i64*
  %704 = load i64, i64* %703, align 1
  %705 = inttoptr i64 %697 to double*
  %706 = load double, double* %705
  %707 = fadd double %701, %706
  %708 = bitcast i8* %694 to double*
  store double %707, double* %708, align 1, !tbaa !2452
  %709 = getelementptr inbounds i8, i8* %694, i64 8
  %710 = bitcast i8* %709 to i64*
  store i64 %704, i64* %710, align 1, !tbaa !2452
  %711 = load i64, i64* %RBP
  %712 = sub i64 %711, 16
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 4
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %712 to i64*
  %716 = load i64, i64* %715
  store i64 %716, i64* %RDX, align 8, !tbaa !2428
  %717 = load i64, i64* %RDX
  %718 = add i64 %717, 24
  %719 = bitcast %union.vec128_t* %XMM0 to i8*
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 5
  store i64 %721, i64* %PC
  %722 = bitcast i8* %719 to double*
  %723 = load double, double* %722, align 1
  %724 = inttoptr i64 %718 to double*
  store double %723, double* %724
  %725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 112
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 5
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to double*
  %731 = load double, double* %730
  %732 = bitcast i8* %725 to double*
  store double %731, double* %732, align 1, !tbaa !2452
  %733 = getelementptr inbounds i8, i8* %725, i64 8
  %734 = bitcast i8* %733 to double*
  store double 0.000000e+00, double* %734, align 1, !tbaa !2452
  %735 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %736 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 152
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 8
  store i64 %740, i64* %PC
  %741 = bitcast i8* %736 to double*
  %742 = load double, double* %741, align 1
  %743 = getelementptr inbounds i8, i8* %736, i64 8
  %744 = bitcast i8* %743 to i64*
  %745 = load i64, i64* %744, align 1
  %746 = inttoptr i64 %738 to double*
  %747 = load double, double* %746
  %748 = fadd double %742, %747
  %749 = bitcast i8* %735 to double*
  store double %748, double* %749, align 1, !tbaa !2452
  %750 = getelementptr inbounds i8, i8* %735, i64 8
  %751 = bitcast i8* %750 to i64*
  store i64 %745, i64* %751, align 1, !tbaa !2452
  %752 = load i64, i64* %RBP
  %753 = sub i64 %752, 16
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 4
  store i64 %755, i64* %PC
  %756 = inttoptr i64 %753 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %RDX, align 8, !tbaa !2428
  %758 = load i64, i64* %RDX
  %759 = add i64 %758, 48
  %760 = bitcast %union.vec128_t* %XMM0 to i8*
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 5
  store i64 %762, i64* %PC
  %763 = bitcast i8* %760 to double*
  %764 = load double, double* %763, align 1
  %765 = inttoptr i64 %759 to double*
  store double %764, double* %765
  %766 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %767 = load i64, i64* %RBP
  %768 = sub i64 %767, 120
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 5
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %768 to double*
  %772 = load double, double* %771
  %773 = bitcast i8* %766 to double*
  store double %772, double* %773, align 1, !tbaa !2452
  %774 = getelementptr inbounds i8, i8* %766, i64 8
  %775 = bitcast i8* %774 to double*
  store double 0.000000e+00, double* %775, align 1, !tbaa !2452
  %776 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %777 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %778 = load i64, i64* %RBP
  %779 = sub i64 %778, 144
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 8
  store i64 %781, i64* %PC
  %782 = bitcast i8* %777 to double*
  %783 = load double, double* %782, align 1
  %784 = getelementptr inbounds i8, i8* %777, i64 8
  %785 = bitcast i8* %784 to i64*
  %786 = load i64, i64* %785, align 1
  %787 = inttoptr i64 %779 to double*
  %788 = load double, double* %787
  %789 = fsub double %783, %788
  %790 = bitcast i8* %776 to double*
  store double %789, double* %790, align 1, !tbaa !2452
  %791 = getelementptr inbounds i8, i8* %776, i64 8
  %792 = bitcast i8* %791 to i64*
  store i64 %786, i64* %792, align 1, !tbaa !2452
  %793 = load i64, i64* %RBP
  %794 = sub i64 %793, 16
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 4
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i64*
  %798 = load i64, i64* %797
  store i64 %798, i64* %RDX, align 8, !tbaa !2428
  %799 = load i64, i64* %RDX
  %800 = add i64 %799, 56
  %801 = bitcast %union.vec128_t* %XMM0 to i8*
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 5
  store i64 %803, i64* %PC
  %804 = bitcast i8* %801 to double*
  %805 = load double, double* %804, align 1
  %806 = inttoptr i64 %800 to double*
  store double %805, double* %806
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 24
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 4
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811
  store i64 %812, i64* %RDX, align 8, !tbaa !2428
  %813 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %814 = load i64, i64* %RDX
  %815 = add i64 %814, 16
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to double*
  %819 = load double, double* %818
  %820 = bitcast i8* %813 to double*
  store double %819, double* %820, align 1, !tbaa !2452
  %821 = getelementptr inbounds i8, i8* %813, i64 8
  %822 = bitcast i8* %821 to double*
  store double 0.000000e+00, double* %822, align 1, !tbaa !2452
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 48
  %825 = bitcast %union.vec128_t* %XMM0 to i8*
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC
  %828 = bitcast i8* %825 to double*
  %829 = load double, double* %828, align 1
  %830 = inttoptr i64 %824 to double*
  store double %829, double* %830
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 16
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 4
  store i64 %834, i64* %PC
  %835 = inttoptr i64 %832 to i64*
  %836 = load i64, i64* %835
  store i64 %836, i64* %RDX, align 8, !tbaa !2428
  %837 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %838 = load i64, i64* %RDX
  %839 = add i64 %838, 64
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 5
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to double*
  %843 = load double, double* %842
  %844 = bitcast i8* %837 to double*
  store double %843, double* %844, align 1, !tbaa !2452
  %845 = getelementptr inbounds i8, i8* %837, i64 8
  %846 = bitcast i8* %845 to double*
  store double 0.000000e+00, double* %846, align 1, !tbaa !2452
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 16
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 4
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RDX, align 8, !tbaa !2428
  %853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %854 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %855 = load i64, i64* %RDX
  %856 = add i64 %855, 80
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 5
  store i64 %858, i64* %PC
  %859 = bitcast i8* %854 to double*
  %860 = load double, double* %859, align 1
  %861 = getelementptr inbounds i8, i8* %854, i64 8
  %862 = bitcast i8* %861 to i64*
  %863 = load i64, i64* %862, align 1
  %864 = inttoptr i64 %856 to double*
  %865 = load double, double* %864
  %866 = fadd double %860, %865
  %867 = bitcast i8* %853 to double*
  store double %866, double* %867, align 1, !tbaa !2452
  %868 = getelementptr inbounds i8, i8* %853, i64 8
  %869 = bitcast i8* %868 to i64*
  store i64 %863, i64* %869, align 1, !tbaa !2452
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 96
  %872 = bitcast %union.vec128_t* %XMM0 to i8*
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 5
  store i64 %874, i64* %PC
  %875 = bitcast i8* %872 to double*
  %876 = load double, double* %875, align 1
  %877 = inttoptr i64 %871 to double*
  store double %876, double* %877
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 16
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 4
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %879 to i64*
  %883 = load i64, i64* %882
  store i64 %883, i64* %RDX, align 8, !tbaa !2428
  %884 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %885 = load i64, i64* %RDX
  %886 = add i64 %885, 72
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to double*
  %890 = load double, double* %889
  %891 = bitcast i8* %884 to double*
  store double %890, double* %891, align 1, !tbaa !2452
  %892 = getelementptr inbounds i8, i8* %884, i64 8
  %893 = bitcast i8* %892 to double*
  store double 0.000000e+00, double* %893, align 1, !tbaa !2452
  %894 = load i64, i64* %RBP
  %895 = sub i64 %894, 16
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RDX, align 8, !tbaa !2428
  %900 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %901 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %902 = load i64, i64* %RDX
  %903 = add i64 %902, 88
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 5
  store i64 %905, i64* %PC
  %906 = bitcast i8* %901 to double*
  %907 = load double, double* %906, align 1
  %908 = getelementptr inbounds i8, i8* %901, i64 8
  %909 = bitcast i8* %908 to i64*
  %910 = load i64, i64* %909, align 1
  %911 = inttoptr i64 %903 to double*
  %912 = load double, double* %911
  %913 = fadd double %907, %912
  %914 = bitcast i8* %900 to double*
  store double %913, double* %914, align 1, !tbaa !2452
  %915 = getelementptr inbounds i8, i8* %900, i64 8
  %916 = bitcast i8* %915 to i64*
  store i64 %910, i64* %916, align 1, !tbaa !2452
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 104
  %919 = bitcast %union.vec128_t* %XMM0 to i8*
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  store i64 %921, i64* %PC
  %922 = bitcast i8* %919 to double*
  %923 = load double, double* %922, align 1
  %924 = inttoptr i64 %918 to double*
  store double %923, double* %924
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 16
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 4
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i64*
  %930 = load i64, i64* %929
  store i64 %930, i64* %RDX, align 8, !tbaa !2428
  %931 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %932 = load i64, i64* %RDX
  %933 = add i64 %932, 64
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 5
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to double*
  %937 = load double, double* %936
  %938 = bitcast i8* %931 to double*
  store double %937, double* %938, align 1, !tbaa !2452
  %939 = getelementptr inbounds i8, i8* %931, i64 8
  %940 = bitcast i8* %939 to double*
  store double 0.000000e+00, double* %940, align 1, !tbaa !2452
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 16
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 4
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %942 to i64*
  %946 = load i64, i64* %945
  store i64 %946, i64* %RDX, align 8, !tbaa !2428
  %947 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %948 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %949 = load i64, i64* %RDX
  %950 = add i64 %949, 80
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 5
  store i64 %952, i64* %PC
  %953 = bitcast i8* %948 to double*
  %954 = load double, double* %953, align 1
  %955 = getelementptr inbounds i8, i8* %948, i64 8
  %956 = bitcast i8* %955 to i64*
  %957 = load i64, i64* %956, align 1
  %958 = inttoptr i64 %950 to double*
  %959 = load double, double* %958
  %960 = fsub double %954, %959
  %961 = bitcast i8* %947 to double*
  store double %960, double* %961, align 1, !tbaa !2452
  %962 = getelementptr inbounds i8, i8* %947, i64 8
  %963 = bitcast i8* %962 to i64*
  store i64 %957, i64* %963, align 1, !tbaa !2452
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 112
  %966 = bitcast %union.vec128_t* %XMM0 to i8*
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC
  %969 = bitcast i8* %966 to double*
  %970 = load double, double* %969, align 1
  %971 = inttoptr i64 %965 to double*
  store double %970, double* %971
  %972 = load i64, i64* %RBP
  %973 = sub i64 %972, 16
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976
  store i64 %977, i64* %RDX, align 8, !tbaa !2428
  %978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %979 = load i64, i64* %RDX
  %980 = add i64 %979, 72
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 5
  store i64 %982, i64* %PC
  %983 = inttoptr i64 %980 to double*
  %984 = load double, double* %983
  %985 = bitcast i8* %978 to double*
  store double %984, double* %985, align 1, !tbaa !2452
  %986 = getelementptr inbounds i8, i8* %978, i64 8
  %987 = bitcast i8* %986 to double*
  store double 0.000000e+00, double* %987, align 1, !tbaa !2452
  %988 = load i64, i64* %RBP
  %989 = sub i64 %988, 16
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 4
  store i64 %991, i64* %PC
  %992 = inttoptr i64 %989 to i64*
  %993 = load i64, i64* %992
  store i64 %993, i64* %RDX, align 8, !tbaa !2428
  %994 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %995 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %996 = load i64, i64* %RDX
  %997 = add i64 %996, 88
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 5
  store i64 %999, i64* %PC
  %1000 = bitcast i8* %995 to double*
  %1001 = load double, double* %1000, align 1
  %1002 = getelementptr inbounds i8, i8* %995, i64 8
  %1003 = bitcast i8* %1002 to i64*
  %1004 = load i64, i64* %1003, align 1
  %1005 = inttoptr i64 %997 to double*
  %1006 = load double, double* %1005
  %1007 = fsub double %1001, %1006
  %1008 = bitcast i8* %994 to double*
  store double %1007, double* %1008, align 1, !tbaa !2452
  %1009 = getelementptr inbounds i8, i8* %994, i64 8
  %1010 = bitcast i8* %1009 to i64*
  store i64 %1004, i64* %1010, align 1, !tbaa !2452
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 120
  %1013 = bitcast %union.vec128_t* %XMM0 to i8*
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC
  %1016 = bitcast i8* %1013 to double*
  %1017 = load double, double* %1016, align 1
  %1018 = inttoptr i64 %1012 to double*
  store double %1017, double* %1018
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 16
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 4
  store i64 %1022, i64* %PC
  %1023 = inttoptr i64 %1020 to i64*
  %1024 = load i64, i64* %1023
  store i64 %1024, i64* %RDX, align 8, !tbaa !2428
  %1025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1026 = load i64, i64* %RDX
  %1027 = add i64 %1026, 96
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 5
  store i64 %1029, i64* %PC
  %1030 = inttoptr i64 %1027 to double*
  %1031 = load double, double* %1030
  %1032 = bitcast i8* %1025 to double*
  store double %1031, double* %1032, align 1, !tbaa !2452
  %1033 = getelementptr inbounds i8, i8* %1025, i64 8
  %1034 = bitcast i8* %1033 to double*
  store double 0.000000e+00, double* %1034, align 1, !tbaa !2452
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 16
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i64*
  %1040 = load i64, i64* %1039
  store i64 %1040, i64* %RDX, align 8, !tbaa !2428
  %1041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1042 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1043 = load i64, i64* %RDX
  %1044 = add i64 %1043, 112
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 5
  store i64 %1046, i64* %PC
  %1047 = bitcast i8* %1042 to double*
  %1048 = load double, double* %1047, align 1
  %1049 = getelementptr inbounds i8, i8* %1042, i64 8
  %1050 = bitcast i8* %1049 to i64*
  %1051 = load i64, i64* %1050, align 1
  %1052 = inttoptr i64 %1044 to double*
  %1053 = load double, double* %1052
  %1054 = fadd double %1048, %1053
  %1055 = bitcast i8* %1041 to double*
  store double %1054, double* %1055, align 1, !tbaa !2452
  %1056 = getelementptr inbounds i8, i8* %1041, i64 8
  %1057 = bitcast i8* %1056 to i64*
  store i64 %1051, i64* %1057, align 1, !tbaa !2452
  %1058 = load i64, i64* %RBP
  %1059 = sub i64 %1058, 128
  %1060 = bitcast %union.vec128_t* %XMM0 to i8*
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 5
  store i64 %1062, i64* %PC
  %1063 = bitcast i8* %1060 to double*
  %1064 = load double, double* %1063, align 1
  %1065 = inttoptr i64 %1059 to double*
  store double %1064, double* %1065
  %1066 = load i64, i64* %RBP
  %1067 = sub i64 %1066, 16
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to i64*
  %1071 = load i64, i64* %1070
  store i64 %1071, i64* %RDX, align 8, !tbaa !2428
  %1072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1073 = load i64, i64* %RDX
  %1074 = add i64 %1073, 104
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 5
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to double*
  %1078 = load double, double* %1077
  %1079 = bitcast i8* %1072 to double*
  store double %1078, double* %1079, align 1, !tbaa !2452
  %1080 = getelementptr inbounds i8, i8* %1072, i64 8
  %1081 = bitcast i8* %1080 to double*
  store double 0.000000e+00, double* %1081, align 1, !tbaa !2452
  %1082 = load i64, i64* %RBP
  %1083 = sub i64 %1082, 16
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 4
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i64*
  %1087 = load i64, i64* %1086
  store i64 %1087, i64* %RDX, align 8, !tbaa !2428
  %1088 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1089 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1090 = load i64, i64* %RDX
  %1091 = add i64 %1090, 120
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 5
  store i64 %1093, i64* %PC
  %1094 = bitcast i8* %1089 to double*
  %1095 = load double, double* %1094, align 1
  %1096 = getelementptr inbounds i8, i8* %1089, i64 8
  %1097 = bitcast i8* %1096 to i64*
  %1098 = load i64, i64* %1097, align 1
  %1099 = inttoptr i64 %1091 to double*
  %1100 = load double, double* %1099
  %1101 = fadd double %1095, %1100
  %1102 = bitcast i8* %1088 to double*
  store double %1101, double* %1102, align 1, !tbaa !2452
  %1103 = getelementptr inbounds i8, i8* %1088, i64 8
  %1104 = bitcast i8* %1103 to i64*
  store i64 %1098, i64* %1104, align 1, !tbaa !2452
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 136
  %1107 = bitcast %union.vec128_t* %XMM0 to i8*
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 8
  store i64 %1109, i64* %PC
  %1110 = bitcast i8* %1107 to double*
  %1111 = load double, double* %1110, align 1
  %1112 = inttoptr i64 %1106 to double*
  store double %1111, double* %1112
  %1113 = load i64, i64* %RBP
  %1114 = sub i64 %1113, 16
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1114 to i64*
  %1118 = load i64, i64* %1117
  store i64 %1118, i64* %RDX, align 8, !tbaa !2428
  %1119 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1120 = load i64, i64* %RDX
  %1121 = add i64 %1120, 96
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 5
  store i64 %1123, i64* %PC
  %1124 = inttoptr i64 %1121 to double*
  %1125 = load double, double* %1124
  %1126 = bitcast i8* %1119 to double*
  store double %1125, double* %1126, align 1, !tbaa !2452
  %1127 = getelementptr inbounds i8, i8* %1119, i64 8
  %1128 = bitcast i8* %1127 to double*
  store double 0.000000e+00, double* %1128, align 1, !tbaa !2452
  %1129 = load i64, i64* %RBP
  %1130 = sub i64 %1129, 16
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 4
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1130 to i64*
  %1134 = load i64, i64* %1133
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1136 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1137 = load i64, i64* %RDX
  %1138 = add i64 %1137, 112
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 5
  store i64 %1140, i64* %PC
  %1141 = bitcast i8* %1136 to double*
  %1142 = load double, double* %1141, align 1
  %1143 = getelementptr inbounds i8, i8* %1136, i64 8
  %1144 = bitcast i8* %1143 to i64*
  %1145 = load i64, i64* %1144, align 1
  %1146 = inttoptr i64 %1138 to double*
  %1147 = load double, double* %1146
  %1148 = fsub double %1142, %1147
  %1149 = bitcast i8* %1135 to double*
  store double %1148, double* %1149, align 1, !tbaa !2452
  %1150 = getelementptr inbounds i8, i8* %1135, i64 8
  %1151 = bitcast i8* %1150 to i64*
  store i64 %1145, i64* %1151, align 1, !tbaa !2452
  %1152 = load i64, i64* %RBP
  %1153 = sub i64 %1152, 144
  %1154 = bitcast %union.vec128_t* %XMM0 to i8*
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 8
  store i64 %1156, i64* %PC
  %1157 = bitcast i8* %1154 to double*
  %1158 = load double, double* %1157, align 1
  %1159 = inttoptr i64 %1153 to double*
  store double %1158, double* %1159
  %1160 = load i64, i64* %RBP
  %1161 = sub i64 %1160, 16
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 4
  store i64 %1163, i64* %PC
  %1164 = inttoptr i64 %1161 to i64*
  %1165 = load i64, i64* %1164
  store i64 %1165, i64* %RDX, align 8, !tbaa !2428
  %1166 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1167 = load i64, i64* %RDX
  %1168 = add i64 %1167, 104
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 5
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1168 to double*
  %1172 = load double, double* %1171
  %1173 = bitcast i8* %1166 to double*
  store double %1172, double* %1173, align 1, !tbaa !2452
  %1174 = getelementptr inbounds i8, i8* %1166, i64 8
  %1175 = bitcast i8* %1174 to double*
  store double 0.000000e+00, double* %1175, align 1, !tbaa !2452
  %1176 = load i64, i64* %RBP
  %1177 = sub i64 %1176, 16
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 4
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to i64*
  %1181 = load i64, i64* %1180
  store i64 %1181, i64* %RDX, align 8, !tbaa !2428
  %1182 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1184 = load i64, i64* %RDX
  %1185 = add i64 %1184, 120
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 5
  store i64 %1187, i64* %PC
  %1188 = bitcast i8* %1183 to double*
  %1189 = load double, double* %1188, align 1
  %1190 = getelementptr inbounds i8, i8* %1183, i64 8
  %1191 = bitcast i8* %1190 to i64*
  %1192 = load i64, i64* %1191, align 1
  %1193 = inttoptr i64 %1185 to double*
  %1194 = load double, double* %1193
  %1195 = fsub double %1189, %1194
  %1196 = bitcast i8* %1182 to double*
  store double %1195, double* %1196, align 1, !tbaa !2452
  %1197 = getelementptr inbounds i8, i8* %1182, i64 8
  %1198 = bitcast i8* %1197 to i64*
  store i64 %1192, i64* %1198, align 1, !tbaa !2452
  %1199 = load i64, i64* %RBP
  %1200 = sub i64 %1199, 152
  %1201 = bitcast %union.vec128_t* %XMM0 to i8*
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 8
  store i64 %1203, i64* %PC
  %1204 = bitcast i8* %1201 to double*
  %1205 = load double, double* %1204, align 1
  %1206 = inttoptr i64 %1200 to double*
  store double %1205, double* %1206
  %1207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 96
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 5
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to double*
  %1213 = load double, double* %1212
  %1214 = bitcast i8* %1207 to double*
  store double %1213, double* %1214, align 1, !tbaa !2452
  %1215 = getelementptr inbounds i8, i8* %1207, i64 8
  %1216 = bitcast i8* %1215 to double*
  store double 0.000000e+00, double* %1216, align 1, !tbaa !2452
  %1217 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 128
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = bitcast i8* %1218 to double*
  %1224 = load double, double* %1223, align 1
  %1225 = getelementptr inbounds i8, i8* %1218, i64 8
  %1226 = bitcast i8* %1225 to i64*
  %1227 = load i64, i64* %1226, align 1
  %1228 = inttoptr i64 %1220 to double*
  %1229 = load double, double* %1228
  %1230 = fadd double %1224, %1229
  %1231 = bitcast i8* %1217 to double*
  store double %1230, double* %1231, align 1, !tbaa !2452
  %1232 = getelementptr inbounds i8, i8* %1217, i64 8
  %1233 = bitcast i8* %1232 to i64*
  store i64 %1227, i64* %1233, align 1, !tbaa !2452
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 16
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i64*
  %1239 = load i64, i64* %1238
  store i64 %1239, i64* %RDX, align 8, !tbaa !2428
  %1240 = load i64, i64* %RDX
  %1241 = add i64 %1240, 64
  %1242 = bitcast %union.vec128_t* %XMM0 to i8*
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 5
  store i64 %1244, i64* %PC
  %1245 = bitcast i8* %1242 to double*
  %1246 = load double, double* %1245, align 1
  %1247 = inttoptr i64 %1241 to double*
  store double %1246, double* %1247
  %1248 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1249 = load i64, i64* %RBP
  %1250 = sub i64 %1249, 104
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 5
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to double*
  %1254 = load double, double* %1253
  %1255 = bitcast i8* %1248 to double*
  store double %1254, double* %1255, align 1, !tbaa !2452
  %1256 = getelementptr inbounds i8, i8* %1248, i64 8
  %1257 = bitcast i8* %1256 to double*
  store double 0.000000e+00, double* %1257, align 1, !tbaa !2452
  %1258 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1259 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1260 = load i64, i64* %RBP
  %1261 = sub i64 %1260, 136
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 8
  store i64 %1263, i64* %PC
  %1264 = bitcast i8* %1259 to double*
  %1265 = load double, double* %1264, align 1
  %1266 = getelementptr inbounds i8, i8* %1259, i64 8
  %1267 = bitcast i8* %1266 to i64*
  %1268 = load i64, i64* %1267, align 1
  %1269 = inttoptr i64 %1261 to double*
  %1270 = load double, double* %1269
  %1271 = fadd double %1265, %1270
  %1272 = bitcast i8* %1258 to double*
  store double %1271, double* %1272, align 1, !tbaa !2452
  %1273 = getelementptr inbounds i8, i8* %1258, i64 8
  %1274 = bitcast i8* %1273 to i64*
  store i64 %1268, i64* %1274, align 1, !tbaa !2452
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 16
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 4
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1276 to i64*
  %1280 = load i64, i64* %1279
  store i64 %1280, i64* %RDX, align 8, !tbaa !2428
  %1281 = load i64, i64* %RDX
  %1282 = add i64 %1281, 72
  %1283 = bitcast %union.vec128_t* %XMM0 to i8*
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 5
  store i64 %1285, i64* %PC
  %1286 = bitcast i8* %1283 to double*
  %1287 = load double, double* %1286, align 1
  %1288 = inttoptr i64 %1282 to double*
  store double %1287, double* %1288
  %1289 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 136
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 8
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1291 to double*
  %1295 = load double, double* %1294
  %1296 = bitcast i8* %1289 to double*
  store double %1295, double* %1296, align 1, !tbaa !2452
  %1297 = getelementptr inbounds i8, i8* %1289, i64 8
  %1298 = bitcast i8* %1297 to double*
  store double 0.000000e+00, double* %1298, align 1, !tbaa !2452
  %1299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1300 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 104
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 5
  store i64 %1304, i64* %PC
  %1305 = bitcast i8* %1300 to double*
  %1306 = load double, double* %1305, align 1
  %1307 = getelementptr inbounds i8, i8* %1300, i64 8
  %1308 = bitcast i8* %1307 to i64*
  %1309 = load i64, i64* %1308, align 1
  %1310 = inttoptr i64 %1302 to double*
  %1311 = load double, double* %1310
  %1312 = fsub double %1306, %1311
  %1313 = bitcast i8* %1299 to double*
  store double %1312, double* %1313, align 1, !tbaa !2452
  %1314 = getelementptr inbounds i8, i8* %1299, i64 8
  %1315 = bitcast i8* %1314 to i64*
  store i64 %1309, i64* %1315, align 1, !tbaa !2452
  %1316 = load i64, i64* %RBP
  %1317 = sub i64 %1316, 16
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 4
  store i64 %1319, i64* %PC
  %1320 = inttoptr i64 %1317 to i64*
  %1321 = load i64, i64* %1320
  store i64 %1321, i64* %RDX, align 8, !tbaa !2428
  %1322 = load i64, i64* %RDX
  %1323 = add i64 %1322, 96
  %1324 = bitcast %union.vec128_t* %XMM0 to i8*
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 5
  store i64 %1326, i64* %PC
  %1327 = bitcast i8* %1324 to double*
  %1328 = load double, double* %1327, align 1
  %1329 = inttoptr i64 %1323 to double*
  store double %1328, double* %1329
  %1330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 96
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  store i64 %1334, i64* %PC
  %1335 = inttoptr i64 %1332 to double*
  %1336 = load double, double* %1335
  %1337 = bitcast i8* %1330 to double*
  store double %1336, double* %1337, align 1, !tbaa !2452
  %1338 = getelementptr inbounds i8, i8* %1330, i64 8
  %1339 = bitcast i8* %1338 to double*
  store double 0.000000e+00, double* %1339, align 1, !tbaa !2452
  %1340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1341 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1342 = load i64, i64* %RBP
  %1343 = sub i64 %1342, 128
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 5
  store i64 %1345, i64* %PC
  %1346 = bitcast i8* %1341 to double*
  %1347 = load double, double* %1346, align 1
  %1348 = getelementptr inbounds i8, i8* %1341, i64 8
  %1349 = bitcast i8* %1348 to i64*
  %1350 = load i64, i64* %1349, align 1
  %1351 = inttoptr i64 %1343 to double*
  %1352 = load double, double* %1351
  %1353 = fsub double %1347, %1352
  %1354 = bitcast i8* %1340 to double*
  store double %1353, double* %1354, align 1, !tbaa !2452
  %1355 = getelementptr inbounds i8, i8* %1340, i64 8
  %1356 = bitcast i8* %1355 to i64*
  store i64 %1350, i64* %1356, align 1, !tbaa !2452
  %1357 = load i64, i64* %RBP
  %1358 = sub i64 %1357, 16
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 4
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i64*
  %1362 = load i64, i64* %1361
  store i64 %1362, i64* %RDX, align 8, !tbaa !2428
  %1363 = load i64, i64* %RDX
  %1364 = add i64 %1363, 104
  %1365 = bitcast %union.vec128_t* %XMM0 to i8*
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 5
  store i64 %1367, i64* %PC
  %1368 = bitcast i8* %1365 to double*
  %1369 = load double, double* %1368, align 1
  %1370 = inttoptr i64 %1364 to double*
  store double %1369, double* %1370
  %1371 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 112
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 5
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to double*
  %1377 = load double, double* %1376
  %1378 = bitcast i8* %1371 to double*
  store double %1377, double* %1378, align 1, !tbaa !2452
  %1379 = getelementptr inbounds i8, i8* %1371, i64 8
  %1380 = bitcast i8* %1379 to double*
  store double 0.000000e+00, double* %1380, align 1, !tbaa !2452
  %1381 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1382 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1383 = load i64, i64* %RBP
  %1384 = sub i64 %1383, 152
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 8
  store i64 %1386, i64* %PC
  %1387 = bitcast i8* %1382 to double*
  %1388 = load double, double* %1387, align 1
  %1389 = getelementptr inbounds i8, i8* %1382, i64 8
  %1390 = bitcast i8* %1389 to i64*
  %1391 = load i64, i64* %1390, align 1
  %1392 = inttoptr i64 %1384 to double*
  %1393 = load double, double* %1392
  %1394 = fsub double %1388, %1393
  %1395 = bitcast i8* %1381 to double*
  store double %1394, double* %1395, align 1, !tbaa !2452
  %1396 = getelementptr inbounds i8, i8* %1381, i64 8
  %1397 = bitcast i8* %1396 to i64*
  store i64 %1391, i64* %1397, align 1, !tbaa !2452
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 96
  %1400 = bitcast %union.vec128_t* %XMM0 to i8*
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 5
  store i64 %1402, i64* %PC
  %1403 = bitcast i8* %1400 to double*
  %1404 = load double, double* %1403, align 1
  %1405 = inttoptr i64 %1399 to double*
  store double %1404, double* %1405
  %1406 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1407 = load i64, i64* %RBP
  %1408 = sub i64 %1407, 120
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 5
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1408 to double*
  %1412 = load double, double* %1411
  %1413 = bitcast i8* %1406 to double*
  store double %1412, double* %1413, align 1, !tbaa !2452
  %1414 = getelementptr inbounds i8, i8* %1406, i64 8
  %1415 = bitcast i8* %1414 to double*
  store double 0.000000e+00, double* %1415, align 1, !tbaa !2452
  %1416 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1417 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1418 = load i64, i64* %RBP
  %1419 = sub i64 %1418, 144
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 8
  store i64 %1421, i64* %PC
  %1422 = bitcast i8* %1417 to double*
  %1423 = load double, double* %1422, align 1
  %1424 = getelementptr inbounds i8, i8* %1417, i64 8
  %1425 = bitcast i8* %1424 to i64*
  %1426 = load i64, i64* %1425, align 1
  %1427 = inttoptr i64 %1419 to double*
  %1428 = load double, double* %1427
  %1429 = fadd double %1423, %1428
  %1430 = bitcast i8* %1416 to double*
  store double %1429, double* %1430, align 1, !tbaa !2452
  %1431 = getelementptr inbounds i8, i8* %1416, i64 8
  %1432 = bitcast i8* %1431 to i64*
  store i64 %1426, i64* %1432, align 1, !tbaa !2452
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 104
  %1435 = bitcast %union.vec128_t* %XMM0 to i8*
  %1436 = load i64, i64* %PC
  %1437 = add i64 %1436, 5
  store i64 %1437, i64* %PC
  %1438 = bitcast i8* %1435 to double*
  %1439 = load double, double* %1438, align 1
  %1440 = inttoptr i64 %1434 to double*
  store double %1439, double* %1440
  %1441 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 48
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 5
  store i64 %1445, i64* %PC
  %1446 = inttoptr i64 %1443 to double*
  %1447 = load double, double* %1446
  %1448 = bitcast i8* %1441 to double*
  store double %1447, double* %1448, align 1, !tbaa !2452
  %1449 = getelementptr inbounds i8, i8* %1441, i64 8
  %1450 = bitcast i8* %1449 to double*
  store double 0.000000e+00, double* %1450, align 1, !tbaa !2452
  %1451 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1452 = load i64, i64* %RBP
  %1453 = sub i64 %1452, 96
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 5
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1453 to double*
  %1457 = load double, double* %1456
  %1458 = bitcast i8* %1451 to double*
  store double %1457, double* %1458, align 1, !tbaa !2452
  %1459 = getelementptr inbounds i8, i8* %1451, i64 8
  %1460 = bitcast i8* %1459 to double*
  store double 0.000000e+00, double* %1460, align 1, !tbaa !2452
  %1461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1462 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1463 = load i64, i64* %RBP
  %1464 = sub i64 %1463, 104
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 5
  store i64 %1466, i64* %PC
  %1467 = bitcast i8* %1462 to double*
  %1468 = load double, double* %1467, align 1
  %1469 = getelementptr inbounds i8, i8* %1462, i64 8
  %1470 = bitcast i8* %1469 to i64*
  %1471 = load i64, i64* %1470, align 1
  %1472 = inttoptr i64 %1464 to double*
  %1473 = load double, double* %1472
  %1474 = fsub double %1468, %1473
  %1475 = bitcast i8* %1461 to double*
  store double %1474, double* %1475, align 1, !tbaa !2452
  %1476 = getelementptr inbounds i8, i8* %1461, i64 8
  %1477 = bitcast i8* %1476 to i64*
  store i64 %1471, i64* %1477, align 1, !tbaa !2452
  %1478 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1479 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1480 = bitcast %union.vec128_t* %XMM1 to i8*
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 4
  store i64 %1482, i64* %PC
  %1483 = bitcast i8* %1479 to double*
  %1484 = load double, double* %1483, align 1
  %1485 = getelementptr inbounds i8, i8* %1479, i64 8
  %1486 = bitcast i8* %1485 to i64*
  %1487 = load i64, i64* %1486, align 1
  %1488 = bitcast i8* %1480 to double*
  %1489 = load double, double* %1488, align 1
  %1490 = fmul double %1484, %1489
  %1491 = bitcast i8* %1478 to double*
  store double %1490, double* %1491, align 1, !tbaa !2452
  %1492 = getelementptr inbounds i8, i8* %1478, i64 8
  %1493 = bitcast i8* %1492 to i64*
  store i64 %1487, i64* %1493, align 1, !tbaa !2452
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 16
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 4
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %RDX, align 8, !tbaa !2428
  %1500 = load i64, i64* %RDX
  %1501 = add i64 %1500, 80
  %1502 = bitcast %union.vec128_t* %XMM0 to i8*
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = bitcast i8* %1502 to double*
  %1506 = load double, double* %1505, align 1
  %1507 = inttoptr i64 %1501 to double*
  store double %1506, double* %1507
  %1508 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1509 = load i64, i64* %RBP
  %1510 = sub i64 %1509, 48
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 5
  store i64 %1512, i64* %PC
  %1513 = inttoptr i64 %1510 to double*
  %1514 = load double, double* %1513
  %1515 = bitcast i8* %1508 to double*
  store double %1514, double* %1515, align 1, !tbaa !2452
  %1516 = getelementptr inbounds i8, i8* %1508, i64 8
  %1517 = bitcast i8* %1516 to double*
  store double 0.000000e+00, double* %1517, align 1, !tbaa !2452
  %1518 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 96
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 5
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1520 to double*
  %1524 = load double, double* %1523
  %1525 = bitcast i8* %1518 to double*
  store double %1524, double* %1525, align 1, !tbaa !2452
  %1526 = getelementptr inbounds i8, i8* %1518, i64 8
  %1527 = bitcast i8* %1526 to double*
  store double 0.000000e+00, double* %1527, align 1, !tbaa !2452
  %1528 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1529 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1530 = load i64, i64* %RBP
  %1531 = sub i64 %1530, 104
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 5
  store i64 %1533, i64* %PC
  %1534 = bitcast i8* %1529 to double*
  %1535 = load double, double* %1534, align 1
  %1536 = getelementptr inbounds i8, i8* %1529, i64 8
  %1537 = bitcast i8* %1536 to i64*
  %1538 = load i64, i64* %1537, align 1
  %1539 = inttoptr i64 %1531 to double*
  %1540 = load double, double* %1539
  %1541 = fadd double %1535, %1540
  %1542 = bitcast i8* %1528 to double*
  store double %1541, double* %1542, align 1, !tbaa !2452
  %1543 = getelementptr inbounds i8, i8* %1528, i64 8
  %1544 = bitcast i8* %1543 to i64*
  store i64 %1538, i64* %1544, align 1, !tbaa !2452
  %1545 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1546 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1547 = bitcast %union.vec128_t* %XMM1 to i8*
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 4
  store i64 %1549, i64* %PC
  %1550 = bitcast i8* %1546 to double*
  %1551 = load double, double* %1550, align 1
  %1552 = getelementptr inbounds i8, i8* %1546, i64 8
  %1553 = bitcast i8* %1552 to i64*
  %1554 = load i64, i64* %1553, align 1
  %1555 = bitcast i8* %1547 to double*
  %1556 = load double, double* %1555, align 1
  %1557 = fmul double %1551, %1556
  %1558 = bitcast i8* %1545 to double*
  store double %1557, double* %1558, align 1, !tbaa !2452
  %1559 = getelementptr inbounds i8, i8* %1545, i64 8
  %1560 = bitcast i8* %1559 to i64*
  store i64 %1554, i64* %1560, align 1, !tbaa !2452
  %1561 = load i64, i64* %RBP
  %1562 = sub i64 %1561, 16
  %1563 = load i64, i64* %PC
  %1564 = add i64 %1563, 4
  store i64 %1564, i64* %PC
  %1565 = inttoptr i64 %1562 to i64*
  %1566 = load i64, i64* %1565
  store i64 %1566, i64* %RDX, align 8, !tbaa !2428
  %1567 = load i64, i64* %RDX
  %1568 = add i64 %1567, 88
  %1569 = bitcast %union.vec128_t* %XMM0 to i8*
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 5
  store i64 %1571, i64* %PC
  %1572 = bitcast i8* %1569 to double*
  %1573 = load double, double* %1572, align 1
  %1574 = inttoptr i64 %1568 to double*
  store double %1573, double* %1574
  %1575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 152
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 8
  store i64 %1579, i64* %PC
  %1580 = inttoptr i64 %1577 to double*
  %1581 = load double, double* %1580
  %1582 = bitcast i8* %1575 to double*
  store double %1581, double* %1582, align 1, !tbaa !2452
  %1583 = getelementptr inbounds i8, i8* %1575, i64 8
  %1584 = bitcast i8* %1583 to double*
  store double 0.000000e+00, double* %1584, align 1, !tbaa !2452
  %1585 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1586 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1587 = load i64, i64* %RBP
  %1588 = sub i64 %1587, 112
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = bitcast i8* %1586 to double*
  %1592 = load double, double* %1591, align 1
  %1593 = getelementptr inbounds i8, i8* %1586, i64 8
  %1594 = bitcast i8* %1593 to i64*
  %1595 = load i64, i64* %1594, align 1
  %1596 = inttoptr i64 %1588 to double*
  %1597 = load double, double* %1596
  %1598 = fadd double %1592, %1597
  %1599 = bitcast i8* %1585 to double*
  store double %1598, double* %1599, align 1, !tbaa !2452
  %1600 = getelementptr inbounds i8, i8* %1585, i64 8
  %1601 = bitcast i8* %1600 to i64*
  store i64 %1595, i64* %1601, align 1, !tbaa !2452
  %1602 = load i64, i64* %RBP
  %1603 = sub i64 %1602, 96
  %1604 = bitcast %union.vec128_t* %XMM0 to i8*
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 5
  store i64 %1606, i64* %PC
  %1607 = bitcast i8* %1604 to double*
  %1608 = load double, double* %1607, align 1
  %1609 = inttoptr i64 %1603 to double*
  store double %1608, double* %1609
  %1610 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 144
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 8
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to double*
  %1616 = load double, double* %1615
  %1617 = bitcast i8* %1610 to double*
  store double %1616, double* %1617, align 1, !tbaa !2452
  %1618 = getelementptr inbounds i8, i8* %1610, i64 8
  %1619 = bitcast i8* %1618 to double*
  store double 0.000000e+00, double* %1619, align 1, !tbaa !2452
  %1620 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1621 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1622 = load i64, i64* %RBP
  %1623 = sub i64 %1622, 120
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 5
  store i64 %1625, i64* %PC
  %1626 = bitcast i8* %1621 to double*
  %1627 = load double, double* %1626, align 1
  %1628 = getelementptr inbounds i8, i8* %1621, i64 8
  %1629 = bitcast i8* %1628 to i64*
  %1630 = load i64, i64* %1629, align 1
  %1631 = inttoptr i64 %1623 to double*
  %1632 = load double, double* %1631
  %1633 = fsub double %1627, %1632
  %1634 = bitcast i8* %1620 to double*
  store double %1633, double* %1634, align 1, !tbaa !2452
  %1635 = getelementptr inbounds i8, i8* %1620, i64 8
  %1636 = bitcast i8* %1635 to i64*
  store i64 %1630, i64* %1636, align 1, !tbaa !2452
  %1637 = load i64, i64* %RBP
  %1638 = sub i64 %1637, 104
  %1639 = bitcast %union.vec128_t* %XMM0 to i8*
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 5
  store i64 %1641, i64* %PC
  %1642 = bitcast i8* %1639 to double*
  %1643 = load double, double* %1642, align 1
  %1644 = inttoptr i64 %1638 to double*
  store double %1643, double* %1644
  %1645 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1646 = load i64, i64* %RBP
  %1647 = sub i64 %1646, 48
  %1648 = load i64, i64* %PC
  %1649 = add i64 %1648, 5
  store i64 %1649, i64* %PC
  %1650 = inttoptr i64 %1647 to double*
  %1651 = load double, double* %1650
  %1652 = bitcast i8* %1645 to double*
  store double %1651, double* %1652, align 1, !tbaa !2452
  %1653 = getelementptr inbounds i8, i8* %1645, i64 8
  %1654 = bitcast i8* %1653 to double*
  store double 0.000000e+00, double* %1654, align 1, !tbaa !2452
  %1655 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1656 = load i64, i64* %RBP
  %1657 = sub i64 %1656, 104
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 5
  store i64 %1659, i64* %PC
  %1660 = inttoptr i64 %1657 to double*
  %1661 = load double, double* %1660
  %1662 = bitcast i8* %1655 to double*
  store double %1661, double* %1662, align 1, !tbaa !2452
  %1663 = getelementptr inbounds i8, i8* %1655, i64 8
  %1664 = bitcast i8* %1663 to double*
  store double 0.000000e+00, double* %1664, align 1, !tbaa !2452
  %1665 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1666 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 96
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 5
  store i64 %1670, i64* %PC
  %1671 = bitcast i8* %1666 to double*
  %1672 = load double, double* %1671, align 1
  %1673 = getelementptr inbounds i8, i8* %1666, i64 8
  %1674 = bitcast i8* %1673 to i64*
  %1675 = load i64, i64* %1674, align 1
  %1676 = inttoptr i64 %1668 to double*
  %1677 = load double, double* %1676
  %1678 = fsub double %1672, %1677
  %1679 = bitcast i8* %1665 to double*
  store double %1678, double* %1679, align 1, !tbaa !2452
  %1680 = getelementptr inbounds i8, i8* %1665, i64 8
  %1681 = bitcast i8* %1680 to i64*
  store i64 %1675, i64* %1681, align 1, !tbaa !2452
  %1682 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1684 = bitcast %union.vec128_t* %XMM1 to i8*
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 4
  store i64 %1686, i64* %PC
  %1687 = bitcast i8* %1683 to double*
  %1688 = load double, double* %1687, align 1
  %1689 = getelementptr inbounds i8, i8* %1683, i64 8
  %1690 = bitcast i8* %1689 to i64*
  %1691 = load i64, i64* %1690, align 1
  %1692 = bitcast i8* %1684 to double*
  %1693 = load double, double* %1692, align 1
  %1694 = fmul double %1688, %1693
  %1695 = bitcast i8* %1682 to double*
  store double %1694, double* %1695, align 1, !tbaa !2452
  %1696 = getelementptr inbounds i8, i8* %1682, i64 8
  %1697 = bitcast i8* %1696 to i64*
  store i64 %1691, i64* %1697, align 1, !tbaa !2452
  %1698 = load i64, i64* %RBP
  %1699 = sub i64 %1698, 16
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 4
  store i64 %1701, i64* %PC
  %1702 = inttoptr i64 %1699 to i64*
  %1703 = load i64, i64* %1702
  store i64 %1703, i64* %RDX, align 8, !tbaa !2428
  %1704 = load i64, i64* %RDX
  %1705 = add i64 %1704, 112
  %1706 = bitcast %union.vec128_t* %XMM0 to i8*
  %1707 = load i64, i64* %PC
  %1708 = add i64 %1707, 5
  store i64 %1708, i64* %PC
  %1709 = bitcast i8* %1706 to double*
  %1710 = load double, double* %1709, align 1
  %1711 = inttoptr i64 %1705 to double*
  store double %1710, double* %1711
  %1712 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1713 = load i64, i64* %RBP
  %1714 = sub i64 %1713, 48
  %1715 = load i64, i64* %PC
  %1716 = add i64 %1715, 5
  store i64 %1716, i64* %PC
  %1717 = inttoptr i64 %1714 to double*
  %1718 = load double, double* %1717
  %1719 = bitcast i8* %1712 to double*
  store double %1718, double* %1719, align 1, !tbaa !2452
  %1720 = getelementptr inbounds i8, i8* %1712, i64 8
  %1721 = bitcast i8* %1720 to double*
  store double 0.000000e+00, double* %1721, align 1, !tbaa !2452
  %1722 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1723 = load i64, i64* %RBP
  %1724 = sub i64 %1723, 104
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 5
  store i64 %1726, i64* %PC
  %1727 = inttoptr i64 %1724 to double*
  %1728 = load double, double* %1727
  %1729 = bitcast i8* %1722 to double*
  store double %1728, double* %1729, align 1, !tbaa !2452
  %1730 = getelementptr inbounds i8, i8* %1722, i64 8
  %1731 = bitcast i8* %1730 to double*
  store double 0.000000e+00, double* %1731, align 1, !tbaa !2452
  %1732 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1733 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1734 = load i64, i64* %RBP
  %1735 = sub i64 %1734, 96
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 5
  store i64 %1737, i64* %PC
  %1738 = bitcast i8* %1733 to double*
  %1739 = load double, double* %1738, align 1
  %1740 = getelementptr inbounds i8, i8* %1733, i64 8
  %1741 = bitcast i8* %1740 to i64*
  %1742 = load i64, i64* %1741, align 1
  %1743 = inttoptr i64 %1735 to double*
  %1744 = load double, double* %1743
  %1745 = fadd double %1739, %1744
  %1746 = bitcast i8* %1732 to double*
  store double %1745, double* %1746, align 1, !tbaa !2452
  %1747 = getelementptr inbounds i8, i8* %1732, i64 8
  %1748 = bitcast i8* %1747 to i64*
  store i64 %1742, i64* %1748, align 1, !tbaa !2452
  %1749 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1750 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1751 = bitcast %union.vec128_t* %XMM1 to i8*
  %1752 = load i64, i64* %PC
  %1753 = add i64 %1752, 4
  store i64 %1753, i64* %PC
  %1754 = bitcast i8* %1750 to double*
  %1755 = load double, double* %1754, align 1
  %1756 = getelementptr inbounds i8, i8* %1750, i64 8
  %1757 = bitcast i8* %1756 to i64*
  %1758 = load i64, i64* %1757, align 1
  %1759 = bitcast i8* %1751 to double*
  %1760 = load double, double* %1759, align 1
  %1761 = fmul double %1755, %1760
  %1762 = bitcast i8* %1749 to double*
  store double %1761, double* %1762, align 1, !tbaa !2452
  %1763 = getelementptr inbounds i8, i8* %1749, i64 8
  %1764 = bitcast i8* %1763 to i64*
  store i64 %1758, i64* %1764, align 1, !tbaa !2452
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 16
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 4
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to i64*
  %1770 = load i64, i64* %1769
  store i64 %1770, i64* %RDX, align 8, !tbaa !2428
  %1771 = load i64, i64* %RDX
  %1772 = add i64 %1771, 120
  %1773 = bitcast %union.vec128_t* %XMM0 to i8*
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 5
  store i64 %1775, i64* %PC
  %1776 = bitcast i8* %1773 to double*
  %1777 = load double, double* %1776, align 1
  %1778 = inttoptr i64 %1772 to double*
  store double %1777, double* %1778
  %1779 = load i64, i64* %RBP
  %1780 = sub i64 %1779, 32
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 7
  store i64 %1782, i64* %PC
  %1783 = inttoptr i64 %1780 to i32*
  store i32 0, i32* %1783
  %1784 = load i64, i64* %RBP
  %1785 = sub i64 %1784, 28
  %1786 = load i64, i64* %PC
  %1787 = add i64 %1786, 7
  store i64 %1787, i64* %PC
  %1788 = inttoptr i64 %1785 to i32*
  store i32 16, i32* %1788
  br label %block_402bf2

block_402bfe:                                     ; preds = %block_402bf2
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 10
  store i64 %1790, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1791 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 8
  store i64 %1793, i64* %PC
  %1794 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 80) to double*)
  %1795 = bitcast i8* %1791 to double*
  store double %1794, double* %1795, align 1, !tbaa !2452
  %1796 = getelementptr inbounds i8, i8* %1791, i64 8
  %1797 = bitcast i8* %1796 to double*
  store double 0.000000e+00, double* %1797, align 1, !tbaa !2452
  %1798 = load i64, i64* %RBP
  %1799 = sub i64 %1798, 32
  %1800 = load i64, i64* %PC
  %1801 = add i64 %1800, 3
  store i64 %1801, i64* %PC
  %1802 = inttoptr i64 %1799 to i32*
  %1803 = load i32, i32* %1802
  %1804 = zext i32 %1803 to i64
  store i64 %1804, i64* %RCX, align 8, !tbaa !2428
  %1805 = load i64, i64* %RCX
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 3
  store i64 %1807, i64* %PC
  %1808 = trunc i64 %1805 to i32
  %1809 = add i32 2, %1808
  %1810 = zext i32 %1809 to i64
  store i64 %1810, i64* %RCX, align 8, !tbaa !2428
  %1811 = icmp ult i32 %1809, %1808
  %1812 = icmp ult i32 %1809, 2
  %1813 = or i1 %1811, %1812
  %1814 = zext i1 %1813 to i8
  %1815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1814, i8* %1815, align 1, !tbaa !2432
  %1816 = and i32 %1809, 255
  %1817 = call i32 @llvm.ctpop.i32(i32 %1816) #17
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  %1820 = xor i8 %1819, 1
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1820, i8* %1821, align 1, !tbaa !2446
  %1822 = xor i64 2, %1805
  %1823 = trunc i64 %1822 to i32
  %1824 = xor i32 %1823, %1809
  %1825 = lshr i32 %1824, 4
  %1826 = trunc i32 %1825 to i8
  %1827 = and i8 %1826, 1
  %1828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1827, i8* %1828, align 1, !tbaa !2447
  %1829 = icmp eq i32 %1809, 0
  %1830 = zext i1 %1829 to i8
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1830, i8* %1831, align 1, !tbaa !2448
  %1832 = lshr i32 %1809, 31
  %1833 = trunc i32 %1832 to i8
  %1834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1833, i8* %1834, align 1, !tbaa !2449
  %1835 = lshr i32 %1808, 31
  %1836 = xor i32 %1832, %1835
  %1837 = add nuw nsw i32 %1836, %1832
  %1838 = icmp eq i32 %1837, 2
  %1839 = zext i1 %1838 to i8
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1839, i8* %1840, align 1, !tbaa !2450
  %1841 = load i64, i64* %RBP
  %1842 = sub i64 %1841, 32
  %1843 = load i32, i32* %ECX
  %1844 = zext i32 %1843 to i64
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 3
  store i64 %1846, i64* %PC
  %1847 = inttoptr i64 %1842 to i32*
  store i32 %1843, i32* %1847
  %1848 = load i64, i64* %RBP
  %1849 = sub i64 %1848, 32
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 3
  store i64 %1851, i64* %PC
  %1852 = inttoptr i64 %1849 to i32*
  %1853 = load i32, i32* %1852
  %1854 = zext i32 %1853 to i64
  store i64 %1854, i64* %RCX, align 8, !tbaa !2428
  %1855 = load i64, i64* %RCX
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 3
  store i64 %1857, i64* %PC
  %1858 = trunc i64 %1855 to i32
  %1859 = shl i32 %1858, 1
  %1860 = icmp slt i32 %1858, 0
  %1861 = icmp slt i32 %1859, 0
  %1862 = xor i1 %1860, %1861
  %1863 = zext i32 %1859 to i64
  store i64 %1863, i64* %RCX, align 8, !tbaa !2428
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1865 = zext i1 %1860 to i8
  store i8 %1865, i8* %1864, align 1, !tbaa !2451
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1867 = and i32 %1859, 254
  %1868 = call i32 @llvm.ctpop.i32(i32 %1867) #17
  %1869 = trunc i32 %1868 to i8
  %1870 = and i8 %1869, 1
  %1871 = xor i8 %1870, 1
  store i8 %1871, i8* %1866, align 1, !tbaa !2451
  %1872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1872, align 1, !tbaa !2451
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1874 = icmp eq i32 %1859, 0
  %1875 = zext i1 %1874 to i8
  store i8 %1875, i8* %1873, align 1, !tbaa !2451
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1877 = lshr i32 %1859, 31
  %1878 = trunc i32 %1877 to i8
  store i8 %1878, i8* %1876, align 1, !tbaa !2451
  %1879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1880 = zext i1 %1862 to i8
  store i8 %1880, i8* %1879, align 1, !tbaa !2451
  %1881 = load i64, i64* %RBP
  %1882 = sub i64 %1881, 36
  %1883 = load i32, i32* %ECX
  %1884 = zext i32 %1883 to i64
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 3
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1882 to i32*
  store i32 %1883, i32* %1887
  %1888 = load i64, i64* %RBP
  %1889 = sub i64 %1888, 24
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 4
  store i64 %1891, i64* %PC
  %1892 = inttoptr i64 %1889 to i64*
  %1893 = load i64, i64* %1892
  store i64 %1893, i64* %RDX, align 8, !tbaa !2428
  %1894 = load i64, i64* %RBP
  %1895 = sub i64 %1894, 32
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 4
  store i64 %1897, i64* %PC
  %1898 = inttoptr i64 %1895 to i32*
  %1899 = load i32, i32* %1898
  %1900 = sext i32 %1899 to i64
  store i64 %1900, i64* %RSI, align 8, !tbaa !2428
  %1901 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1902 = load i64, i64* %RDX
  %1903 = load i64, i64* %RSI
  %1904 = mul i64 %1903, 8
  %1905 = add i64 %1904, %1902
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 5
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to double*
  %1909 = load double, double* %1908
  %1910 = bitcast i8* %1901 to double*
  store double %1909, double* %1910, align 1, !tbaa !2452
  %1911 = getelementptr inbounds i8, i8* %1901, i64 8
  %1912 = bitcast i8* %1911 to double*
  store double 0.000000e+00, double* %1912, align 1, !tbaa !2452
  %1913 = load i64, i64* %RBP
  %1914 = sub i64 %1913, 64
  %1915 = bitcast %union.vec128_t* %XMM1 to i8*
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 5
  store i64 %1917, i64* %PC
  %1918 = bitcast i8* %1915 to double*
  %1919 = load double, double* %1918, align 1
  %1920 = inttoptr i64 %1914 to double*
  store double %1919, double* %1920
  %1921 = load i64, i64* %RBP
  %1922 = sub i64 %1921, 24
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 4
  store i64 %1924, i64* %PC
  %1925 = inttoptr i64 %1922 to i64*
  %1926 = load i64, i64* %1925
  store i64 %1926, i64* %RDX, align 8, !tbaa !2428
  %1927 = load i64, i64* %RBP
  %1928 = sub i64 %1927, 32
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 3
  store i64 %1930, i64* %PC
  %1931 = inttoptr i64 %1928 to i32*
  %1932 = load i32, i32* %1931
  %1933 = zext i32 %1932 to i64
  store i64 %1933, i64* %RCX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RCX
  %1935 = load i64, i64* %PC
  %1936 = add i64 %1935, 3
  store i64 %1936, i64* %PC
  %1937 = trunc i64 %1934 to i32
  %1938 = add i32 1, %1937
  %1939 = zext i32 %1938 to i64
  store i64 %1939, i64* %RCX, align 8, !tbaa !2428
  %1940 = icmp ult i32 %1938, %1937
  %1941 = icmp ult i32 %1938, 1
  %1942 = or i1 %1940, %1941
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1943, i8* %1944, align 1, !tbaa !2432
  %1945 = and i32 %1938, 255
  %1946 = call i32 @llvm.ctpop.i32(i32 %1945) #17
  %1947 = trunc i32 %1946 to i8
  %1948 = and i8 %1947, 1
  %1949 = xor i8 %1948, 1
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1949, i8* %1950, align 1, !tbaa !2446
  %1951 = xor i64 1, %1934
  %1952 = trunc i64 %1951 to i32
  %1953 = xor i32 %1952, %1938
  %1954 = lshr i32 %1953, 4
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1956, i8* %1957, align 1, !tbaa !2447
  %1958 = icmp eq i32 %1938, 0
  %1959 = zext i1 %1958 to i8
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1959, i8* %1960, align 1, !tbaa !2448
  %1961 = lshr i32 %1938, 31
  %1962 = trunc i32 %1961 to i8
  %1963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1962, i8* %1963, align 1, !tbaa !2449
  %1964 = lshr i32 %1937, 31
  %1965 = xor i32 %1961, %1964
  %1966 = add nuw nsw i32 %1965, %1961
  %1967 = icmp eq i32 %1966, 2
  %1968 = zext i1 %1967 to i8
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1968, i8* %1969, align 1, !tbaa !2450
  %1970 = load i32, i32* %ECX
  %1971 = zext i32 %1970 to i64
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 3
  store i64 %1973, i64* %PC
  %1974 = shl i64 %1971, 32
  %1975 = ashr exact i64 %1974, 32
  store i64 %1975, i64* %RSI, align 8, !tbaa !2428
  %1976 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1977 = load i64, i64* %RDX
  %1978 = load i64, i64* %RSI
  %1979 = mul i64 %1978, 8
  %1980 = add i64 %1979, %1977
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to double*
  %1984 = load double, double* %1983
  %1985 = bitcast i8* %1976 to double*
  store double %1984, double* %1985, align 1, !tbaa !2452
  %1986 = getelementptr inbounds i8, i8* %1976, i64 8
  %1987 = bitcast i8* %1986 to double*
  store double 0.000000e+00, double* %1987, align 1, !tbaa !2452
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 72
  %1990 = bitcast %union.vec128_t* %XMM1 to i8*
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 5
  store i64 %1992, i64* %PC
  %1993 = bitcast i8* %1990 to double*
  %1994 = load double, double* %1993, align 1
  %1995 = inttoptr i64 %1989 to double*
  store double %1994, double* %1995
  %1996 = load i64, i64* %RBP
  %1997 = sub i64 %1996, 24
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 4
  store i64 %1999, i64* %PC
  %2000 = inttoptr i64 %1997 to i64*
  %2001 = load i64, i64* %2000
  store i64 %2001, i64* %RDX, align 8, !tbaa !2428
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 36
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = inttoptr i64 %2003 to i32*
  %2007 = load i32, i32* %2006
  %2008 = sext i32 %2007 to i64
  store i64 %2008, i64* %RSI, align 8, !tbaa !2428
  %2009 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2010 = load i64, i64* %RDX
  %2011 = load i64, i64* %RSI
  %2012 = mul i64 %2011, 8
  %2013 = add i64 %2012, %2010
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 5
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2013 to double*
  %2017 = load double, double* %2016
  %2018 = bitcast i8* %2009 to double*
  store double %2017, double* %2018, align 1, !tbaa !2452
  %2019 = getelementptr inbounds i8, i8* %2009, i64 8
  %2020 = bitcast i8* %2019 to double*
  store double 0.000000e+00, double* %2020, align 1, !tbaa !2452
  %2021 = load i64, i64* %RBP
  %2022 = sub i64 %2021, 48
  %2023 = bitcast %union.vec128_t* %XMM1 to i8*
  %2024 = load i64, i64* %PC
  %2025 = add i64 %2024, 5
  store i64 %2025, i64* %PC
  %2026 = bitcast i8* %2023 to double*
  %2027 = load double, double* %2026, align 1
  %2028 = inttoptr i64 %2022 to double*
  store double %2027, double* %2028
  %2029 = load i64, i64* %RBP
  %2030 = sub i64 %2029, 24
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 4
  store i64 %2032, i64* %PC
  %2033 = inttoptr i64 %2030 to i64*
  %2034 = load i64, i64* %2033
  store i64 %2034, i64* %RDX, align 8, !tbaa !2428
  %2035 = load i64, i64* %RBP
  %2036 = sub i64 %2035, 36
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 3
  store i64 %2038, i64* %PC
  %2039 = inttoptr i64 %2036 to i32*
  %2040 = load i32, i32* %2039
  %2041 = zext i32 %2040 to i64
  store i64 %2041, i64* %RCX, align 8, !tbaa !2428
  %2042 = load i64, i64* %RCX
  %2043 = load i64, i64* %PC
  %2044 = add i64 %2043, 3
  store i64 %2044, i64* %PC
  %2045 = trunc i64 %2042 to i32
  %2046 = add i32 1, %2045
  %2047 = zext i32 %2046 to i64
  store i64 %2047, i64* %RCX, align 8, !tbaa !2428
  %2048 = icmp ult i32 %2046, %2045
  %2049 = icmp ult i32 %2046, 1
  %2050 = or i1 %2048, %2049
  %2051 = zext i1 %2050 to i8
  %2052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2051, i8* %2052, align 1, !tbaa !2432
  %2053 = and i32 %2046, 255
  %2054 = call i32 @llvm.ctpop.i32(i32 %2053) #17
  %2055 = trunc i32 %2054 to i8
  %2056 = and i8 %2055, 1
  %2057 = xor i8 %2056, 1
  %2058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2057, i8* %2058, align 1, !tbaa !2446
  %2059 = xor i64 1, %2042
  %2060 = trunc i64 %2059 to i32
  %2061 = xor i32 %2060, %2046
  %2062 = lshr i32 %2061, 4
  %2063 = trunc i32 %2062 to i8
  %2064 = and i8 %2063, 1
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2064, i8* %2065, align 1, !tbaa !2447
  %2066 = icmp eq i32 %2046, 0
  %2067 = zext i1 %2066 to i8
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2067, i8* %2068, align 1, !tbaa !2448
  %2069 = lshr i32 %2046, 31
  %2070 = trunc i32 %2069 to i8
  %2071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2070, i8* %2071, align 1, !tbaa !2449
  %2072 = lshr i32 %2045, 31
  %2073 = xor i32 %2069, %2072
  %2074 = add nuw nsw i32 %2073, %2069
  %2075 = icmp eq i32 %2074, 2
  %2076 = zext i1 %2075 to i8
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2076, i8* %2077, align 1, !tbaa !2450
  %2078 = load i32, i32* %ECX
  %2079 = zext i32 %2078 to i64
  %2080 = load i64, i64* %PC
  %2081 = add i64 %2080, 3
  store i64 %2081, i64* %PC
  %2082 = shl i64 %2079, 32
  %2083 = ashr exact i64 %2082, 32
  store i64 %2083, i64* %RSI, align 8, !tbaa !2428
  %2084 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2085 = load i64, i64* %RDX
  %2086 = load i64, i64* %RSI
  %2087 = mul i64 %2086, 8
  %2088 = add i64 %2087, %2085
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  store i64 %2090, i64* %PC
  %2091 = inttoptr i64 %2088 to double*
  %2092 = load double, double* %2091
  %2093 = bitcast i8* %2084 to double*
  store double %2092, double* %2093, align 1, !tbaa !2452
  %2094 = getelementptr inbounds i8, i8* %2084, i64 8
  %2095 = bitcast i8* %2094 to double*
  store double 0.000000e+00, double* %2095, align 1, !tbaa !2452
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 56
  %2098 = bitcast %union.vec128_t* %XMM1 to i8*
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 5
  store i64 %2100, i64* %PC
  %2101 = bitcast i8* %2098 to double*
  %2102 = load double, double* %2101, align 1
  %2103 = inttoptr i64 %2097 to double*
  store double %2102, double* %2103
  %2104 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2105 = load i64, i64* %RBP
  %2106 = sub i64 %2105, 48
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 5
  store i64 %2108, i64* %PC
  %2109 = inttoptr i64 %2106 to double*
  %2110 = load double, double* %2109
  %2111 = bitcast i8* %2104 to double*
  store double %2110, double* %2111, align 1, !tbaa !2452
  %2112 = getelementptr inbounds i8, i8* %2104, i64 8
  %2113 = bitcast i8* %2112 to double*
  store double 0.000000e+00, double* %2113, align 1, !tbaa !2452
  %2114 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2115 = bitcast %union.vec128_t* %XMM0 to i8*
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 3
  store i64 %2117, i64* %PC
  %2118 = bitcast i8* %2115 to <2 x i32>*
  %2119 = load <2 x i32>, <2 x i32>* %2118, align 1
  %2120 = getelementptr inbounds i8, i8* %2115, i64 8
  %2121 = bitcast i8* %2120 to <2 x i32>*
  %2122 = load <2 x i32>, <2 x i32>* %2121, align 1
  %2123 = extractelement <2 x i32> %2119, i32 0
  %2124 = bitcast i8* %2114 to i32*
  store i32 %2123, i32* %2124, align 1, !tbaa !2455
  %2125 = extractelement <2 x i32> %2119, i32 1
  %2126 = getelementptr inbounds i8, i8* %2114, i64 4
  %2127 = bitcast i8* %2126 to i32*
  store i32 %2125, i32* %2127, align 1, !tbaa !2455
  %2128 = extractelement <2 x i32> %2122, i32 0
  %2129 = getelementptr inbounds i8, i8* %2114, i64 8
  %2130 = bitcast i8* %2129 to i32*
  store i32 %2128, i32* %2130, align 1, !tbaa !2455
  %2131 = extractelement <2 x i32> %2122, i32 1
  %2132 = getelementptr inbounds i8, i8* %2114, i64 12
  %2133 = bitcast i8* %2132 to i32*
  store i32 %2131, i32* %2133, align 1, !tbaa !2455
  %2134 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2135 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 72
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 5
  store i64 %2139, i64* %PC
  %2140 = bitcast i8* %2135 to double*
  %2141 = load double, double* %2140, align 1
  %2142 = getelementptr inbounds i8, i8* %2135, i64 8
  %2143 = bitcast i8* %2142 to i64*
  %2144 = load i64, i64* %2143, align 1
  %2145 = inttoptr i64 %2137 to double*
  %2146 = load double, double* %2145
  %2147 = fmul double %2141, %2146
  %2148 = bitcast i8* %2134 to double*
  store double %2147, double* %2148, align 1, !tbaa !2452
  %2149 = getelementptr inbounds i8, i8* %2134, i64 8
  %2150 = bitcast i8* %2149 to i64*
  store i64 %2144, i64* %2150, align 1, !tbaa !2452
  %2151 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2152 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2153 = load i64, i64* %RBP
  %2154 = sub i64 %2153, 56
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 5
  store i64 %2156, i64* %PC
  %2157 = bitcast i8* %2152 to double*
  %2158 = load double, double* %2157, align 1
  %2159 = getelementptr inbounds i8, i8* %2152, i64 8
  %2160 = bitcast i8* %2159 to i64*
  %2161 = load i64, i64* %2160, align 1
  %2162 = inttoptr i64 %2154 to double*
  %2163 = load double, double* %2162
  %2164 = fmul double %2158, %2163
  %2165 = bitcast i8* %2151 to double*
  store double %2164, double* %2165, align 1, !tbaa !2452
  %2166 = getelementptr inbounds i8, i8* %2151, i64 8
  %2167 = bitcast i8* %2166 to i64*
  store i64 %2161, i64* %2167, align 1, !tbaa !2452
  %2168 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2169 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2170 = bitcast %union.vec128_t* %XMM2 to i8*
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 4
  store i64 %2172, i64* %PC
  %2173 = bitcast i8* %2169 to double*
  %2174 = load double, double* %2173, align 1
  %2175 = getelementptr inbounds i8, i8* %2169, i64 8
  %2176 = bitcast i8* %2175 to i64*
  %2177 = load i64, i64* %2176, align 1
  %2178 = bitcast i8* %2170 to double*
  %2179 = load double, double* %2178, align 1
  %2180 = fsub double %2174, %2179
  %2181 = bitcast i8* %2168 to double*
  store double %2180, double* %2181, align 1, !tbaa !2452
  %2182 = getelementptr inbounds i8, i8* %2168, i64 8
  %2183 = bitcast i8* %2182 to i64*
  store i64 %2177, i64* %2183, align 1, !tbaa !2452
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 80
  %2186 = bitcast %union.vec128_t* %XMM1 to i8*
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 5
  store i64 %2188, i64* %PC
  %2189 = bitcast i8* %2186 to double*
  %2190 = load double, double* %2189, align 1
  %2191 = inttoptr i64 %2185 to double*
  store double %2190, double* %2191
  %2192 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2193 = bitcast %union.vec128_t* %XMM0 to i8*
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 3
  store i64 %2195, i64* %PC
  %2196 = bitcast i8* %2193 to <2 x i32>*
  %2197 = load <2 x i32>, <2 x i32>* %2196, align 1
  %2198 = getelementptr inbounds i8, i8* %2193, i64 8
  %2199 = bitcast i8* %2198 to <2 x i32>*
  %2200 = load <2 x i32>, <2 x i32>* %2199, align 1
  %2201 = extractelement <2 x i32> %2197, i32 0
  %2202 = bitcast i8* %2192 to i32*
  store i32 %2201, i32* %2202, align 1, !tbaa !2455
  %2203 = extractelement <2 x i32> %2197, i32 1
  %2204 = getelementptr inbounds i8, i8* %2192, i64 4
  %2205 = bitcast i8* %2204 to i32*
  store i32 %2203, i32* %2205, align 1, !tbaa !2455
  %2206 = extractelement <2 x i32> %2200, i32 0
  %2207 = getelementptr inbounds i8, i8* %2192, i64 8
  %2208 = bitcast i8* %2207 to i32*
  store i32 %2206, i32* %2208, align 1, !tbaa !2455
  %2209 = extractelement <2 x i32> %2200, i32 1
  %2210 = getelementptr inbounds i8, i8* %2192, i64 12
  %2211 = bitcast i8* %2210 to i32*
  store i32 %2209, i32* %2211, align 1, !tbaa !2455
  %2212 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2213 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2214 = load i64, i64* %RBP
  %2215 = sub i64 %2214, 72
  %2216 = load i64, i64* %PC
  %2217 = add i64 %2216, 5
  store i64 %2217, i64* %PC
  %2218 = bitcast i8* %2213 to double*
  %2219 = load double, double* %2218, align 1
  %2220 = getelementptr inbounds i8, i8* %2213, i64 8
  %2221 = bitcast i8* %2220 to i64*
  %2222 = load i64, i64* %2221, align 1
  %2223 = inttoptr i64 %2215 to double*
  %2224 = load double, double* %2223
  %2225 = fmul double %2219, %2224
  %2226 = bitcast i8* %2212 to double*
  store double %2225, double* %2226, align 1, !tbaa !2452
  %2227 = getelementptr inbounds i8, i8* %2212, i64 8
  %2228 = bitcast i8* %2227 to i64*
  store i64 %2222, i64* %2228, align 1, !tbaa !2452
  %2229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2230 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2231 = load i64, i64* %RBP
  %2232 = sub i64 %2231, 48
  %2233 = load i64, i64* %PC
  %2234 = add i64 %2233, 5
  store i64 %2234, i64* %PC
  %2235 = bitcast i8* %2230 to double*
  %2236 = load double, double* %2235, align 1
  %2237 = getelementptr inbounds i8, i8* %2230, i64 8
  %2238 = bitcast i8* %2237 to i64*
  %2239 = load i64, i64* %2238, align 1
  %2240 = inttoptr i64 %2232 to double*
  %2241 = load double, double* %2240
  %2242 = fmul double %2236, %2241
  %2243 = bitcast i8* %2229 to double*
  store double %2242, double* %2243, align 1, !tbaa !2452
  %2244 = getelementptr inbounds i8, i8* %2229, i64 8
  %2245 = bitcast i8* %2244 to i64*
  store i64 %2239, i64* %2245, align 1, !tbaa !2452
  %2246 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2247 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2248 = load i64, i64* %RBP
  %2249 = sub i64 %2248, 56
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 5
  store i64 %2251, i64* %PC
  %2252 = bitcast i8* %2247 to double*
  %2253 = load double, double* %2252, align 1
  %2254 = getelementptr inbounds i8, i8* %2247, i64 8
  %2255 = bitcast i8* %2254 to i64*
  %2256 = load i64, i64* %2255, align 1
  %2257 = inttoptr i64 %2249 to double*
  %2258 = load double, double* %2257
  %2259 = fsub double %2253, %2258
  %2260 = bitcast i8* %2246 to double*
  store double %2259, double* %2260, align 1, !tbaa !2452
  %2261 = getelementptr inbounds i8, i8* %2246, i64 8
  %2262 = bitcast i8* %2261 to i64*
  store i64 %2256, i64* %2262, align 1, !tbaa !2452
  %2263 = load i64, i64* %RBP
  %2264 = sub i64 %2263, 88
  %2265 = bitcast %union.vec128_t* %XMM1 to i8*
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 5
  store i64 %2267, i64* %PC
  %2268 = bitcast i8* %2265 to double*
  %2269 = load double, double* %2268, align 1
  %2270 = inttoptr i64 %2264 to double*
  store double %2269, double* %2270
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 16
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 4
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to i64*
  %2276 = load i64, i64* %2275
  store i64 %2276, i64* %RDX, align 8, !tbaa !2428
  %2277 = load i64, i64* %RBP
  %2278 = sub i64 %2277, 28
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 4
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2278 to i32*
  %2282 = load i32, i32* %2281
  %2283 = sext i32 %2282 to i64
  store i64 %2283, i64* %RSI, align 8, !tbaa !2428
  %2284 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2285 = load i64, i64* %RDX
  %2286 = load i64, i64* %RSI
  %2287 = mul i64 %2286, 8
  %2288 = add i64 %2287, %2285
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 5
  store i64 %2290, i64* %PC
  %2291 = inttoptr i64 %2288 to double*
  %2292 = load double, double* %2291
  %2293 = bitcast i8* %2284 to double*
  store double %2292, double* %2293, align 1, !tbaa !2452
  %2294 = getelementptr inbounds i8, i8* %2284, i64 8
  %2295 = bitcast i8* %2294 to double*
  store double 0.000000e+00, double* %2295, align 1, !tbaa !2452
  %2296 = load i64, i64* %RBP
  %2297 = sub i64 %2296, 16
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2297 to i64*
  %2301 = load i64, i64* %2300
  store i64 %2301, i64* %RDX, align 8, !tbaa !2428
  %2302 = load i64, i64* %RBP
  %2303 = sub i64 %2302, 28
  %2304 = load i64, i64* %PC
  %2305 = add i64 %2304, 3
  store i64 %2305, i64* %PC
  %2306 = inttoptr i64 %2303 to i32*
  %2307 = load i32, i32* %2306
  %2308 = zext i32 %2307 to i64
  store i64 %2308, i64* %RCX, align 8, !tbaa !2428
  %2309 = load i64, i64* %RCX
  %2310 = load i64, i64* %PC
  %2311 = add i64 %2310, 3
  store i64 %2311, i64* %PC
  %2312 = trunc i64 %2309 to i32
  %2313 = add i32 2, %2312
  %2314 = zext i32 %2313 to i64
  store i64 %2314, i64* %RCX, align 8, !tbaa !2428
  %2315 = icmp ult i32 %2313, %2312
  %2316 = icmp ult i32 %2313, 2
  %2317 = or i1 %2315, %2316
  %2318 = zext i1 %2317 to i8
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2318, i8* %2319, align 1, !tbaa !2432
  %2320 = and i32 %2313, 255
  %2321 = call i32 @llvm.ctpop.i32(i32 %2320) #17
  %2322 = trunc i32 %2321 to i8
  %2323 = and i8 %2322, 1
  %2324 = xor i8 %2323, 1
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2324, i8* %2325, align 1, !tbaa !2446
  %2326 = xor i64 2, %2309
  %2327 = trunc i64 %2326 to i32
  %2328 = xor i32 %2327, %2313
  %2329 = lshr i32 %2328, 4
  %2330 = trunc i32 %2329 to i8
  %2331 = and i8 %2330, 1
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2331, i8* %2332, align 1, !tbaa !2447
  %2333 = icmp eq i32 %2313, 0
  %2334 = zext i1 %2333 to i8
  %2335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2334, i8* %2335, align 1, !tbaa !2448
  %2336 = lshr i32 %2313, 31
  %2337 = trunc i32 %2336 to i8
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2337, i8* %2338, align 1, !tbaa !2449
  %2339 = lshr i32 %2312, 31
  %2340 = xor i32 %2336, %2339
  %2341 = add nuw nsw i32 %2340, %2336
  %2342 = icmp eq i32 %2341, 2
  %2343 = zext i1 %2342 to i8
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2343, i8* %2344, align 1, !tbaa !2450
  %2345 = load i32, i32* %ECX
  %2346 = zext i32 %2345 to i64
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 3
  store i64 %2348, i64* %PC
  %2349 = shl i64 %2346, 32
  %2350 = ashr exact i64 %2349, 32
  store i64 %2350, i64* %RSI, align 8, !tbaa !2428
  %2351 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2352 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2353 = load i64, i64* %RDX
  %2354 = load i64, i64* %RSI
  %2355 = mul i64 %2354, 8
  %2356 = add i64 %2355, %2353
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 5
  store i64 %2358, i64* %PC
  %2359 = bitcast i8* %2352 to double*
  %2360 = load double, double* %2359, align 1
  %2361 = getelementptr inbounds i8, i8* %2352, i64 8
  %2362 = bitcast i8* %2361 to i64*
  %2363 = load i64, i64* %2362, align 1
  %2364 = inttoptr i64 %2356 to double*
  %2365 = load double, double* %2364
  %2366 = fadd double %2360, %2365
  %2367 = bitcast i8* %2351 to double*
  store double %2366, double* %2367, align 1, !tbaa !2452
  %2368 = getelementptr inbounds i8, i8* %2351, i64 8
  %2369 = bitcast i8* %2368 to i64*
  store i64 %2363, i64* %2369, align 1, !tbaa !2452
  %2370 = load i64, i64* %RBP
  %2371 = sub i64 %2370, 96
  %2372 = bitcast %union.vec128_t* %XMM1 to i8*
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 5
  store i64 %2374, i64* %PC
  %2375 = bitcast i8* %2372 to double*
  %2376 = load double, double* %2375, align 1
  %2377 = inttoptr i64 %2371 to double*
  store double %2376, double* %2377
  %2378 = load i64, i64* %RBP
  %2379 = sub i64 %2378, 16
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 4
  store i64 %2381, i64* %PC
  %2382 = inttoptr i64 %2379 to i64*
  %2383 = load i64, i64* %2382
  store i64 %2383, i64* %RDX, align 8, !tbaa !2428
  %2384 = load i64, i64* %RBP
  %2385 = sub i64 %2384, 28
  %2386 = load i64, i64* %PC
  %2387 = add i64 %2386, 3
  store i64 %2387, i64* %PC
  %2388 = inttoptr i64 %2385 to i32*
  %2389 = load i32, i32* %2388
  %2390 = zext i32 %2389 to i64
  store i64 %2390, i64* %RCX, align 8, !tbaa !2428
  %2391 = load i64, i64* %RCX
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 3
  store i64 %2393, i64* %PC
  %2394 = trunc i64 %2391 to i32
  %2395 = add i32 1, %2394
  %2396 = zext i32 %2395 to i64
  store i64 %2396, i64* %RCX, align 8, !tbaa !2428
  %2397 = icmp ult i32 %2395, %2394
  %2398 = icmp ult i32 %2395, 1
  %2399 = or i1 %2397, %2398
  %2400 = zext i1 %2399 to i8
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2400, i8* %2401, align 1, !tbaa !2432
  %2402 = and i32 %2395, 255
  %2403 = call i32 @llvm.ctpop.i32(i32 %2402) #17
  %2404 = trunc i32 %2403 to i8
  %2405 = and i8 %2404, 1
  %2406 = xor i8 %2405, 1
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2406, i8* %2407, align 1, !tbaa !2446
  %2408 = xor i64 1, %2391
  %2409 = trunc i64 %2408 to i32
  %2410 = xor i32 %2409, %2395
  %2411 = lshr i32 %2410, 4
  %2412 = trunc i32 %2411 to i8
  %2413 = and i8 %2412, 1
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2413, i8* %2414, align 1, !tbaa !2447
  %2415 = icmp eq i32 %2395, 0
  %2416 = zext i1 %2415 to i8
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2416, i8* %2417, align 1, !tbaa !2448
  %2418 = lshr i32 %2395, 31
  %2419 = trunc i32 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2419, i8* %2420, align 1, !tbaa !2449
  %2421 = lshr i32 %2394, 31
  %2422 = xor i32 %2418, %2421
  %2423 = add nuw nsw i32 %2422, %2418
  %2424 = icmp eq i32 %2423, 2
  %2425 = zext i1 %2424 to i8
  %2426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2425, i8* %2426, align 1, !tbaa !2450
  %2427 = load i32, i32* %ECX
  %2428 = zext i32 %2427 to i64
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 3
  store i64 %2430, i64* %PC
  %2431 = shl i64 %2428, 32
  %2432 = ashr exact i64 %2431, 32
  store i64 %2432, i64* %RSI, align 8, !tbaa !2428
  %2433 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2434 = load i64, i64* %RDX
  %2435 = load i64, i64* %RSI
  %2436 = mul i64 %2435, 8
  %2437 = add i64 %2436, %2434
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 5
  store i64 %2439, i64* %PC
  %2440 = inttoptr i64 %2437 to double*
  %2441 = load double, double* %2440
  %2442 = bitcast i8* %2433 to double*
  store double %2441, double* %2442, align 1, !tbaa !2452
  %2443 = getelementptr inbounds i8, i8* %2433, i64 8
  %2444 = bitcast i8* %2443 to double*
  store double 0.000000e+00, double* %2444, align 1, !tbaa !2452
  %2445 = load i64, i64* %RBP
  %2446 = sub i64 %2445, 16
  %2447 = load i64, i64* %PC
  %2448 = add i64 %2447, 4
  store i64 %2448, i64* %PC
  %2449 = inttoptr i64 %2446 to i64*
  %2450 = load i64, i64* %2449
  store i64 %2450, i64* %RDX, align 8, !tbaa !2428
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 28
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 3
  store i64 %2454, i64* %PC
  %2455 = inttoptr i64 %2452 to i32*
  %2456 = load i32, i32* %2455
  %2457 = zext i32 %2456 to i64
  store i64 %2457, i64* %RCX, align 8, !tbaa !2428
  %2458 = load i64, i64* %RCX
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 3
  store i64 %2460, i64* %PC
  %2461 = trunc i64 %2458 to i32
  %2462 = add i32 3, %2461
  %2463 = zext i32 %2462 to i64
  store i64 %2463, i64* %RCX, align 8, !tbaa !2428
  %2464 = icmp ult i32 %2462, %2461
  %2465 = icmp ult i32 %2462, 3
  %2466 = or i1 %2464, %2465
  %2467 = zext i1 %2466 to i8
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2467, i8* %2468, align 1, !tbaa !2432
  %2469 = and i32 %2462, 255
  %2470 = call i32 @llvm.ctpop.i32(i32 %2469) #17
  %2471 = trunc i32 %2470 to i8
  %2472 = and i8 %2471, 1
  %2473 = xor i8 %2472, 1
  %2474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2473, i8* %2474, align 1, !tbaa !2446
  %2475 = xor i64 3, %2458
  %2476 = trunc i64 %2475 to i32
  %2477 = xor i32 %2476, %2462
  %2478 = lshr i32 %2477, 4
  %2479 = trunc i32 %2478 to i8
  %2480 = and i8 %2479, 1
  %2481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2480, i8* %2481, align 1, !tbaa !2447
  %2482 = icmp eq i32 %2462, 0
  %2483 = zext i1 %2482 to i8
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2483, i8* %2484, align 1, !tbaa !2448
  %2485 = lshr i32 %2462, 31
  %2486 = trunc i32 %2485 to i8
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2486, i8* %2487, align 1, !tbaa !2449
  %2488 = lshr i32 %2461, 31
  %2489 = xor i32 %2485, %2488
  %2490 = add nuw nsw i32 %2489, %2485
  %2491 = icmp eq i32 %2490, 2
  %2492 = zext i1 %2491 to i8
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2492, i8* %2493, align 1, !tbaa !2450
  %2494 = load i32, i32* %ECX
  %2495 = zext i32 %2494 to i64
  %2496 = load i64, i64* %PC
  %2497 = add i64 %2496, 3
  store i64 %2497, i64* %PC
  %2498 = shl i64 %2495, 32
  %2499 = ashr exact i64 %2498, 32
  store i64 %2499, i64* %RSI, align 8, !tbaa !2428
  %2500 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2501 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2502 = load i64, i64* %RDX
  %2503 = load i64, i64* %RSI
  %2504 = mul i64 %2503, 8
  %2505 = add i64 %2504, %2502
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 5
  store i64 %2507, i64* %PC
  %2508 = bitcast i8* %2501 to double*
  %2509 = load double, double* %2508, align 1
  %2510 = getelementptr inbounds i8, i8* %2501, i64 8
  %2511 = bitcast i8* %2510 to i64*
  %2512 = load i64, i64* %2511, align 1
  %2513 = inttoptr i64 %2505 to double*
  %2514 = load double, double* %2513
  %2515 = fadd double %2509, %2514
  %2516 = bitcast i8* %2500 to double*
  store double %2515, double* %2516, align 1, !tbaa !2452
  %2517 = getelementptr inbounds i8, i8* %2500, i64 8
  %2518 = bitcast i8* %2517 to i64*
  store i64 %2512, i64* %2518, align 1, !tbaa !2452
  %2519 = load i64, i64* %RBP
  %2520 = sub i64 %2519, 104
  %2521 = bitcast %union.vec128_t* %XMM1 to i8*
  %2522 = load i64, i64* %PC
  %2523 = add i64 %2522, 5
  store i64 %2523, i64* %PC
  %2524 = bitcast i8* %2521 to double*
  %2525 = load double, double* %2524, align 1
  %2526 = inttoptr i64 %2520 to double*
  store double %2525, double* %2526
  %2527 = load i64, i64* %RBP
  %2528 = sub i64 %2527, 16
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 4
  store i64 %2530, i64* %PC
  %2531 = inttoptr i64 %2528 to i64*
  %2532 = load i64, i64* %2531
  store i64 %2532, i64* %RDX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RBP
  %2534 = sub i64 %2533, 28
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 4
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to i32*
  %2538 = load i32, i32* %2537
  %2539 = sext i32 %2538 to i64
  store i64 %2539, i64* %RSI, align 8, !tbaa !2428
  %2540 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2541 = load i64, i64* %RDX
  %2542 = load i64, i64* %RSI
  %2543 = mul i64 %2542, 8
  %2544 = add i64 %2543, %2541
  %2545 = load i64, i64* %PC
  %2546 = add i64 %2545, 5
  store i64 %2546, i64* %PC
  %2547 = inttoptr i64 %2544 to double*
  %2548 = load double, double* %2547
  %2549 = bitcast i8* %2540 to double*
  store double %2548, double* %2549, align 1, !tbaa !2452
  %2550 = getelementptr inbounds i8, i8* %2540, i64 8
  %2551 = bitcast i8* %2550 to double*
  store double 0.000000e+00, double* %2551, align 1, !tbaa !2452
  %2552 = load i64, i64* %RBP
  %2553 = sub i64 %2552, 16
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 4
  store i64 %2555, i64* %PC
  %2556 = inttoptr i64 %2553 to i64*
  %2557 = load i64, i64* %2556
  store i64 %2557, i64* %RDX, align 8, !tbaa !2428
  %2558 = load i64, i64* %RBP
  %2559 = sub i64 %2558, 28
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 3
  store i64 %2561, i64* %PC
  %2562 = inttoptr i64 %2559 to i32*
  %2563 = load i32, i32* %2562
  %2564 = zext i32 %2563 to i64
  store i64 %2564, i64* %RCX, align 8, !tbaa !2428
  %2565 = load i64, i64* %RCX
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 3
  store i64 %2567, i64* %PC
  %2568 = trunc i64 %2565 to i32
  %2569 = add i32 2, %2568
  %2570 = zext i32 %2569 to i64
  store i64 %2570, i64* %RCX, align 8, !tbaa !2428
  %2571 = icmp ult i32 %2569, %2568
  %2572 = icmp ult i32 %2569, 2
  %2573 = or i1 %2571, %2572
  %2574 = zext i1 %2573 to i8
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2574, i8* %2575, align 1, !tbaa !2432
  %2576 = and i32 %2569, 255
  %2577 = call i32 @llvm.ctpop.i32(i32 %2576) #17
  %2578 = trunc i32 %2577 to i8
  %2579 = and i8 %2578, 1
  %2580 = xor i8 %2579, 1
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2580, i8* %2581, align 1, !tbaa !2446
  %2582 = xor i64 2, %2565
  %2583 = trunc i64 %2582 to i32
  %2584 = xor i32 %2583, %2569
  %2585 = lshr i32 %2584, 4
  %2586 = trunc i32 %2585 to i8
  %2587 = and i8 %2586, 1
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2587, i8* %2588, align 1, !tbaa !2447
  %2589 = icmp eq i32 %2569, 0
  %2590 = zext i1 %2589 to i8
  %2591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2590, i8* %2591, align 1, !tbaa !2448
  %2592 = lshr i32 %2569, 31
  %2593 = trunc i32 %2592 to i8
  %2594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2593, i8* %2594, align 1, !tbaa !2449
  %2595 = lshr i32 %2568, 31
  %2596 = xor i32 %2592, %2595
  %2597 = add nuw nsw i32 %2596, %2592
  %2598 = icmp eq i32 %2597, 2
  %2599 = zext i1 %2598 to i8
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2599, i8* %2600, align 1, !tbaa !2450
  %2601 = load i32, i32* %ECX
  %2602 = zext i32 %2601 to i64
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 3
  store i64 %2604, i64* %PC
  %2605 = shl i64 %2602, 32
  %2606 = ashr exact i64 %2605, 32
  store i64 %2606, i64* %RSI, align 8, !tbaa !2428
  %2607 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2608 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2609 = load i64, i64* %RDX
  %2610 = load i64, i64* %RSI
  %2611 = mul i64 %2610, 8
  %2612 = add i64 %2611, %2609
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 5
  store i64 %2614, i64* %PC
  %2615 = bitcast i8* %2608 to double*
  %2616 = load double, double* %2615, align 1
  %2617 = getelementptr inbounds i8, i8* %2608, i64 8
  %2618 = bitcast i8* %2617 to i64*
  %2619 = load i64, i64* %2618, align 1
  %2620 = inttoptr i64 %2612 to double*
  %2621 = load double, double* %2620
  %2622 = fsub double %2616, %2621
  %2623 = bitcast i8* %2607 to double*
  store double %2622, double* %2623, align 1, !tbaa !2452
  %2624 = getelementptr inbounds i8, i8* %2607, i64 8
  %2625 = bitcast i8* %2624 to i64*
  store i64 %2619, i64* %2625, align 1, !tbaa !2452
  %2626 = load i64, i64* %RBP
  %2627 = sub i64 %2626, 112
  %2628 = bitcast %union.vec128_t* %XMM1 to i8*
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 5
  store i64 %2630, i64* %PC
  %2631 = bitcast i8* %2628 to double*
  %2632 = load double, double* %2631, align 1
  %2633 = inttoptr i64 %2627 to double*
  store double %2632, double* %2633
  %2634 = load i64, i64* %RBP
  %2635 = sub i64 %2634, 16
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 4
  store i64 %2637, i64* %PC
  %2638 = inttoptr i64 %2635 to i64*
  %2639 = load i64, i64* %2638
  store i64 %2639, i64* %RDX, align 8, !tbaa !2428
  %2640 = load i64, i64* %RBP
  %2641 = sub i64 %2640, 28
  %2642 = load i64, i64* %PC
  %2643 = add i64 %2642, 3
  store i64 %2643, i64* %PC
  %2644 = inttoptr i64 %2641 to i32*
  %2645 = load i32, i32* %2644
  %2646 = zext i32 %2645 to i64
  store i64 %2646, i64* %RCX, align 8, !tbaa !2428
  %2647 = load i64, i64* %RCX
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 3
  store i64 %2649, i64* %PC
  %2650 = trunc i64 %2647 to i32
  %2651 = add i32 1, %2650
  %2652 = zext i32 %2651 to i64
  store i64 %2652, i64* %RCX, align 8, !tbaa !2428
  %2653 = icmp ult i32 %2651, %2650
  %2654 = icmp ult i32 %2651, 1
  %2655 = or i1 %2653, %2654
  %2656 = zext i1 %2655 to i8
  %2657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2656, i8* %2657, align 1, !tbaa !2432
  %2658 = and i32 %2651, 255
  %2659 = call i32 @llvm.ctpop.i32(i32 %2658) #17
  %2660 = trunc i32 %2659 to i8
  %2661 = and i8 %2660, 1
  %2662 = xor i8 %2661, 1
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2662, i8* %2663, align 1, !tbaa !2446
  %2664 = xor i64 1, %2647
  %2665 = trunc i64 %2664 to i32
  %2666 = xor i32 %2665, %2651
  %2667 = lshr i32 %2666, 4
  %2668 = trunc i32 %2667 to i8
  %2669 = and i8 %2668, 1
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2669, i8* %2670, align 1, !tbaa !2447
  %2671 = icmp eq i32 %2651, 0
  %2672 = zext i1 %2671 to i8
  %2673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2672, i8* %2673, align 1, !tbaa !2448
  %2674 = lshr i32 %2651, 31
  %2675 = trunc i32 %2674 to i8
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2675, i8* %2676, align 1, !tbaa !2449
  %2677 = lshr i32 %2650, 31
  %2678 = xor i32 %2674, %2677
  %2679 = add nuw nsw i32 %2678, %2674
  %2680 = icmp eq i32 %2679, 2
  %2681 = zext i1 %2680 to i8
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2681, i8* %2682, align 1, !tbaa !2450
  %2683 = load i32, i32* %ECX
  %2684 = zext i32 %2683 to i64
  %2685 = load i64, i64* %PC
  %2686 = add i64 %2685, 3
  store i64 %2686, i64* %PC
  %2687 = shl i64 %2684, 32
  %2688 = ashr exact i64 %2687, 32
  store i64 %2688, i64* %RSI, align 8, !tbaa !2428
  %2689 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2690 = load i64, i64* %RDX
  %2691 = load i64, i64* %RSI
  %2692 = mul i64 %2691, 8
  %2693 = add i64 %2692, %2690
  %2694 = load i64, i64* %PC
  %2695 = add i64 %2694, 5
  store i64 %2695, i64* %PC
  %2696 = inttoptr i64 %2693 to double*
  %2697 = load double, double* %2696
  %2698 = bitcast i8* %2689 to double*
  store double %2697, double* %2698, align 1, !tbaa !2452
  %2699 = getelementptr inbounds i8, i8* %2689, i64 8
  %2700 = bitcast i8* %2699 to double*
  store double 0.000000e+00, double* %2700, align 1, !tbaa !2452
  %2701 = load i64, i64* %RBP
  %2702 = sub i64 %2701, 16
  %2703 = load i64, i64* %PC
  %2704 = add i64 %2703, 4
  store i64 %2704, i64* %PC
  %2705 = inttoptr i64 %2702 to i64*
  %2706 = load i64, i64* %2705
  store i64 %2706, i64* %RDX, align 8, !tbaa !2428
  %2707 = load i64, i64* %RBP
  %2708 = sub i64 %2707, 28
  %2709 = load i64, i64* %PC
  %2710 = add i64 %2709, 3
  store i64 %2710, i64* %PC
  %2711 = inttoptr i64 %2708 to i32*
  %2712 = load i32, i32* %2711
  %2713 = zext i32 %2712 to i64
  store i64 %2713, i64* %RCX, align 8, !tbaa !2428
  %2714 = load i64, i64* %RCX
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 3
  store i64 %2716, i64* %PC
  %2717 = trunc i64 %2714 to i32
  %2718 = add i32 3, %2717
  %2719 = zext i32 %2718 to i64
  store i64 %2719, i64* %RCX, align 8, !tbaa !2428
  %2720 = icmp ult i32 %2718, %2717
  %2721 = icmp ult i32 %2718, 3
  %2722 = or i1 %2720, %2721
  %2723 = zext i1 %2722 to i8
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2723, i8* %2724, align 1, !tbaa !2432
  %2725 = and i32 %2718, 255
  %2726 = call i32 @llvm.ctpop.i32(i32 %2725) #17
  %2727 = trunc i32 %2726 to i8
  %2728 = and i8 %2727, 1
  %2729 = xor i8 %2728, 1
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2729, i8* %2730, align 1, !tbaa !2446
  %2731 = xor i64 3, %2714
  %2732 = trunc i64 %2731 to i32
  %2733 = xor i32 %2732, %2718
  %2734 = lshr i32 %2733, 4
  %2735 = trunc i32 %2734 to i8
  %2736 = and i8 %2735, 1
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2736, i8* %2737, align 1, !tbaa !2447
  %2738 = icmp eq i32 %2718, 0
  %2739 = zext i1 %2738 to i8
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2739, i8* %2740, align 1, !tbaa !2448
  %2741 = lshr i32 %2718, 31
  %2742 = trunc i32 %2741 to i8
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2742, i8* %2743, align 1, !tbaa !2449
  %2744 = lshr i32 %2717, 31
  %2745 = xor i32 %2741, %2744
  %2746 = add nuw nsw i32 %2745, %2741
  %2747 = icmp eq i32 %2746, 2
  %2748 = zext i1 %2747 to i8
  %2749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2748, i8* %2749, align 1, !tbaa !2450
  %2750 = load i32, i32* %ECX
  %2751 = zext i32 %2750 to i64
  %2752 = load i64, i64* %PC
  %2753 = add i64 %2752, 3
  store i64 %2753, i64* %PC
  %2754 = shl i64 %2751, 32
  %2755 = ashr exact i64 %2754, 32
  store i64 %2755, i64* %RSI, align 8, !tbaa !2428
  %2756 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2757 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2758 = load i64, i64* %RDX
  %2759 = load i64, i64* %RSI
  %2760 = mul i64 %2759, 8
  %2761 = add i64 %2760, %2758
  %2762 = load i64, i64* %PC
  %2763 = add i64 %2762, 5
  store i64 %2763, i64* %PC
  %2764 = bitcast i8* %2757 to double*
  %2765 = load double, double* %2764, align 1
  %2766 = getelementptr inbounds i8, i8* %2757, i64 8
  %2767 = bitcast i8* %2766 to i64*
  %2768 = load i64, i64* %2767, align 1
  %2769 = inttoptr i64 %2761 to double*
  %2770 = load double, double* %2769
  %2771 = fsub double %2765, %2770
  %2772 = bitcast i8* %2756 to double*
  store double %2771, double* %2772, align 1, !tbaa !2452
  %2773 = getelementptr inbounds i8, i8* %2756, i64 8
  %2774 = bitcast i8* %2773 to i64*
  store i64 %2768, i64* %2774, align 1, !tbaa !2452
  %2775 = load i64, i64* %RBP
  %2776 = sub i64 %2775, 120
  %2777 = bitcast %union.vec128_t* %XMM1 to i8*
  %2778 = load i64, i64* %PC
  %2779 = add i64 %2778, 5
  store i64 %2779, i64* %PC
  %2780 = bitcast i8* %2777 to double*
  %2781 = load double, double* %2780, align 1
  %2782 = inttoptr i64 %2776 to double*
  store double %2781, double* %2782
  %2783 = load i64, i64* %RBP
  %2784 = sub i64 %2783, 16
  %2785 = load i64, i64* %PC
  %2786 = add i64 %2785, 4
  store i64 %2786, i64* %PC
  %2787 = inttoptr i64 %2784 to i64*
  %2788 = load i64, i64* %2787
  store i64 %2788, i64* %RDX, align 8, !tbaa !2428
  %2789 = load i64, i64* %RBP
  %2790 = sub i64 %2789, 28
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 3
  store i64 %2792, i64* %PC
  %2793 = inttoptr i64 %2790 to i32*
  %2794 = load i32, i32* %2793
  %2795 = zext i32 %2794 to i64
  store i64 %2795, i64* %RCX, align 8, !tbaa !2428
  %2796 = load i64, i64* %RCX
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 3
  store i64 %2798, i64* %PC
  %2799 = trunc i64 %2796 to i32
  %2800 = add i32 4, %2799
  %2801 = zext i32 %2800 to i64
  store i64 %2801, i64* %RCX, align 8, !tbaa !2428
  %2802 = icmp ult i32 %2800, %2799
  %2803 = icmp ult i32 %2800, 4
  %2804 = or i1 %2802, %2803
  %2805 = zext i1 %2804 to i8
  %2806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2805, i8* %2806, align 1, !tbaa !2432
  %2807 = and i32 %2800, 255
  %2808 = call i32 @llvm.ctpop.i32(i32 %2807) #17
  %2809 = trunc i32 %2808 to i8
  %2810 = and i8 %2809, 1
  %2811 = xor i8 %2810, 1
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2811, i8* %2812, align 1, !tbaa !2446
  %2813 = xor i64 4, %2796
  %2814 = trunc i64 %2813 to i32
  %2815 = xor i32 %2814, %2800
  %2816 = lshr i32 %2815, 4
  %2817 = trunc i32 %2816 to i8
  %2818 = and i8 %2817, 1
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2818, i8* %2819, align 1, !tbaa !2447
  %2820 = icmp eq i32 %2800, 0
  %2821 = zext i1 %2820 to i8
  %2822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2821, i8* %2822, align 1, !tbaa !2448
  %2823 = lshr i32 %2800, 31
  %2824 = trunc i32 %2823 to i8
  %2825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2824, i8* %2825, align 1, !tbaa !2449
  %2826 = lshr i32 %2799, 31
  %2827 = xor i32 %2823, %2826
  %2828 = add nuw nsw i32 %2827, %2823
  %2829 = icmp eq i32 %2828, 2
  %2830 = zext i1 %2829 to i8
  %2831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2830, i8* %2831, align 1, !tbaa !2450
  %2832 = load i32, i32* %ECX
  %2833 = zext i32 %2832 to i64
  %2834 = load i64, i64* %PC
  %2835 = add i64 %2834, 3
  store i64 %2835, i64* %PC
  %2836 = shl i64 %2833, 32
  %2837 = ashr exact i64 %2836, 32
  store i64 %2837, i64* %RSI, align 8, !tbaa !2428
  %2838 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2839 = load i64, i64* %RDX
  %2840 = load i64, i64* %RSI
  %2841 = mul i64 %2840, 8
  %2842 = add i64 %2841, %2839
  %2843 = load i64, i64* %PC
  %2844 = add i64 %2843, 5
  store i64 %2844, i64* %PC
  %2845 = inttoptr i64 %2842 to double*
  %2846 = load double, double* %2845
  %2847 = bitcast i8* %2838 to double*
  store double %2846, double* %2847, align 1, !tbaa !2452
  %2848 = getelementptr inbounds i8, i8* %2838, i64 8
  %2849 = bitcast i8* %2848 to double*
  store double 0.000000e+00, double* %2849, align 1, !tbaa !2452
  %2850 = load i64, i64* %RBP
  %2851 = sub i64 %2850, 16
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 4
  store i64 %2853, i64* %PC
  %2854 = inttoptr i64 %2851 to i64*
  %2855 = load i64, i64* %2854
  store i64 %2855, i64* %RDX, align 8, !tbaa !2428
  %2856 = load i64, i64* %RBP
  %2857 = sub i64 %2856, 28
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 3
  store i64 %2859, i64* %PC
  %2860 = inttoptr i64 %2857 to i32*
  %2861 = load i32, i32* %2860
  %2862 = zext i32 %2861 to i64
  store i64 %2862, i64* %RCX, align 8, !tbaa !2428
  %2863 = load i64, i64* %RCX
  %2864 = load i64, i64* %PC
  %2865 = add i64 %2864, 3
  store i64 %2865, i64* %PC
  %2866 = trunc i64 %2863 to i32
  %2867 = add i32 6, %2866
  %2868 = zext i32 %2867 to i64
  store i64 %2868, i64* %RCX, align 8, !tbaa !2428
  %2869 = icmp ult i32 %2867, %2866
  %2870 = icmp ult i32 %2867, 6
  %2871 = or i1 %2869, %2870
  %2872 = zext i1 %2871 to i8
  %2873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2872, i8* %2873, align 1, !tbaa !2432
  %2874 = and i32 %2867, 255
  %2875 = call i32 @llvm.ctpop.i32(i32 %2874) #17
  %2876 = trunc i32 %2875 to i8
  %2877 = and i8 %2876, 1
  %2878 = xor i8 %2877, 1
  %2879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2878, i8* %2879, align 1, !tbaa !2446
  %2880 = xor i64 6, %2863
  %2881 = trunc i64 %2880 to i32
  %2882 = xor i32 %2881, %2867
  %2883 = lshr i32 %2882, 4
  %2884 = trunc i32 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2885, i8* %2886, align 1, !tbaa !2447
  %2887 = icmp eq i32 %2867, 0
  %2888 = zext i1 %2887 to i8
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2888, i8* %2889, align 1, !tbaa !2448
  %2890 = lshr i32 %2867, 31
  %2891 = trunc i32 %2890 to i8
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2891, i8* %2892, align 1, !tbaa !2449
  %2893 = lshr i32 %2866, 31
  %2894 = xor i32 %2890, %2893
  %2895 = add nuw nsw i32 %2894, %2890
  %2896 = icmp eq i32 %2895, 2
  %2897 = zext i1 %2896 to i8
  %2898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2897, i8* %2898, align 1, !tbaa !2450
  %2899 = load i32, i32* %ECX
  %2900 = zext i32 %2899 to i64
  %2901 = load i64, i64* %PC
  %2902 = add i64 %2901, 3
  store i64 %2902, i64* %PC
  %2903 = shl i64 %2900, 32
  %2904 = ashr exact i64 %2903, 32
  store i64 %2904, i64* %RSI, align 8, !tbaa !2428
  %2905 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2906 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2907 = load i64, i64* %RDX
  %2908 = load i64, i64* %RSI
  %2909 = mul i64 %2908, 8
  %2910 = add i64 %2909, %2907
  %2911 = load i64, i64* %PC
  %2912 = add i64 %2911, 5
  store i64 %2912, i64* %PC
  %2913 = bitcast i8* %2906 to double*
  %2914 = load double, double* %2913, align 1
  %2915 = getelementptr inbounds i8, i8* %2906, i64 8
  %2916 = bitcast i8* %2915 to i64*
  %2917 = load i64, i64* %2916, align 1
  %2918 = inttoptr i64 %2910 to double*
  %2919 = load double, double* %2918
  %2920 = fadd double %2914, %2919
  %2921 = bitcast i8* %2905 to double*
  store double %2920, double* %2921, align 1, !tbaa !2452
  %2922 = getelementptr inbounds i8, i8* %2905, i64 8
  %2923 = bitcast i8* %2922 to i64*
  store i64 %2917, i64* %2923, align 1, !tbaa !2452
  %2924 = load i64, i64* %RBP
  %2925 = sub i64 %2924, 128
  %2926 = bitcast %union.vec128_t* %XMM1 to i8*
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 5
  store i64 %2928, i64* %PC
  %2929 = bitcast i8* %2926 to double*
  %2930 = load double, double* %2929, align 1
  %2931 = inttoptr i64 %2925 to double*
  store double %2930, double* %2931
  %2932 = load i64, i64* %RBP
  %2933 = sub i64 %2932, 16
  %2934 = load i64, i64* %PC
  %2935 = add i64 %2934, 4
  store i64 %2935, i64* %PC
  %2936 = inttoptr i64 %2933 to i64*
  %2937 = load i64, i64* %2936
  store i64 %2937, i64* %RDX, align 8, !tbaa !2428
  %2938 = load i64, i64* %RBP
  %2939 = sub i64 %2938, 28
  %2940 = load i64, i64* %PC
  %2941 = add i64 %2940, 3
  store i64 %2941, i64* %PC
  %2942 = inttoptr i64 %2939 to i32*
  %2943 = load i32, i32* %2942
  %2944 = zext i32 %2943 to i64
  store i64 %2944, i64* %RCX, align 8, !tbaa !2428
  %2945 = load i64, i64* %RCX
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 3
  store i64 %2947, i64* %PC
  %2948 = trunc i64 %2945 to i32
  %2949 = add i32 5, %2948
  %2950 = zext i32 %2949 to i64
  store i64 %2950, i64* %RCX, align 8, !tbaa !2428
  %2951 = icmp ult i32 %2949, %2948
  %2952 = icmp ult i32 %2949, 5
  %2953 = or i1 %2951, %2952
  %2954 = zext i1 %2953 to i8
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2954, i8* %2955, align 1, !tbaa !2432
  %2956 = and i32 %2949, 255
  %2957 = call i32 @llvm.ctpop.i32(i32 %2956) #17
  %2958 = trunc i32 %2957 to i8
  %2959 = and i8 %2958, 1
  %2960 = xor i8 %2959, 1
  %2961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2960, i8* %2961, align 1, !tbaa !2446
  %2962 = xor i64 5, %2945
  %2963 = trunc i64 %2962 to i32
  %2964 = xor i32 %2963, %2949
  %2965 = lshr i32 %2964, 4
  %2966 = trunc i32 %2965 to i8
  %2967 = and i8 %2966, 1
  %2968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2967, i8* %2968, align 1, !tbaa !2447
  %2969 = icmp eq i32 %2949, 0
  %2970 = zext i1 %2969 to i8
  %2971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2970, i8* %2971, align 1, !tbaa !2448
  %2972 = lshr i32 %2949, 31
  %2973 = trunc i32 %2972 to i8
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2973, i8* %2974, align 1, !tbaa !2449
  %2975 = lshr i32 %2948, 31
  %2976 = xor i32 %2972, %2975
  %2977 = add nuw nsw i32 %2976, %2972
  %2978 = icmp eq i32 %2977, 2
  %2979 = zext i1 %2978 to i8
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2979, i8* %2980, align 1, !tbaa !2450
  %2981 = load i32, i32* %ECX
  %2982 = zext i32 %2981 to i64
  %2983 = load i64, i64* %PC
  %2984 = add i64 %2983, 3
  store i64 %2984, i64* %PC
  %2985 = shl i64 %2982, 32
  %2986 = ashr exact i64 %2985, 32
  store i64 %2986, i64* %RSI, align 8, !tbaa !2428
  %2987 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2988 = load i64, i64* %RDX
  %2989 = load i64, i64* %RSI
  %2990 = mul i64 %2989, 8
  %2991 = add i64 %2990, %2988
  %2992 = load i64, i64* %PC
  %2993 = add i64 %2992, 5
  store i64 %2993, i64* %PC
  %2994 = inttoptr i64 %2991 to double*
  %2995 = load double, double* %2994
  %2996 = bitcast i8* %2987 to double*
  store double %2995, double* %2996, align 1, !tbaa !2452
  %2997 = getelementptr inbounds i8, i8* %2987, i64 8
  %2998 = bitcast i8* %2997 to double*
  store double 0.000000e+00, double* %2998, align 1, !tbaa !2452
  %2999 = load i64, i64* %RBP
  %3000 = sub i64 %2999, 16
  %3001 = load i64, i64* %PC
  %3002 = add i64 %3001, 4
  store i64 %3002, i64* %PC
  %3003 = inttoptr i64 %3000 to i64*
  %3004 = load i64, i64* %3003
  store i64 %3004, i64* %RDX, align 8, !tbaa !2428
  %3005 = load i64, i64* %RBP
  %3006 = sub i64 %3005, 28
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 3
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3006 to i32*
  %3010 = load i32, i32* %3009
  %3011 = zext i32 %3010 to i64
  store i64 %3011, i64* %RCX, align 8, !tbaa !2428
  %3012 = load i64, i64* %RCX
  %3013 = load i64, i64* %PC
  %3014 = add i64 %3013, 3
  store i64 %3014, i64* %PC
  %3015 = trunc i64 %3012 to i32
  %3016 = add i32 7, %3015
  %3017 = zext i32 %3016 to i64
  store i64 %3017, i64* %RCX, align 8, !tbaa !2428
  %3018 = icmp ult i32 %3016, %3015
  %3019 = icmp ult i32 %3016, 7
  %3020 = or i1 %3018, %3019
  %3021 = zext i1 %3020 to i8
  %3022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3021, i8* %3022, align 1, !tbaa !2432
  %3023 = and i32 %3016, 255
  %3024 = call i32 @llvm.ctpop.i32(i32 %3023) #17
  %3025 = trunc i32 %3024 to i8
  %3026 = and i8 %3025, 1
  %3027 = xor i8 %3026, 1
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3027, i8* %3028, align 1, !tbaa !2446
  %3029 = xor i64 7, %3012
  %3030 = trunc i64 %3029 to i32
  %3031 = xor i32 %3030, %3016
  %3032 = lshr i32 %3031, 4
  %3033 = trunc i32 %3032 to i8
  %3034 = and i8 %3033, 1
  %3035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3034, i8* %3035, align 1, !tbaa !2447
  %3036 = icmp eq i32 %3016, 0
  %3037 = zext i1 %3036 to i8
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3037, i8* %3038, align 1, !tbaa !2448
  %3039 = lshr i32 %3016, 31
  %3040 = trunc i32 %3039 to i8
  %3041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3040, i8* %3041, align 1, !tbaa !2449
  %3042 = lshr i32 %3015, 31
  %3043 = xor i32 %3039, %3042
  %3044 = add nuw nsw i32 %3043, %3039
  %3045 = icmp eq i32 %3044, 2
  %3046 = zext i1 %3045 to i8
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3046, i8* %3047, align 1, !tbaa !2450
  %3048 = load i32, i32* %ECX
  %3049 = zext i32 %3048 to i64
  %3050 = load i64, i64* %PC
  %3051 = add i64 %3050, 3
  store i64 %3051, i64* %PC
  %3052 = shl i64 %3049, 32
  %3053 = ashr exact i64 %3052, 32
  store i64 %3053, i64* %RSI, align 8, !tbaa !2428
  %3054 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3055 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3056 = load i64, i64* %RDX
  %3057 = load i64, i64* %RSI
  %3058 = mul i64 %3057, 8
  %3059 = add i64 %3058, %3056
  %3060 = load i64, i64* %PC
  %3061 = add i64 %3060, 5
  store i64 %3061, i64* %PC
  %3062 = bitcast i8* %3055 to double*
  %3063 = load double, double* %3062, align 1
  %3064 = getelementptr inbounds i8, i8* %3055, i64 8
  %3065 = bitcast i8* %3064 to i64*
  %3066 = load i64, i64* %3065, align 1
  %3067 = inttoptr i64 %3059 to double*
  %3068 = load double, double* %3067
  %3069 = fadd double %3063, %3068
  %3070 = bitcast i8* %3054 to double*
  store double %3069, double* %3070, align 1, !tbaa !2452
  %3071 = getelementptr inbounds i8, i8* %3054, i64 8
  %3072 = bitcast i8* %3071 to i64*
  store i64 %3066, i64* %3072, align 1, !tbaa !2452
  %3073 = load i64, i64* %RBP
  %3074 = sub i64 %3073, 136
  %3075 = bitcast %union.vec128_t* %XMM1 to i8*
  %3076 = load i64, i64* %PC
  %3077 = add i64 %3076, 8
  store i64 %3077, i64* %PC
  %3078 = bitcast i8* %3075 to double*
  %3079 = load double, double* %3078, align 1
  %3080 = inttoptr i64 %3074 to double*
  store double %3079, double* %3080
  %3081 = load i64, i64* %RBP
  %3082 = sub i64 %3081, 16
  %3083 = load i64, i64* %PC
  %3084 = add i64 %3083, 4
  store i64 %3084, i64* %PC
  %3085 = inttoptr i64 %3082 to i64*
  %3086 = load i64, i64* %3085
  store i64 %3086, i64* %RDX, align 8, !tbaa !2428
  %3087 = load i64, i64* %RBP
  %3088 = sub i64 %3087, 28
  %3089 = load i64, i64* %PC
  %3090 = add i64 %3089, 3
  store i64 %3090, i64* %PC
  %3091 = inttoptr i64 %3088 to i32*
  %3092 = load i32, i32* %3091
  %3093 = zext i32 %3092 to i64
  store i64 %3093, i64* %RCX, align 8, !tbaa !2428
  %3094 = load i64, i64* %RCX
  %3095 = load i64, i64* %PC
  %3096 = add i64 %3095, 3
  store i64 %3096, i64* %PC
  %3097 = trunc i64 %3094 to i32
  %3098 = add i32 4, %3097
  %3099 = zext i32 %3098 to i64
  store i64 %3099, i64* %RCX, align 8, !tbaa !2428
  %3100 = icmp ult i32 %3098, %3097
  %3101 = icmp ult i32 %3098, 4
  %3102 = or i1 %3100, %3101
  %3103 = zext i1 %3102 to i8
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3103, i8* %3104, align 1, !tbaa !2432
  %3105 = and i32 %3098, 255
  %3106 = call i32 @llvm.ctpop.i32(i32 %3105) #17
  %3107 = trunc i32 %3106 to i8
  %3108 = and i8 %3107, 1
  %3109 = xor i8 %3108, 1
  %3110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3109, i8* %3110, align 1, !tbaa !2446
  %3111 = xor i64 4, %3094
  %3112 = trunc i64 %3111 to i32
  %3113 = xor i32 %3112, %3098
  %3114 = lshr i32 %3113, 4
  %3115 = trunc i32 %3114 to i8
  %3116 = and i8 %3115, 1
  %3117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3116, i8* %3117, align 1, !tbaa !2447
  %3118 = icmp eq i32 %3098, 0
  %3119 = zext i1 %3118 to i8
  %3120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3119, i8* %3120, align 1, !tbaa !2448
  %3121 = lshr i32 %3098, 31
  %3122 = trunc i32 %3121 to i8
  %3123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3122, i8* %3123, align 1, !tbaa !2449
  %3124 = lshr i32 %3097, 31
  %3125 = xor i32 %3121, %3124
  %3126 = add nuw nsw i32 %3125, %3121
  %3127 = icmp eq i32 %3126, 2
  %3128 = zext i1 %3127 to i8
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3128, i8* %3129, align 1, !tbaa !2450
  %3130 = load i32, i32* %ECX
  %3131 = zext i32 %3130 to i64
  %3132 = load i64, i64* %PC
  %3133 = add i64 %3132, 3
  store i64 %3133, i64* %PC
  %3134 = shl i64 %3131, 32
  %3135 = ashr exact i64 %3134, 32
  store i64 %3135, i64* %RSI, align 8, !tbaa !2428
  %3136 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3137 = load i64, i64* %RDX
  %3138 = load i64, i64* %RSI
  %3139 = mul i64 %3138, 8
  %3140 = add i64 %3139, %3137
  %3141 = load i64, i64* %PC
  %3142 = add i64 %3141, 5
  store i64 %3142, i64* %PC
  %3143 = inttoptr i64 %3140 to double*
  %3144 = load double, double* %3143
  %3145 = bitcast i8* %3136 to double*
  store double %3144, double* %3145, align 1, !tbaa !2452
  %3146 = getelementptr inbounds i8, i8* %3136, i64 8
  %3147 = bitcast i8* %3146 to double*
  store double 0.000000e+00, double* %3147, align 1, !tbaa !2452
  %3148 = load i64, i64* %RBP
  %3149 = sub i64 %3148, 16
  %3150 = load i64, i64* %PC
  %3151 = add i64 %3150, 4
  store i64 %3151, i64* %PC
  %3152 = inttoptr i64 %3149 to i64*
  %3153 = load i64, i64* %3152
  store i64 %3153, i64* %RDX, align 8, !tbaa !2428
  %3154 = load i64, i64* %RBP
  %3155 = sub i64 %3154, 28
  %3156 = load i64, i64* %PC
  %3157 = add i64 %3156, 3
  store i64 %3157, i64* %PC
  %3158 = inttoptr i64 %3155 to i32*
  %3159 = load i32, i32* %3158
  %3160 = zext i32 %3159 to i64
  store i64 %3160, i64* %RCX, align 8, !tbaa !2428
  %3161 = load i64, i64* %RCX
  %3162 = load i64, i64* %PC
  %3163 = add i64 %3162, 3
  store i64 %3163, i64* %PC
  %3164 = trunc i64 %3161 to i32
  %3165 = add i32 6, %3164
  %3166 = zext i32 %3165 to i64
  store i64 %3166, i64* %RCX, align 8, !tbaa !2428
  %3167 = icmp ult i32 %3165, %3164
  %3168 = icmp ult i32 %3165, 6
  %3169 = or i1 %3167, %3168
  %3170 = zext i1 %3169 to i8
  %3171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3170, i8* %3171, align 1, !tbaa !2432
  %3172 = and i32 %3165, 255
  %3173 = call i32 @llvm.ctpop.i32(i32 %3172) #17
  %3174 = trunc i32 %3173 to i8
  %3175 = and i8 %3174, 1
  %3176 = xor i8 %3175, 1
  %3177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3176, i8* %3177, align 1, !tbaa !2446
  %3178 = xor i64 6, %3161
  %3179 = trunc i64 %3178 to i32
  %3180 = xor i32 %3179, %3165
  %3181 = lshr i32 %3180, 4
  %3182 = trunc i32 %3181 to i8
  %3183 = and i8 %3182, 1
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3183, i8* %3184, align 1, !tbaa !2447
  %3185 = icmp eq i32 %3165, 0
  %3186 = zext i1 %3185 to i8
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3186, i8* %3187, align 1, !tbaa !2448
  %3188 = lshr i32 %3165, 31
  %3189 = trunc i32 %3188 to i8
  %3190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3189, i8* %3190, align 1, !tbaa !2449
  %3191 = lshr i32 %3164, 31
  %3192 = xor i32 %3188, %3191
  %3193 = add nuw nsw i32 %3192, %3188
  %3194 = icmp eq i32 %3193, 2
  %3195 = zext i1 %3194 to i8
  %3196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3195, i8* %3196, align 1, !tbaa !2450
  %3197 = load i32, i32* %ECX
  %3198 = zext i32 %3197 to i64
  %3199 = load i64, i64* %PC
  %3200 = add i64 %3199, 3
  store i64 %3200, i64* %PC
  %3201 = shl i64 %3198, 32
  %3202 = ashr exact i64 %3201, 32
  store i64 %3202, i64* %RSI, align 8, !tbaa !2428
  %3203 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3205 = load i64, i64* %RDX
  %3206 = load i64, i64* %RSI
  %3207 = mul i64 %3206, 8
  %3208 = add i64 %3207, %3205
  %3209 = load i64, i64* %PC
  %3210 = add i64 %3209, 5
  store i64 %3210, i64* %PC
  %3211 = bitcast i8* %3204 to double*
  %3212 = load double, double* %3211, align 1
  %3213 = getelementptr inbounds i8, i8* %3204, i64 8
  %3214 = bitcast i8* %3213 to i64*
  %3215 = load i64, i64* %3214, align 1
  %3216 = inttoptr i64 %3208 to double*
  %3217 = load double, double* %3216
  %3218 = fsub double %3212, %3217
  %3219 = bitcast i8* %3203 to double*
  store double %3218, double* %3219, align 1, !tbaa !2452
  %3220 = getelementptr inbounds i8, i8* %3203, i64 8
  %3221 = bitcast i8* %3220 to i64*
  store i64 %3215, i64* %3221, align 1, !tbaa !2452
  %3222 = load i64, i64* %RBP
  %3223 = sub i64 %3222, 144
  %3224 = bitcast %union.vec128_t* %XMM1 to i8*
  %3225 = load i64, i64* %PC
  %3226 = add i64 %3225, 8
  store i64 %3226, i64* %PC
  %3227 = bitcast i8* %3224 to double*
  %3228 = load double, double* %3227, align 1
  %3229 = inttoptr i64 %3223 to double*
  store double %3228, double* %3229
  %3230 = load i64, i64* %RBP
  %3231 = sub i64 %3230, 16
  %3232 = load i64, i64* %PC
  %3233 = add i64 %3232, 4
  store i64 %3233, i64* %PC
  %3234 = inttoptr i64 %3231 to i64*
  %3235 = load i64, i64* %3234
  store i64 %3235, i64* %RDX, align 8, !tbaa !2428
  %3236 = load i64, i64* %RBP
  %3237 = sub i64 %3236, 28
  %3238 = load i64, i64* %PC
  %3239 = add i64 %3238, 3
  store i64 %3239, i64* %PC
  %3240 = inttoptr i64 %3237 to i32*
  %3241 = load i32, i32* %3240
  %3242 = zext i32 %3241 to i64
  store i64 %3242, i64* %RCX, align 8, !tbaa !2428
  %3243 = load i64, i64* %RCX
  %3244 = load i64, i64* %PC
  %3245 = add i64 %3244, 3
  store i64 %3245, i64* %PC
  %3246 = trunc i64 %3243 to i32
  %3247 = add i32 5, %3246
  %3248 = zext i32 %3247 to i64
  store i64 %3248, i64* %RCX, align 8, !tbaa !2428
  %3249 = icmp ult i32 %3247, %3246
  %3250 = icmp ult i32 %3247, 5
  %3251 = or i1 %3249, %3250
  %3252 = zext i1 %3251 to i8
  %3253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3252, i8* %3253, align 1, !tbaa !2432
  %3254 = and i32 %3247, 255
  %3255 = call i32 @llvm.ctpop.i32(i32 %3254) #17
  %3256 = trunc i32 %3255 to i8
  %3257 = and i8 %3256, 1
  %3258 = xor i8 %3257, 1
  %3259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3258, i8* %3259, align 1, !tbaa !2446
  %3260 = xor i64 5, %3243
  %3261 = trunc i64 %3260 to i32
  %3262 = xor i32 %3261, %3247
  %3263 = lshr i32 %3262, 4
  %3264 = trunc i32 %3263 to i8
  %3265 = and i8 %3264, 1
  %3266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3265, i8* %3266, align 1, !tbaa !2447
  %3267 = icmp eq i32 %3247, 0
  %3268 = zext i1 %3267 to i8
  %3269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3268, i8* %3269, align 1, !tbaa !2448
  %3270 = lshr i32 %3247, 31
  %3271 = trunc i32 %3270 to i8
  %3272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3271, i8* %3272, align 1, !tbaa !2449
  %3273 = lshr i32 %3246, 31
  %3274 = xor i32 %3270, %3273
  %3275 = add nuw nsw i32 %3274, %3270
  %3276 = icmp eq i32 %3275, 2
  %3277 = zext i1 %3276 to i8
  %3278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3277, i8* %3278, align 1, !tbaa !2450
  %3279 = load i32, i32* %ECX
  %3280 = zext i32 %3279 to i64
  %3281 = load i64, i64* %PC
  %3282 = add i64 %3281, 3
  store i64 %3282, i64* %PC
  %3283 = shl i64 %3280, 32
  %3284 = ashr exact i64 %3283, 32
  store i64 %3284, i64* %RSI, align 8, !tbaa !2428
  %3285 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3286 = load i64, i64* %RDX
  %3287 = load i64, i64* %RSI
  %3288 = mul i64 %3287, 8
  %3289 = add i64 %3288, %3286
  %3290 = load i64, i64* %PC
  %3291 = add i64 %3290, 5
  store i64 %3291, i64* %PC
  %3292 = inttoptr i64 %3289 to double*
  %3293 = load double, double* %3292
  %3294 = bitcast i8* %3285 to double*
  store double %3293, double* %3294, align 1, !tbaa !2452
  %3295 = getelementptr inbounds i8, i8* %3285, i64 8
  %3296 = bitcast i8* %3295 to double*
  store double 0.000000e+00, double* %3296, align 1, !tbaa !2452
  %3297 = load i64, i64* %RBP
  %3298 = sub i64 %3297, 16
  %3299 = load i64, i64* %PC
  %3300 = add i64 %3299, 4
  store i64 %3300, i64* %PC
  %3301 = inttoptr i64 %3298 to i64*
  %3302 = load i64, i64* %3301
  store i64 %3302, i64* %RDX, align 8, !tbaa !2428
  %3303 = load i64, i64* %RBP
  %3304 = sub i64 %3303, 28
  %3305 = load i64, i64* %PC
  %3306 = add i64 %3305, 3
  store i64 %3306, i64* %PC
  %3307 = inttoptr i64 %3304 to i32*
  %3308 = load i32, i32* %3307
  %3309 = zext i32 %3308 to i64
  store i64 %3309, i64* %RCX, align 8, !tbaa !2428
  %3310 = load i64, i64* %RCX
  %3311 = load i64, i64* %PC
  %3312 = add i64 %3311, 3
  store i64 %3312, i64* %PC
  %3313 = trunc i64 %3310 to i32
  %3314 = add i32 7, %3313
  %3315 = zext i32 %3314 to i64
  store i64 %3315, i64* %RCX, align 8, !tbaa !2428
  %3316 = icmp ult i32 %3314, %3313
  %3317 = icmp ult i32 %3314, 7
  %3318 = or i1 %3316, %3317
  %3319 = zext i1 %3318 to i8
  %3320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3319, i8* %3320, align 1, !tbaa !2432
  %3321 = and i32 %3314, 255
  %3322 = call i32 @llvm.ctpop.i32(i32 %3321) #17
  %3323 = trunc i32 %3322 to i8
  %3324 = and i8 %3323, 1
  %3325 = xor i8 %3324, 1
  %3326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3325, i8* %3326, align 1, !tbaa !2446
  %3327 = xor i64 7, %3310
  %3328 = trunc i64 %3327 to i32
  %3329 = xor i32 %3328, %3314
  %3330 = lshr i32 %3329, 4
  %3331 = trunc i32 %3330 to i8
  %3332 = and i8 %3331, 1
  %3333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3332, i8* %3333, align 1, !tbaa !2447
  %3334 = icmp eq i32 %3314, 0
  %3335 = zext i1 %3334 to i8
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3335, i8* %3336, align 1, !tbaa !2448
  %3337 = lshr i32 %3314, 31
  %3338 = trunc i32 %3337 to i8
  %3339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3338, i8* %3339, align 1, !tbaa !2449
  %3340 = lshr i32 %3313, 31
  %3341 = xor i32 %3337, %3340
  %3342 = add nuw nsw i32 %3341, %3337
  %3343 = icmp eq i32 %3342, 2
  %3344 = zext i1 %3343 to i8
  %3345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3344, i8* %3345, align 1, !tbaa !2450
  %3346 = load i32, i32* %ECX
  %3347 = zext i32 %3346 to i64
  %3348 = load i64, i64* %PC
  %3349 = add i64 %3348, 3
  store i64 %3349, i64* %PC
  %3350 = shl i64 %3347, 32
  %3351 = ashr exact i64 %3350, 32
  store i64 %3351, i64* %RSI, align 8, !tbaa !2428
  %3352 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3353 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3354 = load i64, i64* %RDX
  %3355 = load i64, i64* %RSI
  %3356 = mul i64 %3355, 8
  %3357 = add i64 %3356, %3354
  %3358 = load i64, i64* %PC
  %3359 = add i64 %3358, 5
  store i64 %3359, i64* %PC
  %3360 = bitcast i8* %3353 to double*
  %3361 = load double, double* %3360, align 1
  %3362 = getelementptr inbounds i8, i8* %3353, i64 8
  %3363 = bitcast i8* %3362 to i64*
  %3364 = load i64, i64* %3363, align 1
  %3365 = inttoptr i64 %3357 to double*
  %3366 = load double, double* %3365
  %3367 = fsub double %3361, %3366
  %3368 = bitcast i8* %3352 to double*
  store double %3367, double* %3368, align 1, !tbaa !2452
  %3369 = getelementptr inbounds i8, i8* %3352, i64 8
  %3370 = bitcast i8* %3369 to i64*
  store i64 %3364, i64* %3370, align 1, !tbaa !2452
  %3371 = load i64, i64* %RBP
  %3372 = sub i64 %3371, 152
  %3373 = bitcast %union.vec128_t* %XMM1 to i8*
  %3374 = load i64, i64* %PC
  %3375 = add i64 %3374, 8
  store i64 %3375, i64* %PC
  %3376 = bitcast i8* %3373 to double*
  %3377 = load double, double* %3376, align 1
  %3378 = inttoptr i64 %3372 to double*
  store double %3377, double* %3378
  %3379 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3380 = load i64, i64* %RBP
  %3381 = sub i64 %3380, 96
  %3382 = load i64, i64* %PC
  %3383 = add i64 %3382, 5
  store i64 %3383, i64* %PC
  %3384 = inttoptr i64 %3381 to double*
  %3385 = load double, double* %3384
  %3386 = bitcast i8* %3379 to double*
  store double %3385, double* %3386, align 1, !tbaa !2452
  %3387 = getelementptr inbounds i8, i8* %3379, i64 8
  %3388 = bitcast i8* %3387 to double*
  store double 0.000000e+00, double* %3388, align 1, !tbaa !2452
  %3389 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3390 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3391 = load i64, i64* %RBP
  %3392 = sub i64 %3391, 128
  %3393 = load i64, i64* %PC
  %3394 = add i64 %3393, 5
  store i64 %3394, i64* %PC
  %3395 = bitcast i8* %3390 to double*
  %3396 = load double, double* %3395, align 1
  %3397 = getelementptr inbounds i8, i8* %3390, i64 8
  %3398 = bitcast i8* %3397 to i64*
  %3399 = load i64, i64* %3398, align 1
  %3400 = inttoptr i64 %3392 to double*
  %3401 = load double, double* %3400
  %3402 = fadd double %3396, %3401
  %3403 = bitcast i8* %3389 to double*
  store double %3402, double* %3403, align 1, !tbaa !2452
  %3404 = getelementptr inbounds i8, i8* %3389, i64 8
  %3405 = bitcast i8* %3404 to i64*
  store i64 %3399, i64* %3405, align 1, !tbaa !2452
  %3406 = load i64, i64* %RBP
  %3407 = sub i64 %3406, 16
  %3408 = load i64, i64* %PC
  %3409 = add i64 %3408, 4
  store i64 %3409, i64* %PC
  %3410 = inttoptr i64 %3407 to i64*
  %3411 = load i64, i64* %3410
  store i64 %3411, i64* %RDX, align 8, !tbaa !2428
  %3412 = load i64, i64* %RBP
  %3413 = sub i64 %3412, 28
  %3414 = load i64, i64* %PC
  %3415 = add i64 %3414, 4
  store i64 %3415, i64* %PC
  %3416 = inttoptr i64 %3413 to i32*
  %3417 = load i32, i32* %3416
  %3418 = sext i32 %3417 to i64
  store i64 %3418, i64* %RSI, align 8, !tbaa !2428
  %3419 = load i64, i64* %RDX
  %3420 = load i64, i64* %RSI
  %3421 = mul i64 %3420, 8
  %3422 = add i64 %3421, %3419
  %3423 = bitcast %union.vec128_t* %XMM1 to i8*
  %3424 = load i64, i64* %PC
  %3425 = add i64 %3424, 5
  store i64 %3425, i64* %PC
  %3426 = bitcast i8* %3423 to double*
  %3427 = load double, double* %3426, align 1
  %3428 = inttoptr i64 %3422 to double*
  store double %3427, double* %3428
  %3429 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3430 = load i64, i64* %RBP
  %3431 = sub i64 %3430, 104
  %3432 = load i64, i64* %PC
  %3433 = add i64 %3432, 5
  store i64 %3433, i64* %PC
  %3434 = inttoptr i64 %3431 to double*
  %3435 = load double, double* %3434
  %3436 = bitcast i8* %3429 to double*
  store double %3435, double* %3436, align 1, !tbaa !2452
  %3437 = getelementptr inbounds i8, i8* %3429, i64 8
  %3438 = bitcast i8* %3437 to double*
  store double 0.000000e+00, double* %3438, align 1, !tbaa !2452
  %3439 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3440 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3441 = load i64, i64* %RBP
  %3442 = sub i64 %3441, 136
  %3443 = load i64, i64* %PC
  %3444 = add i64 %3443, 8
  store i64 %3444, i64* %PC
  %3445 = bitcast i8* %3440 to double*
  %3446 = load double, double* %3445, align 1
  %3447 = getelementptr inbounds i8, i8* %3440, i64 8
  %3448 = bitcast i8* %3447 to i64*
  %3449 = load i64, i64* %3448, align 1
  %3450 = inttoptr i64 %3442 to double*
  %3451 = load double, double* %3450
  %3452 = fadd double %3446, %3451
  %3453 = bitcast i8* %3439 to double*
  store double %3452, double* %3453, align 1, !tbaa !2452
  %3454 = getelementptr inbounds i8, i8* %3439, i64 8
  %3455 = bitcast i8* %3454 to i64*
  store i64 %3449, i64* %3455, align 1, !tbaa !2452
  %3456 = load i64, i64* %RBP
  %3457 = sub i64 %3456, 16
  %3458 = load i64, i64* %PC
  %3459 = add i64 %3458, 4
  store i64 %3459, i64* %PC
  %3460 = inttoptr i64 %3457 to i64*
  %3461 = load i64, i64* %3460
  store i64 %3461, i64* %RDX, align 8, !tbaa !2428
  %3462 = load i64, i64* %RBP
  %3463 = sub i64 %3462, 28
  %3464 = load i64, i64* %PC
  %3465 = add i64 %3464, 3
  store i64 %3465, i64* %PC
  %3466 = inttoptr i64 %3463 to i32*
  %3467 = load i32, i32* %3466
  %3468 = zext i32 %3467 to i64
  store i64 %3468, i64* %RCX, align 8, !tbaa !2428
  %3469 = load i64, i64* %RCX
  %3470 = load i64, i64* %PC
  %3471 = add i64 %3470, 3
  store i64 %3471, i64* %PC
  %3472 = trunc i64 %3469 to i32
  %3473 = add i32 1, %3472
  %3474 = zext i32 %3473 to i64
  store i64 %3474, i64* %RCX, align 8, !tbaa !2428
  %3475 = icmp ult i32 %3473, %3472
  %3476 = icmp ult i32 %3473, 1
  %3477 = or i1 %3475, %3476
  %3478 = zext i1 %3477 to i8
  %3479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3478, i8* %3479, align 1, !tbaa !2432
  %3480 = and i32 %3473, 255
  %3481 = call i32 @llvm.ctpop.i32(i32 %3480) #17
  %3482 = trunc i32 %3481 to i8
  %3483 = and i8 %3482, 1
  %3484 = xor i8 %3483, 1
  %3485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3484, i8* %3485, align 1, !tbaa !2446
  %3486 = xor i64 1, %3469
  %3487 = trunc i64 %3486 to i32
  %3488 = xor i32 %3487, %3473
  %3489 = lshr i32 %3488, 4
  %3490 = trunc i32 %3489 to i8
  %3491 = and i8 %3490, 1
  %3492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3491, i8* %3492, align 1, !tbaa !2447
  %3493 = icmp eq i32 %3473, 0
  %3494 = zext i1 %3493 to i8
  %3495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3494, i8* %3495, align 1, !tbaa !2448
  %3496 = lshr i32 %3473, 31
  %3497 = trunc i32 %3496 to i8
  %3498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3497, i8* %3498, align 1, !tbaa !2449
  %3499 = lshr i32 %3472, 31
  %3500 = xor i32 %3496, %3499
  %3501 = add nuw nsw i32 %3500, %3496
  %3502 = icmp eq i32 %3501, 2
  %3503 = zext i1 %3502 to i8
  %3504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3503, i8* %3504, align 1, !tbaa !2450
  %3505 = load i32, i32* %ECX
  %3506 = zext i32 %3505 to i64
  %3507 = load i64, i64* %PC
  %3508 = add i64 %3507, 3
  store i64 %3508, i64* %PC
  %3509 = shl i64 %3506, 32
  %3510 = ashr exact i64 %3509, 32
  store i64 %3510, i64* %RSI, align 8, !tbaa !2428
  %3511 = load i64, i64* %RDX
  %3512 = load i64, i64* %RSI
  %3513 = mul i64 %3512, 8
  %3514 = add i64 %3513, %3511
  %3515 = bitcast %union.vec128_t* %XMM1 to i8*
  %3516 = load i64, i64* %PC
  %3517 = add i64 %3516, 5
  store i64 %3517, i64* %PC
  %3518 = bitcast i8* %3515 to double*
  %3519 = load double, double* %3518, align 1
  %3520 = inttoptr i64 %3514 to double*
  store double %3519, double* %3520
  %3521 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3522 = load i64, i64* %RBP
  %3523 = sub i64 %3522, 128
  %3524 = load i64, i64* %PC
  %3525 = add i64 %3524, 5
  store i64 %3525, i64* %PC
  %3526 = inttoptr i64 %3523 to double*
  %3527 = load double, double* %3526
  %3528 = bitcast i8* %3521 to double*
  store double %3527, double* %3528, align 1, !tbaa !2452
  %3529 = getelementptr inbounds i8, i8* %3521, i64 8
  %3530 = bitcast i8* %3529 to double*
  store double 0.000000e+00, double* %3530, align 1, !tbaa !2452
  %3531 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3532 = load i64, i64* %RBP
  %3533 = sub i64 %3532, 96
  %3534 = load i64, i64* %PC
  %3535 = add i64 %3534, 5
  store i64 %3535, i64* %PC
  %3536 = inttoptr i64 %3533 to double*
  %3537 = load double, double* %3536
  %3538 = bitcast i8* %3531 to double*
  store double %3537, double* %3538, align 1, !tbaa !2452
  %3539 = getelementptr inbounds i8, i8* %3531, i64 8
  %3540 = bitcast i8* %3539 to double*
  store double 0.000000e+00, double* %3540, align 1, !tbaa !2452
  %3541 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3542 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3543 = bitcast %union.vec128_t* %XMM1 to i8*
  %3544 = load i64, i64* %PC
  %3545 = add i64 %3544, 4
  store i64 %3545, i64* %PC
  %3546 = bitcast i8* %3542 to double*
  %3547 = load double, double* %3546, align 1
  %3548 = getelementptr inbounds i8, i8* %3542, i64 8
  %3549 = bitcast i8* %3548 to i64*
  %3550 = load i64, i64* %3549, align 1
  %3551 = bitcast i8* %3543 to double*
  %3552 = load double, double* %3551, align 1
  %3553 = fsub double %3547, %3552
  %3554 = bitcast i8* %3541 to double*
  store double %3553, double* %3554, align 1, !tbaa !2452
  %3555 = getelementptr inbounds i8, i8* %3541, i64 8
  %3556 = bitcast i8* %3555 to i64*
  store i64 %3550, i64* %3556, align 1, !tbaa !2452
  %3557 = load i64, i64* %RBP
  %3558 = sub i64 %3557, 96
  %3559 = bitcast %union.vec128_t* %XMM2 to i8*
  %3560 = load i64, i64* %PC
  %3561 = add i64 %3560, 5
  store i64 %3561, i64* %PC
  %3562 = bitcast i8* %3559 to double*
  %3563 = load double, double* %3562, align 1
  %3564 = inttoptr i64 %3558 to double*
  store double %3563, double* %3564
  %3565 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3566 = load i64, i64* %RBP
  %3567 = sub i64 %3566, 136
  %3568 = load i64, i64* %PC
  %3569 = add i64 %3568, 8
  store i64 %3569, i64* %PC
  %3570 = inttoptr i64 %3567 to double*
  %3571 = load double, double* %3570
  %3572 = bitcast i8* %3565 to double*
  store double %3571, double* %3572, align 1, !tbaa !2452
  %3573 = getelementptr inbounds i8, i8* %3565, i64 8
  %3574 = bitcast i8* %3573 to double*
  store double 0.000000e+00, double* %3574, align 1, !tbaa !2452
  %3575 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3576 = load i64, i64* %RBP
  %3577 = sub i64 %3576, 104
  %3578 = load i64, i64* %PC
  %3579 = add i64 %3578, 5
  store i64 %3579, i64* %PC
  %3580 = inttoptr i64 %3577 to double*
  %3581 = load double, double* %3580
  %3582 = bitcast i8* %3575 to double*
  store double %3581, double* %3582, align 1, !tbaa !2452
  %3583 = getelementptr inbounds i8, i8* %3575, i64 8
  %3584 = bitcast i8* %3583 to double*
  store double 0.000000e+00, double* %3584, align 1, !tbaa !2452
  %3585 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3586 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3587 = bitcast %union.vec128_t* %XMM1 to i8*
  %3588 = load i64, i64* %PC
  %3589 = add i64 %3588, 4
  store i64 %3589, i64* %PC
  %3590 = bitcast i8* %3586 to double*
  %3591 = load double, double* %3590, align 1
  %3592 = getelementptr inbounds i8, i8* %3586, i64 8
  %3593 = bitcast i8* %3592 to i64*
  %3594 = load i64, i64* %3593, align 1
  %3595 = bitcast i8* %3587 to double*
  %3596 = load double, double* %3595, align 1
  %3597 = fsub double %3591, %3596
  %3598 = bitcast i8* %3585 to double*
  store double %3597, double* %3598, align 1, !tbaa !2452
  %3599 = getelementptr inbounds i8, i8* %3585, i64 8
  %3600 = bitcast i8* %3599 to i64*
  store i64 %3594, i64* %3600, align 1, !tbaa !2452
  %3601 = load i64, i64* %RBP
  %3602 = sub i64 %3601, 104
  %3603 = bitcast %union.vec128_t* %XMM2 to i8*
  %3604 = load i64, i64* %PC
  %3605 = add i64 %3604, 5
  store i64 %3605, i64* %PC
  %3606 = bitcast i8* %3603 to double*
  %3607 = load double, double* %3606, align 1
  %3608 = inttoptr i64 %3602 to double*
  store double %3607, double* %3608
  %3609 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3610 = load i64, i64* %RBP
  %3611 = sub i64 %3610, 64
  %3612 = load i64, i64* %PC
  %3613 = add i64 %3612, 5
  store i64 %3613, i64* %PC
  %3614 = inttoptr i64 %3611 to double*
  %3615 = load double, double* %3614
  %3616 = bitcast i8* %3609 to double*
  store double %3615, double* %3616, align 1, !tbaa !2452
  %3617 = getelementptr inbounds i8, i8* %3609, i64 8
  %3618 = bitcast i8* %3617 to double*
  store double 0.000000e+00, double* %3618, align 1, !tbaa !2452
  %3619 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3620 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3621 = load i64, i64* %RBP
  %3622 = sub i64 %3621, 96
  %3623 = load i64, i64* %PC
  %3624 = add i64 %3623, 5
  store i64 %3624, i64* %PC
  %3625 = bitcast i8* %3620 to double*
  %3626 = load double, double* %3625, align 1
  %3627 = getelementptr inbounds i8, i8* %3620, i64 8
  %3628 = bitcast i8* %3627 to i64*
  %3629 = load i64, i64* %3628, align 1
  %3630 = inttoptr i64 %3622 to double*
  %3631 = load double, double* %3630
  %3632 = fmul double %3626, %3631
  %3633 = bitcast i8* %3619 to double*
  store double %3632, double* %3633, align 1, !tbaa !2452
  %3634 = getelementptr inbounds i8, i8* %3619, i64 8
  %3635 = bitcast i8* %3634 to i64*
  store i64 %3629, i64* %3635, align 1, !tbaa !2452
  %3636 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3637 = load i64, i64* %RBP
  %3638 = sub i64 %3637, 72
  %3639 = load i64, i64* %PC
  %3640 = add i64 %3639, 5
  store i64 %3640, i64* %PC
  %3641 = inttoptr i64 %3638 to double*
  %3642 = load double, double* %3641
  %3643 = bitcast i8* %3636 to double*
  store double %3642, double* %3643, align 1, !tbaa !2452
  %3644 = getelementptr inbounds i8, i8* %3636, i64 8
  %3645 = bitcast i8* %3644 to double*
  store double 0.000000e+00, double* %3645, align 1, !tbaa !2452
  %3646 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3647 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3648 = load i64, i64* %RBP
  %3649 = sub i64 %3648, 104
  %3650 = load i64, i64* %PC
  %3651 = add i64 %3650, 5
  store i64 %3651, i64* %PC
  %3652 = bitcast i8* %3647 to double*
  %3653 = load double, double* %3652, align 1
  %3654 = getelementptr inbounds i8, i8* %3647, i64 8
  %3655 = bitcast i8* %3654 to i64*
  %3656 = load i64, i64* %3655, align 1
  %3657 = inttoptr i64 %3649 to double*
  %3658 = load double, double* %3657
  %3659 = fmul double %3653, %3658
  %3660 = bitcast i8* %3646 to double*
  store double %3659, double* %3660, align 1, !tbaa !2452
  %3661 = getelementptr inbounds i8, i8* %3646, i64 8
  %3662 = bitcast i8* %3661 to i64*
  store i64 %3656, i64* %3662, align 1, !tbaa !2452
  %3663 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3664 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3665 = bitcast %union.vec128_t* %XMM2 to i8*
  %3666 = load i64, i64* %PC
  %3667 = add i64 %3666, 4
  store i64 %3667, i64* %PC
  %3668 = bitcast i8* %3664 to double*
  %3669 = load double, double* %3668, align 1
  %3670 = getelementptr inbounds i8, i8* %3664, i64 8
  %3671 = bitcast i8* %3670 to i64*
  %3672 = load i64, i64* %3671, align 1
  %3673 = bitcast i8* %3665 to double*
  %3674 = load double, double* %3673, align 1
  %3675 = fsub double %3669, %3674
  %3676 = bitcast i8* %3663 to double*
  store double %3675, double* %3676, align 1, !tbaa !2452
  %3677 = getelementptr inbounds i8, i8* %3663, i64 8
  %3678 = bitcast i8* %3677 to i64*
  store i64 %3672, i64* %3678, align 1, !tbaa !2452
  %3679 = load i64, i64* %RBP
  %3680 = sub i64 %3679, 16
  %3681 = load i64, i64* %PC
  %3682 = add i64 %3681, 4
  store i64 %3682, i64* %PC
  %3683 = inttoptr i64 %3680 to i64*
  %3684 = load i64, i64* %3683
  store i64 %3684, i64* %RDX, align 8, !tbaa !2428
  %3685 = load i64, i64* %RBP
  %3686 = sub i64 %3685, 28
  %3687 = load i64, i64* %PC
  %3688 = add i64 %3687, 3
  store i64 %3688, i64* %PC
  %3689 = inttoptr i64 %3686 to i32*
  %3690 = load i32, i32* %3689
  %3691 = zext i32 %3690 to i64
  store i64 %3691, i64* %RCX, align 8, !tbaa !2428
  %3692 = load i64, i64* %RCX
  %3693 = load i64, i64* %PC
  %3694 = add i64 %3693, 3
  store i64 %3694, i64* %PC
  %3695 = trunc i64 %3692 to i32
  %3696 = add i32 4, %3695
  %3697 = zext i32 %3696 to i64
  store i64 %3697, i64* %RCX, align 8, !tbaa !2428
  %3698 = icmp ult i32 %3696, %3695
  %3699 = icmp ult i32 %3696, 4
  %3700 = or i1 %3698, %3699
  %3701 = zext i1 %3700 to i8
  %3702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3701, i8* %3702, align 1, !tbaa !2432
  %3703 = and i32 %3696, 255
  %3704 = call i32 @llvm.ctpop.i32(i32 %3703) #17
  %3705 = trunc i32 %3704 to i8
  %3706 = and i8 %3705, 1
  %3707 = xor i8 %3706, 1
  %3708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3707, i8* %3708, align 1, !tbaa !2446
  %3709 = xor i64 4, %3692
  %3710 = trunc i64 %3709 to i32
  %3711 = xor i32 %3710, %3696
  %3712 = lshr i32 %3711, 4
  %3713 = trunc i32 %3712 to i8
  %3714 = and i8 %3713, 1
  %3715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3714, i8* %3715, align 1, !tbaa !2447
  %3716 = icmp eq i32 %3696, 0
  %3717 = zext i1 %3716 to i8
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3717, i8* %3718, align 1, !tbaa !2448
  %3719 = lshr i32 %3696, 31
  %3720 = trunc i32 %3719 to i8
  %3721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3720, i8* %3721, align 1, !tbaa !2449
  %3722 = lshr i32 %3695, 31
  %3723 = xor i32 %3719, %3722
  %3724 = add nuw nsw i32 %3723, %3719
  %3725 = icmp eq i32 %3724, 2
  %3726 = zext i1 %3725 to i8
  %3727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3726, i8* %3727, align 1, !tbaa !2450
  %3728 = load i32, i32* %ECX
  %3729 = zext i32 %3728 to i64
  %3730 = load i64, i64* %PC
  %3731 = add i64 %3730, 3
  store i64 %3731, i64* %PC
  %3732 = shl i64 %3729, 32
  %3733 = ashr exact i64 %3732, 32
  store i64 %3733, i64* %RSI, align 8, !tbaa !2428
  %3734 = load i64, i64* %RDX
  %3735 = load i64, i64* %RSI
  %3736 = mul i64 %3735, 8
  %3737 = add i64 %3736, %3734
  %3738 = bitcast %union.vec128_t* %XMM1 to i8*
  %3739 = load i64, i64* %PC
  %3740 = add i64 %3739, 5
  store i64 %3740, i64* %PC
  %3741 = bitcast i8* %3738 to double*
  %3742 = load double, double* %3741, align 1
  %3743 = inttoptr i64 %3737 to double*
  store double %3742, double* %3743
  %3744 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3745 = load i64, i64* %RBP
  %3746 = sub i64 %3745, 64
  %3747 = load i64, i64* %PC
  %3748 = add i64 %3747, 5
  store i64 %3748, i64* %PC
  %3749 = inttoptr i64 %3746 to double*
  %3750 = load double, double* %3749
  %3751 = bitcast i8* %3744 to double*
  store double %3750, double* %3751, align 1, !tbaa !2452
  %3752 = getelementptr inbounds i8, i8* %3744, i64 8
  %3753 = bitcast i8* %3752 to double*
  store double 0.000000e+00, double* %3753, align 1, !tbaa !2452
  %3754 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3755 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3756 = load i64, i64* %RBP
  %3757 = sub i64 %3756, 104
  %3758 = load i64, i64* %PC
  %3759 = add i64 %3758, 5
  store i64 %3759, i64* %PC
  %3760 = bitcast i8* %3755 to double*
  %3761 = load double, double* %3760, align 1
  %3762 = getelementptr inbounds i8, i8* %3755, i64 8
  %3763 = bitcast i8* %3762 to i64*
  %3764 = load i64, i64* %3763, align 1
  %3765 = inttoptr i64 %3757 to double*
  %3766 = load double, double* %3765
  %3767 = fmul double %3761, %3766
  %3768 = bitcast i8* %3754 to double*
  store double %3767, double* %3768, align 1, !tbaa !2452
  %3769 = getelementptr inbounds i8, i8* %3754, i64 8
  %3770 = bitcast i8* %3769 to i64*
  store i64 %3764, i64* %3770, align 1, !tbaa !2452
  %3771 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3772 = load i64, i64* %RBP
  %3773 = sub i64 %3772, 72
  %3774 = load i64, i64* %PC
  %3775 = add i64 %3774, 5
  store i64 %3775, i64* %PC
  %3776 = inttoptr i64 %3773 to double*
  %3777 = load double, double* %3776
  %3778 = bitcast i8* %3771 to double*
  store double %3777, double* %3778, align 1, !tbaa !2452
  %3779 = getelementptr inbounds i8, i8* %3771, i64 8
  %3780 = bitcast i8* %3779 to double*
  store double 0.000000e+00, double* %3780, align 1, !tbaa !2452
  %3781 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3782 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3783 = load i64, i64* %RBP
  %3784 = sub i64 %3783, 96
  %3785 = load i64, i64* %PC
  %3786 = add i64 %3785, 5
  store i64 %3786, i64* %PC
  %3787 = bitcast i8* %3782 to double*
  %3788 = load double, double* %3787, align 1
  %3789 = getelementptr inbounds i8, i8* %3782, i64 8
  %3790 = bitcast i8* %3789 to i64*
  %3791 = load i64, i64* %3790, align 1
  %3792 = inttoptr i64 %3784 to double*
  %3793 = load double, double* %3792
  %3794 = fmul double %3788, %3793
  %3795 = bitcast i8* %3781 to double*
  store double %3794, double* %3795, align 1, !tbaa !2452
  %3796 = getelementptr inbounds i8, i8* %3781, i64 8
  %3797 = bitcast i8* %3796 to i64*
  store i64 %3791, i64* %3797, align 1, !tbaa !2452
  %3798 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3799 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3800 = bitcast %union.vec128_t* %XMM2 to i8*
  %3801 = load i64, i64* %PC
  %3802 = add i64 %3801, 4
  store i64 %3802, i64* %PC
  %3803 = bitcast i8* %3799 to double*
  %3804 = load double, double* %3803, align 1
  %3805 = getelementptr inbounds i8, i8* %3799, i64 8
  %3806 = bitcast i8* %3805 to i64*
  %3807 = load i64, i64* %3806, align 1
  %3808 = bitcast i8* %3800 to double*
  %3809 = load double, double* %3808, align 1
  %3810 = fadd double %3804, %3809
  %3811 = bitcast i8* %3798 to double*
  store double %3810, double* %3811, align 1, !tbaa !2452
  %3812 = getelementptr inbounds i8, i8* %3798, i64 8
  %3813 = bitcast i8* %3812 to i64*
  store i64 %3807, i64* %3813, align 1, !tbaa !2452
  %3814 = load i64, i64* %RBP
  %3815 = sub i64 %3814, 16
  %3816 = load i64, i64* %PC
  %3817 = add i64 %3816, 4
  store i64 %3817, i64* %PC
  %3818 = inttoptr i64 %3815 to i64*
  %3819 = load i64, i64* %3818
  store i64 %3819, i64* %RDX, align 8, !tbaa !2428
  %3820 = load i64, i64* %RBP
  %3821 = sub i64 %3820, 28
  %3822 = load i64, i64* %PC
  %3823 = add i64 %3822, 3
  store i64 %3823, i64* %PC
  %3824 = inttoptr i64 %3821 to i32*
  %3825 = load i32, i32* %3824
  %3826 = zext i32 %3825 to i64
  store i64 %3826, i64* %RCX, align 8, !tbaa !2428
  %3827 = load i64, i64* %RCX
  %3828 = load i64, i64* %PC
  %3829 = add i64 %3828, 3
  store i64 %3829, i64* %PC
  %3830 = trunc i64 %3827 to i32
  %3831 = add i32 5, %3830
  %3832 = zext i32 %3831 to i64
  store i64 %3832, i64* %RCX, align 8, !tbaa !2428
  %3833 = icmp ult i32 %3831, %3830
  %3834 = icmp ult i32 %3831, 5
  %3835 = or i1 %3833, %3834
  %3836 = zext i1 %3835 to i8
  %3837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3836, i8* %3837, align 1, !tbaa !2432
  %3838 = and i32 %3831, 255
  %3839 = call i32 @llvm.ctpop.i32(i32 %3838) #17
  %3840 = trunc i32 %3839 to i8
  %3841 = and i8 %3840, 1
  %3842 = xor i8 %3841, 1
  %3843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3842, i8* %3843, align 1, !tbaa !2446
  %3844 = xor i64 5, %3827
  %3845 = trunc i64 %3844 to i32
  %3846 = xor i32 %3845, %3831
  %3847 = lshr i32 %3846, 4
  %3848 = trunc i32 %3847 to i8
  %3849 = and i8 %3848, 1
  %3850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3849, i8* %3850, align 1, !tbaa !2447
  %3851 = icmp eq i32 %3831, 0
  %3852 = zext i1 %3851 to i8
  %3853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3852, i8* %3853, align 1, !tbaa !2448
  %3854 = lshr i32 %3831, 31
  %3855 = trunc i32 %3854 to i8
  %3856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3855, i8* %3856, align 1, !tbaa !2449
  %3857 = lshr i32 %3830, 31
  %3858 = xor i32 %3854, %3857
  %3859 = add nuw nsw i32 %3858, %3854
  %3860 = icmp eq i32 %3859, 2
  %3861 = zext i1 %3860 to i8
  %3862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3861, i8* %3862, align 1, !tbaa !2450
  %3863 = load i32, i32* %ECX
  %3864 = zext i32 %3863 to i64
  %3865 = load i64, i64* %PC
  %3866 = add i64 %3865, 3
  store i64 %3866, i64* %PC
  %3867 = shl i64 %3864, 32
  %3868 = ashr exact i64 %3867, 32
  store i64 %3868, i64* %RSI, align 8, !tbaa !2428
  %3869 = load i64, i64* %RDX
  %3870 = load i64, i64* %RSI
  %3871 = mul i64 %3870, 8
  %3872 = add i64 %3871, %3869
  %3873 = bitcast %union.vec128_t* %XMM1 to i8*
  %3874 = load i64, i64* %PC
  %3875 = add i64 %3874, 5
  store i64 %3875, i64* %PC
  %3876 = bitcast i8* %3873 to double*
  %3877 = load double, double* %3876, align 1
  %3878 = inttoptr i64 %3872 to double*
  store double %3877, double* %3878
  %3879 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3880 = load i64, i64* %RBP
  %3881 = sub i64 %3880, 112
  %3882 = load i64, i64* %PC
  %3883 = add i64 %3882, 5
  store i64 %3883, i64* %PC
  %3884 = inttoptr i64 %3881 to double*
  %3885 = load double, double* %3884
  %3886 = bitcast i8* %3879 to double*
  store double %3885, double* %3886, align 1, !tbaa !2452
  %3887 = getelementptr inbounds i8, i8* %3879, i64 8
  %3888 = bitcast i8* %3887 to double*
  store double 0.000000e+00, double* %3888, align 1, !tbaa !2452
  %3889 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3890 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3891 = load i64, i64* %RBP
  %3892 = sub i64 %3891, 152
  %3893 = load i64, i64* %PC
  %3894 = add i64 %3893, 8
  store i64 %3894, i64* %PC
  %3895 = bitcast i8* %3890 to double*
  %3896 = load double, double* %3895, align 1
  %3897 = getelementptr inbounds i8, i8* %3890, i64 8
  %3898 = bitcast i8* %3897 to i64*
  %3899 = load i64, i64* %3898, align 1
  %3900 = inttoptr i64 %3892 to double*
  %3901 = load double, double* %3900
  %3902 = fsub double %3896, %3901
  %3903 = bitcast i8* %3889 to double*
  store double %3902, double* %3903, align 1, !tbaa !2452
  %3904 = getelementptr inbounds i8, i8* %3889, i64 8
  %3905 = bitcast i8* %3904 to i64*
  store i64 %3899, i64* %3905, align 1, !tbaa !2452
  %3906 = load i64, i64* %RBP
  %3907 = sub i64 %3906, 96
  %3908 = bitcast %union.vec128_t* %XMM1 to i8*
  %3909 = load i64, i64* %PC
  %3910 = add i64 %3909, 5
  store i64 %3910, i64* %PC
  %3911 = bitcast i8* %3908 to double*
  %3912 = load double, double* %3911, align 1
  %3913 = inttoptr i64 %3907 to double*
  store double %3912, double* %3913
  %3914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3915 = load i64, i64* %RBP
  %3916 = sub i64 %3915, 120
  %3917 = load i64, i64* %PC
  %3918 = add i64 %3917, 5
  store i64 %3918, i64* %PC
  %3919 = inttoptr i64 %3916 to double*
  %3920 = load double, double* %3919
  %3921 = bitcast i8* %3914 to double*
  store double %3920, double* %3921, align 1, !tbaa !2452
  %3922 = getelementptr inbounds i8, i8* %3914, i64 8
  %3923 = bitcast i8* %3922 to double*
  store double 0.000000e+00, double* %3923, align 1, !tbaa !2452
  %3924 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3925 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3926 = load i64, i64* %RBP
  %3927 = sub i64 %3926, 144
  %3928 = load i64, i64* %PC
  %3929 = add i64 %3928, 8
  store i64 %3929, i64* %PC
  %3930 = bitcast i8* %3925 to double*
  %3931 = load double, double* %3930, align 1
  %3932 = getelementptr inbounds i8, i8* %3925, i64 8
  %3933 = bitcast i8* %3932 to i64*
  %3934 = load i64, i64* %3933, align 1
  %3935 = inttoptr i64 %3927 to double*
  %3936 = load double, double* %3935
  %3937 = fadd double %3931, %3936
  %3938 = bitcast i8* %3924 to double*
  store double %3937, double* %3938, align 1, !tbaa !2452
  %3939 = getelementptr inbounds i8, i8* %3924, i64 8
  %3940 = bitcast i8* %3939 to i64*
  store i64 %3934, i64* %3940, align 1, !tbaa !2452
  %3941 = load i64, i64* %RBP
  %3942 = sub i64 %3941, 104
  %3943 = bitcast %union.vec128_t* %XMM1 to i8*
  %3944 = load i64, i64* %PC
  %3945 = add i64 %3944, 5
  store i64 %3945, i64* %PC
  %3946 = bitcast i8* %3943 to double*
  %3947 = load double, double* %3946, align 1
  %3948 = inttoptr i64 %3942 to double*
  store double %3947, double* %3948
  %3949 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3950 = load i64, i64* %RBP
  %3951 = sub i64 %3950, 48
  %3952 = load i64, i64* %PC
  %3953 = add i64 %3952, 5
  store i64 %3953, i64* %PC
  %3954 = inttoptr i64 %3951 to double*
  %3955 = load double, double* %3954
  %3956 = bitcast i8* %3949 to double*
  store double %3955, double* %3956, align 1, !tbaa !2452
  %3957 = getelementptr inbounds i8, i8* %3949, i64 8
  %3958 = bitcast i8* %3957 to double*
  store double 0.000000e+00, double* %3958, align 1, !tbaa !2452
  %3959 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3960 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3961 = load i64, i64* %RBP
  %3962 = sub i64 %3961, 96
  %3963 = load i64, i64* %PC
  %3964 = add i64 %3963, 5
  store i64 %3964, i64* %PC
  %3965 = bitcast i8* %3960 to double*
  %3966 = load double, double* %3965, align 1
  %3967 = getelementptr inbounds i8, i8* %3960, i64 8
  %3968 = bitcast i8* %3967 to i64*
  %3969 = load i64, i64* %3968, align 1
  %3970 = inttoptr i64 %3962 to double*
  %3971 = load double, double* %3970
  %3972 = fmul double %3966, %3971
  %3973 = bitcast i8* %3959 to double*
  store double %3972, double* %3973, align 1, !tbaa !2452
  %3974 = getelementptr inbounds i8, i8* %3959, i64 8
  %3975 = bitcast i8* %3974 to i64*
  store i64 %3969, i64* %3975, align 1, !tbaa !2452
  %3976 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3977 = load i64, i64* %RBP
  %3978 = sub i64 %3977, 56
  %3979 = load i64, i64* %PC
  %3980 = add i64 %3979, 5
  store i64 %3980, i64* %PC
  %3981 = inttoptr i64 %3978 to double*
  %3982 = load double, double* %3981
  %3983 = bitcast i8* %3976 to double*
  store double %3982, double* %3983, align 1, !tbaa !2452
  %3984 = getelementptr inbounds i8, i8* %3976, i64 8
  %3985 = bitcast i8* %3984 to double*
  store double 0.000000e+00, double* %3985, align 1, !tbaa !2452
  %3986 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3987 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3988 = load i64, i64* %RBP
  %3989 = sub i64 %3988, 104
  %3990 = load i64, i64* %PC
  %3991 = add i64 %3990, 5
  store i64 %3991, i64* %PC
  %3992 = bitcast i8* %3987 to double*
  %3993 = load double, double* %3992, align 1
  %3994 = getelementptr inbounds i8, i8* %3987, i64 8
  %3995 = bitcast i8* %3994 to i64*
  %3996 = load i64, i64* %3995, align 1
  %3997 = inttoptr i64 %3989 to double*
  %3998 = load double, double* %3997
  %3999 = fmul double %3993, %3998
  %4000 = bitcast i8* %3986 to double*
  store double %3999, double* %4000, align 1, !tbaa !2452
  %4001 = getelementptr inbounds i8, i8* %3986, i64 8
  %4002 = bitcast i8* %4001 to i64*
  store i64 %3996, i64* %4002, align 1, !tbaa !2452
  %4003 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4004 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4005 = bitcast %union.vec128_t* %XMM2 to i8*
  %4006 = load i64, i64* %PC
  %4007 = add i64 %4006, 4
  store i64 %4007, i64* %PC
  %4008 = bitcast i8* %4004 to double*
  %4009 = load double, double* %4008, align 1
  %4010 = getelementptr inbounds i8, i8* %4004, i64 8
  %4011 = bitcast i8* %4010 to i64*
  %4012 = load i64, i64* %4011, align 1
  %4013 = bitcast i8* %4005 to double*
  %4014 = load double, double* %4013, align 1
  %4015 = fsub double %4009, %4014
  %4016 = bitcast i8* %4003 to double*
  store double %4015, double* %4016, align 1, !tbaa !2452
  %4017 = getelementptr inbounds i8, i8* %4003, i64 8
  %4018 = bitcast i8* %4017 to i64*
  store i64 %4012, i64* %4018, align 1, !tbaa !2452
  %4019 = load i64, i64* %RBP
  %4020 = sub i64 %4019, 16
  %4021 = load i64, i64* %PC
  %4022 = add i64 %4021, 4
  store i64 %4022, i64* %PC
  %4023 = inttoptr i64 %4020 to i64*
  %4024 = load i64, i64* %4023
  store i64 %4024, i64* %RDX, align 8, !tbaa !2428
  %4025 = load i64, i64* %RBP
  %4026 = sub i64 %4025, 28
  %4027 = load i64, i64* %PC
  %4028 = add i64 %4027, 3
  store i64 %4028, i64* %PC
  %4029 = inttoptr i64 %4026 to i32*
  %4030 = load i32, i32* %4029
  %4031 = zext i32 %4030 to i64
  store i64 %4031, i64* %RCX, align 8, !tbaa !2428
  %4032 = load i64, i64* %RCX
  %4033 = load i64, i64* %PC
  %4034 = add i64 %4033, 3
  store i64 %4034, i64* %PC
  %4035 = trunc i64 %4032 to i32
  %4036 = add i32 2, %4035
  %4037 = zext i32 %4036 to i64
  store i64 %4037, i64* %RCX, align 8, !tbaa !2428
  %4038 = icmp ult i32 %4036, %4035
  %4039 = icmp ult i32 %4036, 2
  %4040 = or i1 %4038, %4039
  %4041 = zext i1 %4040 to i8
  %4042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4041, i8* %4042, align 1, !tbaa !2432
  %4043 = and i32 %4036, 255
  %4044 = call i32 @llvm.ctpop.i32(i32 %4043) #17
  %4045 = trunc i32 %4044 to i8
  %4046 = and i8 %4045, 1
  %4047 = xor i8 %4046, 1
  %4048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4047, i8* %4048, align 1, !tbaa !2446
  %4049 = xor i64 2, %4032
  %4050 = trunc i64 %4049 to i32
  %4051 = xor i32 %4050, %4036
  %4052 = lshr i32 %4051, 4
  %4053 = trunc i32 %4052 to i8
  %4054 = and i8 %4053, 1
  %4055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4054, i8* %4055, align 1, !tbaa !2447
  %4056 = icmp eq i32 %4036, 0
  %4057 = zext i1 %4056 to i8
  %4058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4057, i8* %4058, align 1, !tbaa !2448
  %4059 = lshr i32 %4036, 31
  %4060 = trunc i32 %4059 to i8
  %4061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4060, i8* %4061, align 1, !tbaa !2449
  %4062 = lshr i32 %4035, 31
  %4063 = xor i32 %4059, %4062
  %4064 = add nuw nsw i32 %4063, %4059
  %4065 = icmp eq i32 %4064, 2
  %4066 = zext i1 %4065 to i8
  %4067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4066, i8* %4067, align 1, !tbaa !2450
  %4068 = load i32, i32* %ECX
  %4069 = zext i32 %4068 to i64
  %4070 = load i64, i64* %PC
  %4071 = add i64 %4070, 3
  store i64 %4071, i64* %PC
  %4072 = shl i64 %4069, 32
  %4073 = ashr exact i64 %4072, 32
  store i64 %4073, i64* %RSI, align 8, !tbaa !2428
  %4074 = load i64, i64* %RDX
  %4075 = load i64, i64* %RSI
  %4076 = mul i64 %4075, 8
  %4077 = add i64 %4076, %4074
  %4078 = bitcast %union.vec128_t* %XMM1 to i8*
  %4079 = load i64, i64* %PC
  %4080 = add i64 %4079, 5
  store i64 %4080, i64* %PC
  %4081 = bitcast i8* %4078 to double*
  %4082 = load double, double* %4081, align 1
  %4083 = inttoptr i64 %4077 to double*
  store double %4082, double* %4083
  %4084 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4085 = load i64, i64* %RBP
  %4086 = sub i64 %4085, 48
  %4087 = load i64, i64* %PC
  %4088 = add i64 %4087, 5
  store i64 %4088, i64* %PC
  %4089 = inttoptr i64 %4086 to double*
  %4090 = load double, double* %4089
  %4091 = bitcast i8* %4084 to double*
  store double %4090, double* %4091, align 1, !tbaa !2452
  %4092 = getelementptr inbounds i8, i8* %4084, i64 8
  %4093 = bitcast i8* %4092 to double*
  store double 0.000000e+00, double* %4093, align 1, !tbaa !2452
  %4094 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4095 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4096 = load i64, i64* %RBP
  %4097 = sub i64 %4096, 104
  %4098 = load i64, i64* %PC
  %4099 = add i64 %4098, 5
  store i64 %4099, i64* %PC
  %4100 = bitcast i8* %4095 to double*
  %4101 = load double, double* %4100, align 1
  %4102 = getelementptr inbounds i8, i8* %4095, i64 8
  %4103 = bitcast i8* %4102 to i64*
  %4104 = load i64, i64* %4103, align 1
  %4105 = inttoptr i64 %4097 to double*
  %4106 = load double, double* %4105
  %4107 = fmul double %4101, %4106
  %4108 = bitcast i8* %4094 to double*
  store double %4107, double* %4108, align 1, !tbaa !2452
  %4109 = getelementptr inbounds i8, i8* %4094, i64 8
  %4110 = bitcast i8* %4109 to i64*
  store i64 %4104, i64* %4110, align 1, !tbaa !2452
  %4111 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4112 = load i64, i64* %RBP
  %4113 = sub i64 %4112, 56
  %4114 = load i64, i64* %PC
  %4115 = add i64 %4114, 5
  store i64 %4115, i64* %PC
  %4116 = inttoptr i64 %4113 to double*
  %4117 = load double, double* %4116
  %4118 = bitcast i8* %4111 to double*
  store double %4117, double* %4118, align 1, !tbaa !2452
  %4119 = getelementptr inbounds i8, i8* %4111, i64 8
  %4120 = bitcast i8* %4119 to double*
  store double 0.000000e+00, double* %4120, align 1, !tbaa !2452
  %4121 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4122 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4123 = load i64, i64* %RBP
  %4124 = sub i64 %4123, 96
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 5
  store i64 %4126, i64* %PC
  %4127 = bitcast i8* %4122 to double*
  %4128 = load double, double* %4127, align 1
  %4129 = getelementptr inbounds i8, i8* %4122, i64 8
  %4130 = bitcast i8* %4129 to i64*
  %4131 = load i64, i64* %4130, align 1
  %4132 = inttoptr i64 %4124 to double*
  %4133 = load double, double* %4132
  %4134 = fmul double %4128, %4133
  %4135 = bitcast i8* %4121 to double*
  store double %4134, double* %4135, align 1, !tbaa !2452
  %4136 = getelementptr inbounds i8, i8* %4121, i64 8
  %4137 = bitcast i8* %4136 to i64*
  store i64 %4131, i64* %4137, align 1, !tbaa !2452
  %4138 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4139 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4140 = bitcast %union.vec128_t* %XMM2 to i8*
  %4141 = load i64, i64* %PC
  %4142 = add i64 %4141, 4
  store i64 %4142, i64* %PC
  %4143 = bitcast i8* %4139 to double*
  %4144 = load double, double* %4143, align 1
  %4145 = getelementptr inbounds i8, i8* %4139, i64 8
  %4146 = bitcast i8* %4145 to i64*
  %4147 = load i64, i64* %4146, align 1
  %4148 = bitcast i8* %4140 to double*
  %4149 = load double, double* %4148, align 1
  %4150 = fadd double %4144, %4149
  %4151 = bitcast i8* %4138 to double*
  store double %4150, double* %4151, align 1, !tbaa !2452
  %4152 = getelementptr inbounds i8, i8* %4138, i64 8
  %4153 = bitcast i8* %4152 to i64*
  store i64 %4147, i64* %4153, align 1, !tbaa !2452
  %4154 = load i64, i64* %RBP
  %4155 = sub i64 %4154, 16
  %4156 = load i64, i64* %PC
  %4157 = add i64 %4156, 4
  store i64 %4157, i64* %PC
  %4158 = inttoptr i64 %4155 to i64*
  %4159 = load i64, i64* %4158
  store i64 %4159, i64* %RDX, align 8, !tbaa !2428
  %4160 = load i64, i64* %RBP
  %4161 = sub i64 %4160, 28
  %4162 = load i64, i64* %PC
  %4163 = add i64 %4162, 3
  store i64 %4163, i64* %PC
  %4164 = inttoptr i64 %4161 to i32*
  %4165 = load i32, i32* %4164
  %4166 = zext i32 %4165 to i64
  store i64 %4166, i64* %RCX, align 8, !tbaa !2428
  %4167 = load i64, i64* %RCX
  %4168 = load i64, i64* %PC
  %4169 = add i64 %4168, 3
  store i64 %4169, i64* %PC
  %4170 = trunc i64 %4167 to i32
  %4171 = add i32 3, %4170
  %4172 = zext i32 %4171 to i64
  store i64 %4172, i64* %RCX, align 8, !tbaa !2428
  %4173 = icmp ult i32 %4171, %4170
  %4174 = icmp ult i32 %4171, 3
  %4175 = or i1 %4173, %4174
  %4176 = zext i1 %4175 to i8
  %4177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4176, i8* %4177, align 1, !tbaa !2432
  %4178 = and i32 %4171, 255
  %4179 = call i32 @llvm.ctpop.i32(i32 %4178) #17
  %4180 = trunc i32 %4179 to i8
  %4181 = and i8 %4180, 1
  %4182 = xor i8 %4181, 1
  %4183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4182, i8* %4183, align 1, !tbaa !2446
  %4184 = xor i64 3, %4167
  %4185 = trunc i64 %4184 to i32
  %4186 = xor i32 %4185, %4171
  %4187 = lshr i32 %4186, 4
  %4188 = trunc i32 %4187 to i8
  %4189 = and i8 %4188, 1
  %4190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4189, i8* %4190, align 1, !tbaa !2447
  %4191 = icmp eq i32 %4171, 0
  %4192 = zext i1 %4191 to i8
  %4193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4192, i8* %4193, align 1, !tbaa !2448
  %4194 = lshr i32 %4171, 31
  %4195 = trunc i32 %4194 to i8
  %4196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4195, i8* %4196, align 1, !tbaa !2449
  %4197 = lshr i32 %4170, 31
  %4198 = xor i32 %4194, %4197
  %4199 = add nuw nsw i32 %4198, %4194
  %4200 = icmp eq i32 %4199, 2
  %4201 = zext i1 %4200 to i8
  %4202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4201, i8* %4202, align 1, !tbaa !2450
  %4203 = load i32, i32* %ECX
  %4204 = zext i32 %4203 to i64
  %4205 = load i64, i64* %PC
  %4206 = add i64 %4205, 3
  store i64 %4206, i64* %PC
  %4207 = shl i64 %4204, 32
  %4208 = ashr exact i64 %4207, 32
  store i64 %4208, i64* %RSI, align 8, !tbaa !2428
  %4209 = load i64, i64* %RDX
  %4210 = load i64, i64* %RSI
  %4211 = mul i64 %4210, 8
  %4212 = add i64 %4211, %4209
  %4213 = bitcast %union.vec128_t* %XMM1 to i8*
  %4214 = load i64, i64* %PC
  %4215 = add i64 %4214, 5
  store i64 %4215, i64* %PC
  %4216 = bitcast i8* %4213 to double*
  %4217 = load double, double* %4216, align 1
  %4218 = inttoptr i64 %4212 to double*
  store double %4217, double* %4218
  %4219 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4220 = load i64, i64* %RBP
  %4221 = sub i64 %4220, 112
  %4222 = load i64, i64* %PC
  %4223 = add i64 %4222, 5
  store i64 %4223, i64* %PC
  %4224 = inttoptr i64 %4221 to double*
  %4225 = load double, double* %4224
  %4226 = bitcast i8* %4219 to double*
  store double %4225, double* %4226, align 1, !tbaa !2452
  %4227 = getelementptr inbounds i8, i8* %4219, i64 8
  %4228 = bitcast i8* %4227 to double*
  store double 0.000000e+00, double* %4228, align 1, !tbaa !2452
  %4229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4230 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4231 = load i64, i64* %RBP
  %4232 = sub i64 %4231, 152
  %4233 = load i64, i64* %PC
  %4234 = add i64 %4233, 8
  store i64 %4234, i64* %PC
  %4235 = bitcast i8* %4230 to double*
  %4236 = load double, double* %4235, align 1
  %4237 = getelementptr inbounds i8, i8* %4230, i64 8
  %4238 = bitcast i8* %4237 to i64*
  %4239 = load i64, i64* %4238, align 1
  %4240 = inttoptr i64 %4232 to double*
  %4241 = load double, double* %4240
  %4242 = fadd double %4236, %4241
  %4243 = bitcast i8* %4229 to double*
  store double %4242, double* %4243, align 1, !tbaa !2452
  %4244 = getelementptr inbounds i8, i8* %4229, i64 8
  %4245 = bitcast i8* %4244 to i64*
  store i64 %4239, i64* %4245, align 1, !tbaa !2452
  %4246 = load i64, i64* %RBP
  %4247 = sub i64 %4246, 96
  %4248 = bitcast %union.vec128_t* %XMM1 to i8*
  %4249 = load i64, i64* %PC
  %4250 = add i64 %4249, 5
  store i64 %4250, i64* %PC
  %4251 = bitcast i8* %4248 to double*
  %4252 = load double, double* %4251, align 1
  %4253 = inttoptr i64 %4247 to double*
  store double %4252, double* %4253
  %4254 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4255 = load i64, i64* %RBP
  %4256 = sub i64 %4255, 120
  %4257 = load i64, i64* %PC
  %4258 = add i64 %4257, 5
  store i64 %4258, i64* %PC
  %4259 = inttoptr i64 %4256 to double*
  %4260 = load double, double* %4259
  %4261 = bitcast i8* %4254 to double*
  store double %4260, double* %4261, align 1, !tbaa !2452
  %4262 = getelementptr inbounds i8, i8* %4254, i64 8
  %4263 = bitcast i8* %4262 to double*
  store double 0.000000e+00, double* %4263, align 1, !tbaa !2452
  %4264 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4265 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4266 = load i64, i64* %RBP
  %4267 = sub i64 %4266, 144
  %4268 = load i64, i64* %PC
  %4269 = add i64 %4268, 8
  store i64 %4269, i64* %PC
  %4270 = bitcast i8* %4265 to double*
  %4271 = load double, double* %4270, align 1
  %4272 = getelementptr inbounds i8, i8* %4265, i64 8
  %4273 = bitcast i8* %4272 to i64*
  %4274 = load i64, i64* %4273, align 1
  %4275 = inttoptr i64 %4267 to double*
  %4276 = load double, double* %4275
  %4277 = fsub double %4271, %4276
  %4278 = bitcast i8* %4264 to double*
  store double %4277, double* %4278, align 1, !tbaa !2452
  %4279 = getelementptr inbounds i8, i8* %4264, i64 8
  %4280 = bitcast i8* %4279 to i64*
  store i64 %4274, i64* %4280, align 1, !tbaa !2452
  %4281 = load i64, i64* %RBP
  %4282 = sub i64 %4281, 104
  %4283 = bitcast %union.vec128_t* %XMM1 to i8*
  %4284 = load i64, i64* %PC
  %4285 = add i64 %4284, 5
  store i64 %4285, i64* %PC
  %4286 = bitcast i8* %4283 to double*
  %4287 = load double, double* %4286, align 1
  %4288 = inttoptr i64 %4282 to double*
  store double %4287, double* %4288
  %4289 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4290 = load i64, i64* %RBP
  %4291 = sub i64 %4290, 80
  %4292 = load i64, i64* %PC
  %4293 = add i64 %4292, 5
  store i64 %4293, i64* %PC
  %4294 = inttoptr i64 %4291 to double*
  %4295 = load double, double* %4294
  %4296 = bitcast i8* %4289 to double*
  store double %4295, double* %4296, align 1, !tbaa !2452
  %4297 = getelementptr inbounds i8, i8* %4289, i64 8
  %4298 = bitcast i8* %4297 to double*
  store double 0.000000e+00, double* %4298, align 1, !tbaa !2452
  %4299 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4300 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4301 = load i64, i64* %RBP
  %4302 = sub i64 %4301, 96
  %4303 = load i64, i64* %PC
  %4304 = add i64 %4303, 5
  store i64 %4304, i64* %PC
  %4305 = bitcast i8* %4300 to double*
  %4306 = load double, double* %4305, align 1
  %4307 = getelementptr inbounds i8, i8* %4300, i64 8
  %4308 = bitcast i8* %4307 to i64*
  %4309 = load i64, i64* %4308, align 1
  %4310 = inttoptr i64 %4302 to double*
  %4311 = load double, double* %4310
  %4312 = fmul double %4306, %4311
  %4313 = bitcast i8* %4299 to double*
  store double %4312, double* %4313, align 1, !tbaa !2452
  %4314 = getelementptr inbounds i8, i8* %4299, i64 8
  %4315 = bitcast i8* %4314 to i64*
  store i64 %4309, i64* %4315, align 1, !tbaa !2452
  %4316 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4317 = load i64, i64* %RBP
  %4318 = sub i64 %4317, 88
  %4319 = load i64, i64* %PC
  %4320 = add i64 %4319, 5
  store i64 %4320, i64* %PC
  %4321 = inttoptr i64 %4318 to double*
  %4322 = load double, double* %4321
  %4323 = bitcast i8* %4316 to double*
  store double %4322, double* %4323, align 1, !tbaa !2452
  %4324 = getelementptr inbounds i8, i8* %4316, i64 8
  %4325 = bitcast i8* %4324 to double*
  store double 0.000000e+00, double* %4325, align 1, !tbaa !2452
  %4326 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4327 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4328 = load i64, i64* %RBP
  %4329 = sub i64 %4328, 104
  %4330 = load i64, i64* %PC
  %4331 = add i64 %4330, 5
  store i64 %4331, i64* %PC
  %4332 = bitcast i8* %4327 to double*
  %4333 = load double, double* %4332, align 1
  %4334 = getelementptr inbounds i8, i8* %4327, i64 8
  %4335 = bitcast i8* %4334 to i64*
  %4336 = load i64, i64* %4335, align 1
  %4337 = inttoptr i64 %4329 to double*
  %4338 = load double, double* %4337
  %4339 = fmul double %4333, %4338
  %4340 = bitcast i8* %4326 to double*
  store double %4339, double* %4340, align 1, !tbaa !2452
  %4341 = getelementptr inbounds i8, i8* %4326, i64 8
  %4342 = bitcast i8* %4341 to i64*
  store i64 %4336, i64* %4342, align 1, !tbaa !2452
  %4343 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4344 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4345 = bitcast %union.vec128_t* %XMM2 to i8*
  %4346 = load i64, i64* %PC
  %4347 = add i64 %4346, 4
  store i64 %4347, i64* %PC
  %4348 = bitcast i8* %4344 to double*
  %4349 = load double, double* %4348, align 1
  %4350 = getelementptr inbounds i8, i8* %4344, i64 8
  %4351 = bitcast i8* %4350 to i64*
  %4352 = load i64, i64* %4351, align 1
  %4353 = bitcast i8* %4345 to double*
  %4354 = load double, double* %4353, align 1
  %4355 = fsub double %4349, %4354
  %4356 = bitcast i8* %4343 to double*
  store double %4355, double* %4356, align 1, !tbaa !2452
  %4357 = getelementptr inbounds i8, i8* %4343, i64 8
  %4358 = bitcast i8* %4357 to i64*
  store i64 %4352, i64* %4358, align 1, !tbaa !2452
  %4359 = load i64, i64* %RBP
  %4360 = sub i64 %4359, 16
  %4361 = load i64, i64* %PC
  %4362 = add i64 %4361, 4
  store i64 %4362, i64* %PC
  %4363 = inttoptr i64 %4360 to i64*
  %4364 = load i64, i64* %4363
  store i64 %4364, i64* %RDX, align 8, !tbaa !2428
  %4365 = load i64, i64* %RBP
  %4366 = sub i64 %4365, 28
  %4367 = load i64, i64* %PC
  %4368 = add i64 %4367, 3
  store i64 %4368, i64* %PC
  %4369 = inttoptr i64 %4366 to i32*
  %4370 = load i32, i32* %4369
  %4371 = zext i32 %4370 to i64
  store i64 %4371, i64* %RCX, align 8, !tbaa !2428
  %4372 = load i64, i64* %RCX
  %4373 = load i64, i64* %PC
  %4374 = add i64 %4373, 3
  store i64 %4374, i64* %PC
  %4375 = trunc i64 %4372 to i32
  %4376 = add i32 6, %4375
  %4377 = zext i32 %4376 to i64
  store i64 %4377, i64* %RCX, align 8, !tbaa !2428
  %4378 = icmp ult i32 %4376, %4375
  %4379 = icmp ult i32 %4376, 6
  %4380 = or i1 %4378, %4379
  %4381 = zext i1 %4380 to i8
  %4382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4381, i8* %4382, align 1, !tbaa !2432
  %4383 = and i32 %4376, 255
  %4384 = call i32 @llvm.ctpop.i32(i32 %4383) #17
  %4385 = trunc i32 %4384 to i8
  %4386 = and i8 %4385, 1
  %4387 = xor i8 %4386, 1
  %4388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4387, i8* %4388, align 1, !tbaa !2446
  %4389 = xor i64 6, %4372
  %4390 = trunc i64 %4389 to i32
  %4391 = xor i32 %4390, %4376
  %4392 = lshr i32 %4391, 4
  %4393 = trunc i32 %4392 to i8
  %4394 = and i8 %4393, 1
  %4395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4394, i8* %4395, align 1, !tbaa !2447
  %4396 = icmp eq i32 %4376, 0
  %4397 = zext i1 %4396 to i8
  %4398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4397, i8* %4398, align 1, !tbaa !2448
  %4399 = lshr i32 %4376, 31
  %4400 = trunc i32 %4399 to i8
  %4401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4400, i8* %4401, align 1, !tbaa !2449
  %4402 = lshr i32 %4375, 31
  %4403 = xor i32 %4399, %4402
  %4404 = add nuw nsw i32 %4403, %4399
  %4405 = icmp eq i32 %4404, 2
  %4406 = zext i1 %4405 to i8
  %4407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4406, i8* %4407, align 1, !tbaa !2450
  %4408 = load i32, i32* %ECX
  %4409 = zext i32 %4408 to i64
  %4410 = load i64, i64* %PC
  %4411 = add i64 %4410, 3
  store i64 %4411, i64* %PC
  %4412 = shl i64 %4409, 32
  %4413 = ashr exact i64 %4412, 32
  store i64 %4413, i64* %RSI, align 8, !tbaa !2428
  %4414 = load i64, i64* %RDX
  %4415 = load i64, i64* %RSI
  %4416 = mul i64 %4415, 8
  %4417 = add i64 %4416, %4414
  %4418 = bitcast %union.vec128_t* %XMM1 to i8*
  %4419 = load i64, i64* %PC
  %4420 = add i64 %4419, 5
  store i64 %4420, i64* %PC
  %4421 = bitcast i8* %4418 to double*
  %4422 = load double, double* %4421, align 1
  %4423 = inttoptr i64 %4417 to double*
  store double %4422, double* %4423
  %4424 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4425 = load i64, i64* %RBP
  %4426 = sub i64 %4425, 80
  %4427 = load i64, i64* %PC
  %4428 = add i64 %4427, 5
  store i64 %4428, i64* %PC
  %4429 = inttoptr i64 %4426 to double*
  %4430 = load double, double* %4429
  %4431 = bitcast i8* %4424 to double*
  store double %4430, double* %4431, align 1, !tbaa !2452
  %4432 = getelementptr inbounds i8, i8* %4424, i64 8
  %4433 = bitcast i8* %4432 to double*
  store double 0.000000e+00, double* %4433, align 1, !tbaa !2452
  %4434 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4435 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4436 = load i64, i64* %RBP
  %4437 = sub i64 %4436, 104
  %4438 = load i64, i64* %PC
  %4439 = add i64 %4438, 5
  store i64 %4439, i64* %PC
  %4440 = bitcast i8* %4435 to double*
  %4441 = load double, double* %4440, align 1
  %4442 = getelementptr inbounds i8, i8* %4435, i64 8
  %4443 = bitcast i8* %4442 to i64*
  %4444 = load i64, i64* %4443, align 1
  %4445 = inttoptr i64 %4437 to double*
  %4446 = load double, double* %4445
  %4447 = fmul double %4441, %4446
  %4448 = bitcast i8* %4434 to double*
  store double %4447, double* %4448, align 1, !tbaa !2452
  %4449 = getelementptr inbounds i8, i8* %4434, i64 8
  %4450 = bitcast i8* %4449 to i64*
  store i64 %4444, i64* %4450, align 1, !tbaa !2452
  %4451 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4452 = load i64, i64* %RBP
  %4453 = sub i64 %4452, 88
  %4454 = load i64, i64* %PC
  %4455 = add i64 %4454, 5
  store i64 %4455, i64* %PC
  %4456 = inttoptr i64 %4453 to double*
  %4457 = load double, double* %4456
  %4458 = bitcast i8* %4451 to double*
  store double %4457, double* %4458, align 1, !tbaa !2452
  %4459 = getelementptr inbounds i8, i8* %4451, i64 8
  %4460 = bitcast i8* %4459 to double*
  store double 0.000000e+00, double* %4460, align 1, !tbaa !2452
  %4461 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4462 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4463 = load i64, i64* %RBP
  %4464 = sub i64 %4463, 96
  %4465 = load i64, i64* %PC
  %4466 = add i64 %4465, 5
  store i64 %4466, i64* %PC
  %4467 = bitcast i8* %4462 to double*
  %4468 = load double, double* %4467, align 1
  %4469 = getelementptr inbounds i8, i8* %4462, i64 8
  %4470 = bitcast i8* %4469 to i64*
  %4471 = load i64, i64* %4470, align 1
  %4472 = inttoptr i64 %4464 to double*
  %4473 = load double, double* %4472
  %4474 = fmul double %4468, %4473
  %4475 = bitcast i8* %4461 to double*
  store double %4474, double* %4475, align 1, !tbaa !2452
  %4476 = getelementptr inbounds i8, i8* %4461, i64 8
  %4477 = bitcast i8* %4476 to i64*
  store i64 %4471, i64* %4477, align 1, !tbaa !2452
  %4478 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4479 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4480 = bitcast %union.vec128_t* %XMM2 to i8*
  %4481 = load i64, i64* %PC
  %4482 = add i64 %4481, 4
  store i64 %4482, i64* %PC
  %4483 = bitcast i8* %4479 to double*
  %4484 = load double, double* %4483, align 1
  %4485 = getelementptr inbounds i8, i8* %4479, i64 8
  %4486 = bitcast i8* %4485 to i64*
  %4487 = load i64, i64* %4486, align 1
  %4488 = bitcast i8* %4480 to double*
  %4489 = load double, double* %4488, align 1
  %4490 = fadd double %4484, %4489
  %4491 = bitcast i8* %4478 to double*
  store double %4490, double* %4491, align 1, !tbaa !2452
  %4492 = getelementptr inbounds i8, i8* %4478, i64 8
  %4493 = bitcast i8* %4492 to i64*
  store i64 %4487, i64* %4493, align 1, !tbaa !2452
  %4494 = load i64, i64* %RBP
  %4495 = sub i64 %4494, 16
  %4496 = load i64, i64* %PC
  %4497 = add i64 %4496, 4
  store i64 %4497, i64* %PC
  %4498 = inttoptr i64 %4495 to i64*
  %4499 = load i64, i64* %4498
  store i64 %4499, i64* %RDX, align 8, !tbaa !2428
  %4500 = load i64, i64* %RBP
  %4501 = sub i64 %4500, 28
  %4502 = load i64, i64* %PC
  %4503 = add i64 %4502, 3
  store i64 %4503, i64* %PC
  %4504 = inttoptr i64 %4501 to i32*
  %4505 = load i32, i32* %4504
  %4506 = zext i32 %4505 to i64
  store i64 %4506, i64* %RCX, align 8, !tbaa !2428
  %4507 = load i64, i64* %RCX
  %4508 = load i64, i64* %PC
  %4509 = add i64 %4508, 3
  store i64 %4509, i64* %PC
  %4510 = trunc i64 %4507 to i32
  %4511 = add i32 7, %4510
  %4512 = zext i32 %4511 to i64
  store i64 %4512, i64* %RCX, align 8, !tbaa !2428
  %4513 = icmp ult i32 %4511, %4510
  %4514 = icmp ult i32 %4511, 7
  %4515 = or i1 %4513, %4514
  %4516 = zext i1 %4515 to i8
  %4517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4516, i8* %4517, align 1, !tbaa !2432
  %4518 = and i32 %4511, 255
  %4519 = call i32 @llvm.ctpop.i32(i32 %4518) #17
  %4520 = trunc i32 %4519 to i8
  %4521 = and i8 %4520, 1
  %4522 = xor i8 %4521, 1
  %4523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4522, i8* %4523, align 1, !tbaa !2446
  %4524 = xor i64 7, %4507
  %4525 = trunc i64 %4524 to i32
  %4526 = xor i32 %4525, %4511
  %4527 = lshr i32 %4526, 4
  %4528 = trunc i32 %4527 to i8
  %4529 = and i8 %4528, 1
  %4530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4529, i8* %4530, align 1, !tbaa !2447
  %4531 = icmp eq i32 %4511, 0
  %4532 = zext i1 %4531 to i8
  %4533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4532, i8* %4533, align 1, !tbaa !2448
  %4534 = lshr i32 %4511, 31
  %4535 = trunc i32 %4534 to i8
  %4536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4535, i8* %4536, align 1, !tbaa !2449
  %4537 = lshr i32 %4510, 31
  %4538 = xor i32 %4534, %4537
  %4539 = add nuw nsw i32 %4538, %4534
  %4540 = icmp eq i32 %4539, 2
  %4541 = zext i1 %4540 to i8
  %4542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4541, i8* %4542, align 1, !tbaa !2450
  %4543 = load i32, i32* %ECX
  %4544 = zext i32 %4543 to i64
  %4545 = load i64, i64* %PC
  %4546 = add i64 %4545, 3
  store i64 %4546, i64* %PC
  %4547 = shl i64 %4544, 32
  %4548 = ashr exact i64 %4547, 32
  store i64 %4548, i64* %RSI, align 8, !tbaa !2428
  %4549 = load i64, i64* %RDX
  %4550 = load i64, i64* %RSI
  %4551 = mul i64 %4550, 8
  %4552 = add i64 %4551, %4549
  %4553 = bitcast %union.vec128_t* %XMM1 to i8*
  %4554 = load i64, i64* %PC
  %4555 = add i64 %4554, 5
  store i64 %4555, i64* %PC
  %4556 = bitcast i8* %4553 to double*
  %4557 = load double, double* %4556, align 1
  %4558 = inttoptr i64 %4552 to double*
  store double %4557, double* %4558
  %4559 = load i64, i64* %RBP
  %4560 = sub i64 %4559, 24
  %4561 = load i64, i64* %PC
  %4562 = add i64 %4561, 4
  store i64 %4562, i64* %PC
  %4563 = inttoptr i64 %4560 to i64*
  %4564 = load i64, i64* %4563
  store i64 %4564, i64* %RDX, align 8, !tbaa !2428
  %4565 = load i64, i64* %RBP
  %4566 = sub i64 %4565, 36
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 3
  store i64 %4568, i64* %PC
  %4569 = inttoptr i64 %4566 to i32*
  %4570 = load i32, i32* %4569
  %4571 = zext i32 %4570 to i64
  store i64 %4571, i64* %RCX, align 8, !tbaa !2428
  %4572 = load i64, i64* %RCX
  %4573 = load i64, i64* %PC
  %4574 = add i64 %4573, 3
  store i64 %4574, i64* %PC
  %4575 = trunc i64 %4572 to i32
  %4576 = add i32 2, %4575
  %4577 = zext i32 %4576 to i64
  store i64 %4577, i64* %RCX, align 8, !tbaa !2428
  %4578 = icmp ult i32 %4576, %4575
  %4579 = icmp ult i32 %4576, 2
  %4580 = or i1 %4578, %4579
  %4581 = zext i1 %4580 to i8
  %4582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4581, i8* %4582, align 1, !tbaa !2432
  %4583 = and i32 %4576, 255
  %4584 = call i32 @llvm.ctpop.i32(i32 %4583) #17
  %4585 = trunc i32 %4584 to i8
  %4586 = and i8 %4585, 1
  %4587 = xor i8 %4586, 1
  %4588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4587, i8* %4588, align 1, !tbaa !2446
  %4589 = xor i64 2, %4572
  %4590 = trunc i64 %4589 to i32
  %4591 = xor i32 %4590, %4576
  %4592 = lshr i32 %4591, 4
  %4593 = trunc i32 %4592 to i8
  %4594 = and i8 %4593, 1
  %4595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4594, i8* %4595, align 1, !tbaa !2447
  %4596 = icmp eq i32 %4576, 0
  %4597 = zext i1 %4596 to i8
  %4598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4597, i8* %4598, align 1, !tbaa !2448
  %4599 = lshr i32 %4576, 31
  %4600 = trunc i32 %4599 to i8
  %4601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4600, i8* %4601, align 1, !tbaa !2449
  %4602 = lshr i32 %4575, 31
  %4603 = xor i32 %4599, %4602
  %4604 = add nuw nsw i32 %4603, %4599
  %4605 = icmp eq i32 %4604, 2
  %4606 = zext i1 %4605 to i8
  %4607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4606, i8* %4607, align 1, !tbaa !2450
  %4608 = load i32, i32* %ECX
  %4609 = zext i32 %4608 to i64
  %4610 = load i64, i64* %PC
  %4611 = add i64 %4610, 3
  store i64 %4611, i64* %PC
  %4612 = shl i64 %4609, 32
  %4613 = ashr exact i64 %4612, 32
  store i64 %4613, i64* %RSI, align 8, !tbaa !2428
  %4614 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4615 = load i64, i64* %RDX
  %4616 = load i64, i64* %RSI
  %4617 = mul i64 %4616, 8
  %4618 = add i64 %4617, %4615
  %4619 = load i64, i64* %PC
  %4620 = add i64 %4619, 5
  store i64 %4620, i64* %PC
  %4621 = inttoptr i64 %4618 to double*
  %4622 = load double, double* %4621
  %4623 = bitcast i8* %4614 to double*
  store double %4622, double* %4623, align 1, !tbaa !2452
  %4624 = getelementptr inbounds i8, i8* %4614, i64 8
  %4625 = bitcast i8* %4624 to double*
  store double 0.000000e+00, double* %4625, align 1, !tbaa !2452
  %4626 = load i64, i64* %RBP
  %4627 = sub i64 %4626, 48
  %4628 = bitcast %union.vec128_t* %XMM1 to i8*
  %4629 = load i64, i64* %PC
  %4630 = add i64 %4629, 5
  store i64 %4630, i64* %PC
  %4631 = bitcast i8* %4628 to double*
  %4632 = load double, double* %4631, align 1
  %4633 = inttoptr i64 %4627 to double*
  store double %4632, double* %4633
  %4634 = load i64, i64* %RBP
  %4635 = sub i64 %4634, 24
  %4636 = load i64, i64* %PC
  %4637 = add i64 %4636, 4
  store i64 %4637, i64* %PC
  %4638 = inttoptr i64 %4635 to i64*
  %4639 = load i64, i64* %4638
  store i64 %4639, i64* %RDX, align 8, !tbaa !2428
  %4640 = load i64, i64* %RBP
  %4641 = sub i64 %4640, 36
  %4642 = load i64, i64* %PC
  %4643 = add i64 %4642, 3
  store i64 %4643, i64* %PC
  %4644 = inttoptr i64 %4641 to i32*
  %4645 = load i32, i32* %4644
  %4646 = zext i32 %4645 to i64
  store i64 %4646, i64* %RCX, align 8, !tbaa !2428
  %4647 = load i64, i64* %RCX
  %4648 = load i64, i64* %PC
  %4649 = add i64 %4648, 3
  store i64 %4649, i64* %PC
  %4650 = trunc i64 %4647 to i32
  %4651 = add i32 3, %4650
  %4652 = zext i32 %4651 to i64
  store i64 %4652, i64* %RCX, align 8, !tbaa !2428
  %4653 = icmp ult i32 %4651, %4650
  %4654 = icmp ult i32 %4651, 3
  %4655 = or i1 %4653, %4654
  %4656 = zext i1 %4655 to i8
  %4657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4656, i8* %4657, align 1, !tbaa !2432
  %4658 = and i32 %4651, 255
  %4659 = call i32 @llvm.ctpop.i32(i32 %4658) #17
  %4660 = trunc i32 %4659 to i8
  %4661 = and i8 %4660, 1
  %4662 = xor i8 %4661, 1
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4662, i8* %4663, align 1, !tbaa !2446
  %4664 = xor i64 3, %4647
  %4665 = trunc i64 %4664 to i32
  %4666 = xor i32 %4665, %4651
  %4667 = lshr i32 %4666, 4
  %4668 = trunc i32 %4667 to i8
  %4669 = and i8 %4668, 1
  %4670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4669, i8* %4670, align 1, !tbaa !2447
  %4671 = icmp eq i32 %4651, 0
  %4672 = zext i1 %4671 to i8
  %4673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4672, i8* %4673, align 1, !tbaa !2448
  %4674 = lshr i32 %4651, 31
  %4675 = trunc i32 %4674 to i8
  %4676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4675, i8* %4676, align 1, !tbaa !2449
  %4677 = lshr i32 %4650, 31
  %4678 = xor i32 %4674, %4677
  %4679 = add nuw nsw i32 %4678, %4674
  %4680 = icmp eq i32 %4679, 2
  %4681 = zext i1 %4680 to i8
  %4682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4681, i8* %4682, align 1, !tbaa !2450
  %4683 = load i32, i32* %ECX
  %4684 = zext i32 %4683 to i64
  %4685 = load i64, i64* %PC
  %4686 = add i64 %4685, 3
  store i64 %4686, i64* %PC
  %4687 = shl i64 %4684, 32
  %4688 = ashr exact i64 %4687, 32
  store i64 %4688, i64* %RSI, align 8, !tbaa !2428
  %4689 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4690 = load i64, i64* %RDX
  %4691 = load i64, i64* %RSI
  %4692 = mul i64 %4691, 8
  %4693 = add i64 %4692, %4690
  %4694 = load i64, i64* %PC
  %4695 = add i64 %4694, 5
  store i64 %4695, i64* %PC
  %4696 = inttoptr i64 %4693 to double*
  %4697 = load double, double* %4696
  %4698 = bitcast i8* %4689 to double*
  store double %4697, double* %4698, align 1, !tbaa !2452
  %4699 = getelementptr inbounds i8, i8* %4689, i64 8
  %4700 = bitcast i8* %4699 to double*
  store double 0.000000e+00, double* %4700, align 1, !tbaa !2452
  %4701 = load i64, i64* %RBP
  %4702 = sub i64 %4701, 56
  %4703 = bitcast %union.vec128_t* %XMM1 to i8*
  %4704 = load i64, i64* %PC
  %4705 = add i64 %4704, 5
  store i64 %4705, i64* %PC
  %4706 = bitcast i8* %4703 to double*
  %4707 = load double, double* %4706, align 1
  %4708 = inttoptr i64 %4702 to double*
  store double %4707, double* %4708
  %4709 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4710 = load i64, i64* %RBP
  %4711 = sub i64 %4710, 48
  %4712 = load i64, i64* %PC
  %4713 = add i64 %4712, 5
  store i64 %4713, i64* %PC
  %4714 = inttoptr i64 %4711 to double*
  %4715 = load double, double* %4714
  %4716 = bitcast i8* %4709 to double*
  store double %4715, double* %4716, align 1, !tbaa !2452
  %4717 = getelementptr inbounds i8, i8* %4709, i64 8
  %4718 = bitcast i8* %4717 to double*
  store double 0.000000e+00, double* %4718, align 1, !tbaa !2452
  %4719 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4720 = bitcast %union.vec128_t* %XMM0 to i8*
  %4721 = load i64, i64* %PC
  %4722 = add i64 %4721, 3
  store i64 %4722, i64* %PC
  %4723 = bitcast i8* %4720 to <2 x i32>*
  %4724 = load <2 x i32>, <2 x i32>* %4723, align 1
  %4725 = getelementptr inbounds i8, i8* %4720, i64 8
  %4726 = bitcast i8* %4725 to <2 x i32>*
  %4727 = load <2 x i32>, <2 x i32>* %4726, align 1
  %4728 = extractelement <2 x i32> %4724, i32 0
  %4729 = bitcast i8* %4719 to i32*
  store i32 %4728, i32* %4729, align 1, !tbaa !2455
  %4730 = extractelement <2 x i32> %4724, i32 1
  %4731 = getelementptr inbounds i8, i8* %4719, i64 4
  %4732 = bitcast i8* %4731 to i32*
  store i32 %4730, i32* %4732, align 1, !tbaa !2455
  %4733 = extractelement <2 x i32> %4727, i32 0
  %4734 = getelementptr inbounds i8, i8* %4719, i64 8
  %4735 = bitcast i8* %4734 to i32*
  store i32 %4733, i32* %4735, align 1, !tbaa !2455
  %4736 = extractelement <2 x i32> %4727, i32 1
  %4737 = getelementptr inbounds i8, i8* %4719, i64 12
  %4738 = bitcast i8* %4737 to i32*
  store i32 %4736, i32* %4738, align 1, !tbaa !2455
  %4739 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4740 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4741 = load i64, i64* %RBP
  %4742 = sub i64 %4741, 64
  %4743 = load i64, i64* %PC
  %4744 = add i64 %4743, 5
  store i64 %4744, i64* %PC
  %4745 = bitcast i8* %4740 to double*
  %4746 = load double, double* %4745, align 1
  %4747 = getelementptr inbounds i8, i8* %4740, i64 8
  %4748 = bitcast i8* %4747 to i64*
  %4749 = load i64, i64* %4748, align 1
  %4750 = inttoptr i64 %4742 to double*
  %4751 = load double, double* %4750
  %4752 = fmul double %4746, %4751
  %4753 = bitcast i8* %4739 to double*
  store double %4752, double* %4753, align 1, !tbaa !2452
  %4754 = getelementptr inbounds i8, i8* %4739, i64 8
  %4755 = bitcast i8* %4754 to i64*
  store i64 %4749, i64* %4755, align 1, !tbaa !2452
  %4756 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4757 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4758 = load i64, i64* %RBP
  %4759 = sub i64 %4758, 56
  %4760 = load i64, i64* %PC
  %4761 = add i64 %4760, 5
  store i64 %4761, i64* %PC
  %4762 = bitcast i8* %4757 to double*
  %4763 = load double, double* %4762, align 1
  %4764 = getelementptr inbounds i8, i8* %4757, i64 8
  %4765 = bitcast i8* %4764 to i64*
  %4766 = load i64, i64* %4765, align 1
  %4767 = inttoptr i64 %4759 to double*
  %4768 = load double, double* %4767
  %4769 = fmul double %4763, %4768
  %4770 = bitcast i8* %4756 to double*
  store double %4769, double* %4770, align 1, !tbaa !2452
  %4771 = getelementptr inbounds i8, i8* %4756, i64 8
  %4772 = bitcast i8* %4771 to i64*
  store i64 %4766, i64* %4772, align 1, !tbaa !2452
  %4773 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4774 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4775 = bitcast %union.vec128_t* %XMM2 to i8*
  %4776 = load i64, i64* %PC
  %4777 = add i64 %4776, 4
  store i64 %4777, i64* %PC
  %4778 = bitcast i8* %4774 to double*
  %4779 = load double, double* %4778, align 1
  %4780 = getelementptr inbounds i8, i8* %4774, i64 8
  %4781 = bitcast i8* %4780 to i64*
  %4782 = load i64, i64* %4781, align 1
  %4783 = bitcast i8* %4775 to double*
  %4784 = load double, double* %4783, align 1
  %4785 = fsub double %4779, %4784
  %4786 = bitcast i8* %4773 to double*
  store double %4785, double* %4786, align 1, !tbaa !2452
  %4787 = getelementptr inbounds i8, i8* %4773, i64 8
  %4788 = bitcast i8* %4787 to i64*
  store i64 %4782, i64* %4788, align 1, !tbaa !2452
  %4789 = load i64, i64* %RBP
  %4790 = sub i64 %4789, 80
  %4791 = bitcast %union.vec128_t* %XMM1 to i8*
  %4792 = load i64, i64* %PC
  %4793 = add i64 %4792, 5
  store i64 %4793, i64* %PC
  %4794 = bitcast i8* %4791 to double*
  %4795 = load double, double* %4794, align 1
  %4796 = inttoptr i64 %4790 to double*
  store double %4795, double* %4796
  %4797 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4798 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4799 = load i64, i64* %RBP
  %4800 = sub i64 %4799, 64
  %4801 = load i64, i64* %PC
  %4802 = add i64 %4801, 5
  store i64 %4802, i64* %PC
  %4803 = bitcast i8* %4798 to double*
  %4804 = load double, double* %4803, align 1
  %4805 = getelementptr inbounds i8, i8* %4798, i64 8
  %4806 = bitcast i8* %4805 to i64*
  %4807 = load i64, i64* %4806, align 1
  %4808 = inttoptr i64 %4800 to double*
  %4809 = load double, double* %4808
  %4810 = fmul double %4804, %4809
  %4811 = bitcast i8* %4797 to double*
  store double %4810, double* %4811, align 1, !tbaa !2452
  %4812 = getelementptr inbounds i8, i8* %4797, i64 8
  %4813 = bitcast i8* %4812 to i64*
  store i64 %4807, i64* %4813, align 1, !tbaa !2452
  %4814 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4816 = load i64, i64* %RBP
  %4817 = sub i64 %4816, 48
  %4818 = load i64, i64* %PC
  %4819 = add i64 %4818, 5
  store i64 %4819, i64* %PC
  %4820 = bitcast i8* %4815 to double*
  %4821 = load double, double* %4820, align 1
  %4822 = getelementptr inbounds i8, i8* %4815, i64 8
  %4823 = bitcast i8* %4822 to i64*
  %4824 = load i64, i64* %4823, align 1
  %4825 = inttoptr i64 %4817 to double*
  %4826 = load double, double* %4825
  %4827 = fmul double %4821, %4826
  %4828 = bitcast i8* %4814 to double*
  store double %4827, double* %4828, align 1, !tbaa !2452
  %4829 = getelementptr inbounds i8, i8* %4814, i64 8
  %4830 = bitcast i8* %4829 to i64*
  store i64 %4824, i64* %4830, align 1, !tbaa !2452
  %4831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4833 = load i64, i64* %RBP
  %4834 = sub i64 %4833, 56
  %4835 = load i64, i64* %PC
  %4836 = add i64 %4835, 5
  store i64 %4836, i64* %PC
  %4837 = bitcast i8* %4832 to double*
  %4838 = load double, double* %4837, align 1
  %4839 = getelementptr inbounds i8, i8* %4832, i64 8
  %4840 = bitcast i8* %4839 to i64*
  %4841 = load i64, i64* %4840, align 1
  %4842 = inttoptr i64 %4834 to double*
  %4843 = load double, double* %4842
  %4844 = fsub double %4838, %4843
  %4845 = bitcast i8* %4831 to double*
  store double %4844, double* %4845, align 1, !tbaa !2452
  %4846 = getelementptr inbounds i8, i8* %4831, i64 8
  %4847 = bitcast i8* %4846 to i64*
  store i64 %4841, i64* %4847, align 1, !tbaa !2452
  %4848 = load i64, i64* %RBP
  %4849 = sub i64 %4848, 88
  %4850 = bitcast %union.vec128_t* %XMM0 to i8*
  %4851 = load i64, i64* %PC
  %4852 = add i64 %4851, 5
  store i64 %4852, i64* %PC
  %4853 = bitcast i8* %4850 to double*
  %4854 = load double, double* %4853, align 1
  %4855 = inttoptr i64 %4849 to double*
  store double %4854, double* %4855
  %4856 = load i64, i64* %RBP
  %4857 = sub i64 %4856, 16
  %4858 = load i64, i64* %PC
  %4859 = add i64 %4858, 4
  store i64 %4859, i64* %PC
  %4860 = inttoptr i64 %4857 to i64*
  %4861 = load i64, i64* %4860
  store i64 %4861, i64* %RDX, align 8, !tbaa !2428
  %4862 = load i64, i64* %RBP
  %4863 = sub i64 %4862, 28
  %4864 = load i64, i64* %PC
  %4865 = add i64 %4864, 3
  store i64 %4865, i64* %PC
  %4866 = inttoptr i64 %4863 to i32*
  %4867 = load i32, i32* %4866
  %4868 = zext i32 %4867 to i64
  store i64 %4868, i64* %RCX, align 8, !tbaa !2428
  %4869 = load i64, i64* %RCX
  %4870 = load i64, i64* %PC
  %4871 = add i64 %4870, 3
  store i64 %4871, i64* %PC
  %4872 = trunc i64 %4869 to i32
  %4873 = add i32 8, %4872
  %4874 = zext i32 %4873 to i64
  store i64 %4874, i64* %RCX, align 8, !tbaa !2428
  %4875 = icmp ult i32 %4873, %4872
  %4876 = icmp ult i32 %4873, 8
  %4877 = or i1 %4875, %4876
  %4878 = zext i1 %4877 to i8
  %4879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4878, i8* %4879, align 1, !tbaa !2432
  %4880 = and i32 %4873, 255
  %4881 = call i32 @llvm.ctpop.i32(i32 %4880) #17
  %4882 = trunc i32 %4881 to i8
  %4883 = and i8 %4882, 1
  %4884 = xor i8 %4883, 1
  %4885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4884, i8* %4885, align 1, !tbaa !2446
  %4886 = xor i64 8, %4869
  %4887 = trunc i64 %4886 to i32
  %4888 = xor i32 %4887, %4873
  %4889 = lshr i32 %4888, 4
  %4890 = trunc i32 %4889 to i8
  %4891 = and i8 %4890, 1
  %4892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4891, i8* %4892, align 1, !tbaa !2447
  %4893 = icmp eq i32 %4873, 0
  %4894 = zext i1 %4893 to i8
  %4895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4894, i8* %4895, align 1, !tbaa !2448
  %4896 = lshr i32 %4873, 31
  %4897 = trunc i32 %4896 to i8
  %4898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4897, i8* %4898, align 1, !tbaa !2449
  %4899 = lshr i32 %4872, 31
  %4900 = xor i32 %4896, %4899
  %4901 = add nuw nsw i32 %4900, %4896
  %4902 = icmp eq i32 %4901, 2
  %4903 = zext i1 %4902 to i8
  %4904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4903, i8* %4904, align 1, !tbaa !2450
  %4905 = load i32, i32* %ECX
  %4906 = zext i32 %4905 to i64
  %4907 = load i64, i64* %PC
  %4908 = add i64 %4907, 3
  store i64 %4908, i64* %PC
  %4909 = shl i64 %4906, 32
  %4910 = ashr exact i64 %4909, 32
  store i64 %4910, i64* %RSI, align 8, !tbaa !2428
  %4911 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4912 = load i64, i64* %RDX
  %4913 = load i64, i64* %RSI
  %4914 = mul i64 %4913, 8
  %4915 = add i64 %4914, %4912
  %4916 = load i64, i64* %PC
  %4917 = add i64 %4916, 5
  store i64 %4917, i64* %PC
  %4918 = inttoptr i64 %4915 to double*
  %4919 = load double, double* %4918
  %4920 = bitcast i8* %4911 to double*
  store double %4919, double* %4920, align 1, !tbaa !2452
  %4921 = getelementptr inbounds i8, i8* %4911, i64 8
  %4922 = bitcast i8* %4921 to double*
  store double 0.000000e+00, double* %4922, align 1, !tbaa !2452
  %4923 = load i64, i64* %RBP
  %4924 = sub i64 %4923, 16
  %4925 = load i64, i64* %PC
  %4926 = add i64 %4925, 4
  store i64 %4926, i64* %PC
  %4927 = inttoptr i64 %4924 to i64*
  %4928 = load i64, i64* %4927
  store i64 %4928, i64* %RDX, align 8, !tbaa !2428
  %4929 = load i64, i64* %RBP
  %4930 = sub i64 %4929, 28
  %4931 = load i64, i64* %PC
  %4932 = add i64 %4931, 3
  store i64 %4932, i64* %PC
  %4933 = inttoptr i64 %4930 to i32*
  %4934 = load i32, i32* %4933
  %4935 = zext i32 %4934 to i64
  store i64 %4935, i64* %RCX, align 8, !tbaa !2428
  %4936 = load i64, i64* %RCX
  %4937 = load i64, i64* %PC
  %4938 = add i64 %4937, 3
  store i64 %4938, i64* %PC
  %4939 = trunc i64 %4936 to i32
  %4940 = add i32 10, %4939
  %4941 = zext i32 %4940 to i64
  store i64 %4941, i64* %RCX, align 8, !tbaa !2428
  %4942 = icmp ult i32 %4940, %4939
  %4943 = icmp ult i32 %4940, 10
  %4944 = or i1 %4942, %4943
  %4945 = zext i1 %4944 to i8
  %4946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4945, i8* %4946, align 1, !tbaa !2432
  %4947 = and i32 %4940, 255
  %4948 = call i32 @llvm.ctpop.i32(i32 %4947) #17
  %4949 = trunc i32 %4948 to i8
  %4950 = and i8 %4949, 1
  %4951 = xor i8 %4950, 1
  %4952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4951, i8* %4952, align 1, !tbaa !2446
  %4953 = xor i64 10, %4936
  %4954 = trunc i64 %4953 to i32
  %4955 = xor i32 %4954, %4940
  %4956 = lshr i32 %4955, 4
  %4957 = trunc i32 %4956 to i8
  %4958 = and i8 %4957, 1
  %4959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4958, i8* %4959, align 1, !tbaa !2447
  %4960 = icmp eq i32 %4940, 0
  %4961 = zext i1 %4960 to i8
  %4962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4961, i8* %4962, align 1, !tbaa !2448
  %4963 = lshr i32 %4940, 31
  %4964 = trunc i32 %4963 to i8
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4964, i8* %4965, align 1, !tbaa !2449
  %4966 = lshr i32 %4939, 31
  %4967 = xor i32 %4963, %4966
  %4968 = add nuw nsw i32 %4967, %4963
  %4969 = icmp eq i32 %4968, 2
  %4970 = zext i1 %4969 to i8
  %4971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4970, i8* %4971, align 1, !tbaa !2450
  %4972 = load i32, i32* %ECX
  %4973 = zext i32 %4972 to i64
  %4974 = load i64, i64* %PC
  %4975 = add i64 %4974, 3
  store i64 %4975, i64* %PC
  %4976 = shl i64 %4973, 32
  %4977 = ashr exact i64 %4976, 32
  store i64 %4977, i64* %RSI, align 8, !tbaa !2428
  %4978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4979 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4980 = load i64, i64* %RDX
  %4981 = load i64, i64* %RSI
  %4982 = mul i64 %4981, 8
  %4983 = add i64 %4982, %4980
  %4984 = load i64, i64* %PC
  %4985 = add i64 %4984, 5
  store i64 %4985, i64* %PC
  %4986 = bitcast i8* %4979 to double*
  %4987 = load double, double* %4986, align 1
  %4988 = getelementptr inbounds i8, i8* %4979, i64 8
  %4989 = bitcast i8* %4988 to i64*
  %4990 = load i64, i64* %4989, align 1
  %4991 = inttoptr i64 %4983 to double*
  %4992 = load double, double* %4991
  %4993 = fadd double %4987, %4992
  %4994 = bitcast i8* %4978 to double*
  store double %4993, double* %4994, align 1, !tbaa !2452
  %4995 = getelementptr inbounds i8, i8* %4978, i64 8
  %4996 = bitcast i8* %4995 to i64*
  store i64 %4990, i64* %4996, align 1, !tbaa !2452
  %4997 = load i64, i64* %RBP
  %4998 = sub i64 %4997, 96
  %4999 = bitcast %union.vec128_t* %XMM0 to i8*
  %5000 = load i64, i64* %PC
  %5001 = add i64 %5000, 5
  store i64 %5001, i64* %PC
  %5002 = bitcast i8* %4999 to double*
  %5003 = load double, double* %5002, align 1
  %5004 = inttoptr i64 %4998 to double*
  store double %5003, double* %5004
  %5005 = load i64, i64* %RBP
  %5006 = sub i64 %5005, 16
  %5007 = load i64, i64* %PC
  %5008 = add i64 %5007, 4
  store i64 %5008, i64* %PC
  %5009 = inttoptr i64 %5006 to i64*
  %5010 = load i64, i64* %5009
  store i64 %5010, i64* %RDX, align 8, !tbaa !2428
  %5011 = load i64, i64* %RBP
  %5012 = sub i64 %5011, 28
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 3
  store i64 %5014, i64* %PC
  %5015 = inttoptr i64 %5012 to i32*
  %5016 = load i32, i32* %5015
  %5017 = zext i32 %5016 to i64
  store i64 %5017, i64* %RCX, align 8, !tbaa !2428
  %5018 = load i64, i64* %RCX
  %5019 = load i64, i64* %PC
  %5020 = add i64 %5019, 3
  store i64 %5020, i64* %PC
  %5021 = trunc i64 %5018 to i32
  %5022 = add i32 9, %5021
  %5023 = zext i32 %5022 to i64
  store i64 %5023, i64* %RCX, align 8, !tbaa !2428
  %5024 = icmp ult i32 %5022, %5021
  %5025 = icmp ult i32 %5022, 9
  %5026 = or i1 %5024, %5025
  %5027 = zext i1 %5026 to i8
  %5028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5027, i8* %5028, align 1, !tbaa !2432
  %5029 = and i32 %5022, 255
  %5030 = call i32 @llvm.ctpop.i32(i32 %5029) #17
  %5031 = trunc i32 %5030 to i8
  %5032 = and i8 %5031, 1
  %5033 = xor i8 %5032, 1
  %5034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5033, i8* %5034, align 1, !tbaa !2446
  %5035 = xor i64 9, %5018
  %5036 = trunc i64 %5035 to i32
  %5037 = xor i32 %5036, %5022
  %5038 = lshr i32 %5037, 4
  %5039 = trunc i32 %5038 to i8
  %5040 = and i8 %5039, 1
  %5041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5040, i8* %5041, align 1, !tbaa !2447
  %5042 = icmp eq i32 %5022, 0
  %5043 = zext i1 %5042 to i8
  %5044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5043, i8* %5044, align 1, !tbaa !2448
  %5045 = lshr i32 %5022, 31
  %5046 = trunc i32 %5045 to i8
  %5047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5046, i8* %5047, align 1, !tbaa !2449
  %5048 = lshr i32 %5021, 31
  %5049 = xor i32 %5045, %5048
  %5050 = add nuw nsw i32 %5049, %5045
  %5051 = icmp eq i32 %5050, 2
  %5052 = zext i1 %5051 to i8
  %5053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5052, i8* %5053, align 1, !tbaa !2450
  %5054 = load i32, i32* %ECX
  %5055 = zext i32 %5054 to i64
  %5056 = load i64, i64* %PC
  %5057 = add i64 %5056, 3
  store i64 %5057, i64* %PC
  %5058 = shl i64 %5055, 32
  %5059 = ashr exact i64 %5058, 32
  store i64 %5059, i64* %RSI, align 8, !tbaa !2428
  %5060 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5061 = load i64, i64* %RDX
  %5062 = load i64, i64* %RSI
  %5063 = mul i64 %5062, 8
  %5064 = add i64 %5063, %5061
  %5065 = load i64, i64* %PC
  %5066 = add i64 %5065, 5
  store i64 %5066, i64* %PC
  %5067 = inttoptr i64 %5064 to double*
  %5068 = load double, double* %5067
  %5069 = bitcast i8* %5060 to double*
  store double %5068, double* %5069, align 1, !tbaa !2452
  %5070 = getelementptr inbounds i8, i8* %5060, i64 8
  %5071 = bitcast i8* %5070 to double*
  store double 0.000000e+00, double* %5071, align 1, !tbaa !2452
  %5072 = load i64, i64* %RBP
  %5073 = sub i64 %5072, 16
  %5074 = load i64, i64* %PC
  %5075 = add i64 %5074, 4
  store i64 %5075, i64* %PC
  %5076 = inttoptr i64 %5073 to i64*
  %5077 = load i64, i64* %5076
  store i64 %5077, i64* %RDX, align 8, !tbaa !2428
  %5078 = load i64, i64* %RBP
  %5079 = sub i64 %5078, 28
  %5080 = load i64, i64* %PC
  %5081 = add i64 %5080, 3
  store i64 %5081, i64* %PC
  %5082 = inttoptr i64 %5079 to i32*
  %5083 = load i32, i32* %5082
  %5084 = zext i32 %5083 to i64
  store i64 %5084, i64* %RCX, align 8, !tbaa !2428
  %5085 = load i64, i64* %RCX
  %5086 = load i64, i64* %PC
  %5087 = add i64 %5086, 3
  store i64 %5087, i64* %PC
  %5088 = trunc i64 %5085 to i32
  %5089 = add i32 11, %5088
  %5090 = zext i32 %5089 to i64
  store i64 %5090, i64* %RCX, align 8, !tbaa !2428
  %5091 = icmp ult i32 %5089, %5088
  %5092 = icmp ult i32 %5089, 11
  %5093 = or i1 %5091, %5092
  %5094 = zext i1 %5093 to i8
  %5095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5094, i8* %5095, align 1, !tbaa !2432
  %5096 = and i32 %5089, 255
  %5097 = call i32 @llvm.ctpop.i32(i32 %5096) #17
  %5098 = trunc i32 %5097 to i8
  %5099 = and i8 %5098, 1
  %5100 = xor i8 %5099, 1
  %5101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5100, i8* %5101, align 1, !tbaa !2446
  %5102 = xor i64 11, %5085
  %5103 = trunc i64 %5102 to i32
  %5104 = xor i32 %5103, %5089
  %5105 = lshr i32 %5104, 4
  %5106 = trunc i32 %5105 to i8
  %5107 = and i8 %5106, 1
  %5108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5107, i8* %5108, align 1, !tbaa !2447
  %5109 = icmp eq i32 %5089, 0
  %5110 = zext i1 %5109 to i8
  %5111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5110, i8* %5111, align 1, !tbaa !2448
  %5112 = lshr i32 %5089, 31
  %5113 = trunc i32 %5112 to i8
  %5114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5113, i8* %5114, align 1, !tbaa !2449
  %5115 = lshr i32 %5088, 31
  %5116 = xor i32 %5112, %5115
  %5117 = add nuw nsw i32 %5116, %5112
  %5118 = icmp eq i32 %5117, 2
  %5119 = zext i1 %5118 to i8
  %5120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5119, i8* %5120, align 1, !tbaa !2450
  %5121 = load i32, i32* %ECX
  %5122 = zext i32 %5121 to i64
  %5123 = load i64, i64* %PC
  %5124 = add i64 %5123, 3
  store i64 %5124, i64* %PC
  %5125 = shl i64 %5122, 32
  %5126 = ashr exact i64 %5125, 32
  store i64 %5126, i64* %RSI, align 8, !tbaa !2428
  %5127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5129 = load i64, i64* %RDX
  %5130 = load i64, i64* %RSI
  %5131 = mul i64 %5130, 8
  %5132 = add i64 %5131, %5129
  %5133 = load i64, i64* %PC
  %5134 = add i64 %5133, 5
  store i64 %5134, i64* %PC
  %5135 = bitcast i8* %5128 to double*
  %5136 = load double, double* %5135, align 1
  %5137 = getelementptr inbounds i8, i8* %5128, i64 8
  %5138 = bitcast i8* %5137 to i64*
  %5139 = load i64, i64* %5138, align 1
  %5140 = inttoptr i64 %5132 to double*
  %5141 = load double, double* %5140
  %5142 = fadd double %5136, %5141
  %5143 = bitcast i8* %5127 to double*
  store double %5142, double* %5143, align 1, !tbaa !2452
  %5144 = getelementptr inbounds i8, i8* %5127, i64 8
  %5145 = bitcast i8* %5144 to i64*
  store i64 %5139, i64* %5145, align 1, !tbaa !2452
  %5146 = load i64, i64* %RBP
  %5147 = sub i64 %5146, 104
  %5148 = bitcast %union.vec128_t* %XMM0 to i8*
  %5149 = load i64, i64* %PC
  %5150 = add i64 %5149, 5
  store i64 %5150, i64* %PC
  %5151 = bitcast i8* %5148 to double*
  %5152 = load double, double* %5151, align 1
  %5153 = inttoptr i64 %5147 to double*
  store double %5152, double* %5153
  %5154 = load i64, i64* %RBP
  %5155 = sub i64 %5154, 16
  %5156 = load i64, i64* %PC
  %5157 = add i64 %5156, 4
  store i64 %5157, i64* %PC
  %5158 = inttoptr i64 %5155 to i64*
  %5159 = load i64, i64* %5158
  store i64 %5159, i64* %RDX, align 8, !tbaa !2428
  %5160 = load i64, i64* %RBP
  %5161 = sub i64 %5160, 28
  %5162 = load i64, i64* %PC
  %5163 = add i64 %5162, 3
  store i64 %5163, i64* %PC
  %5164 = inttoptr i64 %5161 to i32*
  %5165 = load i32, i32* %5164
  %5166 = zext i32 %5165 to i64
  store i64 %5166, i64* %RCX, align 8, !tbaa !2428
  %5167 = load i64, i64* %RCX
  %5168 = load i64, i64* %PC
  %5169 = add i64 %5168, 3
  store i64 %5169, i64* %PC
  %5170 = trunc i64 %5167 to i32
  %5171 = add i32 8, %5170
  %5172 = zext i32 %5171 to i64
  store i64 %5172, i64* %RCX, align 8, !tbaa !2428
  %5173 = icmp ult i32 %5171, %5170
  %5174 = icmp ult i32 %5171, 8
  %5175 = or i1 %5173, %5174
  %5176 = zext i1 %5175 to i8
  %5177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5176, i8* %5177, align 1, !tbaa !2432
  %5178 = and i32 %5171, 255
  %5179 = call i32 @llvm.ctpop.i32(i32 %5178) #17
  %5180 = trunc i32 %5179 to i8
  %5181 = and i8 %5180, 1
  %5182 = xor i8 %5181, 1
  %5183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5182, i8* %5183, align 1, !tbaa !2446
  %5184 = xor i64 8, %5167
  %5185 = trunc i64 %5184 to i32
  %5186 = xor i32 %5185, %5171
  %5187 = lshr i32 %5186, 4
  %5188 = trunc i32 %5187 to i8
  %5189 = and i8 %5188, 1
  %5190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5189, i8* %5190, align 1, !tbaa !2447
  %5191 = icmp eq i32 %5171, 0
  %5192 = zext i1 %5191 to i8
  %5193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5192, i8* %5193, align 1, !tbaa !2448
  %5194 = lshr i32 %5171, 31
  %5195 = trunc i32 %5194 to i8
  %5196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5195, i8* %5196, align 1, !tbaa !2449
  %5197 = lshr i32 %5170, 31
  %5198 = xor i32 %5194, %5197
  %5199 = add nuw nsw i32 %5198, %5194
  %5200 = icmp eq i32 %5199, 2
  %5201 = zext i1 %5200 to i8
  %5202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5201, i8* %5202, align 1, !tbaa !2450
  %5203 = load i32, i32* %ECX
  %5204 = zext i32 %5203 to i64
  %5205 = load i64, i64* %PC
  %5206 = add i64 %5205, 3
  store i64 %5206, i64* %PC
  %5207 = shl i64 %5204, 32
  %5208 = ashr exact i64 %5207, 32
  store i64 %5208, i64* %RSI, align 8, !tbaa !2428
  %5209 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5210 = load i64, i64* %RDX
  %5211 = load i64, i64* %RSI
  %5212 = mul i64 %5211, 8
  %5213 = add i64 %5212, %5210
  %5214 = load i64, i64* %PC
  %5215 = add i64 %5214, 5
  store i64 %5215, i64* %PC
  %5216 = inttoptr i64 %5213 to double*
  %5217 = load double, double* %5216
  %5218 = bitcast i8* %5209 to double*
  store double %5217, double* %5218, align 1, !tbaa !2452
  %5219 = getelementptr inbounds i8, i8* %5209, i64 8
  %5220 = bitcast i8* %5219 to double*
  store double 0.000000e+00, double* %5220, align 1, !tbaa !2452
  %5221 = load i64, i64* %RBP
  %5222 = sub i64 %5221, 16
  %5223 = load i64, i64* %PC
  %5224 = add i64 %5223, 4
  store i64 %5224, i64* %PC
  %5225 = inttoptr i64 %5222 to i64*
  %5226 = load i64, i64* %5225
  store i64 %5226, i64* %RDX, align 8, !tbaa !2428
  %5227 = load i64, i64* %RBP
  %5228 = sub i64 %5227, 28
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 3
  store i64 %5230, i64* %PC
  %5231 = inttoptr i64 %5228 to i32*
  %5232 = load i32, i32* %5231
  %5233 = zext i32 %5232 to i64
  store i64 %5233, i64* %RCX, align 8, !tbaa !2428
  %5234 = load i64, i64* %RCX
  %5235 = load i64, i64* %PC
  %5236 = add i64 %5235, 3
  store i64 %5236, i64* %PC
  %5237 = trunc i64 %5234 to i32
  %5238 = add i32 10, %5237
  %5239 = zext i32 %5238 to i64
  store i64 %5239, i64* %RCX, align 8, !tbaa !2428
  %5240 = icmp ult i32 %5238, %5237
  %5241 = icmp ult i32 %5238, 10
  %5242 = or i1 %5240, %5241
  %5243 = zext i1 %5242 to i8
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5243, i8* %5244, align 1, !tbaa !2432
  %5245 = and i32 %5238, 255
  %5246 = call i32 @llvm.ctpop.i32(i32 %5245) #17
  %5247 = trunc i32 %5246 to i8
  %5248 = and i8 %5247, 1
  %5249 = xor i8 %5248, 1
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5249, i8* %5250, align 1, !tbaa !2446
  %5251 = xor i64 10, %5234
  %5252 = trunc i64 %5251 to i32
  %5253 = xor i32 %5252, %5238
  %5254 = lshr i32 %5253, 4
  %5255 = trunc i32 %5254 to i8
  %5256 = and i8 %5255, 1
  %5257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5256, i8* %5257, align 1, !tbaa !2447
  %5258 = icmp eq i32 %5238, 0
  %5259 = zext i1 %5258 to i8
  %5260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5259, i8* %5260, align 1, !tbaa !2448
  %5261 = lshr i32 %5238, 31
  %5262 = trunc i32 %5261 to i8
  %5263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5262, i8* %5263, align 1, !tbaa !2449
  %5264 = lshr i32 %5237, 31
  %5265 = xor i32 %5261, %5264
  %5266 = add nuw nsw i32 %5265, %5261
  %5267 = icmp eq i32 %5266, 2
  %5268 = zext i1 %5267 to i8
  %5269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5268, i8* %5269, align 1, !tbaa !2450
  %5270 = load i32, i32* %ECX
  %5271 = zext i32 %5270 to i64
  %5272 = load i64, i64* %PC
  %5273 = add i64 %5272, 3
  store i64 %5273, i64* %PC
  %5274 = shl i64 %5271, 32
  %5275 = ashr exact i64 %5274, 32
  store i64 %5275, i64* %RSI, align 8, !tbaa !2428
  %5276 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5277 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5278 = load i64, i64* %RDX
  %5279 = load i64, i64* %RSI
  %5280 = mul i64 %5279, 8
  %5281 = add i64 %5280, %5278
  %5282 = load i64, i64* %PC
  %5283 = add i64 %5282, 5
  store i64 %5283, i64* %PC
  %5284 = bitcast i8* %5277 to double*
  %5285 = load double, double* %5284, align 1
  %5286 = getelementptr inbounds i8, i8* %5277, i64 8
  %5287 = bitcast i8* %5286 to i64*
  %5288 = load i64, i64* %5287, align 1
  %5289 = inttoptr i64 %5281 to double*
  %5290 = load double, double* %5289
  %5291 = fsub double %5285, %5290
  %5292 = bitcast i8* %5276 to double*
  store double %5291, double* %5292, align 1, !tbaa !2452
  %5293 = getelementptr inbounds i8, i8* %5276, i64 8
  %5294 = bitcast i8* %5293 to i64*
  store i64 %5288, i64* %5294, align 1, !tbaa !2452
  %5295 = load i64, i64* %RBP
  %5296 = sub i64 %5295, 112
  %5297 = bitcast %union.vec128_t* %XMM0 to i8*
  %5298 = load i64, i64* %PC
  %5299 = add i64 %5298, 5
  store i64 %5299, i64* %PC
  %5300 = bitcast i8* %5297 to double*
  %5301 = load double, double* %5300, align 1
  %5302 = inttoptr i64 %5296 to double*
  store double %5301, double* %5302
  %5303 = load i64, i64* %RBP
  %5304 = sub i64 %5303, 16
  %5305 = load i64, i64* %PC
  %5306 = add i64 %5305, 4
  store i64 %5306, i64* %PC
  %5307 = inttoptr i64 %5304 to i64*
  %5308 = load i64, i64* %5307
  store i64 %5308, i64* %RDX, align 8, !tbaa !2428
  %5309 = load i64, i64* %RBP
  %5310 = sub i64 %5309, 28
  %5311 = load i64, i64* %PC
  %5312 = add i64 %5311, 3
  store i64 %5312, i64* %PC
  %5313 = inttoptr i64 %5310 to i32*
  %5314 = load i32, i32* %5313
  %5315 = zext i32 %5314 to i64
  store i64 %5315, i64* %RCX, align 8, !tbaa !2428
  %5316 = load i64, i64* %RCX
  %5317 = load i64, i64* %PC
  %5318 = add i64 %5317, 3
  store i64 %5318, i64* %PC
  %5319 = trunc i64 %5316 to i32
  %5320 = add i32 9, %5319
  %5321 = zext i32 %5320 to i64
  store i64 %5321, i64* %RCX, align 8, !tbaa !2428
  %5322 = icmp ult i32 %5320, %5319
  %5323 = icmp ult i32 %5320, 9
  %5324 = or i1 %5322, %5323
  %5325 = zext i1 %5324 to i8
  %5326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5325, i8* %5326, align 1, !tbaa !2432
  %5327 = and i32 %5320, 255
  %5328 = call i32 @llvm.ctpop.i32(i32 %5327) #17
  %5329 = trunc i32 %5328 to i8
  %5330 = and i8 %5329, 1
  %5331 = xor i8 %5330, 1
  %5332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5331, i8* %5332, align 1, !tbaa !2446
  %5333 = xor i64 9, %5316
  %5334 = trunc i64 %5333 to i32
  %5335 = xor i32 %5334, %5320
  %5336 = lshr i32 %5335, 4
  %5337 = trunc i32 %5336 to i8
  %5338 = and i8 %5337, 1
  %5339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5338, i8* %5339, align 1, !tbaa !2447
  %5340 = icmp eq i32 %5320, 0
  %5341 = zext i1 %5340 to i8
  %5342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5341, i8* %5342, align 1, !tbaa !2448
  %5343 = lshr i32 %5320, 31
  %5344 = trunc i32 %5343 to i8
  %5345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5344, i8* %5345, align 1, !tbaa !2449
  %5346 = lshr i32 %5319, 31
  %5347 = xor i32 %5343, %5346
  %5348 = add nuw nsw i32 %5347, %5343
  %5349 = icmp eq i32 %5348, 2
  %5350 = zext i1 %5349 to i8
  %5351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5350, i8* %5351, align 1, !tbaa !2450
  %5352 = load i32, i32* %ECX
  %5353 = zext i32 %5352 to i64
  %5354 = load i64, i64* %PC
  %5355 = add i64 %5354, 3
  store i64 %5355, i64* %PC
  %5356 = shl i64 %5353, 32
  %5357 = ashr exact i64 %5356, 32
  store i64 %5357, i64* %RSI, align 8, !tbaa !2428
  %5358 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5359 = load i64, i64* %RDX
  %5360 = load i64, i64* %RSI
  %5361 = mul i64 %5360, 8
  %5362 = add i64 %5361, %5359
  %5363 = load i64, i64* %PC
  %5364 = add i64 %5363, 5
  store i64 %5364, i64* %PC
  %5365 = inttoptr i64 %5362 to double*
  %5366 = load double, double* %5365
  %5367 = bitcast i8* %5358 to double*
  store double %5366, double* %5367, align 1, !tbaa !2452
  %5368 = getelementptr inbounds i8, i8* %5358, i64 8
  %5369 = bitcast i8* %5368 to double*
  store double 0.000000e+00, double* %5369, align 1, !tbaa !2452
  %5370 = load i64, i64* %RBP
  %5371 = sub i64 %5370, 16
  %5372 = load i64, i64* %PC
  %5373 = add i64 %5372, 4
  store i64 %5373, i64* %PC
  %5374 = inttoptr i64 %5371 to i64*
  %5375 = load i64, i64* %5374
  store i64 %5375, i64* %RDX, align 8, !tbaa !2428
  %5376 = load i64, i64* %RBP
  %5377 = sub i64 %5376, 28
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 3
  store i64 %5379, i64* %PC
  %5380 = inttoptr i64 %5377 to i32*
  %5381 = load i32, i32* %5380
  %5382 = zext i32 %5381 to i64
  store i64 %5382, i64* %RCX, align 8, !tbaa !2428
  %5383 = load i64, i64* %RCX
  %5384 = load i64, i64* %PC
  %5385 = add i64 %5384, 3
  store i64 %5385, i64* %PC
  %5386 = trunc i64 %5383 to i32
  %5387 = add i32 11, %5386
  %5388 = zext i32 %5387 to i64
  store i64 %5388, i64* %RCX, align 8, !tbaa !2428
  %5389 = icmp ult i32 %5387, %5386
  %5390 = icmp ult i32 %5387, 11
  %5391 = or i1 %5389, %5390
  %5392 = zext i1 %5391 to i8
  %5393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5392, i8* %5393, align 1, !tbaa !2432
  %5394 = and i32 %5387, 255
  %5395 = call i32 @llvm.ctpop.i32(i32 %5394) #17
  %5396 = trunc i32 %5395 to i8
  %5397 = and i8 %5396, 1
  %5398 = xor i8 %5397, 1
  %5399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5398, i8* %5399, align 1, !tbaa !2446
  %5400 = xor i64 11, %5383
  %5401 = trunc i64 %5400 to i32
  %5402 = xor i32 %5401, %5387
  %5403 = lshr i32 %5402, 4
  %5404 = trunc i32 %5403 to i8
  %5405 = and i8 %5404, 1
  %5406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5405, i8* %5406, align 1, !tbaa !2447
  %5407 = icmp eq i32 %5387, 0
  %5408 = zext i1 %5407 to i8
  %5409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5408, i8* %5409, align 1, !tbaa !2448
  %5410 = lshr i32 %5387, 31
  %5411 = trunc i32 %5410 to i8
  %5412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5411, i8* %5412, align 1, !tbaa !2449
  %5413 = lshr i32 %5386, 31
  %5414 = xor i32 %5410, %5413
  %5415 = add nuw nsw i32 %5414, %5410
  %5416 = icmp eq i32 %5415, 2
  %5417 = zext i1 %5416 to i8
  %5418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5417, i8* %5418, align 1, !tbaa !2450
  %5419 = load i32, i32* %ECX
  %5420 = zext i32 %5419 to i64
  %5421 = load i64, i64* %PC
  %5422 = add i64 %5421, 3
  store i64 %5422, i64* %PC
  %5423 = shl i64 %5420, 32
  %5424 = ashr exact i64 %5423, 32
  store i64 %5424, i64* %RSI, align 8, !tbaa !2428
  %5425 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5427 = load i64, i64* %RDX
  %5428 = load i64, i64* %RSI
  %5429 = mul i64 %5428, 8
  %5430 = add i64 %5429, %5427
  %5431 = load i64, i64* %PC
  %5432 = add i64 %5431, 5
  store i64 %5432, i64* %PC
  %5433 = bitcast i8* %5426 to double*
  %5434 = load double, double* %5433, align 1
  %5435 = getelementptr inbounds i8, i8* %5426, i64 8
  %5436 = bitcast i8* %5435 to i64*
  %5437 = load i64, i64* %5436, align 1
  %5438 = inttoptr i64 %5430 to double*
  %5439 = load double, double* %5438
  %5440 = fsub double %5434, %5439
  %5441 = bitcast i8* %5425 to double*
  store double %5440, double* %5441, align 1, !tbaa !2452
  %5442 = getelementptr inbounds i8, i8* %5425, i64 8
  %5443 = bitcast i8* %5442 to i64*
  store i64 %5437, i64* %5443, align 1, !tbaa !2452
  %5444 = load i64, i64* %RBP
  %5445 = sub i64 %5444, 120
  %5446 = bitcast %union.vec128_t* %XMM0 to i8*
  %5447 = load i64, i64* %PC
  %5448 = add i64 %5447, 5
  store i64 %5448, i64* %PC
  %5449 = bitcast i8* %5446 to double*
  %5450 = load double, double* %5449, align 1
  %5451 = inttoptr i64 %5445 to double*
  store double %5450, double* %5451
  %5452 = load i64, i64* %RBP
  %5453 = sub i64 %5452, 16
  %5454 = load i64, i64* %PC
  %5455 = add i64 %5454, 4
  store i64 %5455, i64* %PC
  %5456 = inttoptr i64 %5453 to i64*
  %5457 = load i64, i64* %5456
  store i64 %5457, i64* %RDX, align 8, !tbaa !2428
  %5458 = load i64, i64* %RBP
  %5459 = sub i64 %5458, 28
  %5460 = load i64, i64* %PC
  %5461 = add i64 %5460, 3
  store i64 %5461, i64* %PC
  %5462 = inttoptr i64 %5459 to i32*
  %5463 = load i32, i32* %5462
  %5464 = zext i32 %5463 to i64
  store i64 %5464, i64* %RCX, align 8, !tbaa !2428
  %5465 = load i64, i64* %RCX
  %5466 = load i64, i64* %PC
  %5467 = add i64 %5466, 3
  store i64 %5467, i64* %PC
  %5468 = trunc i64 %5465 to i32
  %5469 = add i32 12, %5468
  %5470 = zext i32 %5469 to i64
  store i64 %5470, i64* %RCX, align 8, !tbaa !2428
  %5471 = icmp ult i32 %5469, %5468
  %5472 = icmp ult i32 %5469, 12
  %5473 = or i1 %5471, %5472
  %5474 = zext i1 %5473 to i8
  %5475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5474, i8* %5475, align 1, !tbaa !2432
  %5476 = and i32 %5469, 255
  %5477 = call i32 @llvm.ctpop.i32(i32 %5476) #17
  %5478 = trunc i32 %5477 to i8
  %5479 = and i8 %5478, 1
  %5480 = xor i8 %5479, 1
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5480, i8* %5481, align 1, !tbaa !2446
  %5482 = xor i64 12, %5465
  %5483 = trunc i64 %5482 to i32
  %5484 = xor i32 %5483, %5469
  %5485 = lshr i32 %5484, 4
  %5486 = trunc i32 %5485 to i8
  %5487 = and i8 %5486, 1
  %5488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5487, i8* %5488, align 1, !tbaa !2447
  %5489 = icmp eq i32 %5469, 0
  %5490 = zext i1 %5489 to i8
  %5491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5490, i8* %5491, align 1, !tbaa !2448
  %5492 = lshr i32 %5469, 31
  %5493 = trunc i32 %5492 to i8
  %5494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5493, i8* %5494, align 1, !tbaa !2449
  %5495 = lshr i32 %5468, 31
  %5496 = xor i32 %5492, %5495
  %5497 = add nuw nsw i32 %5496, %5492
  %5498 = icmp eq i32 %5497, 2
  %5499 = zext i1 %5498 to i8
  %5500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5499, i8* %5500, align 1, !tbaa !2450
  %5501 = load i32, i32* %ECX
  %5502 = zext i32 %5501 to i64
  %5503 = load i64, i64* %PC
  %5504 = add i64 %5503, 3
  store i64 %5504, i64* %PC
  %5505 = shl i64 %5502, 32
  %5506 = ashr exact i64 %5505, 32
  store i64 %5506, i64* %RSI, align 8, !tbaa !2428
  %5507 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5508 = load i64, i64* %RDX
  %5509 = load i64, i64* %RSI
  %5510 = mul i64 %5509, 8
  %5511 = add i64 %5510, %5508
  %5512 = load i64, i64* %PC
  %5513 = add i64 %5512, 5
  store i64 %5513, i64* %PC
  %5514 = inttoptr i64 %5511 to double*
  %5515 = load double, double* %5514
  %5516 = bitcast i8* %5507 to double*
  store double %5515, double* %5516, align 1, !tbaa !2452
  %5517 = getelementptr inbounds i8, i8* %5507, i64 8
  %5518 = bitcast i8* %5517 to double*
  store double 0.000000e+00, double* %5518, align 1, !tbaa !2452
  %5519 = load i64, i64* %RBP
  %5520 = sub i64 %5519, 16
  %5521 = load i64, i64* %PC
  %5522 = add i64 %5521, 4
  store i64 %5522, i64* %PC
  %5523 = inttoptr i64 %5520 to i64*
  %5524 = load i64, i64* %5523
  store i64 %5524, i64* %RDX, align 8, !tbaa !2428
  %5525 = load i64, i64* %RBP
  %5526 = sub i64 %5525, 28
  %5527 = load i64, i64* %PC
  %5528 = add i64 %5527, 3
  store i64 %5528, i64* %PC
  %5529 = inttoptr i64 %5526 to i32*
  %5530 = load i32, i32* %5529
  %5531 = zext i32 %5530 to i64
  store i64 %5531, i64* %RCX, align 8, !tbaa !2428
  %5532 = load i64, i64* %RCX
  %5533 = load i64, i64* %PC
  %5534 = add i64 %5533, 3
  store i64 %5534, i64* %PC
  %5535 = trunc i64 %5532 to i32
  %5536 = add i32 14, %5535
  %5537 = zext i32 %5536 to i64
  store i64 %5537, i64* %RCX, align 8, !tbaa !2428
  %5538 = icmp ult i32 %5536, %5535
  %5539 = icmp ult i32 %5536, 14
  %5540 = or i1 %5538, %5539
  %5541 = zext i1 %5540 to i8
  %5542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5541, i8* %5542, align 1, !tbaa !2432
  %5543 = and i32 %5536, 255
  %5544 = call i32 @llvm.ctpop.i32(i32 %5543) #17
  %5545 = trunc i32 %5544 to i8
  %5546 = and i8 %5545, 1
  %5547 = xor i8 %5546, 1
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5547, i8* %5548, align 1, !tbaa !2446
  %5549 = xor i64 14, %5532
  %5550 = trunc i64 %5549 to i32
  %5551 = xor i32 %5550, %5536
  %5552 = lshr i32 %5551, 4
  %5553 = trunc i32 %5552 to i8
  %5554 = and i8 %5553, 1
  %5555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5554, i8* %5555, align 1, !tbaa !2447
  %5556 = icmp eq i32 %5536, 0
  %5557 = zext i1 %5556 to i8
  %5558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5557, i8* %5558, align 1, !tbaa !2448
  %5559 = lshr i32 %5536, 31
  %5560 = trunc i32 %5559 to i8
  %5561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5560, i8* %5561, align 1, !tbaa !2449
  %5562 = lshr i32 %5535, 31
  %5563 = xor i32 %5559, %5562
  %5564 = add nuw nsw i32 %5563, %5559
  %5565 = icmp eq i32 %5564, 2
  %5566 = zext i1 %5565 to i8
  %5567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5566, i8* %5567, align 1, !tbaa !2450
  %5568 = load i32, i32* %ECX
  %5569 = zext i32 %5568 to i64
  %5570 = load i64, i64* %PC
  %5571 = add i64 %5570, 3
  store i64 %5571, i64* %PC
  %5572 = shl i64 %5569, 32
  %5573 = ashr exact i64 %5572, 32
  store i64 %5573, i64* %RSI, align 8, !tbaa !2428
  %5574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5576 = load i64, i64* %RDX
  %5577 = load i64, i64* %RSI
  %5578 = mul i64 %5577, 8
  %5579 = add i64 %5578, %5576
  %5580 = load i64, i64* %PC
  %5581 = add i64 %5580, 5
  store i64 %5581, i64* %PC
  %5582 = bitcast i8* %5575 to double*
  %5583 = load double, double* %5582, align 1
  %5584 = getelementptr inbounds i8, i8* %5575, i64 8
  %5585 = bitcast i8* %5584 to i64*
  %5586 = load i64, i64* %5585, align 1
  %5587 = inttoptr i64 %5579 to double*
  %5588 = load double, double* %5587
  %5589 = fadd double %5583, %5588
  %5590 = bitcast i8* %5574 to double*
  store double %5589, double* %5590, align 1, !tbaa !2452
  %5591 = getelementptr inbounds i8, i8* %5574, i64 8
  %5592 = bitcast i8* %5591 to i64*
  store i64 %5586, i64* %5592, align 1, !tbaa !2452
  %5593 = load i64, i64* %RBP
  %5594 = sub i64 %5593, 128
  %5595 = bitcast %union.vec128_t* %XMM0 to i8*
  %5596 = load i64, i64* %PC
  %5597 = add i64 %5596, 5
  store i64 %5597, i64* %PC
  %5598 = bitcast i8* %5595 to double*
  %5599 = load double, double* %5598, align 1
  %5600 = inttoptr i64 %5594 to double*
  store double %5599, double* %5600
  %5601 = load i64, i64* %RBP
  %5602 = sub i64 %5601, 16
  %5603 = load i64, i64* %PC
  %5604 = add i64 %5603, 4
  store i64 %5604, i64* %PC
  %5605 = inttoptr i64 %5602 to i64*
  %5606 = load i64, i64* %5605
  store i64 %5606, i64* %RDX, align 8, !tbaa !2428
  %5607 = load i64, i64* %RBP
  %5608 = sub i64 %5607, 28
  %5609 = load i64, i64* %PC
  %5610 = add i64 %5609, 3
  store i64 %5610, i64* %PC
  %5611 = inttoptr i64 %5608 to i32*
  %5612 = load i32, i32* %5611
  %5613 = zext i32 %5612 to i64
  store i64 %5613, i64* %RCX, align 8, !tbaa !2428
  %5614 = load i64, i64* %RCX
  %5615 = load i64, i64* %PC
  %5616 = add i64 %5615, 3
  store i64 %5616, i64* %PC
  %5617 = trunc i64 %5614 to i32
  %5618 = add i32 13, %5617
  %5619 = zext i32 %5618 to i64
  store i64 %5619, i64* %RCX, align 8, !tbaa !2428
  %5620 = icmp ult i32 %5618, %5617
  %5621 = icmp ult i32 %5618, 13
  %5622 = or i1 %5620, %5621
  %5623 = zext i1 %5622 to i8
  %5624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5623, i8* %5624, align 1, !tbaa !2432
  %5625 = and i32 %5618, 255
  %5626 = call i32 @llvm.ctpop.i32(i32 %5625) #17
  %5627 = trunc i32 %5626 to i8
  %5628 = and i8 %5627, 1
  %5629 = xor i8 %5628, 1
  %5630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5629, i8* %5630, align 1, !tbaa !2446
  %5631 = xor i64 13, %5614
  %5632 = trunc i64 %5631 to i32
  %5633 = xor i32 %5632, %5618
  %5634 = lshr i32 %5633, 4
  %5635 = trunc i32 %5634 to i8
  %5636 = and i8 %5635, 1
  %5637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5636, i8* %5637, align 1, !tbaa !2447
  %5638 = icmp eq i32 %5618, 0
  %5639 = zext i1 %5638 to i8
  %5640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5639, i8* %5640, align 1, !tbaa !2448
  %5641 = lshr i32 %5618, 31
  %5642 = trunc i32 %5641 to i8
  %5643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5642, i8* %5643, align 1, !tbaa !2449
  %5644 = lshr i32 %5617, 31
  %5645 = xor i32 %5641, %5644
  %5646 = add nuw nsw i32 %5645, %5641
  %5647 = icmp eq i32 %5646, 2
  %5648 = zext i1 %5647 to i8
  %5649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5648, i8* %5649, align 1, !tbaa !2450
  %5650 = load i32, i32* %ECX
  %5651 = zext i32 %5650 to i64
  %5652 = load i64, i64* %PC
  %5653 = add i64 %5652, 3
  store i64 %5653, i64* %PC
  %5654 = shl i64 %5651, 32
  %5655 = ashr exact i64 %5654, 32
  store i64 %5655, i64* %RSI, align 8, !tbaa !2428
  %5656 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5657 = load i64, i64* %RDX
  %5658 = load i64, i64* %RSI
  %5659 = mul i64 %5658, 8
  %5660 = add i64 %5659, %5657
  %5661 = load i64, i64* %PC
  %5662 = add i64 %5661, 5
  store i64 %5662, i64* %PC
  %5663 = inttoptr i64 %5660 to double*
  %5664 = load double, double* %5663
  %5665 = bitcast i8* %5656 to double*
  store double %5664, double* %5665, align 1, !tbaa !2452
  %5666 = getelementptr inbounds i8, i8* %5656, i64 8
  %5667 = bitcast i8* %5666 to double*
  store double 0.000000e+00, double* %5667, align 1, !tbaa !2452
  %5668 = load i64, i64* %RBP
  %5669 = sub i64 %5668, 16
  %5670 = load i64, i64* %PC
  %5671 = add i64 %5670, 4
  store i64 %5671, i64* %PC
  %5672 = inttoptr i64 %5669 to i64*
  %5673 = load i64, i64* %5672
  store i64 %5673, i64* %RDX, align 8, !tbaa !2428
  %5674 = load i64, i64* %RBP
  %5675 = sub i64 %5674, 28
  %5676 = load i64, i64* %PC
  %5677 = add i64 %5676, 3
  store i64 %5677, i64* %PC
  %5678 = inttoptr i64 %5675 to i32*
  %5679 = load i32, i32* %5678
  %5680 = zext i32 %5679 to i64
  store i64 %5680, i64* %RCX, align 8, !tbaa !2428
  %5681 = load i64, i64* %RCX
  %5682 = load i64, i64* %PC
  %5683 = add i64 %5682, 3
  store i64 %5683, i64* %PC
  %5684 = trunc i64 %5681 to i32
  %5685 = add i32 15, %5684
  %5686 = zext i32 %5685 to i64
  store i64 %5686, i64* %RCX, align 8, !tbaa !2428
  %5687 = icmp ult i32 %5685, %5684
  %5688 = icmp ult i32 %5685, 15
  %5689 = or i1 %5687, %5688
  %5690 = zext i1 %5689 to i8
  %5691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5690, i8* %5691, align 1, !tbaa !2432
  %5692 = and i32 %5685, 255
  %5693 = call i32 @llvm.ctpop.i32(i32 %5692) #17
  %5694 = trunc i32 %5693 to i8
  %5695 = and i8 %5694, 1
  %5696 = xor i8 %5695, 1
  %5697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5696, i8* %5697, align 1, !tbaa !2446
  %5698 = xor i64 15, %5681
  %5699 = trunc i64 %5698 to i32
  %5700 = xor i32 %5699, %5685
  %5701 = lshr i32 %5700, 4
  %5702 = trunc i32 %5701 to i8
  %5703 = and i8 %5702, 1
  %5704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5703, i8* %5704, align 1, !tbaa !2447
  %5705 = icmp eq i32 %5685, 0
  %5706 = zext i1 %5705 to i8
  %5707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5706, i8* %5707, align 1, !tbaa !2448
  %5708 = lshr i32 %5685, 31
  %5709 = trunc i32 %5708 to i8
  %5710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5709, i8* %5710, align 1, !tbaa !2449
  %5711 = lshr i32 %5684, 31
  %5712 = xor i32 %5708, %5711
  %5713 = add nuw nsw i32 %5712, %5708
  %5714 = icmp eq i32 %5713, 2
  %5715 = zext i1 %5714 to i8
  %5716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5715, i8* %5716, align 1, !tbaa !2450
  %5717 = load i32, i32* %ECX
  %5718 = zext i32 %5717 to i64
  %5719 = load i64, i64* %PC
  %5720 = add i64 %5719, 3
  store i64 %5720, i64* %PC
  %5721 = shl i64 %5718, 32
  %5722 = ashr exact i64 %5721, 32
  store i64 %5722, i64* %RSI, align 8, !tbaa !2428
  %5723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5724 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5725 = load i64, i64* %RDX
  %5726 = load i64, i64* %RSI
  %5727 = mul i64 %5726, 8
  %5728 = add i64 %5727, %5725
  %5729 = load i64, i64* %PC
  %5730 = add i64 %5729, 5
  store i64 %5730, i64* %PC
  %5731 = bitcast i8* %5724 to double*
  %5732 = load double, double* %5731, align 1
  %5733 = getelementptr inbounds i8, i8* %5724, i64 8
  %5734 = bitcast i8* %5733 to i64*
  %5735 = load i64, i64* %5734, align 1
  %5736 = inttoptr i64 %5728 to double*
  %5737 = load double, double* %5736
  %5738 = fadd double %5732, %5737
  %5739 = bitcast i8* %5723 to double*
  store double %5738, double* %5739, align 1, !tbaa !2452
  %5740 = getelementptr inbounds i8, i8* %5723, i64 8
  %5741 = bitcast i8* %5740 to i64*
  store i64 %5735, i64* %5741, align 1, !tbaa !2452
  %5742 = load i64, i64* %RBP
  %5743 = sub i64 %5742, 136
  %5744 = bitcast %union.vec128_t* %XMM0 to i8*
  %5745 = load i64, i64* %PC
  %5746 = add i64 %5745, 8
  store i64 %5746, i64* %PC
  %5747 = bitcast i8* %5744 to double*
  %5748 = load double, double* %5747, align 1
  %5749 = inttoptr i64 %5743 to double*
  store double %5748, double* %5749
  %5750 = load i64, i64* %RBP
  %5751 = sub i64 %5750, 16
  %5752 = load i64, i64* %PC
  %5753 = add i64 %5752, 4
  store i64 %5753, i64* %PC
  %5754 = inttoptr i64 %5751 to i64*
  %5755 = load i64, i64* %5754
  store i64 %5755, i64* %RDX, align 8, !tbaa !2428
  %5756 = load i64, i64* %RBP
  %5757 = sub i64 %5756, 28
  %5758 = load i64, i64* %PC
  %5759 = add i64 %5758, 3
  store i64 %5759, i64* %PC
  %5760 = inttoptr i64 %5757 to i32*
  %5761 = load i32, i32* %5760
  %5762 = zext i32 %5761 to i64
  store i64 %5762, i64* %RCX, align 8, !tbaa !2428
  %5763 = load i64, i64* %RCX
  %5764 = load i64, i64* %PC
  %5765 = add i64 %5764, 3
  store i64 %5765, i64* %PC
  %5766 = trunc i64 %5763 to i32
  %5767 = add i32 12, %5766
  %5768 = zext i32 %5767 to i64
  store i64 %5768, i64* %RCX, align 8, !tbaa !2428
  %5769 = icmp ult i32 %5767, %5766
  %5770 = icmp ult i32 %5767, 12
  %5771 = or i1 %5769, %5770
  %5772 = zext i1 %5771 to i8
  %5773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5772, i8* %5773, align 1, !tbaa !2432
  %5774 = and i32 %5767, 255
  %5775 = call i32 @llvm.ctpop.i32(i32 %5774) #17
  %5776 = trunc i32 %5775 to i8
  %5777 = and i8 %5776, 1
  %5778 = xor i8 %5777, 1
  %5779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5778, i8* %5779, align 1, !tbaa !2446
  %5780 = xor i64 12, %5763
  %5781 = trunc i64 %5780 to i32
  %5782 = xor i32 %5781, %5767
  %5783 = lshr i32 %5782, 4
  %5784 = trunc i32 %5783 to i8
  %5785 = and i8 %5784, 1
  %5786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5785, i8* %5786, align 1, !tbaa !2447
  %5787 = icmp eq i32 %5767, 0
  %5788 = zext i1 %5787 to i8
  %5789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5788, i8* %5789, align 1, !tbaa !2448
  %5790 = lshr i32 %5767, 31
  %5791 = trunc i32 %5790 to i8
  %5792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5791, i8* %5792, align 1, !tbaa !2449
  %5793 = lshr i32 %5766, 31
  %5794 = xor i32 %5790, %5793
  %5795 = add nuw nsw i32 %5794, %5790
  %5796 = icmp eq i32 %5795, 2
  %5797 = zext i1 %5796 to i8
  %5798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5797, i8* %5798, align 1, !tbaa !2450
  %5799 = load i32, i32* %ECX
  %5800 = zext i32 %5799 to i64
  %5801 = load i64, i64* %PC
  %5802 = add i64 %5801, 3
  store i64 %5802, i64* %PC
  %5803 = shl i64 %5800, 32
  %5804 = ashr exact i64 %5803, 32
  store i64 %5804, i64* %RSI, align 8, !tbaa !2428
  %5805 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5806 = load i64, i64* %RDX
  %5807 = load i64, i64* %RSI
  %5808 = mul i64 %5807, 8
  %5809 = add i64 %5808, %5806
  %5810 = load i64, i64* %PC
  %5811 = add i64 %5810, 5
  store i64 %5811, i64* %PC
  %5812 = inttoptr i64 %5809 to double*
  %5813 = load double, double* %5812
  %5814 = bitcast i8* %5805 to double*
  store double %5813, double* %5814, align 1, !tbaa !2452
  %5815 = getelementptr inbounds i8, i8* %5805, i64 8
  %5816 = bitcast i8* %5815 to double*
  store double 0.000000e+00, double* %5816, align 1, !tbaa !2452
  %5817 = load i64, i64* %RBP
  %5818 = sub i64 %5817, 16
  %5819 = load i64, i64* %PC
  %5820 = add i64 %5819, 4
  store i64 %5820, i64* %PC
  %5821 = inttoptr i64 %5818 to i64*
  %5822 = load i64, i64* %5821
  store i64 %5822, i64* %RDX, align 8, !tbaa !2428
  %5823 = load i64, i64* %RBP
  %5824 = sub i64 %5823, 28
  %5825 = load i64, i64* %PC
  %5826 = add i64 %5825, 3
  store i64 %5826, i64* %PC
  %5827 = inttoptr i64 %5824 to i32*
  %5828 = load i32, i32* %5827
  %5829 = zext i32 %5828 to i64
  store i64 %5829, i64* %RCX, align 8, !tbaa !2428
  %5830 = load i64, i64* %RCX
  %5831 = load i64, i64* %PC
  %5832 = add i64 %5831, 3
  store i64 %5832, i64* %PC
  %5833 = trunc i64 %5830 to i32
  %5834 = add i32 14, %5833
  %5835 = zext i32 %5834 to i64
  store i64 %5835, i64* %RCX, align 8, !tbaa !2428
  %5836 = icmp ult i32 %5834, %5833
  %5837 = icmp ult i32 %5834, 14
  %5838 = or i1 %5836, %5837
  %5839 = zext i1 %5838 to i8
  %5840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5839, i8* %5840, align 1, !tbaa !2432
  %5841 = and i32 %5834, 255
  %5842 = call i32 @llvm.ctpop.i32(i32 %5841) #17
  %5843 = trunc i32 %5842 to i8
  %5844 = and i8 %5843, 1
  %5845 = xor i8 %5844, 1
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5845, i8* %5846, align 1, !tbaa !2446
  %5847 = xor i64 14, %5830
  %5848 = trunc i64 %5847 to i32
  %5849 = xor i32 %5848, %5834
  %5850 = lshr i32 %5849, 4
  %5851 = trunc i32 %5850 to i8
  %5852 = and i8 %5851, 1
  %5853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5852, i8* %5853, align 1, !tbaa !2447
  %5854 = icmp eq i32 %5834, 0
  %5855 = zext i1 %5854 to i8
  %5856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5855, i8* %5856, align 1, !tbaa !2448
  %5857 = lshr i32 %5834, 31
  %5858 = trunc i32 %5857 to i8
  %5859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5858, i8* %5859, align 1, !tbaa !2449
  %5860 = lshr i32 %5833, 31
  %5861 = xor i32 %5857, %5860
  %5862 = add nuw nsw i32 %5861, %5857
  %5863 = icmp eq i32 %5862, 2
  %5864 = zext i1 %5863 to i8
  %5865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5864, i8* %5865, align 1, !tbaa !2450
  %5866 = load i32, i32* %ECX
  %5867 = zext i32 %5866 to i64
  %5868 = load i64, i64* %PC
  %5869 = add i64 %5868, 3
  store i64 %5869, i64* %PC
  %5870 = shl i64 %5867, 32
  %5871 = ashr exact i64 %5870, 32
  store i64 %5871, i64* %RSI, align 8, !tbaa !2428
  %5872 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5873 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5874 = load i64, i64* %RDX
  %5875 = load i64, i64* %RSI
  %5876 = mul i64 %5875, 8
  %5877 = add i64 %5876, %5874
  %5878 = load i64, i64* %PC
  %5879 = add i64 %5878, 5
  store i64 %5879, i64* %PC
  %5880 = bitcast i8* %5873 to double*
  %5881 = load double, double* %5880, align 1
  %5882 = getelementptr inbounds i8, i8* %5873, i64 8
  %5883 = bitcast i8* %5882 to i64*
  %5884 = load i64, i64* %5883, align 1
  %5885 = inttoptr i64 %5877 to double*
  %5886 = load double, double* %5885
  %5887 = fsub double %5881, %5886
  %5888 = bitcast i8* %5872 to double*
  store double %5887, double* %5888, align 1, !tbaa !2452
  %5889 = getelementptr inbounds i8, i8* %5872, i64 8
  %5890 = bitcast i8* %5889 to i64*
  store i64 %5884, i64* %5890, align 1, !tbaa !2452
  %5891 = load i64, i64* %RBP
  %5892 = sub i64 %5891, 144
  %5893 = bitcast %union.vec128_t* %XMM0 to i8*
  %5894 = load i64, i64* %PC
  %5895 = add i64 %5894, 8
  store i64 %5895, i64* %PC
  %5896 = bitcast i8* %5893 to double*
  %5897 = load double, double* %5896, align 1
  %5898 = inttoptr i64 %5892 to double*
  store double %5897, double* %5898
  %5899 = load i64, i64* %RBP
  %5900 = sub i64 %5899, 16
  %5901 = load i64, i64* %PC
  %5902 = add i64 %5901, 4
  store i64 %5902, i64* %PC
  %5903 = inttoptr i64 %5900 to i64*
  %5904 = load i64, i64* %5903
  store i64 %5904, i64* %RDX, align 8, !tbaa !2428
  %5905 = load i64, i64* %RBP
  %5906 = sub i64 %5905, 28
  %5907 = load i64, i64* %PC
  %5908 = add i64 %5907, 3
  store i64 %5908, i64* %PC
  %5909 = inttoptr i64 %5906 to i32*
  %5910 = load i32, i32* %5909
  %5911 = zext i32 %5910 to i64
  store i64 %5911, i64* %RCX, align 8, !tbaa !2428
  %5912 = load i64, i64* %RCX
  %5913 = load i64, i64* %PC
  %5914 = add i64 %5913, 3
  store i64 %5914, i64* %PC
  %5915 = trunc i64 %5912 to i32
  %5916 = add i32 13, %5915
  %5917 = zext i32 %5916 to i64
  store i64 %5917, i64* %RCX, align 8, !tbaa !2428
  %5918 = icmp ult i32 %5916, %5915
  %5919 = icmp ult i32 %5916, 13
  %5920 = or i1 %5918, %5919
  %5921 = zext i1 %5920 to i8
  %5922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5921, i8* %5922, align 1, !tbaa !2432
  %5923 = and i32 %5916, 255
  %5924 = call i32 @llvm.ctpop.i32(i32 %5923) #17
  %5925 = trunc i32 %5924 to i8
  %5926 = and i8 %5925, 1
  %5927 = xor i8 %5926, 1
  %5928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5927, i8* %5928, align 1, !tbaa !2446
  %5929 = xor i64 13, %5912
  %5930 = trunc i64 %5929 to i32
  %5931 = xor i32 %5930, %5916
  %5932 = lshr i32 %5931, 4
  %5933 = trunc i32 %5932 to i8
  %5934 = and i8 %5933, 1
  %5935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5934, i8* %5935, align 1, !tbaa !2447
  %5936 = icmp eq i32 %5916, 0
  %5937 = zext i1 %5936 to i8
  %5938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5937, i8* %5938, align 1, !tbaa !2448
  %5939 = lshr i32 %5916, 31
  %5940 = trunc i32 %5939 to i8
  %5941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5940, i8* %5941, align 1, !tbaa !2449
  %5942 = lshr i32 %5915, 31
  %5943 = xor i32 %5939, %5942
  %5944 = add nuw nsw i32 %5943, %5939
  %5945 = icmp eq i32 %5944, 2
  %5946 = zext i1 %5945 to i8
  %5947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5946, i8* %5947, align 1, !tbaa !2450
  %5948 = load i32, i32* %ECX
  %5949 = zext i32 %5948 to i64
  %5950 = load i64, i64* %PC
  %5951 = add i64 %5950, 3
  store i64 %5951, i64* %PC
  %5952 = shl i64 %5949, 32
  %5953 = ashr exact i64 %5952, 32
  store i64 %5953, i64* %RSI, align 8, !tbaa !2428
  %5954 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5955 = load i64, i64* %RDX
  %5956 = load i64, i64* %RSI
  %5957 = mul i64 %5956, 8
  %5958 = add i64 %5957, %5955
  %5959 = load i64, i64* %PC
  %5960 = add i64 %5959, 5
  store i64 %5960, i64* %PC
  %5961 = inttoptr i64 %5958 to double*
  %5962 = load double, double* %5961
  %5963 = bitcast i8* %5954 to double*
  store double %5962, double* %5963, align 1, !tbaa !2452
  %5964 = getelementptr inbounds i8, i8* %5954, i64 8
  %5965 = bitcast i8* %5964 to double*
  store double 0.000000e+00, double* %5965, align 1, !tbaa !2452
  %5966 = load i64, i64* %RBP
  %5967 = sub i64 %5966, 16
  %5968 = load i64, i64* %PC
  %5969 = add i64 %5968, 4
  store i64 %5969, i64* %PC
  %5970 = inttoptr i64 %5967 to i64*
  %5971 = load i64, i64* %5970
  store i64 %5971, i64* %RDX, align 8, !tbaa !2428
  %5972 = load i64, i64* %RBP
  %5973 = sub i64 %5972, 28
  %5974 = load i64, i64* %PC
  %5975 = add i64 %5974, 3
  store i64 %5975, i64* %PC
  %5976 = inttoptr i64 %5973 to i32*
  %5977 = load i32, i32* %5976
  %5978 = zext i32 %5977 to i64
  store i64 %5978, i64* %RCX, align 8, !tbaa !2428
  %5979 = load i64, i64* %RCX
  %5980 = load i64, i64* %PC
  %5981 = add i64 %5980, 3
  store i64 %5981, i64* %PC
  %5982 = trunc i64 %5979 to i32
  %5983 = add i32 15, %5982
  %5984 = zext i32 %5983 to i64
  store i64 %5984, i64* %RCX, align 8, !tbaa !2428
  %5985 = icmp ult i32 %5983, %5982
  %5986 = icmp ult i32 %5983, 15
  %5987 = or i1 %5985, %5986
  %5988 = zext i1 %5987 to i8
  %5989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5988, i8* %5989, align 1, !tbaa !2432
  %5990 = and i32 %5983, 255
  %5991 = call i32 @llvm.ctpop.i32(i32 %5990) #17
  %5992 = trunc i32 %5991 to i8
  %5993 = and i8 %5992, 1
  %5994 = xor i8 %5993, 1
  %5995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5994, i8* %5995, align 1, !tbaa !2446
  %5996 = xor i64 15, %5979
  %5997 = trunc i64 %5996 to i32
  %5998 = xor i32 %5997, %5983
  %5999 = lshr i32 %5998, 4
  %6000 = trunc i32 %5999 to i8
  %6001 = and i8 %6000, 1
  %6002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6001, i8* %6002, align 1, !tbaa !2447
  %6003 = icmp eq i32 %5983, 0
  %6004 = zext i1 %6003 to i8
  %6005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6004, i8* %6005, align 1, !tbaa !2448
  %6006 = lshr i32 %5983, 31
  %6007 = trunc i32 %6006 to i8
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6007, i8* %6008, align 1, !tbaa !2449
  %6009 = lshr i32 %5982, 31
  %6010 = xor i32 %6006, %6009
  %6011 = add nuw nsw i32 %6010, %6006
  %6012 = icmp eq i32 %6011, 2
  %6013 = zext i1 %6012 to i8
  %6014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6013, i8* %6014, align 1, !tbaa !2450
  %6015 = load i32, i32* %ECX
  %6016 = zext i32 %6015 to i64
  %6017 = load i64, i64* %PC
  %6018 = add i64 %6017, 3
  store i64 %6018, i64* %PC
  %6019 = shl i64 %6016, 32
  %6020 = ashr exact i64 %6019, 32
  store i64 %6020, i64* %RSI, align 8, !tbaa !2428
  %6021 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6022 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6023 = load i64, i64* %RDX
  %6024 = load i64, i64* %RSI
  %6025 = mul i64 %6024, 8
  %6026 = add i64 %6025, %6023
  %6027 = load i64, i64* %PC
  %6028 = add i64 %6027, 5
  store i64 %6028, i64* %PC
  %6029 = bitcast i8* %6022 to double*
  %6030 = load double, double* %6029, align 1
  %6031 = getelementptr inbounds i8, i8* %6022, i64 8
  %6032 = bitcast i8* %6031 to i64*
  %6033 = load i64, i64* %6032, align 1
  %6034 = inttoptr i64 %6026 to double*
  %6035 = load double, double* %6034
  %6036 = fsub double %6030, %6035
  %6037 = bitcast i8* %6021 to double*
  store double %6036, double* %6037, align 1, !tbaa !2452
  %6038 = getelementptr inbounds i8, i8* %6021, i64 8
  %6039 = bitcast i8* %6038 to i64*
  store i64 %6033, i64* %6039, align 1, !tbaa !2452
  %6040 = load i64, i64* %RBP
  %6041 = sub i64 %6040, 152
  %6042 = bitcast %union.vec128_t* %XMM0 to i8*
  %6043 = load i64, i64* %PC
  %6044 = add i64 %6043, 8
  store i64 %6044, i64* %PC
  %6045 = bitcast i8* %6042 to double*
  %6046 = load double, double* %6045, align 1
  %6047 = inttoptr i64 %6041 to double*
  store double %6046, double* %6047
  %6048 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6049 = load i64, i64* %RBP
  %6050 = sub i64 %6049, 96
  %6051 = load i64, i64* %PC
  %6052 = add i64 %6051, 5
  store i64 %6052, i64* %PC
  %6053 = inttoptr i64 %6050 to double*
  %6054 = load double, double* %6053
  %6055 = bitcast i8* %6048 to double*
  store double %6054, double* %6055, align 1, !tbaa !2452
  %6056 = getelementptr inbounds i8, i8* %6048, i64 8
  %6057 = bitcast i8* %6056 to double*
  store double 0.000000e+00, double* %6057, align 1, !tbaa !2452
  %6058 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6059 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6060 = load i64, i64* %RBP
  %6061 = sub i64 %6060, 128
  %6062 = load i64, i64* %PC
  %6063 = add i64 %6062, 5
  store i64 %6063, i64* %PC
  %6064 = bitcast i8* %6059 to double*
  %6065 = load double, double* %6064, align 1
  %6066 = getelementptr inbounds i8, i8* %6059, i64 8
  %6067 = bitcast i8* %6066 to i64*
  %6068 = load i64, i64* %6067, align 1
  %6069 = inttoptr i64 %6061 to double*
  %6070 = load double, double* %6069
  %6071 = fadd double %6065, %6070
  %6072 = bitcast i8* %6058 to double*
  store double %6071, double* %6072, align 1, !tbaa !2452
  %6073 = getelementptr inbounds i8, i8* %6058, i64 8
  %6074 = bitcast i8* %6073 to i64*
  store i64 %6068, i64* %6074, align 1, !tbaa !2452
  %6075 = load i64, i64* %RBP
  %6076 = sub i64 %6075, 16
  %6077 = load i64, i64* %PC
  %6078 = add i64 %6077, 4
  store i64 %6078, i64* %PC
  %6079 = inttoptr i64 %6076 to i64*
  %6080 = load i64, i64* %6079
  store i64 %6080, i64* %RDX, align 8, !tbaa !2428
  %6081 = load i64, i64* %RBP
  %6082 = sub i64 %6081, 28
  %6083 = load i64, i64* %PC
  %6084 = add i64 %6083, 3
  store i64 %6084, i64* %PC
  %6085 = inttoptr i64 %6082 to i32*
  %6086 = load i32, i32* %6085
  %6087 = zext i32 %6086 to i64
  store i64 %6087, i64* %RCX, align 8, !tbaa !2428
  %6088 = load i64, i64* %RCX
  %6089 = load i64, i64* %PC
  %6090 = add i64 %6089, 3
  store i64 %6090, i64* %PC
  %6091 = trunc i64 %6088 to i32
  %6092 = add i32 8, %6091
  %6093 = zext i32 %6092 to i64
  store i64 %6093, i64* %RCX, align 8, !tbaa !2428
  %6094 = icmp ult i32 %6092, %6091
  %6095 = icmp ult i32 %6092, 8
  %6096 = or i1 %6094, %6095
  %6097 = zext i1 %6096 to i8
  %6098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6097, i8* %6098, align 1, !tbaa !2432
  %6099 = and i32 %6092, 255
  %6100 = call i32 @llvm.ctpop.i32(i32 %6099) #17
  %6101 = trunc i32 %6100 to i8
  %6102 = and i8 %6101, 1
  %6103 = xor i8 %6102, 1
  %6104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6103, i8* %6104, align 1, !tbaa !2446
  %6105 = xor i64 8, %6088
  %6106 = trunc i64 %6105 to i32
  %6107 = xor i32 %6106, %6092
  %6108 = lshr i32 %6107, 4
  %6109 = trunc i32 %6108 to i8
  %6110 = and i8 %6109, 1
  %6111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6110, i8* %6111, align 1, !tbaa !2447
  %6112 = icmp eq i32 %6092, 0
  %6113 = zext i1 %6112 to i8
  %6114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6113, i8* %6114, align 1, !tbaa !2448
  %6115 = lshr i32 %6092, 31
  %6116 = trunc i32 %6115 to i8
  %6117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6116, i8* %6117, align 1, !tbaa !2449
  %6118 = lshr i32 %6091, 31
  %6119 = xor i32 %6115, %6118
  %6120 = add nuw nsw i32 %6119, %6115
  %6121 = icmp eq i32 %6120, 2
  %6122 = zext i1 %6121 to i8
  %6123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6122, i8* %6123, align 1, !tbaa !2450
  %6124 = load i32, i32* %ECX
  %6125 = zext i32 %6124 to i64
  %6126 = load i64, i64* %PC
  %6127 = add i64 %6126, 3
  store i64 %6127, i64* %PC
  %6128 = shl i64 %6125, 32
  %6129 = ashr exact i64 %6128, 32
  store i64 %6129, i64* %RSI, align 8, !tbaa !2428
  %6130 = load i64, i64* %RDX
  %6131 = load i64, i64* %RSI
  %6132 = mul i64 %6131, 8
  %6133 = add i64 %6132, %6130
  %6134 = bitcast %union.vec128_t* %XMM0 to i8*
  %6135 = load i64, i64* %PC
  %6136 = add i64 %6135, 5
  store i64 %6136, i64* %PC
  %6137 = bitcast i8* %6134 to double*
  %6138 = load double, double* %6137, align 1
  %6139 = inttoptr i64 %6133 to double*
  store double %6138, double* %6139
  %6140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6141 = load i64, i64* %RBP
  %6142 = sub i64 %6141, 104
  %6143 = load i64, i64* %PC
  %6144 = add i64 %6143, 5
  store i64 %6144, i64* %PC
  %6145 = inttoptr i64 %6142 to double*
  %6146 = load double, double* %6145
  %6147 = bitcast i8* %6140 to double*
  store double %6146, double* %6147, align 1, !tbaa !2452
  %6148 = getelementptr inbounds i8, i8* %6140, i64 8
  %6149 = bitcast i8* %6148 to double*
  store double 0.000000e+00, double* %6149, align 1, !tbaa !2452
  %6150 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6151 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6152 = load i64, i64* %RBP
  %6153 = sub i64 %6152, 136
  %6154 = load i64, i64* %PC
  %6155 = add i64 %6154, 8
  store i64 %6155, i64* %PC
  %6156 = bitcast i8* %6151 to double*
  %6157 = load double, double* %6156, align 1
  %6158 = getelementptr inbounds i8, i8* %6151, i64 8
  %6159 = bitcast i8* %6158 to i64*
  %6160 = load i64, i64* %6159, align 1
  %6161 = inttoptr i64 %6153 to double*
  %6162 = load double, double* %6161
  %6163 = fadd double %6157, %6162
  %6164 = bitcast i8* %6150 to double*
  store double %6163, double* %6164, align 1, !tbaa !2452
  %6165 = getelementptr inbounds i8, i8* %6150, i64 8
  %6166 = bitcast i8* %6165 to i64*
  store i64 %6160, i64* %6166, align 1, !tbaa !2452
  %6167 = load i64, i64* %RBP
  %6168 = sub i64 %6167, 16
  %6169 = load i64, i64* %PC
  %6170 = add i64 %6169, 4
  store i64 %6170, i64* %PC
  %6171 = inttoptr i64 %6168 to i64*
  %6172 = load i64, i64* %6171
  store i64 %6172, i64* %RDX, align 8, !tbaa !2428
  %6173 = load i64, i64* %RBP
  %6174 = sub i64 %6173, 28
  %6175 = load i64, i64* %PC
  %6176 = add i64 %6175, 3
  store i64 %6176, i64* %PC
  %6177 = inttoptr i64 %6174 to i32*
  %6178 = load i32, i32* %6177
  %6179 = zext i32 %6178 to i64
  store i64 %6179, i64* %RCX, align 8, !tbaa !2428
  %6180 = load i64, i64* %RCX
  %6181 = load i64, i64* %PC
  %6182 = add i64 %6181, 3
  store i64 %6182, i64* %PC
  %6183 = trunc i64 %6180 to i32
  %6184 = add i32 9, %6183
  %6185 = zext i32 %6184 to i64
  store i64 %6185, i64* %RCX, align 8, !tbaa !2428
  %6186 = icmp ult i32 %6184, %6183
  %6187 = icmp ult i32 %6184, 9
  %6188 = or i1 %6186, %6187
  %6189 = zext i1 %6188 to i8
  %6190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6189, i8* %6190, align 1, !tbaa !2432
  %6191 = and i32 %6184, 255
  %6192 = call i32 @llvm.ctpop.i32(i32 %6191) #17
  %6193 = trunc i32 %6192 to i8
  %6194 = and i8 %6193, 1
  %6195 = xor i8 %6194, 1
  %6196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6195, i8* %6196, align 1, !tbaa !2446
  %6197 = xor i64 9, %6180
  %6198 = trunc i64 %6197 to i32
  %6199 = xor i32 %6198, %6184
  %6200 = lshr i32 %6199, 4
  %6201 = trunc i32 %6200 to i8
  %6202 = and i8 %6201, 1
  %6203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6202, i8* %6203, align 1, !tbaa !2447
  %6204 = icmp eq i32 %6184, 0
  %6205 = zext i1 %6204 to i8
  %6206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6205, i8* %6206, align 1, !tbaa !2448
  %6207 = lshr i32 %6184, 31
  %6208 = trunc i32 %6207 to i8
  %6209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6208, i8* %6209, align 1, !tbaa !2449
  %6210 = lshr i32 %6183, 31
  %6211 = xor i32 %6207, %6210
  %6212 = add nuw nsw i32 %6211, %6207
  %6213 = icmp eq i32 %6212, 2
  %6214 = zext i1 %6213 to i8
  %6215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6214, i8* %6215, align 1, !tbaa !2450
  %6216 = load i32, i32* %ECX
  %6217 = zext i32 %6216 to i64
  %6218 = load i64, i64* %PC
  %6219 = add i64 %6218, 3
  store i64 %6219, i64* %PC
  %6220 = shl i64 %6217, 32
  %6221 = ashr exact i64 %6220, 32
  store i64 %6221, i64* %RSI, align 8, !tbaa !2428
  %6222 = load i64, i64* %RDX
  %6223 = load i64, i64* %RSI
  %6224 = mul i64 %6223, 8
  %6225 = add i64 %6224, %6222
  %6226 = bitcast %union.vec128_t* %XMM0 to i8*
  %6227 = load i64, i64* %PC
  %6228 = add i64 %6227, 5
  store i64 %6228, i64* %PC
  %6229 = bitcast i8* %6226 to double*
  %6230 = load double, double* %6229, align 1
  %6231 = inttoptr i64 %6225 to double*
  store double %6230, double* %6231
  %6232 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6233 = load i64, i64* %RBP
  %6234 = sub i64 %6233, 128
  %6235 = load i64, i64* %PC
  %6236 = add i64 %6235, 5
  store i64 %6236, i64* %PC
  %6237 = inttoptr i64 %6234 to double*
  %6238 = load double, double* %6237
  %6239 = bitcast i8* %6232 to double*
  store double %6238, double* %6239, align 1, !tbaa !2452
  %6240 = getelementptr inbounds i8, i8* %6232, i64 8
  %6241 = bitcast i8* %6240 to double*
  store double 0.000000e+00, double* %6241, align 1, !tbaa !2452
  %6242 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6243 = load i64, i64* %RBP
  %6244 = sub i64 %6243, 96
  %6245 = load i64, i64* %PC
  %6246 = add i64 %6245, 5
  store i64 %6246, i64* %PC
  %6247 = inttoptr i64 %6244 to double*
  %6248 = load double, double* %6247
  %6249 = bitcast i8* %6242 to double*
  store double %6248, double* %6249, align 1, !tbaa !2452
  %6250 = getelementptr inbounds i8, i8* %6242, i64 8
  %6251 = bitcast i8* %6250 to double*
  store double 0.000000e+00, double* %6251, align 1, !tbaa !2452
  %6252 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6253 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6254 = bitcast %union.vec128_t* %XMM0 to i8*
  %6255 = load i64, i64* %PC
  %6256 = add i64 %6255, 4
  store i64 %6256, i64* %PC
  %6257 = bitcast i8* %6253 to double*
  %6258 = load double, double* %6257, align 1
  %6259 = getelementptr inbounds i8, i8* %6253, i64 8
  %6260 = bitcast i8* %6259 to i64*
  %6261 = load i64, i64* %6260, align 1
  %6262 = bitcast i8* %6254 to double*
  %6263 = load double, double* %6262, align 1
  %6264 = fsub double %6258, %6263
  %6265 = bitcast i8* %6252 to double*
  store double %6264, double* %6265, align 1, !tbaa !2452
  %6266 = getelementptr inbounds i8, i8* %6252, i64 8
  %6267 = bitcast i8* %6266 to i64*
  store i64 %6261, i64* %6267, align 1, !tbaa !2452
  %6268 = load i64, i64* %RBP
  %6269 = sub i64 %6268, 96
  %6270 = bitcast %union.vec128_t* %XMM1 to i8*
  %6271 = load i64, i64* %PC
  %6272 = add i64 %6271, 5
  store i64 %6272, i64* %PC
  %6273 = bitcast i8* %6270 to double*
  %6274 = load double, double* %6273, align 1
  %6275 = inttoptr i64 %6269 to double*
  store double %6274, double* %6275
  %6276 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6277 = load i64, i64* %RBP
  %6278 = sub i64 %6277, 136
  %6279 = load i64, i64* %PC
  %6280 = add i64 %6279, 8
  store i64 %6280, i64* %PC
  %6281 = inttoptr i64 %6278 to double*
  %6282 = load double, double* %6281
  %6283 = bitcast i8* %6276 to double*
  store double %6282, double* %6283, align 1, !tbaa !2452
  %6284 = getelementptr inbounds i8, i8* %6276, i64 8
  %6285 = bitcast i8* %6284 to double*
  store double 0.000000e+00, double* %6285, align 1, !tbaa !2452
  %6286 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6287 = load i64, i64* %RBP
  %6288 = sub i64 %6287, 104
  %6289 = load i64, i64* %PC
  %6290 = add i64 %6289, 5
  store i64 %6290, i64* %PC
  %6291 = inttoptr i64 %6288 to double*
  %6292 = load double, double* %6291
  %6293 = bitcast i8* %6286 to double*
  store double %6292, double* %6293, align 1, !tbaa !2452
  %6294 = getelementptr inbounds i8, i8* %6286, i64 8
  %6295 = bitcast i8* %6294 to double*
  store double 0.000000e+00, double* %6295, align 1, !tbaa !2452
  %6296 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6297 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6298 = bitcast %union.vec128_t* %XMM0 to i8*
  %6299 = load i64, i64* %PC
  %6300 = add i64 %6299, 4
  store i64 %6300, i64* %PC
  %6301 = bitcast i8* %6297 to double*
  %6302 = load double, double* %6301, align 1
  %6303 = getelementptr inbounds i8, i8* %6297, i64 8
  %6304 = bitcast i8* %6303 to i64*
  %6305 = load i64, i64* %6304, align 1
  %6306 = bitcast i8* %6298 to double*
  %6307 = load double, double* %6306, align 1
  %6308 = fsub double %6302, %6307
  %6309 = bitcast i8* %6296 to double*
  store double %6308, double* %6309, align 1, !tbaa !2452
  %6310 = getelementptr inbounds i8, i8* %6296, i64 8
  %6311 = bitcast i8* %6310 to i64*
  store i64 %6305, i64* %6311, align 1, !tbaa !2452
  %6312 = load i64, i64* %RBP
  %6313 = sub i64 %6312, 104
  %6314 = bitcast %union.vec128_t* %XMM1 to i8*
  %6315 = load i64, i64* %PC
  %6316 = add i64 %6315, 5
  store i64 %6316, i64* %PC
  %6317 = bitcast i8* %6314 to double*
  %6318 = load double, double* %6317, align 1
  %6319 = inttoptr i64 %6313 to double*
  store double %6318, double* %6319
  %6320 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6321 = load i64, i64* %RBP
  %6322 = sub i64 %6321, 72
  %6323 = load i64, i64* %PC
  %6324 = add i64 %6323, 5
  store i64 %6324, i64* %PC
  %6325 = inttoptr i64 %6322 to double*
  %6326 = load double, double* %6325
  %6327 = bitcast i8* %6320 to double*
  store double %6326, double* %6327, align 1, !tbaa !2452
  %6328 = getelementptr inbounds i8, i8* %6320, i64 8
  %6329 = bitcast i8* %6328 to double*
  store double 0.000000e+00, double* %6329, align 1, !tbaa !2452
  %6330 = bitcast %union.vec128_t* %XMM0 to i8*
  %6331 = load i64, i64* %PC
  %6332 = add i64 %6331, 5
  store i64 %6332, i64* %PC
  %6333 = bitcast i8* %6330 to i64*
  %6334 = load i64, i64* %6333, align 1
  store i64 %6334, i64* %RDX, align 1, !tbaa !2428
  %6335 = load i64, i64* %RDX
  %6336 = load i64, i64* %RAX
  %6337 = load i64, i64* %PC
  %6338 = add i64 %6337, 3
  store i64 %6338, i64* %PC
  %6339 = xor i64 %6336, %6335
  store i64 %6339, i64* %RDX, align 8, !tbaa !2428
  %6340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6340, align 1, !tbaa !2432
  %6341 = trunc i64 %6339 to i32
  %6342 = and i32 %6341, 255
  %6343 = call i32 @llvm.ctpop.i32(i32 %6342) #17
  %6344 = trunc i32 %6343 to i8
  %6345 = and i8 %6344, 1
  %6346 = xor i8 %6345, 1
  %6347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6346, i8* %6347, align 1, !tbaa !2446
  %6348 = icmp eq i64 %6339, 0
  %6349 = zext i1 %6348 to i8
  %6350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6349, i8* %6350, align 1, !tbaa !2448
  %6351 = lshr i64 %6339, 63
  %6352 = trunc i64 %6351 to i8
  %6353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6352, i8* %6353, align 1, !tbaa !2449
  %6354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6354, align 1, !tbaa !2450
  %6355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6355, align 1, !tbaa !2447
  %6356 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6357 = load i64, i64* %RDX
  %6358 = load i64, i64* %PC
  %6359 = add i64 %6358, 5
  store i64 %6359, i64* %PC
  %6360 = bitcast i8* %6356 to i64*
  store i64 %6357, i64* %6360, align 1, !tbaa !2428
  %6361 = getelementptr inbounds i8, i8* %6356, i64 8
  %6362 = bitcast i8* %6361 to i64*
  store i64 0, i64* %6362, align 1, !tbaa !2428
  %6363 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6364 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6365 = load i64, i64* %RBP
  %6366 = sub i64 %6365, 96
  %6367 = load i64, i64* %PC
  %6368 = add i64 %6367, 5
  store i64 %6368, i64* %PC
  %6369 = bitcast i8* %6364 to double*
  %6370 = load double, double* %6369, align 1
  %6371 = getelementptr inbounds i8, i8* %6364, i64 8
  %6372 = bitcast i8* %6371 to i64*
  %6373 = load i64, i64* %6372, align 1
  %6374 = inttoptr i64 %6366 to double*
  %6375 = load double, double* %6374
  %6376 = fmul double %6370, %6375
  %6377 = bitcast i8* %6363 to double*
  store double %6376, double* %6377, align 1, !tbaa !2452
  %6378 = getelementptr inbounds i8, i8* %6363, i64 8
  %6379 = bitcast i8* %6378 to i64*
  store i64 %6373, i64* %6379, align 1, !tbaa !2452
  %6380 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6381 = load i64, i64* %RBP
  %6382 = sub i64 %6381, 64
  %6383 = load i64, i64* %PC
  %6384 = add i64 %6383, 5
  store i64 %6384, i64* %PC
  %6385 = inttoptr i64 %6382 to double*
  %6386 = load double, double* %6385
  %6387 = bitcast i8* %6380 to double*
  store double %6386, double* %6387, align 1, !tbaa !2452
  %6388 = getelementptr inbounds i8, i8* %6380, i64 8
  %6389 = bitcast i8* %6388 to double*
  store double 0.000000e+00, double* %6389, align 1, !tbaa !2452
  %6390 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6391 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6392 = load i64, i64* %RBP
  %6393 = sub i64 %6392, 104
  %6394 = load i64, i64* %PC
  %6395 = add i64 %6394, 5
  store i64 %6395, i64* %PC
  %6396 = bitcast i8* %6391 to double*
  %6397 = load double, double* %6396, align 1
  %6398 = getelementptr inbounds i8, i8* %6391, i64 8
  %6399 = bitcast i8* %6398 to i64*
  %6400 = load i64, i64* %6399, align 1
  %6401 = inttoptr i64 %6393 to double*
  %6402 = load double, double* %6401
  %6403 = fmul double %6397, %6402
  %6404 = bitcast i8* %6390 to double*
  store double %6403, double* %6404, align 1, !tbaa !2452
  %6405 = getelementptr inbounds i8, i8* %6390, i64 8
  %6406 = bitcast i8* %6405 to i64*
  store i64 %6400, i64* %6406, align 1, !tbaa !2452
  %6407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6408 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6409 = bitcast %union.vec128_t* %XMM1 to i8*
  %6410 = load i64, i64* %PC
  %6411 = add i64 %6410, 4
  store i64 %6411, i64* %PC
  %6412 = bitcast i8* %6408 to double*
  %6413 = load double, double* %6412, align 1
  %6414 = getelementptr inbounds i8, i8* %6408, i64 8
  %6415 = bitcast i8* %6414 to i64*
  %6416 = load i64, i64* %6415, align 1
  %6417 = bitcast i8* %6409 to double*
  %6418 = load double, double* %6417, align 1
  %6419 = fsub double %6413, %6418
  %6420 = bitcast i8* %6407 to double*
  store double %6419, double* %6420, align 1, !tbaa !2452
  %6421 = getelementptr inbounds i8, i8* %6407, i64 8
  %6422 = bitcast i8* %6421 to i64*
  store i64 %6416, i64* %6422, align 1, !tbaa !2452
  %6423 = load i64, i64* %RBP
  %6424 = sub i64 %6423, 16
  %6425 = load i64, i64* %PC
  %6426 = add i64 %6425, 4
  store i64 %6426, i64* %PC
  %6427 = inttoptr i64 %6424 to i64*
  %6428 = load i64, i64* %6427
  store i64 %6428, i64* %RDX, align 8, !tbaa !2428
  %6429 = load i64, i64* %RBP
  %6430 = sub i64 %6429, 28
  %6431 = load i64, i64* %PC
  %6432 = add i64 %6431, 3
  store i64 %6432, i64* %PC
  %6433 = inttoptr i64 %6430 to i32*
  %6434 = load i32, i32* %6433
  %6435 = zext i32 %6434 to i64
  store i64 %6435, i64* %RCX, align 8, !tbaa !2428
  %6436 = load i64, i64* %RCX
  %6437 = load i64, i64* %PC
  %6438 = add i64 %6437, 3
  store i64 %6438, i64* %PC
  %6439 = trunc i64 %6436 to i32
  %6440 = add i32 12, %6439
  %6441 = zext i32 %6440 to i64
  store i64 %6441, i64* %RCX, align 8, !tbaa !2428
  %6442 = icmp ult i32 %6440, %6439
  %6443 = icmp ult i32 %6440, 12
  %6444 = or i1 %6442, %6443
  %6445 = zext i1 %6444 to i8
  %6446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6445, i8* %6446, align 1, !tbaa !2432
  %6447 = and i32 %6440, 255
  %6448 = call i32 @llvm.ctpop.i32(i32 %6447) #17
  %6449 = trunc i32 %6448 to i8
  %6450 = and i8 %6449, 1
  %6451 = xor i8 %6450, 1
  %6452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6451, i8* %6452, align 1, !tbaa !2446
  %6453 = xor i64 12, %6436
  %6454 = trunc i64 %6453 to i32
  %6455 = xor i32 %6454, %6440
  %6456 = lshr i32 %6455, 4
  %6457 = trunc i32 %6456 to i8
  %6458 = and i8 %6457, 1
  %6459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6458, i8* %6459, align 1, !tbaa !2447
  %6460 = icmp eq i32 %6440, 0
  %6461 = zext i1 %6460 to i8
  %6462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6461, i8* %6462, align 1, !tbaa !2448
  %6463 = lshr i32 %6440, 31
  %6464 = trunc i32 %6463 to i8
  %6465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6464, i8* %6465, align 1, !tbaa !2449
  %6466 = lshr i32 %6439, 31
  %6467 = xor i32 %6463, %6466
  %6468 = add nuw nsw i32 %6467, %6463
  %6469 = icmp eq i32 %6468, 2
  %6470 = zext i1 %6469 to i8
  %6471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6470, i8* %6471, align 1, !tbaa !2450
  %6472 = load i32, i32* %ECX
  %6473 = zext i32 %6472 to i64
  %6474 = load i64, i64* %PC
  %6475 = add i64 %6474, 3
  store i64 %6475, i64* %PC
  %6476 = shl i64 %6473, 32
  %6477 = ashr exact i64 %6476, 32
  store i64 %6477, i64* %RSI, align 8, !tbaa !2428
  %6478 = load i64, i64* %RDX
  %6479 = load i64, i64* %RSI
  %6480 = mul i64 %6479, 8
  %6481 = add i64 %6480, %6478
  %6482 = bitcast %union.vec128_t* %XMM0 to i8*
  %6483 = load i64, i64* %PC
  %6484 = add i64 %6483, 5
  store i64 %6484, i64* %PC
  %6485 = bitcast i8* %6482 to double*
  %6486 = load double, double* %6485, align 1
  %6487 = inttoptr i64 %6481 to double*
  store double %6486, double* %6487
  %6488 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6489 = load i64, i64* %RBP
  %6490 = sub i64 %6489, 72
  %6491 = load i64, i64* %PC
  %6492 = add i64 %6491, 5
  store i64 %6492, i64* %PC
  %6493 = inttoptr i64 %6490 to double*
  %6494 = load double, double* %6493
  %6495 = bitcast i8* %6488 to double*
  store double %6494, double* %6495, align 1, !tbaa !2452
  %6496 = getelementptr inbounds i8, i8* %6488, i64 8
  %6497 = bitcast i8* %6496 to double*
  store double 0.000000e+00, double* %6497, align 1, !tbaa !2452
  %6498 = bitcast %union.vec128_t* %XMM0 to i8*
  %6499 = load i64, i64* %PC
  %6500 = add i64 %6499, 5
  store i64 %6500, i64* %PC
  %6501 = bitcast i8* %6498 to i64*
  %6502 = load i64, i64* %6501, align 1
  store i64 %6502, i64* %RDX, align 1, !tbaa !2428
  %6503 = load i64, i64* %RDX
  %6504 = load i64, i64* %RAX
  %6505 = load i64, i64* %PC
  %6506 = add i64 %6505, 3
  store i64 %6506, i64* %PC
  %6507 = xor i64 %6504, %6503
  store i64 %6507, i64* %RDX, align 8, !tbaa !2428
  %6508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6508, align 1, !tbaa !2432
  %6509 = trunc i64 %6507 to i32
  %6510 = and i32 %6509, 255
  %6511 = call i32 @llvm.ctpop.i32(i32 %6510) #17
  %6512 = trunc i32 %6511 to i8
  %6513 = and i8 %6512, 1
  %6514 = xor i8 %6513, 1
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6514, i8* %6515, align 1, !tbaa !2446
  %6516 = icmp eq i64 %6507, 0
  %6517 = zext i1 %6516 to i8
  %6518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6517, i8* %6518, align 1, !tbaa !2448
  %6519 = lshr i64 %6507, 63
  %6520 = trunc i64 %6519 to i8
  %6521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6520, i8* %6521, align 1, !tbaa !2449
  %6522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6522, align 1, !tbaa !2450
  %6523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6523, align 1, !tbaa !2447
  %6524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6525 = load i64, i64* %RDX
  %6526 = load i64, i64* %PC
  %6527 = add i64 %6526, 5
  store i64 %6527, i64* %PC
  %6528 = bitcast i8* %6524 to i64*
  store i64 %6525, i64* %6528, align 1, !tbaa !2428
  %6529 = getelementptr inbounds i8, i8* %6524, i64 8
  %6530 = bitcast i8* %6529 to i64*
  store i64 0, i64* %6530, align 1, !tbaa !2428
  %6531 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6532 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6533 = load i64, i64* %RBP
  %6534 = sub i64 %6533, 104
  %6535 = load i64, i64* %PC
  %6536 = add i64 %6535, 5
  store i64 %6536, i64* %PC
  %6537 = bitcast i8* %6532 to double*
  %6538 = load double, double* %6537, align 1
  %6539 = getelementptr inbounds i8, i8* %6532, i64 8
  %6540 = bitcast i8* %6539 to i64*
  %6541 = load i64, i64* %6540, align 1
  %6542 = inttoptr i64 %6534 to double*
  %6543 = load double, double* %6542
  %6544 = fmul double %6538, %6543
  %6545 = bitcast i8* %6531 to double*
  store double %6544, double* %6545, align 1, !tbaa !2452
  %6546 = getelementptr inbounds i8, i8* %6531, i64 8
  %6547 = bitcast i8* %6546 to i64*
  store i64 %6541, i64* %6547, align 1, !tbaa !2452
  %6548 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6549 = load i64, i64* %RBP
  %6550 = sub i64 %6549, 64
  %6551 = load i64, i64* %PC
  %6552 = add i64 %6551, 5
  store i64 %6552, i64* %PC
  %6553 = inttoptr i64 %6550 to double*
  %6554 = load double, double* %6553
  %6555 = bitcast i8* %6548 to double*
  store double %6554, double* %6555, align 1, !tbaa !2452
  %6556 = getelementptr inbounds i8, i8* %6548, i64 8
  %6557 = bitcast i8* %6556 to double*
  store double 0.000000e+00, double* %6557, align 1, !tbaa !2452
  %6558 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6559 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6560 = load i64, i64* %RBP
  %6561 = sub i64 %6560, 96
  %6562 = load i64, i64* %PC
  %6563 = add i64 %6562, 5
  store i64 %6563, i64* %PC
  %6564 = bitcast i8* %6559 to double*
  %6565 = load double, double* %6564, align 1
  %6566 = getelementptr inbounds i8, i8* %6559, i64 8
  %6567 = bitcast i8* %6566 to i64*
  %6568 = load i64, i64* %6567, align 1
  %6569 = inttoptr i64 %6561 to double*
  %6570 = load double, double* %6569
  %6571 = fmul double %6565, %6570
  %6572 = bitcast i8* %6558 to double*
  store double %6571, double* %6572, align 1, !tbaa !2452
  %6573 = getelementptr inbounds i8, i8* %6558, i64 8
  %6574 = bitcast i8* %6573 to i64*
  store i64 %6568, i64* %6574, align 1, !tbaa !2452
  %6575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6576 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6577 = bitcast %union.vec128_t* %XMM1 to i8*
  %6578 = load i64, i64* %PC
  %6579 = add i64 %6578, 4
  store i64 %6579, i64* %PC
  %6580 = bitcast i8* %6576 to double*
  %6581 = load double, double* %6580, align 1
  %6582 = getelementptr inbounds i8, i8* %6576, i64 8
  %6583 = bitcast i8* %6582 to i64*
  %6584 = load i64, i64* %6583, align 1
  %6585 = bitcast i8* %6577 to double*
  %6586 = load double, double* %6585, align 1
  %6587 = fadd double %6581, %6586
  %6588 = bitcast i8* %6575 to double*
  store double %6587, double* %6588, align 1, !tbaa !2452
  %6589 = getelementptr inbounds i8, i8* %6575, i64 8
  %6590 = bitcast i8* %6589 to i64*
  store i64 %6584, i64* %6590, align 1, !tbaa !2452
  %6591 = load i64, i64* %RBP
  %6592 = sub i64 %6591, 16
  %6593 = load i64, i64* %PC
  %6594 = add i64 %6593, 4
  store i64 %6594, i64* %PC
  %6595 = inttoptr i64 %6592 to i64*
  %6596 = load i64, i64* %6595
  store i64 %6596, i64* %RAX, align 8, !tbaa !2428
  %6597 = load i64, i64* %RBP
  %6598 = sub i64 %6597, 28
  %6599 = load i64, i64* %PC
  %6600 = add i64 %6599, 3
  store i64 %6600, i64* %PC
  %6601 = inttoptr i64 %6598 to i32*
  %6602 = load i32, i32* %6601
  %6603 = zext i32 %6602 to i64
  store i64 %6603, i64* %RCX, align 8, !tbaa !2428
  %6604 = load i64, i64* %RCX
  %6605 = load i64, i64* %PC
  %6606 = add i64 %6605, 3
  store i64 %6606, i64* %PC
  %6607 = trunc i64 %6604 to i32
  %6608 = add i32 13, %6607
  %6609 = zext i32 %6608 to i64
  store i64 %6609, i64* %RCX, align 8, !tbaa !2428
  %6610 = icmp ult i32 %6608, %6607
  %6611 = icmp ult i32 %6608, 13
  %6612 = or i1 %6610, %6611
  %6613 = zext i1 %6612 to i8
  %6614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6613, i8* %6614, align 1, !tbaa !2432
  %6615 = and i32 %6608, 255
  %6616 = call i32 @llvm.ctpop.i32(i32 %6615) #17
  %6617 = trunc i32 %6616 to i8
  %6618 = and i8 %6617, 1
  %6619 = xor i8 %6618, 1
  %6620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6619, i8* %6620, align 1, !tbaa !2446
  %6621 = xor i64 13, %6604
  %6622 = trunc i64 %6621 to i32
  %6623 = xor i32 %6622, %6608
  %6624 = lshr i32 %6623, 4
  %6625 = trunc i32 %6624 to i8
  %6626 = and i8 %6625, 1
  %6627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6626, i8* %6627, align 1, !tbaa !2447
  %6628 = icmp eq i32 %6608, 0
  %6629 = zext i1 %6628 to i8
  %6630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6629, i8* %6630, align 1, !tbaa !2448
  %6631 = lshr i32 %6608, 31
  %6632 = trunc i32 %6631 to i8
  %6633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6632, i8* %6633, align 1, !tbaa !2449
  %6634 = lshr i32 %6607, 31
  %6635 = xor i32 %6631, %6634
  %6636 = add nuw nsw i32 %6635, %6631
  %6637 = icmp eq i32 %6636, 2
  %6638 = zext i1 %6637 to i8
  %6639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6638, i8* %6639, align 1, !tbaa !2450
  %6640 = load i32, i32* %ECX
  %6641 = zext i32 %6640 to i64
  %6642 = load i64, i64* %PC
  %6643 = add i64 %6642, 3
  store i64 %6643, i64* %PC
  %6644 = shl i64 %6641, 32
  %6645 = ashr exact i64 %6644, 32
  store i64 %6645, i64* %RDX, align 8, !tbaa !2428
  %6646 = load i64, i64* %RAX
  %6647 = load i64, i64* %RDX
  %6648 = mul i64 %6647, 8
  %6649 = add i64 %6648, %6646
  %6650 = bitcast %union.vec128_t* %XMM0 to i8*
  %6651 = load i64, i64* %PC
  %6652 = add i64 %6651, 5
  store i64 %6652, i64* %PC
  %6653 = bitcast i8* %6650 to double*
  %6654 = load double, double* %6653, align 1
  %6655 = inttoptr i64 %6649 to double*
  store double %6654, double* %6655
  %6656 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6657 = load i64, i64* %RBP
  %6658 = sub i64 %6657, 112
  %6659 = load i64, i64* %PC
  %6660 = add i64 %6659, 5
  store i64 %6660, i64* %PC
  %6661 = inttoptr i64 %6658 to double*
  %6662 = load double, double* %6661
  %6663 = bitcast i8* %6656 to double*
  store double %6662, double* %6663, align 1, !tbaa !2452
  %6664 = getelementptr inbounds i8, i8* %6656, i64 8
  %6665 = bitcast i8* %6664 to double*
  store double 0.000000e+00, double* %6665, align 1, !tbaa !2452
  %6666 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6668 = load i64, i64* %RBP
  %6669 = sub i64 %6668, 152
  %6670 = load i64, i64* %PC
  %6671 = add i64 %6670, 8
  store i64 %6671, i64* %PC
  %6672 = bitcast i8* %6667 to double*
  %6673 = load double, double* %6672, align 1
  %6674 = getelementptr inbounds i8, i8* %6667, i64 8
  %6675 = bitcast i8* %6674 to i64*
  %6676 = load i64, i64* %6675, align 1
  %6677 = inttoptr i64 %6669 to double*
  %6678 = load double, double* %6677
  %6679 = fsub double %6673, %6678
  %6680 = bitcast i8* %6666 to double*
  store double %6679, double* %6680, align 1, !tbaa !2452
  %6681 = getelementptr inbounds i8, i8* %6666, i64 8
  %6682 = bitcast i8* %6681 to i64*
  store i64 %6676, i64* %6682, align 1, !tbaa !2452
  %6683 = load i64, i64* %RBP
  %6684 = sub i64 %6683, 96
  %6685 = bitcast %union.vec128_t* %XMM0 to i8*
  %6686 = load i64, i64* %PC
  %6687 = add i64 %6686, 5
  store i64 %6687, i64* %PC
  %6688 = bitcast i8* %6685 to double*
  %6689 = load double, double* %6688, align 1
  %6690 = inttoptr i64 %6684 to double*
  store double %6689, double* %6690
  %6691 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6692 = load i64, i64* %RBP
  %6693 = sub i64 %6692, 120
  %6694 = load i64, i64* %PC
  %6695 = add i64 %6694, 5
  store i64 %6695, i64* %PC
  %6696 = inttoptr i64 %6693 to double*
  %6697 = load double, double* %6696
  %6698 = bitcast i8* %6691 to double*
  store double %6697, double* %6698, align 1, !tbaa !2452
  %6699 = getelementptr inbounds i8, i8* %6691, i64 8
  %6700 = bitcast i8* %6699 to double*
  store double 0.000000e+00, double* %6700, align 1, !tbaa !2452
  %6701 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6702 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6703 = load i64, i64* %RBP
  %6704 = sub i64 %6703, 144
  %6705 = load i64, i64* %PC
  %6706 = add i64 %6705, 8
  store i64 %6706, i64* %PC
  %6707 = bitcast i8* %6702 to double*
  %6708 = load double, double* %6707, align 1
  %6709 = getelementptr inbounds i8, i8* %6702, i64 8
  %6710 = bitcast i8* %6709 to i64*
  %6711 = load i64, i64* %6710, align 1
  %6712 = inttoptr i64 %6704 to double*
  %6713 = load double, double* %6712
  %6714 = fadd double %6708, %6713
  %6715 = bitcast i8* %6701 to double*
  store double %6714, double* %6715, align 1, !tbaa !2452
  %6716 = getelementptr inbounds i8, i8* %6701, i64 8
  %6717 = bitcast i8* %6716 to i64*
  store i64 %6711, i64* %6717, align 1, !tbaa !2452
  %6718 = load i64, i64* %RBP
  %6719 = sub i64 %6718, 104
  %6720 = bitcast %union.vec128_t* %XMM0 to i8*
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 5
  store i64 %6722, i64* %PC
  %6723 = bitcast i8* %6720 to double*
  %6724 = load double, double* %6723, align 1
  %6725 = inttoptr i64 %6719 to double*
  store double %6724, double* %6725
  %6726 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6727 = load i64, i64* %RBP
  %6728 = sub i64 %6727, 48
  %6729 = load i64, i64* %PC
  %6730 = add i64 %6729, 5
  store i64 %6730, i64* %PC
  %6731 = inttoptr i64 %6728 to double*
  %6732 = load double, double* %6731
  %6733 = bitcast i8* %6726 to double*
  store double %6732, double* %6733, align 1, !tbaa !2452
  %6734 = getelementptr inbounds i8, i8* %6726, i64 8
  %6735 = bitcast i8* %6734 to double*
  store double 0.000000e+00, double* %6735, align 1, !tbaa !2452
  %6736 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6737 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6738 = load i64, i64* %RBP
  %6739 = sub i64 %6738, 96
  %6740 = load i64, i64* %PC
  %6741 = add i64 %6740, 5
  store i64 %6741, i64* %PC
  %6742 = bitcast i8* %6737 to double*
  %6743 = load double, double* %6742, align 1
  %6744 = getelementptr inbounds i8, i8* %6737, i64 8
  %6745 = bitcast i8* %6744 to i64*
  %6746 = load i64, i64* %6745, align 1
  %6747 = inttoptr i64 %6739 to double*
  %6748 = load double, double* %6747
  %6749 = fmul double %6743, %6748
  %6750 = bitcast i8* %6736 to double*
  store double %6749, double* %6750, align 1, !tbaa !2452
  %6751 = getelementptr inbounds i8, i8* %6736, i64 8
  %6752 = bitcast i8* %6751 to i64*
  store i64 %6746, i64* %6752, align 1, !tbaa !2452
  %6753 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6754 = load i64, i64* %RBP
  %6755 = sub i64 %6754, 56
  %6756 = load i64, i64* %PC
  %6757 = add i64 %6756, 5
  store i64 %6757, i64* %PC
  %6758 = inttoptr i64 %6755 to double*
  %6759 = load double, double* %6758
  %6760 = bitcast i8* %6753 to double*
  store double %6759, double* %6760, align 1, !tbaa !2452
  %6761 = getelementptr inbounds i8, i8* %6753, i64 8
  %6762 = bitcast i8* %6761 to double*
  store double 0.000000e+00, double* %6762, align 1, !tbaa !2452
  %6763 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6764 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6765 = load i64, i64* %RBP
  %6766 = sub i64 %6765, 104
  %6767 = load i64, i64* %PC
  %6768 = add i64 %6767, 5
  store i64 %6768, i64* %PC
  %6769 = bitcast i8* %6764 to double*
  %6770 = load double, double* %6769, align 1
  %6771 = getelementptr inbounds i8, i8* %6764, i64 8
  %6772 = bitcast i8* %6771 to i64*
  %6773 = load i64, i64* %6772, align 1
  %6774 = inttoptr i64 %6766 to double*
  %6775 = load double, double* %6774
  %6776 = fmul double %6770, %6775
  %6777 = bitcast i8* %6763 to double*
  store double %6776, double* %6777, align 1, !tbaa !2452
  %6778 = getelementptr inbounds i8, i8* %6763, i64 8
  %6779 = bitcast i8* %6778 to i64*
  store i64 %6773, i64* %6779, align 1, !tbaa !2452
  %6780 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6781 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6782 = bitcast %union.vec128_t* %XMM1 to i8*
  %6783 = load i64, i64* %PC
  %6784 = add i64 %6783, 4
  store i64 %6784, i64* %PC
  %6785 = bitcast i8* %6781 to double*
  %6786 = load double, double* %6785, align 1
  %6787 = getelementptr inbounds i8, i8* %6781, i64 8
  %6788 = bitcast i8* %6787 to i64*
  %6789 = load i64, i64* %6788, align 1
  %6790 = bitcast i8* %6782 to double*
  %6791 = load double, double* %6790, align 1
  %6792 = fsub double %6786, %6791
  %6793 = bitcast i8* %6780 to double*
  store double %6792, double* %6793, align 1, !tbaa !2452
  %6794 = getelementptr inbounds i8, i8* %6780, i64 8
  %6795 = bitcast i8* %6794 to i64*
  store i64 %6789, i64* %6795, align 1, !tbaa !2452
  %6796 = load i64, i64* %RBP
  %6797 = sub i64 %6796, 16
  %6798 = load i64, i64* %PC
  %6799 = add i64 %6798, 4
  store i64 %6799, i64* %PC
  %6800 = inttoptr i64 %6797 to i64*
  %6801 = load i64, i64* %6800
  store i64 %6801, i64* %RAX, align 8, !tbaa !2428
  %6802 = load i64, i64* %RBP
  %6803 = sub i64 %6802, 28
  %6804 = load i64, i64* %PC
  %6805 = add i64 %6804, 3
  store i64 %6805, i64* %PC
  %6806 = inttoptr i64 %6803 to i32*
  %6807 = load i32, i32* %6806
  %6808 = zext i32 %6807 to i64
  store i64 %6808, i64* %RCX, align 8, !tbaa !2428
  %6809 = load i64, i64* %RCX
  %6810 = load i64, i64* %PC
  %6811 = add i64 %6810, 3
  store i64 %6811, i64* %PC
  %6812 = trunc i64 %6809 to i32
  %6813 = add i32 10, %6812
  %6814 = zext i32 %6813 to i64
  store i64 %6814, i64* %RCX, align 8, !tbaa !2428
  %6815 = icmp ult i32 %6813, %6812
  %6816 = icmp ult i32 %6813, 10
  %6817 = or i1 %6815, %6816
  %6818 = zext i1 %6817 to i8
  %6819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6818, i8* %6819, align 1, !tbaa !2432
  %6820 = and i32 %6813, 255
  %6821 = call i32 @llvm.ctpop.i32(i32 %6820) #17
  %6822 = trunc i32 %6821 to i8
  %6823 = and i8 %6822, 1
  %6824 = xor i8 %6823, 1
  %6825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6824, i8* %6825, align 1, !tbaa !2446
  %6826 = xor i64 10, %6809
  %6827 = trunc i64 %6826 to i32
  %6828 = xor i32 %6827, %6813
  %6829 = lshr i32 %6828, 4
  %6830 = trunc i32 %6829 to i8
  %6831 = and i8 %6830, 1
  %6832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6831, i8* %6832, align 1, !tbaa !2447
  %6833 = icmp eq i32 %6813, 0
  %6834 = zext i1 %6833 to i8
  %6835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6834, i8* %6835, align 1, !tbaa !2448
  %6836 = lshr i32 %6813, 31
  %6837 = trunc i32 %6836 to i8
  %6838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6837, i8* %6838, align 1, !tbaa !2449
  %6839 = lshr i32 %6812, 31
  %6840 = xor i32 %6836, %6839
  %6841 = add nuw nsw i32 %6840, %6836
  %6842 = icmp eq i32 %6841, 2
  %6843 = zext i1 %6842 to i8
  %6844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6843, i8* %6844, align 1, !tbaa !2450
  %6845 = load i32, i32* %ECX
  %6846 = zext i32 %6845 to i64
  %6847 = load i64, i64* %PC
  %6848 = add i64 %6847, 3
  store i64 %6848, i64* %PC
  %6849 = shl i64 %6846, 32
  %6850 = ashr exact i64 %6849, 32
  store i64 %6850, i64* %RDX, align 8, !tbaa !2428
  %6851 = load i64, i64* %RAX
  %6852 = load i64, i64* %RDX
  %6853 = mul i64 %6852, 8
  %6854 = add i64 %6853, %6851
  %6855 = bitcast %union.vec128_t* %XMM0 to i8*
  %6856 = load i64, i64* %PC
  %6857 = add i64 %6856, 5
  store i64 %6857, i64* %PC
  %6858 = bitcast i8* %6855 to double*
  %6859 = load double, double* %6858, align 1
  %6860 = inttoptr i64 %6854 to double*
  store double %6859, double* %6860
  %6861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6862 = load i64, i64* %RBP
  %6863 = sub i64 %6862, 48
  %6864 = load i64, i64* %PC
  %6865 = add i64 %6864, 5
  store i64 %6865, i64* %PC
  %6866 = inttoptr i64 %6863 to double*
  %6867 = load double, double* %6866
  %6868 = bitcast i8* %6861 to double*
  store double %6867, double* %6868, align 1, !tbaa !2452
  %6869 = getelementptr inbounds i8, i8* %6861, i64 8
  %6870 = bitcast i8* %6869 to double*
  store double 0.000000e+00, double* %6870, align 1, !tbaa !2452
  %6871 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6872 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6873 = load i64, i64* %RBP
  %6874 = sub i64 %6873, 104
  %6875 = load i64, i64* %PC
  %6876 = add i64 %6875, 5
  store i64 %6876, i64* %PC
  %6877 = bitcast i8* %6872 to double*
  %6878 = load double, double* %6877, align 1
  %6879 = getelementptr inbounds i8, i8* %6872, i64 8
  %6880 = bitcast i8* %6879 to i64*
  %6881 = load i64, i64* %6880, align 1
  %6882 = inttoptr i64 %6874 to double*
  %6883 = load double, double* %6882
  %6884 = fmul double %6878, %6883
  %6885 = bitcast i8* %6871 to double*
  store double %6884, double* %6885, align 1, !tbaa !2452
  %6886 = getelementptr inbounds i8, i8* %6871, i64 8
  %6887 = bitcast i8* %6886 to i64*
  store i64 %6881, i64* %6887, align 1, !tbaa !2452
  %6888 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6889 = load i64, i64* %RBP
  %6890 = sub i64 %6889, 56
  %6891 = load i64, i64* %PC
  %6892 = add i64 %6891, 5
  store i64 %6892, i64* %PC
  %6893 = inttoptr i64 %6890 to double*
  %6894 = load double, double* %6893
  %6895 = bitcast i8* %6888 to double*
  store double %6894, double* %6895, align 1, !tbaa !2452
  %6896 = getelementptr inbounds i8, i8* %6888, i64 8
  %6897 = bitcast i8* %6896 to double*
  store double 0.000000e+00, double* %6897, align 1, !tbaa !2452
  %6898 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6899 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6900 = load i64, i64* %RBP
  %6901 = sub i64 %6900, 96
  %6902 = load i64, i64* %PC
  %6903 = add i64 %6902, 5
  store i64 %6903, i64* %PC
  %6904 = bitcast i8* %6899 to double*
  %6905 = load double, double* %6904, align 1
  %6906 = getelementptr inbounds i8, i8* %6899, i64 8
  %6907 = bitcast i8* %6906 to i64*
  %6908 = load i64, i64* %6907, align 1
  %6909 = inttoptr i64 %6901 to double*
  %6910 = load double, double* %6909
  %6911 = fmul double %6905, %6910
  %6912 = bitcast i8* %6898 to double*
  store double %6911, double* %6912, align 1, !tbaa !2452
  %6913 = getelementptr inbounds i8, i8* %6898, i64 8
  %6914 = bitcast i8* %6913 to i64*
  store i64 %6908, i64* %6914, align 1, !tbaa !2452
  %6915 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6916 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6917 = bitcast %union.vec128_t* %XMM1 to i8*
  %6918 = load i64, i64* %PC
  %6919 = add i64 %6918, 4
  store i64 %6919, i64* %PC
  %6920 = bitcast i8* %6916 to double*
  %6921 = load double, double* %6920, align 1
  %6922 = getelementptr inbounds i8, i8* %6916, i64 8
  %6923 = bitcast i8* %6922 to i64*
  %6924 = load i64, i64* %6923, align 1
  %6925 = bitcast i8* %6917 to double*
  %6926 = load double, double* %6925, align 1
  %6927 = fadd double %6921, %6926
  %6928 = bitcast i8* %6915 to double*
  store double %6927, double* %6928, align 1, !tbaa !2452
  %6929 = getelementptr inbounds i8, i8* %6915, i64 8
  %6930 = bitcast i8* %6929 to i64*
  store i64 %6924, i64* %6930, align 1, !tbaa !2452
  %6931 = load i64, i64* %RBP
  %6932 = sub i64 %6931, 16
  %6933 = load i64, i64* %PC
  %6934 = add i64 %6933, 4
  store i64 %6934, i64* %PC
  %6935 = inttoptr i64 %6932 to i64*
  %6936 = load i64, i64* %6935
  store i64 %6936, i64* %RAX, align 8, !tbaa !2428
  %6937 = load i64, i64* %RBP
  %6938 = sub i64 %6937, 28
  %6939 = load i64, i64* %PC
  %6940 = add i64 %6939, 3
  store i64 %6940, i64* %PC
  %6941 = inttoptr i64 %6938 to i32*
  %6942 = load i32, i32* %6941
  %6943 = zext i32 %6942 to i64
  store i64 %6943, i64* %RCX, align 8, !tbaa !2428
  %6944 = load i64, i64* %RCX
  %6945 = load i64, i64* %PC
  %6946 = add i64 %6945, 3
  store i64 %6946, i64* %PC
  %6947 = trunc i64 %6944 to i32
  %6948 = add i32 11, %6947
  %6949 = zext i32 %6948 to i64
  store i64 %6949, i64* %RCX, align 8, !tbaa !2428
  %6950 = icmp ult i32 %6948, %6947
  %6951 = icmp ult i32 %6948, 11
  %6952 = or i1 %6950, %6951
  %6953 = zext i1 %6952 to i8
  %6954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6953, i8* %6954, align 1, !tbaa !2432
  %6955 = and i32 %6948, 255
  %6956 = call i32 @llvm.ctpop.i32(i32 %6955) #17
  %6957 = trunc i32 %6956 to i8
  %6958 = and i8 %6957, 1
  %6959 = xor i8 %6958, 1
  %6960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6959, i8* %6960, align 1, !tbaa !2446
  %6961 = xor i64 11, %6944
  %6962 = trunc i64 %6961 to i32
  %6963 = xor i32 %6962, %6948
  %6964 = lshr i32 %6963, 4
  %6965 = trunc i32 %6964 to i8
  %6966 = and i8 %6965, 1
  %6967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6966, i8* %6967, align 1, !tbaa !2447
  %6968 = icmp eq i32 %6948, 0
  %6969 = zext i1 %6968 to i8
  %6970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6969, i8* %6970, align 1, !tbaa !2448
  %6971 = lshr i32 %6948, 31
  %6972 = trunc i32 %6971 to i8
  %6973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6972, i8* %6973, align 1, !tbaa !2449
  %6974 = lshr i32 %6947, 31
  %6975 = xor i32 %6971, %6974
  %6976 = add nuw nsw i32 %6975, %6971
  %6977 = icmp eq i32 %6976, 2
  %6978 = zext i1 %6977 to i8
  %6979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6978, i8* %6979, align 1, !tbaa !2450
  %6980 = load i32, i32* %ECX
  %6981 = zext i32 %6980 to i64
  %6982 = load i64, i64* %PC
  %6983 = add i64 %6982, 3
  store i64 %6983, i64* %PC
  %6984 = shl i64 %6981, 32
  %6985 = ashr exact i64 %6984, 32
  store i64 %6985, i64* %RDX, align 8, !tbaa !2428
  %6986 = load i64, i64* %RAX
  %6987 = load i64, i64* %RDX
  %6988 = mul i64 %6987, 8
  %6989 = add i64 %6988, %6986
  %6990 = bitcast %union.vec128_t* %XMM0 to i8*
  %6991 = load i64, i64* %PC
  %6992 = add i64 %6991, 5
  store i64 %6992, i64* %PC
  %6993 = bitcast i8* %6990 to double*
  %6994 = load double, double* %6993, align 1
  %6995 = inttoptr i64 %6989 to double*
  store double %6994, double* %6995
  %6996 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6997 = load i64, i64* %RBP
  %6998 = sub i64 %6997, 112
  %6999 = load i64, i64* %PC
  %7000 = add i64 %6999, 5
  store i64 %7000, i64* %PC
  %7001 = inttoptr i64 %6998 to double*
  %7002 = load double, double* %7001
  %7003 = bitcast i8* %6996 to double*
  store double %7002, double* %7003, align 1, !tbaa !2452
  %7004 = getelementptr inbounds i8, i8* %6996, i64 8
  %7005 = bitcast i8* %7004 to double*
  store double 0.000000e+00, double* %7005, align 1, !tbaa !2452
  %7006 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7008 = load i64, i64* %RBP
  %7009 = sub i64 %7008, 152
  %7010 = load i64, i64* %PC
  %7011 = add i64 %7010, 8
  store i64 %7011, i64* %PC
  %7012 = bitcast i8* %7007 to double*
  %7013 = load double, double* %7012, align 1
  %7014 = getelementptr inbounds i8, i8* %7007, i64 8
  %7015 = bitcast i8* %7014 to i64*
  %7016 = load i64, i64* %7015, align 1
  %7017 = inttoptr i64 %7009 to double*
  %7018 = load double, double* %7017
  %7019 = fadd double %7013, %7018
  %7020 = bitcast i8* %7006 to double*
  store double %7019, double* %7020, align 1, !tbaa !2452
  %7021 = getelementptr inbounds i8, i8* %7006, i64 8
  %7022 = bitcast i8* %7021 to i64*
  store i64 %7016, i64* %7022, align 1, !tbaa !2452
  %7023 = load i64, i64* %RBP
  %7024 = sub i64 %7023, 96
  %7025 = bitcast %union.vec128_t* %XMM0 to i8*
  %7026 = load i64, i64* %PC
  %7027 = add i64 %7026, 5
  store i64 %7027, i64* %PC
  %7028 = bitcast i8* %7025 to double*
  %7029 = load double, double* %7028, align 1
  %7030 = inttoptr i64 %7024 to double*
  store double %7029, double* %7030
  %7031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7032 = load i64, i64* %RBP
  %7033 = sub i64 %7032, 120
  %7034 = load i64, i64* %PC
  %7035 = add i64 %7034, 5
  store i64 %7035, i64* %PC
  %7036 = inttoptr i64 %7033 to double*
  %7037 = load double, double* %7036
  %7038 = bitcast i8* %7031 to double*
  store double %7037, double* %7038, align 1, !tbaa !2452
  %7039 = getelementptr inbounds i8, i8* %7031, i64 8
  %7040 = bitcast i8* %7039 to double*
  store double 0.000000e+00, double* %7040, align 1, !tbaa !2452
  %7041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7042 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7043 = load i64, i64* %RBP
  %7044 = sub i64 %7043, 144
  %7045 = load i64, i64* %PC
  %7046 = add i64 %7045, 8
  store i64 %7046, i64* %PC
  %7047 = bitcast i8* %7042 to double*
  %7048 = load double, double* %7047, align 1
  %7049 = getelementptr inbounds i8, i8* %7042, i64 8
  %7050 = bitcast i8* %7049 to i64*
  %7051 = load i64, i64* %7050, align 1
  %7052 = inttoptr i64 %7044 to double*
  %7053 = load double, double* %7052
  %7054 = fsub double %7048, %7053
  %7055 = bitcast i8* %7041 to double*
  store double %7054, double* %7055, align 1, !tbaa !2452
  %7056 = getelementptr inbounds i8, i8* %7041, i64 8
  %7057 = bitcast i8* %7056 to i64*
  store i64 %7051, i64* %7057, align 1, !tbaa !2452
  %7058 = load i64, i64* %RBP
  %7059 = sub i64 %7058, 104
  %7060 = bitcast %union.vec128_t* %XMM0 to i8*
  %7061 = load i64, i64* %PC
  %7062 = add i64 %7061, 5
  store i64 %7062, i64* %PC
  %7063 = bitcast i8* %7060 to double*
  %7064 = load double, double* %7063, align 1
  %7065 = inttoptr i64 %7059 to double*
  store double %7064, double* %7065
  %7066 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7067 = load i64, i64* %RBP
  %7068 = sub i64 %7067, 80
  %7069 = load i64, i64* %PC
  %7070 = add i64 %7069, 5
  store i64 %7070, i64* %PC
  %7071 = inttoptr i64 %7068 to double*
  %7072 = load double, double* %7071
  %7073 = bitcast i8* %7066 to double*
  store double %7072, double* %7073, align 1, !tbaa !2452
  %7074 = getelementptr inbounds i8, i8* %7066, i64 8
  %7075 = bitcast i8* %7074 to double*
  store double 0.000000e+00, double* %7075, align 1, !tbaa !2452
  %7076 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7077 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7078 = load i64, i64* %RBP
  %7079 = sub i64 %7078, 96
  %7080 = load i64, i64* %PC
  %7081 = add i64 %7080, 5
  store i64 %7081, i64* %PC
  %7082 = bitcast i8* %7077 to double*
  %7083 = load double, double* %7082, align 1
  %7084 = getelementptr inbounds i8, i8* %7077, i64 8
  %7085 = bitcast i8* %7084 to i64*
  %7086 = load i64, i64* %7085, align 1
  %7087 = inttoptr i64 %7079 to double*
  %7088 = load double, double* %7087
  %7089 = fmul double %7083, %7088
  %7090 = bitcast i8* %7076 to double*
  store double %7089, double* %7090, align 1, !tbaa !2452
  %7091 = getelementptr inbounds i8, i8* %7076, i64 8
  %7092 = bitcast i8* %7091 to i64*
  store i64 %7086, i64* %7092, align 1, !tbaa !2452
  %7093 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7094 = load i64, i64* %RBP
  %7095 = sub i64 %7094, 88
  %7096 = load i64, i64* %PC
  %7097 = add i64 %7096, 5
  store i64 %7097, i64* %PC
  %7098 = inttoptr i64 %7095 to double*
  %7099 = load double, double* %7098
  %7100 = bitcast i8* %7093 to double*
  store double %7099, double* %7100, align 1, !tbaa !2452
  %7101 = getelementptr inbounds i8, i8* %7093, i64 8
  %7102 = bitcast i8* %7101 to double*
  store double 0.000000e+00, double* %7102, align 1, !tbaa !2452
  %7103 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7104 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7105 = load i64, i64* %RBP
  %7106 = sub i64 %7105, 104
  %7107 = load i64, i64* %PC
  %7108 = add i64 %7107, 5
  store i64 %7108, i64* %PC
  %7109 = bitcast i8* %7104 to double*
  %7110 = load double, double* %7109, align 1
  %7111 = getelementptr inbounds i8, i8* %7104, i64 8
  %7112 = bitcast i8* %7111 to i64*
  %7113 = load i64, i64* %7112, align 1
  %7114 = inttoptr i64 %7106 to double*
  %7115 = load double, double* %7114
  %7116 = fmul double %7110, %7115
  %7117 = bitcast i8* %7103 to double*
  store double %7116, double* %7117, align 1, !tbaa !2452
  %7118 = getelementptr inbounds i8, i8* %7103, i64 8
  %7119 = bitcast i8* %7118 to i64*
  store i64 %7113, i64* %7119, align 1, !tbaa !2452
  %7120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7121 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7122 = bitcast %union.vec128_t* %XMM1 to i8*
  %7123 = load i64, i64* %PC
  %7124 = add i64 %7123, 4
  store i64 %7124, i64* %PC
  %7125 = bitcast i8* %7121 to double*
  %7126 = load double, double* %7125, align 1
  %7127 = getelementptr inbounds i8, i8* %7121, i64 8
  %7128 = bitcast i8* %7127 to i64*
  %7129 = load i64, i64* %7128, align 1
  %7130 = bitcast i8* %7122 to double*
  %7131 = load double, double* %7130, align 1
  %7132 = fsub double %7126, %7131
  %7133 = bitcast i8* %7120 to double*
  store double %7132, double* %7133, align 1, !tbaa !2452
  %7134 = getelementptr inbounds i8, i8* %7120, i64 8
  %7135 = bitcast i8* %7134 to i64*
  store i64 %7129, i64* %7135, align 1, !tbaa !2452
  %7136 = load i64, i64* %RBP
  %7137 = sub i64 %7136, 16
  %7138 = load i64, i64* %PC
  %7139 = add i64 %7138, 4
  store i64 %7139, i64* %PC
  %7140 = inttoptr i64 %7137 to i64*
  %7141 = load i64, i64* %7140
  store i64 %7141, i64* %RAX, align 8, !tbaa !2428
  %7142 = load i64, i64* %RBP
  %7143 = sub i64 %7142, 28
  %7144 = load i64, i64* %PC
  %7145 = add i64 %7144, 3
  store i64 %7145, i64* %PC
  %7146 = inttoptr i64 %7143 to i32*
  %7147 = load i32, i32* %7146
  %7148 = zext i32 %7147 to i64
  store i64 %7148, i64* %RCX, align 8, !tbaa !2428
  %7149 = load i64, i64* %RCX
  %7150 = load i64, i64* %PC
  %7151 = add i64 %7150, 3
  store i64 %7151, i64* %PC
  %7152 = trunc i64 %7149 to i32
  %7153 = add i32 14, %7152
  %7154 = zext i32 %7153 to i64
  store i64 %7154, i64* %RCX, align 8, !tbaa !2428
  %7155 = icmp ult i32 %7153, %7152
  %7156 = icmp ult i32 %7153, 14
  %7157 = or i1 %7155, %7156
  %7158 = zext i1 %7157 to i8
  %7159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7158, i8* %7159, align 1, !tbaa !2432
  %7160 = and i32 %7153, 255
  %7161 = call i32 @llvm.ctpop.i32(i32 %7160) #17
  %7162 = trunc i32 %7161 to i8
  %7163 = and i8 %7162, 1
  %7164 = xor i8 %7163, 1
  %7165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7164, i8* %7165, align 1, !tbaa !2446
  %7166 = xor i64 14, %7149
  %7167 = trunc i64 %7166 to i32
  %7168 = xor i32 %7167, %7153
  %7169 = lshr i32 %7168, 4
  %7170 = trunc i32 %7169 to i8
  %7171 = and i8 %7170, 1
  %7172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7171, i8* %7172, align 1, !tbaa !2447
  %7173 = icmp eq i32 %7153, 0
  %7174 = zext i1 %7173 to i8
  %7175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7174, i8* %7175, align 1, !tbaa !2448
  %7176 = lshr i32 %7153, 31
  %7177 = trunc i32 %7176 to i8
  %7178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7177, i8* %7178, align 1, !tbaa !2449
  %7179 = lshr i32 %7152, 31
  %7180 = xor i32 %7176, %7179
  %7181 = add nuw nsw i32 %7180, %7176
  %7182 = icmp eq i32 %7181, 2
  %7183 = zext i1 %7182 to i8
  %7184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7183, i8* %7184, align 1, !tbaa !2450
  %7185 = load i32, i32* %ECX
  %7186 = zext i32 %7185 to i64
  %7187 = load i64, i64* %PC
  %7188 = add i64 %7187, 3
  store i64 %7188, i64* %PC
  %7189 = shl i64 %7186, 32
  %7190 = ashr exact i64 %7189, 32
  store i64 %7190, i64* %RDX, align 8, !tbaa !2428
  %7191 = load i64, i64* %RAX
  %7192 = load i64, i64* %RDX
  %7193 = mul i64 %7192, 8
  %7194 = add i64 %7193, %7191
  %7195 = bitcast %union.vec128_t* %XMM0 to i8*
  %7196 = load i64, i64* %PC
  %7197 = add i64 %7196, 5
  store i64 %7197, i64* %PC
  %7198 = bitcast i8* %7195 to double*
  %7199 = load double, double* %7198, align 1
  %7200 = inttoptr i64 %7194 to double*
  store double %7199, double* %7200
  %7201 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7202 = load i64, i64* %RBP
  %7203 = sub i64 %7202, 80
  %7204 = load i64, i64* %PC
  %7205 = add i64 %7204, 5
  store i64 %7205, i64* %PC
  %7206 = inttoptr i64 %7203 to double*
  %7207 = load double, double* %7206
  %7208 = bitcast i8* %7201 to double*
  store double %7207, double* %7208, align 1, !tbaa !2452
  %7209 = getelementptr inbounds i8, i8* %7201, i64 8
  %7210 = bitcast i8* %7209 to double*
  store double 0.000000e+00, double* %7210, align 1, !tbaa !2452
  %7211 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7212 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7213 = load i64, i64* %RBP
  %7214 = sub i64 %7213, 104
  %7215 = load i64, i64* %PC
  %7216 = add i64 %7215, 5
  store i64 %7216, i64* %PC
  %7217 = bitcast i8* %7212 to double*
  %7218 = load double, double* %7217, align 1
  %7219 = getelementptr inbounds i8, i8* %7212, i64 8
  %7220 = bitcast i8* %7219 to i64*
  %7221 = load i64, i64* %7220, align 1
  %7222 = inttoptr i64 %7214 to double*
  %7223 = load double, double* %7222
  %7224 = fmul double %7218, %7223
  %7225 = bitcast i8* %7211 to double*
  store double %7224, double* %7225, align 1, !tbaa !2452
  %7226 = getelementptr inbounds i8, i8* %7211, i64 8
  %7227 = bitcast i8* %7226 to i64*
  store i64 %7221, i64* %7227, align 1, !tbaa !2452
  %7228 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7229 = load i64, i64* %RBP
  %7230 = sub i64 %7229, 88
  %7231 = load i64, i64* %PC
  %7232 = add i64 %7231, 5
  store i64 %7232, i64* %PC
  %7233 = inttoptr i64 %7230 to double*
  %7234 = load double, double* %7233
  %7235 = bitcast i8* %7228 to double*
  store double %7234, double* %7235, align 1, !tbaa !2452
  %7236 = getelementptr inbounds i8, i8* %7228, i64 8
  %7237 = bitcast i8* %7236 to double*
  store double 0.000000e+00, double* %7237, align 1, !tbaa !2452
  %7238 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7239 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7240 = load i64, i64* %RBP
  %7241 = sub i64 %7240, 96
  %7242 = load i64, i64* %PC
  %7243 = add i64 %7242, 5
  store i64 %7243, i64* %PC
  %7244 = bitcast i8* %7239 to double*
  %7245 = load double, double* %7244, align 1
  %7246 = getelementptr inbounds i8, i8* %7239, i64 8
  %7247 = bitcast i8* %7246 to i64*
  %7248 = load i64, i64* %7247, align 1
  %7249 = inttoptr i64 %7241 to double*
  %7250 = load double, double* %7249
  %7251 = fmul double %7245, %7250
  %7252 = bitcast i8* %7238 to double*
  store double %7251, double* %7252, align 1, !tbaa !2452
  %7253 = getelementptr inbounds i8, i8* %7238, i64 8
  %7254 = bitcast i8* %7253 to i64*
  store i64 %7248, i64* %7254, align 1, !tbaa !2452
  %7255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7256 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7257 = bitcast %union.vec128_t* %XMM1 to i8*
  %7258 = load i64, i64* %PC
  %7259 = add i64 %7258, 4
  store i64 %7259, i64* %PC
  %7260 = bitcast i8* %7256 to double*
  %7261 = load double, double* %7260, align 1
  %7262 = getelementptr inbounds i8, i8* %7256, i64 8
  %7263 = bitcast i8* %7262 to i64*
  %7264 = load i64, i64* %7263, align 1
  %7265 = bitcast i8* %7257 to double*
  %7266 = load double, double* %7265, align 1
  %7267 = fadd double %7261, %7266
  %7268 = bitcast i8* %7255 to double*
  store double %7267, double* %7268, align 1, !tbaa !2452
  %7269 = getelementptr inbounds i8, i8* %7255, i64 8
  %7270 = bitcast i8* %7269 to i64*
  store i64 %7264, i64* %7270, align 1, !tbaa !2452
  %7271 = load i64, i64* %RBP
  %7272 = sub i64 %7271, 16
  %7273 = load i64, i64* %PC
  %7274 = add i64 %7273, 4
  store i64 %7274, i64* %PC
  %7275 = inttoptr i64 %7272 to i64*
  %7276 = load i64, i64* %7275
  store i64 %7276, i64* %RAX, align 8, !tbaa !2428
  %7277 = load i64, i64* %RBP
  %7278 = sub i64 %7277, 28
  %7279 = load i64, i64* %PC
  %7280 = add i64 %7279, 3
  store i64 %7280, i64* %PC
  %7281 = inttoptr i64 %7278 to i32*
  %7282 = load i32, i32* %7281
  %7283 = zext i32 %7282 to i64
  store i64 %7283, i64* %RCX, align 8, !tbaa !2428
  %7284 = load i64, i64* %RCX
  %7285 = load i64, i64* %PC
  %7286 = add i64 %7285, 3
  store i64 %7286, i64* %PC
  %7287 = trunc i64 %7284 to i32
  %7288 = add i32 15, %7287
  %7289 = zext i32 %7288 to i64
  store i64 %7289, i64* %RCX, align 8, !tbaa !2428
  %7290 = icmp ult i32 %7288, %7287
  %7291 = icmp ult i32 %7288, 15
  %7292 = or i1 %7290, %7291
  %7293 = zext i1 %7292 to i8
  %7294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7293, i8* %7294, align 1, !tbaa !2432
  %7295 = and i32 %7288, 255
  %7296 = call i32 @llvm.ctpop.i32(i32 %7295) #17
  %7297 = trunc i32 %7296 to i8
  %7298 = and i8 %7297, 1
  %7299 = xor i8 %7298, 1
  %7300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7299, i8* %7300, align 1, !tbaa !2446
  %7301 = xor i64 15, %7284
  %7302 = trunc i64 %7301 to i32
  %7303 = xor i32 %7302, %7288
  %7304 = lshr i32 %7303, 4
  %7305 = trunc i32 %7304 to i8
  %7306 = and i8 %7305, 1
  %7307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7306, i8* %7307, align 1, !tbaa !2447
  %7308 = icmp eq i32 %7288, 0
  %7309 = zext i1 %7308 to i8
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7309, i8* %7310, align 1, !tbaa !2448
  %7311 = lshr i32 %7288, 31
  %7312 = trunc i32 %7311 to i8
  %7313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7312, i8* %7313, align 1, !tbaa !2449
  %7314 = lshr i32 %7287, 31
  %7315 = xor i32 %7311, %7314
  %7316 = add nuw nsw i32 %7315, %7311
  %7317 = icmp eq i32 %7316, 2
  %7318 = zext i1 %7317 to i8
  %7319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7318, i8* %7319, align 1, !tbaa !2450
  %7320 = load i32, i32* %ECX
  %7321 = zext i32 %7320 to i64
  %7322 = load i64, i64* %PC
  %7323 = add i64 %7322, 3
  store i64 %7323, i64* %PC
  %7324 = shl i64 %7321, 32
  %7325 = ashr exact i64 %7324, 32
  store i64 %7325, i64* %RDX, align 8, !tbaa !2428
  %7326 = load i64, i64* %RAX
  %7327 = load i64, i64* %RDX
  %7328 = mul i64 %7327, 8
  %7329 = add i64 %7328, %7326
  %7330 = bitcast %union.vec128_t* %XMM0 to i8*
  %7331 = load i64, i64* %PC
  %7332 = add i64 %7331, 5
  store i64 %7332, i64* %PC
  %7333 = bitcast i8* %7330 to double*
  %7334 = load double, double* %7333, align 1
  %7335 = inttoptr i64 %7329 to double*
  store double %7334, double* %7335
  %7336 = load i64, i64* %RBP
  %7337 = sub i64 %7336, 28
  %7338 = load i64, i64* %PC
  %7339 = add i64 %7338, 3
  store i64 %7339, i64* %PC
  %7340 = inttoptr i64 %7337 to i32*
  %7341 = load i32, i32* %7340
  %7342 = zext i32 %7341 to i64
  store i64 %7342, i64* %RAX, align 8, !tbaa !2428
  %7343 = load i64, i64* %RAX
  %7344 = load i64, i64* %PC
  %7345 = add i64 %7344, 3
  store i64 %7345, i64* %PC
  %7346 = trunc i64 %7343 to i32
  %7347 = add i32 16, %7346
  %7348 = zext i32 %7347 to i64
  store i64 %7348, i64* %RAX, align 8, !tbaa !2428
  %7349 = icmp ult i32 %7347, %7346
  %7350 = icmp ult i32 %7347, 16
  %7351 = or i1 %7349, %7350
  %7352 = zext i1 %7351 to i8
  %7353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7352, i8* %7353, align 1, !tbaa !2432
  %7354 = and i32 %7347, 255
  %7355 = call i32 @llvm.ctpop.i32(i32 %7354) #17
  %7356 = trunc i32 %7355 to i8
  %7357 = and i8 %7356, 1
  %7358 = xor i8 %7357, 1
  %7359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7358, i8* %7359, align 1, !tbaa !2446
  %7360 = xor i64 16, %7343
  %7361 = trunc i64 %7360 to i32
  %7362 = xor i32 %7361, %7347
  %7363 = lshr i32 %7362, 4
  %7364 = trunc i32 %7363 to i8
  %7365 = and i8 %7364, 1
  %7366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7365, i8* %7366, align 1, !tbaa !2447
  %7367 = icmp eq i32 %7347, 0
  %7368 = zext i1 %7367 to i8
  %7369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7368, i8* %7369, align 1, !tbaa !2448
  %7370 = lshr i32 %7347, 31
  %7371 = trunc i32 %7370 to i8
  %7372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7371, i8* %7372, align 1, !tbaa !2449
  %7373 = lshr i32 %7346, 31
  %7374 = xor i32 %7370, %7373
  %7375 = add nuw nsw i32 %7374, %7370
  %7376 = icmp eq i32 %7375, 2
  %7377 = zext i1 %7376 to i8
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7377, i8* %7378, align 1, !tbaa !2450
  %7379 = load i64, i64* %RBP
  %7380 = sub i64 %7379, 28
  %7381 = load i32, i32* %EAX
  %7382 = zext i32 %7381 to i64
  %7383 = load i64, i64* %PC
  %7384 = add i64 %7383, 3
  store i64 %7384, i64* %PC
  %7385 = inttoptr i64 %7380 to i32*
  store i32 %7381, i32* %7385
  %7386 = load i64, i64* %PC
  %7387 = sub i64 %7386, 1815
  %7388 = load i64, i64* %PC
  %7389 = add i64 %7388, 5
  store i64 %7389, i64* %PC
  %7390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7387, i64* %7390, align 8, !tbaa !2428
  br label %block_402bf2

block_402bf2:                                     ; preds = %block_402bfe, %block_402890
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402890 ], [ %MEMORY.0, %block_402bfe ]
  %7391 = load i64, i64* %RBP
  %7392 = sub i64 %7391, 28
  %7393 = load i64, i64* %PC
  %7394 = add i64 %7393, 3
  store i64 %7394, i64* %PC
  %7395 = inttoptr i64 %7392 to i32*
  %7396 = load i32, i32* %7395
  %7397 = zext i32 %7396 to i64
  store i64 %7397, i64* %RAX, align 8, !tbaa !2428
  %7398 = load i32, i32* %EAX
  %7399 = zext i32 %7398 to i64
  %7400 = load i64, i64* %RBP
  %7401 = sub i64 %7400, 4
  %7402 = load i64, i64* %PC
  %7403 = add i64 %7402, 3
  store i64 %7403, i64* %PC
  %7404 = inttoptr i64 %7401 to i32*
  %7405 = load i32, i32* %7404
  %7406 = sub i32 %7398, %7405
  %7407 = icmp ult i32 %7398, %7405
  %7408 = zext i1 %7407 to i8
  %7409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7408, i8* %7409, align 1, !tbaa !2432
  %7410 = and i32 %7406, 255
  %7411 = call i32 @llvm.ctpop.i32(i32 %7410) #17
  %7412 = trunc i32 %7411 to i8
  %7413 = and i8 %7412, 1
  %7414 = xor i8 %7413, 1
  %7415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7414, i8* %7415, align 1, !tbaa !2446
  %7416 = xor i32 %7405, %7398
  %7417 = xor i32 %7416, %7406
  %7418 = lshr i32 %7417, 4
  %7419 = trunc i32 %7418 to i8
  %7420 = and i8 %7419, 1
  %7421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7420, i8* %7421, align 1, !tbaa !2447
  %7422 = icmp eq i32 %7406, 0
  %7423 = zext i1 %7422 to i8
  %7424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7423, i8* %7424, align 1, !tbaa !2448
  %7425 = lshr i32 %7406, 31
  %7426 = trunc i32 %7425 to i8
  %7427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7426, i8* %7427, align 1, !tbaa !2449
  %7428 = lshr i32 %7398, 31
  %7429 = lshr i32 %7405, 31
  %7430 = xor i32 %7429, %7428
  %7431 = xor i32 %7425, %7428
  %7432 = add nuw nsw i32 %7431, %7430
  %7433 = icmp eq i32 %7432, 2
  %7434 = zext i1 %7433 to i8
  %7435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7434, i8* %7435, align 1, !tbaa !2450
  %7436 = load i64, i64* %PC
  %7437 = add i64 %7436, 1814
  %7438 = load i64, i64* %PC
  %7439 = add i64 %7438, 6
  %7440 = load i64, i64* %PC
  %7441 = add i64 %7440, 6
  store i64 %7441, i64* %PC
  %7442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7443 = load i8, i8* %7442, align 1, !tbaa !2449
  %7444 = icmp ne i8 %7443, 0
  %7445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7446 = load i8, i8* %7445, align 1, !tbaa !2450
  %7447 = icmp ne i8 %7446, 0
  %7448 = xor i1 %7444, %7447
  %7449 = xor i1 %7448, true
  %7450 = zext i1 %7449 to i8
  store i8 %7450, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7452 = select i1 %7448, i64 %7439, i64 %7437
  store i64 %7452, i64* %7451, align 8, !tbaa !2428
  %7453 = load i8, i8* %BRANCH_TAKEN
  %7454 = icmp eq i8 %7453, 1
  br i1 %7454, label %block_40330e, label %block_402bfe

block_40330e:                                     ; preds = %block_402bf2
  %7455 = load i64, i64* %RSP
  %7456 = load i64, i64* %PC
  %7457 = add i64 %7456, 4
  store i64 %7457, i64* %PC
  %7458 = add i64 24, %7455
  store i64 %7458, i64* %RSP, align 8, !tbaa !2428
  %7459 = icmp ult i64 %7458, %7455
  %7460 = icmp ult i64 %7458, 24
  %7461 = or i1 %7459, %7460
  %7462 = zext i1 %7461 to i8
  %7463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7462, i8* %7463, align 1, !tbaa !2432
  %7464 = trunc i64 %7458 to i32
  %7465 = and i32 %7464, 255
  %7466 = call i32 @llvm.ctpop.i32(i32 %7465) #17
  %7467 = trunc i32 %7466 to i8
  %7468 = and i8 %7467, 1
  %7469 = xor i8 %7468, 1
  %7470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7469, i8* %7470, align 1, !tbaa !2446
  %7471 = xor i64 24, %7455
  %7472 = xor i64 %7471, %7458
  %7473 = lshr i64 %7472, 4
  %7474 = trunc i64 %7473 to i8
  %7475 = and i8 %7474, 1
  %7476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7475, i8* %7476, align 1, !tbaa !2447
  %7477 = icmp eq i64 %7458, 0
  %7478 = zext i1 %7477 to i8
  %7479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7478, i8* %7479, align 1, !tbaa !2448
  %7480 = lshr i64 %7458, 63
  %7481 = trunc i64 %7480 to i8
  %7482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7481, i8* %7482, align 1, !tbaa !2449
  %7483 = lshr i64 %7455, 63
  %7484 = xor i64 %7480, %7483
  %7485 = add nuw nsw i64 %7484, %7480
  %7486 = icmp eq i64 %7485, 2
  %7487 = zext i1 %7486 to i8
  %7488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7487, i8* %7488, align 1, !tbaa !2450
  %7489 = load i64, i64* %PC
  %7490 = add i64 %7489, 1
  store i64 %7490, i64* %PC
  %7491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7492 = load i64, i64* %7491, align 8, !tbaa !2428
  %7493 = add i64 %7492, 8
  %7494 = inttoptr i64 %7492 to i64*
  %7495 = load i64, i64* %7494
  store i64 %7495, i64* %RBP, align 8, !tbaa !2428
  store i64 %7493, i64* %7491, align 8, !tbaa !2428
  %7496 = load i64, i64* %PC
  %7497 = add i64 %7496, 1
  store i64 %7497, i64* %PC
  %7498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7500 = load i64, i64* %7499, align 8, !tbaa !2428
  %7501 = inttoptr i64 %7500 to i64*
  %7502 = load i64, i64* %7501
  store i64 %7502, i64* %7498, align 8, !tbaa !2428
  %7503 = add i64 %7500, 8
  store i64 %7503, i64* %7499, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401050_cdft(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401050:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !2428
  %38 = add i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64 %33, i64* %39
  store i64 %38, i64* %36, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = sub i64 %43, 32
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  %47 = icmp ult i64 %43, 32
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %46 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #17
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 32, %43
  %58 = xor i64 %57, %46
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %46, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %46, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %43, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %69
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 4
  %77 = load i32, i32* %EDI
  %78 = zext i32 %77 to i64
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %76 to i32*
  store i32 %77, i32* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 8
  %84 = load i32, i32* %ESI
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 32
  %103 = load i64, i64* %R8
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 4
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i32*
  %112 = load i32, i32* %111
  %113 = sub i32 %112, 4
  %114 = icmp ult i32 %112, 4
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = and i32 %113, 255
  %118 = call i32 @llvm.ctpop.i32(i32 %117) #17
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %121, i8* %122, align 1, !tbaa !2446
  %123 = xor i32 %112, 4
  %124 = xor i32 %123, %113
  %125 = lshr i32 %124, 4
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %127, i8* %128, align 1, !tbaa !2447
  %129 = icmp eq i32 %113, 0
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %130, i8* %131, align 1, !tbaa !2448
  %132 = lshr i32 %113, 31
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %133, i8* %134, align 1, !tbaa !2449
  %135 = lshr i32 %112, 31
  %136 = xor i32 %132, %135
  %137 = add nuw nsw i32 %136, %135
  %138 = icmp eq i32 %137, 2
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %139, i8* %140, align 1, !tbaa !2450
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 90
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 6
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 6
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %148 = load i8, i8* %147, align 1, !tbaa !2448
  %149 = icmp ne i8 %148, 0
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %151 = load i8, i8* %150, align 1, !tbaa !2449
  %152 = icmp ne i8 %151, 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %154 = load i8, i8* %153, align 1, !tbaa !2450
  %155 = icmp ne i8 %154, 0
  %156 = xor i1 %152, %155
  %157 = or i1 %149, %156
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %160 = select i1 %157, i64 %142, i64 %144
  store i64 %160, i64* %159, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  %163 = load i64, i64* %RBP
  br i1 %162, label %block_4010c8, label %block_401074

block_40107e:                                     ; preds = %block_401074
  %164 = add i64 %452, 343
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %170 = load i64, i64* %169, align 8, !tbaa !2428
  %171 = add i64 %170, -8
  %172 = inttoptr i64 %171 to i64*
  store i64 %166, i64* %172
  store i64 %171, i64* %169, align 8, !tbaa !2428
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %164, i64* %173, align 8, !tbaa !2428
  %174 = load i64, i64* %PC
  %175 = call %struct.Memory* @sub_4011e0_bitrv2(%struct.State* %0, i64 %174, %struct.Memory* %2)
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 4
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 3
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  %181 = load i32, i32* %180
  %182 = zext i32 %181 to i64
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 16
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187
  store i64 %188, i64* %RSI, align 8, !tbaa !2428
  %189 = load i64, i64* %RBP
  %190 = sub i64 %189, 32
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193
  store i64 %194, i64* %RDX, align 8, !tbaa !2428
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 1991
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %202 = load i64, i64* %201, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %198, i64* %204
  store i64 %203, i64* %201, align 8, !tbaa !2428
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %196, i64* %205, align 8, !tbaa !2428
  %206 = load i64, i64* %PC
  %207 = call %struct.Memory* @sub_401860_cftfsub(%struct.State* %0, i64 %206, %struct.Memory* %175)
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 37
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 5
  store i64 %211, i64* %PC
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %209, i64* %212, align 8, !tbaa !2428
  br label %block_4010c3

block_4010c3:                                     ; preds = %block_4010a3, %block_40107e
  %MEMORY.0 = phi %struct.Memory* [ %389, %block_4010a3 ], [ %207, %block_40107e ]
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 36
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  br label %block_4010e7

block_4010d2:                                     ; preds = %block_4010c8
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 4
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 3
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %219 to i32*
  %223 = load i32, i32* %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RDI, align 8, !tbaa !2428
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 16
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RSI, align 8, !tbaa !2428
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 32
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RDX, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 1923
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 5
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %240, i64* %246
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %238, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = call %struct.Memory* @sub_401860_cftfsub(%struct.State* %0, i64 %248, %struct.Memory* %2)
  br label %block_4010e2

block_4010c8:                                     ; preds = %block_401050
  %250 = sub i64 %163, 4
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC
  %253 = inttoptr i64 %250 to i32*
  %254 = load i32, i32* %253
  %255 = sub i32 %254, 4
  %256 = icmp ult i32 %254, 4
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %257, i8* %258, align 1, !tbaa !2432
  %259 = and i32 %255, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #17
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2446
  %265 = xor i32 %254, 4
  %266 = xor i32 %265, %255
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = icmp eq i32 %255, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i32 %255, 31
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2449
  %277 = lshr i32 %254, 31
  %278 = xor i32 %274, %277
  %279 = add nuw nsw i32 %278, %277
  %280 = icmp eq i32 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2450
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 22
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 6
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 6
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %290 = load i8, i8* %289, align 1, !tbaa !2448
  %291 = icmp eq i8 %290, 0
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %294 = select i1 %291, i64 %284, i64 %286
  store i64 %294, i64* %293, align 8, !tbaa !2428
  %295 = load i8, i8* %BRANCH_TAKEN
  %296 = icmp eq i8 %295, 1
  br i1 %296, label %block_4010e2, label %block_4010d2

block_4010e7:                                     ; preds = %block_4010e2, %block_4010c3
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_4010e2 ], [ %MEMORY.0, %block_4010c3 ]
  %297 = load i64, i64* %RSP
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = add i64 32, %297
  store i64 %300, i64* %RSP, align 8, !tbaa !2428
  %301 = icmp ult i64 %300, %297
  %302 = icmp ult i64 %300, 32
  %303 = or i1 %301, %302
  %304 = zext i1 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %304, i8* %305, align 1, !tbaa !2432
  %306 = trunc i64 %300 to i32
  %307 = and i32 %306, 255
  %308 = call i32 @llvm.ctpop.i32(i32 %307) #17
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %311, i8* %312, align 1, !tbaa !2446
  %313 = xor i64 32, %297
  %314 = xor i64 %313, %300
  %315 = lshr i64 %314, 4
  %316 = trunc i64 %315 to i8
  %317 = and i8 %316, 1
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %317, i8* %318, align 1, !tbaa !2447
  %319 = icmp eq i64 %300, 0
  %320 = zext i1 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %320, i8* %321, align 1, !tbaa !2448
  %322 = lshr i64 %300, 63
  %323 = trunc i64 %322 to i8
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %323, i8* %324, align 1, !tbaa !2449
  %325 = lshr i64 %297, 63
  %326 = xor i64 %322, %325
  %327 = add nuw nsw i64 %326, %322
  %328 = icmp eq i64 %327, 2
  %329 = zext i1 %328 to i8
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %329, i8* %330, align 1, !tbaa !2450
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 1
  store i64 %332, i64* %PC
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %334 = load i64, i64* %333, align 8, !tbaa !2428
  %335 = add i64 %334, 8
  %336 = inttoptr i64 %334 to i64*
  %337 = load i64, i64* %336
  store i64 %337, i64* %RBP, align 8, !tbaa !2428
  store i64 %335, i64* %333, align 8, !tbaa !2428
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 1
  store i64 %339, i64* %PC
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = inttoptr i64 %342 to i64*
  %344 = load i64, i64* %343
  store i64 %344, i64* %340, align 8, !tbaa !2428
  %345 = add i64 %342, 8
  store i64 %345, i64* %341, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4010a3:                                     ; preds = %block_401074
  %346 = add i64 %452, 2898
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 5
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 5
  store i64 %350, i64* %PC
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %352 = load i64, i64* %351, align 8, !tbaa !2428
  %353 = add i64 %352, -8
  %354 = inttoptr i64 %353 to i64*
  store i64 %348, i64* %354
  store i64 %353, i64* %351, align 8, !tbaa !2428
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %346, i64* %355, align 8, !tbaa !2428
  %356 = load i64, i64* %PC
  %357 = call %struct.Memory* @sub_401c00_bitrv2conj(%struct.State* %0, i64 %356, %struct.Memory* %2)
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 4
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 3
  store i64 %361, i64* %PC
  %362 = inttoptr i64 %359 to i32*
  %363 = load i32, i32* %362
  %364 = zext i32 %363 to i64
  store i64 %364, i64* %RDI, align 8, !tbaa !2428
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 16
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RSI, align 8, !tbaa !2428
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 32
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 4
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to i64*
  %376 = load i64, i64* %375
  store i64 %376, i64* %RDX, align 8, !tbaa !2428
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 5090
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 5
  store i64 %382, i64* %PC
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %384 = load i64, i64* %383, align 8, !tbaa !2428
  %385 = add i64 %384, -8
  %386 = inttoptr i64 %385 to i64*
  store i64 %380, i64* %386
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %378, i64* %387, align 8, !tbaa !2428
  %388 = load i64, i64* %PC
  %389 = call %struct.Memory* @sub_4024a0_cftbsub(%struct.State* %0, i64 %388, %struct.Memory* %357)
  br label %block_4010c3

block_401074:                                     ; preds = %block_401050
  %390 = sub i64 %163, 8
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %395, align 1, !tbaa !2432
  %396 = and i32 %394, 255
  %397 = call i32 @llvm.ctpop.i32(i32 %396) #17
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  %400 = xor i8 %399, 1
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %400, i8* %401, align 1, !tbaa !2446
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %402, align 1, !tbaa !2447
  %403 = icmp eq i32 %394, 0
  %404 = zext i1 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %404, i8* %405, align 1, !tbaa !2448
  %406 = lshr i32 %394, 31
  %407 = trunc i32 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %407, i8* %408, align 1, !tbaa !2449
  %409 = lshr i32 %394, 31
  %410 = xor i32 %406, %409
  %411 = add nuw nsw i32 %410, %409
  %412 = icmp eq i32 %411, 2
  %413 = zext i1 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %413, i8* %414, align 1, !tbaa !2450
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 43
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 6
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 6
  store i64 %420, i64* %PC
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %422 = load i8, i8* %421, align 1, !tbaa !2449
  %423 = icmp ne i8 %422, 0
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %425 = load i8, i8* %424, align 1, !tbaa !2450
  %426 = icmp ne i8 %425, 0
  %427 = xor i1 %423, %426
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %430 = select i1 %427, i64 %416, i64 %418
  store i64 %430, i64* %429, align 8, !tbaa !2428
  %431 = load i8, i8* %BRANCH_TAKEN
  %432 = icmp eq i8 %431, 1
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 4
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 3
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i32*
  %438 = load i32, i32* %437
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RDI, align 8, !tbaa !2428
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 24
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i64*
  %445 = load i64, i64* %444
  store i64 %445, i64* %RSI, align 8, !tbaa !2428
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 16
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RDX, align 8, !tbaa !2428
  %452 = load i64, i64* %PC
  br i1 %432, label %block_4010a3, label %block_40107e

block_4010e2:                                     ; preds = %block_4010c8, %block_4010d2
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_4010c8 ], [ %249, %block_4010d2 ]
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 5
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 5
  store i64 %456, i64* %PC
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %454, i64* %457, align 8, !tbaa !2428
  br label %block_4010e7
}

; Function Attrs: noinline
define %struct.Memory* @sub_400e20_get_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400e20:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %27 to %"class.std::bitset"*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %35 to %union.vec128_t*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = sub i64 %46, 32
  store i64 %49, i64* %RSP, align 8, !tbaa !2428
  %50 = icmp ult i64 %46, 32
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %51, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %49 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #17
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = xor i64 32, %46
  %61 = xor i64 %60, %49
  %62 = lshr i64 %61, 4
  %63 = trunc i64 %62 to i8
  %64 = and i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = icmp eq i64 %49, 0
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i64 %49, 63
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %70, i8* %71, align 1, !tbaa !2449
  %72 = lshr i64 %46, 63
  %73 = xor i64 %69, %72
  %74 = add nuw nsw i64 %73, %72
  %75 = icmp eq i64 %74, 2
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %76, i8* %77, align 1, !tbaa !2450
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RAX
  %83 = load i32, i32* %EAX
  %84 = zext i32 %83 to i64
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 2
  store i64 %86, i64* %PC
  %87 = xor i64 %84, %82
  %88 = trunc i64 %87 to i32
  %89 = and i64 %87, 4294967295
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %90, align 1, !tbaa !2432
  %91 = and i32 %88, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #17
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2446
  %97 = icmp eq i32 %88, 0
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %98, i8* %99, align 1, !tbaa !2448
  %100 = lshr i32 %88, 31
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %103, align 1, !tbaa !2450
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %104, align 1, !tbaa !2447
  %105 = load i32, i32* %EAX
  %106 = zext i32 %105 to i64
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 2
  store i64 %108, i64* %PC
  %109 = and i64 %106, 4294967295
  store i64 %109, i64* %RSI, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = sub i64 %110, 1872
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %111, i64* %120, align 8, !tbaa !2428
  %121 = load i64, i64* %PC
  %122 = call %struct.Memory* @ext_4006e0_gettimeofday(%struct.State* %0, i64 %121, %struct.Memory* %2)
  %123 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 8
  store i64 %125, i64* %PC
  %126 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 56) to double*)
  %127 = bitcast i8* %123 to double*
  store double %126, double* %127, align 1, !tbaa !2452
  %128 = getelementptr inbounds i8, i8* %123, i64 8
  %129 = bitcast i8* %128 to double*
  store double 0.000000e+00, double* %129, align 1, !tbaa !2452
  %130 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 16
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 6
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  %137 = sitofp i64 %136 to double
  %138 = bitcast i8* %130 to double*
  store double %137, double* %138, align 1, !tbaa !2452
  %139 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 8
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 6
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144
  %146 = sitofp i64 %145 to double
  %147 = bitcast i8* %139 to double*
  store double %146, double* %147, align 1, !tbaa !2452
  %148 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %149 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %150 = bitcast %union.vec128_t* %XMM0 to i8*
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = bitcast i8* %149 to double*
  %154 = load double, double* %153, align 1
  %155 = getelementptr inbounds i8, i8* %149, i64 8
  %156 = bitcast i8* %155 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = bitcast i8* %150 to double*
  %159 = load double, double* %158, align 1
  %160 = fmul double %154, %159
  %161 = bitcast i8* %148 to double*
  store double %160, double* %161, align 1, !tbaa !2452
  %162 = getelementptr inbounds i8, i8* %148, i64 8
  %163 = bitcast i8* %162 to i64*
  store i64 %157, i64* %163, align 1, !tbaa !2452
  %164 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %165 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %166 = bitcast %union.vec128_t* %XMM2 to i8*
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = bitcast i8* %165 to double*
  %170 = load double, double* %169, align 1
  %171 = getelementptr inbounds i8, i8* %165, i64 8
  %172 = bitcast i8* %171 to i64*
  %173 = load i64, i64* %172, align 1
  %174 = bitcast i8* %166 to double*
  %175 = load double, double* %174, align 1
  %176 = fadd double %170, %175
  %177 = bitcast i8* %164 to double*
  store double %176, double* %177, align 1, !tbaa !2452
  %178 = getelementptr inbounds i8, i8* %164, i64 8
  %179 = bitcast i8* %178 to i64*
  store i64 %173, i64* %179, align 1, !tbaa !2452
  %180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %181 = bitcast %union.vec128_t* %XMM1 to i8*
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = bitcast i8* %181 to <2 x i32>*
  %185 = load <2 x i32>, <2 x i32>* %184, align 1
  %186 = getelementptr inbounds i8, i8* %181, i64 8
  %187 = bitcast i8* %186 to <2 x i32>*
  %188 = load <2 x i32>, <2 x i32>* %187, align 1
  %189 = extractelement <2 x i32> %185, i32 0
  %190 = bitcast i8* %180 to i32*
  store i32 %189, i32* %190, align 1, !tbaa !2455
  %191 = extractelement <2 x i32> %185, i32 1
  %192 = getelementptr inbounds i8, i8* %180, i64 4
  %193 = bitcast i8* %192 to i32*
  store i32 %191, i32* %193, align 1, !tbaa !2455
  %194 = extractelement <2 x i32> %188, i32 0
  %195 = getelementptr inbounds i8, i8* %180, i64 8
  %196 = bitcast i8* %195 to i32*
  store i32 %194, i32* %196, align 1, !tbaa !2455
  %197 = extractelement <2 x i32> %188, i32 1
  %198 = getelementptr inbounds i8, i8* %180, i64 12
  %199 = bitcast i8* %198 to i32*
  store i32 %197, i32* %199, align 1, !tbaa !2455
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 20
  %202 = load i32, i32* %EAX
  %203 = zext i32 %202 to i64
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 3
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %206
  %207 = load i64, i64* %RSP
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = add i64 32, %207
  store i64 %210, i64* %RSP, align 8, !tbaa !2428
  %211 = icmp ult i64 %210, %207
  %212 = icmp ult i64 %210, 32
  %213 = or i1 %211, %212
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %214, i8* %215, align 1, !tbaa !2432
  %216 = trunc i64 %210 to i32
  %217 = and i32 %216, 255
  %218 = call i32 @llvm.ctpop.i32(i32 %217) #17
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %221, i8* %222, align 1, !tbaa !2446
  %223 = xor i64 32, %207
  %224 = xor i64 %223, %210
  %225 = lshr i64 %224, 4
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i64 %210, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %210, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = lshr i64 %207, 63
  %236 = xor i64 %232, %235
  %237 = add nuw nsw i64 %236, %232
  %238 = icmp eq i64 %237, 2
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 1
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, 8
  %246 = inttoptr i64 %244 to i64*
  %247 = load i64, i64* %246
  store i64 %247, i64* %RBP, align 8, !tbaa !2428
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 1
  store i64 %249, i64* %PC
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  store i64 %254, i64* %250, align 8, !tbaa !2428
  %255 = add i64 %252, 8
  store i64 %255, i64* %251, align 8, !tbaa !2428
  ret %struct.Memory* %122
}

; Function Attrs: noinline
define %struct.Memory* @sub_400840_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400840:
  %state.i = alloca %struct.State*, align 8
  %curr_pc.i = alloca i64, align 8
  %memory.i = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i = alloca i8, align 1
  %SS_BASE.i = alloca i64, align 8
  %ES_BASE.i = alloca i64, align 8
  %DS_BASE.i = alloca i64, align 8
  %CS_BASE.i = alloca i64, align 8
  %STATE.i = alloca %struct.State*, align 8
  %MEMORY.i = alloca %struct.Memory*, align 8
  %_DR0.i = alloca i64*, align 8
  %_DR1.i = alloca i64*, align 8
  %_DR2.i = alloca i64*, align 8
  %_DR3.i = alloca i64*, align 8
  %_DR4.i = alloca i64*, align 8
  %_DR5.i = alloca i64*, align 8
  %_DR6.i = alloca i64*, align 8
  %_DR7.i = alloca i64*, align 8
  %CR0.i = alloca i64*, align 8
  %CR1.i = alloca i64*, align 8
  %CR2.i = alloca i64*, align 8
  %CR3.i = alloca i64*, align 8
  %CR4.i = alloca i64*, align 8
  %CR8.i = alloca i64*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDI = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 17
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R8D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 17
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R8 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %53 to %"class.std::bitset"*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %55 to %"class.std::bitset"*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %57 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %56, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %57 to %"class.std::bitset"*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %61 to %union.vec128_t*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %63 to %union.vec128_t*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %RSP
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  %81 = sub i64 %78, 224
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  %82 = icmp ult i64 %78, 224
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %83, i8* %84, align 1, !tbaa !2432
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #17
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2446
  %92 = xor i64 224, %78
  %93 = xor i64 %92, %81
  %94 = lshr i64 %93, 4
  %95 = trunc i64 %94 to i8
  %96 = and i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = icmp eq i64 %81, 0
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %99, i8* %100, align 1, !tbaa !2448
  %101 = lshr i64 %81, 63
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %102, i8* %103, align 1, !tbaa !2449
  %104 = lshr i64 %78, 63
  %105 = xor i64 %101, %104
  %106 = add nuw nsw i64 %105, %104
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %112 = load i32, i32* %EAX
  %113 = zext i32 %112 to i64
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 2
  store i64 %115, i64* %PC
  %116 = and i64 %113, 4294967295
  store i64 %116, i64* %RDI, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 4
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 88
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 8
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i64*
  store i64 0, i64* %126
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 144
  %129 = load i64, i64* %RDI
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 7
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %128 to i64*
  store i64 %129, i64* %132
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 1464
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 5
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %140 = load i64, i64* %139, align 8, !tbaa !2428
  %141 = add i64 %140, -8
  %142 = inttoptr i64 %141 to i64*
  store i64 %136, i64* %142
  store i64 %141, i64* %139, align 8, !tbaa !2428
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %134, i64* %143, align 8, !tbaa !2428
  %144 = load i64, i64* %PC
  %145 = call %struct.Memory* @sub_400e20_get_time(%struct.State* %0, i64 %144, %struct.Memory* %2)
  %146 = load i64, i64* %RBP
  %147 = sub i64 %146, 64
  %148 = bitcast %union.vec128_t* %XMM0 to i8*
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = bitcast i8* %148 to double*
  %152 = load double, double* %151, align 1
  %153 = inttoptr i64 %147 to double*
  store double %152, double* %153
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1454
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 5
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %161 = load i64, i64* %160, align 8, !tbaa !2428
  %162 = add i64 %161, -8
  %163 = inttoptr i64 %162 to i64*
  store i64 %157, i64* %163
  store i64 %162, i64* %160, align 8, !tbaa !2428
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %155, i64* %164, align 8, !tbaa !2428
  %165 = load i64, i64* %PC
  %166 = call %struct.Memory* @sub_400e20_get_time(%struct.State* %0, i64 %165, %struct.Memory* %145)
  %167 = load i64, i64* %RBP
  %168 = sub i64 %167, 72
  %169 = bitcast %union.vec128_t* %XMM0 to i8*
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 5
  store i64 %171, i64* %PC
  %172 = bitcast i8* %169 to double*
  %173 = load double, double* %172, align 1
  %174 = inttoptr i64 %168 to double*
  store double %173, double* %174
  %175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 72
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to double*
  %181 = load double, double* %180
  %182 = bitcast i8* %175 to double*
  store double %181, double* %182, align 1, !tbaa !2452
  %183 = getelementptr inbounds i8, i8* %175, i64 8
  %184 = bitcast i8* %183 to double*
  store double 0.000000e+00, double* %184, align 1, !tbaa !2452
  %185 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 64
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 5
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to double*
  %191 = load double, double* %190
  %192 = bitcast i8* %185 to double*
  store double %191, double* %192, align 1, !tbaa !2452
  %193 = getelementptr inbounds i8, i8* %185, i64 8
  %194 = bitcast i8* %193 to double*
  store double 0.000000e+00, double* %194, align 1, !tbaa !2452
  %195 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %196 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %197 = bitcast %union.vec128_t* %XMM1 to i8*
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = bitcast i8* %196 to double*
  %201 = load double, double* %200, align 1
  %202 = getelementptr inbounds i8, i8* %196, i64 8
  %203 = bitcast i8* %202 to i64*
  %204 = load i64, i64* %203, align 1
  %205 = bitcast i8* %197 to double*
  %206 = load double, double* %205, align 1
  %207 = fsub double %201, %206
  %208 = bitcast i8* %195 to double*
  store double %207, double* %208, align 1, !tbaa !2452
  %209 = getelementptr inbounds i8, i8* %195, i64 8
  %210 = bitcast i8* %209 to i64*
  store i64 %204, i64* %210, align 1, !tbaa !2452
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 80
  %213 = bitcast %union.vec128_t* %XMM0 to i8*
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  %216 = bitcast i8* %213 to double*
  %217 = load double, double* %216, align 1
  %218 = inttoptr i64 %212 to double*
  store double %217, double* %218
  %219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 8
  store i64 %221, i64* %PC
  %222 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 24) to double*)
  %223 = bitcast i8* %219 to double*
  store double %222, double* %223, align 1, !tbaa !2452
  %224 = getelementptr inbounds i8, i8* %219, i64 8
  %225 = bitcast i8* %224 to double*
  store double 0.000000e+00, double* %225, align 1, !tbaa !2452
  %226 = load i64, i64* %PC
  %227 = sub i64 %226, 343
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 5
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 5
  store i64 %231, i64* %PC
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %233 = load i64, i64* %232, align 8, !tbaa !2428
  %234 = add i64 %233, -8
  %235 = inttoptr i64 %234 to i64*
  store i64 %229, i64* %235
  store i64 %234, i64* %232, align 8, !tbaa !2428
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %227, i64* %236, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %238)
  %239 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %239)
  %240 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %240)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i)
  %241 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %241)
  %242 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %242)
  %243 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %243)
  %244 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %244)
  %245 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %245)
  %246 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %246)
  %247 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %247)
  %248 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %248)
  %249 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %249)
  %250 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %250)
  %251 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %251)
  %252 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %252)
  %253 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %253)
  %254 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %254)
  %255 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %255)
  %256 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %256)
  %257 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %257)
  %258 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %258)
  %259 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %259)
  %260 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %260)
  store %struct.State* %0, %struct.State** %state.i, align 8, !noalias !2457
  store i64 %237, i64* %curr_pc.i, align 8, !noalias !2457
  store %struct.Memory* %166, %struct.Memory** %memory.i, align 8, !noalias !2457
  store i8 0, i8* %BRANCH_TAKEN.i, align 1, !noalias !2457
  store i64 0, i64* %SS_BASE.i, align 8, !noalias !2457
  store i64 0, i64* %ES_BASE.i, align 8, !noalias !2457
  store i64 0, i64* %DS_BASE.i, align 8, !noalias !2457
  store i64 0, i64* %CS_BASE.i, align 8, !noalias !2457
  store %struct.State* %0, %struct.State** %STATE.i, align 8, !noalias !2457
  store %struct.Memory* %166, %struct.Memory** %MEMORY.i, align 8, !noalias !2457
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %262 = getelementptr inbounds %struct.GPR, %struct.GPR* %261, i32 0, i32 33
  %263 = getelementptr inbounds %struct.Reg, %struct.Reg* %262, i32 0, i32 0
  %PC.i = bitcast %union.anon* %263 to i64*
  store i64 %237, i64* %PC.i, align 8, !alias.scope !2461, !noalias !2462
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %265 = getelementptr inbounds %struct.GPR, %struct.GPR* %264, i32 0, i32 1
  %266 = getelementptr inbounds %struct.Reg, %struct.Reg* %265, i32 0, i32 0
  %267 = bitcast %union.anon* %266 to %struct.anon.2*
  %AH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %267, i32 0, i32 1
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %269 = getelementptr inbounds %struct.GPR, %struct.GPR* %268, i32 0, i32 3
  %270 = getelementptr inbounds %struct.Reg, %struct.Reg* %269, i32 0, i32 0
  %271 = bitcast %union.anon* %270 to %struct.anon.2*
  %BH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %271, i32 0, i32 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %273 = getelementptr inbounds %struct.GPR, %struct.GPR* %272, i32 0, i32 5
  %274 = getelementptr inbounds %struct.Reg, %struct.Reg* %273, i32 0, i32 0
  %275 = bitcast %union.anon* %274 to %struct.anon.2*
  %CH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %275, i32 0, i32 1
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %277 = getelementptr inbounds %struct.GPR, %struct.GPR* %276, i32 0, i32 7
  %278 = getelementptr inbounds %struct.Reg, %struct.Reg* %277, i32 0, i32 0
  %279 = bitcast %union.anon* %278 to %struct.anon.2*
  %DH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %279, i32 0, i32 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %281 = getelementptr inbounds %struct.GPR, %struct.GPR* %280, i32 0, i32 1
  %282 = getelementptr inbounds %struct.Reg, %struct.Reg* %281, i32 0, i32 0
  %283 = bitcast %union.anon* %282 to %struct.anon.2*
  %AL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %283, i32 0, i32 0
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %285 = getelementptr inbounds %struct.GPR, %struct.GPR* %284, i32 0, i32 3
  %286 = getelementptr inbounds %struct.Reg, %struct.Reg* %285, i32 0, i32 0
  %287 = bitcast %union.anon* %286 to %struct.anon.2*
  %BL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %287, i32 0, i32 0
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %289 = getelementptr inbounds %struct.GPR, %struct.GPR* %288, i32 0, i32 5
  %290 = getelementptr inbounds %struct.Reg, %struct.Reg* %289, i32 0, i32 0
  %291 = bitcast %union.anon* %290 to %struct.anon.2*
  %CL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %291, i32 0, i32 0
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %293 = getelementptr inbounds %struct.GPR, %struct.GPR* %292, i32 0, i32 7
  %294 = getelementptr inbounds %struct.Reg, %struct.Reg* %293, i32 0, i32 0
  %295 = bitcast %union.anon* %294 to %struct.anon.2*
  %DL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %295, i32 0, i32 0
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %297 = getelementptr inbounds %struct.GPR, %struct.GPR* %296, i32 0, i32 9
  %298 = getelementptr inbounds %struct.Reg, %struct.Reg* %297, i32 0, i32 0
  %299 = bitcast %union.anon* %298 to %struct.anon.2*
  %SIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %299, i32 0, i32 0
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %301 = getelementptr inbounds %struct.GPR, %struct.GPR* %300, i32 0, i32 11
  %302 = getelementptr inbounds %struct.Reg, %struct.Reg* %301, i32 0, i32 0
  %303 = bitcast %union.anon* %302 to %struct.anon.2*
  %DIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %303, i32 0, i32 0
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %305 = getelementptr inbounds %struct.GPR, %struct.GPR* %304, i32 0, i32 13
  %306 = getelementptr inbounds %struct.Reg, %struct.Reg* %305, i32 0, i32 0
  %307 = bitcast %union.anon* %306 to %struct.anon.2*
  %SPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %307, i32 0, i32 0
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %309 = getelementptr inbounds %struct.GPR, %struct.GPR* %308, i32 0, i32 15
  %310 = getelementptr inbounds %struct.Reg, %struct.Reg* %309, i32 0, i32 0
  %311 = bitcast %union.anon* %310 to %struct.anon.2*
  %BPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %311, i32 0, i32 0
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %313 = getelementptr inbounds %struct.GPR, %struct.GPR* %312, i32 0, i32 17
  %314 = getelementptr inbounds %struct.Reg, %struct.Reg* %313, i32 0, i32 0
  %315 = bitcast %union.anon* %314 to %struct.anon.2*
  %R8B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %315, i32 0, i32 0
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %317 = getelementptr inbounds %struct.GPR, %struct.GPR* %316, i32 0, i32 19
  %318 = getelementptr inbounds %struct.Reg, %struct.Reg* %317, i32 0, i32 0
  %319 = bitcast %union.anon* %318 to %struct.anon.2*
  %R9B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %319, i32 0, i32 0
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %321 = getelementptr inbounds %struct.GPR, %struct.GPR* %320, i32 0, i32 21
  %322 = getelementptr inbounds %struct.Reg, %struct.Reg* %321, i32 0, i32 0
  %323 = bitcast %union.anon* %322 to %struct.anon.2*
  %R10B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %323, i32 0, i32 0
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %325 = getelementptr inbounds %struct.GPR, %struct.GPR* %324, i32 0, i32 23
  %326 = getelementptr inbounds %struct.Reg, %struct.Reg* %325, i32 0, i32 0
  %327 = bitcast %union.anon* %326 to %struct.anon.2*
  %R11B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %327, i32 0, i32 0
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %329 = getelementptr inbounds %struct.GPR, %struct.GPR* %328, i32 0, i32 25
  %330 = getelementptr inbounds %struct.Reg, %struct.Reg* %329, i32 0, i32 0
  %331 = bitcast %union.anon* %330 to %struct.anon.2*
  %R12B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %331, i32 0, i32 0
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %333 = getelementptr inbounds %struct.GPR, %struct.GPR* %332, i32 0, i32 27
  %334 = getelementptr inbounds %struct.Reg, %struct.Reg* %333, i32 0, i32 0
  %335 = bitcast %union.anon* %334 to %struct.anon.2*
  %R13B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %335, i32 0, i32 0
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %337 = getelementptr inbounds %struct.GPR, %struct.GPR* %336, i32 0, i32 29
  %338 = getelementptr inbounds %struct.Reg, %struct.Reg* %337, i32 0, i32 0
  %339 = bitcast %union.anon* %338 to %struct.anon.2*
  %R14B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %339, i32 0, i32 0
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %341 = getelementptr inbounds %struct.GPR, %struct.GPR* %340, i32 0, i32 31
  %342 = getelementptr inbounds %struct.Reg, %struct.Reg* %341, i32 0, i32 0
  %343 = bitcast %union.anon* %342 to %struct.anon.2*
  %R15B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %343, i32 0, i32 0
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %345 = getelementptr inbounds %struct.GPR, %struct.GPR* %344, i32 0, i32 1
  %346 = getelementptr inbounds %struct.Reg, %struct.Reg* %345, i32 0, i32 0
  %AX.i = bitcast %union.anon* %346 to i16*
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %348 = getelementptr inbounds %struct.GPR, %struct.GPR* %347, i32 0, i32 3
  %349 = getelementptr inbounds %struct.Reg, %struct.Reg* %348, i32 0, i32 0
  %BX.i = bitcast %union.anon* %349 to i16*
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %351 = getelementptr inbounds %struct.GPR, %struct.GPR* %350, i32 0, i32 5
  %352 = getelementptr inbounds %struct.Reg, %struct.Reg* %351, i32 0, i32 0
  %CX.i = bitcast %union.anon* %352 to i16*
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %354 = getelementptr inbounds %struct.GPR, %struct.GPR* %353, i32 0, i32 7
  %355 = getelementptr inbounds %struct.Reg, %struct.Reg* %354, i32 0, i32 0
  %DX.i = bitcast %union.anon* %355 to i16*
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %357 = getelementptr inbounds %struct.GPR, %struct.GPR* %356, i32 0, i32 9
  %358 = getelementptr inbounds %struct.Reg, %struct.Reg* %357, i32 0, i32 0
  %SI.i = bitcast %union.anon* %358 to i16*
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %360 = getelementptr inbounds %struct.GPR, %struct.GPR* %359, i32 0, i32 11
  %361 = getelementptr inbounds %struct.Reg, %struct.Reg* %360, i32 0, i32 0
  %DI.i = bitcast %union.anon* %361 to i16*
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %363 = getelementptr inbounds %struct.GPR, %struct.GPR* %362, i32 0, i32 13
  %364 = getelementptr inbounds %struct.Reg, %struct.Reg* %363, i32 0, i32 0
  %SP.i = bitcast %union.anon* %364 to i16*
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %366 = getelementptr inbounds %struct.GPR, %struct.GPR* %365, i32 0, i32 15
  %367 = getelementptr inbounds %struct.Reg, %struct.Reg* %366, i32 0, i32 0
  %BP.i = bitcast %union.anon* %367 to i16*
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %369 = getelementptr inbounds %struct.GPR, %struct.GPR* %368, i32 0, i32 17
  %370 = getelementptr inbounds %struct.Reg, %struct.Reg* %369, i32 0, i32 0
  %R8W.i = bitcast %union.anon* %370 to i16*
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %372 = getelementptr inbounds %struct.GPR, %struct.GPR* %371, i32 0, i32 19
  %373 = getelementptr inbounds %struct.Reg, %struct.Reg* %372, i32 0, i32 0
  %R9W.i = bitcast %union.anon* %373 to i16*
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %375 = getelementptr inbounds %struct.GPR, %struct.GPR* %374, i32 0, i32 21
  %376 = getelementptr inbounds %struct.Reg, %struct.Reg* %375, i32 0, i32 0
  %R10W.i = bitcast %union.anon* %376 to i16*
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %378 = getelementptr inbounds %struct.GPR, %struct.GPR* %377, i32 0, i32 23
  %379 = getelementptr inbounds %struct.Reg, %struct.Reg* %378, i32 0, i32 0
  %R11W.i = bitcast %union.anon* %379 to i16*
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %381 = getelementptr inbounds %struct.GPR, %struct.GPR* %380, i32 0, i32 25
  %382 = getelementptr inbounds %struct.Reg, %struct.Reg* %381, i32 0, i32 0
  %R12W.i = bitcast %union.anon* %382 to i16*
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %384 = getelementptr inbounds %struct.GPR, %struct.GPR* %383, i32 0, i32 27
  %385 = getelementptr inbounds %struct.Reg, %struct.Reg* %384, i32 0, i32 0
  %R13W.i = bitcast %union.anon* %385 to i16*
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %387 = getelementptr inbounds %struct.GPR, %struct.GPR* %386, i32 0, i32 29
  %388 = getelementptr inbounds %struct.Reg, %struct.Reg* %387, i32 0, i32 0
  %R14W.i = bitcast %union.anon* %388 to i16*
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %390 = getelementptr inbounds %struct.GPR, %struct.GPR* %389, i32 0, i32 31
  %391 = getelementptr inbounds %struct.Reg, %struct.Reg* %390, i32 0, i32 0
  %R15W.i = bitcast %union.anon* %391 to i16*
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %393 = getelementptr inbounds %struct.GPR, %struct.GPR* %392, i32 0, i32 33
  %394 = getelementptr inbounds %struct.Reg, %struct.Reg* %393, i32 0, i32 0
  %IP.i = bitcast %union.anon* %394 to i16*
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %396 = getelementptr inbounds %struct.GPR, %struct.GPR* %395, i32 0, i32 1
  %397 = getelementptr inbounds %struct.Reg, %struct.Reg* %396, i32 0, i32 0
  %EAX.i = bitcast %union.anon* %397 to i32*
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %399 = getelementptr inbounds %struct.GPR, %struct.GPR* %398, i32 0, i32 3
  %400 = getelementptr inbounds %struct.Reg, %struct.Reg* %399, i32 0, i32 0
  %EBX.i = bitcast %union.anon* %400 to i32*
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %402 = getelementptr inbounds %struct.GPR, %struct.GPR* %401, i32 0, i32 5
  %403 = getelementptr inbounds %struct.Reg, %struct.Reg* %402, i32 0, i32 0
  %ECX.i = bitcast %union.anon* %403 to i32*
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %405 = getelementptr inbounds %struct.GPR, %struct.GPR* %404, i32 0, i32 7
  %406 = getelementptr inbounds %struct.Reg, %struct.Reg* %405, i32 0, i32 0
  %EDX.i = bitcast %union.anon* %406 to i32*
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %408 = getelementptr inbounds %struct.GPR, %struct.GPR* %407, i32 0, i32 9
  %409 = getelementptr inbounds %struct.Reg, %struct.Reg* %408, i32 0, i32 0
  %ESI.i = bitcast %union.anon* %409 to i32*
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %411 = getelementptr inbounds %struct.GPR, %struct.GPR* %410, i32 0, i32 11
  %412 = getelementptr inbounds %struct.Reg, %struct.Reg* %411, i32 0, i32 0
  %EDI.i = bitcast %union.anon* %412 to i32*
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %414 = getelementptr inbounds %struct.GPR, %struct.GPR* %413, i32 0, i32 13
  %415 = getelementptr inbounds %struct.Reg, %struct.Reg* %414, i32 0, i32 0
  %ESP.i = bitcast %union.anon* %415 to i32*
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %417 = getelementptr inbounds %struct.GPR, %struct.GPR* %416, i32 0, i32 15
  %418 = getelementptr inbounds %struct.Reg, %struct.Reg* %417, i32 0, i32 0
  %EBP.i = bitcast %union.anon* %418 to i32*
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %420 = getelementptr inbounds %struct.GPR, %struct.GPR* %419, i32 0, i32 33
  %421 = getelementptr inbounds %struct.Reg, %struct.Reg* %420, i32 0, i32 0
  %EIP.i = bitcast %union.anon* %421 to i32*
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %423 = getelementptr inbounds %struct.GPR, %struct.GPR* %422, i32 0, i32 17
  %424 = getelementptr inbounds %struct.Reg, %struct.Reg* %423, i32 0, i32 0
  %R8D.i = bitcast %union.anon* %424 to i32*
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %426 = getelementptr inbounds %struct.GPR, %struct.GPR* %425, i32 0, i32 19
  %427 = getelementptr inbounds %struct.Reg, %struct.Reg* %426, i32 0, i32 0
  %R9D.i = bitcast %union.anon* %427 to i32*
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %429 = getelementptr inbounds %struct.GPR, %struct.GPR* %428, i32 0, i32 21
  %430 = getelementptr inbounds %struct.Reg, %struct.Reg* %429, i32 0, i32 0
  %R10D.i = bitcast %union.anon* %430 to i32*
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %432 = getelementptr inbounds %struct.GPR, %struct.GPR* %431, i32 0, i32 23
  %433 = getelementptr inbounds %struct.Reg, %struct.Reg* %432, i32 0, i32 0
  %R11D.i = bitcast %union.anon* %433 to i32*
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %435 = getelementptr inbounds %struct.GPR, %struct.GPR* %434, i32 0, i32 25
  %436 = getelementptr inbounds %struct.Reg, %struct.Reg* %435, i32 0, i32 0
  %R12D.i = bitcast %union.anon* %436 to i32*
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %438 = getelementptr inbounds %struct.GPR, %struct.GPR* %437, i32 0, i32 27
  %439 = getelementptr inbounds %struct.Reg, %struct.Reg* %438, i32 0, i32 0
  %R13D.i = bitcast %union.anon* %439 to i32*
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %441 = getelementptr inbounds %struct.GPR, %struct.GPR* %440, i32 0, i32 29
  %442 = getelementptr inbounds %struct.Reg, %struct.Reg* %441, i32 0, i32 0
  %R14D.i = bitcast %union.anon* %442 to i32*
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %444 = getelementptr inbounds %struct.GPR, %struct.GPR* %443, i32 0, i32 31
  %445 = getelementptr inbounds %struct.Reg, %struct.Reg* %444, i32 0, i32 0
  %R15D.i = bitcast %union.anon* %445 to i32*
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %447 = getelementptr inbounds %struct.GPR, %struct.GPR* %446, i32 0, i32 1
  %448 = getelementptr inbounds %struct.Reg, %struct.Reg* %447, i32 0, i32 0
  %RAX.i = bitcast %union.anon* %448 to i64*
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %450 = getelementptr inbounds %struct.GPR, %struct.GPR* %449, i32 0, i32 3
  %451 = getelementptr inbounds %struct.Reg, %struct.Reg* %450, i32 0, i32 0
  %RBX.i = bitcast %union.anon* %451 to i64*
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %453 = getelementptr inbounds %struct.GPR, %struct.GPR* %452, i32 0, i32 5
  %454 = getelementptr inbounds %struct.Reg, %struct.Reg* %453, i32 0, i32 0
  %RCX.i = bitcast %union.anon* %454 to i64*
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %456 = getelementptr inbounds %struct.GPR, %struct.GPR* %455, i32 0, i32 7
  %457 = getelementptr inbounds %struct.Reg, %struct.Reg* %456, i32 0, i32 0
  %RDX.i = bitcast %union.anon* %457 to i64*
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %459 = getelementptr inbounds %struct.GPR, %struct.GPR* %458, i32 0, i32 9
  %460 = getelementptr inbounds %struct.Reg, %struct.Reg* %459, i32 0, i32 0
  %RSI.i = bitcast %union.anon* %460 to i64*
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %462 = getelementptr inbounds %struct.GPR, %struct.GPR* %461, i32 0, i32 11
  %463 = getelementptr inbounds %struct.Reg, %struct.Reg* %462, i32 0, i32 0
  %RDI.i = bitcast %union.anon* %463 to i64*
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %465 = getelementptr inbounds %struct.GPR, %struct.GPR* %464, i32 0, i32 13
  %466 = getelementptr inbounds %struct.Reg, %struct.Reg* %465, i32 0, i32 0
  %RSP.i = bitcast %union.anon* %466 to i64*
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %468 = getelementptr inbounds %struct.GPR, %struct.GPR* %467, i32 0, i32 15
  %469 = getelementptr inbounds %struct.Reg, %struct.Reg* %468, i32 0, i32 0
  %RBP.i = bitcast %union.anon* %469 to i64*
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %471 = getelementptr inbounds %struct.GPR, %struct.GPR* %470, i32 0, i32 17
  %472 = getelementptr inbounds %struct.Reg, %struct.Reg* %471, i32 0, i32 0
  %R8.i = bitcast %union.anon* %472 to i64*
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %474 = getelementptr inbounds %struct.GPR, %struct.GPR* %473, i32 0, i32 19
  %475 = getelementptr inbounds %struct.Reg, %struct.Reg* %474, i32 0, i32 0
  %R9.i = bitcast %union.anon* %475 to i64*
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %477 = getelementptr inbounds %struct.GPR, %struct.GPR* %476, i32 0, i32 21
  %478 = getelementptr inbounds %struct.Reg, %struct.Reg* %477, i32 0, i32 0
  %R10.i = bitcast %union.anon* %478 to i64*
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %480 = getelementptr inbounds %struct.GPR, %struct.GPR* %479, i32 0, i32 23
  %481 = getelementptr inbounds %struct.Reg, %struct.Reg* %480, i32 0, i32 0
  %R11.i = bitcast %union.anon* %481 to i64*
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %483 = getelementptr inbounds %struct.GPR, %struct.GPR* %482, i32 0, i32 25
  %484 = getelementptr inbounds %struct.Reg, %struct.Reg* %483, i32 0, i32 0
  %R12.i = bitcast %union.anon* %484 to i64*
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %486 = getelementptr inbounds %struct.GPR, %struct.GPR* %485, i32 0, i32 27
  %487 = getelementptr inbounds %struct.Reg, %struct.Reg* %486, i32 0, i32 0
  %R13.i = bitcast %union.anon* %487 to i64*
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %489 = getelementptr inbounds %struct.GPR, %struct.GPR* %488, i32 0, i32 29
  %490 = getelementptr inbounds %struct.Reg, %struct.Reg* %489, i32 0, i32 0
  %R14.i = bitcast %union.anon* %490 to i64*
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %492 = getelementptr inbounds %struct.GPR, %struct.GPR* %491, i32 0, i32 31
  %493 = getelementptr inbounds %struct.Reg, %struct.Reg* %492, i32 0, i32 0
  %R15.i = bitcast %union.anon* %493 to i64*
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %495 = getelementptr inbounds %struct.GPR, %struct.GPR* %494, i32 0, i32 33
  %496 = getelementptr inbounds %struct.Reg, %struct.Reg* %495, i32 0, i32 0
  %RIP.i = bitcast %union.anon* %496 to i64*
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %498 = getelementptr inbounds %struct.Segments, %struct.Segments* %497, i32 0, i32 1
  %SS.i = bitcast %union.SegmentSelector* %498 to i16*
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %500 = getelementptr inbounds %struct.Segments, %struct.Segments* %499, i32 0, i32 3
  %ES.i = bitcast %union.SegmentSelector* %500 to i16*
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %502 = getelementptr inbounds %struct.Segments, %struct.Segments* %501, i32 0, i32 5
  %GS.i = bitcast %union.SegmentSelector* %502 to i16*
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %504 = getelementptr inbounds %struct.Segments, %struct.Segments* %503, i32 0, i32 7
  %FS.i = bitcast %union.SegmentSelector* %504 to i16*
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %506 = getelementptr inbounds %struct.Segments, %struct.Segments* %505, i32 0, i32 9
  %DS.i = bitcast %union.SegmentSelector* %506 to i16*
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %508 = getelementptr inbounds %struct.Segments, %struct.Segments* %507, i32 0, i32 11
  %CS.i = bitcast %union.SegmentSelector* %508 to i16*
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %510 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %509, i32 0, i32 5
  %511 = getelementptr inbounds %struct.Reg, %struct.Reg* %510, i32 0, i32 0
  %GS_BASE.i = bitcast %union.anon* %511 to i64*
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %513 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %512, i32 0, i32 7
  %514 = getelementptr inbounds %struct.Reg, %struct.Reg* %513, i32 0, i32 0
  %FS_BASE.i = bitcast %union.anon* %514 to i64*
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %516 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %515, i64 0, i64 0
  %YMM0.i = bitcast %union.VectorReg* %516 to %"class.std::bitset"*
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %518 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %517, i64 0, i64 1
  %YMM1.i = bitcast %union.VectorReg* %518 to %"class.std::bitset"*
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %520 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %519, i64 0, i64 2
  %YMM2.i = bitcast %union.VectorReg* %520 to %"class.std::bitset"*
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %522 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %521, i64 0, i64 3
  %YMM3.i = bitcast %union.VectorReg* %522 to %"class.std::bitset"*
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %524 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %523, i64 0, i64 4
  %YMM4.i = bitcast %union.VectorReg* %524 to %"class.std::bitset"*
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %526 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %525, i64 0, i64 5
  %YMM5.i = bitcast %union.VectorReg* %526 to %"class.std::bitset"*
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %528 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %527, i64 0, i64 6
  %YMM6.i = bitcast %union.VectorReg* %528 to %"class.std::bitset"*
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %530 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %529, i64 0, i64 7
  %YMM7.i = bitcast %union.VectorReg* %530 to %"class.std::bitset"*
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %532 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %531, i64 0, i64 8
  %YMM8.i = bitcast %union.VectorReg* %532 to %"class.std::bitset"*
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %534 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %533, i64 0, i64 9
  %YMM9.i = bitcast %union.VectorReg* %534 to %"class.std::bitset"*
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %536 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %535, i64 0, i64 10
  %YMM10.i = bitcast %union.VectorReg* %536 to %"class.std::bitset"*
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %538 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %537, i64 0, i64 11
  %YMM11.i = bitcast %union.VectorReg* %538 to %"class.std::bitset"*
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %540 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %539, i64 0, i64 12
  %YMM12.i = bitcast %union.VectorReg* %540 to %"class.std::bitset"*
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %542 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %541, i64 0, i64 13
  %YMM13.i = bitcast %union.VectorReg* %542 to %"class.std::bitset"*
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %544 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %543, i64 0, i64 14
  %YMM14.i = bitcast %union.VectorReg* %544 to %"class.std::bitset"*
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %546 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %545, i64 0, i64 15
  %YMM15.i = bitcast %union.VectorReg* %546 to %"class.std::bitset"*
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %548 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %547, i64 0, i64 0
  %XMM0.i = bitcast %union.VectorReg* %548 to %union.vec128_t*
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %550 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %549, i64 0, i64 1
  %XMM1.i = bitcast %union.VectorReg* %550 to %union.vec128_t*
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %552 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %551, i64 0, i64 2
  %XMM2.i = bitcast %union.VectorReg* %552 to %union.vec128_t*
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %554 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %553, i64 0, i64 3
  %XMM3.i = bitcast %union.VectorReg* %554 to %union.vec128_t*
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %556 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %555, i64 0, i64 4
  %XMM4.i = bitcast %union.VectorReg* %556 to %union.vec128_t*
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %558 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %557, i64 0, i64 5
  %XMM5.i = bitcast %union.VectorReg* %558 to %union.vec128_t*
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %560 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %559, i64 0, i64 6
  %XMM6.i = bitcast %union.VectorReg* %560 to %union.vec128_t*
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %562 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %561, i64 0, i64 7
  %XMM7.i = bitcast %union.VectorReg* %562 to %union.vec128_t*
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %564 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %563, i64 0, i64 8
  %XMM8.i = bitcast %union.VectorReg* %564 to %union.vec128_t*
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %566 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %565, i64 0, i64 9
  %XMM9.i = bitcast %union.VectorReg* %566 to %union.vec128_t*
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %568 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %567, i64 0, i64 10
  %XMM10.i = bitcast %union.VectorReg* %568 to %union.vec128_t*
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %570 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %569, i64 0, i64 11
  %XMM11.i = bitcast %union.VectorReg* %570 to %union.vec128_t*
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %572 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %571, i64 0, i64 12
  %XMM12.i = bitcast %union.VectorReg* %572 to %union.vec128_t*
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %574 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %573, i64 0, i64 13
  %XMM13.i = bitcast %union.VectorReg* %574 to %union.vec128_t*
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %576 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %575, i64 0, i64 14
  %XMM14.i = bitcast %union.VectorReg* %576 to %union.vec128_t*
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %578 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %577, i64 0, i64 15
  %XMM15.i = bitcast %union.VectorReg* %578 to %union.vec128_t*
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %580 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %579, i32 0, i32 0
  %581 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %580, i64 0, i64 0
  %ST0.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %581, i32 0, i32 1
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %583 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %582, i32 0, i32 0
  %584 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %583, i64 0, i64 1
  %ST1.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %584, i32 0, i32 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %586 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %585, i32 0, i32 0
  %587 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %586, i64 0, i64 2
  %ST2.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %587, i32 0, i32 1
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %589 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %588, i32 0, i32 0
  %590 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %589, i64 0, i64 3
  %ST3.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %590, i32 0, i32 1
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %592 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %591, i32 0, i32 0
  %593 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %592, i64 0, i64 4
  %ST4.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %593, i32 0, i32 1
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %595 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %594, i32 0, i32 0
  %596 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %595, i64 0, i64 5
  %ST5.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %596, i32 0, i32 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %598 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %597, i32 0, i32 0
  %599 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %598, i64 0, i64 6
  %ST6.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %599, i32 0, i32 1
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %601 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %600, i32 0, i32 0
  %602 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %601, i64 0, i64 7
  %ST7.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %602, i32 0, i32 1
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %604 = getelementptr inbounds %struct.MMX, %struct.MMX* %603, i32 0, i32 0
  %605 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %604, i64 0, i64 0
  %606 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %605, i32 0, i32 1
  %607 = bitcast %union.vec64_t* %606 to %struct.uint64v1_t*
  %608 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %607, i32 0, i32 0
  %MM0.i = getelementptr inbounds [1 x i64], [1 x i64]* %608, i64 0, i64 0
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %610 = getelementptr inbounds %struct.MMX, %struct.MMX* %609, i32 0, i32 0
  %611 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %610, i64 0, i64 1
  %612 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %611, i32 0, i32 1
  %613 = bitcast %union.vec64_t* %612 to %struct.uint64v1_t*
  %614 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %613, i32 0, i32 0
  %MM1.i = getelementptr inbounds [1 x i64], [1 x i64]* %614, i64 0, i64 0
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %616 = getelementptr inbounds %struct.MMX, %struct.MMX* %615, i32 0, i32 0
  %617 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %616, i64 0, i64 2
  %618 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %617, i32 0, i32 1
  %619 = bitcast %union.vec64_t* %618 to %struct.uint64v1_t*
  %620 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %619, i32 0, i32 0
  %MM2.i = getelementptr inbounds [1 x i64], [1 x i64]* %620, i64 0, i64 0
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %622 = getelementptr inbounds %struct.MMX, %struct.MMX* %621, i32 0, i32 0
  %623 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %622, i64 0, i64 3
  %624 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %623, i32 0, i32 1
  %625 = bitcast %union.vec64_t* %624 to %struct.uint64v1_t*
  %626 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %625, i32 0, i32 0
  %MM3.i = getelementptr inbounds [1 x i64], [1 x i64]* %626, i64 0, i64 0
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %628 = getelementptr inbounds %struct.MMX, %struct.MMX* %627, i32 0, i32 0
  %629 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %628, i64 0, i64 4
  %630 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %629, i32 0, i32 1
  %631 = bitcast %union.vec64_t* %630 to %struct.uint64v1_t*
  %632 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %631, i32 0, i32 0
  %MM4.i = getelementptr inbounds [1 x i64], [1 x i64]* %632, i64 0, i64 0
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %634 = getelementptr inbounds %struct.MMX, %struct.MMX* %633, i32 0, i32 0
  %635 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %634, i64 0, i64 5
  %636 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %635, i32 0, i32 1
  %637 = bitcast %union.vec64_t* %636 to %struct.uint64v1_t*
  %638 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %637, i32 0, i32 0
  %MM5.i = getelementptr inbounds [1 x i64], [1 x i64]* %638, i64 0, i64 0
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %640 = getelementptr inbounds %struct.MMX, %struct.MMX* %639, i32 0, i32 0
  %641 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %640, i64 0, i64 6
  %642 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %641, i32 0, i32 1
  %643 = bitcast %union.vec64_t* %642 to %struct.uint64v1_t*
  %644 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %643, i32 0, i32 0
  %MM6.i = getelementptr inbounds [1 x i64], [1 x i64]* %644, i64 0, i64 0
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %646 = getelementptr inbounds %struct.MMX, %struct.MMX* %645, i32 0, i32 0
  %647 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %646, i64 0, i64 7
  %648 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %647, i32 0, i32 1
  %649 = bitcast %union.vec64_t* %648 to %struct.uint64v1_t*
  %650 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %649, i32 0, i32 0
  %MM7.i = getelementptr inbounds [1 x i64], [1 x i64]* %650, i64 0, i64 0
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %651, i32 0, i32 5
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %652, i32 0, i32 1
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %653, i32 0, i32 11
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %654, i32 0, i32 13
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %655, i32 0, i32 3
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %656, i32 0, i32 9
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %657, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i, align 8, !noalias !2457
  store i64* @DR1, i64** %_DR1.i, align 8, !noalias !2457
  store i64* @DR2, i64** %_DR2.i, align 8, !noalias !2457
  store i64* @DR3, i64** %_DR3.i, align 8, !noalias !2457
  store i64* @DR4, i64** %_DR4.i, align 8, !noalias !2457
  store i64* @DR5, i64** %_DR5.i, align 8, !noalias !2457
  store i64* @DR6, i64** %_DR6.i, align 8, !noalias !2457
  store i64* @DR7, i64** %_DR7.i, align 8, !noalias !2457
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i, align 8, !noalias !2457
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i, align 8, !noalias !2457
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i, align 8, !noalias !2457
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i, align 8, !noalias !2457
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i, align 8, !noalias !2457
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i, align 8, !noalias !2457
  %658 = bitcast %"class.std::bitset"* %YMM0.i to double*
  %659 = load double, double* %658, !alias.scope !2461, !noalias !2462
  %660 = load i64, i64* %RSP.i, !alias.scope !2461, !noalias !2462
  %661 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2457
  %662 = inttoptr i64 %660 to i64*
  %663 = load i64, i64* %662
  store i64 %663, i64* %PC.i, !alias.scope !2461, !noalias !2462
  %664 = add i64 %660, 8
  store i64 %664, i64* %RSP.i, !alias.scope !2461, !noalias !2462
  %665 = call double @sqrt(double %659)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i, !alias.scope !2461, !noalias !2462
  %666 = bitcast %"class.std::bitset"* %YMM0.i to double*
  store double %665, double* %666, !alias.scope !2461, !noalias !2462
  %667 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2457
  %668 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %668)
  %669 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %669)
  %670 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %670)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i)
  %671 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %671)
  %672 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %672)
  %673 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %673)
  %674 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %674)
  %675 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %675)
  %676 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %676)
  %677 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %677)
  %678 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %678)
  %679 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %679)
  %680 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %680)
  %681 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %681)
  %682 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %682)
  %683 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %683)
  %684 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %684)
  %685 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %685)
  %686 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %686)
  %687 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %687)
  %688 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %688)
  %689 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %689)
  %690 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %690)
  %691 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 8
  store i64 %693, i64* %PC
  %694 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 32) to double*)
  %695 = bitcast i8* %691 to double*
  store double %694, double* %695, align 1, !tbaa !2452
  %696 = getelementptr inbounds i8, i8* %691, i64 8
  %697 = bitcast i8* %696 to double*
  store double 0.000000e+00, double* %697, align 1, !tbaa !2452
  %698 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %699 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %700 = bitcast %union.vec128_t* %XMM1 to i8*
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 4
  store i64 %702, i64* %PC
  %703 = bitcast i8* %699 to double*
  %704 = load double, double* %703, align 1
  %705 = getelementptr inbounds i8, i8* %699, i64 8
  %706 = bitcast i8* %705 to i64*
  %707 = load i64, i64* %706, align 1
  %708 = bitcast i8* %700 to double*
  %709 = load double, double* %708, align 1
  %710 = fmul double %704, %709
  %711 = bitcast i8* %698 to double*
  store double %710, double* %711, align 1, !tbaa !2452
  %712 = getelementptr inbounds i8, i8* %698, i64 8
  %713 = bitcast i8* %712 to i64*
  store i64 %707, i64* %713, align 1, !tbaa !2452
  %714 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 8
  store i64 %716, i64* %PC
  %717 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 40) to double*)
  %718 = bitcast i8* %714 to double*
  store double %717, double* %718, align 1, !tbaa !2452
  %719 = getelementptr inbounds i8, i8* %714, i64 8
  %720 = bitcast i8* %719 to double*
  store double 0.000000e+00, double* %720, align 1, !tbaa !2452
  %721 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %722 = bitcast %union.vec128_t* %XMM0 to i8*
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 3
  store i64 %724, i64* %PC
  %725 = bitcast i8* %722 to <2 x i32>*
  %726 = load <2 x i32>, <2 x i32>* %725, align 1
  %727 = getelementptr inbounds i8, i8* %722, i64 8
  %728 = bitcast i8* %727 to <2 x i32>*
  %729 = load <2 x i32>, <2 x i32>* %728, align 1
  %730 = extractelement <2 x i32> %726, i32 0
  %731 = bitcast i8* %721 to i32*
  store i32 %730, i32* %731, align 1, !tbaa !2455
  %732 = extractelement <2 x i32> %726, i32 1
  %733 = getelementptr inbounds i8, i8* %721, i64 4
  %734 = bitcast i8* %733 to i32*
  store i32 %732, i32* %734, align 1, !tbaa !2455
  %735 = extractelement <2 x i32> %729, i32 0
  %736 = getelementptr inbounds i8, i8* %721, i64 8
  %737 = bitcast i8* %736 to i32*
  store i32 %735, i32* %737, align 1, !tbaa !2455
  %738 = extractelement <2 x i32> %729, i32 1
  %739 = getelementptr inbounds i8, i8* %721, i64 12
  %740 = bitcast i8* %739 to i32*
  store i32 %738, i32* %740, align 1, !tbaa !2455
  %741 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %742 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %743 = bitcast %union.vec128_t* %XMM1 to i8*
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 4
  store i64 %745, i64* %PC
  %746 = bitcast i8* %742 to double*
  %747 = load double, double* %746, align 1
  %748 = getelementptr inbounds i8, i8* %742, i64 8
  %749 = bitcast i8* %748 to i64*
  %750 = load i64, i64* %749, align 1
  %751 = bitcast i8* %743 to double*
  %752 = load double, double* %751, align 1
  %753 = fsub double %747, %752
  %754 = bitcast i8* %741 to double*
  store double %753, double* %754, align 1, !tbaa !2452
  %755 = getelementptr inbounds i8, i8* %741, i64 8
  %756 = bitcast i8* %755 to i64*
  store i64 %750, i64* %756, align 1, !tbaa !2452
  %757 = bitcast %union.vec128_t* %XMM2 to i8*
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  store i64 %759, i64* %PC
  %760 = bitcast i8* %757 to double*
  %761 = load double, double* %760, align 1
  %762 = call double @llvm.trunc.f64(double %761) #17
  %763 = call double @llvm.fabs.f64(double %762) #17
  %764 = fcmp ogt double %763, 0x43E0000000000000
  %765 = fptosi double %762 to i64
  %766 = select i1 %764, i64 -9223372036854775808, i64 %765
  store i64 %766, i64* %RDI, align 8, !tbaa !2428
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 10
  store i64 %768, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %769 = load i64, i64* %RDI
  %770 = load i64, i64* %RCX
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 3
  store i64 %772, i64* %PC
  %773 = xor i64 %770, %769
  store i64 %773, i64* %RDI, align 8, !tbaa !2428
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %774, align 1, !tbaa !2432
  %775 = trunc i64 %773 to i32
  %776 = and i32 %775, 255
  %777 = call i32 @llvm.ctpop.i32(i32 %776) #17
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %780, i8* %781, align 1, !tbaa !2446
  %782 = icmp eq i64 %773, 0
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %783, i8* %784, align 1, !tbaa !2448
  %785 = lshr i64 %773, 63
  %786 = trunc i64 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %786, i8* %787, align 1, !tbaa !2449
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %788, align 1, !tbaa !2450
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %789, align 1, !tbaa !2447
  %790 = bitcast %union.vec128_t* %XMM0 to i8*
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 5
  store i64 %792, i64* %PC
  %793 = bitcast i8* %790 to double*
  %794 = load double, double* %793, align 1
  %795 = call double @llvm.trunc.f64(double %794) #17
  %796 = call double @llvm.fabs.f64(double %795) #17
  %797 = fcmp ogt double %796, 0x43E0000000000000
  %798 = fptosi double %795 to i64
  %799 = select i1 %797, i64 -9223372036854775808, i64 %798
  store i64 %799, i64* %RCX, align 8, !tbaa !2428
  %800 = bitcast %union.vec128_t* %XMM0 to i8*
  %801 = bitcast %union.vec128_t* %XMM1 to i8*
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = bitcast i8* %800 to double*
  %805 = load double, double* %804, align 1
  %806 = bitcast i8* %801 to double*
  %807 = load double, double* %806, align 1
  %808 = fcmp uno double %805, %807
  br i1 %808, label %809, label %821

; <label>:809:                                    ; preds = %block_400840
  %810 = fadd double %805, %807
  %811 = bitcast double %810 to i64
  %812 = and i64 %811, 9221120237041090560
  %813 = icmp eq i64 %812, 9218868437227405312
  %814 = and i64 %811, 2251799813685247
  %815 = icmp ne i64 %814, 0
  %816 = and i1 %813, %815
  br i1 %816, label %817, label %827

; <label>:817:                                    ; preds = %809
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %819 = load i64, i64* %818, align 8, !tbaa !2428
  %820 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %819, %struct.Memory* %667) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

; <label>:821:                                    ; preds = %block_400840
  %822 = fcmp ogt double %805, %807
  br i1 %822, label %827, label %823

; <label>:823:                                    ; preds = %821
  %824 = fcmp olt double %805, %807
  br i1 %824, label %827, label %825

; <label>:825:                                    ; preds = %823
  %826 = fcmp oeq double %805, %807
  br i1 %826, label %827, label %834

; <label>:827:                                    ; preds = %825, %823, %821, %809
  %828 = phi i8 [ 0, %821 ], [ 0, %823 ], [ 1, %825 ], [ 1, %809 ]
  %829 = phi i8 [ 0, %821 ], [ 0, %823 ], [ 0, %825 ], [ 1, %809 ]
  %830 = phi i8 [ 0, %821 ], [ 1, %823 ], [ 0, %825 ], [ 1, %809 ]
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %828, i8* %831, align 1, !tbaa !2451
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %829, i8* %832, align 1, !tbaa !2451
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %830, i8* %833, align 1, !tbaa !2451
  br label %834

; <label>:834:                                    ; preds = %827, %825
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %835, align 1, !tbaa !2451
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %836, align 1, !tbaa !2451
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %837, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3: ; preds = %817, %834
  %838 = phi %struct.Memory* [ %820, %817 ], [ %667, %834 ]
  %839 = load i64, i64* %RCX
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %843 = load i8, i8* %842, align 1, !tbaa !2432
  %844 = icmp ne i8 %843, 0
  %845 = load i64, i64* %RDI, align 8, !tbaa !2428
  %846 = select i1 %844, i64 %839, i64 %845
  store i64 %846, i64* %RDI, align 8, !tbaa !2428
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 144
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 7
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 152
  %855 = load i64, i64* %RDI
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 7
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %854 to i64*
  store i64 %855, i64* %858
  %859 = load i64, i64* %RCX
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 3
  store i64 %861, i64* %PC
  store i64 %859, i64* %RDI, align 8, !tbaa !2428
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 152
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 7
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %863 to i64*
  %867 = load i64, i64* %866
  store i64 %867, i64* %RSI, align 8, !tbaa !2428
  %868 = load i64, i64* %PC
  %869 = sub i64 %868, 462
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 5
  store i64 %873, i64* %PC
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %875 = load i64, i64* %874, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %871, i64* %877
  store i64 %876, i64* %874, align 8, !tbaa !2428
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %869, i64* %878, align 8, !tbaa !2428
  %879 = load i64, i64* %PC
  %880 = call %struct.Memory* @ext_400720_memalign(%struct.State* %0, i64 %879, %struct.Memory* %838)
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 5
  store i64 %882, i64* %PC
  store i64 16, i64* %RDX, align 8, !tbaa !2428
  %883 = load i32, i32* %EDX
  %884 = zext i32 %883 to i64
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 2
  store i64 %886, i64* %PC
  %887 = and i64 %884, 4294967295
  store i64 %887, i64* %RDI, align 8, !tbaa !2428
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 5
  store i64 %889, i64* %PC
  store i64 20480, i64* %RDX, align 8, !tbaa !2428
  %890 = load i32, i32* %EDX
  %891 = zext i32 %890 to i64
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 2
  store i64 %893, i64* %PC
  %894 = and i64 %891, 4294967295
  store i64 %894, i64* %RSI, align 8, !tbaa !2428
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 24
  %897 = load i64, i64* %RAX
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 4
  store i64 %899, i64* %PC
  %900 = inttoptr i64 %896 to i64*
  store i64 %897, i64* %900
  %901 = load i64, i64* %PC
  %902 = sub i64 %901, 485
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 5
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 5
  store i64 %906, i64* %PC
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %908 = load i64, i64* %907, align 8, !tbaa !2428
  %909 = add i64 %908, -8
  %910 = inttoptr i64 %909 to i64*
  store i64 %904, i64* %910
  store i64 %909, i64* %907, align 8, !tbaa !2428
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %902, i64* %911, align 8, !tbaa !2428
  %912 = load i64, i64* %PC
  %913 = call %struct.Memory* @ext_400720_memalign(%struct.State* %0, i64 %912, %struct.Memory* %880)
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 5
  store i64 %915, i64* %PC
  store i64 512, i64* %RDI, align 8, !tbaa !2428
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 56
  %918 = load i64, i64* %RAX
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 4
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %917 to i64*
  store i64 %918, i64* %921
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 24
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 4
  store i64 %925, i64* %PC
  %926 = inttoptr i64 %923 to i64*
  %927 = load i64, i64* %926
  store i64 %927, i64* %RSI, align 8, !tbaa !2428
  %928 = load i64, i64* %RBP
  %929 = sub i64 %928, 56
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 4
  store i64 %931, i64* %PC
  %932 = inttoptr i64 %929 to i64*
  %933 = load i64, i64* %932
  store i64 %933, i64* %RDX, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 1349
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 5
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 5
  store i64 %939, i64* %PC
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %941 = load i64, i64* %940, align 8, !tbaa !2428
  %942 = add i64 %941, -8
  %943 = inttoptr i64 %942 to i64*
  store i64 %937, i64* %943
  store i64 %942, i64* %940, align 8, !tbaa !2428
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %935, i64* %944, align 8, !tbaa !2428
  %945 = load i64, i64* %PC
  %946 = call %struct.Memory* @sub_400e60_makewt(%struct.State* %0, i64 %945, %struct.Memory* %913)
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 5
  store i64 %948, i64* %PC
  store i64 16, i64* %RDI, align 8, !tbaa !2428
  %949 = bitcast i32* %R8D to i64*
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 6
  store i64 %951, i64* %PC
  store i64 16384, i64* %949, align 8, !tbaa !2428
  %952 = load i32, i32* %R8D
  %953 = zext i32 %952 to i64
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 3
  store i64 %955, i64* %PC
  %956 = and i64 %953, 4294967295
  store i64 %956, i64* %RSI, align 8, !tbaa !2428
  %957 = load i64, i64* %PC
  %958 = sub i64 %957, 526
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 5
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 5
  store i64 %962, i64* %PC
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %964 = load i64, i64* %963, align 8, !tbaa !2428
  %965 = add i64 %964, -8
  %966 = inttoptr i64 %965 to i64*
  store i64 %960, i64* %966
  store i64 %965, i64* %963, align 8, !tbaa !2428
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %958, i64* %967, align 8, !tbaa !2428
  %968 = load i64, i64* %PC
  %969 = call %struct.Memory* @ext_400720_memalign(%struct.State* %0, i64 %968, %struct.Memory* %946)
  %970 = bitcast i32* %R8D to i64*
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 6
  store i64 %972, i64* %PC
  store i64 16, i64* %970, align 8, !tbaa !2428
  %973 = load i32, i32* %R8D
  %974 = zext i32 %973 to i64
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 3
  store i64 %976, i64* %PC
  %977 = and i64 %974, 4294967295
  store i64 %977, i64* %RDI, align 8, !tbaa !2428
  %978 = bitcast i32* %R8D to i64*
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 6
  store i64 %980, i64* %PC
  store i64 16384, i64* %978, align 8, !tbaa !2428
  %981 = load i32, i32* %R8D
  %982 = zext i32 %981 to i64
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 3
  store i64 %984, i64* %PC
  %985 = and i64 %982, 4294967295
  store i64 %985, i64* %RSI, align 8, !tbaa !2428
  %986 = load i64, i64* %RBP
  %987 = sub i64 %986, 32
  %988 = load i64, i64* %RAX
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %987 to i64*
  store i64 %988, i64* %991
  %992 = load i64, i64* %PC
  %993 = sub i64 %992, 553
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 5
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 5
  store i64 %997, i64* %PC
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %999 = load i64, i64* %998, align 8, !tbaa !2428
  %1000 = add i64 %999, -8
  %1001 = inttoptr i64 %1000 to i64*
  store i64 %995, i64* %1001
  store i64 %1000, i64* %998, align 8, !tbaa !2428
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %993, i64* %1002, align 8, !tbaa !2428
  %1003 = load i64, i64* %PC
  %1004 = call %struct.Memory* @ext_400720_memalign(%struct.State* %0, i64 %1003, %struct.Memory* %969)
  %1005 = bitcast i32* %R8D to i64*
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 6
  store i64 %1007, i64* %PC
  store i64 16, i64* %1005, align 8, !tbaa !2428
  %1008 = load i32, i32* %R8D
  %1009 = zext i32 %1008 to i64
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 3
  store i64 %1011, i64* %PC
  %1012 = and i64 %1009, 4294967295
  store i64 %1012, i64* %RDI, align 8, !tbaa !2428
  %1013 = bitcast i32* %R8D to i64*
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 6
  store i64 %1015, i64* %PC
  store i64 16384, i64* %1013, align 8, !tbaa !2428
  %1016 = load i32, i32* %R8D
  %1017 = zext i32 %1016 to i64
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 3
  store i64 %1019, i64* %PC
  %1020 = and i64 %1017, 4294967295
  store i64 %1020, i64* %RSI, align 8, !tbaa !2428
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 40
  %1023 = load i64, i64* %RAX
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 4
  store i64 %1025, i64* %PC
  %1026 = inttoptr i64 %1022 to i64*
  store i64 %1023, i64* %1026
  %1027 = load i64, i64* %PC
  %1028 = sub i64 %1027, 580
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 5
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1034 = load i64, i64* %1033, align 8, !tbaa !2428
  %1035 = add i64 %1034, -8
  %1036 = inttoptr i64 %1035 to i64*
  store i64 %1030, i64* %1036
  store i64 %1035, i64* %1033, align 8, !tbaa !2428
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1028, i64* %1037, align 8, !tbaa !2428
  %1038 = load i64, i64* %PC
  %1039 = call %struct.Memory* @ext_400720_memalign(%struct.State* %0, i64 %1038, %struct.Memory* %1004)
  %1040 = load i64, i64* %RDI
  %1041 = load i32, i32* %EDI
  %1042 = zext i32 %1041 to i64
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 2
  store i64 %1044, i64* %PC
  %1045 = xor i64 %1042, %1040
  %1046 = trunc i64 %1045 to i32
  %1047 = and i64 %1045, 4294967295
  store i64 %1047, i64* %RDI, align 8, !tbaa !2428
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1048, align 1, !tbaa !2432
  %1049 = and i32 %1046, 255
  %1050 = call i32 @llvm.ctpop.i32(i32 %1049) #17
  %1051 = trunc i32 %1050 to i8
  %1052 = and i8 %1051, 1
  %1053 = xor i8 %1052, 1
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1053, i8* %1054, align 1, !tbaa !2446
  %1055 = icmp eq i32 %1046, 0
  %1056 = zext i1 %1055 to i8
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1056, i8* %1057, align 1, !tbaa !2448
  %1058 = lshr i32 %1046, 31
  %1059 = trunc i32 %1058 to i8
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1059, i8* %1060, align 1, !tbaa !2449
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1061, align 1, !tbaa !2450
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1062, align 1, !tbaa !2447
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 5
  store i64 %1064, i64* %PC
  store i64 2047, i64* %RSI, align 8, !tbaa !2428
  %1065 = load i64, i64* %RBP
  %1066 = sub i64 %1065, 48
  %1067 = load i64, i64* %RAX
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1066 to i64*
  store i64 %1067, i64* %1070
  %1071 = load i64, i64* %RBP
  %1072 = sub i64 %1071, 32
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 4
  store i64 %1074, i64* %PC
  %1075 = inttoptr i64 %1072 to i64*
  %1076 = load i64, i64* %1075
  store i64 %1076, i64* %RDX, align 8, !tbaa !2428
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 1624
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 5
  store i64 %1082, i64* %PC
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1084 = load i64, i64* %1083, align 8, !tbaa !2428
  %1085 = add i64 %1084, -8
  %1086 = inttoptr i64 %1085 to i64*
  store i64 %1080, i64* %1086
  store i64 %1085, i64* %1083, align 8, !tbaa !2428
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1078, i64* %1087, align 8, !tbaa !2428
  %1088 = load i64, i64* %PC
  %1089 = call %struct.Memory* @sub_400fd0_putdata(%struct.State* %0, i64 %1088, %struct.Memory* %1039)
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 5
  store i64 %1091, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 5
  store i64 %1093, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 32
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 4
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1095 to i64*
  %1099 = load i64, i64* %1098
  store i64 %1099, i64* %RDX, align 8, !tbaa !2428
  %1100 = load i64, i64* %RBP
  %1101 = sub i64 %1100, 24
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1101 to i64*
  %1105 = load i64, i64* %1104
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 56
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %R8, align 8, !tbaa !2428
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 1725
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 5
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  store i64 %1117, i64* %PC
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1119 = load i64, i64* %1118, align 8, !tbaa !2428
  %1120 = add i64 %1119, -8
  %1121 = inttoptr i64 %1120 to i64*
  store i64 %1115, i64* %1121
  store i64 %1120, i64* %1118, align 8, !tbaa !2428
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1113, i64* %1122, align 8, !tbaa !2428
  %1123 = load i64, i64* %PC
  %1124 = call %struct.Memory* @sub_401050_cdft(%struct.State* %0, i64 %1123, %struct.Memory* %1089)
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  store i64 %1126, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  store i64 %1128, i64* %PC
  store i64 4294967295, i64* %RSI, align 8, !tbaa !2428
  %1129 = load i64, i64* %RBP
  %1130 = sub i64 %1129, 32
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 4
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1130 to i64*
  %1134 = load i64, i64* %1133
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = load i64, i64* %RBP
  %1136 = sub i64 %1135, 24
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 4
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1136 to i64*
  %1140 = load i64, i64* %1139
  store i64 %1140, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RBP
  %1142 = sub i64 %1141, 56
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 4
  store i64 %1144, i64* %PC
  %1145 = inttoptr i64 %1142 to i64*
  %1146 = load i64, i64* %1145
  store i64 %1146, i64* %R8, align 8, !tbaa !2428
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 1698
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 5
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 5
  store i64 %1152, i64* %PC
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1154 = load i64, i64* %1153, align 8, !tbaa !2428
  %1155 = add i64 %1154, -8
  %1156 = inttoptr i64 %1155 to i64*
  store i64 %1150, i64* %1156
  store i64 %1155, i64* %1153, align 8, !tbaa !2428
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1148, i64* %1157, align 8, !tbaa !2428
  %1158 = load i64, i64* %PC
  %1159 = call %struct.Memory* @sub_401050_cdft(%struct.State* %0, i64 %1158, %struct.Memory* %1124)
  %1160 = load i64, i64* %RDI
  %1161 = load i32, i32* %EDI
  %1162 = zext i32 %1161 to i64
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 2
  store i64 %1164, i64* %PC
  %1165 = xor i64 %1162, %1160
  %1166 = trunc i64 %1165 to i32
  %1167 = and i64 %1165, 4294967295
  store i64 %1167, i64* %RDI, align 8, !tbaa !2428
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1168, align 1, !tbaa !2432
  %1169 = and i32 %1166, 255
  %1170 = call i32 @llvm.ctpop.i32(i32 %1169) #17
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  %1173 = xor i8 %1172, 1
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1173, i8* %1174, align 1, !tbaa !2446
  %1175 = icmp eq i32 %1166, 0
  %1176 = zext i1 %1175 to i8
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1176, i8* %1177, align 1, !tbaa !2448
  %1178 = lshr i32 %1166, 31
  %1179 = trunc i32 %1178 to i8
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1179, i8* %1180, align 1, !tbaa !2449
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1181, align 1, !tbaa !2450
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1182, align 1, !tbaa !2447
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 5
  store i64 %1184, i64* %PC
  store i64 2047, i64* %RSI, align 8, !tbaa !2428
  %1185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 8
  store i64 %1187, i64* %PC
  %1188 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 16) to double*)
  %1189 = bitcast i8* %1185 to double*
  store double %1188, double* %1189, align 1, !tbaa !2452
  %1190 = getelementptr inbounds i8, i8* %1185, i64 8
  %1191 = bitcast i8* %1190 to double*
  store double 0.000000e+00, double* %1191, align 1, !tbaa !2452
  %1192 = load i64, i64* %RBP
  %1193 = sub i64 %1192, 32
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 4
  store i64 %1195, i64* %PC
  %1196 = inttoptr i64 %1193 to i64*
  %1197 = load i64, i64* %1196
  store i64 %1197, i64* %RDX, align 8, !tbaa !2428
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 1834
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 5
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 5
  store i64 %1203, i64* %PC
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1205 = load i64, i64* %1204, align 8, !tbaa !2428
  %1206 = add i64 %1205, -8
  %1207 = inttoptr i64 %1206 to i64*
  store i64 %1201, i64* %1207
  store i64 %1206, i64* %1204, align 8, !tbaa !2428
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1199, i64* %1208, align 8, !tbaa !2428
  %1209 = load i64, i64* %PC
  %1210 = call %struct.Memory* @sub_4010f0_errorcheck(%struct.State* %0, i64 %1209, %struct.Memory* %1159)
  %1211 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 8
  store i64 %1213, i64* %PC
  %1214 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 8) to double*)
  %1215 = bitcast i8* %1211 to double*
  store double %1214, double* %1215, align 1, !tbaa !2452
  %1216 = getelementptr inbounds i8, i8* %1211, i64 8
  %1217 = bitcast i8* %1216 to double*
  store double 0.000000e+00, double* %1217, align 1, !tbaa !2452
  %1218 = load i64, i64* %RBP
  %1219 = sub i64 %1218, 96
  %1220 = bitcast %union.vec128_t* %XMM0 to i8*
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = bitcast i8* %1220 to double*
  %1224 = load double, double* %1223, align 1
  %1225 = inttoptr i64 %1219 to double*
  store double %1224, double* %1225
  %1226 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 96
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 5
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to double*
  %1232 = load double, double* %1231
  %1233 = bitcast i8* %1226 to double*
  store double %1232, double* %1233, align 1, !tbaa !2452
  %1234 = getelementptr inbounds i8, i8* %1226, i64 8
  %1235 = bitcast i8* %1234 to double*
  store double 0.000000e+00, double* %1235, align 1, !tbaa !2452
  %1236 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 7
  store i64 %1238, i64* %PC
  %1239 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 96) to float*)
  %1240 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 100) to float*)
  %1241 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 104) to float*)
  %1242 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 108) to float*)
  %1243 = bitcast i8* %1236 to float*
  store float %1239, float* %1243, align 1, !tbaa !2455
  %1244 = getelementptr inbounds i8, i8* %1236, i64 4
  %1245 = bitcast i8* %1244 to float*
  store float %1240, float* %1245, align 1, !tbaa !2455
  %1246 = getelementptr inbounds i8, i8* %1236, i64 8
  %1247 = bitcast i8* %1246 to float*
  store float %1241, float* %1247, align 1, !tbaa !2455
  %1248 = getelementptr inbounds i8, i8* %1236, i64 12
  %1249 = bitcast i8* %1248 to float*
  store float %1242, float* %1249, align 1, !tbaa !2455
  %1250 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1252 = bitcast %union.vec128_t* %XMM2 to i8*
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 4
  store i64 %1254, i64* %PC
  %1255 = bitcast i8* %1251 to i64*
  %1256 = load i64, i64* %1255, align 1
  %1257 = getelementptr inbounds i8, i8* %1251, i64 8
  %1258 = bitcast i8* %1257 to i64*
  %1259 = load i64, i64* %1258, align 1
  %1260 = bitcast i8* %1252 to i64*
  %1261 = load i64, i64* %1260, align 1
  %1262 = getelementptr inbounds i8, i8* %1252, i64 8
  %1263 = bitcast i8* %1262 to i64*
  %1264 = load i64, i64* %1263, align 1
  %1265 = and i64 %1261, %1256
  %1266 = and i64 %1264, %1259
  %1267 = trunc i64 %1265 to i32
  %1268 = lshr i64 %1265, 32
  %1269 = trunc i64 %1268 to i32
  %1270 = bitcast i8* %1250 to i32*
  store i32 %1267, i32* %1270, align 1, !tbaa !2454
  %1271 = getelementptr inbounds i8, i8* %1250, i64 4
  %1272 = bitcast i8* %1271 to i32*
  store i32 %1269, i32* %1272, align 1, !tbaa !2454
  %1273 = trunc i64 %1266 to i32
  %1274 = getelementptr inbounds i8, i8* %1250, i64 8
  %1275 = bitcast i8* %1274 to i32*
  store i32 %1273, i32* %1275, align 1, !tbaa !2454
  %1276 = lshr i64 %1266, 32
  %1277 = trunc i64 %1276 to i32
  %1278 = getelementptr inbounds i8, i8* %1250, i64 12
  %1279 = bitcast i8* %1278 to i32*
  store i32 %1277, i32* %1279, align 1, !tbaa !2454
  %1280 = bitcast %union.vec128_t* %XMM0 to i8*
  %1281 = bitcast %union.vec128_t* %XMM1 to i8*
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 4
  store i64 %1283, i64* %PC
  %1284 = bitcast i8* %1280 to double*
  %1285 = load double, double* %1284, align 1
  %1286 = bitcast i8* %1281 to double*
  %1287 = load double, double* %1286, align 1
  %1288 = fcmp uno double %1285, %1287
  br i1 %1288, label %1289, label %1301

; <label>:1289:                                   ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3
  %1290 = fadd double %1285, %1287
  %1291 = bitcast double %1290 to i64
  %1292 = and i64 %1291, 9221120237041090560
  %1293 = icmp eq i64 %1292, 9218868437227405312
  %1294 = and i64 %1291, 2251799813685247
  %1295 = icmp ne i64 %1294, 0
  %1296 = and i1 %1293, %1295
  br i1 %1296, label %1297, label %1307

; <label>:1297:                                   ; preds = %1289
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1299 = load i64, i64* %1298, align 8, !tbaa !2428
  %1300 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1299, %struct.Memory* %1210) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:1301:                                   ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3
  %1302 = fcmp ogt double %1285, %1287
  br i1 %1302, label %1307, label %1303

; <label>:1303:                                   ; preds = %1301
  %1304 = fcmp olt double %1285, %1287
  br i1 %1304, label %1307, label %1305

; <label>:1305:                                   ; preds = %1303
  %1306 = fcmp oeq double %1285, %1287
  br i1 %1306, label %1307, label %1314

; <label>:1307:                                   ; preds = %1305, %1303, %1301, %1289
  %1308 = phi i8 [ 0, %1301 ], [ 0, %1303 ], [ 1, %1305 ], [ 1, %1289 ]
  %1309 = phi i8 [ 0, %1301 ], [ 0, %1303 ], [ 0, %1305 ], [ 1, %1289 ]
  %1310 = phi i8 [ 0, %1301 ], [ 1, %1303 ], [ 0, %1305 ], [ 1, %1289 ]
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1308, i8* %1311, align 1, !tbaa !2451
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1309, i8* %1312, align 1, !tbaa !2451
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1310, i8* %1313, align 1, !tbaa !2451
  br label %1314

; <label>:1314:                                   ; preds = %1307, %1305
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1315, align 1, !tbaa !2451
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1316, align 1, !tbaa !2451
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1317, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %1297, %1314
  %1318 = phi %struct.Memory* [ %1300, %1297 ], [ %1210, %1314 ]
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 39
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 6
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 6
  store i64 %1324, i64* %PC
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1326 = load i8, i8* %1325, align 1, !tbaa !2432
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1328 = load i8, i8* %1327, align 1, !tbaa !2448
  %1329 = or i8 %1328, %1326
  %1330 = icmp ne i8 %1329, 0
  %1331 = zext i1 %1330 to i8
  store i8 %1331, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1333 = select i1 %1330, i64 %1320, i64 %1322
  store i64 %1333, i64* %1332, align 8, !tbaa !2428
  %1334 = load i8, i8* %BRANCH_TAKEN
  %1335 = icmp eq i8 %1334, 1
  br i1 %1335, label %block_400a13, label %block_4009f2

block_400c7d:                                     ; preds = %block_400b16
  %1336 = add i64 %2672, 419
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 5
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 5
  store i64 %1340, i64* %PC
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1342 = load i64, i64* %1341, align 8, !tbaa !2428
  %1343 = add i64 %1342, -8
  %1344 = inttoptr i64 %1343 to i64*
  store i64 %1338, i64* %1344
  store i64 %1343, i64* %1341, align 8, !tbaa !2428
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1336, i64* %1345, align 8, !tbaa !2428
  %1346 = load i64, i64* %PC
  %1347 = call %struct.Memory* @sub_400e20_get_time(%struct.State* %0, i64 %1346, %struct.Memory* %MEMORY.2)
  %1348 = load i64, i64* %RBP
  %1349 = sub i64 %1348, 72
  %1350 = bitcast %union.vec128_t* %XMM0 to i8*
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 5
  store i64 %1352, i64* %PC
  %1353 = bitcast i8* %1350 to double*
  %1354 = load double, double* %1353, align 1
  %1355 = inttoptr i64 %1349 to double*
  store double %1354, double* %1355
  %1356 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1357 = load i64, i64* %RBP
  %1358 = sub i64 %1357, 72
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 5
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to double*
  %1362 = load double, double* %1361
  %1363 = bitcast i8* %1356 to double*
  store double %1362, double* %1363, align 1, !tbaa !2452
  %1364 = getelementptr inbounds i8, i8* %1356, i64 8
  %1365 = bitcast i8* %1364 to double*
  store double 0.000000e+00, double* %1365, align 1, !tbaa !2452
  %1366 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1367 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1368 = load i64, i64* %RBP
  %1369 = sub i64 %1368, 64
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 5
  store i64 %1371, i64* %PC
  %1372 = bitcast i8* %1367 to double*
  %1373 = load double, double* %1372, align 1
  %1374 = getelementptr inbounds i8, i8* %1367, i64 8
  %1375 = bitcast i8* %1374 to i64*
  %1376 = load i64, i64* %1375, align 1
  %1377 = inttoptr i64 %1369 to double*
  %1378 = load double, double* %1377
  %1379 = fsub double %1373, %1378
  %1380 = bitcast i8* %1366 to double*
  store double %1379, double* %1380, align 1, !tbaa !2452
  %1381 = getelementptr inbounds i8, i8* %1366, i64 8
  %1382 = bitcast i8* %1381 to i64*
  store i64 %1376, i64* %1382, align 1, !tbaa !2452
  %1383 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1384 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1385 = load i64, i64* %RBP
  %1386 = sub i64 %1385, 80
  %1387 = load i64, i64* %PC
  %1388 = add i64 %1387, 5
  store i64 %1388, i64* %PC
  %1389 = bitcast i8* %1384 to double*
  %1390 = load double, double* %1389, align 1
  %1391 = getelementptr inbounds i8, i8* %1384, i64 8
  %1392 = bitcast i8* %1391 to i64*
  %1393 = load i64, i64* %1392, align 1
  %1394 = inttoptr i64 %1386 to double*
  %1395 = load double, double* %1394
  %1396 = fsub double %1390, %1395
  %1397 = bitcast i8* %1383 to double*
  store double %1396, double* %1397, align 1, !tbaa !2452
  %1398 = getelementptr inbounds i8, i8* %1383, i64 8
  %1399 = bitcast i8* %1398 to i64*
  store i64 %1393, i64* %1399, align 1, !tbaa !2452
  %1400 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1401 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1402 = load i64, i64* %RBP
  %1403 = sub i64 %1402, 88
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 5
  store i64 %1405, i64* %PC
  %1406 = bitcast i8* %1401 to double*
  %1407 = load double, double* %1406, align 1
  %1408 = getelementptr inbounds i8, i8* %1401, i64 8
  %1409 = bitcast i8* %1408 to i64*
  %1410 = load i64, i64* %1409, align 1
  %1411 = inttoptr i64 %1403 to double*
  %1412 = load double, double* %1411
  %1413 = fadd double %1407, %1412
  %1414 = bitcast i8* %1400 to double*
  store double %1413, double* %1414, align 1, !tbaa !2452
  %1415 = getelementptr inbounds i8, i8* %1400, i64 8
  %1416 = bitcast i8* %1415 to i64*
  store i64 %1410, i64* %1416, align 1, !tbaa !2452
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 88
  %1419 = bitcast %union.vec128_t* %XMM0 to i8*
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 5
  store i64 %1421, i64* %PC
  %1422 = bitcast i8* %1419 to double*
  %1423 = load double, double* %1422, align 1
  %1424 = inttoptr i64 %1418 to double*
  store double %1423, double* %1424
  %1425 = load i64, i64* %RBP
  %1426 = sub i64 %1425, 12
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 7
  store i64 %1428, i64* %PC
  %1429 = inttoptr i64 %1426 to i32*
  store i32 0, i32* %1429
  br label %block_400ca7

block_400d54:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 40
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 4
  store i64 %1433, i64* %PC
  %1434 = inttoptr i64 %1431 to i64*
  %1435 = load i64, i64* %1434
  store i64 %1435, i64* %RAX, align 8, !tbaa !2428
  %1436 = load i64, i64* %RBP
  %1437 = sub i64 %1436, 12
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 3
  store i64 %1439, i64* %PC
  %1440 = inttoptr i64 %1437 to i32*
  %1441 = load i32, i32* %1440
  %1442 = zext i32 %1441 to i64
  store i64 %1442, i64* %RCX, align 8, !tbaa !2428
  %1443 = load i64, i64* %RCX
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 3
  store i64 %1445, i64* %PC
  %1446 = trunc i64 %1443 to i32
  %1447 = shl i32 %1446, 1
  %1448 = icmp slt i32 %1446, 0
  %1449 = icmp slt i32 %1447, 0
  %1450 = xor i1 %1448, %1449
  %1451 = zext i32 %1447 to i64
  store i64 %1451, i64* %RCX, align 8, !tbaa !2428
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1453 = zext i1 %1448 to i8
  store i8 %1453, i8* %1452, align 1, !tbaa !2451
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1455 = and i32 %1447, 254
  %1456 = call i32 @llvm.ctpop.i32(i32 %1455) #17
  %1457 = trunc i32 %1456 to i8
  %1458 = and i8 %1457, 1
  %1459 = xor i8 %1458, 1
  store i8 %1459, i8* %1454, align 1, !tbaa !2451
  %1460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1460, align 1, !tbaa !2451
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1462 = icmp eq i32 %1447, 0
  %1463 = zext i1 %1462 to i8
  store i8 %1463, i8* %1461, align 1, !tbaa !2451
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1465 = lshr i32 %1447, 31
  %1466 = trunc i32 %1465 to i8
  store i8 %1466, i8* %1464, align 1, !tbaa !2451
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1468 = zext i1 %1450 to i8
  store i8 %1468, i8* %1467, align 1, !tbaa !2451
  %1469 = load i64, i64* %RCX
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 3
  store i64 %1471, i64* %PC
  %1472 = trunc i64 %1469 to i32
  %1473 = add i32 1, %1472
  %1474 = zext i32 %1473 to i64
  store i64 %1474, i64* %RCX, align 8, !tbaa !2428
  %1475 = icmp ult i32 %1473, %1472
  %1476 = icmp ult i32 %1473, 1
  %1477 = or i1 %1475, %1476
  %1478 = zext i1 %1477 to i8
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1478, i8* %1479, align 1, !tbaa !2432
  %1480 = and i32 %1473, 255
  %1481 = call i32 @llvm.ctpop.i32(i32 %1480) #17
  %1482 = trunc i32 %1481 to i8
  %1483 = and i8 %1482, 1
  %1484 = xor i8 %1483, 1
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1484, i8* %1485, align 1, !tbaa !2446
  %1486 = xor i64 1, %1469
  %1487 = trunc i64 %1486 to i32
  %1488 = xor i32 %1487, %1473
  %1489 = lshr i32 %1488, 4
  %1490 = trunc i32 %1489 to i8
  %1491 = and i8 %1490, 1
  %1492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1491, i8* %1492, align 1, !tbaa !2447
  %1493 = icmp eq i32 %1473, 0
  %1494 = zext i1 %1493 to i8
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1494, i8* %1495, align 1, !tbaa !2448
  %1496 = lshr i32 %1473, 31
  %1497 = trunc i32 %1496 to i8
  %1498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1497, i8* %1498, align 1, !tbaa !2449
  %1499 = lshr i32 %1472, 31
  %1500 = xor i32 %1496, %1499
  %1501 = add nuw nsw i32 %1500, %1496
  %1502 = icmp eq i32 %1501, 2
  %1503 = zext i1 %1502 to i8
  %1504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1503, i8* %1504, align 1, !tbaa !2450
  %1505 = load i32, i32* %ECX
  %1506 = zext i32 %1505 to i64
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 3
  store i64 %1508, i64* %PC
  %1509 = shl i64 %1506, 32
  %1510 = ashr exact i64 %1509, 32
  store i64 %1510, i64* %RDX, align 8, !tbaa !2428
  %1511 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1512 = load i64, i64* %RAX
  %1513 = load i64, i64* %RDX
  %1514 = mul i64 %1513, 8
  %1515 = add i64 %1514, %1512
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 5
  store i64 %1517, i64* %PC
  %1518 = inttoptr i64 %1515 to double*
  %1519 = load double, double* %1518
  %1520 = bitcast i8* %1511 to double*
  store double %1519, double* %1520, align 1, !tbaa !2452
  %1521 = getelementptr inbounds i8, i8* %1511, i64 8
  %1522 = bitcast i8* %1521 to double*
  store double 0.000000e+00, double* %1522, align 1, !tbaa !2452
  %1523 = load i64, i64* %RBP
  %1524 = sub i64 %1523, 208
  %1525 = bitcast %union.vec128_t* %XMM0 to i8*
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 8
  store i64 %1527, i64* %PC
  %1528 = bitcast i8* %1525 to double*
  %1529 = load double, double* %1528, align 1
  %1530 = inttoptr i64 %1524 to double*
  store double %1529, double* %1530
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 21
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 5
  store i64 %1534, i64* %PC
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1532, i64* %1535, align 8, !tbaa !2428
  br label %block_400d86

block_400b77:                                     ; preds = %block_400b84, %block_400b23
  %MEMORY.0 = phi %struct.Memory* [ %2449, %block_400b23 ], [ %MEMORY.0, %block_400b84 ]
  %1536 = load i64, i64* %RBP
  %1537 = sub i64 %1536, 100
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 7
  store i64 %1539, i64* %PC
  %1540 = inttoptr i64 %1537 to i32*
  %1541 = load i32, i32* %1540
  %1542 = sub i32 %1541, 1024
  %1543 = icmp ult i32 %1541, 1024
  %1544 = zext i1 %1543 to i8
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1544, i8* %1545, align 1, !tbaa !2432
  %1546 = and i32 %1542, 255
  %1547 = call i32 @llvm.ctpop.i32(i32 %1546) #17
  %1548 = trunc i32 %1547 to i8
  %1549 = and i8 %1548, 1
  %1550 = xor i8 %1549, 1
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1550, i8* %1551, align 1, !tbaa !2446
  %1552 = xor i32 %1541, 1024
  %1553 = xor i32 %1552, %1542
  %1554 = lshr i32 %1553, 4
  %1555 = trunc i32 %1554 to i8
  %1556 = and i8 %1555, 1
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1556, i8* %1557, align 1, !tbaa !2447
  %1558 = icmp eq i32 %1542, 0
  %1559 = zext i1 %1558 to i8
  %1560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1559, i8* %1560, align 1, !tbaa !2448
  %1561 = lshr i32 %1542, 31
  %1562 = trunc i32 %1561 to i8
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1562, i8* %1563, align 1, !tbaa !2449
  %1564 = lshr i32 %1541, 31
  %1565 = xor i32 %1561, %1564
  %1566 = add nuw nsw i32 %1565, %1564
  %1567 = icmp eq i32 %1566, 2
  %1568 = zext i1 %1567 to i8
  %1569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1568, i8* %1569, align 1, !tbaa !2450
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 214
  %1572 = load i64, i64* %PC
  %1573 = add i64 %1572, 6
  %1574 = load i64, i64* %PC
  %1575 = add i64 %1574, 6
  store i64 %1575, i64* %PC
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1577 = load i8, i8* %1576, align 1, !tbaa !2449
  %1578 = icmp ne i8 %1577, 0
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1580 = load i8, i8* %1579, align 1, !tbaa !2450
  %1581 = icmp ne i8 %1580, 0
  %1582 = xor i1 %1578, %1581
  %1583 = xor i1 %1582, true
  %1584 = zext i1 %1583 to i8
  store i8 %1584, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1586 = select i1 %1582, i64 %1573, i64 %1571
  store i64 %1586, i64* %1585, align 8, !tbaa !2428
  %1587 = load i8, i8* %BRANCH_TAKEN
  %1588 = icmp eq i8 %1587, 1
  br i1 %1588, label %block_400c54, label %block_400b84

block_400a7c:                                     ; preds = %block_400a6f
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 10
  store i64 %1590, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1591 = load i64, i64* %RBP
  %1592 = sub i64 %1591, 32
  %1593 = load i64, i64* %PC
  %1594 = add i64 %1593, 4
  store i64 %1594, i64* %PC
  %1595 = inttoptr i64 %1592 to i64*
  %1596 = load i64, i64* %1595
  store i64 %1596, i64* %RCX, align 8, !tbaa !2428
  %1597 = load i64, i64* %RBP
  %1598 = sub i64 %1597, 12
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601
  %1603 = zext i32 %1602 to i64
  store i64 %1603, i64* %RDX, align 8, !tbaa !2428
  %1604 = load i64, i64* %RDX
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 3
  store i64 %1606, i64* %PC
  %1607 = trunc i64 %1604 to i32
  %1608 = shl i32 %1607, 1
  %1609 = icmp slt i32 %1607, 0
  %1610 = icmp slt i32 %1608, 0
  %1611 = xor i1 %1609, %1610
  %1612 = zext i32 %1608 to i64
  store i64 %1612, i64* %RDX, align 8, !tbaa !2428
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1614 = zext i1 %1609 to i8
  store i8 %1614, i8* %1613, align 1, !tbaa !2451
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1616 = and i32 %1608, 254
  %1617 = call i32 @llvm.ctpop.i32(i32 %1616) #17
  %1618 = trunc i32 %1617 to i8
  %1619 = and i8 %1618, 1
  %1620 = xor i8 %1619, 1
  store i8 %1620, i8* %1615, align 1, !tbaa !2451
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1621, align 1, !tbaa !2451
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1623 = icmp eq i32 %1608, 0
  %1624 = zext i1 %1623 to i8
  store i8 %1624, i8* %1622, align 1, !tbaa !2451
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1626 = lshr i32 %1608, 31
  %1627 = trunc i32 %1626 to i8
  store i8 %1627, i8* %1625, align 1, !tbaa !2451
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1629 = zext i1 %1611 to i8
  store i8 %1629, i8* %1628, align 1, !tbaa !2451
  %1630 = load i64, i64* %RDX
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 3
  store i64 %1632, i64* %PC
  %1633 = trunc i64 %1630 to i32
  %1634 = add i32 1, %1633
  %1635 = zext i32 %1634 to i64
  store i64 %1635, i64* %RDX, align 8, !tbaa !2428
  %1636 = icmp ult i32 %1634, %1633
  %1637 = icmp ult i32 %1634, 1
  %1638 = or i1 %1636, %1637
  %1639 = zext i1 %1638 to i8
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1639, i8* %1640, align 1, !tbaa !2432
  %1641 = and i32 %1634, 255
  %1642 = call i32 @llvm.ctpop.i32(i32 %1641) #17
  %1643 = trunc i32 %1642 to i8
  %1644 = and i8 %1643, 1
  %1645 = xor i8 %1644, 1
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1645, i8* %1646, align 1, !tbaa !2446
  %1647 = xor i64 1, %1630
  %1648 = trunc i64 %1647 to i32
  %1649 = xor i32 %1648, %1634
  %1650 = lshr i32 %1649, 4
  %1651 = trunc i32 %1650 to i8
  %1652 = and i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1652, i8* %1653, align 1, !tbaa !2447
  %1654 = icmp eq i32 %1634, 0
  %1655 = zext i1 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1655, i8* %1656, align 1, !tbaa !2448
  %1657 = lshr i32 %1634, 31
  %1658 = trunc i32 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1658, i8* %1659, align 1, !tbaa !2449
  %1660 = lshr i32 %1633, 31
  %1661 = xor i32 %1657, %1660
  %1662 = add nuw nsw i32 %1661, %1657
  %1663 = icmp eq i32 %1662, 2
  %1664 = zext i1 %1663 to i8
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1664, i8* %1665, align 1, !tbaa !2450
  %1666 = load i32, i32* %EDX
  %1667 = zext i32 %1666 to i64
  %1668 = load i64, i64* %PC
  %1669 = add i64 %1668, 3
  store i64 %1669, i64* %PC
  %1670 = shl i64 %1667, 32
  %1671 = ashr exact i64 %1670, 32
  store i64 %1671, i64* %RSI, align 8, !tbaa !2428
  %1672 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1673 = load i64, i64* %RCX
  %1674 = load i64, i64* %RSI
  %1675 = mul i64 %1674, 8
  %1676 = add i64 %1675, %1673
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 5
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1676 to double*
  %1680 = load double, double* %1679
  %1681 = bitcast i8* %1672 to double*
  store double %1680, double* %1681, align 1, !tbaa !2452
  %1682 = getelementptr inbounds i8, i8* %1672, i64 8
  %1683 = bitcast i8* %1682 to double*
  store double 0.000000e+00, double* %1683, align 1, !tbaa !2452
  %1684 = bitcast %union.vec128_t* %XMM0 to i8*
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 5
  store i64 %1686, i64* %PC
  %1687 = bitcast i8* %1684 to i64*
  %1688 = load i64, i64* %1687, align 1
  store i64 %1688, i64* %RCX, align 1, !tbaa !2428
  %1689 = load i64, i64* %RCX
  %1690 = load i64, i64* %RAX
  %1691 = load i64, i64* %PC
  %1692 = add i64 %1691, 3
  store i64 %1692, i64* %PC
  %1693 = xor i64 %1690, %1689
  store i64 %1693, i64* %RCX, align 8, !tbaa !2428
  %1694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1694, align 1, !tbaa !2432
  %1695 = trunc i64 %1693 to i32
  %1696 = and i32 %1695, 255
  %1697 = call i32 @llvm.ctpop.i32(i32 %1696) #17
  %1698 = trunc i32 %1697 to i8
  %1699 = and i8 %1698, 1
  %1700 = xor i8 %1699, 1
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1700, i8* %1701, align 1, !tbaa !2446
  %1702 = icmp eq i64 %1693, 0
  %1703 = zext i1 %1702 to i8
  %1704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1703, i8* %1704, align 1, !tbaa !2448
  %1705 = lshr i64 %1693, 63
  %1706 = trunc i64 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1706, i8* %1707, align 1, !tbaa !2449
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1708, align 1, !tbaa !2450
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1709, align 1, !tbaa !2447
  %1710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1711 = load i64, i64* %RCX
  %1712 = load i64, i64* %PC
  %1713 = add i64 %1712, 5
  store i64 %1713, i64* %PC
  %1714 = bitcast i8* %1710 to i64*
  store i64 %1711, i64* %1714, align 1, !tbaa !2428
  %1715 = getelementptr inbounds i8, i8* %1710, i64 8
  %1716 = bitcast i8* %1715 to i64*
  store i64 0, i64* %1716, align 1, !tbaa !2428
  %1717 = load i64, i64* %RBP
  %1718 = sub i64 %1717, 32
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 4
  store i64 %1720, i64* %PC
  %1721 = inttoptr i64 %1718 to i64*
  %1722 = load i64, i64* %1721
  store i64 %1722, i64* %RAX, align 8, !tbaa !2428
  %1723 = load i64, i64* %RBP
  %1724 = sub i64 %1723, 12
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 3
  store i64 %1726, i64* %PC
  %1727 = inttoptr i64 %1724 to i32*
  %1728 = load i32, i32* %1727
  %1729 = zext i32 %1728 to i64
  store i64 %1729, i64* %RDX, align 8, !tbaa !2428
  %1730 = load i64, i64* %RDX
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 3
  store i64 %1732, i64* %PC
  %1733 = trunc i64 %1730 to i32
  %1734 = shl i32 %1733, 1
  %1735 = icmp slt i32 %1733, 0
  %1736 = icmp slt i32 %1734, 0
  %1737 = xor i1 %1735, %1736
  %1738 = zext i32 %1734 to i64
  store i64 %1738, i64* %RDX, align 8, !tbaa !2428
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1740 = zext i1 %1735 to i8
  store i8 %1740, i8* %1739, align 1, !tbaa !2451
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1742 = and i32 %1734, 254
  %1743 = call i32 @llvm.ctpop.i32(i32 %1742) #17
  %1744 = trunc i32 %1743 to i8
  %1745 = and i8 %1744, 1
  %1746 = xor i8 %1745, 1
  store i8 %1746, i8* %1741, align 1, !tbaa !2451
  %1747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1747, align 1, !tbaa !2451
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1749 = icmp eq i32 %1734, 0
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %1748, align 1, !tbaa !2451
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1752 = lshr i32 %1734, 31
  %1753 = trunc i32 %1752 to i8
  store i8 %1753, i8* %1751, align 1, !tbaa !2451
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1755 = zext i1 %1737 to i8
  store i8 %1755, i8* %1754, align 1, !tbaa !2451
  %1756 = load i64, i64* %RDX
  %1757 = load i64, i64* %PC
  %1758 = add i64 %1757, 3
  store i64 %1758, i64* %PC
  %1759 = trunc i64 %1756 to i32
  %1760 = add i32 1, %1759
  %1761 = zext i32 %1760 to i64
  store i64 %1761, i64* %RDX, align 8, !tbaa !2428
  %1762 = icmp ult i32 %1760, %1759
  %1763 = icmp ult i32 %1760, 1
  %1764 = or i1 %1762, %1763
  %1765 = zext i1 %1764 to i8
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1765, i8* %1766, align 1, !tbaa !2432
  %1767 = and i32 %1760, 255
  %1768 = call i32 @llvm.ctpop.i32(i32 %1767) #17
  %1769 = trunc i32 %1768 to i8
  %1770 = and i8 %1769, 1
  %1771 = xor i8 %1770, 1
  %1772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1771, i8* %1772, align 1, !tbaa !2446
  %1773 = xor i64 1, %1756
  %1774 = trunc i64 %1773 to i32
  %1775 = xor i32 %1774, %1760
  %1776 = lshr i32 %1775, 4
  %1777 = trunc i32 %1776 to i8
  %1778 = and i8 %1777, 1
  %1779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1778, i8* %1779, align 1, !tbaa !2447
  %1780 = icmp eq i32 %1760, 0
  %1781 = zext i1 %1780 to i8
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1781, i8* %1782, align 1, !tbaa !2448
  %1783 = lshr i32 %1760, 31
  %1784 = trunc i32 %1783 to i8
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1784, i8* %1785, align 1, !tbaa !2449
  %1786 = lshr i32 %1759, 31
  %1787 = xor i32 %1783, %1786
  %1788 = add nuw nsw i32 %1787, %1783
  %1789 = icmp eq i32 %1788, 2
  %1790 = zext i1 %1789 to i8
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1790, i8* %1791, align 1, !tbaa !2450
  %1792 = load i32, i32* %EDX
  %1793 = zext i32 %1792 to i64
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 3
  store i64 %1795, i64* %PC
  %1796 = shl i64 %1793, 32
  %1797 = ashr exact i64 %1796, 32
  store i64 %1797, i64* %RCX, align 8, !tbaa !2428
  %1798 = load i64, i64* %RAX
  %1799 = load i64, i64* %RCX
  %1800 = mul i64 %1799, 8
  %1801 = add i64 %1800, %1798
  %1802 = bitcast %union.vec128_t* %XMM0 to i8*
  %1803 = load i64, i64* %PC
  %1804 = add i64 %1803, 5
  store i64 %1804, i64* %PC
  %1805 = bitcast i8* %1802 to double*
  %1806 = load double, double* %1805, align 1
  %1807 = inttoptr i64 %1801 to double*
  store double %1806, double* %1807
  %1808 = load i64, i64* %RBP
  %1809 = sub i64 %1808, 12
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 3
  store i64 %1811, i64* %PC
  %1812 = inttoptr i64 %1809 to i32*
  %1813 = load i32, i32* %1812
  %1814 = zext i32 %1813 to i64
  store i64 %1814, i64* %RAX, align 8, !tbaa !2428
  %1815 = load i64, i64* %RAX
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 3
  store i64 %1817, i64* %PC
  %1818 = trunc i64 %1815 to i32
  %1819 = add i32 1, %1818
  %1820 = zext i32 %1819 to i64
  store i64 %1820, i64* %RAX, align 8, !tbaa !2428
  %1821 = icmp ult i32 %1819, %1818
  %1822 = icmp ult i32 %1819, 1
  %1823 = or i1 %1821, %1822
  %1824 = zext i1 %1823 to i8
  %1825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1824, i8* %1825, align 1, !tbaa !2432
  %1826 = and i32 %1819, 255
  %1827 = call i32 @llvm.ctpop.i32(i32 %1826) #17
  %1828 = trunc i32 %1827 to i8
  %1829 = and i8 %1828, 1
  %1830 = xor i8 %1829, 1
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1830, i8* %1831, align 1, !tbaa !2446
  %1832 = xor i64 1, %1815
  %1833 = trunc i64 %1832 to i32
  %1834 = xor i32 %1833, %1819
  %1835 = lshr i32 %1834, 4
  %1836 = trunc i32 %1835 to i8
  %1837 = and i8 %1836, 1
  %1838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1837, i8* %1838, align 1, !tbaa !2447
  %1839 = icmp eq i32 %1819, 0
  %1840 = zext i1 %1839 to i8
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1840, i8* %1841, align 1, !tbaa !2448
  %1842 = lshr i32 %1819, 31
  %1843 = trunc i32 %1842 to i8
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1843, i8* %1844, align 1, !tbaa !2449
  %1845 = lshr i32 %1818, 31
  %1846 = xor i32 %1842, %1845
  %1847 = add nuw nsw i32 %1846, %1842
  %1848 = icmp eq i32 %1847, 2
  %1849 = zext i1 %1848 to i8
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1849, i8* %1850, align 1, !tbaa !2450
  %1851 = load i64, i64* %RBP
  %1852 = sub i64 %1851, 12
  %1853 = load i32, i32* %EAX
  %1854 = zext i32 %1853 to i64
  %1855 = load i64, i64* %PC
  %1856 = add i64 %1855, 3
  store i64 %1856, i64* %PC
  %1857 = inttoptr i64 %1852 to i32*
  store i32 %1853, i32* %1857
  %1858 = load i64, i64* %PC
  %1859 = sub i64 %1858, 87
  %1860 = load i64, i64* %PC
  %1861 = add i64 %1860, 5
  store i64 %1861, i64* %PC
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1859, i64* %1862, align 8, !tbaa !2428
  br label %block_400a6f

block_4009f2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 10
  store i64 %1864, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %1865 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1866 = load i64, i64* %RBP
  %1867 = sub i64 %1866, 96
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 5
  store i64 %1869, i64* %PC
  %1870 = inttoptr i64 %1867 to double*
  %1871 = load double, double* %1870
  %1872 = bitcast i8* %1865 to double*
  store double %1871, double* %1872, align 1, !tbaa !2452
  %1873 = getelementptr inbounds i8, i8* %1865, i64 8
  %1874 = bitcast i8* %1873 to double*
  store double 0.000000e+00, double* %1874, align 1, !tbaa !2452
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 2
  store i64 %1876, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1877 = load i64, i64* %PC
  %1878 = sub i64 %1877, 819
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 5
  %1881 = load i64, i64* %PC
  %1882 = add i64 %1881, 5
  store i64 %1882, i64* %PC
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1884 = load i64, i64* %1883, align 8, !tbaa !2428
  %1885 = add i64 %1884, -8
  %1886 = inttoptr i64 %1885 to i64*
  store i64 %1880, i64* %1886
  store i64 %1885, i64* %1883, align 8, !tbaa !2428
  %1887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1878, i64* %1887, align 8, !tbaa !2428
  %1888 = load i64, i64* %PC
  %1889 = call %struct.Memory* @ext_4006d0_printf(%struct.State* %0, i64 %1888, %struct.Memory* %1318)
  %1890 = load i64, i64* %RBP
  %1891 = sub i64 %1890, 156
  %1892 = load i32, i32* %EAX
  %1893 = zext i32 %1892 to i64
  %1894 = load i64, i64* %PC
  %1895 = add i64 %1894, 6
  store i64 %1895, i64* %PC
  %1896 = inttoptr i64 %1891 to i32*
  store i32 %1892, i32* %1896
  %1897 = load i64, i64* %PC
  %1898 = sub i64 %1897, 862
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 5
  %1901 = load i64, i64* %PC
  %1902 = add i64 %1901, 5
  store i64 %1902, i64* %PC
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1904 = load i64, i64* %1903, align 8, !tbaa !2428
  %1905 = add i64 %1904, -8
  %1906 = inttoptr i64 %1905 to i64*
  store i64 %1900, i64* %1906
  store i64 %1905, i64* %1903, align 8, !tbaa !2428
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1898, i64* %1907, align 8, !tbaa !2428
  %1908 = load i64, i64* %PC
  %1909 = call %struct.Memory* @ext_6050f0_abort(%struct.State* %0, i64 %1908, %struct.Memory* %1889)
  %1910 = load i64, i64* %PC
  %1911 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %1910, %struct.Memory* %1909)
  ret %struct.Memory* %1911

block_400ce3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1912 = load i64, i64* %RBP
  %1913 = sub i64 %1912, 40
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 4
  store i64 %1915, i64* %PC
  %1916 = inttoptr i64 %1913 to i64*
  %1917 = load i64, i64* %1916
  store i64 %1917, i64* %RAX, align 8, !tbaa !2428
  %1918 = load i64, i64* %RBP
  %1919 = sub i64 %1918, 12
  %1920 = load i64, i64* %PC
  %1921 = add i64 %1920, 3
  store i64 %1921, i64* %PC
  %1922 = inttoptr i64 %1919 to i32*
  %1923 = load i32, i32* %1922
  %1924 = zext i32 %1923 to i64
  store i64 %1924, i64* %RCX, align 8, !tbaa !2428
  %1925 = load i64, i64* %RCX
  %1926 = load i64, i64* %PC
  %1927 = add i64 %1926, 3
  store i64 %1927, i64* %PC
  %1928 = trunc i64 %1925 to i32
  %1929 = shl i32 %1928, 1
  %1930 = icmp slt i32 %1928, 0
  %1931 = icmp slt i32 %1929, 0
  %1932 = xor i1 %1930, %1931
  %1933 = zext i32 %1929 to i64
  store i64 %1933, i64* %RCX, align 8, !tbaa !2428
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1935 = zext i1 %1930 to i8
  store i8 %1935, i8* %1934, align 1, !tbaa !2451
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1937 = and i32 %1929, 254
  %1938 = call i32 @llvm.ctpop.i32(i32 %1937) #17
  %1939 = trunc i32 %1938 to i8
  %1940 = and i8 %1939, 1
  %1941 = xor i8 %1940, 1
  store i8 %1941, i8* %1936, align 1, !tbaa !2451
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1942, align 1, !tbaa !2451
  %1943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1944 = icmp eq i32 %1929, 0
  %1945 = zext i1 %1944 to i8
  store i8 %1945, i8* %1943, align 1, !tbaa !2451
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1947 = lshr i32 %1929, 31
  %1948 = trunc i32 %1947 to i8
  store i8 %1948, i8* %1946, align 1, !tbaa !2451
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1950 = zext i1 %1932 to i8
  store i8 %1950, i8* %1949, align 1, !tbaa !2451
  %1951 = load i32, i32* %ECX
  %1952 = zext i32 %1951 to i64
  %1953 = load i64, i64* %PC
  %1954 = add i64 %1953, 3
  store i64 %1954, i64* %PC
  %1955 = shl i64 %1952, 32
  %1956 = ashr exact i64 %1955, 32
  store i64 %1956, i64* %RDX, align 8, !tbaa !2428
  %1957 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1958 = load i64, i64* %RAX
  %1959 = load i64, i64* %RDX
  %1960 = mul i64 %1959, 8
  %1961 = add i64 %1960, %1958
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 5
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to double*
  %1965 = load double, double* %1964
  %1966 = bitcast i8* %1957 to double*
  store double %1965, double* %1966, align 1, !tbaa !2452
  %1967 = getelementptr inbounds i8, i8* %1957, i64 8
  %1968 = bitcast i8* %1967 to double*
  store double 0.000000e+00, double* %1968, align 1, !tbaa !2452
  %1969 = load i64, i64* %RBP
  %1970 = sub i64 %1969, 192
  %1971 = bitcast %union.vec128_t* %XMM0 to i8*
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 8
  store i64 %1973, i64* %PC
  %1974 = bitcast i8* %1971 to double*
  %1975 = load double, double* %1974, align 1
  %1976 = inttoptr i64 %1970 to double*
  store double %1975, double* %1976
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 21
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 5
  store i64 %1980, i64* %PC
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1978, i64* %1981, align 8, !tbaa !2428
  br label %block_400d12

block_400c54:                                     ; preds = %block_400b77
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 5
  store i64 %1983, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 5
  store i64 %1985, i64* %PC
  store i64 4294967295, i64* %RSI, align 8, !tbaa !2428
  %1986 = load i64, i64* %RBP
  %1987 = sub i64 %1986, 40
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 4
  store i64 %1989, i64* %PC
  %1990 = inttoptr i64 %1987 to i64*
  %1991 = load i64, i64* %1990
  store i64 %1991, i64* %RDX, align 8, !tbaa !2428
  %1992 = load i64, i64* %RBP
  %1993 = sub i64 %1992, 24
  %1994 = load i64, i64* %PC
  %1995 = add i64 %1994, 4
  store i64 %1995, i64* %PC
  %1996 = inttoptr i64 %1993 to i64*
  %1997 = load i64, i64* %1996
  store i64 %1997, i64* %RCX, align 8, !tbaa !2428
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 56
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 4
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i64*
  %2003 = load i64, i64* %2002
  store i64 %2003, i64* %R8, align 8, !tbaa !2428
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 998
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 5
  %2008 = load i64, i64* %PC
  %2009 = add i64 %2008, 5
  store i64 %2009, i64* %PC
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2011 = load i64, i64* %2010, align 8, !tbaa !2428
  %2012 = add i64 %2011, -8
  %2013 = inttoptr i64 %2012 to i64*
  store i64 %2007, i64* %2013
  store i64 %2012, i64* %2010, align 8, !tbaa !2428
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2005, i64* %2014, align 8, !tbaa !2428
  %2015 = load i64, i64* %PC
  %2016 = call %struct.Memory* @sub_401050_cdft(%struct.State* %0, i64 %2015, %struct.Memory* %MEMORY.0)
  %2017 = load i64, i64* %RBP
  %2018 = sub i64 %2017, 8
  %2019 = load i64, i64* %PC
  %2020 = add i64 %2019, 3
  store i64 %2020, i64* %PC
  %2021 = inttoptr i64 %2018 to i32*
  %2022 = load i32, i32* %2021
  %2023 = zext i32 %2022 to i64
  store i64 %2023, i64* %RAX, align 8, !tbaa !2428
  %2024 = load i64, i64* %RAX
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 3
  store i64 %2026, i64* %PC
  %2027 = trunc i64 %2024 to i32
  %2028 = add i32 1, %2027
  %2029 = zext i32 %2028 to i64
  store i64 %2029, i64* %RAX, align 8, !tbaa !2428
  %2030 = icmp ult i32 %2028, %2027
  %2031 = icmp ult i32 %2028, 1
  %2032 = or i1 %2030, %2031
  %2033 = zext i1 %2032 to i8
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2033, i8* %2034, align 1, !tbaa !2432
  %2035 = and i32 %2028, 255
  %2036 = call i32 @llvm.ctpop.i32(i32 %2035) #17
  %2037 = trunc i32 %2036 to i8
  %2038 = and i8 %2037, 1
  %2039 = xor i8 %2038, 1
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2039, i8* %2040, align 1, !tbaa !2446
  %2041 = xor i64 1, %2024
  %2042 = trunc i64 %2041 to i32
  %2043 = xor i32 %2042, %2028
  %2044 = lshr i32 %2043, 4
  %2045 = trunc i32 %2044 to i8
  %2046 = and i8 %2045, 1
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2046, i8* %2047, align 1, !tbaa !2447
  %2048 = icmp eq i32 %2028, 0
  %2049 = zext i1 %2048 to i8
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2049, i8* %2050, align 1, !tbaa !2448
  %2051 = lshr i32 %2028, 31
  %2052 = trunc i32 %2051 to i8
  %2053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2052, i8* %2053, align 1, !tbaa !2449
  %2054 = lshr i32 %2027, 31
  %2055 = xor i32 %2051, %2054
  %2056 = add nuw nsw i32 %2055, %2051
  %2057 = icmp eq i32 %2056, 2
  %2058 = zext i1 %2057 to i8
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2058, i8* %2059, align 1, !tbaa !2450
  %2060 = load i64, i64* %RBP
  %2061 = sub i64 %2060, 8
  %2062 = load i32, i32* %EAX
  %2063 = zext i32 %2062 to i64
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 3
  store i64 %2065, i64* %PC
  %2066 = inttoptr i64 %2061 to i32*
  store i32 %2062, i32* %2066
  %2067 = load i64, i64* %PC
  %2068 = sub i64 %2067, 354
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 5
  store i64 %2070, i64* %PC
  %2071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2068, i64* %2071, align 8, !tbaa !2428
  br label %block_400b16

block_400dce:                                     ; preds = %block_400ca7
  %2072 = load i64, i64* %RBP
  %2073 = sub i64 %2072, 32
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 4
  store i64 %2075, i64* %PC
  %2076 = inttoptr i64 %2073 to i64*
  %2077 = load i64, i64* %2076
  store i64 %2077, i64* %RAX, align 8, !tbaa !2428
  %2078 = load i64, i64* %RAX
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 3
  store i64 %2080, i64* %PC
  store i64 %2078, i64* %RDI, align 8, !tbaa !2428
  %2081 = load i64, i64* %PC
  %2082 = sub i64 %2081, 1845
  %2083 = load i64, i64* %PC
  %2084 = add i64 %2083, 5
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 5
  store i64 %2086, i64* %PC
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2088 = load i64, i64* %2087, align 8, !tbaa !2428
  %2089 = add i64 %2088, -8
  %2090 = inttoptr i64 %2089 to i64*
  store i64 %2084, i64* %2090
  store i64 %2089, i64* %2087, align 8, !tbaa !2428
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2082, i64* %2091, align 8, !tbaa !2428
  %2092 = load i64, i64* %PC
  %2093 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %2092, %struct.Memory* %MEMORY.1)
  %2094 = load i64, i64* %RBP
  %2095 = sub i64 %2094, 56
  %2096 = load i64, i64* %PC
  %2097 = add i64 %2096, 4
  store i64 %2097, i64* %PC
  %2098 = inttoptr i64 %2095 to i64*
  %2099 = load i64, i64* %2098
  store i64 %2099, i64* %RAX, align 8, !tbaa !2428
  %2100 = load i64, i64* %RAX
  %2101 = load i64, i64* %PC
  %2102 = add i64 %2101, 3
  store i64 %2102, i64* %PC
  store i64 %2100, i64* %RDI, align 8, !tbaa !2428
  %2103 = load i64, i64* %PC
  %2104 = sub i64 %2103, 1857
  %2105 = load i64, i64* %PC
  %2106 = add i64 %2105, 5
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 5
  store i64 %2108, i64* %PC
  %2109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2110 = load i64, i64* %2109, align 8, !tbaa !2428
  %2111 = add i64 %2110, -8
  %2112 = inttoptr i64 %2111 to i64*
  store i64 %2106, i64* %2112
  store i64 %2111, i64* %2109, align 8, !tbaa !2428
  %2113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2104, i64* %2113, align 8, !tbaa !2428
  %2114 = load i64, i64* %PC
  %2115 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %2114, %struct.Memory* %2093)
  %2116 = load i64, i64* %RBP
  %2117 = sub i64 %2116, 24
  %2118 = load i64, i64* %PC
  %2119 = add i64 %2118, 4
  store i64 %2119, i64* %PC
  %2120 = inttoptr i64 %2117 to i64*
  %2121 = load i64, i64* %2120
  store i64 %2121, i64* %RAX, align 8, !tbaa !2428
  %2122 = load i64, i64* %RAX
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 3
  store i64 %2124, i64* %PC
  store i64 %2122, i64* %RDI, align 8, !tbaa !2428
  %2125 = load i64, i64* %PC
  %2126 = sub i64 %2125, 1869
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 5
  %2129 = load i64, i64* %PC
  %2130 = add i64 %2129, 5
  store i64 %2130, i64* %PC
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2132 = load i64, i64* %2131, align 8, !tbaa !2428
  %2133 = add i64 %2132, -8
  %2134 = inttoptr i64 %2133 to i64*
  store i64 %2128, i64* %2134
  store i64 %2133, i64* %2131, align 8, !tbaa !2428
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2126, i64* %2135, align 8, !tbaa !2428
  %2136 = load i64, i64* %PC
  %2137 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %2136, %struct.Memory* %2115)
  %2138 = load i64, i64* %RBP
  %2139 = sub i64 %2138, 40
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 4
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2139 to i64*
  %2143 = load i64, i64* %2142
  store i64 %2143, i64* %RAX, align 8, !tbaa !2428
  %2144 = load i64, i64* %RAX
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 3
  store i64 %2146, i64* %PC
  store i64 %2144, i64* %RDI, align 8, !tbaa !2428
  %2147 = load i64, i64* %PC
  %2148 = sub i64 %2147, 1881
  %2149 = load i64, i64* %PC
  %2150 = add i64 %2149, 5
  %2151 = load i64, i64* %PC
  %2152 = add i64 %2151, 5
  store i64 %2152, i64* %PC
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2154 = load i64, i64* %2153, align 8, !tbaa !2428
  %2155 = add i64 %2154, -8
  %2156 = inttoptr i64 %2155 to i64*
  store i64 %2150, i64* %2156
  store i64 %2155, i64* %2153, align 8, !tbaa !2428
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2148, i64* %2157, align 8, !tbaa !2428
  %2158 = load i64, i64* %PC
  %2159 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %2158, %struct.Memory* %2137)
  %2160 = load i64, i64* %RBP
  %2161 = sub i64 %2160, 48
  %2162 = load i64, i64* %PC
  %2163 = add i64 %2162, 4
  store i64 %2163, i64* %PC
  %2164 = inttoptr i64 %2161 to i64*
  %2165 = load i64, i64* %2164
  store i64 %2165, i64* %RAX, align 8, !tbaa !2428
  %2166 = load i64, i64* %RAX
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 3
  store i64 %2168, i64* %PC
  store i64 %2166, i64* %RDI, align 8, !tbaa !2428
  %2169 = load i64, i64* %PC
  %2170 = sub i64 %2169, 1893
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 5
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 5
  store i64 %2174, i64* %PC
  %2175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2176 = load i64, i64* %2175, align 8, !tbaa !2428
  %2177 = add i64 %2176, -8
  %2178 = inttoptr i64 %2177 to i64*
  store i64 %2172, i64* %2178
  store i64 %2177, i64* %2175, align 8, !tbaa !2428
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2170, i64* %2179, align 8, !tbaa !2428
  %2180 = load i64, i64* %PC
  %2181 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %2180, %struct.Memory* %2159)
  %2182 = load i64, i64* %RAX
  %2183 = load i32, i32* %EAX
  %2184 = zext i32 %2183 to i64
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 2
  store i64 %2186, i64* %PC
  %2187 = xor i64 %2184, %2182
  %2188 = trunc i64 %2187 to i32
  %2189 = and i64 %2187, 4294967295
  store i64 %2189, i64* %RAX, align 8, !tbaa !2428
  %2190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2190, align 1, !tbaa !2432
  %2191 = and i32 %2188, 255
  %2192 = call i32 @llvm.ctpop.i32(i32 %2191) #17
  %2193 = trunc i32 %2192 to i8
  %2194 = and i8 %2193, 1
  %2195 = xor i8 %2194, 1
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2195, i8* %2196, align 1, !tbaa !2446
  %2197 = icmp eq i32 %2188, 0
  %2198 = zext i1 %2197 to i8
  %2199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2198, i8* %2199, align 1, !tbaa !2448
  %2200 = lshr i32 %2188, 31
  %2201 = trunc i32 %2200 to i8
  %2202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2201, i8* %2202, align 1, !tbaa !2449
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2203, align 1, !tbaa !2450
  %2204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2204, align 1, !tbaa !2447
  %2205 = load i64, i64* %RSP
  %2206 = load i64, i64* %PC
  %2207 = add i64 %2206, 7
  store i64 %2207, i64* %PC
  %2208 = add i64 224, %2205
  store i64 %2208, i64* %RSP, align 8, !tbaa !2428
  %2209 = icmp ult i64 %2208, %2205
  %2210 = icmp ult i64 %2208, 224
  %2211 = or i1 %2209, %2210
  %2212 = zext i1 %2211 to i8
  %2213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2212, i8* %2213, align 1, !tbaa !2432
  %2214 = trunc i64 %2208 to i32
  %2215 = and i32 %2214, 255
  %2216 = call i32 @llvm.ctpop.i32(i32 %2215) #17
  %2217 = trunc i32 %2216 to i8
  %2218 = and i8 %2217, 1
  %2219 = xor i8 %2218, 1
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2219, i8* %2220, align 1, !tbaa !2446
  %2221 = xor i64 224, %2205
  %2222 = xor i64 %2221, %2208
  %2223 = lshr i64 %2222, 4
  %2224 = trunc i64 %2223 to i8
  %2225 = and i8 %2224, 1
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2225, i8* %2226, align 1, !tbaa !2447
  %2227 = icmp eq i64 %2208, 0
  %2228 = zext i1 %2227 to i8
  %2229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2228, i8* %2229, align 1, !tbaa !2448
  %2230 = lshr i64 %2208, 63
  %2231 = trunc i64 %2230 to i8
  %2232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2231, i8* %2232, align 1, !tbaa !2449
  %2233 = lshr i64 %2205, 63
  %2234 = xor i64 %2230, %2233
  %2235 = add nuw nsw i64 %2234, %2230
  %2236 = icmp eq i64 %2235, 2
  %2237 = zext i1 %2236 to i8
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2237, i8* %2238, align 1, !tbaa !2450
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 1
  store i64 %2240, i64* %PC
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2242 = load i64, i64* %2241, align 8, !tbaa !2428
  %2243 = add i64 %2242, 8
  %2244 = inttoptr i64 %2242 to i64*
  %2245 = load i64, i64* %2244
  store i64 %2245, i64* %RBP, align 8, !tbaa !2428
  store i64 %2243, i64* %2241, align 8, !tbaa !2428
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 1
  store i64 %2247, i64* %PC
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2250 = load i64, i64* %2249, align 8, !tbaa !2428
  %2251 = inttoptr i64 %2250 to i64*
  %2252 = load i64, i64* %2251
  store i64 %2252, i64* %2248, align 8, !tbaa !2428
  %2253 = add i64 %2250, 8
  store i64 %2253, i64* %2249, align 8, !tbaa !2428
  ret %struct.Memory* %2181

block_400d76:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %2254 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2256 = bitcast %union.vec128_t* %XMM0 to i8*
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 3
  store i64 %2258, i64* %PC
  %2259 = bitcast i8* %2255 to i64*
  %2260 = load i64, i64* %2259, align 1
  %2261 = getelementptr inbounds i8, i8* %2255, i64 8
  %2262 = bitcast i8* %2261 to i64*
  %2263 = load i64, i64* %2262, align 1
  %2264 = bitcast i8* %2256 to i64*
  %2265 = load i64, i64* %2264, align 1
  %2266 = getelementptr inbounds i8, i8* %2256, i64 8
  %2267 = bitcast i8* %2266 to i64*
  %2268 = load i64, i64* %2267, align 1
  %2269 = xor i64 %2265, %2260
  %2270 = xor i64 %2268, %2263
  %2271 = trunc i64 %2269 to i32
  %2272 = lshr i64 %2269, 32
  %2273 = trunc i64 %2272 to i32
  %2274 = bitcast i8* %2254 to i32*
  store i32 %2271, i32* %2274, align 1, !tbaa !2454
  %2275 = getelementptr inbounds i8, i8* %2254, i64 4
  %2276 = bitcast i8* %2275 to i32*
  store i32 %2273, i32* %2276, align 1, !tbaa !2454
  %2277 = trunc i64 %2270 to i32
  %2278 = getelementptr inbounds i8, i8* %2254, i64 8
  %2279 = bitcast i8* %2278 to i32*
  store i32 %2277, i32* %2279, align 1, !tbaa !2454
  %2280 = lshr i64 %2270, 32
  %2281 = trunc i64 %2280 to i32
  %2282 = getelementptr inbounds i8, i8* %2254, i64 12
  %2283 = bitcast i8* %2282 to i32*
  store i32 %2281, i32* %2283, align 1, !tbaa !2454
  %2284 = load i64, i64* %RBP
  %2285 = sub i64 %2284, 208
  %2286 = bitcast %union.vec128_t* %XMM0 to i8*
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 8
  store i64 %2288, i64* %PC
  %2289 = bitcast i8* %2286 to double*
  %2290 = load double, double* %2289, align 1
  %2291 = inttoptr i64 %2285 to double*
  store double %2290, double* %2291
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 5
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 5
  store i64 %2295, i64* %PC
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2293, i64* %2296, align 8, !tbaa !2428
  br label %block_400d86

block_400ca7:                                     ; preds = %block_400d86, %block_400c7d
  %MEMORY.1 = phi %struct.Memory* [ %1347, %block_400c7d ], [ %3290, %block_400d86 ]
  %2297 = load i64, i64* %RBP
  %2298 = sub i64 %2297, 12
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 7
  store i64 %2300, i64* %PC
  %2301 = inttoptr i64 %2298 to i32*
  %2302 = load i32, i32* %2301
  %2303 = sub i32 %2302, 1024
  %2304 = icmp ult i32 %2302, 1024
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2305, i8* %2306, align 1, !tbaa !2432
  %2307 = and i32 %2303, 255
  %2308 = call i32 @llvm.ctpop.i32(i32 %2307) #17
  %2309 = trunc i32 %2308 to i8
  %2310 = and i8 %2309, 1
  %2311 = xor i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2311, i8* %2312, align 1, !tbaa !2446
  %2313 = xor i32 %2302, 1024
  %2314 = xor i32 %2313, %2303
  %2315 = lshr i32 %2314, 4
  %2316 = trunc i32 %2315 to i8
  %2317 = and i8 %2316, 1
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2317, i8* %2318, align 1, !tbaa !2447
  %2319 = icmp eq i32 %2303, 0
  %2320 = zext i1 %2319 to i8
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2320, i8* %2321, align 1, !tbaa !2448
  %2322 = lshr i32 %2303, 31
  %2323 = trunc i32 %2322 to i8
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2323, i8* %2324, align 1, !tbaa !2449
  %2325 = lshr i32 %2302, 31
  %2326 = xor i32 %2322, %2325
  %2327 = add nuw nsw i32 %2326, %2325
  %2328 = icmp eq i32 %2327, 2
  %2329 = zext i1 %2328 to i8
  %2330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2329, i8* %2330, align 1, !tbaa !2450
  %2331 = load i64, i64* %PC
  %2332 = add i64 %2331, 288
  %2333 = load i64, i64* %PC
  %2334 = add i64 %2333, 6
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 6
  store i64 %2336, i64* %PC
  %2337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2338 = load i8, i8* %2337, align 1, !tbaa !2449
  %2339 = icmp ne i8 %2338, 0
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2341 = load i8, i8* %2340, align 1, !tbaa !2450
  %2342 = icmp ne i8 %2341, 0
  %2343 = xor i1 %2339, %2342
  %2344 = xor i1 %2343, true
  %2345 = zext i1 %2344 to i8
  store i8 %2345, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2347 = select i1 %2343, i64 %2334, i64 %2332
  store i64 %2347, i64* %2346, align 8, !tbaa !2428
  %2348 = load i8, i8* %BRANCH_TAKEN
  %2349 = icmp eq i8 %2348, 1
  br i1 %2349, label %block_400dce, label %block_400cb4

block_400b23:                                     ; preds = %block_400b16
  %2350 = add i64 %2672, 5
  store i64 %2350, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %2351 = load i64, i64* %PC
  %2352 = add i64 %2351, 5
  store i64 %2352, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %2353 = load i64, i64* %PC
  %2354 = add i64 %2353, 5
  store i64 %2354, i64* %PC
  store i64 16384, i64* %RAX, align 8, !tbaa !2428
  %2355 = load i32, i32* %EAX
  %2356 = zext i32 %2355 to i64
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 2
  store i64 %2358, i64* %PC
  %2359 = and i64 %2356, 4294967295
  store i64 %2359, i64* %RDX, align 8, !tbaa !2428
  %2360 = load i64, i64* %RBP
  %2361 = sub i64 %2360, 40
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 4
  store i64 %2363, i64* %PC
  %2364 = inttoptr i64 %2361 to i64*
  %2365 = load i64, i64* %2364
  store i64 %2365, i64* %RCX, align 8, !tbaa !2428
  %2366 = load i64, i64* %RBP
  %2367 = sub i64 %2366, 48
  %2368 = load i64, i64* %PC
  %2369 = add i64 %2368, 4
  store i64 %2369, i64* %PC
  %2370 = inttoptr i64 %2367 to i64*
  %2371 = load i64, i64* %2370
  store i64 %2371, i64* %R8, align 8, !tbaa !2428
  %2372 = load i64, i64* %RBP
  %2373 = sub i64 %2372, 176
  %2374 = load i32, i32* %EDI
  %2375 = zext i32 %2374 to i64
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 6
  store i64 %2377, i64* %PC
  %2378 = inttoptr i64 %2373 to i32*
  store i32 %2374, i32* %2378
  %2379 = load i64, i64* %RCX
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 3
  store i64 %2381, i64* %PC
  store i64 %2379, i64* %RDI, align 8, !tbaa !2428
  %2382 = load i64, i64* %RBP
  %2383 = sub i64 %2382, 180
  %2384 = load i32, i32* %ESI
  %2385 = zext i32 %2384 to i64
  %2386 = load i64, i64* %PC
  %2387 = add i64 %2386, 6
  store i64 %2387, i64* %PC
  %2388 = inttoptr i64 %2383 to i32*
  store i32 %2384, i32* %2388
  %2389 = load i64, i64* %R8
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 3
  store i64 %2391, i64* %PC
  store i64 %2389, i64* %RSI, align 8, !tbaa !2428
  %2392 = load i64, i64* %PC
  %2393 = sub i64 %2392, 1086
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 5
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 5
  store i64 %2397, i64* %PC
  %2398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2399 = load i64, i64* %2398, align 8, !tbaa !2428
  %2400 = add i64 %2399, -8
  %2401 = inttoptr i64 %2400 to i64*
  store i64 %2395, i64* %2401
  store i64 %2400, i64* %2398, align 8, !tbaa !2428
  %2402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2393, i64* %2402, align 8, !tbaa !2428
  %2403 = load i64, i64* %PC
  %2404 = call %struct.Memory* @ext_605128_memcpy(%struct.State* %0, i64 %2403, %struct.Memory* %MEMORY.2)
  %2405 = load i64, i64* %RBP
  %2406 = sub i64 %2405, 40
  %2407 = load i64, i64* %PC
  %2408 = add i64 %2407, 4
  store i64 %2408, i64* %PC
  %2409 = inttoptr i64 %2406 to i64*
  %2410 = load i64, i64* %2409
  store i64 %2410, i64* %RDX, align 8, !tbaa !2428
  %2411 = load i64, i64* %RBP
  %2412 = sub i64 %2411, 24
  %2413 = load i64, i64* %PC
  %2414 = add i64 %2413, 4
  store i64 %2414, i64* %PC
  %2415 = inttoptr i64 %2412 to i64*
  %2416 = load i64, i64* %2415
  store i64 %2416, i64* %RCX, align 8, !tbaa !2428
  %2417 = load i64, i64* %RBP
  %2418 = sub i64 %2417, 56
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 4
  store i64 %2420, i64* %PC
  %2421 = inttoptr i64 %2418 to i64*
  %2422 = load i64, i64* %2421
  store i64 %2422, i64* %R8, align 8, !tbaa !2428
  %2423 = load i64, i64* %RBP
  %2424 = sub i64 %2423, 176
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 6
  store i64 %2426, i64* %PC
  %2427 = inttoptr i64 %2424 to i32*
  %2428 = load i32, i32* %2427
  %2429 = zext i32 %2428 to i64
  store i64 %2429, i64* %RDI, align 8, !tbaa !2428
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 180
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 6
  store i64 %2433, i64* %PC
  %2434 = inttoptr i64 %2431 to i32*
  %2435 = load i32, i32* %2434
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RSI, align 8, !tbaa !2428
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 1253
  %2439 = load i64, i64* %PC
  %2440 = add i64 %2439, 5
  %2441 = load i64, i64* %PC
  %2442 = add i64 %2441, 5
  store i64 %2442, i64* %PC
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2444 = load i64, i64* %2443, align 8, !tbaa !2428
  %2445 = add i64 %2444, -8
  %2446 = inttoptr i64 %2445 to i64*
  store i64 %2440, i64* %2446
  store i64 %2445, i64* %2443, align 8, !tbaa !2428
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2438, i64* %2447, align 8, !tbaa !2428
  %2448 = load i64, i64* %PC
  %2449 = call %struct.Memory* @sub_401050_cdft(%struct.State* %0, i64 %2448, %struct.Memory* %2404)
  %2450 = load i64, i64* %RBP
  %2451 = sub i64 %2450, 100
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 7
  store i64 %2453, i64* %PC
  %2454 = inttoptr i64 %2451 to i32*
  store i32 0, i32* %2454
  br label %block_400b77

block_400cb4:                                     ; preds = %block_400ca7
  %2455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2456 = load i64, i64* %PC
  %2457 = add i64 %2456, 8
  store i64 %2457, i64* %PC
  %2458 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 48) to double*)
  %2459 = bitcast i8* %2455 to double*
  store double %2458, double* %2459, align 1, !tbaa !2452
  %2460 = getelementptr inbounds i8, i8* %2455, i64 8
  %2461 = bitcast i8* %2460 to double*
  store double 0.000000e+00, double* %2461, align 1, !tbaa !2452
  %2462 = load i64, i64* %RBP
  %2463 = sub i64 %2462, 40
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 4
  store i64 %2465, i64* %PC
  %2466 = inttoptr i64 %2463 to i64*
  %2467 = load i64, i64* %2466
  store i64 %2467, i64* %RAX, align 8, !tbaa !2428
  %2468 = load i64, i64* %RBP
  %2469 = sub i64 %2468, 12
  %2470 = load i64, i64* %PC
  %2471 = add i64 %2470, 3
  store i64 %2471, i64* %PC
  %2472 = inttoptr i64 %2469 to i32*
  %2473 = load i32, i32* %2472
  %2474 = zext i32 %2473 to i64
  store i64 %2474, i64* %RCX, align 8, !tbaa !2428
  %2475 = load i64, i64* %RCX
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 3
  store i64 %2477, i64* %PC
  %2478 = trunc i64 %2475 to i32
  %2479 = shl i32 %2478, 1
  %2480 = icmp slt i32 %2478, 0
  %2481 = icmp slt i32 %2479, 0
  %2482 = xor i1 %2480, %2481
  %2483 = zext i32 %2479 to i64
  store i64 %2483, i64* %RCX, align 8, !tbaa !2428
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2485 = zext i1 %2480 to i8
  store i8 %2485, i8* %2484, align 1, !tbaa !2451
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2487 = and i32 %2479, 254
  %2488 = call i32 @llvm.ctpop.i32(i32 %2487) #17
  %2489 = trunc i32 %2488 to i8
  %2490 = and i8 %2489, 1
  %2491 = xor i8 %2490, 1
  store i8 %2491, i8* %2486, align 1, !tbaa !2451
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2492, align 1, !tbaa !2451
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2494 = icmp eq i32 %2479, 0
  %2495 = zext i1 %2494 to i8
  store i8 %2495, i8* %2493, align 1, !tbaa !2451
  %2496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2497 = lshr i32 %2479, 31
  %2498 = trunc i32 %2497 to i8
  store i8 %2498, i8* %2496, align 1, !tbaa !2451
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2500 = zext i1 %2482 to i8
  store i8 %2500, i8* %2499, align 1, !tbaa !2451
  %2501 = load i32, i32* %ECX
  %2502 = zext i32 %2501 to i64
  %2503 = load i64, i64* %PC
  %2504 = add i64 %2503, 3
  store i64 %2504, i64* %PC
  %2505 = shl i64 %2502, 32
  %2506 = ashr exact i64 %2505, 32
  store i64 %2506, i64* %RDX, align 8, !tbaa !2428
  %2507 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2508 = load i64, i64* %RAX
  %2509 = load i64, i64* %RDX
  %2510 = mul i64 %2509, 8
  %2511 = add i64 %2510, %2508
  %2512 = load i64, i64* %PC
  %2513 = add i64 %2512, 5
  store i64 %2513, i64* %PC
  %2514 = inttoptr i64 %2511 to double*
  %2515 = load double, double* %2514
  %2516 = bitcast i8* %2507 to double*
  store double %2515, double* %2516, align 1, !tbaa !2452
  %2517 = getelementptr inbounds i8, i8* %2507, i64 8
  %2518 = bitcast i8* %2517 to double*
  store double 0.000000e+00, double* %2518, align 1, !tbaa !2452
  %2519 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2520 = load i64, i64* %PC
  %2521 = add i64 %2520, 7
  store i64 %2521, i64* %PC
  %2522 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 96) to float*)
  %2523 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 100) to float*)
  %2524 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 104) to float*)
  %2525 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 108) to float*)
  %2526 = bitcast i8* %2519 to float*
  store float %2522, float* %2526, align 1, !tbaa !2455
  %2527 = getelementptr inbounds i8, i8* %2519, i64 4
  %2528 = bitcast i8* %2527 to float*
  store float %2523, float* %2528, align 1, !tbaa !2455
  %2529 = getelementptr inbounds i8, i8* %2519, i64 8
  %2530 = bitcast i8* %2529 to float*
  store float %2524, float* %2530, align 1, !tbaa !2455
  %2531 = getelementptr inbounds i8, i8* %2519, i64 12
  %2532 = bitcast i8* %2531 to float*
  store float %2525, float* %2532, align 1, !tbaa !2455
  %2533 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2534 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2535 = bitcast %union.vec128_t* %XMM2 to i8*
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 4
  store i64 %2537, i64* %PC
  %2538 = bitcast i8* %2534 to i64*
  %2539 = load i64, i64* %2538, align 1
  %2540 = getelementptr inbounds i8, i8* %2534, i64 8
  %2541 = bitcast i8* %2540 to i64*
  %2542 = load i64, i64* %2541, align 1
  %2543 = bitcast i8* %2535 to i64*
  %2544 = load i64, i64* %2543, align 1
  %2545 = getelementptr inbounds i8, i8* %2535, i64 8
  %2546 = bitcast i8* %2545 to i64*
  %2547 = load i64, i64* %2546, align 1
  %2548 = and i64 %2544, %2539
  %2549 = and i64 %2547, %2542
  %2550 = trunc i64 %2548 to i32
  %2551 = lshr i64 %2548, 32
  %2552 = trunc i64 %2551 to i32
  %2553 = bitcast i8* %2533 to i32*
  store i32 %2550, i32* %2553, align 1, !tbaa !2454
  %2554 = getelementptr inbounds i8, i8* %2533, i64 4
  %2555 = bitcast i8* %2554 to i32*
  store i32 %2552, i32* %2555, align 1, !tbaa !2454
  %2556 = trunc i64 %2549 to i32
  %2557 = getelementptr inbounds i8, i8* %2533, i64 8
  %2558 = bitcast i8* %2557 to i32*
  store i32 %2556, i32* %2558, align 1, !tbaa !2454
  %2559 = lshr i64 %2549, 32
  %2560 = trunc i64 %2559 to i32
  %2561 = getelementptr inbounds i8, i8* %2533, i64 12
  %2562 = bitcast i8* %2561 to i32*
  store i32 %2560, i32* %2562, align 1, !tbaa !2454
  %2563 = bitcast %union.vec128_t* %XMM1 to i8*
  %2564 = bitcast %union.vec128_t* %XMM0 to i8*
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 4
  store i64 %2566, i64* %PC
  %2567 = bitcast i8* %2563 to double*
  %2568 = load double, double* %2567, align 1
  %2569 = bitcast i8* %2564 to double*
  %2570 = load double, double* %2569, align 1
  %2571 = fcmp uno double %2568, %2570
  br i1 %2571, label %2572, label %2584

; <label>:2572:                                   ; preds = %block_400cb4
  %2573 = fadd double %2568, %2570
  %2574 = bitcast double %2573 to i64
  %2575 = and i64 %2574, 9221120237041090560
  %2576 = icmp eq i64 %2575, 9218868437227405312
  %2577 = and i64 %2574, 2251799813685247
  %2578 = icmp ne i64 %2577, 0
  %2579 = and i1 %2576, %2578
  br i1 %2579, label %2580, label %2590

; <label>:2580:                                   ; preds = %2572
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2582 = load i64, i64* %2581, align 8, !tbaa !2428
  %2583 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2582, %struct.Memory* %MEMORY.1) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2584:                                   ; preds = %block_400cb4
  %2585 = fcmp ogt double %2568, %2570
  br i1 %2585, label %2590, label %2586

; <label>:2586:                                   ; preds = %2584
  %2587 = fcmp olt double %2568, %2570
  br i1 %2587, label %2590, label %2588

; <label>:2588:                                   ; preds = %2586
  %2589 = fcmp oeq double %2568, %2570
  br i1 %2589, label %2590, label %2597

; <label>:2590:                                   ; preds = %2588, %2586, %2584, %2572
  %2591 = phi i8 [ 0, %2584 ], [ 0, %2586 ], [ 1, %2588 ], [ 1, %2572 ]
  %2592 = phi i8 [ 0, %2584 ], [ 0, %2586 ], [ 0, %2588 ], [ 1, %2572 ]
  %2593 = phi i8 [ 0, %2584 ], [ 1, %2586 ], [ 0, %2588 ], [ 1, %2572 ]
  %2594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2591, i8* %2594, align 1, !tbaa !2451
  %2595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2592, i8* %2595, align 1, !tbaa !2451
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2593, i8* %2596, align 1, !tbaa !2451
  br label %2597

; <label>:2597:                                   ; preds = %2590, %2588
  %2598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2598, align 1, !tbaa !2451
  %2599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2599, align 1, !tbaa !2451
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2600, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2580, %2597
  %2601 = phi %struct.Memory* [ %2583, %2580 ], [ %MEMORY.1, %2597 ]
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 37
  %2604 = load i64, i64* %PC
  %2605 = add i64 %2604, 6
  %2606 = load i64, i64* %PC
  %2607 = add i64 %2606, 6
  store i64 %2607, i64* %PC
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2609 = load i8, i8* %2608, align 1, !tbaa !2432
  %2610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2611 = load i8, i8* %2610, align 1, !tbaa !2448
  %2612 = or i8 %2611, %2609
  %2613 = icmp ne i8 %2612, 0
  %2614 = zext i1 %2613 to i8
  store i8 %2614, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2616 = select i1 %2613, i64 %2603, i64 %2605
  store i64 %2616, i64* %2615, align 8, !tbaa !2428
  %2617 = load i8, i8* %BRANCH_TAKEN
  %2618 = icmp eq i8 %2617, 1
  br i1 %2618, label %block_400d02, label %block_400ce3

block_400b16:                                     ; preds = %block_400acb, %block_400c54
  %MEMORY.2 = phi %struct.Memory* [ %2841, %block_400acb ], [ %2016, %block_400c54 ]
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 8
  %2621 = load i64, i64* %PC
  %2622 = add i64 %2621, 7
  store i64 %2622, i64* %PC
  %2623 = inttoptr i64 %2620 to i32*
  %2624 = load i32, i32* %2623
  %2625 = sub i32 %2624, 150000
  %2626 = icmp ult i32 %2624, 150000
  %2627 = zext i1 %2626 to i8
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2627, i8* %2628, align 1, !tbaa !2432
  %2629 = and i32 %2625, 255
  %2630 = call i32 @llvm.ctpop.i32(i32 %2629) #17
  %2631 = trunc i32 %2630 to i8
  %2632 = and i8 %2631, 1
  %2633 = xor i8 %2632, 1
  %2634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2633, i8* %2634, align 1, !tbaa !2446
  %2635 = xor i32 %2624, 150000
  %2636 = xor i32 %2635, %2625
  %2637 = lshr i32 %2636, 4
  %2638 = trunc i32 %2637 to i8
  %2639 = and i8 %2638, 1
  %2640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2639, i8* %2640, align 1, !tbaa !2447
  %2641 = icmp eq i32 %2625, 0
  %2642 = zext i1 %2641 to i8
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2642, i8* %2643, align 1, !tbaa !2448
  %2644 = lshr i32 %2625, 31
  %2645 = trunc i32 %2644 to i8
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2645, i8* %2646, align 1, !tbaa !2449
  %2647 = lshr i32 %2624, 31
  %2648 = xor i32 %2644, %2647
  %2649 = add nuw nsw i32 %2648, %2647
  %2650 = icmp eq i32 %2649, 2
  %2651 = zext i1 %2650 to i8
  %2652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2651, i8* %2652, align 1, !tbaa !2450
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 352
  %2655 = load i64, i64* %PC
  %2656 = add i64 %2655, 6
  %2657 = load i64, i64* %PC
  %2658 = add i64 %2657, 6
  store i64 %2658, i64* %PC
  %2659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2660 = load i8, i8* %2659, align 1, !tbaa !2449
  %2661 = icmp ne i8 %2660, 0
  %2662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2663 = load i8, i8* %2662, align 1, !tbaa !2450
  %2664 = icmp ne i8 %2663, 0
  %2665 = xor i1 %2661, %2664
  %2666 = xor i1 %2665, true
  %2667 = zext i1 %2666 to i8
  store i8 %2667, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2669 = select i1 %2665, i64 %2656, i64 %2654
  store i64 %2669, i64* %2668, align 8, !tbaa !2428
  %2670 = load i8, i8* %BRANCH_TAKEN
  %2671 = icmp eq i8 %2670, 1
  %2672 = load i64, i64* %PC
  br i1 %2671, label %block_400c7d, label %block_400b23

block_400a6f:                                     ; preds = %block_400a13, %block_400a7c
  %MEMORY.3 = phi %struct.Memory* [ %2992, %block_400a13 ], [ %MEMORY.3, %block_400a7c ]
  %2673 = load i64, i64* %RBP
  %2674 = sub i64 %2673, 12
  %2675 = load i64, i64* %PC
  %2676 = add i64 %2675, 7
  store i64 %2676, i64* %PC
  %2677 = inttoptr i64 %2674 to i32*
  %2678 = load i32, i32* %2677
  %2679 = sub i32 %2678, 1024
  %2680 = icmp ult i32 %2678, 1024
  %2681 = zext i1 %2680 to i8
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2681, i8* %2682, align 1, !tbaa !2432
  %2683 = and i32 %2679, 255
  %2684 = call i32 @llvm.ctpop.i32(i32 %2683) #17
  %2685 = trunc i32 %2684 to i8
  %2686 = and i8 %2685, 1
  %2687 = xor i8 %2686, 1
  %2688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2687, i8* %2688, align 1, !tbaa !2446
  %2689 = xor i32 %2678, 1024
  %2690 = xor i32 %2689, %2679
  %2691 = lshr i32 %2690, 4
  %2692 = trunc i32 %2691 to i8
  %2693 = and i8 %2692, 1
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2693, i8* %2694, align 1, !tbaa !2447
  %2695 = icmp eq i32 %2679, 0
  %2696 = zext i1 %2695 to i8
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2696, i8* %2697, align 1, !tbaa !2448
  %2698 = lshr i32 %2679, 31
  %2699 = trunc i32 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2699, i8* %2700, align 1, !tbaa !2449
  %2701 = lshr i32 %2678, 31
  %2702 = xor i32 %2698, %2701
  %2703 = add nuw nsw i32 %2702, %2701
  %2704 = icmp eq i32 %2703, 2
  %2705 = zext i1 %2704 to i8
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2705, i8* %2706, align 1, !tbaa !2450
  %2707 = load i64, i64* %PC
  %2708 = add i64 %2707, 85
  %2709 = load i64, i64* %PC
  %2710 = add i64 %2709, 6
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 6
  store i64 %2712, i64* %PC
  %2713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2714 = load i8, i8* %2713, align 1, !tbaa !2449
  %2715 = icmp ne i8 %2714, 0
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2717 = load i8, i8* %2716, align 1, !tbaa !2450
  %2718 = icmp ne i8 %2717, 0
  %2719 = xor i1 %2715, %2718
  %2720 = xor i1 %2719, true
  %2721 = zext i1 %2720 to i8
  store i8 %2721, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2723 = select i1 %2719, i64 %2710, i64 %2708
  store i64 %2723, i64* %2722, align 8, !tbaa !2428
  %2724 = load i8, i8* %BRANCH_TAKEN
  %2725 = icmp eq i8 %2724, 1
  br i1 %2725, label %block_400acb, label %block_400a7c

block_400acb:                                     ; preds = %block_400a6f
  %2726 = load i64, i64* %RAX
  %2727 = load i32, i32* %EAX
  %2728 = zext i32 %2727 to i64
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 2
  store i64 %2730, i64* %PC
  %2731 = xor i64 %2728, %2726
  %2732 = trunc i64 %2731 to i32
  %2733 = and i64 %2731, 4294967295
  store i64 %2733, i64* %RAX, align 8, !tbaa !2428
  %2734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2734, align 1, !tbaa !2432
  %2735 = and i32 %2732, 255
  %2736 = call i32 @llvm.ctpop.i32(i32 %2735) #17
  %2737 = trunc i32 %2736 to i8
  %2738 = and i8 %2737, 1
  %2739 = xor i8 %2738, 1
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2739, i8* %2740, align 1, !tbaa !2446
  %2741 = icmp eq i32 %2732, 0
  %2742 = zext i1 %2741 to i8
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2742, i8* %2743, align 1, !tbaa !2448
  %2744 = lshr i32 %2732, 31
  %2745 = trunc i32 %2744 to i8
  %2746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2745, i8* %2746, align 1, !tbaa !2449
  %2747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2747, align 1, !tbaa !2450
  %2748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2748, align 1, !tbaa !2447
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 5
  store i64 %2750, i64* %PC
  store i64 1023, i64* %RSI, align 8, !tbaa !2428
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 5
  store i64 %2752, i64* %PC
  store i64 16384, i64* %RCX, align 8, !tbaa !2428
  %2753 = load i32, i32* %ECX
  %2754 = zext i32 %2753 to i64
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 2
  store i64 %2756, i64* %PC
  %2757 = and i64 %2754, 4294967295
  store i64 %2757, i64* %RDX, align 8, !tbaa !2428
  %2758 = load i64, i64* %RBP
  %2759 = sub i64 %2758, 48
  %2760 = load i64, i64* %PC
  %2761 = add i64 %2760, 4
  store i64 %2761, i64* %PC
  %2762 = inttoptr i64 %2759 to i64*
  %2763 = load i64, i64* %2762
  store i64 %2763, i64* %RDI, align 8, !tbaa !2428
  %2764 = load i64, i64* %RBP
  %2765 = sub i64 %2764, 168
  %2766 = load i32, i32* %ESI
  %2767 = zext i32 %2766 to i64
  %2768 = load i64, i64* %PC
  %2769 = add i64 %2768, 6
  store i64 %2769, i64* %PC
  %2770 = inttoptr i64 %2765 to i32*
  store i32 %2766, i32* %2770
  %2771 = load i32, i32* %EAX
  %2772 = zext i32 %2771 to i64
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 2
  store i64 %2774, i64* %PC
  %2775 = and i64 %2772, 4294967295
  store i64 %2775, i64* %RSI, align 8, !tbaa !2428
  %2776 = load i64, i64* %RBP
  %2777 = sub i64 %2776, 172
  %2778 = load i32, i32* %EAX
  %2779 = zext i32 %2778 to i64
  %2780 = load i64, i64* %PC
  %2781 = add i64 %2780, 6
  store i64 %2781, i64* %PC
  %2782 = inttoptr i64 %2777 to i32*
  store i32 %2778, i32* %2782
  %2783 = load i64, i64* %PC
  %2784 = sub i64 %2783, 1019
  %2785 = load i64, i64* %PC
  %2786 = add i64 %2785, 5
  %2787 = load i64, i64* %PC
  %2788 = add i64 %2787, 5
  store i64 %2788, i64* %PC
  %2789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2790 = load i64, i64* %2789, align 8, !tbaa !2428
  %2791 = add i64 %2790, -8
  %2792 = inttoptr i64 %2791 to i64*
  store i64 %2786, i64* %2792
  store i64 %2791, i64* %2789, align 8, !tbaa !2428
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2784, i64* %2793, align 8, !tbaa !2428
  %2794 = load i64, i64* %PC
  %2795 = call %struct.Memory* @ext_4006f0_memset(%struct.State* %0, i64 %2794, %struct.Memory* %MEMORY.3)
  %2796 = load i64, i64* %RBP
  %2797 = sub i64 %2796, 48
  %2798 = load i64, i64* %PC
  %2799 = add i64 %2798, 4
  store i64 %2799, i64* %PC
  %2800 = inttoptr i64 %2797 to i64*
  %2801 = load i64, i64* %2800
  store i64 %2801, i64* %RDX, align 8, !tbaa !2428
  %2802 = load i64, i64* %RBP
  %2803 = sub i64 %2802, 172
  %2804 = load i64, i64* %PC
  %2805 = add i64 %2804, 6
  store i64 %2805, i64* %PC
  %2806 = inttoptr i64 %2803 to i32*
  %2807 = load i32, i32* %2806
  %2808 = zext i32 %2807 to i64
  store i64 %2808, i64* %RDI, align 8, !tbaa !2428
  %2809 = load i64, i64* %RBP
  %2810 = sub i64 %2809, 168
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 6
  store i64 %2812, i64* %PC
  %2813 = inttoptr i64 %2810 to i32*
  %2814 = load i32, i32* %2813
  %2815 = zext i32 %2814 to i64
  store i64 %2815, i64* %RSI, align 8, !tbaa !2428
  %2816 = load i64, i64* %PC
  %2817 = add i64 %2816, 1232
  %2818 = load i64, i64* %PC
  %2819 = add i64 %2818, 5
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 5
  store i64 %2821, i64* %PC
  %2822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2823 = load i64, i64* %2822, align 8, !tbaa !2428
  %2824 = add i64 %2823, -8
  %2825 = inttoptr i64 %2824 to i64*
  store i64 %2819, i64* %2825
  store i64 %2824, i64* %2822, align 8, !tbaa !2428
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2817, i64* %2826, align 8, !tbaa !2428
  %2827 = load i64, i64* %PC
  %2828 = call %struct.Memory* @sub_400fd0_putdata(%struct.State* %0, i64 %2827, %struct.Memory* %2795)
  %2829 = load i64, i64* %PC
  %2830 = add i64 %2829, 795
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 5
  %2833 = load i64, i64* %PC
  %2834 = add i64 %2833, 5
  store i64 %2834, i64* %PC
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2836 = load i64, i64* %2835, align 8, !tbaa !2428
  %2837 = add i64 %2836, -8
  %2838 = inttoptr i64 %2837 to i64*
  store i64 %2832, i64* %2838
  store i64 %2837, i64* %2835, align 8, !tbaa !2428
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2830, i64* %2839, align 8, !tbaa !2428
  %2840 = load i64, i64* %PC
  %2841 = call %struct.Memory* @sub_400e20_get_time(%struct.State* %0, i64 %2840, %struct.Memory* %2828)
  %2842 = load i64, i64* %RBP
  %2843 = sub i64 %2842, 64
  %2844 = bitcast %union.vec128_t* %XMM0 to i8*
  %2845 = load i64, i64* %PC
  %2846 = add i64 %2845, 5
  store i64 %2846, i64* %PC
  %2847 = bitcast i8* %2844 to double*
  %2848 = load double, double* %2847, align 1
  %2849 = inttoptr i64 %2843 to double*
  store double %2848, double* %2849
  %2850 = load i64, i64* %RBP
  %2851 = sub i64 %2850, 8
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 7
  store i64 %2853, i64* %PC
  %2854 = inttoptr i64 %2851 to i32*
  store i32 0, i32* %2854
  br label %block_400b16

block_400a13:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %2855 = load i64, i64* %RAX
  %2856 = load i32, i32* %EAX
  %2857 = zext i32 %2856 to i64
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 2
  store i64 %2859, i64* %PC
  %2860 = xor i64 %2857, %2855
  %2861 = trunc i64 %2860 to i32
  %2862 = and i64 %2860, 4294967295
  store i64 %2862, i64* %RAX, align 8, !tbaa !2428
  %2863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2863, align 1, !tbaa !2432
  %2864 = and i32 %2861, 255
  %2865 = call i32 @llvm.ctpop.i32(i32 %2864) #17
  %2866 = trunc i32 %2865 to i8
  %2867 = and i8 %2866, 1
  %2868 = xor i8 %2867, 1
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2868, i8* %2869, align 1, !tbaa !2446
  %2870 = icmp eq i32 %2861, 0
  %2871 = zext i1 %2870 to i8
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2871, i8* %2872, align 1, !tbaa !2448
  %2873 = lshr i32 %2861, 31
  %2874 = trunc i32 %2873 to i8
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2874, i8* %2875, align 1, !tbaa !2449
  %2876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2876, align 1, !tbaa !2450
  %2877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2877, align 1, !tbaa !2447
  %2878 = load i64, i64* %PC
  %2879 = add i64 %2878, 5
  store i64 %2879, i64* %PC
  store i64 1023, i64* %RSI, align 8, !tbaa !2428
  %2880 = load i64, i64* %PC
  %2881 = add i64 %2880, 5
  store i64 %2881, i64* %PC
  store i64 16384, i64* %RCX, align 8, !tbaa !2428
  %2882 = load i32, i32* %ECX
  %2883 = zext i32 %2882 to i64
  %2884 = load i64, i64* %PC
  %2885 = add i64 %2884, 2
  store i64 %2885, i64* %PC
  %2886 = and i64 %2883, 4294967295
  store i64 %2886, i64* %RDX, align 8, !tbaa !2428
  %2887 = load i64, i64* %RBP
  %2888 = sub i64 %2887, 32
  %2889 = load i64, i64* %PC
  %2890 = add i64 %2889, 4
  store i64 %2890, i64* %PC
  %2891 = inttoptr i64 %2888 to i64*
  %2892 = load i64, i64* %2891
  store i64 %2892, i64* %RDI, align 8, !tbaa !2428
  %2893 = load i64, i64* %RBP
  %2894 = sub i64 %2893, 160
  %2895 = load i32, i32* %ESI
  %2896 = zext i32 %2895 to i64
  %2897 = load i64, i64* %PC
  %2898 = add i64 %2897, 6
  store i64 %2898, i64* %PC
  %2899 = inttoptr i64 %2894 to i32*
  store i32 %2895, i32* %2899
  %2900 = load i32, i32* %EAX
  %2901 = zext i32 %2900 to i64
  %2902 = load i64, i64* %PC
  %2903 = add i64 %2902, 2
  store i64 %2903, i64* %PC
  %2904 = and i64 %2901, 4294967295
  store i64 %2904, i64* %RSI, align 8, !tbaa !2428
  %2905 = load i64, i64* %RBP
  %2906 = sub i64 %2905, 164
  %2907 = load i32, i32* %EAX
  %2908 = zext i32 %2907 to i64
  %2909 = load i64, i64* %PC
  %2910 = add i64 %2909, 6
  store i64 %2910, i64* %PC
  %2911 = inttoptr i64 %2906 to i32*
  store i32 %2907, i32* %2911
  %2912 = load i64, i64* %PC
  %2913 = sub i64 %2912, 835
  %2914 = load i64, i64* %PC
  %2915 = add i64 %2914, 5
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 5
  store i64 %2917, i64* %PC
  %2918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2919 = load i64, i64* %2918, align 8, !tbaa !2428
  %2920 = add i64 %2919, -8
  %2921 = inttoptr i64 %2920 to i64*
  store i64 %2915, i64* %2921
  store i64 %2920, i64* %2918, align 8, !tbaa !2428
  %2922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2913, i64* %2922, align 8, !tbaa !2428
  %2923 = load i64, i64* %PC
  %2924 = call %struct.Memory* @ext_4006f0_memset(%struct.State* %0, i64 %2923, %struct.Memory* %1318)
  %2925 = load i64, i64* %RBP
  %2926 = sub i64 %2925, 32
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 4
  store i64 %2928, i64* %PC
  %2929 = inttoptr i64 %2926 to i64*
  %2930 = load i64, i64* %2929
  store i64 %2930, i64* %RDX, align 8, !tbaa !2428
  %2931 = load i64, i64* %RBP
  %2932 = sub i64 %2931, 164
  %2933 = load i64, i64* %PC
  %2934 = add i64 %2933, 6
  store i64 %2934, i64* %PC
  %2935 = inttoptr i64 %2932 to i32*
  %2936 = load i32, i32* %2935
  %2937 = zext i32 %2936 to i64
  store i64 %2937, i64* %RDI, align 8, !tbaa !2428
  %2938 = load i64, i64* %RBP
  %2939 = sub i64 %2938, 160
  %2940 = load i64, i64* %PC
  %2941 = add i64 %2940, 6
  store i64 %2941, i64* %PC
  %2942 = inttoptr i64 %2939 to i32*
  %2943 = load i32, i32* %2942
  %2944 = zext i32 %2943 to i64
  store i64 %2944, i64* %RSI, align 8, !tbaa !2428
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 1416
  %2947 = load i64, i64* %PC
  %2948 = add i64 %2947, 5
  %2949 = load i64, i64* %PC
  %2950 = add i64 %2949, 5
  store i64 %2950, i64* %PC
  %2951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2952 = load i64, i64* %2951, align 8, !tbaa !2428
  %2953 = add i64 %2952, -8
  %2954 = inttoptr i64 %2953 to i64*
  store i64 %2948, i64* %2954
  store i64 %2953, i64* %2951, align 8, !tbaa !2428
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2946, i64* %2955, align 8, !tbaa !2428
  %2956 = load i64, i64* %PC
  %2957 = call %struct.Memory* @sub_400fd0_putdata(%struct.State* %0, i64 %2956, %struct.Memory* %2924)
  %2958 = load i64, i64* %PC
  %2959 = add i64 %2958, 5
  store i64 %2959, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 5
  store i64 %2961, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %2962 = load i64, i64* %RBP
  %2963 = sub i64 %2962, 32
  %2964 = load i64, i64* %PC
  %2965 = add i64 %2964, 4
  store i64 %2965, i64* %PC
  %2966 = inttoptr i64 %2963 to i64*
  %2967 = load i64, i64* %2966
  store i64 %2967, i64* %RDX, align 8, !tbaa !2428
  %2968 = load i64, i64* %RBP
  %2969 = sub i64 %2968, 24
  %2970 = load i64, i64* %PC
  %2971 = add i64 %2970, 4
  store i64 %2971, i64* %PC
  %2972 = inttoptr i64 %2969 to i64*
  %2973 = load i64, i64* %2972
  store i64 %2973, i64* %RCX, align 8, !tbaa !2428
  %2974 = load i64, i64* %RBP
  %2975 = sub i64 %2974, 56
  %2976 = load i64, i64* %PC
  %2977 = add i64 %2976, 4
  store i64 %2977, i64* %PC
  %2978 = inttoptr i64 %2975 to i64*
  %2979 = load i64, i64* %2978
  store i64 %2979, i64* %R8, align 8, !tbaa !2428
  %2980 = load i64, i64* %PC
  %2981 = add i64 %2980, 1517
  %2982 = load i64, i64* %PC
  %2983 = add i64 %2982, 5
  %2984 = load i64, i64* %PC
  %2985 = add i64 %2984, 5
  store i64 %2985, i64* %PC
  %2986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2987 = load i64, i64* %2986, align 8, !tbaa !2428
  %2988 = add i64 %2987, -8
  %2989 = inttoptr i64 %2988 to i64*
  store i64 %2983, i64* %2989
  store i64 %2988, i64* %2986, align 8, !tbaa !2428
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2981, i64* %2990, align 8, !tbaa !2428
  %2991 = load i64, i64* %PC
  %2992 = call %struct.Memory* @sub_401050_cdft(%struct.State* %0, i64 %2991, %struct.Memory* %2957)
  %2993 = load i64, i64* %RBP
  %2994 = sub i64 %2993, 12
  %2995 = load i64, i64* %PC
  %2996 = add i64 %2995, 7
  store i64 %2996, i64* %PC
  %2997 = inttoptr i64 %2994 to i32*
  store i32 0, i32* %2997
  br label %block_400a6f

block_400d12:                                     ; preds = %block_400d02, %block_400ce3
  %MEMORY.4 = phi %struct.Memory* [ %2601, %block_400d02 ], [ %2601, %block_400ce3 ]
  %2998 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2999 = load i64, i64* %RBP
  %3000 = sub i64 %2999, 192
  %3001 = load i64, i64* %PC
  %3002 = add i64 %3001, 8
  store i64 %3002, i64* %PC
  %3003 = inttoptr i64 %3000 to double*
  %3004 = load double, double* %3003
  %3005 = bitcast i8* %2998 to double*
  store double %3004, double* %3005, align 1, !tbaa !2452
  %3006 = getelementptr inbounds i8, i8* %2998, i64 8
  %3007 = bitcast i8* %3006 to double*
  store double 0.000000e+00, double* %3007, align 1, !tbaa !2452
  %3008 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3009 = load i64, i64* %PC
  %3010 = add i64 %3009, 8
  store i64 %3010, i64* %PC
  %3011 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 48) to double*)
  %3012 = bitcast i8* %3008 to double*
  store double %3011, double* %3012, align 1, !tbaa !2452
  %3013 = getelementptr inbounds i8, i8* %3008, i64 8
  %3014 = bitcast i8* %3013 to double*
  store double 0.000000e+00, double* %3014, align 1, !tbaa !2452
  %3015 = load i64, i64* %RBP
  %3016 = sub i64 %3015, 40
  %3017 = load i64, i64* %PC
  %3018 = add i64 %3017, 4
  store i64 %3018, i64* %PC
  %3019 = inttoptr i64 %3016 to i64*
  %3020 = load i64, i64* %3019
  store i64 %3020, i64* %RAX, align 8, !tbaa !2428
  %3021 = load i64, i64* %RBP
  %3022 = sub i64 %3021, 12
  %3023 = load i64, i64* %PC
  %3024 = add i64 %3023, 3
  store i64 %3024, i64* %PC
  %3025 = inttoptr i64 %3022 to i32*
  %3026 = load i32, i32* %3025
  %3027 = zext i32 %3026 to i64
  store i64 %3027, i64* %RCX, align 8, !tbaa !2428
  %3028 = load i64, i64* %RCX
  %3029 = load i64, i64* %PC
  %3030 = add i64 %3029, 3
  store i64 %3030, i64* %PC
  %3031 = trunc i64 %3028 to i32
  %3032 = shl i32 %3031, 1
  %3033 = icmp slt i32 %3031, 0
  %3034 = icmp slt i32 %3032, 0
  %3035 = xor i1 %3033, %3034
  %3036 = zext i32 %3032 to i64
  store i64 %3036, i64* %RCX, align 8, !tbaa !2428
  %3037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3038 = zext i1 %3033 to i8
  store i8 %3038, i8* %3037, align 1, !tbaa !2451
  %3039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3040 = and i32 %3032, 254
  %3041 = call i32 @llvm.ctpop.i32(i32 %3040) #17
  %3042 = trunc i32 %3041 to i8
  %3043 = and i8 %3042, 1
  %3044 = xor i8 %3043, 1
  store i8 %3044, i8* %3039, align 1, !tbaa !2451
  %3045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3045, align 1, !tbaa !2451
  %3046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3047 = icmp eq i32 %3032, 0
  %3048 = zext i1 %3047 to i8
  store i8 %3048, i8* %3046, align 1, !tbaa !2451
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3050 = lshr i32 %3032, 31
  %3051 = trunc i32 %3050 to i8
  store i8 %3051, i8* %3049, align 1, !tbaa !2451
  %3052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3053 = zext i1 %3035 to i8
  store i8 %3053, i8* %3052, align 1, !tbaa !2451
  %3054 = load i64, i64* %RCX
  %3055 = load i64, i64* %PC
  %3056 = add i64 %3055, 3
  store i64 %3056, i64* %PC
  %3057 = trunc i64 %3054 to i32
  %3058 = add i32 1, %3057
  %3059 = zext i32 %3058 to i64
  store i64 %3059, i64* %RCX, align 8, !tbaa !2428
  %3060 = icmp ult i32 %3058, %3057
  %3061 = icmp ult i32 %3058, 1
  %3062 = or i1 %3060, %3061
  %3063 = zext i1 %3062 to i8
  %3064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3063, i8* %3064, align 1, !tbaa !2432
  %3065 = and i32 %3058, 255
  %3066 = call i32 @llvm.ctpop.i32(i32 %3065) #17
  %3067 = trunc i32 %3066 to i8
  %3068 = and i8 %3067, 1
  %3069 = xor i8 %3068, 1
  %3070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3069, i8* %3070, align 1, !tbaa !2446
  %3071 = xor i64 1, %3054
  %3072 = trunc i64 %3071 to i32
  %3073 = xor i32 %3072, %3058
  %3074 = lshr i32 %3073, 4
  %3075 = trunc i32 %3074 to i8
  %3076 = and i8 %3075, 1
  %3077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3076, i8* %3077, align 1, !tbaa !2447
  %3078 = icmp eq i32 %3058, 0
  %3079 = zext i1 %3078 to i8
  %3080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3079, i8* %3080, align 1, !tbaa !2448
  %3081 = lshr i32 %3058, 31
  %3082 = trunc i32 %3081 to i8
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3082, i8* %3083, align 1, !tbaa !2449
  %3084 = lshr i32 %3057, 31
  %3085 = xor i32 %3081, %3084
  %3086 = add nuw nsw i32 %3085, %3081
  %3087 = icmp eq i32 %3086, 2
  %3088 = zext i1 %3087 to i8
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3088, i8* %3089, align 1, !tbaa !2450
  %3090 = load i32, i32* %ECX
  %3091 = zext i32 %3090 to i64
  %3092 = load i64, i64* %PC
  %3093 = add i64 %3092, 3
  store i64 %3093, i64* %PC
  %3094 = shl i64 %3091, 32
  %3095 = ashr exact i64 %3094, 32
  store i64 %3095, i64* %RDX, align 8, !tbaa !2428
  %3096 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3097 = load i64, i64* %RAX
  %3098 = load i64, i64* %RDX
  %3099 = mul i64 %3098, 8
  %3100 = add i64 %3099, %3097
  %3101 = load i64, i64* %PC
  %3102 = add i64 %3101, 5
  store i64 %3102, i64* %PC
  %3103 = inttoptr i64 %3100 to double*
  %3104 = load double, double* %3103
  %3105 = bitcast i8* %3096 to double*
  store double %3104, double* %3105, align 1, !tbaa !2452
  %3106 = getelementptr inbounds i8, i8* %3096, i64 8
  %3107 = bitcast i8* %3106 to double*
  store double 0.000000e+00, double* %3107, align 1, !tbaa !2452
  %3108 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3109 = load i64, i64* %PC
  %3110 = add i64 %3109, 7
  store i64 %3110, i64* %PC
  %3111 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 96) to float*)
  %3112 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 100) to float*)
  %3113 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 104) to float*)
  %3114 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 108) to float*)
  %3115 = bitcast i8* %3108 to float*
  store float %3111, float* %3115, align 1, !tbaa !2455
  %3116 = getelementptr inbounds i8, i8* %3108, i64 4
  %3117 = bitcast i8* %3116 to float*
  store float %3112, float* %3117, align 1, !tbaa !2455
  %3118 = getelementptr inbounds i8, i8* %3108, i64 8
  %3119 = bitcast i8* %3118 to float*
  store float %3113, float* %3119, align 1, !tbaa !2455
  %3120 = getelementptr inbounds i8, i8* %3108, i64 12
  %3121 = bitcast i8* %3120 to float*
  store float %3114, float* %3121, align 1, !tbaa !2455
  %3122 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3123 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3124 = bitcast %union.vec128_t* %XMM3 to i8*
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 4
  store i64 %3126, i64* %PC
  %3127 = bitcast i8* %3123 to i64*
  %3128 = load i64, i64* %3127, align 1
  %3129 = getelementptr inbounds i8, i8* %3123, i64 8
  %3130 = bitcast i8* %3129 to i64*
  %3131 = load i64, i64* %3130, align 1
  %3132 = bitcast i8* %3124 to i64*
  %3133 = load i64, i64* %3132, align 1
  %3134 = getelementptr inbounds i8, i8* %3124, i64 8
  %3135 = bitcast i8* %3134 to i64*
  %3136 = load i64, i64* %3135, align 1
  %3137 = and i64 %3133, %3128
  %3138 = and i64 %3136, %3131
  %3139 = trunc i64 %3137 to i32
  %3140 = lshr i64 %3137, 32
  %3141 = trunc i64 %3140 to i32
  %3142 = bitcast i8* %3122 to i32*
  store i32 %3139, i32* %3142, align 1, !tbaa !2454
  %3143 = getelementptr inbounds i8, i8* %3122, i64 4
  %3144 = bitcast i8* %3143 to i32*
  store i32 %3141, i32* %3144, align 1, !tbaa !2454
  %3145 = trunc i64 %3138 to i32
  %3146 = getelementptr inbounds i8, i8* %3122, i64 8
  %3147 = bitcast i8* %3146 to i32*
  store i32 %3145, i32* %3147, align 1, !tbaa !2454
  %3148 = lshr i64 %3138, 32
  %3149 = trunc i64 %3148 to i32
  %3150 = getelementptr inbounds i8, i8* %3122, i64 12
  %3151 = bitcast i8* %3150 to i32*
  store i32 %3149, i32* %3151, align 1, !tbaa !2454
  %3152 = bitcast %union.vec128_t* %XMM2 to i8*
  %3153 = bitcast %union.vec128_t* %XMM1 to i8*
  %3154 = load i64, i64* %PC
  %3155 = add i64 %3154, 4
  store i64 %3155, i64* %PC
  %3156 = bitcast i8* %3152 to double*
  %3157 = load double, double* %3156, align 1
  %3158 = bitcast i8* %3153 to double*
  %3159 = load double, double* %3158, align 1
  %3160 = fcmp uno double %3157, %3159
  br i1 %3160, label %3161, label %3173

; <label>:3161:                                   ; preds = %block_400d12
  %3162 = fadd double %3157, %3159
  %3163 = bitcast double %3162 to i64
  %3164 = and i64 %3163, 9221120237041090560
  %3165 = icmp eq i64 %3164, 9218868437227405312
  %3166 = and i64 %3163, 2251799813685247
  %3167 = icmp ne i64 %3166, 0
  %3168 = and i1 %3165, %3167
  br i1 %3168, label %3169, label %3179

; <label>:3169:                                   ; preds = %3161
  %3170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3171 = load i64, i64* %3170, align 8, !tbaa !2428
  %3172 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3171, %struct.Memory* %MEMORY.4) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:3173:                                   ; preds = %block_400d12
  %3174 = fcmp ogt double %3157, %3159
  br i1 %3174, label %3179, label %3175

; <label>:3175:                                   ; preds = %3173
  %3176 = fcmp olt double %3157, %3159
  br i1 %3176, label %3179, label %3177

; <label>:3177:                                   ; preds = %3175
  %3178 = fcmp oeq double %3157, %3159
  br i1 %3178, label %3179, label %3186

; <label>:3179:                                   ; preds = %3177, %3175, %3173, %3161
  %3180 = phi i8 [ 0, %3173 ], [ 0, %3175 ], [ 1, %3177 ], [ 1, %3161 ]
  %3181 = phi i8 [ 0, %3173 ], [ 0, %3175 ], [ 0, %3177 ], [ 1, %3161 ]
  %3182 = phi i8 [ 0, %3173 ], [ 1, %3175 ], [ 0, %3177 ], [ 1, %3161 ]
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3180, i8* %3183, align 1, !tbaa !2451
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3181, i8* %3184, align 1, !tbaa !2451
  %3185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3182, i8* %3185, align 1, !tbaa !2451
  br label %3186

; <label>:3186:                                   ; preds = %3179, %3177
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3187, align 1, !tbaa !2451
  %3188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3188, align 1, !tbaa !2451
  %3189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3189, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %3169, %3186
  %3190 = phi %struct.Memory* [ %3172, %3169 ], [ %MEMORY.4, %3186 ]
  %3191 = load i64, i64* %RBP
  %3192 = sub i64 %3191, 200
  %3193 = bitcast %union.vec128_t* %XMM0 to i8*
  %3194 = load i64, i64* %PC
  %3195 = add i64 %3194, 8
  store i64 %3195, i64* %PC
  %3196 = bitcast i8* %3193 to double*
  %3197 = load double, double* %3196, align 1
  %3198 = inttoptr i64 %3192 to double*
  store double %3197, double* %3198
  %3199 = load i64, i64* %PC
  %3200 = add i64 %3199, 40
  %3201 = load i64, i64* %PC
  %3202 = add i64 %3201, 6
  %3203 = load i64, i64* %PC
  %3204 = add i64 %3203, 6
  store i64 %3204, i64* %PC
  %3205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3206 = load i8, i8* %3205, align 1, !tbaa !2432
  %3207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3208 = load i8, i8* %3207, align 1, !tbaa !2448
  %3209 = or i8 %3208, %3206
  %3210 = icmp ne i8 %3209, 0
  %3211 = zext i1 %3210 to i8
  store i8 %3211, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3213 = select i1 %3210, i64 %3200, i64 %3202
  store i64 %3213, i64* %3212, align 8, !tbaa !2428
  %3214 = load i8, i8* %BRANCH_TAKEN
  %3215 = icmp eq i8 %3214, 1
  br i1 %3215, label %block_400d76, label %block_400d54

block_400d86:                                     ; preds = %block_400d76, %block_400d54
  %MEMORY.5 = phi %struct.Memory* [ %3190, %block_400d76 ], [ %3190, %block_400d54 ]
  %3216 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3217 = load i64, i64* %RBP
  %3218 = sub i64 %3217, 208
  %3219 = load i64, i64* %PC
  %3220 = add i64 %3219, 8
  store i64 %3220, i64* %PC
  %3221 = inttoptr i64 %3218 to double*
  %3222 = load double, double* %3221
  %3223 = bitcast i8* %3216 to double*
  store double %3222, double* %3223, align 1, !tbaa !2452
  %3224 = getelementptr inbounds i8, i8* %3216, i64 8
  %3225 = bitcast i8* %3224 to double*
  store double 0.000000e+00, double* %3225, align 1, !tbaa !2452
  %3226 = load i64, i64* %PC
  %3227 = add i64 %3226, 10
  store i64 %3227, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 157), i64* %RDI, align 8, !tbaa !2428
  %3228 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3229 = load i64, i64* %RBP
  %3230 = sub i64 %3229, 200
  %3231 = load i64, i64* %PC
  %3232 = add i64 %3231, 8
  store i64 %3232, i64* %PC
  %3233 = inttoptr i64 %3230 to double*
  %3234 = load double, double* %3233
  %3235 = bitcast i8* %3228 to double*
  store double %3234, double* %3235, align 1, !tbaa !2452
  %3236 = getelementptr inbounds i8, i8* %3228, i64 8
  %3237 = bitcast i8* %3236 to double*
  store double 0.000000e+00, double* %3237, align 1, !tbaa !2452
  %3238 = load i64, i64* %RBP
  %3239 = sub i64 %3238, 216
  %3240 = bitcast %union.vec128_t* %XMM0 to i8*
  %3241 = load i64, i64* %PC
  %3242 = add i64 %3241, 8
  store i64 %3242, i64* %PC
  %3243 = bitcast i8* %3240 to double*
  %3244 = load double, double* %3243, align 1
  %3245 = inttoptr i64 %3239 to double*
  store double %3244, double* %3245
  %3246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3247 = bitcast %union.vec128_t* %XMM1 to i8*
  %3248 = load i64, i64* %PC
  %3249 = add i64 %3248, 3
  store i64 %3249, i64* %PC
  %3250 = bitcast i8* %3247 to <2 x i32>*
  %3251 = load <2 x i32>, <2 x i32>* %3250, align 1
  %3252 = getelementptr inbounds i8, i8* %3247, i64 8
  %3253 = bitcast i8* %3252 to <2 x i32>*
  %3254 = load <2 x i32>, <2 x i32>* %3253, align 1
  %3255 = extractelement <2 x i32> %3251, i32 0
  %3256 = bitcast i8* %3246 to i32*
  store i32 %3255, i32* %3256, align 1, !tbaa !2455
  %3257 = extractelement <2 x i32> %3251, i32 1
  %3258 = getelementptr inbounds i8, i8* %3246, i64 4
  %3259 = bitcast i8* %3258 to i32*
  store i32 %3257, i32* %3259, align 1, !tbaa !2455
  %3260 = extractelement <2 x i32> %3254, i32 0
  %3261 = getelementptr inbounds i8, i8* %3246, i64 8
  %3262 = bitcast i8* %3261 to i32*
  store i32 %3260, i32* %3262, align 1, !tbaa !2455
  %3263 = extractelement <2 x i32> %3254, i32 1
  %3264 = getelementptr inbounds i8, i8* %3246, i64 12
  %3265 = bitcast i8* %3264 to i32*
  store i32 %3263, i32* %3265, align 1, !tbaa !2455
  %3266 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3267 = load i64, i64* %RBP
  %3268 = sub i64 %3267, 216
  %3269 = load i64, i64* %PC
  %3270 = add i64 %3269, 8
  store i64 %3270, i64* %PC
  %3271 = inttoptr i64 %3268 to double*
  %3272 = load double, double* %3271
  %3273 = bitcast i8* %3266 to double*
  store double %3272, double* %3273, align 1, !tbaa !2452
  %3274 = getelementptr inbounds i8, i8* %3266, i64 8
  %3275 = bitcast i8* %3274 to double*
  store double 0.000000e+00, double* %3275, align 1, !tbaa !2452
  %3276 = load i64, i64* %PC
  %3277 = add i64 %3276, 2
  store i64 %3277, i64* %PC
  store i8 2, i8* %AL, align 1, !tbaa !2451
  %3278 = load i64, i64* %PC
  %3279 = sub i64 %3278, 1765
  %3280 = load i64, i64* %PC
  %3281 = add i64 %3280, 5
  %3282 = load i64, i64* %PC
  %3283 = add i64 %3282, 5
  store i64 %3283, i64* %PC
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3285 = load i64, i64* %3284, align 8, !tbaa !2428
  %3286 = add i64 %3285, -8
  %3287 = inttoptr i64 %3286 to i64*
  store i64 %3281, i64* %3287
  store i64 %3286, i64* %3284, align 8, !tbaa !2428
  %3288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3279, i64* %3288, align 8, !tbaa !2428
  %3289 = load i64, i64* %PC
  %3290 = call %struct.Memory* @ext_4006d0_printf(%struct.State* %0, i64 %3289, %struct.Memory* %MEMORY.5)
  %3291 = load i64, i64* %RBP
  %3292 = sub i64 %3291, 220
  %3293 = load i32, i32* %EAX
  %3294 = zext i32 %3293 to i64
  %3295 = load i64, i64* %PC
  %3296 = add i64 %3295, 6
  store i64 %3296, i64* %PC
  %3297 = inttoptr i64 %3292 to i32*
  store i32 %3293, i32* %3297
  %3298 = load i64, i64* %RBP
  %3299 = sub i64 %3298, 12
  %3300 = load i64, i64* %PC
  %3301 = add i64 %3300, 3
  store i64 %3301, i64* %PC
  %3302 = inttoptr i64 %3299 to i32*
  %3303 = load i32, i32* %3302
  %3304 = zext i32 %3303 to i64
  store i64 %3304, i64* %RAX, align 8, !tbaa !2428
  %3305 = load i64, i64* %RAX
  %3306 = load i64, i64* %PC
  %3307 = add i64 %3306, 3
  store i64 %3307, i64* %PC
  %3308 = trunc i64 %3305 to i32
  %3309 = add i32 1, %3308
  %3310 = zext i32 %3309 to i64
  store i64 %3310, i64* %RAX, align 8, !tbaa !2428
  %3311 = icmp ult i32 %3309, %3308
  %3312 = icmp ult i32 %3309, 1
  %3313 = or i1 %3311, %3312
  %3314 = zext i1 %3313 to i8
  %3315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3314, i8* %3315, align 1, !tbaa !2432
  %3316 = and i32 %3309, 255
  %3317 = call i32 @llvm.ctpop.i32(i32 %3316) #17
  %3318 = trunc i32 %3317 to i8
  %3319 = and i8 %3318, 1
  %3320 = xor i8 %3319, 1
  %3321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3320, i8* %3321, align 1, !tbaa !2446
  %3322 = xor i64 1, %3305
  %3323 = trunc i64 %3322 to i32
  %3324 = xor i32 %3323, %3309
  %3325 = lshr i32 %3324, 4
  %3326 = trunc i32 %3325 to i8
  %3327 = and i8 %3326, 1
  %3328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3327, i8* %3328, align 1, !tbaa !2447
  %3329 = icmp eq i32 %3309, 0
  %3330 = zext i1 %3329 to i8
  %3331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3330, i8* %3331, align 1, !tbaa !2448
  %3332 = lshr i32 %3309, 31
  %3333 = trunc i32 %3332 to i8
  %3334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3333, i8* %3334, align 1, !tbaa !2449
  %3335 = lshr i32 %3308, 31
  %3336 = xor i32 %3332, %3335
  %3337 = add nuw nsw i32 %3336, %3332
  %3338 = icmp eq i32 %3337, 2
  %3339 = zext i1 %3338 to i8
  %3340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3339, i8* %3340, align 1, !tbaa !2450
  %3341 = load i64, i64* %RBP
  %3342 = sub i64 %3341, 12
  %3343 = load i32, i32* %EAX
  %3344 = zext i32 %3343 to i64
  %3345 = load i64, i64* %PC
  %3346 = add i64 %3345, 3
  store i64 %3346, i64* %PC
  %3347 = inttoptr i64 %3342 to i32*
  store i32 %3343, i32* %3347
  %3348 = load i64, i64* %PC
  %3349 = sub i64 %3348, 290
  %3350 = load i64, i64* %PC
  %3351 = add i64 %3350, 5
  store i64 %3351, i64* %PC
  %3352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3349, i64* %3352, align 8, !tbaa !2428
  br label %block_400ca7

block_400b84:                                     ; preds = %block_400b77
  %3353 = load i64, i64* %RBP
  %3354 = sub i64 %3353, 40
  %3355 = load i64, i64* %PC
  %3356 = add i64 %3355, 4
  store i64 %3356, i64* %PC
  %3357 = inttoptr i64 %3354 to i64*
  %3358 = load i64, i64* %3357
  store i64 %3358, i64* %RAX, align 8, !tbaa !2428
  %3359 = load i64, i64* %RBP
  %3360 = sub i64 %3359, 100
  %3361 = load i64, i64* %PC
  %3362 = add i64 %3361, 3
  store i64 %3362, i64* %PC
  %3363 = inttoptr i64 %3360 to i32*
  %3364 = load i32, i32* %3363
  %3365 = zext i32 %3364 to i64
  store i64 %3365, i64* %RCX, align 8, !tbaa !2428
  %3366 = load i64, i64* %RCX
  %3367 = load i64, i64* %PC
  %3368 = add i64 %3367, 3
  store i64 %3368, i64* %PC
  %3369 = trunc i64 %3366 to i32
  %3370 = shl i32 %3369, 1
  %3371 = icmp slt i32 %3369, 0
  %3372 = icmp slt i32 %3370, 0
  %3373 = xor i1 %3371, %3372
  %3374 = zext i32 %3370 to i64
  store i64 %3374, i64* %RCX, align 8, !tbaa !2428
  %3375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3376 = zext i1 %3371 to i8
  store i8 %3376, i8* %3375, align 1, !tbaa !2451
  %3377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3378 = and i32 %3370, 254
  %3379 = call i32 @llvm.ctpop.i32(i32 %3378) #17
  %3380 = trunc i32 %3379 to i8
  %3381 = and i8 %3380, 1
  %3382 = xor i8 %3381, 1
  store i8 %3382, i8* %3377, align 1, !tbaa !2451
  %3383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3383, align 1, !tbaa !2451
  %3384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3385 = icmp eq i32 %3370, 0
  %3386 = zext i1 %3385 to i8
  store i8 %3386, i8* %3384, align 1, !tbaa !2451
  %3387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3388 = lshr i32 %3370, 31
  %3389 = trunc i32 %3388 to i8
  store i8 %3389, i8* %3387, align 1, !tbaa !2451
  %3390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3391 = zext i1 %3373 to i8
  store i8 %3391, i8* %3390, align 1, !tbaa !2451
  %3392 = load i32, i32* %ECX
  %3393 = zext i32 %3392 to i64
  %3394 = load i64, i64* %PC
  %3395 = add i64 %3394, 3
  store i64 %3395, i64* %PC
  %3396 = shl i64 %3393, 32
  %3397 = ashr exact i64 %3396, 32
  store i64 %3397, i64* %RDX, align 8, !tbaa !2428
  %3398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3399 = load i64, i64* %RAX
  %3400 = load i64, i64* %RDX
  %3401 = mul i64 %3400, 8
  %3402 = add i64 %3401, %3399
  %3403 = load i64, i64* %PC
  %3404 = add i64 %3403, 5
  store i64 %3404, i64* %PC
  %3405 = inttoptr i64 %3402 to double*
  %3406 = load double, double* %3405
  %3407 = bitcast i8* %3398 to double*
  store double %3406, double* %3407, align 1, !tbaa !2452
  %3408 = getelementptr inbounds i8, i8* %3398, i64 8
  %3409 = bitcast i8* %3408 to double*
  store double 0.000000e+00, double* %3409, align 1, !tbaa !2452
  %3410 = load i64, i64* %RBP
  %3411 = sub i64 %3410, 112
  %3412 = bitcast %union.vec128_t* %XMM0 to i8*
  %3413 = load i64, i64* %PC
  %3414 = add i64 %3413, 5
  store i64 %3414, i64* %PC
  %3415 = bitcast i8* %3412 to double*
  %3416 = load double, double* %3415, align 1
  %3417 = inttoptr i64 %3411 to double*
  store double %3416, double* %3417
  %3418 = load i64, i64* %RBP
  %3419 = sub i64 %3418, 32
  %3420 = load i64, i64* %PC
  %3421 = add i64 %3420, 4
  store i64 %3421, i64* %PC
  %3422 = inttoptr i64 %3419 to i64*
  %3423 = load i64, i64* %3422
  store i64 %3423, i64* %RAX, align 8, !tbaa !2428
  %3424 = load i64, i64* %RBP
  %3425 = sub i64 %3424, 100
  %3426 = load i64, i64* %PC
  %3427 = add i64 %3426, 3
  store i64 %3427, i64* %PC
  %3428 = inttoptr i64 %3425 to i32*
  %3429 = load i32, i32* %3428
  %3430 = zext i32 %3429 to i64
  store i64 %3430, i64* %RCX, align 8, !tbaa !2428
  %3431 = load i64, i64* %RCX
  %3432 = load i64, i64* %PC
  %3433 = add i64 %3432, 3
  store i64 %3433, i64* %PC
  %3434 = trunc i64 %3431 to i32
  %3435 = shl i32 %3434, 1
  %3436 = icmp slt i32 %3434, 0
  %3437 = icmp slt i32 %3435, 0
  %3438 = xor i1 %3436, %3437
  %3439 = zext i32 %3435 to i64
  store i64 %3439, i64* %RCX, align 8, !tbaa !2428
  %3440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3441 = zext i1 %3436 to i8
  store i8 %3441, i8* %3440, align 1, !tbaa !2451
  %3442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3443 = and i32 %3435, 254
  %3444 = call i32 @llvm.ctpop.i32(i32 %3443) #17
  %3445 = trunc i32 %3444 to i8
  %3446 = and i8 %3445, 1
  %3447 = xor i8 %3446, 1
  store i8 %3447, i8* %3442, align 1, !tbaa !2451
  %3448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3448, align 1, !tbaa !2451
  %3449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3450 = icmp eq i32 %3435, 0
  %3451 = zext i1 %3450 to i8
  store i8 %3451, i8* %3449, align 1, !tbaa !2451
  %3452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3453 = lshr i32 %3435, 31
  %3454 = trunc i32 %3453 to i8
  store i8 %3454, i8* %3452, align 1, !tbaa !2451
  %3455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3456 = zext i1 %3438 to i8
  store i8 %3456, i8* %3455, align 1, !tbaa !2451
  %3457 = load i32, i32* %ECX
  %3458 = zext i32 %3457 to i64
  %3459 = load i64, i64* %PC
  %3460 = add i64 %3459, 3
  store i64 %3460, i64* %PC
  %3461 = shl i64 %3458, 32
  %3462 = ashr exact i64 %3461, 32
  store i64 %3462, i64* %RDX, align 8, !tbaa !2428
  %3463 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3464 = load i64, i64* %RAX
  %3465 = load i64, i64* %RDX
  %3466 = mul i64 %3465, 8
  %3467 = add i64 %3466, %3464
  %3468 = load i64, i64* %PC
  %3469 = add i64 %3468, 5
  store i64 %3469, i64* %PC
  %3470 = inttoptr i64 %3467 to double*
  %3471 = load double, double* %3470
  %3472 = bitcast i8* %3463 to double*
  store double %3471, double* %3472, align 1, !tbaa !2452
  %3473 = getelementptr inbounds i8, i8* %3463, i64 8
  %3474 = bitcast i8* %3473 to double*
  store double 0.000000e+00, double* %3474, align 1, !tbaa !2452
  %3475 = load i64, i64* %RBP
  %3476 = sub i64 %3475, 120
  %3477 = bitcast %union.vec128_t* %XMM0 to i8*
  %3478 = load i64, i64* %PC
  %3479 = add i64 %3478, 5
  store i64 %3479, i64* %PC
  %3480 = bitcast i8* %3477 to double*
  %3481 = load double, double* %3480, align 1
  %3482 = inttoptr i64 %3476 to double*
  store double %3481, double* %3482
  %3483 = load i64, i64* %RBP
  %3484 = sub i64 %3483, 40
  %3485 = load i64, i64* %PC
  %3486 = add i64 %3485, 4
  store i64 %3486, i64* %PC
  %3487 = inttoptr i64 %3484 to i64*
  %3488 = load i64, i64* %3487
  store i64 %3488, i64* %RAX, align 8, !tbaa !2428
  %3489 = load i64, i64* %RBP
  %3490 = sub i64 %3489, 100
  %3491 = load i64, i64* %PC
  %3492 = add i64 %3491, 3
  store i64 %3492, i64* %PC
  %3493 = inttoptr i64 %3490 to i32*
  %3494 = load i32, i32* %3493
  %3495 = zext i32 %3494 to i64
  store i64 %3495, i64* %RCX, align 8, !tbaa !2428
  %3496 = load i64, i64* %RCX
  %3497 = load i64, i64* %PC
  %3498 = add i64 %3497, 3
  store i64 %3498, i64* %PC
  %3499 = trunc i64 %3496 to i32
  %3500 = shl i32 %3499, 1
  %3501 = icmp slt i32 %3499, 0
  %3502 = icmp slt i32 %3500, 0
  %3503 = xor i1 %3501, %3502
  %3504 = zext i32 %3500 to i64
  store i64 %3504, i64* %RCX, align 8, !tbaa !2428
  %3505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3506 = zext i1 %3501 to i8
  store i8 %3506, i8* %3505, align 1, !tbaa !2451
  %3507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3508 = and i32 %3500, 254
  %3509 = call i32 @llvm.ctpop.i32(i32 %3508) #17
  %3510 = trunc i32 %3509 to i8
  %3511 = and i8 %3510, 1
  %3512 = xor i8 %3511, 1
  store i8 %3512, i8* %3507, align 1, !tbaa !2451
  %3513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3513, align 1, !tbaa !2451
  %3514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3515 = icmp eq i32 %3500, 0
  %3516 = zext i1 %3515 to i8
  store i8 %3516, i8* %3514, align 1, !tbaa !2451
  %3517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3518 = lshr i32 %3500, 31
  %3519 = trunc i32 %3518 to i8
  store i8 %3519, i8* %3517, align 1, !tbaa !2451
  %3520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3521 = zext i1 %3503 to i8
  store i8 %3521, i8* %3520, align 1, !tbaa !2451
  %3522 = load i64, i64* %RCX
  %3523 = load i64, i64* %PC
  %3524 = add i64 %3523, 3
  store i64 %3524, i64* %PC
  %3525 = trunc i64 %3522 to i32
  %3526 = add i32 1, %3525
  %3527 = zext i32 %3526 to i64
  store i64 %3527, i64* %RCX, align 8, !tbaa !2428
  %3528 = icmp ult i32 %3526, %3525
  %3529 = icmp ult i32 %3526, 1
  %3530 = or i1 %3528, %3529
  %3531 = zext i1 %3530 to i8
  %3532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3531, i8* %3532, align 1, !tbaa !2432
  %3533 = and i32 %3526, 255
  %3534 = call i32 @llvm.ctpop.i32(i32 %3533) #17
  %3535 = trunc i32 %3534 to i8
  %3536 = and i8 %3535, 1
  %3537 = xor i8 %3536, 1
  %3538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3537, i8* %3538, align 1, !tbaa !2446
  %3539 = xor i64 1, %3522
  %3540 = trunc i64 %3539 to i32
  %3541 = xor i32 %3540, %3526
  %3542 = lshr i32 %3541, 4
  %3543 = trunc i32 %3542 to i8
  %3544 = and i8 %3543, 1
  %3545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3544, i8* %3545, align 1, !tbaa !2447
  %3546 = icmp eq i32 %3526, 0
  %3547 = zext i1 %3546 to i8
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3547, i8* %3548, align 1, !tbaa !2448
  %3549 = lshr i32 %3526, 31
  %3550 = trunc i32 %3549 to i8
  %3551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3550, i8* %3551, align 1, !tbaa !2449
  %3552 = lshr i32 %3525, 31
  %3553 = xor i32 %3549, %3552
  %3554 = add nuw nsw i32 %3553, %3549
  %3555 = icmp eq i32 %3554, 2
  %3556 = zext i1 %3555 to i8
  %3557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3556, i8* %3557, align 1, !tbaa !2450
  %3558 = load i32, i32* %ECX
  %3559 = zext i32 %3558 to i64
  %3560 = load i64, i64* %PC
  %3561 = add i64 %3560, 3
  store i64 %3561, i64* %PC
  %3562 = shl i64 %3559, 32
  %3563 = ashr exact i64 %3562, 32
  store i64 %3563, i64* %RDX, align 8, !tbaa !2428
  %3564 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3565 = load i64, i64* %RAX
  %3566 = load i64, i64* %RDX
  %3567 = mul i64 %3566, 8
  %3568 = add i64 %3567, %3565
  %3569 = load i64, i64* %PC
  %3570 = add i64 %3569, 5
  store i64 %3570, i64* %PC
  %3571 = inttoptr i64 %3568 to double*
  %3572 = load double, double* %3571
  %3573 = bitcast i8* %3564 to double*
  store double %3572, double* %3573, align 1, !tbaa !2452
  %3574 = getelementptr inbounds i8, i8* %3564, i64 8
  %3575 = bitcast i8* %3574 to double*
  store double 0.000000e+00, double* %3575, align 1, !tbaa !2452
  %3576 = load i64, i64* %RBP
  %3577 = sub i64 %3576, 128
  %3578 = bitcast %union.vec128_t* %XMM0 to i8*
  %3579 = load i64, i64* %PC
  %3580 = add i64 %3579, 5
  store i64 %3580, i64* %PC
  %3581 = bitcast i8* %3578 to double*
  %3582 = load double, double* %3581, align 1
  %3583 = inttoptr i64 %3577 to double*
  store double %3582, double* %3583
  %3584 = load i64, i64* %RBP
  %3585 = sub i64 %3584, 32
  %3586 = load i64, i64* %PC
  %3587 = add i64 %3586, 4
  store i64 %3587, i64* %PC
  %3588 = inttoptr i64 %3585 to i64*
  %3589 = load i64, i64* %3588
  store i64 %3589, i64* %RAX, align 8, !tbaa !2428
  %3590 = load i64, i64* %RBP
  %3591 = sub i64 %3590, 100
  %3592 = load i64, i64* %PC
  %3593 = add i64 %3592, 3
  store i64 %3593, i64* %PC
  %3594 = inttoptr i64 %3591 to i32*
  %3595 = load i32, i32* %3594
  %3596 = zext i32 %3595 to i64
  store i64 %3596, i64* %RCX, align 8, !tbaa !2428
  %3597 = load i64, i64* %RCX
  %3598 = load i64, i64* %PC
  %3599 = add i64 %3598, 3
  store i64 %3599, i64* %PC
  %3600 = trunc i64 %3597 to i32
  %3601 = shl i32 %3600, 1
  %3602 = icmp slt i32 %3600, 0
  %3603 = icmp slt i32 %3601, 0
  %3604 = xor i1 %3602, %3603
  %3605 = zext i32 %3601 to i64
  store i64 %3605, i64* %RCX, align 8, !tbaa !2428
  %3606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3607 = zext i1 %3602 to i8
  store i8 %3607, i8* %3606, align 1, !tbaa !2451
  %3608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3609 = and i32 %3601, 254
  %3610 = call i32 @llvm.ctpop.i32(i32 %3609) #17
  %3611 = trunc i32 %3610 to i8
  %3612 = and i8 %3611, 1
  %3613 = xor i8 %3612, 1
  store i8 %3613, i8* %3608, align 1, !tbaa !2451
  %3614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3614, align 1, !tbaa !2451
  %3615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3616 = icmp eq i32 %3601, 0
  %3617 = zext i1 %3616 to i8
  store i8 %3617, i8* %3615, align 1, !tbaa !2451
  %3618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3619 = lshr i32 %3601, 31
  %3620 = trunc i32 %3619 to i8
  store i8 %3620, i8* %3618, align 1, !tbaa !2451
  %3621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3622 = zext i1 %3604 to i8
  store i8 %3622, i8* %3621, align 1, !tbaa !2451
  %3623 = load i64, i64* %RCX
  %3624 = load i64, i64* %PC
  %3625 = add i64 %3624, 3
  store i64 %3625, i64* %PC
  %3626 = trunc i64 %3623 to i32
  %3627 = add i32 1, %3626
  %3628 = zext i32 %3627 to i64
  store i64 %3628, i64* %RCX, align 8, !tbaa !2428
  %3629 = icmp ult i32 %3627, %3626
  %3630 = icmp ult i32 %3627, 1
  %3631 = or i1 %3629, %3630
  %3632 = zext i1 %3631 to i8
  %3633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3632, i8* %3633, align 1, !tbaa !2432
  %3634 = and i32 %3627, 255
  %3635 = call i32 @llvm.ctpop.i32(i32 %3634) #17
  %3636 = trunc i32 %3635 to i8
  %3637 = and i8 %3636, 1
  %3638 = xor i8 %3637, 1
  %3639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3638, i8* %3639, align 1, !tbaa !2446
  %3640 = xor i64 1, %3623
  %3641 = trunc i64 %3640 to i32
  %3642 = xor i32 %3641, %3627
  %3643 = lshr i32 %3642, 4
  %3644 = trunc i32 %3643 to i8
  %3645 = and i8 %3644, 1
  %3646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3645, i8* %3646, align 1, !tbaa !2447
  %3647 = icmp eq i32 %3627, 0
  %3648 = zext i1 %3647 to i8
  %3649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3648, i8* %3649, align 1, !tbaa !2448
  %3650 = lshr i32 %3627, 31
  %3651 = trunc i32 %3650 to i8
  %3652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3651, i8* %3652, align 1, !tbaa !2449
  %3653 = lshr i32 %3626, 31
  %3654 = xor i32 %3650, %3653
  %3655 = add nuw nsw i32 %3654, %3650
  %3656 = icmp eq i32 %3655, 2
  %3657 = zext i1 %3656 to i8
  %3658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3657, i8* %3658, align 1, !tbaa !2450
  %3659 = load i32, i32* %ECX
  %3660 = zext i32 %3659 to i64
  %3661 = load i64, i64* %PC
  %3662 = add i64 %3661, 3
  store i64 %3662, i64* %PC
  %3663 = shl i64 %3660, 32
  %3664 = ashr exact i64 %3663, 32
  store i64 %3664, i64* %RDX, align 8, !tbaa !2428
  %3665 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3666 = load i64, i64* %RAX
  %3667 = load i64, i64* %RDX
  %3668 = mul i64 %3667, 8
  %3669 = add i64 %3668, %3666
  %3670 = load i64, i64* %PC
  %3671 = add i64 %3670, 5
  store i64 %3671, i64* %PC
  %3672 = inttoptr i64 %3669 to double*
  %3673 = load double, double* %3672
  %3674 = bitcast i8* %3665 to double*
  store double %3673, double* %3674, align 1, !tbaa !2452
  %3675 = getelementptr inbounds i8, i8* %3665, i64 8
  %3676 = bitcast i8* %3675 to double*
  store double 0.000000e+00, double* %3676, align 1, !tbaa !2452
  %3677 = load i64, i64* %RBP
  %3678 = sub i64 %3677, 136
  %3679 = bitcast %union.vec128_t* %XMM0 to i8*
  %3680 = load i64, i64* %PC
  %3681 = add i64 %3680, 8
  store i64 %3681, i64* %PC
  %3682 = bitcast i8* %3679 to double*
  %3683 = load double, double* %3682, align 1
  %3684 = inttoptr i64 %3678 to double*
  store double %3683, double* %3684
  %3685 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3686 = load i64, i64* %RBP
  %3687 = sub i64 %3686, 112
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 5
  store i64 %3689, i64* %PC
  %3690 = inttoptr i64 %3687 to double*
  %3691 = load double, double* %3690
  %3692 = bitcast i8* %3685 to double*
  store double %3691, double* %3692, align 1, !tbaa !2452
  %3693 = getelementptr inbounds i8, i8* %3685, i64 8
  %3694 = bitcast i8* %3693 to double*
  store double 0.000000e+00, double* %3694, align 1, !tbaa !2452
  %3695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3696 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3697 = load i64, i64* %RBP
  %3698 = sub i64 %3697, 120
  %3699 = load i64, i64* %PC
  %3700 = add i64 %3699, 5
  store i64 %3700, i64* %PC
  %3701 = bitcast i8* %3696 to double*
  %3702 = load double, double* %3701, align 1
  %3703 = getelementptr inbounds i8, i8* %3696, i64 8
  %3704 = bitcast i8* %3703 to i64*
  %3705 = load i64, i64* %3704, align 1
  %3706 = inttoptr i64 %3698 to double*
  %3707 = load double, double* %3706
  %3708 = fmul double %3702, %3707
  %3709 = bitcast i8* %3695 to double*
  store double %3708, double* %3709, align 1, !tbaa !2452
  %3710 = getelementptr inbounds i8, i8* %3695, i64 8
  %3711 = bitcast i8* %3710 to i64*
  store i64 %3705, i64* %3711, align 1, !tbaa !2452
  %3712 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3713 = load i64, i64* %RBP
  %3714 = sub i64 %3713, 128
  %3715 = load i64, i64* %PC
  %3716 = add i64 %3715, 5
  store i64 %3716, i64* %PC
  %3717 = inttoptr i64 %3714 to double*
  %3718 = load double, double* %3717
  %3719 = bitcast i8* %3712 to double*
  store double %3718, double* %3719, align 1, !tbaa !2452
  %3720 = getelementptr inbounds i8, i8* %3712, i64 8
  %3721 = bitcast i8* %3720 to double*
  store double 0.000000e+00, double* %3721, align 1, !tbaa !2452
  %3722 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3723 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3724 = load i64, i64* %RBP
  %3725 = sub i64 %3724, 136
  %3726 = load i64, i64* %PC
  %3727 = add i64 %3726, 8
  store i64 %3727, i64* %PC
  %3728 = bitcast i8* %3723 to double*
  %3729 = load double, double* %3728, align 1
  %3730 = getelementptr inbounds i8, i8* %3723, i64 8
  %3731 = bitcast i8* %3730 to i64*
  %3732 = load i64, i64* %3731, align 1
  %3733 = inttoptr i64 %3725 to double*
  %3734 = load double, double* %3733
  %3735 = fmul double %3729, %3734
  %3736 = bitcast i8* %3722 to double*
  store double %3735, double* %3736, align 1, !tbaa !2452
  %3737 = getelementptr inbounds i8, i8* %3722, i64 8
  %3738 = bitcast i8* %3737 to i64*
  store i64 %3732, i64* %3738, align 1, !tbaa !2452
  %3739 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3740 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3741 = bitcast %union.vec128_t* %XMM1 to i8*
  %3742 = load i64, i64* %PC
  %3743 = add i64 %3742, 4
  store i64 %3743, i64* %PC
  %3744 = bitcast i8* %3740 to double*
  %3745 = load double, double* %3744, align 1
  %3746 = getelementptr inbounds i8, i8* %3740, i64 8
  %3747 = bitcast i8* %3746 to i64*
  %3748 = load i64, i64* %3747, align 1
  %3749 = bitcast i8* %3741 to double*
  %3750 = load double, double* %3749, align 1
  %3751 = fsub double %3745, %3750
  %3752 = bitcast i8* %3739 to double*
  store double %3751, double* %3752, align 1, !tbaa !2452
  %3753 = getelementptr inbounds i8, i8* %3739, i64 8
  %3754 = bitcast i8* %3753 to i64*
  store i64 %3748, i64* %3754, align 1, !tbaa !2452
  %3755 = load i64, i64* %RBP
  %3756 = sub i64 %3755, 40
  %3757 = load i64, i64* %PC
  %3758 = add i64 %3757, 4
  store i64 %3758, i64* %PC
  %3759 = inttoptr i64 %3756 to i64*
  %3760 = load i64, i64* %3759
  store i64 %3760, i64* %RAX, align 8, !tbaa !2428
  %3761 = load i64, i64* %RBP
  %3762 = sub i64 %3761, 100
  %3763 = load i64, i64* %PC
  %3764 = add i64 %3763, 3
  store i64 %3764, i64* %PC
  %3765 = inttoptr i64 %3762 to i32*
  %3766 = load i32, i32* %3765
  %3767 = zext i32 %3766 to i64
  store i64 %3767, i64* %RCX, align 8, !tbaa !2428
  %3768 = load i64, i64* %RCX
  %3769 = load i64, i64* %PC
  %3770 = add i64 %3769, 3
  store i64 %3770, i64* %PC
  %3771 = trunc i64 %3768 to i32
  %3772 = shl i32 %3771, 1
  %3773 = icmp slt i32 %3771, 0
  %3774 = icmp slt i32 %3772, 0
  %3775 = xor i1 %3773, %3774
  %3776 = zext i32 %3772 to i64
  store i64 %3776, i64* %RCX, align 8, !tbaa !2428
  %3777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3778 = zext i1 %3773 to i8
  store i8 %3778, i8* %3777, align 1, !tbaa !2451
  %3779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3780 = and i32 %3772, 254
  %3781 = call i32 @llvm.ctpop.i32(i32 %3780) #17
  %3782 = trunc i32 %3781 to i8
  %3783 = and i8 %3782, 1
  %3784 = xor i8 %3783, 1
  store i8 %3784, i8* %3779, align 1, !tbaa !2451
  %3785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3785, align 1, !tbaa !2451
  %3786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3787 = icmp eq i32 %3772, 0
  %3788 = zext i1 %3787 to i8
  store i8 %3788, i8* %3786, align 1, !tbaa !2451
  %3789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3790 = lshr i32 %3772, 31
  %3791 = trunc i32 %3790 to i8
  store i8 %3791, i8* %3789, align 1, !tbaa !2451
  %3792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3793 = zext i1 %3775 to i8
  store i8 %3793, i8* %3792, align 1, !tbaa !2451
  %3794 = load i32, i32* %ECX
  %3795 = zext i32 %3794 to i64
  %3796 = load i64, i64* %PC
  %3797 = add i64 %3796, 3
  store i64 %3797, i64* %PC
  %3798 = shl i64 %3795, 32
  %3799 = ashr exact i64 %3798, 32
  store i64 %3799, i64* %RDX, align 8, !tbaa !2428
  %3800 = load i64, i64* %RAX
  %3801 = load i64, i64* %RDX
  %3802 = mul i64 %3801, 8
  %3803 = add i64 %3802, %3800
  %3804 = bitcast %union.vec128_t* %XMM0 to i8*
  %3805 = load i64, i64* %PC
  %3806 = add i64 %3805, 5
  store i64 %3806, i64* %PC
  %3807 = bitcast i8* %3804 to double*
  %3808 = load double, double* %3807, align 1
  %3809 = inttoptr i64 %3803 to double*
  store double %3808, double* %3809
  %3810 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3811 = load i64, i64* %RBP
  %3812 = sub i64 %3811, 112
  %3813 = load i64, i64* %PC
  %3814 = add i64 %3813, 5
  store i64 %3814, i64* %PC
  %3815 = inttoptr i64 %3812 to double*
  %3816 = load double, double* %3815
  %3817 = bitcast i8* %3810 to double*
  store double %3816, double* %3817, align 1, !tbaa !2452
  %3818 = getelementptr inbounds i8, i8* %3810, i64 8
  %3819 = bitcast i8* %3818 to double*
  store double 0.000000e+00, double* %3819, align 1, !tbaa !2452
  %3820 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3821 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3822 = load i64, i64* %RBP
  %3823 = sub i64 %3822, 136
  %3824 = load i64, i64* %PC
  %3825 = add i64 %3824, 8
  store i64 %3825, i64* %PC
  %3826 = bitcast i8* %3821 to double*
  %3827 = load double, double* %3826, align 1
  %3828 = getelementptr inbounds i8, i8* %3821, i64 8
  %3829 = bitcast i8* %3828 to i64*
  %3830 = load i64, i64* %3829, align 1
  %3831 = inttoptr i64 %3823 to double*
  %3832 = load double, double* %3831
  %3833 = fmul double %3827, %3832
  %3834 = bitcast i8* %3820 to double*
  store double %3833, double* %3834, align 1, !tbaa !2452
  %3835 = getelementptr inbounds i8, i8* %3820, i64 8
  %3836 = bitcast i8* %3835 to i64*
  store i64 %3830, i64* %3836, align 1, !tbaa !2452
  %3837 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3838 = load i64, i64* %RBP
  %3839 = sub i64 %3838, 128
  %3840 = load i64, i64* %PC
  %3841 = add i64 %3840, 5
  store i64 %3841, i64* %PC
  %3842 = inttoptr i64 %3839 to double*
  %3843 = load double, double* %3842
  %3844 = bitcast i8* %3837 to double*
  store double %3843, double* %3844, align 1, !tbaa !2452
  %3845 = getelementptr inbounds i8, i8* %3837, i64 8
  %3846 = bitcast i8* %3845 to double*
  store double 0.000000e+00, double* %3846, align 1, !tbaa !2452
  %3847 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3848 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3849 = load i64, i64* %RBP
  %3850 = sub i64 %3849, 120
  %3851 = load i64, i64* %PC
  %3852 = add i64 %3851, 5
  store i64 %3852, i64* %PC
  %3853 = bitcast i8* %3848 to double*
  %3854 = load double, double* %3853, align 1
  %3855 = getelementptr inbounds i8, i8* %3848, i64 8
  %3856 = bitcast i8* %3855 to i64*
  %3857 = load i64, i64* %3856, align 1
  %3858 = inttoptr i64 %3850 to double*
  %3859 = load double, double* %3858
  %3860 = fmul double %3854, %3859
  %3861 = bitcast i8* %3847 to double*
  store double %3860, double* %3861, align 1, !tbaa !2452
  %3862 = getelementptr inbounds i8, i8* %3847, i64 8
  %3863 = bitcast i8* %3862 to i64*
  store i64 %3857, i64* %3863, align 1, !tbaa !2452
  %3864 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3865 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3866 = bitcast %union.vec128_t* %XMM1 to i8*
  %3867 = load i64, i64* %PC
  %3868 = add i64 %3867, 4
  store i64 %3868, i64* %PC
  %3869 = bitcast i8* %3865 to double*
  %3870 = load double, double* %3869, align 1
  %3871 = getelementptr inbounds i8, i8* %3865, i64 8
  %3872 = bitcast i8* %3871 to i64*
  %3873 = load i64, i64* %3872, align 1
  %3874 = bitcast i8* %3866 to double*
  %3875 = load double, double* %3874, align 1
  %3876 = fadd double %3870, %3875
  %3877 = bitcast i8* %3864 to double*
  store double %3876, double* %3877, align 1, !tbaa !2452
  %3878 = getelementptr inbounds i8, i8* %3864, i64 8
  %3879 = bitcast i8* %3878 to i64*
  store i64 %3873, i64* %3879, align 1, !tbaa !2452
  %3880 = load i64, i64* %RBP
  %3881 = sub i64 %3880, 40
  %3882 = load i64, i64* %PC
  %3883 = add i64 %3882, 4
  store i64 %3883, i64* %PC
  %3884 = inttoptr i64 %3881 to i64*
  %3885 = load i64, i64* %3884
  store i64 %3885, i64* %RAX, align 8, !tbaa !2428
  %3886 = load i64, i64* %RBP
  %3887 = sub i64 %3886, 100
  %3888 = load i64, i64* %PC
  %3889 = add i64 %3888, 3
  store i64 %3889, i64* %PC
  %3890 = inttoptr i64 %3887 to i32*
  %3891 = load i32, i32* %3890
  %3892 = zext i32 %3891 to i64
  store i64 %3892, i64* %RCX, align 8, !tbaa !2428
  %3893 = load i64, i64* %RCX
  %3894 = load i64, i64* %PC
  %3895 = add i64 %3894, 3
  store i64 %3895, i64* %PC
  %3896 = trunc i64 %3893 to i32
  %3897 = shl i32 %3896, 1
  %3898 = icmp slt i32 %3896, 0
  %3899 = icmp slt i32 %3897, 0
  %3900 = xor i1 %3898, %3899
  %3901 = zext i32 %3897 to i64
  store i64 %3901, i64* %RCX, align 8, !tbaa !2428
  %3902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3903 = zext i1 %3898 to i8
  store i8 %3903, i8* %3902, align 1, !tbaa !2451
  %3904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3905 = and i32 %3897, 254
  %3906 = call i32 @llvm.ctpop.i32(i32 %3905) #17
  %3907 = trunc i32 %3906 to i8
  %3908 = and i8 %3907, 1
  %3909 = xor i8 %3908, 1
  store i8 %3909, i8* %3904, align 1, !tbaa !2451
  %3910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3910, align 1, !tbaa !2451
  %3911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3912 = icmp eq i32 %3897, 0
  %3913 = zext i1 %3912 to i8
  store i8 %3913, i8* %3911, align 1, !tbaa !2451
  %3914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3915 = lshr i32 %3897, 31
  %3916 = trunc i32 %3915 to i8
  store i8 %3916, i8* %3914, align 1, !tbaa !2451
  %3917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3918 = zext i1 %3900 to i8
  store i8 %3918, i8* %3917, align 1, !tbaa !2451
  %3919 = load i64, i64* %RCX
  %3920 = load i64, i64* %PC
  %3921 = add i64 %3920, 3
  store i64 %3921, i64* %PC
  %3922 = trunc i64 %3919 to i32
  %3923 = add i32 1, %3922
  %3924 = zext i32 %3923 to i64
  store i64 %3924, i64* %RCX, align 8, !tbaa !2428
  %3925 = icmp ult i32 %3923, %3922
  %3926 = icmp ult i32 %3923, 1
  %3927 = or i1 %3925, %3926
  %3928 = zext i1 %3927 to i8
  %3929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3928, i8* %3929, align 1, !tbaa !2432
  %3930 = and i32 %3923, 255
  %3931 = call i32 @llvm.ctpop.i32(i32 %3930) #17
  %3932 = trunc i32 %3931 to i8
  %3933 = and i8 %3932, 1
  %3934 = xor i8 %3933, 1
  %3935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3934, i8* %3935, align 1, !tbaa !2446
  %3936 = xor i64 1, %3919
  %3937 = trunc i64 %3936 to i32
  %3938 = xor i32 %3937, %3923
  %3939 = lshr i32 %3938, 4
  %3940 = trunc i32 %3939 to i8
  %3941 = and i8 %3940, 1
  %3942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3941, i8* %3942, align 1, !tbaa !2447
  %3943 = icmp eq i32 %3923, 0
  %3944 = zext i1 %3943 to i8
  %3945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3944, i8* %3945, align 1, !tbaa !2448
  %3946 = lshr i32 %3923, 31
  %3947 = trunc i32 %3946 to i8
  %3948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3947, i8* %3948, align 1, !tbaa !2449
  %3949 = lshr i32 %3922, 31
  %3950 = xor i32 %3946, %3949
  %3951 = add nuw nsw i32 %3950, %3946
  %3952 = icmp eq i32 %3951, 2
  %3953 = zext i1 %3952 to i8
  %3954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3953, i8* %3954, align 1, !tbaa !2450
  %3955 = load i32, i32* %ECX
  %3956 = zext i32 %3955 to i64
  %3957 = load i64, i64* %PC
  %3958 = add i64 %3957, 3
  store i64 %3958, i64* %PC
  %3959 = shl i64 %3956, 32
  %3960 = ashr exact i64 %3959, 32
  store i64 %3960, i64* %RDX, align 8, !tbaa !2428
  %3961 = load i64, i64* %RAX
  %3962 = load i64, i64* %RDX
  %3963 = mul i64 %3962, 8
  %3964 = add i64 %3963, %3961
  %3965 = bitcast %union.vec128_t* %XMM0 to i8*
  %3966 = load i64, i64* %PC
  %3967 = add i64 %3966, 5
  store i64 %3967, i64* %PC
  %3968 = bitcast i8* %3965 to double*
  %3969 = load double, double* %3968, align 1
  %3970 = inttoptr i64 %3964 to double*
  store double %3969, double* %3970
  %3971 = load i64, i64* %RBP
  %3972 = sub i64 %3971, 100
  %3973 = load i64, i64* %PC
  %3974 = add i64 %3973, 3
  store i64 %3974, i64* %PC
  %3975 = inttoptr i64 %3972 to i32*
  %3976 = load i32, i32* %3975
  %3977 = zext i32 %3976 to i64
  store i64 %3977, i64* %RAX, align 8, !tbaa !2428
  %3978 = load i64, i64* %RAX
  %3979 = load i64, i64* %PC
  %3980 = add i64 %3979, 3
  store i64 %3980, i64* %PC
  %3981 = trunc i64 %3978 to i32
  %3982 = add i32 1, %3981
  %3983 = zext i32 %3982 to i64
  store i64 %3983, i64* %RAX, align 8, !tbaa !2428
  %3984 = icmp ult i32 %3982, %3981
  %3985 = icmp ult i32 %3982, 1
  %3986 = or i1 %3984, %3985
  %3987 = zext i1 %3986 to i8
  %3988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3987, i8* %3988, align 1, !tbaa !2432
  %3989 = and i32 %3982, 255
  %3990 = call i32 @llvm.ctpop.i32(i32 %3989) #17
  %3991 = trunc i32 %3990 to i8
  %3992 = and i8 %3991, 1
  %3993 = xor i8 %3992, 1
  %3994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3993, i8* %3994, align 1, !tbaa !2446
  %3995 = xor i64 1, %3978
  %3996 = trunc i64 %3995 to i32
  %3997 = xor i32 %3996, %3982
  %3998 = lshr i32 %3997, 4
  %3999 = trunc i32 %3998 to i8
  %4000 = and i8 %3999, 1
  %4001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4000, i8* %4001, align 1, !tbaa !2447
  %4002 = icmp eq i32 %3982, 0
  %4003 = zext i1 %4002 to i8
  %4004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4003, i8* %4004, align 1, !tbaa !2448
  %4005 = lshr i32 %3982, 31
  %4006 = trunc i32 %4005 to i8
  %4007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4006, i8* %4007, align 1, !tbaa !2449
  %4008 = lshr i32 %3981, 31
  %4009 = xor i32 %4005, %4008
  %4010 = add nuw nsw i32 %4009, %4005
  %4011 = icmp eq i32 %4010, 2
  %4012 = zext i1 %4011 to i8
  %4013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4012, i8* %4013, align 1, !tbaa !2450
  %4014 = load i64, i64* %RBP
  %4015 = sub i64 %4014, 100
  %4016 = load i32, i32* %EAX
  %4017 = zext i32 %4016 to i64
  %4018 = load i64, i64* %PC
  %4019 = add i64 %4018, 3
  store i64 %4019, i64* %PC
  %4020 = inttoptr i64 %4015 to i32*
  store i32 %4016, i32* %4020
  %4021 = load i64, i64* %PC
  %4022 = sub i64 %4021, 216
  %4023 = load i64, i64* %PC
  %4024 = add i64 %4023, 5
  store i64 %4024, i64* %PC
  %4025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4022, i64* %4025, align 8, !tbaa !2428
  br label %block_400b77

block_400d02:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %4026 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4027 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4028 = bitcast %union.vec128_t* %XMM0 to i8*
  %4029 = load i64, i64* %PC
  %4030 = add i64 %4029, 3
  store i64 %4030, i64* %PC
  %4031 = bitcast i8* %4027 to i64*
  %4032 = load i64, i64* %4031, align 1
  %4033 = getelementptr inbounds i8, i8* %4027, i64 8
  %4034 = bitcast i8* %4033 to i64*
  %4035 = load i64, i64* %4034, align 1
  %4036 = bitcast i8* %4028 to i64*
  %4037 = load i64, i64* %4036, align 1
  %4038 = getelementptr inbounds i8, i8* %4028, i64 8
  %4039 = bitcast i8* %4038 to i64*
  %4040 = load i64, i64* %4039, align 1
  %4041 = xor i64 %4037, %4032
  %4042 = xor i64 %4040, %4035
  %4043 = trunc i64 %4041 to i32
  %4044 = lshr i64 %4041, 32
  %4045 = trunc i64 %4044 to i32
  %4046 = bitcast i8* %4026 to i32*
  store i32 %4043, i32* %4046, align 1, !tbaa !2454
  %4047 = getelementptr inbounds i8, i8* %4026, i64 4
  %4048 = bitcast i8* %4047 to i32*
  store i32 %4045, i32* %4048, align 1, !tbaa !2454
  %4049 = trunc i64 %4042 to i32
  %4050 = getelementptr inbounds i8, i8* %4026, i64 8
  %4051 = bitcast i8* %4050 to i32*
  store i32 %4049, i32* %4051, align 1, !tbaa !2454
  %4052 = lshr i64 %4042, 32
  %4053 = trunc i64 %4052 to i32
  %4054 = getelementptr inbounds i8, i8* %4026, i64 12
  %4055 = bitcast i8* %4054 to i32*
  store i32 %4053, i32* %4055, align 1, !tbaa !2454
  %4056 = load i64, i64* %RBP
  %4057 = sub i64 %4056, 192
  %4058 = bitcast %union.vec128_t* %XMM0 to i8*
  %4059 = load i64, i64* %PC
  %4060 = add i64 %4059, 8
  store i64 %4060, i64* %PC
  %4061 = bitcast i8* %4058 to double*
  %4062 = load double, double* %4061, align 1
  %4063 = inttoptr i64 %4057 to double*
  store double %4062, double* %4063
  %4064 = load i64, i64* %PC
  %4065 = add i64 %4064, 5
  %4066 = load i64, i64* %PC
  %4067 = add i64 %4066, 5
  store i64 %4067, i64* %PC
  %4068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4065, i64* %4068, align 8, !tbaa !2428
  br label %block_400d12
}

; Function Attrs: noinline
define %struct.Memory* @sub_400750__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400750:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #17
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #17
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_404080___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_404010___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_604ff0__got_type, %seg_604ff0__got_type* @seg_604ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_605120___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_4011e0_bitrv2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4011e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i32, i32* %EDI
  %56 = zext i32 %55 to i64
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 16
  %62 = load i64, i64* %RSI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 24
  %68 = load i64, i64* %RDX
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 16
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDX, align 8, !tbaa !2428
  %78 = load i64, i64* %RDX
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 6
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i32*
  store i32 0, i32* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i32*
  %87 = load i32, i32* %86
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %RDI, align 8, !tbaa !2428
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 44
  %91 = load i32, i32* %EDI
  %92 = zext i32 %91 to i64
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 3
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %90 to i32*
  store i32 %91, i32* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 48
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 7
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i32*
  store i32 1, i32* %100
  br label %block_401206

block_401852:                                     ; preds = %block_40167f, %block_40184d
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_40184d ], [ %MEMORY.5, %block_40167f ]
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 1
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %104 = load i64, i64* %103, align 8, !tbaa !2428
  %105 = add i64 %104, 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %RBP, align 8, !tbaa !2428
  store i64 %105, i64* %103, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 1
  store i64 %109, i64* %PC
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %112 = load i64, i64* %111, align 8, !tbaa !2428
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %110, align 8, !tbaa !2428
  %115 = add i64 %112, 8
  store i64 %115, i64* %111, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40184d:                                     ; preds = %block_40168b
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  store i64 %119, i64* %PC
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %117, i64* %120, align 8, !tbaa !2428
  br label %block_401852

block_40183a:                                     ; preds = %block_40169e
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 5
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 36
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  %131 = load i32, i32* %130
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = trunc i64 %133 to i32
  %137 = add i32 1, %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = icmp ult i32 %137, %136
  %140 = icmp ult i32 %137, 1
  %141 = or i1 %139, %140
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %142, i8* %143, align 1, !tbaa !2432
  %144 = and i32 %137, 255
  %145 = call i32 @llvm.ctpop.i32(i32 %144) #17
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %148, i8* %149, align 1, !tbaa !2446
  %150 = xor i64 1, %133
  %151 = trunc i64 %150 to i32
  %152 = xor i32 %151, %137
  %153 = lshr i32 %152, 4
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %155, i8* %156, align 1, !tbaa !2447
  %157 = icmp eq i32 %137, 0
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %158, i8* %159, align 1, !tbaa !2448
  %160 = lshr i32 %137, 31
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %161, i8* %162, align 1, !tbaa !2449
  %163 = lshr i32 %136, 31
  %164 = xor i32 %160, %163
  %165 = add nuw nsw i32 %164, %160
  %166 = icmp eq i32 %165, 2
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %167, i8* %168, align 1, !tbaa !2450
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 36
  %171 = load i32, i32* %EAX
  %172 = zext i32 %171 to i64
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 3
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %170 to i32*
  store i32 %171, i32* %175
  %176 = load i64, i64* %PC
  %177 = sub i64 %176, 445
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %177, i64* %180, align 8, !tbaa !2428
  br label %block_40168b

block_40167f:                                     ; preds = %block_40128a
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 467
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 5
  store i64 %184, i64* %PC
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %182, i64* %185, align 8, !tbaa !2428
  br label %block_401852

block_40126b:                                     ; preds = %block_401206
  %186 = sub i64 %5260, 48
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = load i64, i64* %RAX
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 3
  store i64 %194, i64* %PC
  %195 = trunc i64 %192 to i32
  %196 = shl i32 %195, 1
  %197 = icmp slt i32 %195, 0
  %198 = icmp slt i32 %196, 0
  %199 = xor i1 %197, %198
  %200 = zext i32 %196 to i64
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %202 = zext i1 %197 to i8
  store i8 %202, i8* %201, align 1, !tbaa !2451
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %204 = and i32 %196, 254
  %205 = call i32 @llvm.ctpop.i32(i32 %204) #17
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  store i8 %208, i8* %203, align 1, !tbaa !2451
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %209, align 1, !tbaa !2451
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %211 = icmp eq i32 %196, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %210, align 1, !tbaa !2451
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %214 = lshr i32 %196, 31
  %215 = trunc i32 %214 to i8
  store i8 %215, i8* %213, align 1, !tbaa !2451
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %217 = zext i1 %199 to i8
  store i8 %217, i8* %216, align 1, !tbaa !2451
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 52
  %220 = load i32, i32* %EAX
  %221 = zext i32 %220 to i64
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %219 to i32*
  store i32 %220, i32* %224
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 48
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 3
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = zext i32 %230 to i64
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = and i64 %232, 4294967295
  %236 = shl i64 %235, 2
  %237 = trunc i64 %236 to i32
  %238 = icmp slt i32 %237, 0
  %239 = shl i32 %237, 1
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %242 = zext i1 %238 to i8
  store i8 %242, i8* %241, align 1, !tbaa !2451
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %244 = and i32 %239, 254
  %245 = call i32 @llvm.ctpop.i32(i32 %244) #17
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = xor i8 %247, 1
  store i8 %248, i8* %243, align 1, !tbaa !2451
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %249, align 1, !tbaa !2451
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %251 = icmp eq i32 %239, 0
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %250, align 1, !tbaa !2451
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %254 = lshr i32 %239, 31
  %255 = trunc i32 %254 to i8
  store i8 %255, i8* %253, align 1, !tbaa !2451
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %256, align 1, !tbaa !2451
  %257 = load i32, i32* %EAX
  %258 = zext i32 %257 to i64
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 44
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263
  %265 = sub i32 %257, %264
  %266 = icmp ult i32 %257, %264
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %267, i8* %268, align 1, !tbaa !2432
  %269 = and i32 %265, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #17
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i32 %264, %257
  %276 = xor i32 %275, %265
  %277 = lshr i32 %276, 4
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i32 %265, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i32 %265, 31
  %285 = trunc i32 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i32 %257, 31
  %288 = lshr i32 %264, 31
  %289 = xor i32 %288, %287
  %290 = xor i32 %284, %287
  %291 = add nuw nsw i32 %290, %289
  %292 = icmp eq i32 %291, 2
  %293 = zext i1 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %293, i8* %294, align 1, !tbaa !2450
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 1031
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 6
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 6
  store i64 %300, i64* %PC
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %302 = load i8, i8* %301, align 1, !tbaa !2448
  %303 = icmp eq i8 %302, 0
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %306 = select i1 %303, i64 %296, i64 %298
  store i64 %306, i64* %305, align 8, !tbaa !2428
  %307 = load i8, i8* %BRANCH_TAKEN
  %308 = icmp eq i8 %307, 1
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 36
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 7
  store i64 %312, i64* %PC
  br i1 %308, label %block_401684, label %block_401283

block_401231:                                     ; preds = %block_401225
  %313 = sub i64 %3601, 16
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i64*
  %317 = load i64, i64* %316
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 28
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = inttoptr i64 %319 to i32*
  %323 = load i32, i32* %322
  %324 = sext i32 %323 to i64
  store i64 %324, i64* %RCX, align 8, !tbaa !2428
  %325 = load i64, i64* %RAX
  %326 = load i64, i64* %RCX
  %327 = mul i64 %326, 4
  %328 = add i64 %327, %325
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RDX, align 8, !tbaa !2428
  %334 = load i64, i64* %RDX
  %335 = load i64, i64* %RBP
  %336 = sub i64 %335, 44
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 3
  store i64 %338, i64* %PC
  %339 = trunc i64 %334 to i32
  %340 = inttoptr i64 %336 to i32*
  %341 = load i32, i32* %340
  %342 = add i32 %341, %339
  %343 = zext i32 %342 to i64
  store i64 %343, i64* %RDX, align 8, !tbaa !2428
  %344 = icmp ult i32 %342, %339
  %345 = icmp ult i32 %342, %341
  %346 = or i1 %344, %345
  %347 = zext i1 %346 to i8
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %347, i8* %348, align 1, !tbaa !2432
  %349 = and i32 %342, 255
  %350 = call i32 @llvm.ctpop.i32(i32 %349) #17
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  %353 = xor i8 %352, 1
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %353, i8* %354, align 1, !tbaa !2446
  %355 = xor i32 %341, %339
  %356 = xor i32 %355, %342
  %357 = lshr i32 %356, 4
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %359, i8* %360, align 1, !tbaa !2447
  %361 = icmp eq i32 %342, 0
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %362, i8* %363, align 1, !tbaa !2448
  %364 = lshr i32 %342, 31
  %365 = trunc i32 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %365, i8* %366, align 1, !tbaa !2449
  %367 = lshr i32 %339, 31
  %368 = lshr i32 %341, 31
  %369 = xor i32 %364, %367
  %370 = xor i32 %364, %368
  %371 = add nuw nsw i32 %369, %370
  %372 = icmp eq i32 %371, 2
  %373 = zext i1 %372 to i8
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %373, i8* %374, align 1, !tbaa !2450
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 16
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i64*
  %380 = load i64, i64* %379
  store i64 %380, i64* %RAX, align 8, !tbaa !2428
  %381 = load i64, i64* %RBP
  %382 = sub i64 %381, 48
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC
  %385 = inttoptr i64 %382 to i32*
  %386 = load i32, i32* %385
  %387 = zext i32 %386 to i64
  store i64 %387, i64* %RSI, align 8, !tbaa !2428
  %388 = load i64, i64* %RSI
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 28
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 3
  store i64 %392, i64* %PC
  %393 = trunc i64 %388 to i32
  %394 = inttoptr i64 %390 to i32*
  %395 = load i32, i32* %394
  %396 = add i32 %395, %393
  %397 = zext i32 %396 to i64
  store i64 %397, i64* %RSI, align 8, !tbaa !2428
  %398 = icmp ult i32 %396, %393
  %399 = icmp ult i32 %396, %395
  %400 = or i1 %398, %399
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %401, i8* %402, align 1, !tbaa !2432
  %403 = and i32 %396, 255
  %404 = call i32 @llvm.ctpop.i32(i32 %403) #17
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %407, i8* %408, align 1, !tbaa !2446
  %409 = xor i32 %395, %393
  %410 = xor i32 %409, %396
  %411 = lshr i32 %410, 4
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %413, i8* %414, align 1, !tbaa !2447
  %415 = icmp eq i32 %396, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2448
  %418 = lshr i32 %396, 31
  %419 = trunc i32 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %419, i8* %420, align 1, !tbaa !2449
  %421 = lshr i32 %393, 31
  %422 = lshr i32 %395, 31
  %423 = xor i32 %418, %421
  %424 = xor i32 %418, %422
  %425 = add nuw nsw i32 %423, %424
  %426 = icmp eq i32 %425, 2
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %427, i8* %428, align 1, !tbaa !2450
  %429 = load i32, i32* %ESI
  %430 = zext i32 %429 to i64
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC
  %433 = shl i64 %430, 32
  %434 = ashr exact i64 %433, 32
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = load i64, i64* %RAX
  %436 = load i64, i64* %RCX
  %437 = mul i64 %436, 4
  %438 = add i64 %437, %435
  %439 = load i32, i32* %EDX
  %440 = zext i32 %439 to i64
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 3
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %438 to i32*
  store i32 %439, i32* %443
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 28
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 3
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %445 to i32*
  %449 = load i32, i32* %448
  %450 = zext i32 %449 to i64
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = load i64, i64* %RAX
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 3
  store i64 %453, i64* %PC
  %454 = trunc i64 %451 to i32
  %455 = add i32 1, %454
  %456 = zext i32 %455 to i64
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = icmp ult i32 %455, %454
  %458 = icmp ult i32 %455, 1
  %459 = or i1 %457, %458
  %460 = zext i1 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %460, i8* %461, align 1, !tbaa !2432
  %462 = and i32 %455, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #17
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 1, %451
  %469 = trunc i64 %468 to i32
  %470 = xor i32 %469, %455
  %471 = lshr i32 %470, 4
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %473, i8* %474, align 1, !tbaa !2447
  %475 = icmp eq i32 %455, 0
  %476 = zext i1 %475 to i8
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %476, i8* %477, align 1, !tbaa !2448
  %478 = lshr i32 %455, 31
  %479 = trunc i32 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %479, i8* %480, align 1, !tbaa !2449
  %481 = lshr i32 %454, 31
  %482 = xor i32 %478, %481
  %483 = add nuw nsw i32 %482, %478
  %484 = icmp eq i32 %483, 2
  %485 = zext i1 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %485, i8* %486, align 1, !tbaa !2450
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 28
  %489 = load i32, i32* %EAX
  %490 = zext i32 %489 to i64
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %488 to i32*
  store i32 %489, i32* %493
  %494 = load i64, i64* %PC
  %495 = sub i64 %494, 51
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 5
  store i64 %497, i64* %PC
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %495, i64* %498, align 8, !tbaa !2428
  br label %block_401225

block_4015ad:                                     ; preds = %block_40129d
  %499 = sub i64 %3666, 36
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 3
  store i64 %501, i64* %PC
  %502 = inttoptr i64 %499 to i32*
  %503 = load i32, i32* %502
  %504 = zext i32 %503 to i64
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = load i64, i64* %RAX
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 3
  store i64 %507, i64* %PC
  %508 = trunc i64 %505 to i32
  %509 = shl i32 %508, 1
  %510 = icmp slt i32 %508, 0
  %511 = icmp slt i32 %509, 0
  %512 = xor i1 %510, %511
  %513 = zext i32 %509 to i64
  store i64 %513, i64* %RAX, align 8, !tbaa !2428
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %515 = zext i1 %510 to i8
  store i8 %515, i8* %514, align 1, !tbaa !2451
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %517 = and i32 %509, 254
  %518 = call i32 @llvm.ctpop.i32(i32 %517) #17
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* %516, align 1, !tbaa !2451
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %522, align 1, !tbaa !2451
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %524 = icmp eq i32 %509, 0
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %523, align 1, !tbaa !2451
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %527 = lshr i32 %509, 31
  %528 = trunc i32 %527 to i8
  store i8 %528, i8* %526, align 1, !tbaa !2451
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %530 = zext i1 %512 to i8
  store i8 %530, i8* %529, align 1, !tbaa !2451
  %531 = load i64, i64* %RAX
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 52
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = trunc i64 %531 to i32
  %537 = inttoptr i64 %533 to i32*
  %538 = load i32, i32* %537
  %539 = add i32 %538, %536
  %540 = zext i32 %539 to i64
  store i64 %540, i64* %RAX, align 8, !tbaa !2428
  %541 = icmp ult i32 %539, %536
  %542 = icmp ult i32 %539, %538
  %543 = or i1 %541, %542
  %544 = zext i1 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %544, i8* %545, align 1, !tbaa !2432
  %546 = and i32 %539, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #17
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = xor i32 %538, %536
  %553 = xor i32 %552, %539
  %554 = lshr i32 %553, 4
  %555 = trunc i32 %554 to i8
  %556 = and i8 %555, 1
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %556, i8* %557, align 1, !tbaa !2447
  %558 = icmp eq i32 %539, 0
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %559, i8* %560, align 1, !tbaa !2448
  %561 = lshr i32 %539, 31
  %562 = trunc i32 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %562, i8* %563, align 1, !tbaa !2449
  %564 = lshr i32 %536, 31
  %565 = lshr i32 %538, 31
  %566 = xor i32 %561, %564
  %567 = xor i32 %561, %565
  %568 = add nuw nsw i32 %566, %567
  %569 = icmp eq i32 %568, 2
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %570, i8* %571, align 1, !tbaa !2450
  %572 = load i64, i64* %RBP
  %573 = sub i64 %572, 16
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 4
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %573 to i64*
  %577 = load i64, i64* %576
  store i64 %577, i64* %RCX, align 8, !tbaa !2428
  %578 = load i64, i64* %RBP
  %579 = sub i64 %578, 36
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 4
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582
  %584 = sext i32 %583 to i64
  store i64 %584, i64* %RDX, align 8, !tbaa !2428
  %585 = load i64, i64* %RAX
  %586 = load i64, i64* %RCX
  %587 = load i64, i64* %RDX
  %588 = mul i64 %587, 4
  %589 = add i64 %588, %586
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  %592 = trunc i64 %585 to i32
  %593 = inttoptr i64 %589 to i32*
  %594 = load i32, i32* %593
  %595 = add i32 %594, %592
  %596 = zext i32 %595 to i64
  store i64 %596, i64* %RAX, align 8, !tbaa !2428
  %597 = icmp ult i32 %595, %592
  %598 = icmp ult i32 %595, %594
  %599 = or i1 %597, %598
  %600 = zext i1 %599 to i8
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %600, i8* %601, align 1, !tbaa !2432
  %602 = and i32 %595, 255
  %603 = call i32 @llvm.ctpop.i32(i32 %602) #17
  %604 = trunc i32 %603 to i8
  %605 = and i8 %604, 1
  %606 = xor i8 %605, 1
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %606, i8* %607, align 1, !tbaa !2446
  %608 = xor i32 %594, %592
  %609 = xor i32 %608, %595
  %610 = lshr i32 %609, 4
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %612, i8* %613, align 1, !tbaa !2447
  %614 = icmp eq i32 %595, 0
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %615, i8* %616, align 1, !tbaa !2448
  %617 = lshr i32 %595, 31
  %618 = trunc i32 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %618, i8* %619, align 1, !tbaa !2449
  %620 = lshr i32 %592, 31
  %621 = lshr i32 %594, 31
  %622 = xor i32 %617, %620
  %623 = xor i32 %617, %621
  %624 = add nuw nsw i32 %622, %623
  %625 = icmp eq i32 %624, 2
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %626, i8* %627, align 1, !tbaa !2450
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 32
  %630 = load i32, i32* %EAX
  %631 = zext i32 %630 to i64
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 3
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %629 to i32*
  store i32 %630, i32* %634
  %635 = load i64, i64* %RBP
  %636 = sub i64 %635, 32
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 3
  store i64 %638, i64* %PC
  %639 = inttoptr i64 %636 to i32*
  %640 = load i32, i32* %639
  %641 = zext i32 %640 to i64
  store i64 %641, i64* %RAX, align 8, !tbaa !2428
  %642 = load i64, i64* %RAX
  %643 = load i64, i64* %RBP
  %644 = sub i64 %643, 52
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = trunc i64 %642 to i32
  %648 = inttoptr i64 %644 to i32*
  %649 = load i32, i32* %648
  %650 = add i32 %649, %647
  %651 = zext i32 %650 to i64
  store i64 %651, i64* %RAX, align 8, !tbaa !2428
  %652 = icmp ult i32 %650, %647
  %653 = icmp ult i32 %650, %649
  %654 = or i1 %652, %653
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %655, i8* %656, align 1, !tbaa !2432
  %657 = and i32 %650, 255
  %658 = call i32 @llvm.ctpop.i32(i32 %657) #17
  %659 = trunc i32 %658 to i8
  %660 = and i8 %659, 1
  %661 = xor i8 %660, 1
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %661, i8* %662, align 1, !tbaa !2446
  %663 = xor i32 %649, %647
  %664 = xor i32 %663, %650
  %665 = lshr i32 %664, 4
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %667, i8* %668, align 1, !tbaa !2447
  %669 = icmp eq i32 %650, 0
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %670, i8* %671, align 1, !tbaa !2448
  %672 = lshr i32 %650, 31
  %673 = trunc i32 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %673, i8* %674, align 1, !tbaa !2449
  %675 = lshr i32 %647, 31
  %676 = lshr i32 %649, 31
  %677 = xor i32 %672, %675
  %678 = xor i32 %672, %676
  %679 = add nuw nsw i32 %677, %678
  %680 = icmp eq i32 %679, 2
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %681, i8* %682, align 1, !tbaa !2450
  %683 = load i64, i64* %RBP
  %684 = sub i64 %683, 40
  %685 = load i32, i32* %EAX
  %686 = zext i32 %685 to i64
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %684 to i32*
  store i32 %685, i32* %689
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 24
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 4
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %RCX, align 8, !tbaa !2428
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 32
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700
  %702 = sext i32 %701 to i64
  store i64 %702, i64* %RDX, align 8, !tbaa !2428
  %703 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %704 = load i64, i64* %RCX
  %705 = load i64, i64* %RDX
  %706 = mul i64 %705, 8
  %707 = add i64 %706, %704
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 5
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to double*
  %711 = load double, double* %710
  %712 = bitcast i8* %703 to double*
  store double %711, double* %712, align 1, !tbaa !2452
  %713 = getelementptr inbounds i8, i8* %703, i64 8
  %714 = bitcast i8* %713 to double*
  store double 0.000000e+00, double* %714, align 1, !tbaa !2452
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 64
  %717 = bitcast %union.vec128_t* %XMM0 to i8*
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 5
  store i64 %719, i64* %PC
  %720 = bitcast i8* %717 to double*
  %721 = load double, double* %720, align 1
  %722 = inttoptr i64 %716 to double*
  store double %721, double* %722
  %723 = load i64, i64* %RBP
  %724 = sub i64 %723, 24
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 4
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %724 to i64*
  %728 = load i64, i64* %727
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = load i64, i64* %RBP
  %730 = sub i64 %729, 32
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 3
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %730 to i32*
  %734 = load i32, i32* %733
  %735 = zext i32 %734 to i64
  store i64 %735, i64* %RAX, align 8, !tbaa !2428
  %736 = load i64, i64* %RAX
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 3
  store i64 %738, i64* %PC
  %739 = trunc i64 %736 to i32
  %740 = add i32 1, %739
  %741 = zext i32 %740 to i64
  store i64 %741, i64* %RAX, align 8, !tbaa !2428
  %742 = icmp ult i32 %740, %739
  %743 = icmp ult i32 %740, 1
  %744 = or i1 %742, %743
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %745, i8* %746, align 1, !tbaa !2432
  %747 = and i32 %740, 255
  %748 = call i32 @llvm.ctpop.i32(i32 %747) #17
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %751, i8* %752, align 1, !tbaa !2446
  %753 = xor i64 1, %736
  %754 = trunc i64 %753 to i32
  %755 = xor i32 %754, %740
  %756 = lshr i32 %755, 4
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %758, i8* %759, align 1, !tbaa !2447
  %760 = icmp eq i32 %740, 0
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %761, i8* %762, align 1, !tbaa !2448
  %763 = lshr i32 %740, 31
  %764 = trunc i32 %763 to i8
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %764, i8* %765, align 1, !tbaa !2449
  %766 = lshr i32 %739, 31
  %767 = xor i32 %763, %766
  %768 = add nuw nsw i32 %767, %763
  %769 = icmp eq i32 %768, 2
  %770 = zext i1 %769 to i8
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %770, i8* %771, align 1, !tbaa !2450
  %772 = load i32, i32* %EAX
  %773 = zext i32 %772 to i64
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 3
  store i64 %775, i64* %PC
  %776 = shl i64 %773, 32
  %777 = ashr exact i64 %776, 32
  store i64 %777, i64* %RDX, align 8, !tbaa !2428
  %778 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %779 = load i64, i64* %RCX
  %780 = load i64, i64* %RDX
  %781 = mul i64 %780, 8
  %782 = add i64 %781, %779
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 5
  store i64 %784, i64* %PC
  %785 = inttoptr i64 %782 to double*
  %786 = load double, double* %785
  %787 = bitcast i8* %778 to double*
  store double %786, double* %787, align 1, !tbaa !2452
  %788 = getelementptr inbounds i8, i8* %778, i64 8
  %789 = bitcast i8* %788 to double*
  store double 0.000000e+00, double* %789, align 1, !tbaa !2452
  %790 = load i64, i64* %RBP
  %791 = sub i64 %790, 72
  %792 = bitcast %union.vec128_t* %XMM0 to i8*
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 5
  store i64 %794, i64* %PC
  %795 = bitcast i8* %792 to double*
  %796 = load double, double* %795, align 1
  %797 = inttoptr i64 %791 to double*
  store double %796, double* %797
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 24
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %799 to i64*
  %803 = load i64, i64* %802
  store i64 %803, i64* %RCX, align 8, !tbaa !2428
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 40
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i32*
  %809 = load i32, i32* %808
  %810 = sext i32 %809 to i64
  store i64 %810, i64* %RDX, align 8, !tbaa !2428
  %811 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %812 = load i64, i64* %RCX
  %813 = load i64, i64* %RDX
  %814 = mul i64 %813, 8
  %815 = add i64 %814, %812
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to double*
  %819 = load double, double* %818
  %820 = bitcast i8* %811 to double*
  store double %819, double* %820, align 1, !tbaa !2452
  %821 = getelementptr inbounds i8, i8* %811, i64 8
  %822 = bitcast i8* %821 to double*
  store double 0.000000e+00, double* %822, align 1, !tbaa !2452
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 80
  %825 = bitcast %union.vec128_t* %XMM0 to i8*
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC
  %828 = bitcast i8* %825 to double*
  %829 = load double, double* %828, align 1
  %830 = inttoptr i64 %824 to double*
  store double %829, double* %830
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 24
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 4
  store i64 %834, i64* %PC
  %835 = inttoptr i64 %832 to i64*
  %836 = load i64, i64* %835
  store i64 %836, i64* %RCX, align 8, !tbaa !2428
  %837 = load i64, i64* %RBP
  %838 = sub i64 %837, 40
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 3
  store i64 %840, i64* %PC
  %841 = inttoptr i64 %838 to i32*
  %842 = load i32, i32* %841
  %843 = zext i32 %842 to i64
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  %847 = trunc i64 %844 to i32
  %848 = add i32 1, %847
  %849 = zext i32 %848 to i64
  store i64 %849, i64* %RAX, align 8, !tbaa !2428
  %850 = icmp ult i32 %848, %847
  %851 = icmp ult i32 %848, 1
  %852 = or i1 %850, %851
  %853 = zext i1 %852 to i8
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %853, i8* %854, align 1, !tbaa !2432
  %855 = and i32 %848, 255
  %856 = call i32 @llvm.ctpop.i32(i32 %855) #17
  %857 = trunc i32 %856 to i8
  %858 = and i8 %857, 1
  %859 = xor i8 %858, 1
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %859, i8* %860, align 1, !tbaa !2446
  %861 = xor i64 1, %844
  %862 = trunc i64 %861 to i32
  %863 = xor i32 %862, %848
  %864 = lshr i32 %863, 4
  %865 = trunc i32 %864 to i8
  %866 = and i8 %865, 1
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %866, i8* %867, align 1, !tbaa !2447
  %868 = icmp eq i32 %848, 0
  %869 = zext i1 %868 to i8
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %869, i8* %870, align 1, !tbaa !2448
  %871 = lshr i32 %848, 31
  %872 = trunc i32 %871 to i8
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %872, i8* %873, align 1, !tbaa !2449
  %874 = lshr i32 %847, 31
  %875 = xor i32 %871, %874
  %876 = add nuw nsw i32 %875, %871
  %877 = icmp eq i32 %876, 2
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %878, i8* %879, align 1, !tbaa !2450
  %880 = load i32, i32* %EAX
  %881 = zext i32 %880 to i64
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 3
  store i64 %883, i64* %PC
  %884 = shl i64 %881, 32
  %885 = ashr exact i64 %884, 32
  store i64 %885, i64* %RDX, align 8, !tbaa !2428
  %886 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %887 = load i64, i64* %RCX
  %888 = load i64, i64* %RDX
  %889 = mul i64 %888, 8
  %890 = add i64 %889, %887
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 5
  store i64 %892, i64* %PC
  %893 = inttoptr i64 %890 to double*
  %894 = load double, double* %893
  %895 = bitcast i8* %886 to double*
  store double %894, double* %895, align 1, !tbaa !2452
  %896 = getelementptr inbounds i8, i8* %886, i64 8
  %897 = bitcast i8* %896 to double*
  store double 0.000000e+00, double* %897, align 1, !tbaa !2452
  %898 = load i64, i64* %RBP
  %899 = sub i64 %898, 88
  %900 = bitcast %union.vec128_t* %XMM0 to i8*
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 5
  store i64 %902, i64* %PC
  %903 = bitcast i8* %900 to double*
  %904 = load double, double* %903, align 1
  %905 = inttoptr i64 %899 to double*
  store double %904, double* %905
  %906 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %907 = load i64, i64* %RBP
  %908 = sub i64 %907, 80
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 5
  store i64 %910, i64* %PC
  %911 = inttoptr i64 %908 to double*
  %912 = load double, double* %911
  %913 = bitcast i8* %906 to double*
  store double %912, double* %913, align 1, !tbaa !2452
  %914 = getelementptr inbounds i8, i8* %906, i64 8
  %915 = bitcast i8* %914 to double*
  store double 0.000000e+00, double* %915, align 1, !tbaa !2452
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 24
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 4
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i64*
  %921 = load i64, i64* %920
  store i64 %921, i64* %RCX, align 8, !tbaa !2428
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 32
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 4
  store i64 %925, i64* %PC
  %926 = inttoptr i64 %923 to i32*
  %927 = load i32, i32* %926
  %928 = sext i32 %927 to i64
  store i64 %928, i64* %RDX, align 8, !tbaa !2428
  %929 = load i64, i64* %RCX
  %930 = load i64, i64* %RDX
  %931 = mul i64 %930, 8
  %932 = add i64 %931, %929
  %933 = bitcast %union.vec128_t* %XMM0 to i8*
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 5
  store i64 %935, i64* %PC
  %936 = bitcast i8* %933 to double*
  %937 = load double, double* %936, align 1
  %938 = inttoptr i64 %932 to double*
  store double %937, double* %938
  %939 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 88
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 5
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to double*
  %945 = load double, double* %944
  %946 = bitcast i8* %939 to double*
  store double %945, double* %946, align 1, !tbaa !2452
  %947 = getelementptr inbounds i8, i8* %939, i64 8
  %948 = bitcast i8* %947 to double*
  store double 0.000000e+00, double* %948, align 1, !tbaa !2452
  %949 = load i64, i64* %RBP
  %950 = sub i64 %949, 24
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 4
  store i64 %952, i64* %PC
  %953 = inttoptr i64 %950 to i64*
  %954 = load i64, i64* %953
  store i64 %954, i64* %RCX, align 8, !tbaa !2428
  %955 = load i64, i64* %RBP
  %956 = sub i64 %955, 32
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 3
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %956 to i32*
  %960 = load i32, i32* %959
  %961 = zext i32 %960 to i64
  store i64 %961, i64* %RAX, align 8, !tbaa !2428
  %962 = load i64, i64* %RAX
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 3
  store i64 %964, i64* %PC
  %965 = trunc i64 %962 to i32
  %966 = add i32 1, %965
  %967 = zext i32 %966 to i64
  store i64 %967, i64* %RAX, align 8, !tbaa !2428
  %968 = icmp ult i32 %966, %965
  %969 = icmp ult i32 %966, 1
  %970 = or i1 %968, %969
  %971 = zext i1 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %971, i8* %972, align 1, !tbaa !2432
  %973 = and i32 %966, 255
  %974 = call i32 @llvm.ctpop.i32(i32 %973) #17
  %975 = trunc i32 %974 to i8
  %976 = and i8 %975, 1
  %977 = xor i8 %976, 1
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %977, i8* %978, align 1, !tbaa !2446
  %979 = xor i64 1, %962
  %980 = trunc i64 %979 to i32
  %981 = xor i32 %980, %966
  %982 = lshr i32 %981, 4
  %983 = trunc i32 %982 to i8
  %984 = and i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %984, i8* %985, align 1, !tbaa !2447
  %986 = icmp eq i32 %966, 0
  %987 = zext i1 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %987, i8* %988, align 1, !tbaa !2448
  %989 = lshr i32 %966, 31
  %990 = trunc i32 %989 to i8
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %990, i8* %991, align 1, !tbaa !2449
  %992 = lshr i32 %965, 31
  %993 = xor i32 %989, %992
  %994 = add nuw nsw i32 %993, %989
  %995 = icmp eq i32 %994, 2
  %996 = zext i1 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %996, i8* %997, align 1, !tbaa !2450
  %998 = load i32, i32* %EAX
  %999 = zext i32 %998 to i64
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 3
  store i64 %1001, i64* %PC
  %1002 = shl i64 %999, 32
  %1003 = ashr exact i64 %1002, 32
  store i64 %1003, i64* %RDX, align 8, !tbaa !2428
  %1004 = load i64, i64* %RCX
  %1005 = load i64, i64* %RDX
  %1006 = mul i64 %1005, 8
  %1007 = add i64 %1006, %1004
  %1008 = bitcast %union.vec128_t* %XMM0 to i8*
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 5
  store i64 %1010, i64* %PC
  %1011 = bitcast i8* %1008 to double*
  %1012 = load double, double* %1011, align 1
  %1013 = inttoptr i64 %1007 to double*
  store double %1012, double* %1013
  %1014 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1015 = load i64, i64* %RBP
  %1016 = sub i64 %1015, 64
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 5
  store i64 %1018, i64* %PC
  %1019 = inttoptr i64 %1016 to double*
  %1020 = load double, double* %1019
  %1021 = bitcast i8* %1014 to double*
  store double %1020, double* %1021, align 1, !tbaa !2452
  %1022 = getelementptr inbounds i8, i8* %1014, i64 8
  %1023 = bitcast i8* %1022 to double*
  store double 0.000000e+00, double* %1023, align 1, !tbaa !2452
  %1024 = load i64, i64* %RBP
  %1025 = sub i64 %1024, 24
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 4
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1025 to i64*
  %1029 = load i64, i64* %1028
  store i64 %1029, i64* %RCX, align 8, !tbaa !2428
  %1030 = load i64, i64* %RBP
  %1031 = sub i64 %1030, 40
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 4
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1031 to i32*
  %1035 = load i32, i32* %1034
  %1036 = sext i32 %1035 to i64
  store i64 %1036, i64* %RDX, align 8, !tbaa !2428
  %1037 = load i64, i64* %RCX
  %1038 = load i64, i64* %RDX
  %1039 = mul i64 %1038, 8
  %1040 = add i64 %1039, %1037
  %1041 = bitcast %union.vec128_t* %XMM0 to i8*
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 5
  store i64 %1043, i64* %PC
  %1044 = bitcast i8* %1041 to double*
  %1045 = load double, double* %1044, align 1
  %1046 = inttoptr i64 %1040 to double*
  store double %1045, double* %1046
  %1047 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1048 = load i64, i64* %RBP
  %1049 = sub i64 %1048, 72
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 5
  store i64 %1051, i64* %PC
  %1052 = inttoptr i64 %1049 to double*
  %1053 = load double, double* %1052
  %1054 = bitcast i8* %1047 to double*
  store double %1053, double* %1054, align 1, !tbaa !2452
  %1055 = getelementptr inbounds i8, i8* %1047, i64 8
  %1056 = bitcast i8* %1055 to double*
  store double 0.000000e+00, double* %1056, align 1, !tbaa !2452
  %1057 = load i64, i64* %RBP
  %1058 = sub i64 %1057, 24
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 4
  store i64 %1060, i64* %PC
  %1061 = inttoptr i64 %1058 to i64*
  %1062 = load i64, i64* %1061
  store i64 %1062, i64* %RCX, align 8, !tbaa !2428
  %1063 = load i64, i64* %RBP
  %1064 = sub i64 %1063, 40
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 3
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  %1068 = load i32, i32* %1067
  %1069 = zext i32 %1068 to i64
  store i64 %1069, i64* %RAX, align 8, !tbaa !2428
  %1070 = load i64, i64* %RAX
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 3
  store i64 %1072, i64* %PC
  %1073 = trunc i64 %1070 to i32
  %1074 = add i32 1, %1073
  %1075 = zext i32 %1074 to i64
  store i64 %1075, i64* %RAX, align 8, !tbaa !2428
  %1076 = icmp ult i32 %1074, %1073
  %1077 = icmp ult i32 %1074, 1
  %1078 = or i1 %1076, %1077
  %1079 = zext i1 %1078 to i8
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1079, i8* %1080, align 1, !tbaa !2432
  %1081 = and i32 %1074, 255
  %1082 = call i32 @llvm.ctpop.i32(i32 %1081) #17
  %1083 = trunc i32 %1082 to i8
  %1084 = and i8 %1083, 1
  %1085 = xor i8 %1084, 1
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1085, i8* %1086, align 1, !tbaa !2446
  %1087 = xor i64 1, %1070
  %1088 = trunc i64 %1087 to i32
  %1089 = xor i32 %1088, %1074
  %1090 = lshr i32 %1089, 4
  %1091 = trunc i32 %1090 to i8
  %1092 = and i8 %1091, 1
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1092, i8* %1093, align 1, !tbaa !2447
  %1094 = icmp eq i32 %1074, 0
  %1095 = zext i1 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1095, i8* %1096, align 1, !tbaa !2448
  %1097 = lshr i32 %1074, 31
  %1098 = trunc i32 %1097 to i8
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1098, i8* %1099, align 1, !tbaa !2449
  %1100 = lshr i32 %1073, 31
  %1101 = xor i32 %1097, %1100
  %1102 = add nuw nsw i32 %1101, %1097
  %1103 = icmp eq i32 %1102, 2
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1104, i8* %1105, align 1, !tbaa !2450
  %1106 = load i32, i32* %EAX
  %1107 = zext i32 %1106 to i64
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 3
  store i64 %1109, i64* %PC
  %1110 = shl i64 %1107, 32
  %1111 = ashr exact i64 %1110, 32
  store i64 %1111, i64* %RDX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RCX
  %1113 = load i64, i64* %RDX
  %1114 = mul i64 %1113, 8
  %1115 = add i64 %1114, %1112
  %1116 = bitcast %union.vec128_t* %XMM0 to i8*
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 5
  store i64 %1118, i64* %PC
  %1119 = bitcast i8* %1116 to double*
  %1120 = load double, double* %1119, align 1
  %1121 = inttoptr i64 %1115 to double*
  store double %1120, double* %1121
  %1122 = load i64, i64* %RBP
  %1123 = sub i64 %1122, 36
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 3
  store i64 %1125, i64* %PC
  %1126 = inttoptr i64 %1123 to i32*
  %1127 = load i32, i32* %1126
  %1128 = zext i32 %1127 to i64
  store i64 %1128, i64* %RAX, align 8, !tbaa !2428
  %1129 = load i64, i64* %RAX
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 3
  store i64 %1131, i64* %PC
  %1132 = trunc i64 %1129 to i32
  %1133 = add i32 1, %1132
  %1134 = zext i32 %1133 to i64
  store i64 %1134, i64* %RAX, align 8, !tbaa !2428
  %1135 = icmp ult i32 %1133, %1132
  %1136 = icmp ult i32 %1133, 1
  %1137 = or i1 %1135, %1136
  %1138 = zext i1 %1137 to i8
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1138, i8* %1139, align 1, !tbaa !2432
  %1140 = and i32 %1133, 255
  %1141 = call i32 @llvm.ctpop.i32(i32 %1140) #17
  %1142 = trunc i32 %1141 to i8
  %1143 = and i8 %1142, 1
  %1144 = xor i8 %1143, 1
  %1145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1144, i8* %1145, align 1, !tbaa !2446
  %1146 = xor i64 1, %1129
  %1147 = trunc i64 %1146 to i32
  %1148 = xor i32 %1147, %1133
  %1149 = lshr i32 %1148, 4
  %1150 = trunc i32 %1149 to i8
  %1151 = and i8 %1150, 1
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1151, i8* %1152, align 1, !tbaa !2447
  %1153 = icmp eq i32 %1133, 0
  %1154 = zext i1 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1154, i8* %1155, align 1, !tbaa !2448
  %1156 = lshr i32 %1133, 31
  %1157 = trunc i32 %1156 to i8
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1157, i8* %1158, align 1, !tbaa !2449
  %1159 = lshr i32 %1132, 31
  %1160 = xor i32 %1156, %1159
  %1161 = add nuw nsw i32 %1160, %1156
  %1162 = icmp eq i32 %1161, 2
  %1163 = zext i1 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1163, i8* %1164, align 1, !tbaa !2450
  %1165 = load i64, i64* %RBP
  %1166 = sub i64 %1165, 36
  %1167 = load i32, i32* %EAX
  %1168 = zext i32 %1167 to i64
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 3
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1166 to i32*
  store i32 %1167, i32* %1171
  %1172 = load i64, i64* %PC
  %1173 = sub i64 %1172, 1008
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 5
  store i64 %1175, i64* %PC
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1173, i64* %1176, align 8, !tbaa !2428
  br label %block_40128a

block_4012a9:                                     ; preds = %block_40129d
  %1177 = sub i64 %3666, 28
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 3
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to i32*
  %1181 = load i32, i32* %1180
  %1182 = zext i32 %1181 to i64
  store i64 %1182, i64* %RAX, align 8, !tbaa !2428
  %1183 = load i64, i64* %RAX
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 3
  store i64 %1185, i64* %PC
  %1186 = trunc i64 %1183 to i32
  %1187 = shl i32 %1186, 1
  %1188 = icmp slt i32 %1186, 0
  %1189 = icmp slt i32 %1187, 0
  %1190 = xor i1 %1188, %1189
  %1191 = zext i32 %1187 to i64
  store i64 %1191, i64* %RAX, align 8, !tbaa !2428
  %1192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1193 = zext i1 %1188 to i8
  store i8 %1193, i8* %1192, align 1, !tbaa !2451
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1195 = and i32 %1187, 254
  %1196 = call i32 @llvm.ctpop.i32(i32 %1195) #17
  %1197 = trunc i32 %1196 to i8
  %1198 = and i8 %1197, 1
  %1199 = xor i8 %1198, 1
  store i8 %1199, i8* %1194, align 1, !tbaa !2451
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1200, align 1, !tbaa !2451
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1202 = icmp eq i32 %1187, 0
  %1203 = zext i1 %1202 to i8
  store i8 %1203, i8* %1201, align 1, !tbaa !2451
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1205 = lshr i32 %1187, 31
  %1206 = trunc i32 %1205 to i8
  store i8 %1206, i8* %1204, align 1, !tbaa !2451
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1208 = zext i1 %1190 to i8
  store i8 %1208, i8* %1207, align 1, !tbaa !2451
  %1209 = load i64, i64* %RBP
  %1210 = sub i64 %1209, 16
  %1211 = load i64, i64* %PC
  %1212 = add i64 %1211, 4
  store i64 %1212, i64* %PC
  %1213 = inttoptr i64 %1210 to i64*
  %1214 = load i64, i64* %1213
  store i64 %1214, i64* %RCX, align 8, !tbaa !2428
  %1215 = load i64, i64* %RBP
  %1216 = sub i64 %1215, 36
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 4
  store i64 %1218, i64* %PC
  %1219 = inttoptr i64 %1216 to i32*
  %1220 = load i32, i32* %1219
  %1221 = sext i32 %1220 to i64
  store i64 %1221, i64* %RDX, align 8, !tbaa !2428
  %1222 = load i64, i64* %RAX
  %1223 = load i64, i64* %RCX
  %1224 = load i64, i64* %RDX
  %1225 = mul i64 %1224, 4
  %1226 = add i64 %1225, %1223
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 3
  store i64 %1228, i64* %PC
  %1229 = trunc i64 %1222 to i32
  %1230 = inttoptr i64 %1226 to i32*
  %1231 = load i32, i32* %1230
  %1232 = add i32 %1231, %1229
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RAX, align 8, !tbaa !2428
  %1234 = icmp ult i32 %1232, %1229
  %1235 = icmp ult i32 %1232, %1231
  %1236 = or i1 %1234, %1235
  %1237 = zext i1 %1236 to i8
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1237, i8* %1238, align 1, !tbaa !2432
  %1239 = and i32 %1232, 255
  %1240 = call i32 @llvm.ctpop.i32(i32 %1239) #17
  %1241 = trunc i32 %1240 to i8
  %1242 = and i8 %1241, 1
  %1243 = xor i8 %1242, 1
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1243, i8* %1244, align 1, !tbaa !2446
  %1245 = xor i32 %1231, %1229
  %1246 = xor i32 %1245, %1232
  %1247 = lshr i32 %1246, 4
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1249, i8* %1250, align 1, !tbaa !2447
  %1251 = icmp eq i32 %1232, 0
  %1252 = zext i1 %1251 to i8
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1252, i8* %1253, align 1, !tbaa !2448
  %1254 = lshr i32 %1232, 31
  %1255 = trunc i32 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1255, i8* %1256, align 1, !tbaa !2449
  %1257 = lshr i32 %1229, 31
  %1258 = lshr i32 %1231, 31
  %1259 = xor i32 %1254, %1257
  %1260 = xor i32 %1254, %1258
  %1261 = add nuw nsw i32 %1259, %1260
  %1262 = icmp eq i32 %1261, 2
  %1263 = zext i1 %1262 to i8
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1263, i8* %1264, align 1, !tbaa !2450
  %1265 = load i64, i64* %RBP
  %1266 = sub i64 %1265, 32
  %1267 = load i32, i32* %EAX
  %1268 = zext i32 %1267 to i64
  %1269 = load i64, i64* %PC
  %1270 = add i64 %1269, 3
  store i64 %1270, i64* %PC
  %1271 = inttoptr i64 %1266 to i32*
  store i32 %1267, i32* %1271
  %1272 = load i64, i64* %RBP
  %1273 = sub i64 %1272, 36
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 3
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1273 to i32*
  %1277 = load i32, i32* %1276
  %1278 = zext i32 %1277 to i64
  store i64 %1278, i64* %RAX, align 8, !tbaa !2428
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = trunc i64 %1279 to i32
  %1283 = shl i32 %1282, 1
  %1284 = icmp slt i32 %1282, 0
  %1285 = icmp slt i32 %1283, 0
  %1286 = xor i1 %1284, %1285
  %1287 = zext i32 %1283 to i64
  store i64 %1287, i64* %RAX, align 8, !tbaa !2428
  %1288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1289 = zext i1 %1284 to i8
  store i8 %1289, i8* %1288, align 1, !tbaa !2451
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1291 = and i32 %1283, 254
  %1292 = call i32 @llvm.ctpop.i32(i32 %1291) #17
  %1293 = trunc i32 %1292 to i8
  %1294 = and i8 %1293, 1
  %1295 = xor i8 %1294, 1
  store i8 %1295, i8* %1290, align 1, !tbaa !2451
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1296, align 1, !tbaa !2451
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1298 = icmp eq i32 %1283, 0
  %1299 = zext i1 %1298 to i8
  store i8 %1299, i8* %1297, align 1, !tbaa !2451
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1301 = lshr i32 %1283, 31
  %1302 = trunc i32 %1301 to i8
  store i8 %1302, i8* %1300, align 1, !tbaa !2451
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1304 = zext i1 %1286 to i8
  store i8 %1304, i8* %1303, align 1, !tbaa !2451
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 16
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 4
  store i64 %1308, i64* %PC
  %1309 = inttoptr i64 %1306 to i64*
  %1310 = load i64, i64* %1309
  store i64 %1310, i64* %RCX, align 8, !tbaa !2428
  %1311 = load i64, i64* %RBP
  %1312 = sub i64 %1311, 28
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 4
  store i64 %1314, i64* %PC
  %1315 = inttoptr i64 %1312 to i32*
  %1316 = load i32, i32* %1315
  %1317 = sext i32 %1316 to i64
  store i64 %1317, i64* %RDX, align 8, !tbaa !2428
  %1318 = load i64, i64* %RAX
  %1319 = load i64, i64* %RCX
  %1320 = load i64, i64* %RDX
  %1321 = mul i64 %1320, 4
  %1322 = add i64 %1321, %1319
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 3
  store i64 %1324, i64* %PC
  %1325 = trunc i64 %1318 to i32
  %1326 = inttoptr i64 %1322 to i32*
  %1327 = load i32, i32* %1326
  %1328 = add i32 %1327, %1325
  %1329 = zext i32 %1328 to i64
  store i64 %1329, i64* %RAX, align 8, !tbaa !2428
  %1330 = icmp ult i32 %1328, %1325
  %1331 = icmp ult i32 %1328, %1327
  %1332 = or i1 %1330, %1331
  %1333 = zext i1 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1333, i8* %1334, align 1, !tbaa !2432
  %1335 = and i32 %1328, 255
  %1336 = call i32 @llvm.ctpop.i32(i32 %1335) #17
  %1337 = trunc i32 %1336 to i8
  %1338 = and i8 %1337, 1
  %1339 = xor i8 %1338, 1
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1339, i8* %1340, align 1, !tbaa !2446
  %1341 = xor i32 %1327, %1325
  %1342 = xor i32 %1341, %1328
  %1343 = lshr i32 %1342, 4
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1345, i8* %1346, align 1, !tbaa !2447
  %1347 = icmp eq i32 %1328, 0
  %1348 = zext i1 %1347 to i8
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1348, i8* %1349, align 1, !tbaa !2448
  %1350 = lshr i32 %1328, 31
  %1351 = trunc i32 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1351, i8* %1352, align 1, !tbaa !2449
  %1353 = lshr i32 %1325, 31
  %1354 = lshr i32 %1327, 31
  %1355 = xor i32 %1350, %1353
  %1356 = xor i32 %1350, %1354
  %1357 = add nuw nsw i32 %1355, %1356
  %1358 = icmp eq i32 %1357, 2
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1359, i8* %1360, align 1, !tbaa !2450
  %1361 = load i64, i64* %RBP
  %1362 = sub i64 %1361, 40
  %1363 = load i32, i32* %EAX
  %1364 = zext i32 %1363 to i64
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 3
  store i64 %1366, i64* %PC
  %1367 = inttoptr i64 %1362 to i32*
  store i32 %1363, i32* %1367
  %1368 = load i64, i64* %RBP
  %1369 = sub i64 %1368, 24
  %1370 = load i64, i64* %PC
  %1371 = add i64 %1370, 4
  store i64 %1371, i64* %PC
  %1372 = inttoptr i64 %1369 to i64*
  %1373 = load i64, i64* %1372
  store i64 %1373, i64* %RCX, align 8, !tbaa !2428
  %1374 = load i64, i64* %RBP
  %1375 = sub i64 %1374, 32
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 4
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1375 to i32*
  %1379 = load i32, i32* %1378
  %1380 = sext i32 %1379 to i64
  store i64 %1380, i64* %RDX, align 8, !tbaa !2428
  %1381 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1382 = load i64, i64* %RCX
  %1383 = load i64, i64* %RDX
  %1384 = mul i64 %1383, 8
  %1385 = add i64 %1384, %1382
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 5
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to double*
  %1389 = load double, double* %1388
  %1390 = bitcast i8* %1381 to double*
  store double %1389, double* %1390, align 1, !tbaa !2452
  %1391 = getelementptr inbounds i8, i8* %1381, i64 8
  %1392 = bitcast i8* %1391 to double*
  store double 0.000000e+00, double* %1392, align 1, !tbaa !2452
  %1393 = load i64, i64* %RBP
  %1394 = sub i64 %1393, 64
  %1395 = bitcast %union.vec128_t* %XMM0 to i8*
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 5
  store i64 %1397, i64* %PC
  %1398 = bitcast i8* %1395 to double*
  %1399 = load double, double* %1398, align 1
  %1400 = inttoptr i64 %1394 to double*
  store double %1399, double* %1400
  %1401 = load i64, i64* %RBP
  %1402 = sub i64 %1401, 24
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 4
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i64*
  %1406 = load i64, i64* %1405
  store i64 %1406, i64* %RCX, align 8, !tbaa !2428
  %1407 = load i64, i64* %RBP
  %1408 = sub i64 %1407, 32
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 3
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1408 to i32*
  %1412 = load i32, i32* %1411
  %1413 = zext i32 %1412 to i64
  store i64 %1413, i64* %RAX, align 8, !tbaa !2428
  %1414 = load i64, i64* %RAX
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = trunc i64 %1414 to i32
  %1418 = add i32 1, %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RAX, align 8, !tbaa !2428
  %1420 = icmp ult i32 %1418, %1417
  %1421 = icmp ult i32 %1418, 1
  %1422 = or i1 %1420, %1421
  %1423 = zext i1 %1422 to i8
  %1424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1423, i8* %1424, align 1, !tbaa !2432
  %1425 = and i32 %1418, 255
  %1426 = call i32 @llvm.ctpop.i32(i32 %1425) #17
  %1427 = trunc i32 %1426 to i8
  %1428 = and i8 %1427, 1
  %1429 = xor i8 %1428, 1
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1429, i8* %1430, align 1, !tbaa !2446
  %1431 = xor i64 1, %1414
  %1432 = trunc i64 %1431 to i32
  %1433 = xor i32 %1432, %1418
  %1434 = lshr i32 %1433, 4
  %1435 = trunc i32 %1434 to i8
  %1436 = and i8 %1435, 1
  %1437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1436, i8* %1437, align 1, !tbaa !2447
  %1438 = icmp eq i32 %1418, 0
  %1439 = zext i1 %1438 to i8
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1439, i8* %1440, align 1, !tbaa !2448
  %1441 = lshr i32 %1418, 31
  %1442 = trunc i32 %1441 to i8
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1442, i8* %1443, align 1, !tbaa !2449
  %1444 = lshr i32 %1417, 31
  %1445 = xor i32 %1441, %1444
  %1446 = add nuw nsw i32 %1445, %1441
  %1447 = icmp eq i32 %1446, 2
  %1448 = zext i1 %1447 to i8
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1448, i8* %1449, align 1, !tbaa !2450
  %1450 = load i32, i32* %EAX
  %1451 = zext i32 %1450 to i64
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 3
  store i64 %1453, i64* %PC
  %1454 = shl i64 %1451, 32
  %1455 = ashr exact i64 %1454, 32
  store i64 %1455, i64* %RDX, align 8, !tbaa !2428
  %1456 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1457 = load i64, i64* %RCX
  %1458 = load i64, i64* %RDX
  %1459 = mul i64 %1458, 8
  %1460 = add i64 %1459, %1457
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 5
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to double*
  %1464 = load double, double* %1463
  %1465 = bitcast i8* %1456 to double*
  store double %1464, double* %1465, align 1, !tbaa !2452
  %1466 = getelementptr inbounds i8, i8* %1456, i64 8
  %1467 = bitcast i8* %1466 to double*
  store double 0.000000e+00, double* %1467, align 1, !tbaa !2452
  %1468 = load i64, i64* %RBP
  %1469 = sub i64 %1468, 72
  %1470 = bitcast %union.vec128_t* %XMM0 to i8*
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 5
  store i64 %1472, i64* %PC
  %1473 = bitcast i8* %1470 to double*
  %1474 = load double, double* %1473, align 1
  %1475 = inttoptr i64 %1469 to double*
  store double %1474, double* %1475
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 24
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 4
  store i64 %1479, i64* %PC
  %1480 = inttoptr i64 %1477 to i64*
  %1481 = load i64, i64* %1480
  store i64 %1481, i64* %RCX, align 8, !tbaa !2428
  %1482 = load i64, i64* %RBP
  %1483 = sub i64 %1482, 40
  %1484 = load i64, i64* %PC
  %1485 = add i64 %1484, 4
  store i64 %1485, i64* %PC
  %1486 = inttoptr i64 %1483 to i32*
  %1487 = load i32, i32* %1486
  %1488 = sext i32 %1487 to i64
  store i64 %1488, i64* %RDX, align 8, !tbaa !2428
  %1489 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1490 = load i64, i64* %RCX
  %1491 = load i64, i64* %RDX
  %1492 = mul i64 %1491, 8
  %1493 = add i64 %1492, %1490
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 5
  store i64 %1495, i64* %PC
  %1496 = inttoptr i64 %1493 to double*
  %1497 = load double, double* %1496
  %1498 = bitcast i8* %1489 to double*
  store double %1497, double* %1498, align 1, !tbaa !2452
  %1499 = getelementptr inbounds i8, i8* %1489, i64 8
  %1500 = bitcast i8* %1499 to double*
  store double 0.000000e+00, double* %1500, align 1, !tbaa !2452
  %1501 = load i64, i64* %RBP
  %1502 = sub i64 %1501, 80
  %1503 = bitcast %union.vec128_t* %XMM0 to i8*
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 5
  store i64 %1505, i64* %PC
  %1506 = bitcast i8* %1503 to double*
  %1507 = load double, double* %1506, align 1
  %1508 = inttoptr i64 %1502 to double*
  store double %1507, double* %1508
  %1509 = load i64, i64* %RBP
  %1510 = sub i64 %1509, 24
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 4
  store i64 %1512, i64* %PC
  %1513 = inttoptr i64 %1510 to i64*
  %1514 = load i64, i64* %1513
  store i64 %1514, i64* %RCX, align 8, !tbaa !2428
  %1515 = load i64, i64* %RBP
  %1516 = sub i64 %1515, 40
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 3
  store i64 %1518, i64* %PC
  %1519 = inttoptr i64 %1516 to i32*
  %1520 = load i32, i32* %1519
  %1521 = zext i32 %1520 to i64
  store i64 %1521, i64* %RAX, align 8, !tbaa !2428
  %1522 = load i64, i64* %RAX
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 3
  store i64 %1524, i64* %PC
  %1525 = trunc i64 %1522 to i32
  %1526 = add i32 1, %1525
  %1527 = zext i32 %1526 to i64
  store i64 %1527, i64* %RAX, align 8, !tbaa !2428
  %1528 = icmp ult i32 %1526, %1525
  %1529 = icmp ult i32 %1526, 1
  %1530 = or i1 %1528, %1529
  %1531 = zext i1 %1530 to i8
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1531, i8* %1532, align 1, !tbaa !2432
  %1533 = and i32 %1526, 255
  %1534 = call i32 @llvm.ctpop.i32(i32 %1533) #17
  %1535 = trunc i32 %1534 to i8
  %1536 = and i8 %1535, 1
  %1537 = xor i8 %1536, 1
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1537, i8* %1538, align 1, !tbaa !2446
  %1539 = xor i64 1, %1522
  %1540 = trunc i64 %1539 to i32
  %1541 = xor i32 %1540, %1526
  %1542 = lshr i32 %1541, 4
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1544, i8* %1545, align 1, !tbaa !2447
  %1546 = icmp eq i32 %1526, 0
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1547, i8* %1548, align 1, !tbaa !2448
  %1549 = lshr i32 %1526, 31
  %1550 = trunc i32 %1549 to i8
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1550, i8* %1551, align 1, !tbaa !2449
  %1552 = lshr i32 %1525, 31
  %1553 = xor i32 %1549, %1552
  %1554 = add nuw nsw i32 %1553, %1549
  %1555 = icmp eq i32 %1554, 2
  %1556 = zext i1 %1555 to i8
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1556, i8* %1557, align 1, !tbaa !2450
  %1558 = load i32, i32* %EAX
  %1559 = zext i32 %1558 to i64
  %1560 = load i64, i64* %PC
  %1561 = add i64 %1560, 3
  store i64 %1561, i64* %PC
  %1562 = shl i64 %1559, 32
  %1563 = ashr exact i64 %1562, 32
  store i64 %1563, i64* %RDX, align 8, !tbaa !2428
  %1564 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1565 = load i64, i64* %RCX
  %1566 = load i64, i64* %RDX
  %1567 = mul i64 %1566, 8
  %1568 = add i64 %1567, %1565
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 5
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to double*
  %1572 = load double, double* %1571
  %1573 = bitcast i8* %1564 to double*
  store double %1572, double* %1573, align 1, !tbaa !2452
  %1574 = getelementptr inbounds i8, i8* %1564, i64 8
  %1575 = bitcast i8* %1574 to double*
  store double 0.000000e+00, double* %1575, align 1, !tbaa !2452
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 88
  %1578 = bitcast %union.vec128_t* %XMM0 to i8*
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 5
  store i64 %1580, i64* %PC
  %1581 = bitcast i8* %1578 to double*
  %1582 = load double, double* %1581, align 1
  %1583 = inttoptr i64 %1577 to double*
  store double %1582, double* %1583
  %1584 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1585 = load i64, i64* %RBP
  %1586 = sub i64 %1585, 80
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 5
  store i64 %1588, i64* %PC
  %1589 = inttoptr i64 %1586 to double*
  %1590 = load double, double* %1589
  %1591 = bitcast i8* %1584 to double*
  store double %1590, double* %1591, align 1, !tbaa !2452
  %1592 = getelementptr inbounds i8, i8* %1584, i64 8
  %1593 = bitcast i8* %1592 to double*
  store double 0.000000e+00, double* %1593, align 1, !tbaa !2452
  %1594 = load i64, i64* %RBP
  %1595 = sub i64 %1594, 24
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 4
  store i64 %1597, i64* %PC
  %1598 = inttoptr i64 %1595 to i64*
  %1599 = load i64, i64* %1598
  store i64 %1599, i64* %RCX, align 8, !tbaa !2428
  %1600 = load i64, i64* %RBP
  %1601 = sub i64 %1600, 32
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 4
  store i64 %1603, i64* %PC
  %1604 = inttoptr i64 %1601 to i32*
  %1605 = load i32, i32* %1604
  %1606 = sext i32 %1605 to i64
  store i64 %1606, i64* %RDX, align 8, !tbaa !2428
  %1607 = load i64, i64* %RCX
  %1608 = load i64, i64* %RDX
  %1609 = mul i64 %1608, 8
  %1610 = add i64 %1609, %1607
  %1611 = bitcast %union.vec128_t* %XMM0 to i8*
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 5
  store i64 %1613, i64* %PC
  %1614 = bitcast i8* %1611 to double*
  %1615 = load double, double* %1614, align 1
  %1616 = inttoptr i64 %1610 to double*
  store double %1615, double* %1616
  %1617 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 88
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 5
  store i64 %1621, i64* %PC
  %1622 = inttoptr i64 %1619 to double*
  %1623 = load double, double* %1622
  %1624 = bitcast i8* %1617 to double*
  store double %1623, double* %1624, align 1, !tbaa !2452
  %1625 = getelementptr inbounds i8, i8* %1617, i64 8
  %1626 = bitcast i8* %1625 to double*
  store double 0.000000e+00, double* %1626, align 1, !tbaa !2452
  %1627 = load i64, i64* %RBP
  %1628 = sub i64 %1627, 24
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 4
  store i64 %1630, i64* %PC
  %1631 = inttoptr i64 %1628 to i64*
  %1632 = load i64, i64* %1631
  store i64 %1632, i64* %RCX, align 8, !tbaa !2428
  %1633 = load i64, i64* %RBP
  %1634 = sub i64 %1633, 32
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 3
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i32*
  %1638 = load i32, i32* %1637
  %1639 = zext i32 %1638 to i64
  store i64 %1639, i64* %RAX, align 8, !tbaa !2428
  %1640 = load i64, i64* %RAX
  %1641 = load i64, i64* %PC
  %1642 = add i64 %1641, 3
  store i64 %1642, i64* %PC
  %1643 = trunc i64 %1640 to i32
  %1644 = add i32 1, %1643
  %1645 = zext i32 %1644 to i64
  store i64 %1645, i64* %RAX, align 8, !tbaa !2428
  %1646 = icmp ult i32 %1644, %1643
  %1647 = icmp ult i32 %1644, 1
  %1648 = or i1 %1646, %1647
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1649, i8* %1650, align 1, !tbaa !2432
  %1651 = and i32 %1644, 255
  %1652 = call i32 @llvm.ctpop.i32(i32 %1651) #17
  %1653 = trunc i32 %1652 to i8
  %1654 = and i8 %1653, 1
  %1655 = xor i8 %1654, 1
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1655, i8* %1656, align 1, !tbaa !2446
  %1657 = xor i64 1, %1640
  %1658 = trunc i64 %1657 to i32
  %1659 = xor i32 %1658, %1644
  %1660 = lshr i32 %1659, 4
  %1661 = trunc i32 %1660 to i8
  %1662 = and i8 %1661, 1
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1662, i8* %1663, align 1, !tbaa !2447
  %1664 = icmp eq i32 %1644, 0
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1665, i8* %1666, align 1, !tbaa !2448
  %1667 = lshr i32 %1644, 31
  %1668 = trunc i32 %1667 to i8
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1668, i8* %1669, align 1, !tbaa !2449
  %1670 = lshr i32 %1643, 31
  %1671 = xor i32 %1667, %1670
  %1672 = add nuw nsw i32 %1671, %1667
  %1673 = icmp eq i32 %1672, 2
  %1674 = zext i1 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1674, i8* %1675, align 1, !tbaa !2450
  %1676 = load i32, i32* %EAX
  %1677 = zext i32 %1676 to i64
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 3
  store i64 %1679, i64* %PC
  %1680 = shl i64 %1677, 32
  %1681 = ashr exact i64 %1680, 32
  store i64 %1681, i64* %RDX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RCX
  %1683 = load i64, i64* %RDX
  %1684 = mul i64 %1683, 8
  %1685 = add i64 %1684, %1682
  %1686 = bitcast %union.vec128_t* %XMM0 to i8*
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 5
  store i64 %1688, i64* %PC
  %1689 = bitcast i8* %1686 to double*
  %1690 = load double, double* %1689, align 1
  %1691 = inttoptr i64 %1685 to double*
  store double %1690, double* %1691
  %1692 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1693 = load i64, i64* %RBP
  %1694 = sub i64 %1693, 64
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 5
  store i64 %1696, i64* %PC
  %1697 = inttoptr i64 %1694 to double*
  %1698 = load double, double* %1697
  %1699 = bitcast i8* %1692 to double*
  store double %1698, double* %1699, align 1, !tbaa !2452
  %1700 = getelementptr inbounds i8, i8* %1692, i64 8
  %1701 = bitcast i8* %1700 to double*
  store double 0.000000e+00, double* %1701, align 1, !tbaa !2452
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 24
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 4
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i64*
  %1707 = load i64, i64* %1706
  store i64 %1707, i64* %RCX, align 8, !tbaa !2428
  %1708 = load i64, i64* %RBP
  %1709 = sub i64 %1708, 40
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 4
  store i64 %1711, i64* %PC
  %1712 = inttoptr i64 %1709 to i32*
  %1713 = load i32, i32* %1712
  %1714 = sext i32 %1713 to i64
  store i64 %1714, i64* %RDX, align 8, !tbaa !2428
  %1715 = load i64, i64* %RCX
  %1716 = load i64, i64* %RDX
  %1717 = mul i64 %1716, 8
  %1718 = add i64 %1717, %1715
  %1719 = bitcast %union.vec128_t* %XMM0 to i8*
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 5
  store i64 %1721, i64* %PC
  %1722 = bitcast i8* %1719 to double*
  %1723 = load double, double* %1722, align 1
  %1724 = inttoptr i64 %1718 to double*
  store double %1723, double* %1724
  %1725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1726 = load i64, i64* %RBP
  %1727 = sub i64 %1726, 72
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 5
  store i64 %1729, i64* %PC
  %1730 = inttoptr i64 %1727 to double*
  %1731 = load double, double* %1730
  %1732 = bitcast i8* %1725 to double*
  store double %1731, double* %1732, align 1, !tbaa !2452
  %1733 = getelementptr inbounds i8, i8* %1725, i64 8
  %1734 = bitcast i8* %1733 to double*
  store double 0.000000e+00, double* %1734, align 1, !tbaa !2452
  %1735 = load i64, i64* %RBP
  %1736 = sub i64 %1735, 24
  %1737 = load i64, i64* %PC
  %1738 = add i64 %1737, 4
  store i64 %1738, i64* %PC
  %1739 = inttoptr i64 %1736 to i64*
  %1740 = load i64, i64* %1739
  store i64 %1740, i64* %RCX, align 8, !tbaa !2428
  %1741 = load i64, i64* %RBP
  %1742 = sub i64 %1741, 40
  %1743 = load i64, i64* %PC
  %1744 = add i64 %1743, 3
  store i64 %1744, i64* %PC
  %1745 = inttoptr i64 %1742 to i32*
  %1746 = load i32, i32* %1745
  %1747 = zext i32 %1746 to i64
  store i64 %1747, i64* %RAX, align 8, !tbaa !2428
  %1748 = load i64, i64* %RAX
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 3
  store i64 %1750, i64* %PC
  %1751 = trunc i64 %1748 to i32
  %1752 = add i32 1, %1751
  %1753 = zext i32 %1752 to i64
  store i64 %1753, i64* %RAX, align 8, !tbaa !2428
  %1754 = icmp ult i32 %1752, %1751
  %1755 = icmp ult i32 %1752, 1
  %1756 = or i1 %1754, %1755
  %1757 = zext i1 %1756 to i8
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1757, i8* %1758, align 1, !tbaa !2432
  %1759 = and i32 %1752, 255
  %1760 = call i32 @llvm.ctpop.i32(i32 %1759) #17
  %1761 = trunc i32 %1760 to i8
  %1762 = and i8 %1761, 1
  %1763 = xor i8 %1762, 1
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1763, i8* %1764, align 1, !tbaa !2446
  %1765 = xor i64 1, %1748
  %1766 = trunc i64 %1765 to i32
  %1767 = xor i32 %1766, %1752
  %1768 = lshr i32 %1767, 4
  %1769 = trunc i32 %1768 to i8
  %1770 = and i8 %1769, 1
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1770, i8* %1771, align 1, !tbaa !2447
  %1772 = icmp eq i32 %1752, 0
  %1773 = zext i1 %1772 to i8
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1773, i8* %1774, align 1, !tbaa !2448
  %1775 = lshr i32 %1752, 31
  %1776 = trunc i32 %1775 to i8
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1776, i8* %1777, align 1, !tbaa !2449
  %1778 = lshr i32 %1751, 31
  %1779 = xor i32 %1775, %1778
  %1780 = add nuw nsw i32 %1779, %1775
  %1781 = icmp eq i32 %1780, 2
  %1782 = zext i1 %1781 to i8
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1782, i8* %1783, align 1, !tbaa !2450
  %1784 = load i32, i32* %EAX
  %1785 = zext i32 %1784 to i64
  %1786 = load i64, i64* %PC
  %1787 = add i64 %1786, 3
  store i64 %1787, i64* %PC
  %1788 = shl i64 %1785, 32
  %1789 = ashr exact i64 %1788, 32
  store i64 %1789, i64* %RDX, align 8, !tbaa !2428
  %1790 = load i64, i64* %RCX
  %1791 = load i64, i64* %RDX
  %1792 = mul i64 %1791, 8
  %1793 = add i64 %1792, %1790
  %1794 = bitcast %union.vec128_t* %XMM0 to i8*
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  store i64 %1796, i64* %PC
  %1797 = bitcast i8* %1794 to double*
  %1798 = load double, double* %1797, align 1
  %1799 = inttoptr i64 %1793 to double*
  store double %1798, double* %1799
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 52
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 3
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to i32*
  %1805 = load i32, i32* %1804
  %1806 = zext i32 %1805 to i64
  store i64 %1806, i64* %RAX, align 8, !tbaa !2428
  %1807 = load i64, i64* %RAX
  %1808 = load i64, i64* %RBP
  %1809 = sub i64 %1808, 32
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 3
  store i64 %1811, i64* %PC
  %1812 = trunc i64 %1807 to i32
  %1813 = inttoptr i64 %1809 to i32*
  %1814 = load i32, i32* %1813
  %1815 = add i32 %1814, %1812
  %1816 = zext i32 %1815 to i64
  store i64 %1816, i64* %RAX, align 8, !tbaa !2428
  %1817 = icmp ult i32 %1815, %1812
  %1818 = icmp ult i32 %1815, %1814
  %1819 = or i1 %1817, %1818
  %1820 = zext i1 %1819 to i8
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1820, i8* %1821, align 1, !tbaa !2432
  %1822 = and i32 %1815, 255
  %1823 = call i32 @llvm.ctpop.i32(i32 %1822) #17
  %1824 = trunc i32 %1823 to i8
  %1825 = and i8 %1824, 1
  %1826 = xor i8 %1825, 1
  %1827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1826, i8* %1827, align 1, !tbaa !2446
  %1828 = xor i32 %1814, %1812
  %1829 = xor i32 %1828, %1815
  %1830 = lshr i32 %1829, 4
  %1831 = trunc i32 %1830 to i8
  %1832 = and i8 %1831, 1
  %1833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1832, i8* %1833, align 1, !tbaa !2447
  %1834 = icmp eq i32 %1815, 0
  %1835 = zext i1 %1834 to i8
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1835, i8* %1836, align 1, !tbaa !2448
  %1837 = lshr i32 %1815, 31
  %1838 = trunc i32 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1838, i8* %1839, align 1, !tbaa !2449
  %1840 = lshr i32 %1812, 31
  %1841 = lshr i32 %1814, 31
  %1842 = xor i32 %1837, %1840
  %1843 = xor i32 %1837, %1841
  %1844 = add nuw nsw i32 %1842, %1843
  %1845 = icmp eq i32 %1844, 2
  %1846 = zext i1 %1845 to i8
  %1847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1846, i8* %1847, align 1, !tbaa !2450
  %1848 = load i64, i64* %RBP
  %1849 = sub i64 %1848, 32
  %1850 = load i32, i32* %EAX
  %1851 = zext i32 %1850 to i64
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 3
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1849 to i32*
  store i32 %1850, i32* %1854
  %1855 = load i64, i64* %RBP
  %1856 = sub i64 %1855, 52
  %1857 = load i64, i64* %PC
  %1858 = add i64 %1857, 3
  store i64 %1858, i64* %PC
  %1859 = inttoptr i64 %1856 to i32*
  %1860 = load i32, i32* %1859
  %1861 = zext i32 %1860 to i64
  store i64 %1861, i64* %RAX, align 8, !tbaa !2428
  %1862 = load i64, i64* %RAX
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 3
  store i64 %1864, i64* %PC
  %1865 = trunc i64 %1862 to i32
  %1866 = shl i32 %1865, 1
  %1867 = icmp slt i32 %1865, 0
  %1868 = icmp slt i32 %1866, 0
  %1869 = xor i1 %1867, %1868
  %1870 = zext i32 %1866 to i64
  store i64 %1870, i64* %RAX, align 8, !tbaa !2428
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1872 = zext i1 %1867 to i8
  store i8 %1872, i8* %1871, align 1, !tbaa !2451
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1874 = and i32 %1866, 254
  %1875 = call i32 @llvm.ctpop.i32(i32 %1874) #17
  %1876 = trunc i32 %1875 to i8
  %1877 = and i8 %1876, 1
  %1878 = xor i8 %1877, 1
  store i8 %1878, i8* %1873, align 1, !tbaa !2451
  %1879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1879, align 1, !tbaa !2451
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1881 = icmp eq i32 %1866, 0
  %1882 = zext i1 %1881 to i8
  store i8 %1882, i8* %1880, align 1, !tbaa !2451
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1884 = lshr i32 %1866, 31
  %1885 = trunc i32 %1884 to i8
  store i8 %1885, i8* %1883, align 1, !tbaa !2451
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1887 = zext i1 %1869 to i8
  store i8 %1887, i8* %1886, align 1, !tbaa !2451
  %1888 = load i64, i64* %RAX
  %1889 = load i64, i64* %RBP
  %1890 = sub i64 %1889, 40
  %1891 = load i64, i64* %PC
  %1892 = add i64 %1891, 3
  store i64 %1892, i64* %PC
  %1893 = trunc i64 %1888 to i32
  %1894 = inttoptr i64 %1890 to i32*
  %1895 = load i32, i32* %1894
  %1896 = add i32 %1895, %1893
  %1897 = zext i32 %1896 to i64
  store i64 %1897, i64* %RAX, align 8, !tbaa !2428
  %1898 = icmp ult i32 %1896, %1893
  %1899 = icmp ult i32 %1896, %1895
  %1900 = or i1 %1898, %1899
  %1901 = zext i1 %1900 to i8
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1901, i8* %1902, align 1, !tbaa !2432
  %1903 = and i32 %1896, 255
  %1904 = call i32 @llvm.ctpop.i32(i32 %1903) #17
  %1905 = trunc i32 %1904 to i8
  %1906 = and i8 %1905, 1
  %1907 = xor i8 %1906, 1
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1907, i8* %1908, align 1, !tbaa !2446
  %1909 = xor i32 %1895, %1893
  %1910 = xor i32 %1909, %1896
  %1911 = lshr i32 %1910, 4
  %1912 = trunc i32 %1911 to i8
  %1913 = and i8 %1912, 1
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1913, i8* %1914, align 1, !tbaa !2447
  %1915 = icmp eq i32 %1896, 0
  %1916 = zext i1 %1915 to i8
  %1917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1916, i8* %1917, align 1, !tbaa !2448
  %1918 = lshr i32 %1896, 31
  %1919 = trunc i32 %1918 to i8
  %1920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1919, i8* %1920, align 1, !tbaa !2449
  %1921 = lshr i32 %1893, 31
  %1922 = lshr i32 %1895, 31
  %1923 = xor i32 %1918, %1921
  %1924 = xor i32 %1918, %1922
  %1925 = add nuw nsw i32 %1923, %1924
  %1926 = icmp eq i32 %1925, 2
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1927, i8* %1928, align 1, !tbaa !2450
  %1929 = load i64, i64* %RBP
  %1930 = sub i64 %1929, 40
  %1931 = load i32, i32* %EAX
  %1932 = zext i32 %1931 to i64
  %1933 = load i64, i64* %PC
  %1934 = add i64 %1933, 3
  store i64 %1934, i64* %PC
  %1935 = inttoptr i64 %1930 to i32*
  store i32 %1931, i32* %1935
  %1936 = load i64, i64* %RBP
  %1937 = sub i64 %1936, 24
  %1938 = load i64, i64* %PC
  %1939 = add i64 %1938, 4
  store i64 %1939, i64* %PC
  %1940 = inttoptr i64 %1937 to i64*
  %1941 = load i64, i64* %1940
  store i64 %1941, i64* %RCX, align 8, !tbaa !2428
  %1942 = load i64, i64* %RBP
  %1943 = sub i64 %1942, 32
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 4
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1943 to i32*
  %1947 = load i32, i32* %1946
  %1948 = sext i32 %1947 to i64
  store i64 %1948, i64* %RDX, align 8, !tbaa !2428
  %1949 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1950 = load i64, i64* %RCX
  %1951 = load i64, i64* %RDX
  %1952 = mul i64 %1951, 8
  %1953 = add i64 %1952, %1950
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 5
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to double*
  %1957 = load double, double* %1956
  %1958 = bitcast i8* %1949 to double*
  store double %1957, double* %1958, align 1, !tbaa !2452
  %1959 = getelementptr inbounds i8, i8* %1949, i64 8
  %1960 = bitcast i8* %1959 to double*
  store double 0.000000e+00, double* %1960, align 1, !tbaa !2452
  %1961 = load i64, i64* %RBP
  %1962 = sub i64 %1961, 64
  %1963 = bitcast %union.vec128_t* %XMM0 to i8*
  %1964 = load i64, i64* %PC
  %1965 = add i64 %1964, 5
  store i64 %1965, i64* %PC
  %1966 = bitcast i8* %1963 to double*
  %1967 = load double, double* %1966, align 1
  %1968 = inttoptr i64 %1962 to double*
  store double %1967, double* %1968
  %1969 = load i64, i64* %RBP
  %1970 = sub i64 %1969, 24
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 4
  store i64 %1972, i64* %PC
  %1973 = inttoptr i64 %1970 to i64*
  %1974 = load i64, i64* %1973
  store i64 %1974, i64* %RCX, align 8, !tbaa !2428
  %1975 = load i64, i64* %RBP
  %1976 = sub i64 %1975, 32
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 3
  store i64 %1978, i64* %PC
  %1979 = inttoptr i64 %1976 to i32*
  %1980 = load i32, i32* %1979
  %1981 = zext i32 %1980 to i64
  store i64 %1981, i64* %RAX, align 8, !tbaa !2428
  %1982 = load i64, i64* %RAX
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 3
  store i64 %1984, i64* %PC
  %1985 = trunc i64 %1982 to i32
  %1986 = add i32 1, %1985
  %1987 = zext i32 %1986 to i64
  store i64 %1987, i64* %RAX, align 8, !tbaa !2428
  %1988 = icmp ult i32 %1986, %1985
  %1989 = icmp ult i32 %1986, 1
  %1990 = or i1 %1988, %1989
  %1991 = zext i1 %1990 to i8
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1991, i8* %1992, align 1, !tbaa !2432
  %1993 = and i32 %1986, 255
  %1994 = call i32 @llvm.ctpop.i32(i32 %1993) #17
  %1995 = trunc i32 %1994 to i8
  %1996 = and i8 %1995, 1
  %1997 = xor i8 %1996, 1
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1997, i8* %1998, align 1, !tbaa !2446
  %1999 = xor i64 1, %1982
  %2000 = trunc i64 %1999 to i32
  %2001 = xor i32 %2000, %1986
  %2002 = lshr i32 %2001, 4
  %2003 = trunc i32 %2002 to i8
  %2004 = and i8 %2003, 1
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2004, i8* %2005, align 1, !tbaa !2447
  %2006 = icmp eq i32 %1986, 0
  %2007 = zext i1 %2006 to i8
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2007, i8* %2008, align 1, !tbaa !2448
  %2009 = lshr i32 %1986, 31
  %2010 = trunc i32 %2009 to i8
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2010, i8* %2011, align 1, !tbaa !2449
  %2012 = lshr i32 %1985, 31
  %2013 = xor i32 %2009, %2012
  %2014 = add nuw nsw i32 %2013, %2009
  %2015 = icmp eq i32 %2014, 2
  %2016 = zext i1 %2015 to i8
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2016, i8* %2017, align 1, !tbaa !2450
  %2018 = load i32, i32* %EAX
  %2019 = zext i32 %2018 to i64
  %2020 = load i64, i64* %PC
  %2021 = add i64 %2020, 3
  store i64 %2021, i64* %PC
  %2022 = shl i64 %2019, 32
  %2023 = ashr exact i64 %2022, 32
  store i64 %2023, i64* %RDX, align 8, !tbaa !2428
  %2024 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2025 = load i64, i64* %RCX
  %2026 = load i64, i64* %RDX
  %2027 = mul i64 %2026, 8
  %2028 = add i64 %2027, %2025
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 5
  store i64 %2030, i64* %PC
  %2031 = inttoptr i64 %2028 to double*
  %2032 = load double, double* %2031
  %2033 = bitcast i8* %2024 to double*
  store double %2032, double* %2033, align 1, !tbaa !2452
  %2034 = getelementptr inbounds i8, i8* %2024, i64 8
  %2035 = bitcast i8* %2034 to double*
  store double 0.000000e+00, double* %2035, align 1, !tbaa !2452
  %2036 = load i64, i64* %RBP
  %2037 = sub i64 %2036, 72
  %2038 = bitcast %union.vec128_t* %XMM0 to i8*
  %2039 = load i64, i64* %PC
  %2040 = add i64 %2039, 5
  store i64 %2040, i64* %PC
  %2041 = bitcast i8* %2038 to double*
  %2042 = load double, double* %2041, align 1
  %2043 = inttoptr i64 %2037 to double*
  store double %2042, double* %2043
  %2044 = load i64, i64* %RBP
  %2045 = sub i64 %2044, 24
  %2046 = load i64, i64* %PC
  %2047 = add i64 %2046, 4
  store i64 %2047, i64* %PC
  %2048 = inttoptr i64 %2045 to i64*
  %2049 = load i64, i64* %2048
  store i64 %2049, i64* %RCX, align 8, !tbaa !2428
  %2050 = load i64, i64* %RBP
  %2051 = sub i64 %2050, 40
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 4
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  %2055 = load i32, i32* %2054
  %2056 = sext i32 %2055 to i64
  store i64 %2056, i64* %RDX, align 8, !tbaa !2428
  %2057 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2058 = load i64, i64* %RCX
  %2059 = load i64, i64* %RDX
  %2060 = mul i64 %2059, 8
  %2061 = add i64 %2060, %2058
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 5
  store i64 %2063, i64* %PC
  %2064 = inttoptr i64 %2061 to double*
  %2065 = load double, double* %2064
  %2066 = bitcast i8* %2057 to double*
  store double %2065, double* %2066, align 1, !tbaa !2452
  %2067 = getelementptr inbounds i8, i8* %2057, i64 8
  %2068 = bitcast i8* %2067 to double*
  store double 0.000000e+00, double* %2068, align 1, !tbaa !2452
  %2069 = load i64, i64* %RBP
  %2070 = sub i64 %2069, 80
  %2071 = bitcast %union.vec128_t* %XMM0 to i8*
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 5
  store i64 %2073, i64* %PC
  %2074 = bitcast i8* %2071 to double*
  %2075 = load double, double* %2074, align 1
  %2076 = inttoptr i64 %2070 to double*
  store double %2075, double* %2076
  %2077 = load i64, i64* %RBP
  %2078 = sub i64 %2077, 24
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 4
  store i64 %2080, i64* %PC
  %2081 = inttoptr i64 %2078 to i64*
  %2082 = load i64, i64* %2081
  store i64 %2082, i64* %RCX, align 8, !tbaa !2428
  %2083 = load i64, i64* %RBP
  %2084 = sub i64 %2083, 40
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 3
  store i64 %2086, i64* %PC
  %2087 = inttoptr i64 %2084 to i32*
  %2088 = load i32, i32* %2087
  %2089 = zext i32 %2088 to i64
  store i64 %2089, i64* %RAX, align 8, !tbaa !2428
  %2090 = load i64, i64* %RAX
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 3
  store i64 %2092, i64* %PC
  %2093 = trunc i64 %2090 to i32
  %2094 = add i32 1, %2093
  %2095 = zext i32 %2094 to i64
  store i64 %2095, i64* %RAX, align 8, !tbaa !2428
  %2096 = icmp ult i32 %2094, %2093
  %2097 = icmp ult i32 %2094, 1
  %2098 = or i1 %2096, %2097
  %2099 = zext i1 %2098 to i8
  %2100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2099, i8* %2100, align 1, !tbaa !2432
  %2101 = and i32 %2094, 255
  %2102 = call i32 @llvm.ctpop.i32(i32 %2101) #17
  %2103 = trunc i32 %2102 to i8
  %2104 = and i8 %2103, 1
  %2105 = xor i8 %2104, 1
  %2106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2105, i8* %2106, align 1, !tbaa !2446
  %2107 = xor i64 1, %2090
  %2108 = trunc i64 %2107 to i32
  %2109 = xor i32 %2108, %2094
  %2110 = lshr i32 %2109, 4
  %2111 = trunc i32 %2110 to i8
  %2112 = and i8 %2111, 1
  %2113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2112, i8* %2113, align 1, !tbaa !2447
  %2114 = icmp eq i32 %2094, 0
  %2115 = zext i1 %2114 to i8
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2115, i8* %2116, align 1, !tbaa !2448
  %2117 = lshr i32 %2094, 31
  %2118 = trunc i32 %2117 to i8
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2118, i8* %2119, align 1, !tbaa !2449
  %2120 = lshr i32 %2093, 31
  %2121 = xor i32 %2117, %2120
  %2122 = add nuw nsw i32 %2121, %2117
  %2123 = icmp eq i32 %2122, 2
  %2124 = zext i1 %2123 to i8
  %2125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2124, i8* %2125, align 1, !tbaa !2450
  %2126 = load i32, i32* %EAX
  %2127 = zext i32 %2126 to i64
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 3
  store i64 %2129, i64* %PC
  %2130 = shl i64 %2127, 32
  %2131 = ashr exact i64 %2130, 32
  store i64 %2131, i64* %RDX, align 8, !tbaa !2428
  %2132 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2133 = load i64, i64* %RCX
  %2134 = load i64, i64* %RDX
  %2135 = mul i64 %2134, 8
  %2136 = add i64 %2135, %2133
  %2137 = load i64, i64* %PC
  %2138 = add i64 %2137, 5
  store i64 %2138, i64* %PC
  %2139 = inttoptr i64 %2136 to double*
  %2140 = load double, double* %2139
  %2141 = bitcast i8* %2132 to double*
  store double %2140, double* %2141, align 1, !tbaa !2452
  %2142 = getelementptr inbounds i8, i8* %2132, i64 8
  %2143 = bitcast i8* %2142 to double*
  store double 0.000000e+00, double* %2143, align 1, !tbaa !2452
  %2144 = load i64, i64* %RBP
  %2145 = sub i64 %2144, 88
  %2146 = bitcast %union.vec128_t* %XMM0 to i8*
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 5
  store i64 %2148, i64* %PC
  %2149 = bitcast i8* %2146 to double*
  %2150 = load double, double* %2149, align 1
  %2151 = inttoptr i64 %2145 to double*
  store double %2150, double* %2151
  %2152 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2153 = load i64, i64* %RBP
  %2154 = sub i64 %2153, 80
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 5
  store i64 %2156, i64* %PC
  %2157 = inttoptr i64 %2154 to double*
  %2158 = load double, double* %2157
  %2159 = bitcast i8* %2152 to double*
  store double %2158, double* %2159, align 1, !tbaa !2452
  %2160 = getelementptr inbounds i8, i8* %2152, i64 8
  %2161 = bitcast i8* %2160 to double*
  store double 0.000000e+00, double* %2161, align 1, !tbaa !2452
  %2162 = load i64, i64* %RBP
  %2163 = sub i64 %2162, 24
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 4
  store i64 %2165, i64* %PC
  %2166 = inttoptr i64 %2163 to i64*
  %2167 = load i64, i64* %2166
  store i64 %2167, i64* %RCX, align 8, !tbaa !2428
  %2168 = load i64, i64* %RBP
  %2169 = sub i64 %2168, 32
  %2170 = load i64, i64* %PC
  %2171 = add i64 %2170, 4
  store i64 %2171, i64* %PC
  %2172 = inttoptr i64 %2169 to i32*
  %2173 = load i32, i32* %2172
  %2174 = sext i32 %2173 to i64
  store i64 %2174, i64* %RDX, align 8, !tbaa !2428
  %2175 = load i64, i64* %RCX
  %2176 = load i64, i64* %RDX
  %2177 = mul i64 %2176, 8
  %2178 = add i64 %2177, %2175
  %2179 = bitcast %union.vec128_t* %XMM0 to i8*
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 5
  store i64 %2181, i64* %PC
  %2182 = bitcast i8* %2179 to double*
  %2183 = load double, double* %2182, align 1
  %2184 = inttoptr i64 %2178 to double*
  store double %2183, double* %2184
  %2185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2186 = load i64, i64* %RBP
  %2187 = sub i64 %2186, 88
  %2188 = load i64, i64* %PC
  %2189 = add i64 %2188, 5
  store i64 %2189, i64* %PC
  %2190 = inttoptr i64 %2187 to double*
  %2191 = load double, double* %2190
  %2192 = bitcast i8* %2185 to double*
  store double %2191, double* %2192, align 1, !tbaa !2452
  %2193 = getelementptr inbounds i8, i8* %2185, i64 8
  %2194 = bitcast i8* %2193 to double*
  store double 0.000000e+00, double* %2194, align 1, !tbaa !2452
  %2195 = load i64, i64* %RBP
  %2196 = sub i64 %2195, 24
  %2197 = load i64, i64* %PC
  %2198 = add i64 %2197, 4
  store i64 %2198, i64* %PC
  %2199 = inttoptr i64 %2196 to i64*
  %2200 = load i64, i64* %2199
  store i64 %2200, i64* %RCX, align 8, !tbaa !2428
  %2201 = load i64, i64* %RBP
  %2202 = sub i64 %2201, 32
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 3
  store i64 %2204, i64* %PC
  %2205 = inttoptr i64 %2202 to i32*
  %2206 = load i32, i32* %2205
  %2207 = zext i32 %2206 to i64
  store i64 %2207, i64* %RAX, align 8, !tbaa !2428
  %2208 = load i64, i64* %RAX
  %2209 = load i64, i64* %PC
  %2210 = add i64 %2209, 3
  store i64 %2210, i64* %PC
  %2211 = trunc i64 %2208 to i32
  %2212 = add i32 1, %2211
  %2213 = zext i32 %2212 to i64
  store i64 %2213, i64* %RAX, align 8, !tbaa !2428
  %2214 = icmp ult i32 %2212, %2211
  %2215 = icmp ult i32 %2212, 1
  %2216 = or i1 %2214, %2215
  %2217 = zext i1 %2216 to i8
  %2218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2217, i8* %2218, align 1, !tbaa !2432
  %2219 = and i32 %2212, 255
  %2220 = call i32 @llvm.ctpop.i32(i32 %2219) #17
  %2221 = trunc i32 %2220 to i8
  %2222 = and i8 %2221, 1
  %2223 = xor i8 %2222, 1
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2223, i8* %2224, align 1, !tbaa !2446
  %2225 = xor i64 1, %2208
  %2226 = trunc i64 %2225 to i32
  %2227 = xor i32 %2226, %2212
  %2228 = lshr i32 %2227, 4
  %2229 = trunc i32 %2228 to i8
  %2230 = and i8 %2229, 1
  %2231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2230, i8* %2231, align 1, !tbaa !2447
  %2232 = icmp eq i32 %2212, 0
  %2233 = zext i1 %2232 to i8
  %2234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2233, i8* %2234, align 1, !tbaa !2448
  %2235 = lshr i32 %2212, 31
  %2236 = trunc i32 %2235 to i8
  %2237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2236, i8* %2237, align 1, !tbaa !2449
  %2238 = lshr i32 %2211, 31
  %2239 = xor i32 %2235, %2238
  %2240 = add nuw nsw i32 %2239, %2235
  %2241 = icmp eq i32 %2240, 2
  %2242 = zext i1 %2241 to i8
  %2243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2242, i8* %2243, align 1, !tbaa !2450
  %2244 = load i32, i32* %EAX
  %2245 = zext i32 %2244 to i64
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 3
  store i64 %2247, i64* %PC
  %2248 = shl i64 %2245, 32
  %2249 = ashr exact i64 %2248, 32
  store i64 %2249, i64* %RDX, align 8, !tbaa !2428
  %2250 = load i64, i64* %RCX
  %2251 = load i64, i64* %RDX
  %2252 = mul i64 %2251, 8
  %2253 = add i64 %2252, %2250
  %2254 = bitcast %union.vec128_t* %XMM0 to i8*
  %2255 = load i64, i64* %PC
  %2256 = add i64 %2255, 5
  store i64 %2256, i64* %PC
  %2257 = bitcast i8* %2254 to double*
  %2258 = load double, double* %2257, align 1
  %2259 = inttoptr i64 %2253 to double*
  store double %2258, double* %2259
  %2260 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2261 = load i64, i64* %RBP
  %2262 = sub i64 %2261, 64
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 5
  store i64 %2264, i64* %PC
  %2265 = inttoptr i64 %2262 to double*
  %2266 = load double, double* %2265
  %2267 = bitcast i8* %2260 to double*
  store double %2266, double* %2267, align 1, !tbaa !2452
  %2268 = getelementptr inbounds i8, i8* %2260, i64 8
  %2269 = bitcast i8* %2268 to double*
  store double 0.000000e+00, double* %2269, align 1, !tbaa !2452
  %2270 = load i64, i64* %RBP
  %2271 = sub i64 %2270, 24
  %2272 = load i64, i64* %PC
  %2273 = add i64 %2272, 4
  store i64 %2273, i64* %PC
  %2274 = inttoptr i64 %2271 to i64*
  %2275 = load i64, i64* %2274
  store i64 %2275, i64* %RCX, align 8, !tbaa !2428
  %2276 = load i64, i64* %RBP
  %2277 = sub i64 %2276, 40
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 4
  store i64 %2279, i64* %PC
  %2280 = inttoptr i64 %2277 to i32*
  %2281 = load i32, i32* %2280
  %2282 = sext i32 %2281 to i64
  store i64 %2282, i64* %RDX, align 8, !tbaa !2428
  %2283 = load i64, i64* %RCX
  %2284 = load i64, i64* %RDX
  %2285 = mul i64 %2284, 8
  %2286 = add i64 %2285, %2283
  %2287 = bitcast %union.vec128_t* %XMM0 to i8*
  %2288 = load i64, i64* %PC
  %2289 = add i64 %2288, 5
  store i64 %2289, i64* %PC
  %2290 = bitcast i8* %2287 to double*
  %2291 = load double, double* %2290, align 1
  %2292 = inttoptr i64 %2286 to double*
  store double %2291, double* %2292
  %2293 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2294 = load i64, i64* %RBP
  %2295 = sub i64 %2294, 72
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 5
  store i64 %2297, i64* %PC
  %2298 = inttoptr i64 %2295 to double*
  %2299 = load double, double* %2298
  %2300 = bitcast i8* %2293 to double*
  store double %2299, double* %2300, align 1, !tbaa !2452
  %2301 = getelementptr inbounds i8, i8* %2293, i64 8
  %2302 = bitcast i8* %2301 to double*
  store double 0.000000e+00, double* %2302, align 1, !tbaa !2452
  %2303 = load i64, i64* %RBP
  %2304 = sub i64 %2303, 24
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 4
  store i64 %2306, i64* %PC
  %2307 = inttoptr i64 %2304 to i64*
  %2308 = load i64, i64* %2307
  store i64 %2308, i64* %RCX, align 8, !tbaa !2428
  %2309 = load i64, i64* %RBP
  %2310 = sub i64 %2309, 40
  %2311 = load i64, i64* %PC
  %2312 = add i64 %2311, 3
  store i64 %2312, i64* %PC
  %2313 = inttoptr i64 %2310 to i32*
  %2314 = load i32, i32* %2313
  %2315 = zext i32 %2314 to i64
  store i64 %2315, i64* %RAX, align 8, !tbaa !2428
  %2316 = load i64, i64* %RAX
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 3
  store i64 %2318, i64* %PC
  %2319 = trunc i64 %2316 to i32
  %2320 = add i32 1, %2319
  %2321 = zext i32 %2320 to i64
  store i64 %2321, i64* %RAX, align 8, !tbaa !2428
  %2322 = icmp ult i32 %2320, %2319
  %2323 = icmp ult i32 %2320, 1
  %2324 = or i1 %2322, %2323
  %2325 = zext i1 %2324 to i8
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2325, i8* %2326, align 1, !tbaa !2432
  %2327 = and i32 %2320, 255
  %2328 = call i32 @llvm.ctpop.i32(i32 %2327) #17
  %2329 = trunc i32 %2328 to i8
  %2330 = and i8 %2329, 1
  %2331 = xor i8 %2330, 1
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2331, i8* %2332, align 1, !tbaa !2446
  %2333 = xor i64 1, %2316
  %2334 = trunc i64 %2333 to i32
  %2335 = xor i32 %2334, %2320
  %2336 = lshr i32 %2335, 4
  %2337 = trunc i32 %2336 to i8
  %2338 = and i8 %2337, 1
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2338, i8* %2339, align 1, !tbaa !2447
  %2340 = icmp eq i32 %2320, 0
  %2341 = zext i1 %2340 to i8
  %2342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2341, i8* %2342, align 1, !tbaa !2448
  %2343 = lshr i32 %2320, 31
  %2344 = trunc i32 %2343 to i8
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2344, i8* %2345, align 1, !tbaa !2449
  %2346 = lshr i32 %2319, 31
  %2347 = xor i32 %2343, %2346
  %2348 = add nuw nsw i32 %2347, %2343
  %2349 = icmp eq i32 %2348, 2
  %2350 = zext i1 %2349 to i8
  %2351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2350, i8* %2351, align 1, !tbaa !2450
  %2352 = load i32, i32* %EAX
  %2353 = zext i32 %2352 to i64
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 3
  store i64 %2355, i64* %PC
  %2356 = shl i64 %2353, 32
  %2357 = ashr exact i64 %2356, 32
  store i64 %2357, i64* %RDX, align 8, !tbaa !2428
  %2358 = load i64, i64* %RCX
  %2359 = load i64, i64* %RDX
  %2360 = mul i64 %2359, 8
  %2361 = add i64 %2360, %2358
  %2362 = bitcast %union.vec128_t* %XMM0 to i8*
  %2363 = load i64, i64* %PC
  %2364 = add i64 %2363, 5
  store i64 %2364, i64* %PC
  %2365 = bitcast i8* %2362 to double*
  %2366 = load double, double* %2365, align 1
  %2367 = inttoptr i64 %2361 to double*
  store double %2366, double* %2367
  %2368 = load i64, i64* %RBP
  %2369 = sub i64 %2368, 52
  %2370 = load i64, i64* %PC
  %2371 = add i64 %2370, 3
  store i64 %2371, i64* %PC
  %2372 = inttoptr i64 %2369 to i32*
  %2373 = load i32, i32* %2372
  %2374 = zext i32 %2373 to i64
  store i64 %2374, i64* %RAX, align 8, !tbaa !2428
  %2375 = load i64, i64* %RAX
  %2376 = load i64, i64* %RBP
  %2377 = sub i64 %2376, 32
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 3
  store i64 %2379, i64* %PC
  %2380 = trunc i64 %2375 to i32
  %2381 = inttoptr i64 %2377 to i32*
  %2382 = load i32, i32* %2381
  %2383 = add i32 %2382, %2380
  %2384 = zext i32 %2383 to i64
  store i64 %2384, i64* %RAX, align 8, !tbaa !2428
  %2385 = icmp ult i32 %2383, %2380
  %2386 = icmp ult i32 %2383, %2382
  %2387 = or i1 %2385, %2386
  %2388 = zext i1 %2387 to i8
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2388, i8* %2389, align 1, !tbaa !2432
  %2390 = and i32 %2383, 255
  %2391 = call i32 @llvm.ctpop.i32(i32 %2390) #17
  %2392 = trunc i32 %2391 to i8
  %2393 = and i8 %2392, 1
  %2394 = xor i8 %2393, 1
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2394, i8* %2395, align 1, !tbaa !2446
  %2396 = xor i32 %2382, %2380
  %2397 = xor i32 %2396, %2383
  %2398 = lshr i32 %2397, 4
  %2399 = trunc i32 %2398 to i8
  %2400 = and i8 %2399, 1
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2400, i8* %2401, align 1, !tbaa !2447
  %2402 = icmp eq i32 %2383, 0
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2403, i8* %2404, align 1, !tbaa !2448
  %2405 = lshr i32 %2383, 31
  %2406 = trunc i32 %2405 to i8
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2406, i8* %2407, align 1, !tbaa !2449
  %2408 = lshr i32 %2380, 31
  %2409 = lshr i32 %2382, 31
  %2410 = xor i32 %2405, %2408
  %2411 = xor i32 %2405, %2409
  %2412 = add nuw nsw i32 %2410, %2411
  %2413 = icmp eq i32 %2412, 2
  %2414 = zext i1 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2414, i8* %2415, align 1, !tbaa !2450
  %2416 = load i64, i64* %RBP
  %2417 = sub i64 %2416, 32
  %2418 = load i32, i32* %EAX
  %2419 = zext i32 %2418 to i64
  %2420 = load i64, i64* %PC
  %2421 = add i64 %2420, 3
  store i64 %2421, i64* %PC
  %2422 = inttoptr i64 %2417 to i32*
  store i32 %2418, i32* %2422
  %2423 = load i64, i64* %RBP
  %2424 = sub i64 %2423, 52
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 3
  store i64 %2426, i64* %PC
  %2427 = inttoptr i64 %2424 to i32*
  %2428 = load i32, i32* %2427
  %2429 = zext i32 %2428 to i64
  store i64 %2429, i64* %RAX, align 8, !tbaa !2428
  %2430 = load i64, i64* %RBP
  %2431 = sub i64 %2430, 40
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 3
  store i64 %2433, i64* %PC
  %2434 = inttoptr i64 %2431 to i32*
  %2435 = load i32, i32* %2434
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RSI, align 8, !tbaa !2428
  %2437 = load i64, i64* %RSI
  %2438 = load i32, i32* %EAX
  %2439 = zext i32 %2438 to i64
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 2
  store i64 %2441, i64* %PC
  %2442 = trunc i64 %2437 to i32
  %2443 = sub i32 %2442, %2438
  %2444 = zext i32 %2443 to i64
  store i64 %2444, i64* %RSI, align 8, !tbaa !2428
  %2445 = icmp ult i32 %2442, %2438
  %2446 = zext i1 %2445 to i8
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2446, i8* %2447, align 1, !tbaa !2432
  %2448 = and i32 %2443, 255
  %2449 = call i32 @llvm.ctpop.i32(i32 %2448) #17
  %2450 = trunc i32 %2449 to i8
  %2451 = and i8 %2450, 1
  %2452 = xor i8 %2451, 1
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2452, i8* %2453, align 1, !tbaa !2446
  %2454 = xor i64 %2439, %2437
  %2455 = trunc i64 %2454 to i32
  %2456 = xor i32 %2455, %2443
  %2457 = lshr i32 %2456, 4
  %2458 = trunc i32 %2457 to i8
  %2459 = and i8 %2458, 1
  %2460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2459, i8* %2460, align 1, !tbaa !2447
  %2461 = icmp eq i32 %2443, 0
  %2462 = zext i1 %2461 to i8
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2462, i8* %2463, align 1, !tbaa !2448
  %2464 = lshr i32 %2443, 31
  %2465 = trunc i32 %2464 to i8
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2465, i8* %2466, align 1, !tbaa !2449
  %2467 = lshr i32 %2442, 31
  %2468 = lshr i32 %2438, 31
  %2469 = xor i32 %2468, %2467
  %2470 = xor i32 %2464, %2467
  %2471 = add nuw nsw i32 %2470, %2469
  %2472 = icmp eq i32 %2471, 2
  %2473 = zext i1 %2472 to i8
  %2474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2473, i8* %2474, align 1, !tbaa !2450
  %2475 = load i64, i64* %RBP
  %2476 = sub i64 %2475, 40
  %2477 = load i32, i32* %ESI
  %2478 = zext i32 %2477 to i64
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 3
  store i64 %2480, i64* %PC
  %2481 = inttoptr i64 %2476 to i32*
  store i32 %2477, i32* %2481
  %2482 = load i64, i64* %RBP
  %2483 = sub i64 %2482, 24
  %2484 = load i64, i64* %PC
  %2485 = add i64 %2484, 4
  store i64 %2485, i64* %PC
  %2486 = inttoptr i64 %2483 to i64*
  %2487 = load i64, i64* %2486
  store i64 %2487, i64* %RCX, align 8, !tbaa !2428
  %2488 = load i64, i64* %RBP
  %2489 = sub i64 %2488, 32
  %2490 = load i64, i64* %PC
  %2491 = add i64 %2490, 4
  store i64 %2491, i64* %PC
  %2492 = inttoptr i64 %2489 to i32*
  %2493 = load i32, i32* %2492
  %2494 = sext i32 %2493 to i64
  store i64 %2494, i64* %RDX, align 8, !tbaa !2428
  %2495 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2496 = load i64, i64* %RCX
  %2497 = load i64, i64* %RDX
  %2498 = mul i64 %2497, 8
  %2499 = add i64 %2498, %2496
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 5
  store i64 %2501, i64* %PC
  %2502 = inttoptr i64 %2499 to double*
  %2503 = load double, double* %2502
  %2504 = bitcast i8* %2495 to double*
  store double %2503, double* %2504, align 1, !tbaa !2452
  %2505 = getelementptr inbounds i8, i8* %2495, i64 8
  %2506 = bitcast i8* %2505 to double*
  store double 0.000000e+00, double* %2506, align 1, !tbaa !2452
  %2507 = load i64, i64* %RBP
  %2508 = sub i64 %2507, 64
  %2509 = bitcast %union.vec128_t* %XMM0 to i8*
  %2510 = load i64, i64* %PC
  %2511 = add i64 %2510, 5
  store i64 %2511, i64* %PC
  %2512 = bitcast i8* %2509 to double*
  %2513 = load double, double* %2512, align 1
  %2514 = inttoptr i64 %2508 to double*
  store double %2513, double* %2514
  %2515 = load i64, i64* %RBP
  %2516 = sub i64 %2515, 24
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 4
  store i64 %2518, i64* %PC
  %2519 = inttoptr i64 %2516 to i64*
  %2520 = load i64, i64* %2519
  store i64 %2520, i64* %RCX, align 8, !tbaa !2428
  %2521 = load i64, i64* %RBP
  %2522 = sub i64 %2521, 32
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 3
  store i64 %2524, i64* %PC
  %2525 = inttoptr i64 %2522 to i32*
  %2526 = load i32, i32* %2525
  %2527 = zext i32 %2526 to i64
  store i64 %2527, i64* %RAX, align 8, !tbaa !2428
  %2528 = load i64, i64* %RAX
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 3
  store i64 %2530, i64* %PC
  %2531 = trunc i64 %2528 to i32
  %2532 = add i32 1, %2531
  %2533 = zext i32 %2532 to i64
  store i64 %2533, i64* %RAX, align 8, !tbaa !2428
  %2534 = icmp ult i32 %2532, %2531
  %2535 = icmp ult i32 %2532, 1
  %2536 = or i1 %2534, %2535
  %2537 = zext i1 %2536 to i8
  %2538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2537, i8* %2538, align 1, !tbaa !2432
  %2539 = and i32 %2532, 255
  %2540 = call i32 @llvm.ctpop.i32(i32 %2539) #17
  %2541 = trunc i32 %2540 to i8
  %2542 = and i8 %2541, 1
  %2543 = xor i8 %2542, 1
  %2544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2543, i8* %2544, align 1, !tbaa !2446
  %2545 = xor i64 1, %2528
  %2546 = trunc i64 %2545 to i32
  %2547 = xor i32 %2546, %2532
  %2548 = lshr i32 %2547, 4
  %2549 = trunc i32 %2548 to i8
  %2550 = and i8 %2549, 1
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2550, i8* %2551, align 1, !tbaa !2447
  %2552 = icmp eq i32 %2532, 0
  %2553 = zext i1 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2553, i8* %2554, align 1, !tbaa !2448
  %2555 = lshr i32 %2532, 31
  %2556 = trunc i32 %2555 to i8
  %2557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2556, i8* %2557, align 1, !tbaa !2449
  %2558 = lshr i32 %2531, 31
  %2559 = xor i32 %2555, %2558
  %2560 = add nuw nsw i32 %2559, %2555
  %2561 = icmp eq i32 %2560, 2
  %2562 = zext i1 %2561 to i8
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2562, i8* %2563, align 1, !tbaa !2450
  %2564 = load i32, i32* %EAX
  %2565 = zext i32 %2564 to i64
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 3
  store i64 %2567, i64* %PC
  %2568 = shl i64 %2565, 32
  %2569 = ashr exact i64 %2568, 32
  store i64 %2569, i64* %RDX, align 8, !tbaa !2428
  %2570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2571 = load i64, i64* %RCX
  %2572 = load i64, i64* %RDX
  %2573 = mul i64 %2572, 8
  %2574 = add i64 %2573, %2571
  %2575 = load i64, i64* %PC
  %2576 = add i64 %2575, 5
  store i64 %2576, i64* %PC
  %2577 = inttoptr i64 %2574 to double*
  %2578 = load double, double* %2577
  %2579 = bitcast i8* %2570 to double*
  store double %2578, double* %2579, align 1, !tbaa !2452
  %2580 = getelementptr inbounds i8, i8* %2570, i64 8
  %2581 = bitcast i8* %2580 to double*
  store double 0.000000e+00, double* %2581, align 1, !tbaa !2452
  %2582 = load i64, i64* %RBP
  %2583 = sub i64 %2582, 72
  %2584 = bitcast %union.vec128_t* %XMM0 to i8*
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 5
  store i64 %2586, i64* %PC
  %2587 = bitcast i8* %2584 to double*
  %2588 = load double, double* %2587, align 1
  %2589 = inttoptr i64 %2583 to double*
  store double %2588, double* %2589
  %2590 = load i64, i64* %RBP
  %2591 = sub i64 %2590, 24
  %2592 = load i64, i64* %PC
  %2593 = add i64 %2592, 4
  store i64 %2593, i64* %PC
  %2594 = inttoptr i64 %2591 to i64*
  %2595 = load i64, i64* %2594
  store i64 %2595, i64* %RCX, align 8, !tbaa !2428
  %2596 = load i64, i64* %RBP
  %2597 = sub i64 %2596, 40
  %2598 = load i64, i64* %PC
  %2599 = add i64 %2598, 4
  store i64 %2599, i64* %PC
  %2600 = inttoptr i64 %2597 to i32*
  %2601 = load i32, i32* %2600
  %2602 = sext i32 %2601 to i64
  store i64 %2602, i64* %RDX, align 8, !tbaa !2428
  %2603 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2604 = load i64, i64* %RCX
  %2605 = load i64, i64* %RDX
  %2606 = mul i64 %2605, 8
  %2607 = add i64 %2606, %2604
  %2608 = load i64, i64* %PC
  %2609 = add i64 %2608, 5
  store i64 %2609, i64* %PC
  %2610 = inttoptr i64 %2607 to double*
  %2611 = load double, double* %2610
  %2612 = bitcast i8* %2603 to double*
  store double %2611, double* %2612, align 1, !tbaa !2452
  %2613 = getelementptr inbounds i8, i8* %2603, i64 8
  %2614 = bitcast i8* %2613 to double*
  store double 0.000000e+00, double* %2614, align 1, !tbaa !2452
  %2615 = load i64, i64* %RBP
  %2616 = sub i64 %2615, 80
  %2617 = bitcast %union.vec128_t* %XMM0 to i8*
  %2618 = load i64, i64* %PC
  %2619 = add i64 %2618, 5
  store i64 %2619, i64* %PC
  %2620 = bitcast i8* %2617 to double*
  %2621 = load double, double* %2620, align 1
  %2622 = inttoptr i64 %2616 to double*
  store double %2621, double* %2622
  %2623 = load i64, i64* %RBP
  %2624 = sub i64 %2623, 24
  %2625 = load i64, i64* %PC
  %2626 = add i64 %2625, 4
  store i64 %2626, i64* %PC
  %2627 = inttoptr i64 %2624 to i64*
  %2628 = load i64, i64* %2627
  store i64 %2628, i64* %RCX, align 8, !tbaa !2428
  %2629 = load i64, i64* %RBP
  %2630 = sub i64 %2629, 40
  %2631 = load i64, i64* %PC
  %2632 = add i64 %2631, 3
  store i64 %2632, i64* %PC
  %2633 = inttoptr i64 %2630 to i32*
  %2634 = load i32, i32* %2633
  %2635 = zext i32 %2634 to i64
  store i64 %2635, i64* %RAX, align 8, !tbaa !2428
  %2636 = load i64, i64* %RAX
  %2637 = load i64, i64* %PC
  %2638 = add i64 %2637, 3
  store i64 %2638, i64* %PC
  %2639 = trunc i64 %2636 to i32
  %2640 = add i32 1, %2639
  %2641 = zext i32 %2640 to i64
  store i64 %2641, i64* %RAX, align 8, !tbaa !2428
  %2642 = icmp ult i32 %2640, %2639
  %2643 = icmp ult i32 %2640, 1
  %2644 = or i1 %2642, %2643
  %2645 = zext i1 %2644 to i8
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2645, i8* %2646, align 1, !tbaa !2432
  %2647 = and i32 %2640, 255
  %2648 = call i32 @llvm.ctpop.i32(i32 %2647) #17
  %2649 = trunc i32 %2648 to i8
  %2650 = and i8 %2649, 1
  %2651 = xor i8 %2650, 1
  %2652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2651, i8* %2652, align 1, !tbaa !2446
  %2653 = xor i64 1, %2636
  %2654 = trunc i64 %2653 to i32
  %2655 = xor i32 %2654, %2640
  %2656 = lshr i32 %2655, 4
  %2657 = trunc i32 %2656 to i8
  %2658 = and i8 %2657, 1
  %2659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2658, i8* %2659, align 1, !tbaa !2447
  %2660 = icmp eq i32 %2640, 0
  %2661 = zext i1 %2660 to i8
  %2662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2661, i8* %2662, align 1, !tbaa !2448
  %2663 = lshr i32 %2640, 31
  %2664 = trunc i32 %2663 to i8
  %2665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2664, i8* %2665, align 1, !tbaa !2449
  %2666 = lshr i32 %2639, 31
  %2667 = xor i32 %2663, %2666
  %2668 = add nuw nsw i32 %2667, %2663
  %2669 = icmp eq i32 %2668, 2
  %2670 = zext i1 %2669 to i8
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2670, i8* %2671, align 1, !tbaa !2450
  %2672 = load i32, i32* %EAX
  %2673 = zext i32 %2672 to i64
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 3
  store i64 %2675, i64* %PC
  %2676 = shl i64 %2673, 32
  %2677 = ashr exact i64 %2676, 32
  store i64 %2677, i64* %RDX, align 8, !tbaa !2428
  %2678 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2679 = load i64, i64* %RCX
  %2680 = load i64, i64* %RDX
  %2681 = mul i64 %2680, 8
  %2682 = add i64 %2681, %2679
  %2683 = load i64, i64* %PC
  %2684 = add i64 %2683, 5
  store i64 %2684, i64* %PC
  %2685 = inttoptr i64 %2682 to double*
  %2686 = load double, double* %2685
  %2687 = bitcast i8* %2678 to double*
  store double %2686, double* %2687, align 1, !tbaa !2452
  %2688 = getelementptr inbounds i8, i8* %2678, i64 8
  %2689 = bitcast i8* %2688 to double*
  store double 0.000000e+00, double* %2689, align 1, !tbaa !2452
  %2690 = load i64, i64* %RBP
  %2691 = sub i64 %2690, 88
  %2692 = bitcast %union.vec128_t* %XMM0 to i8*
  %2693 = load i64, i64* %PC
  %2694 = add i64 %2693, 5
  store i64 %2694, i64* %PC
  %2695 = bitcast i8* %2692 to double*
  %2696 = load double, double* %2695, align 1
  %2697 = inttoptr i64 %2691 to double*
  store double %2696, double* %2697
  %2698 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2699 = load i64, i64* %RBP
  %2700 = sub i64 %2699, 80
  %2701 = load i64, i64* %PC
  %2702 = add i64 %2701, 5
  store i64 %2702, i64* %PC
  %2703 = inttoptr i64 %2700 to double*
  %2704 = load double, double* %2703
  %2705 = bitcast i8* %2698 to double*
  store double %2704, double* %2705, align 1, !tbaa !2452
  %2706 = getelementptr inbounds i8, i8* %2698, i64 8
  %2707 = bitcast i8* %2706 to double*
  store double 0.000000e+00, double* %2707, align 1, !tbaa !2452
  %2708 = load i64, i64* %RBP
  %2709 = sub i64 %2708, 24
  %2710 = load i64, i64* %PC
  %2711 = add i64 %2710, 4
  store i64 %2711, i64* %PC
  %2712 = inttoptr i64 %2709 to i64*
  %2713 = load i64, i64* %2712
  store i64 %2713, i64* %RCX, align 8, !tbaa !2428
  %2714 = load i64, i64* %RBP
  %2715 = sub i64 %2714, 32
  %2716 = load i64, i64* %PC
  %2717 = add i64 %2716, 4
  store i64 %2717, i64* %PC
  %2718 = inttoptr i64 %2715 to i32*
  %2719 = load i32, i32* %2718
  %2720 = sext i32 %2719 to i64
  store i64 %2720, i64* %RDX, align 8, !tbaa !2428
  %2721 = load i64, i64* %RCX
  %2722 = load i64, i64* %RDX
  %2723 = mul i64 %2722, 8
  %2724 = add i64 %2723, %2721
  %2725 = bitcast %union.vec128_t* %XMM0 to i8*
  %2726 = load i64, i64* %PC
  %2727 = add i64 %2726, 5
  store i64 %2727, i64* %PC
  %2728 = bitcast i8* %2725 to double*
  %2729 = load double, double* %2728, align 1
  %2730 = inttoptr i64 %2724 to double*
  store double %2729, double* %2730
  %2731 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2732 = load i64, i64* %RBP
  %2733 = sub i64 %2732, 88
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 5
  store i64 %2735, i64* %PC
  %2736 = inttoptr i64 %2733 to double*
  %2737 = load double, double* %2736
  %2738 = bitcast i8* %2731 to double*
  store double %2737, double* %2738, align 1, !tbaa !2452
  %2739 = getelementptr inbounds i8, i8* %2731, i64 8
  %2740 = bitcast i8* %2739 to double*
  store double 0.000000e+00, double* %2740, align 1, !tbaa !2452
  %2741 = load i64, i64* %RBP
  %2742 = sub i64 %2741, 24
  %2743 = load i64, i64* %PC
  %2744 = add i64 %2743, 4
  store i64 %2744, i64* %PC
  %2745 = inttoptr i64 %2742 to i64*
  %2746 = load i64, i64* %2745
  store i64 %2746, i64* %RCX, align 8, !tbaa !2428
  %2747 = load i64, i64* %RBP
  %2748 = sub i64 %2747, 32
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 3
  store i64 %2750, i64* %PC
  %2751 = inttoptr i64 %2748 to i32*
  %2752 = load i32, i32* %2751
  %2753 = zext i32 %2752 to i64
  store i64 %2753, i64* %RAX, align 8, !tbaa !2428
  %2754 = load i64, i64* %RAX
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 3
  store i64 %2756, i64* %PC
  %2757 = trunc i64 %2754 to i32
  %2758 = add i32 1, %2757
  %2759 = zext i32 %2758 to i64
  store i64 %2759, i64* %RAX, align 8, !tbaa !2428
  %2760 = icmp ult i32 %2758, %2757
  %2761 = icmp ult i32 %2758, 1
  %2762 = or i1 %2760, %2761
  %2763 = zext i1 %2762 to i8
  %2764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2763, i8* %2764, align 1, !tbaa !2432
  %2765 = and i32 %2758, 255
  %2766 = call i32 @llvm.ctpop.i32(i32 %2765) #17
  %2767 = trunc i32 %2766 to i8
  %2768 = and i8 %2767, 1
  %2769 = xor i8 %2768, 1
  %2770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2769, i8* %2770, align 1, !tbaa !2446
  %2771 = xor i64 1, %2754
  %2772 = trunc i64 %2771 to i32
  %2773 = xor i32 %2772, %2758
  %2774 = lshr i32 %2773, 4
  %2775 = trunc i32 %2774 to i8
  %2776 = and i8 %2775, 1
  %2777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2776, i8* %2777, align 1, !tbaa !2447
  %2778 = icmp eq i32 %2758, 0
  %2779 = zext i1 %2778 to i8
  %2780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2779, i8* %2780, align 1, !tbaa !2448
  %2781 = lshr i32 %2758, 31
  %2782 = trunc i32 %2781 to i8
  %2783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2782, i8* %2783, align 1, !tbaa !2449
  %2784 = lshr i32 %2757, 31
  %2785 = xor i32 %2781, %2784
  %2786 = add nuw nsw i32 %2785, %2781
  %2787 = icmp eq i32 %2786, 2
  %2788 = zext i1 %2787 to i8
  %2789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2788, i8* %2789, align 1, !tbaa !2450
  %2790 = load i32, i32* %EAX
  %2791 = zext i32 %2790 to i64
  %2792 = load i64, i64* %PC
  %2793 = add i64 %2792, 3
  store i64 %2793, i64* %PC
  %2794 = shl i64 %2791, 32
  %2795 = ashr exact i64 %2794, 32
  store i64 %2795, i64* %RDX, align 8, !tbaa !2428
  %2796 = load i64, i64* %RCX
  %2797 = load i64, i64* %RDX
  %2798 = mul i64 %2797, 8
  %2799 = add i64 %2798, %2796
  %2800 = bitcast %union.vec128_t* %XMM0 to i8*
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 5
  store i64 %2802, i64* %PC
  %2803 = bitcast i8* %2800 to double*
  %2804 = load double, double* %2803, align 1
  %2805 = inttoptr i64 %2799 to double*
  store double %2804, double* %2805
  %2806 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2807 = load i64, i64* %RBP
  %2808 = sub i64 %2807, 64
  %2809 = load i64, i64* %PC
  %2810 = add i64 %2809, 5
  store i64 %2810, i64* %PC
  %2811 = inttoptr i64 %2808 to double*
  %2812 = load double, double* %2811
  %2813 = bitcast i8* %2806 to double*
  store double %2812, double* %2813, align 1, !tbaa !2452
  %2814 = getelementptr inbounds i8, i8* %2806, i64 8
  %2815 = bitcast i8* %2814 to double*
  store double 0.000000e+00, double* %2815, align 1, !tbaa !2452
  %2816 = load i64, i64* %RBP
  %2817 = sub i64 %2816, 24
  %2818 = load i64, i64* %PC
  %2819 = add i64 %2818, 4
  store i64 %2819, i64* %PC
  %2820 = inttoptr i64 %2817 to i64*
  %2821 = load i64, i64* %2820
  store i64 %2821, i64* %RCX, align 8, !tbaa !2428
  %2822 = load i64, i64* %RBP
  %2823 = sub i64 %2822, 40
  %2824 = load i64, i64* %PC
  %2825 = add i64 %2824, 4
  store i64 %2825, i64* %PC
  %2826 = inttoptr i64 %2823 to i32*
  %2827 = load i32, i32* %2826
  %2828 = sext i32 %2827 to i64
  store i64 %2828, i64* %RDX, align 8, !tbaa !2428
  %2829 = load i64, i64* %RCX
  %2830 = load i64, i64* %RDX
  %2831 = mul i64 %2830, 8
  %2832 = add i64 %2831, %2829
  %2833 = bitcast %union.vec128_t* %XMM0 to i8*
  %2834 = load i64, i64* %PC
  %2835 = add i64 %2834, 5
  store i64 %2835, i64* %PC
  %2836 = bitcast i8* %2833 to double*
  %2837 = load double, double* %2836, align 1
  %2838 = inttoptr i64 %2832 to double*
  store double %2837, double* %2838
  %2839 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2840 = load i64, i64* %RBP
  %2841 = sub i64 %2840, 72
  %2842 = load i64, i64* %PC
  %2843 = add i64 %2842, 5
  store i64 %2843, i64* %PC
  %2844 = inttoptr i64 %2841 to double*
  %2845 = load double, double* %2844
  %2846 = bitcast i8* %2839 to double*
  store double %2845, double* %2846, align 1, !tbaa !2452
  %2847 = getelementptr inbounds i8, i8* %2839, i64 8
  %2848 = bitcast i8* %2847 to double*
  store double 0.000000e+00, double* %2848, align 1, !tbaa !2452
  %2849 = load i64, i64* %RBP
  %2850 = sub i64 %2849, 24
  %2851 = load i64, i64* %PC
  %2852 = add i64 %2851, 4
  store i64 %2852, i64* %PC
  %2853 = inttoptr i64 %2850 to i64*
  %2854 = load i64, i64* %2853
  store i64 %2854, i64* %RCX, align 8, !tbaa !2428
  %2855 = load i64, i64* %RBP
  %2856 = sub i64 %2855, 40
  %2857 = load i64, i64* %PC
  %2858 = add i64 %2857, 3
  store i64 %2858, i64* %PC
  %2859 = inttoptr i64 %2856 to i32*
  %2860 = load i32, i32* %2859
  %2861 = zext i32 %2860 to i64
  store i64 %2861, i64* %RAX, align 8, !tbaa !2428
  %2862 = load i64, i64* %RAX
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 3
  store i64 %2864, i64* %PC
  %2865 = trunc i64 %2862 to i32
  %2866 = add i32 1, %2865
  %2867 = zext i32 %2866 to i64
  store i64 %2867, i64* %RAX, align 8, !tbaa !2428
  %2868 = icmp ult i32 %2866, %2865
  %2869 = icmp ult i32 %2866, 1
  %2870 = or i1 %2868, %2869
  %2871 = zext i1 %2870 to i8
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2871, i8* %2872, align 1, !tbaa !2432
  %2873 = and i32 %2866, 255
  %2874 = call i32 @llvm.ctpop.i32(i32 %2873) #17
  %2875 = trunc i32 %2874 to i8
  %2876 = and i8 %2875, 1
  %2877 = xor i8 %2876, 1
  %2878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2877, i8* %2878, align 1, !tbaa !2446
  %2879 = xor i64 1, %2862
  %2880 = trunc i64 %2879 to i32
  %2881 = xor i32 %2880, %2866
  %2882 = lshr i32 %2881, 4
  %2883 = trunc i32 %2882 to i8
  %2884 = and i8 %2883, 1
  %2885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2884, i8* %2885, align 1, !tbaa !2447
  %2886 = icmp eq i32 %2866, 0
  %2887 = zext i1 %2886 to i8
  %2888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2887, i8* %2888, align 1, !tbaa !2448
  %2889 = lshr i32 %2866, 31
  %2890 = trunc i32 %2889 to i8
  %2891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2890, i8* %2891, align 1, !tbaa !2449
  %2892 = lshr i32 %2865, 31
  %2893 = xor i32 %2889, %2892
  %2894 = add nuw nsw i32 %2893, %2889
  %2895 = icmp eq i32 %2894, 2
  %2896 = zext i1 %2895 to i8
  %2897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2896, i8* %2897, align 1, !tbaa !2450
  %2898 = load i32, i32* %EAX
  %2899 = zext i32 %2898 to i64
  %2900 = load i64, i64* %PC
  %2901 = add i64 %2900, 3
  store i64 %2901, i64* %PC
  %2902 = shl i64 %2899, 32
  %2903 = ashr exact i64 %2902, 32
  store i64 %2903, i64* %RDX, align 8, !tbaa !2428
  %2904 = load i64, i64* %RCX
  %2905 = load i64, i64* %RDX
  %2906 = mul i64 %2905, 8
  %2907 = add i64 %2906, %2904
  %2908 = bitcast %union.vec128_t* %XMM0 to i8*
  %2909 = load i64, i64* %PC
  %2910 = add i64 %2909, 5
  store i64 %2910, i64* %PC
  %2911 = bitcast i8* %2908 to double*
  %2912 = load double, double* %2911, align 1
  %2913 = inttoptr i64 %2907 to double*
  store double %2912, double* %2913
  %2914 = load i64, i64* %RBP
  %2915 = sub i64 %2914, 52
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 3
  store i64 %2917, i64* %PC
  %2918 = inttoptr i64 %2915 to i32*
  %2919 = load i32, i32* %2918
  %2920 = zext i32 %2919 to i64
  store i64 %2920, i64* %RAX, align 8, !tbaa !2428
  %2921 = load i64, i64* %RAX
  %2922 = load i64, i64* %RBP
  %2923 = sub i64 %2922, 32
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 3
  store i64 %2925, i64* %PC
  %2926 = trunc i64 %2921 to i32
  %2927 = inttoptr i64 %2923 to i32*
  %2928 = load i32, i32* %2927
  %2929 = add i32 %2928, %2926
  %2930 = zext i32 %2929 to i64
  store i64 %2930, i64* %RAX, align 8, !tbaa !2428
  %2931 = icmp ult i32 %2929, %2926
  %2932 = icmp ult i32 %2929, %2928
  %2933 = or i1 %2931, %2932
  %2934 = zext i1 %2933 to i8
  %2935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2934, i8* %2935, align 1, !tbaa !2432
  %2936 = and i32 %2929, 255
  %2937 = call i32 @llvm.ctpop.i32(i32 %2936) #17
  %2938 = trunc i32 %2937 to i8
  %2939 = and i8 %2938, 1
  %2940 = xor i8 %2939, 1
  %2941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2940, i8* %2941, align 1, !tbaa !2446
  %2942 = xor i32 %2928, %2926
  %2943 = xor i32 %2942, %2929
  %2944 = lshr i32 %2943, 4
  %2945 = trunc i32 %2944 to i8
  %2946 = and i8 %2945, 1
  %2947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2946, i8* %2947, align 1, !tbaa !2447
  %2948 = icmp eq i32 %2929, 0
  %2949 = zext i1 %2948 to i8
  %2950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2949, i8* %2950, align 1, !tbaa !2448
  %2951 = lshr i32 %2929, 31
  %2952 = trunc i32 %2951 to i8
  %2953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2952, i8* %2953, align 1, !tbaa !2449
  %2954 = lshr i32 %2926, 31
  %2955 = lshr i32 %2928, 31
  %2956 = xor i32 %2951, %2954
  %2957 = xor i32 %2951, %2955
  %2958 = add nuw nsw i32 %2956, %2957
  %2959 = icmp eq i32 %2958, 2
  %2960 = zext i1 %2959 to i8
  %2961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2960, i8* %2961, align 1, !tbaa !2450
  %2962 = load i64, i64* %RBP
  %2963 = sub i64 %2962, 32
  %2964 = load i32, i32* %EAX
  %2965 = zext i32 %2964 to i64
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 3
  store i64 %2967, i64* %PC
  %2968 = inttoptr i64 %2963 to i32*
  store i32 %2964, i32* %2968
  %2969 = load i64, i64* %RBP
  %2970 = sub i64 %2969, 52
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 3
  store i64 %2972, i64* %PC
  %2973 = inttoptr i64 %2970 to i32*
  %2974 = load i32, i32* %2973
  %2975 = zext i32 %2974 to i64
  store i64 %2975, i64* %RAX, align 8, !tbaa !2428
  %2976 = load i64, i64* %RAX
  %2977 = load i64, i64* %PC
  %2978 = add i64 %2977, 3
  store i64 %2978, i64* %PC
  %2979 = trunc i64 %2976 to i32
  %2980 = shl i32 %2979, 1
  %2981 = icmp slt i32 %2979, 0
  %2982 = icmp slt i32 %2980, 0
  %2983 = xor i1 %2981, %2982
  %2984 = zext i32 %2980 to i64
  store i64 %2984, i64* %RAX, align 8, !tbaa !2428
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2986 = zext i1 %2981 to i8
  store i8 %2986, i8* %2985, align 1, !tbaa !2451
  %2987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2988 = and i32 %2980, 254
  %2989 = call i32 @llvm.ctpop.i32(i32 %2988) #17
  %2990 = trunc i32 %2989 to i8
  %2991 = and i8 %2990, 1
  %2992 = xor i8 %2991, 1
  store i8 %2992, i8* %2987, align 1, !tbaa !2451
  %2993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2993, align 1, !tbaa !2451
  %2994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2995 = icmp eq i32 %2980, 0
  %2996 = zext i1 %2995 to i8
  store i8 %2996, i8* %2994, align 1, !tbaa !2451
  %2997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2998 = lshr i32 %2980, 31
  %2999 = trunc i32 %2998 to i8
  store i8 %2999, i8* %2997, align 1, !tbaa !2451
  %3000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3001 = zext i1 %2983 to i8
  store i8 %3001, i8* %3000, align 1, !tbaa !2451
  %3002 = load i64, i64* %RAX
  %3003 = load i64, i64* %RBP
  %3004 = sub i64 %3003, 40
  %3005 = load i64, i64* %PC
  %3006 = add i64 %3005, 3
  store i64 %3006, i64* %PC
  %3007 = trunc i64 %3002 to i32
  %3008 = inttoptr i64 %3004 to i32*
  %3009 = load i32, i32* %3008
  %3010 = add i32 %3009, %3007
  %3011 = zext i32 %3010 to i64
  store i64 %3011, i64* %RAX, align 8, !tbaa !2428
  %3012 = icmp ult i32 %3010, %3007
  %3013 = icmp ult i32 %3010, %3009
  %3014 = or i1 %3012, %3013
  %3015 = zext i1 %3014 to i8
  %3016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3015, i8* %3016, align 1, !tbaa !2432
  %3017 = and i32 %3010, 255
  %3018 = call i32 @llvm.ctpop.i32(i32 %3017) #17
  %3019 = trunc i32 %3018 to i8
  %3020 = and i8 %3019, 1
  %3021 = xor i8 %3020, 1
  %3022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3021, i8* %3022, align 1, !tbaa !2446
  %3023 = xor i32 %3009, %3007
  %3024 = xor i32 %3023, %3010
  %3025 = lshr i32 %3024, 4
  %3026 = trunc i32 %3025 to i8
  %3027 = and i8 %3026, 1
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3027, i8* %3028, align 1, !tbaa !2447
  %3029 = icmp eq i32 %3010, 0
  %3030 = zext i1 %3029 to i8
  %3031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3030, i8* %3031, align 1, !tbaa !2448
  %3032 = lshr i32 %3010, 31
  %3033 = trunc i32 %3032 to i8
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3033, i8* %3034, align 1, !tbaa !2449
  %3035 = lshr i32 %3007, 31
  %3036 = lshr i32 %3009, 31
  %3037 = xor i32 %3032, %3035
  %3038 = xor i32 %3032, %3036
  %3039 = add nuw nsw i32 %3037, %3038
  %3040 = icmp eq i32 %3039, 2
  %3041 = zext i1 %3040 to i8
  %3042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3041, i8* %3042, align 1, !tbaa !2450
  %3043 = load i64, i64* %RBP
  %3044 = sub i64 %3043, 40
  %3045 = load i32, i32* %EAX
  %3046 = zext i32 %3045 to i64
  %3047 = load i64, i64* %PC
  %3048 = add i64 %3047, 3
  store i64 %3048, i64* %PC
  %3049 = inttoptr i64 %3044 to i32*
  store i32 %3045, i32* %3049
  %3050 = load i64, i64* %RBP
  %3051 = sub i64 %3050, 24
  %3052 = load i64, i64* %PC
  %3053 = add i64 %3052, 4
  store i64 %3053, i64* %PC
  %3054 = inttoptr i64 %3051 to i64*
  %3055 = load i64, i64* %3054
  store i64 %3055, i64* %RCX, align 8, !tbaa !2428
  %3056 = load i64, i64* %RBP
  %3057 = sub i64 %3056, 32
  %3058 = load i64, i64* %PC
  %3059 = add i64 %3058, 4
  store i64 %3059, i64* %PC
  %3060 = inttoptr i64 %3057 to i32*
  %3061 = load i32, i32* %3060
  %3062 = sext i32 %3061 to i64
  store i64 %3062, i64* %RDX, align 8, !tbaa !2428
  %3063 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3064 = load i64, i64* %RCX
  %3065 = load i64, i64* %RDX
  %3066 = mul i64 %3065, 8
  %3067 = add i64 %3066, %3064
  %3068 = load i64, i64* %PC
  %3069 = add i64 %3068, 5
  store i64 %3069, i64* %PC
  %3070 = inttoptr i64 %3067 to double*
  %3071 = load double, double* %3070
  %3072 = bitcast i8* %3063 to double*
  store double %3071, double* %3072, align 1, !tbaa !2452
  %3073 = getelementptr inbounds i8, i8* %3063, i64 8
  %3074 = bitcast i8* %3073 to double*
  store double 0.000000e+00, double* %3074, align 1, !tbaa !2452
  %3075 = load i64, i64* %RBP
  %3076 = sub i64 %3075, 64
  %3077 = bitcast %union.vec128_t* %XMM0 to i8*
  %3078 = load i64, i64* %PC
  %3079 = add i64 %3078, 5
  store i64 %3079, i64* %PC
  %3080 = bitcast i8* %3077 to double*
  %3081 = load double, double* %3080, align 1
  %3082 = inttoptr i64 %3076 to double*
  store double %3081, double* %3082
  %3083 = load i64, i64* %RBP
  %3084 = sub i64 %3083, 24
  %3085 = load i64, i64* %PC
  %3086 = add i64 %3085, 4
  store i64 %3086, i64* %PC
  %3087 = inttoptr i64 %3084 to i64*
  %3088 = load i64, i64* %3087
  store i64 %3088, i64* %RCX, align 8, !tbaa !2428
  %3089 = load i64, i64* %RBP
  %3090 = sub i64 %3089, 32
  %3091 = load i64, i64* %PC
  %3092 = add i64 %3091, 3
  store i64 %3092, i64* %PC
  %3093 = inttoptr i64 %3090 to i32*
  %3094 = load i32, i32* %3093
  %3095 = zext i32 %3094 to i64
  store i64 %3095, i64* %RAX, align 8, !tbaa !2428
  %3096 = load i64, i64* %RAX
  %3097 = load i64, i64* %PC
  %3098 = add i64 %3097, 3
  store i64 %3098, i64* %PC
  %3099 = trunc i64 %3096 to i32
  %3100 = add i32 1, %3099
  %3101 = zext i32 %3100 to i64
  store i64 %3101, i64* %RAX, align 8, !tbaa !2428
  %3102 = icmp ult i32 %3100, %3099
  %3103 = icmp ult i32 %3100, 1
  %3104 = or i1 %3102, %3103
  %3105 = zext i1 %3104 to i8
  %3106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3105, i8* %3106, align 1, !tbaa !2432
  %3107 = and i32 %3100, 255
  %3108 = call i32 @llvm.ctpop.i32(i32 %3107) #17
  %3109 = trunc i32 %3108 to i8
  %3110 = and i8 %3109, 1
  %3111 = xor i8 %3110, 1
  %3112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3111, i8* %3112, align 1, !tbaa !2446
  %3113 = xor i64 1, %3096
  %3114 = trunc i64 %3113 to i32
  %3115 = xor i32 %3114, %3100
  %3116 = lshr i32 %3115, 4
  %3117 = trunc i32 %3116 to i8
  %3118 = and i8 %3117, 1
  %3119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3118, i8* %3119, align 1, !tbaa !2447
  %3120 = icmp eq i32 %3100, 0
  %3121 = zext i1 %3120 to i8
  %3122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3121, i8* %3122, align 1, !tbaa !2448
  %3123 = lshr i32 %3100, 31
  %3124 = trunc i32 %3123 to i8
  %3125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3124, i8* %3125, align 1, !tbaa !2449
  %3126 = lshr i32 %3099, 31
  %3127 = xor i32 %3123, %3126
  %3128 = add nuw nsw i32 %3127, %3123
  %3129 = icmp eq i32 %3128, 2
  %3130 = zext i1 %3129 to i8
  %3131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3130, i8* %3131, align 1, !tbaa !2450
  %3132 = load i32, i32* %EAX
  %3133 = zext i32 %3132 to i64
  %3134 = load i64, i64* %PC
  %3135 = add i64 %3134, 3
  store i64 %3135, i64* %PC
  %3136 = shl i64 %3133, 32
  %3137 = ashr exact i64 %3136, 32
  store i64 %3137, i64* %RDX, align 8, !tbaa !2428
  %3138 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3139 = load i64, i64* %RCX
  %3140 = load i64, i64* %RDX
  %3141 = mul i64 %3140, 8
  %3142 = add i64 %3141, %3139
  %3143 = load i64, i64* %PC
  %3144 = add i64 %3143, 5
  store i64 %3144, i64* %PC
  %3145 = inttoptr i64 %3142 to double*
  %3146 = load double, double* %3145
  %3147 = bitcast i8* %3138 to double*
  store double %3146, double* %3147, align 1, !tbaa !2452
  %3148 = getelementptr inbounds i8, i8* %3138, i64 8
  %3149 = bitcast i8* %3148 to double*
  store double 0.000000e+00, double* %3149, align 1, !tbaa !2452
  %3150 = load i64, i64* %RBP
  %3151 = sub i64 %3150, 72
  %3152 = bitcast %union.vec128_t* %XMM0 to i8*
  %3153 = load i64, i64* %PC
  %3154 = add i64 %3153, 5
  store i64 %3154, i64* %PC
  %3155 = bitcast i8* %3152 to double*
  %3156 = load double, double* %3155, align 1
  %3157 = inttoptr i64 %3151 to double*
  store double %3156, double* %3157
  %3158 = load i64, i64* %RBP
  %3159 = sub i64 %3158, 24
  %3160 = load i64, i64* %PC
  %3161 = add i64 %3160, 4
  store i64 %3161, i64* %PC
  %3162 = inttoptr i64 %3159 to i64*
  %3163 = load i64, i64* %3162
  store i64 %3163, i64* %RCX, align 8, !tbaa !2428
  %3164 = load i64, i64* %RBP
  %3165 = sub i64 %3164, 40
  %3166 = load i64, i64* %PC
  %3167 = add i64 %3166, 4
  store i64 %3167, i64* %PC
  %3168 = inttoptr i64 %3165 to i32*
  %3169 = load i32, i32* %3168
  %3170 = sext i32 %3169 to i64
  store i64 %3170, i64* %RDX, align 8, !tbaa !2428
  %3171 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3172 = load i64, i64* %RCX
  %3173 = load i64, i64* %RDX
  %3174 = mul i64 %3173, 8
  %3175 = add i64 %3174, %3172
  %3176 = load i64, i64* %PC
  %3177 = add i64 %3176, 5
  store i64 %3177, i64* %PC
  %3178 = inttoptr i64 %3175 to double*
  %3179 = load double, double* %3178
  %3180 = bitcast i8* %3171 to double*
  store double %3179, double* %3180, align 1, !tbaa !2452
  %3181 = getelementptr inbounds i8, i8* %3171, i64 8
  %3182 = bitcast i8* %3181 to double*
  store double 0.000000e+00, double* %3182, align 1, !tbaa !2452
  %3183 = load i64, i64* %RBP
  %3184 = sub i64 %3183, 80
  %3185 = bitcast %union.vec128_t* %XMM0 to i8*
  %3186 = load i64, i64* %PC
  %3187 = add i64 %3186, 5
  store i64 %3187, i64* %PC
  %3188 = bitcast i8* %3185 to double*
  %3189 = load double, double* %3188, align 1
  %3190 = inttoptr i64 %3184 to double*
  store double %3189, double* %3190
  %3191 = load i64, i64* %RBP
  %3192 = sub i64 %3191, 24
  %3193 = load i64, i64* %PC
  %3194 = add i64 %3193, 4
  store i64 %3194, i64* %PC
  %3195 = inttoptr i64 %3192 to i64*
  %3196 = load i64, i64* %3195
  store i64 %3196, i64* %RCX, align 8, !tbaa !2428
  %3197 = load i64, i64* %RBP
  %3198 = sub i64 %3197, 40
  %3199 = load i64, i64* %PC
  %3200 = add i64 %3199, 3
  store i64 %3200, i64* %PC
  %3201 = inttoptr i64 %3198 to i32*
  %3202 = load i32, i32* %3201
  %3203 = zext i32 %3202 to i64
  store i64 %3203, i64* %RAX, align 8, !tbaa !2428
  %3204 = load i64, i64* %RAX
  %3205 = load i64, i64* %PC
  %3206 = add i64 %3205, 3
  store i64 %3206, i64* %PC
  %3207 = trunc i64 %3204 to i32
  %3208 = add i32 1, %3207
  %3209 = zext i32 %3208 to i64
  store i64 %3209, i64* %RAX, align 8, !tbaa !2428
  %3210 = icmp ult i32 %3208, %3207
  %3211 = icmp ult i32 %3208, 1
  %3212 = or i1 %3210, %3211
  %3213 = zext i1 %3212 to i8
  %3214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3213, i8* %3214, align 1, !tbaa !2432
  %3215 = and i32 %3208, 255
  %3216 = call i32 @llvm.ctpop.i32(i32 %3215) #17
  %3217 = trunc i32 %3216 to i8
  %3218 = and i8 %3217, 1
  %3219 = xor i8 %3218, 1
  %3220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3219, i8* %3220, align 1, !tbaa !2446
  %3221 = xor i64 1, %3204
  %3222 = trunc i64 %3221 to i32
  %3223 = xor i32 %3222, %3208
  %3224 = lshr i32 %3223, 4
  %3225 = trunc i32 %3224 to i8
  %3226 = and i8 %3225, 1
  %3227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3226, i8* %3227, align 1, !tbaa !2447
  %3228 = icmp eq i32 %3208, 0
  %3229 = zext i1 %3228 to i8
  %3230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3229, i8* %3230, align 1, !tbaa !2448
  %3231 = lshr i32 %3208, 31
  %3232 = trunc i32 %3231 to i8
  %3233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3232, i8* %3233, align 1, !tbaa !2449
  %3234 = lshr i32 %3207, 31
  %3235 = xor i32 %3231, %3234
  %3236 = add nuw nsw i32 %3235, %3231
  %3237 = icmp eq i32 %3236, 2
  %3238 = zext i1 %3237 to i8
  %3239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3238, i8* %3239, align 1, !tbaa !2450
  %3240 = load i32, i32* %EAX
  %3241 = zext i32 %3240 to i64
  %3242 = load i64, i64* %PC
  %3243 = add i64 %3242, 3
  store i64 %3243, i64* %PC
  %3244 = shl i64 %3241, 32
  %3245 = ashr exact i64 %3244, 32
  store i64 %3245, i64* %RDX, align 8, !tbaa !2428
  %3246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3247 = load i64, i64* %RCX
  %3248 = load i64, i64* %RDX
  %3249 = mul i64 %3248, 8
  %3250 = add i64 %3249, %3247
  %3251 = load i64, i64* %PC
  %3252 = add i64 %3251, 5
  store i64 %3252, i64* %PC
  %3253 = inttoptr i64 %3250 to double*
  %3254 = load double, double* %3253
  %3255 = bitcast i8* %3246 to double*
  store double %3254, double* %3255, align 1, !tbaa !2452
  %3256 = getelementptr inbounds i8, i8* %3246, i64 8
  %3257 = bitcast i8* %3256 to double*
  store double 0.000000e+00, double* %3257, align 1, !tbaa !2452
  %3258 = load i64, i64* %RBP
  %3259 = sub i64 %3258, 88
  %3260 = bitcast %union.vec128_t* %XMM0 to i8*
  %3261 = load i64, i64* %PC
  %3262 = add i64 %3261, 5
  store i64 %3262, i64* %PC
  %3263 = bitcast i8* %3260 to double*
  %3264 = load double, double* %3263, align 1
  %3265 = inttoptr i64 %3259 to double*
  store double %3264, double* %3265
  %3266 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3267 = load i64, i64* %RBP
  %3268 = sub i64 %3267, 80
  %3269 = load i64, i64* %PC
  %3270 = add i64 %3269, 5
  store i64 %3270, i64* %PC
  %3271 = inttoptr i64 %3268 to double*
  %3272 = load double, double* %3271
  %3273 = bitcast i8* %3266 to double*
  store double %3272, double* %3273, align 1, !tbaa !2452
  %3274 = getelementptr inbounds i8, i8* %3266, i64 8
  %3275 = bitcast i8* %3274 to double*
  store double 0.000000e+00, double* %3275, align 1, !tbaa !2452
  %3276 = load i64, i64* %RBP
  %3277 = sub i64 %3276, 24
  %3278 = load i64, i64* %PC
  %3279 = add i64 %3278, 4
  store i64 %3279, i64* %PC
  %3280 = inttoptr i64 %3277 to i64*
  %3281 = load i64, i64* %3280
  store i64 %3281, i64* %RCX, align 8, !tbaa !2428
  %3282 = load i64, i64* %RBP
  %3283 = sub i64 %3282, 32
  %3284 = load i64, i64* %PC
  %3285 = add i64 %3284, 4
  store i64 %3285, i64* %PC
  %3286 = inttoptr i64 %3283 to i32*
  %3287 = load i32, i32* %3286
  %3288 = sext i32 %3287 to i64
  store i64 %3288, i64* %RDX, align 8, !tbaa !2428
  %3289 = load i64, i64* %RCX
  %3290 = load i64, i64* %RDX
  %3291 = mul i64 %3290, 8
  %3292 = add i64 %3291, %3289
  %3293 = bitcast %union.vec128_t* %XMM0 to i8*
  %3294 = load i64, i64* %PC
  %3295 = add i64 %3294, 5
  store i64 %3295, i64* %PC
  %3296 = bitcast i8* %3293 to double*
  %3297 = load double, double* %3296, align 1
  %3298 = inttoptr i64 %3292 to double*
  store double %3297, double* %3298
  %3299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3300 = load i64, i64* %RBP
  %3301 = sub i64 %3300, 88
  %3302 = load i64, i64* %PC
  %3303 = add i64 %3302, 5
  store i64 %3303, i64* %PC
  %3304 = inttoptr i64 %3301 to double*
  %3305 = load double, double* %3304
  %3306 = bitcast i8* %3299 to double*
  store double %3305, double* %3306, align 1, !tbaa !2452
  %3307 = getelementptr inbounds i8, i8* %3299, i64 8
  %3308 = bitcast i8* %3307 to double*
  store double 0.000000e+00, double* %3308, align 1, !tbaa !2452
  %3309 = load i64, i64* %RBP
  %3310 = sub i64 %3309, 24
  %3311 = load i64, i64* %PC
  %3312 = add i64 %3311, 4
  store i64 %3312, i64* %PC
  %3313 = inttoptr i64 %3310 to i64*
  %3314 = load i64, i64* %3313
  store i64 %3314, i64* %RCX, align 8, !tbaa !2428
  %3315 = load i64, i64* %RBP
  %3316 = sub i64 %3315, 32
  %3317 = load i64, i64* %PC
  %3318 = add i64 %3317, 3
  store i64 %3318, i64* %PC
  %3319 = inttoptr i64 %3316 to i32*
  %3320 = load i32, i32* %3319
  %3321 = zext i32 %3320 to i64
  store i64 %3321, i64* %RAX, align 8, !tbaa !2428
  %3322 = load i64, i64* %RAX
  %3323 = load i64, i64* %PC
  %3324 = add i64 %3323, 3
  store i64 %3324, i64* %PC
  %3325 = trunc i64 %3322 to i32
  %3326 = add i32 1, %3325
  %3327 = zext i32 %3326 to i64
  store i64 %3327, i64* %RAX, align 8, !tbaa !2428
  %3328 = icmp ult i32 %3326, %3325
  %3329 = icmp ult i32 %3326, 1
  %3330 = or i1 %3328, %3329
  %3331 = zext i1 %3330 to i8
  %3332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3331, i8* %3332, align 1, !tbaa !2432
  %3333 = and i32 %3326, 255
  %3334 = call i32 @llvm.ctpop.i32(i32 %3333) #17
  %3335 = trunc i32 %3334 to i8
  %3336 = and i8 %3335, 1
  %3337 = xor i8 %3336, 1
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3337, i8* %3338, align 1, !tbaa !2446
  %3339 = xor i64 1, %3322
  %3340 = trunc i64 %3339 to i32
  %3341 = xor i32 %3340, %3326
  %3342 = lshr i32 %3341, 4
  %3343 = trunc i32 %3342 to i8
  %3344 = and i8 %3343, 1
  %3345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3344, i8* %3345, align 1, !tbaa !2447
  %3346 = icmp eq i32 %3326, 0
  %3347 = zext i1 %3346 to i8
  %3348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3347, i8* %3348, align 1, !tbaa !2448
  %3349 = lshr i32 %3326, 31
  %3350 = trunc i32 %3349 to i8
  %3351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3350, i8* %3351, align 1, !tbaa !2449
  %3352 = lshr i32 %3325, 31
  %3353 = xor i32 %3349, %3352
  %3354 = add nuw nsw i32 %3353, %3349
  %3355 = icmp eq i32 %3354, 2
  %3356 = zext i1 %3355 to i8
  %3357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3356, i8* %3357, align 1, !tbaa !2450
  %3358 = load i32, i32* %EAX
  %3359 = zext i32 %3358 to i64
  %3360 = load i64, i64* %PC
  %3361 = add i64 %3360, 3
  store i64 %3361, i64* %PC
  %3362 = shl i64 %3359, 32
  %3363 = ashr exact i64 %3362, 32
  store i64 %3363, i64* %RDX, align 8, !tbaa !2428
  %3364 = load i64, i64* %RCX
  %3365 = load i64, i64* %RDX
  %3366 = mul i64 %3365, 8
  %3367 = add i64 %3366, %3364
  %3368 = bitcast %union.vec128_t* %XMM0 to i8*
  %3369 = load i64, i64* %PC
  %3370 = add i64 %3369, 5
  store i64 %3370, i64* %PC
  %3371 = bitcast i8* %3368 to double*
  %3372 = load double, double* %3371, align 1
  %3373 = inttoptr i64 %3367 to double*
  store double %3372, double* %3373
  %3374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3375 = load i64, i64* %RBP
  %3376 = sub i64 %3375, 64
  %3377 = load i64, i64* %PC
  %3378 = add i64 %3377, 5
  store i64 %3378, i64* %PC
  %3379 = inttoptr i64 %3376 to double*
  %3380 = load double, double* %3379
  %3381 = bitcast i8* %3374 to double*
  store double %3380, double* %3381, align 1, !tbaa !2452
  %3382 = getelementptr inbounds i8, i8* %3374, i64 8
  %3383 = bitcast i8* %3382 to double*
  store double 0.000000e+00, double* %3383, align 1, !tbaa !2452
  %3384 = load i64, i64* %RBP
  %3385 = sub i64 %3384, 24
  %3386 = load i64, i64* %PC
  %3387 = add i64 %3386, 4
  store i64 %3387, i64* %PC
  %3388 = inttoptr i64 %3385 to i64*
  %3389 = load i64, i64* %3388
  store i64 %3389, i64* %RCX, align 8, !tbaa !2428
  %3390 = load i64, i64* %RBP
  %3391 = sub i64 %3390, 40
  %3392 = load i64, i64* %PC
  %3393 = add i64 %3392, 4
  store i64 %3393, i64* %PC
  %3394 = inttoptr i64 %3391 to i32*
  %3395 = load i32, i32* %3394
  %3396 = sext i32 %3395 to i64
  store i64 %3396, i64* %RDX, align 8, !tbaa !2428
  %3397 = load i64, i64* %RCX
  %3398 = load i64, i64* %RDX
  %3399 = mul i64 %3398, 8
  %3400 = add i64 %3399, %3397
  %3401 = bitcast %union.vec128_t* %XMM0 to i8*
  %3402 = load i64, i64* %PC
  %3403 = add i64 %3402, 5
  store i64 %3403, i64* %PC
  %3404 = bitcast i8* %3401 to double*
  %3405 = load double, double* %3404, align 1
  %3406 = inttoptr i64 %3400 to double*
  store double %3405, double* %3406
  %3407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3408 = load i64, i64* %RBP
  %3409 = sub i64 %3408, 72
  %3410 = load i64, i64* %PC
  %3411 = add i64 %3410, 5
  store i64 %3411, i64* %PC
  %3412 = inttoptr i64 %3409 to double*
  %3413 = load double, double* %3412
  %3414 = bitcast i8* %3407 to double*
  store double %3413, double* %3414, align 1, !tbaa !2452
  %3415 = getelementptr inbounds i8, i8* %3407, i64 8
  %3416 = bitcast i8* %3415 to double*
  store double 0.000000e+00, double* %3416, align 1, !tbaa !2452
  %3417 = load i64, i64* %RBP
  %3418 = sub i64 %3417, 24
  %3419 = load i64, i64* %PC
  %3420 = add i64 %3419, 4
  store i64 %3420, i64* %PC
  %3421 = inttoptr i64 %3418 to i64*
  %3422 = load i64, i64* %3421
  store i64 %3422, i64* %RCX, align 8, !tbaa !2428
  %3423 = load i64, i64* %RBP
  %3424 = sub i64 %3423, 40
  %3425 = load i64, i64* %PC
  %3426 = add i64 %3425, 3
  store i64 %3426, i64* %PC
  %3427 = inttoptr i64 %3424 to i32*
  %3428 = load i32, i32* %3427
  %3429 = zext i32 %3428 to i64
  store i64 %3429, i64* %RAX, align 8, !tbaa !2428
  %3430 = load i64, i64* %RAX
  %3431 = load i64, i64* %PC
  %3432 = add i64 %3431, 3
  store i64 %3432, i64* %PC
  %3433 = trunc i64 %3430 to i32
  %3434 = add i32 1, %3433
  %3435 = zext i32 %3434 to i64
  store i64 %3435, i64* %RAX, align 8, !tbaa !2428
  %3436 = icmp ult i32 %3434, %3433
  %3437 = icmp ult i32 %3434, 1
  %3438 = or i1 %3436, %3437
  %3439 = zext i1 %3438 to i8
  %3440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3439, i8* %3440, align 1, !tbaa !2432
  %3441 = and i32 %3434, 255
  %3442 = call i32 @llvm.ctpop.i32(i32 %3441) #17
  %3443 = trunc i32 %3442 to i8
  %3444 = and i8 %3443, 1
  %3445 = xor i8 %3444, 1
  %3446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3445, i8* %3446, align 1, !tbaa !2446
  %3447 = xor i64 1, %3430
  %3448 = trunc i64 %3447 to i32
  %3449 = xor i32 %3448, %3434
  %3450 = lshr i32 %3449, 4
  %3451 = trunc i32 %3450 to i8
  %3452 = and i8 %3451, 1
  %3453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3452, i8* %3453, align 1, !tbaa !2447
  %3454 = icmp eq i32 %3434, 0
  %3455 = zext i1 %3454 to i8
  %3456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3455, i8* %3456, align 1, !tbaa !2448
  %3457 = lshr i32 %3434, 31
  %3458 = trunc i32 %3457 to i8
  %3459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3458, i8* %3459, align 1, !tbaa !2449
  %3460 = lshr i32 %3433, 31
  %3461 = xor i32 %3457, %3460
  %3462 = add nuw nsw i32 %3461, %3457
  %3463 = icmp eq i32 %3462, 2
  %3464 = zext i1 %3463 to i8
  %3465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3464, i8* %3465, align 1, !tbaa !2450
  %3466 = load i32, i32* %EAX
  %3467 = zext i32 %3466 to i64
  %3468 = load i64, i64* %PC
  %3469 = add i64 %3468, 3
  store i64 %3469, i64* %PC
  %3470 = shl i64 %3467, 32
  %3471 = ashr exact i64 %3470, 32
  store i64 %3471, i64* %RDX, align 8, !tbaa !2428
  %3472 = load i64, i64* %RCX
  %3473 = load i64, i64* %RDX
  %3474 = mul i64 %3473, 8
  %3475 = add i64 %3474, %3472
  %3476 = bitcast %union.vec128_t* %XMM0 to i8*
  %3477 = load i64, i64* %PC
  %3478 = add i64 %3477, 5
  store i64 %3478, i64* %PC
  %3479 = bitcast i8* %3476 to double*
  %3480 = load double, double* %3479, align 1
  %3481 = inttoptr i64 %3475 to double*
  store double %3480, double* %3481
  %3482 = load i64, i64* %RBP
  %3483 = sub i64 %3482, 28
  %3484 = load i64, i64* %PC
  %3485 = add i64 %3484, 3
  store i64 %3485, i64* %PC
  %3486 = inttoptr i64 %3483 to i32*
  %3487 = load i32, i32* %3486
  %3488 = zext i32 %3487 to i64
  store i64 %3488, i64* %RAX, align 8, !tbaa !2428
  %3489 = load i64, i64* %RAX
  %3490 = load i64, i64* %PC
  %3491 = add i64 %3490, 3
  store i64 %3491, i64* %PC
  %3492 = trunc i64 %3489 to i32
  %3493 = add i32 1, %3492
  %3494 = zext i32 %3493 to i64
  store i64 %3494, i64* %RAX, align 8, !tbaa !2428
  %3495 = icmp ult i32 %3493, %3492
  %3496 = icmp ult i32 %3493, 1
  %3497 = or i1 %3495, %3496
  %3498 = zext i1 %3497 to i8
  %3499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3498, i8* %3499, align 1, !tbaa !2432
  %3500 = and i32 %3493, 255
  %3501 = call i32 @llvm.ctpop.i32(i32 %3500) #17
  %3502 = trunc i32 %3501 to i8
  %3503 = and i8 %3502, 1
  %3504 = xor i8 %3503, 1
  %3505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3504, i8* %3505, align 1, !tbaa !2446
  %3506 = xor i64 1, %3489
  %3507 = trunc i64 %3506 to i32
  %3508 = xor i32 %3507, %3493
  %3509 = lshr i32 %3508, 4
  %3510 = trunc i32 %3509 to i8
  %3511 = and i8 %3510, 1
  %3512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3511, i8* %3512, align 1, !tbaa !2447
  %3513 = icmp eq i32 %3493, 0
  %3514 = zext i1 %3513 to i8
  %3515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3514, i8* %3515, align 1, !tbaa !2448
  %3516 = lshr i32 %3493, 31
  %3517 = trunc i32 %3516 to i8
  %3518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3517, i8* %3518, align 1, !tbaa !2449
  %3519 = lshr i32 %3492, 31
  %3520 = xor i32 %3516, %3519
  %3521 = add nuw nsw i32 %3520, %3516
  %3522 = icmp eq i32 %3521, 2
  %3523 = zext i1 %3522 to i8
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3523, i8* %3524, align 1, !tbaa !2450
  %3525 = load i64, i64* %RBP
  %3526 = sub i64 %3525, 28
  %3527 = load i32, i32* %EAX
  %3528 = zext i32 %3527 to i64
  %3529 = load i64, i64* %PC
  %3530 = add i64 %3529, 3
  store i64 %3530, i64* %PC
  %3531 = inttoptr i64 %3526 to i32*
  store i32 %3527, i32* %3531
  %3532 = load i64, i64* %PC
  %3533 = sub i64 %3532, 779
  %3534 = load i64, i64* %PC
  %3535 = add i64 %3534, 5
  store i64 %3535, i64* %PC
  %3536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3533, i64* %3536, align 8, !tbaa !2428
  br label %block_40129d

block_401225:                                     ; preds = %block_401215, %block_401231
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.6, %block_401215 ], [ %MEMORY.1, %block_401231 ]
  %3537 = load i64, i64* %RBP
  %3538 = sub i64 %3537, 28
  %3539 = load i64, i64* %PC
  %3540 = add i64 %3539, 3
  store i64 %3540, i64* %PC
  %3541 = inttoptr i64 %3538 to i32*
  %3542 = load i32, i32* %3541
  %3543 = zext i32 %3542 to i64
  store i64 %3543, i64* %RAX, align 8, !tbaa !2428
  %3544 = load i32, i32* %EAX
  %3545 = zext i32 %3544 to i64
  %3546 = load i64, i64* %RBP
  %3547 = sub i64 %3546, 48
  %3548 = load i64, i64* %PC
  %3549 = add i64 %3548, 3
  store i64 %3549, i64* %PC
  %3550 = inttoptr i64 %3547 to i32*
  %3551 = load i32, i32* %3550
  %3552 = sub i32 %3544, %3551
  %3553 = icmp ult i32 %3544, %3551
  %3554 = zext i1 %3553 to i8
  %3555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3554, i8* %3555, align 1, !tbaa !2432
  %3556 = and i32 %3552, 255
  %3557 = call i32 @llvm.ctpop.i32(i32 %3556) #17
  %3558 = trunc i32 %3557 to i8
  %3559 = and i8 %3558, 1
  %3560 = xor i8 %3559, 1
  %3561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3560, i8* %3561, align 1, !tbaa !2446
  %3562 = xor i32 %3551, %3544
  %3563 = xor i32 %3562, %3552
  %3564 = lshr i32 %3563, 4
  %3565 = trunc i32 %3564 to i8
  %3566 = and i8 %3565, 1
  %3567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3566, i8* %3567, align 1, !tbaa !2447
  %3568 = icmp eq i32 %3552, 0
  %3569 = zext i1 %3568 to i8
  %3570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3569, i8* %3570, align 1, !tbaa !2448
  %3571 = lshr i32 %3552, 31
  %3572 = trunc i32 %3571 to i8
  %3573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3572, i8* %3573, align 1, !tbaa !2449
  %3574 = lshr i32 %3544, 31
  %3575 = lshr i32 %3551, 31
  %3576 = xor i32 %3575, %3574
  %3577 = xor i32 %3571, %3574
  %3578 = add nuw nsw i32 %3577, %3576
  %3579 = icmp eq i32 %3578, 2
  %3580 = zext i1 %3579 to i8
  %3581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3580, i8* %3581, align 1, !tbaa !2450
  %3582 = load i64, i64* %PC
  %3583 = add i64 %3582, 50
  %3584 = load i64, i64* %PC
  %3585 = add i64 %3584, 6
  %3586 = load i64, i64* %PC
  %3587 = add i64 %3586, 6
  store i64 %3587, i64* %PC
  %3588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3589 = load i8, i8* %3588, align 1, !tbaa !2449
  %3590 = icmp ne i8 %3589, 0
  %3591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3592 = load i8, i8* %3591, align 1, !tbaa !2450
  %3593 = icmp ne i8 %3592, 0
  %3594 = xor i1 %3590, %3593
  %3595 = xor i1 %3594, true
  %3596 = zext i1 %3595 to i8
  store i8 %3596, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3598 = select i1 %3594, i64 %3585, i64 %3583
  store i64 %3598, i64* %3597, align 8, !tbaa !2428
  %3599 = load i8, i8* %BRANCH_TAKEN
  %3600 = icmp eq i8 %3599, 1
  %3601 = load i64, i64* %RBP
  br i1 %3600, label %block_40125d, label %block_401231

block_40129d:                                     ; preds = %block_401296, %block_4012a9
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.5, %block_401296 ], [ %MEMORY.2, %block_4012a9 ]
  %3602 = load i64, i64* %RBP
  %3603 = sub i64 %3602, 28
  %3604 = load i64, i64* %PC
  %3605 = add i64 %3604, 3
  store i64 %3605, i64* %PC
  %3606 = inttoptr i64 %3603 to i32*
  %3607 = load i32, i32* %3606
  %3608 = zext i32 %3607 to i64
  store i64 %3608, i64* %RAX, align 8, !tbaa !2428
  %3609 = load i32, i32* %EAX
  %3610 = zext i32 %3609 to i64
  %3611 = load i64, i64* %RBP
  %3612 = sub i64 %3611, 36
  %3613 = load i64, i64* %PC
  %3614 = add i64 %3613, 3
  store i64 %3614, i64* %PC
  %3615 = inttoptr i64 %3612 to i32*
  %3616 = load i32, i32* %3615
  %3617 = sub i32 %3609, %3616
  %3618 = icmp ult i32 %3609, %3616
  %3619 = zext i1 %3618 to i8
  %3620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3619, i8* %3620, align 1, !tbaa !2432
  %3621 = and i32 %3617, 255
  %3622 = call i32 @llvm.ctpop.i32(i32 %3621) #17
  %3623 = trunc i32 %3622 to i8
  %3624 = and i8 %3623, 1
  %3625 = xor i8 %3624, 1
  %3626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3625, i8* %3626, align 1, !tbaa !2446
  %3627 = xor i32 %3616, %3609
  %3628 = xor i32 %3627, %3617
  %3629 = lshr i32 %3628, 4
  %3630 = trunc i32 %3629 to i8
  %3631 = and i8 %3630, 1
  %3632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3631, i8* %3632, align 1, !tbaa !2447
  %3633 = icmp eq i32 %3617, 0
  %3634 = zext i1 %3633 to i8
  %3635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3634, i8* %3635, align 1, !tbaa !2448
  %3636 = lshr i32 %3617, 31
  %3637 = trunc i32 %3636 to i8
  %3638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3637, i8* %3638, align 1, !tbaa !2449
  %3639 = lshr i32 %3609, 31
  %3640 = lshr i32 %3616, 31
  %3641 = xor i32 %3640, %3639
  %3642 = xor i32 %3636, %3639
  %3643 = add nuw nsw i32 %3642, %3641
  %3644 = icmp eq i32 %3643, 2
  %3645 = zext i1 %3644 to i8
  %3646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3645, i8* %3646, align 1, !tbaa !2450
  %3647 = load i64, i64* %PC
  %3648 = add i64 %3647, 778
  %3649 = load i64, i64* %PC
  %3650 = add i64 %3649, 6
  %3651 = load i64, i64* %PC
  %3652 = add i64 %3651, 6
  store i64 %3652, i64* %PC
  %3653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3654 = load i8, i8* %3653, align 1, !tbaa !2449
  %3655 = icmp ne i8 %3654, 0
  %3656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3657 = load i8, i8* %3656, align 1, !tbaa !2450
  %3658 = icmp ne i8 %3657, 0
  %3659 = xor i1 %3655, %3658
  %3660 = xor i1 %3659, true
  %3661 = zext i1 %3660 to i8
  store i8 %3661, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3663 = select i1 %3659, i64 %3650, i64 %3648
  store i64 %3663, i64* %3662, align 8, !tbaa !2428
  %3664 = load i8, i8* %BRANCH_TAKEN
  %3665 = icmp eq i8 %3664, 1
  %3666 = load i64, i64* %RBP
  br i1 %3665, label %block_4015ad, label %block_4012a9

block_4016aa:                                     ; preds = %block_40169e
  %3667 = load i64, i64* %RBP
  %3668 = sub i64 %3667, 28
  %3669 = load i64, i64* %PC
  %3670 = add i64 %3669, 3
  store i64 %3670, i64* %PC
  %3671 = inttoptr i64 %3668 to i32*
  %3672 = load i32, i32* %3671
  %3673 = zext i32 %3672 to i64
  store i64 %3673, i64* %RAX, align 8, !tbaa !2428
  %3674 = load i64, i64* %RAX
  %3675 = load i64, i64* %PC
  %3676 = add i64 %3675, 3
  store i64 %3676, i64* %PC
  %3677 = trunc i64 %3674 to i32
  %3678 = shl i32 %3677, 1
  %3679 = icmp slt i32 %3677, 0
  %3680 = icmp slt i32 %3678, 0
  %3681 = xor i1 %3679, %3680
  %3682 = zext i32 %3678 to i64
  store i64 %3682, i64* %RAX, align 8, !tbaa !2428
  %3683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3684 = zext i1 %3679 to i8
  store i8 %3684, i8* %3683, align 1, !tbaa !2451
  %3685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3686 = and i32 %3678, 254
  %3687 = call i32 @llvm.ctpop.i32(i32 %3686) #17
  %3688 = trunc i32 %3687 to i8
  %3689 = and i8 %3688, 1
  %3690 = xor i8 %3689, 1
  store i8 %3690, i8* %3685, align 1, !tbaa !2451
  %3691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3691, align 1, !tbaa !2451
  %3692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3693 = icmp eq i32 %3678, 0
  %3694 = zext i1 %3693 to i8
  store i8 %3694, i8* %3692, align 1, !tbaa !2451
  %3695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3696 = lshr i32 %3678, 31
  %3697 = trunc i32 %3696 to i8
  store i8 %3697, i8* %3695, align 1, !tbaa !2451
  %3698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3699 = zext i1 %3681 to i8
  store i8 %3699, i8* %3698, align 1, !tbaa !2451
  %3700 = load i64, i64* %RBP
  %3701 = sub i64 %3700, 16
  %3702 = load i64, i64* %PC
  %3703 = add i64 %3702, 4
  store i64 %3703, i64* %PC
  %3704 = inttoptr i64 %3701 to i64*
  %3705 = load i64, i64* %3704
  store i64 %3705, i64* %RCX, align 8, !tbaa !2428
  %3706 = load i64, i64* %RBP
  %3707 = sub i64 %3706, 36
  %3708 = load i64, i64* %PC
  %3709 = add i64 %3708, 4
  store i64 %3709, i64* %PC
  %3710 = inttoptr i64 %3707 to i32*
  %3711 = load i32, i32* %3710
  %3712 = sext i32 %3711 to i64
  store i64 %3712, i64* %RDX, align 8, !tbaa !2428
  %3713 = load i64, i64* %RAX
  %3714 = load i64, i64* %RCX
  %3715 = load i64, i64* %RDX
  %3716 = mul i64 %3715, 4
  %3717 = add i64 %3716, %3714
  %3718 = load i64, i64* %PC
  %3719 = add i64 %3718, 3
  store i64 %3719, i64* %PC
  %3720 = trunc i64 %3713 to i32
  %3721 = inttoptr i64 %3717 to i32*
  %3722 = load i32, i32* %3721
  %3723 = add i32 %3722, %3720
  %3724 = zext i32 %3723 to i64
  store i64 %3724, i64* %RAX, align 8, !tbaa !2428
  %3725 = icmp ult i32 %3723, %3720
  %3726 = icmp ult i32 %3723, %3722
  %3727 = or i1 %3725, %3726
  %3728 = zext i1 %3727 to i8
  %3729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3728, i8* %3729, align 1, !tbaa !2432
  %3730 = and i32 %3723, 255
  %3731 = call i32 @llvm.ctpop.i32(i32 %3730) #17
  %3732 = trunc i32 %3731 to i8
  %3733 = and i8 %3732, 1
  %3734 = xor i8 %3733, 1
  %3735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3734, i8* %3735, align 1, !tbaa !2446
  %3736 = xor i32 %3722, %3720
  %3737 = xor i32 %3736, %3723
  %3738 = lshr i32 %3737, 4
  %3739 = trunc i32 %3738 to i8
  %3740 = and i8 %3739, 1
  %3741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3740, i8* %3741, align 1, !tbaa !2447
  %3742 = icmp eq i32 %3723, 0
  %3743 = zext i1 %3742 to i8
  %3744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3743, i8* %3744, align 1, !tbaa !2448
  %3745 = lshr i32 %3723, 31
  %3746 = trunc i32 %3745 to i8
  %3747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3746, i8* %3747, align 1, !tbaa !2449
  %3748 = lshr i32 %3720, 31
  %3749 = lshr i32 %3722, 31
  %3750 = xor i32 %3745, %3748
  %3751 = xor i32 %3745, %3749
  %3752 = add nuw nsw i32 %3750, %3751
  %3753 = icmp eq i32 %3752, 2
  %3754 = zext i1 %3753 to i8
  %3755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3754, i8* %3755, align 1, !tbaa !2450
  %3756 = load i64, i64* %RBP
  %3757 = sub i64 %3756, 32
  %3758 = load i32, i32* %EAX
  %3759 = zext i32 %3758 to i64
  %3760 = load i64, i64* %PC
  %3761 = add i64 %3760, 3
  store i64 %3761, i64* %PC
  %3762 = inttoptr i64 %3757 to i32*
  store i32 %3758, i32* %3762
  %3763 = load i64, i64* %RBP
  %3764 = sub i64 %3763, 36
  %3765 = load i64, i64* %PC
  %3766 = add i64 %3765, 3
  store i64 %3766, i64* %PC
  %3767 = inttoptr i64 %3764 to i32*
  %3768 = load i32, i32* %3767
  %3769 = zext i32 %3768 to i64
  store i64 %3769, i64* %RAX, align 8, !tbaa !2428
  %3770 = load i64, i64* %RAX
  %3771 = load i64, i64* %PC
  %3772 = add i64 %3771, 3
  store i64 %3772, i64* %PC
  %3773 = trunc i64 %3770 to i32
  %3774 = shl i32 %3773, 1
  %3775 = icmp slt i32 %3773, 0
  %3776 = icmp slt i32 %3774, 0
  %3777 = xor i1 %3775, %3776
  %3778 = zext i32 %3774 to i64
  store i64 %3778, i64* %RAX, align 8, !tbaa !2428
  %3779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3780 = zext i1 %3775 to i8
  store i8 %3780, i8* %3779, align 1, !tbaa !2451
  %3781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3782 = and i32 %3774, 254
  %3783 = call i32 @llvm.ctpop.i32(i32 %3782) #17
  %3784 = trunc i32 %3783 to i8
  %3785 = and i8 %3784, 1
  %3786 = xor i8 %3785, 1
  store i8 %3786, i8* %3781, align 1, !tbaa !2451
  %3787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3787, align 1, !tbaa !2451
  %3788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3789 = icmp eq i32 %3774, 0
  %3790 = zext i1 %3789 to i8
  store i8 %3790, i8* %3788, align 1, !tbaa !2451
  %3791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3792 = lshr i32 %3774, 31
  %3793 = trunc i32 %3792 to i8
  store i8 %3793, i8* %3791, align 1, !tbaa !2451
  %3794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3795 = zext i1 %3777 to i8
  store i8 %3795, i8* %3794, align 1, !tbaa !2451
  %3796 = load i64, i64* %RBP
  %3797 = sub i64 %3796, 16
  %3798 = load i64, i64* %PC
  %3799 = add i64 %3798, 4
  store i64 %3799, i64* %PC
  %3800 = inttoptr i64 %3797 to i64*
  %3801 = load i64, i64* %3800
  store i64 %3801, i64* %RCX, align 8, !tbaa !2428
  %3802 = load i64, i64* %RBP
  %3803 = sub i64 %3802, 28
  %3804 = load i64, i64* %PC
  %3805 = add i64 %3804, 4
  store i64 %3805, i64* %PC
  %3806 = inttoptr i64 %3803 to i32*
  %3807 = load i32, i32* %3806
  %3808 = sext i32 %3807 to i64
  store i64 %3808, i64* %RDX, align 8, !tbaa !2428
  %3809 = load i64, i64* %RAX
  %3810 = load i64, i64* %RCX
  %3811 = load i64, i64* %RDX
  %3812 = mul i64 %3811, 4
  %3813 = add i64 %3812, %3810
  %3814 = load i64, i64* %PC
  %3815 = add i64 %3814, 3
  store i64 %3815, i64* %PC
  %3816 = trunc i64 %3809 to i32
  %3817 = inttoptr i64 %3813 to i32*
  %3818 = load i32, i32* %3817
  %3819 = add i32 %3818, %3816
  %3820 = zext i32 %3819 to i64
  store i64 %3820, i64* %RAX, align 8, !tbaa !2428
  %3821 = icmp ult i32 %3819, %3816
  %3822 = icmp ult i32 %3819, %3818
  %3823 = or i1 %3821, %3822
  %3824 = zext i1 %3823 to i8
  %3825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3824, i8* %3825, align 1, !tbaa !2432
  %3826 = and i32 %3819, 255
  %3827 = call i32 @llvm.ctpop.i32(i32 %3826) #17
  %3828 = trunc i32 %3827 to i8
  %3829 = and i8 %3828, 1
  %3830 = xor i8 %3829, 1
  %3831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3830, i8* %3831, align 1, !tbaa !2446
  %3832 = xor i32 %3818, %3816
  %3833 = xor i32 %3832, %3819
  %3834 = lshr i32 %3833, 4
  %3835 = trunc i32 %3834 to i8
  %3836 = and i8 %3835, 1
  %3837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3836, i8* %3837, align 1, !tbaa !2447
  %3838 = icmp eq i32 %3819, 0
  %3839 = zext i1 %3838 to i8
  %3840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3839, i8* %3840, align 1, !tbaa !2448
  %3841 = lshr i32 %3819, 31
  %3842 = trunc i32 %3841 to i8
  %3843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3842, i8* %3843, align 1, !tbaa !2449
  %3844 = lshr i32 %3816, 31
  %3845 = lshr i32 %3818, 31
  %3846 = xor i32 %3841, %3844
  %3847 = xor i32 %3841, %3845
  %3848 = add nuw nsw i32 %3846, %3847
  %3849 = icmp eq i32 %3848, 2
  %3850 = zext i1 %3849 to i8
  %3851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3850, i8* %3851, align 1, !tbaa !2450
  %3852 = load i64, i64* %RBP
  %3853 = sub i64 %3852, 40
  %3854 = load i32, i32* %EAX
  %3855 = zext i32 %3854 to i64
  %3856 = load i64, i64* %PC
  %3857 = add i64 %3856, 3
  store i64 %3857, i64* %PC
  %3858 = inttoptr i64 %3853 to i32*
  store i32 %3854, i32* %3858
  %3859 = load i64, i64* %RBP
  %3860 = sub i64 %3859, 24
  %3861 = load i64, i64* %PC
  %3862 = add i64 %3861, 4
  store i64 %3862, i64* %PC
  %3863 = inttoptr i64 %3860 to i64*
  %3864 = load i64, i64* %3863
  store i64 %3864, i64* %RCX, align 8, !tbaa !2428
  %3865 = load i64, i64* %RBP
  %3866 = sub i64 %3865, 32
  %3867 = load i64, i64* %PC
  %3868 = add i64 %3867, 4
  store i64 %3868, i64* %PC
  %3869 = inttoptr i64 %3866 to i32*
  %3870 = load i32, i32* %3869
  %3871 = sext i32 %3870 to i64
  store i64 %3871, i64* %RDX, align 8, !tbaa !2428
  %3872 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3873 = load i64, i64* %RCX
  %3874 = load i64, i64* %RDX
  %3875 = mul i64 %3874, 8
  %3876 = add i64 %3875, %3873
  %3877 = load i64, i64* %PC
  %3878 = add i64 %3877, 5
  store i64 %3878, i64* %PC
  %3879 = inttoptr i64 %3876 to double*
  %3880 = load double, double* %3879
  %3881 = bitcast i8* %3872 to double*
  store double %3880, double* %3881, align 1, !tbaa !2452
  %3882 = getelementptr inbounds i8, i8* %3872, i64 8
  %3883 = bitcast i8* %3882 to double*
  store double 0.000000e+00, double* %3883, align 1, !tbaa !2452
  %3884 = load i64, i64* %RBP
  %3885 = sub i64 %3884, 64
  %3886 = bitcast %union.vec128_t* %XMM0 to i8*
  %3887 = load i64, i64* %PC
  %3888 = add i64 %3887, 5
  store i64 %3888, i64* %PC
  %3889 = bitcast i8* %3886 to double*
  %3890 = load double, double* %3889, align 1
  %3891 = inttoptr i64 %3885 to double*
  store double %3890, double* %3891
  %3892 = load i64, i64* %RBP
  %3893 = sub i64 %3892, 24
  %3894 = load i64, i64* %PC
  %3895 = add i64 %3894, 4
  store i64 %3895, i64* %PC
  %3896 = inttoptr i64 %3893 to i64*
  %3897 = load i64, i64* %3896
  store i64 %3897, i64* %RCX, align 8, !tbaa !2428
  %3898 = load i64, i64* %RBP
  %3899 = sub i64 %3898, 32
  %3900 = load i64, i64* %PC
  %3901 = add i64 %3900, 3
  store i64 %3901, i64* %PC
  %3902 = inttoptr i64 %3899 to i32*
  %3903 = load i32, i32* %3902
  %3904 = zext i32 %3903 to i64
  store i64 %3904, i64* %RAX, align 8, !tbaa !2428
  %3905 = load i64, i64* %RAX
  %3906 = load i64, i64* %PC
  %3907 = add i64 %3906, 3
  store i64 %3907, i64* %PC
  %3908 = trunc i64 %3905 to i32
  %3909 = add i32 1, %3908
  %3910 = zext i32 %3909 to i64
  store i64 %3910, i64* %RAX, align 8, !tbaa !2428
  %3911 = icmp ult i32 %3909, %3908
  %3912 = icmp ult i32 %3909, 1
  %3913 = or i1 %3911, %3912
  %3914 = zext i1 %3913 to i8
  %3915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3914, i8* %3915, align 1, !tbaa !2432
  %3916 = and i32 %3909, 255
  %3917 = call i32 @llvm.ctpop.i32(i32 %3916) #17
  %3918 = trunc i32 %3917 to i8
  %3919 = and i8 %3918, 1
  %3920 = xor i8 %3919, 1
  %3921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3920, i8* %3921, align 1, !tbaa !2446
  %3922 = xor i64 1, %3905
  %3923 = trunc i64 %3922 to i32
  %3924 = xor i32 %3923, %3909
  %3925 = lshr i32 %3924, 4
  %3926 = trunc i32 %3925 to i8
  %3927 = and i8 %3926, 1
  %3928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3927, i8* %3928, align 1, !tbaa !2447
  %3929 = icmp eq i32 %3909, 0
  %3930 = zext i1 %3929 to i8
  %3931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3930, i8* %3931, align 1, !tbaa !2448
  %3932 = lshr i32 %3909, 31
  %3933 = trunc i32 %3932 to i8
  %3934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3933, i8* %3934, align 1, !tbaa !2449
  %3935 = lshr i32 %3908, 31
  %3936 = xor i32 %3932, %3935
  %3937 = add nuw nsw i32 %3936, %3932
  %3938 = icmp eq i32 %3937, 2
  %3939 = zext i1 %3938 to i8
  %3940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3939, i8* %3940, align 1, !tbaa !2450
  %3941 = load i32, i32* %EAX
  %3942 = zext i32 %3941 to i64
  %3943 = load i64, i64* %PC
  %3944 = add i64 %3943, 3
  store i64 %3944, i64* %PC
  %3945 = shl i64 %3942, 32
  %3946 = ashr exact i64 %3945, 32
  store i64 %3946, i64* %RDX, align 8, !tbaa !2428
  %3947 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3948 = load i64, i64* %RCX
  %3949 = load i64, i64* %RDX
  %3950 = mul i64 %3949, 8
  %3951 = add i64 %3950, %3948
  %3952 = load i64, i64* %PC
  %3953 = add i64 %3952, 5
  store i64 %3953, i64* %PC
  %3954 = inttoptr i64 %3951 to double*
  %3955 = load double, double* %3954
  %3956 = bitcast i8* %3947 to double*
  store double %3955, double* %3956, align 1, !tbaa !2452
  %3957 = getelementptr inbounds i8, i8* %3947, i64 8
  %3958 = bitcast i8* %3957 to double*
  store double 0.000000e+00, double* %3958, align 1, !tbaa !2452
  %3959 = load i64, i64* %RBP
  %3960 = sub i64 %3959, 72
  %3961 = bitcast %union.vec128_t* %XMM0 to i8*
  %3962 = load i64, i64* %PC
  %3963 = add i64 %3962, 5
  store i64 %3963, i64* %PC
  %3964 = bitcast i8* %3961 to double*
  %3965 = load double, double* %3964, align 1
  %3966 = inttoptr i64 %3960 to double*
  store double %3965, double* %3966
  %3967 = load i64, i64* %RBP
  %3968 = sub i64 %3967, 24
  %3969 = load i64, i64* %PC
  %3970 = add i64 %3969, 4
  store i64 %3970, i64* %PC
  %3971 = inttoptr i64 %3968 to i64*
  %3972 = load i64, i64* %3971
  store i64 %3972, i64* %RCX, align 8, !tbaa !2428
  %3973 = load i64, i64* %RBP
  %3974 = sub i64 %3973, 40
  %3975 = load i64, i64* %PC
  %3976 = add i64 %3975, 4
  store i64 %3976, i64* %PC
  %3977 = inttoptr i64 %3974 to i32*
  %3978 = load i32, i32* %3977
  %3979 = sext i32 %3978 to i64
  store i64 %3979, i64* %RDX, align 8, !tbaa !2428
  %3980 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3981 = load i64, i64* %RCX
  %3982 = load i64, i64* %RDX
  %3983 = mul i64 %3982, 8
  %3984 = add i64 %3983, %3981
  %3985 = load i64, i64* %PC
  %3986 = add i64 %3985, 5
  store i64 %3986, i64* %PC
  %3987 = inttoptr i64 %3984 to double*
  %3988 = load double, double* %3987
  %3989 = bitcast i8* %3980 to double*
  store double %3988, double* %3989, align 1, !tbaa !2452
  %3990 = getelementptr inbounds i8, i8* %3980, i64 8
  %3991 = bitcast i8* %3990 to double*
  store double 0.000000e+00, double* %3991, align 1, !tbaa !2452
  %3992 = load i64, i64* %RBP
  %3993 = sub i64 %3992, 80
  %3994 = bitcast %union.vec128_t* %XMM0 to i8*
  %3995 = load i64, i64* %PC
  %3996 = add i64 %3995, 5
  store i64 %3996, i64* %PC
  %3997 = bitcast i8* %3994 to double*
  %3998 = load double, double* %3997, align 1
  %3999 = inttoptr i64 %3993 to double*
  store double %3998, double* %3999
  %4000 = load i64, i64* %RBP
  %4001 = sub i64 %4000, 24
  %4002 = load i64, i64* %PC
  %4003 = add i64 %4002, 4
  store i64 %4003, i64* %PC
  %4004 = inttoptr i64 %4001 to i64*
  %4005 = load i64, i64* %4004
  store i64 %4005, i64* %RCX, align 8, !tbaa !2428
  %4006 = load i64, i64* %RBP
  %4007 = sub i64 %4006, 40
  %4008 = load i64, i64* %PC
  %4009 = add i64 %4008, 3
  store i64 %4009, i64* %PC
  %4010 = inttoptr i64 %4007 to i32*
  %4011 = load i32, i32* %4010
  %4012 = zext i32 %4011 to i64
  store i64 %4012, i64* %RAX, align 8, !tbaa !2428
  %4013 = load i64, i64* %RAX
  %4014 = load i64, i64* %PC
  %4015 = add i64 %4014, 3
  store i64 %4015, i64* %PC
  %4016 = trunc i64 %4013 to i32
  %4017 = add i32 1, %4016
  %4018 = zext i32 %4017 to i64
  store i64 %4018, i64* %RAX, align 8, !tbaa !2428
  %4019 = icmp ult i32 %4017, %4016
  %4020 = icmp ult i32 %4017, 1
  %4021 = or i1 %4019, %4020
  %4022 = zext i1 %4021 to i8
  %4023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4022, i8* %4023, align 1, !tbaa !2432
  %4024 = and i32 %4017, 255
  %4025 = call i32 @llvm.ctpop.i32(i32 %4024) #17
  %4026 = trunc i32 %4025 to i8
  %4027 = and i8 %4026, 1
  %4028 = xor i8 %4027, 1
  %4029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4028, i8* %4029, align 1, !tbaa !2446
  %4030 = xor i64 1, %4013
  %4031 = trunc i64 %4030 to i32
  %4032 = xor i32 %4031, %4017
  %4033 = lshr i32 %4032, 4
  %4034 = trunc i32 %4033 to i8
  %4035 = and i8 %4034, 1
  %4036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4035, i8* %4036, align 1, !tbaa !2447
  %4037 = icmp eq i32 %4017, 0
  %4038 = zext i1 %4037 to i8
  %4039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4038, i8* %4039, align 1, !tbaa !2448
  %4040 = lshr i32 %4017, 31
  %4041 = trunc i32 %4040 to i8
  %4042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4041, i8* %4042, align 1, !tbaa !2449
  %4043 = lshr i32 %4016, 31
  %4044 = xor i32 %4040, %4043
  %4045 = add nuw nsw i32 %4044, %4040
  %4046 = icmp eq i32 %4045, 2
  %4047 = zext i1 %4046 to i8
  %4048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4047, i8* %4048, align 1, !tbaa !2450
  %4049 = load i32, i32* %EAX
  %4050 = zext i32 %4049 to i64
  %4051 = load i64, i64* %PC
  %4052 = add i64 %4051, 3
  store i64 %4052, i64* %PC
  %4053 = shl i64 %4050, 32
  %4054 = ashr exact i64 %4053, 32
  store i64 %4054, i64* %RDX, align 8, !tbaa !2428
  %4055 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4056 = load i64, i64* %RCX
  %4057 = load i64, i64* %RDX
  %4058 = mul i64 %4057, 8
  %4059 = add i64 %4058, %4056
  %4060 = load i64, i64* %PC
  %4061 = add i64 %4060, 5
  store i64 %4061, i64* %PC
  %4062 = inttoptr i64 %4059 to double*
  %4063 = load double, double* %4062
  %4064 = bitcast i8* %4055 to double*
  store double %4063, double* %4064, align 1, !tbaa !2452
  %4065 = getelementptr inbounds i8, i8* %4055, i64 8
  %4066 = bitcast i8* %4065 to double*
  store double 0.000000e+00, double* %4066, align 1, !tbaa !2452
  %4067 = load i64, i64* %RBP
  %4068 = sub i64 %4067, 88
  %4069 = bitcast %union.vec128_t* %XMM0 to i8*
  %4070 = load i64, i64* %PC
  %4071 = add i64 %4070, 5
  store i64 %4071, i64* %PC
  %4072 = bitcast i8* %4069 to double*
  %4073 = load double, double* %4072, align 1
  %4074 = inttoptr i64 %4068 to double*
  store double %4073, double* %4074
  %4075 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4076 = load i64, i64* %RBP
  %4077 = sub i64 %4076, 80
  %4078 = load i64, i64* %PC
  %4079 = add i64 %4078, 5
  store i64 %4079, i64* %PC
  %4080 = inttoptr i64 %4077 to double*
  %4081 = load double, double* %4080
  %4082 = bitcast i8* %4075 to double*
  store double %4081, double* %4082, align 1, !tbaa !2452
  %4083 = getelementptr inbounds i8, i8* %4075, i64 8
  %4084 = bitcast i8* %4083 to double*
  store double 0.000000e+00, double* %4084, align 1, !tbaa !2452
  %4085 = load i64, i64* %RBP
  %4086 = sub i64 %4085, 24
  %4087 = load i64, i64* %PC
  %4088 = add i64 %4087, 4
  store i64 %4088, i64* %PC
  %4089 = inttoptr i64 %4086 to i64*
  %4090 = load i64, i64* %4089
  store i64 %4090, i64* %RCX, align 8, !tbaa !2428
  %4091 = load i64, i64* %RBP
  %4092 = sub i64 %4091, 32
  %4093 = load i64, i64* %PC
  %4094 = add i64 %4093, 4
  store i64 %4094, i64* %PC
  %4095 = inttoptr i64 %4092 to i32*
  %4096 = load i32, i32* %4095
  %4097 = sext i32 %4096 to i64
  store i64 %4097, i64* %RDX, align 8, !tbaa !2428
  %4098 = load i64, i64* %RCX
  %4099 = load i64, i64* %RDX
  %4100 = mul i64 %4099, 8
  %4101 = add i64 %4100, %4098
  %4102 = bitcast %union.vec128_t* %XMM0 to i8*
  %4103 = load i64, i64* %PC
  %4104 = add i64 %4103, 5
  store i64 %4104, i64* %PC
  %4105 = bitcast i8* %4102 to double*
  %4106 = load double, double* %4105, align 1
  %4107 = inttoptr i64 %4101 to double*
  store double %4106, double* %4107
  %4108 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4109 = load i64, i64* %RBP
  %4110 = sub i64 %4109, 88
  %4111 = load i64, i64* %PC
  %4112 = add i64 %4111, 5
  store i64 %4112, i64* %PC
  %4113 = inttoptr i64 %4110 to double*
  %4114 = load double, double* %4113
  %4115 = bitcast i8* %4108 to double*
  store double %4114, double* %4115, align 1, !tbaa !2452
  %4116 = getelementptr inbounds i8, i8* %4108, i64 8
  %4117 = bitcast i8* %4116 to double*
  store double 0.000000e+00, double* %4117, align 1, !tbaa !2452
  %4118 = load i64, i64* %RBP
  %4119 = sub i64 %4118, 24
  %4120 = load i64, i64* %PC
  %4121 = add i64 %4120, 4
  store i64 %4121, i64* %PC
  %4122 = inttoptr i64 %4119 to i64*
  %4123 = load i64, i64* %4122
  store i64 %4123, i64* %RCX, align 8, !tbaa !2428
  %4124 = load i64, i64* %RBP
  %4125 = sub i64 %4124, 32
  %4126 = load i64, i64* %PC
  %4127 = add i64 %4126, 3
  store i64 %4127, i64* %PC
  %4128 = inttoptr i64 %4125 to i32*
  %4129 = load i32, i32* %4128
  %4130 = zext i32 %4129 to i64
  store i64 %4130, i64* %RAX, align 8, !tbaa !2428
  %4131 = load i64, i64* %RAX
  %4132 = load i64, i64* %PC
  %4133 = add i64 %4132, 3
  store i64 %4133, i64* %PC
  %4134 = trunc i64 %4131 to i32
  %4135 = add i32 1, %4134
  %4136 = zext i32 %4135 to i64
  store i64 %4136, i64* %RAX, align 8, !tbaa !2428
  %4137 = icmp ult i32 %4135, %4134
  %4138 = icmp ult i32 %4135, 1
  %4139 = or i1 %4137, %4138
  %4140 = zext i1 %4139 to i8
  %4141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4140, i8* %4141, align 1, !tbaa !2432
  %4142 = and i32 %4135, 255
  %4143 = call i32 @llvm.ctpop.i32(i32 %4142) #17
  %4144 = trunc i32 %4143 to i8
  %4145 = and i8 %4144, 1
  %4146 = xor i8 %4145, 1
  %4147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4146, i8* %4147, align 1, !tbaa !2446
  %4148 = xor i64 1, %4131
  %4149 = trunc i64 %4148 to i32
  %4150 = xor i32 %4149, %4135
  %4151 = lshr i32 %4150, 4
  %4152 = trunc i32 %4151 to i8
  %4153 = and i8 %4152, 1
  %4154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4153, i8* %4154, align 1, !tbaa !2447
  %4155 = icmp eq i32 %4135, 0
  %4156 = zext i1 %4155 to i8
  %4157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4156, i8* %4157, align 1, !tbaa !2448
  %4158 = lshr i32 %4135, 31
  %4159 = trunc i32 %4158 to i8
  %4160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4159, i8* %4160, align 1, !tbaa !2449
  %4161 = lshr i32 %4134, 31
  %4162 = xor i32 %4158, %4161
  %4163 = add nuw nsw i32 %4162, %4158
  %4164 = icmp eq i32 %4163, 2
  %4165 = zext i1 %4164 to i8
  %4166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4165, i8* %4166, align 1, !tbaa !2450
  %4167 = load i32, i32* %EAX
  %4168 = zext i32 %4167 to i64
  %4169 = load i64, i64* %PC
  %4170 = add i64 %4169, 3
  store i64 %4170, i64* %PC
  %4171 = shl i64 %4168, 32
  %4172 = ashr exact i64 %4171, 32
  store i64 %4172, i64* %RDX, align 8, !tbaa !2428
  %4173 = load i64, i64* %RCX
  %4174 = load i64, i64* %RDX
  %4175 = mul i64 %4174, 8
  %4176 = add i64 %4175, %4173
  %4177 = bitcast %union.vec128_t* %XMM0 to i8*
  %4178 = load i64, i64* %PC
  %4179 = add i64 %4178, 5
  store i64 %4179, i64* %PC
  %4180 = bitcast i8* %4177 to double*
  %4181 = load double, double* %4180, align 1
  %4182 = inttoptr i64 %4176 to double*
  store double %4181, double* %4182
  %4183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4184 = load i64, i64* %RBP
  %4185 = sub i64 %4184, 64
  %4186 = load i64, i64* %PC
  %4187 = add i64 %4186, 5
  store i64 %4187, i64* %PC
  %4188 = inttoptr i64 %4185 to double*
  %4189 = load double, double* %4188
  %4190 = bitcast i8* %4183 to double*
  store double %4189, double* %4190, align 1, !tbaa !2452
  %4191 = getelementptr inbounds i8, i8* %4183, i64 8
  %4192 = bitcast i8* %4191 to double*
  store double 0.000000e+00, double* %4192, align 1, !tbaa !2452
  %4193 = load i64, i64* %RBP
  %4194 = sub i64 %4193, 24
  %4195 = load i64, i64* %PC
  %4196 = add i64 %4195, 4
  store i64 %4196, i64* %PC
  %4197 = inttoptr i64 %4194 to i64*
  %4198 = load i64, i64* %4197
  store i64 %4198, i64* %RCX, align 8, !tbaa !2428
  %4199 = load i64, i64* %RBP
  %4200 = sub i64 %4199, 40
  %4201 = load i64, i64* %PC
  %4202 = add i64 %4201, 4
  store i64 %4202, i64* %PC
  %4203 = inttoptr i64 %4200 to i32*
  %4204 = load i32, i32* %4203
  %4205 = sext i32 %4204 to i64
  store i64 %4205, i64* %RDX, align 8, !tbaa !2428
  %4206 = load i64, i64* %RCX
  %4207 = load i64, i64* %RDX
  %4208 = mul i64 %4207, 8
  %4209 = add i64 %4208, %4206
  %4210 = bitcast %union.vec128_t* %XMM0 to i8*
  %4211 = load i64, i64* %PC
  %4212 = add i64 %4211, 5
  store i64 %4212, i64* %PC
  %4213 = bitcast i8* %4210 to double*
  %4214 = load double, double* %4213, align 1
  %4215 = inttoptr i64 %4209 to double*
  store double %4214, double* %4215
  %4216 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4217 = load i64, i64* %RBP
  %4218 = sub i64 %4217, 72
  %4219 = load i64, i64* %PC
  %4220 = add i64 %4219, 5
  store i64 %4220, i64* %PC
  %4221 = inttoptr i64 %4218 to double*
  %4222 = load double, double* %4221
  %4223 = bitcast i8* %4216 to double*
  store double %4222, double* %4223, align 1, !tbaa !2452
  %4224 = getelementptr inbounds i8, i8* %4216, i64 8
  %4225 = bitcast i8* %4224 to double*
  store double 0.000000e+00, double* %4225, align 1, !tbaa !2452
  %4226 = load i64, i64* %RBP
  %4227 = sub i64 %4226, 24
  %4228 = load i64, i64* %PC
  %4229 = add i64 %4228, 4
  store i64 %4229, i64* %PC
  %4230 = inttoptr i64 %4227 to i64*
  %4231 = load i64, i64* %4230
  store i64 %4231, i64* %RCX, align 8, !tbaa !2428
  %4232 = load i64, i64* %RBP
  %4233 = sub i64 %4232, 40
  %4234 = load i64, i64* %PC
  %4235 = add i64 %4234, 3
  store i64 %4235, i64* %PC
  %4236 = inttoptr i64 %4233 to i32*
  %4237 = load i32, i32* %4236
  %4238 = zext i32 %4237 to i64
  store i64 %4238, i64* %RAX, align 8, !tbaa !2428
  %4239 = load i64, i64* %RAX
  %4240 = load i64, i64* %PC
  %4241 = add i64 %4240, 3
  store i64 %4241, i64* %PC
  %4242 = trunc i64 %4239 to i32
  %4243 = add i32 1, %4242
  %4244 = zext i32 %4243 to i64
  store i64 %4244, i64* %RAX, align 8, !tbaa !2428
  %4245 = icmp ult i32 %4243, %4242
  %4246 = icmp ult i32 %4243, 1
  %4247 = or i1 %4245, %4246
  %4248 = zext i1 %4247 to i8
  %4249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4248, i8* %4249, align 1, !tbaa !2432
  %4250 = and i32 %4243, 255
  %4251 = call i32 @llvm.ctpop.i32(i32 %4250) #17
  %4252 = trunc i32 %4251 to i8
  %4253 = and i8 %4252, 1
  %4254 = xor i8 %4253, 1
  %4255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4254, i8* %4255, align 1, !tbaa !2446
  %4256 = xor i64 1, %4239
  %4257 = trunc i64 %4256 to i32
  %4258 = xor i32 %4257, %4243
  %4259 = lshr i32 %4258, 4
  %4260 = trunc i32 %4259 to i8
  %4261 = and i8 %4260, 1
  %4262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4261, i8* %4262, align 1, !tbaa !2447
  %4263 = icmp eq i32 %4243, 0
  %4264 = zext i1 %4263 to i8
  %4265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4264, i8* %4265, align 1, !tbaa !2448
  %4266 = lshr i32 %4243, 31
  %4267 = trunc i32 %4266 to i8
  %4268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4267, i8* %4268, align 1, !tbaa !2449
  %4269 = lshr i32 %4242, 31
  %4270 = xor i32 %4266, %4269
  %4271 = add nuw nsw i32 %4270, %4266
  %4272 = icmp eq i32 %4271, 2
  %4273 = zext i1 %4272 to i8
  %4274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4273, i8* %4274, align 1, !tbaa !2450
  %4275 = load i32, i32* %EAX
  %4276 = zext i32 %4275 to i64
  %4277 = load i64, i64* %PC
  %4278 = add i64 %4277, 3
  store i64 %4278, i64* %PC
  %4279 = shl i64 %4276, 32
  %4280 = ashr exact i64 %4279, 32
  store i64 %4280, i64* %RDX, align 8, !tbaa !2428
  %4281 = load i64, i64* %RCX
  %4282 = load i64, i64* %RDX
  %4283 = mul i64 %4282, 8
  %4284 = add i64 %4283, %4281
  %4285 = bitcast %union.vec128_t* %XMM0 to i8*
  %4286 = load i64, i64* %PC
  %4287 = add i64 %4286, 5
  store i64 %4287, i64* %PC
  %4288 = bitcast i8* %4285 to double*
  %4289 = load double, double* %4288, align 1
  %4290 = inttoptr i64 %4284 to double*
  store double %4289, double* %4290
  %4291 = load i64, i64* %RBP
  %4292 = sub i64 %4291, 52
  %4293 = load i64, i64* %PC
  %4294 = add i64 %4293, 3
  store i64 %4294, i64* %PC
  %4295 = inttoptr i64 %4292 to i32*
  %4296 = load i32, i32* %4295
  %4297 = zext i32 %4296 to i64
  store i64 %4297, i64* %RAX, align 8, !tbaa !2428
  %4298 = load i64, i64* %RAX
  %4299 = load i64, i64* %RBP
  %4300 = sub i64 %4299, 32
  %4301 = load i64, i64* %PC
  %4302 = add i64 %4301, 3
  store i64 %4302, i64* %PC
  %4303 = trunc i64 %4298 to i32
  %4304 = inttoptr i64 %4300 to i32*
  %4305 = load i32, i32* %4304
  %4306 = add i32 %4305, %4303
  %4307 = zext i32 %4306 to i64
  store i64 %4307, i64* %RAX, align 8, !tbaa !2428
  %4308 = icmp ult i32 %4306, %4303
  %4309 = icmp ult i32 %4306, %4305
  %4310 = or i1 %4308, %4309
  %4311 = zext i1 %4310 to i8
  %4312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4311, i8* %4312, align 1, !tbaa !2432
  %4313 = and i32 %4306, 255
  %4314 = call i32 @llvm.ctpop.i32(i32 %4313) #17
  %4315 = trunc i32 %4314 to i8
  %4316 = and i8 %4315, 1
  %4317 = xor i8 %4316, 1
  %4318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4317, i8* %4318, align 1, !tbaa !2446
  %4319 = xor i32 %4305, %4303
  %4320 = xor i32 %4319, %4306
  %4321 = lshr i32 %4320, 4
  %4322 = trunc i32 %4321 to i8
  %4323 = and i8 %4322, 1
  %4324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4323, i8* %4324, align 1, !tbaa !2447
  %4325 = icmp eq i32 %4306, 0
  %4326 = zext i1 %4325 to i8
  %4327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4326, i8* %4327, align 1, !tbaa !2448
  %4328 = lshr i32 %4306, 31
  %4329 = trunc i32 %4328 to i8
  %4330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4329, i8* %4330, align 1, !tbaa !2449
  %4331 = lshr i32 %4303, 31
  %4332 = lshr i32 %4305, 31
  %4333 = xor i32 %4328, %4331
  %4334 = xor i32 %4328, %4332
  %4335 = add nuw nsw i32 %4333, %4334
  %4336 = icmp eq i32 %4335, 2
  %4337 = zext i1 %4336 to i8
  %4338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4337, i8* %4338, align 1, !tbaa !2450
  %4339 = load i64, i64* %RBP
  %4340 = sub i64 %4339, 32
  %4341 = load i32, i32* %EAX
  %4342 = zext i32 %4341 to i64
  %4343 = load i64, i64* %PC
  %4344 = add i64 %4343, 3
  store i64 %4344, i64* %PC
  %4345 = inttoptr i64 %4340 to i32*
  store i32 %4341, i32* %4345
  %4346 = load i64, i64* %RBP
  %4347 = sub i64 %4346, 52
  %4348 = load i64, i64* %PC
  %4349 = add i64 %4348, 3
  store i64 %4349, i64* %PC
  %4350 = inttoptr i64 %4347 to i32*
  %4351 = load i32, i32* %4350
  %4352 = zext i32 %4351 to i64
  store i64 %4352, i64* %RAX, align 8, !tbaa !2428
  %4353 = load i64, i64* %RAX
  %4354 = load i64, i64* %RBP
  %4355 = sub i64 %4354, 40
  %4356 = load i64, i64* %PC
  %4357 = add i64 %4356, 3
  store i64 %4357, i64* %PC
  %4358 = trunc i64 %4353 to i32
  %4359 = inttoptr i64 %4355 to i32*
  %4360 = load i32, i32* %4359
  %4361 = add i32 %4360, %4358
  %4362 = zext i32 %4361 to i64
  store i64 %4362, i64* %RAX, align 8, !tbaa !2428
  %4363 = icmp ult i32 %4361, %4358
  %4364 = icmp ult i32 %4361, %4360
  %4365 = or i1 %4363, %4364
  %4366 = zext i1 %4365 to i8
  %4367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4366, i8* %4367, align 1, !tbaa !2432
  %4368 = and i32 %4361, 255
  %4369 = call i32 @llvm.ctpop.i32(i32 %4368) #17
  %4370 = trunc i32 %4369 to i8
  %4371 = and i8 %4370, 1
  %4372 = xor i8 %4371, 1
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4372, i8* %4373, align 1, !tbaa !2446
  %4374 = xor i32 %4360, %4358
  %4375 = xor i32 %4374, %4361
  %4376 = lshr i32 %4375, 4
  %4377 = trunc i32 %4376 to i8
  %4378 = and i8 %4377, 1
  %4379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4378, i8* %4379, align 1, !tbaa !2447
  %4380 = icmp eq i32 %4361, 0
  %4381 = zext i1 %4380 to i8
  %4382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4381, i8* %4382, align 1, !tbaa !2448
  %4383 = lshr i32 %4361, 31
  %4384 = trunc i32 %4383 to i8
  %4385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4384, i8* %4385, align 1, !tbaa !2449
  %4386 = lshr i32 %4358, 31
  %4387 = lshr i32 %4360, 31
  %4388 = xor i32 %4383, %4386
  %4389 = xor i32 %4383, %4387
  %4390 = add nuw nsw i32 %4388, %4389
  %4391 = icmp eq i32 %4390, 2
  %4392 = zext i1 %4391 to i8
  %4393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4392, i8* %4393, align 1, !tbaa !2450
  %4394 = load i64, i64* %RBP
  %4395 = sub i64 %4394, 40
  %4396 = load i32, i32* %EAX
  %4397 = zext i32 %4396 to i64
  %4398 = load i64, i64* %PC
  %4399 = add i64 %4398, 3
  store i64 %4399, i64* %PC
  %4400 = inttoptr i64 %4395 to i32*
  store i32 %4396, i32* %4400
  %4401 = load i64, i64* %RBP
  %4402 = sub i64 %4401, 24
  %4403 = load i64, i64* %PC
  %4404 = add i64 %4403, 4
  store i64 %4404, i64* %PC
  %4405 = inttoptr i64 %4402 to i64*
  %4406 = load i64, i64* %4405
  store i64 %4406, i64* %RCX, align 8, !tbaa !2428
  %4407 = load i64, i64* %RBP
  %4408 = sub i64 %4407, 32
  %4409 = load i64, i64* %PC
  %4410 = add i64 %4409, 4
  store i64 %4410, i64* %PC
  %4411 = inttoptr i64 %4408 to i32*
  %4412 = load i32, i32* %4411
  %4413 = sext i32 %4412 to i64
  store i64 %4413, i64* %RDX, align 8, !tbaa !2428
  %4414 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4415 = load i64, i64* %RCX
  %4416 = load i64, i64* %RDX
  %4417 = mul i64 %4416, 8
  %4418 = add i64 %4417, %4415
  %4419 = load i64, i64* %PC
  %4420 = add i64 %4419, 5
  store i64 %4420, i64* %PC
  %4421 = inttoptr i64 %4418 to double*
  %4422 = load double, double* %4421
  %4423 = bitcast i8* %4414 to double*
  store double %4422, double* %4423, align 1, !tbaa !2452
  %4424 = getelementptr inbounds i8, i8* %4414, i64 8
  %4425 = bitcast i8* %4424 to double*
  store double 0.000000e+00, double* %4425, align 1, !tbaa !2452
  %4426 = load i64, i64* %RBP
  %4427 = sub i64 %4426, 64
  %4428 = bitcast %union.vec128_t* %XMM0 to i8*
  %4429 = load i64, i64* %PC
  %4430 = add i64 %4429, 5
  store i64 %4430, i64* %PC
  %4431 = bitcast i8* %4428 to double*
  %4432 = load double, double* %4431, align 1
  %4433 = inttoptr i64 %4427 to double*
  store double %4432, double* %4433
  %4434 = load i64, i64* %RBP
  %4435 = sub i64 %4434, 24
  %4436 = load i64, i64* %PC
  %4437 = add i64 %4436, 4
  store i64 %4437, i64* %PC
  %4438 = inttoptr i64 %4435 to i64*
  %4439 = load i64, i64* %4438
  store i64 %4439, i64* %RCX, align 8, !tbaa !2428
  %4440 = load i64, i64* %RBP
  %4441 = sub i64 %4440, 32
  %4442 = load i64, i64* %PC
  %4443 = add i64 %4442, 3
  store i64 %4443, i64* %PC
  %4444 = inttoptr i64 %4441 to i32*
  %4445 = load i32, i32* %4444
  %4446 = zext i32 %4445 to i64
  store i64 %4446, i64* %RAX, align 8, !tbaa !2428
  %4447 = load i64, i64* %RAX
  %4448 = load i64, i64* %PC
  %4449 = add i64 %4448, 3
  store i64 %4449, i64* %PC
  %4450 = trunc i64 %4447 to i32
  %4451 = add i32 1, %4450
  %4452 = zext i32 %4451 to i64
  store i64 %4452, i64* %RAX, align 8, !tbaa !2428
  %4453 = icmp ult i32 %4451, %4450
  %4454 = icmp ult i32 %4451, 1
  %4455 = or i1 %4453, %4454
  %4456 = zext i1 %4455 to i8
  %4457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4456, i8* %4457, align 1, !tbaa !2432
  %4458 = and i32 %4451, 255
  %4459 = call i32 @llvm.ctpop.i32(i32 %4458) #17
  %4460 = trunc i32 %4459 to i8
  %4461 = and i8 %4460, 1
  %4462 = xor i8 %4461, 1
  %4463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4462, i8* %4463, align 1, !tbaa !2446
  %4464 = xor i64 1, %4447
  %4465 = trunc i64 %4464 to i32
  %4466 = xor i32 %4465, %4451
  %4467 = lshr i32 %4466, 4
  %4468 = trunc i32 %4467 to i8
  %4469 = and i8 %4468, 1
  %4470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4469, i8* %4470, align 1, !tbaa !2447
  %4471 = icmp eq i32 %4451, 0
  %4472 = zext i1 %4471 to i8
  %4473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4472, i8* %4473, align 1, !tbaa !2448
  %4474 = lshr i32 %4451, 31
  %4475 = trunc i32 %4474 to i8
  %4476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4475, i8* %4476, align 1, !tbaa !2449
  %4477 = lshr i32 %4450, 31
  %4478 = xor i32 %4474, %4477
  %4479 = add nuw nsw i32 %4478, %4474
  %4480 = icmp eq i32 %4479, 2
  %4481 = zext i1 %4480 to i8
  %4482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4481, i8* %4482, align 1, !tbaa !2450
  %4483 = load i32, i32* %EAX
  %4484 = zext i32 %4483 to i64
  %4485 = load i64, i64* %PC
  %4486 = add i64 %4485, 3
  store i64 %4486, i64* %PC
  %4487 = shl i64 %4484, 32
  %4488 = ashr exact i64 %4487, 32
  store i64 %4488, i64* %RDX, align 8, !tbaa !2428
  %4489 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4490 = load i64, i64* %RCX
  %4491 = load i64, i64* %RDX
  %4492 = mul i64 %4491, 8
  %4493 = add i64 %4492, %4490
  %4494 = load i64, i64* %PC
  %4495 = add i64 %4494, 5
  store i64 %4495, i64* %PC
  %4496 = inttoptr i64 %4493 to double*
  %4497 = load double, double* %4496
  %4498 = bitcast i8* %4489 to double*
  store double %4497, double* %4498, align 1, !tbaa !2452
  %4499 = getelementptr inbounds i8, i8* %4489, i64 8
  %4500 = bitcast i8* %4499 to double*
  store double 0.000000e+00, double* %4500, align 1, !tbaa !2452
  %4501 = load i64, i64* %RBP
  %4502 = sub i64 %4501, 72
  %4503 = bitcast %union.vec128_t* %XMM0 to i8*
  %4504 = load i64, i64* %PC
  %4505 = add i64 %4504, 5
  store i64 %4505, i64* %PC
  %4506 = bitcast i8* %4503 to double*
  %4507 = load double, double* %4506, align 1
  %4508 = inttoptr i64 %4502 to double*
  store double %4507, double* %4508
  %4509 = load i64, i64* %RBP
  %4510 = sub i64 %4509, 24
  %4511 = load i64, i64* %PC
  %4512 = add i64 %4511, 4
  store i64 %4512, i64* %PC
  %4513 = inttoptr i64 %4510 to i64*
  %4514 = load i64, i64* %4513
  store i64 %4514, i64* %RCX, align 8, !tbaa !2428
  %4515 = load i64, i64* %RBP
  %4516 = sub i64 %4515, 40
  %4517 = load i64, i64* %PC
  %4518 = add i64 %4517, 4
  store i64 %4518, i64* %PC
  %4519 = inttoptr i64 %4516 to i32*
  %4520 = load i32, i32* %4519
  %4521 = sext i32 %4520 to i64
  store i64 %4521, i64* %RDX, align 8, !tbaa !2428
  %4522 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4523 = load i64, i64* %RCX
  %4524 = load i64, i64* %RDX
  %4525 = mul i64 %4524, 8
  %4526 = add i64 %4525, %4523
  %4527 = load i64, i64* %PC
  %4528 = add i64 %4527, 5
  store i64 %4528, i64* %PC
  %4529 = inttoptr i64 %4526 to double*
  %4530 = load double, double* %4529
  %4531 = bitcast i8* %4522 to double*
  store double %4530, double* %4531, align 1, !tbaa !2452
  %4532 = getelementptr inbounds i8, i8* %4522, i64 8
  %4533 = bitcast i8* %4532 to double*
  store double 0.000000e+00, double* %4533, align 1, !tbaa !2452
  %4534 = load i64, i64* %RBP
  %4535 = sub i64 %4534, 80
  %4536 = bitcast %union.vec128_t* %XMM0 to i8*
  %4537 = load i64, i64* %PC
  %4538 = add i64 %4537, 5
  store i64 %4538, i64* %PC
  %4539 = bitcast i8* %4536 to double*
  %4540 = load double, double* %4539, align 1
  %4541 = inttoptr i64 %4535 to double*
  store double %4540, double* %4541
  %4542 = load i64, i64* %RBP
  %4543 = sub i64 %4542, 24
  %4544 = load i64, i64* %PC
  %4545 = add i64 %4544, 4
  store i64 %4545, i64* %PC
  %4546 = inttoptr i64 %4543 to i64*
  %4547 = load i64, i64* %4546
  store i64 %4547, i64* %RCX, align 8, !tbaa !2428
  %4548 = load i64, i64* %RBP
  %4549 = sub i64 %4548, 40
  %4550 = load i64, i64* %PC
  %4551 = add i64 %4550, 3
  store i64 %4551, i64* %PC
  %4552 = inttoptr i64 %4549 to i32*
  %4553 = load i32, i32* %4552
  %4554 = zext i32 %4553 to i64
  store i64 %4554, i64* %RAX, align 8, !tbaa !2428
  %4555 = load i64, i64* %RAX
  %4556 = load i64, i64* %PC
  %4557 = add i64 %4556, 3
  store i64 %4557, i64* %PC
  %4558 = trunc i64 %4555 to i32
  %4559 = add i32 1, %4558
  %4560 = zext i32 %4559 to i64
  store i64 %4560, i64* %RAX, align 8, !tbaa !2428
  %4561 = icmp ult i32 %4559, %4558
  %4562 = icmp ult i32 %4559, 1
  %4563 = or i1 %4561, %4562
  %4564 = zext i1 %4563 to i8
  %4565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4564, i8* %4565, align 1, !tbaa !2432
  %4566 = and i32 %4559, 255
  %4567 = call i32 @llvm.ctpop.i32(i32 %4566) #17
  %4568 = trunc i32 %4567 to i8
  %4569 = and i8 %4568, 1
  %4570 = xor i8 %4569, 1
  %4571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4570, i8* %4571, align 1, !tbaa !2446
  %4572 = xor i64 1, %4555
  %4573 = trunc i64 %4572 to i32
  %4574 = xor i32 %4573, %4559
  %4575 = lshr i32 %4574, 4
  %4576 = trunc i32 %4575 to i8
  %4577 = and i8 %4576, 1
  %4578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4577, i8* %4578, align 1, !tbaa !2447
  %4579 = icmp eq i32 %4559, 0
  %4580 = zext i1 %4579 to i8
  %4581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4580, i8* %4581, align 1, !tbaa !2448
  %4582 = lshr i32 %4559, 31
  %4583 = trunc i32 %4582 to i8
  %4584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4583, i8* %4584, align 1, !tbaa !2449
  %4585 = lshr i32 %4558, 31
  %4586 = xor i32 %4582, %4585
  %4587 = add nuw nsw i32 %4586, %4582
  %4588 = icmp eq i32 %4587, 2
  %4589 = zext i1 %4588 to i8
  %4590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4589, i8* %4590, align 1, !tbaa !2450
  %4591 = load i32, i32* %EAX
  %4592 = zext i32 %4591 to i64
  %4593 = load i64, i64* %PC
  %4594 = add i64 %4593, 3
  store i64 %4594, i64* %PC
  %4595 = shl i64 %4592, 32
  %4596 = ashr exact i64 %4595, 32
  store i64 %4596, i64* %RDX, align 8, !tbaa !2428
  %4597 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4598 = load i64, i64* %RCX
  %4599 = load i64, i64* %RDX
  %4600 = mul i64 %4599, 8
  %4601 = add i64 %4600, %4598
  %4602 = load i64, i64* %PC
  %4603 = add i64 %4602, 5
  store i64 %4603, i64* %PC
  %4604 = inttoptr i64 %4601 to double*
  %4605 = load double, double* %4604
  %4606 = bitcast i8* %4597 to double*
  store double %4605, double* %4606, align 1, !tbaa !2452
  %4607 = getelementptr inbounds i8, i8* %4597, i64 8
  %4608 = bitcast i8* %4607 to double*
  store double 0.000000e+00, double* %4608, align 1, !tbaa !2452
  %4609 = load i64, i64* %RBP
  %4610 = sub i64 %4609, 88
  %4611 = bitcast %union.vec128_t* %XMM0 to i8*
  %4612 = load i64, i64* %PC
  %4613 = add i64 %4612, 5
  store i64 %4613, i64* %PC
  %4614 = bitcast i8* %4611 to double*
  %4615 = load double, double* %4614, align 1
  %4616 = inttoptr i64 %4610 to double*
  store double %4615, double* %4616
  %4617 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4618 = load i64, i64* %RBP
  %4619 = sub i64 %4618, 80
  %4620 = load i64, i64* %PC
  %4621 = add i64 %4620, 5
  store i64 %4621, i64* %PC
  %4622 = inttoptr i64 %4619 to double*
  %4623 = load double, double* %4622
  %4624 = bitcast i8* %4617 to double*
  store double %4623, double* %4624, align 1, !tbaa !2452
  %4625 = getelementptr inbounds i8, i8* %4617, i64 8
  %4626 = bitcast i8* %4625 to double*
  store double 0.000000e+00, double* %4626, align 1, !tbaa !2452
  %4627 = load i64, i64* %RBP
  %4628 = sub i64 %4627, 24
  %4629 = load i64, i64* %PC
  %4630 = add i64 %4629, 4
  store i64 %4630, i64* %PC
  %4631 = inttoptr i64 %4628 to i64*
  %4632 = load i64, i64* %4631
  store i64 %4632, i64* %RCX, align 8, !tbaa !2428
  %4633 = load i64, i64* %RBP
  %4634 = sub i64 %4633, 32
  %4635 = load i64, i64* %PC
  %4636 = add i64 %4635, 4
  store i64 %4636, i64* %PC
  %4637 = inttoptr i64 %4634 to i32*
  %4638 = load i32, i32* %4637
  %4639 = sext i32 %4638 to i64
  store i64 %4639, i64* %RDX, align 8, !tbaa !2428
  %4640 = load i64, i64* %RCX
  %4641 = load i64, i64* %RDX
  %4642 = mul i64 %4641, 8
  %4643 = add i64 %4642, %4640
  %4644 = bitcast %union.vec128_t* %XMM0 to i8*
  %4645 = load i64, i64* %PC
  %4646 = add i64 %4645, 5
  store i64 %4646, i64* %PC
  %4647 = bitcast i8* %4644 to double*
  %4648 = load double, double* %4647, align 1
  %4649 = inttoptr i64 %4643 to double*
  store double %4648, double* %4649
  %4650 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4651 = load i64, i64* %RBP
  %4652 = sub i64 %4651, 88
  %4653 = load i64, i64* %PC
  %4654 = add i64 %4653, 5
  store i64 %4654, i64* %PC
  %4655 = inttoptr i64 %4652 to double*
  %4656 = load double, double* %4655
  %4657 = bitcast i8* %4650 to double*
  store double %4656, double* %4657, align 1, !tbaa !2452
  %4658 = getelementptr inbounds i8, i8* %4650, i64 8
  %4659 = bitcast i8* %4658 to double*
  store double 0.000000e+00, double* %4659, align 1, !tbaa !2452
  %4660 = load i64, i64* %RBP
  %4661 = sub i64 %4660, 24
  %4662 = load i64, i64* %PC
  %4663 = add i64 %4662, 4
  store i64 %4663, i64* %PC
  %4664 = inttoptr i64 %4661 to i64*
  %4665 = load i64, i64* %4664
  store i64 %4665, i64* %RCX, align 8, !tbaa !2428
  %4666 = load i64, i64* %RBP
  %4667 = sub i64 %4666, 32
  %4668 = load i64, i64* %PC
  %4669 = add i64 %4668, 3
  store i64 %4669, i64* %PC
  %4670 = inttoptr i64 %4667 to i32*
  %4671 = load i32, i32* %4670
  %4672 = zext i32 %4671 to i64
  store i64 %4672, i64* %RAX, align 8, !tbaa !2428
  %4673 = load i64, i64* %RAX
  %4674 = load i64, i64* %PC
  %4675 = add i64 %4674, 3
  store i64 %4675, i64* %PC
  %4676 = trunc i64 %4673 to i32
  %4677 = add i32 1, %4676
  %4678 = zext i32 %4677 to i64
  store i64 %4678, i64* %RAX, align 8, !tbaa !2428
  %4679 = icmp ult i32 %4677, %4676
  %4680 = icmp ult i32 %4677, 1
  %4681 = or i1 %4679, %4680
  %4682 = zext i1 %4681 to i8
  %4683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4682, i8* %4683, align 1, !tbaa !2432
  %4684 = and i32 %4677, 255
  %4685 = call i32 @llvm.ctpop.i32(i32 %4684) #17
  %4686 = trunc i32 %4685 to i8
  %4687 = and i8 %4686, 1
  %4688 = xor i8 %4687, 1
  %4689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4688, i8* %4689, align 1, !tbaa !2446
  %4690 = xor i64 1, %4673
  %4691 = trunc i64 %4690 to i32
  %4692 = xor i32 %4691, %4677
  %4693 = lshr i32 %4692, 4
  %4694 = trunc i32 %4693 to i8
  %4695 = and i8 %4694, 1
  %4696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4695, i8* %4696, align 1, !tbaa !2447
  %4697 = icmp eq i32 %4677, 0
  %4698 = zext i1 %4697 to i8
  %4699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4698, i8* %4699, align 1, !tbaa !2448
  %4700 = lshr i32 %4677, 31
  %4701 = trunc i32 %4700 to i8
  %4702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4701, i8* %4702, align 1, !tbaa !2449
  %4703 = lshr i32 %4676, 31
  %4704 = xor i32 %4700, %4703
  %4705 = add nuw nsw i32 %4704, %4700
  %4706 = icmp eq i32 %4705, 2
  %4707 = zext i1 %4706 to i8
  %4708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4707, i8* %4708, align 1, !tbaa !2450
  %4709 = load i32, i32* %EAX
  %4710 = zext i32 %4709 to i64
  %4711 = load i64, i64* %PC
  %4712 = add i64 %4711, 3
  store i64 %4712, i64* %PC
  %4713 = shl i64 %4710, 32
  %4714 = ashr exact i64 %4713, 32
  store i64 %4714, i64* %RDX, align 8, !tbaa !2428
  %4715 = load i64, i64* %RCX
  %4716 = load i64, i64* %RDX
  %4717 = mul i64 %4716, 8
  %4718 = add i64 %4717, %4715
  %4719 = bitcast %union.vec128_t* %XMM0 to i8*
  %4720 = load i64, i64* %PC
  %4721 = add i64 %4720, 5
  store i64 %4721, i64* %PC
  %4722 = bitcast i8* %4719 to double*
  %4723 = load double, double* %4722, align 1
  %4724 = inttoptr i64 %4718 to double*
  store double %4723, double* %4724
  %4725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4726 = load i64, i64* %RBP
  %4727 = sub i64 %4726, 64
  %4728 = load i64, i64* %PC
  %4729 = add i64 %4728, 5
  store i64 %4729, i64* %PC
  %4730 = inttoptr i64 %4727 to double*
  %4731 = load double, double* %4730
  %4732 = bitcast i8* %4725 to double*
  store double %4731, double* %4732, align 1, !tbaa !2452
  %4733 = getelementptr inbounds i8, i8* %4725, i64 8
  %4734 = bitcast i8* %4733 to double*
  store double 0.000000e+00, double* %4734, align 1, !tbaa !2452
  %4735 = load i64, i64* %RBP
  %4736 = sub i64 %4735, 24
  %4737 = load i64, i64* %PC
  %4738 = add i64 %4737, 4
  store i64 %4738, i64* %PC
  %4739 = inttoptr i64 %4736 to i64*
  %4740 = load i64, i64* %4739
  store i64 %4740, i64* %RCX, align 8, !tbaa !2428
  %4741 = load i64, i64* %RBP
  %4742 = sub i64 %4741, 40
  %4743 = load i64, i64* %PC
  %4744 = add i64 %4743, 4
  store i64 %4744, i64* %PC
  %4745 = inttoptr i64 %4742 to i32*
  %4746 = load i32, i32* %4745
  %4747 = sext i32 %4746 to i64
  store i64 %4747, i64* %RDX, align 8, !tbaa !2428
  %4748 = load i64, i64* %RCX
  %4749 = load i64, i64* %RDX
  %4750 = mul i64 %4749, 8
  %4751 = add i64 %4750, %4748
  %4752 = bitcast %union.vec128_t* %XMM0 to i8*
  %4753 = load i64, i64* %PC
  %4754 = add i64 %4753, 5
  store i64 %4754, i64* %PC
  %4755 = bitcast i8* %4752 to double*
  %4756 = load double, double* %4755, align 1
  %4757 = inttoptr i64 %4751 to double*
  store double %4756, double* %4757
  %4758 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4759 = load i64, i64* %RBP
  %4760 = sub i64 %4759, 72
  %4761 = load i64, i64* %PC
  %4762 = add i64 %4761, 5
  store i64 %4762, i64* %PC
  %4763 = inttoptr i64 %4760 to double*
  %4764 = load double, double* %4763
  %4765 = bitcast i8* %4758 to double*
  store double %4764, double* %4765, align 1, !tbaa !2452
  %4766 = getelementptr inbounds i8, i8* %4758, i64 8
  %4767 = bitcast i8* %4766 to double*
  store double 0.000000e+00, double* %4767, align 1, !tbaa !2452
  %4768 = load i64, i64* %RBP
  %4769 = sub i64 %4768, 24
  %4770 = load i64, i64* %PC
  %4771 = add i64 %4770, 4
  store i64 %4771, i64* %PC
  %4772 = inttoptr i64 %4769 to i64*
  %4773 = load i64, i64* %4772
  store i64 %4773, i64* %RCX, align 8, !tbaa !2428
  %4774 = load i64, i64* %RBP
  %4775 = sub i64 %4774, 40
  %4776 = load i64, i64* %PC
  %4777 = add i64 %4776, 3
  store i64 %4777, i64* %PC
  %4778 = inttoptr i64 %4775 to i32*
  %4779 = load i32, i32* %4778
  %4780 = zext i32 %4779 to i64
  store i64 %4780, i64* %RAX, align 8, !tbaa !2428
  %4781 = load i64, i64* %RAX
  %4782 = load i64, i64* %PC
  %4783 = add i64 %4782, 3
  store i64 %4783, i64* %PC
  %4784 = trunc i64 %4781 to i32
  %4785 = add i32 1, %4784
  %4786 = zext i32 %4785 to i64
  store i64 %4786, i64* %RAX, align 8, !tbaa !2428
  %4787 = icmp ult i32 %4785, %4784
  %4788 = icmp ult i32 %4785, 1
  %4789 = or i1 %4787, %4788
  %4790 = zext i1 %4789 to i8
  %4791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4790, i8* %4791, align 1, !tbaa !2432
  %4792 = and i32 %4785, 255
  %4793 = call i32 @llvm.ctpop.i32(i32 %4792) #17
  %4794 = trunc i32 %4793 to i8
  %4795 = and i8 %4794, 1
  %4796 = xor i8 %4795, 1
  %4797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4796, i8* %4797, align 1, !tbaa !2446
  %4798 = xor i64 1, %4781
  %4799 = trunc i64 %4798 to i32
  %4800 = xor i32 %4799, %4785
  %4801 = lshr i32 %4800, 4
  %4802 = trunc i32 %4801 to i8
  %4803 = and i8 %4802, 1
  %4804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4803, i8* %4804, align 1, !tbaa !2447
  %4805 = icmp eq i32 %4785, 0
  %4806 = zext i1 %4805 to i8
  %4807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4806, i8* %4807, align 1, !tbaa !2448
  %4808 = lshr i32 %4785, 31
  %4809 = trunc i32 %4808 to i8
  %4810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4809, i8* %4810, align 1, !tbaa !2449
  %4811 = lshr i32 %4784, 31
  %4812 = xor i32 %4808, %4811
  %4813 = add nuw nsw i32 %4812, %4808
  %4814 = icmp eq i32 %4813, 2
  %4815 = zext i1 %4814 to i8
  %4816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4815, i8* %4816, align 1, !tbaa !2450
  %4817 = load i32, i32* %EAX
  %4818 = zext i32 %4817 to i64
  %4819 = load i64, i64* %PC
  %4820 = add i64 %4819, 3
  store i64 %4820, i64* %PC
  %4821 = shl i64 %4818, 32
  %4822 = ashr exact i64 %4821, 32
  store i64 %4822, i64* %RDX, align 8, !tbaa !2428
  %4823 = load i64, i64* %RCX
  %4824 = load i64, i64* %RDX
  %4825 = mul i64 %4824, 8
  %4826 = add i64 %4825, %4823
  %4827 = bitcast %union.vec128_t* %XMM0 to i8*
  %4828 = load i64, i64* %PC
  %4829 = add i64 %4828, 5
  store i64 %4829, i64* %PC
  %4830 = bitcast i8* %4827 to double*
  %4831 = load double, double* %4830, align 1
  %4832 = inttoptr i64 %4826 to double*
  store double %4831, double* %4832
  %4833 = load i64, i64* %RBP
  %4834 = sub i64 %4833, 28
  %4835 = load i64, i64* %PC
  %4836 = add i64 %4835, 3
  store i64 %4836, i64* %PC
  %4837 = inttoptr i64 %4834 to i32*
  %4838 = load i32, i32* %4837
  %4839 = zext i32 %4838 to i64
  store i64 %4839, i64* %RAX, align 8, !tbaa !2428
  %4840 = load i64, i64* %RAX
  %4841 = load i64, i64* %PC
  %4842 = add i64 %4841, 3
  store i64 %4842, i64* %PC
  %4843 = trunc i64 %4840 to i32
  %4844 = add i32 1, %4843
  %4845 = zext i32 %4844 to i64
  store i64 %4845, i64* %RAX, align 8, !tbaa !2428
  %4846 = icmp ult i32 %4844, %4843
  %4847 = icmp ult i32 %4844, 1
  %4848 = or i1 %4846, %4847
  %4849 = zext i1 %4848 to i8
  %4850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4849, i8* %4850, align 1, !tbaa !2432
  %4851 = and i32 %4844, 255
  %4852 = call i32 @llvm.ctpop.i32(i32 %4851) #17
  %4853 = trunc i32 %4852 to i8
  %4854 = and i8 %4853, 1
  %4855 = xor i8 %4854, 1
  %4856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4855, i8* %4856, align 1, !tbaa !2446
  %4857 = xor i64 1, %4840
  %4858 = trunc i64 %4857 to i32
  %4859 = xor i32 %4858, %4844
  %4860 = lshr i32 %4859, 4
  %4861 = trunc i32 %4860 to i8
  %4862 = and i8 %4861, 1
  %4863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4862, i8* %4863, align 1, !tbaa !2447
  %4864 = icmp eq i32 %4844, 0
  %4865 = zext i1 %4864 to i8
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4865, i8* %4866, align 1, !tbaa !2448
  %4867 = lshr i32 %4844, 31
  %4868 = trunc i32 %4867 to i8
  %4869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4868, i8* %4869, align 1, !tbaa !2449
  %4870 = lshr i32 %4843, 31
  %4871 = xor i32 %4867, %4870
  %4872 = add nuw nsw i32 %4871, %4867
  %4873 = icmp eq i32 %4872, 2
  %4874 = zext i1 %4873 to i8
  %4875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4874, i8* %4875, align 1, !tbaa !2450
  %4876 = load i64, i64* %RBP
  %4877 = sub i64 %4876, 28
  %4878 = load i32, i32* %EAX
  %4879 = zext i32 %4878 to i64
  %4880 = load i64, i64* %PC
  %4881 = add i64 %4880, 3
  store i64 %4881, i64* %PC
  %4882 = inttoptr i64 %4877 to i32*
  store i32 %4878, i32* %4882
  %4883 = load i64, i64* %PC
  %4884 = sub i64 %4883, 407
  %4885 = load i64, i64* %PC
  %4886 = add i64 %4885, 5
  store i64 %4886, i64* %PC
  %4887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4884, i64* %4887, align 8, !tbaa !2428
  br label %block_40169e

block_401296:                                     ; preds = %block_40128a
  %4888 = load i64, i64* %RBP
  %4889 = sub i64 %4888, 28
  %4890 = load i64, i64* %PC
  %4891 = add i64 %4890, 7
  store i64 %4891, i64* %PC
  %4892 = inttoptr i64 %4889 to i32*
  store i32 0, i32* %4892
  br label %block_40129d

block_401215:                                     ; preds = %block_401206
  %4893 = sub i64 %5260, 44
  %4894 = load i64, i64* %PC
  %4895 = add i64 %4894, 3
  store i64 %4895, i64* %PC
  %4896 = inttoptr i64 %4893 to i32*
  %4897 = load i32, i32* %4896
  %4898 = zext i32 %4897 to i64
  store i64 %4898, i64* %RAX, align 8, !tbaa !2428
  %4899 = load i64, i64* %RAX
  %4900 = load i64, i64* %PC
  %4901 = add i64 %4900, 3
  store i64 %4901, i64* %PC
  %4902 = shl i64 %4899, 32
  %4903 = ashr i64 %4902, 33
  %4904 = trunc i64 %4899 to i8
  %4905 = and i8 %4904, 1
  %4906 = trunc i64 %4903 to i32
  %4907 = and i64 %4903, 4294967295
  store i64 %4907, i64* %RAX, align 8, !tbaa !2428
  %4908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4905, i8* %4908, align 1, !tbaa !2451
  %4909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4910 = and i32 %4906, 255
  %4911 = call i32 @llvm.ctpop.i32(i32 %4910) #17
  %4912 = trunc i32 %4911 to i8
  %4913 = and i8 %4912, 1
  %4914 = xor i8 %4913, 1
  store i8 %4914, i8* %4909, align 1, !tbaa !2451
  %4915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4915, align 1, !tbaa !2451
  %4916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4917 = icmp eq i32 %4906, 0
  %4918 = zext i1 %4917 to i8
  store i8 %4918, i8* %4916, align 1, !tbaa !2451
  %4919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4920 = lshr i32 %4906, 31
  %4921 = trunc i32 %4920 to i8
  store i8 %4921, i8* %4919, align 1, !tbaa !2451
  %4922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4922, align 1, !tbaa !2451
  %4923 = load i64, i64* %RBP
  %4924 = sub i64 %4923, 44
  %4925 = load i32, i32* %EAX
  %4926 = zext i32 %4925 to i64
  %4927 = load i64, i64* %PC
  %4928 = add i64 %4927, 3
  store i64 %4928, i64* %PC
  %4929 = inttoptr i64 %4924 to i32*
  store i32 %4925, i32* %4929
  %4930 = load i64, i64* %RBP
  %4931 = sub i64 %4930, 28
  %4932 = load i64, i64* %PC
  %4933 = add i64 %4932, 7
  store i64 %4933, i64* %PC
  %4934 = inttoptr i64 %4931 to i32*
  store i32 0, i32* %4934
  br label %block_401225

block_40168b:                                     ; preds = %block_401684, %block_40183a
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.6, %block_401684 ], [ %MEMORY.4, %block_40183a ]
  %4935 = load i64, i64* %RBP
  %4936 = sub i64 %4935, 36
  %4937 = load i64, i64* %PC
  %4938 = add i64 %4937, 3
  store i64 %4938, i64* %PC
  %4939 = inttoptr i64 %4936 to i32*
  %4940 = load i32, i32* %4939
  %4941 = zext i32 %4940 to i64
  store i64 %4941, i64* %RAX, align 8, !tbaa !2428
  %4942 = load i32, i32* %EAX
  %4943 = zext i32 %4942 to i64
  %4944 = load i64, i64* %RBP
  %4945 = sub i64 %4944, 48
  %4946 = load i64, i64* %PC
  %4947 = add i64 %4946, 3
  store i64 %4947, i64* %PC
  %4948 = inttoptr i64 %4945 to i32*
  %4949 = load i32, i32* %4948
  %4950 = sub i32 %4942, %4949
  %4951 = icmp ult i32 %4942, %4949
  %4952 = zext i1 %4951 to i8
  %4953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4952, i8* %4953, align 1, !tbaa !2432
  %4954 = and i32 %4950, 255
  %4955 = call i32 @llvm.ctpop.i32(i32 %4954) #17
  %4956 = trunc i32 %4955 to i8
  %4957 = and i8 %4956, 1
  %4958 = xor i8 %4957, 1
  %4959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4958, i8* %4959, align 1, !tbaa !2446
  %4960 = xor i32 %4949, %4942
  %4961 = xor i32 %4960, %4950
  %4962 = lshr i32 %4961, 4
  %4963 = trunc i32 %4962 to i8
  %4964 = and i8 %4963, 1
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4964, i8* %4965, align 1, !tbaa !2447
  %4966 = icmp eq i32 %4950, 0
  %4967 = zext i1 %4966 to i8
  %4968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4967, i8* %4968, align 1, !tbaa !2448
  %4969 = lshr i32 %4950, 31
  %4970 = trunc i32 %4969 to i8
  %4971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4970, i8* %4971, align 1, !tbaa !2449
  %4972 = lshr i32 %4942, 31
  %4973 = lshr i32 %4949, 31
  %4974 = xor i32 %4973, %4972
  %4975 = xor i32 %4969, %4972
  %4976 = add nuw nsw i32 %4975, %4974
  %4977 = icmp eq i32 %4976, 2
  %4978 = zext i1 %4977 to i8
  %4979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4978, i8* %4979, align 1, !tbaa !2450
  %4980 = load i64, i64* %PC
  %4981 = add i64 %4980, 444
  %4982 = load i64, i64* %PC
  %4983 = add i64 %4982, 6
  %4984 = load i64, i64* %PC
  %4985 = add i64 %4984, 6
  store i64 %4985, i64* %PC
  %4986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4987 = load i8, i8* %4986, align 1, !tbaa !2449
  %4988 = icmp ne i8 %4987, 0
  %4989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4990 = load i8, i8* %4989, align 1, !tbaa !2450
  %4991 = icmp ne i8 %4990, 0
  %4992 = xor i1 %4988, %4991
  %4993 = xor i1 %4992, true
  %4994 = zext i1 %4993 to i8
  store i8 %4994, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4996 = select i1 %4992, i64 %4983, i64 %4981
  store i64 %4996, i64* %4995, align 8, !tbaa !2428
  %4997 = load i8, i8* %BRANCH_TAKEN
  %4998 = icmp eq i8 %4997, 1
  br i1 %4998, label %block_40184d, label %block_401697

block_40169e:                                     ; preds = %block_401697, %block_4016aa
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_401697 ], [ %MEMORY.4, %block_4016aa ]
  %4999 = load i64, i64* %RBP
  %5000 = sub i64 %4999, 28
  %5001 = load i64, i64* %PC
  %5002 = add i64 %5001, 3
  store i64 %5002, i64* %PC
  %5003 = inttoptr i64 %5000 to i32*
  %5004 = load i32, i32* %5003
  %5005 = zext i32 %5004 to i64
  store i64 %5005, i64* %RAX, align 8, !tbaa !2428
  %5006 = load i32, i32* %EAX
  %5007 = zext i32 %5006 to i64
  %5008 = load i64, i64* %RBP
  %5009 = sub i64 %5008, 36
  %5010 = load i64, i64* %PC
  %5011 = add i64 %5010, 3
  store i64 %5011, i64* %PC
  %5012 = inttoptr i64 %5009 to i32*
  %5013 = load i32, i32* %5012
  %5014 = sub i32 %5006, %5013
  %5015 = icmp ult i32 %5006, %5013
  %5016 = zext i1 %5015 to i8
  %5017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5016, i8* %5017, align 1, !tbaa !2432
  %5018 = and i32 %5014, 255
  %5019 = call i32 @llvm.ctpop.i32(i32 %5018) #17
  %5020 = trunc i32 %5019 to i8
  %5021 = and i8 %5020, 1
  %5022 = xor i8 %5021, 1
  %5023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5022, i8* %5023, align 1, !tbaa !2446
  %5024 = xor i32 %5013, %5006
  %5025 = xor i32 %5024, %5014
  %5026 = lshr i32 %5025, 4
  %5027 = trunc i32 %5026 to i8
  %5028 = and i8 %5027, 1
  %5029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5028, i8* %5029, align 1, !tbaa !2447
  %5030 = icmp eq i32 %5014, 0
  %5031 = zext i1 %5030 to i8
  %5032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5031, i8* %5032, align 1, !tbaa !2448
  %5033 = lshr i32 %5014, 31
  %5034 = trunc i32 %5033 to i8
  %5035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5034, i8* %5035, align 1, !tbaa !2449
  %5036 = lshr i32 %5006, 31
  %5037 = lshr i32 %5013, 31
  %5038 = xor i32 %5037, %5036
  %5039 = xor i32 %5033, %5036
  %5040 = add nuw nsw i32 %5039, %5038
  %5041 = icmp eq i32 %5040, 2
  %5042 = zext i1 %5041 to i8
  %5043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5042, i8* %5043, align 1, !tbaa !2450
  %5044 = load i64, i64* %PC
  %5045 = add i64 %5044, 406
  %5046 = load i64, i64* %PC
  %5047 = add i64 %5046, 6
  %5048 = load i64, i64* %PC
  %5049 = add i64 %5048, 6
  store i64 %5049, i64* %PC
  %5050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5051 = load i8, i8* %5050, align 1, !tbaa !2449
  %5052 = icmp ne i8 %5051, 0
  %5053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5054 = load i8, i8* %5053, align 1, !tbaa !2450
  %5055 = icmp ne i8 %5054, 0
  %5056 = xor i1 %5052, %5055
  %5057 = xor i1 %5056, true
  %5058 = zext i1 %5057 to i8
  store i8 %5058, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5060 = select i1 %5056, i64 %5047, i64 %5045
  store i64 %5060, i64* %5059, align 8, !tbaa !2428
  %5061 = load i8, i8* %BRANCH_TAKEN
  %5062 = icmp eq i8 %5061, 1
  br i1 %5062, label %block_40183a, label %block_4016aa

block_40128a:                                     ; preds = %block_401283, %block_4015ad
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.6, %block_401283 ], [ %MEMORY.2, %block_4015ad ]
  %5063 = load i64, i64* %RBP
  %5064 = sub i64 %5063, 36
  %5065 = load i64, i64* %PC
  %5066 = add i64 %5065, 3
  store i64 %5066, i64* %PC
  %5067 = inttoptr i64 %5064 to i32*
  %5068 = load i32, i32* %5067
  %5069 = zext i32 %5068 to i64
  store i64 %5069, i64* %RAX, align 8, !tbaa !2428
  %5070 = load i32, i32* %EAX
  %5071 = zext i32 %5070 to i64
  %5072 = load i64, i64* %RBP
  %5073 = sub i64 %5072, 48
  %5074 = load i64, i64* %PC
  %5075 = add i64 %5074, 3
  store i64 %5075, i64* %PC
  %5076 = inttoptr i64 %5073 to i32*
  %5077 = load i32, i32* %5076
  %5078 = sub i32 %5070, %5077
  %5079 = icmp ult i32 %5070, %5077
  %5080 = zext i1 %5079 to i8
  %5081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5080, i8* %5081, align 1, !tbaa !2432
  %5082 = and i32 %5078, 255
  %5083 = call i32 @llvm.ctpop.i32(i32 %5082) #17
  %5084 = trunc i32 %5083 to i8
  %5085 = and i8 %5084, 1
  %5086 = xor i8 %5085, 1
  %5087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5086, i8* %5087, align 1, !tbaa !2446
  %5088 = xor i32 %5077, %5070
  %5089 = xor i32 %5088, %5078
  %5090 = lshr i32 %5089, 4
  %5091 = trunc i32 %5090 to i8
  %5092 = and i8 %5091, 1
  %5093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5092, i8* %5093, align 1, !tbaa !2447
  %5094 = icmp eq i32 %5078, 0
  %5095 = zext i1 %5094 to i8
  %5096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5095, i8* %5096, align 1, !tbaa !2448
  %5097 = lshr i32 %5078, 31
  %5098 = trunc i32 %5097 to i8
  %5099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5098, i8* %5099, align 1, !tbaa !2449
  %5100 = lshr i32 %5070, 31
  %5101 = lshr i32 %5077, 31
  %5102 = xor i32 %5101, %5100
  %5103 = xor i32 %5097, %5100
  %5104 = add nuw nsw i32 %5103, %5102
  %5105 = icmp eq i32 %5104, 2
  %5106 = zext i1 %5105 to i8
  %5107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5106, i8* %5107, align 1, !tbaa !2450
  %5108 = load i64, i64* %PC
  %5109 = add i64 %5108, 1007
  %5110 = load i64, i64* %PC
  %5111 = add i64 %5110, 6
  %5112 = load i64, i64* %PC
  %5113 = add i64 %5112, 6
  store i64 %5113, i64* %PC
  %5114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5115 = load i8, i8* %5114, align 1, !tbaa !2449
  %5116 = icmp ne i8 %5115, 0
  %5117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5118 = load i8, i8* %5117, align 1, !tbaa !2450
  %5119 = icmp ne i8 %5118, 0
  %5120 = xor i1 %5116, %5119
  %5121 = xor i1 %5120, true
  %5122 = zext i1 %5121 to i8
  store i8 %5122, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5124 = select i1 %5120, i64 %5111, i64 %5109
  store i64 %5124, i64* %5123, align 8, !tbaa !2428
  %5125 = load i8, i8* %BRANCH_TAKEN
  %5126 = icmp eq i8 %5125, 1
  br i1 %5126, label %block_40167f, label %block_401296

block_40125d:                                     ; preds = %block_401225
  %5127 = sub i64 %3601, 48
  %5128 = load i64, i64* %PC
  %5129 = add i64 %5128, 3
  store i64 %5129, i64* %PC
  %5130 = inttoptr i64 %5127 to i32*
  %5131 = load i32, i32* %5130
  %5132 = zext i32 %5131 to i64
  store i64 %5132, i64* %RAX, align 8, !tbaa !2428
  %5133 = load i64, i64* %RAX
  %5134 = load i64, i64* %PC
  %5135 = add i64 %5134, 3
  store i64 %5135, i64* %PC
  %5136 = trunc i64 %5133 to i32
  %5137 = shl i32 %5136, 1
  %5138 = icmp slt i32 %5136, 0
  %5139 = icmp slt i32 %5137, 0
  %5140 = xor i1 %5138, %5139
  %5141 = zext i32 %5137 to i64
  store i64 %5141, i64* %RAX, align 8, !tbaa !2428
  %5142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5143 = zext i1 %5138 to i8
  store i8 %5143, i8* %5142, align 1, !tbaa !2451
  %5144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5145 = and i32 %5137, 254
  %5146 = call i32 @llvm.ctpop.i32(i32 %5145) #17
  %5147 = trunc i32 %5146 to i8
  %5148 = and i8 %5147, 1
  %5149 = xor i8 %5148, 1
  store i8 %5149, i8* %5144, align 1, !tbaa !2451
  %5150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5150, align 1, !tbaa !2451
  %5151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5152 = icmp eq i32 %5137, 0
  %5153 = zext i1 %5152 to i8
  store i8 %5153, i8* %5151, align 1, !tbaa !2451
  %5154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5155 = lshr i32 %5137, 31
  %5156 = trunc i32 %5155 to i8
  store i8 %5156, i8* %5154, align 1, !tbaa !2451
  %5157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5158 = zext i1 %5140 to i8
  store i8 %5158, i8* %5157, align 1, !tbaa !2451
  %5159 = load i64, i64* %RBP
  %5160 = sub i64 %5159, 48
  %5161 = load i32, i32* %EAX
  %5162 = zext i32 %5161 to i64
  %5163 = load i64, i64* %PC
  %5164 = add i64 %5163, 3
  store i64 %5164, i64* %PC
  %5165 = inttoptr i64 %5160 to i32*
  store i32 %5161, i32* %5165
  %5166 = load i64, i64* %PC
  %5167 = sub i64 %5166, 96
  %5168 = load i64, i64* %PC
  %5169 = add i64 %5168, 5
  store i64 %5169, i64* %PC
  %5170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5167, i64* %5170, align 8, !tbaa !2428
  br label %block_401206

block_401206:                                     ; preds = %block_40125d, %block_4011e0
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_4011e0 ], [ %MEMORY.1, %block_40125d ]
  %5171 = load i64, i64* %RBP
  %5172 = sub i64 %5171, 48
  %5173 = load i64, i64* %PC
  %5174 = add i64 %5173, 3
  store i64 %5174, i64* %PC
  %5175 = inttoptr i64 %5172 to i32*
  %5176 = load i32, i32* %5175
  %5177 = zext i32 %5176 to i64
  store i64 %5177, i64* %RAX, align 8, !tbaa !2428
  %5178 = load i64, i64* %RAX
  %5179 = load i64, i64* %PC
  %5180 = add i64 %5179, 3
  store i64 %5180, i64* %PC
  %5181 = and i64 %5178, 4294967295
  %5182 = shl i64 %5181, 2
  %5183 = trunc i64 %5182 to i32
  %5184 = icmp slt i32 %5183, 0
  %5185 = shl i32 %5183, 1
  %5186 = zext i32 %5185 to i64
  store i64 %5186, i64* %RAX, align 8, !tbaa !2428
  %5187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5188 = zext i1 %5184 to i8
  store i8 %5188, i8* %5187, align 1, !tbaa !2451
  %5189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5190 = and i32 %5185, 254
  %5191 = call i32 @llvm.ctpop.i32(i32 %5190) #17
  %5192 = trunc i32 %5191 to i8
  %5193 = and i8 %5192, 1
  %5194 = xor i8 %5193, 1
  store i8 %5194, i8* %5189, align 1, !tbaa !2451
  %5195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5195, align 1, !tbaa !2451
  %5196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5197 = icmp eq i32 %5185, 0
  %5198 = zext i1 %5197 to i8
  store i8 %5198, i8* %5196, align 1, !tbaa !2451
  %5199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5200 = lshr i32 %5185, 31
  %5201 = trunc i32 %5200 to i8
  store i8 %5201, i8* %5199, align 1, !tbaa !2451
  %5202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5202, align 1, !tbaa !2451
  %5203 = load i32, i32* %EAX
  %5204 = zext i32 %5203 to i64
  %5205 = load i64, i64* %RBP
  %5206 = sub i64 %5205, 44
  %5207 = load i64, i64* %PC
  %5208 = add i64 %5207, 3
  store i64 %5208, i64* %PC
  %5209 = inttoptr i64 %5206 to i32*
  %5210 = load i32, i32* %5209
  %5211 = sub i32 %5203, %5210
  %5212 = icmp ult i32 %5203, %5210
  %5213 = zext i1 %5212 to i8
  %5214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5213, i8* %5214, align 1, !tbaa !2432
  %5215 = and i32 %5211, 255
  %5216 = call i32 @llvm.ctpop.i32(i32 %5215) #17
  %5217 = trunc i32 %5216 to i8
  %5218 = and i8 %5217, 1
  %5219 = xor i8 %5218, 1
  %5220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5219, i8* %5220, align 1, !tbaa !2446
  %5221 = xor i32 %5210, %5203
  %5222 = xor i32 %5221, %5211
  %5223 = lshr i32 %5222, 4
  %5224 = trunc i32 %5223 to i8
  %5225 = and i8 %5224, 1
  %5226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5225, i8* %5226, align 1, !tbaa !2447
  %5227 = icmp eq i32 %5211, 0
  %5228 = zext i1 %5227 to i8
  %5229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5228, i8* %5229, align 1, !tbaa !2448
  %5230 = lshr i32 %5211, 31
  %5231 = trunc i32 %5230 to i8
  %5232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5231, i8* %5232, align 1, !tbaa !2449
  %5233 = lshr i32 %5203, 31
  %5234 = lshr i32 %5210, 31
  %5235 = xor i32 %5234, %5233
  %5236 = xor i32 %5230, %5233
  %5237 = add nuw nsw i32 %5236, %5235
  %5238 = icmp eq i32 %5237, 2
  %5239 = zext i1 %5238 to i8
  %5240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5239, i8* %5240, align 1, !tbaa !2450
  %5241 = load i64, i64* %PC
  %5242 = add i64 %5241, 92
  %5243 = load i64, i64* %PC
  %5244 = add i64 %5243, 6
  %5245 = load i64, i64* %PC
  %5246 = add i64 %5245, 6
  store i64 %5246, i64* %PC
  %5247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5248 = load i8, i8* %5247, align 1, !tbaa !2449
  %5249 = icmp ne i8 %5248, 0
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5251 = load i8, i8* %5250, align 1, !tbaa !2450
  %5252 = icmp ne i8 %5251, 0
  %5253 = xor i1 %5249, %5252
  %5254 = xor i1 %5253, true
  %5255 = zext i1 %5254 to i8
  store i8 %5255, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5257 = select i1 %5253, i64 %5244, i64 %5242
  store i64 %5257, i64* %5256, align 8, !tbaa !2428
  %5258 = load i8, i8* %BRANCH_TAKEN
  %5259 = icmp eq i8 %5258, 1
  %5260 = load i64, i64* %RBP
  br i1 %5259, label %block_40126b, label %block_401215

block_401684:                                     ; preds = %block_40126b
  %5261 = inttoptr i64 %310 to i32*
  store i32 1, i32* %5261
  br label %block_40168b

block_401697:                                     ; preds = %block_40168b
  %5262 = load i64, i64* %RBP
  %5263 = sub i64 %5262, 28
  %5264 = load i64, i64* %PC
  %5265 = add i64 %5264, 7
  store i64 %5265, i64* %PC
  %5266 = inttoptr i64 %5263 to i32*
  store i32 0, i32* %5266
  br label %block_40169e

block_401283:                                     ; preds = %block_40126b
  %5267 = inttoptr i64 %310 to i32*
  store i32 0, i32* %5267
  br label %block_40128a
}

; Function Attrs: noinline
define %struct.Memory* @sub_400e60_makewt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400e60:
  %state.i319 = alloca %struct.State*, align 8
  %curr_pc.i320 = alloca i64, align 8
  %memory.i321 = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i322 = alloca i8, align 1
  %SS_BASE.i323 = alloca i64, align 8
  %ES_BASE.i324 = alloca i64, align 8
  %DS_BASE.i325 = alloca i64, align 8
  %CS_BASE.i326 = alloca i64, align 8
  %STATE.i327 = alloca %struct.State*, align 8
  %MEMORY.i328 = alloca %struct.Memory*, align 8
  %_DR0.i329 = alloca i64*, align 8
  %_DR1.i330 = alloca i64*, align 8
  %_DR2.i331 = alloca i64*, align 8
  %_DR3.i332 = alloca i64*, align 8
  %_DR4.i333 = alloca i64*, align 8
  %_DR5.i334 = alloca i64*, align 8
  %_DR6.i335 = alloca i64*, align 8
  %_DR7.i336 = alloca i64*, align 8
  %CR0.i337 = alloca i64*, align 8
  %CR1.i338 = alloca i64*, align 8
  %CR2.i339 = alloca i64*, align 8
  %CR3.i340 = alloca i64*, align 8
  %CR4.i341 = alloca i64*, align 8
  %CR8.i342 = alloca i64*, align 8
  %state.i160 = alloca %struct.State*, align 8
  %curr_pc.i161 = alloca i64, align 8
  %memory.i162 = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i163 = alloca i8, align 1
  %SS_BASE.i164 = alloca i64, align 8
  %ES_BASE.i165 = alloca i64, align 8
  %DS_BASE.i166 = alloca i64, align 8
  %CS_BASE.i167 = alloca i64, align 8
  %STATE.i168 = alloca %struct.State*, align 8
  %MEMORY.i169 = alloca %struct.Memory*, align 8
  %_DR0.i170 = alloca i64*, align 8
  %_DR1.i171 = alloca i64*, align 8
  %_DR2.i172 = alloca i64*, align 8
  %_DR3.i173 = alloca i64*, align 8
  %_DR4.i174 = alloca i64*, align 8
  %_DR5.i175 = alloca i64*, align 8
  %_DR6.i176 = alloca i64*, align 8
  %_DR7.i177 = alloca i64*, align 8
  %CR0.i178 = alloca i64*, align 8
  %CR1.i179 = alloca i64*, align 8
  %CR2.i180 = alloca i64*, align 8
  %CR3.i181 = alloca i64*, align 8
  %CR4.i182 = alloca i64*, align 8
  %CR8.i183 = alloca i64*, align 8
  %state.i1 = alloca %struct.State*, align 8
  %curr_pc.i2 = alloca i64, align 8
  %memory.i3 = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i4 = alloca i8, align 1
  %SS_BASE.i5 = alloca i64, align 8
  %ES_BASE.i6 = alloca i64, align 8
  %DS_BASE.i7 = alloca i64, align 8
  %CS_BASE.i8 = alloca i64, align 8
  %STATE.i9 = alloca %struct.State*, align 8
  %MEMORY.i10 = alloca %struct.Memory*, align 8
  %_DR0.i11 = alloca i64*, align 8
  %_DR1.i12 = alloca i64*, align 8
  %_DR2.i13 = alloca i64*, align 8
  %_DR3.i14 = alloca i64*, align 8
  %_DR4.i15 = alloca i64*, align 8
  %_DR5.i16 = alloca i64*, align 8
  %_DR6.i17 = alloca i64*, align 8
  %_DR7.i18 = alloca i64*, align 8
  %CR0.i19 = alloca i64*, align 8
  %CR1.i20 = alloca i64*, align 8
  %CR2.i21 = alloca i64*, align 8
  %CR3.i22 = alloca i64*, align 8
  %CR4.i23 = alloca i64*, align 8
  %CR8.i24 = alloca i64*, align 8
  %state.i = alloca %struct.State*, align 8
  %curr_pc.i = alloca i64, align 8
  %memory.i = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i = alloca i8, align 1
  %SS_BASE.i = alloca i64, align 8
  %ES_BASE.i = alloca i64, align 8
  %DS_BASE.i = alloca i64, align 8
  %CS_BASE.i = alloca i64, align 8
  %STATE.i = alloca %struct.State*, align 8
  %MEMORY.i = alloca %struct.Memory*, align 8
  %_DR0.i = alloca i64*, align 8
  %_DR1.i = alloca i64*, align 8
  %_DR2.i = alloca i64*, align 8
  %_DR3.i = alloca i64*, align 8
  %_DR4.i = alloca i64*, align 8
  %_DR5.i = alloca i64*, align 8
  %_DR6.i = alloca i64*, align 8
  %_DR7.i = alloca i64*, align 8
  %CR0.i = alloca i64*, align 8
  %CR1.i = alloca i64*, align 8
  %CR2.i = alloca i64*, align 8
  %CR3.i = alloca i64*, align 8
  %CR4.i = alloca i64*, align 8
  %CR8.i = alloca i64*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %41 to %"class.std::bitset"*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %45 to %union.vec128_t*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %47 to %union.vec128_t*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %51 to %union.vec128_t*
  %52 = load i64, i64* %RBP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %56 = load i64, i64* %55, align 8, !tbaa !2428
  %57 = add i64 %56, -8
  %58 = inttoptr i64 %57 to i64*
  store i64 %52, i64* %58
  store i64 %57, i64* %55, align 8, !tbaa !2428
  %59 = load i64, i64* %RSP
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %RBP, align 8, !tbaa !2428
  %62 = load i64, i64* %RSP
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = sub i64 %62, 64
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  %66 = icmp ult i64 %62, 64
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = trunc i64 %65 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #17
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 64, %62
  %77 = xor i64 %76, %65
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i64 %65, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i64 %65, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i64 %62, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %88
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 4
  %96 = load i32, i32* %EDI
  %97 = zext i32 %96 to i64
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %95 to i32*
  store i32 %96, i32* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 16
  %103 = load i64, i64* %RSI
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 24
  %109 = load i64, i64* %RDX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %108 to i64*
  store i64 %109, i64* %112
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 4
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %114 to i32*
  %118 = load i32, i32* %117
  %119 = sub i32 %118, 2
  %120 = icmp ult i32 %118, 2
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %121, i8* %122, align 1, !tbaa !2432
  %123 = and i32 %119, 255
  %124 = call i32 @llvm.ctpop.i32(i32 %123) #17
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %127, i8* %128, align 1, !tbaa !2446
  %129 = xor i32 %118, 2
  %130 = xor i32 %129, %119
  %131 = lshr i32 %130, 4
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %133, i8* %134, align 1, !tbaa !2447
  %135 = icmp eq i32 %119, 0
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %136, i8* %137, align 1, !tbaa !2448
  %138 = lshr i32 %119, 31
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %139, i8* %140, align 1, !tbaa !2449
  %141 = lshr i32 %118, 31
  %142 = xor i32 %138, %141
  %143 = add nuw nsw i32 %142, %141
  %144 = icmp eq i32 %143, 2
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 335
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 6
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 6
  store i64 %152, i64* %PC
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %154 = load i8, i8* %153, align 1, !tbaa !2448
  %155 = icmp ne i8 %154, 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %157 = load i8, i8* %156, align 1, !tbaa !2449
  %158 = icmp ne i8 %157, 0
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %160 = load i8, i8* %159, align 1, !tbaa !2450
  %161 = icmp ne i8 %160, 0
  %162 = xor i1 %158, %161
  %163 = or i1 %155, %162
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %166 = select i1 %163, i64 %148, i64 %150
  store i64 %166, i64* %165, align 8, !tbaa !2428
  %167 = load i8, i8* %BRANCH_TAKEN
  %168 = icmp eq i8 %167, 1
  br i1 %168, label %block_400fc6, label %block_400e7d

block_400f19:                                     ; preds = %block_400f0d
  %169 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 40
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 5
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to double*
  %175 = load double, double* %174
  %176 = bitcast i8* %169 to double*
  store double %175, double* %176, align 1, !tbaa !2452
  %177 = getelementptr inbounds i8, i8* %169, i64 8
  %178 = bitcast i8* %177 to double*
  store double 0.000000e+00, double* %178, align 1, !tbaa !2452
  %179 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 28
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 5
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i32*
  %185 = load i32, i32* %184
  %186 = sitofp i32 %185 to double
  %187 = bitcast i8* %179 to double*
  store double %186, double* %187, align 1, !tbaa !2452
  %188 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %190 = bitcast %union.vec128_t* %XMM1 to i8*
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC
  %193 = bitcast i8* %189 to double*
  %194 = load double, double* %193, align 1
  %195 = getelementptr inbounds i8, i8* %189, i64 8
  %196 = bitcast i8* %195 to i64*
  %197 = load i64, i64* %196, align 1
  %198 = bitcast i8* %190 to double*
  %199 = load double, double* %198, align 1
  %200 = fmul double %194, %199
  %201 = bitcast i8* %188 to double*
  store double %200, double* %201, align 1, !tbaa !2452
  %202 = getelementptr inbounds i8, i8* %188, i64 8
  %203 = bitcast i8* %202 to i64*
  store i64 %197, i64* %203, align 1, !tbaa !2452
  %204 = load i64, i64* %PC
  %205 = sub i64 %204, 2087
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 5
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 5
  store i64 %209, i64* %PC
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %207, i64* %213
  store i64 %212, i64* %210, align 8, !tbaa !2428
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %205, i64* %214, align 8, !tbaa !2428
  %215 = load i64, i64* %PC
  %216 = bitcast %struct.State** %state.i319 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %216)
  %217 = bitcast i64* %curr_pc.i320 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %217)
  %218 = bitcast %struct.Memory** %memory.i321 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %218)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i322)
  %219 = bitcast i64* %SS_BASE.i323 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %219)
  %220 = bitcast i64* %ES_BASE.i324 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %220)
  %221 = bitcast i64* %DS_BASE.i325 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %221)
  %222 = bitcast i64* %CS_BASE.i326 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %222)
  %223 = bitcast %struct.State** %STATE.i327 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %223)
  %224 = bitcast %struct.Memory** %MEMORY.i328 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %224)
  %225 = bitcast i64** %_DR0.i329 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %225)
  %226 = bitcast i64** %_DR1.i330 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %226)
  %227 = bitcast i64** %_DR2.i331 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %227)
  %228 = bitcast i64** %_DR3.i332 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %228)
  %229 = bitcast i64** %_DR4.i333 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %229)
  %230 = bitcast i64** %_DR5.i334 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %230)
  %231 = bitcast i64** %_DR6.i335 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %231)
  %232 = bitcast i64** %_DR7.i336 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %232)
  %233 = bitcast i64** %CR0.i337 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %233)
  %234 = bitcast i64** %CR1.i338 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %234)
  %235 = bitcast i64** %CR2.i339 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %235)
  %236 = bitcast i64** %CR3.i340 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %236)
  %237 = bitcast i64** %CR4.i341 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %237)
  %238 = bitcast i64** %CR8.i342 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %238)
  store %struct.State* %0, %struct.State** %state.i319, align 8, !noalias !2463
  store i64 %215, i64* %curr_pc.i320, align 8, !noalias !2463
  store %struct.Memory* %MEMORY.0, %struct.Memory** %memory.i321, align 8, !noalias !2463
  store i8 0, i8* %BRANCH_TAKEN.i322, align 1, !noalias !2463
  store i64 0, i64* %SS_BASE.i323, align 8, !noalias !2463
  store i64 0, i64* %ES_BASE.i324, align 8, !noalias !2463
  store i64 0, i64* %DS_BASE.i325, align 8, !noalias !2463
  store i64 0, i64* %CS_BASE.i326, align 8, !noalias !2463
  store %struct.State* %0, %struct.State** %STATE.i327, align 8, !noalias !2463
  store %struct.Memory* %MEMORY.0, %struct.Memory** %MEMORY.i328, align 8, !noalias !2463
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %240 = getelementptr inbounds %struct.GPR, %struct.GPR* %239, i32 0, i32 33
  %241 = getelementptr inbounds %struct.Reg, %struct.Reg* %240, i32 0, i32 0
  %PC.i343 = bitcast %union.anon* %241 to i64*
  store i64 %215, i64* %PC.i343, align 8, !alias.scope !2467, !noalias !2468
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %243 = getelementptr inbounds %struct.GPR, %struct.GPR* %242, i32 0, i32 1
  %244 = getelementptr inbounds %struct.Reg, %struct.Reg* %243, i32 0, i32 0
  %245 = bitcast %union.anon* %244 to %struct.anon.2*
  %AH.i344 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %245, i32 0, i32 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %247 = getelementptr inbounds %struct.GPR, %struct.GPR* %246, i32 0, i32 3
  %248 = getelementptr inbounds %struct.Reg, %struct.Reg* %247, i32 0, i32 0
  %249 = bitcast %union.anon* %248 to %struct.anon.2*
  %BH.i345 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %249, i32 0, i32 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %251 = getelementptr inbounds %struct.GPR, %struct.GPR* %250, i32 0, i32 5
  %252 = getelementptr inbounds %struct.Reg, %struct.Reg* %251, i32 0, i32 0
  %253 = bitcast %union.anon* %252 to %struct.anon.2*
  %CH.i346 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %253, i32 0, i32 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %255 = getelementptr inbounds %struct.GPR, %struct.GPR* %254, i32 0, i32 7
  %256 = getelementptr inbounds %struct.Reg, %struct.Reg* %255, i32 0, i32 0
  %257 = bitcast %union.anon* %256 to %struct.anon.2*
  %DH.i347 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %257, i32 0, i32 1
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %259 = getelementptr inbounds %struct.GPR, %struct.GPR* %258, i32 0, i32 1
  %260 = getelementptr inbounds %struct.Reg, %struct.Reg* %259, i32 0, i32 0
  %261 = bitcast %union.anon* %260 to %struct.anon.2*
  %AL.i348 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %261, i32 0, i32 0
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %263 = getelementptr inbounds %struct.GPR, %struct.GPR* %262, i32 0, i32 3
  %264 = getelementptr inbounds %struct.Reg, %struct.Reg* %263, i32 0, i32 0
  %265 = bitcast %union.anon* %264 to %struct.anon.2*
  %BL.i349 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %265, i32 0, i32 0
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %267 = getelementptr inbounds %struct.GPR, %struct.GPR* %266, i32 0, i32 5
  %268 = getelementptr inbounds %struct.Reg, %struct.Reg* %267, i32 0, i32 0
  %269 = bitcast %union.anon* %268 to %struct.anon.2*
  %CL.i350 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %269, i32 0, i32 0
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %271 = getelementptr inbounds %struct.GPR, %struct.GPR* %270, i32 0, i32 7
  %272 = getelementptr inbounds %struct.Reg, %struct.Reg* %271, i32 0, i32 0
  %273 = bitcast %union.anon* %272 to %struct.anon.2*
  %DL.i351 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %273, i32 0, i32 0
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %275 = getelementptr inbounds %struct.GPR, %struct.GPR* %274, i32 0, i32 9
  %276 = getelementptr inbounds %struct.Reg, %struct.Reg* %275, i32 0, i32 0
  %277 = bitcast %union.anon* %276 to %struct.anon.2*
  %SIL.i352 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %277, i32 0, i32 0
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %279 = getelementptr inbounds %struct.GPR, %struct.GPR* %278, i32 0, i32 11
  %280 = getelementptr inbounds %struct.Reg, %struct.Reg* %279, i32 0, i32 0
  %281 = bitcast %union.anon* %280 to %struct.anon.2*
  %DIL.i353 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %281, i32 0, i32 0
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %283 = getelementptr inbounds %struct.GPR, %struct.GPR* %282, i32 0, i32 13
  %284 = getelementptr inbounds %struct.Reg, %struct.Reg* %283, i32 0, i32 0
  %285 = bitcast %union.anon* %284 to %struct.anon.2*
  %SPL.i354 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %285, i32 0, i32 0
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %287 = getelementptr inbounds %struct.GPR, %struct.GPR* %286, i32 0, i32 15
  %288 = getelementptr inbounds %struct.Reg, %struct.Reg* %287, i32 0, i32 0
  %289 = bitcast %union.anon* %288 to %struct.anon.2*
  %BPL.i355 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %289, i32 0, i32 0
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %291 = getelementptr inbounds %struct.GPR, %struct.GPR* %290, i32 0, i32 17
  %292 = getelementptr inbounds %struct.Reg, %struct.Reg* %291, i32 0, i32 0
  %293 = bitcast %union.anon* %292 to %struct.anon.2*
  %R8B.i356 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %293, i32 0, i32 0
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %295 = getelementptr inbounds %struct.GPR, %struct.GPR* %294, i32 0, i32 19
  %296 = getelementptr inbounds %struct.Reg, %struct.Reg* %295, i32 0, i32 0
  %297 = bitcast %union.anon* %296 to %struct.anon.2*
  %R9B.i357 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %297, i32 0, i32 0
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %299 = getelementptr inbounds %struct.GPR, %struct.GPR* %298, i32 0, i32 21
  %300 = getelementptr inbounds %struct.Reg, %struct.Reg* %299, i32 0, i32 0
  %301 = bitcast %union.anon* %300 to %struct.anon.2*
  %R10B.i358 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %301, i32 0, i32 0
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %303 = getelementptr inbounds %struct.GPR, %struct.GPR* %302, i32 0, i32 23
  %304 = getelementptr inbounds %struct.Reg, %struct.Reg* %303, i32 0, i32 0
  %305 = bitcast %union.anon* %304 to %struct.anon.2*
  %R11B.i359 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %305, i32 0, i32 0
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %307 = getelementptr inbounds %struct.GPR, %struct.GPR* %306, i32 0, i32 25
  %308 = getelementptr inbounds %struct.Reg, %struct.Reg* %307, i32 0, i32 0
  %309 = bitcast %union.anon* %308 to %struct.anon.2*
  %R12B.i360 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %309, i32 0, i32 0
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %311 = getelementptr inbounds %struct.GPR, %struct.GPR* %310, i32 0, i32 27
  %312 = getelementptr inbounds %struct.Reg, %struct.Reg* %311, i32 0, i32 0
  %313 = bitcast %union.anon* %312 to %struct.anon.2*
  %R13B.i361 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %313, i32 0, i32 0
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %315 = getelementptr inbounds %struct.GPR, %struct.GPR* %314, i32 0, i32 29
  %316 = getelementptr inbounds %struct.Reg, %struct.Reg* %315, i32 0, i32 0
  %317 = bitcast %union.anon* %316 to %struct.anon.2*
  %R14B.i362 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %317, i32 0, i32 0
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %319 = getelementptr inbounds %struct.GPR, %struct.GPR* %318, i32 0, i32 31
  %320 = getelementptr inbounds %struct.Reg, %struct.Reg* %319, i32 0, i32 0
  %321 = bitcast %union.anon* %320 to %struct.anon.2*
  %R15B.i363 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %321, i32 0, i32 0
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %323 = getelementptr inbounds %struct.GPR, %struct.GPR* %322, i32 0, i32 1
  %324 = getelementptr inbounds %struct.Reg, %struct.Reg* %323, i32 0, i32 0
  %AX.i364 = bitcast %union.anon* %324 to i16*
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %326 = getelementptr inbounds %struct.GPR, %struct.GPR* %325, i32 0, i32 3
  %327 = getelementptr inbounds %struct.Reg, %struct.Reg* %326, i32 0, i32 0
  %BX.i365 = bitcast %union.anon* %327 to i16*
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %329 = getelementptr inbounds %struct.GPR, %struct.GPR* %328, i32 0, i32 5
  %330 = getelementptr inbounds %struct.Reg, %struct.Reg* %329, i32 0, i32 0
  %CX.i366 = bitcast %union.anon* %330 to i16*
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %332 = getelementptr inbounds %struct.GPR, %struct.GPR* %331, i32 0, i32 7
  %333 = getelementptr inbounds %struct.Reg, %struct.Reg* %332, i32 0, i32 0
  %DX.i367 = bitcast %union.anon* %333 to i16*
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %335 = getelementptr inbounds %struct.GPR, %struct.GPR* %334, i32 0, i32 9
  %336 = getelementptr inbounds %struct.Reg, %struct.Reg* %335, i32 0, i32 0
  %SI.i368 = bitcast %union.anon* %336 to i16*
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %338 = getelementptr inbounds %struct.GPR, %struct.GPR* %337, i32 0, i32 11
  %339 = getelementptr inbounds %struct.Reg, %struct.Reg* %338, i32 0, i32 0
  %DI.i369 = bitcast %union.anon* %339 to i16*
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %341 = getelementptr inbounds %struct.GPR, %struct.GPR* %340, i32 0, i32 13
  %342 = getelementptr inbounds %struct.Reg, %struct.Reg* %341, i32 0, i32 0
  %SP.i370 = bitcast %union.anon* %342 to i16*
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %344 = getelementptr inbounds %struct.GPR, %struct.GPR* %343, i32 0, i32 15
  %345 = getelementptr inbounds %struct.Reg, %struct.Reg* %344, i32 0, i32 0
  %BP.i371 = bitcast %union.anon* %345 to i16*
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %347 = getelementptr inbounds %struct.GPR, %struct.GPR* %346, i32 0, i32 17
  %348 = getelementptr inbounds %struct.Reg, %struct.Reg* %347, i32 0, i32 0
  %R8W.i372 = bitcast %union.anon* %348 to i16*
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %350 = getelementptr inbounds %struct.GPR, %struct.GPR* %349, i32 0, i32 19
  %351 = getelementptr inbounds %struct.Reg, %struct.Reg* %350, i32 0, i32 0
  %R9W.i373 = bitcast %union.anon* %351 to i16*
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %353 = getelementptr inbounds %struct.GPR, %struct.GPR* %352, i32 0, i32 21
  %354 = getelementptr inbounds %struct.Reg, %struct.Reg* %353, i32 0, i32 0
  %R10W.i374 = bitcast %union.anon* %354 to i16*
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %356 = getelementptr inbounds %struct.GPR, %struct.GPR* %355, i32 0, i32 23
  %357 = getelementptr inbounds %struct.Reg, %struct.Reg* %356, i32 0, i32 0
  %R11W.i375 = bitcast %union.anon* %357 to i16*
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %359 = getelementptr inbounds %struct.GPR, %struct.GPR* %358, i32 0, i32 25
  %360 = getelementptr inbounds %struct.Reg, %struct.Reg* %359, i32 0, i32 0
  %R12W.i376 = bitcast %union.anon* %360 to i16*
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %362 = getelementptr inbounds %struct.GPR, %struct.GPR* %361, i32 0, i32 27
  %363 = getelementptr inbounds %struct.Reg, %struct.Reg* %362, i32 0, i32 0
  %R13W.i377 = bitcast %union.anon* %363 to i16*
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %365 = getelementptr inbounds %struct.GPR, %struct.GPR* %364, i32 0, i32 29
  %366 = getelementptr inbounds %struct.Reg, %struct.Reg* %365, i32 0, i32 0
  %R14W.i378 = bitcast %union.anon* %366 to i16*
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %368 = getelementptr inbounds %struct.GPR, %struct.GPR* %367, i32 0, i32 31
  %369 = getelementptr inbounds %struct.Reg, %struct.Reg* %368, i32 0, i32 0
  %R15W.i379 = bitcast %union.anon* %369 to i16*
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %371 = getelementptr inbounds %struct.GPR, %struct.GPR* %370, i32 0, i32 33
  %372 = getelementptr inbounds %struct.Reg, %struct.Reg* %371, i32 0, i32 0
  %IP.i380 = bitcast %union.anon* %372 to i16*
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %374 = getelementptr inbounds %struct.GPR, %struct.GPR* %373, i32 0, i32 1
  %375 = getelementptr inbounds %struct.Reg, %struct.Reg* %374, i32 0, i32 0
  %EAX.i381 = bitcast %union.anon* %375 to i32*
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %377 = getelementptr inbounds %struct.GPR, %struct.GPR* %376, i32 0, i32 3
  %378 = getelementptr inbounds %struct.Reg, %struct.Reg* %377, i32 0, i32 0
  %EBX.i382 = bitcast %union.anon* %378 to i32*
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %380 = getelementptr inbounds %struct.GPR, %struct.GPR* %379, i32 0, i32 5
  %381 = getelementptr inbounds %struct.Reg, %struct.Reg* %380, i32 0, i32 0
  %ECX.i383 = bitcast %union.anon* %381 to i32*
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %383 = getelementptr inbounds %struct.GPR, %struct.GPR* %382, i32 0, i32 7
  %384 = getelementptr inbounds %struct.Reg, %struct.Reg* %383, i32 0, i32 0
  %EDX.i384 = bitcast %union.anon* %384 to i32*
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %386 = getelementptr inbounds %struct.GPR, %struct.GPR* %385, i32 0, i32 9
  %387 = getelementptr inbounds %struct.Reg, %struct.Reg* %386, i32 0, i32 0
  %ESI.i385 = bitcast %union.anon* %387 to i32*
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %389 = getelementptr inbounds %struct.GPR, %struct.GPR* %388, i32 0, i32 11
  %390 = getelementptr inbounds %struct.Reg, %struct.Reg* %389, i32 0, i32 0
  %EDI.i386 = bitcast %union.anon* %390 to i32*
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %392 = getelementptr inbounds %struct.GPR, %struct.GPR* %391, i32 0, i32 13
  %393 = getelementptr inbounds %struct.Reg, %struct.Reg* %392, i32 0, i32 0
  %ESP.i387 = bitcast %union.anon* %393 to i32*
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %395 = getelementptr inbounds %struct.GPR, %struct.GPR* %394, i32 0, i32 15
  %396 = getelementptr inbounds %struct.Reg, %struct.Reg* %395, i32 0, i32 0
  %EBP.i388 = bitcast %union.anon* %396 to i32*
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %398 = getelementptr inbounds %struct.GPR, %struct.GPR* %397, i32 0, i32 33
  %399 = getelementptr inbounds %struct.Reg, %struct.Reg* %398, i32 0, i32 0
  %EIP.i389 = bitcast %union.anon* %399 to i32*
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %401 = getelementptr inbounds %struct.GPR, %struct.GPR* %400, i32 0, i32 17
  %402 = getelementptr inbounds %struct.Reg, %struct.Reg* %401, i32 0, i32 0
  %R8D.i390 = bitcast %union.anon* %402 to i32*
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %404 = getelementptr inbounds %struct.GPR, %struct.GPR* %403, i32 0, i32 19
  %405 = getelementptr inbounds %struct.Reg, %struct.Reg* %404, i32 0, i32 0
  %R9D.i391 = bitcast %union.anon* %405 to i32*
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %407 = getelementptr inbounds %struct.GPR, %struct.GPR* %406, i32 0, i32 21
  %408 = getelementptr inbounds %struct.Reg, %struct.Reg* %407, i32 0, i32 0
  %R10D.i392 = bitcast %union.anon* %408 to i32*
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %410 = getelementptr inbounds %struct.GPR, %struct.GPR* %409, i32 0, i32 23
  %411 = getelementptr inbounds %struct.Reg, %struct.Reg* %410, i32 0, i32 0
  %R11D.i393 = bitcast %union.anon* %411 to i32*
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %413 = getelementptr inbounds %struct.GPR, %struct.GPR* %412, i32 0, i32 25
  %414 = getelementptr inbounds %struct.Reg, %struct.Reg* %413, i32 0, i32 0
  %R12D.i394 = bitcast %union.anon* %414 to i32*
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %416 = getelementptr inbounds %struct.GPR, %struct.GPR* %415, i32 0, i32 27
  %417 = getelementptr inbounds %struct.Reg, %struct.Reg* %416, i32 0, i32 0
  %R13D.i395 = bitcast %union.anon* %417 to i32*
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %419 = getelementptr inbounds %struct.GPR, %struct.GPR* %418, i32 0, i32 29
  %420 = getelementptr inbounds %struct.Reg, %struct.Reg* %419, i32 0, i32 0
  %R14D.i396 = bitcast %union.anon* %420 to i32*
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %422 = getelementptr inbounds %struct.GPR, %struct.GPR* %421, i32 0, i32 31
  %423 = getelementptr inbounds %struct.Reg, %struct.Reg* %422, i32 0, i32 0
  %R15D.i397 = bitcast %union.anon* %423 to i32*
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %425 = getelementptr inbounds %struct.GPR, %struct.GPR* %424, i32 0, i32 1
  %426 = getelementptr inbounds %struct.Reg, %struct.Reg* %425, i32 0, i32 0
  %RAX.i398 = bitcast %union.anon* %426 to i64*
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %428 = getelementptr inbounds %struct.GPR, %struct.GPR* %427, i32 0, i32 3
  %429 = getelementptr inbounds %struct.Reg, %struct.Reg* %428, i32 0, i32 0
  %RBX.i399 = bitcast %union.anon* %429 to i64*
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %431 = getelementptr inbounds %struct.GPR, %struct.GPR* %430, i32 0, i32 5
  %432 = getelementptr inbounds %struct.Reg, %struct.Reg* %431, i32 0, i32 0
  %RCX.i400 = bitcast %union.anon* %432 to i64*
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %434 = getelementptr inbounds %struct.GPR, %struct.GPR* %433, i32 0, i32 7
  %435 = getelementptr inbounds %struct.Reg, %struct.Reg* %434, i32 0, i32 0
  %RDX.i401 = bitcast %union.anon* %435 to i64*
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %437 = getelementptr inbounds %struct.GPR, %struct.GPR* %436, i32 0, i32 9
  %438 = getelementptr inbounds %struct.Reg, %struct.Reg* %437, i32 0, i32 0
  %RSI.i402 = bitcast %union.anon* %438 to i64*
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %440 = getelementptr inbounds %struct.GPR, %struct.GPR* %439, i32 0, i32 11
  %441 = getelementptr inbounds %struct.Reg, %struct.Reg* %440, i32 0, i32 0
  %RDI.i403 = bitcast %union.anon* %441 to i64*
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %443 = getelementptr inbounds %struct.GPR, %struct.GPR* %442, i32 0, i32 13
  %444 = getelementptr inbounds %struct.Reg, %struct.Reg* %443, i32 0, i32 0
  %RSP.i404 = bitcast %union.anon* %444 to i64*
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %446 = getelementptr inbounds %struct.GPR, %struct.GPR* %445, i32 0, i32 15
  %447 = getelementptr inbounds %struct.Reg, %struct.Reg* %446, i32 0, i32 0
  %RBP.i405 = bitcast %union.anon* %447 to i64*
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %449 = getelementptr inbounds %struct.GPR, %struct.GPR* %448, i32 0, i32 17
  %450 = getelementptr inbounds %struct.Reg, %struct.Reg* %449, i32 0, i32 0
  %R8.i406 = bitcast %union.anon* %450 to i64*
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %452 = getelementptr inbounds %struct.GPR, %struct.GPR* %451, i32 0, i32 19
  %453 = getelementptr inbounds %struct.Reg, %struct.Reg* %452, i32 0, i32 0
  %R9.i407 = bitcast %union.anon* %453 to i64*
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %455 = getelementptr inbounds %struct.GPR, %struct.GPR* %454, i32 0, i32 21
  %456 = getelementptr inbounds %struct.Reg, %struct.Reg* %455, i32 0, i32 0
  %R10.i408 = bitcast %union.anon* %456 to i64*
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %458 = getelementptr inbounds %struct.GPR, %struct.GPR* %457, i32 0, i32 23
  %459 = getelementptr inbounds %struct.Reg, %struct.Reg* %458, i32 0, i32 0
  %R11.i409 = bitcast %union.anon* %459 to i64*
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %461 = getelementptr inbounds %struct.GPR, %struct.GPR* %460, i32 0, i32 25
  %462 = getelementptr inbounds %struct.Reg, %struct.Reg* %461, i32 0, i32 0
  %R12.i410 = bitcast %union.anon* %462 to i64*
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %464 = getelementptr inbounds %struct.GPR, %struct.GPR* %463, i32 0, i32 27
  %465 = getelementptr inbounds %struct.Reg, %struct.Reg* %464, i32 0, i32 0
  %R13.i411 = bitcast %union.anon* %465 to i64*
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %467 = getelementptr inbounds %struct.GPR, %struct.GPR* %466, i32 0, i32 29
  %468 = getelementptr inbounds %struct.Reg, %struct.Reg* %467, i32 0, i32 0
  %R14.i412 = bitcast %union.anon* %468 to i64*
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %470 = getelementptr inbounds %struct.GPR, %struct.GPR* %469, i32 0, i32 31
  %471 = getelementptr inbounds %struct.Reg, %struct.Reg* %470, i32 0, i32 0
  %R15.i413 = bitcast %union.anon* %471 to i64*
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %473 = getelementptr inbounds %struct.GPR, %struct.GPR* %472, i32 0, i32 33
  %474 = getelementptr inbounds %struct.Reg, %struct.Reg* %473, i32 0, i32 0
  %RIP.i414 = bitcast %union.anon* %474 to i64*
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %476 = getelementptr inbounds %struct.Segments, %struct.Segments* %475, i32 0, i32 1
  %SS.i415 = bitcast %union.SegmentSelector* %476 to i16*
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %478 = getelementptr inbounds %struct.Segments, %struct.Segments* %477, i32 0, i32 3
  %ES.i416 = bitcast %union.SegmentSelector* %478 to i16*
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %480 = getelementptr inbounds %struct.Segments, %struct.Segments* %479, i32 0, i32 5
  %GS.i417 = bitcast %union.SegmentSelector* %480 to i16*
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %482 = getelementptr inbounds %struct.Segments, %struct.Segments* %481, i32 0, i32 7
  %FS.i418 = bitcast %union.SegmentSelector* %482 to i16*
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %484 = getelementptr inbounds %struct.Segments, %struct.Segments* %483, i32 0, i32 9
  %DS.i419 = bitcast %union.SegmentSelector* %484 to i16*
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %486 = getelementptr inbounds %struct.Segments, %struct.Segments* %485, i32 0, i32 11
  %CS.i420 = bitcast %union.SegmentSelector* %486 to i16*
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %488 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %487, i32 0, i32 5
  %489 = getelementptr inbounds %struct.Reg, %struct.Reg* %488, i32 0, i32 0
  %GS_BASE.i421 = bitcast %union.anon* %489 to i64*
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %491 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %490, i32 0, i32 7
  %492 = getelementptr inbounds %struct.Reg, %struct.Reg* %491, i32 0, i32 0
  %FS_BASE.i422 = bitcast %union.anon* %492 to i64*
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %494 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %493, i64 0, i64 0
  %YMM0.i423 = bitcast %union.VectorReg* %494 to %"class.std::bitset"*
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %496 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %495, i64 0, i64 1
  %YMM1.i424 = bitcast %union.VectorReg* %496 to %"class.std::bitset"*
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %498 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %497, i64 0, i64 2
  %YMM2.i425 = bitcast %union.VectorReg* %498 to %"class.std::bitset"*
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %500 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %499, i64 0, i64 3
  %YMM3.i426 = bitcast %union.VectorReg* %500 to %"class.std::bitset"*
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %502 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %501, i64 0, i64 4
  %YMM4.i427 = bitcast %union.VectorReg* %502 to %"class.std::bitset"*
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %504 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %503, i64 0, i64 5
  %YMM5.i428 = bitcast %union.VectorReg* %504 to %"class.std::bitset"*
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %506 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %505, i64 0, i64 6
  %YMM6.i429 = bitcast %union.VectorReg* %506 to %"class.std::bitset"*
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %508 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %507, i64 0, i64 7
  %YMM7.i430 = bitcast %union.VectorReg* %508 to %"class.std::bitset"*
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %510 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %509, i64 0, i64 8
  %YMM8.i431 = bitcast %union.VectorReg* %510 to %"class.std::bitset"*
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %512 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %511, i64 0, i64 9
  %YMM9.i432 = bitcast %union.VectorReg* %512 to %"class.std::bitset"*
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %514 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %513, i64 0, i64 10
  %YMM10.i433 = bitcast %union.VectorReg* %514 to %"class.std::bitset"*
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %516 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %515, i64 0, i64 11
  %YMM11.i434 = bitcast %union.VectorReg* %516 to %"class.std::bitset"*
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %518 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %517, i64 0, i64 12
  %YMM12.i435 = bitcast %union.VectorReg* %518 to %"class.std::bitset"*
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %520 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %519, i64 0, i64 13
  %YMM13.i436 = bitcast %union.VectorReg* %520 to %"class.std::bitset"*
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %522 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %521, i64 0, i64 14
  %YMM14.i437 = bitcast %union.VectorReg* %522 to %"class.std::bitset"*
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %524 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %523, i64 0, i64 15
  %YMM15.i438 = bitcast %union.VectorReg* %524 to %"class.std::bitset"*
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %526 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %525, i64 0, i64 0
  %XMM0.i439 = bitcast %union.VectorReg* %526 to %union.vec128_t*
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %528 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %527, i64 0, i64 1
  %XMM1.i440 = bitcast %union.VectorReg* %528 to %union.vec128_t*
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %530 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %529, i64 0, i64 2
  %XMM2.i441 = bitcast %union.VectorReg* %530 to %union.vec128_t*
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %532 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %531, i64 0, i64 3
  %XMM3.i442 = bitcast %union.VectorReg* %532 to %union.vec128_t*
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %534 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %533, i64 0, i64 4
  %XMM4.i443 = bitcast %union.VectorReg* %534 to %union.vec128_t*
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %536 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %535, i64 0, i64 5
  %XMM5.i444 = bitcast %union.VectorReg* %536 to %union.vec128_t*
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %538 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %537, i64 0, i64 6
  %XMM6.i445 = bitcast %union.VectorReg* %538 to %union.vec128_t*
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %540 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %539, i64 0, i64 7
  %XMM7.i446 = bitcast %union.VectorReg* %540 to %union.vec128_t*
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %542 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %541, i64 0, i64 8
  %XMM8.i447 = bitcast %union.VectorReg* %542 to %union.vec128_t*
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %544 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %543, i64 0, i64 9
  %XMM9.i448 = bitcast %union.VectorReg* %544 to %union.vec128_t*
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %546 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %545, i64 0, i64 10
  %XMM10.i449 = bitcast %union.VectorReg* %546 to %union.vec128_t*
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %548 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %547, i64 0, i64 11
  %XMM11.i450 = bitcast %union.VectorReg* %548 to %union.vec128_t*
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %550 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %549, i64 0, i64 12
  %XMM12.i451 = bitcast %union.VectorReg* %550 to %union.vec128_t*
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %552 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %551, i64 0, i64 13
  %XMM13.i452 = bitcast %union.VectorReg* %552 to %union.vec128_t*
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %554 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %553, i64 0, i64 14
  %XMM14.i453 = bitcast %union.VectorReg* %554 to %union.vec128_t*
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %556 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %555, i64 0, i64 15
  %XMM15.i454 = bitcast %union.VectorReg* %556 to %union.vec128_t*
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %558 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %557, i32 0, i32 0
  %559 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %558, i64 0, i64 0
  %ST0.i455 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %559, i32 0, i32 1
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %561 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %560, i32 0, i32 0
  %562 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %561, i64 0, i64 1
  %ST1.i456 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %562, i32 0, i32 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %564 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %563, i32 0, i32 0
  %565 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %564, i64 0, i64 2
  %ST2.i457 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %565, i32 0, i32 1
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %567 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %566, i32 0, i32 0
  %568 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %567, i64 0, i64 3
  %ST3.i458 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %568, i32 0, i32 1
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %570 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %569, i32 0, i32 0
  %571 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %570, i64 0, i64 4
  %ST4.i459 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %571, i32 0, i32 1
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %573 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %572, i32 0, i32 0
  %574 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %573, i64 0, i64 5
  %ST5.i460 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %574, i32 0, i32 1
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %576 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %575, i32 0, i32 0
  %577 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %576, i64 0, i64 6
  %ST6.i461 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %577, i32 0, i32 1
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %579 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %578, i32 0, i32 0
  %580 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %579, i64 0, i64 7
  %ST7.i462 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %580, i32 0, i32 1
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %582 = getelementptr inbounds %struct.MMX, %struct.MMX* %581, i32 0, i32 0
  %583 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %582, i64 0, i64 0
  %584 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %583, i32 0, i32 1
  %585 = bitcast %union.vec64_t* %584 to %struct.uint64v1_t*
  %586 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %585, i32 0, i32 0
  %MM0.i463 = getelementptr inbounds [1 x i64], [1 x i64]* %586, i64 0, i64 0
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %588 = getelementptr inbounds %struct.MMX, %struct.MMX* %587, i32 0, i32 0
  %589 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %588, i64 0, i64 1
  %590 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %589, i32 0, i32 1
  %591 = bitcast %union.vec64_t* %590 to %struct.uint64v1_t*
  %592 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %591, i32 0, i32 0
  %MM1.i464 = getelementptr inbounds [1 x i64], [1 x i64]* %592, i64 0, i64 0
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %594 = getelementptr inbounds %struct.MMX, %struct.MMX* %593, i32 0, i32 0
  %595 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %594, i64 0, i64 2
  %596 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %595, i32 0, i32 1
  %597 = bitcast %union.vec64_t* %596 to %struct.uint64v1_t*
  %598 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %597, i32 0, i32 0
  %MM2.i465 = getelementptr inbounds [1 x i64], [1 x i64]* %598, i64 0, i64 0
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %600 = getelementptr inbounds %struct.MMX, %struct.MMX* %599, i32 0, i32 0
  %601 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %600, i64 0, i64 3
  %602 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %601, i32 0, i32 1
  %603 = bitcast %union.vec64_t* %602 to %struct.uint64v1_t*
  %604 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %603, i32 0, i32 0
  %MM3.i466 = getelementptr inbounds [1 x i64], [1 x i64]* %604, i64 0, i64 0
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %606 = getelementptr inbounds %struct.MMX, %struct.MMX* %605, i32 0, i32 0
  %607 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %606, i64 0, i64 4
  %608 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %607, i32 0, i32 1
  %609 = bitcast %union.vec64_t* %608 to %struct.uint64v1_t*
  %610 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %609, i32 0, i32 0
  %MM4.i467 = getelementptr inbounds [1 x i64], [1 x i64]* %610, i64 0, i64 0
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %612 = getelementptr inbounds %struct.MMX, %struct.MMX* %611, i32 0, i32 0
  %613 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %612, i64 0, i64 5
  %614 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %613, i32 0, i32 1
  %615 = bitcast %union.vec64_t* %614 to %struct.uint64v1_t*
  %616 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %615, i32 0, i32 0
  %MM5.i468 = getelementptr inbounds [1 x i64], [1 x i64]* %616, i64 0, i64 0
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %618 = getelementptr inbounds %struct.MMX, %struct.MMX* %617, i32 0, i32 0
  %619 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %618, i64 0, i64 6
  %620 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %619, i32 0, i32 1
  %621 = bitcast %union.vec64_t* %620 to %struct.uint64v1_t*
  %622 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %621, i32 0, i32 0
  %MM6.i469 = getelementptr inbounds [1 x i64], [1 x i64]* %622, i64 0, i64 0
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %624 = getelementptr inbounds %struct.MMX, %struct.MMX* %623, i32 0, i32 0
  %625 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %624, i64 0, i64 7
  %626 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %625, i32 0, i32 1
  %627 = bitcast %union.vec64_t* %626 to %struct.uint64v1_t*
  %628 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %627, i32 0, i32 0
  %MM7.i470 = getelementptr inbounds [1 x i64], [1 x i64]* %628, i64 0, i64 0
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i471 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %629, i32 0, i32 5
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i472 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %630, i32 0, i32 1
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i473 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %631, i32 0, i32 11
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i474 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %632, i32 0, i32 13
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i475 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %633, i32 0, i32 3
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i476 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %634, i32 0, i32 9
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i477 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %635, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i329, align 8, !noalias !2463
  store i64* @DR1, i64** %_DR1.i330, align 8, !noalias !2463
  store i64* @DR2, i64** %_DR2.i331, align 8, !noalias !2463
  store i64* @DR3, i64** %_DR3.i332, align 8, !noalias !2463
  store i64* @DR4, i64** %_DR4.i333, align 8, !noalias !2463
  store i64* @DR5, i64** %_DR5.i334, align 8, !noalias !2463
  store i64* @DR6, i64** %_DR6.i335, align 8, !noalias !2463
  store i64* @DR7, i64** %_DR7.i336, align 8, !noalias !2463
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i337, align 8, !noalias !2463
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i338, align 8, !noalias !2463
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i339, align 8, !noalias !2463
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i340, align 8, !noalias !2463
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i341, align 8, !noalias !2463
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i342, align 8, !noalias !2463
  %636 = bitcast %"class.std::bitset"* %YMM0.i423 to double*
  %637 = load double, double* %636, !alias.scope !2467, !noalias !2468
  %638 = load i64, i64* %RSP.i404, !alias.scope !2467, !noalias !2468
  %639 = load %struct.Memory*, %struct.Memory** %MEMORY.i328, !noalias !2463
  %640 = inttoptr i64 %638 to i64*
  %641 = load i64, i64* %640
  store i64 %641, i64* %PC.i343, !alias.scope !2467, !noalias !2468
  %642 = add i64 %638, 8
  store i64 %642, i64* %RSP.i404, !alias.scope !2467, !noalias !2468
  %643 = call double @cos(double %637)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i423, !alias.scope !2467, !noalias !2468
  %644 = bitcast %"class.std::bitset"* %YMM0.i423 to double*
  store double %643, double* %644, !alias.scope !2467, !noalias !2468
  %645 = load %struct.Memory*, %struct.Memory** %MEMORY.i328, !noalias !2463
  %646 = bitcast %struct.State** %state.i319 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %646)
  %647 = bitcast i64* %curr_pc.i320 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %647)
  %648 = bitcast %struct.Memory** %memory.i321 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %648)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i322)
  %649 = bitcast i64* %SS_BASE.i323 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %649)
  %650 = bitcast i64* %ES_BASE.i324 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %650)
  %651 = bitcast i64* %DS_BASE.i325 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %651)
  %652 = bitcast i64* %CS_BASE.i326 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %652)
  %653 = bitcast %struct.State** %STATE.i327 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %653)
  %654 = bitcast %struct.Memory** %MEMORY.i328 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %654)
  %655 = bitcast i64** %_DR0.i329 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %655)
  %656 = bitcast i64** %_DR1.i330 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %656)
  %657 = bitcast i64** %_DR2.i331 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %657)
  %658 = bitcast i64** %_DR3.i332 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %658)
  %659 = bitcast i64** %_DR4.i333 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %659)
  %660 = bitcast i64** %_DR5.i334 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %660)
  %661 = bitcast i64** %_DR6.i335 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %661)
  %662 = bitcast i64** %_DR7.i336 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %662)
  %663 = bitcast i64** %CR0.i337 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %663)
  %664 = bitcast i64** %CR1.i338 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %664)
  %665 = bitcast i64** %CR2.i339 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %665)
  %666 = bitcast i64** %CR3.i340 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %666)
  %667 = bitcast i64** %CR4.i341 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %667)
  %668 = bitcast i64** %CR8.i342 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %668)
  %669 = load i64, i64* %RBP
  %670 = sub i64 %669, 48
  %671 = bitcast %union.vec128_t* %XMM0 to i8*
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  store i64 %673, i64* %PC
  %674 = bitcast i8* %671 to double*
  %675 = load double, double* %674, align 1
  %676 = inttoptr i64 %670 to double*
  store double %675, double* %676
  %677 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %678 = load i64, i64* %RBP
  %679 = sub i64 %678, 40
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 5
  store i64 %681, i64* %PC
  %682 = inttoptr i64 %679 to double*
  %683 = load double, double* %682
  %684 = bitcast i8* %677 to double*
  store double %683, double* %684, align 1, !tbaa !2452
  %685 = getelementptr inbounds i8, i8* %677, i64 8
  %686 = bitcast i8* %685 to double*
  store double 0.000000e+00, double* %686, align 1, !tbaa !2452
  %687 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %688 = load i64, i64* %RBP
  %689 = sub i64 %688, 28
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 5
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i32*
  %693 = load i32, i32* %692
  %694 = sitofp i32 %693 to double
  %695 = bitcast i8* %687 to double*
  store double %694, double* %695, align 1, !tbaa !2452
  %696 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %697 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %698 = bitcast %union.vec128_t* %XMM1 to i8*
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = bitcast i8* %697 to double*
  %702 = load double, double* %701, align 1
  %703 = getelementptr inbounds i8, i8* %697, i64 8
  %704 = bitcast i8* %703 to i64*
  %705 = load i64, i64* %704, align 1
  %706 = bitcast i8* %698 to double*
  %707 = load double, double* %706, align 1
  %708 = fmul double %702, %707
  %709 = bitcast i8* %696 to double*
  store double %708, double* %709, align 1, !tbaa !2452
  %710 = getelementptr inbounds i8, i8* %696, i64 8
  %711 = bitcast i8* %710 to i64*
  store i64 %705, i64* %711, align 1, !tbaa !2452
  %712 = load i64, i64* %PC
  %713 = sub i64 %712, 2063
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 5
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 5
  store i64 %717, i64* %PC
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %719 = load i64, i64* %718, align 8, !tbaa !2428
  %720 = add i64 %719, -8
  %721 = inttoptr i64 %720 to i64*
  store i64 %715, i64* %721
  store i64 %720, i64* %718, align 8, !tbaa !2428
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %713, i64* %722, align 8, !tbaa !2428
  %723 = load i64, i64* %PC
  %724 = bitcast %struct.State** %state.i160 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %724)
  %725 = bitcast i64* %curr_pc.i161 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %725)
  %726 = bitcast %struct.Memory** %memory.i162 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %726)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i163)
  %727 = bitcast i64* %SS_BASE.i164 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %727)
  %728 = bitcast i64* %ES_BASE.i165 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %728)
  %729 = bitcast i64* %DS_BASE.i166 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %729)
  %730 = bitcast i64* %CS_BASE.i167 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %730)
  %731 = bitcast %struct.State** %STATE.i168 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %731)
  %732 = bitcast %struct.Memory** %MEMORY.i169 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %732)
  %733 = bitcast i64** %_DR0.i170 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %733)
  %734 = bitcast i64** %_DR1.i171 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %734)
  %735 = bitcast i64** %_DR2.i172 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %735)
  %736 = bitcast i64** %_DR3.i173 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %736)
  %737 = bitcast i64** %_DR4.i174 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %737)
  %738 = bitcast i64** %_DR5.i175 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %738)
  %739 = bitcast i64** %_DR6.i176 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %739)
  %740 = bitcast i64** %_DR7.i177 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %740)
  %741 = bitcast i64** %CR0.i178 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %741)
  %742 = bitcast i64** %CR1.i179 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %742)
  %743 = bitcast i64** %CR2.i180 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %743)
  %744 = bitcast i64** %CR3.i181 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %744)
  %745 = bitcast i64** %CR4.i182 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %745)
  %746 = bitcast i64** %CR8.i183 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %746)
  store %struct.State* %0, %struct.State** %state.i160, align 8, !noalias !2469
  store i64 %723, i64* %curr_pc.i161, align 8, !noalias !2469
  store %struct.Memory* %645, %struct.Memory** %memory.i162, align 8, !noalias !2469
  store i8 0, i8* %BRANCH_TAKEN.i163, align 1, !noalias !2469
  store i64 0, i64* %SS_BASE.i164, align 8, !noalias !2469
  store i64 0, i64* %ES_BASE.i165, align 8, !noalias !2469
  store i64 0, i64* %DS_BASE.i166, align 8, !noalias !2469
  store i64 0, i64* %CS_BASE.i167, align 8, !noalias !2469
  store %struct.State* %0, %struct.State** %STATE.i168, align 8, !noalias !2469
  store %struct.Memory* %645, %struct.Memory** %MEMORY.i169, align 8, !noalias !2469
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %748 = getelementptr inbounds %struct.GPR, %struct.GPR* %747, i32 0, i32 33
  %749 = getelementptr inbounds %struct.Reg, %struct.Reg* %748, i32 0, i32 0
  %PC.i184 = bitcast %union.anon* %749 to i64*
  store i64 %723, i64* %PC.i184, align 8, !alias.scope !2473, !noalias !2474
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %751 = getelementptr inbounds %struct.GPR, %struct.GPR* %750, i32 0, i32 1
  %752 = getelementptr inbounds %struct.Reg, %struct.Reg* %751, i32 0, i32 0
  %753 = bitcast %union.anon* %752 to %struct.anon.2*
  %AH.i185 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %753, i32 0, i32 1
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %755 = getelementptr inbounds %struct.GPR, %struct.GPR* %754, i32 0, i32 3
  %756 = getelementptr inbounds %struct.Reg, %struct.Reg* %755, i32 0, i32 0
  %757 = bitcast %union.anon* %756 to %struct.anon.2*
  %BH.i186 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %757, i32 0, i32 1
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %759 = getelementptr inbounds %struct.GPR, %struct.GPR* %758, i32 0, i32 5
  %760 = getelementptr inbounds %struct.Reg, %struct.Reg* %759, i32 0, i32 0
  %761 = bitcast %union.anon* %760 to %struct.anon.2*
  %CH.i187 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %761, i32 0, i32 1
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %763 = getelementptr inbounds %struct.GPR, %struct.GPR* %762, i32 0, i32 7
  %764 = getelementptr inbounds %struct.Reg, %struct.Reg* %763, i32 0, i32 0
  %765 = bitcast %union.anon* %764 to %struct.anon.2*
  %DH.i188 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %765, i32 0, i32 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %767 = getelementptr inbounds %struct.GPR, %struct.GPR* %766, i32 0, i32 1
  %768 = getelementptr inbounds %struct.Reg, %struct.Reg* %767, i32 0, i32 0
  %769 = bitcast %union.anon* %768 to %struct.anon.2*
  %AL.i189 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %769, i32 0, i32 0
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %771 = getelementptr inbounds %struct.GPR, %struct.GPR* %770, i32 0, i32 3
  %772 = getelementptr inbounds %struct.Reg, %struct.Reg* %771, i32 0, i32 0
  %773 = bitcast %union.anon* %772 to %struct.anon.2*
  %BL.i190 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %773, i32 0, i32 0
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %775 = getelementptr inbounds %struct.GPR, %struct.GPR* %774, i32 0, i32 5
  %776 = getelementptr inbounds %struct.Reg, %struct.Reg* %775, i32 0, i32 0
  %777 = bitcast %union.anon* %776 to %struct.anon.2*
  %CL.i191 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %777, i32 0, i32 0
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %779 = getelementptr inbounds %struct.GPR, %struct.GPR* %778, i32 0, i32 7
  %780 = getelementptr inbounds %struct.Reg, %struct.Reg* %779, i32 0, i32 0
  %781 = bitcast %union.anon* %780 to %struct.anon.2*
  %DL.i192 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %781, i32 0, i32 0
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %783 = getelementptr inbounds %struct.GPR, %struct.GPR* %782, i32 0, i32 9
  %784 = getelementptr inbounds %struct.Reg, %struct.Reg* %783, i32 0, i32 0
  %785 = bitcast %union.anon* %784 to %struct.anon.2*
  %SIL.i193 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %785, i32 0, i32 0
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %787 = getelementptr inbounds %struct.GPR, %struct.GPR* %786, i32 0, i32 11
  %788 = getelementptr inbounds %struct.Reg, %struct.Reg* %787, i32 0, i32 0
  %789 = bitcast %union.anon* %788 to %struct.anon.2*
  %DIL.i194 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %789, i32 0, i32 0
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %791 = getelementptr inbounds %struct.GPR, %struct.GPR* %790, i32 0, i32 13
  %792 = getelementptr inbounds %struct.Reg, %struct.Reg* %791, i32 0, i32 0
  %793 = bitcast %union.anon* %792 to %struct.anon.2*
  %SPL.i195 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %793, i32 0, i32 0
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %795 = getelementptr inbounds %struct.GPR, %struct.GPR* %794, i32 0, i32 15
  %796 = getelementptr inbounds %struct.Reg, %struct.Reg* %795, i32 0, i32 0
  %797 = bitcast %union.anon* %796 to %struct.anon.2*
  %BPL.i196 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %797, i32 0, i32 0
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %799 = getelementptr inbounds %struct.GPR, %struct.GPR* %798, i32 0, i32 17
  %800 = getelementptr inbounds %struct.Reg, %struct.Reg* %799, i32 0, i32 0
  %801 = bitcast %union.anon* %800 to %struct.anon.2*
  %R8B.i197 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %801, i32 0, i32 0
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %803 = getelementptr inbounds %struct.GPR, %struct.GPR* %802, i32 0, i32 19
  %804 = getelementptr inbounds %struct.Reg, %struct.Reg* %803, i32 0, i32 0
  %805 = bitcast %union.anon* %804 to %struct.anon.2*
  %R9B.i198 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %805, i32 0, i32 0
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %807 = getelementptr inbounds %struct.GPR, %struct.GPR* %806, i32 0, i32 21
  %808 = getelementptr inbounds %struct.Reg, %struct.Reg* %807, i32 0, i32 0
  %809 = bitcast %union.anon* %808 to %struct.anon.2*
  %R10B.i199 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %809, i32 0, i32 0
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %811 = getelementptr inbounds %struct.GPR, %struct.GPR* %810, i32 0, i32 23
  %812 = getelementptr inbounds %struct.Reg, %struct.Reg* %811, i32 0, i32 0
  %813 = bitcast %union.anon* %812 to %struct.anon.2*
  %R11B.i200 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %813, i32 0, i32 0
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %815 = getelementptr inbounds %struct.GPR, %struct.GPR* %814, i32 0, i32 25
  %816 = getelementptr inbounds %struct.Reg, %struct.Reg* %815, i32 0, i32 0
  %817 = bitcast %union.anon* %816 to %struct.anon.2*
  %R12B.i201 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %817, i32 0, i32 0
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %819 = getelementptr inbounds %struct.GPR, %struct.GPR* %818, i32 0, i32 27
  %820 = getelementptr inbounds %struct.Reg, %struct.Reg* %819, i32 0, i32 0
  %821 = bitcast %union.anon* %820 to %struct.anon.2*
  %R13B.i202 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %821, i32 0, i32 0
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %823 = getelementptr inbounds %struct.GPR, %struct.GPR* %822, i32 0, i32 29
  %824 = getelementptr inbounds %struct.Reg, %struct.Reg* %823, i32 0, i32 0
  %825 = bitcast %union.anon* %824 to %struct.anon.2*
  %R14B.i203 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %825, i32 0, i32 0
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %827 = getelementptr inbounds %struct.GPR, %struct.GPR* %826, i32 0, i32 31
  %828 = getelementptr inbounds %struct.Reg, %struct.Reg* %827, i32 0, i32 0
  %829 = bitcast %union.anon* %828 to %struct.anon.2*
  %R15B.i204 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %829, i32 0, i32 0
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %831 = getelementptr inbounds %struct.GPR, %struct.GPR* %830, i32 0, i32 1
  %832 = getelementptr inbounds %struct.Reg, %struct.Reg* %831, i32 0, i32 0
  %AX.i205 = bitcast %union.anon* %832 to i16*
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %834 = getelementptr inbounds %struct.GPR, %struct.GPR* %833, i32 0, i32 3
  %835 = getelementptr inbounds %struct.Reg, %struct.Reg* %834, i32 0, i32 0
  %BX.i206 = bitcast %union.anon* %835 to i16*
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %837 = getelementptr inbounds %struct.GPR, %struct.GPR* %836, i32 0, i32 5
  %838 = getelementptr inbounds %struct.Reg, %struct.Reg* %837, i32 0, i32 0
  %CX.i207 = bitcast %union.anon* %838 to i16*
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %840 = getelementptr inbounds %struct.GPR, %struct.GPR* %839, i32 0, i32 7
  %841 = getelementptr inbounds %struct.Reg, %struct.Reg* %840, i32 0, i32 0
  %DX.i208 = bitcast %union.anon* %841 to i16*
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %843 = getelementptr inbounds %struct.GPR, %struct.GPR* %842, i32 0, i32 9
  %844 = getelementptr inbounds %struct.Reg, %struct.Reg* %843, i32 0, i32 0
  %SI.i209 = bitcast %union.anon* %844 to i16*
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %846 = getelementptr inbounds %struct.GPR, %struct.GPR* %845, i32 0, i32 11
  %847 = getelementptr inbounds %struct.Reg, %struct.Reg* %846, i32 0, i32 0
  %DI.i210 = bitcast %union.anon* %847 to i16*
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %849 = getelementptr inbounds %struct.GPR, %struct.GPR* %848, i32 0, i32 13
  %850 = getelementptr inbounds %struct.Reg, %struct.Reg* %849, i32 0, i32 0
  %SP.i211 = bitcast %union.anon* %850 to i16*
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %852 = getelementptr inbounds %struct.GPR, %struct.GPR* %851, i32 0, i32 15
  %853 = getelementptr inbounds %struct.Reg, %struct.Reg* %852, i32 0, i32 0
  %BP.i212 = bitcast %union.anon* %853 to i16*
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %855 = getelementptr inbounds %struct.GPR, %struct.GPR* %854, i32 0, i32 17
  %856 = getelementptr inbounds %struct.Reg, %struct.Reg* %855, i32 0, i32 0
  %R8W.i213 = bitcast %union.anon* %856 to i16*
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %858 = getelementptr inbounds %struct.GPR, %struct.GPR* %857, i32 0, i32 19
  %859 = getelementptr inbounds %struct.Reg, %struct.Reg* %858, i32 0, i32 0
  %R9W.i214 = bitcast %union.anon* %859 to i16*
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %861 = getelementptr inbounds %struct.GPR, %struct.GPR* %860, i32 0, i32 21
  %862 = getelementptr inbounds %struct.Reg, %struct.Reg* %861, i32 0, i32 0
  %R10W.i215 = bitcast %union.anon* %862 to i16*
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %864 = getelementptr inbounds %struct.GPR, %struct.GPR* %863, i32 0, i32 23
  %865 = getelementptr inbounds %struct.Reg, %struct.Reg* %864, i32 0, i32 0
  %R11W.i216 = bitcast %union.anon* %865 to i16*
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %867 = getelementptr inbounds %struct.GPR, %struct.GPR* %866, i32 0, i32 25
  %868 = getelementptr inbounds %struct.Reg, %struct.Reg* %867, i32 0, i32 0
  %R12W.i217 = bitcast %union.anon* %868 to i16*
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %870 = getelementptr inbounds %struct.GPR, %struct.GPR* %869, i32 0, i32 27
  %871 = getelementptr inbounds %struct.Reg, %struct.Reg* %870, i32 0, i32 0
  %R13W.i218 = bitcast %union.anon* %871 to i16*
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %873 = getelementptr inbounds %struct.GPR, %struct.GPR* %872, i32 0, i32 29
  %874 = getelementptr inbounds %struct.Reg, %struct.Reg* %873, i32 0, i32 0
  %R14W.i219 = bitcast %union.anon* %874 to i16*
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %876 = getelementptr inbounds %struct.GPR, %struct.GPR* %875, i32 0, i32 31
  %877 = getelementptr inbounds %struct.Reg, %struct.Reg* %876, i32 0, i32 0
  %R15W.i220 = bitcast %union.anon* %877 to i16*
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %879 = getelementptr inbounds %struct.GPR, %struct.GPR* %878, i32 0, i32 33
  %880 = getelementptr inbounds %struct.Reg, %struct.Reg* %879, i32 0, i32 0
  %IP.i221 = bitcast %union.anon* %880 to i16*
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %882 = getelementptr inbounds %struct.GPR, %struct.GPR* %881, i32 0, i32 1
  %883 = getelementptr inbounds %struct.Reg, %struct.Reg* %882, i32 0, i32 0
  %EAX.i222 = bitcast %union.anon* %883 to i32*
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %885 = getelementptr inbounds %struct.GPR, %struct.GPR* %884, i32 0, i32 3
  %886 = getelementptr inbounds %struct.Reg, %struct.Reg* %885, i32 0, i32 0
  %EBX.i223 = bitcast %union.anon* %886 to i32*
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %888 = getelementptr inbounds %struct.GPR, %struct.GPR* %887, i32 0, i32 5
  %889 = getelementptr inbounds %struct.Reg, %struct.Reg* %888, i32 0, i32 0
  %ECX.i224 = bitcast %union.anon* %889 to i32*
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %891 = getelementptr inbounds %struct.GPR, %struct.GPR* %890, i32 0, i32 7
  %892 = getelementptr inbounds %struct.Reg, %struct.Reg* %891, i32 0, i32 0
  %EDX.i225 = bitcast %union.anon* %892 to i32*
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %894 = getelementptr inbounds %struct.GPR, %struct.GPR* %893, i32 0, i32 9
  %895 = getelementptr inbounds %struct.Reg, %struct.Reg* %894, i32 0, i32 0
  %ESI.i226 = bitcast %union.anon* %895 to i32*
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %897 = getelementptr inbounds %struct.GPR, %struct.GPR* %896, i32 0, i32 11
  %898 = getelementptr inbounds %struct.Reg, %struct.Reg* %897, i32 0, i32 0
  %EDI.i227 = bitcast %union.anon* %898 to i32*
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %900 = getelementptr inbounds %struct.GPR, %struct.GPR* %899, i32 0, i32 13
  %901 = getelementptr inbounds %struct.Reg, %struct.Reg* %900, i32 0, i32 0
  %ESP.i228 = bitcast %union.anon* %901 to i32*
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %903 = getelementptr inbounds %struct.GPR, %struct.GPR* %902, i32 0, i32 15
  %904 = getelementptr inbounds %struct.Reg, %struct.Reg* %903, i32 0, i32 0
  %EBP.i229 = bitcast %union.anon* %904 to i32*
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %906 = getelementptr inbounds %struct.GPR, %struct.GPR* %905, i32 0, i32 33
  %907 = getelementptr inbounds %struct.Reg, %struct.Reg* %906, i32 0, i32 0
  %EIP.i230 = bitcast %union.anon* %907 to i32*
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %909 = getelementptr inbounds %struct.GPR, %struct.GPR* %908, i32 0, i32 17
  %910 = getelementptr inbounds %struct.Reg, %struct.Reg* %909, i32 0, i32 0
  %R8D.i231 = bitcast %union.anon* %910 to i32*
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %912 = getelementptr inbounds %struct.GPR, %struct.GPR* %911, i32 0, i32 19
  %913 = getelementptr inbounds %struct.Reg, %struct.Reg* %912, i32 0, i32 0
  %R9D.i232 = bitcast %union.anon* %913 to i32*
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %915 = getelementptr inbounds %struct.GPR, %struct.GPR* %914, i32 0, i32 21
  %916 = getelementptr inbounds %struct.Reg, %struct.Reg* %915, i32 0, i32 0
  %R10D.i233 = bitcast %union.anon* %916 to i32*
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %918 = getelementptr inbounds %struct.GPR, %struct.GPR* %917, i32 0, i32 23
  %919 = getelementptr inbounds %struct.Reg, %struct.Reg* %918, i32 0, i32 0
  %R11D.i234 = bitcast %union.anon* %919 to i32*
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %921 = getelementptr inbounds %struct.GPR, %struct.GPR* %920, i32 0, i32 25
  %922 = getelementptr inbounds %struct.Reg, %struct.Reg* %921, i32 0, i32 0
  %R12D.i235 = bitcast %union.anon* %922 to i32*
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %924 = getelementptr inbounds %struct.GPR, %struct.GPR* %923, i32 0, i32 27
  %925 = getelementptr inbounds %struct.Reg, %struct.Reg* %924, i32 0, i32 0
  %R13D.i236 = bitcast %union.anon* %925 to i32*
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %927 = getelementptr inbounds %struct.GPR, %struct.GPR* %926, i32 0, i32 29
  %928 = getelementptr inbounds %struct.Reg, %struct.Reg* %927, i32 0, i32 0
  %R14D.i237 = bitcast %union.anon* %928 to i32*
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %930 = getelementptr inbounds %struct.GPR, %struct.GPR* %929, i32 0, i32 31
  %931 = getelementptr inbounds %struct.Reg, %struct.Reg* %930, i32 0, i32 0
  %R15D.i238 = bitcast %union.anon* %931 to i32*
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %933 = getelementptr inbounds %struct.GPR, %struct.GPR* %932, i32 0, i32 1
  %934 = getelementptr inbounds %struct.Reg, %struct.Reg* %933, i32 0, i32 0
  %RAX.i239 = bitcast %union.anon* %934 to i64*
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %936 = getelementptr inbounds %struct.GPR, %struct.GPR* %935, i32 0, i32 3
  %937 = getelementptr inbounds %struct.Reg, %struct.Reg* %936, i32 0, i32 0
  %RBX.i240 = bitcast %union.anon* %937 to i64*
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %939 = getelementptr inbounds %struct.GPR, %struct.GPR* %938, i32 0, i32 5
  %940 = getelementptr inbounds %struct.Reg, %struct.Reg* %939, i32 0, i32 0
  %RCX.i241 = bitcast %union.anon* %940 to i64*
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %942 = getelementptr inbounds %struct.GPR, %struct.GPR* %941, i32 0, i32 7
  %943 = getelementptr inbounds %struct.Reg, %struct.Reg* %942, i32 0, i32 0
  %RDX.i242 = bitcast %union.anon* %943 to i64*
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %945 = getelementptr inbounds %struct.GPR, %struct.GPR* %944, i32 0, i32 9
  %946 = getelementptr inbounds %struct.Reg, %struct.Reg* %945, i32 0, i32 0
  %RSI.i243 = bitcast %union.anon* %946 to i64*
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %948 = getelementptr inbounds %struct.GPR, %struct.GPR* %947, i32 0, i32 11
  %949 = getelementptr inbounds %struct.Reg, %struct.Reg* %948, i32 0, i32 0
  %RDI.i244 = bitcast %union.anon* %949 to i64*
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %951 = getelementptr inbounds %struct.GPR, %struct.GPR* %950, i32 0, i32 13
  %952 = getelementptr inbounds %struct.Reg, %struct.Reg* %951, i32 0, i32 0
  %RSP.i245 = bitcast %union.anon* %952 to i64*
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %954 = getelementptr inbounds %struct.GPR, %struct.GPR* %953, i32 0, i32 15
  %955 = getelementptr inbounds %struct.Reg, %struct.Reg* %954, i32 0, i32 0
  %RBP.i246 = bitcast %union.anon* %955 to i64*
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %957 = getelementptr inbounds %struct.GPR, %struct.GPR* %956, i32 0, i32 17
  %958 = getelementptr inbounds %struct.Reg, %struct.Reg* %957, i32 0, i32 0
  %R8.i247 = bitcast %union.anon* %958 to i64*
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %960 = getelementptr inbounds %struct.GPR, %struct.GPR* %959, i32 0, i32 19
  %961 = getelementptr inbounds %struct.Reg, %struct.Reg* %960, i32 0, i32 0
  %R9.i248 = bitcast %union.anon* %961 to i64*
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %963 = getelementptr inbounds %struct.GPR, %struct.GPR* %962, i32 0, i32 21
  %964 = getelementptr inbounds %struct.Reg, %struct.Reg* %963, i32 0, i32 0
  %R10.i249 = bitcast %union.anon* %964 to i64*
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %966 = getelementptr inbounds %struct.GPR, %struct.GPR* %965, i32 0, i32 23
  %967 = getelementptr inbounds %struct.Reg, %struct.Reg* %966, i32 0, i32 0
  %R11.i250 = bitcast %union.anon* %967 to i64*
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %969 = getelementptr inbounds %struct.GPR, %struct.GPR* %968, i32 0, i32 25
  %970 = getelementptr inbounds %struct.Reg, %struct.Reg* %969, i32 0, i32 0
  %R12.i251 = bitcast %union.anon* %970 to i64*
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %972 = getelementptr inbounds %struct.GPR, %struct.GPR* %971, i32 0, i32 27
  %973 = getelementptr inbounds %struct.Reg, %struct.Reg* %972, i32 0, i32 0
  %R13.i252 = bitcast %union.anon* %973 to i64*
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %975 = getelementptr inbounds %struct.GPR, %struct.GPR* %974, i32 0, i32 29
  %976 = getelementptr inbounds %struct.Reg, %struct.Reg* %975, i32 0, i32 0
  %R14.i253 = bitcast %union.anon* %976 to i64*
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %978 = getelementptr inbounds %struct.GPR, %struct.GPR* %977, i32 0, i32 31
  %979 = getelementptr inbounds %struct.Reg, %struct.Reg* %978, i32 0, i32 0
  %R15.i254 = bitcast %union.anon* %979 to i64*
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %981 = getelementptr inbounds %struct.GPR, %struct.GPR* %980, i32 0, i32 33
  %982 = getelementptr inbounds %struct.Reg, %struct.Reg* %981, i32 0, i32 0
  %RIP.i255 = bitcast %union.anon* %982 to i64*
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %984 = getelementptr inbounds %struct.Segments, %struct.Segments* %983, i32 0, i32 1
  %SS.i256 = bitcast %union.SegmentSelector* %984 to i16*
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %986 = getelementptr inbounds %struct.Segments, %struct.Segments* %985, i32 0, i32 3
  %ES.i257 = bitcast %union.SegmentSelector* %986 to i16*
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %988 = getelementptr inbounds %struct.Segments, %struct.Segments* %987, i32 0, i32 5
  %GS.i258 = bitcast %union.SegmentSelector* %988 to i16*
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %990 = getelementptr inbounds %struct.Segments, %struct.Segments* %989, i32 0, i32 7
  %FS.i259 = bitcast %union.SegmentSelector* %990 to i16*
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %992 = getelementptr inbounds %struct.Segments, %struct.Segments* %991, i32 0, i32 9
  %DS.i260 = bitcast %union.SegmentSelector* %992 to i16*
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %994 = getelementptr inbounds %struct.Segments, %struct.Segments* %993, i32 0, i32 11
  %CS.i261 = bitcast %union.SegmentSelector* %994 to i16*
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %996 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %995, i32 0, i32 5
  %997 = getelementptr inbounds %struct.Reg, %struct.Reg* %996, i32 0, i32 0
  %GS_BASE.i262 = bitcast %union.anon* %997 to i64*
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %999 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %998, i32 0, i32 7
  %1000 = getelementptr inbounds %struct.Reg, %struct.Reg* %999, i32 0, i32 0
  %FS_BASE.i263 = bitcast %union.anon* %1000 to i64*
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1002 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1001, i64 0, i64 0
  %YMM0.i264 = bitcast %union.VectorReg* %1002 to %"class.std::bitset"*
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1004 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1003, i64 0, i64 1
  %YMM1.i265 = bitcast %union.VectorReg* %1004 to %"class.std::bitset"*
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1006 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1005, i64 0, i64 2
  %YMM2.i266 = bitcast %union.VectorReg* %1006 to %"class.std::bitset"*
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1008 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1007, i64 0, i64 3
  %YMM3.i267 = bitcast %union.VectorReg* %1008 to %"class.std::bitset"*
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1010 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1009, i64 0, i64 4
  %YMM4.i268 = bitcast %union.VectorReg* %1010 to %"class.std::bitset"*
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1012 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1011, i64 0, i64 5
  %YMM5.i269 = bitcast %union.VectorReg* %1012 to %"class.std::bitset"*
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1014 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1013, i64 0, i64 6
  %YMM6.i270 = bitcast %union.VectorReg* %1014 to %"class.std::bitset"*
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1016 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1015, i64 0, i64 7
  %YMM7.i271 = bitcast %union.VectorReg* %1016 to %"class.std::bitset"*
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1018 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1017, i64 0, i64 8
  %YMM8.i272 = bitcast %union.VectorReg* %1018 to %"class.std::bitset"*
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1020 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1019, i64 0, i64 9
  %YMM9.i273 = bitcast %union.VectorReg* %1020 to %"class.std::bitset"*
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1022 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1021, i64 0, i64 10
  %YMM10.i274 = bitcast %union.VectorReg* %1022 to %"class.std::bitset"*
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1024 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1023, i64 0, i64 11
  %YMM11.i275 = bitcast %union.VectorReg* %1024 to %"class.std::bitset"*
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1026 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1025, i64 0, i64 12
  %YMM12.i276 = bitcast %union.VectorReg* %1026 to %"class.std::bitset"*
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1028 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1027, i64 0, i64 13
  %YMM13.i277 = bitcast %union.VectorReg* %1028 to %"class.std::bitset"*
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1030 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1029, i64 0, i64 14
  %YMM14.i278 = bitcast %union.VectorReg* %1030 to %"class.std::bitset"*
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1032 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1031, i64 0, i64 15
  %YMM15.i279 = bitcast %union.VectorReg* %1032 to %"class.std::bitset"*
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1034 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1033, i64 0, i64 0
  %XMM0.i280 = bitcast %union.VectorReg* %1034 to %union.vec128_t*
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1036 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1035, i64 0, i64 1
  %XMM1.i281 = bitcast %union.VectorReg* %1036 to %union.vec128_t*
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1038 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1037, i64 0, i64 2
  %XMM2.i282 = bitcast %union.VectorReg* %1038 to %union.vec128_t*
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1040 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1039, i64 0, i64 3
  %XMM3.i283 = bitcast %union.VectorReg* %1040 to %union.vec128_t*
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1042 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1041, i64 0, i64 4
  %XMM4.i284 = bitcast %union.VectorReg* %1042 to %union.vec128_t*
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1044 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1043, i64 0, i64 5
  %XMM5.i285 = bitcast %union.VectorReg* %1044 to %union.vec128_t*
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1046 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1045, i64 0, i64 6
  %XMM6.i286 = bitcast %union.VectorReg* %1046 to %union.vec128_t*
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1048 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1047, i64 0, i64 7
  %XMM7.i287 = bitcast %union.VectorReg* %1048 to %union.vec128_t*
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1050 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1049, i64 0, i64 8
  %XMM8.i288 = bitcast %union.VectorReg* %1050 to %union.vec128_t*
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1052 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1051, i64 0, i64 9
  %XMM9.i289 = bitcast %union.VectorReg* %1052 to %union.vec128_t*
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1054 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1053, i64 0, i64 10
  %XMM10.i290 = bitcast %union.VectorReg* %1054 to %union.vec128_t*
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1056 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1055, i64 0, i64 11
  %XMM11.i291 = bitcast %union.VectorReg* %1056 to %union.vec128_t*
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1058 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1057, i64 0, i64 12
  %XMM12.i292 = bitcast %union.VectorReg* %1058 to %union.vec128_t*
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1060 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1059, i64 0, i64 13
  %XMM13.i293 = bitcast %union.VectorReg* %1060 to %union.vec128_t*
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1062 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1061, i64 0, i64 14
  %XMM14.i294 = bitcast %union.VectorReg* %1062 to %union.vec128_t*
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1064 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1063, i64 0, i64 15
  %XMM15.i295 = bitcast %union.VectorReg* %1064 to %union.vec128_t*
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1066 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1065, i32 0, i32 0
  %1067 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1066, i64 0, i64 0
  %ST0.i296 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1067, i32 0, i32 1
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1069 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1068, i32 0, i32 0
  %1070 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1069, i64 0, i64 1
  %ST1.i297 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1070, i32 0, i32 1
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1072 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1071, i32 0, i32 0
  %1073 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1072, i64 0, i64 2
  %ST2.i298 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1073, i32 0, i32 1
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1075 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1074, i32 0, i32 0
  %1076 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1075, i64 0, i64 3
  %ST3.i299 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1076, i32 0, i32 1
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1078 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1077, i32 0, i32 0
  %1079 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1078, i64 0, i64 4
  %ST4.i300 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1079, i32 0, i32 1
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1081 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1080, i32 0, i32 0
  %1082 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1081, i64 0, i64 5
  %ST5.i301 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1082, i32 0, i32 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1084 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1083, i32 0, i32 0
  %1085 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1084, i64 0, i64 6
  %ST6.i302 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1085, i32 0, i32 1
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1087 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1086, i32 0, i32 0
  %1088 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1087, i64 0, i64 7
  %ST7.i303 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1088, i32 0, i32 1
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1090 = getelementptr inbounds %struct.MMX, %struct.MMX* %1089, i32 0, i32 0
  %1091 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1090, i64 0, i64 0
  %1092 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1091, i32 0, i32 1
  %1093 = bitcast %union.vec64_t* %1092 to %struct.uint64v1_t*
  %1094 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1093, i32 0, i32 0
  %MM0.i304 = getelementptr inbounds [1 x i64], [1 x i64]* %1094, i64 0, i64 0
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1096 = getelementptr inbounds %struct.MMX, %struct.MMX* %1095, i32 0, i32 0
  %1097 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1096, i64 0, i64 1
  %1098 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1097, i32 0, i32 1
  %1099 = bitcast %union.vec64_t* %1098 to %struct.uint64v1_t*
  %1100 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1099, i32 0, i32 0
  %MM1.i305 = getelementptr inbounds [1 x i64], [1 x i64]* %1100, i64 0, i64 0
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1102 = getelementptr inbounds %struct.MMX, %struct.MMX* %1101, i32 0, i32 0
  %1103 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1102, i64 0, i64 2
  %1104 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1103, i32 0, i32 1
  %1105 = bitcast %union.vec64_t* %1104 to %struct.uint64v1_t*
  %1106 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1105, i32 0, i32 0
  %MM2.i306 = getelementptr inbounds [1 x i64], [1 x i64]* %1106, i64 0, i64 0
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1108 = getelementptr inbounds %struct.MMX, %struct.MMX* %1107, i32 0, i32 0
  %1109 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1108, i64 0, i64 3
  %1110 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1109, i32 0, i32 1
  %1111 = bitcast %union.vec64_t* %1110 to %struct.uint64v1_t*
  %1112 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1111, i32 0, i32 0
  %MM3.i307 = getelementptr inbounds [1 x i64], [1 x i64]* %1112, i64 0, i64 0
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1114 = getelementptr inbounds %struct.MMX, %struct.MMX* %1113, i32 0, i32 0
  %1115 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1114, i64 0, i64 4
  %1116 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1115, i32 0, i32 1
  %1117 = bitcast %union.vec64_t* %1116 to %struct.uint64v1_t*
  %1118 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1117, i32 0, i32 0
  %MM4.i308 = getelementptr inbounds [1 x i64], [1 x i64]* %1118, i64 0, i64 0
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1120 = getelementptr inbounds %struct.MMX, %struct.MMX* %1119, i32 0, i32 0
  %1121 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1120, i64 0, i64 5
  %1122 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1121, i32 0, i32 1
  %1123 = bitcast %union.vec64_t* %1122 to %struct.uint64v1_t*
  %1124 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1123, i32 0, i32 0
  %MM5.i309 = getelementptr inbounds [1 x i64], [1 x i64]* %1124, i64 0, i64 0
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1126 = getelementptr inbounds %struct.MMX, %struct.MMX* %1125, i32 0, i32 0
  %1127 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1126, i64 0, i64 6
  %1128 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1127, i32 0, i32 1
  %1129 = bitcast %union.vec64_t* %1128 to %struct.uint64v1_t*
  %1130 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1129, i32 0, i32 0
  %MM6.i310 = getelementptr inbounds [1 x i64], [1 x i64]* %1130, i64 0, i64 0
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1132 = getelementptr inbounds %struct.MMX, %struct.MMX* %1131, i32 0, i32 0
  %1133 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1132, i64 0, i64 7
  %1134 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1133, i32 0, i32 1
  %1135 = bitcast %union.vec64_t* %1134 to %struct.uint64v1_t*
  %1136 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1135, i32 0, i32 0
  %MM7.i311 = getelementptr inbounds [1 x i64], [1 x i64]* %1136, i64 0, i64 0
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i312 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1137, i32 0, i32 5
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i313 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1138, i32 0, i32 1
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i314 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1139, i32 0, i32 11
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i315 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1140, i32 0, i32 13
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i316 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1141, i32 0, i32 3
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i317 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1142, i32 0, i32 9
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i318 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1143, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i170, align 8, !noalias !2469
  store i64* @DR1, i64** %_DR1.i171, align 8, !noalias !2469
  store i64* @DR2, i64** %_DR2.i172, align 8, !noalias !2469
  store i64* @DR3, i64** %_DR3.i173, align 8, !noalias !2469
  store i64* @DR4, i64** %_DR4.i174, align 8, !noalias !2469
  store i64* @DR5, i64** %_DR5.i175, align 8, !noalias !2469
  store i64* @DR6, i64** %_DR6.i176, align 8, !noalias !2469
  store i64* @DR7, i64** %_DR7.i177, align 8, !noalias !2469
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i178, align 8, !noalias !2469
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i179, align 8, !noalias !2469
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i180, align 8, !noalias !2469
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i181, align 8, !noalias !2469
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i182, align 8, !noalias !2469
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i183, align 8, !noalias !2469
  %1144 = bitcast %"class.std::bitset"* %YMM0.i264 to double*
  %1145 = load double, double* %1144, !alias.scope !2473, !noalias !2474
  %1146 = load i64, i64* %RSP.i245, !alias.scope !2473, !noalias !2474
  %1147 = load %struct.Memory*, %struct.Memory** %MEMORY.i169, !noalias !2469
  %1148 = inttoptr i64 %1146 to i64*
  %1149 = load i64, i64* %1148
  store i64 %1149, i64* %PC.i184, !alias.scope !2473, !noalias !2474
  %1150 = add i64 %1146, 8
  store i64 %1150, i64* %RSP.i245, !alias.scope !2473, !noalias !2474
  %1151 = call double @sin(double %1145)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i264, !alias.scope !2473, !noalias !2474
  %1152 = bitcast %"class.std::bitset"* %YMM0.i264 to double*
  store double %1151, double* %1152, !alias.scope !2473, !noalias !2474
  %1153 = load %struct.Memory*, %struct.Memory** %MEMORY.i169, !noalias !2469
  %1154 = bitcast %struct.State** %state.i160 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1154)
  %1155 = bitcast i64* %curr_pc.i161 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1155)
  %1156 = bitcast %struct.Memory** %memory.i162 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1156)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i163)
  %1157 = bitcast i64* %SS_BASE.i164 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1157)
  %1158 = bitcast i64* %ES_BASE.i165 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1158)
  %1159 = bitcast i64* %DS_BASE.i166 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1159)
  %1160 = bitcast i64* %CS_BASE.i167 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1160)
  %1161 = bitcast %struct.State** %STATE.i168 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1161)
  %1162 = bitcast %struct.Memory** %MEMORY.i169 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1162)
  %1163 = bitcast i64** %_DR0.i170 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1163)
  %1164 = bitcast i64** %_DR1.i171 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1164)
  %1165 = bitcast i64** %_DR2.i172 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1165)
  %1166 = bitcast i64** %_DR3.i173 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1166)
  %1167 = bitcast i64** %_DR4.i174 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1167)
  %1168 = bitcast i64** %_DR5.i175 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1168)
  %1169 = bitcast i64** %_DR6.i176 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1169)
  %1170 = bitcast i64** %_DR7.i177 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1170)
  %1171 = bitcast i64** %CR0.i178 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1171)
  %1172 = bitcast i64** %CR1.i179 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1172)
  %1173 = bitcast i64** %CR2.i180 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1173)
  %1174 = bitcast i64** %CR3.i181 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1174)
  %1175 = bitcast i64** %CR4.i182 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1175)
  %1176 = bitcast i64** %CR8.i183 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1176)
  %1177 = load i64, i64* %RBP
  %1178 = sub i64 %1177, 56
  %1179 = bitcast %union.vec128_t* %XMM0 to i8*
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 5
  store i64 %1181, i64* %PC
  %1182 = bitcast i8* %1179 to double*
  %1183 = load double, double* %1182, align 1
  %1184 = inttoptr i64 %1178 to double*
  store double %1183, double* %1184
  %1185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 48
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 5
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to double*
  %1191 = load double, double* %1190
  %1192 = bitcast i8* %1185 to double*
  store double %1191, double* %1192, align 1, !tbaa !2452
  %1193 = getelementptr inbounds i8, i8* %1185, i64 8
  %1194 = bitcast i8* %1193 to double*
  store double 0.000000e+00, double* %1194, align 1, !tbaa !2452
  %1195 = load i64, i64* %RBP
  %1196 = sub i64 %1195, 24
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1196 to i64*
  %1200 = load i64, i64* %1199
  store i64 %1200, i64* %RAX, align 8, !tbaa !2428
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 28
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  %1205 = inttoptr i64 %1202 to i32*
  %1206 = load i32, i32* %1205
  %1207 = sext i32 %1206 to i64
  store i64 %1207, i64* %RCX, align 8, !tbaa !2428
  %1208 = load i64, i64* %RAX
  %1209 = load i64, i64* %RCX
  %1210 = mul i64 %1209, 8
  %1211 = add i64 %1210, %1208
  %1212 = bitcast %union.vec128_t* %XMM0 to i8*
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 5
  store i64 %1214, i64* %PC
  %1215 = bitcast i8* %1212 to double*
  %1216 = load double, double* %1215, align 1
  %1217 = inttoptr i64 %1211 to double*
  store double %1216, double* %1217
  %1218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 56
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1220 to double*
  %1224 = load double, double* %1223
  %1225 = bitcast i8* %1218 to double*
  store double %1224, double* %1225, align 1, !tbaa !2452
  %1226 = getelementptr inbounds i8, i8* %1218, i64 8
  %1227 = bitcast i8* %1226 to double*
  store double 0.000000e+00, double* %1227, align 1, !tbaa !2452
  %1228 = load i64, i64* %RBP
  %1229 = sub i64 %1228, 24
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 4
  store i64 %1231, i64* %PC
  %1232 = inttoptr i64 %1229 to i64*
  %1233 = load i64, i64* %1232
  store i64 %1233, i64* %RAX, align 8, !tbaa !2428
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 28
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i32*
  %1239 = load i32, i32* %1238
  %1240 = zext i32 %1239 to i64
  store i64 %1240, i64* %RDX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RDX
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 3
  store i64 %1243, i64* %PC
  %1244 = trunc i64 %1241 to i32
  %1245 = add i32 1, %1244
  %1246 = zext i32 %1245 to i64
  store i64 %1246, i64* %RDX, align 8, !tbaa !2428
  %1247 = icmp ult i32 %1245, %1244
  %1248 = icmp ult i32 %1245, 1
  %1249 = or i1 %1247, %1248
  %1250 = zext i1 %1249 to i8
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1250, i8* %1251, align 1, !tbaa !2432
  %1252 = and i32 %1245, 255
  %1253 = call i32 @llvm.ctpop.i32(i32 %1252) #17
  %1254 = trunc i32 %1253 to i8
  %1255 = and i8 %1254, 1
  %1256 = xor i8 %1255, 1
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1256, i8* %1257, align 1, !tbaa !2446
  %1258 = xor i64 1, %1241
  %1259 = trunc i64 %1258 to i32
  %1260 = xor i32 %1259, %1245
  %1261 = lshr i32 %1260, 4
  %1262 = trunc i32 %1261 to i8
  %1263 = and i8 %1262, 1
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1263, i8* %1264, align 1, !tbaa !2447
  %1265 = icmp eq i32 %1245, 0
  %1266 = zext i1 %1265 to i8
  %1267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1266, i8* %1267, align 1, !tbaa !2448
  %1268 = lshr i32 %1245, 31
  %1269 = trunc i32 %1268 to i8
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1269, i8* %1270, align 1, !tbaa !2449
  %1271 = lshr i32 %1244, 31
  %1272 = xor i32 %1268, %1271
  %1273 = add nuw nsw i32 %1272, %1268
  %1274 = icmp eq i32 %1273, 2
  %1275 = zext i1 %1274 to i8
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1275, i8* %1276, align 1, !tbaa !2450
  %1277 = load i32, i32* %EDX
  %1278 = zext i32 %1277 to i64
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 3
  store i64 %1280, i64* %PC
  %1281 = shl i64 %1278, 32
  %1282 = ashr exact i64 %1281, 32
  store i64 %1282, i64* %RCX, align 8, !tbaa !2428
  %1283 = load i64, i64* %RAX
  %1284 = load i64, i64* %RCX
  %1285 = mul i64 %1284, 8
  %1286 = add i64 %1285, %1283
  %1287 = bitcast %union.vec128_t* %XMM0 to i8*
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 5
  store i64 %1289, i64* %PC
  %1290 = bitcast i8* %1287 to double*
  %1291 = load double, double* %1290, align 1
  %1292 = inttoptr i64 %1286 to double*
  store double %1291, double* %1292
  %1293 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1294 = load i64, i64* %RBP
  %1295 = sub i64 %1294, 56
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1295 to double*
  %1299 = load double, double* %1298
  %1300 = bitcast i8* %1293 to double*
  store double %1299, double* %1300, align 1, !tbaa !2452
  %1301 = getelementptr inbounds i8, i8* %1293, i64 8
  %1302 = bitcast i8* %1301 to double*
  store double 0.000000e+00, double* %1302, align 1, !tbaa !2452
  %1303 = load i64, i64* %RBP
  %1304 = sub i64 %1303, 24
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 4
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i64*
  %1308 = load i64, i64* %1307
  store i64 %1308, i64* %RAX, align 8, !tbaa !2428
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 4
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 3
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i32*
  %1314 = load i32, i32* %1313
  %1315 = zext i32 %1314 to i64
  store i64 %1315, i64* %RDX, align 8, !tbaa !2428
  %1316 = load i64, i64* %RDX
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 28
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 3
  store i64 %1320, i64* %PC
  %1321 = trunc i64 %1316 to i32
  %1322 = inttoptr i64 %1318 to i32*
  %1323 = load i32, i32* %1322
  %1324 = sub i32 %1321, %1323
  %1325 = zext i32 %1324 to i64
  store i64 %1325, i64* %RDX, align 8, !tbaa !2428
  %1326 = icmp ult i32 %1321, %1323
  %1327 = zext i1 %1326 to i8
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1327, i8* %1328, align 1, !tbaa !2432
  %1329 = and i32 %1324, 255
  %1330 = call i32 @llvm.ctpop.i32(i32 %1329) #17
  %1331 = trunc i32 %1330 to i8
  %1332 = and i8 %1331, 1
  %1333 = xor i8 %1332, 1
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1333, i8* %1334, align 1, !tbaa !2446
  %1335 = xor i32 %1323, %1321
  %1336 = xor i32 %1335, %1324
  %1337 = lshr i32 %1336, 4
  %1338 = trunc i32 %1337 to i8
  %1339 = and i8 %1338, 1
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1339, i8* %1340, align 1, !tbaa !2447
  %1341 = icmp eq i32 %1324, 0
  %1342 = zext i1 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1342, i8* %1343, align 1, !tbaa !2448
  %1344 = lshr i32 %1324, 31
  %1345 = trunc i32 %1344 to i8
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1345, i8* %1346, align 1, !tbaa !2449
  %1347 = lshr i32 %1321, 31
  %1348 = lshr i32 %1323, 31
  %1349 = xor i32 %1348, %1347
  %1350 = xor i32 %1344, %1347
  %1351 = add nuw nsw i32 %1350, %1349
  %1352 = icmp eq i32 %1351, 2
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1353, i8* %1354, align 1, !tbaa !2450
  %1355 = load i32, i32* %EDX
  %1356 = zext i32 %1355 to i64
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 3
  store i64 %1358, i64* %PC
  %1359 = shl i64 %1356, 32
  %1360 = ashr exact i64 %1359, 32
  store i64 %1360, i64* %RCX, align 8, !tbaa !2428
  %1361 = load i64, i64* %RAX
  %1362 = load i64, i64* %RCX
  %1363 = mul i64 %1362, 8
  %1364 = add i64 %1363, %1361
  %1365 = bitcast %union.vec128_t* %XMM0 to i8*
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 5
  store i64 %1367, i64* %PC
  %1368 = bitcast i8* %1365 to double*
  %1369 = load double, double* %1368, align 1
  %1370 = inttoptr i64 %1364 to double*
  store double %1369, double* %1370
  %1371 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 48
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 5
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to double*
  %1377 = load double, double* %1376
  %1378 = bitcast i8* %1371 to double*
  store double %1377, double* %1378, align 1, !tbaa !2452
  %1379 = getelementptr inbounds i8, i8* %1371, i64 8
  %1380 = bitcast i8* %1379 to double*
  store double 0.000000e+00, double* %1380, align 1, !tbaa !2452
  %1381 = load i64, i64* %RBP
  %1382 = sub i64 %1381, 24
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 4
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1382 to i64*
  %1386 = load i64, i64* %1385
  store i64 %1386, i64* %RAX, align 8, !tbaa !2428
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 4
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 3
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i32*
  %1392 = load i32, i32* %1391
  %1393 = zext i32 %1392 to i64
  store i64 %1393, i64* %RDX, align 8, !tbaa !2428
  %1394 = load i64, i64* %RDX
  %1395 = load i64, i64* %RBP
  %1396 = sub i64 %1395, 28
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 3
  store i64 %1398, i64* %PC
  %1399 = trunc i64 %1394 to i32
  %1400 = inttoptr i64 %1396 to i32*
  %1401 = load i32, i32* %1400
  %1402 = sub i32 %1399, %1401
  %1403 = zext i32 %1402 to i64
  store i64 %1403, i64* %RDX, align 8, !tbaa !2428
  %1404 = icmp ult i32 %1399, %1401
  %1405 = zext i1 %1404 to i8
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1405, i8* %1406, align 1, !tbaa !2432
  %1407 = and i32 %1402, 255
  %1408 = call i32 @llvm.ctpop.i32(i32 %1407) #17
  %1409 = trunc i32 %1408 to i8
  %1410 = and i8 %1409, 1
  %1411 = xor i8 %1410, 1
  %1412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1411, i8* %1412, align 1, !tbaa !2446
  %1413 = xor i32 %1401, %1399
  %1414 = xor i32 %1413, %1402
  %1415 = lshr i32 %1414, 4
  %1416 = trunc i32 %1415 to i8
  %1417 = and i8 %1416, 1
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1417, i8* %1418, align 1, !tbaa !2447
  %1419 = icmp eq i32 %1402, 0
  %1420 = zext i1 %1419 to i8
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1420, i8* %1421, align 1, !tbaa !2448
  %1422 = lshr i32 %1402, 31
  %1423 = trunc i32 %1422 to i8
  %1424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1423, i8* %1424, align 1, !tbaa !2449
  %1425 = lshr i32 %1399, 31
  %1426 = lshr i32 %1401, 31
  %1427 = xor i32 %1426, %1425
  %1428 = xor i32 %1422, %1425
  %1429 = add nuw nsw i32 %1428, %1427
  %1430 = icmp eq i32 %1429, 2
  %1431 = zext i1 %1430 to i8
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1431, i8* %1432, align 1, !tbaa !2450
  %1433 = load i64, i64* %RDX
  %1434 = load i64, i64* %PC
  %1435 = add i64 %1434, 3
  store i64 %1435, i64* %PC
  %1436 = trunc i64 %1433 to i32
  %1437 = add i32 1, %1436
  %1438 = zext i32 %1437 to i64
  store i64 %1438, i64* %RDX, align 8, !tbaa !2428
  %1439 = icmp ult i32 %1437, %1436
  %1440 = icmp ult i32 %1437, 1
  %1441 = or i1 %1439, %1440
  %1442 = zext i1 %1441 to i8
  %1443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1442, i8* %1443, align 1, !tbaa !2432
  %1444 = and i32 %1437, 255
  %1445 = call i32 @llvm.ctpop.i32(i32 %1444) #17
  %1446 = trunc i32 %1445 to i8
  %1447 = and i8 %1446, 1
  %1448 = xor i8 %1447, 1
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1448, i8* %1449, align 1, !tbaa !2446
  %1450 = xor i64 1, %1433
  %1451 = trunc i64 %1450 to i32
  %1452 = xor i32 %1451, %1437
  %1453 = lshr i32 %1452, 4
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1455, i8* %1456, align 1, !tbaa !2447
  %1457 = icmp eq i32 %1437, 0
  %1458 = zext i1 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1458, i8* %1459, align 1, !tbaa !2448
  %1460 = lshr i32 %1437, 31
  %1461 = trunc i32 %1460 to i8
  %1462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1461, i8* %1462, align 1, !tbaa !2449
  %1463 = lshr i32 %1436, 31
  %1464 = xor i32 %1460, %1463
  %1465 = add nuw nsw i32 %1464, %1460
  %1466 = icmp eq i32 %1465, 2
  %1467 = zext i1 %1466 to i8
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1467, i8* %1468, align 1, !tbaa !2450
  %1469 = load i32, i32* %EDX
  %1470 = zext i32 %1469 to i64
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 3
  store i64 %1472, i64* %PC
  %1473 = shl i64 %1470, 32
  %1474 = ashr exact i64 %1473, 32
  store i64 %1474, i64* %RCX, align 8, !tbaa !2428
  %1475 = load i64, i64* %RAX
  %1476 = load i64, i64* %RCX
  %1477 = mul i64 %1476, 8
  %1478 = add i64 %1477, %1475
  %1479 = bitcast %union.vec128_t* %XMM0 to i8*
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 5
  store i64 %1481, i64* %PC
  %1482 = bitcast i8* %1479 to double*
  %1483 = load double, double* %1482, align 1
  %1484 = inttoptr i64 %1478 to double*
  store double %1483, double* %1484
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 28
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 3
  store i64 %1488, i64* %PC
  %1489 = inttoptr i64 %1486 to i32*
  %1490 = load i32, i32* %1489
  %1491 = zext i32 %1490 to i64
  store i64 %1491, i64* %RAX, align 8, !tbaa !2428
  %1492 = load i64, i64* %RAX
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 3
  store i64 %1494, i64* %PC
  %1495 = trunc i64 %1492 to i32
  %1496 = add i32 2, %1495
  %1497 = zext i32 %1496 to i64
  store i64 %1497, i64* %RAX, align 8, !tbaa !2428
  %1498 = icmp ult i32 %1496, %1495
  %1499 = icmp ult i32 %1496, 2
  %1500 = or i1 %1498, %1499
  %1501 = zext i1 %1500 to i8
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1501, i8* %1502, align 1, !tbaa !2432
  %1503 = and i32 %1496, 255
  %1504 = call i32 @llvm.ctpop.i32(i32 %1503) #17
  %1505 = trunc i32 %1504 to i8
  %1506 = and i8 %1505, 1
  %1507 = xor i8 %1506, 1
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1507, i8* %1508, align 1, !tbaa !2446
  %1509 = xor i64 2, %1492
  %1510 = trunc i64 %1509 to i32
  %1511 = xor i32 %1510, %1496
  %1512 = lshr i32 %1511, 4
  %1513 = trunc i32 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1514, i8* %1515, align 1, !tbaa !2447
  %1516 = icmp eq i32 %1496, 0
  %1517 = zext i1 %1516 to i8
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1517, i8* %1518, align 1, !tbaa !2448
  %1519 = lshr i32 %1496, 31
  %1520 = trunc i32 %1519 to i8
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1520, i8* %1521, align 1, !tbaa !2449
  %1522 = lshr i32 %1495, 31
  %1523 = xor i32 %1519, %1522
  %1524 = add nuw nsw i32 %1523, %1519
  %1525 = icmp eq i32 %1524, 2
  %1526 = zext i1 %1525 to i8
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1526, i8* %1527, align 1, !tbaa !2450
  %1528 = load i64, i64* %RBP
  %1529 = sub i64 %1528, 28
  %1530 = load i32, i32* %EAX
  %1531 = zext i32 %1530 to i64
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 3
  store i64 %1533, i64* %PC
  %1534 = inttoptr i64 %1529 to i32*
  store i32 %1530, i32* %1534
  %1535 = load i64, i64* %PC
  %1536 = sub i64 %1535, 159
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 5
  store i64 %1538, i64* %PC
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1536, i64* %1539, align 8, !tbaa !2428
  br label %block_400f0d

block_400e7d:                                     ; preds = %block_400e60
  %1540 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 8
  store i64 %1542, i64* %PC
  %1543 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 64) to double*)
  %1544 = bitcast i8* %1540 to double*
  store double %1543, double* %1544, align 1, !tbaa !2452
  %1545 = getelementptr inbounds i8, i8* %1540, i64 8
  %1546 = bitcast i8* %1545 to double*
  store double 0.000000e+00, double* %1546, align 1, !tbaa !2452
  %1547 = load i64, i64* %RBP
  %1548 = sub i64 %1547, 4
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 3
  store i64 %1550, i64* %PC
  %1551 = inttoptr i64 %1548 to i32*
  %1552 = load i32, i32* %1551
  %1553 = zext i32 %1552 to i64
  store i64 %1553, i64* %RAX, align 8, !tbaa !2428
  %1554 = load i64, i64* %RAX
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 3
  store i64 %1556, i64* %PC
  %1557 = shl i64 %1554, 32
  %1558 = ashr i64 %1557, 33
  %1559 = trunc i64 %1554 to i8
  %1560 = and i8 %1559, 1
  %1561 = trunc i64 %1558 to i32
  %1562 = and i64 %1558, 4294967295
  store i64 %1562, i64* %RAX, align 8, !tbaa !2428
  %1563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1560, i8* %1563, align 1, !tbaa !2451
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1565 = and i32 %1561, 255
  %1566 = call i32 @llvm.ctpop.i32(i32 %1565) #17
  %1567 = trunc i32 %1566 to i8
  %1568 = and i8 %1567, 1
  %1569 = xor i8 %1568, 1
  store i8 %1569, i8* %1564, align 1, !tbaa !2451
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1570, align 1, !tbaa !2451
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1572 = icmp eq i32 %1561, 0
  %1573 = zext i1 %1572 to i8
  store i8 %1573, i8* %1571, align 1, !tbaa !2451
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1575 = lshr i32 %1561, 31
  %1576 = trunc i32 %1575 to i8
  store i8 %1576, i8* %1574, align 1, !tbaa !2451
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1577, align 1, !tbaa !2451
  %1578 = load i64, i64* %RBP
  %1579 = sub i64 %1578, 32
  %1580 = load i32, i32* %EAX
  %1581 = zext i32 %1580 to i64
  %1582 = load i64, i64* %PC
  %1583 = add i64 %1582, 3
  store i64 %1583, i64* %PC
  %1584 = inttoptr i64 %1579 to i32*
  store i32 %1580, i32* %1584
  %1585 = load i64, i64* %PC
  %1586 = sub i64 %1585, 1998
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 5
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1592 = load i64, i64* %1591, align 8, !tbaa !2428
  %1593 = add i64 %1592, -8
  %1594 = inttoptr i64 %1593 to i64*
  store i64 %1588, i64* %1594
  store i64 %1593, i64* %1591, align 8, !tbaa !2428
  %1595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1586, i64* %1595, align 8, !tbaa !2428
  %1596 = load i64, i64* %PC
  %1597 = bitcast %struct.State** %state.i1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1597)
  %1598 = bitcast i64* %curr_pc.i2 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1598)
  %1599 = bitcast %struct.Memory** %memory.i3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1599)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i4)
  %1600 = bitcast i64* %SS_BASE.i5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1600)
  %1601 = bitcast i64* %ES_BASE.i6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1601)
  %1602 = bitcast i64* %DS_BASE.i7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1602)
  %1603 = bitcast i64* %CS_BASE.i8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1603)
  %1604 = bitcast %struct.State** %STATE.i9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1604)
  %1605 = bitcast %struct.Memory** %MEMORY.i10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1605)
  %1606 = bitcast i64** %_DR0.i11 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1606)
  %1607 = bitcast i64** %_DR1.i12 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1607)
  %1608 = bitcast i64** %_DR2.i13 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1608)
  %1609 = bitcast i64** %_DR3.i14 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1609)
  %1610 = bitcast i64** %_DR4.i15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1610)
  %1611 = bitcast i64** %_DR5.i16 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1611)
  %1612 = bitcast i64** %_DR6.i17 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1612)
  %1613 = bitcast i64** %_DR7.i18 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1613)
  %1614 = bitcast i64** %CR0.i19 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1614)
  %1615 = bitcast i64** %CR1.i20 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1615)
  %1616 = bitcast i64** %CR2.i21 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1616)
  %1617 = bitcast i64** %CR3.i22 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1617)
  %1618 = bitcast i64** %CR4.i23 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1618)
  %1619 = bitcast i64** %CR8.i24 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1619)
  store %struct.State* %0, %struct.State** %state.i1, align 8, !noalias !2475
  store i64 %1596, i64* %curr_pc.i2, align 8, !noalias !2475
  store %struct.Memory* %2, %struct.Memory** %memory.i3, align 8, !noalias !2475
  store i8 0, i8* %BRANCH_TAKEN.i4, align 1, !noalias !2475
  store i64 0, i64* %SS_BASE.i5, align 8, !noalias !2475
  store i64 0, i64* %ES_BASE.i6, align 8, !noalias !2475
  store i64 0, i64* %DS_BASE.i7, align 8, !noalias !2475
  store i64 0, i64* %CS_BASE.i8, align 8, !noalias !2475
  store %struct.State* %0, %struct.State** %STATE.i9, align 8, !noalias !2475
  store %struct.Memory* %2, %struct.Memory** %MEMORY.i10, align 8, !noalias !2475
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1621 = getelementptr inbounds %struct.GPR, %struct.GPR* %1620, i32 0, i32 33
  %1622 = getelementptr inbounds %struct.Reg, %struct.Reg* %1621, i32 0, i32 0
  %PC.i25 = bitcast %union.anon* %1622 to i64*
  store i64 %1596, i64* %PC.i25, align 8, !alias.scope !2479, !noalias !2480
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1624 = getelementptr inbounds %struct.GPR, %struct.GPR* %1623, i32 0, i32 1
  %1625 = getelementptr inbounds %struct.Reg, %struct.Reg* %1624, i32 0, i32 0
  %1626 = bitcast %union.anon* %1625 to %struct.anon.2*
  %AH.i26 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1626, i32 0, i32 1
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1628 = getelementptr inbounds %struct.GPR, %struct.GPR* %1627, i32 0, i32 3
  %1629 = getelementptr inbounds %struct.Reg, %struct.Reg* %1628, i32 0, i32 0
  %1630 = bitcast %union.anon* %1629 to %struct.anon.2*
  %BH.i27 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1630, i32 0, i32 1
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1632 = getelementptr inbounds %struct.GPR, %struct.GPR* %1631, i32 0, i32 5
  %1633 = getelementptr inbounds %struct.Reg, %struct.Reg* %1632, i32 0, i32 0
  %1634 = bitcast %union.anon* %1633 to %struct.anon.2*
  %CH.i28 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1634, i32 0, i32 1
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1636 = getelementptr inbounds %struct.GPR, %struct.GPR* %1635, i32 0, i32 7
  %1637 = getelementptr inbounds %struct.Reg, %struct.Reg* %1636, i32 0, i32 0
  %1638 = bitcast %union.anon* %1637 to %struct.anon.2*
  %DH.i29 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1638, i32 0, i32 1
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1640 = getelementptr inbounds %struct.GPR, %struct.GPR* %1639, i32 0, i32 1
  %1641 = getelementptr inbounds %struct.Reg, %struct.Reg* %1640, i32 0, i32 0
  %1642 = bitcast %union.anon* %1641 to %struct.anon.2*
  %AL.i30 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1642, i32 0, i32 0
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1644 = getelementptr inbounds %struct.GPR, %struct.GPR* %1643, i32 0, i32 3
  %1645 = getelementptr inbounds %struct.Reg, %struct.Reg* %1644, i32 0, i32 0
  %1646 = bitcast %union.anon* %1645 to %struct.anon.2*
  %BL.i31 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1646, i32 0, i32 0
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1648 = getelementptr inbounds %struct.GPR, %struct.GPR* %1647, i32 0, i32 5
  %1649 = getelementptr inbounds %struct.Reg, %struct.Reg* %1648, i32 0, i32 0
  %1650 = bitcast %union.anon* %1649 to %struct.anon.2*
  %CL.i32 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1650, i32 0, i32 0
  %1651 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1652 = getelementptr inbounds %struct.GPR, %struct.GPR* %1651, i32 0, i32 7
  %1653 = getelementptr inbounds %struct.Reg, %struct.Reg* %1652, i32 0, i32 0
  %1654 = bitcast %union.anon* %1653 to %struct.anon.2*
  %DL.i33 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1654, i32 0, i32 0
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1656 = getelementptr inbounds %struct.GPR, %struct.GPR* %1655, i32 0, i32 9
  %1657 = getelementptr inbounds %struct.Reg, %struct.Reg* %1656, i32 0, i32 0
  %1658 = bitcast %union.anon* %1657 to %struct.anon.2*
  %SIL.i34 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1658, i32 0, i32 0
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1660 = getelementptr inbounds %struct.GPR, %struct.GPR* %1659, i32 0, i32 11
  %1661 = getelementptr inbounds %struct.Reg, %struct.Reg* %1660, i32 0, i32 0
  %1662 = bitcast %union.anon* %1661 to %struct.anon.2*
  %DIL.i35 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1662, i32 0, i32 0
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1664 = getelementptr inbounds %struct.GPR, %struct.GPR* %1663, i32 0, i32 13
  %1665 = getelementptr inbounds %struct.Reg, %struct.Reg* %1664, i32 0, i32 0
  %1666 = bitcast %union.anon* %1665 to %struct.anon.2*
  %SPL.i36 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1666, i32 0, i32 0
  %1667 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1668 = getelementptr inbounds %struct.GPR, %struct.GPR* %1667, i32 0, i32 15
  %1669 = getelementptr inbounds %struct.Reg, %struct.Reg* %1668, i32 0, i32 0
  %1670 = bitcast %union.anon* %1669 to %struct.anon.2*
  %BPL.i37 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1670, i32 0, i32 0
  %1671 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1672 = getelementptr inbounds %struct.GPR, %struct.GPR* %1671, i32 0, i32 17
  %1673 = getelementptr inbounds %struct.Reg, %struct.Reg* %1672, i32 0, i32 0
  %1674 = bitcast %union.anon* %1673 to %struct.anon.2*
  %R8B.i38 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1674, i32 0, i32 0
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1676 = getelementptr inbounds %struct.GPR, %struct.GPR* %1675, i32 0, i32 19
  %1677 = getelementptr inbounds %struct.Reg, %struct.Reg* %1676, i32 0, i32 0
  %1678 = bitcast %union.anon* %1677 to %struct.anon.2*
  %R9B.i39 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1678, i32 0, i32 0
  %1679 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1680 = getelementptr inbounds %struct.GPR, %struct.GPR* %1679, i32 0, i32 21
  %1681 = getelementptr inbounds %struct.Reg, %struct.Reg* %1680, i32 0, i32 0
  %1682 = bitcast %union.anon* %1681 to %struct.anon.2*
  %R10B.i40 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1682, i32 0, i32 0
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1684 = getelementptr inbounds %struct.GPR, %struct.GPR* %1683, i32 0, i32 23
  %1685 = getelementptr inbounds %struct.Reg, %struct.Reg* %1684, i32 0, i32 0
  %1686 = bitcast %union.anon* %1685 to %struct.anon.2*
  %R11B.i41 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1686, i32 0, i32 0
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1688 = getelementptr inbounds %struct.GPR, %struct.GPR* %1687, i32 0, i32 25
  %1689 = getelementptr inbounds %struct.Reg, %struct.Reg* %1688, i32 0, i32 0
  %1690 = bitcast %union.anon* %1689 to %struct.anon.2*
  %R12B.i42 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1690, i32 0, i32 0
  %1691 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1692 = getelementptr inbounds %struct.GPR, %struct.GPR* %1691, i32 0, i32 27
  %1693 = getelementptr inbounds %struct.Reg, %struct.Reg* %1692, i32 0, i32 0
  %1694 = bitcast %union.anon* %1693 to %struct.anon.2*
  %R13B.i43 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1694, i32 0, i32 0
  %1695 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1696 = getelementptr inbounds %struct.GPR, %struct.GPR* %1695, i32 0, i32 29
  %1697 = getelementptr inbounds %struct.Reg, %struct.Reg* %1696, i32 0, i32 0
  %1698 = bitcast %union.anon* %1697 to %struct.anon.2*
  %R14B.i44 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1698, i32 0, i32 0
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1700 = getelementptr inbounds %struct.GPR, %struct.GPR* %1699, i32 0, i32 31
  %1701 = getelementptr inbounds %struct.Reg, %struct.Reg* %1700, i32 0, i32 0
  %1702 = bitcast %union.anon* %1701 to %struct.anon.2*
  %R15B.i45 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1702, i32 0, i32 0
  %1703 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1704 = getelementptr inbounds %struct.GPR, %struct.GPR* %1703, i32 0, i32 1
  %1705 = getelementptr inbounds %struct.Reg, %struct.Reg* %1704, i32 0, i32 0
  %AX.i46 = bitcast %union.anon* %1705 to i16*
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1707 = getelementptr inbounds %struct.GPR, %struct.GPR* %1706, i32 0, i32 3
  %1708 = getelementptr inbounds %struct.Reg, %struct.Reg* %1707, i32 0, i32 0
  %BX.i47 = bitcast %union.anon* %1708 to i16*
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1710 = getelementptr inbounds %struct.GPR, %struct.GPR* %1709, i32 0, i32 5
  %1711 = getelementptr inbounds %struct.Reg, %struct.Reg* %1710, i32 0, i32 0
  %CX.i48 = bitcast %union.anon* %1711 to i16*
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1713 = getelementptr inbounds %struct.GPR, %struct.GPR* %1712, i32 0, i32 7
  %1714 = getelementptr inbounds %struct.Reg, %struct.Reg* %1713, i32 0, i32 0
  %DX.i49 = bitcast %union.anon* %1714 to i16*
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1716 = getelementptr inbounds %struct.GPR, %struct.GPR* %1715, i32 0, i32 9
  %1717 = getelementptr inbounds %struct.Reg, %struct.Reg* %1716, i32 0, i32 0
  %SI.i50 = bitcast %union.anon* %1717 to i16*
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1719 = getelementptr inbounds %struct.GPR, %struct.GPR* %1718, i32 0, i32 11
  %1720 = getelementptr inbounds %struct.Reg, %struct.Reg* %1719, i32 0, i32 0
  %DI.i51 = bitcast %union.anon* %1720 to i16*
  %1721 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1722 = getelementptr inbounds %struct.GPR, %struct.GPR* %1721, i32 0, i32 13
  %1723 = getelementptr inbounds %struct.Reg, %struct.Reg* %1722, i32 0, i32 0
  %SP.i52 = bitcast %union.anon* %1723 to i16*
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1725 = getelementptr inbounds %struct.GPR, %struct.GPR* %1724, i32 0, i32 15
  %1726 = getelementptr inbounds %struct.Reg, %struct.Reg* %1725, i32 0, i32 0
  %BP.i53 = bitcast %union.anon* %1726 to i16*
  %1727 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1728 = getelementptr inbounds %struct.GPR, %struct.GPR* %1727, i32 0, i32 17
  %1729 = getelementptr inbounds %struct.Reg, %struct.Reg* %1728, i32 0, i32 0
  %R8W.i54 = bitcast %union.anon* %1729 to i16*
  %1730 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1731 = getelementptr inbounds %struct.GPR, %struct.GPR* %1730, i32 0, i32 19
  %1732 = getelementptr inbounds %struct.Reg, %struct.Reg* %1731, i32 0, i32 0
  %R9W.i55 = bitcast %union.anon* %1732 to i16*
  %1733 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1734 = getelementptr inbounds %struct.GPR, %struct.GPR* %1733, i32 0, i32 21
  %1735 = getelementptr inbounds %struct.Reg, %struct.Reg* %1734, i32 0, i32 0
  %R10W.i56 = bitcast %union.anon* %1735 to i16*
  %1736 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1737 = getelementptr inbounds %struct.GPR, %struct.GPR* %1736, i32 0, i32 23
  %1738 = getelementptr inbounds %struct.Reg, %struct.Reg* %1737, i32 0, i32 0
  %R11W.i57 = bitcast %union.anon* %1738 to i16*
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1740 = getelementptr inbounds %struct.GPR, %struct.GPR* %1739, i32 0, i32 25
  %1741 = getelementptr inbounds %struct.Reg, %struct.Reg* %1740, i32 0, i32 0
  %R12W.i58 = bitcast %union.anon* %1741 to i16*
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1743 = getelementptr inbounds %struct.GPR, %struct.GPR* %1742, i32 0, i32 27
  %1744 = getelementptr inbounds %struct.Reg, %struct.Reg* %1743, i32 0, i32 0
  %R13W.i59 = bitcast %union.anon* %1744 to i16*
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1746 = getelementptr inbounds %struct.GPR, %struct.GPR* %1745, i32 0, i32 29
  %1747 = getelementptr inbounds %struct.Reg, %struct.Reg* %1746, i32 0, i32 0
  %R14W.i60 = bitcast %union.anon* %1747 to i16*
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1749 = getelementptr inbounds %struct.GPR, %struct.GPR* %1748, i32 0, i32 31
  %1750 = getelementptr inbounds %struct.Reg, %struct.Reg* %1749, i32 0, i32 0
  %R15W.i61 = bitcast %union.anon* %1750 to i16*
  %1751 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1752 = getelementptr inbounds %struct.GPR, %struct.GPR* %1751, i32 0, i32 33
  %1753 = getelementptr inbounds %struct.Reg, %struct.Reg* %1752, i32 0, i32 0
  %IP.i62 = bitcast %union.anon* %1753 to i16*
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1755 = getelementptr inbounds %struct.GPR, %struct.GPR* %1754, i32 0, i32 1
  %1756 = getelementptr inbounds %struct.Reg, %struct.Reg* %1755, i32 0, i32 0
  %EAX.i63 = bitcast %union.anon* %1756 to i32*
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1758 = getelementptr inbounds %struct.GPR, %struct.GPR* %1757, i32 0, i32 3
  %1759 = getelementptr inbounds %struct.Reg, %struct.Reg* %1758, i32 0, i32 0
  %EBX.i64 = bitcast %union.anon* %1759 to i32*
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1761 = getelementptr inbounds %struct.GPR, %struct.GPR* %1760, i32 0, i32 5
  %1762 = getelementptr inbounds %struct.Reg, %struct.Reg* %1761, i32 0, i32 0
  %ECX.i65 = bitcast %union.anon* %1762 to i32*
  %1763 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1764 = getelementptr inbounds %struct.GPR, %struct.GPR* %1763, i32 0, i32 7
  %1765 = getelementptr inbounds %struct.Reg, %struct.Reg* %1764, i32 0, i32 0
  %EDX.i66 = bitcast %union.anon* %1765 to i32*
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1767 = getelementptr inbounds %struct.GPR, %struct.GPR* %1766, i32 0, i32 9
  %1768 = getelementptr inbounds %struct.Reg, %struct.Reg* %1767, i32 0, i32 0
  %ESI.i67 = bitcast %union.anon* %1768 to i32*
  %1769 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1770 = getelementptr inbounds %struct.GPR, %struct.GPR* %1769, i32 0, i32 11
  %1771 = getelementptr inbounds %struct.Reg, %struct.Reg* %1770, i32 0, i32 0
  %EDI.i68 = bitcast %union.anon* %1771 to i32*
  %1772 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1773 = getelementptr inbounds %struct.GPR, %struct.GPR* %1772, i32 0, i32 13
  %1774 = getelementptr inbounds %struct.Reg, %struct.Reg* %1773, i32 0, i32 0
  %ESP.i69 = bitcast %union.anon* %1774 to i32*
  %1775 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1776 = getelementptr inbounds %struct.GPR, %struct.GPR* %1775, i32 0, i32 15
  %1777 = getelementptr inbounds %struct.Reg, %struct.Reg* %1776, i32 0, i32 0
  %EBP.i70 = bitcast %union.anon* %1777 to i32*
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1779 = getelementptr inbounds %struct.GPR, %struct.GPR* %1778, i32 0, i32 33
  %1780 = getelementptr inbounds %struct.Reg, %struct.Reg* %1779, i32 0, i32 0
  %EIP.i71 = bitcast %union.anon* %1780 to i32*
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1782 = getelementptr inbounds %struct.GPR, %struct.GPR* %1781, i32 0, i32 17
  %1783 = getelementptr inbounds %struct.Reg, %struct.Reg* %1782, i32 0, i32 0
  %R8D.i72 = bitcast %union.anon* %1783 to i32*
  %1784 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1785 = getelementptr inbounds %struct.GPR, %struct.GPR* %1784, i32 0, i32 19
  %1786 = getelementptr inbounds %struct.Reg, %struct.Reg* %1785, i32 0, i32 0
  %R9D.i73 = bitcast %union.anon* %1786 to i32*
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1788 = getelementptr inbounds %struct.GPR, %struct.GPR* %1787, i32 0, i32 21
  %1789 = getelementptr inbounds %struct.Reg, %struct.Reg* %1788, i32 0, i32 0
  %R10D.i74 = bitcast %union.anon* %1789 to i32*
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1791 = getelementptr inbounds %struct.GPR, %struct.GPR* %1790, i32 0, i32 23
  %1792 = getelementptr inbounds %struct.Reg, %struct.Reg* %1791, i32 0, i32 0
  %R11D.i75 = bitcast %union.anon* %1792 to i32*
  %1793 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1794 = getelementptr inbounds %struct.GPR, %struct.GPR* %1793, i32 0, i32 25
  %1795 = getelementptr inbounds %struct.Reg, %struct.Reg* %1794, i32 0, i32 0
  %R12D.i76 = bitcast %union.anon* %1795 to i32*
  %1796 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1797 = getelementptr inbounds %struct.GPR, %struct.GPR* %1796, i32 0, i32 27
  %1798 = getelementptr inbounds %struct.Reg, %struct.Reg* %1797, i32 0, i32 0
  %R13D.i77 = bitcast %union.anon* %1798 to i32*
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1800 = getelementptr inbounds %struct.GPR, %struct.GPR* %1799, i32 0, i32 29
  %1801 = getelementptr inbounds %struct.Reg, %struct.Reg* %1800, i32 0, i32 0
  %R14D.i78 = bitcast %union.anon* %1801 to i32*
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1803 = getelementptr inbounds %struct.GPR, %struct.GPR* %1802, i32 0, i32 31
  %1804 = getelementptr inbounds %struct.Reg, %struct.Reg* %1803, i32 0, i32 0
  %R15D.i79 = bitcast %union.anon* %1804 to i32*
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1806 = getelementptr inbounds %struct.GPR, %struct.GPR* %1805, i32 0, i32 1
  %1807 = getelementptr inbounds %struct.Reg, %struct.Reg* %1806, i32 0, i32 0
  %RAX.i80 = bitcast %union.anon* %1807 to i64*
  %1808 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1809 = getelementptr inbounds %struct.GPR, %struct.GPR* %1808, i32 0, i32 3
  %1810 = getelementptr inbounds %struct.Reg, %struct.Reg* %1809, i32 0, i32 0
  %RBX.i81 = bitcast %union.anon* %1810 to i64*
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1812 = getelementptr inbounds %struct.GPR, %struct.GPR* %1811, i32 0, i32 5
  %1813 = getelementptr inbounds %struct.Reg, %struct.Reg* %1812, i32 0, i32 0
  %RCX.i82 = bitcast %union.anon* %1813 to i64*
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1815 = getelementptr inbounds %struct.GPR, %struct.GPR* %1814, i32 0, i32 7
  %1816 = getelementptr inbounds %struct.Reg, %struct.Reg* %1815, i32 0, i32 0
  %RDX.i83 = bitcast %union.anon* %1816 to i64*
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1818 = getelementptr inbounds %struct.GPR, %struct.GPR* %1817, i32 0, i32 9
  %1819 = getelementptr inbounds %struct.Reg, %struct.Reg* %1818, i32 0, i32 0
  %RSI.i84 = bitcast %union.anon* %1819 to i64*
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1821 = getelementptr inbounds %struct.GPR, %struct.GPR* %1820, i32 0, i32 11
  %1822 = getelementptr inbounds %struct.Reg, %struct.Reg* %1821, i32 0, i32 0
  %RDI.i85 = bitcast %union.anon* %1822 to i64*
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1824 = getelementptr inbounds %struct.GPR, %struct.GPR* %1823, i32 0, i32 13
  %1825 = getelementptr inbounds %struct.Reg, %struct.Reg* %1824, i32 0, i32 0
  %RSP.i86 = bitcast %union.anon* %1825 to i64*
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1827 = getelementptr inbounds %struct.GPR, %struct.GPR* %1826, i32 0, i32 15
  %1828 = getelementptr inbounds %struct.Reg, %struct.Reg* %1827, i32 0, i32 0
  %RBP.i87 = bitcast %union.anon* %1828 to i64*
  %1829 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1830 = getelementptr inbounds %struct.GPR, %struct.GPR* %1829, i32 0, i32 17
  %1831 = getelementptr inbounds %struct.Reg, %struct.Reg* %1830, i32 0, i32 0
  %R8.i88 = bitcast %union.anon* %1831 to i64*
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1833 = getelementptr inbounds %struct.GPR, %struct.GPR* %1832, i32 0, i32 19
  %1834 = getelementptr inbounds %struct.Reg, %struct.Reg* %1833, i32 0, i32 0
  %R9.i89 = bitcast %union.anon* %1834 to i64*
  %1835 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1836 = getelementptr inbounds %struct.GPR, %struct.GPR* %1835, i32 0, i32 21
  %1837 = getelementptr inbounds %struct.Reg, %struct.Reg* %1836, i32 0, i32 0
  %R10.i90 = bitcast %union.anon* %1837 to i64*
  %1838 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1839 = getelementptr inbounds %struct.GPR, %struct.GPR* %1838, i32 0, i32 23
  %1840 = getelementptr inbounds %struct.Reg, %struct.Reg* %1839, i32 0, i32 0
  %R11.i91 = bitcast %union.anon* %1840 to i64*
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1842 = getelementptr inbounds %struct.GPR, %struct.GPR* %1841, i32 0, i32 25
  %1843 = getelementptr inbounds %struct.Reg, %struct.Reg* %1842, i32 0, i32 0
  %R12.i92 = bitcast %union.anon* %1843 to i64*
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1845 = getelementptr inbounds %struct.GPR, %struct.GPR* %1844, i32 0, i32 27
  %1846 = getelementptr inbounds %struct.Reg, %struct.Reg* %1845, i32 0, i32 0
  %R13.i93 = bitcast %union.anon* %1846 to i64*
  %1847 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1848 = getelementptr inbounds %struct.GPR, %struct.GPR* %1847, i32 0, i32 29
  %1849 = getelementptr inbounds %struct.Reg, %struct.Reg* %1848, i32 0, i32 0
  %R14.i94 = bitcast %union.anon* %1849 to i64*
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1851 = getelementptr inbounds %struct.GPR, %struct.GPR* %1850, i32 0, i32 31
  %1852 = getelementptr inbounds %struct.Reg, %struct.Reg* %1851, i32 0, i32 0
  %R15.i95 = bitcast %union.anon* %1852 to i64*
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1854 = getelementptr inbounds %struct.GPR, %struct.GPR* %1853, i32 0, i32 33
  %1855 = getelementptr inbounds %struct.Reg, %struct.Reg* %1854, i32 0, i32 0
  %RIP.i96 = bitcast %union.anon* %1855 to i64*
  %1856 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1857 = getelementptr inbounds %struct.Segments, %struct.Segments* %1856, i32 0, i32 1
  %SS.i97 = bitcast %union.SegmentSelector* %1857 to i16*
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1859 = getelementptr inbounds %struct.Segments, %struct.Segments* %1858, i32 0, i32 3
  %ES.i98 = bitcast %union.SegmentSelector* %1859 to i16*
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1861 = getelementptr inbounds %struct.Segments, %struct.Segments* %1860, i32 0, i32 5
  %GS.i99 = bitcast %union.SegmentSelector* %1861 to i16*
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1863 = getelementptr inbounds %struct.Segments, %struct.Segments* %1862, i32 0, i32 7
  %FS.i100 = bitcast %union.SegmentSelector* %1863 to i16*
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1865 = getelementptr inbounds %struct.Segments, %struct.Segments* %1864, i32 0, i32 9
  %DS.i101 = bitcast %union.SegmentSelector* %1865 to i16*
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1867 = getelementptr inbounds %struct.Segments, %struct.Segments* %1866, i32 0, i32 11
  %CS.i102 = bitcast %union.SegmentSelector* %1867 to i16*
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %1869 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %1868, i32 0, i32 5
  %1870 = getelementptr inbounds %struct.Reg, %struct.Reg* %1869, i32 0, i32 0
  %GS_BASE.i103 = bitcast %union.anon* %1870 to i64*
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %1872 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %1871, i32 0, i32 7
  %1873 = getelementptr inbounds %struct.Reg, %struct.Reg* %1872, i32 0, i32 0
  %FS_BASE.i104 = bitcast %union.anon* %1873 to i64*
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1875 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1874, i64 0, i64 0
  %YMM0.i105 = bitcast %union.VectorReg* %1875 to %"class.std::bitset"*
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1877 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1876, i64 0, i64 1
  %YMM1.i106 = bitcast %union.VectorReg* %1877 to %"class.std::bitset"*
  %1878 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1879 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1878, i64 0, i64 2
  %YMM2.i107 = bitcast %union.VectorReg* %1879 to %"class.std::bitset"*
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1881 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1880, i64 0, i64 3
  %YMM3.i108 = bitcast %union.VectorReg* %1881 to %"class.std::bitset"*
  %1882 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1883 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1882, i64 0, i64 4
  %YMM4.i109 = bitcast %union.VectorReg* %1883 to %"class.std::bitset"*
  %1884 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1885 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1884, i64 0, i64 5
  %YMM5.i110 = bitcast %union.VectorReg* %1885 to %"class.std::bitset"*
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1887 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1886, i64 0, i64 6
  %YMM6.i111 = bitcast %union.VectorReg* %1887 to %"class.std::bitset"*
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1889 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1888, i64 0, i64 7
  %YMM7.i112 = bitcast %union.VectorReg* %1889 to %"class.std::bitset"*
  %1890 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1891 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1890, i64 0, i64 8
  %YMM8.i113 = bitcast %union.VectorReg* %1891 to %"class.std::bitset"*
  %1892 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1893 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1892, i64 0, i64 9
  %YMM9.i114 = bitcast %union.VectorReg* %1893 to %"class.std::bitset"*
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1895 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1894, i64 0, i64 10
  %YMM10.i115 = bitcast %union.VectorReg* %1895 to %"class.std::bitset"*
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1897 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1896, i64 0, i64 11
  %YMM11.i116 = bitcast %union.VectorReg* %1897 to %"class.std::bitset"*
  %1898 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1899 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1898, i64 0, i64 12
  %YMM12.i117 = bitcast %union.VectorReg* %1899 to %"class.std::bitset"*
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1901 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1900, i64 0, i64 13
  %YMM13.i118 = bitcast %union.VectorReg* %1901 to %"class.std::bitset"*
  %1902 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1903 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1902, i64 0, i64 14
  %YMM14.i119 = bitcast %union.VectorReg* %1903 to %"class.std::bitset"*
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1905 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1904, i64 0, i64 15
  %YMM15.i120 = bitcast %union.VectorReg* %1905 to %"class.std::bitset"*
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1907 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1906, i64 0, i64 0
  %XMM0.i121 = bitcast %union.VectorReg* %1907 to %union.vec128_t*
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1909 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1908, i64 0, i64 1
  %XMM1.i122 = bitcast %union.VectorReg* %1909 to %union.vec128_t*
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1911 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1910, i64 0, i64 2
  %XMM2.i123 = bitcast %union.VectorReg* %1911 to %union.vec128_t*
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1913 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1912, i64 0, i64 3
  %XMM3.i124 = bitcast %union.VectorReg* %1913 to %union.vec128_t*
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1915 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1914, i64 0, i64 4
  %XMM4.i125 = bitcast %union.VectorReg* %1915 to %union.vec128_t*
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1917 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1916, i64 0, i64 5
  %XMM5.i126 = bitcast %union.VectorReg* %1917 to %union.vec128_t*
  %1918 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1919 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1918, i64 0, i64 6
  %XMM6.i127 = bitcast %union.VectorReg* %1919 to %union.vec128_t*
  %1920 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1921 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1920, i64 0, i64 7
  %XMM7.i128 = bitcast %union.VectorReg* %1921 to %union.vec128_t*
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1923 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1922, i64 0, i64 8
  %XMM8.i129 = bitcast %union.VectorReg* %1923 to %union.vec128_t*
  %1924 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1925 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1924, i64 0, i64 9
  %XMM9.i130 = bitcast %union.VectorReg* %1925 to %union.vec128_t*
  %1926 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1927 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1926, i64 0, i64 10
  %XMM10.i131 = bitcast %union.VectorReg* %1927 to %union.vec128_t*
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1929 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1928, i64 0, i64 11
  %XMM11.i132 = bitcast %union.VectorReg* %1929 to %union.vec128_t*
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1931 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1930, i64 0, i64 12
  %XMM12.i133 = bitcast %union.VectorReg* %1931 to %union.vec128_t*
  %1932 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1933 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1932, i64 0, i64 13
  %XMM13.i134 = bitcast %union.VectorReg* %1933 to %union.vec128_t*
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1935 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1934, i64 0, i64 14
  %XMM14.i135 = bitcast %union.VectorReg* %1935 to %union.vec128_t*
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1937 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1936, i64 0, i64 15
  %XMM15.i136 = bitcast %union.VectorReg* %1937 to %union.vec128_t*
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1939 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1938, i32 0, i32 0
  %1940 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1939, i64 0, i64 0
  %ST0.i137 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1940, i32 0, i32 1
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1942 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1941, i32 0, i32 0
  %1943 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1942, i64 0, i64 1
  %ST1.i138 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1943, i32 0, i32 1
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1945 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1944, i32 0, i32 0
  %1946 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1945, i64 0, i64 2
  %ST2.i139 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1946, i32 0, i32 1
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1948 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1947, i32 0, i32 0
  %1949 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1948, i64 0, i64 3
  %ST3.i140 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1949, i32 0, i32 1
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1951 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1950, i32 0, i32 0
  %1952 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1951, i64 0, i64 4
  %ST4.i141 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1952, i32 0, i32 1
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1954 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1953, i32 0, i32 0
  %1955 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1954, i64 0, i64 5
  %ST5.i142 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1955, i32 0, i32 1
  %1956 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1957 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1956, i32 0, i32 0
  %1958 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1957, i64 0, i64 6
  %ST6.i143 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1958, i32 0, i32 1
  %1959 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1960 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1959, i32 0, i32 0
  %1961 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1960, i64 0, i64 7
  %ST7.i144 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1961, i32 0, i32 1
  %1962 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1963 = getelementptr inbounds %struct.MMX, %struct.MMX* %1962, i32 0, i32 0
  %1964 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1963, i64 0, i64 0
  %1965 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1964, i32 0, i32 1
  %1966 = bitcast %union.vec64_t* %1965 to %struct.uint64v1_t*
  %1967 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1966, i32 0, i32 0
  %MM0.i145 = getelementptr inbounds [1 x i64], [1 x i64]* %1967, i64 0, i64 0
  %1968 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1969 = getelementptr inbounds %struct.MMX, %struct.MMX* %1968, i32 0, i32 0
  %1970 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1969, i64 0, i64 1
  %1971 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1970, i32 0, i32 1
  %1972 = bitcast %union.vec64_t* %1971 to %struct.uint64v1_t*
  %1973 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1972, i32 0, i32 0
  %MM1.i146 = getelementptr inbounds [1 x i64], [1 x i64]* %1973, i64 0, i64 0
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1975 = getelementptr inbounds %struct.MMX, %struct.MMX* %1974, i32 0, i32 0
  %1976 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1975, i64 0, i64 2
  %1977 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1976, i32 0, i32 1
  %1978 = bitcast %union.vec64_t* %1977 to %struct.uint64v1_t*
  %1979 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1978, i32 0, i32 0
  %MM2.i147 = getelementptr inbounds [1 x i64], [1 x i64]* %1979, i64 0, i64 0
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1981 = getelementptr inbounds %struct.MMX, %struct.MMX* %1980, i32 0, i32 0
  %1982 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1981, i64 0, i64 3
  %1983 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1982, i32 0, i32 1
  %1984 = bitcast %union.vec64_t* %1983 to %struct.uint64v1_t*
  %1985 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1984, i32 0, i32 0
  %MM3.i148 = getelementptr inbounds [1 x i64], [1 x i64]* %1985, i64 0, i64 0
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1987 = getelementptr inbounds %struct.MMX, %struct.MMX* %1986, i32 0, i32 0
  %1988 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1987, i64 0, i64 4
  %1989 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1988, i32 0, i32 1
  %1990 = bitcast %union.vec64_t* %1989 to %struct.uint64v1_t*
  %1991 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1990, i32 0, i32 0
  %MM4.i149 = getelementptr inbounds [1 x i64], [1 x i64]* %1991, i64 0, i64 0
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1993 = getelementptr inbounds %struct.MMX, %struct.MMX* %1992, i32 0, i32 0
  %1994 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1993, i64 0, i64 5
  %1995 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1994, i32 0, i32 1
  %1996 = bitcast %union.vec64_t* %1995 to %struct.uint64v1_t*
  %1997 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1996, i32 0, i32 0
  %MM5.i150 = getelementptr inbounds [1 x i64], [1 x i64]* %1997, i64 0, i64 0
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1999 = getelementptr inbounds %struct.MMX, %struct.MMX* %1998, i32 0, i32 0
  %2000 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1999, i64 0, i64 6
  %2001 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2000, i32 0, i32 1
  %2002 = bitcast %union.vec64_t* %2001 to %struct.uint64v1_t*
  %2003 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2002, i32 0, i32 0
  %MM6.i151 = getelementptr inbounds [1 x i64], [1 x i64]* %2003, i64 0, i64 0
  %2004 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2005 = getelementptr inbounds %struct.MMX, %struct.MMX* %2004, i32 0, i32 0
  %2006 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2005, i64 0, i64 7
  %2007 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2006, i32 0, i32 1
  %2008 = bitcast %union.vec64_t* %2007 to %struct.uint64v1_t*
  %2009 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2008, i32 0, i32 0
  %MM7.i152 = getelementptr inbounds [1 x i64], [1 x i64]* %2009, i64 0, i64 0
  %2010 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i153 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2010, i32 0, i32 5
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i154 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2011, i32 0, i32 1
  %2012 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i155 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2012, i32 0, i32 11
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i156 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2013, i32 0, i32 13
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i157 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2014, i32 0, i32 3
  %2015 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i158 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2015, i32 0, i32 9
  %2016 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i159 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2016, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i11, align 8, !noalias !2475
  store i64* @DR1, i64** %_DR1.i12, align 8, !noalias !2475
  store i64* @DR2, i64** %_DR2.i13, align 8, !noalias !2475
  store i64* @DR3, i64** %_DR3.i14, align 8, !noalias !2475
  store i64* @DR4, i64** %_DR4.i15, align 8, !noalias !2475
  store i64* @DR5, i64** %_DR5.i16, align 8, !noalias !2475
  store i64* @DR6, i64** %_DR6.i17, align 8, !noalias !2475
  store i64* @DR7, i64** %_DR7.i18, align 8, !noalias !2475
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i19, align 8, !noalias !2475
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i20, align 8, !noalias !2475
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i21, align 8, !noalias !2475
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i22, align 8, !noalias !2475
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i23, align 8, !noalias !2475
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i24, align 8, !noalias !2475
  %2017 = bitcast %"class.std::bitset"* %YMM0.i105 to double*
  %2018 = load double, double* %2017, !alias.scope !2479, !noalias !2480
  %2019 = load i64, i64* %RSP.i86, !alias.scope !2479, !noalias !2480
  %2020 = load %struct.Memory*, %struct.Memory** %MEMORY.i10, !noalias !2475
  %2021 = inttoptr i64 %2019 to i64*
  %2022 = load i64, i64* %2021
  store i64 %2022, i64* %PC.i25, !alias.scope !2479, !noalias !2480
  %2023 = add i64 %2019, 8
  store i64 %2023, i64* %RSP.i86, !alias.scope !2479, !noalias !2480
  %2024 = call double @atan(double %2018)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i105, !alias.scope !2479, !noalias !2480
  %2025 = bitcast %"class.std::bitset"* %YMM0.i105 to double*
  store double %2024, double* %2025, !alias.scope !2479, !noalias !2480
  %2026 = load %struct.Memory*, %struct.Memory** %MEMORY.i10, !noalias !2475
  %2027 = bitcast %struct.State** %state.i1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2027)
  %2028 = bitcast i64* %curr_pc.i2 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2028)
  %2029 = bitcast %struct.Memory** %memory.i3 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2029)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i4)
  %2030 = bitcast i64* %SS_BASE.i5 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2030)
  %2031 = bitcast i64* %ES_BASE.i6 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2031)
  %2032 = bitcast i64* %DS_BASE.i7 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2032)
  %2033 = bitcast i64* %CS_BASE.i8 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2033)
  %2034 = bitcast %struct.State** %STATE.i9 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2034)
  %2035 = bitcast %struct.Memory** %MEMORY.i10 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2035)
  %2036 = bitcast i64** %_DR0.i11 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2036)
  %2037 = bitcast i64** %_DR1.i12 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2037)
  %2038 = bitcast i64** %_DR2.i13 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2038)
  %2039 = bitcast i64** %_DR3.i14 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2039)
  %2040 = bitcast i64** %_DR4.i15 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2040)
  %2041 = bitcast i64** %_DR5.i16 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2041)
  %2042 = bitcast i64** %_DR6.i17 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2042)
  %2043 = bitcast i64** %_DR7.i18 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2043)
  %2044 = bitcast i64** %CR0.i19 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2044)
  %2045 = bitcast i64** %CR1.i20 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2045)
  %2046 = bitcast i64** %CR2.i21 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2046)
  %2047 = bitcast i64** %CR3.i22 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2047)
  %2048 = bitcast i64** %CR4.i23 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2048)
  %2049 = bitcast i64** %CR8.i24 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2049)
  %2050 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2051 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2052 = bitcast %union.vec128_t* %XMM1 to i8*
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 3
  store i64 %2054, i64* %PC
  %2055 = bitcast i8* %2051 to i64*
  %2056 = load i64, i64* %2055, align 1
  %2057 = getelementptr inbounds i8, i8* %2051, i64 8
  %2058 = bitcast i8* %2057 to i64*
  %2059 = load i64, i64* %2058, align 1
  %2060 = bitcast i8* %2052 to i64*
  %2061 = load i64, i64* %2060, align 1
  %2062 = getelementptr inbounds i8, i8* %2052, i64 8
  %2063 = bitcast i8* %2062 to i64*
  %2064 = load i64, i64* %2063, align 1
  %2065 = xor i64 %2061, %2056
  %2066 = xor i64 %2064, %2059
  %2067 = trunc i64 %2065 to i32
  %2068 = lshr i64 %2065, 32
  %2069 = trunc i64 %2068 to i32
  %2070 = bitcast i8* %2050 to i32*
  store i32 %2067, i32* %2070, align 1, !tbaa !2454
  %2071 = getelementptr inbounds i8, i8* %2050, i64 4
  %2072 = bitcast i8* %2071 to i32*
  store i32 %2069, i32* %2072, align 1, !tbaa !2454
  %2073 = trunc i64 %2066 to i32
  %2074 = getelementptr inbounds i8, i8* %2050, i64 8
  %2075 = bitcast i8* %2074 to i32*
  store i32 %2073, i32* %2075, align 1, !tbaa !2454
  %2076 = lshr i64 %2066, 32
  %2077 = trunc i64 %2076 to i32
  %2078 = getelementptr inbounds i8, i8* %2050, i64 12
  %2079 = bitcast i8* %2078 to i32*
  store i32 %2077, i32* %2079, align 1, !tbaa !2454
  %2080 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 8
  store i64 %2082, i64* %PC
  %2083 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 64) to double*)
  %2084 = bitcast i8* %2080 to double*
  store double %2083, double* %2084, align 1, !tbaa !2452
  %2085 = getelementptr inbounds i8, i8* %2080, i64 8
  %2086 = bitcast i8* %2085 to double*
  store double 0.000000e+00, double* %2086, align 1, !tbaa !2452
  %2087 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2088 = load i64, i64* %RBP
  %2089 = sub i64 %2088, 32
  %2090 = load i64, i64* %PC
  %2091 = add i64 %2090, 5
  store i64 %2091, i64* %PC
  %2092 = inttoptr i64 %2089 to i32*
  %2093 = load i32, i32* %2092
  %2094 = sitofp i32 %2093 to double
  %2095 = bitcast i8* %2087 to double*
  store double %2094, double* %2095, align 1, !tbaa !2452
  %2096 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2097 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2098 = bitcast %union.vec128_t* %XMM3 to i8*
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 4
  store i64 %2100, i64* %PC
  %2101 = bitcast i8* %2097 to double*
  %2102 = load double, double* %2101, align 1
  %2103 = getelementptr inbounds i8, i8* %2097, i64 8
  %2104 = bitcast i8* %2103 to i64*
  %2105 = load i64, i64* %2104, align 1
  %2106 = bitcast i8* %2098 to double*
  %2107 = load double, double* %2106, align 1
  %2108 = fdiv double %2102, %2107
  %2109 = bitcast i8* %2096 to double*
  store double %2108, double* %2109, align 1, !tbaa !2452
  %2110 = getelementptr inbounds i8, i8* %2096, i64 8
  %2111 = bitcast i8* %2110 to i64*
  store i64 %2105, i64* %2111, align 1, !tbaa !2452
  %2112 = load i64, i64* %RBP
  %2113 = sub i64 %2112, 40
  %2114 = bitcast %union.vec128_t* %XMM0 to i8*
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 5
  store i64 %2116, i64* %PC
  %2117 = bitcast i8* %2114 to double*
  %2118 = load double, double* %2117, align 1
  %2119 = inttoptr i64 %2113 to double*
  store double %2118, double* %2119
  %2120 = load i64, i64* %RBP
  %2121 = sub i64 %2120, 24
  %2122 = load i64, i64* %PC
  %2123 = add i64 %2122, 4
  store i64 %2123, i64* %PC
  %2124 = inttoptr i64 %2121 to i64*
  %2125 = load i64, i64* %2124
  store i64 %2125, i64* %RCX, align 8, !tbaa !2428
  %2126 = load i64, i64* %RCX
  %2127 = bitcast %union.vec128_t* %XMM2 to i8*
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 4
  store i64 %2129, i64* %PC
  %2130 = bitcast i8* %2127 to double*
  %2131 = load double, double* %2130, align 1
  %2132 = inttoptr i64 %2126 to double*
  store double %2131, double* %2132
  %2133 = load i64, i64* %RBP
  %2134 = sub i64 %2133, 24
  %2135 = load i64, i64* %PC
  %2136 = add i64 %2135, 4
  store i64 %2136, i64* %PC
  %2137 = inttoptr i64 %2134 to i64*
  %2138 = load i64, i64* %2137
  store i64 %2138, i64* %RCX, align 8, !tbaa !2428
  %2139 = load i64, i64* %RCX
  %2140 = add i64 %2139, 8
  %2141 = bitcast %union.vec128_t* %XMM1 to i8*
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 5
  store i64 %2143, i64* %PC
  %2144 = bitcast i8* %2141 to double*
  %2145 = load double, double* %2144, align 1
  %2146 = inttoptr i64 %2140 to double*
  store double %2145, double* %2146
  %2147 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2148 = load i64, i64* %RBP
  %2149 = sub i64 %2148, 40
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 5
  store i64 %2151, i64* %PC
  %2152 = inttoptr i64 %2149 to double*
  %2153 = load double, double* %2152
  %2154 = bitcast i8* %2147 to double*
  store double %2153, double* %2154, align 1, !tbaa !2452
  %2155 = getelementptr inbounds i8, i8* %2147, i64 8
  %2156 = bitcast i8* %2155 to double*
  store double 0.000000e+00, double* %2156, align 1, !tbaa !2452
  %2157 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2158 = load i64, i64* %RBP
  %2159 = sub i64 %2158, 32
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 5
  store i64 %2161, i64* %PC
  %2162 = inttoptr i64 %2159 to i32*
  %2163 = load i32, i32* %2162
  %2164 = sitofp i32 %2163 to double
  %2165 = bitcast i8* %2157 to double*
  store double %2164, double* %2165, align 1, !tbaa !2452
  %2166 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2168 = bitcast %union.vec128_t* %XMM1 to i8*
  %2169 = load i64, i64* %PC
  %2170 = add i64 %2169, 4
  store i64 %2170, i64* %PC
  %2171 = bitcast i8* %2167 to double*
  %2172 = load double, double* %2171, align 1
  %2173 = getelementptr inbounds i8, i8* %2167, i64 8
  %2174 = bitcast i8* %2173 to i64*
  %2175 = load i64, i64* %2174, align 1
  %2176 = bitcast i8* %2168 to double*
  %2177 = load double, double* %2176, align 1
  %2178 = fmul double %2172, %2177
  %2179 = bitcast i8* %2166 to double*
  store double %2178, double* %2179, align 1, !tbaa !2452
  %2180 = getelementptr inbounds i8, i8* %2166, i64 8
  %2181 = bitcast i8* %2180 to i64*
  store i64 %2175, i64* %2181, align 1, !tbaa !2452
  %2182 = load i64, i64* %PC
  %2183 = sub i64 %2182, 1995
  %2184 = load i64, i64* %PC
  %2185 = add i64 %2184, 5
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 5
  store i64 %2187, i64* %PC
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2189 = load i64, i64* %2188, align 8, !tbaa !2428
  %2190 = add i64 %2189, -8
  %2191 = inttoptr i64 %2190 to i64*
  store i64 %2185, i64* %2191
  store i64 %2190, i64* %2188, align 8, !tbaa !2428
  %2192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2183, i64* %2192, align 8, !tbaa !2428
  %2193 = load i64, i64* %PC
  %2194 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2194)
  %2195 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2195)
  %2196 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2196)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i)
  %2197 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2197)
  %2198 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2198)
  %2199 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2199)
  %2200 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2200)
  %2201 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2201)
  %2202 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2202)
  %2203 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2203)
  %2204 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2204)
  %2205 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2205)
  %2206 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2206)
  %2207 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2207)
  %2208 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2208)
  %2209 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2209)
  %2210 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2210)
  %2211 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2211)
  %2212 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2212)
  %2213 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2213)
  %2214 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2214)
  %2215 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2215)
  %2216 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2216)
  store %struct.State* %0, %struct.State** %state.i, align 8, !noalias !2481
  store i64 %2193, i64* %curr_pc.i, align 8, !noalias !2481
  store %struct.Memory* %2026, %struct.Memory** %memory.i, align 8, !noalias !2481
  store i8 0, i8* %BRANCH_TAKEN.i, align 1, !noalias !2481
  store i64 0, i64* %SS_BASE.i, align 8, !noalias !2481
  store i64 0, i64* %ES_BASE.i, align 8, !noalias !2481
  store i64 0, i64* %DS_BASE.i, align 8, !noalias !2481
  store i64 0, i64* %CS_BASE.i, align 8, !noalias !2481
  store %struct.State* %0, %struct.State** %STATE.i, align 8, !noalias !2481
  store %struct.Memory* %2026, %struct.Memory** %MEMORY.i, align 8, !noalias !2481
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2218 = getelementptr inbounds %struct.GPR, %struct.GPR* %2217, i32 0, i32 33
  %2219 = getelementptr inbounds %struct.Reg, %struct.Reg* %2218, i32 0, i32 0
  %PC.i = bitcast %union.anon* %2219 to i64*
  store i64 %2193, i64* %PC.i, align 8, !alias.scope !2485, !noalias !2486
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2221 = getelementptr inbounds %struct.GPR, %struct.GPR* %2220, i32 0, i32 1
  %2222 = getelementptr inbounds %struct.Reg, %struct.Reg* %2221, i32 0, i32 0
  %2223 = bitcast %union.anon* %2222 to %struct.anon.2*
  %AH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2223, i32 0, i32 1
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2225 = getelementptr inbounds %struct.GPR, %struct.GPR* %2224, i32 0, i32 3
  %2226 = getelementptr inbounds %struct.Reg, %struct.Reg* %2225, i32 0, i32 0
  %2227 = bitcast %union.anon* %2226 to %struct.anon.2*
  %BH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2227, i32 0, i32 1
  %2228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2229 = getelementptr inbounds %struct.GPR, %struct.GPR* %2228, i32 0, i32 5
  %2230 = getelementptr inbounds %struct.Reg, %struct.Reg* %2229, i32 0, i32 0
  %2231 = bitcast %union.anon* %2230 to %struct.anon.2*
  %CH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2231, i32 0, i32 1
  %2232 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2233 = getelementptr inbounds %struct.GPR, %struct.GPR* %2232, i32 0, i32 7
  %2234 = getelementptr inbounds %struct.Reg, %struct.Reg* %2233, i32 0, i32 0
  %2235 = bitcast %union.anon* %2234 to %struct.anon.2*
  %DH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2235, i32 0, i32 1
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2237 = getelementptr inbounds %struct.GPR, %struct.GPR* %2236, i32 0, i32 1
  %2238 = getelementptr inbounds %struct.Reg, %struct.Reg* %2237, i32 0, i32 0
  %2239 = bitcast %union.anon* %2238 to %struct.anon.2*
  %AL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2239, i32 0, i32 0
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2241 = getelementptr inbounds %struct.GPR, %struct.GPR* %2240, i32 0, i32 3
  %2242 = getelementptr inbounds %struct.Reg, %struct.Reg* %2241, i32 0, i32 0
  %2243 = bitcast %union.anon* %2242 to %struct.anon.2*
  %BL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2243, i32 0, i32 0
  %2244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2245 = getelementptr inbounds %struct.GPR, %struct.GPR* %2244, i32 0, i32 5
  %2246 = getelementptr inbounds %struct.Reg, %struct.Reg* %2245, i32 0, i32 0
  %2247 = bitcast %union.anon* %2246 to %struct.anon.2*
  %CL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2247, i32 0, i32 0
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2249 = getelementptr inbounds %struct.GPR, %struct.GPR* %2248, i32 0, i32 7
  %2250 = getelementptr inbounds %struct.Reg, %struct.Reg* %2249, i32 0, i32 0
  %2251 = bitcast %union.anon* %2250 to %struct.anon.2*
  %DL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2251, i32 0, i32 0
  %2252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2253 = getelementptr inbounds %struct.GPR, %struct.GPR* %2252, i32 0, i32 9
  %2254 = getelementptr inbounds %struct.Reg, %struct.Reg* %2253, i32 0, i32 0
  %2255 = bitcast %union.anon* %2254 to %struct.anon.2*
  %SIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2255, i32 0, i32 0
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2257 = getelementptr inbounds %struct.GPR, %struct.GPR* %2256, i32 0, i32 11
  %2258 = getelementptr inbounds %struct.Reg, %struct.Reg* %2257, i32 0, i32 0
  %2259 = bitcast %union.anon* %2258 to %struct.anon.2*
  %DIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2259, i32 0, i32 0
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2261 = getelementptr inbounds %struct.GPR, %struct.GPR* %2260, i32 0, i32 13
  %2262 = getelementptr inbounds %struct.Reg, %struct.Reg* %2261, i32 0, i32 0
  %2263 = bitcast %union.anon* %2262 to %struct.anon.2*
  %SPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2263, i32 0, i32 0
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2265 = getelementptr inbounds %struct.GPR, %struct.GPR* %2264, i32 0, i32 15
  %2266 = getelementptr inbounds %struct.Reg, %struct.Reg* %2265, i32 0, i32 0
  %2267 = bitcast %union.anon* %2266 to %struct.anon.2*
  %BPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2267, i32 0, i32 0
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2269 = getelementptr inbounds %struct.GPR, %struct.GPR* %2268, i32 0, i32 17
  %2270 = getelementptr inbounds %struct.Reg, %struct.Reg* %2269, i32 0, i32 0
  %2271 = bitcast %union.anon* %2270 to %struct.anon.2*
  %R8B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2271, i32 0, i32 0
  %2272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2273 = getelementptr inbounds %struct.GPR, %struct.GPR* %2272, i32 0, i32 19
  %2274 = getelementptr inbounds %struct.Reg, %struct.Reg* %2273, i32 0, i32 0
  %2275 = bitcast %union.anon* %2274 to %struct.anon.2*
  %R9B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2275, i32 0, i32 0
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2277 = getelementptr inbounds %struct.GPR, %struct.GPR* %2276, i32 0, i32 21
  %2278 = getelementptr inbounds %struct.Reg, %struct.Reg* %2277, i32 0, i32 0
  %2279 = bitcast %union.anon* %2278 to %struct.anon.2*
  %R10B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2279, i32 0, i32 0
  %2280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2281 = getelementptr inbounds %struct.GPR, %struct.GPR* %2280, i32 0, i32 23
  %2282 = getelementptr inbounds %struct.Reg, %struct.Reg* %2281, i32 0, i32 0
  %2283 = bitcast %union.anon* %2282 to %struct.anon.2*
  %R11B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2283, i32 0, i32 0
  %2284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2285 = getelementptr inbounds %struct.GPR, %struct.GPR* %2284, i32 0, i32 25
  %2286 = getelementptr inbounds %struct.Reg, %struct.Reg* %2285, i32 0, i32 0
  %2287 = bitcast %union.anon* %2286 to %struct.anon.2*
  %R12B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2287, i32 0, i32 0
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2289 = getelementptr inbounds %struct.GPR, %struct.GPR* %2288, i32 0, i32 27
  %2290 = getelementptr inbounds %struct.Reg, %struct.Reg* %2289, i32 0, i32 0
  %2291 = bitcast %union.anon* %2290 to %struct.anon.2*
  %R13B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2291, i32 0, i32 0
  %2292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2293 = getelementptr inbounds %struct.GPR, %struct.GPR* %2292, i32 0, i32 29
  %2294 = getelementptr inbounds %struct.Reg, %struct.Reg* %2293, i32 0, i32 0
  %2295 = bitcast %union.anon* %2294 to %struct.anon.2*
  %R14B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2295, i32 0, i32 0
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2297 = getelementptr inbounds %struct.GPR, %struct.GPR* %2296, i32 0, i32 31
  %2298 = getelementptr inbounds %struct.Reg, %struct.Reg* %2297, i32 0, i32 0
  %2299 = bitcast %union.anon* %2298 to %struct.anon.2*
  %R15B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2299, i32 0, i32 0
  %2300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2301 = getelementptr inbounds %struct.GPR, %struct.GPR* %2300, i32 0, i32 1
  %2302 = getelementptr inbounds %struct.Reg, %struct.Reg* %2301, i32 0, i32 0
  %AX.i = bitcast %union.anon* %2302 to i16*
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2304 = getelementptr inbounds %struct.GPR, %struct.GPR* %2303, i32 0, i32 3
  %2305 = getelementptr inbounds %struct.Reg, %struct.Reg* %2304, i32 0, i32 0
  %BX.i = bitcast %union.anon* %2305 to i16*
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2307 = getelementptr inbounds %struct.GPR, %struct.GPR* %2306, i32 0, i32 5
  %2308 = getelementptr inbounds %struct.Reg, %struct.Reg* %2307, i32 0, i32 0
  %CX.i = bitcast %union.anon* %2308 to i16*
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2310 = getelementptr inbounds %struct.GPR, %struct.GPR* %2309, i32 0, i32 7
  %2311 = getelementptr inbounds %struct.Reg, %struct.Reg* %2310, i32 0, i32 0
  %DX.i = bitcast %union.anon* %2311 to i16*
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2313 = getelementptr inbounds %struct.GPR, %struct.GPR* %2312, i32 0, i32 9
  %2314 = getelementptr inbounds %struct.Reg, %struct.Reg* %2313, i32 0, i32 0
  %SI.i = bitcast %union.anon* %2314 to i16*
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2316 = getelementptr inbounds %struct.GPR, %struct.GPR* %2315, i32 0, i32 11
  %2317 = getelementptr inbounds %struct.Reg, %struct.Reg* %2316, i32 0, i32 0
  %DI.i = bitcast %union.anon* %2317 to i16*
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2319 = getelementptr inbounds %struct.GPR, %struct.GPR* %2318, i32 0, i32 13
  %2320 = getelementptr inbounds %struct.Reg, %struct.Reg* %2319, i32 0, i32 0
  %SP.i = bitcast %union.anon* %2320 to i16*
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2322 = getelementptr inbounds %struct.GPR, %struct.GPR* %2321, i32 0, i32 15
  %2323 = getelementptr inbounds %struct.Reg, %struct.Reg* %2322, i32 0, i32 0
  %BP.i = bitcast %union.anon* %2323 to i16*
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2325 = getelementptr inbounds %struct.GPR, %struct.GPR* %2324, i32 0, i32 17
  %2326 = getelementptr inbounds %struct.Reg, %struct.Reg* %2325, i32 0, i32 0
  %R8W.i = bitcast %union.anon* %2326 to i16*
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2328 = getelementptr inbounds %struct.GPR, %struct.GPR* %2327, i32 0, i32 19
  %2329 = getelementptr inbounds %struct.Reg, %struct.Reg* %2328, i32 0, i32 0
  %R9W.i = bitcast %union.anon* %2329 to i16*
  %2330 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2331 = getelementptr inbounds %struct.GPR, %struct.GPR* %2330, i32 0, i32 21
  %2332 = getelementptr inbounds %struct.Reg, %struct.Reg* %2331, i32 0, i32 0
  %R10W.i = bitcast %union.anon* %2332 to i16*
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2334 = getelementptr inbounds %struct.GPR, %struct.GPR* %2333, i32 0, i32 23
  %2335 = getelementptr inbounds %struct.Reg, %struct.Reg* %2334, i32 0, i32 0
  %R11W.i = bitcast %union.anon* %2335 to i16*
  %2336 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2337 = getelementptr inbounds %struct.GPR, %struct.GPR* %2336, i32 0, i32 25
  %2338 = getelementptr inbounds %struct.Reg, %struct.Reg* %2337, i32 0, i32 0
  %R12W.i = bitcast %union.anon* %2338 to i16*
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2340 = getelementptr inbounds %struct.GPR, %struct.GPR* %2339, i32 0, i32 27
  %2341 = getelementptr inbounds %struct.Reg, %struct.Reg* %2340, i32 0, i32 0
  %R13W.i = bitcast %union.anon* %2341 to i16*
  %2342 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2343 = getelementptr inbounds %struct.GPR, %struct.GPR* %2342, i32 0, i32 29
  %2344 = getelementptr inbounds %struct.Reg, %struct.Reg* %2343, i32 0, i32 0
  %R14W.i = bitcast %union.anon* %2344 to i16*
  %2345 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2346 = getelementptr inbounds %struct.GPR, %struct.GPR* %2345, i32 0, i32 31
  %2347 = getelementptr inbounds %struct.Reg, %struct.Reg* %2346, i32 0, i32 0
  %R15W.i = bitcast %union.anon* %2347 to i16*
  %2348 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2349 = getelementptr inbounds %struct.GPR, %struct.GPR* %2348, i32 0, i32 33
  %2350 = getelementptr inbounds %struct.Reg, %struct.Reg* %2349, i32 0, i32 0
  %IP.i = bitcast %union.anon* %2350 to i16*
  %2351 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2352 = getelementptr inbounds %struct.GPR, %struct.GPR* %2351, i32 0, i32 1
  %2353 = getelementptr inbounds %struct.Reg, %struct.Reg* %2352, i32 0, i32 0
  %EAX.i = bitcast %union.anon* %2353 to i32*
  %2354 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2355 = getelementptr inbounds %struct.GPR, %struct.GPR* %2354, i32 0, i32 3
  %2356 = getelementptr inbounds %struct.Reg, %struct.Reg* %2355, i32 0, i32 0
  %EBX.i = bitcast %union.anon* %2356 to i32*
  %2357 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2358 = getelementptr inbounds %struct.GPR, %struct.GPR* %2357, i32 0, i32 5
  %2359 = getelementptr inbounds %struct.Reg, %struct.Reg* %2358, i32 0, i32 0
  %ECX.i = bitcast %union.anon* %2359 to i32*
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2361 = getelementptr inbounds %struct.GPR, %struct.GPR* %2360, i32 0, i32 7
  %2362 = getelementptr inbounds %struct.Reg, %struct.Reg* %2361, i32 0, i32 0
  %EDX.i = bitcast %union.anon* %2362 to i32*
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2364 = getelementptr inbounds %struct.GPR, %struct.GPR* %2363, i32 0, i32 9
  %2365 = getelementptr inbounds %struct.Reg, %struct.Reg* %2364, i32 0, i32 0
  %ESI.i = bitcast %union.anon* %2365 to i32*
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2367 = getelementptr inbounds %struct.GPR, %struct.GPR* %2366, i32 0, i32 11
  %2368 = getelementptr inbounds %struct.Reg, %struct.Reg* %2367, i32 0, i32 0
  %EDI.i = bitcast %union.anon* %2368 to i32*
  %2369 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2370 = getelementptr inbounds %struct.GPR, %struct.GPR* %2369, i32 0, i32 13
  %2371 = getelementptr inbounds %struct.Reg, %struct.Reg* %2370, i32 0, i32 0
  %ESP.i = bitcast %union.anon* %2371 to i32*
  %2372 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2373 = getelementptr inbounds %struct.GPR, %struct.GPR* %2372, i32 0, i32 15
  %2374 = getelementptr inbounds %struct.Reg, %struct.Reg* %2373, i32 0, i32 0
  %EBP.i = bitcast %union.anon* %2374 to i32*
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2376 = getelementptr inbounds %struct.GPR, %struct.GPR* %2375, i32 0, i32 33
  %2377 = getelementptr inbounds %struct.Reg, %struct.Reg* %2376, i32 0, i32 0
  %EIP.i = bitcast %union.anon* %2377 to i32*
  %2378 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2379 = getelementptr inbounds %struct.GPR, %struct.GPR* %2378, i32 0, i32 17
  %2380 = getelementptr inbounds %struct.Reg, %struct.Reg* %2379, i32 0, i32 0
  %R8D.i = bitcast %union.anon* %2380 to i32*
  %2381 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2382 = getelementptr inbounds %struct.GPR, %struct.GPR* %2381, i32 0, i32 19
  %2383 = getelementptr inbounds %struct.Reg, %struct.Reg* %2382, i32 0, i32 0
  %R9D.i = bitcast %union.anon* %2383 to i32*
  %2384 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2385 = getelementptr inbounds %struct.GPR, %struct.GPR* %2384, i32 0, i32 21
  %2386 = getelementptr inbounds %struct.Reg, %struct.Reg* %2385, i32 0, i32 0
  %R10D.i = bitcast %union.anon* %2386 to i32*
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2388 = getelementptr inbounds %struct.GPR, %struct.GPR* %2387, i32 0, i32 23
  %2389 = getelementptr inbounds %struct.Reg, %struct.Reg* %2388, i32 0, i32 0
  %R11D.i = bitcast %union.anon* %2389 to i32*
  %2390 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2391 = getelementptr inbounds %struct.GPR, %struct.GPR* %2390, i32 0, i32 25
  %2392 = getelementptr inbounds %struct.Reg, %struct.Reg* %2391, i32 0, i32 0
  %R12D.i = bitcast %union.anon* %2392 to i32*
  %2393 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2394 = getelementptr inbounds %struct.GPR, %struct.GPR* %2393, i32 0, i32 27
  %2395 = getelementptr inbounds %struct.Reg, %struct.Reg* %2394, i32 0, i32 0
  %R13D.i = bitcast %union.anon* %2395 to i32*
  %2396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2397 = getelementptr inbounds %struct.GPR, %struct.GPR* %2396, i32 0, i32 29
  %2398 = getelementptr inbounds %struct.Reg, %struct.Reg* %2397, i32 0, i32 0
  %R14D.i = bitcast %union.anon* %2398 to i32*
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2400 = getelementptr inbounds %struct.GPR, %struct.GPR* %2399, i32 0, i32 31
  %2401 = getelementptr inbounds %struct.Reg, %struct.Reg* %2400, i32 0, i32 0
  %R15D.i = bitcast %union.anon* %2401 to i32*
  %2402 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2403 = getelementptr inbounds %struct.GPR, %struct.GPR* %2402, i32 0, i32 1
  %2404 = getelementptr inbounds %struct.Reg, %struct.Reg* %2403, i32 0, i32 0
  %RAX.i = bitcast %union.anon* %2404 to i64*
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2406 = getelementptr inbounds %struct.GPR, %struct.GPR* %2405, i32 0, i32 3
  %2407 = getelementptr inbounds %struct.Reg, %struct.Reg* %2406, i32 0, i32 0
  %RBX.i = bitcast %union.anon* %2407 to i64*
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2409 = getelementptr inbounds %struct.GPR, %struct.GPR* %2408, i32 0, i32 5
  %2410 = getelementptr inbounds %struct.Reg, %struct.Reg* %2409, i32 0, i32 0
  %RCX.i = bitcast %union.anon* %2410 to i64*
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2412 = getelementptr inbounds %struct.GPR, %struct.GPR* %2411, i32 0, i32 7
  %2413 = getelementptr inbounds %struct.Reg, %struct.Reg* %2412, i32 0, i32 0
  %RDX.i = bitcast %union.anon* %2413 to i64*
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2415 = getelementptr inbounds %struct.GPR, %struct.GPR* %2414, i32 0, i32 9
  %2416 = getelementptr inbounds %struct.Reg, %struct.Reg* %2415, i32 0, i32 0
  %RSI.i = bitcast %union.anon* %2416 to i64*
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2418 = getelementptr inbounds %struct.GPR, %struct.GPR* %2417, i32 0, i32 11
  %2419 = getelementptr inbounds %struct.Reg, %struct.Reg* %2418, i32 0, i32 0
  %RDI.i = bitcast %union.anon* %2419 to i64*
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2421 = getelementptr inbounds %struct.GPR, %struct.GPR* %2420, i32 0, i32 13
  %2422 = getelementptr inbounds %struct.Reg, %struct.Reg* %2421, i32 0, i32 0
  %RSP.i = bitcast %union.anon* %2422 to i64*
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2424 = getelementptr inbounds %struct.GPR, %struct.GPR* %2423, i32 0, i32 15
  %2425 = getelementptr inbounds %struct.Reg, %struct.Reg* %2424, i32 0, i32 0
  %RBP.i = bitcast %union.anon* %2425 to i64*
  %2426 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2427 = getelementptr inbounds %struct.GPR, %struct.GPR* %2426, i32 0, i32 17
  %2428 = getelementptr inbounds %struct.Reg, %struct.Reg* %2427, i32 0, i32 0
  %R8.i = bitcast %union.anon* %2428 to i64*
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2430 = getelementptr inbounds %struct.GPR, %struct.GPR* %2429, i32 0, i32 19
  %2431 = getelementptr inbounds %struct.Reg, %struct.Reg* %2430, i32 0, i32 0
  %R9.i = bitcast %union.anon* %2431 to i64*
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2433 = getelementptr inbounds %struct.GPR, %struct.GPR* %2432, i32 0, i32 21
  %2434 = getelementptr inbounds %struct.Reg, %struct.Reg* %2433, i32 0, i32 0
  %R10.i = bitcast %union.anon* %2434 to i64*
  %2435 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2436 = getelementptr inbounds %struct.GPR, %struct.GPR* %2435, i32 0, i32 23
  %2437 = getelementptr inbounds %struct.Reg, %struct.Reg* %2436, i32 0, i32 0
  %R11.i = bitcast %union.anon* %2437 to i64*
  %2438 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2439 = getelementptr inbounds %struct.GPR, %struct.GPR* %2438, i32 0, i32 25
  %2440 = getelementptr inbounds %struct.Reg, %struct.Reg* %2439, i32 0, i32 0
  %R12.i = bitcast %union.anon* %2440 to i64*
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2442 = getelementptr inbounds %struct.GPR, %struct.GPR* %2441, i32 0, i32 27
  %2443 = getelementptr inbounds %struct.Reg, %struct.Reg* %2442, i32 0, i32 0
  %R13.i = bitcast %union.anon* %2443 to i64*
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2445 = getelementptr inbounds %struct.GPR, %struct.GPR* %2444, i32 0, i32 29
  %2446 = getelementptr inbounds %struct.Reg, %struct.Reg* %2445, i32 0, i32 0
  %R14.i = bitcast %union.anon* %2446 to i64*
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2448 = getelementptr inbounds %struct.GPR, %struct.GPR* %2447, i32 0, i32 31
  %2449 = getelementptr inbounds %struct.Reg, %struct.Reg* %2448, i32 0, i32 0
  %R15.i = bitcast %union.anon* %2449 to i64*
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2451 = getelementptr inbounds %struct.GPR, %struct.GPR* %2450, i32 0, i32 33
  %2452 = getelementptr inbounds %struct.Reg, %struct.Reg* %2451, i32 0, i32 0
  %RIP.i = bitcast %union.anon* %2452 to i64*
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2454 = getelementptr inbounds %struct.Segments, %struct.Segments* %2453, i32 0, i32 1
  %SS.i = bitcast %union.SegmentSelector* %2454 to i16*
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2456 = getelementptr inbounds %struct.Segments, %struct.Segments* %2455, i32 0, i32 3
  %ES.i = bitcast %union.SegmentSelector* %2456 to i16*
  %2457 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2458 = getelementptr inbounds %struct.Segments, %struct.Segments* %2457, i32 0, i32 5
  %GS.i = bitcast %union.SegmentSelector* %2458 to i16*
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2460 = getelementptr inbounds %struct.Segments, %struct.Segments* %2459, i32 0, i32 7
  %FS.i = bitcast %union.SegmentSelector* %2460 to i16*
  %2461 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2462 = getelementptr inbounds %struct.Segments, %struct.Segments* %2461, i32 0, i32 9
  %DS.i = bitcast %union.SegmentSelector* %2462 to i16*
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2464 = getelementptr inbounds %struct.Segments, %struct.Segments* %2463, i32 0, i32 11
  %CS.i = bitcast %union.SegmentSelector* %2464 to i16*
  %2465 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %2466 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %2465, i32 0, i32 5
  %2467 = getelementptr inbounds %struct.Reg, %struct.Reg* %2466, i32 0, i32 0
  %GS_BASE.i = bitcast %union.anon* %2467 to i64*
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %2469 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %2468, i32 0, i32 7
  %2470 = getelementptr inbounds %struct.Reg, %struct.Reg* %2469, i32 0, i32 0
  %FS_BASE.i = bitcast %union.anon* %2470 to i64*
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2472 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2471, i64 0, i64 0
  %YMM0.i = bitcast %union.VectorReg* %2472 to %"class.std::bitset"*
  %2473 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2474 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2473, i64 0, i64 1
  %YMM1.i = bitcast %union.VectorReg* %2474 to %"class.std::bitset"*
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2476 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2475, i64 0, i64 2
  %YMM2.i = bitcast %union.VectorReg* %2476 to %"class.std::bitset"*
  %2477 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2478 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2477, i64 0, i64 3
  %YMM3.i = bitcast %union.VectorReg* %2478 to %"class.std::bitset"*
  %2479 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2480 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2479, i64 0, i64 4
  %YMM4.i = bitcast %union.VectorReg* %2480 to %"class.std::bitset"*
  %2481 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2482 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2481, i64 0, i64 5
  %YMM5.i = bitcast %union.VectorReg* %2482 to %"class.std::bitset"*
  %2483 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2484 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2483, i64 0, i64 6
  %YMM6.i = bitcast %union.VectorReg* %2484 to %"class.std::bitset"*
  %2485 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2486 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2485, i64 0, i64 7
  %YMM7.i = bitcast %union.VectorReg* %2486 to %"class.std::bitset"*
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2488 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2487, i64 0, i64 8
  %YMM8.i = bitcast %union.VectorReg* %2488 to %"class.std::bitset"*
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2490 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2489, i64 0, i64 9
  %YMM9.i = bitcast %union.VectorReg* %2490 to %"class.std::bitset"*
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2492 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2491, i64 0, i64 10
  %YMM10.i = bitcast %union.VectorReg* %2492 to %"class.std::bitset"*
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2494 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2493, i64 0, i64 11
  %YMM11.i = bitcast %union.VectorReg* %2494 to %"class.std::bitset"*
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2496 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2495, i64 0, i64 12
  %YMM12.i = bitcast %union.VectorReg* %2496 to %"class.std::bitset"*
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2498 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2497, i64 0, i64 13
  %YMM13.i = bitcast %union.VectorReg* %2498 to %"class.std::bitset"*
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2500 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2499, i64 0, i64 14
  %YMM14.i = bitcast %union.VectorReg* %2500 to %"class.std::bitset"*
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2502 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2501, i64 0, i64 15
  %YMM15.i = bitcast %union.VectorReg* %2502 to %"class.std::bitset"*
  %2503 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2504 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2503, i64 0, i64 0
  %XMM0.i = bitcast %union.VectorReg* %2504 to %union.vec128_t*
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2506 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2505, i64 0, i64 1
  %XMM1.i = bitcast %union.VectorReg* %2506 to %union.vec128_t*
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2508 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2507, i64 0, i64 2
  %XMM2.i = bitcast %union.VectorReg* %2508 to %union.vec128_t*
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2510 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2509, i64 0, i64 3
  %XMM3.i = bitcast %union.VectorReg* %2510 to %union.vec128_t*
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2512 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2511, i64 0, i64 4
  %XMM4.i = bitcast %union.VectorReg* %2512 to %union.vec128_t*
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2514 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2513, i64 0, i64 5
  %XMM5.i = bitcast %union.VectorReg* %2514 to %union.vec128_t*
  %2515 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2516 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2515, i64 0, i64 6
  %XMM6.i = bitcast %union.VectorReg* %2516 to %union.vec128_t*
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2518 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2517, i64 0, i64 7
  %XMM7.i = bitcast %union.VectorReg* %2518 to %union.vec128_t*
  %2519 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2520 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2519, i64 0, i64 8
  %XMM8.i = bitcast %union.VectorReg* %2520 to %union.vec128_t*
  %2521 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2522 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2521, i64 0, i64 9
  %XMM9.i = bitcast %union.VectorReg* %2522 to %union.vec128_t*
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2524 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2523, i64 0, i64 10
  %XMM10.i = bitcast %union.VectorReg* %2524 to %union.vec128_t*
  %2525 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2526 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2525, i64 0, i64 11
  %XMM11.i = bitcast %union.VectorReg* %2526 to %union.vec128_t*
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2528 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2527, i64 0, i64 12
  %XMM12.i = bitcast %union.VectorReg* %2528 to %union.vec128_t*
  %2529 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2530 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2529, i64 0, i64 13
  %XMM13.i = bitcast %union.VectorReg* %2530 to %union.vec128_t*
  %2531 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2532 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2531, i64 0, i64 14
  %XMM14.i = bitcast %union.VectorReg* %2532 to %union.vec128_t*
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2534 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2533, i64 0, i64 15
  %XMM15.i = bitcast %union.VectorReg* %2534 to %union.vec128_t*
  %2535 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2536 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2535, i32 0, i32 0
  %2537 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2536, i64 0, i64 0
  %ST0.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2537, i32 0, i32 1
  %2538 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2539 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2538, i32 0, i32 0
  %2540 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2539, i64 0, i64 1
  %ST1.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2540, i32 0, i32 1
  %2541 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2542 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2541, i32 0, i32 0
  %2543 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2542, i64 0, i64 2
  %ST2.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2543, i32 0, i32 1
  %2544 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2545 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2544, i32 0, i32 0
  %2546 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2545, i64 0, i64 3
  %ST3.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2546, i32 0, i32 1
  %2547 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2548 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2547, i32 0, i32 0
  %2549 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2548, i64 0, i64 4
  %ST4.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2549, i32 0, i32 1
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2551 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2550, i32 0, i32 0
  %2552 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2551, i64 0, i64 5
  %ST5.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2552, i32 0, i32 1
  %2553 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2554 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2553, i32 0, i32 0
  %2555 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2554, i64 0, i64 6
  %ST6.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2555, i32 0, i32 1
  %2556 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2557 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2556, i32 0, i32 0
  %2558 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2557, i64 0, i64 7
  %ST7.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2558, i32 0, i32 1
  %2559 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2560 = getelementptr inbounds %struct.MMX, %struct.MMX* %2559, i32 0, i32 0
  %2561 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2560, i64 0, i64 0
  %2562 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2561, i32 0, i32 1
  %2563 = bitcast %union.vec64_t* %2562 to %struct.uint64v1_t*
  %2564 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2563, i32 0, i32 0
  %MM0.i = getelementptr inbounds [1 x i64], [1 x i64]* %2564, i64 0, i64 0
  %2565 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2566 = getelementptr inbounds %struct.MMX, %struct.MMX* %2565, i32 0, i32 0
  %2567 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2566, i64 0, i64 1
  %2568 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2567, i32 0, i32 1
  %2569 = bitcast %union.vec64_t* %2568 to %struct.uint64v1_t*
  %2570 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2569, i32 0, i32 0
  %MM1.i = getelementptr inbounds [1 x i64], [1 x i64]* %2570, i64 0, i64 0
  %2571 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2572 = getelementptr inbounds %struct.MMX, %struct.MMX* %2571, i32 0, i32 0
  %2573 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2572, i64 0, i64 2
  %2574 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2573, i32 0, i32 1
  %2575 = bitcast %union.vec64_t* %2574 to %struct.uint64v1_t*
  %2576 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2575, i32 0, i32 0
  %MM2.i = getelementptr inbounds [1 x i64], [1 x i64]* %2576, i64 0, i64 0
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2578 = getelementptr inbounds %struct.MMX, %struct.MMX* %2577, i32 0, i32 0
  %2579 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2578, i64 0, i64 3
  %2580 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2579, i32 0, i32 1
  %2581 = bitcast %union.vec64_t* %2580 to %struct.uint64v1_t*
  %2582 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2581, i32 0, i32 0
  %MM3.i = getelementptr inbounds [1 x i64], [1 x i64]* %2582, i64 0, i64 0
  %2583 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2584 = getelementptr inbounds %struct.MMX, %struct.MMX* %2583, i32 0, i32 0
  %2585 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2584, i64 0, i64 4
  %2586 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2585, i32 0, i32 1
  %2587 = bitcast %union.vec64_t* %2586 to %struct.uint64v1_t*
  %2588 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2587, i32 0, i32 0
  %MM4.i = getelementptr inbounds [1 x i64], [1 x i64]* %2588, i64 0, i64 0
  %2589 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2590 = getelementptr inbounds %struct.MMX, %struct.MMX* %2589, i32 0, i32 0
  %2591 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2590, i64 0, i64 5
  %2592 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2591, i32 0, i32 1
  %2593 = bitcast %union.vec64_t* %2592 to %struct.uint64v1_t*
  %2594 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2593, i32 0, i32 0
  %MM5.i = getelementptr inbounds [1 x i64], [1 x i64]* %2594, i64 0, i64 0
  %2595 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2596 = getelementptr inbounds %struct.MMX, %struct.MMX* %2595, i32 0, i32 0
  %2597 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2596, i64 0, i64 6
  %2598 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2597, i32 0, i32 1
  %2599 = bitcast %union.vec64_t* %2598 to %struct.uint64v1_t*
  %2600 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2599, i32 0, i32 0
  %MM6.i = getelementptr inbounds [1 x i64], [1 x i64]* %2600, i64 0, i64 0
  %2601 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2602 = getelementptr inbounds %struct.MMX, %struct.MMX* %2601, i32 0, i32 0
  %2603 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2602, i64 0, i64 7
  %2604 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2603, i32 0, i32 1
  %2605 = bitcast %union.vec64_t* %2604 to %struct.uint64v1_t*
  %2606 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2605, i32 0, i32 0
  %MM7.i = getelementptr inbounds [1 x i64], [1 x i64]* %2606, i64 0, i64 0
  %2607 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2607, i32 0, i32 5
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2608, i32 0, i32 1
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2609, i32 0, i32 11
  %2610 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2610, i32 0, i32 13
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2611, i32 0, i32 3
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2612, i32 0, i32 9
  %2613 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2613, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i, align 8, !noalias !2481
  store i64* @DR1, i64** %_DR1.i, align 8, !noalias !2481
  store i64* @DR2, i64** %_DR2.i, align 8, !noalias !2481
  store i64* @DR3, i64** %_DR3.i, align 8, !noalias !2481
  store i64* @DR4, i64** %_DR4.i, align 8, !noalias !2481
  store i64* @DR5, i64** %_DR5.i, align 8, !noalias !2481
  store i64* @DR6, i64** %_DR6.i, align 8, !noalias !2481
  store i64* @DR7, i64** %_DR7.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i, align 8, !noalias !2481
  %2614 = bitcast %"class.std::bitset"* %YMM0.i to double*
  %2615 = load double, double* %2614, !alias.scope !2485, !noalias !2486
  %2616 = load i64, i64* %RSP.i, !alias.scope !2485, !noalias !2486
  %2617 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2481
  %2618 = inttoptr i64 %2616 to i64*
  %2619 = load i64, i64* %2618
  store i64 %2619, i64* %PC.i, !alias.scope !2485, !noalias !2486
  %2620 = add i64 %2616, 8
  store i64 %2620, i64* %RSP.i, !alias.scope !2485, !noalias !2486
  %2621 = call double @cos(double %2615)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i, !alias.scope !2485, !noalias !2486
  %2622 = bitcast %"class.std::bitset"* %YMM0.i to double*
  store double %2621, double* %2622, !alias.scope !2485, !noalias !2486
  %2623 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2481
  %2624 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2624)
  %2625 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2625)
  %2626 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2626)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i)
  %2627 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2627)
  %2628 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2628)
  %2629 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2629)
  %2630 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2630)
  %2631 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2631)
  %2632 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2632)
  %2633 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2633)
  %2634 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2634)
  %2635 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2635)
  %2636 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2636)
  %2637 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2637)
  %2638 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2638)
  %2639 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2639)
  %2640 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2640)
  %2641 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2641)
  %2642 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2642)
  %2643 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2643)
  %2644 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2644)
  %2645 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2645)
  %2646 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2646)
  %2647 = load i64, i64* %RBP
  %2648 = sub i64 %2647, 24
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 4
  store i64 %2650, i64* %PC
  %2651 = inttoptr i64 %2648 to i64*
  %2652 = load i64, i64* %2651
  store i64 %2652, i64* %RCX, align 8, !tbaa !2428
  %2653 = load i64, i64* %RBP
  %2654 = sub i64 %2653, 32
  %2655 = load i64, i64* %PC
  %2656 = add i64 %2655, 4
  store i64 %2656, i64* %PC
  %2657 = inttoptr i64 %2654 to i32*
  %2658 = load i32, i32* %2657
  %2659 = sext i32 %2658 to i64
  store i64 %2659, i64* %RDX, align 8, !tbaa !2428
  %2660 = load i64, i64* %RCX
  %2661 = load i64, i64* %RDX
  %2662 = mul i64 %2661, 8
  %2663 = add i64 %2662, %2660
  %2664 = bitcast %union.vec128_t* %XMM0 to i8*
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 5
  store i64 %2666, i64* %PC
  %2667 = bitcast i8* %2664 to double*
  %2668 = load double, double* %2667, align 1
  %2669 = inttoptr i64 %2663 to double*
  store double %2668, double* %2669
  %2670 = load i64, i64* %RBP
  %2671 = sub i64 %2670, 24
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 4
  store i64 %2673, i64* %PC
  %2674 = inttoptr i64 %2671 to i64*
  %2675 = load i64, i64* %2674
  store i64 %2675, i64* %RCX, align 8, !tbaa !2428
  %2676 = load i64, i64* %RBP
  %2677 = sub i64 %2676, 32
  %2678 = load i64, i64* %PC
  %2679 = add i64 %2678, 4
  store i64 %2679, i64* %PC
  %2680 = inttoptr i64 %2677 to i32*
  %2681 = load i32, i32* %2680
  %2682 = sext i32 %2681 to i64
  store i64 %2682, i64* %RDX, align 8, !tbaa !2428
  %2683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2684 = load i64, i64* %RCX
  %2685 = load i64, i64* %RDX
  %2686 = mul i64 %2685, 8
  %2687 = add i64 %2686, %2684
  %2688 = load i64, i64* %PC
  %2689 = add i64 %2688, 5
  store i64 %2689, i64* %PC
  %2690 = inttoptr i64 %2687 to double*
  %2691 = load double, double* %2690
  %2692 = bitcast i8* %2683 to double*
  store double %2691, double* %2692, align 1, !tbaa !2452
  %2693 = getelementptr inbounds i8, i8* %2683, i64 8
  %2694 = bitcast i8* %2693 to double*
  store double 0.000000e+00, double* %2694, align 1, !tbaa !2452
  %2695 = load i64, i64* %RBP
  %2696 = sub i64 %2695, 24
  %2697 = load i64, i64* %PC
  %2698 = add i64 %2697, 4
  store i64 %2698, i64* %PC
  %2699 = inttoptr i64 %2696 to i64*
  %2700 = load i64, i64* %2699
  store i64 %2700, i64* %RCX, align 8, !tbaa !2428
  %2701 = load i64, i64* %RBP
  %2702 = sub i64 %2701, 32
  %2703 = load i64, i64* %PC
  %2704 = add i64 %2703, 3
  store i64 %2704, i64* %PC
  %2705 = inttoptr i64 %2702 to i32*
  %2706 = load i32, i32* %2705
  %2707 = zext i32 %2706 to i64
  store i64 %2707, i64* %RAX, align 8, !tbaa !2428
  %2708 = load i64, i64* %RAX
  %2709 = load i64, i64* %PC
  %2710 = add i64 %2709, 3
  store i64 %2710, i64* %PC
  %2711 = trunc i64 %2708 to i32
  %2712 = add i32 1, %2711
  %2713 = zext i32 %2712 to i64
  store i64 %2713, i64* %RAX, align 8, !tbaa !2428
  %2714 = icmp ult i32 %2712, %2711
  %2715 = icmp ult i32 %2712, 1
  %2716 = or i1 %2714, %2715
  %2717 = zext i1 %2716 to i8
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2717, i8* %2718, align 1, !tbaa !2432
  %2719 = and i32 %2712, 255
  %2720 = call i32 @llvm.ctpop.i32(i32 %2719) #17
  %2721 = trunc i32 %2720 to i8
  %2722 = and i8 %2721, 1
  %2723 = xor i8 %2722, 1
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2723, i8* %2724, align 1, !tbaa !2446
  %2725 = xor i64 1, %2708
  %2726 = trunc i64 %2725 to i32
  %2727 = xor i32 %2726, %2712
  %2728 = lshr i32 %2727, 4
  %2729 = trunc i32 %2728 to i8
  %2730 = and i8 %2729, 1
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2730, i8* %2731, align 1, !tbaa !2447
  %2732 = icmp eq i32 %2712, 0
  %2733 = zext i1 %2732 to i8
  %2734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2733, i8* %2734, align 1, !tbaa !2448
  %2735 = lshr i32 %2712, 31
  %2736 = trunc i32 %2735 to i8
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2736, i8* %2737, align 1, !tbaa !2449
  %2738 = lshr i32 %2711, 31
  %2739 = xor i32 %2735, %2738
  %2740 = add nuw nsw i32 %2739, %2735
  %2741 = icmp eq i32 %2740, 2
  %2742 = zext i1 %2741 to i8
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2742, i8* %2743, align 1, !tbaa !2450
  %2744 = load i32, i32* %EAX
  %2745 = zext i32 %2744 to i64
  %2746 = load i64, i64* %PC
  %2747 = add i64 %2746, 3
  store i64 %2747, i64* %PC
  %2748 = shl i64 %2745, 32
  %2749 = ashr exact i64 %2748, 32
  store i64 %2749, i64* %RDX, align 8, !tbaa !2428
  %2750 = load i64, i64* %RCX
  %2751 = load i64, i64* %RDX
  %2752 = mul i64 %2751, 8
  %2753 = add i64 %2752, %2750
  %2754 = bitcast %union.vec128_t* %XMM0 to i8*
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 5
  store i64 %2756, i64* %PC
  %2757 = bitcast i8* %2754 to double*
  %2758 = load double, double* %2757, align 1
  %2759 = inttoptr i64 %2753 to double*
  store double %2758, double* %2759
  %2760 = load i64, i64* %RBP
  %2761 = sub i64 %2760, 32
  %2762 = load i64, i64* %PC
  %2763 = add i64 %2762, 4
  store i64 %2763, i64* %PC
  %2764 = inttoptr i64 %2761 to i32*
  %2765 = load i32, i32* %2764
  %2766 = sub i32 %2765, 2
  %2767 = icmp ult i32 %2765, 2
  %2768 = zext i1 %2767 to i8
  %2769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2768, i8* %2769, align 1, !tbaa !2432
  %2770 = and i32 %2766, 255
  %2771 = call i32 @llvm.ctpop.i32(i32 %2770) #17
  %2772 = trunc i32 %2771 to i8
  %2773 = and i8 %2772, 1
  %2774 = xor i8 %2773, 1
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2774, i8* %2775, align 1, !tbaa !2446
  %2776 = xor i32 %2765, 2
  %2777 = xor i32 %2776, %2766
  %2778 = lshr i32 %2777, 4
  %2779 = trunc i32 %2778 to i8
  %2780 = and i8 %2779, 1
  %2781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2780, i8* %2781, align 1, !tbaa !2447
  %2782 = icmp eq i32 %2766, 0
  %2783 = zext i1 %2782 to i8
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2783, i8* %2784, align 1, !tbaa !2448
  %2785 = lshr i32 %2766, 31
  %2786 = trunc i32 %2785 to i8
  %2787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2786, i8* %2787, align 1, !tbaa !2449
  %2788 = lshr i32 %2765, 31
  %2789 = xor i32 %2785, %2788
  %2790 = add nuw nsw i32 %2789, %2788
  %2791 = icmp eq i32 %2790, 2
  %2792 = zext i1 %2791 to i8
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2792, i8* %2793, align 1, !tbaa !2450
  %2794 = load i64, i64* %PC
  %2795 = add i64 %2794, 193
  %2796 = load i64, i64* %PC
  %2797 = add i64 %2796, 6
  %2798 = load i64, i64* %PC
  %2799 = add i64 %2798, 6
  store i64 %2799, i64* %PC
  %2800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2801 = load i8, i8* %2800, align 1, !tbaa !2448
  %2802 = icmp ne i8 %2801, 0
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2804 = load i8, i8* %2803, align 1, !tbaa !2449
  %2805 = icmp ne i8 %2804, 0
  %2806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2807 = load i8, i8* %2806, align 1, !tbaa !2450
  %2808 = icmp ne i8 %2807, 0
  %2809 = xor i1 %2805, %2808
  %2810 = or i1 %2802, %2809
  %2811 = zext i1 %2810 to i8
  store i8 %2811, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2813 = select i1 %2810, i64 %2795, i64 %2797
  store i64 %2813, i64* %2812, align 8, !tbaa !2428
  %2814 = load i8, i8* %BRANCH_TAKEN
  %2815 = icmp eq i8 %2814, 1
  br i1 %2815, label %block_400fc1, label %block_400f06

block_400fb1:                                     ; preds = %block_400f0d
  %2816 = load i64, i64* %RBP
  %2817 = sub i64 %2816, 4
  %2818 = load i64, i64* %PC
  %2819 = add i64 %2818, 3
  store i64 %2819, i64* %PC
  %2820 = inttoptr i64 %2817 to i32*
  %2821 = load i32, i32* %2820
  %2822 = zext i32 %2821 to i64
  store i64 %2822, i64* %RDI, align 8, !tbaa !2428
  %2823 = load i64, i64* %RBP
  %2824 = sub i64 %2823, 16
  %2825 = load i64, i64* %PC
  %2826 = add i64 %2825, 4
  store i64 %2826, i64* %PC
  %2827 = inttoptr i64 %2824 to i64*
  %2828 = load i64, i64* %2827
  store i64 %2828, i64* %RSI, align 8, !tbaa !2428
  %2829 = load i64, i64* %RBP
  %2830 = sub i64 %2829, 24
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 4
  store i64 %2832, i64* %PC
  %2833 = inttoptr i64 %2830 to i64*
  %2834 = load i64, i64* %2833
  store i64 %2834, i64* %RDX, align 8, !tbaa !2428
  %2835 = load i64, i64* %PC
  %2836 = add i64 %2835, 548
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 5
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 5
  store i64 %2840, i64* %PC
  %2841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2842 = load i64, i64* %2841, align 8, !tbaa !2428
  %2843 = add i64 %2842, -8
  %2844 = inttoptr i64 %2843 to i64*
  store i64 %2838, i64* %2844
  store i64 %2843, i64* %2841, align 8, !tbaa !2428
  %2845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2836, i64* %2845, align 8, !tbaa !2428
  %2846 = load i64, i64* %PC
  %2847 = call %struct.Memory* @sub_4011e0_bitrv2(%struct.State* %0, i64 %2846, %struct.Memory* %MEMORY.0)
  br label %block_400fc1

block_400f0d:                                     ; preds = %block_400f06, %block_400f19
  %MEMORY.0 = phi %struct.Memory* [ %2623, %block_400f06 ], [ %1153, %block_400f19 ]
  %2848 = load i64, i64* %RBP
  %2849 = sub i64 %2848, 28
  %2850 = load i64, i64* %PC
  %2851 = add i64 %2850, 3
  store i64 %2851, i64* %PC
  %2852 = inttoptr i64 %2849 to i32*
  %2853 = load i32, i32* %2852
  %2854 = zext i32 %2853 to i64
  store i64 %2854, i64* %RAX, align 8, !tbaa !2428
  %2855 = load i32, i32* %EAX
  %2856 = zext i32 %2855 to i64
  %2857 = load i64, i64* %RBP
  %2858 = sub i64 %2857, 32
  %2859 = load i64, i64* %PC
  %2860 = add i64 %2859, 3
  store i64 %2860, i64* %PC
  %2861 = inttoptr i64 %2858 to i32*
  %2862 = load i32, i32* %2861
  %2863 = sub i32 %2855, %2862
  %2864 = icmp ult i32 %2855, %2862
  %2865 = zext i1 %2864 to i8
  %2866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2865, i8* %2866, align 1, !tbaa !2432
  %2867 = and i32 %2863, 255
  %2868 = call i32 @llvm.ctpop.i32(i32 %2867) #17
  %2869 = trunc i32 %2868 to i8
  %2870 = and i8 %2869, 1
  %2871 = xor i8 %2870, 1
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2871, i8* %2872, align 1, !tbaa !2446
  %2873 = xor i32 %2862, %2855
  %2874 = xor i32 %2873, %2863
  %2875 = lshr i32 %2874, 4
  %2876 = trunc i32 %2875 to i8
  %2877 = and i8 %2876, 1
  %2878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2877, i8* %2878, align 1, !tbaa !2447
  %2879 = icmp eq i32 %2863, 0
  %2880 = zext i1 %2879 to i8
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2880, i8* %2881, align 1, !tbaa !2448
  %2882 = lshr i32 %2863, 31
  %2883 = trunc i32 %2882 to i8
  %2884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2883, i8* %2884, align 1, !tbaa !2449
  %2885 = lshr i32 %2855, 31
  %2886 = lshr i32 %2862, 31
  %2887 = xor i32 %2886, %2885
  %2888 = xor i32 %2882, %2885
  %2889 = add nuw nsw i32 %2888, %2887
  %2890 = icmp eq i32 %2889, 2
  %2891 = zext i1 %2890 to i8
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2891, i8* %2892, align 1, !tbaa !2450
  %2893 = load i64, i64* %PC
  %2894 = add i64 %2893, 158
  %2895 = load i64, i64* %PC
  %2896 = add i64 %2895, 6
  %2897 = load i64, i64* %PC
  %2898 = add i64 %2897, 6
  store i64 %2898, i64* %PC
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2900 = load i8, i8* %2899, align 1, !tbaa !2449
  %2901 = icmp ne i8 %2900, 0
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2903 = load i8, i8* %2902, align 1, !tbaa !2450
  %2904 = icmp ne i8 %2903, 0
  %2905 = xor i1 %2901, %2904
  %2906 = xor i1 %2905, true
  %2907 = zext i1 %2906 to i8
  store i8 %2907, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2909 = select i1 %2905, i64 %2896, i64 %2894
  store i64 %2909, i64* %2908, align 8, !tbaa !2428
  %2910 = load i8, i8* %BRANCH_TAKEN
  %2911 = icmp eq i8 %2910, 1
  br i1 %2911, label %block_400fb1, label %block_400f19

block_400fc6:                                     ; preds = %block_400fc1, %block_400e60
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400e60 ], [ %MEMORY.2, %block_400fc1 ]
  %2912 = load i64, i64* %RSP
  %2913 = load i64, i64* %PC
  %2914 = add i64 %2913, 4
  store i64 %2914, i64* %PC
  %2915 = add i64 64, %2912
  store i64 %2915, i64* %RSP, align 8, !tbaa !2428
  %2916 = icmp ult i64 %2915, %2912
  %2917 = icmp ult i64 %2915, 64
  %2918 = or i1 %2916, %2917
  %2919 = zext i1 %2918 to i8
  %2920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2919, i8* %2920, align 1, !tbaa !2432
  %2921 = trunc i64 %2915 to i32
  %2922 = and i32 %2921, 255
  %2923 = call i32 @llvm.ctpop.i32(i32 %2922) #17
  %2924 = trunc i32 %2923 to i8
  %2925 = and i8 %2924, 1
  %2926 = xor i8 %2925, 1
  %2927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2926, i8* %2927, align 1, !tbaa !2446
  %2928 = xor i64 64, %2912
  %2929 = xor i64 %2928, %2915
  %2930 = lshr i64 %2929, 4
  %2931 = trunc i64 %2930 to i8
  %2932 = and i8 %2931, 1
  %2933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2932, i8* %2933, align 1, !tbaa !2447
  %2934 = icmp eq i64 %2915, 0
  %2935 = zext i1 %2934 to i8
  %2936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2935, i8* %2936, align 1, !tbaa !2448
  %2937 = lshr i64 %2915, 63
  %2938 = trunc i64 %2937 to i8
  %2939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2938, i8* %2939, align 1, !tbaa !2449
  %2940 = lshr i64 %2912, 63
  %2941 = xor i64 %2937, %2940
  %2942 = add nuw nsw i64 %2941, %2937
  %2943 = icmp eq i64 %2942, 2
  %2944 = zext i1 %2943 to i8
  %2945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2944, i8* %2945, align 1, !tbaa !2450
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 1
  store i64 %2947, i64* %PC
  %2948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2949 = load i64, i64* %2948, align 8, !tbaa !2428
  %2950 = add i64 %2949, 8
  %2951 = inttoptr i64 %2949 to i64*
  %2952 = load i64, i64* %2951
  store i64 %2952, i64* %RBP, align 8, !tbaa !2428
  store i64 %2950, i64* %2948, align 8, !tbaa !2428
  %2953 = load i64, i64* %PC
  %2954 = add i64 %2953, 1
  store i64 %2954, i64* %PC
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2957 = load i64, i64* %2956, align 8, !tbaa !2428
  %2958 = inttoptr i64 %2957 to i64*
  %2959 = load i64, i64* %2958
  store i64 %2959, i64* %2955, align 8, !tbaa !2428
  %2960 = add i64 %2957, 8
  store i64 %2960, i64* %2956, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400f06:                                     ; preds = %block_400e7d
  %2961 = load i64, i64* %RBP
  %2962 = sub i64 %2961, 28
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 7
  store i64 %2964, i64* %PC
  %2965 = inttoptr i64 %2962 to i32*
  store i32 2, i32* %2965
  br label %block_400f0d

block_400fc1:                                     ; preds = %block_400fb1, %block_400e7d
  %MEMORY.2 = phi %struct.Memory* [ %2623, %block_400e7d ], [ %2847, %block_400fb1 ]
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 5
  %2968 = load i64, i64* %PC
  %2969 = add i64 %2968, 5
  store i64 %2969, i64* %PC
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2967, i64* %2970, align 8, !tbaa !2428
  br label %block_400fc6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400780:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c00_bitrv2conj(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c00:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %45 to %union.vec128_t*
  %46 = load i64, i64* %RBP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 1
  store i64 %48, i64* %PC
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %50 = load i64, i64* %49, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %46, i64* %52
  store i64 %51, i64* %49, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  store i64 %53, i64* %RBP, align 8, !tbaa !2428
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 4
  %58 = load i32, i32* %EDI
  %59 = zext i32 %58 to i64
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = load i64, i64* %RSI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 24
  %71 = load i64, i64* %RDX
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 16
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = load i64, i64* %RDX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 6
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  store i32 0, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 44
  %94 = load i32, i32* %EDI
  %95 = zext i32 %94 to i64
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %93 to i32*
  store i32 %94, i32* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 48
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 1, i32* %103
  br label %block_401c26

block_401c7d:                                     ; preds = %block_401c45
  %104 = sub i64 %6871, 48
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 3
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  %108 = load i32, i32* %107
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = load i64, i64* %RAX
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = trunc i64 %110 to i32
  %114 = shl i32 %113, 1
  %115 = icmp slt i32 %113, 0
  %116 = icmp slt i32 %114, 0
  %117 = xor i1 %115, %116
  %118 = zext i32 %114 to i64
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %120 = zext i1 %115 to i8
  store i8 %120, i8* %119, align 1, !tbaa !2451
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %122 = and i32 %114, 254
  %123 = call i32 @llvm.ctpop.i32(i32 %122) #17
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %121, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %127, align 1, !tbaa !2451
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %129 = icmp eq i32 %114, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %128, align 1, !tbaa !2451
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %132 = lshr i32 %114, 31
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %131, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %135 = zext i1 %117 to i8
  store i8 %135, i8* %134, align 1, !tbaa !2451
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 48
  %138 = load i32, i32* %EAX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 3
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %137 to i32*
  store i32 %138, i32* %142
  %143 = load i64, i64* %PC
  %144 = sub i64 %143, 96
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %147, align 8, !tbaa !2428
  br label %block_401c26

block_4021a6:                                     ; preds = %block_401caa
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 748
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %149, i64* %152, align 8, !tbaa !2428
  br label %block_402492

block_401c51:                                     ; preds = %block_401c45
  %153 = sub i64 %6871, 16
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 28
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162
  %164 = sext i32 %163 to i64
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = load i64, i64* %RAX
  %166 = load i64, i64* %RCX
  %167 = mul i64 %166, 4
  %168 = add i64 %167, %165
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 3
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %168 to i32*
  %172 = load i32, i32* %171
  %173 = zext i32 %172 to i64
  store i64 %173, i64* %RDX, align 8, !tbaa !2428
  %174 = load i64, i64* %RDX
  %175 = load i64, i64* %RBP
  %176 = sub i64 %175, 44
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 3
  store i64 %178, i64* %PC
  %179 = trunc i64 %174 to i32
  %180 = inttoptr i64 %176 to i32*
  %181 = load i32, i32* %180
  %182 = add i32 %181, %179
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RDX, align 8, !tbaa !2428
  %184 = icmp ult i32 %182, %179
  %185 = icmp ult i32 %182, %181
  %186 = or i1 %184, %185
  %187 = zext i1 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %187, i8* %188, align 1, !tbaa !2432
  %189 = and i32 %182, 255
  %190 = call i32 @llvm.ctpop.i32(i32 %189) #17
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  %193 = xor i8 %192, 1
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %193, i8* %194, align 1, !tbaa !2446
  %195 = xor i32 %181, %179
  %196 = xor i32 %195, %182
  %197 = lshr i32 %196, 4
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %199, i8* %200, align 1, !tbaa !2447
  %201 = icmp eq i32 %182, 0
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %202, i8* %203, align 1, !tbaa !2448
  %204 = lshr i32 %182, 31
  %205 = trunc i32 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %205, i8* %206, align 1, !tbaa !2449
  %207 = lshr i32 %179, 31
  %208 = lshr i32 %181, 31
  %209 = xor i32 %204, %207
  %210 = xor i32 %204, %208
  %211 = add nuw nsw i32 %209, %210
  %212 = icmp eq i32 %211, 2
  %213 = zext i1 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %213, i8* %214, align 1, !tbaa !2450
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 16
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = load i64, i64* %RBP
  %222 = sub i64 %221, 48
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %222 to i32*
  %226 = load i32, i32* %225
  %227 = zext i32 %226 to i64
  store i64 %227, i64* %RSI, align 8, !tbaa !2428
  %228 = load i64, i64* %RSI
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 28
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 3
  store i64 %232, i64* %PC
  %233 = trunc i64 %228 to i32
  %234 = inttoptr i64 %230 to i32*
  %235 = load i32, i32* %234
  %236 = add i32 %235, %233
  %237 = zext i32 %236 to i64
  store i64 %237, i64* %RSI, align 8, !tbaa !2428
  %238 = icmp ult i32 %236, %233
  %239 = icmp ult i32 %236, %235
  %240 = or i1 %238, %239
  %241 = zext i1 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %241, i8* %242, align 1, !tbaa !2432
  %243 = and i32 %236, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #17
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = xor i32 %235, %233
  %250 = xor i32 %249, %236
  %251 = lshr i32 %250, 4
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %253, i8* %254, align 1, !tbaa !2447
  %255 = icmp eq i32 %236, 0
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %256, i8* %257, align 1, !tbaa !2448
  %258 = lshr i32 %236, 31
  %259 = trunc i32 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %259, i8* %260, align 1, !tbaa !2449
  %261 = lshr i32 %233, 31
  %262 = lshr i32 %235, 31
  %263 = xor i32 %258, %261
  %264 = xor i32 %258, %262
  %265 = add nuw nsw i32 %263, %264
  %266 = icmp eq i32 %265, 2
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %267, i8* %268, align 1, !tbaa !2450
  %269 = load i32, i32* %ESI
  %270 = zext i32 %269 to i64
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 3
  store i64 %272, i64* %PC
  %273 = shl i64 %270, 32
  %274 = ashr exact i64 %273, 32
  store i64 %274, i64* %RCX, align 8, !tbaa !2428
  %275 = load i64, i64* %RAX
  %276 = load i64, i64* %RCX
  %277 = mul i64 %276, 4
  %278 = add i64 %277, %275
  %279 = load i32, i32* %EDX
  %280 = zext i32 %279 to i64
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 3
  store i64 %282, i64* %PC
  %283 = inttoptr i64 %278 to i32*
  store i32 %279, i32* %283
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 28
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i32*
  %289 = load i32, i32* %288
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RAX
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 3
  store i64 %293, i64* %PC
  %294 = trunc i64 %291 to i32
  %295 = add i32 1, %294
  %296 = zext i32 %295 to i64
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = icmp ult i32 %295, %294
  %298 = icmp ult i32 %295, 1
  %299 = or i1 %297, %298
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %300, i8* %301, align 1, !tbaa !2432
  %302 = and i32 %295, 255
  %303 = call i32 @llvm.ctpop.i32(i32 %302) #17
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %306, i8* %307, align 1, !tbaa !2446
  %308 = xor i64 1, %291
  %309 = trunc i64 %308 to i32
  %310 = xor i32 %309, %295
  %311 = lshr i32 %310, 4
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %313, i8* %314, align 1, !tbaa !2447
  %315 = icmp eq i32 %295, 0
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %316, i8* %317, align 1, !tbaa !2448
  %318 = lshr i32 %295, 31
  %319 = trunc i32 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %319, i8* %320, align 1, !tbaa !2449
  %321 = lshr i32 %294, 31
  %322 = xor i32 %318, %321
  %323 = add nuw nsw i32 %322, %318
  %324 = icmp eq i32 %323, 2
  %325 = zext i1 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %325, i8* %326, align 1, !tbaa !2450
  %327 = load i64, i64* %RBP
  %328 = sub i64 %327, 28
  %329 = load i32, i32* %EAX
  %330 = zext i32 %329 to i64
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %328 to i32*
  store i32 %329, i32* %333
  %334 = load i64, i64* %PC
  %335 = sub i64 %334, 51
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %335, i64* %338, align 8, !tbaa !2428
  br label %block_401c45

block_4023f9:                                     ; preds = %block_40221f
  %339 = sub i64 %6248, 36
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 3
  store i64 %341, i64* %PC
  %342 = inttoptr i64 %339 to i32*
  %343 = load i32, i32* %342
  %344 = zext i32 %343 to i64
  store i64 %344, i64* %RCX, align 8, !tbaa !2428
  %345 = load i64, i64* %RCX
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 3
  store i64 %347, i64* %PC
  %348 = trunc i64 %345 to i32
  %349 = shl i32 %348, 1
  %350 = icmp slt i32 %348, 0
  %351 = icmp slt i32 %349, 0
  %352 = xor i1 %350, %351
  %353 = zext i32 %349 to i64
  store i64 %353, i64* %RCX, align 8, !tbaa !2428
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %355 = zext i1 %350 to i8
  store i8 %355, i8* %354, align 1, !tbaa !2451
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %357 = and i32 %349, 254
  %358 = call i32 @llvm.ctpop.i32(i32 %357) #17
  %359 = trunc i32 %358 to i8
  %360 = and i8 %359, 1
  %361 = xor i8 %360, 1
  store i8 %361, i8* %356, align 1, !tbaa !2451
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %362, align 1, !tbaa !2451
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %364 = icmp eq i32 %349, 0
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %363, align 1, !tbaa !2451
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %367 = lshr i32 %349, 31
  %368 = trunc i32 %367 to i8
  store i8 %368, i8* %366, align 1, !tbaa !2451
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %370 = zext i1 %352 to i8
  store i8 %370, i8* %369, align 1, !tbaa !2451
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 16
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 4
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to i64*
  %376 = load i64, i64* %375
  store i64 %376, i64* %RDX, align 8, !tbaa !2428
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 36
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381
  %383 = sext i32 %382 to i64
  store i64 %383, i64* %RSI, align 8, !tbaa !2428
  %384 = load i64, i64* %RCX
  %385 = load i64, i64* %RDX
  %386 = load i64, i64* %RSI
  %387 = mul i64 %386, 4
  %388 = add i64 %387, %385
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 3
  store i64 %390, i64* %PC
  %391 = trunc i64 %384 to i32
  %392 = inttoptr i64 %388 to i32*
  %393 = load i32, i32* %392
  %394 = add i32 %393, %391
  %395 = zext i32 %394 to i64
  store i64 %395, i64* %RCX, align 8, !tbaa !2428
  %396 = icmp ult i32 %394, %391
  %397 = icmp ult i32 %394, %393
  %398 = or i1 %396, %397
  %399 = zext i1 %398 to i8
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %399, i8* %400, align 1, !tbaa !2432
  %401 = and i32 %394, 255
  %402 = call i32 @llvm.ctpop.i32(i32 %401) #17
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %405, i8* %406, align 1, !tbaa !2446
  %407 = xor i32 %393, %391
  %408 = xor i32 %407, %394
  %409 = lshr i32 %408, 4
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %411, i8* %412, align 1, !tbaa !2447
  %413 = icmp eq i32 %394, 0
  %414 = zext i1 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = lshr i32 %394, 31
  %417 = trunc i32 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %417, i8* %418, align 1, !tbaa !2449
  %419 = lshr i32 %391, 31
  %420 = lshr i32 %393, 31
  %421 = xor i32 %416, %419
  %422 = xor i32 %416, %420
  %423 = add nuw nsw i32 %421, %422
  %424 = icmp eq i32 %423, 2
  %425 = zext i1 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = load i64, i64* %RBP
  %428 = sub i64 %427, 40
  %429 = load i32, i32* %ECX
  %430 = zext i32 %429 to i64
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %428 to i32*
  store i32 %429, i32* %433
  %434 = load i64, i64* %RBP
  %435 = sub i64 %434, 24
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %435 to i64*
  %439 = load i64, i64* %438
  store i64 %439, i64* %RDX, align 8, !tbaa !2428
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 40
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 3
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  %445 = load i32, i32* %444
  %446 = zext i32 %445 to i64
  store i64 %446, i64* %RCX, align 8, !tbaa !2428
  %447 = load i64, i64* %RCX
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  %450 = trunc i64 %447 to i32
  %451 = add i32 1, %450
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %453 = icmp ult i32 %451, %450
  %454 = icmp ult i32 %451, 1
  %455 = or i1 %453, %454
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %456, i8* %457, align 1, !tbaa !2432
  %458 = and i32 %451, 255
  %459 = call i32 @llvm.ctpop.i32(i32 %458) #17
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %462, i8* %463, align 1, !tbaa !2446
  %464 = xor i64 1, %447
  %465 = trunc i64 %464 to i32
  %466 = xor i32 %465, %451
  %467 = lshr i32 %466, 4
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %469, i8* %470, align 1, !tbaa !2447
  %471 = icmp eq i32 %451, 0
  %472 = zext i1 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %472, i8* %473, align 1, !tbaa !2448
  %474 = lshr i32 %451, 31
  %475 = trunc i32 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %475, i8* %476, align 1, !tbaa !2449
  %477 = lshr i32 %450, 31
  %478 = xor i32 %474, %477
  %479 = add nuw nsw i32 %478, %474
  %480 = icmp eq i32 %479, 2
  %481 = zext i1 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %481, i8* %482, align 1, !tbaa !2450
  %483 = load i32, i32* %ECX
  %484 = zext i32 %483 to i64
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 3
  store i64 %486, i64* %PC
  %487 = shl i64 %484, 32
  %488 = ashr exact i64 %487, 32
  store i64 %488, i64* %RSI, align 8, !tbaa !2428
  %489 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %490 = load i64, i64* %RDX
  %491 = load i64, i64* %RSI
  %492 = mul i64 %491, 8
  %493 = add i64 %492, %490
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  store i64 %495, i64* %PC
  %496 = inttoptr i64 %493 to double*
  %497 = load double, double* %496
  %498 = bitcast i8* %489 to double*
  store double %497, double* %498, align 1, !tbaa !2452
  %499 = getelementptr inbounds i8, i8* %489, i64 8
  %500 = bitcast i8* %499 to double*
  store double 0.000000e+00, double* %500, align 1, !tbaa !2452
  %501 = bitcast %union.vec128_t* %XMM0 to i8*
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 5
  store i64 %503, i64* %PC
  %504 = bitcast i8* %501 to i64*
  %505 = load i64, i64* %504, align 1
  store i64 %505, i64* %RDX, align 1, !tbaa !2428
  %506 = load i64, i64* %RDX
  %507 = load i64, i64* %RAX
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 3
  store i64 %509, i64* %PC
  %510 = xor i64 %507, %506
  store i64 %510, i64* %RDX, align 8, !tbaa !2428
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %511, align 1, !tbaa !2432
  %512 = trunc i64 %510 to i32
  %513 = and i32 %512, 255
  %514 = call i32 @llvm.ctpop.i32(i32 %513) #17
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = xor i8 %516, 1
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %517, i8* %518, align 1, !tbaa !2446
  %519 = icmp eq i64 %510, 0
  %520 = zext i1 %519 to i8
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %520, i8* %521, align 1, !tbaa !2448
  %522 = lshr i64 %510, 63
  %523 = trunc i64 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %523, i8* %524, align 1, !tbaa !2449
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %525, align 1, !tbaa !2450
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %526, align 1, !tbaa !2447
  %527 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %528 = load i64, i64* %RDX
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 5
  store i64 %530, i64* %PC
  %531 = bitcast i8* %527 to i64*
  store i64 %528, i64* %531, align 1, !tbaa !2428
  %532 = getelementptr inbounds i8, i8* %527, i64 8
  %533 = bitcast i8* %532 to i64*
  store i64 0, i64* %533, align 1, !tbaa !2428
  %534 = load i64, i64* %RBP
  %535 = sub i64 %534, 24
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 4
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i64*
  %539 = load i64, i64* %538
  store i64 %539, i64* %RDX, align 8, !tbaa !2428
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 40
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 3
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i32*
  %545 = load i32, i32* %544
  %546 = zext i32 %545 to i64
  store i64 %546, i64* %RCX, align 8, !tbaa !2428
  %547 = load i64, i64* %RCX
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 3
  store i64 %549, i64* %PC
  %550 = trunc i64 %547 to i32
  %551 = add i32 1, %550
  %552 = zext i32 %551 to i64
  store i64 %552, i64* %RCX, align 8, !tbaa !2428
  %553 = icmp ult i32 %551, %550
  %554 = icmp ult i32 %551, 1
  %555 = or i1 %553, %554
  %556 = zext i1 %555 to i8
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %556, i8* %557, align 1, !tbaa !2432
  %558 = and i32 %551, 255
  %559 = call i32 @llvm.ctpop.i32(i32 %558) #17
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %562, i8* %563, align 1, !tbaa !2446
  %564 = xor i64 1, %547
  %565 = trunc i64 %564 to i32
  %566 = xor i32 %565, %551
  %567 = lshr i32 %566, 4
  %568 = trunc i32 %567 to i8
  %569 = and i8 %568, 1
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %569, i8* %570, align 1, !tbaa !2447
  %571 = icmp eq i32 %551, 0
  %572 = zext i1 %571 to i8
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %572, i8* %573, align 1, !tbaa !2448
  %574 = lshr i32 %551, 31
  %575 = trunc i32 %574 to i8
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %575, i8* %576, align 1, !tbaa !2449
  %577 = lshr i32 %550, 31
  %578 = xor i32 %574, %577
  %579 = add nuw nsw i32 %578, %574
  %580 = icmp eq i32 %579, 2
  %581 = zext i1 %580 to i8
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %581, i8* %582, align 1, !tbaa !2450
  %583 = load i32, i32* %ECX
  %584 = zext i32 %583 to i64
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 3
  store i64 %586, i64* %PC
  %587 = shl i64 %584, 32
  %588 = ashr exact i64 %587, 32
  store i64 %588, i64* %RSI, align 8, !tbaa !2428
  %589 = load i64, i64* %RDX
  %590 = load i64, i64* %RSI
  %591 = mul i64 %590, 8
  %592 = add i64 %591, %589
  %593 = bitcast %union.vec128_t* %XMM0 to i8*
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 5
  store i64 %595, i64* %PC
  %596 = bitcast i8* %593 to double*
  %597 = load double, double* %596, align 1
  %598 = inttoptr i64 %592 to double*
  store double %597, double* %598
  %599 = load i64, i64* %RBP
  %600 = sub i64 %599, 24
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %600 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %RDX, align 8, !tbaa !2428
  %605 = load i64, i64* %RBP
  %606 = sub i64 %605, 40
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 3
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i32*
  %610 = load i32, i32* %609
  %611 = zext i32 %610 to i64
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = load i64, i64* %RCX
  %613 = load i64, i64* %RBP
  %614 = sub i64 %613, 52
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 3
  store i64 %616, i64* %PC
  %617 = trunc i64 %612 to i32
  %618 = inttoptr i64 %614 to i32*
  %619 = load i32, i32* %618
  %620 = add i32 %619, %617
  %621 = zext i32 %620 to i64
  store i64 %621, i64* %RCX, align 8, !tbaa !2428
  %622 = icmp ult i32 %620, %617
  %623 = icmp ult i32 %620, %619
  %624 = or i1 %622, %623
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %625, i8* %626, align 1, !tbaa !2432
  %627 = and i32 %620, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #17
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2446
  %633 = xor i32 %619, %617
  %634 = xor i32 %633, %620
  %635 = lshr i32 %634, 4
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2447
  %639 = icmp eq i32 %620, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2448
  %642 = lshr i32 %620, 31
  %643 = trunc i32 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2449
  %645 = lshr i32 %617, 31
  %646 = lshr i32 %619, 31
  %647 = xor i32 %642, %645
  %648 = xor i32 %642, %646
  %649 = add nuw nsw i32 %647, %648
  %650 = icmp eq i32 %649, 2
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %651, i8* %652, align 1, !tbaa !2450
  %653 = load i64, i64* %RCX
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC
  %656 = trunc i64 %653 to i32
  %657 = add i32 1, %656
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RCX, align 8, !tbaa !2428
  %659 = icmp ult i32 %657, %656
  %660 = icmp ult i32 %657, 1
  %661 = or i1 %659, %660
  %662 = zext i1 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %662, i8* %663, align 1, !tbaa !2432
  %664 = and i32 %657, 255
  %665 = call i32 @llvm.ctpop.i32(i32 %664) #17
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = xor i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %668, i8* %669, align 1, !tbaa !2446
  %670 = xor i64 1, %653
  %671 = trunc i64 %670 to i32
  %672 = xor i32 %671, %657
  %673 = lshr i32 %672, 4
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %675, i8* %676, align 1, !tbaa !2447
  %677 = icmp eq i32 %657, 0
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %678, i8* %679, align 1, !tbaa !2448
  %680 = lshr i32 %657, 31
  %681 = trunc i32 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %681, i8* %682, align 1, !tbaa !2449
  %683 = lshr i32 %656, 31
  %684 = xor i32 %680, %683
  %685 = add nuw nsw i32 %684, %680
  %686 = icmp eq i32 %685, 2
  %687 = zext i1 %686 to i8
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %687, i8* %688, align 1, !tbaa !2450
  %689 = load i32, i32* %ECX
  %690 = zext i32 %689 to i64
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 3
  store i64 %692, i64* %PC
  %693 = shl i64 %690, 32
  %694 = ashr exact i64 %693, 32
  store i64 %694, i64* %RSI, align 8, !tbaa !2428
  %695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %696 = load i64, i64* %RDX
  %697 = load i64, i64* %RSI
  %698 = mul i64 %697, 8
  %699 = add i64 %698, %696
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 5
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to double*
  %703 = load double, double* %702
  %704 = bitcast i8* %695 to double*
  store double %703, double* %704, align 1, !tbaa !2452
  %705 = getelementptr inbounds i8, i8* %695, i64 8
  %706 = bitcast i8* %705 to double*
  store double 0.000000e+00, double* %706, align 1, !tbaa !2452
  %707 = bitcast %union.vec128_t* %XMM0 to i8*
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 5
  store i64 %709, i64* %PC
  %710 = bitcast i8* %707 to i64*
  %711 = load i64, i64* %710, align 1
  store i64 %711, i64* %RDX, align 1, !tbaa !2428
  %712 = load i64, i64* %RDX
  %713 = load i64, i64* %RAX
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 3
  store i64 %715, i64* %PC
  %716 = xor i64 %713, %712
  store i64 %716, i64* %RDX, align 8, !tbaa !2428
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %717, align 1, !tbaa !2432
  %718 = trunc i64 %716 to i32
  %719 = and i32 %718, 255
  %720 = call i32 @llvm.ctpop.i32(i32 %719) #17
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %723, i8* %724, align 1, !tbaa !2446
  %725 = icmp eq i64 %716, 0
  %726 = zext i1 %725 to i8
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %726, i8* %727, align 1, !tbaa !2448
  %728 = lshr i64 %716, 63
  %729 = trunc i64 %728 to i8
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %729, i8* %730, align 1, !tbaa !2449
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %731, align 1, !tbaa !2450
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %732, align 1, !tbaa !2447
  %733 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %734 = load i64, i64* %RDX
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 5
  store i64 %736, i64* %PC
  %737 = bitcast i8* %733 to i64*
  store i64 %734, i64* %737, align 1, !tbaa !2428
  %738 = getelementptr inbounds i8, i8* %733, i64 8
  %739 = bitcast i8* %738 to i64*
  store i64 0, i64* %739, align 1, !tbaa !2428
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 24
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %RAX, align 8, !tbaa !2428
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 40
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 3
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i32*
  %751 = load i32, i32* %750
  %752 = zext i32 %751 to i64
  store i64 %752, i64* %RCX, align 8, !tbaa !2428
  %753 = load i64, i64* %RCX
  %754 = load i64, i64* %RBP
  %755 = sub i64 %754, 52
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 3
  store i64 %757, i64* %PC
  %758 = trunc i64 %753 to i32
  %759 = inttoptr i64 %755 to i32*
  %760 = load i32, i32* %759
  %761 = add i32 %760, %758
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RCX, align 8, !tbaa !2428
  %763 = icmp ult i32 %761, %758
  %764 = icmp ult i32 %761, %760
  %765 = or i1 %763, %764
  %766 = zext i1 %765 to i8
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %766, i8* %767, align 1, !tbaa !2432
  %768 = and i32 %761, 255
  %769 = call i32 @llvm.ctpop.i32(i32 %768) #17
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %772, i8* %773, align 1, !tbaa !2446
  %774 = xor i32 %760, %758
  %775 = xor i32 %774, %761
  %776 = lshr i32 %775, 4
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %778, i8* %779, align 1, !tbaa !2447
  %780 = icmp eq i32 %761, 0
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %781, i8* %782, align 1, !tbaa !2448
  %783 = lshr i32 %761, 31
  %784 = trunc i32 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %784, i8* %785, align 1, !tbaa !2449
  %786 = lshr i32 %758, 31
  %787 = lshr i32 %760, 31
  %788 = xor i32 %783, %786
  %789 = xor i32 %783, %787
  %790 = add nuw nsw i32 %788, %789
  %791 = icmp eq i32 %790, 2
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %792, i8* %793, align 1, !tbaa !2450
  %794 = load i64, i64* %RCX
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC
  %797 = trunc i64 %794 to i32
  %798 = add i32 1, %797
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RCX, align 8, !tbaa !2428
  %800 = icmp ult i32 %798, %797
  %801 = icmp ult i32 %798, 1
  %802 = or i1 %800, %801
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %803, i8* %804, align 1, !tbaa !2432
  %805 = and i32 %798, 255
  %806 = call i32 @llvm.ctpop.i32(i32 %805) #17
  %807 = trunc i32 %806 to i8
  %808 = and i8 %807, 1
  %809 = xor i8 %808, 1
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %809, i8* %810, align 1, !tbaa !2446
  %811 = xor i64 1, %794
  %812 = trunc i64 %811 to i32
  %813 = xor i32 %812, %798
  %814 = lshr i32 %813, 4
  %815 = trunc i32 %814 to i8
  %816 = and i8 %815, 1
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %816, i8* %817, align 1, !tbaa !2447
  %818 = icmp eq i32 %798, 0
  %819 = zext i1 %818 to i8
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %819, i8* %820, align 1, !tbaa !2448
  %821 = lshr i32 %798, 31
  %822 = trunc i32 %821 to i8
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %822, i8* %823, align 1, !tbaa !2449
  %824 = lshr i32 %797, 31
  %825 = xor i32 %821, %824
  %826 = add nuw nsw i32 %825, %821
  %827 = icmp eq i32 %826, 2
  %828 = zext i1 %827 to i8
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %828, i8* %829, align 1, !tbaa !2450
  %830 = load i32, i32* %ECX
  %831 = zext i32 %830 to i64
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = shl i64 %831, 32
  %835 = ashr exact i64 %834, 32
  store i64 %835, i64* %RDX, align 8, !tbaa !2428
  %836 = load i64, i64* %RAX
  %837 = load i64, i64* %RDX
  %838 = mul i64 %837, 8
  %839 = add i64 %838, %836
  %840 = bitcast %union.vec128_t* %XMM0 to i8*
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 5
  store i64 %842, i64* %PC
  %843 = bitcast i8* %840 to double*
  %844 = load double, double* %843, align 1
  %845 = inttoptr i64 %839 to double*
  store double %844, double* %845
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 36
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 3
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %847 to i32*
  %851 = load i32, i32* %850
  %852 = zext i32 %851 to i64
  store i64 %852, i64* %RAX, align 8, !tbaa !2428
  %853 = load i64, i64* %RAX
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 3
  store i64 %855, i64* %PC
  %856 = trunc i64 %853 to i32
  %857 = add i32 1, %856
  %858 = zext i32 %857 to i64
  store i64 %858, i64* %RAX, align 8, !tbaa !2428
  %859 = icmp ult i32 %857, %856
  %860 = icmp ult i32 %857, 1
  %861 = or i1 %859, %860
  %862 = zext i1 %861 to i8
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %862, i8* %863, align 1, !tbaa !2432
  %864 = and i32 %857, 255
  %865 = call i32 @llvm.ctpop.i32(i32 %864) #17
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %868, i8* %869, align 1, !tbaa !2446
  %870 = xor i64 1, %853
  %871 = trunc i64 %870 to i32
  %872 = xor i32 %871, %857
  %873 = lshr i32 %872, 4
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %875, i8* %876, align 1, !tbaa !2447
  %877 = icmp eq i32 %857, 0
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = lshr i32 %857, 31
  %881 = trunc i32 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i32 %856, 31
  %884 = xor i32 %880, %883
  %885 = add nuw nsw i32 %884, %880
  %886 = icmp eq i32 %885, 2
  %887 = zext i1 %886 to i8
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %887, i8* %888, align 1, !tbaa !2450
  %889 = load i64, i64* %RBP
  %890 = sub i64 %889, 36
  %891 = load i32, i32* %EAX
  %892 = zext i32 %891 to i64
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %890 to i32*
  store i32 %891, i32* %895
  %896 = load i64, i64* %PC
  %897 = sub i64 %896, 636
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 5
  store i64 %899, i64* %PC
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %897, i64* %900, align 8, !tbaa !2428
  br label %block_40220c

block_401cc9:                                     ; preds = %block_401cbd
  %901 = sub i64 %4734, 28
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 3
  store i64 %903, i64* %PC
  %904 = inttoptr i64 %901 to i32*
  %905 = load i32, i32* %904
  %906 = zext i32 %905 to i64
  store i64 %906, i64* %RCX, align 8, !tbaa !2428
  %907 = load i64, i64* %RCX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 3
  store i64 %909, i64* %PC
  %910 = trunc i64 %907 to i32
  %911 = shl i32 %910, 1
  %912 = icmp slt i32 %910, 0
  %913 = icmp slt i32 %911, 0
  %914 = xor i1 %912, %913
  %915 = zext i32 %911 to i64
  store i64 %915, i64* %RCX, align 8, !tbaa !2428
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %917 = zext i1 %912 to i8
  store i8 %917, i8* %916, align 1, !tbaa !2451
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %919 = and i32 %911, 254
  %920 = call i32 @llvm.ctpop.i32(i32 %919) #17
  %921 = trunc i32 %920 to i8
  %922 = and i8 %921, 1
  %923 = xor i8 %922, 1
  store i8 %923, i8* %918, align 1, !tbaa !2451
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %924, align 1, !tbaa !2451
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %926 = icmp eq i32 %911, 0
  %927 = zext i1 %926 to i8
  store i8 %927, i8* %925, align 1, !tbaa !2451
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %929 = lshr i32 %911, 31
  %930 = trunc i32 %929 to i8
  store i8 %930, i8* %928, align 1, !tbaa !2451
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %932 = zext i1 %914 to i8
  store i8 %932, i8* %931, align 1, !tbaa !2451
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 16
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i64*
  %938 = load i64, i64* %937
  store i64 %938, i64* %RDX, align 8, !tbaa !2428
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 36
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i32*
  %944 = load i32, i32* %943
  %945 = sext i32 %944 to i64
  store i64 %945, i64* %RSI, align 8, !tbaa !2428
  %946 = load i64, i64* %RCX
  %947 = load i64, i64* %RDX
  %948 = load i64, i64* %RSI
  %949 = mul i64 %948, 4
  %950 = add i64 %949, %947
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 3
  store i64 %952, i64* %PC
  %953 = trunc i64 %946 to i32
  %954 = inttoptr i64 %950 to i32*
  %955 = load i32, i32* %954
  %956 = add i32 %955, %953
  %957 = zext i32 %956 to i64
  store i64 %957, i64* %RCX, align 8, !tbaa !2428
  %958 = icmp ult i32 %956, %953
  %959 = icmp ult i32 %956, %955
  %960 = or i1 %958, %959
  %961 = zext i1 %960 to i8
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %961, i8* %962, align 1, !tbaa !2432
  %963 = and i32 %956, 255
  %964 = call i32 @llvm.ctpop.i32(i32 %963) #17
  %965 = trunc i32 %964 to i8
  %966 = and i8 %965, 1
  %967 = xor i8 %966, 1
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %967, i8* %968, align 1, !tbaa !2446
  %969 = xor i32 %955, %953
  %970 = xor i32 %969, %956
  %971 = lshr i32 %970, 4
  %972 = trunc i32 %971 to i8
  %973 = and i8 %972, 1
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %973, i8* %974, align 1, !tbaa !2447
  %975 = icmp eq i32 %956, 0
  %976 = zext i1 %975 to i8
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %976, i8* %977, align 1, !tbaa !2448
  %978 = lshr i32 %956, 31
  %979 = trunc i32 %978 to i8
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %979, i8* %980, align 1, !tbaa !2449
  %981 = lshr i32 %953, 31
  %982 = lshr i32 %955, 31
  %983 = xor i32 %978, %981
  %984 = xor i32 %978, %982
  %985 = add nuw nsw i32 %983, %984
  %986 = icmp eq i32 %985, 2
  %987 = zext i1 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %987, i8* %988, align 1, !tbaa !2450
  %989 = load i64, i64* %RBP
  %990 = sub i64 %989, 32
  %991 = load i32, i32* %ECX
  %992 = zext i32 %991 to i64
  %993 = load i64, i64* %PC
  %994 = add i64 %993, 3
  store i64 %994, i64* %PC
  %995 = inttoptr i64 %990 to i32*
  store i32 %991, i32* %995
  %996 = load i64, i64* %RBP
  %997 = sub i64 %996, 36
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 3
  store i64 %999, i64* %PC
  %1000 = inttoptr i64 %997 to i32*
  %1001 = load i32, i32* %1000
  %1002 = zext i32 %1001 to i64
  store i64 %1002, i64* %RCX, align 8, !tbaa !2428
  %1003 = load i64, i64* %RCX
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 3
  store i64 %1005, i64* %PC
  %1006 = trunc i64 %1003 to i32
  %1007 = shl i32 %1006, 1
  %1008 = icmp slt i32 %1006, 0
  %1009 = icmp slt i32 %1007, 0
  %1010 = xor i1 %1008, %1009
  %1011 = zext i32 %1007 to i64
  store i64 %1011, i64* %RCX, align 8, !tbaa !2428
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1013 = zext i1 %1008 to i8
  store i8 %1013, i8* %1012, align 1, !tbaa !2451
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1015 = and i32 %1007, 254
  %1016 = call i32 @llvm.ctpop.i32(i32 %1015) #17
  %1017 = trunc i32 %1016 to i8
  %1018 = and i8 %1017, 1
  %1019 = xor i8 %1018, 1
  store i8 %1019, i8* %1014, align 1, !tbaa !2451
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1020, align 1, !tbaa !2451
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1022 = icmp eq i32 %1007, 0
  %1023 = zext i1 %1022 to i8
  store i8 %1023, i8* %1021, align 1, !tbaa !2451
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1025 = lshr i32 %1007, 31
  %1026 = trunc i32 %1025 to i8
  store i8 %1026, i8* %1024, align 1, !tbaa !2451
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1028 = zext i1 %1010 to i8
  store i8 %1028, i8* %1027, align 1, !tbaa !2451
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 16
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RDX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 28
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = sext i32 %1040 to i64
  store i64 %1041, i64* %RSI, align 8, !tbaa !2428
  %1042 = load i64, i64* %RCX
  %1043 = load i64, i64* %RDX
  %1044 = load i64, i64* %RSI
  %1045 = mul i64 %1044, 4
  %1046 = add i64 %1045, %1043
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC
  %1049 = trunc i64 %1042 to i32
  %1050 = inttoptr i64 %1046 to i32*
  %1051 = load i32, i32* %1050
  %1052 = add i32 %1051, %1049
  %1053 = zext i32 %1052 to i64
  store i64 %1053, i64* %RCX, align 8, !tbaa !2428
  %1054 = icmp ult i32 %1052, %1049
  %1055 = icmp ult i32 %1052, %1051
  %1056 = or i1 %1054, %1055
  %1057 = zext i1 %1056 to i8
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1057, i8* %1058, align 1, !tbaa !2432
  %1059 = and i32 %1052, 255
  %1060 = call i32 @llvm.ctpop.i32(i32 %1059) #17
  %1061 = trunc i32 %1060 to i8
  %1062 = and i8 %1061, 1
  %1063 = xor i8 %1062, 1
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1063, i8* %1064, align 1, !tbaa !2446
  %1065 = xor i32 %1051, %1049
  %1066 = xor i32 %1065, %1052
  %1067 = lshr i32 %1066, 4
  %1068 = trunc i32 %1067 to i8
  %1069 = and i8 %1068, 1
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1069, i8* %1070, align 1, !tbaa !2447
  %1071 = icmp eq i32 %1052, 0
  %1072 = zext i1 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1072, i8* %1073, align 1, !tbaa !2448
  %1074 = lshr i32 %1052, 31
  %1075 = trunc i32 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1075, i8* %1076, align 1, !tbaa !2449
  %1077 = lshr i32 %1049, 31
  %1078 = lshr i32 %1051, 31
  %1079 = xor i32 %1074, %1077
  %1080 = xor i32 %1074, %1078
  %1081 = add nuw nsw i32 %1079, %1080
  %1082 = icmp eq i32 %1081, 2
  %1083 = zext i1 %1082 to i8
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1083, i8* %1084, align 1, !tbaa !2450
  %1085 = load i64, i64* %RBP
  %1086 = sub i64 %1085, 40
  %1087 = load i32, i32* %ECX
  %1088 = zext i32 %1087 to i64
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 3
  store i64 %1090, i64* %PC
  %1091 = inttoptr i64 %1086 to i32*
  store i32 %1087, i32* %1091
  %1092 = load i64, i64* %RBP
  %1093 = sub i64 %1092, 24
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 4
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1093 to i64*
  %1097 = load i64, i64* %1096
  store i64 %1097, i64* %RDX, align 8, !tbaa !2428
  %1098 = load i64, i64* %RBP
  %1099 = sub i64 %1098, 32
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 4
  store i64 %1101, i64* %PC
  %1102 = inttoptr i64 %1099 to i32*
  %1103 = load i32, i32* %1102
  %1104 = sext i32 %1103 to i64
  store i64 %1104, i64* %RSI, align 8, !tbaa !2428
  %1105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1106 = load i64, i64* %RDX
  %1107 = load i64, i64* %RSI
  %1108 = mul i64 %1107, 8
  %1109 = add i64 %1108, %1106
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 5
  store i64 %1111, i64* %PC
  %1112 = inttoptr i64 %1109 to double*
  %1113 = load double, double* %1112
  %1114 = bitcast i8* %1105 to double*
  store double %1113, double* %1114, align 1, !tbaa !2452
  %1115 = getelementptr inbounds i8, i8* %1105, i64 8
  %1116 = bitcast i8* %1115 to double*
  store double 0.000000e+00, double* %1116, align 1, !tbaa !2452
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 64
  %1119 = bitcast %union.vec128_t* %XMM0 to i8*
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 5
  store i64 %1121, i64* %PC
  %1122 = bitcast i8* %1119 to double*
  %1123 = load double, double* %1122, align 1
  %1124 = inttoptr i64 %1118 to double*
  store double %1123, double* %1124
  %1125 = load i64, i64* %RBP
  %1126 = sub i64 %1125, 24
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 4
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1126 to i64*
  %1130 = load i64, i64* %1129
  store i64 %1130, i64* %RDX, align 8, !tbaa !2428
  %1131 = load i64, i64* %RBP
  %1132 = sub i64 %1131, 32
  %1133 = load i64, i64* %PC
  %1134 = add i64 %1133, 3
  store i64 %1134, i64* %PC
  %1135 = inttoptr i64 %1132 to i32*
  %1136 = load i32, i32* %1135
  %1137 = zext i32 %1136 to i64
  store i64 %1137, i64* %RCX, align 8, !tbaa !2428
  %1138 = load i64, i64* %RCX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC
  %1141 = trunc i64 %1138 to i32
  %1142 = add i32 1, %1141
  %1143 = zext i32 %1142 to i64
  store i64 %1143, i64* %RCX, align 8, !tbaa !2428
  %1144 = icmp ult i32 %1142, %1141
  %1145 = icmp ult i32 %1142, 1
  %1146 = or i1 %1144, %1145
  %1147 = zext i1 %1146 to i8
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1147, i8* %1148, align 1, !tbaa !2432
  %1149 = and i32 %1142, 255
  %1150 = call i32 @llvm.ctpop.i32(i32 %1149) #17
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  %1153 = xor i8 %1152, 1
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1153, i8* %1154, align 1, !tbaa !2446
  %1155 = xor i64 1, %1138
  %1156 = trunc i64 %1155 to i32
  %1157 = xor i32 %1156, %1142
  %1158 = lshr i32 %1157, 4
  %1159 = trunc i32 %1158 to i8
  %1160 = and i8 %1159, 1
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1160, i8* %1161, align 1, !tbaa !2447
  %1162 = icmp eq i32 %1142, 0
  %1163 = zext i1 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1163, i8* %1164, align 1, !tbaa !2448
  %1165 = lshr i32 %1142, 31
  %1166 = trunc i32 %1165 to i8
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1166, i8* %1167, align 1, !tbaa !2449
  %1168 = lshr i32 %1141, 31
  %1169 = xor i32 %1165, %1168
  %1170 = add nuw nsw i32 %1169, %1165
  %1171 = icmp eq i32 %1170, 2
  %1172 = zext i1 %1171 to i8
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1172, i8* %1173, align 1, !tbaa !2450
  %1174 = load i32, i32* %ECX
  %1175 = zext i32 %1174 to i64
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 3
  store i64 %1177, i64* %PC
  %1178 = shl i64 %1175, 32
  %1179 = ashr exact i64 %1178, 32
  store i64 %1179, i64* %RSI, align 8, !tbaa !2428
  %1180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1181 = load i64, i64* %RDX
  %1182 = load i64, i64* %RSI
  %1183 = mul i64 %1182, 8
  %1184 = add i64 %1183, %1181
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  store i64 %1186, i64* %PC
  %1187 = inttoptr i64 %1184 to double*
  %1188 = load double, double* %1187
  %1189 = bitcast i8* %1180 to double*
  store double %1188, double* %1189, align 1, !tbaa !2452
  %1190 = getelementptr inbounds i8, i8* %1180, i64 8
  %1191 = bitcast i8* %1190 to double*
  store double 0.000000e+00, double* %1191, align 1, !tbaa !2452
  %1192 = bitcast %union.vec128_t* %XMM0 to i8*
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 5
  store i64 %1194, i64* %PC
  %1195 = bitcast i8* %1192 to i64*
  %1196 = load i64, i64* %1195, align 1
  store i64 %1196, i64* %RDX, align 1, !tbaa !2428
  %1197 = load i64, i64* %RDX
  %1198 = load i64, i64* %RAX
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 3
  store i64 %1200, i64* %PC
  %1201 = xor i64 %1198, %1197
  store i64 %1201, i64* %RDX, align 8, !tbaa !2428
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1202, align 1, !tbaa !2432
  %1203 = trunc i64 %1201 to i32
  %1204 = and i32 %1203, 255
  %1205 = call i32 @llvm.ctpop.i32(i32 %1204) #17
  %1206 = trunc i32 %1205 to i8
  %1207 = and i8 %1206, 1
  %1208 = xor i8 %1207, 1
  %1209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1208, i8* %1209, align 1, !tbaa !2446
  %1210 = icmp eq i64 %1201, 0
  %1211 = zext i1 %1210 to i8
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1211, i8* %1212, align 1, !tbaa !2448
  %1213 = lshr i64 %1201, 63
  %1214 = trunc i64 %1213 to i8
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1214, i8* %1215, align 1, !tbaa !2449
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1216, align 1, !tbaa !2450
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1217, align 1, !tbaa !2447
  %1218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1219 = load i64, i64* %RDX
  %1220 = load i64, i64* %PC
  %1221 = add i64 %1220, 5
  store i64 %1221, i64* %PC
  %1222 = bitcast i8* %1218 to i64*
  store i64 %1219, i64* %1222, align 1, !tbaa !2428
  %1223 = getelementptr inbounds i8, i8* %1218, i64 8
  %1224 = bitcast i8* %1223 to i64*
  store i64 0, i64* %1224, align 1, !tbaa !2428
  %1225 = load i64, i64* %RBP
  %1226 = sub i64 %1225, 72
  %1227 = bitcast %union.vec128_t* %XMM0 to i8*
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 5
  store i64 %1229, i64* %PC
  %1230 = bitcast i8* %1227 to double*
  %1231 = load double, double* %1230, align 1
  %1232 = inttoptr i64 %1226 to double*
  store double %1231, double* %1232
  %1233 = load i64, i64* %RBP
  %1234 = sub i64 %1233, 24
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 4
  store i64 %1236, i64* %PC
  %1237 = inttoptr i64 %1234 to i64*
  %1238 = load i64, i64* %1237
  store i64 %1238, i64* %RDX, align 8, !tbaa !2428
  %1239 = load i64, i64* %RBP
  %1240 = sub i64 %1239, 40
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 4
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1240 to i32*
  %1244 = load i32, i32* %1243
  %1245 = sext i32 %1244 to i64
  store i64 %1245, i64* %RSI, align 8, !tbaa !2428
  %1246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1247 = load i64, i64* %RDX
  %1248 = load i64, i64* %RSI
  %1249 = mul i64 %1248, 8
  %1250 = add i64 %1249, %1247
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 5
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to double*
  %1254 = load double, double* %1253
  %1255 = bitcast i8* %1246 to double*
  store double %1254, double* %1255, align 1, !tbaa !2452
  %1256 = getelementptr inbounds i8, i8* %1246, i64 8
  %1257 = bitcast i8* %1256 to double*
  store double 0.000000e+00, double* %1257, align 1, !tbaa !2452
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 80
  %1260 = bitcast %union.vec128_t* %XMM0 to i8*
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 5
  store i64 %1262, i64* %PC
  %1263 = bitcast i8* %1260 to double*
  %1264 = load double, double* %1263, align 1
  %1265 = inttoptr i64 %1259 to double*
  store double %1264, double* %1265
  %1266 = load i64, i64* %RBP
  %1267 = sub i64 %1266, 24
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 4
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1267 to i64*
  %1271 = load i64, i64* %1270
  store i64 %1271, i64* %RDX, align 8, !tbaa !2428
  %1272 = load i64, i64* %RBP
  %1273 = sub i64 %1272, 40
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 3
  store i64 %1275, i64* %PC
  %1276 = inttoptr i64 %1273 to i32*
  %1277 = load i32, i32* %1276
  %1278 = zext i32 %1277 to i64
  store i64 %1278, i64* %RCX, align 8, !tbaa !2428
  %1279 = load i64, i64* %RCX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = trunc i64 %1279 to i32
  %1283 = add i32 1, %1282
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RCX, align 8, !tbaa !2428
  %1285 = icmp ult i32 %1283, %1282
  %1286 = icmp ult i32 %1283, 1
  %1287 = or i1 %1285, %1286
  %1288 = zext i1 %1287 to i8
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1288, i8* %1289, align 1, !tbaa !2432
  %1290 = and i32 %1283, 255
  %1291 = call i32 @llvm.ctpop.i32(i32 %1290) #17
  %1292 = trunc i32 %1291 to i8
  %1293 = and i8 %1292, 1
  %1294 = xor i8 %1293, 1
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1294, i8* %1295, align 1, !tbaa !2446
  %1296 = xor i64 1, %1279
  %1297 = trunc i64 %1296 to i32
  %1298 = xor i32 %1297, %1283
  %1299 = lshr i32 %1298, 4
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1301, i8* %1302, align 1, !tbaa !2447
  %1303 = icmp eq i32 %1283, 0
  %1304 = zext i1 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1304, i8* %1305, align 1, !tbaa !2448
  %1306 = lshr i32 %1283, 31
  %1307 = trunc i32 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1307, i8* %1308, align 1, !tbaa !2449
  %1309 = lshr i32 %1282, 31
  %1310 = xor i32 %1306, %1309
  %1311 = add nuw nsw i32 %1310, %1306
  %1312 = icmp eq i32 %1311, 2
  %1313 = zext i1 %1312 to i8
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1313, i8* %1314, align 1, !tbaa !2450
  %1315 = load i32, i32* %ECX
  %1316 = zext i32 %1315 to i64
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 3
  store i64 %1318, i64* %PC
  %1319 = shl i64 %1316, 32
  %1320 = ashr exact i64 %1319, 32
  store i64 %1320, i64* %RSI, align 8, !tbaa !2428
  %1321 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1322 = load i64, i64* %RDX
  %1323 = load i64, i64* %RSI
  %1324 = mul i64 %1323, 8
  %1325 = add i64 %1324, %1322
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to double*
  %1329 = load double, double* %1328
  %1330 = bitcast i8* %1321 to double*
  store double %1329, double* %1330, align 1, !tbaa !2452
  %1331 = getelementptr inbounds i8, i8* %1321, i64 8
  %1332 = bitcast i8* %1331 to double*
  store double 0.000000e+00, double* %1332, align 1, !tbaa !2452
  %1333 = bitcast %union.vec128_t* %XMM0 to i8*
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 5
  store i64 %1335, i64* %PC
  %1336 = bitcast i8* %1333 to i64*
  %1337 = load i64, i64* %1336, align 1
  store i64 %1337, i64* %RDX, align 1, !tbaa !2428
  %1338 = load i64, i64* %RDX
  %1339 = load i64, i64* %RAX
  %1340 = load i64, i64* %PC
  %1341 = add i64 %1340, 3
  store i64 %1341, i64* %PC
  %1342 = xor i64 %1339, %1338
  store i64 %1342, i64* %RDX, align 8, !tbaa !2428
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1343, align 1, !tbaa !2432
  %1344 = trunc i64 %1342 to i32
  %1345 = and i32 %1344, 255
  %1346 = call i32 @llvm.ctpop.i32(i32 %1345) #17
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = xor i8 %1348, 1
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1349, i8* %1350, align 1, !tbaa !2446
  %1351 = icmp eq i64 %1342, 0
  %1352 = zext i1 %1351 to i8
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1352, i8* %1353, align 1, !tbaa !2448
  %1354 = lshr i64 %1342, 63
  %1355 = trunc i64 %1354 to i8
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1355, i8* %1356, align 1, !tbaa !2449
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1357, align 1, !tbaa !2450
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1358, align 1, !tbaa !2447
  %1359 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1360 = load i64, i64* %RDX
  %1361 = load i64, i64* %PC
  %1362 = add i64 %1361, 5
  store i64 %1362, i64* %PC
  %1363 = bitcast i8* %1359 to i64*
  store i64 %1360, i64* %1363, align 1, !tbaa !2428
  %1364 = getelementptr inbounds i8, i8* %1359, i64 8
  %1365 = bitcast i8* %1364 to i64*
  store i64 0, i64* %1365, align 1, !tbaa !2428
  %1366 = load i64, i64* %RBP
  %1367 = sub i64 %1366, 88
  %1368 = bitcast %union.vec128_t* %XMM0 to i8*
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 5
  store i64 %1370, i64* %PC
  %1371 = bitcast i8* %1368 to double*
  %1372 = load double, double* %1371, align 1
  %1373 = inttoptr i64 %1367 to double*
  store double %1372, double* %1373
  %1374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1375 = load i64, i64* %RBP
  %1376 = sub i64 %1375, 80
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 5
  store i64 %1378, i64* %PC
  %1379 = inttoptr i64 %1376 to double*
  %1380 = load double, double* %1379
  %1381 = bitcast i8* %1374 to double*
  store double %1380, double* %1381, align 1, !tbaa !2452
  %1382 = getelementptr inbounds i8, i8* %1374, i64 8
  %1383 = bitcast i8* %1382 to double*
  store double 0.000000e+00, double* %1383, align 1, !tbaa !2452
  %1384 = load i64, i64* %RBP
  %1385 = sub i64 %1384, 24
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 4
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to i64*
  %1389 = load i64, i64* %1388
  store i64 %1389, i64* %RDX, align 8, !tbaa !2428
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 32
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 4
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1391 to i32*
  %1395 = load i32, i32* %1394
  %1396 = sext i32 %1395 to i64
  store i64 %1396, i64* %RSI, align 8, !tbaa !2428
  %1397 = load i64, i64* %RDX
  %1398 = load i64, i64* %RSI
  %1399 = mul i64 %1398, 8
  %1400 = add i64 %1399, %1397
  %1401 = bitcast %union.vec128_t* %XMM0 to i8*
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 5
  store i64 %1403, i64* %PC
  %1404 = bitcast i8* %1401 to double*
  %1405 = load double, double* %1404, align 1
  %1406 = inttoptr i64 %1400 to double*
  store double %1405, double* %1406
  %1407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 88
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 5
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to double*
  %1413 = load double, double* %1412
  %1414 = bitcast i8* %1407 to double*
  store double %1413, double* %1414, align 1, !tbaa !2452
  %1415 = getelementptr inbounds i8, i8* %1407, i64 8
  %1416 = bitcast i8* %1415 to double*
  store double 0.000000e+00, double* %1416, align 1, !tbaa !2452
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 24
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 4
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i64*
  %1422 = load i64, i64* %1421
  store i64 %1422, i64* %RDX, align 8, !tbaa !2428
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 32
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 3
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i32*
  %1428 = load i32, i32* %1427
  %1429 = zext i32 %1428 to i64
  store i64 %1429, i64* %RCX, align 8, !tbaa !2428
  %1430 = load i64, i64* %RCX
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 3
  store i64 %1432, i64* %PC
  %1433 = trunc i64 %1430 to i32
  %1434 = add i32 1, %1433
  %1435 = zext i32 %1434 to i64
  store i64 %1435, i64* %RCX, align 8, !tbaa !2428
  %1436 = icmp ult i32 %1434, %1433
  %1437 = icmp ult i32 %1434, 1
  %1438 = or i1 %1436, %1437
  %1439 = zext i1 %1438 to i8
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1439, i8* %1440, align 1, !tbaa !2432
  %1441 = and i32 %1434, 255
  %1442 = call i32 @llvm.ctpop.i32(i32 %1441) #17
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1445, i8* %1446, align 1, !tbaa !2446
  %1447 = xor i64 1, %1430
  %1448 = trunc i64 %1447 to i32
  %1449 = xor i32 %1448, %1434
  %1450 = lshr i32 %1449, 4
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1452, i8* %1453, align 1, !tbaa !2447
  %1454 = icmp eq i32 %1434, 0
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1455, i8* %1456, align 1, !tbaa !2448
  %1457 = lshr i32 %1434, 31
  %1458 = trunc i32 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1458, i8* %1459, align 1, !tbaa !2449
  %1460 = lshr i32 %1433, 31
  %1461 = xor i32 %1457, %1460
  %1462 = add nuw nsw i32 %1461, %1457
  %1463 = icmp eq i32 %1462, 2
  %1464 = zext i1 %1463 to i8
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1464, i8* %1465, align 1, !tbaa !2450
  %1466 = load i32, i32* %ECX
  %1467 = zext i32 %1466 to i64
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 3
  store i64 %1469, i64* %PC
  %1470 = shl i64 %1467, 32
  %1471 = ashr exact i64 %1470, 32
  store i64 %1471, i64* %RSI, align 8, !tbaa !2428
  %1472 = load i64, i64* %RDX
  %1473 = load i64, i64* %RSI
  %1474 = mul i64 %1473, 8
  %1475 = add i64 %1474, %1472
  %1476 = bitcast %union.vec128_t* %XMM0 to i8*
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 5
  store i64 %1478, i64* %PC
  %1479 = bitcast i8* %1476 to double*
  %1480 = load double, double* %1479, align 1
  %1481 = inttoptr i64 %1475 to double*
  store double %1480, double* %1481
  %1482 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1483 = load i64, i64* %RBP
  %1484 = sub i64 %1483, 64
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 5
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1484 to double*
  %1488 = load double, double* %1487
  %1489 = bitcast i8* %1482 to double*
  store double %1488, double* %1489, align 1, !tbaa !2452
  %1490 = getelementptr inbounds i8, i8* %1482, i64 8
  %1491 = bitcast i8* %1490 to double*
  store double 0.000000e+00, double* %1491, align 1, !tbaa !2452
  %1492 = load i64, i64* %RBP
  %1493 = sub i64 %1492, 24
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 4
  store i64 %1495, i64* %PC
  %1496 = inttoptr i64 %1493 to i64*
  %1497 = load i64, i64* %1496
  store i64 %1497, i64* %RDX, align 8, !tbaa !2428
  %1498 = load i64, i64* %RBP
  %1499 = sub i64 %1498, 40
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 4
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1499 to i32*
  %1503 = load i32, i32* %1502
  %1504 = sext i32 %1503 to i64
  store i64 %1504, i64* %RSI, align 8, !tbaa !2428
  %1505 = load i64, i64* %RDX
  %1506 = load i64, i64* %RSI
  %1507 = mul i64 %1506, 8
  %1508 = add i64 %1507, %1505
  %1509 = bitcast %union.vec128_t* %XMM0 to i8*
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  store i64 %1511, i64* %PC
  %1512 = bitcast i8* %1509 to double*
  %1513 = load double, double* %1512, align 1
  %1514 = inttoptr i64 %1508 to double*
  store double %1513, double* %1514
  %1515 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1516 = load i64, i64* %RBP
  %1517 = sub i64 %1516, 72
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 5
  store i64 %1519, i64* %PC
  %1520 = inttoptr i64 %1517 to double*
  %1521 = load double, double* %1520
  %1522 = bitcast i8* %1515 to double*
  store double %1521, double* %1522, align 1, !tbaa !2452
  %1523 = getelementptr inbounds i8, i8* %1515, i64 8
  %1524 = bitcast i8* %1523 to double*
  store double 0.000000e+00, double* %1524, align 1, !tbaa !2452
  %1525 = load i64, i64* %RBP
  %1526 = sub i64 %1525, 24
  %1527 = load i64, i64* %PC
  %1528 = add i64 %1527, 4
  store i64 %1528, i64* %PC
  %1529 = inttoptr i64 %1526 to i64*
  %1530 = load i64, i64* %1529
  store i64 %1530, i64* %RDX, align 8, !tbaa !2428
  %1531 = load i64, i64* %RBP
  %1532 = sub i64 %1531, 40
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 3
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i32*
  %1536 = load i32, i32* %1535
  %1537 = zext i32 %1536 to i64
  store i64 %1537, i64* %RCX, align 8, !tbaa !2428
  %1538 = load i64, i64* %RCX
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 3
  store i64 %1540, i64* %PC
  %1541 = trunc i64 %1538 to i32
  %1542 = add i32 1, %1541
  %1543 = zext i32 %1542 to i64
  store i64 %1543, i64* %RCX, align 8, !tbaa !2428
  %1544 = icmp ult i32 %1542, %1541
  %1545 = icmp ult i32 %1542, 1
  %1546 = or i1 %1544, %1545
  %1547 = zext i1 %1546 to i8
  %1548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1547, i8* %1548, align 1, !tbaa !2432
  %1549 = and i32 %1542, 255
  %1550 = call i32 @llvm.ctpop.i32(i32 %1549) #17
  %1551 = trunc i32 %1550 to i8
  %1552 = and i8 %1551, 1
  %1553 = xor i8 %1552, 1
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1553, i8* %1554, align 1, !tbaa !2446
  %1555 = xor i64 1, %1538
  %1556 = trunc i64 %1555 to i32
  %1557 = xor i32 %1556, %1542
  %1558 = lshr i32 %1557, 4
  %1559 = trunc i32 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1560, i8* %1561, align 1, !tbaa !2447
  %1562 = icmp eq i32 %1542, 0
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1563, i8* %1564, align 1, !tbaa !2448
  %1565 = lshr i32 %1542, 31
  %1566 = trunc i32 %1565 to i8
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1566, i8* %1567, align 1, !tbaa !2449
  %1568 = lshr i32 %1541, 31
  %1569 = xor i32 %1565, %1568
  %1570 = add nuw nsw i32 %1569, %1565
  %1571 = icmp eq i32 %1570, 2
  %1572 = zext i1 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1572, i8* %1573, align 1, !tbaa !2450
  %1574 = load i32, i32* %ECX
  %1575 = zext i32 %1574 to i64
  %1576 = load i64, i64* %PC
  %1577 = add i64 %1576, 3
  store i64 %1577, i64* %PC
  %1578 = shl i64 %1575, 32
  %1579 = ashr exact i64 %1578, 32
  store i64 %1579, i64* %RSI, align 8, !tbaa !2428
  %1580 = load i64, i64* %RDX
  %1581 = load i64, i64* %RSI
  %1582 = mul i64 %1581, 8
  %1583 = add i64 %1582, %1580
  %1584 = bitcast %union.vec128_t* %XMM0 to i8*
  %1585 = load i64, i64* %PC
  %1586 = add i64 %1585, 5
  store i64 %1586, i64* %PC
  %1587 = bitcast i8* %1584 to double*
  %1588 = load double, double* %1587, align 1
  %1589 = inttoptr i64 %1583 to double*
  store double %1588, double* %1589
  %1590 = load i64, i64* %RBP
  %1591 = sub i64 %1590, 52
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 3
  store i64 %1593, i64* %PC
  %1594 = inttoptr i64 %1591 to i32*
  %1595 = load i32, i32* %1594
  %1596 = zext i32 %1595 to i64
  store i64 %1596, i64* %RCX, align 8, !tbaa !2428
  %1597 = load i64, i64* %RCX
  %1598 = load i64, i64* %RBP
  %1599 = sub i64 %1598, 32
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 3
  store i64 %1601, i64* %PC
  %1602 = trunc i64 %1597 to i32
  %1603 = inttoptr i64 %1599 to i32*
  %1604 = load i32, i32* %1603
  %1605 = add i32 %1604, %1602
  %1606 = zext i32 %1605 to i64
  store i64 %1606, i64* %RCX, align 8, !tbaa !2428
  %1607 = icmp ult i32 %1605, %1602
  %1608 = icmp ult i32 %1605, %1604
  %1609 = or i1 %1607, %1608
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1610, i8* %1611, align 1, !tbaa !2432
  %1612 = and i32 %1605, 255
  %1613 = call i32 @llvm.ctpop.i32(i32 %1612) #17
  %1614 = trunc i32 %1613 to i8
  %1615 = and i8 %1614, 1
  %1616 = xor i8 %1615, 1
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1616, i8* %1617, align 1, !tbaa !2446
  %1618 = xor i32 %1604, %1602
  %1619 = xor i32 %1618, %1605
  %1620 = lshr i32 %1619, 4
  %1621 = trunc i32 %1620 to i8
  %1622 = and i8 %1621, 1
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1622, i8* %1623, align 1, !tbaa !2447
  %1624 = icmp eq i32 %1605, 0
  %1625 = zext i1 %1624 to i8
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1625, i8* %1626, align 1, !tbaa !2448
  %1627 = lshr i32 %1605, 31
  %1628 = trunc i32 %1627 to i8
  %1629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1628, i8* %1629, align 1, !tbaa !2449
  %1630 = lshr i32 %1602, 31
  %1631 = lshr i32 %1604, 31
  %1632 = xor i32 %1627, %1630
  %1633 = xor i32 %1627, %1631
  %1634 = add nuw nsw i32 %1632, %1633
  %1635 = icmp eq i32 %1634, 2
  %1636 = zext i1 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1636, i8* %1637, align 1, !tbaa !2450
  %1638 = load i64, i64* %RBP
  %1639 = sub i64 %1638, 32
  %1640 = load i32, i32* %ECX
  %1641 = zext i32 %1640 to i64
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 3
  store i64 %1643, i64* %PC
  %1644 = inttoptr i64 %1639 to i32*
  store i32 %1640, i32* %1644
  %1645 = load i64, i64* %RBP
  %1646 = sub i64 %1645, 52
  %1647 = load i64, i64* %PC
  %1648 = add i64 %1647, 3
  store i64 %1648, i64* %PC
  %1649 = inttoptr i64 %1646 to i32*
  %1650 = load i32, i32* %1649
  %1651 = zext i32 %1650 to i64
  store i64 %1651, i64* %RCX, align 8, !tbaa !2428
  %1652 = load i64, i64* %RCX
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 3
  store i64 %1654, i64* %PC
  %1655 = trunc i64 %1652 to i32
  %1656 = shl i32 %1655, 1
  %1657 = icmp slt i32 %1655, 0
  %1658 = icmp slt i32 %1656, 0
  %1659 = xor i1 %1657, %1658
  %1660 = zext i32 %1656 to i64
  store i64 %1660, i64* %RCX, align 8, !tbaa !2428
  %1661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1662 = zext i1 %1657 to i8
  store i8 %1662, i8* %1661, align 1, !tbaa !2451
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1664 = and i32 %1656, 254
  %1665 = call i32 @llvm.ctpop.i32(i32 %1664) #17
  %1666 = trunc i32 %1665 to i8
  %1667 = and i8 %1666, 1
  %1668 = xor i8 %1667, 1
  store i8 %1668, i8* %1663, align 1, !tbaa !2451
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1669, align 1, !tbaa !2451
  %1670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1671 = icmp eq i32 %1656, 0
  %1672 = zext i1 %1671 to i8
  store i8 %1672, i8* %1670, align 1, !tbaa !2451
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1674 = lshr i32 %1656, 31
  %1675 = trunc i32 %1674 to i8
  store i8 %1675, i8* %1673, align 1, !tbaa !2451
  %1676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1677 = zext i1 %1659 to i8
  store i8 %1677, i8* %1676, align 1, !tbaa !2451
  %1678 = load i64, i64* %RCX
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 40
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 3
  store i64 %1682, i64* %PC
  %1683 = trunc i64 %1678 to i32
  %1684 = inttoptr i64 %1680 to i32*
  %1685 = load i32, i32* %1684
  %1686 = add i32 %1685, %1683
  %1687 = zext i32 %1686 to i64
  store i64 %1687, i64* %RCX, align 8, !tbaa !2428
  %1688 = icmp ult i32 %1686, %1683
  %1689 = icmp ult i32 %1686, %1685
  %1690 = or i1 %1688, %1689
  %1691 = zext i1 %1690 to i8
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1691, i8* %1692, align 1, !tbaa !2432
  %1693 = and i32 %1686, 255
  %1694 = call i32 @llvm.ctpop.i32(i32 %1693) #17
  %1695 = trunc i32 %1694 to i8
  %1696 = and i8 %1695, 1
  %1697 = xor i8 %1696, 1
  %1698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1697, i8* %1698, align 1, !tbaa !2446
  %1699 = xor i32 %1685, %1683
  %1700 = xor i32 %1699, %1686
  %1701 = lshr i32 %1700, 4
  %1702 = trunc i32 %1701 to i8
  %1703 = and i8 %1702, 1
  %1704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1703, i8* %1704, align 1, !tbaa !2447
  %1705 = icmp eq i32 %1686, 0
  %1706 = zext i1 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1706, i8* %1707, align 1, !tbaa !2448
  %1708 = lshr i32 %1686, 31
  %1709 = trunc i32 %1708 to i8
  %1710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1709, i8* %1710, align 1, !tbaa !2449
  %1711 = lshr i32 %1683, 31
  %1712 = lshr i32 %1685, 31
  %1713 = xor i32 %1708, %1711
  %1714 = xor i32 %1708, %1712
  %1715 = add nuw nsw i32 %1713, %1714
  %1716 = icmp eq i32 %1715, 2
  %1717 = zext i1 %1716 to i8
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1717, i8* %1718, align 1, !tbaa !2450
  %1719 = load i64, i64* %RBP
  %1720 = sub i64 %1719, 40
  %1721 = load i32, i32* %ECX
  %1722 = zext i32 %1721 to i64
  %1723 = load i64, i64* %PC
  %1724 = add i64 %1723, 3
  store i64 %1724, i64* %PC
  %1725 = inttoptr i64 %1720 to i32*
  store i32 %1721, i32* %1725
  %1726 = load i64, i64* %RBP
  %1727 = sub i64 %1726, 24
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 4
  store i64 %1729, i64* %PC
  %1730 = inttoptr i64 %1727 to i64*
  %1731 = load i64, i64* %1730
  store i64 %1731, i64* %RDX, align 8, !tbaa !2428
  %1732 = load i64, i64* %RBP
  %1733 = sub i64 %1732, 32
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 4
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1733 to i32*
  %1737 = load i32, i32* %1736
  %1738 = sext i32 %1737 to i64
  store i64 %1738, i64* %RSI, align 8, !tbaa !2428
  %1739 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1740 = load i64, i64* %RDX
  %1741 = load i64, i64* %RSI
  %1742 = mul i64 %1741, 8
  %1743 = add i64 %1742, %1740
  %1744 = load i64, i64* %PC
  %1745 = add i64 %1744, 5
  store i64 %1745, i64* %PC
  %1746 = inttoptr i64 %1743 to double*
  %1747 = load double, double* %1746
  %1748 = bitcast i8* %1739 to double*
  store double %1747, double* %1748, align 1, !tbaa !2452
  %1749 = getelementptr inbounds i8, i8* %1739, i64 8
  %1750 = bitcast i8* %1749 to double*
  store double 0.000000e+00, double* %1750, align 1, !tbaa !2452
  %1751 = load i64, i64* %RBP
  %1752 = sub i64 %1751, 64
  %1753 = bitcast %union.vec128_t* %XMM0 to i8*
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 5
  store i64 %1755, i64* %PC
  %1756 = bitcast i8* %1753 to double*
  %1757 = load double, double* %1756, align 1
  %1758 = inttoptr i64 %1752 to double*
  store double %1757, double* %1758
  %1759 = load i64, i64* %RBP
  %1760 = sub i64 %1759, 24
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1760 to i64*
  %1764 = load i64, i64* %1763
  store i64 %1764, i64* %RDX, align 8, !tbaa !2428
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 32
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 3
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to i32*
  %1770 = load i32, i32* %1769
  %1771 = zext i32 %1770 to i64
  store i64 %1771, i64* %RCX, align 8, !tbaa !2428
  %1772 = load i64, i64* %RCX
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 3
  store i64 %1774, i64* %PC
  %1775 = trunc i64 %1772 to i32
  %1776 = add i32 1, %1775
  %1777 = zext i32 %1776 to i64
  store i64 %1777, i64* %RCX, align 8, !tbaa !2428
  %1778 = icmp ult i32 %1776, %1775
  %1779 = icmp ult i32 %1776, 1
  %1780 = or i1 %1778, %1779
  %1781 = zext i1 %1780 to i8
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1781, i8* %1782, align 1, !tbaa !2432
  %1783 = and i32 %1776, 255
  %1784 = call i32 @llvm.ctpop.i32(i32 %1783) #17
  %1785 = trunc i32 %1784 to i8
  %1786 = and i8 %1785, 1
  %1787 = xor i8 %1786, 1
  %1788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1787, i8* %1788, align 1, !tbaa !2446
  %1789 = xor i64 1, %1772
  %1790 = trunc i64 %1789 to i32
  %1791 = xor i32 %1790, %1776
  %1792 = lshr i32 %1791, 4
  %1793 = trunc i32 %1792 to i8
  %1794 = and i8 %1793, 1
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1794, i8* %1795, align 1, !tbaa !2447
  %1796 = icmp eq i32 %1776, 0
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1797, i8* %1798, align 1, !tbaa !2448
  %1799 = lshr i32 %1776, 31
  %1800 = trunc i32 %1799 to i8
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1800, i8* %1801, align 1, !tbaa !2449
  %1802 = lshr i32 %1775, 31
  %1803 = xor i32 %1799, %1802
  %1804 = add nuw nsw i32 %1803, %1799
  %1805 = icmp eq i32 %1804, 2
  %1806 = zext i1 %1805 to i8
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1806, i8* %1807, align 1, !tbaa !2450
  %1808 = load i32, i32* %ECX
  %1809 = zext i32 %1808 to i64
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 3
  store i64 %1811, i64* %PC
  %1812 = shl i64 %1809, 32
  %1813 = ashr exact i64 %1812, 32
  store i64 %1813, i64* %RSI, align 8, !tbaa !2428
  %1814 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1815 = load i64, i64* %RDX
  %1816 = load i64, i64* %RSI
  %1817 = mul i64 %1816, 8
  %1818 = add i64 %1817, %1815
  %1819 = load i64, i64* %PC
  %1820 = add i64 %1819, 5
  store i64 %1820, i64* %PC
  %1821 = inttoptr i64 %1818 to double*
  %1822 = load double, double* %1821
  %1823 = bitcast i8* %1814 to double*
  store double %1822, double* %1823, align 1, !tbaa !2452
  %1824 = getelementptr inbounds i8, i8* %1814, i64 8
  %1825 = bitcast i8* %1824 to double*
  store double 0.000000e+00, double* %1825, align 1, !tbaa !2452
  %1826 = bitcast %union.vec128_t* %XMM0 to i8*
  %1827 = load i64, i64* %PC
  %1828 = add i64 %1827, 5
  store i64 %1828, i64* %PC
  %1829 = bitcast i8* %1826 to i64*
  %1830 = load i64, i64* %1829, align 1
  store i64 %1830, i64* %RDX, align 1, !tbaa !2428
  %1831 = load i64, i64* %RDX
  %1832 = load i64, i64* %RAX
  %1833 = load i64, i64* %PC
  %1834 = add i64 %1833, 3
  store i64 %1834, i64* %PC
  %1835 = xor i64 %1832, %1831
  store i64 %1835, i64* %RDX, align 8, !tbaa !2428
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1836, align 1, !tbaa !2432
  %1837 = trunc i64 %1835 to i32
  %1838 = and i32 %1837, 255
  %1839 = call i32 @llvm.ctpop.i32(i32 %1838) #17
  %1840 = trunc i32 %1839 to i8
  %1841 = and i8 %1840, 1
  %1842 = xor i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1842, i8* %1843, align 1, !tbaa !2446
  %1844 = icmp eq i64 %1835, 0
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1845, i8* %1846, align 1, !tbaa !2448
  %1847 = lshr i64 %1835, 63
  %1848 = trunc i64 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1848, i8* %1849, align 1, !tbaa !2449
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1850, align 1, !tbaa !2450
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1851, align 1, !tbaa !2447
  %1852 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1853 = load i64, i64* %RDX
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 5
  store i64 %1855, i64* %PC
  %1856 = bitcast i8* %1852 to i64*
  store i64 %1853, i64* %1856, align 1, !tbaa !2428
  %1857 = getelementptr inbounds i8, i8* %1852, i64 8
  %1858 = bitcast i8* %1857 to i64*
  store i64 0, i64* %1858, align 1, !tbaa !2428
  %1859 = load i64, i64* %RBP
  %1860 = sub i64 %1859, 72
  %1861 = bitcast %union.vec128_t* %XMM0 to i8*
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 5
  store i64 %1863, i64* %PC
  %1864 = bitcast i8* %1861 to double*
  %1865 = load double, double* %1864, align 1
  %1866 = inttoptr i64 %1860 to double*
  store double %1865, double* %1866
  %1867 = load i64, i64* %RBP
  %1868 = sub i64 %1867, 24
  %1869 = load i64, i64* %PC
  %1870 = add i64 %1869, 4
  store i64 %1870, i64* %PC
  %1871 = inttoptr i64 %1868 to i64*
  %1872 = load i64, i64* %1871
  store i64 %1872, i64* %RDX, align 8, !tbaa !2428
  %1873 = load i64, i64* %RBP
  %1874 = sub i64 %1873, 40
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 4
  store i64 %1876, i64* %PC
  %1877 = inttoptr i64 %1874 to i32*
  %1878 = load i32, i32* %1877
  %1879 = sext i32 %1878 to i64
  store i64 %1879, i64* %RSI, align 8, !tbaa !2428
  %1880 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1881 = load i64, i64* %RDX
  %1882 = load i64, i64* %RSI
  %1883 = mul i64 %1882, 8
  %1884 = add i64 %1883, %1881
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 5
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1884 to double*
  %1888 = load double, double* %1887
  %1889 = bitcast i8* %1880 to double*
  store double %1888, double* %1889, align 1, !tbaa !2452
  %1890 = getelementptr inbounds i8, i8* %1880, i64 8
  %1891 = bitcast i8* %1890 to double*
  store double 0.000000e+00, double* %1891, align 1, !tbaa !2452
  %1892 = load i64, i64* %RBP
  %1893 = sub i64 %1892, 80
  %1894 = bitcast %union.vec128_t* %XMM0 to i8*
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 5
  store i64 %1896, i64* %PC
  %1897 = bitcast i8* %1894 to double*
  %1898 = load double, double* %1897, align 1
  %1899 = inttoptr i64 %1893 to double*
  store double %1898, double* %1899
  %1900 = load i64, i64* %RBP
  %1901 = sub i64 %1900, 24
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 4
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %1901 to i64*
  %1905 = load i64, i64* %1904
  store i64 %1905, i64* %RDX, align 8, !tbaa !2428
  %1906 = load i64, i64* %RBP
  %1907 = sub i64 %1906, 40
  %1908 = load i64, i64* %PC
  %1909 = add i64 %1908, 3
  store i64 %1909, i64* %PC
  %1910 = inttoptr i64 %1907 to i32*
  %1911 = load i32, i32* %1910
  %1912 = zext i32 %1911 to i64
  store i64 %1912, i64* %RCX, align 8, !tbaa !2428
  %1913 = load i64, i64* %RCX
  %1914 = load i64, i64* %PC
  %1915 = add i64 %1914, 3
  store i64 %1915, i64* %PC
  %1916 = trunc i64 %1913 to i32
  %1917 = add i32 1, %1916
  %1918 = zext i32 %1917 to i64
  store i64 %1918, i64* %RCX, align 8, !tbaa !2428
  %1919 = icmp ult i32 %1917, %1916
  %1920 = icmp ult i32 %1917, 1
  %1921 = or i1 %1919, %1920
  %1922 = zext i1 %1921 to i8
  %1923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1922, i8* %1923, align 1, !tbaa !2432
  %1924 = and i32 %1917, 255
  %1925 = call i32 @llvm.ctpop.i32(i32 %1924) #17
  %1926 = trunc i32 %1925 to i8
  %1927 = and i8 %1926, 1
  %1928 = xor i8 %1927, 1
  %1929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1928, i8* %1929, align 1, !tbaa !2446
  %1930 = xor i64 1, %1913
  %1931 = trunc i64 %1930 to i32
  %1932 = xor i32 %1931, %1917
  %1933 = lshr i32 %1932, 4
  %1934 = trunc i32 %1933 to i8
  %1935 = and i8 %1934, 1
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1935, i8* %1936, align 1, !tbaa !2447
  %1937 = icmp eq i32 %1917, 0
  %1938 = zext i1 %1937 to i8
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1938, i8* %1939, align 1, !tbaa !2448
  %1940 = lshr i32 %1917, 31
  %1941 = trunc i32 %1940 to i8
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1941, i8* %1942, align 1, !tbaa !2449
  %1943 = lshr i32 %1916, 31
  %1944 = xor i32 %1940, %1943
  %1945 = add nuw nsw i32 %1944, %1940
  %1946 = icmp eq i32 %1945, 2
  %1947 = zext i1 %1946 to i8
  %1948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1947, i8* %1948, align 1, !tbaa !2450
  %1949 = load i32, i32* %ECX
  %1950 = zext i32 %1949 to i64
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 3
  store i64 %1952, i64* %PC
  %1953 = shl i64 %1950, 32
  %1954 = ashr exact i64 %1953, 32
  store i64 %1954, i64* %RSI, align 8, !tbaa !2428
  %1955 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1956 = load i64, i64* %RDX
  %1957 = load i64, i64* %RSI
  %1958 = mul i64 %1957, 8
  %1959 = add i64 %1958, %1956
  %1960 = load i64, i64* %PC
  %1961 = add i64 %1960, 5
  store i64 %1961, i64* %PC
  %1962 = inttoptr i64 %1959 to double*
  %1963 = load double, double* %1962
  %1964 = bitcast i8* %1955 to double*
  store double %1963, double* %1964, align 1, !tbaa !2452
  %1965 = getelementptr inbounds i8, i8* %1955, i64 8
  %1966 = bitcast i8* %1965 to double*
  store double 0.000000e+00, double* %1966, align 1, !tbaa !2452
  %1967 = bitcast %union.vec128_t* %XMM0 to i8*
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 5
  store i64 %1969, i64* %PC
  %1970 = bitcast i8* %1967 to i64*
  %1971 = load i64, i64* %1970, align 1
  store i64 %1971, i64* %RDX, align 1, !tbaa !2428
  %1972 = load i64, i64* %RDX
  %1973 = load i64, i64* %RAX
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 3
  store i64 %1975, i64* %PC
  %1976 = xor i64 %1973, %1972
  store i64 %1976, i64* %RDX, align 8, !tbaa !2428
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1977, align 1, !tbaa !2432
  %1978 = trunc i64 %1976 to i32
  %1979 = and i32 %1978, 255
  %1980 = call i32 @llvm.ctpop.i32(i32 %1979) #17
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  %1984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1983, i8* %1984, align 1, !tbaa !2446
  %1985 = icmp eq i64 %1976, 0
  %1986 = zext i1 %1985 to i8
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1986, i8* %1987, align 1, !tbaa !2448
  %1988 = lshr i64 %1976, 63
  %1989 = trunc i64 %1988 to i8
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1989, i8* %1990, align 1, !tbaa !2449
  %1991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1991, align 1, !tbaa !2450
  %1992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1992, align 1, !tbaa !2447
  %1993 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1994 = load i64, i64* %RDX
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 5
  store i64 %1996, i64* %PC
  %1997 = bitcast i8* %1993 to i64*
  store i64 %1994, i64* %1997, align 1, !tbaa !2428
  %1998 = getelementptr inbounds i8, i8* %1993, i64 8
  %1999 = bitcast i8* %1998 to i64*
  store i64 0, i64* %1999, align 1, !tbaa !2428
  %2000 = load i64, i64* %RBP
  %2001 = sub i64 %2000, 88
  %2002 = bitcast %union.vec128_t* %XMM0 to i8*
  %2003 = load i64, i64* %PC
  %2004 = add i64 %2003, 5
  store i64 %2004, i64* %PC
  %2005 = bitcast i8* %2002 to double*
  %2006 = load double, double* %2005, align 1
  %2007 = inttoptr i64 %2001 to double*
  store double %2006, double* %2007
  %2008 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2009 = load i64, i64* %RBP
  %2010 = sub i64 %2009, 80
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 5
  store i64 %2012, i64* %PC
  %2013 = inttoptr i64 %2010 to double*
  %2014 = load double, double* %2013
  %2015 = bitcast i8* %2008 to double*
  store double %2014, double* %2015, align 1, !tbaa !2452
  %2016 = getelementptr inbounds i8, i8* %2008, i64 8
  %2017 = bitcast i8* %2016 to double*
  store double 0.000000e+00, double* %2017, align 1, !tbaa !2452
  %2018 = load i64, i64* %RBP
  %2019 = sub i64 %2018, 24
  %2020 = load i64, i64* %PC
  %2021 = add i64 %2020, 4
  store i64 %2021, i64* %PC
  %2022 = inttoptr i64 %2019 to i64*
  %2023 = load i64, i64* %2022
  store i64 %2023, i64* %RDX, align 8, !tbaa !2428
  %2024 = load i64, i64* %RBP
  %2025 = sub i64 %2024, 32
  %2026 = load i64, i64* %PC
  %2027 = add i64 %2026, 4
  store i64 %2027, i64* %PC
  %2028 = inttoptr i64 %2025 to i32*
  %2029 = load i32, i32* %2028
  %2030 = sext i32 %2029 to i64
  store i64 %2030, i64* %RSI, align 8, !tbaa !2428
  %2031 = load i64, i64* %RDX
  %2032 = load i64, i64* %RSI
  %2033 = mul i64 %2032, 8
  %2034 = add i64 %2033, %2031
  %2035 = bitcast %union.vec128_t* %XMM0 to i8*
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 5
  store i64 %2037, i64* %PC
  %2038 = bitcast i8* %2035 to double*
  %2039 = load double, double* %2038, align 1
  %2040 = inttoptr i64 %2034 to double*
  store double %2039, double* %2040
  %2041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2042 = load i64, i64* %RBP
  %2043 = sub i64 %2042, 88
  %2044 = load i64, i64* %PC
  %2045 = add i64 %2044, 5
  store i64 %2045, i64* %PC
  %2046 = inttoptr i64 %2043 to double*
  %2047 = load double, double* %2046
  %2048 = bitcast i8* %2041 to double*
  store double %2047, double* %2048, align 1, !tbaa !2452
  %2049 = getelementptr inbounds i8, i8* %2041, i64 8
  %2050 = bitcast i8* %2049 to double*
  store double 0.000000e+00, double* %2050, align 1, !tbaa !2452
  %2051 = load i64, i64* %RBP
  %2052 = sub i64 %2051, 24
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 4
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2052 to i64*
  %2056 = load i64, i64* %2055
  store i64 %2056, i64* %RDX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RBP
  %2058 = sub i64 %2057, 32
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 3
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i32*
  %2062 = load i32, i32* %2061
  %2063 = zext i32 %2062 to i64
  store i64 %2063, i64* %RCX, align 8, !tbaa !2428
  %2064 = load i64, i64* %RCX
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 3
  store i64 %2066, i64* %PC
  %2067 = trunc i64 %2064 to i32
  %2068 = add i32 1, %2067
  %2069 = zext i32 %2068 to i64
  store i64 %2069, i64* %RCX, align 8, !tbaa !2428
  %2070 = icmp ult i32 %2068, %2067
  %2071 = icmp ult i32 %2068, 1
  %2072 = or i1 %2070, %2071
  %2073 = zext i1 %2072 to i8
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2073, i8* %2074, align 1, !tbaa !2432
  %2075 = and i32 %2068, 255
  %2076 = call i32 @llvm.ctpop.i32(i32 %2075) #17
  %2077 = trunc i32 %2076 to i8
  %2078 = and i8 %2077, 1
  %2079 = xor i8 %2078, 1
  %2080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2079, i8* %2080, align 1, !tbaa !2446
  %2081 = xor i64 1, %2064
  %2082 = trunc i64 %2081 to i32
  %2083 = xor i32 %2082, %2068
  %2084 = lshr i32 %2083, 4
  %2085 = trunc i32 %2084 to i8
  %2086 = and i8 %2085, 1
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2086, i8* %2087, align 1, !tbaa !2447
  %2088 = icmp eq i32 %2068, 0
  %2089 = zext i1 %2088 to i8
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2089, i8* %2090, align 1, !tbaa !2448
  %2091 = lshr i32 %2068, 31
  %2092 = trunc i32 %2091 to i8
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2092, i8* %2093, align 1, !tbaa !2449
  %2094 = lshr i32 %2067, 31
  %2095 = xor i32 %2091, %2094
  %2096 = add nuw nsw i32 %2095, %2091
  %2097 = icmp eq i32 %2096, 2
  %2098 = zext i1 %2097 to i8
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2098, i8* %2099, align 1, !tbaa !2450
  %2100 = load i32, i32* %ECX
  %2101 = zext i32 %2100 to i64
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 3
  store i64 %2103, i64* %PC
  %2104 = shl i64 %2101, 32
  %2105 = ashr exact i64 %2104, 32
  store i64 %2105, i64* %RSI, align 8, !tbaa !2428
  %2106 = load i64, i64* %RDX
  %2107 = load i64, i64* %RSI
  %2108 = mul i64 %2107, 8
  %2109 = add i64 %2108, %2106
  %2110 = bitcast %union.vec128_t* %XMM0 to i8*
  %2111 = load i64, i64* %PC
  %2112 = add i64 %2111, 5
  store i64 %2112, i64* %PC
  %2113 = bitcast i8* %2110 to double*
  %2114 = load double, double* %2113, align 1
  %2115 = inttoptr i64 %2109 to double*
  store double %2114, double* %2115
  %2116 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2117 = load i64, i64* %RBP
  %2118 = sub i64 %2117, 64
  %2119 = load i64, i64* %PC
  %2120 = add i64 %2119, 5
  store i64 %2120, i64* %PC
  %2121 = inttoptr i64 %2118 to double*
  %2122 = load double, double* %2121
  %2123 = bitcast i8* %2116 to double*
  store double %2122, double* %2123, align 1, !tbaa !2452
  %2124 = getelementptr inbounds i8, i8* %2116, i64 8
  %2125 = bitcast i8* %2124 to double*
  store double 0.000000e+00, double* %2125, align 1, !tbaa !2452
  %2126 = load i64, i64* %RBP
  %2127 = sub i64 %2126, 24
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 4
  store i64 %2129, i64* %PC
  %2130 = inttoptr i64 %2127 to i64*
  %2131 = load i64, i64* %2130
  store i64 %2131, i64* %RDX, align 8, !tbaa !2428
  %2132 = load i64, i64* %RBP
  %2133 = sub i64 %2132, 40
  %2134 = load i64, i64* %PC
  %2135 = add i64 %2134, 4
  store i64 %2135, i64* %PC
  %2136 = inttoptr i64 %2133 to i32*
  %2137 = load i32, i32* %2136
  %2138 = sext i32 %2137 to i64
  store i64 %2138, i64* %RSI, align 8, !tbaa !2428
  %2139 = load i64, i64* %RDX
  %2140 = load i64, i64* %RSI
  %2141 = mul i64 %2140, 8
  %2142 = add i64 %2141, %2139
  %2143 = bitcast %union.vec128_t* %XMM0 to i8*
  %2144 = load i64, i64* %PC
  %2145 = add i64 %2144, 5
  store i64 %2145, i64* %PC
  %2146 = bitcast i8* %2143 to double*
  %2147 = load double, double* %2146, align 1
  %2148 = inttoptr i64 %2142 to double*
  store double %2147, double* %2148
  %2149 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2150 = load i64, i64* %RBP
  %2151 = sub i64 %2150, 72
  %2152 = load i64, i64* %PC
  %2153 = add i64 %2152, 5
  store i64 %2153, i64* %PC
  %2154 = inttoptr i64 %2151 to double*
  %2155 = load double, double* %2154
  %2156 = bitcast i8* %2149 to double*
  store double %2155, double* %2156, align 1, !tbaa !2452
  %2157 = getelementptr inbounds i8, i8* %2149, i64 8
  %2158 = bitcast i8* %2157 to double*
  store double 0.000000e+00, double* %2158, align 1, !tbaa !2452
  %2159 = load i64, i64* %RBP
  %2160 = sub i64 %2159, 24
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 4
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2160 to i64*
  %2164 = load i64, i64* %2163
  store i64 %2164, i64* %RDX, align 8, !tbaa !2428
  %2165 = load i64, i64* %RBP
  %2166 = sub i64 %2165, 40
  %2167 = load i64, i64* %PC
  %2168 = add i64 %2167, 3
  store i64 %2168, i64* %PC
  %2169 = inttoptr i64 %2166 to i32*
  %2170 = load i32, i32* %2169
  %2171 = zext i32 %2170 to i64
  store i64 %2171, i64* %RCX, align 8, !tbaa !2428
  %2172 = load i64, i64* %RCX
  %2173 = load i64, i64* %PC
  %2174 = add i64 %2173, 3
  store i64 %2174, i64* %PC
  %2175 = trunc i64 %2172 to i32
  %2176 = add i32 1, %2175
  %2177 = zext i32 %2176 to i64
  store i64 %2177, i64* %RCX, align 8, !tbaa !2428
  %2178 = icmp ult i32 %2176, %2175
  %2179 = icmp ult i32 %2176, 1
  %2180 = or i1 %2178, %2179
  %2181 = zext i1 %2180 to i8
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2181, i8* %2182, align 1, !tbaa !2432
  %2183 = and i32 %2176, 255
  %2184 = call i32 @llvm.ctpop.i32(i32 %2183) #17
  %2185 = trunc i32 %2184 to i8
  %2186 = and i8 %2185, 1
  %2187 = xor i8 %2186, 1
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2187, i8* %2188, align 1, !tbaa !2446
  %2189 = xor i64 1, %2172
  %2190 = trunc i64 %2189 to i32
  %2191 = xor i32 %2190, %2176
  %2192 = lshr i32 %2191, 4
  %2193 = trunc i32 %2192 to i8
  %2194 = and i8 %2193, 1
  %2195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2194, i8* %2195, align 1, !tbaa !2447
  %2196 = icmp eq i32 %2176, 0
  %2197 = zext i1 %2196 to i8
  %2198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2197, i8* %2198, align 1, !tbaa !2448
  %2199 = lshr i32 %2176, 31
  %2200 = trunc i32 %2199 to i8
  %2201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2200, i8* %2201, align 1, !tbaa !2449
  %2202 = lshr i32 %2175, 31
  %2203 = xor i32 %2199, %2202
  %2204 = add nuw nsw i32 %2203, %2199
  %2205 = icmp eq i32 %2204, 2
  %2206 = zext i1 %2205 to i8
  %2207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2206, i8* %2207, align 1, !tbaa !2450
  %2208 = load i32, i32* %ECX
  %2209 = zext i32 %2208 to i64
  %2210 = load i64, i64* %PC
  %2211 = add i64 %2210, 3
  store i64 %2211, i64* %PC
  %2212 = shl i64 %2209, 32
  %2213 = ashr exact i64 %2212, 32
  store i64 %2213, i64* %RSI, align 8, !tbaa !2428
  %2214 = load i64, i64* %RDX
  %2215 = load i64, i64* %RSI
  %2216 = mul i64 %2215, 8
  %2217 = add i64 %2216, %2214
  %2218 = bitcast %union.vec128_t* %XMM0 to i8*
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 5
  store i64 %2220, i64* %PC
  %2221 = bitcast i8* %2218 to double*
  %2222 = load double, double* %2221, align 1
  %2223 = inttoptr i64 %2217 to double*
  store double %2222, double* %2223
  %2224 = load i64, i64* %RBP
  %2225 = sub i64 %2224, 52
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 3
  store i64 %2227, i64* %PC
  %2228 = inttoptr i64 %2225 to i32*
  %2229 = load i32, i32* %2228
  %2230 = zext i32 %2229 to i64
  store i64 %2230, i64* %RCX, align 8, !tbaa !2428
  %2231 = load i64, i64* %RCX
  %2232 = load i64, i64* %RBP
  %2233 = sub i64 %2232, 32
  %2234 = load i64, i64* %PC
  %2235 = add i64 %2234, 3
  store i64 %2235, i64* %PC
  %2236 = trunc i64 %2231 to i32
  %2237 = inttoptr i64 %2233 to i32*
  %2238 = load i32, i32* %2237
  %2239 = add i32 %2238, %2236
  %2240 = zext i32 %2239 to i64
  store i64 %2240, i64* %RCX, align 8, !tbaa !2428
  %2241 = icmp ult i32 %2239, %2236
  %2242 = icmp ult i32 %2239, %2238
  %2243 = or i1 %2241, %2242
  %2244 = zext i1 %2243 to i8
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2244, i8* %2245, align 1, !tbaa !2432
  %2246 = and i32 %2239, 255
  %2247 = call i32 @llvm.ctpop.i32(i32 %2246) #17
  %2248 = trunc i32 %2247 to i8
  %2249 = and i8 %2248, 1
  %2250 = xor i8 %2249, 1
  %2251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2250, i8* %2251, align 1, !tbaa !2446
  %2252 = xor i32 %2238, %2236
  %2253 = xor i32 %2252, %2239
  %2254 = lshr i32 %2253, 4
  %2255 = trunc i32 %2254 to i8
  %2256 = and i8 %2255, 1
  %2257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2256, i8* %2257, align 1, !tbaa !2447
  %2258 = icmp eq i32 %2239, 0
  %2259 = zext i1 %2258 to i8
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2259, i8* %2260, align 1, !tbaa !2448
  %2261 = lshr i32 %2239, 31
  %2262 = trunc i32 %2261 to i8
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2262, i8* %2263, align 1, !tbaa !2449
  %2264 = lshr i32 %2236, 31
  %2265 = lshr i32 %2238, 31
  %2266 = xor i32 %2261, %2264
  %2267 = xor i32 %2261, %2265
  %2268 = add nuw nsw i32 %2266, %2267
  %2269 = icmp eq i32 %2268, 2
  %2270 = zext i1 %2269 to i8
  %2271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2270, i8* %2271, align 1, !tbaa !2450
  %2272 = load i64, i64* %RBP
  %2273 = sub i64 %2272, 32
  %2274 = load i32, i32* %ECX
  %2275 = zext i32 %2274 to i64
  %2276 = load i64, i64* %PC
  %2277 = add i64 %2276, 3
  store i64 %2277, i64* %PC
  %2278 = inttoptr i64 %2273 to i32*
  store i32 %2274, i32* %2278
  %2279 = load i64, i64* %RBP
  %2280 = sub i64 %2279, 52
  %2281 = load i64, i64* %PC
  %2282 = add i64 %2281, 3
  store i64 %2282, i64* %PC
  %2283 = inttoptr i64 %2280 to i32*
  %2284 = load i32, i32* %2283
  %2285 = zext i32 %2284 to i64
  store i64 %2285, i64* %RCX, align 8, !tbaa !2428
  %2286 = load i64, i64* %RBP
  %2287 = sub i64 %2286, 40
  %2288 = load i64, i64* %PC
  %2289 = add i64 %2288, 3
  store i64 %2289, i64* %PC
  %2290 = inttoptr i64 %2287 to i32*
  %2291 = load i32, i32* %2290
  %2292 = zext i32 %2291 to i64
  store i64 %2292, i64* %RDI, align 8, !tbaa !2428
  %2293 = load i64, i64* %RDI
  %2294 = load i32, i32* %ECX
  %2295 = zext i32 %2294 to i64
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 2
  store i64 %2297, i64* %PC
  %2298 = trunc i64 %2293 to i32
  %2299 = sub i32 %2298, %2294
  %2300 = zext i32 %2299 to i64
  store i64 %2300, i64* %RDI, align 8, !tbaa !2428
  %2301 = icmp ult i32 %2298, %2294
  %2302 = zext i1 %2301 to i8
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2302, i8* %2303, align 1, !tbaa !2432
  %2304 = and i32 %2299, 255
  %2305 = call i32 @llvm.ctpop.i32(i32 %2304) #17
  %2306 = trunc i32 %2305 to i8
  %2307 = and i8 %2306, 1
  %2308 = xor i8 %2307, 1
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2308, i8* %2309, align 1, !tbaa !2446
  %2310 = xor i64 %2295, %2293
  %2311 = trunc i64 %2310 to i32
  %2312 = xor i32 %2311, %2299
  %2313 = lshr i32 %2312, 4
  %2314 = trunc i32 %2313 to i8
  %2315 = and i8 %2314, 1
  %2316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2315, i8* %2316, align 1, !tbaa !2447
  %2317 = icmp eq i32 %2299, 0
  %2318 = zext i1 %2317 to i8
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2318, i8* %2319, align 1, !tbaa !2448
  %2320 = lshr i32 %2299, 31
  %2321 = trunc i32 %2320 to i8
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2321, i8* %2322, align 1, !tbaa !2449
  %2323 = lshr i32 %2298, 31
  %2324 = lshr i32 %2294, 31
  %2325 = xor i32 %2324, %2323
  %2326 = xor i32 %2320, %2323
  %2327 = add nuw nsw i32 %2326, %2325
  %2328 = icmp eq i32 %2327, 2
  %2329 = zext i1 %2328 to i8
  %2330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2329, i8* %2330, align 1, !tbaa !2450
  %2331 = load i64, i64* %RBP
  %2332 = sub i64 %2331, 40
  %2333 = load i32, i32* %EDI
  %2334 = zext i32 %2333 to i64
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 3
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2332 to i32*
  store i32 %2333, i32* %2337
  %2338 = load i64, i64* %RBP
  %2339 = sub i64 %2338, 24
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 4
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RDX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 32
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 4
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i32*
  %2349 = load i32, i32* %2348
  %2350 = sext i32 %2349 to i64
  store i64 %2350, i64* %RSI, align 8, !tbaa !2428
  %2351 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2352 = load i64, i64* %RDX
  %2353 = load i64, i64* %RSI
  %2354 = mul i64 %2353, 8
  %2355 = add i64 %2354, %2352
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 5
  store i64 %2357, i64* %PC
  %2358 = inttoptr i64 %2355 to double*
  %2359 = load double, double* %2358
  %2360 = bitcast i8* %2351 to double*
  store double %2359, double* %2360, align 1, !tbaa !2452
  %2361 = getelementptr inbounds i8, i8* %2351, i64 8
  %2362 = bitcast i8* %2361 to double*
  store double 0.000000e+00, double* %2362, align 1, !tbaa !2452
  %2363 = load i64, i64* %RBP
  %2364 = sub i64 %2363, 64
  %2365 = bitcast %union.vec128_t* %XMM0 to i8*
  %2366 = load i64, i64* %PC
  %2367 = add i64 %2366, 5
  store i64 %2367, i64* %PC
  %2368 = bitcast i8* %2365 to double*
  %2369 = load double, double* %2368, align 1
  %2370 = inttoptr i64 %2364 to double*
  store double %2369, double* %2370
  %2371 = load i64, i64* %RBP
  %2372 = sub i64 %2371, 24
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 4
  store i64 %2374, i64* %PC
  %2375 = inttoptr i64 %2372 to i64*
  %2376 = load i64, i64* %2375
  store i64 %2376, i64* %RDX, align 8, !tbaa !2428
  %2377 = load i64, i64* %RBP
  %2378 = sub i64 %2377, 32
  %2379 = load i64, i64* %PC
  %2380 = add i64 %2379, 3
  store i64 %2380, i64* %PC
  %2381 = inttoptr i64 %2378 to i32*
  %2382 = load i32, i32* %2381
  %2383 = zext i32 %2382 to i64
  store i64 %2383, i64* %RCX, align 8, !tbaa !2428
  %2384 = load i64, i64* %RCX
  %2385 = load i64, i64* %PC
  %2386 = add i64 %2385, 3
  store i64 %2386, i64* %PC
  %2387 = trunc i64 %2384 to i32
  %2388 = add i32 1, %2387
  %2389 = zext i32 %2388 to i64
  store i64 %2389, i64* %RCX, align 8, !tbaa !2428
  %2390 = icmp ult i32 %2388, %2387
  %2391 = icmp ult i32 %2388, 1
  %2392 = or i1 %2390, %2391
  %2393 = zext i1 %2392 to i8
  %2394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2393, i8* %2394, align 1, !tbaa !2432
  %2395 = and i32 %2388, 255
  %2396 = call i32 @llvm.ctpop.i32(i32 %2395) #17
  %2397 = trunc i32 %2396 to i8
  %2398 = and i8 %2397, 1
  %2399 = xor i8 %2398, 1
  %2400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2399, i8* %2400, align 1, !tbaa !2446
  %2401 = xor i64 1, %2384
  %2402 = trunc i64 %2401 to i32
  %2403 = xor i32 %2402, %2388
  %2404 = lshr i32 %2403, 4
  %2405 = trunc i32 %2404 to i8
  %2406 = and i8 %2405, 1
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2406, i8* %2407, align 1, !tbaa !2447
  %2408 = icmp eq i32 %2388, 0
  %2409 = zext i1 %2408 to i8
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2409, i8* %2410, align 1, !tbaa !2448
  %2411 = lshr i32 %2388, 31
  %2412 = trunc i32 %2411 to i8
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2412, i8* %2413, align 1, !tbaa !2449
  %2414 = lshr i32 %2387, 31
  %2415 = xor i32 %2411, %2414
  %2416 = add nuw nsw i32 %2415, %2411
  %2417 = icmp eq i32 %2416, 2
  %2418 = zext i1 %2417 to i8
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2418, i8* %2419, align 1, !tbaa !2450
  %2420 = load i32, i32* %ECX
  %2421 = zext i32 %2420 to i64
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 3
  store i64 %2423, i64* %PC
  %2424 = shl i64 %2421, 32
  %2425 = ashr exact i64 %2424, 32
  store i64 %2425, i64* %RSI, align 8, !tbaa !2428
  %2426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2427 = load i64, i64* %RDX
  %2428 = load i64, i64* %RSI
  %2429 = mul i64 %2428, 8
  %2430 = add i64 %2429, %2427
  %2431 = load i64, i64* %PC
  %2432 = add i64 %2431, 5
  store i64 %2432, i64* %PC
  %2433 = inttoptr i64 %2430 to double*
  %2434 = load double, double* %2433
  %2435 = bitcast i8* %2426 to double*
  store double %2434, double* %2435, align 1, !tbaa !2452
  %2436 = getelementptr inbounds i8, i8* %2426, i64 8
  %2437 = bitcast i8* %2436 to double*
  store double 0.000000e+00, double* %2437, align 1, !tbaa !2452
  %2438 = bitcast %union.vec128_t* %XMM0 to i8*
  %2439 = load i64, i64* %PC
  %2440 = add i64 %2439, 5
  store i64 %2440, i64* %PC
  %2441 = bitcast i8* %2438 to i64*
  %2442 = load i64, i64* %2441, align 1
  store i64 %2442, i64* %RDX, align 1, !tbaa !2428
  %2443 = load i64, i64* %RDX
  %2444 = load i64, i64* %RAX
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 3
  store i64 %2446, i64* %PC
  %2447 = xor i64 %2444, %2443
  store i64 %2447, i64* %RDX, align 8, !tbaa !2428
  %2448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2448, align 1, !tbaa !2432
  %2449 = trunc i64 %2447 to i32
  %2450 = and i32 %2449, 255
  %2451 = call i32 @llvm.ctpop.i32(i32 %2450) #17
  %2452 = trunc i32 %2451 to i8
  %2453 = and i8 %2452, 1
  %2454 = xor i8 %2453, 1
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2454, i8* %2455, align 1, !tbaa !2446
  %2456 = icmp eq i64 %2447, 0
  %2457 = zext i1 %2456 to i8
  %2458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2457, i8* %2458, align 1, !tbaa !2448
  %2459 = lshr i64 %2447, 63
  %2460 = trunc i64 %2459 to i8
  %2461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2460, i8* %2461, align 1, !tbaa !2449
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2462, align 1, !tbaa !2450
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2463, align 1, !tbaa !2447
  %2464 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2465 = load i64, i64* %RDX
  %2466 = load i64, i64* %PC
  %2467 = add i64 %2466, 5
  store i64 %2467, i64* %PC
  %2468 = bitcast i8* %2464 to i64*
  store i64 %2465, i64* %2468, align 1, !tbaa !2428
  %2469 = getelementptr inbounds i8, i8* %2464, i64 8
  %2470 = bitcast i8* %2469 to i64*
  store i64 0, i64* %2470, align 1, !tbaa !2428
  %2471 = load i64, i64* %RBP
  %2472 = sub i64 %2471, 72
  %2473 = bitcast %union.vec128_t* %XMM0 to i8*
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 5
  store i64 %2475, i64* %PC
  %2476 = bitcast i8* %2473 to double*
  %2477 = load double, double* %2476, align 1
  %2478 = inttoptr i64 %2472 to double*
  store double %2477, double* %2478
  %2479 = load i64, i64* %RBP
  %2480 = sub i64 %2479, 24
  %2481 = load i64, i64* %PC
  %2482 = add i64 %2481, 4
  store i64 %2482, i64* %PC
  %2483 = inttoptr i64 %2480 to i64*
  %2484 = load i64, i64* %2483
  store i64 %2484, i64* %RDX, align 8, !tbaa !2428
  %2485 = load i64, i64* %RBP
  %2486 = sub i64 %2485, 40
  %2487 = load i64, i64* %PC
  %2488 = add i64 %2487, 4
  store i64 %2488, i64* %PC
  %2489 = inttoptr i64 %2486 to i32*
  %2490 = load i32, i32* %2489
  %2491 = sext i32 %2490 to i64
  store i64 %2491, i64* %RSI, align 8, !tbaa !2428
  %2492 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2493 = load i64, i64* %RDX
  %2494 = load i64, i64* %RSI
  %2495 = mul i64 %2494, 8
  %2496 = add i64 %2495, %2493
  %2497 = load i64, i64* %PC
  %2498 = add i64 %2497, 5
  store i64 %2498, i64* %PC
  %2499 = inttoptr i64 %2496 to double*
  %2500 = load double, double* %2499
  %2501 = bitcast i8* %2492 to double*
  store double %2500, double* %2501, align 1, !tbaa !2452
  %2502 = getelementptr inbounds i8, i8* %2492, i64 8
  %2503 = bitcast i8* %2502 to double*
  store double 0.000000e+00, double* %2503, align 1, !tbaa !2452
  %2504 = load i64, i64* %RBP
  %2505 = sub i64 %2504, 80
  %2506 = bitcast %union.vec128_t* %XMM0 to i8*
  %2507 = load i64, i64* %PC
  %2508 = add i64 %2507, 5
  store i64 %2508, i64* %PC
  %2509 = bitcast i8* %2506 to double*
  %2510 = load double, double* %2509, align 1
  %2511 = inttoptr i64 %2505 to double*
  store double %2510, double* %2511
  %2512 = load i64, i64* %RBP
  %2513 = sub i64 %2512, 24
  %2514 = load i64, i64* %PC
  %2515 = add i64 %2514, 4
  store i64 %2515, i64* %PC
  %2516 = inttoptr i64 %2513 to i64*
  %2517 = load i64, i64* %2516
  store i64 %2517, i64* %RDX, align 8, !tbaa !2428
  %2518 = load i64, i64* %RBP
  %2519 = sub i64 %2518, 40
  %2520 = load i64, i64* %PC
  %2521 = add i64 %2520, 3
  store i64 %2521, i64* %PC
  %2522 = inttoptr i64 %2519 to i32*
  %2523 = load i32, i32* %2522
  %2524 = zext i32 %2523 to i64
  store i64 %2524, i64* %RCX, align 8, !tbaa !2428
  %2525 = load i64, i64* %RCX
  %2526 = load i64, i64* %PC
  %2527 = add i64 %2526, 3
  store i64 %2527, i64* %PC
  %2528 = trunc i64 %2525 to i32
  %2529 = add i32 1, %2528
  %2530 = zext i32 %2529 to i64
  store i64 %2530, i64* %RCX, align 8, !tbaa !2428
  %2531 = icmp ult i32 %2529, %2528
  %2532 = icmp ult i32 %2529, 1
  %2533 = or i1 %2531, %2532
  %2534 = zext i1 %2533 to i8
  %2535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2534, i8* %2535, align 1, !tbaa !2432
  %2536 = and i32 %2529, 255
  %2537 = call i32 @llvm.ctpop.i32(i32 %2536) #17
  %2538 = trunc i32 %2537 to i8
  %2539 = and i8 %2538, 1
  %2540 = xor i8 %2539, 1
  %2541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2540, i8* %2541, align 1, !tbaa !2446
  %2542 = xor i64 1, %2525
  %2543 = trunc i64 %2542 to i32
  %2544 = xor i32 %2543, %2529
  %2545 = lshr i32 %2544, 4
  %2546 = trunc i32 %2545 to i8
  %2547 = and i8 %2546, 1
  %2548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2547, i8* %2548, align 1, !tbaa !2447
  %2549 = icmp eq i32 %2529, 0
  %2550 = zext i1 %2549 to i8
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2550, i8* %2551, align 1, !tbaa !2448
  %2552 = lshr i32 %2529, 31
  %2553 = trunc i32 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2553, i8* %2554, align 1, !tbaa !2449
  %2555 = lshr i32 %2528, 31
  %2556 = xor i32 %2552, %2555
  %2557 = add nuw nsw i32 %2556, %2552
  %2558 = icmp eq i32 %2557, 2
  %2559 = zext i1 %2558 to i8
  %2560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2559, i8* %2560, align 1, !tbaa !2450
  %2561 = load i32, i32* %ECX
  %2562 = zext i32 %2561 to i64
  %2563 = load i64, i64* %PC
  %2564 = add i64 %2563, 3
  store i64 %2564, i64* %PC
  %2565 = shl i64 %2562, 32
  %2566 = ashr exact i64 %2565, 32
  store i64 %2566, i64* %RSI, align 8, !tbaa !2428
  %2567 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2568 = load i64, i64* %RDX
  %2569 = load i64, i64* %RSI
  %2570 = mul i64 %2569, 8
  %2571 = add i64 %2570, %2568
  %2572 = load i64, i64* %PC
  %2573 = add i64 %2572, 5
  store i64 %2573, i64* %PC
  %2574 = inttoptr i64 %2571 to double*
  %2575 = load double, double* %2574
  %2576 = bitcast i8* %2567 to double*
  store double %2575, double* %2576, align 1, !tbaa !2452
  %2577 = getelementptr inbounds i8, i8* %2567, i64 8
  %2578 = bitcast i8* %2577 to double*
  store double 0.000000e+00, double* %2578, align 1, !tbaa !2452
  %2579 = bitcast %union.vec128_t* %XMM0 to i8*
  %2580 = load i64, i64* %PC
  %2581 = add i64 %2580, 5
  store i64 %2581, i64* %PC
  %2582 = bitcast i8* %2579 to i64*
  %2583 = load i64, i64* %2582, align 1
  store i64 %2583, i64* %RDX, align 1, !tbaa !2428
  %2584 = load i64, i64* %RDX
  %2585 = load i64, i64* %RAX
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 3
  store i64 %2587, i64* %PC
  %2588 = xor i64 %2585, %2584
  store i64 %2588, i64* %RDX, align 8, !tbaa !2428
  %2589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2589, align 1, !tbaa !2432
  %2590 = trunc i64 %2588 to i32
  %2591 = and i32 %2590, 255
  %2592 = call i32 @llvm.ctpop.i32(i32 %2591) #17
  %2593 = trunc i32 %2592 to i8
  %2594 = and i8 %2593, 1
  %2595 = xor i8 %2594, 1
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2595, i8* %2596, align 1, !tbaa !2446
  %2597 = icmp eq i64 %2588, 0
  %2598 = zext i1 %2597 to i8
  %2599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2598, i8* %2599, align 1, !tbaa !2448
  %2600 = lshr i64 %2588, 63
  %2601 = trunc i64 %2600 to i8
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2601, i8* %2602, align 1, !tbaa !2449
  %2603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2603, align 1, !tbaa !2450
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2604, align 1, !tbaa !2447
  %2605 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2606 = load i64, i64* %RDX
  %2607 = load i64, i64* %PC
  %2608 = add i64 %2607, 5
  store i64 %2608, i64* %PC
  %2609 = bitcast i8* %2605 to i64*
  store i64 %2606, i64* %2609, align 1, !tbaa !2428
  %2610 = getelementptr inbounds i8, i8* %2605, i64 8
  %2611 = bitcast i8* %2610 to i64*
  store i64 0, i64* %2611, align 1, !tbaa !2428
  %2612 = load i64, i64* %RBP
  %2613 = sub i64 %2612, 88
  %2614 = bitcast %union.vec128_t* %XMM0 to i8*
  %2615 = load i64, i64* %PC
  %2616 = add i64 %2615, 5
  store i64 %2616, i64* %PC
  %2617 = bitcast i8* %2614 to double*
  %2618 = load double, double* %2617, align 1
  %2619 = inttoptr i64 %2613 to double*
  store double %2618, double* %2619
  %2620 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2621 = load i64, i64* %RBP
  %2622 = sub i64 %2621, 80
  %2623 = load i64, i64* %PC
  %2624 = add i64 %2623, 5
  store i64 %2624, i64* %PC
  %2625 = inttoptr i64 %2622 to double*
  %2626 = load double, double* %2625
  %2627 = bitcast i8* %2620 to double*
  store double %2626, double* %2627, align 1, !tbaa !2452
  %2628 = getelementptr inbounds i8, i8* %2620, i64 8
  %2629 = bitcast i8* %2628 to double*
  store double 0.000000e+00, double* %2629, align 1, !tbaa !2452
  %2630 = load i64, i64* %RBP
  %2631 = sub i64 %2630, 24
  %2632 = load i64, i64* %PC
  %2633 = add i64 %2632, 4
  store i64 %2633, i64* %PC
  %2634 = inttoptr i64 %2631 to i64*
  %2635 = load i64, i64* %2634
  store i64 %2635, i64* %RDX, align 8, !tbaa !2428
  %2636 = load i64, i64* %RBP
  %2637 = sub i64 %2636, 32
  %2638 = load i64, i64* %PC
  %2639 = add i64 %2638, 4
  store i64 %2639, i64* %PC
  %2640 = inttoptr i64 %2637 to i32*
  %2641 = load i32, i32* %2640
  %2642 = sext i32 %2641 to i64
  store i64 %2642, i64* %RSI, align 8, !tbaa !2428
  %2643 = load i64, i64* %RDX
  %2644 = load i64, i64* %RSI
  %2645 = mul i64 %2644, 8
  %2646 = add i64 %2645, %2643
  %2647 = bitcast %union.vec128_t* %XMM0 to i8*
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 5
  store i64 %2649, i64* %PC
  %2650 = bitcast i8* %2647 to double*
  %2651 = load double, double* %2650, align 1
  %2652 = inttoptr i64 %2646 to double*
  store double %2651, double* %2652
  %2653 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2654 = load i64, i64* %RBP
  %2655 = sub i64 %2654, 88
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 5
  store i64 %2657, i64* %PC
  %2658 = inttoptr i64 %2655 to double*
  %2659 = load double, double* %2658
  %2660 = bitcast i8* %2653 to double*
  store double %2659, double* %2660, align 1, !tbaa !2452
  %2661 = getelementptr inbounds i8, i8* %2653, i64 8
  %2662 = bitcast i8* %2661 to double*
  store double 0.000000e+00, double* %2662, align 1, !tbaa !2452
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 24
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 4
  store i64 %2666, i64* %PC
  %2667 = inttoptr i64 %2664 to i64*
  %2668 = load i64, i64* %2667
  store i64 %2668, i64* %RDX, align 8, !tbaa !2428
  %2669 = load i64, i64* %RBP
  %2670 = sub i64 %2669, 32
  %2671 = load i64, i64* %PC
  %2672 = add i64 %2671, 3
  store i64 %2672, i64* %PC
  %2673 = inttoptr i64 %2670 to i32*
  %2674 = load i32, i32* %2673
  %2675 = zext i32 %2674 to i64
  store i64 %2675, i64* %RCX, align 8, !tbaa !2428
  %2676 = load i64, i64* %RCX
  %2677 = load i64, i64* %PC
  %2678 = add i64 %2677, 3
  store i64 %2678, i64* %PC
  %2679 = trunc i64 %2676 to i32
  %2680 = add i32 1, %2679
  %2681 = zext i32 %2680 to i64
  store i64 %2681, i64* %RCX, align 8, !tbaa !2428
  %2682 = icmp ult i32 %2680, %2679
  %2683 = icmp ult i32 %2680, 1
  %2684 = or i1 %2682, %2683
  %2685 = zext i1 %2684 to i8
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2685, i8* %2686, align 1, !tbaa !2432
  %2687 = and i32 %2680, 255
  %2688 = call i32 @llvm.ctpop.i32(i32 %2687) #17
  %2689 = trunc i32 %2688 to i8
  %2690 = and i8 %2689, 1
  %2691 = xor i8 %2690, 1
  %2692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2691, i8* %2692, align 1, !tbaa !2446
  %2693 = xor i64 1, %2676
  %2694 = trunc i64 %2693 to i32
  %2695 = xor i32 %2694, %2680
  %2696 = lshr i32 %2695, 4
  %2697 = trunc i32 %2696 to i8
  %2698 = and i8 %2697, 1
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2698, i8* %2699, align 1, !tbaa !2447
  %2700 = icmp eq i32 %2680, 0
  %2701 = zext i1 %2700 to i8
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2701, i8* %2702, align 1, !tbaa !2448
  %2703 = lshr i32 %2680, 31
  %2704 = trunc i32 %2703 to i8
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2704, i8* %2705, align 1, !tbaa !2449
  %2706 = lshr i32 %2679, 31
  %2707 = xor i32 %2703, %2706
  %2708 = add nuw nsw i32 %2707, %2703
  %2709 = icmp eq i32 %2708, 2
  %2710 = zext i1 %2709 to i8
  %2711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2710, i8* %2711, align 1, !tbaa !2450
  %2712 = load i32, i32* %ECX
  %2713 = zext i32 %2712 to i64
  %2714 = load i64, i64* %PC
  %2715 = add i64 %2714, 3
  store i64 %2715, i64* %PC
  %2716 = shl i64 %2713, 32
  %2717 = ashr exact i64 %2716, 32
  store i64 %2717, i64* %RSI, align 8, !tbaa !2428
  %2718 = load i64, i64* %RDX
  %2719 = load i64, i64* %RSI
  %2720 = mul i64 %2719, 8
  %2721 = add i64 %2720, %2718
  %2722 = bitcast %union.vec128_t* %XMM0 to i8*
  %2723 = load i64, i64* %PC
  %2724 = add i64 %2723, 5
  store i64 %2724, i64* %PC
  %2725 = bitcast i8* %2722 to double*
  %2726 = load double, double* %2725, align 1
  %2727 = inttoptr i64 %2721 to double*
  store double %2726, double* %2727
  %2728 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2729 = load i64, i64* %RBP
  %2730 = sub i64 %2729, 64
  %2731 = load i64, i64* %PC
  %2732 = add i64 %2731, 5
  store i64 %2732, i64* %PC
  %2733 = inttoptr i64 %2730 to double*
  %2734 = load double, double* %2733
  %2735 = bitcast i8* %2728 to double*
  store double %2734, double* %2735, align 1, !tbaa !2452
  %2736 = getelementptr inbounds i8, i8* %2728, i64 8
  %2737 = bitcast i8* %2736 to double*
  store double 0.000000e+00, double* %2737, align 1, !tbaa !2452
  %2738 = load i64, i64* %RBP
  %2739 = sub i64 %2738, 24
  %2740 = load i64, i64* %PC
  %2741 = add i64 %2740, 4
  store i64 %2741, i64* %PC
  %2742 = inttoptr i64 %2739 to i64*
  %2743 = load i64, i64* %2742
  store i64 %2743, i64* %RDX, align 8, !tbaa !2428
  %2744 = load i64, i64* %RBP
  %2745 = sub i64 %2744, 40
  %2746 = load i64, i64* %PC
  %2747 = add i64 %2746, 4
  store i64 %2747, i64* %PC
  %2748 = inttoptr i64 %2745 to i32*
  %2749 = load i32, i32* %2748
  %2750 = sext i32 %2749 to i64
  store i64 %2750, i64* %RSI, align 8, !tbaa !2428
  %2751 = load i64, i64* %RDX
  %2752 = load i64, i64* %RSI
  %2753 = mul i64 %2752, 8
  %2754 = add i64 %2753, %2751
  %2755 = bitcast %union.vec128_t* %XMM0 to i8*
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 5
  store i64 %2757, i64* %PC
  %2758 = bitcast i8* %2755 to double*
  %2759 = load double, double* %2758, align 1
  %2760 = inttoptr i64 %2754 to double*
  store double %2759, double* %2760
  %2761 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2762 = load i64, i64* %RBP
  %2763 = sub i64 %2762, 72
  %2764 = load i64, i64* %PC
  %2765 = add i64 %2764, 5
  store i64 %2765, i64* %PC
  %2766 = inttoptr i64 %2763 to double*
  %2767 = load double, double* %2766
  %2768 = bitcast i8* %2761 to double*
  store double %2767, double* %2768, align 1, !tbaa !2452
  %2769 = getelementptr inbounds i8, i8* %2761, i64 8
  %2770 = bitcast i8* %2769 to double*
  store double 0.000000e+00, double* %2770, align 1, !tbaa !2452
  %2771 = load i64, i64* %RBP
  %2772 = sub i64 %2771, 24
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 4
  store i64 %2774, i64* %PC
  %2775 = inttoptr i64 %2772 to i64*
  %2776 = load i64, i64* %2775
  store i64 %2776, i64* %RDX, align 8, !tbaa !2428
  %2777 = load i64, i64* %RBP
  %2778 = sub i64 %2777, 40
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 3
  store i64 %2780, i64* %PC
  %2781 = inttoptr i64 %2778 to i32*
  %2782 = load i32, i32* %2781
  %2783 = zext i32 %2782 to i64
  store i64 %2783, i64* %RCX, align 8, !tbaa !2428
  %2784 = load i64, i64* %RCX
  %2785 = load i64, i64* %PC
  %2786 = add i64 %2785, 3
  store i64 %2786, i64* %PC
  %2787 = trunc i64 %2784 to i32
  %2788 = add i32 1, %2787
  %2789 = zext i32 %2788 to i64
  store i64 %2789, i64* %RCX, align 8, !tbaa !2428
  %2790 = icmp ult i32 %2788, %2787
  %2791 = icmp ult i32 %2788, 1
  %2792 = or i1 %2790, %2791
  %2793 = zext i1 %2792 to i8
  %2794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2793, i8* %2794, align 1, !tbaa !2432
  %2795 = and i32 %2788, 255
  %2796 = call i32 @llvm.ctpop.i32(i32 %2795) #17
  %2797 = trunc i32 %2796 to i8
  %2798 = and i8 %2797, 1
  %2799 = xor i8 %2798, 1
  %2800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2799, i8* %2800, align 1, !tbaa !2446
  %2801 = xor i64 1, %2784
  %2802 = trunc i64 %2801 to i32
  %2803 = xor i32 %2802, %2788
  %2804 = lshr i32 %2803, 4
  %2805 = trunc i32 %2804 to i8
  %2806 = and i8 %2805, 1
  %2807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2806, i8* %2807, align 1, !tbaa !2447
  %2808 = icmp eq i32 %2788, 0
  %2809 = zext i1 %2808 to i8
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2809, i8* %2810, align 1, !tbaa !2448
  %2811 = lshr i32 %2788, 31
  %2812 = trunc i32 %2811 to i8
  %2813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2812, i8* %2813, align 1, !tbaa !2449
  %2814 = lshr i32 %2787, 31
  %2815 = xor i32 %2811, %2814
  %2816 = add nuw nsw i32 %2815, %2811
  %2817 = icmp eq i32 %2816, 2
  %2818 = zext i1 %2817 to i8
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2818, i8* %2819, align 1, !tbaa !2450
  %2820 = load i32, i32* %ECX
  %2821 = zext i32 %2820 to i64
  %2822 = load i64, i64* %PC
  %2823 = add i64 %2822, 3
  store i64 %2823, i64* %PC
  %2824 = shl i64 %2821, 32
  %2825 = ashr exact i64 %2824, 32
  store i64 %2825, i64* %RSI, align 8, !tbaa !2428
  %2826 = load i64, i64* %RDX
  %2827 = load i64, i64* %RSI
  %2828 = mul i64 %2827, 8
  %2829 = add i64 %2828, %2826
  %2830 = bitcast %union.vec128_t* %XMM0 to i8*
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 5
  store i64 %2832, i64* %PC
  %2833 = bitcast i8* %2830 to double*
  %2834 = load double, double* %2833, align 1
  %2835 = inttoptr i64 %2829 to double*
  store double %2834, double* %2835
  %2836 = load i64, i64* %RBP
  %2837 = sub i64 %2836, 52
  %2838 = load i64, i64* %PC
  %2839 = add i64 %2838, 3
  store i64 %2839, i64* %PC
  %2840 = inttoptr i64 %2837 to i32*
  %2841 = load i32, i32* %2840
  %2842 = zext i32 %2841 to i64
  store i64 %2842, i64* %RCX, align 8, !tbaa !2428
  %2843 = load i64, i64* %RCX
  %2844 = load i64, i64* %RBP
  %2845 = sub i64 %2844, 32
  %2846 = load i64, i64* %PC
  %2847 = add i64 %2846, 3
  store i64 %2847, i64* %PC
  %2848 = trunc i64 %2843 to i32
  %2849 = inttoptr i64 %2845 to i32*
  %2850 = load i32, i32* %2849
  %2851 = add i32 %2850, %2848
  %2852 = zext i32 %2851 to i64
  store i64 %2852, i64* %RCX, align 8, !tbaa !2428
  %2853 = icmp ult i32 %2851, %2848
  %2854 = icmp ult i32 %2851, %2850
  %2855 = or i1 %2853, %2854
  %2856 = zext i1 %2855 to i8
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2856, i8* %2857, align 1, !tbaa !2432
  %2858 = and i32 %2851, 255
  %2859 = call i32 @llvm.ctpop.i32(i32 %2858) #17
  %2860 = trunc i32 %2859 to i8
  %2861 = and i8 %2860, 1
  %2862 = xor i8 %2861, 1
  %2863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2862, i8* %2863, align 1, !tbaa !2446
  %2864 = xor i32 %2850, %2848
  %2865 = xor i32 %2864, %2851
  %2866 = lshr i32 %2865, 4
  %2867 = trunc i32 %2866 to i8
  %2868 = and i8 %2867, 1
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2868, i8* %2869, align 1, !tbaa !2447
  %2870 = icmp eq i32 %2851, 0
  %2871 = zext i1 %2870 to i8
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2871, i8* %2872, align 1, !tbaa !2448
  %2873 = lshr i32 %2851, 31
  %2874 = trunc i32 %2873 to i8
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2874, i8* %2875, align 1, !tbaa !2449
  %2876 = lshr i32 %2848, 31
  %2877 = lshr i32 %2850, 31
  %2878 = xor i32 %2873, %2876
  %2879 = xor i32 %2873, %2877
  %2880 = add nuw nsw i32 %2878, %2879
  %2881 = icmp eq i32 %2880, 2
  %2882 = zext i1 %2881 to i8
  %2883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2882, i8* %2883, align 1, !tbaa !2450
  %2884 = load i64, i64* %RBP
  %2885 = sub i64 %2884, 32
  %2886 = load i32, i32* %ECX
  %2887 = zext i32 %2886 to i64
  %2888 = load i64, i64* %PC
  %2889 = add i64 %2888, 3
  store i64 %2889, i64* %PC
  %2890 = inttoptr i64 %2885 to i32*
  store i32 %2886, i32* %2890
  %2891 = load i64, i64* %RBP
  %2892 = sub i64 %2891, 52
  %2893 = load i64, i64* %PC
  %2894 = add i64 %2893, 3
  store i64 %2894, i64* %PC
  %2895 = inttoptr i64 %2892 to i32*
  %2896 = load i32, i32* %2895
  %2897 = zext i32 %2896 to i64
  store i64 %2897, i64* %RCX, align 8, !tbaa !2428
  %2898 = load i64, i64* %RCX
  %2899 = load i64, i64* %PC
  %2900 = add i64 %2899, 3
  store i64 %2900, i64* %PC
  %2901 = trunc i64 %2898 to i32
  %2902 = shl i32 %2901, 1
  %2903 = icmp slt i32 %2901, 0
  %2904 = icmp slt i32 %2902, 0
  %2905 = xor i1 %2903, %2904
  %2906 = zext i32 %2902 to i64
  store i64 %2906, i64* %RCX, align 8, !tbaa !2428
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2908 = zext i1 %2903 to i8
  store i8 %2908, i8* %2907, align 1, !tbaa !2451
  %2909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2910 = and i32 %2902, 254
  %2911 = call i32 @llvm.ctpop.i32(i32 %2910) #17
  %2912 = trunc i32 %2911 to i8
  %2913 = and i8 %2912, 1
  %2914 = xor i8 %2913, 1
  store i8 %2914, i8* %2909, align 1, !tbaa !2451
  %2915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2915, align 1, !tbaa !2451
  %2916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2917 = icmp eq i32 %2902, 0
  %2918 = zext i1 %2917 to i8
  store i8 %2918, i8* %2916, align 1, !tbaa !2451
  %2919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2920 = lshr i32 %2902, 31
  %2921 = trunc i32 %2920 to i8
  store i8 %2921, i8* %2919, align 1, !tbaa !2451
  %2922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2923 = zext i1 %2905 to i8
  store i8 %2923, i8* %2922, align 1, !tbaa !2451
  %2924 = load i64, i64* %RCX
  %2925 = load i64, i64* %RBP
  %2926 = sub i64 %2925, 40
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 3
  store i64 %2928, i64* %PC
  %2929 = trunc i64 %2924 to i32
  %2930 = inttoptr i64 %2926 to i32*
  %2931 = load i32, i32* %2930
  %2932 = add i32 %2931, %2929
  %2933 = zext i32 %2932 to i64
  store i64 %2933, i64* %RCX, align 8, !tbaa !2428
  %2934 = icmp ult i32 %2932, %2929
  %2935 = icmp ult i32 %2932, %2931
  %2936 = or i1 %2934, %2935
  %2937 = zext i1 %2936 to i8
  %2938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2937, i8* %2938, align 1, !tbaa !2432
  %2939 = and i32 %2932, 255
  %2940 = call i32 @llvm.ctpop.i32(i32 %2939) #17
  %2941 = trunc i32 %2940 to i8
  %2942 = and i8 %2941, 1
  %2943 = xor i8 %2942, 1
  %2944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2943, i8* %2944, align 1, !tbaa !2446
  %2945 = xor i32 %2931, %2929
  %2946 = xor i32 %2945, %2932
  %2947 = lshr i32 %2946, 4
  %2948 = trunc i32 %2947 to i8
  %2949 = and i8 %2948, 1
  %2950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2949, i8* %2950, align 1, !tbaa !2447
  %2951 = icmp eq i32 %2932, 0
  %2952 = zext i1 %2951 to i8
  %2953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2952, i8* %2953, align 1, !tbaa !2448
  %2954 = lshr i32 %2932, 31
  %2955 = trunc i32 %2954 to i8
  %2956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2955, i8* %2956, align 1, !tbaa !2449
  %2957 = lshr i32 %2929, 31
  %2958 = lshr i32 %2931, 31
  %2959 = xor i32 %2954, %2957
  %2960 = xor i32 %2954, %2958
  %2961 = add nuw nsw i32 %2959, %2960
  %2962 = icmp eq i32 %2961, 2
  %2963 = zext i1 %2962 to i8
  %2964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2963, i8* %2964, align 1, !tbaa !2450
  %2965 = load i64, i64* %RBP
  %2966 = sub i64 %2965, 40
  %2967 = load i32, i32* %ECX
  %2968 = zext i32 %2967 to i64
  %2969 = load i64, i64* %PC
  %2970 = add i64 %2969, 3
  store i64 %2970, i64* %PC
  %2971 = inttoptr i64 %2966 to i32*
  store i32 %2967, i32* %2971
  %2972 = load i64, i64* %RBP
  %2973 = sub i64 %2972, 24
  %2974 = load i64, i64* %PC
  %2975 = add i64 %2974, 4
  store i64 %2975, i64* %PC
  %2976 = inttoptr i64 %2973 to i64*
  %2977 = load i64, i64* %2976
  store i64 %2977, i64* %RDX, align 8, !tbaa !2428
  %2978 = load i64, i64* %RBP
  %2979 = sub i64 %2978, 32
  %2980 = load i64, i64* %PC
  %2981 = add i64 %2980, 4
  store i64 %2981, i64* %PC
  %2982 = inttoptr i64 %2979 to i32*
  %2983 = load i32, i32* %2982
  %2984 = sext i32 %2983 to i64
  store i64 %2984, i64* %RSI, align 8, !tbaa !2428
  %2985 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2986 = load i64, i64* %RDX
  %2987 = load i64, i64* %RSI
  %2988 = mul i64 %2987, 8
  %2989 = add i64 %2988, %2986
  %2990 = load i64, i64* %PC
  %2991 = add i64 %2990, 5
  store i64 %2991, i64* %PC
  %2992 = inttoptr i64 %2989 to double*
  %2993 = load double, double* %2992
  %2994 = bitcast i8* %2985 to double*
  store double %2993, double* %2994, align 1, !tbaa !2452
  %2995 = getelementptr inbounds i8, i8* %2985, i64 8
  %2996 = bitcast i8* %2995 to double*
  store double 0.000000e+00, double* %2996, align 1, !tbaa !2452
  %2997 = load i64, i64* %RBP
  %2998 = sub i64 %2997, 64
  %2999 = bitcast %union.vec128_t* %XMM0 to i8*
  %3000 = load i64, i64* %PC
  %3001 = add i64 %3000, 5
  store i64 %3001, i64* %PC
  %3002 = bitcast i8* %2999 to double*
  %3003 = load double, double* %3002, align 1
  %3004 = inttoptr i64 %2998 to double*
  store double %3003, double* %3004
  %3005 = load i64, i64* %RBP
  %3006 = sub i64 %3005, 24
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 4
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3006 to i64*
  %3010 = load i64, i64* %3009
  store i64 %3010, i64* %RDX, align 8, !tbaa !2428
  %3011 = load i64, i64* %RBP
  %3012 = sub i64 %3011, 32
  %3013 = load i64, i64* %PC
  %3014 = add i64 %3013, 3
  store i64 %3014, i64* %PC
  %3015 = inttoptr i64 %3012 to i32*
  %3016 = load i32, i32* %3015
  %3017 = zext i32 %3016 to i64
  store i64 %3017, i64* %RCX, align 8, !tbaa !2428
  %3018 = load i64, i64* %RCX
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 3
  store i64 %3020, i64* %PC
  %3021 = trunc i64 %3018 to i32
  %3022 = add i32 1, %3021
  %3023 = zext i32 %3022 to i64
  store i64 %3023, i64* %RCX, align 8, !tbaa !2428
  %3024 = icmp ult i32 %3022, %3021
  %3025 = icmp ult i32 %3022, 1
  %3026 = or i1 %3024, %3025
  %3027 = zext i1 %3026 to i8
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3027, i8* %3028, align 1, !tbaa !2432
  %3029 = and i32 %3022, 255
  %3030 = call i32 @llvm.ctpop.i32(i32 %3029) #17
  %3031 = trunc i32 %3030 to i8
  %3032 = and i8 %3031, 1
  %3033 = xor i8 %3032, 1
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3033, i8* %3034, align 1, !tbaa !2446
  %3035 = xor i64 1, %3018
  %3036 = trunc i64 %3035 to i32
  %3037 = xor i32 %3036, %3022
  %3038 = lshr i32 %3037, 4
  %3039 = trunc i32 %3038 to i8
  %3040 = and i8 %3039, 1
  %3041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3040, i8* %3041, align 1, !tbaa !2447
  %3042 = icmp eq i32 %3022, 0
  %3043 = zext i1 %3042 to i8
  %3044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3043, i8* %3044, align 1, !tbaa !2448
  %3045 = lshr i32 %3022, 31
  %3046 = trunc i32 %3045 to i8
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3046, i8* %3047, align 1, !tbaa !2449
  %3048 = lshr i32 %3021, 31
  %3049 = xor i32 %3045, %3048
  %3050 = add nuw nsw i32 %3049, %3045
  %3051 = icmp eq i32 %3050, 2
  %3052 = zext i1 %3051 to i8
  %3053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3052, i8* %3053, align 1, !tbaa !2450
  %3054 = load i32, i32* %ECX
  %3055 = zext i32 %3054 to i64
  %3056 = load i64, i64* %PC
  %3057 = add i64 %3056, 3
  store i64 %3057, i64* %PC
  %3058 = shl i64 %3055, 32
  %3059 = ashr exact i64 %3058, 32
  store i64 %3059, i64* %RSI, align 8, !tbaa !2428
  %3060 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3061 = load i64, i64* %RDX
  %3062 = load i64, i64* %RSI
  %3063 = mul i64 %3062, 8
  %3064 = add i64 %3063, %3061
  %3065 = load i64, i64* %PC
  %3066 = add i64 %3065, 5
  store i64 %3066, i64* %PC
  %3067 = inttoptr i64 %3064 to double*
  %3068 = load double, double* %3067
  %3069 = bitcast i8* %3060 to double*
  store double %3068, double* %3069, align 1, !tbaa !2452
  %3070 = getelementptr inbounds i8, i8* %3060, i64 8
  %3071 = bitcast i8* %3070 to double*
  store double 0.000000e+00, double* %3071, align 1, !tbaa !2452
  %3072 = bitcast %union.vec128_t* %XMM0 to i8*
  %3073 = load i64, i64* %PC
  %3074 = add i64 %3073, 5
  store i64 %3074, i64* %PC
  %3075 = bitcast i8* %3072 to i64*
  %3076 = load i64, i64* %3075, align 1
  store i64 %3076, i64* %RDX, align 1, !tbaa !2428
  %3077 = load i64, i64* %RDX
  %3078 = load i64, i64* %RAX
  %3079 = load i64, i64* %PC
  %3080 = add i64 %3079, 3
  store i64 %3080, i64* %PC
  %3081 = xor i64 %3078, %3077
  store i64 %3081, i64* %RDX, align 8, !tbaa !2428
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3082, align 1, !tbaa !2432
  %3083 = trunc i64 %3081 to i32
  %3084 = and i32 %3083, 255
  %3085 = call i32 @llvm.ctpop.i32(i32 %3084) #17
  %3086 = trunc i32 %3085 to i8
  %3087 = and i8 %3086, 1
  %3088 = xor i8 %3087, 1
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3088, i8* %3089, align 1, !tbaa !2446
  %3090 = icmp eq i64 %3081, 0
  %3091 = zext i1 %3090 to i8
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3091, i8* %3092, align 1, !tbaa !2448
  %3093 = lshr i64 %3081, 63
  %3094 = trunc i64 %3093 to i8
  %3095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3094, i8* %3095, align 1, !tbaa !2449
  %3096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3096, align 1, !tbaa !2450
  %3097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3097, align 1, !tbaa !2447
  %3098 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3099 = load i64, i64* %RDX
  %3100 = load i64, i64* %PC
  %3101 = add i64 %3100, 5
  store i64 %3101, i64* %PC
  %3102 = bitcast i8* %3098 to i64*
  store i64 %3099, i64* %3102, align 1, !tbaa !2428
  %3103 = getelementptr inbounds i8, i8* %3098, i64 8
  %3104 = bitcast i8* %3103 to i64*
  store i64 0, i64* %3104, align 1, !tbaa !2428
  %3105 = load i64, i64* %RBP
  %3106 = sub i64 %3105, 72
  %3107 = bitcast %union.vec128_t* %XMM0 to i8*
  %3108 = load i64, i64* %PC
  %3109 = add i64 %3108, 5
  store i64 %3109, i64* %PC
  %3110 = bitcast i8* %3107 to double*
  %3111 = load double, double* %3110, align 1
  %3112 = inttoptr i64 %3106 to double*
  store double %3111, double* %3112
  %3113 = load i64, i64* %RBP
  %3114 = sub i64 %3113, 24
  %3115 = load i64, i64* %PC
  %3116 = add i64 %3115, 4
  store i64 %3116, i64* %PC
  %3117 = inttoptr i64 %3114 to i64*
  %3118 = load i64, i64* %3117
  store i64 %3118, i64* %RDX, align 8, !tbaa !2428
  %3119 = load i64, i64* %RBP
  %3120 = sub i64 %3119, 40
  %3121 = load i64, i64* %PC
  %3122 = add i64 %3121, 4
  store i64 %3122, i64* %PC
  %3123 = inttoptr i64 %3120 to i32*
  %3124 = load i32, i32* %3123
  %3125 = sext i32 %3124 to i64
  store i64 %3125, i64* %RSI, align 8, !tbaa !2428
  %3126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3127 = load i64, i64* %RDX
  %3128 = load i64, i64* %RSI
  %3129 = mul i64 %3128, 8
  %3130 = add i64 %3129, %3127
  %3131 = load i64, i64* %PC
  %3132 = add i64 %3131, 5
  store i64 %3132, i64* %PC
  %3133 = inttoptr i64 %3130 to double*
  %3134 = load double, double* %3133
  %3135 = bitcast i8* %3126 to double*
  store double %3134, double* %3135, align 1, !tbaa !2452
  %3136 = getelementptr inbounds i8, i8* %3126, i64 8
  %3137 = bitcast i8* %3136 to double*
  store double 0.000000e+00, double* %3137, align 1, !tbaa !2452
  %3138 = load i64, i64* %RBP
  %3139 = sub i64 %3138, 80
  %3140 = bitcast %union.vec128_t* %XMM0 to i8*
  %3141 = load i64, i64* %PC
  %3142 = add i64 %3141, 5
  store i64 %3142, i64* %PC
  %3143 = bitcast i8* %3140 to double*
  %3144 = load double, double* %3143, align 1
  %3145 = inttoptr i64 %3139 to double*
  store double %3144, double* %3145
  %3146 = load i64, i64* %RBP
  %3147 = sub i64 %3146, 24
  %3148 = load i64, i64* %PC
  %3149 = add i64 %3148, 4
  store i64 %3149, i64* %PC
  %3150 = inttoptr i64 %3147 to i64*
  %3151 = load i64, i64* %3150
  store i64 %3151, i64* %RDX, align 8, !tbaa !2428
  %3152 = load i64, i64* %RBP
  %3153 = sub i64 %3152, 40
  %3154 = load i64, i64* %PC
  %3155 = add i64 %3154, 3
  store i64 %3155, i64* %PC
  %3156 = inttoptr i64 %3153 to i32*
  %3157 = load i32, i32* %3156
  %3158 = zext i32 %3157 to i64
  store i64 %3158, i64* %RCX, align 8, !tbaa !2428
  %3159 = load i64, i64* %RCX
  %3160 = load i64, i64* %PC
  %3161 = add i64 %3160, 3
  store i64 %3161, i64* %PC
  %3162 = trunc i64 %3159 to i32
  %3163 = add i32 1, %3162
  %3164 = zext i32 %3163 to i64
  store i64 %3164, i64* %RCX, align 8, !tbaa !2428
  %3165 = icmp ult i32 %3163, %3162
  %3166 = icmp ult i32 %3163, 1
  %3167 = or i1 %3165, %3166
  %3168 = zext i1 %3167 to i8
  %3169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3168, i8* %3169, align 1, !tbaa !2432
  %3170 = and i32 %3163, 255
  %3171 = call i32 @llvm.ctpop.i32(i32 %3170) #17
  %3172 = trunc i32 %3171 to i8
  %3173 = and i8 %3172, 1
  %3174 = xor i8 %3173, 1
  %3175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3174, i8* %3175, align 1, !tbaa !2446
  %3176 = xor i64 1, %3159
  %3177 = trunc i64 %3176 to i32
  %3178 = xor i32 %3177, %3163
  %3179 = lshr i32 %3178, 4
  %3180 = trunc i32 %3179 to i8
  %3181 = and i8 %3180, 1
  %3182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3181, i8* %3182, align 1, !tbaa !2447
  %3183 = icmp eq i32 %3163, 0
  %3184 = zext i1 %3183 to i8
  %3185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3184, i8* %3185, align 1, !tbaa !2448
  %3186 = lshr i32 %3163, 31
  %3187 = trunc i32 %3186 to i8
  %3188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3187, i8* %3188, align 1, !tbaa !2449
  %3189 = lshr i32 %3162, 31
  %3190 = xor i32 %3186, %3189
  %3191 = add nuw nsw i32 %3190, %3186
  %3192 = icmp eq i32 %3191, 2
  %3193 = zext i1 %3192 to i8
  %3194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3193, i8* %3194, align 1, !tbaa !2450
  %3195 = load i32, i32* %ECX
  %3196 = zext i32 %3195 to i64
  %3197 = load i64, i64* %PC
  %3198 = add i64 %3197, 3
  store i64 %3198, i64* %PC
  %3199 = shl i64 %3196, 32
  %3200 = ashr exact i64 %3199, 32
  store i64 %3200, i64* %RSI, align 8, !tbaa !2428
  %3201 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3202 = load i64, i64* %RDX
  %3203 = load i64, i64* %RSI
  %3204 = mul i64 %3203, 8
  %3205 = add i64 %3204, %3202
  %3206 = load i64, i64* %PC
  %3207 = add i64 %3206, 5
  store i64 %3207, i64* %PC
  %3208 = inttoptr i64 %3205 to double*
  %3209 = load double, double* %3208
  %3210 = bitcast i8* %3201 to double*
  store double %3209, double* %3210, align 1, !tbaa !2452
  %3211 = getelementptr inbounds i8, i8* %3201, i64 8
  %3212 = bitcast i8* %3211 to double*
  store double 0.000000e+00, double* %3212, align 1, !tbaa !2452
  %3213 = bitcast %union.vec128_t* %XMM0 to i8*
  %3214 = load i64, i64* %PC
  %3215 = add i64 %3214, 5
  store i64 %3215, i64* %PC
  %3216 = bitcast i8* %3213 to i64*
  %3217 = load i64, i64* %3216, align 1
  store i64 %3217, i64* %RDX, align 1, !tbaa !2428
  %3218 = load i64, i64* %RDX
  %3219 = load i64, i64* %RAX
  %3220 = load i64, i64* %PC
  %3221 = add i64 %3220, 3
  store i64 %3221, i64* %PC
  %3222 = xor i64 %3219, %3218
  store i64 %3222, i64* %RDX, align 8, !tbaa !2428
  %3223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3223, align 1, !tbaa !2432
  %3224 = trunc i64 %3222 to i32
  %3225 = and i32 %3224, 255
  %3226 = call i32 @llvm.ctpop.i32(i32 %3225) #17
  %3227 = trunc i32 %3226 to i8
  %3228 = and i8 %3227, 1
  %3229 = xor i8 %3228, 1
  %3230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3229, i8* %3230, align 1, !tbaa !2446
  %3231 = icmp eq i64 %3222, 0
  %3232 = zext i1 %3231 to i8
  %3233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3232, i8* %3233, align 1, !tbaa !2448
  %3234 = lshr i64 %3222, 63
  %3235 = trunc i64 %3234 to i8
  %3236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3235, i8* %3236, align 1, !tbaa !2449
  %3237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3237, align 1, !tbaa !2450
  %3238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3238, align 1, !tbaa !2447
  %3239 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3240 = load i64, i64* %RDX
  %3241 = load i64, i64* %PC
  %3242 = add i64 %3241, 5
  store i64 %3242, i64* %PC
  %3243 = bitcast i8* %3239 to i64*
  store i64 %3240, i64* %3243, align 1, !tbaa !2428
  %3244 = getelementptr inbounds i8, i8* %3239, i64 8
  %3245 = bitcast i8* %3244 to i64*
  store i64 0, i64* %3245, align 1, !tbaa !2428
  %3246 = load i64, i64* %RBP
  %3247 = sub i64 %3246, 88
  %3248 = bitcast %union.vec128_t* %XMM0 to i8*
  %3249 = load i64, i64* %PC
  %3250 = add i64 %3249, 5
  store i64 %3250, i64* %PC
  %3251 = bitcast i8* %3248 to double*
  %3252 = load double, double* %3251, align 1
  %3253 = inttoptr i64 %3247 to double*
  store double %3252, double* %3253
  %3254 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3255 = load i64, i64* %RBP
  %3256 = sub i64 %3255, 80
  %3257 = load i64, i64* %PC
  %3258 = add i64 %3257, 5
  store i64 %3258, i64* %PC
  %3259 = inttoptr i64 %3256 to double*
  %3260 = load double, double* %3259
  %3261 = bitcast i8* %3254 to double*
  store double %3260, double* %3261, align 1, !tbaa !2452
  %3262 = getelementptr inbounds i8, i8* %3254, i64 8
  %3263 = bitcast i8* %3262 to double*
  store double 0.000000e+00, double* %3263, align 1, !tbaa !2452
  %3264 = load i64, i64* %RBP
  %3265 = sub i64 %3264, 24
  %3266 = load i64, i64* %PC
  %3267 = add i64 %3266, 4
  store i64 %3267, i64* %PC
  %3268 = inttoptr i64 %3265 to i64*
  %3269 = load i64, i64* %3268
  store i64 %3269, i64* %RAX, align 8, !tbaa !2428
  %3270 = load i64, i64* %RBP
  %3271 = sub i64 %3270, 32
  %3272 = load i64, i64* %PC
  %3273 = add i64 %3272, 4
  store i64 %3273, i64* %PC
  %3274 = inttoptr i64 %3271 to i32*
  %3275 = load i32, i32* %3274
  %3276 = sext i32 %3275 to i64
  store i64 %3276, i64* %RDX, align 8, !tbaa !2428
  %3277 = load i64, i64* %RAX
  %3278 = load i64, i64* %RDX
  %3279 = mul i64 %3278, 8
  %3280 = add i64 %3279, %3277
  %3281 = bitcast %union.vec128_t* %XMM0 to i8*
  %3282 = load i64, i64* %PC
  %3283 = add i64 %3282, 5
  store i64 %3283, i64* %PC
  %3284 = bitcast i8* %3281 to double*
  %3285 = load double, double* %3284, align 1
  %3286 = inttoptr i64 %3280 to double*
  store double %3285, double* %3286
  %3287 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3288 = load i64, i64* %RBP
  %3289 = sub i64 %3288, 88
  %3290 = load i64, i64* %PC
  %3291 = add i64 %3290, 5
  store i64 %3291, i64* %PC
  %3292 = inttoptr i64 %3289 to double*
  %3293 = load double, double* %3292
  %3294 = bitcast i8* %3287 to double*
  store double %3293, double* %3294, align 1, !tbaa !2452
  %3295 = getelementptr inbounds i8, i8* %3287, i64 8
  %3296 = bitcast i8* %3295 to double*
  store double 0.000000e+00, double* %3296, align 1, !tbaa !2452
  %3297 = load i64, i64* %RBP
  %3298 = sub i64 %3297, 24
  %3299 = load i64, i64* %PC
  %3300 = add i64 %3299, 4
  store i64 %3300, i64* %PC
  %3301 = inttoptr i64 %3298 to i64*
  %3302 = load i64, i64* %3301
  store i64 %3302, i64* %RAX, align 8, !tbaa !2428
  %3303 = load i64, i64* %RBP
  %3304 = sub i64 %3303, 32
  %3305 = load i64, i64* %PC
  %3306 = add i64 %3305, 3
  store i64 %3306, i64* %PC
  %3307 = inttoptr i64 %3304 to i32*
  %3308 = load i32, i32* %3307
  %3309 = zext i32 %3308 to i64
  store i64 %3309, i64* %RCX, align 8, !tbaa !2428
  %3310 = load i64, i64* %RCX
  %3311 = load i64, i64* %PC
  %3312 = add i64 %3311, 3
  store i64 %3312, i64* %PC
  %3313 = trunc i64 %3310 to i32
  %3314 = add i32 1, %3313
  %3315 = zext i32 %3314 to i64
  store i64 %3315, i64* %RCX, align 8, !tbaa !2428
  %3316 = icmp ult i32 %3314, %3313
  %3317 = icmp ult i32 %3314, 1
  %3318 = or i1 %3316, %3317
  %3319 = zext i1 %3318 to i8
  %3320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3319, i8* %3320, align 1, !tbaa !2432
  %3321 = and i32 %3314, 255
  %3322 = call i32 @llvm.ctpop.i32(i32 %3321) #17
  %3323 = trunc i32 %3322 to i8
  %3324 = and i8 %3323, 1
  %3325 = xor i8 %3324, 1
  %3326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3325, i8* %3326, align 1, !tbaa !2446
  %3327 = xor i64 1, %3310
  %3328 = trunc i64 %3327 to i32
  %3329 = xor i32 %3328, %3314
  %3330 = lshr i32 %3329, 4
  %3331 = trunc i32 %3330 to i8
  %3332 = and i8 %3331, 1
  %3333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3332, i8* %3333, align 1, !tbaa !2447
  %3334 = icmp eq i32 %3314, 0
  %3335 = zext i1 %3334 to i8
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3335, i8* %3336, align 1, !tbaa !2448
  %3337 = lshr i32 %3314, 31
  %3338 = trunc i32 %3337 to i8
  %3339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3338, i8* %3339, align 1, !tbaa !2449
  %3340 = lshr i32 %3313, 31
  %3341 = xor i32 %3337, %3340
  %3342 = add nuw nsw i32 %3341, %3337
  %3343 = icmp eq i32 %3342, 2
  %3344 = zext i1 %3343 to i8
  %3345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3344, i8* %3345, align 1, !tbaa !2450
  %3346 = load i32, i32* %ECX
  %3347 = zext i32 %3346 to i64
  %3348 = load i64, i64* %PC
  %3349 = add i64 %3348, 3
  store i64 %3349, i64* %PC
  %3350 = shl i64 %3347, 32
  %3351 = ashr exact i64 %3350, 32
  store i64 %3351, i64* %RDX, align 8, !tbaa !2428
  %3352 = load i64, i64* %RAX
  %3353 = load i64, i64* %RDX
  %3354 = mul i64 %3353, 8
  %3355 = add i64 %3354, %3352
  %3356 = bitcast %union.vec128_t* %XMM0 to i8*
  %3357 = load i64, i64* %PC
  %3358 = add i64 %3357, 5
  store i64 %3358, i64* %PC
  %3359 = bitcast i8* %3356 to double*
  %3360 = load double, double* %3359, align 1
  %3361 = inttoptr i64 %3355 to double*
  store double %3360, double* %3361
  %3362 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3363 = load i64, i64* %RBP
  %3364 = sub i64 %3363, 64
  %3365 = load i64, i64* %PC
  %3366 = add i64 %3365, 5
  store i64 %3366, i64* %PC
  %3367 = inttoptr i64 %3364 to double*
  %3368 = load double, double* %3367
  %3369 = bitcast i8* %3362 to double*
  store double %3368, double* %3369, align 1, !tbaa !2452
  %3370 = getelementptr inbounds i8, i8* %3362, i64 8
  %3371 = bitcast i8* %3370 to double*
  store double 0.000000e+00, double* %3371, align 1, !tbaa !2452
  %3372 = load i64, i64* %RBP
  %3373 = sub i64 %3372, 24
  %3374 = load i64, i64* %PC
  %3375 = add i64 %3374, 4
  store i64 %3375, i64* %PC
  %3376 = inttoptr i64 %3373 to i64*
  %3377 = load i64, i64* %3376
  store i64 %3377, i64* %RAX, align 8, !tbaa !2428
  %3378 = load i64, i64* %RBP
  %3379 = sub i64 %3378, 40
  %3380 = load i64, i64* %PC
  %3381 = add i64 %3380, 4
  store i64 %3381, i64* %PC
  %3382 = inttoptr i64 %3379 to i32*
  %3383 = load i32, i32* %3382
  %3384 = sext i32 %3383 to i64
  store i64 %3384, i64* %RDX, align 8, !tbaa !2428
  %3385 = load i64, i64* %RAX
  %3386 = load i64, i64* %RDX
  %3387 = mul i64 %3386, 8
  %3388 = add i64 %3387, %3385
  %3389 = bitcast %union.vec128_t* %XMM0 to i8*
  %3390 = load i64, i64* %PC
  %3391 = add i64 %3390, 5
  store i64 %3391, i64* %PC
  %3392 = bitcast i8* %3389 to double*
  %3393 = load double, double* %3392, align 1
  %3394 = inttoptr i64 %3388 to double*
  store double %3393, double* %3394
  %3395 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3396 = load i64, i64* %RBP
  %3397 = sub i64 %3396, 72
  %3398 = load i64, i64* %PC
  %3399 = add i64 %3398, 5
  store i64 %3399, i64* %PC
  %3400 = inttoptr i64 %3397 to double*
  %3401 = load double, double* %3400
  %3402 = bitcast i8* %3395 to double*
  store double %3401, double* %3402, align 1, !tbaa !2452
  %3403 = getelementptr inbounds i8, i8* %3395, i64 8
  %3404 = bitcast i8* %3403 to double*
  store double 0.000000e+00, double* %3404, align 1, !tbaa !2452
  %3405 = load i64, i64* %RBP
  %3406 = sub i64 %3405, 24
  %3407 = load i64, i64* %PC
  %3408 = add i64 %3407, 4
  store i64 %3408, i64* %PC
  %3409 = inttoptr i64 %3406 to i64*
  %3410 = load i64, i64* %3409
  store i64 %3410, i64* %RAX, align 8, !tbaa !2428
  %3411 = load i64, i64* %RBP
  %3412 = sub i64 %3411, 40
  %3413 = load i64, i64* %PC
  %3414 = add i64 %3413, 3
  store i64 %3414, i64* %PC
  %3415 = inttoptr i64 %3412 to i32*
  %3416 = load i32, i32* %3415
  %3417 = zext i32 %3416 to i64
  store i64 %3417, i64* %RCX, align 8, !tbaa !2428
  %3418 = load i64, i64* %RCX
  %3419 = load i64, i64* %PC
  %3420 = add i64 %3419, 3
  store i64 %3420, i64* %PC
  %3421 = trunc i64 %3418 to i32
  %3422 = add i32 1, %3421
  %3423 = zext i32 %3422 to i64
  store i64 %3423, i64* %RCX, align 8, !tbaa !2428
  %3424 = icmp ult i32 %3422, %3421
  %3425 = icmp ult i32 %3422, 1
  %3426 = or i1 %3424, %3425
  %3427 = zext i1 %3426 to i8
  %3428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3427, i8* %3428, align 1, !tbaa !2432
  %3429 = and i32 %3422, 255
  %3430 = call i32 @llvm.ctpop.i32(i32 %3429) #17
  %3431 = trunc i32 %3430 to i8
  %3432 = and i8 %3431, 1
  %3433 = xor i8 %3432, 1
  %3434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3433, i8* %3434, align 1, !tbaa !2446
  %3435 = xor i64 1, %3418
  %3436 = trunc i64 %3435 to i32
  %3437 = xor i32 %3436, %3422
  %3438 = lshr i32 %3437, 4
  %3439 = trunc i32 %3438 to i8
  %3440 = and i8 %3439, 1
  %3441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3440, i8* %3441, align 1, !tbaa !2447
  %3442 = icmp eq i32 %3422, 0
  %3443 = zext i1 %3442 to i8
  %3444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3443, i8* %3444, align 1, !tbaa !2448
  %3445 = lshr i32 %3422, 31
  %3446 = trunc i32 %3445 to i8
  %3447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3446, i8* %3447, align 1, !tbaa !2449
  %3448 = lshr i32 %3421, 31
  %3449 = xor i32 %3445, %3448
  %3450 = add nuw nsw i32 %3449, %3445
  %3451 = icmp eq i32 %3450, 2
  %3452 = zext i1 %3451 to i8
  %3453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3452, i8* %3453, align 1, !tbaa !2450
  %3454 = load i32, i32* %ECX
  %3455 = zext i32 %3454 to i64
  %3456 = load i64, i64* %PC
  %3457 = add i64 %3456, 3
  store i64 %3457, i64* %PC
  %3458 = shl i64 %3455, 32
  %3459 = ashr exact i64 %3458, 32
  store i64 %3459, i64* %RDX, align 8, !tbaa !2428
  %3460 = load i64, i64* %RAX
  %3461 = load i64, i64* %RDX
  %3462 = mul i64 %3461, 8
  %3463 = add i64 %3462, %3460
  %3464 = bitcast %union.vec128_t* %XMM0 to i8*
  %3465 = load i64, i64* %PC
  %3466 = add i64 %3465, 5
  store i64 %3466, i64* %PC
  %3467 = bitcast i8* %3464 to double*
  %3468 = load double, double* %3467, align 1
  %3469 = inttoptr i64 %3463 to double*
  store double %3468, double* %3469
  %3470 = load i64, i64* %RBP
  %3471 = sub i64 %3470, 28
  %3472 = load i64, i64* %PC
  %3473 = add i64 %3472, 3
  store i64 %3473, i64* %PC
  %3474 = inttoptr i64 %3471 to i32*
  %3475 = load i32, i32* %3474
  %3476 = zext i32 %3475 to i64
  store i64 %3476, i64* %RAX, align 8, !tbaa !2428
  %3477 = load i64, i64* %RAX
  %3478 = load i64, i64* %PC
  %3479 = add i64 %3478, 3
  store i64 %3479, i64* %PC
  %3480 = trunc i64 %3477 to i32
  %3481 = add i32 1, %3480
  %3482 = zext i32 %3481 to i64
  store i64 %3482, i64* %RAX, align 8, !tbaa !2428
  %3483 = icmp ult i32 %3481, %3480
  %3484 = icmp ult i32 %3481, 1
  %3485 = or i1 %3483, %3484
  %3486 = zext i1 %3485 to i8
  %3487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3486, i8* %3487, align 1, !tbaa !2432
  %3488 = and i32 %3481, 255
  %3489 = call i32 @llvm.ctpop.i32(i32 %3488) #17
  %3490 = trunc i32 %3489 to i8
  %3491 = and i8 %3490, 1
  %3492 = xor i8 %3491, 1
  %3493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3492, i8* %3493, align 1, !tbaa !2446
  %3494 = xor i64 1, %3477
  %3495 = trunc i64 %3494 to i32
  %3496 = xor i32 %3495, %3481
  %3497 = lshr i32 %3496, 4
  %3498 = trunc i32 %3497 to i8
  %3499 = and i8 %3498, 1
  %3500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3499, i8* %3500, align 1, !tbaa !2447
  %3501 = icmp eq i32 %3481, 0
  %3502 = zext i1 %3501 to i8
  %3503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3502, i8* %3503, align 1, !tbaa !2448
  %3504 = lshr i32 %3481, 31
  %3505 = trunc i32 %3504 to i8
  %3506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3505, i8* %3506, align 1, !tbaa !2449
  %3507 = lshr i32 %3480, 31
  %3508 = xor i32 %3504, %3507
  %3509 = add nuw nsw i32 %3508, %3504
  %3510 = icmp eq i32 %3509, 2
  %3511 = zext i1 %3510 to i8
  %3512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3511, i8* %3512, align 1, !tbaa !2450
  %3513 = load i64, i64* %RBP
  %3514 = sub i64 %3513, 28
  %3515 = load i32, i32* %EAX
  %3516 = zext i32 %3515 to i64
  %3517 = load i64, i64* %PC
  %3518 = add i64 %3517, 3
  store i64 %3518, i64* %PC
  %3519 = inttoptr i64 %3514 to i32*
  store i32 %3515, i32* %3519
  %3520 = load i64, i64* %PC
  %3521 = sub i64 %3520, 893
  %3522 = load i64, i64* %PC
  %3523 = add i64 %3522, 5
  store i64 %3523, i64* %PC
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3521, i64* %3524, align 8, !tbaa !2428
  br label %block_401cbd

block_40203f:                                     ; preds = %block_401cbd
  %3525 = sub i64 %4734, 36
  %3526 = load i64, i64* %PC
  %3527 = add i64 %3526, 3
  store i64 %3527, i64* %PC
  %3528 = inttoptr i64 %3525 to i32*
  %3529 = load i32, i32* %3528
  %3530 = zext i32 %3529 to i64
  store i64 %3530, i64* %RCX, align 8, !tbaa !2428
  %3531 = load i64, i64* %RCX
  %3532 = load i64, i64* %PC
  %3533 = add i64 %3532, 3
  store i64 %3533, i64* %PC
  %3534 = trunc i64 %3531 to i32
  %3535 = shl i32 %3534, 1
  %3536 = icmp slt i32 %3534, 0
  %3537 = icmp slt i32 %3535, 0
  %3538 = xor i1 %3536, %3537
  %3539 = zext i32 %3535 to i64
  store i64 %3539, i64* %RCX, align 8, !tbaa !2428
  %3540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3541 = zext i1 %3536 to i8
  store i8 %3541, i8* %3540, align 1, !tbaa !2451
  %3542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3543 = and i32 %3535, 254
  %3544 = call i32 @llvm.ctpop.i32(i32 %3543) #17
  %3545 = trunc i32 %3544 to i8
  %3546 = and i8 %3545, 1
  %3547 = xor i8 %3546, 1
  store i8 %3547, i8* %3542, align 1, !tbaa !2451
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3548, align 1, !tbaa !2451
  %3549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3550 = icmp eq i32 %3535, 0
  %3551 = zext i1 %3550 to i8
  store i8 %3551, i8* %3549, align 1, !tbaa !2451
  %3552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3553 = lshr i32 %3535, 31
  %3554 = trunc i32 %3553 to i8
  store i8 %3554, i8* %3552, align 1, !tbaa !2451
  %3555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3556 = zext i1 %3538 to i8
  store i8 %3556, i8* %3555, align 1, !tbaa !2451
  %3557 = load i64, i64* %RBP
  %3558 = sub i64 %3557, 16
  %3559 = load i64, i64* %PC
  %3560 = add i64 %3559, 4
  store i64 %3560, i64* %PC
  %3561 = inttoptr i64 %3558 to i64*
  %3562 = load i64, i64* %3561
  store i64 %3562, i64* %RDX, align 8, !tbaa !2428
  %3563 = load i64, i64* %RBP
  %3564 = sub i64 %3563, 36
  %3565 = load i64, i64* %PC
  %3566 = add i64 %3565, 4
  store i64 %3566, i64* %PC
  %3567 = inttoptr i64 %3564 to i32*
  %3568 = load i32, i32* %3567
  %3569 = sext i32 %3568 to i64
  store i64 %3569, i64* %RSI, align 8, !tbaa !2428
  %3570 = load i64, i64* %RCX
  %3571 = load i64, i64* %RDX
  %3572 = load i64, i64* %RSI
  %3573 = mul i64 %3572, 4
  %3574 = add i64 %3573, %3571
  %3575 = load i64, i64* %PC
  %3576 = add i64 %3575, 3
  store i64 %3576, i64* %PC
  %3577 = trunc i64 %3570 to i32
  %3578 = inttoptr i64 %3574 to i32*
  %3579 = load i32, i32* %3578
  %3580 = add i32 %3579, %3577
  %3581 = zext i32 %3580 to i64
  store i64 %3581, i64* %RCX, align 8, !tbaa !2428
  %3582 = icmp ult i32 %3580, %3577
  %3583 = icmp ult i32 %3580, %3579
  %3584 = or i1 %3582, %3583
  %3585 = zext i1 %3584 to i8
  %3586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3585, i8* %3586, align 1, !tbaa !2432
  %3587 = and i32 %3580, 255
  %3588 = call i32 @llvm.ctpop.i32(i32 %3587) #17
  %3589 = trunc i32 %3588 to i8
  %3590 = and i8 %3589, 1
  %3591 = xor i8 %3590, 1
  %3592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3591, i8* %3592, align 1, !tbaa !2446
  %3593 = xor i32 %3579, %3577
  %3594 = xor i32 %3593, %3580
  %3595 = lshr i32 %3594, 4
  %3596 = trunc i32 %3595 to i8
  %3597 = and i8 %3596, 1
  %3598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3597, i8* %3598, align 1, !tbaa !2447
  %3599 = icmp eq i32 %3580, 0
  %3600 = zext i1 %3599 to i8
  %3601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3600, i8* %3601, align 1, !tbaa !2448
  %3602 = lshr i32 %3580, 31
  %3603 = trunc i32 %3602 to i8
  %3604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3603, i8* %3604, align 1, !tbaa !2449
  %3605 = lshr i32 %3577, 31
  %3606 = lshr i32 %3579, 31
  %3607 = xor i32 %3602, %3605
  %3608 = xor i32 %3602, %3606
  %3609 = add nuw nsw i32 %3607, %3608
  %3610 = icmp eq i32 %3609, 2
  %3611 = zext i1 %3610 to i8
  %3612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3611, i8* %3612, align 1, !tbaa !2450
  %3613 = load i64, i64* %RBP
  %3614 = sub i64 %3613, 40
  %3615 = load i32, i32* %ECX
  %3616 = zext i32 %3615 to i64
  %3617 = load i64, i64* %PC
  %3618 = add i64 %3617, 3
  store i64 %3618, i64* %PC
  %3619 = inttoptr i64 %3614 to i32*
  store i32 %3615, i32* %3619
  %3620 = load i64, i64* %RBP
  %3621 = sub i64 %3620, 24
  %3622 = load i64, i64* %PC
  %3623 = add i64 %3622, 4
  store i64 %3623, i64* %PC
  %3624 = inttoptr i64 %3621 to i64*
  %3625 = load i64, i64* %3624
  store i64 %3625, i64* %RDX, align 8, !tbaa !2428
  %3626 = load i64, i64* %RBP
  %3627 = sub i64 %3626, 40
  %3628 = load i64, i64* %PC
  %3629 = add i64 %3628, 3
  store i64 %3629, i64* %PC
  %3630 = inttoptr i64 %3627 to i32*
  %3631 = load i32, i32* %3630
  %3632 = zext i32 %3631 to i64
  store i64 %3632, i64* %RCX, align 8, !tbaa !2428
  %3633 = load i64, i64* %RCX
  %3634 = load i64, i64* %PC
  %3635 = add i64 %3634, 3
  store i64 %3635, i64* %PC
  %3636 = trunc i64 %3633 to i32
  %3637 = add i32 1, %3636
  %3638 = zext i32 %3637 to i64
  store i64 %3638, i64* %RCX, align 8, !tbaa !2428
  %3639 = icmp ult i32 %3637, %3636
  %3640 = icmp ult i32 %3637, 1
  %3641 = or i1 %3639, %3640
  %3642 = zext i1 %3641 to i8
  %3643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3642, i8* %3643, align 1, !tbaa !2432
  %3644 = and i32 %3637, 255
  %3645 = call i32 @llvm.ctpop.i32(i32 %3644) #17
  %3646 = trunc i32 %3645 to i8
  %3647 = and i8 %3646, 1
  %3648 = xor i8 %3647, 1
  %3649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3648, i8* %3649, align 1, !tbaa !2446
  %3650 = xor i64 1, %3633
  %3651 = trunc i64 %3650 to i32
  %3652 = xor i32 %3651, %3637
  %3653 = lshr i32 %3652, 4
  %3654 = trunc i32 %3653 to i8
  %3655 = and i8 %3654, 1
  %3656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3655, i8* %3656, align 1, !tbaa !2447
  %3657 = icmp eq i32 %3637, 0
  %3658 = zext i1 %3657 to i8
  %3659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3658, i8* %3659, align 1, !tbaa !2448
  %3660 = lshr i32 %3637, 31
  %3661 = trunc i32 %3660 to i8
  %3662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3661, i8* %3662, align 1, !tbaa !2449
  %3663 = lshr i32 %3636, 31
  %3664 = xor i32 %3660, %3663
  %3665 = add nuw nsw i32 %3664, %3660
  %3666 = icmp eq i32 %3665, 2
  %3667 = zext i1 %3666 to i8
  %3668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3667, i8* %3668, align 1, !tbaa !2450
  %3669 = load i32, i32* %ECX
  %3670 = zext i32 %3669 to i64
  %3671 = load i64, i64* %PC
  %3672 = add i64 %3671, 3
  store i64 %3672, i64* %PC
  %3673 = shl i64 %3670, 32
  %3674 = ashr exact i64 %3673, 32
  store i64 %3674, i64* %RSI, align 8, !tbaa !2428
  %3675 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3676 = load i64, i64* %RDX
  %3677 = load i64, i64* %RSI
  %3678 = mul i64 %3677, 8
  %3679 = add i64 %3678, %3676
  %3680 = load i64, i64* %PC
  %3681 = add i64 %3680, 5
  store i64 %3681, i64* %PC
  %3682 = inttoptr i64 %3679 to double*
  %3683 = load double, double* %3682
  %3684 = bitcast i8* %3675 to double*
  store double %3683, double* %3684, align 1, !tbaa !2452
  %3685 = getelementptr inbounds i8, i8* %3675, i64 8
  %3686 = bitcast i8* %3685 to double*
  store double 0.000000e+00, double* %3686, align 1, !tbaa !2452
  %3687 = bitcast %union.vec128_t* %XMM0 to i8*
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 5
  store i64 %3689, i64* %PC
  %3690 = bitcast i8* %3687 to i64*
  %3691 = load i64, i64* %3690, align 1
  store i64 %3691, i64* %RDX, align 1, !tbaa !2428
  %3692 = load i64, i64* %RDX
  %3693 = load i64, i64* %RAX
  %3694 = load i64, i64* %PC
  %3695 = add i64 %3694, 3
  store i64 %3695, i64* %PC
  %3696 = xor i64 %3693, %3692
  store i64 %3696, i64* %RDX, align 8, !tbaa !2428
  %3697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3697, align 1, !tbaa !2432
  %3698 = trunc i64 %3696 to i32
  %3699 = and i32 %3698, 255
  %3700 = call i32 @llvm.ctpop.i32(i32 %3699) #17
  %3701 = trunc i32 %3700 to i8
  %3702 = and i8 %3701, 1
  %3703 = xor i8 %3702, 1
  %3704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3703, i8* %3704, align 1, !tbaa !2446
  %3705 = icmp eq i64 %3696, 0
  %3706 = zext i1 %3705 to i8
  %3707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3706, i8* %3707, align 1, !tbaa !2448
  %3708 = lshr i64 %3696, 63
  %3709 = trunc i64 %3708 to i8
  %3710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3709, i8* %3710, align 1, !tbaa !2449
  %3711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3711, align 1, !tbaa !2450
  %3712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3712, align 1, !tbaa !2447
  %3713 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3714 = load i64, i64* %RDX
  %3715 = load i64, i64* %PC
  %3716 = add i64 %3715, 5
  store i64 %3716, i64* %PC
  %3717 = bitcast i8* %3713 to i64*
  store i64 %3714, i64* %3717, align 1, !tbaa !2428
  %3718 = getelementptr inbounds i8, i8* %3713, i64 8
  %3719 = bitcast i8* %3718 to i64*
  store i64 0, i64* %3719, align 1, !tbaa !2428
  %3720 = load i64, i64* %RBP
  %3721 = sub i64 %3720, 24
  %3722 = load i64, i64* %PC
  %3723 = add i64 %3722, 4
  store i64 %3723, i64* %PC
  %3724 = inttoptr i64 %3721 to i64*
  %3725 = load i64, i64* %3724
  store i64 %3725, i64* %RDX, align 8, !tbaa !2428
  %3726 = load i64, i64* %RBP
  %3727 = sub i64 %3726, 40
  %3728 = load i64, i64* %PC
  %3729 = add i64 %3728, 3
  store i64 %3729, i64* %PC
  %3730 = inttoptr i64 %3727 to i32*
  %3731 = load i32, i32* %3730
  %3732 = zext i32 %3731 to i64
  store i64 %3732, i64* %RCX, align 8, !tbaa !2428
  %3733 = load i64, i64* %RCX
  %3734 = load i64, i64* %PC
  %3735 = add i64 %3734, 3
  store i64 %3735, i64* %PC
  %3736 = trunc i64 %3733 to i32
  %3737 = add i32 1, %3736
  %3738 = zext i32 %3737 to i64
  store i64 %3738, i64* %RCX, align 8, !tbaa !2428
  %3739 = icmp ult i32 %3737, %3736
  %3740 = icmp ult i32 %3737, 1
  %3741 = or i1 %3739, %3740
  %3742 = zext i1 %3741 to i8
  %3743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3742, i8* %3743, align 1, !tbaa !2432
  %3744 = and i32 %3737, 255
  %3745 = call i32 @llvm.ctpop.i32(i32 %3744) #17
  %3746 = trunc i32 %3745 to i8
  %3747 = and i8 %3746, 1
  %3748 = xor i8 %3747, 1
  %3749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3748, i8* %3749, align 1, !tbaa !2446
  %3750 = xor i64 1, %3733
  %3751 = trunc i64 %3750 to i32
  %3752 = xor i32 %3751, %3737
  %3753 = lshr i32 %3752, 4
  %3754 = trunc i32 %3753 to i8
  %3755 = and i8 %3754, 1
  %3756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3755, i8* %3756, align 1, !tbaa !2447
  %3757 = icmp eq i32 %3737, 0
  %3758 = zext i1 %3757 to i8
  %3759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3758, i8* %3759, align 1, !tbaa !2448
  %3760 = lshr i32 %3737, 31
  %3761 = trunc i32 %3760 to i8
  %3762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3761, i8* %3762, align 1, !tbaa !2449
  %3763 = lshr i32 %3736, 31
  %3764 = xor i32 %3760, %3763
  %3765 = add nuw nsw i32 %3764, %3760
  %3766 = icmp eq i32 %3765, 2
  %3767 = zext i1 %3766 to i8
  %3768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3767, i8* %3768, align 1, !tbaa !2450
  %3769 = load i32, i32* %ECX
  %3770 = zext i32 %3769 to i64
  %3771 = load i64, i64* %PC
  %3772 = add i64 %3771, 3
  store i64 %3772, i64* %PC
  %3773 = shl i64 %3770, 32
  %3774 = ashr exact i64 %3773, 32
  store i64 %3774, i64* %RSI, align 8, !tbaa !2428
  %3775 = load i64, i64* %RDX
  %3776 = load i64, i64* %RSI
  %3777 = mul i64 %3776, 8
  %3778 = add i64 %3777, %3775
  %3779 = bitcast %union.vec128_t* %XMM0 to i8*
  %3780 = load i64, i64* %PC
  %3781 = add i64 %3780, 5
  store i64 %3781, i64* %PC
  %3782 = bitcast i8* %3779 to double*
  %3783 = load double, double* %3782, align 1
  %3784 = inttoptr i64 %3778 to double*
  store double %3783, double* %3784
  %3785 = load i64, i64* %RBP
  %3786 = sub i64 %3785, 40
  %3787 = load i64, i64* %PC
  %3788 = add i64 %3787, 3
  store i64 %3788, i64* %PC
  %3789 = inttoptr i64 %3786 to i32*
  %3790 = load i32, i32* %3789
  %3791 = zext i32 %3790 to i64
  store i64 %3791, i64* %RCX, align 8, !tbaa !2428
  %3792 = load i64, i64* %RCX
  %3793 = load i64, i64* %RBP
  %3794 = sub i64 %3793, 52
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 3
  store i64 %3796, i64* %PC
  %3797 = trunc i64 %3792 to i32
  %3798 = inttoptr i64 %3794 to i32*
  %3799 = load i32, i32* %3798
  %3800 = add i32 %3799, %3797
  %3801 = zext i32 %3800 to i64
  store i64 %3801, i64* %RCX, align 8, !tbaa !2428
  %3802 = icmp ult i32 %3800, %3797
  %3803 = icmp ult i32 %3800, %3799
  %3804 = or i1 %3802, %3803
  %3805 = zext i1 %3804 to i8
  %3806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3805, i8* %3806, align 1, !tbaa !2432
  %3807 = and i32 %3800, 255
  %3808 = call i32 @llvm.ctpop.i32(i32 %3807) #17
  %3809 = trunc i32 %3808 to i8
  %3810 = and i8 %3809, 1
  %3811 = xor i8 %3810, 1
  %3812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3811, i8* %3812, align 1, !tbaa !2446
  %3813 = xor i32 %3799, %3797
  %3814 = xor i32 %3813, %3800
  %3815 = lshr i32 %3814, 4
  %3816 = trunc i32 %3815 to i8
  %3817 = and i8 %3816, 1
  %3818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3817, i8* %3818, align 1, !tbaa !2447
  %3819 = icmp eq i32 %3800, 0
  %3820 = zext i1 %3819 to i8
  %3821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3820, i8* %3821, align 1, !tbaa !2448
  %3822 = lshr i32 %3800, 31
  %3823 = trunc i32 %3822 to i8
  %3824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3823, i8* %3824, align 1, !tbaa !2449
  %3825 = lshr i32 %3797, 31
  %3826 = lshr i32 %3799, 31
  %3827 = xor i32 %3822, %3825
  %3828 = xor i32 %3822, %3826
  %3829 = add nuw nsw i32 %3827, %3828
  %3830 = icmp eq i32 %3829, 2
  %3831 = zext i1 %3830 to i8
  %3832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3831, i8* %3832, align 1, !tbaa !2450
  %3833 = load i64, i64* %RBP
  %3834 = sub i64 %3833, 32
  %3835 = load i32, i32* %ECX
  %3836 = zext i32 %3835 to i64
  %3837 = load i64, i64* %PC
  %3838 = add i64 %3837, 3
  store i64 %3838, i64* %PC
  %3839 = inttoptr i64 %3834 to i32*
  store i32 %3835, i32* %3839
  %3840 = load i64, i64* %RBP
  %3841 = sub i64 %3840, 32
  %3842 = load i64, i64* %PC
  %3843 = add i64 %3842, 3
  store i64 %3843, i64* %PC
  %3844 = inttoptr i64 %3841 to i32*
  %3845 = load i32, i32* %3844
  %3846 = zext i32 %3845 to i64
  store i64 %3846, i64* %RCX, align 8, !tbaa !2428
  %3847 = load i64, i64* %RCX
  %3848 = load i64, i64* %RBP
  %3849 = sub i64 %3848, 52
  %3850 = load i64, i64* %PC
  %3851 = add i64 %3850, 3
  store i64 %3851, i64* %PC
  %3852 = trunc i64 %3847 to i32
  %3853 = inttoptr i64 %3849 to i32*
  %3854 = load i32, i32* %3853
  %3855 = add i32 %3854, %3852
  %3856 = zext i32 %3855 to i64
  store i64 %3856, i64* %RCX, align 8, !tbaa !2428
  %3857 = icmp ult i32 %3855, %3852
  %3858 = icmp ult i32 %3855, %3854
  %3859 = or i1 %3857, %3858
  %3860 = zext i1 %3859 to i8
  %3861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3860, i8* %3861, align 1, !tbaa !2432
  %3862 = and i32 %3855, 255
  %3863 = call i32 @llvm.ctpop.i32(i32 %3862) #17
  %3864 = trunc i32 %3863 to i8
  %3865 = and i8 %3864, 1
  %3866 = xor i8 %3865, 1
  %3867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3866, i8* %3867, align 1, !tbaa !2446
  %3868 = xor i32 %3854, %3852
  %3869 = xor i32 %3868, %3855
  %3870 = lshr i32 %3869, 4
  %3871 = trunc i32 %3870 to i8
  %3872 = and i8 %3871, 1
  %3873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3872, i8* %3873, align 1, !tbaa !2447
  %3874 = icmp eq i32 %3855, 0
  %3875 = zext i1 %3874 to i8
  %3876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3875, i8* %3876, align 1, !tbaa !2448
  %3877 = lshr i32 %3855, 31
  %3878 = trunc i32 %3877 to i8
  %3879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3878, i8* %3879, align 1, !tbaa !2449
  %3880 = lshr i32 %3852, 31
  %3881 = lshr i32 %3854, 31
  %3882 = xor i32 %3877, %3880
  %3883 = xor i32 %3877, %3881
  %3884 = add nuw nsw i32 %3882, %3883
  %3885 = icmp eq i32 %3884, 2
  %3886 = zext i1 %3885 to i8
  %3887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3886, i8* %3887, align 1, !tbaa !2450
  %3888 = load i64, i64* %RBP
  %3889 = sub i64 %3888, 40
  %3890 = load i32, i32* %ECX
  %3891 = zext i32 %3890 to i64
  %3892 = load i64, i64* %PC
  %3893 = add i64 %3892, 3
  store i64 %3893, i64* %PC
  %3894 = inttoptr i64 %3889 to i32*
  store i32 %3890, i32* %3894
  %3895 = load i64, i64* %RBP
  %3896 = sub i64 %3895, 24
  %3897 = load i64, i64* %PC
  %3898 = add i64 %3897, 4
  store i64 %3898, i64* %PC
  %3899 = inttoptr i64 %3896 to i64*
  %3900 = load i64, i64* %3899
  store i64 %3900, i64* %RDX, align 8, !tbaa !2428
  %3901 = load i64, i64* %RBP
  %3902 = sub i64 %3901, 32
  %3903 = load i64, i64* %PC
  %3904 = add i64 %3903, 4
  store i64 %3904, i64* %PC
  %3905 = inttoptr i64 %3902 to i32*
  %3906 = load i32, i32* %3905
  %3907 = sext i32 %3906 to i64
  store i64 %3907, i64* %RSI, align 8, !tbaa !2428
  %3908 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3909 = load i64, i64* %RDX
  %3910 = load i64, i64* %RSI
  %3911 = mul i64 %3910, 8
  %3912 = add i64 %3911, %3909
  %3913 = load i64, i64* %PC
  %3914 = add i64 %3913, 5
  store i64 %3914, i64* %PC
  %3915 = inttoptr i64 %3912 to double*
  %3916 = load double, double* %3915
  %3917 = bitcast i8* %3908 to double*
  store double %3916, double* %3917, align 1, !tbaa !2452
  %3918 = getelementptr inbounds i8, i8* %3908, i64 8
  %3919 = bitcast i8* %3918 to double*
  store double 0.000000e+00, double* %3919, align 1, !tbaa !2452
  %3920 = load i64, i64* %RBP
  %3921 = sub i64 %3920, 64
  %3922 = bitcast %union.vec128_t* %XMM0 to i8*
  %3923 = load i64, i64* %PC
  %3924 = add i64 %3923, 5
  store i64 %3924, i64* %PC
  %3925 = bitcast i8* %3922 to double*
  %3926 = load double, double* %3925, align 1
  %3927 = inttoptr i64 %3921 to double*
  store double %3926, double* %3927
  %3928 = load i64, i64* %RBP
  %3929 = sub i64 %3928, 24
  %3930 = load i64, i64* %PC
  %3931 = add i64 %3930, 4
  store i64 %3931, i64* %PC
  %3932 = inttoptr i64 %3929 to i64*
  %3933 = load i64, i64* %3932
  store i64 %3933, i64* %RDX, align 8, !tbaa !2428
  %3934 = load i64, i64* %RBP
  %3935 = sub i64 %3934, 32
  %3936 = load i64, i64* %PC
  %3937 = add i64 %3936, 3
  store i64 %3937, i64* %PC
  %3938 = inttoptr i64 %3935 to i32*
  %3939 = load i32, i32* %3938
  %3940 = zext i32 %3939 to i64
  store i64 %3940, i64* %RCX, align 8, !tbaa !2428
  %3941 = load i64, i64* %RCX
  %3942 = load i64, i64* %PC
  %3943 = add i64 %3942, 3
  store i64 %3943, i64* %PC
  %3944 = trunc i64 %3941 to i32
  %3945 = add i32 1, %3944
  %3946 = zext i32 %3945 to i64
  store i64 %3946, i64* %RCX, align 8, !tbaa !2428
  %3947 = icmp ult i32 %3945, %3944
  %3948 = icmp ult i32 %3945, 1
  %3949 = or i1 %3947, %3948
  %3950 = zext i1 %3949 to i8
  %3951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3950, i8* %3951, align 1, !tbaa !2432
  %3952 = and i32 %3945, 255
  %3953 = call i32 @llvm.ctpop.i32(i32 %3952) #17
  %3954 = trunc i32 %3953 to i8
  %3955 = and i8 %3954, 1
  %3956 = xor i8 %3955, 1
  %3957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3956, i8* %3957, align 1, !tbaa !2446
  %3958 = xor i64 1, %3941
  %3959 = trunc i64 %3958 to i32
  %3960 = xor i32 %3959, %3945
  %3961 = lshr i32 %3960, 4
  %3962 = trunc i32 %3961 to i8
  %3963 = and i8 %3962, 1
  %3964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3963, i8* %3964, align 1, !tbaa !2447
  %3965 = icmp eq i32 %3945, 0
  %3966 = zext i1 %3965 to i8
  %3967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3966, i8* %3967, align 1, !tbaa !2448
  %3968 = lshr i32 %3945, 31
  %3969 = trunc i32 %3968 to i8
  %3970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3969, i8* %3970, align 1, !tbaa !2449
  %3971 = lshr i32 %3944, 31
  %3972 = xor i32 %3968, %3971
  %3973 = add nuw nsw i32 %3972, %3968
  %3974 = icmp eq i32 %3973, 2
  %3975 = zext i1 %3974 to i8
  %3976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3975, i8* %3976, align 1, !tbaa !2450
  %3977 = load i32, i32* %ECX
  %3978 = zext i32 %3977 to i64
  %3979 = load i64, i64* %PC
  %3980 = add i64 %3979, 3
  store i64 %3980, i64* %PC
  %3981 = shl i64 %3978, 32
  %3982 = ashr exact i64 %3981, 32
  store i64 %3982, i64* %RSI, align 8, !tbaa !2428
  %3983 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3984 = load i64, i64* %RDX
  %3985 = load i64, i64* %RSI
  %3986 = mul i64 %3985, 8
  %3987 = add i64 %3986, %3984
  %3988 = load i64, i64* %PC
  %3989 = add i64 %3988, 5
  store i64 %3989, i64* %PC
  %3990 = inttoptr i64 %3987 to double*
  %3991 = load double, double* %3990
  %3992 = bitcast i8* %3983 to double*
  store double %3991, double* %3992, align 1, !tbaa !2452
  %3993 = getelementptr inbounds i8, i8* %3983, i64 8
  %3994 = bitcast i8* %3993 to double*
  store double 0.000000e+00, double* %3994, align 1, !tbaa !2452
  %3995 = bitcast %union.vec128_t* %XMM0 to i8*
  %3996 = load i64, i64* %PC
  %3997 = add i64 %3996, 5
  store i64 %3997, i64* %PC
  %3998 = bitcast i8* %3995 to i64*
  %3999 = load i64, i64* %3998, align 1
  store i64 %3999, i64* %RDX, align 1, !tbaa !2428
  %4000 = load i64, i64* %RDX
  %4001 = load i64, i64* %RAX
  %4002 = load i64, i64* %PC
  %4003 = add i64 %4002, 3
  store i64 %4003, i64* %PC
  %4004 = xor i64 %4001, %4000
  store i64 %4004, i64* %RDX, align 8, !tbaa !2428
  %4005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4005, align 1, !tbaa !2432
  %4006 = trunc i64 %4004 to i32
  %4007 = and i32 %4006, 255
  %4008 = call i32 @llvm.ctpop.i32(i32 %4007) #17
  %4009 = trunc i32 %4008 to i8
  %4010 = and i8 %4009, 1
  %4011 = xor i8 %4010, 1
  %4012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4011, i8* %4012, align 1, !tbaa !2446
  %4013 = icmp eq i64 %4004, 0
  %4014 = zext i1 %4013 to i8
  %4015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4014, i8* %4015, align 1, !tbaa !2448
  %4016 = lshr i64 %4004, 63
  %4017 = trunc i64 %4016 to i8
  %4018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4017, i8* %4018, align 1, !tbaa !2449
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4019, align 1, !tbaa !2450
  %4020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4020, align 1, !tbaa !2447
  %4021 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4022 = load i64, i64* %RDX
  %4023 = load i64, i64* %PC
  %4024 = add i64 %4023, 5
  store i64 %4024, i64* %PC
  %4025 = bitcast i8* %4021 to i64*
  store i64 %4022, i64* %4025, align 1, !tbaa !2428
  %4026 = getelementptr inbounds i8, i8* %4021, i64 8
  %4027 = bitcast i8* %4026 to i64*
  store i64 0, i64* %4027, align 1, !tbaa !2428
  %4028 = load i64, i64* %RBP
  %4029 = sub i64 %4028, 72
  %4030 = bitcast %union.vec128_t* %XMM0 to i8*
  %4031 = load i64, i64* %PC
  %4032 = add i64 %4031, 5
  store i64 %4032, i64* %PC
  %4033 = bitcast i8* %4030 to double*
  %4034 = load double, double* %4033, align 1
  %4035 = inttoptr i64 %4029 to double*
  store double %4034, double* %4035
  %4036 = load i64, i64* %RBP
  %4037 = sub i64 %4036, 24
  %4038 = load i64, i64* %PC
  %4039 = add i64 %4038, 4
  store i64 %4039, i64* %PC
  %4040 = inttoptr i64 %4037 to i64*
  %4041 = load i64, i64* %4040
  store i64 %4041, i64* %RDX, align 8, !tbaa !2428
  %4042 = load i64, i64* %RBP
  %4043 = sub i64 %4042, 40
  %4044 = load i64, i64* %PC
  %4045 = add i64 %4044, 4
  store i64 %4045, i64* %PC
  %4046 = inttoptr i64 %4043 to i32*
  %4047 = load i32, i32* %4046
  %4048 = sext i32 %4047 to i64
  store i64 %4048, i64* %RSI, align 8, !tbaa !2428
  %4049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4050 = load i64, i64* %RDX
  %4051 = load i64, i64* %RSI
  %4052 = mul i64 %4051, 8
  %4053 = add i64 %4052, %4050
  %4054 = load i64, i64* %PC
  %4055 = add i64 %4054, 5
  store i64 %4055, i64* %PC
  %4056 = inttoptr i64 %4053 to double*
  %4057 = load double, double* %4056
  %4058 = bitcast i8* %4049 to double*
  store double %4057, double* %4058, align 1, !tbaa !2452
  %4059 = getelementptr inbounds i8, i8* %4049, i64 8
  %4060 = bitcast i8* %4059 to double*
  store double 0.000000e+00, double* %4060, align 1, !tbaa !2452
  %4061 = load i64, i64* %RBP
  %4062 = sub i64 %4061, 80
  %4063 = bitcast %union.vec128_t* %XMM0 to i8*
  %4064 = load i64, i64* %PC
  %4065 = add i64 %4064, 5
  store i64 %4065, i64* %PC
  %4066 = bitcast i8* %4063 to double*
  %4067 = load double, double* %4066, align 1
  %4068 = inttoptr i64 %4062 to double*
  store double %4067, double* %4068
  %4069 = load i64, i64* %RBP
  %4070 = sub i64 %4069, 24
  %4071 = load i64, i64* %PC
  %4072 = add i64 %4071, 4
  store i64 %4072, i64* %PC
  %4073 = inttoptr i64 %4070 to i64*
  %4074 = load i64, i64* %4073
  store i64 %4074, i64* %RDX, align 8, !tbaa !2428
  %4075 = load i64, i64* %RBP
  %4076 = sub i64 %4075, 40
  %4077 = load i64, i64* %PC
  %4078 = add i64 %4077, 3
  store i64 %4078, i64* %PC
  %4079 = inttoptr i64 %4076 to i32*
  %4080 = load i32, i32* %4079
  %4081 = zext i32 %4080 to i64
  store i64 %4081, i64* %RCX, align 8, !tbaa !2428
  %4082 = load i64, i64* %RCX
  %4083 = load i64, i64* %PC
  %4084 = add i64 %4083, 3
  store i64 %4084, i64* %PC
  %4085 = trunc i64 %4082 to i32
  %4086 = add i32 1, %4085
  %4087 = zext i32 %4086 to i64
  store i64 %4087, i64* %RCX, align 8, !tbaa !2428
  %4088 = icmp ult i32 %4086, %4085
  %4089 = icmp ult i32 %4086, 1
  %4090 = or i1 %4088, %4089
  %4091 = zext i1 %4090 to i8
  %4092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4091, i8* %4092, align 1, !tbaa !2432
  %4093 = and i32 %4086, 255
  %4094 = call i32 @llvm.ctpop.i32(i32 %4093) #17
  %4095 = trunc i32 %4094 to i8
  %4096 = and i8 %4095, 1
  %4097 = xor i8 %4096, 1
  %4098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4097, i8* %4098, align 1, !tbaa !2446
  %4099 = xor i64 1, %4082
  %4100 = trunc i64 %4099 to i32
  %4101 = xor i32 %4100, %4086
  %4102 = lshr i32 %4101, 4
  %4103 = trunc i32 %4102 to i8
  %4104 = and i8 %4103, 1
  %4105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4104, i8* %4105, align 1, !tbaa !2447
  %4106 = icmp eq i32 %4086, 0
  %4107 = zext i1 %4106 to i8
  %4108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4107, i8* %4108, align 1, !tbaa !2448
  %4109 = lshr i32 %4086, 31
  %4110 = trunc i32 %4109 to i8
  %4111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4110, i8* %4111, align 1, !tbaa !2449
  %4112 = lshr i32 %4085, 31
  %4113 = xor i32 %4109, %4112
  %4114 = add nuw nsw i32 %4113, %4109
  %4115 = icmp eq i32 %4114, 2
  %4116 = zext i1 %4115 to i8
  %4117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4116, i8* %4117, align 1, !tbaa !2450
  %4118 = load i32, i32* %ECX
  %4119 = zext i32 %4118 to i64
  %4120 = load i64, i64* %PC
  %4121 = add i64 %4120, 3
  store i64 %4121, i64* %PC
  %4122 = shl i64 %4119, 32
  %4123 = ashr exact i64 %4122, 32
  store i64 %4123, i64* %RSI, align 8, !tbaa !2428
  %4124 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4125 = load i64, i64* %RDX
  %4126 = load i64, i64* %RSI
  %4127 = mul i64 %4126, 8
  %4128 = add i64 %4127, %4125
  %4129 = load i64, i64* %PC
  %4130 = add i64 %4129, 5
  store i64 %4130, i64* %PC
  %4131 = inttoptr i64 %4128 to double*
  %4132 = load double, double* %4131
  %4133 = bitcast i8* %4124 to double*
  store double %4132, double* %4133, align 1, !tbaa !2452
  %4134 = getelementptr inbounds i8, i8* %4124, i64 8
  %4135 = bitcast i8* %4134 to double*
  store double 0.000000e+00, double* %4135, align 1, !tbaa !2452
  %4136 = bitcast %union.vec128_t* %XMM0 to i8*
  %4137 = load i64, i64* %PC
  %4138 = add i64 %4137, 5
  store i64 %4138, i64* %PC
  %4139 = bitcast i8* %4136 to i64*
  %4140 = load i64, i64* %4139, align 1
  store i64 %4140, i64* %RDX, align 1, !tbaa !2428
  %4141 = load i64, i64* %RDX
  %4142 = load i64, i64* %RAX
  %4143 = load i64, i64* %PC
  %4144 = add i64 %4143, 3
  store i64 %4144, i64* %PC
  %4145 = xor i64 %4142, %4141
  store i64 %4145, i64* %RDX, align 8, !tbaa !2428
  %4146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4146, align 1, !tbaa !2432
  %4147 = trunc i64 %4145 to i32
  %4148 = and i32 %4147, 255
  %4149 = call i32 @llvm.ctpop.i32(i32 %4148) #17
  %4150 = trunc i32 %4149 to i8
  %4151 = and i8 %4150, 1
  %4152 = xor i8 %4151, 1
  %4153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4152, i8* %4153, align 1, !tbaa !2446
  %4154 = icmp eq i64 %4145, 0
  %4155 = zext i1 %4154 to i8
  %4156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4155, i8* %4156, align 1, !tbaa !2448
  %4157 = lshr i64 %4145, 63
  %4158 = trunc i64 %4157 to i8
  %4159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4158, i8* %4159, align 1, !tbaa !2449
  %4160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4160, align 1, !tbaa !2450
  %4161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4161, align 1, !tbaa !2447
  %4162 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4163 = load i64, i64* %RDX
  %4164 = load i64, i64* %PC
  %4165 = add i64 %4164, 5
  store i64 %4165, i64* %PC
  %4166 = bitcast i8* %4162 to i64*
  store i64 %4163, i64* %4166, align 1, !tbaa !2428
  %4167 = getelementptr inbounds i8, i8* %4162, i64 8
  %4168 = bitcast i8* %4167 to i64*
  store i64 0, i64* %4168, align 1, !tbaa !2428
  %4169 = load i64, i64* %RBP
  %4170 = sub i64 %4169, 88
  %4171 = bitcast %union.vec128_t* %XMM0 to i8*
  %4172 = load i64, i64* %PC
  %4173 = add i64 %4172, 5
  store i64 %4173, i64* %PC
  %4174 = bitcast i8* %4171 to double*
  %4175 = load double, double* %4174, align 1
  %4176 = inttoptr i64 %4170 to double*
  store double %4175, double* %4176
  %4177 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4178 = load i64, i64* %RBP
  %4179 = sub i64 %4178, 80
  %4180 = load i64, i64* %PC
  %4181 = add i64 %4180, 5
  store i64 %4181, i64* %PC
  %4182 = inttoptr i64 %4179 to double*
  %4183 = load double, double* %4182
  %4184 = bitcast i8* %4177 to double*
  store double %4183, double* %4184, align 1, !tbaa !2452
  %4185 = getelementptr inbounds i8, i8* %4177, i64 8
  %4186 = bitcast i8* %4185 to double*
  store double 0.000000e+00, double* %4186, align 1, !tbaa !2452
  %4187 = load i64, i64* %RBP
  %4188 = sub i64 %4187, 24
  %4189 = load i64, i64* %PC
  %4190 = add i64 %4189, 4
  store i64 %4190, i64* %PC
  %4191 = inttoptr i64 %4188 to i64*
  %4192 = load i64, i64* %4191
  store i64 %4192, i64* %RDX, align 8, !tbaa !2428
  %4193 = load i64, i64* %RBP
  %4194 = sub i64 %4193, 32
  %4195 = load i64, i64* %PC
  %4196 = add i64 %4195, 4
  store i64 %4196, i64* %PC
  %4197 = inttoptr i64 %4194 to i32*
  %4198 = load i32, i32* %4197
  %4199 = sext i32 %4198 to i64
  store i64 %4199, i64* %RSI, align 8, !tbaa !2428
  %4200 = load i64, i64* %RDX
  %4201 = load i64, i64* %RSI
  %4202 = mul i64 %4201, 8
  %4203 = add i64 %4202, %4200
  %4204 = bitcast %union.vec128_t* %XMM0 to i8*
  %4205 = load i64, i64* %PC
  %4206 = add i64 %4205, 5
  store i64 %4206, i64* %PC
  %4207 = bitcast i8* %4204 to double*
  %4208 = load double, double* %4207, align 1
  %4209 = inttoptr i64 %4203 to double*
  store double %4208, double* %4209
  %4210 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4211 = load i64, i64* %RBP
  %4212 = sub i64 %4211, 88
  %4213 = load i64, i64* %PC
  %4214 = add i64 %4213, 5
  store i64 %4214, i64* %PC
  %4215 = inttoptr i64 %4212 to double*
  %4216 = load double, double* %4215
  %4217 = bitcast i8* %4210 to double*
  store double %4216, double* %4217, align 1, !tbaa !2452
  %4218 = getelementptr inbounds i8, i8* %4210, i64 8
  %4219 = bitcast i8* %4218 to double*
  store double 0.000000e+00, double* %4219, align 1, !tbaa !2452
  %4220 = load i64, i64* %RBP
  %4221 = sub i64 %4220, 24
  %4222 = load i64, i64* %PC
  %4223 = add i64 %4222, 4
  store i64 %4223, i64* %PC
  %4224 = inttoptr i64 %4221 to i64*
  %4225 = load i64, i64* %4224
  store i64 %4225, i64* %RDX, align 8, !tbaa !2428
  %4226 = load i64, i64* %RBP
  %4227 = sub i64 %4226, 32
  %4228 = load i64, i64* %PC
  %4229 = add i64 %4228, 3
  store i64 %4229, i64* %PC
  %4230 = inttoptr i64 %4227 to i32*
  %4231 = load i32, i32* %4230
  %4232 = zext i32 %4231 to i64
  store i64 %4232, i64* %RCX, align 8, !tbaa !2428
  %4233 = load i64, i64* %RCX
  %4234 = load i64, i64* %PC
  %4235 = add i64 %4234, 3
  store i64 %4235, i64* %PC
  %4236 = trunc i64 %4233 to i32
  %4237 = add i32 1, %4236
  %4238 = zext i32 %4237 to i64
  store i64 %4238, i64* %RCX, align 8, !tbaa !2428
  %4239 = icmp ult i32 %4237, %4236
  %4240 = icmp ult i32 %4237, 1
  %4241 = or i1 %4239, %4240
  %4242 = zext i1 %4241 to i8
  %4243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4242, i8* %4243, align 1, !tbaa !2432
  %4244 = and i32 %4237, 255
  %4245 = call i32 @llvm.ctpop.i32(i32 %4244) #17
  %4246 = trunc i32 %4245 to i8
  %4247 = and i8 %4246, 1
  %4248 = xor i8 %4247, 1
  %4249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4248, i8* %4249, align 1, !tbaa !2446
  %4250 = xor i64 1, %4233
  %4251 = trunc i64 %4250 to i32
  %4252 = xor i32 %4251, %4237
  %4253 = lshr i32 %4252, 4
  %4254 = trunc i32 %4253 to i8
  %4255 = and i8 %4254, 1
  %4256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4255, i8* %4256, align 1, !tbaa !2447
  %4257 = icmp eq i32 %4237, 0
  %4258 = zext i1 %4257 to i8
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4258, i8* %4259, align 1, !tbaa !2448
  %4260 = lshr i32 %4237, 31
  %4261 = trunc i32 %4260 to i8
  %4262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4261, i8* %4262, align 1, !tbaa !2449
  %4263 = lshr i32 %4236, 31
  %4264 = xor i32 %4260, %4263
  %4265 = add nuw nsw i32 %4264, %4260
  %4266 = icmp eq i32 %4265, 2
  %4267 = zext i1 %4266 to i8
  %4268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4267, i8* %4268, align 1, !tbaa !2450
  %4269 = load i32, i32* %ECX
  %4270 = zext i32 %4269 to i64
  %4271 = load i64, i64* %PC
  %4272 = add i64 %4271, 3
  store i64 %4272, i64* %PC
  %4273 = shl i64 %4270, 32
  %4274 = ashr exact i64 %4273, 32
  store i64 %4274, i64* %RSI, align 8, !tbaa !2428
  %4275 = load i64, i64* %RDX
  %4276 = load i64, i64* %RSI
  %4277 = mul i64 %4276, 8
  %4278 = add i64 %4277, %4275
  %4279 = bitcast %union.vec128_t* %XMM0 to i8*
  %4280 = load i64, i64* %PC
  %4281 = add i64 %4280, 5
  store i64 %4281, i64* %PC
  %4282 = bitcast i8* %4279 to double*
  %4283 = load double, double* %4282, align 1
  %4284 = inttoptr i64 %4278 to double*
  store double %4283, double* %4284
  %4285 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4286 = load i64, i64* %RBP
  %4287 = sub i64 %4286, 64
  %4288 = load i64, i64* %PC
  %4289 = add i64 %4288, 5
  store i64 %4289, i64* %PC
  %4290 = inttoptr i64 %4287 to double*
  %4291 = load double, double* %4290
  %4292 = bitcast i8* %4285 to double*
  store double %4291, double* %4292, align 1, !tbaa !2452
  %4293 = getelementptr inbounds i8, i8* %4285, i64 8
  %4294 = bitcast i8* %4293 to double*
  store double 0.000000e+00, double* %4294, align 1, !tbaa !2452
  %4295 = load i64, i64* %RBP
  %4296 = sub i64 %4295, 24
  %4297 = load i64, i64* %PC
  %4298 = add i64 %4297, 4
  store i64 %4298, i64* %PC
  %4299 = inttoptr i64 %4296 to i64*
  %4300 = load i64, i64* %4299
  store i64 %4300, i64* %RDX, align 8, !tbaa !2428
  %4301 = load i64, i64* %RBP
  %4302 = sub i64 %4301, 40
  %4303 = load i64, i64* %PC
  %4304 = add i64 %4303, 4
  store i64 %4304, i64* %PC
  %4305 = inttoptr i64 %4302 to i32*
  %4306 = load i32, i32* %4305
  %4307 = sext i32 %4306 to i64
  store i64 %4307, i64* %RSI, align 8, !tbaa !2428
  %4308 = load i64, i64* %RDX
  %4309 = load i64, i64* %RSI
  %4310 = mul i64 %4309, 8
  %4311 = add i64 %4310, %4308
  %4312 = bitcast %union.vec128_t* %XMM0 to i8*
  %4313 = load i64, i64* %PC
  %4314 = add i64 %4313, 5
  store i64 %4314, i64* %PC
  %4315 = bitcast i8* %4312 to double*
  %4316 = load double, double* %4315, align 1
  %4317 = inttoptr i64 %4311 to double*
  store double %4316, double* %4317
  %4318 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4319 = load i64, i64* %RBP
  %4320 = sub i64 %4319, 72
  %4321 = load i64, i64* %PC
  %4322 = add i64 %4321, 5
  store i64 %4322, i64* %PC
  %4323 = inttoptr i64 %4320 to double*
  %4324 = load double, double* %4323
  %4325 = bitcast i8* %4318 to double*
  store double %4324, double* %4325, align 1, !tbaa !2452
  %4326 = getelementptr inbounds i8, i8* %4318, i64 8
  %4327 = bitcast i8* %4326 to double*
  store double 0.000000e+00, double* %4327, align 1, !tbaa !2452
  %4328 = load i64, i64* %RBP
  %4329 = sub i64 %4328, 24
  %4330 = load i64, i64* %PC
  %4331 = add i64 %4330, 4
  store i64 %4331, i64* %PC
  %4332 = inttoptr i64 %4329 to i64*
  %4333 = load i64, i64* %4332
  store i64 %4333, i64* %RDX, align 8, !tbaa !2428
  %4334 = load i64, i64* %RBP
  %4335 = sub i64 %4334, 40
  %4336 = load i64, i64* %PC
  %4337 = add i64 %4336, 3
  store i64 %4337, i64* %PC
  %4338 = inttoptr i64 %4335 to i32*
  %4339 = load i32, i32* %4338
  %4340 = zext i32 %4339 to i64
  store i64 %4340, i64* %RCX, align 8, !tbaa !2428
  %4341 = load i64, i64* %RCX
  %4342 = load i64, i64* %PC
  %4343 = add i64 %4342, 3
  store i64 %4343, i64* %PC
  %4344 = trunc i64 %4341 to i32
  %4345 = add i32 1, %4344
  %4346 = zext i32 %4345 to i64
  store i64 %4346, i64* %RCX, align 8, !tbaa !2428
  %4347 = icmp ult i32 %4345, %4344
  %4348 = icmp ult i32 %4345, 1
  %4349 = or i1 %4347, %4348
  %4350 = zext i1 %4349 to i8
  %4351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4350, i8* %4351, align 1, !tbaa !2432
  %4352 = and i32 %4345, 255
  %4353 = call i32 @llvm.ctpop.i32(i32 %4352) #17
  %4354 = trunc i32 %4353 to i8
  %4355 = and i8 %4354, 1
  %4356 = xor i8 %4355, 1
  %4357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4356, i8* %4357, align 1, !tbaa !2446
  %4358 = xor i64 1, %4341
  %4359 = trunc i64 %4358 to i32
  %4360 = xor i32 %4359, %4345
  %4361 = lshr i32 %4360, 4
  %4362 = trunc i32 %4361 to i8
  %4363 = and i8 %4362, 1
  %4364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4363, i8* %4364, align 1, !tbaa !2447
  %4365 = icmp eq i32 %4345, 0
  %4366 = zext i1 %4365 to i8
  %4367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4366, i8* %4367, align 1, !tbaa !2448
  %4368 = lshr i32 %4345, 31
  %4369 = trunc i32 %4368 to i8
  %4370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4369, i8* %4370, align 1, !tbaa !2449
  %4371 = lshr i32 %4344, 31
  %4372 = xor i32 %4368, %4371
  %4373 = add nuw nsw i32 %4372, %4368
  %4374 = icmp eq i32 %4373, 2
  %4375 = zext i1 %4374 to i8
  %4376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4375, i8* %4376, align 1, !tbaa !2450
  %4377 = load i32, i32* %ECX
  %4378 = zext i32 %4377 to i64
  %4379 = load i64, i64* %PC
  %4380 = add i64 %4379, 3
  store i64 %4380, i64* %PC
  %4381 = shl i64 %4378, 32
  %4382 = ashr exact i64 %4381, 32
  store i64 %4382, i64* %RSI, align 8, !tbaa !2428
  %4383 = load i64, i64* %RDX
  %4384 = load i64, i64* %RSI
  %4385 = mul i64 %4384, 8
  %4386 = add i64 %4385, %4383
  %4387 = bitcast %union.vec128_t* %XMM0 to i8*
  %4388 = load i64, i64* %PC
  %4389 = add i64 %4388, 5
  store i64 %4389, i64* %PC
  %4390 = bitcast i8* %4387 to double*
  %4391 = load double, double* %4390, align 1
  %4392 = inttoptr i64 %4386 to double*
  store double %4391, double* %4392
  %4393 = load i64, i64* %RBP
  %4394 = sub i64 %4393, 52
  %4395 = load i64, i64* %PC
  %4396 = add i64 %4395, 3
  store i64 %4396, i64* %PC
  %4397 = inttoptr i64 %4394 to i32*
  %4398 = load i32, i32* %4397
  %4399 = zext i32 %4398 to i64
  store i64 %4399, i64* %RCX, align 8, !tbaa !2428
  %4400 = load i64, i64* %RCX
  %4401 = load i64, i64* %RBP
  %4402 = sub i64 %4401, 40
  %4403 = load i64, i64* %PC
  %4404 = add i64 %4403, 3
  store i64 %4404, i64* %PC
  %4405 = trunc i64 %4400 to i32
  %4406 = inttoptr i64 %4402 to i32*
  %4407 = load i32, i32* %4406
  %4408 = add i32 %4407, %4405
  %4409 = zext i32 %4408 to i64
  store i64 %4409, i64* %RCX, align 8, !tbaa !2428
  %4410 = icmp ult i32 %4408, %4405
  %4411 = icmp ult i32 %4408, %4407
  %4412 = or i1 %4410, %4411
  %4413 = zext i1 %4412 to i8
  %4414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4413, i8* %4414, align 1, !tbaa !2432
  %4415 = and i32 %4408, 255
  %4416 = call i32 @llvm.ctpop.i32(i32 %4415) #17
  %4417 = trunc i32 %4416 to i8
  %4418 = and i8 %4417, 1
  %4419 = xor i8 %4418, 1
  %4420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4419, i8* %4420, align 1, !tbaa !2446
  %4421 = xor i32 %4407, %4405
  %4422 = xor i32 %4421, %4408
  %4423 = lshr i32 %4422, 4
  %4424 = trunc i32 %4423 to i8
  %4425 = and i8 %4424, 1
  %4426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4425, i8* %4426, align 1, !tbaa !2447
  %4427 = icmp eq i32 %4408, 0
  %4428 = zext i1 %4427 to i8
  %4429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4428, i8* %4429, align 1, !tbaa !2448
  %4430 = lshr i32 %4408, 31
  %4431 = trunc i32 %4430 to i8
  %4432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4431, i8* %4432, align 1, !tbaa !2449
  %4433 = lshr i32 %4405, 31
  %4434 = lshr i32 %4407, 31
  %4435 = xor i32 %4430, %4433
  %4436 = xor i32 %4430, %4434
  %4437 = add nuw nsw i32 %4435, %4436
  %4438 = icmp eq i32 %4437, 2
  %4439 = zext i1 %4438 to i8
  %4440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4439, i8* %4440, align 1, !tbaa !2450
  %4441 = load i64, i64* %RBP
  %4442 = sub i64 %4441, 40
  %4443 = load i32, i32* %ECX
  %4444 = zext i32 %4443 to i64
  %4445 = load i64, i64* %PC
  %4446 = add i64 %4445, 3
  store i64 %4446, i64* %PC
  %4447 = inttoptr i64 %4442 to i32*
  store i32 %4443, i32* %4447
  %4448 = load i64, i64* %RBP
  %4449 = sub i64 %4448, 24
  %4450 = load i64, i64* %PC
  %4451 = add i64 %4450, 4
  store i64 %4451, i64* %PC
  %4452 = inttoptr i64 %4449 to i64*
  %4453 = load i64, i64* %4452
  store i64 %4453, i64* %RDX, align 8, !tbaa !2428
  %4454 = load i64, i64* %RBP
  %4455 = sub i64 %4454, 40
  %4456 = load i64, i64* %PC
  %4457 = add i64 %4456, 3
  store i64 %4457, i64* %PC
  %4458 = inttoptr i64 %4455 to i32*
  %4459 = load i32, i32* %4458
  %4460 = zext i32 %4459 to i64
  store i64 %4460, i64* %RCX, align 8, !tbaa !2428
  %4461 = load i64, i64* %RCX
  %4462 = load i64, i64* %PC
  %4463 = add i64 %4462, 3
  store i64 %4463, i64* %PC
  %4464 = trunc i64 %4461 to i32
  %4465 = add i32 1, %4464
  %4466 = zext i32 %4465 to i64
  store i64 %4466, i64* %RCX, align 8, !tbaa !2428
  %4467 = icmp ult i32 %4465, %4464
  %4468 = icmp ult i32 %4465, 1
  %4469 = or i1 %4467, %4468
  %4470 = zext i1 %4469 to i8
  %4471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4470, i8* %4471, align 1, !tbaa !2432
  %4472 = and i32 %4465, 255
  %4473 = call i32 @llvm.ctpop.i32(i32 %4472) #17
  %4474 = trunc i32 %4473 to i8
  %4475 = and i8 %4474, 1
  %4476 = xor i8 %4475, 1
  %4477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4476, i8* %4477, align 1, !tbaa !2446
  %4478 = xor i64 1, %4461
  %4479 = trunc i64 %4478 to i32
  %4480 = xor i32 %4479, %4465
  %4481 = lshr i32 %4480, 4
  %4482 = trunc i32 %4481 to i8
  %4483 = and i8 %4482, 1
  %4484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4483, i8* %4484, align 1, !tbaa !2447
  %4485 = icmp eq i32 %4465, 0
  %4486 = zext i1 %4485 to i8
  %4487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4486, i8* %4487, align 1, !tbaa !2448
  %4488 = lshr i32 %4465, 31
  %4489 = trunc i32 %4488 to i8
  %4490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4489, i8* %4490, align 1, !tbaa !2449
  %4491 = lshr i32 %4464, 31
  %4492 = xor i32 %4488, %4491
  %4493 = add nuw nsw i32 %4492, %4488
  %4494 = icmp eq i32 %4493, 2
  %4495 = zext i1 %4494 to i8
  %4496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4495, i8* %4496, align 1, !tbaa !2450
  %4497 = load i32, i32* %ECX
  %4498 = zext i32 %4497 to i64
  %4499 = load i64, i64* %PC
  %4500 = add i64 %4499, 3
  store i64 %4500, i64* %PC
  %4501 = shl i64 %4498, 32
  %4502 = ashr exact i64 %4501, 32
  store i64 %4502, i64* %RSI, align 8, !tbaa !2428
  %4503 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4504 = load i64, i64* %RDX
  %4505 = load i64, i64* %RSI
  %4506 = mul i64 %4505, 8
  %4507 = add i64 %4506, %4504
  %4508 = load i64, i64* %PC
  %4509 = add i64 %4508, 5
  store i64 %4509, i64* %PC
  %4510 = inttoptr i64 %4507 to double*
  %4511 = load double, double* %4510
  %4512 = bitcast i8* %4503 to double*
  store double %4511, double* %4512, align 1, !tbaa !2452
  %4513 = getelementptr inbounds i8, i8* %4503, i64 8
  %4514 = bitcast i8* %4513 to double*
  store double 0.000000e+00, double* %4514, align 1, !tbaa !2452
  %4515 = bitcast %union.vec128_t* %XMM0 to i8*
  %4516 = load i64, i64* %PC
  %4517 = add i64 %4516, 5
  store i64 %4517, i64* %PC
  %4518 = bitcast i8* %4515 to i64*
  %4519 = load i64, i64* %4518, align 1
  store i64 %4519, i64* %RDX, align 1, !tbaa !2428
  %4520 = load i64, i64* %RDX
  %4521 = load i64, i64* %RAX
  %4522 = load i64, i64* %PC
  %4523 = add i64 %4522, 3
  store i64 %4523, i64* %PC
  %4524 = xor i64 %4521, %4520
  store i64 %4524, i64* %RDX, align 8, !tbaa !2428
  %4525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4525, align 1, !tbaa !2432
  %4526 = trunc i64 %4524 to i32
  %4527 = and i32 %4526, 255
  %4528 = call i32 @llvm.ctpop.i32(i32 %4527) #17
  %4529 = trunc i32 %4528 to i8
  %4530 = and i8 %4529, 1
  %4531 = xor i8 %4530, 1
  %4532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4531, i8* %4532, align 1, !tbaa !2446
  %4533 = icmp eq i64 %4524, 0
  %4534 = zext i1 %4533 to i8
  %4535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4534, i8* %4535, align 1, !tbaa !2448
  %4536 = lshr i64 %4524, 63
  %4537 = trunc i64 %4536 to i8
  %4538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4537, i8* %4538, align 1, !tbaa !2449
  %4539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4539, align 1, !tbaa !2450
  %4540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4540, align 1, !tbaa !2447
  %4541 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4542 = load i64, i64* %RDX
  %4543 = load i64, i64* %PC
  %4544 = add i64 %4543, 5
  store i64 %4544, i64* %PC
  %4545 = bitcast i8* %4541 to i64*
  store i64 %4542, i64* %4545, align 1, !tbaa !2428
  %4546 = getelementptr inbounds i8, i8* %4541, i64 8
  %4547 = bitcast i8* %4546 to i64*
  store i64 0, i64* %4547, align 1, !tbaa !2428
  %4548 = load i64, i64* %RBP
  %4549 = sub i64 %4548, 24
  %4550 = load i64, i64* %PC
  %4551 = add i64 %4550, 4
  store i64 %4551, i64* %PC
  %4552 = inttoptr i64 %4549 to i64*
  %4553 = load i64, i64* %4552
  store i64 %4553, i64* %RAX, align 8, !tbaa !2428
  %4554 = load i64, i64* %RBP
  %4555 = sub i64 %4554, 40
  %4556 = load i64, i64* %PC
  %4557 = add i64 %4556, 3
  store i64 %4557, i64* %PC
  %4558 = inttoptr i64 %4555 to i32*
  %4559 = load i32, i32* %4558
  %4560 = zext i32 %4559 to i64
  store i64 %4560, i64* %RCX, align 8, !tbaa !2428
  %4561 = load i64, i64* %RCX
  %4562 = load i64, i64* %PC
  %4563 = add i64 %4562, 3
  store i64 %4563, i64* %PC
  %4564 = trunc i64 %4561 to i32
  %4565 = add i32 1, %4564
  %4566 = zext i32 %4565 to i64
  store i64 %4566, i64* %RCX, align 8, !tbaa !2428
  %4567 = icmp ult i32 %4565, %4564
  %4568 = icmp ult i32 %4565, 1
  %4569 = or i1 %4567, %4568
  %4570 = zext i1 %4569 to i8
  %4571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4570, i8* %4571, align 1, !tbaa !2432
  %4572 = and i32 %4565, 255
  %4573 = call i32 @llvm.ctpop.i32(i32 %4572) #17
  %4574 = trunc i32 %4573 to i8
  %4575 = and i8 %4574, 1
  %4576 = xor i8 %4575, 1
  %4577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4576, i8* %4577, align 1, !tbaa !2446
  %4578 = xor i64 1, %4561
  %4579 = trunc i64 %4578 to i32
  %4580 = xor i32 %4579, %4565
  %4581 = lshr i32 %4580, 4
  %4582 = trunc i32 %4581 to i8
  %4583 = and i8 %4582, 1
  %4584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4583, i8* %4584, align 1, !tbaa !2447
  %4585 = icmp eq i32 %4565, 0
  %4586 = zext i1 %4585 to i8
  %4587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4586, i8* %4587, align 1, !tbaa !2448
  %4588 = lshr i32 %4565, 31
  %4589 = trunc i32 %4588 to i8
  %4590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4589, i8* %4590, align 1, !tbaa !2449
  %4591 = lshr i32 %4564, 31
  %4592 = xor i32 %4588, %4591
  %4593 = add nuw nsw i32 %4592, %4588
  %4594 = icmp eq i32 %4593, 2
  %4595 = zext i1 %4594 to i8
  %4596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4595, i8* %4596, align 1, !tbaa !2450
  %4597 = load i32, i32* %ECX
  %4598 = zext i32 %4597 to i64
  %4599 = load i64, i64* %PC
  %4600 = add i64 %4599, 3
  store i64 %4600, i64* %PC
  %4601 = shl i64 %4598, 32
  %4602 = ashr exact i64 %4601, 32
  store i64 %4602, i64* %RDX, align 8, !tbaa !2428
  %4603 = load i64, i64* %RAX
  %4604 = load i64, i64* %RDX
  %4605 = mul i64 %4604, 8
  %4606 = add i64 %4605, %4603
  %4607 = bitcast %union.vec128_t* %XMM0 to i8*
  %4608 = load i64, i64* %PC
  %4609 = add i64 %4608, 5
  store i64 %4609, i64* %PC
  %4610 = bitcast i8* %4607 to double*
  %4611 = load double, double* %4610, align 1
  %4612 = inttoptr i64 %4606 to double*
  store double %4611, double* %4612
  %4613 = load i64, i64* %RBP
  %4614 = sub i64 %4613, 36
  %4615 = load i64, i64* %PC
  %4616 = add i64 %4615, 3
  store i64 %4616, i64* %PC
  %4617 = inttoptr i64 %4614 to i32*
  %4618 = load i32, i32* %4617
  %4619 = zext i32 %4618 to i64
  store i64 %4619, i64* %RAX, align 8, !tbaa !2428
  %4620 = load i64, i64* %RAX
  %4621 = load i64, i64* %PC
  %4622 = add i64 %4621, 3
  store i64 %4622, i64* %PC
  %4623 = trunc i64 %4620 to i32
  %4624 = add i32 1, %4623
  %4625 = zext i32 %4624 to i64
  store i64 %4625, i64* %RAX, align 8, !tbaa !2428
  %4626 = icmp ult i32 %4624, %4623
  %4627 = icmp ult i32 %4624, 1
  %4628 = or i1 %4626, %4627
  %4629 = zext i1 %4628 to i8
  %4630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4629, i8* %4630, align 1, !tbaa !2432
  %4631 = and i32 %4624, 255
  %4632 = call i32 @llvm.ctpop.i32(i32 %4631) #17
  %4633 = trunc i32 %4632 to i8
  %4634 = and i8 %4633, 1
  %4635 = xor i8 %4634, 1
  %4636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4635, i8* %4636, align 1, !tbaa !2446
  %4637 = xor i64 1, %4620
  %4638 = trunc i64 %4637 to i32
  %4639 = xor i32 %4638, %4624
  %4640 = lshr i32 %4639, 4
  %4641 = trunc i32 %4640 to i8
  %4642 = and i8 %4641, 1
  %4643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4642, i8* %4643, align 1, !tbaa !2447
  %4644 = icmp eq i32 %4624, 0
  %4645 = zext i1 %4644 to i8
  %4646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4645, i8* %4646, align 1, !tbaa !2448
  %4647 = lshr i32 %4624, 31
  %4648 = trunc i32 %4647 to i8
  %4649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4648, i8* %4649, align 1, !tbaa !2449
  %4650 = lshr i32 %4623, 31
  %4651 = xor i32 %4647, %4650
  %4652 = add nuw nsw i32 %4651, %4647
  %4653 = icmp eq i32 %4652, 2
  %4654 = zext i1 %4653 to i8
  %4655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4654, i8* %4655, align 1, !tbaa !2450
  %4656 = load i64, i64* %RBP
  %4657 = sub i64 %4656, 36
  %4658 = load i32, i32* %EAX
  %4659 = zext i32 %4658 to i64
  %4660 = load i64, i64* %PC
  %4661 = add i64 %4660, 3
  store i64 %4661, i64* %PC
  %4662 = inttoptr i64 %4657 to i32*
  store i32 %4658, i32* %4662
  %4663 = load i64, i64* %PC
  %4664 = sub i64 %4663, 1271
  %4665 = load i64, i64* %PC
  %4666 = add i64 %4665, 5
  store i64 %4666, i64* %PC
  %4667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4664, i64* %4667, align 8, !tbaa !2428
  br label %block_401caa

block_401cbd:                                     ; preds = %block_401cb6, %block_401cc9
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_401cb6 ], [ %MEMORY.0, %block_401cc9 ]
  %4668 = load i64, i64* %RBP
  %4669 = sub i64 %4668, 28
  %4670 = load i64, i64* %PC
  %4671 = add i64 %4670, 3
  store i64 %4671, i64* %PC
  %4672 = inttoptr i64 %4669 to i32*
  %4673 = load i32, i32* %4672
  %4674 = zext i32 %4673 to i64
  store i64 %4674, i64* %RAX, align 8, !tbaa !2428
  %4675 = load i32, i32* %EAX
  %4676 = zext i32 %4675 to i64
  %4677 = load i64, i64* %RBP
  %4678 = sub i64 %4677, 36
  %4679 = load i64, i64* %PC
  %4680 = add i64 %4679, 3
  store i64 %4680, i64* %PC
  %4681 = inttoptr i64 %4678 to i32*
  %4682 = load i32, i32* %4681
  %4683 = sub i32 %4675, %4682
  %4684 = icmp ult i32 %4675, %4682
  %4685 = zext i1 %4684 to i8
  %4686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4685, i8* %4686, align 1, !tbaa !2432
  %4687 = and i32 %4683, 255
  %4688 = call i32 @llvm.ctpop.i32(i32 %4687) #17
  %4689 = trunc i32 %4688 to i8
  %4690 = and i8 %4689, 1
  %4691 = xor i8 %4690, 1
  %4692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4691, i8* %4692, align 1, !tbaa !2446
  %4693 = xor i32 %4682, %4675
  %4694 = xor i32 %4693, %4683
  %4695 = lshr i32 %4694, 4
  %4696 = trunc i32 %4695 to i8
  %4697 = and i8 %4696, 1
  %4698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4697, i8* %4698, align 1, !tbaa !2447
  %4699 = icmp eq i32 %4683, 0
  %4700 = zext i1 %4699 to i8
  %4701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4700, i8* %4701, align 1, !tbaa !2448
  %4702 = lshr i32 %4683, 31
  %4703 = trunc i32 %4702 to i8
  %4704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4703, i8* %4704, align 1, !tbaa !2449
  %4705 = lshr i32 %4675, 31
  %4706 = lshr i32 %4682, 31
  %4707 = xor i32 %4706, %4705
  %4708 = xor i32 %4702, %4705
  %4709 = add nuw nsw i32 %4708, %4707
  %4710 = icmp eq i32 %4709, 2
  %4711 = zext i1 %4710 to i8
  %4712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4711, i8* %4712, align 1, !tbaa !2450
  %4713 = load i64, i64* %PC
  %4714 = add i64 %4713, 892
  %4715 = load i64, i64* %PC
  %4716 = add i64 %4715, 6
  %4717 = load i64, i64* %PC
  %4718 = add i64 %4717, 6
  store i64 %4718, i64* %PC
  %4719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4720 = load i8, i8* %4719, align 1, !tbaa !2449
  %4721 = icmp ne i8 %4720, 0
  %4722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4723 = load i8, i8* %4722, align 1, !tbaa !2450
  %4724 = icmp ne i8 %4723, 0
  %4725 = xor i1 %4721, %4724
  %4726 = xor i1 %4725, true
  %4727 = zext i1 %4726 to i8
  store i8 %4727, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4729 = select i1 %4725, i64 %4716, i64 %4714
  store i64 %4729, i64* %4728, align 8, !tbaa !2428
  %4730 = load i8, i8* %BRANCH_TAKEN
  %4731 = icmp eq i8 %4730, 1
  %4732 = load i64, i64* %PC
  %4733 = add i64 %4732, 10
  store i64 %4733, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %4734 = load i64, i64* %RBP
  br i1 %4731, label %block_40203f, label %block_401cc9

block_401cb6:                                     ; preds = %block_401caa
  %4735 = load i64, i64* %RBP
  %4736 = sub i64 %4735, 28
  %4737 = load i64, i64* %PC
  %4738 = add i64 %4737, 7
  store i64 %4738, i64* %PC
  %4739 = inttoptr i64 %4736 to i32*
  store i32 0, i32* %4739
  br label %block_401cbd

block_40222b:                                     ; preds = %block_40221f
  %4740 = sub i64 %6248, 28
  %4741 = load i64, i64* %PC
  %4742 = add i64 %4741, 3
  store i64 %4742, i64* %PC
  %4743 = inttoptr i64 %4740 to i32*
  %4744 = load i32, i32* %4743
  %4745 = zext i32 %4744 to i64
  store i64 %4745, i64* %RCX, align 8, !tbaa !2428
  %4746 = load i64, i64* %RCX
  %4747 = load i64, i64* %PC
  %4748 = add i64 %4747, 3
  store i64 %4748, i64* %PC
  %4749 = trunc i64 %4746 to i32
  %4750 = shl i32 %4749, 1
  %4751 = icmp slt i32 %4749, 0
  %4752 = icmp slt i32 %4750, 0
  %4753 = xor i1 %4751, %4752
  %4754 = zext i32 %4750 to i64
  store i64 %4754, i64* %RCX, align 8, !tbaa !2428
  %4755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4756 = zext i1 %4751 to i8
  store i8 %4756, i8* %4755, align 1, !tbaa !2451
  %4757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4758 = and i32 %4750, 254
  %4759 = call i32 @llvm.ctpop.i32(i32 %4758) #17
  %4760 = trunc i32 %4759 to i8
  %4761 = and i8 %4760, 1
  %4762 = xor i8 %4761, 1
  store i8 %4762, i8* %4757, align 1, !tbaa !2451
  %4763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4763, align 1, !tbaa !2451
  %4764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4765 = icmp eq i32 %4750, 0
  %4766 = zext i1 %4765 to i8
  store i8 %4766, i8* %4764, align 1, !tbaa !2451
  %4767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4768 = lshr i32 %4750, 31
  %4769 = trunc i32 %4768 to i8
  store i8 %4769, i8* %4767, align 1, !tbaa !2451
  %4770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4771 = zext i1 %4753 to i8
  store i8 %4771, i8* %4770, align 1, !tbaa !2451
  %4772 = load i64, i64* %RBP
  %4773 = sub i64 %4772, 16
  %4774 = load i64, i64* %PC
  %4775 = add i64 %4774, 4
  store i64 %4775, i64* %PC
  %4776 = inttoptr i64 %4773 to i64*
  %4777 = load i64, i64* %4776
  store i64 %4777, i64* %RDX, align 8, !tbaa !2428
  %4778 = load i64, i64* %RBP
  %4779 = sub i64 %4778, 36
  %4780 = load i64, i64* %PC
  %4781 = add i64 %4780, 4
  store i64 %4781, i64* %PC
  %4782 = inttoptr i64 %4779 to i32*
  %4783 = load i32, i32* %4782
  %4784 = sext i32 %4783 to i64
  store i64 %4784, i64* %RSI, align 8, !tbaa !2428
  %4785 = load i64, i64* %RCX
  %4786 = load i64, i64* %RDX
  %4787 = load i64, i64* %RSI
  %4788 = mul i64 %4787, 4
  %4789 = add i64 %4788, %4786
  %4790 = load i64, i64* %PC
  %4791 = add i64 %4790, 3
  store i64 %4791, i64* %PC
  %4792 = trunc i64 %4785 to i32
  %4793 = inttoptr i64 %4789 to i32*
  %4794 = load i32, i32* %4793
  %4795 = add i32 %4794, %4792
  %4796 = zext i32 %4795 to i64
  store i64 %4796, i64* %RCX, align 8, !tbaa !2428
  %4797 = icmp ult i32 %4795, %4792
  %4798 = icmp ult i32 %4795, %4794
  %4799 = or i1 %4797, %4798
  %4800 = zext i1 %4799 to i8
  %4801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4800, i8* %4801, align 1, !tbaa !2432
  %4802 = and i32 %4795, 255
  %4803 = call i32 @llvm.ctpop.i32(i32 %4802) #17
  %4804 = trunc i32 %4803 to i8
  %4805 = and i8 %4804, 1
  %4806 = xor i8 %4805, 1
  %4807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4806, i8* %4807, align 1, !tbaa !2446
  %4808 = xor i32 %4794, %4792
  %4809 = xor i32 %4808, %4795
  %4810 = lshr i32 %4809, 4
  %4811 = trunc i32 %4810 to i8
  %4812 = and i8 %4811, 1
  %4813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4812, i8* %4813, align 1, !tbaa !2447
  %4814 = icmp eq i32 %4795, 0
  %4815 = zext i1 %4814 to i8
  %4816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4815, i8* %4816, align 1, !tbaa !2448
  %4817 = lshr i32 %4795, 31
  %4818 = trunc i32 %4817 to i8
  %4819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4818, i8* %4819, align 1, !tbaa !2449
  %4820 = lshr i32 %4792, 31
  %4821 = lshr i32 %4794, 31
  %4822 = xor i32 %4817, %4820
  %4823 = xor i32 %4817, %4821
  %4824 = add nuw nsw i32 %4822, %4823
  %4825 = icmp eq i32 %4824, 2
  %4826 = zext i1 %4825 to i8
  %4827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4826, i8* %4827, align 1, !tbaa !2450
  %4828 = load i64, i64* %RBP
  %4829 = sub i64 %4828, 32
  %4830 = load i32, i32* %ECX
  %4831 = zext i32 %4830 to i64
  %4832 = load i64, i64* %PC
  %4833 = add i64 %4832, 3
  store i64 %4833, i64* %PC
  %4834 = inttoptr i64 %4829 to i32*
  store i32 %4830, i32* %4834
  %4835 = load i64, i64* %RBP
  %4836 = sub i64 %4835, 36
  %4837 = load i64, i64* %PC
  %4838 = add i64 %4837, 3
  store i64 %4838, i64* %PC
  %4839 = inttoptr i64 %4836 to i32*
  %4840 = load i32, i32* %4839
  %4841 = zext i32 %4840 to i64
  store i64 %4841, i64* %RCX, align 8, !tbaa !2428
  %4842 = load i64, i64* %RCX
  %4843 = load i64, i64* %PC
  %4844 = add i64 %4843, 3
  store i64 %4844, i64* %PC
  %4845 = trunc i64 %4842 to i32
  %4846 = shl i32 %4845, 1
  %4847 = icmp slt i32 %4845, 0
  %4848 = icmp slt i32 %4846, 0
  %4849 = xor i1 %4847, %4848
  %4850 = zext i32 %4846 to i64
  store i64 %4850, i64* %RCX, align 8, !tbaa !2428
  %4851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4852 = zext i1 %4847 to i8
  store i8 %4852, i8* %4851, align 1, !tbaa !2451
  %4853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4854 = and i32 %4846, 254
  %4855 = call i32 @llvm.ctpop.i32(i32 %4854) #17
  %4856 = trunc i32 %4855 to i8
  %4857 = and i8 %4856, 1
  %4858 = xor i8 %4857, 1
  store i8 %4858, i8* %4853, align 1, !tbaa !2451
  %4859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4859, align 1, !tbaa !2451
  %4860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4861 = icmp eq i32 %4846, 0
  %4862 = zext i1 %4861 to i8
  store i8 %4862, i8* %4860, align 1, !tbaa !2451
  %4863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4864 = lshr i32 %4846, 31
  %4865 = trunc i32 %4864 to i8
  store i8 %4865, i8* %4863, align 1, !tbaa !2451
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4867 = zext i1 %4849 to i8
  store i8 %4867, i8* %4866, align 1, !tbaa !2451
  %4868 = load i64, i64* %RBP
  %4869 = sub i64 %4868, 16
  %4870 = load i64, i64* %PC
  %4871 = add i64 %4870, 4
  store i64 %4871, i64* %PC
  %4872 = inttoptr i64 %4869 to i64*
  %4873 = load i64, i64* %4872
  store i64 %4873, i64* %RDX, align 8, !tbaa !2428
  %4874 = load i64, i64* %RBP
  %4875 = sub i64 %4874, 28
  %4876 = load i64, i64* %PC
  %4877 = add i64 %4876, 4
  store i64 %4877, i64* %PC
  %4878 = inttoptr i64 %4875 to i32*
  %4879 = load i32, i32* %4878
  %4880 = sext i32 %4879 to i64
  store i64 %4880, i64* %RSI, align 8, !tbaa !2428
  %4881 = load i64, i64* %RCX
  %4882 = load i64, i64* %RDX
  %4883 = load i64, i64* %RSI
  %4884 = mul i64 %4883, 4
  %4885 = add i64 %4884, %4882
  %4886 = load i64, i64* %PC
  %4887 = add i64 %4886, 3
  store i64 %4887, i64* %PC
  %4888 = trunc i64 %4881 to i32
  %4889 = inttoptr i64 %4885 to i32*
  %4890 = load i32, i32* %4889
  %4891 = add i32 %4890, %4888
  %4892 = zext i32 %4891 to i64
  store i64 %4892, i64* %RCX, align 8, !tbaa !2428
  %4893 = icmp ult i32 %4891, %4888
  %4894 = icmp ult i32 %4891, %4890
  %4895 = or i1 %4893, %4894
  %4896 = zext i1 %4895 to i8
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4896, i8* %4897, align 1, !tbaa !2432
  %4898 = and i32 %4891, 255
  %4899 = call i32 @llvm.ctpop.i32(i32 %4898) #17
  %4900 = trunc i32 %4899 to i8
  %4901 = and i8 %4900, 1
  %4902 = xor i8 %4901, 1
  %4903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4902, i8* %4903, align 1, !tbaa !2446
  %4904 = xor i32 %4890, %4888
  %4905 = xor i32 %4904, %4891
  %4906 = lshr i32 %4905, 4
  %4907 = trunc i32 %4906 to i8
  %4908 = and i8 %4907, 1
  %4909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4908, i8* %4909, align 1, !tbaa !2447
  %4910 = icmp eq i32 %4891, 0
  %4911 = zext i1 %4910 to i8
  %4912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4911, i8* %4912, align 1, !tbaa !2448
  %4913 = lshr i32 %4891, 31
  %4914 = trunc i32 %4913 to i8
  %4915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4914, i8* %4915, align 1, !tbaa !2449
  %4916 = lshr i32 %4888, 31
  %4917 = lshr i32 %4890, 31
  %4918 = xor i32 %4913, %4916
  %4919 = xor i32 %4913, %4917
  %4920 = add nuw nsw i32 %4918, %4919
  %4921 = icmp eq i32 %4920, 2
  %4922 = zext i1 %4921 to i8
  %4923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4922, i8* %4923, align 1, !tbaa !2450
  %4924 = load i64, i64* %RBP
  %4925 = sub i64 %4924, 40
  %4926 = load i32, i32* %ECX
  %4927 = zext i32 %4926 to i64
  %4928 = load i64, i64* %PC
  %4929 = add i64 %4928, 3
  store i64 %4929, i64* %PC
  %4930 = inttoptr i64 %4925 to i32*
  store i32 %4926, i32* %4930
  %4931 = load i64, i64* %RBP
  %4932 = sub i64 %4931, 24
  %4933 = load i64, i64* %PC
  %4934 = add i64 %4933, 4
  store i64 %4934, i64* %PC
  %4935 = inttoptr i64 %4932 to i64*
  %4936 = load i64, i64* %4935
  store i64 %4936, i64* %RDX, align 8, !tbaa !2428
  %4937 = load i64, i64* %RBP
  %4938 = sub i64 %4937, 32
  %4939 = load i64, i64* %PC
  %4940 = add i64 %4939, 4
  store i64 %4940, i64* %PC
  %4941 = inttoptr i64 %4938 to i32*
  %4942 = load i32, i32* %4941
  %4943 = sext i32 %4942 to i64
  store i64 %4943, i64* %RSI, align 8, !tbaa !2428
  %4944 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4945 = load i64, i64* %RDX
  %4946 = load i64, i64* %RSI
  %4947 = mul i64 %4946, 8
  %4948 = add i64 %4947, %4945
  %4949 = load i64, i64* %PC
  %4950 = add i64 %4949, 5
  store i64 %4950, i64* %PC
  %4951 = inttoptr i64 %4948 to double*
  %4952 = load double, double* %4951
  %4953 = bitcast i8* %4944 to double*
  store double %4952, double* %4953, align 1, !tbaa !2452
  %4954 = getelementptr inbounds i8, i8* %4944, i64 8
  %4955 = bitcast i8* %4954 to double*
  store double 0.000000e+00, double* %4955, align 1, !tbaa !2452
  %4956 = load i64, i64* %RBP
  %4957 = sub i64 %4956, 64
  %4958 = bitcast %union.vec128_t* %XMM0 to i8*
  %4959 = load i64, i64* %PC
  %4960 = add i64 %4959, 5
  store i64 %4960, i64* %PC
  %4961 = bitcast i8* %4958 to double*
  %4962 = load double, double* %4961, align 1
  %4963 = inttoptr i64 %4957 to double*
  store double %4962, double* %4963
  %4964 = load i64, i64* %RBP
  %4965 = sub i64 %4964, 24
  %4966 = load i64, i64* %PC
  %4967 = add i64 %4966, 4
  store i64 %4967, i64* %PC
  %4968 = inttoptr i64 %4965 to i64*
  %4969 = load i64, i64* %4968
  store i64 %4969, i64* %RDX, align 8, !tbaa !2428
  %4970 = load i64, i64* %RBP
  %4971 = sub i64 %4970, 32
  %4972 = load i64, i64* %PC
  %4973 = add i64 %4972, 3
  store i64 %4973, i64* %PC
  %4974 = inttoptr i64 %4971 to i32*
  %4975 = load i32, i32* %4974
  %4976 = zext i32 %4975 to i64
  store i64 %4976, i64* %RCX, align 8, !tbaa !2428
  %4977 = load i64, i64* %RCX
  %4978 = load i64, i64* %PC
  %4979 = add i64 %4978, 3
  store i64 %4979, i64* %PC
  %4980 = trunc i64 %4977 to i32
  %4981 = add i32 1, %4980
  %4982 = zext i32 %4981 to i64
  store i64 %4982, i64* %RCX, align 8, !tbaa !2428
  %4983 = icmp ult i32 %4981, %4980
  %4984 = icmp ult i32 %4981, 1
  %4985 = or i1 %4983, %4984
  %4986 = zext i1 %4985 to i8
  %4987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4986, i8* %4987, align 1, !tbaa !2432
  %4988 = and i32 %4981, 255
  %4989 = call i32 @llvm.ctpop.i32(i32 %4988) #17
  %4990 = trunc i32 %4989 to i8
  %4991 = and i8 %4990, 1
  %4992 = xor i8 %4991, 1
  %4993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4992, i8* %4993, align 1, !tbaa !2446
  %4994 = xor i64 1, %4977
  %4995 = trunc i64 %4994 to i32
  %4996 = xor i32 %4995, %4981
  %4997 = lshr i32 %4996, 4
  %4998 = trunc i32 %4997 to i8
  %4999 = and i8 %4998, 1
  %5000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4999, i8* %5000, align 1, !tbaa !2447
  %5001 = icmp eq i32 %4981, 0
  %5002 = zext i1 %5001 to i8
  %5003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5002, i8* %5003, align 1, !tbaa !2448
  %5004 = lshr i32 %4981, 31
  %5005 = trunc i32 %5004 to i8
  %5006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5005, i8* %5006, align 1, !tbaa !2449
  %5007 = lshr i32 %4980, 31
  %5008 = xor i32 %5004, %5007
  %5009 = add nuw nsw i32 %5008, %5004
  %5010 = icmp eq i32 %5009, 2
  %5011 = zext i1 %5010 to i8
  %5012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5011, i8* %5012, align 1, !tbaa !2450
  %5013 = load i32, i32* %ECX
  %5014 = zext i32 %5013 to i64
  %5015 = load i64, i64* %PC
  %5016 = add i64 %5015, 3
  store i64 %5016, i64* %PC
  %5017 = shl i64 %5014, 32
  %5018 = ashr exact i64 %5017, 32
  store i64 %5018, i64* %RSI, align 8, !tbaa !2428
  %5019 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5020 = load i64, i64* %RDX
  %5021 = load i64, i64* %RSI
  %5022 = mul i64 %5021, 8
  %5023 = add i64 %5022, %5020
  %5024 = load i64, i64* %PC
  %5025 = add i64 %5024, 5
  store i64 %5025, i64* %PC
  %5026 = inttoptr i64 %5023 to double*
  %5027 = load double, double* %5026
  %5028 = bitcast i8* %5019 to double*
  store double %5027, double* %5028, align 1, !tbaa !2452
  %5029 = getelementptr inbounds i8, i8* %5019, i64 8
  %5030 = bitcast i8* %5029 to double*
  store double 0.000000e+00, double* %5030, align 1, !tbaa !2452
  %5031 = bitcast %union.vec128_t* %XMM0 to i8*
  %5032 = load i64, i64* %PC
  %5033 = add i64 %5032, 5
  store i64 %5033, i64* %PC
  %5034 = bitcast i8* %5031 to i64*
  %5035 = load i64, i64* %5034, align 1
  store i64 %5035, i64* %RDX, align 1, !tbaa !2428
  %5036 = load i64, i64* %RDX
  %5037 = load i64, i64* %RAX
  %5038 = load i64, i64* %PC
  %5039 = add i64 %5038, 3
  store i64 %5039, i64* %PC
  %5040 = xor i64 %5037, %5036
  store i64 %5040, i64* %RDX, align 8, !tbaa !2428
  %5041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5041, align 1, !tbaa !2432
  %5042 = trunc i64 %5040 to i32
  %5043 = and i32 %5042, 255
  %5044 = call i32 @llvm.ctpop.i32(i32 %5043) #17
  %5045 = trunc i32 %5044 to i8
  %5046 = and i8 %5045, 1
  %5047 = xor i8 %5046, 1
  %5048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5047, i8* %5048, align 1, !tbaa !2446
  %5049 = icmp eq i64 %5040, 0
  %5050 = zext i1 %5049 to i8
  %5051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5050, i8* %5051, align 1, !tbaa !2448
  %5052 = lshr i64 %5040, 63
  %5053 = trunc i64 %5052 to i8
  %5054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5053, i8* %5054, align 1, !tbaa !2449
  %5055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5055, align 1, !tbaa !2450
  %5056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5056, align 1, !tbaa !2447
  %5057 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5058 = load i64, i64* %RDX
  %5059 = load i64, i64* %PC
  %5060 = add i64 %5059, 5
  store i64 %5060, i64* %PC
  %5061 = bitcast i8* %5057 to i64*
  store i64 %5058, i64* %5061, align 1, !tbaa !2428
  %5062 = getelementptr inbounds i8, i8* %5057, i64 8
  %5063 = bitcast i8* %5062 to i64*
  store i64 0, i64* %5063, align 1, !tbaa !2428
  %5064 = load i64, i64* %RBP
  %5065 = sub i64 %5064, 72
  %5066 = bitcast %union.vec128_t* %XMM0 to i8*
  %5067 = load i64, i64* %PC
  %5068 = add i64 %5067, 5
  store i64 %5068, i64* %PC
  %5069 = bitcast i8* %5066 to double*
  %5070 = load double, double* %5069, align 1
  %5071 = inttoptr i64 %5065 to double*
  store double %5070, double* %5071
  %5072 = load i64, i64* %RBP
  %5073 = sub i64 %5072, 24
  %5074 = load i64, i64* %PC
  %5075 = add i64 %5074, 4
  store i64 %5075, i64* %PC
  %5076 = inttoptr i64 %5073 to i64*
  %5077 = load i64, i64* %5076
  store i64 %5077, i64* %RDX, align 8, !tbaa !2428
  %5078 = load i64, i64* %RBP
  %5079 = sub i64 %5078, 40
  %5080 = load i64, i64* %PC
  %5081 = add i64 %5080, 4
  store i64 %5081, i64* %PC
  %5082 = inttoptr i64 %5079 to i32*
  %5083 = load i32, i32* %5082
  %5084 = sext i32 %5083 to i64
  store i64 %5084, i64* %RSI, align 8, !tbaa !2428
  %5085 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5086 = load i64, i64* %RDX
  %5087 = load i64, i64* %RSI
  %5088 = mul i64 %5087, 8
  %5089 = add i64 %5088, %5086
  %5090 = load i64, i64* %PC
  %5091 = add i64 %5090, 5
  store i64 %5091, i64* %PC
  %5092 = inttoptr i64 %5089 to double*
  %5093 = load double, double* %5092
  %5094 = bitcast i8* %5085 to double*
  store double %5093, double* %5094, align 1, !tbaa !2452
  %5095 = getelementptr inbounds i8, i8* %5085, i64 8
  %5096 = bitcast i8* %5095 to double*
  store double 0.000000e+00, double* %5096, align 1, !tbaa !2452
  %5097 = load i64, i64* %RBP
  %5098 = sub i64 %5097, 80
  %5099 = bitcast %union.vec128_t* %XMM0 to i8*
  %5100 = load i64, i64* %PC
  %5101 = add i64 %5100, 5
  store i64 %5101, i64* %PC
  %5102 = bitcast i8* %5099 to double*
  %5103 = load double, double* %5102, align 1
  %5104 = inttoptr i64 %5098 to double*
  store double %5103, double* %5104
  %5105 = load i64, i64* %RBP
  %5106 = sub i64 %5105, 24
  %5107 = load i64, i64* %PC
  %5108 = add i64 %5107, 4
  store i64 %5108, i64* %PC
  %5109 = inttoptr i64 %5106 to i64*
  %5110 = load i64, i64* %5109
  store i64 %5110, i64* %RDX, align 8, !tbaa !2428
  %5111 = load i64, i64* %RBP
  %5112 = sub i64 %5111, 40
  %5113 = load i64, i64* %PC
  %5114 = add i64 %5113, 3
  store i64 %5114, i64* %PC
  %5115 = inttoptr i64 %5112 to i32*
  %5116 = load i32, i32* %5115
  %5117 = zext i32 %5116 to i64
  store i64 %5117, i64* %RCX, align 8, !tbaa !2428
  %5118 = load i64, i64* %RCX
  %5119 = load i64, i64* %PC
  %5120 = add i64 %5119, 3
  store i64 %5120, i64* %PC
  %5121 = trunc i64 %5118 to i32
  %5122 = add i32 1, %5121
  %5123 = zext i32 %5122 to i64
  store i64 %5123, i64* %RCX, align 8, !tbaa !2428
  %5124 = icmp ult i32 %5122, %5121
  %5125 = icmp ult i32 %5122, 1
  %5126 = or i1 %5124, %5125
  %5127 = zext i1 %5126 to i8
  %5128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5127, i8* %5128, align 1, !tbaa !2432
  %5129 = and i32 %5122, 255
  %5130 = call i32 @llvm.ctpop.i32(i32 %5129) #17
  %5131 = trunc i32 %5130 to i8
  %5132 = and i8 %5131, 1
  %5133 = xor i8 %5132, 1
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5133, i8* %5134, align 1, !tbaa !2446
  %5135 = xor i64 1, %5118
  %5136 = trunc i64 %5135 to i32
  %5137 = xor i32 %5136, %5122
  %5138 = lshr i32 %5137, 4
  %5139 = trunc i32 %5138 to i8
  %5140 = and i8 %5139, 1
  %5141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5140, i8* %5141, align 1, !tbaa !2447
  %5142 = icmp eq i32 %5122, 0
  %5143 = zext i1 %5142 to i8
  %5144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5143, i8* %5144, align 1, !tbaa !2448
  %5145 = lshr i32 %5122, 31
  %5146 = trunc i32 %5145 to i8
  %5147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5146, i8* %5147, align 1, !tbaa !2449
  %5148 = lshr i32 %5121, 31
  %5149 = xor i32 %5145, %5148
  %5150 = add nuw nsw i32 %5149, %5145
  %5151 = icmp eq i32 %5150, 2
  %5152 = zext i1 %5151 to i8
  %5153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5152, i8* %5153, align 1, !tbaa !2450
  %5154 = load i32, i32* %ECX
  %5155 = zext i32 %5154 to i64
  %5156 = load i64, i64* %PC
  %5157 = add i64 %5156, 3
  store i64 %5157, i64* %PC
  %5158 = shl i64 %5155, 32
  %5159 = ashr exact i64 %5158, 32
  store i64 %5159, i64* %RSI, align 8, !tbaa !2428
  %5160 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5161 = load i64, i64* %RDX
  %5162 = load i64, i64* %RSI
  %5163 = mul i64 %5162, 8
  %5164 = add i64 %5163, %5161
  %5165 = load i64, i64* %PC
  %5166 = add i64 %5165, 5
  store i64 %5166, i64* %PC
  %5167 = inttoptr i64 %5164 to double*
  %5168 = load double, double* %5167
  %5169 = bitcast i8* %5160 to double*
  store double %5168, double* %5169, align 1, !tbaa !2452
  %5170 = getelementptr inbounds i8, i8* %5160, i64 8
  %5171 = bitcast i8* %5170 to double*
  store double 0.000000e+00, double* %5171, align 1, !tbaa !2452
  %5172 = bitcast %union.vec128_t* %XMM0 to i8*
  %5173 = load i64, i64* %PC
  %5174 = add i64 %5173, 5
  store i64 %5174, i64* %PC
  %5175 = bitcast i8* %5172 to i64*
  %5176 = load i64, i64* %5175, align 1
  store i64 %5176, i64* %RDX, align 1, !tbaa !2428
  %5177 = load i64, i64* %RDX
  %5178 = load i64, i64* %RAX
  %5179 = load i64, i64* %PC
  %5180 = add i64 %5179, 3
  store i64 %5180, i64* %PC
  %5181 = xor i64 %5178, %5177
  store i64 %5181, i64* %RDX, align 8, !tbaa !2428
  %5182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5182, align 1, !tbaa !2432
  %5183 = trunc i64 %5181 to i32
  %5184 = and i32 %5183, 255
  %5185 = call i32 @llvm.ctpop.i32(i32 %5184) #17
  %5186 = trunc i32 %5185 to i8
  %5187 = and i8 %5186, 1
  %5188 = xor i8 %5187, 1
  %5189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5188, i8* %5189, align 1, !tbaa !2446
  %5190 = icmp eq i64 %5181, 0
  %5191 = zext i1 %5190 to i8
  %5192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5191, i8* %5192, align 1, !tbaa !2448
  %5193 = lshr i64 %5181, 63
  %5194 = trunc i64 %5193 to i8
  %5195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5194, i8* %5195, align 1, !tbaa !2449
  %5196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5196, align 1, !tbaa !2450
  %5197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5197, align 1, !tbaa !2447
  %5198 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5199 = load i64, i64* %RDX
  %5200 = load i64, i64* %PC
  %5201 = add i64 %5200, 5
  store i64 %5201, i64* %PC
  %5202 = bitcast i8* %5198 to i64*
  store i64 %5199, i64* %5202, align 1, !tbaa !2428
  %5203 = getelementptr inbounds i8, i8* %5198, i64 8
  %5204 = bitcast i8* %5203 to i64*
  store i64 0, i64* %5204, align 1, !tbaa !2428
  %5205 = load i64, i64* %RBP
  %5206 = sub i64 %5205, 88
  %5207 = bitcast %union.vec128_t* %XMM0 to i8*
  %5208 = load i64, i64* %PC
  %5209 = add i64 %5208, 5
  store i64 %5209, i64* %PC
  %5210 = bitcast i8* %5207 to double*
  %5211 = load double, double* %5210, align 1
  %5212 = inttoptr i64 %5206 to double*
  store double %5211, double* %5212
  %5213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5214 = load i64, i64* %RBP
  %5215 = sub i64 %5214, 80
  %5216 = load i64, i64* %PC
  %5217 = add i64 %5216, 5
  store i64 %5217, i64* %PC
  %5218 = inttoptr i64 %5215 to double*
  %5219 = load double, double* %5218
  %5220 = bitcast i8* %5213 to double*
  store double %5219, double* %5220, align 1, !tbaa !2452
  %5221 = getelementptr inbounds i8, i8* %5213, i64 8
  %5222 = bitcast i8* %5221 to double*
  store double 0.000000e+00, double* %5222, align 1, !tbaa !2452
  %5223 = load i64, i64* %RBP
  %5224 = sub i64 %5223, 24
  %5225 = load i64, i64* %PC
  %5226 = add i64 %5225, 4
  store i64 %5226, i64* %PC
  %5227 = inttoptr i64 %5224 to i64*
  %5228 = load i64, i64* %5227
  store i64 %5228, i64* %RDX, align 8, !tbaa !2428
  %5229 = load i64, i64* %RBP
  %5230 = sub i64 %5229, 32
  %5231 = load i64, i64* %PC
  %5232 = add i64 %5231, 4
  store i64 %5232, i64* %PC
  %5233 = inttoptr i64 %5230 to i32*
  %5234 = load i32, i32* %5233
  %5235 = sext i32 %5234 to i64
  store i64 %5235, i64* %RSI, align 8, !tbaa !2428
  %5236 = load i64, i64* %RDX
  %5237 = load i64, i64* %RSI
  %5238 = mul i64 %5237, 8
  %5239 = add i64 %5238, %5236
  %5240 = bitcast %union.vec128_t* %XMM0 to i8*
  %5241 = load i64, i64* %PC
  %5242 = add i64 %5241, 5
  store i64 %5242, i64* %PC
  %5243 = bitcast i8* %5240 to double*
  %5244 = load double, double* %5243, align 1
  %5245 = inttoptr i64 %5239 to double*
  store double %5244, double* %5245
  %5246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5247 = load i64, i64* %RBP
  %5248 = sub i64 %5247, 88
  %5249 = load i64, i64* %PC
  %5250 = add i64 %5249, 5
  store i64 %5250, i64* %PC
  %5251 = inttoptr i64 %5248 to double*
  %5252 = load double, double* %5251
  %5253 = bitcast i8* %5246 to double*
  store double %5252, double* %5253, align 1, !tbaa !2452
  %5254 = getelementptr inbounds i8, i8* %5246, i64 8
  %5255 = bitcast i8* %5254 to double*
  store double 0.000000e+00, double* %5255, align 1, !tbaa !2452
  %5256 = load i64, i64* %RBP
  %5257 = sub i64 %5256, 24
  %5258 = load i64, i64* %PC
  %5259 = add i64 %5258, 4
  store i64 %5259, i64* %PC
  %5260 = inttoptr i64 %5257 to i64*
  %5261 = load i64, i64* %5260
  store i64 %5261, i64* %RDX, align 8, !tbaa !2428
  %5262 = load i64, i64* %RBP
  %5263 = sub i64 %5262, 32
  %5264 = load i64, i64* %PC
  %5265 = add i64 %5264, 3
  store i64 %5265, i64* %PC
  %5266 = inttoptr i64 %5263 to i32*
  %5267 = load i32, i32* %5266
  %5268 = zext i32 %5267 to i64
  store i64 %5268, i64* %RCX, align 8, !tbaa !2428
  %5269 = load i64, i64* %RCX
  %5270 = load i64, i64* %PC
  %5271 = add i64 %5270, 3
  store i64 %5271, i64* %PC
  %5272 = trunc i64 %5269 to i32
  %5273 = add i32 1, %5272
  %5274 = zext i32 %5273 to i64
  store i64 %5274, i64* %RCX, align 8, !tbaa !2428
  %5275 = icmp ult i32 %5273, %5272
  %5276 = icmp ult i32 %5273, 1
  %5277 = or i1 %5275, %5276
  %5278 = zext i1 %5277 to i8
  %5279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5278, i8* %5279, align 1, !tbaa !2432
  %5280 = and i32 %5273, 255
  %5281 = call i32 @llvm.ctpop.i32(i32 %5280) #17
  %5282 = trunc i32 %5281 to i8
  %5283 = and i8 %5282, 1
  %5284 = xor i8 %5283, 1
  %5285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5284, i8* %5285, align 1, !tbaa !2446
  %5286 = xor i64 1, %5269
  %5287 = trunc i64 %5286 to i32
  %5288 = xor i32 %5287, %5273
  %5289 = lshr i32 %5288, 4
  %5290 = trunc i32 %5289 to i8
  %5291 = and i8 %5290, 1
  %5292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5291, i8* %5292, align 1, !tbaa !2447
  %5293 = icmp eq i32 %5273, 0
  %5294 = zext i1 %5293 to i8
  %5295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5294, i8* %5295, align 1, !tbaa !2448
  %5296 = lshr i32 %5273, 31
  %5297 = trunc i32 %5296 to i8
  %5298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5297, i8* %5298, align 1, !tbaa !2449
  %5299 = lshr i32 %5272, 31
  %5300 = xor i32 %5296, %5299
  %5301 = add nuw nsw i32 %5300, %5296
  %5302 = icmp eq i32 %5301, 2
  %5303 = zext i1 %5302 to i8
  %5304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5303, i8* %5304, align 1, !tbaa !2450
  %5305 = load i32, i32* %ECX
  %5306 = zext i32 %5305 to i64
  %5307 = load i64, i64* %PC
  %5308 = add i64 %5307, 3
  store i64 %5308, i64* %PC
  %5309 = shl i64 %5306, 32
  %5310 = ashr exact i64 %5309, 32
  store i64 %5310, i64* %RSI, align 8, !tbaa !2428
  %5311 = load i64, i64* %RDX
  %5312 = load i64, i64* %RSI
  %5313 = mul i64 %5312, 8
  %5314 = add i64 %5313, %5311
  %5315 = bitcast %union.vec128_t* %XMM0 to i8*
  %5316 = load i64, i64* %PC
  %5317 = add i64 %5316, 5
  store i64 %5317, i64* %PC
  %5318 = bitcast i8* %5315 to double*
  %5319 = load double, double* %5318, align 1
  %5320 = inttoptr i64 %5314 to double*
  store double %5319, double* %5320
  %5321 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5322 = load i64, i64* %RBP
  %5323 = sub i64 %5322, 64
  %5324 = load i64, i64* %PC
  %5325 = add i64 %5324, 5
  store i64 %5325, i64* %PC
  %5326 = inttoptr i64 %5323 to double*
  %5327 = load double, double* %5326
  %5328 = bitcast i8* %5321 to double*
  store double %5327, double* %5328, align 1, !tbaa !2452
  %5329 = getelementptr inbounds i8, i8* %5321, i64 8
  %5330 = bitcast i8* %5329 to double*
  store double 0.000000e+00, double* %5330, align 1, !tbaa !2452
  %5331 = load i64, i64* %RBP
  %5332 = sub i64 %5331, 24
  %5333 = load i64, i64* %PC
  %5334 = add i64 %5333, 4
  store i64 %5334, i64* %PC
  %5335 = inttoptr i64 %5332 to i64*
  %5336 = load i64, i64* %5335
  store i64 %5336, i64* %RDX, align 8, !tbaa !2428
  %5337 = load i64, i64* %RBP
  %5338 = sub i64 %5337, 40
  %5339 = load i64, i64* %PC
  %5340 = add i64 %5339, 4
  store i64 %5340, i64* %PC
  %5341 = inttoptr i64 %5338 to i32*
  %5342 = load i32, i32* %5341
  %5343 = sext i32 %5342 to i64
  store i64 %5343, i64* %RSI, align 8, !tbaa !2428
  %5344 = load i64, i64* %RDX
  %5345 = load i64, i64* %RSI
  %5346 = mul i64 %5345, 8
  %5347 = add i64 %5346, %5344
  %5348 = bitcast %union.vec128_t* %XMM0 to i8*
  %5349 = load i64, i64* %PC
  %5350 = add i64 %5349, 5
  store i64 %5350, i64* %PC
  %5351 = bitcast i8* %5348 to double*
  %5352 = load double, double* %5351, align 1
  %5353 = inttoptr i64 %5347 to double*
  store double %5352, double* %5353
  %5354 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5355 = load i64, i64* %RBP
  %5356 = sub i64 %5355, 72
  %5357 = load i64, i64* %PC
  %5358 = add i64 %5357, 5
  store i64 %5358, i64* %PC
  %5359 = inttoptr i64 %5356 to double*
  %5360 = load double, double* %5359
  %5361 = bitcast i8* %5354 to double*
  store double %5360, double* %5361, align 1, !tbaa !2452
  %5362 = getelementptr inbounds i8, i8* %5354, i64 8
  %5363 = bitcast i8* %5362 to double*
  store double 0.000000e+00, double* %5363, align 1, !tbaa !2452
  %5364 = load i64, i64* %RBP
  %5365 = sub i64 %5364, 24
  %5366 = load i64, i64* %PC
  %5367 = add i64 %5366, 4
  store i64 %5367, i64* %PC
  %5368 = inttoptr i64 %5365 to i64*
  %5369 = load i64, i64* %5368
  store i64 %5369, i64* %RDX, align 8, !tbaa !2428
  %5370 = load i64, i64* %RBP
  %5371 = sub i64 %5370, 40
  %5372 = load i64, i64* %PC
  %5373 = add i64 %5372, 3
  store i64 %5373, i64* %PC
  %5374 = inttoptr i64 %5371 to i32*
  %5375 = load i32, i32* %5374
  %5376 = zext i32 %5375 to i64
  store i64 %5376, i64* %RCX, align 8, !tbaa !2428
  %5377 = load i64, i64* %RCX
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 3
  store i64 %5379, i64* %PC
  %5380 = trunc i64 %5377 to i32
  %5381 = add i32 1, %5380
  %5382 = zext i32 %5381 to i64
  store i64 %5382, i64* %RCX, align 8, !tbaa !2428
  %5383 = icmp ult i32 %5381, %5380
  %5384 = icmp ult i32 %5381, 1
  %5385 = or i1 %5383, %5384
  %5386 = zext i1 %5385 to i8
  %5387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5386, i8* %5387, align 1, !tbaa !2432
  %5388 = and i32 %5381, 255
  %5389 = call i32 @llvm.ctpop.i32(i32 %5388) #17
  %5390 = trunc i32 %5389 to i8
  %5391 = and i8 %5390, 1
  %5392 = xor i8 %5391, 1
  %5393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5392, i8* %5393, align 1, !tbaa !2446
  %5394 = xor i64 1, %5377
  %5395 = trunc i64 %5394 to i32
  %5396 = xor i32 %5395, %5381
  %5397 = lshr i32 %5396, 4
  %5398 = trunc i32 %5397 to i8
  %5399 = and i8 %5398, 1
  %5400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5399, i8* %5400, align 1, !tbaa !2447
  %5401 = icmp eq i32 %5381, 0
  %5402 = zext i1 %5401 to i8
  %5403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5402, i8* %5403, align 1, !tbaa !2448
  %5404 = lshr i32 %5381, 31
  %5405 = trunc i32 %5404 to i8
  %5406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5405, i8* %5406, align 1, !tbaa !2449
  %5407 = lshr i32 %5380, 31
  %5408 = xor i32 %5404, %5407
  %5409 = add nuw nsw i32 %5408, %5404
  %5410 = icmp eq i32 %5409, 2
  %5411 = zext i1 %5410 to i8
  %5412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5411, i8* %5412, align 1, !tbaa !2450
  %5413 = load i32, i32* %ECX
  %5414 = zext i32 %5413 to i64
  %5415 = load i64, i64* %PC
  %5416 = add i64 %5415, 3
  store i64 %5416, i64* %PC
  %5417 = shl i64 %5414, 32
  %5418 = ashr exact i64 %5417, 32
  store i64 %5418, i64* %RSI, align 8, !tbaa !2428
  %5419 = load i64, i64* %RDX
  %5420 = load i64, i64* %RSI
  %5421 = mul i64 %5420, 8
  %5422 = add i64 %5421, %5419
  %5423 = bitcast %union.vec128_t* %XMM0 to i8*
  %5424 = load i64, i64* %PC
  %5425 = add i64 %5424, 5
  store i64 %5425, i64* %PC
  %5426 = bitcast i8* %5423 to double*
  %5427 = load double, double* %5426, align 1
  %5428 = inttoptr i64 %5422 to double*
  store double %5427, double* %5428
  %5429 = load i64, i64* %RBP
  %5430 = sub i64 %5429, 52
  %5431 = load i64, i64* %PC
  %5432 = add i64 %5431, 3
  store i64 %5432, i64* %PC
  %5433 = inttoptr i64 %5430 to i32*
  %5434 = load i32, i32* %5433
  %5435 = zext i32 %5434 to i64
  store i64 %5435, i64* %RCX, align 8, !tbaa !2428
  %5436 = load i64, i64* %RCX
  %5437 = load i64, i64* %RBP
  %5438 = sub i64 %5437, 32
  %5439 = load i64, i64* %PC
  %5440 = add i64 %5439, 3
  store i64 %5440, i64* %PC
  %5441 = trunc i64 %5436 to i32
  %5442 = inttoptr i64 %5438 to i32*
  %5443 = load i32, i32* %5442
  %5444 = add i32 %5443, %5441
  %5445 = zext i32 %5444 to i64
  store i64 %5445, i64* %RCX, align 8, !tbaa !2428
  %5446 = icmp ult i32 %5444, %5441
  %5447 = icmp ult i32 %5444, %5443
  %5448 = or i1 %5446, %5447
  %5449 = zext i1 %5448 to i8
  %5450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5449, i8* %5450, align 1, !tbaa !2432
  %5451 = and i32 %5444, 255
  %5452 = call i32 @llvm.ctpop.i32(i32 %5451) #17
  %5453 = trunc i32 %5452 to i8
  %5454 = and i8 %5453, 1
  %5455 = xor i8 %5454, 1
  %5456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5455, i8* %5456, align 1, !tbaa !2446
  %5457 = xor i32 %5443, %5441
  %5458 = xor i32 %5457, %5444
  %5459 = lshr i32 %5458, 4
  %5460 = trunc i32 %5459 to i8
  %5461 = and i8 %5460, 1
  %5462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5461, i8* %5462, align 1, !tbaa !2447
  %5463 = icmp eq i32 %5444, 0
  %5464 = zext i1 %5463 to i8
  %5465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5464, i8* %5465, align 1, !tbaa !2448
  %5466 = lshr i32 %5444, 31
  %5467 = trunc i32 %5466 to i8
  %5468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5467, i8* %5468, align 1, !tbaa !2449
  %5469 = lshr i32 %5441, 31
  %5470 = lshr i32 %5443, 31
  %5471 = xor i32 %5466, %5469
  %5472 = xor i32 %5466, %5470
  %5473 = add nuw nsw i32 %5471, %5472
  %5474 = icmp eq i32 %5473, 2
  %5475 = zext i1 %5474 to i8
  %5476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5475, i8* %5476, align 1, !tbaa !2450
  %5477 = load i64, i64* %RBP
  %5478 = sub i64 %5477, 32
  %5479 = load i32, i32* %ECX
  %5480 = zext i32 %5479 to i64
  %5481 = load i64, i64* %PC
  %5482 = add i64 %5481, 3
  store i64 %5482, i64* %PC
  %5483 = inttoptr i64 %5478 to i32*
  store i32 %5479, i32* %5483
  %5484 = load i64, i64* %RBP
  %5485 = sub i64 %5484, 52
  %5486 = load i64, i64* %PC
  %5487 = add i64 %5486, 3
  store i64 %5487, i64* %PC
  %5488 = inttoptr i64 %5485 to i32*
  %5489 = load i32, i32* %5488
  %5490 = zext i32 %5489 to i64
  store i64 %5490, i64* %RCX, align 8, !tbaa !2428
  %5491 = load i64, i64* %RCX
  %5492 = load i64, i64* %RBP
  %5493 = sub i64 %5492, 40
  %5494 = load i64, i64* %PC
  %5495 = add i64 %5494, 3
  store i64 %5495, i64* %PC
  %5496 = trunc i64 %5491 to i32
  %5497 = inttoptr i64 %5493 to i32*
  %5498 = load i32, i32* %5497
  %5499 = add i32 %5498, %5496
  %5500 = zext i32 %5499 to i64
  store i64 %5500, i64* %RCX, align 8, !tbaa !2428
  %5501 = icmp ult i32 %5499, %5496
  %5502 = icmp ult i32 %5499, %5498
  %5503 = or i1 %5501, %5502
  %5504 = zext i1 %5503 to i8
  %5505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5504, i8* %5505, align 1, !tbaa !2432
  %5506 = and i32 %5499, 255
  %5507 = call i32 @llvm.ctpop.i32(i32 %5506) #17
  %5508 = trunc i32 %5507 to i8
  %5509 = and i8 %5508, 1
  %5510 = xor i8 %5509, 1
  %5511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5510, i8* %5511, align 1, !tbaa !2446
  %5512 = xor i32 %5498, %5496
  %5513 = xor i32 %5512, %5499
  %5514 = lshr i32 %5513, 4
  %5515 = trunc i32 %5514 to i8
  %5516 = and i8 %5515, 1
  %5517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5516, i8* %5517, align 1, !tbaa !2447
  %5518 = icmp eq i32 %5499, 0
  %5519 = zext i1 %5518 to i8
  %5520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5519, i8* %5520, align 1, !tbaa !2448
  %5521 = lshr i32 %5499, 31
  %5522 = trunc i32 %5521 to i8
  %5523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5522, i8* %5523, align 1, !tbaa !2449
  %5524 = lshr i32 %5496, 31
  %5525 = lshr i32 %5498, 31
  %5526 = xor i32 %5521, %5524
  %5527 = xor i32 %5521, %5525
  %5528 = add nuw nsw i32 %5526, %5527
  %5529 = icmp eq i32 %5528, 2
  %5530 = zext i1 %5529 to i8
  %5531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5530, i8* %5531, align 1, !tbaa !2450
  %5532 = load i64, i64* %RBP
  %5533 = sub i64 %5532, 40
  %5534 = load i32, i32* %ECX
  %5535 = zext i32 %5534 to i64
  %5536 = load i64, i64* %PC
  %5537 = add i64 %5536, 3
  store i64 %5537, i64* %PC
  %5538 = inttoptr i64 %5533 to i32*
  store i32 %5534, i32* %5538
  %5539 = load i64, i64* %RBP
  %5540 = sub i64 %5539, 24
  %5541 = load i64, i64* %PC
  %5542 = add i64 %5541, 4
  store i64 %5542, i64* %PC
  %5543 = inttoptr i64 %5540 to i64*
  %5544 = load i64, i64* %5543
  store i64 %5544, i64* %RDX, align 8, !tbaa !2428
  %5545 = load i64, i64* %RBP
  %5546 = sub i64 %5545, 32
  %5547 = load i64, i64* %PC
  %5548 = add i64 %5547, 4
  store i64 %5548, i64* %PC
  %5549 = inttoptr i64 %5546 to i32*
  %5550 = load i32, i32* %5549
  %5551 = sext i32 %5550 to i64
  store i64 %5551, i64* %RSI, align 8, !tbaa !2428
  %5552 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5553 = load i64, i64* %RDX
  %5554 = load i64, i64* %RSI
  %5555 = mul i64 %5554, 8
  %5556 = add i64 %5555, %5553
  %5557 = load i64, i64* %PC
  %5558 = add i64 %5557, 5
  store i64 %5558, i64* %PC
  %5559 = inttoptr i64 %5556 to double*
  %5560 = load double, double* %5559
  %5561 = bitcast i8* %5552 to double*
  store double %5560, double* %5561, align 1, !tbaa !2452
  %5562 = getelementptr inbounds i8, i8* %5552, i64 8
  %5563 = bitcast i8* %5562 to double*
  store double 0.000000e+00, double* %5563, align 1, !tbaa !2452
  %5564 = load i64, i64* %RBP
  %5565 = sub i64 %5564, 64
  %5566 = bitcast %union.vec128_t* %XMM0 to i8*
  %5567 = load i64, i64* %PC
  %5568 = add i64 %5567, 5
  store i64 %5568, i64* %PC
  %5569 = bitcast i8* %5566 to double*
  %5570 = load double, double* %5569, align 1
  %5571 = inttoptr i64 %5565 to double*
  store double %5570, double* %5571
  %5572 = load i64, i64* %RBP
  %5573 = sub i64 %5572, 24
  %5574 = load i64, i64* %PC
  %5575 = add i64 %5574, 4
  store i64 %5575, i64* %PC
  %5576 = inttoptr i64 %5573 to i64*
  %5577 = load i64, i64* %5576
  store i64 %5577, i64* %RDX, align 8, !tbaa !2428
  %5578 = load i64, i64* %RBP
  %5579 = sub i64 %5578, 32
  %5580 = load i64, i64* %PC
  %5581 = add i64 %5580, 3
  store i64 %5581, i64* %PC
  %5582 = inttoptr i64 %5579 to i32*
  %5583 = load i32, i32* %5582
  %5584 = zext i32 %5583 to i64
  store i64 %5584, i64* %RCX, align 8, !tbaa !2428
  %5585 = load i64, i64* %RCX
  %5586 = load i64, i64* %PC
  %5587 = add i64 %5586, 3
  store i64 %5587, i64* %PC
  %5588 = trunc i64 %5585 to i32
  %5589 = add i32 1, %5588
  %5590 = zext i32 %5589 to i64
  store i64 %5590, i64* %RCX, align 8, !tbaa !2428
  %5591 = icmp ult i32 %5589, %5588
  %5592 = icmp ult i32 %5589, 1
  %5593 = or i1 %5591, %5592
  %5594 = zext i1 %5593 to i8
  %5595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5594, i8* %5595, align 1, !tbaa !2432
  %5596 = and i32 %5589, 255
  %5597 = call i32 @llvm.ctpop.i32(i32 %5596) #17
  %5598 = trunc i32 %5597 to i8
  %5599 = and i8 %5598, 1
  %5600 = xor i8 %5599, 1
  %5601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5600, i8* %5601, align 1, !tbaa !2446
  %5602 = xor i64 1, %5585
  %5603 = trunc i64 %5602 to i32
  %5604 = xor i32 %5603, %5589
  %5605 = lshr i32 %5604, 4
  %5606 = trunc i32 %5605 to i8
  %5607 = and i8 %5606, 1
  %5608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5607, i8* %5608, align 1, !tbaa !2447
  %5609 = icmp eq i32 %5589, 0
  %5610 = zext i1 %5609 to i8
  %5611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5610, i8* %5611, align 1, !tbaa !2448
  %5612 = lshr i32 %5589, 31
  %5613 = trunc i32 %5612 to i8
  %5614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5613, i8* %5614, align 1, !tbaa !2449
  %5615 = lshr i32 %5588, 31
  %5616 = xor i32 %5612, %5615
  %5617 = add nuw nsw i32 %5616, %5612
  %5618 = icmp eq i32 %5617, 2
  %5619 = zext i1 %5618 to i8
  %5620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5619, i8* %5620, align 1, !tbaa !2450
  %5621 = load i32, i32* %ECX
  %5622 = zext i32 %5621 to i64
  %5623 = load i64, i64* %PC
  %5624 = add i64 %5623, 3
  store i64 %5624, i64* %PC
  %5625 = shl i64 %5622, 32
  %5626 = ashr exact i64 %5625, 32
  store i64 %5626, i64* %RSI, align 8, !tbaa !2428
  %5627 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5628 = load i64, i64* %RDX
  %5629 = load i64, i64* %RSI
  %5630 = mul i64 %5629, 8
  %5631 = add i64 %5630, %5628
  %5632 = load i64, i64* %PC
  %5633 = add i64 %5632, 5
  store i64 %5633, i64* %PC
  %5634 = inttoptr i64 %5631 to double*
  %5635 = load double, double* %5634
  %5636 = bitcast i8* %5627 to double*
  store double %5635, double* %5636, align 1, !tbaa !2452
  %5637 = getelementptr inbounds i8, i8* %5627, i64 8
  %5638 = bitcast i8* %5637 to double*
  store double 0.000000e+00, double* %5638, align 1, !tbaa !2452
  %5639 = bitcast %union.vec128_t* %XMM0 to i8*
  %5640 = load i64, i64* %PC
  %5641 = add i64 %5640, 5
  store i64 %5641, i64* %PC
  %5642 = bitcast i8* %5639 to i64*
  %5643 = load i64, i64* %5642, align 1
  store i64 %5643, i64* %RDX, align 1, !tbaa !2428
  %5644 = load i64, i64* %RDX
  %5645 = load i64, i64* %RAX
  %5646 = load i64, i64* %PC
  %5647 = add i64 %5646, 3
  store i64 %5647, i64* %PC
  %5648 = xor i64 %5645, %5644
  store i64 %5648, i64* %RDX, align 8, !tbaa !2428
  %5649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5649, align 1, !tbaa !2432
  %5650 = trunc i64 %5648 to i32
  %5651 = and i32 %5650, 255
  %5652 = call i32 @llvm.ctpop.i32(i32 %5651) #17
  %5653 = trunc i32 %5652 to i8
  %5654 = and i8 %5653, 1
  %5655 = xor i8 %5654, 1
  %5656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5655, i8* %5656, align 1, !tbaa !2446
  %5657 = icmp eq i64 %5648, 0
  %5658 = zext i1 %5657 to i8
  %5659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5658, i8* %5659, align 1, !tbaa !2448
  %5660 = lshr i64 %5648, 63
  %5661 = trunc i64 %5660 to i8
  %5662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5661, i8* %5662, align 1, !tbaa !2449
  %5663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5663, align 1, !tbaa !2450
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5664, align 1, !tbaa !2447
  %5665 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5666 = load i64, i64* %RDX
  %5667 = load i64, i64* %PC
  %5668 = add i64 %5667, 5
  store i64 %5668, i64* %PC
  %5669 = bitcast i8* %5665 to i64*
  store i64 %5666, i64* %5669, align 1, !tbaa !2428
  %5670 = getelementptr inbounds i8, i8* %5665, i64 8
  %5671 = bitcast i8* %5670 to i64*
  store i64 0, i64* %5671, align 1, !tbaa !2428
  %5672 = load i64, i64* %RBP
  %5673 = sub i64 %5672, 72
  %5674 = bitcast %union.vec128_t* %XMM0 to i8*
  %5675 = load i64, i64* %PC
  %5676 = add i64 %5675, 5
  store i64 %5676, i64* %PC
  %5677 = bitcast i8* %5674 to double*
  %5678 = load double, double* %5677, align 1
  %5679 = inttoptr i64 %5673 to double*
  store double %5678, double* %5679
  %5680 = load i64, i64* %RBP
  %5681 = sub i64 %5680, 24
  %5682 = load i64, i64* %PC
  %5683 = add i64 %5682, 4
  store i64 %5683, i64* %PC
  %5684 = inttoptr i64 %5681 to i64*
  %5685 = load i64, i64* %5684
  store i64 %5685, i64* %RDX, align 8, !tbaa !2428
  %5686 = load i64, i64* %RBP
  %5687 = sub i64 %5686, 40
  %5688 = load i64, i64* %PC
  %5689 = add i64 %5688, 4
  store i64 %5689, i64* %PC
  %5690 = inttoptr i64 %5687 to i32*
  %5691 = load i32, i32* %5690
  %5692 = sext i32 %5691 to i64
  store i64 %5692, i64* %RSI, align 8, !tbaa !2428
  %5693 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5694 = load i64, i64* %RDX
  %5695 = load i64, i64* %RSI
  %5696 = mul i64 %5695, 8
  %5697 = add i64 %5696, %5694
  %5698 = load i64, i64* %PC
  %5699 = add i64 %5698, 5
  store i64 %5699, i64* %PC
  %5700 = inttoptr i64 %5697 to double*
  %5701 = load double, double* %5700
  %5702 = bitcast i8* %5693 to double*
  store double %5701, double* %5702, align 1, !tbaa !2452
  %5703 = getelementptr inbounds i8, i8* %5693, i64 8
  %5704 = bitcast i8* %5703 to double*
  store double 0.000000e+00, double* %5704, align 1, !tbaa !2452
  %5705 = load i64, i64* %RBP
  %5706 = sub i64 %5705, 80
  %5707 = bitcast %union.vec128_t* %XMM0 to i8*
  %5708 = load i64, i64* %PC
  %5709 = add i64 %5708, 5
  store i64 %5709, i64* %PC
  %5710 = bitcast i8* %5707 to double*
  %5711 = load double, double* %5710, align 1
  %5712 = inttoptr i64 %5706 to double*
  store double %5711, double* %5712
  %5713 = load i64, i64* %RBP
  %5714 = sub i64 %5713, 24
  %5715 = load i64, i64* %PC
  %5716 = add i64 %5715, 4
  store i64 %5716, i64* %PC
  %5717 = inttoptr i64 %5714 to i64*
  %5718 = load i64, i64* %5717
  store i64 %5718, i64* %RDX, align 8, !tbaa !2428
  %5719 = load i64, i64* %RBP
  %5720 = sub i64 %5719, 40
  %5721 = load i64, i64* %PC
  %5722 = add i64 %5721, 3
  store i64 %5722, i64* %PC
  %5723 = inttoptr i64 %5720 to i32*
  %5724 = load i32, i32* %5723
  %5725 = zext i32 %5724 to i64
  store i64 %5725, i64* %RCX, align 8, !tbaa !2428
  %5726 = load i64, i64* %RCX
  %5727 = load i64, i64* %PC
  %5728 = add i64 %5727, 3
  store i64 %5728, i64* %PC
  %5729 = trunc i64 %5726 to i32
  %5730 = add i32 1, %5729
  %5731 = zext i32 %5730 to i64
  store i64 %5731, i64* %RCX, align 8, !tbaa !2428
  %5732 = icmp ult i32 %5730, %5729
  %5733 = icmp ult i32 %5730, 1
  %5734 = or i1 %5732, %5733
  %5735 = zext i1 %5734 to i8
  %5736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5735, i8* %5736, align 1, !tbaa !2432
  %5737 = and i32 %5730, 255
  %5738 = call i32 @llvm.ctpop.i32(i32 %5737) #17
  %5739 = trunc i32 %5738 to i8
  %5740 = and i8 %5739, 1
  %5741 = xor i8 %5740, 1
  %5742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5741, i8* %5742, align 1, !tbaa !2446
  %5743 = xor i64 1, %5726
  %5744 = trunc i64 %5743 to i32
  %5745 = xor i32 %5744, %5730
  %5746 = lshr i32 %5745, 4
  %5747 = trunc i32 %5746 to i8
  %5748 = and i8 %5747, 1
  %5749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5748, i8* %5749, align 1, !tbaa !2447
  %5750 = icmp eq i32 %5730, 0
  %5751 = zext i1 %5750 to i8
  %5752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5751, i8* %5752, align 1, !tbaa !2448
  %5753 = lshr i32 %5730, 31
  %5754 = trunc i32 %5753 to i8
  %5755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5754, i8* %5755, align 1, !tbaa !2449
  %5756 = lshr i32 %5729, 31
  %5757 = xor i32 %5753, %5756
  %5758 = add nuw nsw i32 %5757, %5753
  %5759 = icmp eq i32 %5758, 2
  %5760 = zext i1 %5759 to i8
  %5761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5760, i8* %5761, align 1, !tbaa !2450
  %5762 = load i32, i32* %ECX
  %5763 = zext i32 %5762 to i64
  %5764 = load i64, i64* %PC
  %5765 = add i64 %5764, 3
  store i64 %5765, i64* %PC
  %5766 = shl i64 %5763, 32
  %5767 = ashr exact i64 %5766, 32
  store i64 %5767, i64* %RSI, align 8, !tbaa !2428
  %5768 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5769 = load i64, i64* %RDX
  %5770 = load i64, i64* %RSI
  %5771 = mul i64 %5770, 8
  %5772 = add i64 %5771, %5769
  %5773 = load i64, i64* %PC
  %5774 = add i64 %5773, 5
  store i64 %5774, i64* %PC
  %5775 = inttoptr i64 %5772 to double*
  %5776 = load double, double* %5775
  %5777 = bitcast i8* %5768 to double*
  store double %5776, double* %5777, align 1, !tbaa !2452
  %5778 = getelementptr inbounds i8, i8* %5768, i64 8
  %5779 = bitcast i8* %5778 to double*
  store double 0.000000e+00, double* %5779, align 1, !tbaa !2452
  %5780 = bitcast %union.vec128_t* %XMM0 to i8*
  %5781 = load i64, i64* %PC
  %5782 = add i64 %5781, 5
  store i64 %5782, i64* %PC
  %5783 = bitcast i8* %5780 to i64*
  %5784 = load i64, i64* %5783, align 1
  store i64 %5784, i64* %RDX, align 1, !tbaa !2428
  %5785 = load i64, i64* %RDX
  %5786 = load i64, i64* %RAX
  %5787 = load i64, i64* %PC
  %5788 = add i64 %5787, 3
  store i64 %5788, i64* %PC
  %5789 = xor i64 %5786, %5785
  store i64 %5789, i64* %RDX, align 8, !tbaa !2428
  %5790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5790, align 1, !tbaa !2432
  %5791 = trunc i64 %5789 to i32
  %5792 = and i32 %5791, 255
  %5793 = call i32 @llvm.ctpop.i32(i32 %5792) #17
  %5794 = trunc i32 %5793 to i8
  %5795 = and i8 %5794, 1
  %5796 = xor i8 %5795, 1
  %5797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5796, i8* %5797, align 1, !tbaa !2446
  %5798 = icmp eq i64 %5789, 0
  %5799 = zext i1 %5798 to i8
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5799, i8* %5800, align 1, !tbaa !2448
  %5801 = lshr i64 %5789, 63
  %5802 = trunc i64 %5801 to i8
  %5803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5802, i8* %5803, align 1, !tbaa !2449
  %5804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5804, align 1, !tbaa !2450
  %5805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5805, align 1, !tbaa !2447
  %5806 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5807 = load i64, i64* %RDX
  %5808 = load i64, i64* %PC
  %5809 = add i64 %5808, 5
  store i64 %5809, i64* %PC
  %5810 = bitcast i8* %5806 to i64*
  store i64 %5807, i64* %5810, align 1, !tbaa !2428
  %5811 = getelementptr inbounds i8, i8* %5806, i64 8
  %5812 = bitcast i8* %5811 to i64*
  store i64 0, i64* %5812, align 1, !tbaa !2428
  %5813 = load i64, i64* %RBP
  %5814 = sub i64 %5813, 88
  %5815 = bitcast %union.vec128_t* %XMM0 to i8*
  %5816 = load i64, i64* %PC
  %5817 = add i64 %5816, 5
  store i64 %5817, i64* %PC
  %5818 = bitcast i8* %5815 to double*
  %5819 = load double, double* %5818, align 1
  %5820 = inttoptr i64 %5814 to double*
  store double %5819, double* %5820
  %5821 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5822 = load i64, i64* %RBP
  %5823 = sub i64 %5822, 80
  %5824 = load i64, i64* %PC
  %5825 = add i64 %5824, 5
  store i64 %5825, i64* %PC
  %5826 = inttoptr i64 %5823 to double*
  %5827 = load double, double* %5826
  %5828 = bitcast i8* %5821 to double*
  store double %5827, double* %5828, align 1, !tbaa !2452
  %5829 = getelementptr inbounds i8, i8* %5821, i64 8
  %5830 = bitcast i8* %5829 to double*
  store double 0.000000e+00, double* %5830, align 1, !tbaa !2452
  %5831 = load i64, i64* %RBP
  %5832 = sub i64 %5831, 24
  %5833 = load i64, i64* %PC
  %5834 = add i64 %5833, 4
  store i64 %5834, i64* %PC
  %5835 = inttoptr i64 %5832 to i64*
  %5836 = load i64, i64* %5835
  store i64 %5836, i64* %RAX, align 8, !tbaa !2428
  %5837 = load i64, i64* %RBP
  %5838 = sub i64 %5837, 32
  %5839 = load i64, i64* %PC
  %5840 = add i64 %5839, 4
  store i64 %5840, i64* %PC
  %5841 = inttoptr i64 %5838 to i32*
  %5842 = load i32, i32* %5841
  %5843 = sext i32 %5842 to i64
  store i64 %5843, i64* %RDX, align 8, !tbaa !2428
  %5844 = load i64, i64* %RAX
  %5845 = load i64, i64* %RDX
  %5846 = mul i64 %5845, 8
  %5847 = add i64 %5846, %5844
  %5848 = bitcast %union.vec128_t* %XMM0 to i8*
  %5849 = load i64, i64* %PC
  %5850 = add i64 %5849, 5
  store i64 %5850, i64* %PC
  %5851 = bitcast i8* %5848 to double*
  %5852 = load double, double* %5851, align 1
  %5853 = inttoptr i64 %5847 to double*
  store double %5852, double* %5853
  %5854 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5855 = load i64, i64* %RBP
  %5856 = sub i64 %5855, 88
  %5857 = load i64, i64* %PC
  %5858 = add i64 %5857, 5
  store i64 %5858, i64* %PC
  %5859 = inttoptr i64 %5856 to double*
  %5860 = load double, double* %5859
  %5861 = bitcast i8* %5854 to double*
  store double %5860, double* %5861, align 1, !tbaa !2452
  %5862 = getelementptr inbounds i8, i8* %5854, i64 8
  %5863 = bitcast i8* %5862 to double*
  store double 0.000000e+00, double* %5863, align 1, !tbaa !2452
  %5864 = load i64, i64* %RBP
  %5865 = sub i64 %5864, 24
  %5866 = load i64, i64* %PC
  %5867 = add i64 %5866, 4
  store i64 %5867, i64* %PC
  %5868 = inttoptr i64 %5865 to i64*
  %5869 = load i64, i64* %5868
  store i64 %5869, i64* %RAX, align 8, !tbaa !2428
  %5870 = load i64, i64* %RBP
  %5871 = sub i64 %5870, 32
  %5872 = load i64, i64* %PC
  %5873 = add i64 %5872, 3
  store i64 %5873, i64* %PC
  %5874 = inttoptr i64 %5871 to i32*
  %5875 = load i32, i32* %5874
  %5876 = zext i32 %5875 to i64
  store i64 %5876, i64* %RCX, align 8, !tbaa !2428
  %5877 = load i64, i64* %RCX
  %5878 = load i64, i64* %PC
  %5879 = add i64 %5878, 3
  store i64 %5879, i64* %PC
  %5880 = trunc i64 %5877 to i32
  %5881 = add i32 1, %5880
  %5882 = zext i32 %5881 to i64
  store i64 %5882, i64* %RCX, align 8, !tbaa !2428
  %5883 = icmp ult i32 %5881, %5880
  %5884 = icmp ult i32 %5881, 1
  %5885 = or i1 %5883, %5884
  %5886 = zext i1 %5885 to i8
  %5887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5886, i8* %5887, align 1, !tbaa !2432
  %5888 = and i32 %5881, 255
  %5889 = call i32 @llvm.ctpop.i32(i32 %5888) #17
  %5890 = trunc i32 %5889 to i8
  %5891 = and i8 %5890, 1
  %5892 = xor i8 %5891, 1
  %5893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5892, i8* %5893, align 1, !tbaa !2446
  %5894 = xor i64 1, %5877
  %5895 = trunc i64 %5894 to i32
  %5896 = xor i32 %5895, %5881
  %5897 = lshr i32 %5896, 4
  %5898 = trunc i32 %5897 to i8
  %5899 = and i8 %5898, 1
  %5900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5899, i8* %5900, align 1, !tbaa !2447
  %5901 = icmp eq i32 %5881, 0
  %5902 = zext i1 %5901 to i8
  %5903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5902, i8* %5903, align 1, !tbaa !2448
  %5904 = lshr i32 %5881, 31
  %5905 = trunc i32 %5904 to i8
  %5906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5905, i8* %5906, align 1, !tbaa !2449
  %5907 = lshr i32 %5880, 31
  %5908 = xor i32 %5904, %5907
  %5909 = add nuw nsw i32 %5908, %5904
  %5910 = icmp eq i32 %5909, 2
  %5911 = zext i1 %5910 to i8
  %5912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5911, i8* %5912, align 1, !tbaa !2450
  %5913 = load i32, i32* %ECX
  %5914 = zext i32 %5913 to i64
  %5915 = load i64, i64* %PC
  %5916 = add i64 %5915, 3
  store i64 %5916, i64* %PC
  %5917 = shl i64 %5914, 32
  %5918 = ashr exact i64 %5917, 32
  store i64 %5918, i64* %RDX, align 8, !tbaa !2428
  %5919 = load i64, i64* %RAX
  %5920 = load i64, i64* %RDX
  %5921 = mul i64 %5920, 8
  %5922 = add i64 %5921, %5919
  %5923 = bitcast %union.vec128_t* %XMM0 to i8*
  %5924 = load i64, i64* %PC
  %5925 = add i64 %5924, 5
  store i64 %5925, i64* %PC
  %5926 = bitcast i8* %5923 to double*
  %5927 = load double, double* %5926, align 1
  %5928 = inttoptr i64 %5922 to double*
  store double %5927, double* %5928
  %5929 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5930 = load i64, i64* %RBP
  %5931 = sub i64 %5930, 64
  %5932 = load i64, i64* %PC
  %5933 = add i64 %5932, 5
  store i64 %5933, i64* %PC
  %5934 = inttoptr i64 %5931 to double*
  %5935 = load double, double* %5934
  %5936 = bitcast i8* %5929 to double*
  store double %5935, double* %5936, align 1, !tbaa !2452
  %5937 = getelementptr inbounds i8, i8* %5929, i64 8
  %5938 = bitcast i8* %5937 to double*
  store double 0.000000e+00, double* %5938, align 1, !tbaa !2452
  %5939 = load i64, i64* %RBP
  %5940 = sub i64 %5939, 24
  %5941 = load i64, i64* %PC
  %5942 = add i64 %5941, 4
  store i64 %5942, i64* %PC
  %5943 = inttoptr i64 %5940 to i64*
  %5944 = load i64, i64* %5943
  store i64 %5944, i64* %RAX, align 8, !tbaa !2428
  %5945 = load i64, i64* %RBP
  %5946 = sub i64 %5945, 40
  %5947 = load i64, i64* %PC
  %5948 = add i64 %5947, 4
  store i64 %5948, i64* %PC
  %5949 = inttoptr i64 %5946 to i32*
  %5950 = load i32, i32* %5949
  %5951 = sext i32 %5950 to i64
  store i64 %5951, i64* %RDX, align 8, !tbaa !2428
  %5952 = load i64, i64* %RAX
  %5953 = load i64, i64* %RDX
  %5954 = mul i64 %5953, 8
  %5955 = add i64 %5954, %5952
  %5956 = bitcast %union.vec128_t* %XMM0 to i8*
  %5957 = load i64, i64* %PC
  %5958 = add i64 %5957, 5
  store i64 %5958, i64* %PC
  %5959 = bitcast i8* %5956 to double*
  %5960 = load double, double* %5959, align 1
  %5961 = inttoptr i64 %5955 to double*
  store double %5960, double* %5961
  %5962 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5963 = load i64, i64* %RBP
  %5964 = sub i64 %5963, 72
  %5965 = load i64, i64* %PC
  %5966 = add i64 %5965, 5
  store i64 %5966, i64* %PC
  %5967 = inttoptr i64 %5964 to double*
  %5968 = load double, double* %5967
  %5969 = bitcast i8* %5962 to double*
  store double %5968, double* %5969, align 1, !tbaa !2452
  %5970 = getelementptr inbounds i8, i8* %5962, i64 8
  %5971 = bitcast i8* %5970 to double*
  store double 0.000000e+00, double* %5971, align 1, !tbaa !2452
  %5972 = load i64, i64* %RBP
  %5973 = sub i64 %5972, 24
  %5974 = load i64, i64* %PC
  %5975 = add i64 %5974, 4
  store i64 %5975, i64* %PC
  %5976 = inttoptr i64 %5973 to i64*
  %5977 = load i64, i64* %5976
  store i64 %5977, i64* %RAX, align 8, !tbaa !2428
  %5978 = load i64, i64* %RBP
  %5979 = sub i64 %5978, 40
  %5980 = load i64, i64* %PC
  %5981 = add i64 %5980, 3
  store i64 %5981, i64* %PC
  %5982 = inttoptr i64 %5979 to i32*
  %5983 = load i32, i32* %5982
  %5984 = zext i32 %5983 to i64
  store i64 %5984, i64* %RCX, align 8, !tbaa !2428
  %5985 = load i64, i64* %RCX
  %5986 = load i64, i64* %PC
  %5987 = add i64 %5986, 3
  store i64 %5987, i64* %PC
  %5988 = trunc i64 %5985 to i32
  %5989 = add i32 1, %5988
  %5990 = zext i32 %5989 to i64
  store i64 %5990, i64* %RCX, align 8, !tbaa !2428
  %5991 = icmp ult i32 %5989, %5988
  %5992 = icmp ult i32 %5989, 1
  %5993 = or i1 %5991, %5992
  %5994 = zext i1 %5993 to i8
  %5995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5994, i8* %5995, align 1, !tbaa !2432
  %5996 = and i32 %5989, 255
  %5997 = call i32 @llvm.ctpop.i32(i32 %5996) #17
  %5998 = trunc i32 %5997 to i8
  %5999 = and i8 %5998, 1
  %6000 = xor i8 %5999, 1
  %6001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6000, i8* %6001, align 1, !tbaa !2446
  %6002 = xor i64 1, %5985
  %6003 = trunc i64 %6002 to i32
  %6004 = xor i32 %6003, %5989
  %6005 = lshr i32 %6004, 4
  %6006 = trunc i32 %6005 to i8
  %6007 = and i8 %6006, 1
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6007, i8* %6008, align 1, !tbaa !2447
  %6009 = icmp eq i32 %5989, 0
  %6010 = zext i1 %6009 to i8
  %6011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6010, i8* %6011, align 1, !tbaa !2448
  %6012 = lshr i32 %5989, 31
  %6013 = trunc i32 %6012 to i8
  %6014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6013, i8* %6014, align 1, !tbaa !2449
  %6015 = lshr i32 %5988, 31
  %6016 = xor i32 %6012, %6015
  %6017 = add nuw nsw i32 %6016, %6012
  %6018 = icmp eq i32 %6017, 2
  %6019 = zext i1 %6018 to i8
  %6020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6019, i8* %6020, align 1, !tbaa !2450
  %6021 = load i32, i32* %ECX
  %6022 = zext i32 %6021 to i64
  %6023 = load i64, i64* %PC
  %6024 = add i64 %6023, 3
  store i64 %6024, i64* %PC
  %6025 = shl i64 %6022, 32
  %6026 = ashr exact i64 %6025, 32
  store i64 %6026, i64* %RDX, align 8, !tbaa !2428
  %6027 = load i64, i64* %RAX
  %6028 = load i64, i64* %RDX
  %6029 = mul i64 %6028, 8
  %6030 = add i64 %6029, %6027
  %6031 = bitcast %union.vec128_t* %XMM0 to i8*
  %6032 = load i64, i64* %PC
  %6033 = add i64 %6032, 5
  store i64 %6033, i64* %PC
  %6034 = bitcast i8* %6031 to double*
  %6035 = load double, double* %6034, align 1
  %6036 = inttoptr i64 %6030 to double*
  store double %6035, double* %6036
  %6037 = load i64, i64* %RBP
  %6038 = sub i64 %6037, 28
  %6039 = load i64, i64* %PC
  %6040 = add i64 %6039, 3
  store i64 %6040, i64* %PC
  %6041 = inttoptr i64 %6038 to i32*
  %6042 = load i32, i32* %6041
  %6043 = zext i32 %6042 to i64
  store i64 %6043, i64* %RAX, align 8, !tbaa !2428
  %6044 = load i64, i64* %RAX
  %6045 = load i64, i64* %PC
  %6046 = add i64 %6045, 3
  store i64 %6046, i64* %PC
  %6047 = trunc i64 %6044 to i32
  %6048 = add i32 1, %6047
  %6049 = zext i32 %6048 to i64
  store i64 %6049, i64* %RAX, align 8, !tbaa !2428
  %6050 = icmp ult i32 %6048, %6047
  %6051 = icmp ult i32 %6048, 1
  %6052 = or i1 %6050, %6051
  %6053 = zext i1 %6052 to i8
  %6054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6053, i8* %6054, align 1, !tbaa !2432
  %6055 = and i32 %6048, 255
  %6056 = call i32 @llvm.ctpop.i32(i32 %6055) #17
  %6057 = trunc i32 %6056 to i8
  %6058 = and i8 %6057, 1
  %6059 = xor i8 %6058, 1
  %6060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6059, i8* %6060, align 1, !tbaa !2446
  %6061 = xor i64 1, %6044
  %6062 = trunc i64 %6061 to i32
  %6063 = xor i32 %6062, %6048
  %6064 = lshr i32 %6063, 4
  %6065 = trunc i32 %6064 to i8
  %6066 = and i8 %6065, 1
  %6067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6066, i8* %6067, align 1, !tbaa !2447
  %6068 = icmp eq i32 %6048, 0
  %6069 = zext i1 %6068 to i8
  %6070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6069, i8* %6070, align 1, !tbaa !2448
  %6071 = lshr i32 %6048, 31
  %6072 = trunc i32 %6071 to i8
  %6073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6072, i8* %6073, align 1, !tbaa !2449
  %6074 = lshr i32 %6047, 31
  %6075 = xor i32 %6071, %6074
  %6076 = add nuw nsw i32 %6075, %6071
  %6077 = icmp eq i32 %6076, 2
  %6078 = zext i1 %6077 to i8
  %6079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6078, i8* %6079, align 1, !tbaa !2450
  %6080 = load i64, i64* %RBP
  %6081 = sub i64 %6080, 28
  %6082 = load i32, i32* %EAX
  %6083 = zext i32 %6082 to i64
  %6084 = load i64, i64* %PC
  %6085 = add i64 %6084, 3
  store i64 %6085, i64* %PC
  %6086 = inttoptr i64 %6081 to i32*
  store i32 %6082, i32* %6086
  %6087 = load i64, i64* %PC
  %6088 = sub i64 %6087, 469
  %6089 = load i64, i64* %PC
  %6090 = add i64 %6089, 5
  store i64 %6090, i64* %PC
  %6091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6088, i64* %6091, align 8, !tbaa !2428
  br label %block_40221f

block_401c26:                                     ; preds = %block_401c7d, %block_401c00
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401c00 ], [ %MEMORY.6, %block_401c7d ]
  %6092 = load i64, i64* %RBP
  %6093 = sub i64 %6092, 48
  %6094 = load i64, i64* %PC
  %6095 = add i64 %6094, 3
  store i64 %6095, i64* %PC
  %6096 = inttoptr i64 %6093 to i32*
  %6097 = load i32, i32* %6096
  %6098 = zext i32 %6097 to i64
  store i64 %6098, i64* %RAX, align 8, !tbaa !2428
  %6099 = load i64, i64* %RAX
  %6100 = load i64, i64* %PC
  %6101 = add i64 %6100, 3
  store i64 %6101, i64* %PC
  %6102 = and i64 %6099, 4294967295
  %6103 = shl i64 %6102, 2
  %6104 = trunc i64 %6103 to i32
  %6105 = icmp slt i32 %6104, 0
  %6106 = shl i32 %6104, 1
  %6107 = zext i32 %6106 to i64
  store i64 %6107, i64* %RAX, align 8, !tbaa !2428
  %6108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6109 = zext i1 %6105 to i8
  store i8 %6109, i8* %6108, align 1, !tbaa !2451
  %6110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6111 = and i32 %6106, 254
  %6112 = call i32 @llvm.ctpop.i32(i32 %6111) #17
  %6113 = trunc i32 %6112 to i8
  %6114 = and i8 %6113, 1
  %6115 = xor i8 %6114, 1
  store i8 %6115, i8* %6110, align 1, !tbaa !2451
  %6116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6116, align 1, !tbaa !2451
  %6117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6118 = icmp eq i32 %6106, 0
  %6119 = zext i1 %6118 to i8
  store i8 %6119, i8* %6117, align 1, !tbaa !2451
  %6120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6121 = lshr i32 %6106, 31
  %6122 = trunc i32 %6121 to i8
  store i8 %6122, i8* %6120, align 1, !tbaa !2451
  %6123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6123, align 1, !tbaa !2451
  %6124 = load i32, i32* %EAX
  %6125 = zext i32 %6124 to i64
  %6126 = load i64, i64* %RBP
  %6127 = sub i64 %6126, 44
  %6128 = load i64, i64* %PC
  %6129 = add i64 %6128, 3
  store i64 %6129, i64* %PC
  %6130 = inttoptr i64 %6127 to i32*
  %6131 = load i32, i32* %6130
  %6132 = sub i32 %6124, %6131
  %6133 = icmp ult i32 %6124, %6131
  %6134 = zext i1 %6133 to i8
  %6135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6134, i8* %6135, align 1, !tbaa !2432
  %6136 = and i32 %6132, 255
  %6137 = call i32 @llvm.ctpop.i32(i32 %6136) #17
  %6138 = trunc i32 %6137 to i8
  %6139 = and i8 %6138, 1
  %6140 = xor i8 %6139, 1
  %6141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6140, i8* %6141, align 1, !tbaa !2446
  %6142 = xor i32 %6131, %6124
  %6143 = xor i32 %6142, %6132
  %6144 = lshr i32 %6143, 4
  %6145 = trunc i32 %6144 to i8
  %6146 = and i8 %6145, 1
  %6147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6146, i8* %6147, align 1, !tbaa !2447
  %6148 = icmp eq i32 %6132, 0
  %6149 = zext i1 %6148 to i8
  %6150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6149, i8* %6150, align 1, !tbaa !2448
  %6151 = lshr i32 %6132, 31
  %6152 = trunc i32 %6151 to i8
  %6153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6152, i8* %6153, align 1, !tbaa !2449
  %6154 = lshr i32 %6124, 31
  %6155 = lshr i32 %6131, 31
  %6156 = xor i32 %6155, %6154
  %6157 = xor i32 %6151, %6154
  %6158 = add nuw nsw i32 %6157, %6156
  %6159 = icmp eq i32 %6158, 2
  %6160 = zext i1 %6159 to i8
  %6161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6160, i8* %6161, align 1, !tbaa !2450
  %6162 = load i64, i64* %PC
  %6163 = add i64 %6162, 92
  %6164 = load i64, i64* %PC
  %6165 = add i64 %6164, 6
  %6166 = load i64, i64* %PC
  %6167 = add i64 %6166, 6
  store i64 %6167, i64* %PC
  %6168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6169 = load i8, i8* %6168, align 1, !tbaa !2449
  %6170 = icmp ne i8 %6169, 0
  %6171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6172 = load i8, i8* %6171, align 1, !tbaa !2450
  %6173 = icmp ne i8 %6172, 0
  %6174 = xor i1 %6170, %6173
  %6175 = xor i1 %6174, true
  %6176 = zext i1 %6175 to i8
  store i8 %6176, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6178 = select i1 %6174, i64 %6165, i64 %6163
  store i64 %6178, i64* %6177, align 8, !tbaa !2428
  %6179 = load i8, i8* %BRANCH_TAKEN
  %6180 = icmp eq i8 %6179, 1
  %6181 = load i64, i64* %RBP
  br i1 %6180, label %block_401c8b, label %block_401c35

block_40221f:                                     ; preds = %block_402218, %block_40222b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.5, %block_402218 ], [ %MEMORY.2, %block_40222b ]
  %6182 = load i64, i64* %RBP
  %6183 = sub i64 %6182, 28
  %6184 = load i64, i64* %PC
  %6185 = add i64 %6184, 3
  store i64 %6185, i64* %PC
  %6186 = inttoptr i64 %6183 to i32*
  %6187 = load i32, i32* %6186
  %6188 = zext i32 %6187 to i64
  store i64 %6188, i64* %RAX, align 8, !tbaa !2428
  %6189 = load i32, i32* %EAX
  %6190 = zext i32 %6189 to i64
  %6191 = load i64, i64* %RBP
  %6192 = sub i64 %6191, 36
  %6193 = load i64, i64* %PC
  %6194 = add i64 %6193, 3
  store i64 %6194, i64* %PC
  %6195 = inttoptr i64 %6192 to i32*
  %6196 = load i32, i32* %6195
  %6197 = sub i32 %6189, %6196
  %6198 = icmp ult i32 %6189, %6196
  %6199 = zext i1 %6198 to i8
  %6200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6199, i8* %6200, align 1, !tbaa !2432
  %6201 = and i32 %6197, 255
  %6202 = call i32 @llvm.ctpop.i32(i32 %6201) #17
  %6203 = trunc i32 %6202 to i8
  %6204 = and i8 %6203, 1
  %6205 = xor i8 %6204, 1
  %6206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6205, i8* %6206, align 1, !tbaa !2446
  %6207 = xor i32 %6196, %6189
  %6208 = xor i32 %6207, %6197
  %6209 = lshr i32 %6208, 4
  %6210 = trunc i32 %6209 to i8
  %6211 = and i8 %6210, 1
  %6212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6211, i8* %6212, align 1, !tbaa !2447
  %6213 = icmp eq i32 %6197, 0
  %6214 = zext i1 %6213 to i8
  %6215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6214, i8* %6215, align 1, !tbaa !2448
  %6216 = lshr i32 %6197, 31
  %6217 = trunc i32 %6216 to i8
  %6218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6217, i8* %6218, align 1, !tbaa !2449
  %6219 = lshr i32 %6189, 31
  %6220 = lshr i32 %6196, 31
  %6221 = xor i32 %6220, %6219
  %6222 = xor i32 %6216, %6219
  %6223 = add nuw nsw i32 %6222, %6221
  %6224 = icmp eq i32 %6223, 2
  %6225 = zext i1 %6224 to i8
  %6226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6225, i8* %6226, align 1, !tbaa !2450
  %6227 = load i64, i64* %PC
  %6228 = add i64 %6227, 468
  %6229 = load i64, i64* %PC
  %6230 = add i64 %6229, 6
  %6231 = load i64, i64* %PC
  %6232 = add i64 %6231, 6
  store i64 %6232, i64* %PC
  %6233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6234 = load i8, i8* %6233, align 1, !tbaa !2449
  %6235 = icmp ne i8 %6234, 0
  %6236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6237 = load i8, i8* %6236, align 1, !tbaa !2450
  %6238 = icmp ne i8 %6237, 0
  %6239 = xor i1 %6235, %6238
  %6240 = xor i1 %6239, true
  %6241 = zext i1 %6240 to i8
  store i8 %6241, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6243 = select i1 %6239, i64 %6230, i64 %6228
  store i64 %6243, i64* %6242, align 8, !tbaa !2428
  %6244 = load i8, i8* %BRANCH_TAKEN
  %6245 = icmp eq i8 %6244, 1
  %6246 = load i64, i64* %PC
  %6247 = add i64 %6246, 10
  store i64 %6247, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %6248 = load i64, i64* %RBP
  br i1 %6245, label %block_4023f9, label %block_40222b

block_402218:                                     ; preds = %block_40220c
  %6249 = load i64, i64* %RBP
  %6250 = sub i64 %6249, 28
  %6251 = load i64, i64* %PC
  %6252 = add i64 %6251, 7
  store i64 %6252, i64* %PC
  %6253 = inttoptr i64 %6250 to i32*
  store i32 0, i32* %6253
  br label %block_40221f

block_401caa:                                     ; preds = %block_401ca3, %block_40203f
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_401ca3 ], [ %MEMORY.0, %block_40203f ]
  %6254 = load i64, i64* %RBP
  %6255 = sub i64 %6254, 36
  %6256 = load i64, i64* %PC
  %6257 = add i64 %6256, 3
  store i64 %6257, i64* %PC
  %6258 = inttoptr i64 %6255 to i32*
  %6259 = load i32, i32* %6258
  %6260 = zext i32 %6259 to i64
  store i64 %6260, i64* %RAX, align 8, !tbaa !2428
  %6261 = load i32, i32* %EAX
  %6262 = zext i32 %6261 to i64
  %6263 = load i64, i64* %RBP
  %6264 = sub i64 %6263, 48
  %6265 = load i64, i64* %PC
  %6266 = add i64 %6265, 3
  store i64 %6266, i64* %PC
  %6267 = inttoptr i64 %6264 to i32*
  %6268 = load i32, i32* %6267
  %6269 = sub i32 %6261, %6268
  %6270 = icmp ult i32 %6261, %6268
  %6271 = zext i1 %6270 to i8
  %6272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6271, i8* %6272, align 1, !tbaa !2432
  %6273 = and i32 %6269, 255
  %6274 = call i32 @llvm.ctpop.i32(i32 %6273) #17
  %6275 = trunc i32 %6274 to i8
  %6276 = and i8 %6275, 1
  %6277 = xor i8 %6276, 1
  %6278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6277, i8* %6278, align 1, !tbaa !2446
  %6279 = xor i32 %6268, %6261
  %6280 = xor i32 %6279, %6269
  %6281 = lshr i32 %6280, 4
  %6282 = trunc i32 %6281 to i8
  %6283 = and i8 %6282, 1
  %6284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6283, i8* %6284, align 1, !tbaa !2447
  %6285 = icmp eq i32 %6269, 0
  %6286 = zext i1 %6285 to i8
  %6287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6286, i8* %6287, align 1, !tbaa !2448
  %6288 = lshr i32 %6269, 31
  %6289 = trunc i32 %6288 to i8
  %6290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6289, i8* %6290, align 1, !tbaa !2449
  %6291 = lshr i32 %6261, 31
  %6292 = lshr i32 %6268, 31
  %6293 = xor i32 %6292, %6291
  %6294 = xor i32 %6288, %6291
  %6295 = add nuw nsw i32 %6294, %6293
  %6296 = icmp eq i32 %6295, 2
  %6297 = zext i1 %6296 to i8
  %6298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6297, i8* %6298, align 1, !tbaa !2450
  %6299 = load i64, i64* %PC
  %6300 = add i64 %6299, 1270
  %6301 = load i64, i64* %PC
  %6302 = add i64 %6301, 6
  %6303 = load i64, i64* %PC
  %6304 = add i64 %6303, 6
  store i64 %6304, i64* %PC
  %6305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6306 = load i8, i8* %6305, align 1, !tbaa !2449
  %6307 = icmp ne i8 %6306, 0
  %6308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6309 = load i8, i8* %6308, align 1, !tbaa !2450
  %6310 = icmp ne i8 %6309, 0
  %6311 = xor i1 %6307, %6310
  %6312 = xor i1 %6311, true
  %6313 = zext i1 %6312 to i8
  store i8 %6313, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6315 = select i1 %6311, i64 %6302, i64 %6300
  store i64 %6315, i64* %6314, align 8, !tbaa !2428
  %6316 = load i8, i8* %BRANCH_TAKEN
  %6317 = icmp eq i8 %6316, 1
  br i1 %6317, label %block_4021a6, label %block_401cb6

block_402492:                                     ; preds = %block_40248d, %block_4021a6
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_40248d ], [ %MEMORY.3, %block_4021a6 ]
  %6318 = load i64, i64* %PC
  %6319 = add i64 %6318, 1
  store i64 %6319, i64* %PC
  %6320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6321 = load i64, i64* %6320, align 8, !tbaa !2428
  %6322 = add i64 %6321, 8
  %6323 = inttoptr i64 %6321 to i64*
  %6324 = load i64, i64* %6323
  store i64 %6324, i64* %RBP, align 8, !tbaa !2428
  store i64 %6322, i64* %6320, align 8, !tbaa !2428
  %6325 = load i64, i64* %PC
  %6326 = add i64 %6325, 1
  store i64 %6326, i64* %PC
  %6327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6329 = load i64, i64* %6328, align 8, !tbaa !2428
  %6330 = inttoptr i64 %6329 to i64*
  %6331 = load i64, i64* %6330
  store i64 %6331, i64* %6327, align 8, !tbaa !2428
  %6332 = add i64 %6329, 8
  store i64 %6332, i64* %6328, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_40248d:                                     ; preds = %block_40220c
  %6333 = load i64, i64* %PC
  %6334 = add i64 %6333, 5
  %6335 = load i64, i64* %PC
  %6336 = add i64 %6335, 5
  store i64 %6336, i64* %PC
  %6337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6334, i64* %6337, align 8, !tbaa !2428
  br label %block_402492

block_401c35:                                     ; preds = %block_401c26
  %6338 = sub i64 %6181, 44
  %6339 = load i64, i64* %PC
  %6340 = add i64 %6339, 3
  store i64 %6340, i64* %PC
  %6341 = inttoptr i64 %6338 to i32*
  %6342 = load i32, i32* %6341
  %6343 = zext i32 %6342 to i64
  store i64 %6343, i64* %RAX, align 8, !tbaa !2428
  %6344 = load i64, i64* %RAX
  %6345 = load i64, i64* %PC
  %6346 = add i64 %6345, 3
  store i64 %6346, i64* %PC
  %6347 = shl i64 %6344, 32
  %6348 = ashr i64 %6347, 33
  %6349 = trunc i64 %6344 to i8
  %6350 = and i8 %6349, 1
  %6351 = trunc i64 %6348 to i32
  %6352 = and i64 %6348, 4294967295
  store i64 %6352, i64* %RAX, align 8, !tbaa !2428
  %6353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6350, i8* %6353, align 1, !tbaa !2451
  %6354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6355 = and i32 %6351, 255
  %6356 = call i32 @llvm.ctpop.i32(i32 %6355) #17
  %6357 = trunc i32 %6356 to i8
  %6358 = and i8 %6357, 1
  %6359 = xor i8 %6358, 1
  store i8 %6359, i8* %6354, align 1, !tbaa !2451
  %6360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6360, align 1, !tbaa !2451
  %6361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6362 = icmp eq i32 %6351, 0
  %6363 = zext i1 %6362 to i8
  store i8 %6363, i8* %6361, align 1, !tbaa !2451
  %6364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6365 = lshr i32 %6351, 31
  %6366 = trunc i32 %6365 to i8
  store i8 %6366, i8* %6364, align 1, !tbaa !2451
  %6367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6367, align 1, !tbaa !2451
  %6368 = load i64, i64* %RBP
  %6369 = sub i64 %6368, 44
  %6370 = load i32, i32* %EAX
  %6371 = zext i32 %6370 to i64
  %6372 = load i64, i64* %PC
  %6373 = add i64 %6372, 3
  store i64 %6373, i64* %PC
  %6374 = inttoptr i64 %6369 to i32*
  store i32 %6370, i32* %6374
  %6375 = load i64, i64* %RBP
  %6376 = sub i64 %6375, 28
  %6377 = load i64, i64* %PC
  %6378 = add i64 %6377, 7
  store i64 %6378, i64* %PC
  %6379 = inttoptr i64 %6376 to i32*
  store i32 0, i32* %6379
  br label %block_401c45

block_40220c:                                     ; preds = %block_4021ab, %block_4023f9
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_4021ab ], [ %MEMORY.2, %block_4023f9 ]
  %6380 = load i64, i64* %RBP
  %6381 = sub i64 %6380, 36
  %6382 = load i64, i64* %PC
  %6383 = add i64 %6382, 3
  store i64 %6383, i64* %PC
  %6384 = inttoptr i64 %6381 to i32*
  %6385 = load i32, i32* %6384
  %6386 = zext i32 %6385 to i64
  store i64 %6386, i64* %RAX, align 8, !tbaa !2428
  %6387 = load i32, i32* %EAX
  %6388 = zext i32 %6387 to i64
  %6389 = load i64, i64* %RBP
  %6390 = sub i64 %6389, 48
  %6391 = load i64, i64* %PC
  %6392 = add i64 %6391, 3
  store i64 %6392, i64* %PC
  %6393 = inttoptr i64 %6390 to i32*
  %6394 = load i32, i32* %6393
  %6395 = sub i32 %6387, %6394
  %6396 = icmp ult i32 %6387, %6394
  %6397 = zext i1 %6396 to i8
  %6398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6397, i8* %6398, align 1, !tbaa !2432
  %6399 = and i32 %6395, 255
  %6400 = call i32 @llvm.ctpop.i32(i32 %6399) #17
  %6401 = trunc i32 %6400 to i8
  %6402 = and i8 %6401, 1
  %6403 = xor i8 %6402, 1
  %6404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6403, i8* %6404, align 1, !tbaa !2446
  %6405 = xor i32 %6394, %6387
  %6406 = xor i32 %6405, %6395
  %6407 = lshr i32 %6406, 4
  %6408 = trunc i32 %6407 to i8
  %6409 = and i8 %6408, 1
  %6410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6409, i8* %6410, align 1, !tbaa !2447
  %6411 = icmp eq i32 %6395, 0
  %6412 = zext i1 %6411 to i8
  %6413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6412, i8* %6413, align 1, !tbaa !2448
  %6414 = lshr i32 %6395, 31
  %6415 = trunc i32 %6414 to i8
  %6416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6415, i8* %6416, align 1, !tbaa !2449
  %6417 = lshr i32 %6387, 31
  %6418 = lshr i32 %6394, 31
  %6419 = xor i32 %6418, %6417
  %6420 = xor i32 %6414, %6417
  %6421 = add nuw nsw i32 %6420, %6419
  %6422 = icmp eq i32 %6421, 2
  %6423 = zext i1 %6422 to i8
  %6424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6423, i8* %6424, align 1, !tbaa !2450
  %6425 = load i64, i64* %PC
  %6426 = add i64 %6425, 635
  %6427 = load i64, i64* %PC
  %6428 = add i64 %6427, 6
  %6429 = load i64, i64* %PC
  %6430 = add i64 %6429, 6
  store i64 %6430, i64* %PC
  %6431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6432 = load i8, i8* %6431, align 1, !tbaa !2449
  %6433 = icmp ne i8 %6432, 0
  %6434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6435 = load i8, i8* %6434, align 1, !tbaa !2450
  %6436 = icmp ne i8 %6435, 0
  %6437 = xor i1 %6433, %6436
  %6438 = xor i1 %6437, true
  %6439 = zext i1 %6438 to i8
  store i8 %6439, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6441 = select i1 %6437, i64 %6428, i64 %6426
  store i64 %6441, i64* %6440, align 8, !tbaa !2428
  %6442 = load i8, i8* %BRANCH_TAKEN
  %6443 = icmp eq i8 %6442, 1
  br i1 %6443, label %block_40248d, label %block_402218

block_401c8b:                                     ; preds = %block_401c26
  %6444 = sub i64 %6181, 48
  %6445 = load i64, i64* %PC
  %6446 = add i64 %6445, 3
  store i64 %6446, i64* %PC
  %6447 = inttoptr i64 %6444 to i32*
  %6448 = load i32, i32* %6447
  %6449 = zext i32 %6448 to i64
  store i64 %6449, i64* %RAX, align 8, !tbaa !2428
  %6450 = load i64, i64* %RAX
  %6451 = load i64, i64* %PC
  %6452 = add i64 %6451, 3
  store i64 %6452, i64* %PC
  %6453 = trunc i64 %6450 to i32
  %6454 = shl i32 %6453, 1
  %6455 = icmp slt i32 %6453, 0
  %6456 = icmp slt i32 %6454, 0
  %6457 = xor i1 %6455, %6456
  %6458 = zext i32 %6454 to i64
  store i64 %6458, i64* %RAX, align 8, !tbaa !2428
  %6459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6460 = zext i1 %6455 to i8
  store i8 %6460, i8* %6459, align 1, !tbaa !2451
  %6461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6462 = and i32 %6454, 254
  %6463 = call i32 @llvm.ctpop.i32(i32 %6462) #17
  %6464 = trunc i32 %6463 to i8
  %6465 = and i8 %6464, 1
  %6466 = xor i8 %6465, 1
  store i8 %6466, i8* %6461, align 1, !tbaa !2451
  %6467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6467, align 1, !tbaa !2451
  %6468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6469 = icmp eq i32 %6454, 0
  %6470 = zext i1 %6469 to i8
  store i8 %6470, i8* %6468, align 1, !tbaa !2451
  %6471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6472 = lshr i32 %6454, 31
  %6473 = trunc i32 %6472 to i8
  store i8 %6473, i8* %6471, align 1, !tbaa !2451
  %6474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6475 = zext i1 %6457 to i8
  store i8 %6475, i8* %6474, align 1, !tbaa !2451
  %6476 = load i64, i64* %RBP
  %6477 = sub i64 %6476, 52
  %6478 = load i32, i32* %EAX
  %6479 = zext i32 %6478 to i64
  %6480 = load i64, i64* %PC
  %6481 = add i64 %6480, 3
  store i64 %6481, i64* %PC
  %6482 = inttoptr i64 %6477 to i32*
  store i32 %6478, i32* %6482
  %6483 = load i64, i64* %RBP
  %6484 = sub i64 %6483, 48
  %6485 = load i64, i64* %PC
  %6486 = add i64 %6485, 3
  store i64 %6486, i64* %PC
  %6487 = inttoptr i64 %6484 to i32*
  %6488 = load i32, i32* %6487
  %6489 = zext i32 %6488 to i64
  store i64 %6489, i64* %RAX, align 8, !tbaa !2428
  %6490 = load i64, i64* %RAX
  %6491 = load i64, i64* %PC
  %6492 = add i64 %6491, 3
  store i64 %6492, i64* %PC
  %6493 = and i64 %6490, 4294967295
  %6494 = shl i64 %6493, 2
  %6495 = trunc i64 %6494 to i32
  %6496 = icmp slt i32 %6495, 0
  %6497 = shl i32 %6495, 1
  %6498 = zext i32 %6497 to i64
  store i64 %6498, i64* %RAX, align 8, !tbaa !2428
  %6499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6500 = zext i1 %6496 to i8
  store i8 %6500, i8* %6499, align 1, !tbaa !2451
  %6501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6502 = and i32 %6497, 254
  %6503 = call i32 @llvm.ctpop.i32(i32 %6502) #17
  %6504 = trunc i32 %6503 to i8
  %6505 = and i8 %6504, 1
  %6506 = xor i8 %6505, 1
  store i8 %6506, i8* %6501, align 1, !tbaa !2451
  %6507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6507, align 1, !tbaa !2451
  %6508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6509 = icmp eq i32 %6497, 0
  %6510 = zext i1 %6509 to i8
  store i8 %6510, i8* %6508, align 1, !tbaa !2451
  %6511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6512 = lshr i32 %6497, 31
  %6513 = trunc i32 %6512 to i8
  store i8 %6513, i8* %6511, align 1, !tbaa !2451
  %6514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6514, align 1, !tbaa !2451
  %6515 = load i32, i32* %EAX
  %6516 = zext i32 %6515 to i64
  %6517 = load i64, i64* %RBP
  %6518 = sub i64 %6517, 44
  %6519 = load i64, i64* %PC
  %6520 = add i64 %6519, 3
  store i64 %6520, i64* %PC
  %6521 = inttoptr i64 %6518 to i32*
  %6522 = load i32, i32* %6521
  %6523 = sub i32 %6515, %6522
  %6524 = icmp ult i32 %6515, %6522
  %6525 = zext i1 %6524 to i8
  %6526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6525, i8* %6526, align 1, !tbaa !2432
  %6527 = and i32 %6523, 255
  %6528 = call i32 @llvm.ctpop.i32(i32 %6527) #17
  %6529 = trunc i32 %6528 to i8
  %6530 = and i8 %6529, 1
  %6531 = xor i8 %6530, 1
  %6532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6531, i8* %6532, align 1, !tbaa !2446
  %6533 = xor i32 %6522, %6515
  %6534 = xor i32 %6533, %6523
  %6535 = lshr i32 %6534, 4
  %6536 = trunc i32 %6535 to i8
  %6537 = and i8 %6536, 1
  %6538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6537, i8* %6538, align 1, !tbaa !2447
  %6539 = icmp eq i32 %6523, 0
  %6540 = zext i1 %6539 to i8
  %6541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6540, i8* %6541, align 1, !tbaa !2448
  %6542 = lshr i32 %6523, 31
  %6543 = trunc i32 %6542 to i8
  %6544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6543, i8* %6544, align 1, !tbaa !2449
  %6545 = lshr i32 %6515, 31
  %6546 = lshr i32 %6522, 31
  %6547 = xor i32 %6546, %6545
  %6548 = xor i32 %6542, %6545
  %6549 = add nuw nsw i32 %6548, %6547
  %6550 = icmp eq i32 %6549, 2
  %6551 = zext i1 %6550 to i8
  %6552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6551, i8* %6552, align 1, !tbaa !2450
  %6553 = load i64, i64* %PC
  %6554 = add i64 %6553, 1294
  %6555 = load i64, i64* %PC
  %6556 = add i64 %6555, 6
  %6557 = load i64, i64* %PC
  %6558 = add i64 %6557, 6
  store i64 %6558, i64* %PC
  %6559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6560 = load i8, i8* %6559, align 1, !tbaa !2448
  %6561 = icmp eq i8 %6560, 0
  %6562 = zext i1 %6561 to i8
  store i8 %6562, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6564 = select i1 %6561, i64 %6554, i64 %6556
  store i64 %6564, i64* %6563, align 8, !tbaa !2428
  %6565 = load i8, i8* %BRANCH_TAKEN
  %6566 = icmp eq i8 %6565, 1
  br i1 %6566, label %block_4021ab, label %block_401ca3

block_401ca3:                                     ; preds = %block_401c8b
  %6567 = load i64, i64* %RBP
  %6568 = sub i64 %6567, 36
  %6569 = load i64, i64* %PC
  %6570 = add i64 %6569, 7
  store i64 %6570, i64* %PC
  %6571 = inttoptr i64 %6568 to i32*
  store i32 0, i32* %6571
  br label %block_401caa

block_4021ab:                                     ; preds = %block_401c8b
  %6572 = load i64, i64* %PC
  %6573 = add i64 %6572, 10
  store i64 %6573, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %6574 = load i64, i64* %RBP
  %6575 = sub i64 %6574, 24
  %6576 = load i64, i64* %PC
  %6577 = add i64 %6576, 4
  store i64 %6577, i64* %PC
  %6578 = inttoptr i64 %6575 to i64*
  %6579 = load i64, i64* %6578
  store i64 %6579, i64* %RCX, align 8, !tbaa !2428
  %6580 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6581 = load i64, i64* %RCX
  %6582 = add i64 %6581, 8
  %6583 = load i64, i64* %PC
  %6584 = add i64 %6583, 5
  store i64 %6584, i64* %PC
  %6585 = inttoptr i64 %6582 to double*
  %6586 = load double, double* %6585
  %6587 = bitcast i8* %6580 to double*
  store double %6586, double* %6587, align 1, !tbaa !2452
  %6588 = getelementptr inbounds i8, i8* %6580, i64 8
  %6589 = bitcast i8* %6588 to double*
  store double 0.000000e+00, double* %6589, align 1, !tbaa !2452
  %6590 = bitcast %union.vec128_t* %XMM0 to i8*
  %6591 = load i64, i64* %PC
  %6592 = add i64 %6591, 5
  store i64 %6592, i64* %PC
  %6593 = bitcast i8* %6590 to i64*
  %6594 = load i64, i64* %6593, align 1
  store i64 %6594, i64* %RCX, align 1, !tbaa !2428
  %6595 = load i64, i64* %RCX
  %6596 = load i64, i64* %RAX
  %6597 = load i64, i64* %PC
  %6598 = add i64 %6597, 3
  store i64 %6598, i64* %PC
  %6599 = xor i64 %6596, %6595
  store i64 %6599, i64* %RCX, align 8, !tbaa !2428
  %6600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6600, align 1, !tbaa !2432
  %6601 = trunc i64 %6599 to i32
  %6602 = and i32 %6601, 255
  %6603 = call i32 @llvm.ctpop.i32(i32 %6602) #17
  %6604 = trunc i32 %6603 to i8
  %6605 = and i8 %6604, 1
  %6606 = xor i8 %6605, 1
  %6607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6606, i8* %6607, align 1, !tbaa !2446
  %6608 = icmp eq i64 %6599, 0
  %6609 = zext i1 %6608 to i8
  %6610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6609, i8* %6610, align 1, !tbaa !2448
  %6611 = lshr i64 %6599, 63
  %6612 = trunc i64 %6611 to i8
  %6613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6612, i8* %6613, align 1, !tbaa !2449
  %6614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6614, align 1, !tbaa !2450
  %6615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6615, align 1, !tbaa !2447
  %6616 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6617 = load i64, i64* %RCX
  %6618 = load i64, i64* %PC
  %6619 = add i64 %6618, 5
  store i64 %6619, i64* %PC
  %6620 = bitcast i8* %6616 to i64*
  store i64 %6617, i64* %6620, align 1, !tbaa !2428
  %6621 = getelementptr inbounds i8, i8* %6616, i64 8
  %6622 = bitcast i8* %6621 to i64*
  store i64 0, i64* %6622, align 1, !tbaa !2428
  %6623 = load i64, i64* %RBP
  %6624 = sub i64 %6623, 24
  %6625 = load i64, i64* %PC
  %6626 = add i64 %6625, 4
  store i64 %6626, i64* %PC
  %6627 = inttoptr i64 %6624 to i64*
  %6628 = load i64, i64* %6627
  store i64 %6628, i64* %RCX, align 8, !tbaa !2428
  %6629 = load i64, i64* %RCX
  %6630 = add i64 %6629, 8
  %6631 = bitcast %union.vec128_t* %XMM0 to i8*
  %6632 = load i64, i64* %PC
  %6633 = add i64 %6632, 5
  store i64 %6633, i64* %PC
  %6634 = bitcast i8* %6631 to double*
  %6635 = load double, double* %6634, align 1
  %6636 = inttoptr i64 %6630 to double*
  store double %6635, double* %6636
  %6637 = load i64, i64* %RBP
  %6638 = sub i64 %6637, 24
  %6639 = load i64, i64* %PC
  %6640 = add i64 %6639, 4
  store i64 %6640, i64* %PC
  %6641 = inttoptr i64 %6638 to i64*
  %6642 = load i64, i64* %6641
  store i64 %6642, i64* %RCX, align 8, !tbaa !2428
  %6643 = load i64, i64* %RBP
  %6644 = sub i64 %6643, 52
  %6645 = load i64, i64* %PC
  %6646 = add i64 %6645, 3
  store i64 %6646, i64* %PC
  %6647 = inttoptr i64 %6644 to i32*
  %6648 = load i32, i32* %6647
  %6649 = zext i32 %6648 to i64
  store i64 %6649, i64* %RDX, align 8, !tbaa !2428
  %6650 = load i64, i64* %RDX
  %6651 = load i64, i64* %PC
  %6652 = add i64 %6651, 3
  store i64 %6652, i64* %PC
  %6653 = trunc i64 %6650 to i32
  %6654 = add i32 1, %6653
  %6655 = zext i32 %6654 to i64
  store i64 %6655, i64* %RDX, align 8, !tbaa !2428
  %6656 = icmp ult i32 %6654, %6653
  %6657 = icmp ult i32 %6654, 1
  %6658 = or i1 %6656, %6657
  %6659 = zext i1 %6658 to i8
  %6660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6659, i8* %6660, align 1, !tbaa !2432
  %6661 = and i32 %6654, 255
  %6662 = call i32 @llvm.ctpop.i32(i32 %6661) #17
  %6663 = trunc i32 %6662 to i8
  %6664 = and i8 %6663, 1
  %6665 = xor i8 %6664, 1
  %6666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6665, i8* %6666, align 1, !tbaa !2446
  %6667 = xor i64 1, %6650
  %6668 = trunc i64 %6667 to i32
  %6669 = xor i32 %6668, %6654
  %6670 = lshr i32 %6669, 4
  %6671 = trunc i32 %6670 to i8
  %6672 = and i8 %6671, 1
  %6673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6672, i8* %6673, align 1, !tbaa !2447
  %6674 = icmp eq i32 %6654, 0
  %6675 = zext i1 %6674 to i8
  %6676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6675, i8* %6676, align 1, !tbaa !2448
  %6677 = lshr i32 %6654, 31
  %6678 = trunc i32 %6677 to i8
  %6679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6678, i8* %6679, align 1, !tbaa !2449
  %6680 = lshr i32 %6653, 31
  %6681 = xor i32 %6677, %6680
  %6682 = add nuw nsw i32 %6681, %6677
  %6683 = icmp eq i32 %6682, 2
  %6684 = zext i1 %6683 to i8
  %6685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6684, i8* %6685, align 1, !tbaa !2450
  %6686 = load i32, i32* %EDX
  %6687 = zext i32 %6686 to i64
  %6688 = load i64, i64* %PC
  %6689 = add i64 %6688, 3
  store i64 %6689, i64* %PC
  %6690 = shl i64 %6687, 32
  %6691 = ashr exact i64 %6690, 32
  store i64 %6691, i64* %RSI, align 8, !tbaa !2428
  %6692 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6693 = load i64, i64* %RCX
  %6694 = load i64, i64* %RSI
  %6695 = mul i64 %6694, 8
  %6696 = add i64 %6695, %6693
  %6697 = load i64, i64* %PC
  %6698 = add i64 %6697, 5
  store i64 %6698, i64* %PC
  %6699 = inttoptr i64 %6696 to double*
  %6700 = load double, double* %6699
  %6701 = bitcast i8* %6692 to double*
  store double %6700, double* %6701, align 1, !tbaa !2452
  %6702 = getelementptr inbounds i8, i8* %6692, i64 8
  %6703 = bitcast i8* %6702 to double*
  store double 0.000000e+00, double* %6703, align 1, !tbaa !2452
  %6704 = bitcast %union.vec128_t* %XMM0 to i8*
  %6705 = load i64, i64* %PC
  %6706 = add i64 %6705, 5
  store i64 %6706, i64* %PC
  %6707 = bitcast i8* %6704 to i64*
  %6708 = load i64, i64* %6707, align 1
  store i64 %6708, i64* %RCX, align 1, !tbaa !2428
  %6709 = load i64, i64* %RCX
  %6710 = load i64, i64* %RAX
  %6711 = load i64, i64* %PC
  %6712 = add i64 %6711, 3
  store i64 %6712, i64* %PC
  %6713 = xor i64 %6710, %6709
  store i64 %6713, i64* %RCX, align 8, !tbaa !2428
  %6714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6714, align 1, !tbaa !2432
  %6715 = trunc i64 %6713 to i32
  %6716 = and i32 %6715, 255
  %6717 = call i32 @llvm.ctpop.i32(i32 %6716) #17
  %6718 = trunc i32 %6717 to i8
  %6719 = and i8 %6718, 1
  %6720 = xor i8 %6719, 1
  %6721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6720, i8* %6721, align 1, !tbaa !2446
  %6722 = icmp eq i64 %6713, 0
  %6723 = zext i1 %6722 to i8
  %6724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6723, i8* %6724, align 1, !tbaa !2448
  %6725 = lshr i64 %6713, 63
  %6726 = trunc i64 %6725 to i8
  %6727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6726, i8* %6727, align 1, !tbaa !2449
  %6728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6728, align 1, !tbaa !2450
  %6729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6729, align 1, !tbaa !2447
  %6730 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6731 = load i64, i64* %RCX
  %6732 = load i64, i64* %PC
  %6733 = add i64 %6732, 5
  store i64 %6733, i64* %PC
  %6734 = bitcast i8* %6730 to i64*
  store i64 %6731, i64* %6734, align 1, !tbaa !2428
  %6735 = getelementptr inbounds i8, i8* %6730, i64 8
  %6736 = bitcast i8* %6735 to i64*
  store i64 0, i64* %6736, align 1, !tbaa !2428
  %6737 = load i64, i64* %RBP
  %6738 = sub i64 %6737, 24
  %6739 = load i64, i64* %PC
  %6740 = add i64 %6739, 4
  store i64 %6740, i64* %PC
  %6741 = inttoptr i64 %6738 to i64*
  %6742 = load i64, i64* %6741
  store i64 %6742, i64* %RAX, align 8, !tbaa !2428
  %6743 = load i64, i64* %RBP
  %6744 = sub i64 %6743, 52
  %6745 = load i64, i64* %PC
  %6746 = add i64 %6745, 3
  store i64 %6746, i64* %PC
  %6747 = inttoptr i64 %6744 to i32*
  %6748 = load i32, i32* %6747
  %6749 = zext i32 %6748 to i64
  store i64 %6749, i64* %RDX, align 8, !tbaa !2428
  %6750 = load i64, i64* %RDX
  %6751 = load i64, i64* %PC
  %6752 = add i64 %6751, 3
  store i64 %6752, i64* %PC
  %6753 = trunc i64 %6750 to i32
  %6754 = add i32 1, %6753
  %6755 = zext i32 %6754 to i64
  store i64 %6755, i64* %RDX, align 8, !tbaa !2428
  %6756 = icmp ult i32 %6754, %6753
  %6757 = icmp ult i32 %6754, 1
  %6758 = or i1 %6756, %6757
  %6759 = zext i1 %6758 to i8
  %6760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6759, i8* %6760, align 1, !tbaa !2432
  %6761 = and i32 %6754, 255
  %6762 = call i32 @llvm.ctpop.i32(i32 %6761) #17
  %6763 = trunc i32 %6762 to i8
  %6764 = and i8 %6763, 1
  %6765 = xor i8 %6764, 1
  %6766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6765, i8* %6766, align 1, !tbaa !2446
  %6767 = xor i64 1, %6750
  %6768 = trunc i64 %6767 to i32
  %6769 = xor i32 %6768, %6754
  %6770 = lshr i32 %6769, 4
  %6771 = trunc i32 %6770 to i8
  %6772 = and i8 %6771, 1
  %6773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6772, i8* %6773, align 1, !tbaa !2447
  %6774 = icmp eq i32 %6754, 0
  %6775 = zext i1 %6774 to i8
  %6776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6775, i8* %6776, align 1, !tbaa !2448
  %6777 = lshr i32 %6754, 31
  %6778 = trunc i32 %6777 to i8
  %6779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6778, i8* %6779, align 1, !tbaa !2449
  %6780 = lshr i32 %6753, 31
  %6781 = xor i32 %6777, %6780
  %6782 = add nuw nsw i32 %6781, %6777
  %6783 = icmp eq i32 %6782, 2
  %6784 = zext i1 %6783 to i8
  %6785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6784, i8* %6785, align 1, !tbaa !2450
  %6786 = load i32, i32* %EDX
  %6787 = zext i32 %6786 to i64
  %6788 = load i64, i64* %PC
  %6789 = add i64 %6788, 3
  store i64 %6789, i64* %PC
  %6790 = shl i64 %6787, 32
  %6791 = ashr exact i64 %6790, 32
  store i64 %6791, i64* %RCX, align 8, !tbaa !2428
  %6792 = load i64, i64* %RAX
  %6793 = load i64, i64* %RCX
  %6794 = mul i64 %6793, 8
  %6795 = add i64 %6794, %6792
  %6796 = bitcast %union.vec128_t* %XMM0 to i8*
  %6797 = load i64, i64* %PC
  %6798 = add i64 %6797, 5
  store i64 %6798, i64* %PC
  %6799 = bitcast i8* %6796 to double*
  %6800 = load double, double* %6799, align 1
  %6801 = inttoptr i64 %6795 to double*
  store double %6800, double* %6801
  %6802 = load i64, i64* %RBP
  %6803 = sub i64 %6802, 36
  %6804 = load i64, i64* %PC
  %6805 = add i64 %6804, 7
  store i64 %6805, i64* %PC
  %6806 = inttoptr i64 %6803 to i32*
  store i32 1, i32* %6806
  br label %block_40220c

block_401c45:                                     ; preds = %block_401c35, %block_401c51
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.1, %block_401c35 ], [ %MEMORY.6, %block_401c51 ]
  %6807 = load i64, i64* %RBP
  %6808 = sub i64 %6807, 28
  %6809 = load i64, i64* %PC
  %6810 = add i64 %6809, 3
  store i64 %6810, i64* %PC
  %6811 = inttoptr i64 %6808 to i32*
  %6812 = load i32, i32* %6811
  %6813 = zext i32 %6812 to i64
  store i64 %6813, i64* %RAX, align 8, !tbaa !2428
  %6814 = load i32, i32* %EAX
  %6815 = zext i32 %6814 to i64
  %6816 = load i64, i64* %RBP
  %6817 = sub i64 %6816, 48
  %6818 = load i64, i64* %PC
  %6819 = add i64 %6818, 3
  store i64 %6819, i64* %PC
  %6820 = inttoptr i64 %6817 to i32*
  %6821 = load i32, i32* %6820
  %6822 = sub i32 %6814, %6821
  %6823 = icmp ult i32 %6814, %6821
  %6824 = zext i1 %6823 to i8
  %6825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6824, i8* %6825, align 1, !tbaa !2432
  %6826 = and i32 %6822, 255
  %6827 = call i32 @llvm.ctpop.i32(i32 %6826) #17
  %6828 = trunc i32 %6827 to i8
  %6829 = and i8 %6828, 1
  %6830 = xor i8 %6829, 1
  %6831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6830, i8* %6831, align 1, !tbaa !2446
  %6832 = xor i32 %6821, %6814
  %6833 = xor i32 %6832, %6822
  %6834 = lshr i32 %6833, 4
  %6835 = trunc i32 %6834 to i8
  %6836 = and i8 %6835, 1
  %6837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6836, i8* %6837, align 1, !tbaa !2447
  %6838 = icmp eq i32 %6822, 0
  %6839 = zext i1 %6838 to i8
  %6840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6839, i8* %6840, align 1, !tbaa !2448
  %6841 = lshr i32 %6822, 31
  %6842 = trunc i32 %6841 to i8
  %6843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6842, i8* %6843, align 1, !tbaa !2449
  %6844 = lshr i32 %6814, 31
  %6845 = lshr i32 %6821, 31
  %6846 = xor i32 %6845, %6844
  %6847 = xor i32 %6841, %6844
  %6848 = add nuw nsw i32 %6847, %6846
  %6849 = icmp eq i32 %6848, 2
  %6850 = zext i1 %6849 to i8
  %6851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6850, i8* %6851, align 1, !tbaa !2450
  %6852 = load i64, i64* %PC
  %6853 = add i64 %6852, 50
  %6854 = load i64, i64* %PC
  %6855 = add i64 %6854, 6
  %6856 = load i64, i64* %PC
  %6857 = add i64 %6856, 6
  store i64 %6857, i64* %PC
  %6858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6859 = load i8, i8* %6858, align 1, !tbaa !2449
  %6860 = icmp ne i8 %6859, 0
  %6861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6862 = load i8, i8* %6861, align 1, !tbaa !2450
  %6863 = icmp ne i8 %6862, 0
  %6864 = xor i1 %6860, %6863
  %6865 = xor i1 %6864, true
  %6866 = zext i1 %6865 to i8
  store i8 %6866, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6868 = select i1 %6864, i64 %6855, i64 %6853
  store i64 %6868, i64* %6867, align 8, !tbaa !2428
  %6869 = load i8, i8* %BRANCH_TAKEN
  %6870 = icmp eq i8 %6869, 1
  %6871 = load i64, i64* %RBP
  br i1 %6870, label %block_401c7d, label %block_401c51
}

; Function Attrs: noinline
define %struct.Memory* @sub_4010f0_errorcheck(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4010f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %47 to %"class.std::bitset"*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %51 to %union.vec128_t*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = load i64, i64* %RBP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %60
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  %64 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %65 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %66 = bitcast %union.vec128_t* %XMM1 to i8*
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = bitcast i8* %65 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = getelementptr inbounds i8, i8* %65, i64 8
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = bitcast i8* %66 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = getelementptr inbounds i8, i8* %66, i64 8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = xor i64 %75, %70
  %80 = xor i64 %78, %73
  %81 = trunc i64 %79 to i32
  %82 = lshr i64 %79, 32
  %83 = trunc i64 %82 to i32
  %84 = bitcast i8* %64 to i32*
  store i32 %81, i32* %84, align 1, !tbaa !2454
  %85 = getelementptr inbounds i8, i8* %64, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 %83, i32* %86, align 1, !tbaa !2454
  %87 = trunc i64 %80 to i32
  %88 = getelementptr inbounds i8, i8* %64, i64 8
  %89 = bitcast i8* %88 to i32*
  store i32 %87, i32* %89, align 1, !tbaa !2454
  %90 = lshr i64 %80, 32
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i8, i8* %64, i64 12
  %93 = bitcast i8* %92 to i32*
  store i32 %91, i32* %93, align 1, !tbaa !2454
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 4
  %96 = load i32, i32* %EDI
  %97 = zext i32 %96 to i64
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %95 to i32*
  store i32 %96, i32* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i32, i32* %ESI
  %104 = zext i32 %103 to i64
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 3
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %107
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 16
  %110 = bitcast %union.vec128_t* %XMM0 to i8*
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  %113 = bitcast i8* %110 to double*
  %114 = load double, double* %113, align 1
  %115 = inttoptr i64 %109 to double*
  store double %114, double* %115
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 24
  %118 = load i64, i64* %RDX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 32
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 7
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  store i32 0, i32* %126
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 40
  %129 = bitcast %union.vec128_t* %XMM1 to i8*
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = bitcast i8* %129 to double*
  %133 = load double, double* %132, align 1
  %134 = inttoptr i64 %128 to double*
  store double %133, double* %134
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 4
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 3
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i32*
  %140 = load i32, i32* %139
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %RSI, align 8, !tbaa !2428
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 28
  %144 = load i32, i32* %ESI
  %145 = zext i32 %144 to i64
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 3
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %143 to i32*
  store i32 %144, i32* %148
  br label %block_401118

block_401118:                                     ; preds = %block_4011b2, %block_4010f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4010f0 ], [ %MEMORY.1, %block_4011b2 ]
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 28
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 3
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i32*
  %154 = load i32, i32* %153
  %155 = zext i32 %154 to i64
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i32, i32* %EAX
  %157 = zext i32 %156 to i64
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 8
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162
  %164 = sub i32 %156, %163
  %165 = icmp ult i32 %156, %163
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %166, i8* %167, align 1, !tbaa !2432
  %168 = and i32 %164, 255
  %169 = call i32 @llvm.ctpop.i32(i32 %168) #17
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %172, i8* %173, align 1, !tbaa !2446
  %174 = xor i32 %163, %156
  %175 = xor i32 %174, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %178, i8* %179, align 1, !tbaa !2447
  %180 = icmp eq i32 %164, 0
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %181, i8* %182, align 1, !tbaa !2448
  %183 = lshr i32 %164, 31
  %184 = trunc i32 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %184, i8* %185, align 1, !tbaa !2449
  %186 = lshr i32 %156, 31
  %187 = lshr i32 %163, 31
  %188 = xor i32 %187, %186
  %189 = xor i32 %183, %186
  %190 = add nuw nsw i32 %189, %188
  %191 = icmp eq i32 %190, 2
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %192, i8* %193, align 1, !tbaa !2450
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 172
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 6
  store i64 %199, i64* %PC
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %201 = load i8, i8* %200, align 1, !tbaa !2448
  %202 = icmp eq i8 %201, 0
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %204 = load i8, i8* %203, align 1, !tbaa !2449
  %205 = icmp ne i8 %204, 0
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %207 = load i8, i8* %206, align 1, !tbaa !2450
  %208 = icmp ne i8 %207, 0
  %209 = xor i1 %205, %208
  %210 = xor i1 %209, true
  %211 = and i1 %202, %210
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %214 = select i1 %211, i64 %195, i64 %197
  store i64 %214, i64* %213, align 8, !tbaa !2428
  %215 = load i8, i8* %BRANCH_TAKEN
  %216 = icmp eq i8 %215, 1
  %217 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %216, label %block_4011ca, label %block_401124

block_4011b2:                                     ; preds = %block_40119d, %block_40118e
  %MEMORY.1 = phi %struct.Memory* [ %729, %block_40119d ], [ %729, %block_40118e ]
  %218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 64
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 5
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to double*
  %224 = load double, double* %223
  %225 = bitcast i8* %218 to double*
  store double %224, double* %225, align 1, !tbaa !2452
  %226 = getelementptr inbounds i8, i8* %218, i64 8
  %227 = bitcast i8* %226 to double*
  store double 0.000000e+00, double* %227, align 1, !tbaa !2452
  %228 = load i64, i64* %RBP
  %229 = sub i64 %228, 40
  %230 = bitcast %union.vec128_t* %XMM0 to i8*
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 5
  store i64 %232, i64* %PC
  %233 = bitcast i8* %230 to double*
  %234 = load double, double* %233, align 1
  %235 = inttoptr i64 %229 to double*
  store double %234, double* %235
  %236 = load i64, i64* %RBP
  %237 = sub i64 %236, 28
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  %241 = load i32, i32* %240
  %242 = zext i32 %241 to i64
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = load i64, i64* %RAX
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 3
  store i64 %245, i64* %PC
  %246 = trunc i64 %243 to i32
  %247 = add i32 1, %246
  %248 = zext i32 %247 to i64
  store i64 %248, i64* %RAX, align 8, !tbaa !2428
  %249 = icmp ult i32 %247, %246
  %250 = icmp ult i32 %247, 1
  %251 = or i1 %249, %250
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %252, i8* %253, align 1, !tbaa !2432
  %254 = and i32 %247, 255
  %255 = call i32 @llvm.ctpop.i32(i32 %254) #17
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %258, i8* %259, align 1, !tbaa !2446
  %260 = xor i64 1, %243
  %261 = trunc i64 %260 to i32
  %262 = xor i32 %261, %247
  %263 = lshr i32 %262, 4
  %264 = trunc i32 %263 to i8
  %265 = and i8 %264, 1
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %265, i8* %266, align 1, !tbaa !2447
  %267 = icmp eq i32 %247, 0
  %268 = zext i1 %267 to i8
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %268, i8* %269, align 1, !tbaa !2448
  %270 = lshr i32 %247, 31
  %271 = trunc i32 %270 to i8
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %271, i8* %272, align 1, !tbaa !2449
  %273 = lshr i32 %246, 31
  %274 = xor i32 %270, %273
  %275 = add nuw nsw i32 %274, %270
  %276 = icmp eq i32 %275, 2
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %277, i8* %278, align 1, !tbaa !2450
  %279 = load i64, i64* %RBP
  %280 = sub i64 %279, 28
  %281 = load i32, i32* %EAX
  %282 = zext i32 %281 to i64
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 3
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %280 to i32*
  store i32 %281, i32* %285
  %286 = load i64, i64* %PC
  %287 = sub i64 %286, 173
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 5
  store i64 %289, i64* %PC
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %287, i64* %290, align 8, !tbaa !2428
  br label %block_401118

block_40118e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %291 = sub i64 %748, 40
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 5
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to double*
  %295 = load double, double* %294
  %296 = bitcast i8* %747 to double*
  store double %295, double* %296, align 1, !tbaa !2452
  %297 = getelementptr inbounds i8, i8* %747, i64 8
  %298 = bitcast i8* %297 to double*
  store double 0.000000e+00, double* %298, align 1, !tbaa !2452
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 64
  %301 = bitcast %union.vec128_t* %XMM0 to i8*
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = bitcast i8* %301 to double*
  %305 = load double, double* %304, align 1
  %306 = inttoptr i64 %300 to double*
  store double %305, double* %306
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 26
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %308, i64* %311, align 8, !tbaa !2428
  br label %block_4011b2

block_4011ca:                                     ; preds = %block_401118
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 40
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 5
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to double*
  %317 = load double, double* %316
  %318 = bitcast i8* %217 to double*
  store double %317, double* %318, align 1, !tbaa !2452
  %319 = getelementptr inbounds i8, i8* %217, i64 8
  %320 = bitcast i8* %319 to double*
  store double 0.000000e+00, double* %320, align 1, !tbaa !2452
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 1
  store i64 %322, i64* %PC
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %324 = load i64, i64* %323, align 8, !tbaa !2428
  %325 = add i64 %324, 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326
  store i64 %327, i64* %RBP, align 8, !tbaa !2428
  store i64 %325, i64* %323, align 8, !tbaa !2428
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 1
  store i64 %329, i64* %PC
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %332 = load i64, i64* %331, align 8, !tbaa !2428
  %333 = inttoptr i64 %332 to i64*
  %334 = load i64, i64* %333
  store i64 %334, i64* %330, align 8, !tbaa !2428
  %335 = add i64 %332, 8
  store i64 %335, i64* %331, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40119d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %336 = sub i64 %748, 48
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to double*
  %340 = load double, double* %339
  %341 = bitcast i8* %747 to double*
  store double %340, double* %341, align 1, !tbaa !2452
  %342 = getelementptr inbounds i8, i8* %747, i64 8
  %343 = bitcast i8* %342 to double*
  store double 0.000000e+00, double* %343, align 1, !tbaa !2452
  %344 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 7
  store i64 %346, i64* %PC
  %347 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 96) to float*)
  %348 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 100) to float*)
  %349 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 104) to float*)
  %350 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 108) to float*)
  %351 = bitcast i8* %344 to float*
  store float %347, float* %351, align 1, !tbaa !2455
  %352 = getelementptr inbounds i8, i8* %344, i64 4
  %353 = bitcast i8* %352 to float*
  store float %348, float* %353, align 1, !tbaa !2455
  %354 = getelementptr inbounds i8, i8* %344, i64 8
  %355 = bitcast i8* %354 to float*
  store float %349, float* %355, align 1, !tbaa !2455
  %356 = getelementptr inbounds i8, i8* %344, i64 12
  %357 = bitcast i8* %356 to float*
  store float %350, float* %357, align 1, !tbaa !2455
  %358 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %359 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %360 = bitcast %union.vec128_t* %XMM1 to i8*
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = bitcast i8* %359 to i64*
  %364 = load i64, i64* %363, align 1
  %365 = getelementptr inbounds i8, i8* %359, i64 8
  %366 = bitcast i8* %365 to i64*
  %367 = load i64, i64* %366, align 1
  %368 = bitcast i8* %360 to i64*
  %369 = load i64, i64* %368, align 1
  %370 = getelementptr inbounds i8, i8* %360, i64 8
  %371 = bitcast i8* %370 to i64*
  %372 = load i64, i64* %371, align 1
  %373 = and i64 %369, %364
  %374 = and i64 %372, %367
  %375 = trunc i64 %373 to i32
  %376 = lshr i64 %373, 32
  %377 = trunc i64 %376 to i32
  %378 = bitcast i8* %358 to i32*
  store i32 %375, i32* %378, align 1, !tbaa !2454
  %379 = getelementptr inbounds i8, i8* %358, i64 4
  %380 = bitcast i8* %379 to i32*
  store i32 %377, i32* %380, align 1, !tbaa !2454
  %381 = trunc i64 %374 to i32
  %382 = getelementptr inbounds i8, i8* %358, i64 8
  %383 = bitcast i8* %382 to i32*
  store i32 %381, i32* %383, align 1, !tbaa !2454
  %384 = lshr i64 %374, 32
  %385 = trunc i64 %384 to i32
  %386 = getelementptr inbounds i8, i8* %358, i64 12
  %387 = bitcast i8* %386 to i32*
  store i32 %385, i32* %387, align 1, !tbaa !2454
  %388 = load i64, i64* %RBP
  %389 = sub i64 %388, 64
  %390 = bitcast %union.vec128_t* %XMM0 to i8*
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 5
  store i64 %392, i64* %PC
  %393 = bitcast i8* %390 to double*
  %394 = load double, double* %393, align 1
  %395 = inttoptr i64 %389 to double*
  store double %394, double* %395
  br label %block_4011b2

block_401124:                                     ; preds = %block_401118
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 8
  store i64 %397, i64* %PC
  %398 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 72) to double*)
  %399 = bitcast i8* %217 to double*
  store double %398, double* %399, align 1, !tbaa !2452
  %400 = getelementptr inbounds i8, i8* %217, i64 8
  %401 = bitcast i8* %400 to double*
  store double 0.000000e+00, double* %401, align 1, !tbaa !2452
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 5
  store i64 %403, i64* %PC
  store i64 259200, i64* %RAX, align 8, !tbaa !2428
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 32
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 7
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i32*
  %409 = load i32, i32* %408
  %410 = sext i32 %409 to i64
  %411 = mul nsw i64 %410, 7141
  %412 = trunc i64 %411 to i32
  %413 = and i64 %411, 4294967295
  store i64 %413, i64* %RCX, align 8, !tbaa !2428
  %414 = shl i64 %411, 32
  %415 = ashr exact i64 %414, 32
  %416 = icmp ne i64 %415, %411
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %417, i8* %418, align 1, !tbaa !2432
  %419 = and i32 %412, 255
  %420 = call i32 @llvm.ctpop.i32(i32 %419) #17
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %423, i8* %424, align 1, !tbaa !2446
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %425, align 1, !tbaa !2447
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %426, align 1, !tbaa !2448
  %427 = lshr i32 %412, 31
  %428 = trunc i32 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %428, i8* %429, align 1, !tbaa !2449
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %417, i8* %430, align 1, !tbaa !2450
  %431 = load i64, i64* %RCX
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 6
  store i64 %433, i64* %PC
  %434 = trunc i64 %431 to i32
  %435 = add i32 54773, %434
  %436 = zext i32 %435 to i64
  store i64 %436, i64* %RCX, align 8, !tbaa !2428
  %437 = icmp ult i32 %435, %434
  %438 = icmp ult i32 %435, 54773
  %439 = or i1 %437, %438
  %440 = zext i1 %439 to i8
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %440, i8* %441, align 1, !tbaa !2432
  %442 = and i32 %435, 255
  %443 = call i32 @llvm.ctpop.i32(i32 %442) #17
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %446, i8* %447, align 1, !tbaa !2446
  %448 = xor i64 54773, %431
  %449 = trunc i64 %448 to i32
  %450 = xor i32 %449, %435
  %451 = lshr i32 %450, 4
  %452 = trunc i32 %451 to i8
  %453 = and i8 %452, 1
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %453, i8* %454, align 1, !tbaa !2447
  %455 = icmp eq i32 %435, 0
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %456, i8* %457, align 1, !tbaa !2448
  %458 = lshr i32 %435, 31
  %459 = trunc i32 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %459, i8* %460, align 1, !tbaa !2449
  %461 = lshr i32 %434, 31
  %462 = xor i32 %458, %461
  %463 = add nuw nsw i32 %462, %458
  %464 = icmp eq i32 %463, 2
  %465 = zext i1 %464 to i8
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %465, i8* %466, align 1, !tbaa !2450
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 52
  %469 = load i32, i32* %EAX
  %470 = zext i32 %469 to i64
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 3
  store i64 %472, i64* %PC
  %473 = inttoptr i64 %468 to i32*
  store i32 %469, i32* %473
  %474 = load i32, i32* %ECX
  %475 = zext i32 %474 to i64
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 2
  store i64 %477, i64* %PC
  %478 = and i64 %475, 4294967295
  store i64 %478, i64* %RAX, align 8, !tbaa !2428
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 1
  store i64 %480, i64* %PC
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %483 = bitcast %union.anon* %482 to i32*
  %484 = load i32, i32* %483, align 8, !tbaa !2454
  %485 = sext i32 %484 to i64
  %486 = lshr i64 %485, 32
  store i64 %486, i64* %481, align 8, !tbaa !2428
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 52
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 3
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %488 to i32*
  %492 = load i32, i32* %491
  %493 = zext i32 %492 to i64
  store i64 %493, i64* %RCX, align 8, !tbaa !2428
  %494 = load i32, i32* %ECX
  %495 = zext i32 %494 to i64
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 2
  store i64 %497, i64* %PC
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %499 = bitcast %union.anon* %498 to i32*
  %500 = load i32, i32* %499, align 8, !tbaa !2454
  %501 = zext i32 %500 to i64
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %503 = bitcast %union.anon* %502 to i32*
  %504 = load i32, i32* %503, align 8, !tbaa !2454
  %505 = zext i32 %504 to i64
  %506 = shl i64 %495, 32
  %507 = ashr exact i64 %506, 32
  %508 = shl nuw i64 %505, 32
  %509 = or i64 %508, %501
  %510 = sdiv i64 %509, %507
  %511 = shl i64 %510, 32
  %512 = ashr exact i64 %511, 32
  %513 = icmp eq i64 %510, %512
  br i1 %513, label %518, label %514

; <label>:514:                                    ; preds = %block_401124
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %516 = load i64, i64* %515, align 8, !tbaa !2428
  %517 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %516, %struct.Memory* %MEMORY.0) #18
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:518:                                    ; preds = %block_401124
  %519 = srem i64 %509, %507
  %520 = getelementptr inbounds %union.anon, %union.anon* %498, i64 0, i32 0
  %521 = and i64 %510, 4294967295
  store i64 %521, i64* %520, align 8, !tbaa !2428
  %522 = getelementptr inbounds %union.anon, %union.anon* %502, i64 0, i32 0
  %523 = and i64 %519, 4294967295
  store i64 %523, i64* %522, align 8, !tbaa !2428
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %524, align 1, !tbaa !2432
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %525, align 1, !tbaa !2446
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %526, align 1, !tbaa !2447
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %527, align 1, !tbaa !2448
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %528, align 1, !tbaa !2449
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %529, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %514, %518
  %530 = phi %struct.Memory* [ %517, %514 ], [ %MEMORY.0, %518 ]
  %531 = load i64, i64* %RBP
  %532 = sub i64 %531, 32
  %533 = load i32, i32* %EDX
  %534 = zext i32 %533 to i64
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 3
  store i64 %536, i64* %PC
  %537 = inttoptr i64 %532 to i32*
  store i32 %533, i32* %537
  %538 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %539 = load i32, i32* %EDX
  %540 = zext i32 %539 to i64
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 4
  store i64 %542, i64* %PC
  %543 = sitofp i32 %539 to double
  %544 = bitcast i8* %538 to double*
  store double %543, double* %544, align 1, !tbaa !2452
  %545 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %546 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %547 = bitcast %union.vec128_t* %XMM0 to i8*
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 4
  store i64 %549, i64* %PC
  %550 = bitcast i8* %546 to double*
  %551 = load double, double* %550, align 1
  %552 = getelementptr inbounds i8, i8* %546, i64 8
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 1
  %555 = bitcast i8* %547 to double*
  %556 = load double, double* %555, align 1
  %557 = fmul double %551, %556
  %558 = bitcast i8* %545 to double*
  store double %557, double* %558, align 1, !tbaa !2452
  %559 = getelementptr inbounds i8, i8* %545, i64 8
  %560 = bitcast i8* %559 to i64*
  store i64 %554, i64* %560, align 1, !tbaa !2452
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 24
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 4
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i64*
  %566 = load i64, i64* %565
  store i64 %566, i64* %RSI, align 8, !tbaa !2428
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 28
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 4
  store i64 %570, i64* %PC
  %571 = inttoptr i64 %568 to i32*
  %572 = load i32, i32* %571
  %573 = sext i32 %572 to i64
  store i64 %573, i64* %RDI, align 8, !tbaa !2428
  %574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %575 = load i64, i64* %RSI
  %576 = load i64, i64* %RDI
  %577 = mul i64 %576, 8
  %578 = add i64 %577, %575
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to double*
  %582 = load double, double* %581
  %583 = bitcast i8* %574 to double*
  store double %582, double* %583, align 1, !tbaa !2452
  %584 = getelementptr inbounds i8, i8* %574, i64 8
  %585 = bitcast i8* %584 to double*
  store double 0.000000e+00, double* %585, align 1, !tbaa !2452
  %586 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %587 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 16
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 5
  store i64 %591, i64* %PC
  %592 = bitcast i8* %587 to double*
  %593 = load double, double* %592, align 1
  %594 = getelementptr inbounds i8, i8* %587, i64 8
  %595 = bitcast i8* %594 to i64*
  %596 = load i64, i64* %595, align 1
  %597 = inttoptr i64 %589 to double*
  %598 = load double, double* %597
  %599 = fmul double %593, %598
  %600 = bitcast i8* %586 to double*
  store double %599, double* %600, align 1, !tbaa !2452
  %601 = getelementptr inbounds i8, i8* %586, i64 8
  %602 = bitcast i8* %601 to i64*
  store i64 %596, i64* %602, align 1, !tbaa !2452
  %603 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %604 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %605 = bitcast %union.vec128_t* %XMM0 to i8*
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = bitcast i8* %604 to double*
  %609 = load double, double* %608, align 1
  %610 = getelementptr inbounds i8, i8* %604, i64 8
  %611 = bitcast i8* %610 to i64*
  %612 = load i64, i64* %611, align 1
  %613 = bitcast i8* %605 to double*
  %614 = load double, double* %613, align 1
  %615 = fsub double %609, %614
  %616 = bitcast i8* %603 to double*
  store double %615, double* %616, align 1, !tbaa !2452
  %617 = getelementptr inbounds i8, i8* %603, i64 8
  %618 = bitcast i8* %617 to i64*
  store i64 %612, i64* %618, align 1, !tbaa !2452
  %619 = load i64, i64* %RBP
  %620 = sub i64 %619, 48
  %621 = bitcast %union.vec128_t* %XMM1 to i8*
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 5
  store i64 %623, i64* %PC
  %624 = bitcast i8* %621 to double*
  %625 = load double, double* %624, align 1
  %626 = inttoptr i64 %620 to double*
  store double %625, double* %626
  %627 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 40
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 5
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to double*
  %633 = load double, double* %632
  %634 = bitcast i8* %627 to double*
  store double %633, double* %634, align 1, !tbaa !2452
  %635 = getelementptr inbounds i8, i8* %627, i64 8
  %636 = bitcast i8* %635 to double*
  store double 0.000000e+00, double* %636, align 1, !tbaa !2452
  %637 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 48
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 5
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to double*
  %643 = load double, double* %642
  %644 = bitcast i8* %637 to double*
  store double %643, double* %644, align 1, !tbaa !2452
  %645 = getelementptr inbounds i8, i8* %637, i64 8
  %646 = bitcast i8* %645 to double*
  store double 0.000000e+00, double* %646, align 1, !tbaa !2452
  %647 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 7
  store i64 %649, i64* %PC
  %650 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 96) to float*)
  %651 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 100) to float*)
  %652 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 104) to float*)
  %653 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_404090__rodata_type* @seg_404090__rodata to i64), i64 108) to float*)
  %654 = bitcast i8* %647 to float*
  store float %650, float* %654, align 1, !tbaa !2455
  %655 = getelementptr inbounds i8, i8* %647, i64 4
  %656 = bitcast i8* %655 to float*
  store float %651, float* %656, align 1, !tbaa !2455
  %657 = getelementptr inbounds i8, i8* %647, i64 8
  %658 = bitcast i8* %657 to float*
  store float %652, float* %658, align 1, !tbaa !2455
  %659 = getelementptr inbounds i8, i8* %647, i64 12
  %660 = bitcast i8* %659 to float*
  store float %653, float* %660, align 1, !tbaa !2455
  %661 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %662 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %663 = bitcast %union.vec128_t* %XMM2 to i8*
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 4
  store i64 %665, i64* %PC
  %666 = bitcast i8* %662 to i64*
  %667 = load i64, i64* %666, align 1
  %668 = getelementptr inbounds i8, i8* %662, i64 8
  %669 = bitcast i8* %668 to i64*
  %670 = load i64, i64* %669, align 1
  %671 = bitcast i8* %663 to i64*
  %672 = load i64, i64* %671, align 1
  %673 = getelementptr inbounds i8, i8* %663, i64 8
  %674 = bitcast i8* %673 to i64*
  %675 = load i64, i64* %674, align 1
  %676 = and i64 %672, %667
  %677 = and i64 %675, %670
  %678 = trunc i64 %676 to i32
  %679 = lshr i64 %676, 32
  %680 = trunc i64 %679 to i32
  %681 = bitcast i8* %661 to i32*
  store i32 %678, i32* %681, align 1, !tbaa !2454
  %682 = getelementptr inbounds i8, i8* %661, i64 4
  %683 = bitcast i8* %682 to i32*
  store i32 %680, i32* %683, align 1, !tbaa !2454
  %684 = trunc i64 %677 to i32
  %685 = getelementptr inbounds i8, i8* %661, i64 8
  %686 = bitcast i8* %685 to i32*
  store i32 %684, i32* %686, align 1, !tbaa !2454
  %687 = lshr i64 %677, 32
  %688 = trunc i64 %687 to i32
  %689 = getelementptr inbounds i8, i8* %661, i64 12
  %690 = bitcast i8* %689 to i32*
  store i32 %688, i32* %690, align 1, !tbaa !2454
  %691 = bitcast %union.vec128_t* %XMM0 to i8*
  %692 = bitcast %union.vec128_t* %XMM1 to i8*
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 4
  store i64 %694, i64* %PC
  %695 = bitcast i8* %691 to double*
  %696 = load double, double* %695, align 1
  %697 = bitcast i8* %692 to double*
  %698 = load double, double* %697, align 1
  %699 = fcmp uno double %696, %698
  br i1 %699, label %700, label %712

; <label>:700:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %701 = fadd double %696, %698
  %702 = bitcast double %701 to i64
  %703 = and i64 %702, 9221120237041090560
  %704 = icmp eq i64 %703, 9218868437227405312
  %705 = and i64 %702, 2251799813685247
  %706 = icmp ne i64 %705, 0
  %707 = and i1 %704, %706
  br i1 %707, label %708, label %718

; <label>:708:                                    ; preds = %700
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %710 = load i64, i64* %709, align 8, !tbaa !2428
  %711 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %710, %struct.Memory* %530) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:712:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %713 = fcmp ogt double %696, %698
  br i1 %713, label %718, label %714

; <label>:714:                                    ; preds = %712
  %715 = fcmp olt double %696, %698
  br i1 %715, label %718, label %716

; <label>:716:                                    ; preds = %714
  %717 = fcmp oeq double %696, %698
  br i1 %717, label %718, label %725

; <label>:718:                                    ; preds = %716, %714, %712, %700
  %719 = phi i8 [ 0, %712 ], [ 0, %714 ], [ 1, %716 ], [ 1, %700 ]
  %720 = phi i8 [ 0, %712 ], [ 0, %714 ], [ 0, %716 ], [ 1, %700 ]
  %721 = phi i8 [ 0, %712 ], [ 1, %714 ], [ 0, %716 ], [ 1, %700 ]
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %719, i8* %722, align 1, !tbaa !2451
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %720, i8* %723, align 1, !tbaa !2451
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %721, i8* %724, align 1, !tbaa !2451
  br label %725

; <label>:725:                                    ; preds = %718, %716
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %726, align 1, !tbaa !2451
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %727, align 1, !tbaa !2451
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %728, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %708, %725
  %729 = phi %struct.Memory* [ %711, %708 ], [ %530, %725 ]
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 21
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 6
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 6
  store i64 %735, i64* %PC
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %737 = load i8, i8* %736, align 1, !tbaa !2432
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %739 = load i8, i8* %738, align 1, !tbaa !2448
  %740 = or i8 %739, %737
  %741 = icmp ne i8 %740, 0
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %744 = select i1 %741, i64 %731, i64 %733
  store i64 %744, i64* %743, align 8, !tbaa !2428
  %745 = load i8, i8* %BRANCH_TAKEN
  %746 = icmp eq i8 %745, 1
  %747 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %748 = load i64, i64* %RBP
  br i1 %746, label %block_40119d, label %block_40118e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4024a0_cftbsub(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4024a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 112
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 112
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2432
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #17
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2446
  %67 = xor i64 112, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i32, i32* %EDI
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 16
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %93 to i64*
  store i64 %94, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 24
  %100 = load i64, i64* %RDX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 44
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  store i32 2, i32* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 4
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113
  %115 = sub i32 %114, 8
  %116 = icmp ult i32 %114, 8
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %117, i8* %118, align 1, !tbaa !2432
  %119 = and i32 %115, 255
  %120 = call i32 @llvm.ctpop.i32(i32 %119) #17
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %123, i8* %124, align 1, !tbaa !2446
  %125 = xor i32 %114, 8
  %126 = xor i32 %125, %115
  %127 = lshr i32 %126, 4
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %129, i8* %130, align 1, !tbaa !2447
  %131 = icmp eq i32 %115, 0
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %132, i8* %133, align 1, !tbaa !2448
  %134 = lshr i32 %115, 31
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %135, i8* %136, align 1, !tbaa !2449
  %137 = lshr i32 %114, 31
  %138 = xor i32 %134, %137
  %139 = add nuw nsw i32 %138, %137
  %140 = icmp eq i32 %139, 2
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %141, i8* %142, align 1, !tbaa !2450
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 82
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 6
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 6
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %150 = load i8, i8* %149, align 1, !tbaa !2448
  %151 = icmp ne i8 %150, 0
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %153 = load i8, i8* %152, align 1, !tbaa !2449
  %154 = icmp ne i8 %153, 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %156 = load i8, i8* %155, align 1, !tbaa !2450
  %157 = icmp ne i8 %156, 0
  %158 = xor i1 %154, %157
  %159 = or i1 %151, %158
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %162 = select i1 %159, i64 %144, i64 %146
  store i64 %162, i64* %161, align 8, !tbaa !2428
  %163 = load i8, i8* %BRANCH_TAKEN
  %164 = icmp eq i8 %163, 1
  br i1 %164, label %block_402510, label %block_4024c4

block_402777:                                     ; preds = %block_402510, %block_402783
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_402510 ], [ %MEMORY.0, %block_402783 ]
  %165 = load i64, i64* %RBP
  %166 = sub i64 %165, 28
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 3
  store i64 %168, i64* %PC
  %169 = inttoptr i64 %166 to i32*
  %170 = load i32, i32* %169
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = load i32, i32* %EAX
  %173 = zext i32 %172 to i64
  %174 = load i64, i64* %RBP
  %175 = sub i64 %174, 44
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 3
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to i32*
  %179 = load i32, i32* %178
  %180 = sub i32 %172, %179
  %181 = icmp ult i32 %172, %179
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %182, i8* %183, align 1, !tbaa !2432
  %184 = and i32 %180, 255
  %185 = call i32 @llvm.ctpop.i32(i32 %184) #17
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = xor i8 %187, 1
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %188, i8* %189, align 1, !tbaa !2446
  %190 = xor i32 %179, %172
  %191 = xor i32 %190, %180
  %192 = lshr i32 %191, 4
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %194, i8* %195, align 1, !tbaa !2447
  %196 = icmp eq i32 %180, 0
  %197 = zext i1 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %197, i8* %198, align 1, !tbaa !2448
  %199 = lshr i32 %180, 31
  %200 = trunc i32 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %200, i8* %201, align 1, !tbaa !2449
  %202 = lshr i32 %172, 31
  %203 = lshr i32 %179, 31
  %204 = xor i32 %203, %202
  %205 = xor i32 %199, %202
  %206 = add nuw nsw i32 %205, %204
  %207 = icmp eq i32 %206, 2
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %208, i8* %209, align 1, !tbaa !2450
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 263
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 6
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 6
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %217 = load i8, i8* %216, align 1, !tbaa !2449
  %218 = icmp ne i8 %217, 0
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %220 = load i8, i8* %219, align 1, !tbaa !2450
  %221 = icmp ne i8 %220, 0
  %222 = xor i1 %218, %221
  %223 = xor i1 %222, true
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %226 = select i1 %222, i64 %213, i64 %211
  store i64 %226, i64* %225, align 8, !tbaa !2428
  %227 = load i8, i8* %BRANCH_TAKEN
  %228 = icmp eq i8 %227, 1
  %229 = load i64, i64* %PC
  br i1 %228, label %block_402884, label %block_402783

block_4024db:                                     ; preds = %block_4024c4, %block_4024ea
  %MEMORY.1 = phi %struct.Memory* [ %1323, %block_4024c4 ], [ %1133, %block_4024ea ]
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 44
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i32*
  %235 = load i32, i32* %234
  %236 = zext i32 %235 to i64
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = and i64 %237, 4294967295
  %241 = shl i64 %240, 1
  %242 = trunc i64 %241 to i32
  %243 = icmp slt i32 %242, 0
  %244 = shl i32 %242, 1
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %247 = zext i1 %243 to i8
  store i8 %247, i8* %246, align 1, !tbaa !2451
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %249 = and i32 %244, 254
  %250 = call i32 @llvm.ctpop.i32(i32 %249) #17
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  %253 = xor i8 %252, 1
  store i8 %253, i8* %248, align 1, !tbaa !2451
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %254, align 1, !tbaa !2451
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %256 = icmp eq i32 %244, 0
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %255, align 1, !tbaa !2451
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %259 = lshr i32 %244, 31
  %260 = trunc i32 %259 to i8
  store i8 %260, i8* %258, align 1, !tbaa !2451
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %261, align 1, !tbaa !2451
  %262 = load i32, i32* %EAX
  %263 = zext i32 %262 to i64
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 4
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 3
  store i64 %267, i64* %PC
  %268 = inttoptr i64 %265 to i32*
  %269 = load i32, i32* %268
  %270 = sub i32 %262, %269
  %271 = icmp ult i32 %262, %269
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %272, i8* %273, align 1, !tbaa !2432
  %274 = and i32 %270, 255
  %275 = call i32 @llvm.ctpop.i32(i32 %274) #17
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %278, i8* %279, align 1, !tbaa !2446
  %280 = xor i32 %269, %262
  %281 = xor i32 %280, %270
  %282 = lshr i32 %281, 4
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %284, i8* %285, align 1, !tbaa !2447
  %286 = icmp eq i32 %270, 0
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %287, i8* %288, align 1, !tbaa !2448
  %289 = lshr i32 %270, 31
  %290 = trunc i32 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %290, i8* %291, align 1, !tbaa !2449
  %292 = lshr i32 %262, 31
  %293 = lshr i32 %269, 31
  %294 = xor i32 %293, %292
  %295 = xor i32 %289, %292
  %296 = add nuw nsw i32 %295, %294
  %297 = icmp eq i32 %296, 2
  %298 = zext i1 %297 to i8
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %298, i8* %299, align 1, !tbaa !2450
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 39
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 6
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 6
  store i64 %305, i64* %PC
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %307 = load i8, i8* %306, align 1, !tbaa !2449
  %308 = icmp ne i8 %307, 0
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %310 = load i8, i8* %309, align 1, !tbaa !2450
  %311 = icmp ne i8 %310, 0
  %312 = xor i1 %308, %311
  %313 = xor i1 %312, true
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %316 = select i1 %312, i64 %303, i64 %301
  store i64 %316, i64* %315, align 8, !tbaa !2428
  %317 = load i8, i8* %BRANCH_TAKEN
  %318 = icmp eq i8 %317, 1
  br i1 %318, label %block_40250b, label %block_4024ea

block_402783:                                     ; preds = %block_402777
  %319 = add i64 %229, 10
  store i64 %319, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 28
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC
  %324 = inttoptr i64 %321 to i32*
  %325 = load i32, i32* %324
  %326 = zext i32 %325 to i64
  store i64 %326, i64* %RCX, align 8, !tbaa !2428
  %327 = load i64, i64* %RCX
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 44
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = trunc i64 %327 to i32
  %333 = inttoptr i64 %329 to i32*
  %334 = load i32, i32* %333
  %335 = add i32 %334, %332
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RCX, align 8, !tbaa !2428
  %337 = icmp ult i32 %335, %332
  %338 = icmp ult i32 %335, %334
  %339 = or i1 %337, %338
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %340, i8* %341, align 1, !tbaa !2432
  %342 = and i32 %335, 255
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #17
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %346, i8* %347, align 1, !tbaa !2446
  %348 = xor i32 %334, %332
  %349 = xor i32 %348, %335
  %350 = lshr i32 %349, 4
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %352, i8* %353, align 1, !tbaa !2447
  %354 = icmp eq i32 %335, 0
  %355 = zext i1 %354 to i8
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %355, i8* %356, align 1, !tbaa !2448
  %357 = lshr i32 %335, 31
  %358 = trunc i32 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %358, i8* %359, align 1, !tbaa !2449
  %360 = lshr i32 %332, 31
  %361 = lshr i32 %334, 31
  %362 = xor i32 %357, %360
  %363 = xor i32 %357, %361
  %364 = add nuw nsw i32 %362, %363
  %365 = icmp eq i32 %364, 2
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %366, i8* %367, align 1, !tbaa !2450
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 32
  %370 = load i32, i32* %ECX
  %371 = zext i32 %370 to i64
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 3
  store i64 %373, i64* %PC
  %374 = inttoptr i64 %369 to i32*
  store i32 %370, i32* %374
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 16
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i64*
  %380 = load i64, i64* %379
  store i64 %380, i64* %RDX, align 8, !tbaa !2428
  %381 = load i64, i64* %RBP
  %382 = sub i64 %381, 28
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC
  %385 = inttoptr i64 %382 to i32*
  %386 = load i32, i32* %385
  %387 = sext i32 %386 to i64
  store i64 %387, i64* %RSI, align 8, !tbaa !2428
  %388 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %389 = load i64, i64* %RDX
  %390 = load i64, i64* %RSI
  %391 = mul i64 %390, 8
  %392 = add i64 %391, %389
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 5
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to double*
  %396 = load double, double* %395
  %397 = bitcast i8* %388 to double*
  store double %396, double* %397, align 1, !tbaa !2452
  %398 = getelementptr inbounds i8, i8* %388, i64 8
  %399 = bitcast i8* %398 to double*
  store double 0.000000e+00, double* %399, align 1, !tbaa !2452
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 16
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %RDX, align 8, !tbaa !2428
  %406 = load i64, i64* %RBP
  %407 = sub i64 %406, 32
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 4
  store i64 %409, i64* %PC
  %410 = inttoptr i64 %407 to i32*
  %411 = load i32, i32* %410
  %412 = sext i32 %411 to i64
  store i64 %412, i64* %RSI, align 8, !tbaa !2428
  %413 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %414 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %415 = load i64, i64* %RDX
  %416 = load i64, i64* %RSI
  %417 = mul i64 %416, 8
  %418 = add i64 %417, %415
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 5
  store i64 %420, i64* %PC
  %421 = bitcast i8* %414 to double*
  %422 = load double, double* %421, align 1
  %423 = getelementptr inbounds i8, i8* %414, i64 8
  %424 = bitcast i8* %423 to i64*
  %425 = load i64, i64* %424, align 1
  %426 = inttoptr i64 %418 to double*
  %427 = load double, double* %426
  %428 = fsub double %422, %427
  %429 = bitcast i8* %413 to double*
  store double %428, double* %429, align 1, !tbaa !2452
  %430 = getelementptr inbounds i8, i8* %413, i64 8
  %431 = bitcast i8* %430 to i64*
  store i64 %425, i64* %431, align 1, !tbaa !2452
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 56
  %434 = bitcast %union.vec128_t* %XMM0 to i8*
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = bitcast i8* %434 to double*
  %438 = load double, double* %437, align 1
  %439 = inttoptr i64 %433 to double*
  store double %438, double* %439
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 16
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i64*
  %445 = load i64, i64* %444
  store i64 %445, i64* %RDX, align 8, !tbaa !2428
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 28
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i32*
  %451 = load i32, i32* %450
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %RCX, align 8, !tbaa !2428
  %453 = load i64, i64* %RCX
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 3
  store i64 %455, i64* %PC
  %456 = trunc i64 %453 to i32
  %457 = add i32 1, %456
  %458 = zext i32 %457 to i64
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = icmp ult i32 %457, %456
  %460 = icmp ult i32 %457, 1
  %461 = or i1 %459, %460
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %462, i8* %463, align 1, !tbaa !2432
  %464 = and i32 %457, 255
  %465 = call i32 @llvm.ctpop.i32(i32 %464) #17
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %468, i8* %469, align 1, !tbaa !2446
  %470 = xor i64 1, %453
  %471 = trunc i64 %470 to i32
  %472 = xor i32 %471, %457
  %473 = lshr i32 %472, 4
  %474 = trunc i32 %473 to i8
  %475 = and i8 %474, 1
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %475, i8* %476, align 1, !tbaa !2447
  %477 = icmp eq i32 %457, 0
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %478, i8* %479, align 1, !tbaa !2448
  %480 = lshr i32 %457, 31
  %481 = trunc i32 %480 to i8
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %481, i8* %482, align 1, !tbaa !2449
  %483 = lshr i32 %456, 31
  %484 = xor i32 %480, %483
  %485 = add nuw nsw i32 %484, %480
  %486 = icmp eq i32 %485, 2
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %487, i8* %488, align 1, !tbaa !2450
  %489 = load i32, i32* %ECX
  %490 = zext i32 %489 to i64
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 3
  store i64 %492, i64* %PC
  %493 = shl i64 %490, 32
  %494 = ashr exact i64 %493, 32
  store i64 %494, i64* %RSI, align 8, !tbaa !2428
  %495 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %496 = load i64, i64* %RDX
  %497 = load i64, i64* %RSI
  %498 = mul i64 %497, 8
  %499 = add i64 %498, %496
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 5
  store i64 %501, i64* %PC
  %502 = inttoptr i64 %499 to double*
  %503 = load double, double* %502
  %504 = bitcast i8* %495 to double*
  store double %503, double* %504, align 1, !tbaa !2452
  %505 = getelementptr inbounds i8, i8* %495, i64 8
  %506 = bitcast i8* %505 to double*
  store double 0.000000e+00, double* %506, align 1, !tbaa !2452
  %507 = bitcast %union.vec128_t* %XMM0 to i8*
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  store i64 %509, i64* %PC
  %510 = bitcast i8* %507 to i64*
  %511 = load i64, i64* %510, align 1
  store i64 %511, i64* %RDX, align 1, !tbaa !2428
  %512 = load i64, i64* %RDX
  %513 = load i64, i64* %RAX
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 3
  store i64 %515, i64* %PC
  %516 = xor i64 %513, %512
  store i64 %516, i64* %RDX, align 8, !tbaa !2428
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %517, align 1, !tbaa !2432
  %518 = trunc i64 %516 to i32
  %519 = and i32 %518, 255
  %520 = call i32 @llvm.ctpop.i32(i32 %519) #17
  %521 = trunc i32 %520 to i8
  %522 = and i8 %521, 1
  %523 = xor i8 %522, 1
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %523, i8* %524, align 1, !tbaa !2446
  %525 = icmp eq i64 %516, 0
  %526 = zext i1 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %526, i8* %527, align 1, !tbaa !2448
  %528 = lshr i64 %516, 63
  %529 = trunc i64 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %529, i8* %530, align 1, !tbaa !2449
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %531, align 1, !tbaa !2450
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %532, align 1, !tbaa !2447
  %533 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %534 = load i64, i64* %RDX
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = bitcast i8* %533 to i64*
  store i64 %534, i64* %537, align 1, !tbaa !2428
  %538 = getelementptr inbounds i8, i8* %533, i64 8
  %539 = bitcast i8* %538 to i64*
  store i64 0, i64* %539, align 1, !tbaa !2428
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 16
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 4
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i64*
  %545 = load i64, i64* %544
  store i64 %545, i64* %RDX, align 8, !tbaa !2428
  %546 = load i64, i64* %RBP
  %547 = sub i64 %546, 32
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 3
  store i64 %549, i64* %PC
  %550 = inttoptr i64 %547 to i32*
  %551 = load i32, i32* %550
  %552 = zext i32 %551 to i64
  store i64 %552, i64* %RCX, align 8, !tbaa !2428
  %553 = load i64, i64* %RCX
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 3
  store i64 %555, i64* %PC
  %556 = trunc i64 %553 to i32
  %557 = add i32 1, %556
  %558 = zext i32 %557 to i64
  store i64 %558, i64* %RCX, align 8, !tbaa !2428
  %559 = icmp ult i32 %557, %556
  %560 = icmp ult i32 %557, 1
  %561 = or i1 %559, %560
  %562 = zext i1 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %562, i8* %563, align 1, !tbaa !2432
  %564 = and i32 %557, 255
  %565 = call i32 @llvm.ctpop.i32(i32 %564) #17
  %566 = trunc i32 %565 to i8
  %567 = and i8 %566, 1
  %568 = xor i8 %567, 1
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %568, i8* %569, align 1, !tbaa !2446
  %570 = xor i64 1, %553
  %571 = trunc i64 %570 to i32
  %572 = xor i32 %571, %557
  %573 = lshr i32 %572, 4
  %574 = trunc i32 %573 to i8
  %575 = and i8 %574, 1
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %575, i8* %576, align 1, !tbaa !2447
  %577 = icmp eq i32 %557, 0
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %578, i8* %579, align 1, !tbaa !2448
  %580 = lshr i32 %557, 31
  %581 = trunc i32 %580 to i8
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %581, i8* %582, align 1, !tbaa !2449
  %583 = lshr i32 %556, 31
  %584 = xor i32 %580, %583
  %585 = add nuw nsw i32 %584, %580
  %586 = icmp eq i32 %585, 2
  %587 = zext i1 %586 to i8
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %587, i8* %588, align 1, !tbaa !2450
  %589 = load i32, i32* %ECX
  %590 = zext i32 %589 to i64
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 3
  store i64 %592, i64* %PC
  %593 = shl i64 %590, 32
  %594 = ashr exact i64 %593, 32
  store i64 %594, i64* %RSI, align 8, !tbaa !2428
  %595 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %596 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %597 = load i64, i64* %RDX
  %598 = load i64, i64* %RSI
  %599 = mul i64 %598, 8
  %600 = add i64 %599, %597
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 5
  store i64 %602, i64* %PC
  %603 = bitcast i8* %596 to double*
  %604 = load double, double* %603, align 1
  %605 = getelementptr inbounds i8, i8* %596, i64 8
  %606 = bitcast i8* %605 to i64*
  %607 = load i64, i64* %606, align 1
  %608 = inttoptr i64 %600 to double*
  %609 = load double, double* %608
  %610 = fadd double %604, %609
  %611 = bitcast i8* %595 to double*
  store double %610, double* %611, align 1, !tbaa !2452
  %612 = getelementptr inbounds i8, i8* %595, i64 8
  %613 = bitcast i8* %612 to i64*
  store i64 %607, i64* %613, align 1, !tbaa !2452
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 64
  %616 = bitcast %union.vec128_t* %XMM0 to i8*
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 5
  store i64 %618, i64* %PC
  %619 = bitcast i8* %616 to double*
  %620 = load double, double* %619, align 1
  %621 = inttoptr i64 %615 to double*
  store double %620, double* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 16
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 4
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i64*
  %627 = load i64, i64* %626
  store i64 %627, i64* %RDX, align 8, !tbaa !2428
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 32
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 4
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i32*
  %633 = load i32, i32* %632
  %634 = sext i32 %633 to i64
  store i64 %634, i64* %RSI, align 8, !tbaa !2428
  %635 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %636 = load i64, i64* %RDX
  %637 = load i64, i64* %RSI
  %638 = mul i64 %637, 8
  %639 = add i64 %638, %636
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 5
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to double*
  %643 = load double, double* %642
  %644 = bitcast i8* %635 to double*
  store double %643, double* %644, align 1, !tbaa !2452
  %645 = getelementptr inbounds i8, i8* %635, i64 8
  %646 = bitcast i8* %645 to double*
  store double 0.000000e+00, double* %646, align 1, !tbaa !2452
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 16
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RDX, align 8, !tbaa !2428
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 28
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 4
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i32*
  %658 = load i32, i32* %657
  %659 = sext i32 %658 to i64
  store i64 %659, i64* %RSI, align 8, !tbaa !2428
  %660 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %661 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %662 = load i64, i64* %RDX
  %663 = load i64, i64* %RSI
  %664 = mul i64 %663, 8
  %665 = add i64 %664, %662
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 5
  store i64 %667, i64* %PC
  %668 = bitcast i8* %661 to double*
  %669 = load double, double* %668, align 1
  %670 = getelementptr inbounds i8, i8* %661, i64 8
  %671 = bitcast i8* %670 to i64*
  %672 = load i64, i64* %671, align 1
  %673 = inttoptr i64 %665 to double*
  %674 = load double, double* %673
  %675 = fadd double %669, %674
  %676 = bitcast i8* %660 to double*
  store double %675, double* %676, align 1, !tbaa !2452
  %677 = getelementptr inbounds i8, i8* %660, i64 8
  %678 = bitcast i8* %677 to i64*
  store i64 %672, i64* %678, align 1, !tbaa !2452
  %679 = load i64, i64* %RDX
  %680 = load i64, i64* %RSI
  %681 = mul i64 %680, 8
  %682 = add i64 %681, %679
  %683 = bitcast %union.vec128_t* %XMM0 to i8*
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  %686 = bitcast i8* %683 to double*
  %687 = load double, double* %686, align 1
  %688 = inttoptr i64 %682 to double*
  store double %687, double* %688
  %689 = load i64, i64* %RBP
  %690 = sub i64 %689, 16
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 4
  store i64 %692, i64* %PC
  %693 = inttoptr i64 %690 to i64*
  %694 = load i64, i64* %693
  store i64 %694, i64* %RDX, align 8, !tbaa !2428
  %695 = load i64, i64* %RBP
  %696 = sub i64 %695, 28
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 3
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  %700 = load i32, i32* %699
  %701 = zext i32 %700 to i64
  store i64 %701, i64* %RCX, align 8, !tbaa !2428
  %702 = load i64, i64* %RCX
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = trunc i64 %702 to i32
  %706 = add i32 1, %705
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %RCX, align 8, !tbaa !2428
  %708 = icmp ult i32 %706, %705
  %709 = icmp ult i32 %706, 1
  %710 = or i1 %708, %709
  %711 = zext i1 %710 to i8
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %711, i8* %712, align 1, !tbaa !2432
  %713 = and i32 %706, 255
  %714 = call i32 @llvm.ctpop.i32(i32 %713) #17
  %715 = trunc i32 %714 to i8
  %716 = and i8 %715, 1
  %717 = xor i8 %716, 1
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %717, i8* %718, align 1, !tbaa !2446
  %719 = xor i64 1, %702
  %720 = trunc i64 %719 to i32
  %721 = xor i32 %720, %706
  %722 = lshr i32 %721, 4
  %723 = trunc i32 %722 to i8
  %724 = and i8 %723, 1
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %724, i8* %725, align 1, !tbaa !2447
  %726 = icmp eq i32 %706, 0
  %727 = zext i1 %726 to i8
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %727, i8* %728, align 1, !tbaa !2448
  %729 = lshr i32 %706, 31
  %730 = trunc i32 %729 to i8
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %730, i8* %731, align 1, !tbaa !2449
  %732 = lshr i32 %705, 31
  %733 = xor i32 %729, %732
  %734 = add nuw nsw i32 %733, %729
  %735 = icmp eq i32 %734, 2
  %736 = zext i1 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %736, i8* %737, align 1, !tbaa !2450
  %738 = load i32, i32* %ECX
  %739 = zext i32 %738 to i64
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 3
  store i64 %741, i64* %PC
  %742 = shl i64 %739, 32
  %743 = ashr exact i64 %742, 32
  store i64 %743, i64* %RSI, align 8, !tbaa !2428
  %744 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %745 = load i64, i64* %RDX
  %746 = load i64, i64* %RSI
  %747 = mul i64 %746, 8
  %748 = add i64 %747, %745
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 5
  store i64 %750, i64* %PC
  %751 = inttoptr i64 %748 to double*
  %752 = load double, double* %751
  %753 = bitcast i8* %744 to double*
  store double %752, double* %753, align 1, !tbaa !2452
  %754 = getelementptr inbounds i8, i8* %744, i64 8
  %755 = bitcast i8* %754 to double*
  store double 0.000000e+00, double* %755, align 1, !tbaa !2452
  %756 = bitcast %union.vec128_t* %XMM0 to i8*
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 5
  store i64 %758, i64* %PC
  %759 = bitcast i8* %756 to i64*
  %760 = load i64, i64* %759, align 1
  store i64 %760, i64* %RDX, align 1, !tbaa !2428
  %761 = load i64, i64* %RDX
  %762 = load i64, i64* %RAX
  %763 = load i64, i64* %PC
  %764 = add i64 %763, 3
  store i64 %764, i64* %PC
  %765 = xor i64 %762, %761
  store i64 %765, i64* %RDX, align 8, !tbaa !2428
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %766, align 1, !tbaa !2432
  %767 = trunc i64 %765 to i32
  %768 = and i32 %767, 255
  %769 = call i32 @llvm.ctpop.i32(i32 %768) #17
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %772, i8* %773, align 1, !tbaa !2446
  %774 = icmp eq i64 %765, 0
  %775 = zext i1 %774 to i8
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %775, i8* %776, align 1, !tbaa !2448
  %777 = lshr i64 %765, 63
  %778 = trunc i64 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %778, i8* %779, align 1, !tbaa !2449
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %780, align 1, !tbaa !2450
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %781, align 1, !tbaa !2447
  %782 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %783 = load i64, i64* %RDX
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 5
  store i64 %785, i64* %PC
  %786 = bitcast i8* %782 to i64*
  store i64 %783, i64* %786, align 1, !tbaa !2428
  %787 = getelementptr inbounds i8, i8* %782, i64 8
  %788 = bitcast i8* %787 to i64*
  store i64 0, i64* %788, align 1, !tbaa !2428
  %789 = load i64, i64* %RBP
  %790 = sub i64 %789, 16
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %790 to i64*
  %794 = load i64, i64* %793
  store i64 %794, i64* %RAX, align 8, !tbaa !2428
  %795 = load i64, i64* %RBP
  %796 = sub i64 %795, 32
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 3
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %796 to i32*
  %800 = load i32, i32* %799
  %801 = zext i32 %800 to i64
  store i64 %801, i64* %RCX, align 8, !tbaa !2428
  %802 = load i64, i64* %RCX
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 3
  store i64 %804, i64* %PC
  %805 = trunc i64 %802 to i32
  %806 = add i32 1, %805
  %807 = zext i32 %806 to i64
  store i64 %807, i64* %RCX, align 8, !tbaa !2428
  %808 = icmp ult i32 %806, %805
  %809 = icmp ult i32 %806, 1
  %810 = or i1 %808, %809
  %811 = zext i1 %810 to i8
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %811, i8* %812, align 1, !tbaa !2432
  %813 = and i32 %806, 255
  %814 = call i32 @llvm.ctpop.i32(i32 %813) #17
  %815 = trunc i32 %814 to i8
  %816 = and i8 %815, 1
  %817 = xor i8 %816, 1
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %817, i8* %818, align 1, !tbaa !2446
  %819 = xor i64 1, %802
  %820 = trunc i64 %819 to i32
  %821 = xor i32 %820, %806
  %822 = lshr i32 %821, 4
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %824, i8* %825, align 1, !tbaa !2447
  %826 = icmp eq i32 %806, 0
  %827 = zext i1 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %827, i8* %828, align 1, !tbaa !2448
  %829 = lshr i32 %806, 31
  %830 = trunc i32 %829 to i8
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %830, i8* %831, align 1, !tbaa !2449
  %832 = lshr i32 %805, 31
  %833 = xor i32 %829, %832
  %834 = add nuw nsw i32 %833, %829
  %835 = icmp eq i32 %834, 2
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %836, i8* %837, align 1, !tbaa !2450
  %838 = load i32, i32* %ECX
  %839 = zext i32 %838 to i64
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 3
  store i64 %841, i64* %PC
  %842 = shl i64 %839, 32
  %843 = ashr exact i64 %842, 32
  store i64 %843, i64* %RDX, align 8, !tbaa !2428
  %844 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %845 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %846 = load i64, i64* %RAX
  %847 = load i64, i64* %RDX
  %848 = mul i64 %847, 8
  %849 = add i64 %848, %846
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 5
  store i64 %851, i64* %PC
  %852 = bitcast i8* %845 to double*
  %853 = load double, double* %852, align 1
  %854 = getelementptr inbounds i8, i8* %845, i64 8
  %855 = bitcast i8* %854 to i64*
  %856 = load i64, i64* %855, align 1
  %857 = inttoptr i64 %849 to double*
  %858 = load double, double* %857
  %859 = fsub double %853, %858
  %860 = bitcast i8* %844 to double*
  store double %859, double* %860, align 1, !tbaa !2452
  %861 = getelementptr inbounds i8, i8* %844, i64 8
  %862 = bitcast i8* %861 to i64*
  store i64 %856, i64* %862, align 1, !tbaa !2452
  %863 = load i64, i64* %RBP
  %864 = sub i64 %863, 16
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 4
  store i64 %866, i64* %PC
  %867 = inttoptr i64 %864 to i64*
  %868 = load i64, i64* %867
  store i64 %868, i64* %RAX, align 8, !tbaa !2428
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 28
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 3
  store i64 %872, i64* %PC
  %873 = inttoptr i64 %870 to i32*
  %874 = load i32, i32* %873
  %875 = zext i32 %874 to i64
  store i64 %875, i64* %RCX, align 8, !tbaa !2428
  %876 = load i64, i64* %RCX
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 3
  store i64 %878, i64* %PC
  %879 = trunc i64 %876 to i32
  %880 = add i32 1, %879
  %881 = zext i32 %880 to i64
  store i64 %881, i64* %RCX, align 8, !tbaa !2428
  %882 = icmp ult i32 %880, %879
  %883 = icmp ult i32 %880, 1
  %884 = or i1 %882, %883
  %885 = zext i1 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %885, i8* %886, align 1, !tbaa !2432
  %887 = and i32 %880, 255
  %888 = call i32 @llvm.ctpop.i32(i32 %887) #17
  %889 = trunc i32 %888 to i8
  %890 = and i8 %889, 1
  %891 = xor i8 %890, 1
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %891, i8* %892, align 1, !tbaa !2446
  %893 = xor i64 1, %876
  %894 = trunc i64 %893 to i32
  %895 = xor i32 %894, %880
  %896 = lshr i32 %895, 4
  %897 = trunc i32 %896 to i8
  %898 = and i8 %897, 1
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %898, i8* %899, align 1, !tbaa !2447
  %900 = icmp eq i32 %880, 0
  %901 = zext i1 %900 to i8
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %901, i8* %902, align 1, !tbaa !2448
  %903 = lshr i32 %880, 31
  %904 = trunc i32 %903 to i8
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %904, i8* %905, align 1, !tbaa !2449
  %906 = lshr i32 %879, 31
  %907 = xor i32 %903, %906
  %908 = add nuw nsw i32 %907, %903
  %909 = icmp eq i32 %908, 2
  %910 = zext i1 %909 to i8
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %910, i8* %911, align 1, !tbaa !2450
  %912 = load i32, i32* %ECX
  %913 = zext i32 %912 to i64
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 3
  store i64 %915, i64* %PC
  %916 = shl i64 %913, 32
  %917 = ashr exact i64 %916, 32
  store i64 %917, i64* %RDX, align 8, !tbaa !2428
  %918 = load i64, i64* %RAX
  %919 = load i64, i64* %RDX
  %920 = mul i64 %919, 8
  %921 = add i64 %920, %918
  %922 = bitcast %union.vec128_t* %XMM0 to i8*
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 5
  store i64 %924, i64* %PC
  %925 = bitcast i8* %922 to double*
  %926 = load double, double* %925, align 1
  %927 = inttoptr i64 %921 to double*
  store double %926, double* %927
  %928 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %929 = load i64, i64* %RBP
  %930 = sub i64 %929, 56
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 5
  store i64 %932, i64* %PC
  %933 = inttoptr i64 %930 to double*
  %934 = load double, double* %933
  %935 = bitcast i8* %928 to double*
  store double %934, double* %935, align 1, !tbaa !2452
  %936 = getelementptr inbounds i8, i8* %928, i64 8
  %937 = bitcast i8* %936 to double*
  store double 0.000000e+00, double* %937, align 1, !tbaa !2452
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 16
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 4
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i64*
  %943 = load i64, i64* %942
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = load i64, i64* %RBP
  %945 = sub i64 %944, 32
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = inttoptr i64 %945 to i32*
  %949 = load i32, i32* %948
  %950 = sext i32 %949 to i64
  store i64 %950, i64* %RDX, align 8, !tbaa !2428
  %951 = load i64, i64* %RAX
  %952 = load i64, i64* %RDX
  %953 = mul i64 %952, 8
  %954 = add i64 %953, %951
  %955 = bitcast %union.vec128_t* %XMM0 to i8*
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 5
  store i64 %957, i64* %PC
  %958 = bitcast i8* %955 to double*
  %959 = load double, double* %958, align 1
  %960 = inttoptr i64 %954 to double*
  store double %959, double* %960
  %961 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 64
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 5
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to double*
  %967 = load double, double* %966
  %968 = bitcast i8* %961 to double*
  store double %967, double* %968, align 1, !tbaa !2452
  %969 = getelementptr inbounds i8, i8* %961, i64 8
  %970 = bitcast i8* %969 to double*
  store double 0.000000e+00, double* %970, align 1, !tbaa !2452
  %971 = load i64, i64* %RBP
  %972 = sub i64 %971, 16
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 4
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i64*
  %976 = load i64, i64* %975
  store i64 %976, i64* %RAX, align 8, !tbaa !2428
  %977 = load i64, i64* %RBP
  %978 = sub i64 %977, 32
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 3
  store i64 %980, i64* %PC
  %981 = inttoptr i64 %978 to i32*
  %982 = load i32, i32* %981
  %983 = zext i32 %982 to i64
  store i64 %983, i64* %RCX, align 8, !tbaa !2428
  %984 = load i64, i64* %RCX
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 3
  store i64 %986, i64* %PC
  %987 = trunc i64 %984 to i32
  %988 = add i32 1, %987
  %989 = zext i32 %988 to i64
  store i64 %989, i64* %RCX, align 8, !tbaa !2428
  %990 = icmp ult i32 %988, %987
  %991 = icmp ult i32 %988, 1
  %992 = or i1 %990, %991
  %993 = zext i1 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %993, i8* %994, align 1, !tbaa !2432
  %995 = and i32 %988, 255
  %996 = call i32 @llvm.ctpop.i32(i32 %995) #17
  %997 = trunc i32 %996 to i8
  %998 = and i8 %997, 1
  %999 = xor i8 %998, 1
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %999, i8* %1000, align 1, !tbaa !2446
  %1001 = xor i64 1, %984
  %1002 = trunc i64 %1001 to i32
  %1003 = xor i32 %1002, %988
  %1004 = lshr i32 %1003, 4
  %1005 = trunc i32 %1004 to i8
  %1006 = and i8 %1005, 1
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1006, i8* %1007, align 1, !tbaa !2447
  %1008 = icmp eq i32 %988, 0
  %1009 = zext i1 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1009, i8* %1010, align 1, !tbaa !2448
  %1011 = lshr i32 %988, 31
  %1012 = trunc i32 %1011 to i8
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1012, i8* %1013, align 1, !tbaa !2449
  %1014 = lshr i32 %987, 31
  %1015 = xor i32 %1011, %1014
  %1016 = add nuw nsw i32 %1015, %1011
  %1017 = icmp eq i32 %1016, 2
  %1018 = zext i1 %1017 to i8
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1018, i8* %1019, align 1, !tbaa !2450
  %1020 = load i32, i32* %ECX
  %1021 = zext i32 %1020 to i64
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 3
  store i64 %1023, i64* %PC
  %1024 = shl i64 %1021, 32
  %1025 = ashr exact i64 %1024, 32
  store i64 %1025, i64* %RDX, align 8, !tbaa !2428
  %1026 = load i64, i64* %RAX
  %1027 = load i64, i64* %RDX
  %1028 = mul i64 %1027, 8
  %1029 = add i64 %1028, %1026
  %1030 = bitcast %union.vec128_t* %XMM0 to i8*
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = bitcast i8* %1030 to double*
  %1034 = load double, double* %1033, align 1
  %1035 = inttoptr i64 %1029 to double*
  store double %1034, double* %1035
  %1036 = load i64, i64* %RBP
  %1037 = sub i64 %1036, 28
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 3
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1037 to i32*
  %1041 = load i32, i32* %1040
  %1042 = zext i32 %1041 to i64
  store i64 %1042, i64* %RAX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RAX
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 3
  store i64 %1045, i64* %PC
  %1046 = trunc i64 %1043 to i32
  %1047 = add i32 2, %1046
  %1048 = zext i32 %1047 to i64
  store i64 %1048, i64* %RAX, align 8, !tbaa !2428
  %1049 = icmp ult i32 %1047, %1046
  %1050 = icmp ult i32 %1047, 2
  %1051 = or i1 %1049, %1050
  %1052 = zext i1 %1051 to i8
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1052, i8* %1053, align 1, !tbaa !2432
  %1054 = and i32 %1047, 255
  %1055 = call i32 @llvm.ctpop.i32(i32 %1054) #17
  %1056 = trunc i32 %1055 to i8
  %1057 = and i8 %1056, 1
  %1058 = xor i8 %1057, 1
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1058, i8* %1059, align 1, !tbaa !2446
  %1060 = xor i64 2, %1043
  %1061 = trunc i64 %1060 to i32
  %1062 = xor i32 %1061, %1047
  %1063 = lshr i32 %1062, 4
  %1064 = trunc i32 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1065, i8* %1066, align 1, !tbaa !2447
  %1067 = icmp eq i32 %1047, 0
  %1068 = zext i1 %1067 to i8
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1068, i8* %1069, align 1, !tbaa !2448
  %1070 = lshr i32 %1047, 31
  %1071 = trunc i32 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1071, i8* %1072, align 1, !tbaa !2449
  %1073 = lshr i32 %1046, 31
  %1074 = xor i32 %1070, %1073
  %1075 = add nuw nsw i32 %1074, %1070
  %1076 = icmp eq i32 %1075, 2
  %1077 = zext i1 %1076 to i8
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1077, i8* %1078, align 1, !tbaa !2450
  %1079 = load i64, i64* %RBP
  %1080 = sub i64 %1079, 28
  %1081 = load i32, i32* %EAX
  %1082 = zext i32 %1081 to i64
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 3
  store i64 %1084, i64* %PC
  %1085 = inttoptr i64 %1080 to i32*
  store i32 %1081, i32* %1085
  %1086 = load i64, i64* %PC
  %1087 = sub i64 %1086, 264
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 5
  store i64 %1089, i64* %PC
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1087, i64* %1090, align 8, !tbaa !2428
  br label %block_402777

block_40276b:                                     ; preds = %block_402526
  %1091 = add i64 %1291, 286
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 5
  store i64 %1093, i64* %PC
  %1094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1091, i64* %1094, align 8, !tbaa !2428
  br label %block_402889

block_4024ea:                                     ; preds = %block_4024db
  %1095 = load i64, i64* %RBP
  %1096 = sub i64 %1095, 4
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 3
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1096 to i32*
  %1100 = load i32, i32* %1099
  %1101 = zext i32 %1100 to i64
  store i64 %1101, i64* %RDI, align 8, !tbaa !2428
  %1102 = load i64, i64* %RBP
  %1103 = sub i64 %1102, 44
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 3
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1103 to i32*
  %1107 = load i32, i32* %1106
  %1108 = zext i32 %1107 to i64
  store i64 %1108, i64* %RSI, align 8, !tbaa !2428
  %1109 = load i64, i64* %RBP
  %1110 = sub i64 %1109, 16
  %1111 = load i64, i64* %PC
  %1112 = add i64 %1111, 4
  store i64 %1112, i64* %PC
  %1113 = inttoptr i64 %1110 to i64*
  %1114 = load i64, i64* %1113
  store i64 %1114, i64* %RDX, align 8, !tbaa !2428
  %1115 = load i64, i64* %RBP
  %1116 = sub i64 %1115, 24
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 4
  store i64 %1118, i64* %PC
  %1119 = inttoptr i64 %1116 to i64*
  %1120 = load i64, i64* %1119
  store i64 %1120, i64* %RCX, align 8, !tbaa !2428
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 3624
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  store i64 %1126, i64* %PC
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1128 = load i64, i64* %1127, align 8, !tbaa !2428
  %1129 = add i64 %1128, -8
  %1130 = inttoptr i64 %1129 to i64*
  store i64 %1124, i64* %1130
  store i64 %1129, i64* %1127, align 8, !tbaa !2428
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1122, i64* %1131, align 8, !tbaa !2428
  %1132 = load i64, i64* %PC
  %1133 = call %struct.Memory* @sub_403320_cftmdl(%struct.State* %0, i64 %1132, %struct.Memory* %MEMORY.1)
  %1134 = load i64, i64* %RBP
  %1135 = sub i64 %1134, 44
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 3
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1135 to i32*
  %1139 = load i32, i32* %1138
  %1140 = zext i32 %1139 to i64
  store i64 %1140, i64* %RSI, align 8, !tbaa !2428
  %1141 = load i64, i64* %RSI
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 3
  store i64 %1143, i64* %PC
  %1144 = and i64 %1141, 4294967295
  %1145 = shl i64 %1144, 1
  %1146 = trunc i64 %1145 to i32
  %1147 = icmp slt i32 %1146, 0
  %1148 = shl i32 %1146, 1
  %1149 = zext i32 %1148 to i64
  store i64 %1149, i64* %RSI, align 8, !tbaa !2428
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1151 = zext i1 %1147 to i8
  store i8 %1151, i8* %1150, align 1, !tbaa !2451
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1153 = and i32 %1148, 254
  %1154 = call i32 @llvm.ctpop.i32(i32 %1153) #17
  %1155 = trunc i32 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = xor i8 %1156, 1
  store i8 %1157, i8* %1152, align 1, !tbaa !2451
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1158, align 1, !tbaa !2451
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1160 = icmp eq i32 %1148, 0
  %1161 = zext i1 %1160 to i8
  store i8 %1161, i8* %1159, align 1, !tbaa !2451
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1163 = lshr i32 %1148, 31
  %1164 = trunc i32 %1163 to i8
  store i8 %1164, i8* %1162, align 1, !tbaa !2451
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1165, align 1, !tbaa !2451
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 44
  %1168 = load i32, i32* %ESI
  %1169 = zext i32 %1168 to i64
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 3
  store i64 %1171, i64* %PC
  %1172 = inttoptr i64 %1167 to i32*
  store i32 %1168, i32* %1172
  %1173 = load i64, i64* %PC
  %1174 = sub i64 %1173, 43
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  store i64 %1176, i64* %PC
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1174, i64* %1177, align 8, !tbaa !2428
  br label %block_4024db

block_402889:                                     ; preds = %block_402884, %block_40276b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_402884 ], [ %MEMORY.3, %block_40276b ]
  %1178 = load i64, i64* %RSP
  %1179 = load i64, i64* %PC
  %1180 = add i64 %1179, 4
  store i64 %1180, i64* %PC
  %1181 = add i64 112, %1178
  store i64 %1181, i64* %RSP, align 8, !tbaa !2428
  %1182 = icmp ult i64 %1181, %1178
  %1183 = icmp ult i64 %1181, 112
  %1184 = or i1 %1182, %1183
  %1185 = zext i1 %1184 to i8
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1185, i8* %1186, align 1, !tbaa !2432
  %1187 = trunc i64 %1181 to i32
  %1188 = and i32 %1187, 255
  %1189 = call i32 @llvm.ctpop.i32(i32 %1188) #17
  %1190 = trunc i32 %1189 to i8
  %1191 = and i8 %1190, 1
  %1192 = xor i8 %1191, 1
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1192, i8* %1193, align 1, !tbaa !2446
  %1194 = xor i64 112, %1178
  %1195 = xor i64 %1194, %1181
  %1196 = lshr i64 %1195, 4
  %1197 = trunc i64 %1196 to i8
  %1198 = and i8 %1197, 1
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1198, i8* %1199, align 1, !tbaa !2447
  %1200 = icmp eq i64 %1181, 0
  %1201 = zext i1 %1200 to i8
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1201, i8* %1202, align 1, !tbaa !2448
  %1203 = lshr i64 %1181, 63
  %1204 = trunc i64 %1203 to i8
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1204, i8* %1205, align 1, !tbaa !2449
  %1206 = lshr i64 %1178, 63
  %1207 = xor i64 %1203, %1206
  %1208 = add nuw nsw i64 %1207, %1203
  %1209 = icmp eq i64 %1208, 2
  %1210 = zext i1 %1209 to i8
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1210, i8* %1211, align 1, !tbaa !2450
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 1
  store i64 %1213, i64* %PC
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1215 = load i64, i64* %1214, align 8, !tbaa !2428
  %1216 = add i64 %1215, 8
  %1217 = inttoptr i64 %1215 to i64*
  %1218 = load i64, i64* %1217
  store i64 %1218, i64* %RBP, align 8, !tbaa !2428
  store i64 %1216, i64* %1214, align 8, !tbaa !2428
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 1
  store i64 %1220, i64* %PC
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1223 = load i64, i64* %1222, align 8, !tbaa !2428
  %1224 = inttoptr i64 %1223 to i64*
  %1225 = load i64, i64* %1224
  store i64 %1225, i64* %1221, align 8, !tbaa !2428
  %1226 = add i64 %1223, 8
  store i64 %1226, i64* %1222, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_402526:                                     ; preds = %block_402510, %block_402532
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_402510 ], [ %MEMORY.3, %block_402532 ]
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 28
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 3
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i32*
  %1232 = load i32, i32* %1231
  %1233 = zext i32 %1232 to i64
  store i64 %1233, i64* %RAX, align 8, !tbaa !2428
  %1234 = load i32, i32* %EAX
  %1235 = zext i32 %1234 to i64
  %1236 = load i64, i64* %RBP
  %1237 = sub i64 %1236, 44
  %1238 = load i64, i64* %PC
  %1239 = add i64 %1238, 3
  store i64 %1239, i64* %PC
  %1240 = inttoptr i64 %1237 to i32*
  %1241 = load i32, i32* %1240
  %1242 = sub i32 %1234, %1241
  %1243 = icmp ult i32 %1234, %1241
  %1244 = zext i1 %1243 to i8
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1244, i8* %1245, align 1, !tbaa !2432
  %1246 = and i32 %1242, 255
  %1247 = call i32 @llvm.ctpop.i32(i32 %1246) #17
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  %1250 = xor i8 %1249, 1
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1250, i8* %1251, align 1, !tbaa !2446
  %1252 = xor i32 %1241, %1234
  %1253 = xor i32 %1252, %1242
  %1254 = lshr i32 %1253, 4
  %1255 = trunc i32 %1254 to i8
  %1256 = and i8 %1255, 1
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1256, i8* %1257, align 1, !tbaa !2447
  %1258 = icmp eq i32 %1242, 0
  %1259 = zext i1 %1258 to i8
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1259, i8* %1260, align 1, !tbaa !2448
  %1261 = lshr i32 %1242, 31
  %1262 = trunc i32 %1261 to i8
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1262, i8* %1263, align 1, !tbaa !2449
  %1264 = lshr i32 %1234, 31
  %1265 = lshr i32 %1241, 31
  %1266 = xor i32 %1265, %1264
  %1267 = xor i32 %1261, %1264
  %1268 = add nuw nsw i32 %1267, %1266
  %1269 = icmp eq i32 %1268, 2
  %1270 = zext i1 %1269 to i8
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1270, i8* %1271, align 1, !tbaa !2450
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 575
  %1274 = load i64, i64* %PC
  %1275 = add i64 %1274, 6
  %1276 = load i64, i64* %PC
  %1277 = add i64 %1276, 6
  store i64 %1277, i64* %PC
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1279 = load i8, i8* %1278, align 1, !tbaa !2449
  %1280 = icmp ne i8 %1279, 0
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1282 = load i8, i8* %1281, align 1, !tbaa !2450
  %1283 = icmp ne i8 %1282, 0
  %1284 = xor i1 %1280, %1283
  %1285 = xor i1 %1284, true
  %1286 = zext i1 %1285 to i8
  store i8 %1286, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1288 = select i1 %1284, i64 %1275, i64 %1273
  store i64 %1288, i64* %1287, align 8, !tbaa !2428
  %1289 = load i8, i8* %BRANCH_TAKEN
  %1290 = icmp eq i8 %1289, 1
  %1291 = load i64, i64* %PC
  br i1 %1290, label %block_40276b, label %block_402532

block_4024c4:                                     ; preds = %block_4024a0
  %1292 = load i64, i64* %RBP
  %1293 = sub i64 %1292, 4
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 3
  store i64 %1295, i64* %PC
  %1296 = inttoptr i64 %1293 to i32*
  %1297 = load i32, i32* %1296
  %1298 = zext i32 %1297 to i64
  store i64 %1298, i64* %RDI, align 8, !tbaa !2428
  %1299 = load i64, i64* %RBP
  %1300 = sub i64 %1299, 16
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 4
  store i64 %1302, i64* %PC
  %1303 = inttoptr i64 %1300 to i64*
  %1304 = load i64, i64* %1303
  store i64 %1304, i64* %RSI, align 8, !tbaa !2428
  %1305 = load i64, i64* %RBP
  %1306 = sub i64 %1305, 24
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 4
  store i64 %1308, i64* %PC
  %1309 = inttoptr i64 %1306 to i64*
  %1310 = load i64, i64* %1309
  store i64 %1310, i64* %RDX, align 8, !tbaa !2428
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 961
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 5
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 5
  store i64 %1316, i64* %PC
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1318 = load i64, i64* %1317, align 8, !tbaa !2428
  %1319 = add i64 %1318, -8
  %1320 = inttoptr i64 %1319 to i64*
  store i64 %1314, i64* %1320
  store i64 %1319, i64* %1317, align 8, !tbaa !2428
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1312, i64* %1321, align 8, !tbaa !2428
  %1322 = load i64, i64* %PC
  %1323 = call %struct.Memory* @sub_402890_cft1st(%struct.State* %0, i64 %1322, %struct.Memory* %2)
  %1324 = load i64, i64* %RBP
  %1325 = sub i64 %1324, 44
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 7
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1325 to i32*
  store i32 8, i32* %1328
  br label %block_4024db

block_40250b:                                     ; preds = %block_4024db
  %1329 = load i64, i64* %PC
  %1330 = add i64 %1329, 5
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 5
  store i64 %1332, i64* %PC
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1330, i64* %1333, align 8, !tbaa !2428
  br label %block_402510

block_402884:                                     ; preds = %block_402777
  %1334 = add i64 %229, 5
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  store i64 %1336, i64* %PC
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1334, i64* %1337, align 8, !tbaa !2428
  br label %block_402889

block_402532:                                     ; preds = %block_402526
  %1338 = add i64 %1291, 10
  store i64 %1338, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1339 = load i64, i64* %RBP
  %1340 = sub i64 %1339, 28
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 3
  store i64 %1342, i64* %PC
  %1343 = inttoptr i64 %1340 to i32*
  %1344 = load i32, i32* %1343
  %1345 = zext i32 %1344 to i64
  store i64 %1345, i64* %RCX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RCX
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 44
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 3
  store i64 %1350, i64* %PC
  %1351 = trunc i64 %1346 to i32
  %1352 = inttoptr i64 %1348 to i32*
  %1353 = load i32, i32* %1352
  %1354 = add i32 %1353, %1351
  %1355 = zext i32 %1354 to i64
  store i64 %1355, i64* %RCX, align 8, !tbaa !2428
  %1356 = icmp ult i32 %1354, %1351
  %1357 = icmp ult i32 %1354, %1353
  %1358 = or i1 %1356, %1357
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1359, i8* %1360, align 1, !tbaa !2432
  %1361 = and i32 %1354, 255
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #17
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1365, i8* %1366, align 1, !tbaa !2446
  %1367 = xor i32 %1353, %1351
  %1368 = xor i32 %1367, %1354
  %1369 = lshr i32 %1368, 4
  %1370 = trunc i32 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1371, i8* %1372, align 1, !tbaa !2447
  %1373 = icmp eq i32 %1354, 0
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1374, i8* %1375, align 1, !tbaa !2448
  %1376 = lshr i32 %1354, 31
  %1377 = trunc i32 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1377, i8* %1378, align 1, !tbaa !2449
  %1379 = lshr i32 %1351, 31
  %1380 = lshr i32 %1353, 31
  %1381 = xor i32 %1376, %1379
  %1382 = xor i32 %1376, %1380
  %1383 = add nuw nsw i32 %1381, %1382
  %1384 = icmp eq i32 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2450
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 32
  %1389 = load i32, i32* %ECX
  %1390 = zext i32 %1389 to i64
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 3
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1388 to i32*
  store i32 %1389, i32* %1393
  %1394 = load i64, i64* %RBP
  %1395 = sub i64 %1394, 32
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 3
  store i64 %1397, i64* %PC
  %1398 = inttoptr i64 %1395 to i32*
  %1399 = load i32, i32* %1398
  %1400 = zext i32 %1399 to i64
  store i64 %1400, i64* %RCX, align 8, !tbaa !2428
  %1401 = load i64, i64* %RCX
  %1402 = load i64, i64* %RBP
  %1403 = sub i64 %1402, 44
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 3
  store i64 %1405, i64* %PC
  %1406 = trunc i64 %1401 to i32
  %1407 = inttoptr i64 %1403 to i32*
  %1408 = load i32, i32* %1407
  %1409 = add i32 %1408, %1406
  %1410 = zext i32 %1409 to i64
  store i64 %1410, i64* %RCX, align 8, !tbaa !2428
  %1411 = icmp ult i32 %1409, %1406
  %1412 = icmp ult i32 %1409, %1408
  %1413 = or i1 %1411, %1412
  %1414 = zext i1 %1413 to i8
  %1415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1414, i8* %1415, align 1, !tbaa !2432
  %1416 = and i32 %1409, 255
  %1417 = call i32 @llvm.ctpop.i32(i32 %1416) #17
  %1418 = trunc i32 %1417 to i8
  %1419 = and i8 %1418, 1
  %1420 = xor i8 %1419, 1
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1420, i8* %1421, align 1, !tbaa !2446
  %1422 = xor i32 %1408, %1406
  %1423 = xor i32 %1422, %1409
  %1424 = lshr i32 %1423, 4
  %1425 = trunc i32 %1424 to i8
  %1426 = and i8 %1425, 1
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1426, i8* %1427, align 1, !tbaa !2447
  %1428 = icmp eq i32 %1409, 0
  %1429 = zext i1 %1428 to i8
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1429, i8* %1430, align 1, !tbaa !2448
  %1431 = lshr i32 %1409, 31
  %1432 = trunc i32 %1431 to i8
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1432, i8* %1433, align 1, !tbaa !2449
  %1434 = lshr i32 %1406, 31
  %1435 = lshr i32 %1408, 31
  %1436 = xor i32 %1431, %1434
  %1437 = xor i32 %1431, %1435
  %1438 = add nuw nsw i32 %1436, %1437
  %1439 = icmp eq i32 %1438, 2
  %1440 = zext i1 %1439 to i8
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1440, i8* %1441, align 1, !tbaa !2450
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 36
  %1444 = load i32, i32* %ECX
  %1445 = zext i32 %1444 to i64
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 3
  store i64 %1447, i64* %PC
  %1448 = inttoptr i64 %1443 to i32*
  store i32 %1444, i32* %1448
  %1449 = load i64, i64* %RBP
  %1450 = sub i64 %1449, 36
  %1451 = load i64, i64* %PC
  %1452 = add i64 %1451, 3
  store i64 %1452, i64* %PC
  %1453 = inttoptr i64 %1450 to i32*
  %1454 = load i32, i32* %1453
  %1455 = zext i32 %1454 to i64
  store i64 %1455, i64* %RCX, align 8, !tbaa !2428
  %1456 = load i64, i64* %RCX
  %1457 = load i64, i64* %RBP
  %1458 = sub i64 %1457, 44
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 3
  store i64 %1460, i64* %PC
  %1461 = trunc i64 %1456 to i32
  %1462 = inttoptr i64 %1458 to i32*
  %1463 = load i32, i32* %1462
  %1464 = add i32 %1463, %1461
  %1465 = zext i32 %1464 to i64
  store i64 %1465, i64* %RCX, align 8, !tbaa !2428
  %1466 = icmp ult i32 %1464, %1461
  %1467 = icmp ult i32 %1464, %1463
  %1468 = or i1 %1466, %1467
  %1469 = zext i1 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1469, i8* %1470, align 1, !tbaa !2432
  %1471 = and i32 %1464, 255
  %1472 = call i32 @llvm.ctpop.i32(i32 %1471) #17
  %1473 = trunc i32 %1472 to i8
  %1474 = and i8 %1473, 1
  %1475 = xor i8 %1474, 1
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1475, i8* %1476, align 1, !tbaa !2446
  %1477 = xor i32 %1463, %1461
  %1478 = xor i32 %1477, %1464
  %1479 = lshr i32 %1478, 4
  %1480 = trunc i32 %1479 to i8
  %1481 = and i8 %1480, 1
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1481, i8* %1482, align 1, !tbaa !2447
  %1483 = icmp eq i32 %1464, 0
  %1484 = zext i1 %1483 to i8
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1484, i8* %1485, align 1, !tbaa !2448
  %1486 = lshr i32 %1464, 31
  %1487 = trunc i32 %1486 to i8
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1487, i8* %1488, align 1, !tbaa !2449
  %1489 = lshr i32 %1461, 31
  %1490 = lshr i32 %1463, 31
  %1491 = xor i32 %1486, %1489
  %1492 = xor i32 %1486, %1490
  %1493 = add nuw nsw i32 %1491, %1492
  %1494 = icmp eq i32 %1493, 2
  %1495 = zext i1 %1494 to i8
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1495, i8* %1496, align 1, !tbaa !2450
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 40
  %1499 = load i32, i32* %ECX
  %1500 = zext i32 %1499 to i64
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  %1503 = inttoptr i64 %1498 to i32*
  store i32 %1499, i32* %1503
  %1504 = load i64, i64* %RBP
  %1505 = sub i64 %1504, 16
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 4
  store i64 %1507, i64* %PC
  %1508 = inttoptr i64 %1505 to i64*
  %1509 = load i64, i64* %1508
  store i64 %1509, i64* %RDX, align 8, !tbaa !2428
  %1510 = load i64, i64* %RBP
  %1511 = sub i64 %1510, 28
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 4
  store i64 %1513, i64* %PC
  %1514 = inttoptr i64 %1511 to i32*
  %1515 = load i32, i32* %1514
  %1516 = sext i32 %1515 to i64
  store i64 %1516, i64* %RSI, align 8, !tbaa !2428
  %1517 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1518 = load i64, i64* %RDX
  %1519 = load i64, i64* %RSI
  %1520 = mul i64 %1519, 8
  %1521 = add i64 %1520, %1518
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  store i64 %1523, i64* %PC
  %1524 = inttoptr i64 %1521 to double*
  %1525 = load double, double* %1524
  %1526 = bitcast i8* %1517 to double*
  store double %1525, double* %1526, align 1, !tbaa !2452
  %1527 = getelementptr inbounds i8, i8* %1517, i64 8
  %1528 = bitcast i8* %1527 to double*
  store double 0.000000e+00, double* %1528, align 1, !tbaa !2452
  %1529 = load i64, i64* %RBP
  %1530 = sub i64 %1529, 16
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 4
  store i64 %1532, i64* %PC
  %1533 = inttoptr i64 %1530 to i64*
  %1534 = load i64, i64* %1533
  store i64 %1534, i64* %RDX, align 8, !tbaa !2428
  %1535 = load i64, i64* %RBP
  %1536 = sub i64 %1535, 32
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 4
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1536 to i32*
  %1540 = load i32, i32* %1539
  %1541 = sext i32 %1540 to i64
  store i64 %1541, i64* %RSI, align 8, !tbaa !2428
  %1542 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1543 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1544 = load i64, i64* %RDX
  %1545 = load i64, i64* %RSI
  %1546 = mul i64 %1545, 8
  %1547 = add i64 %1546, %1544
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 5
  store i64 %1549, i64* %PC
  %1550 = bitcast i8* %1543 to double*
  %1551 = load double, double* %1550, align 1
  %1552 = getelementptr inbounds i8, i8* %1543, i64 8
  %1553 = bitcast i8* %1552 to i64*
  %1554 = load i64, i64* %1553, align 1
  %1555 = inttoptr i64 %1547 to double*
  %1556 = load double, double* %1555
  %1557 = fadd double %1551, %1556
  %1558 = bitcast i8* %1542 to double*
  store double %1557, double* %1558, align 1, !tbaa !2452
  %1559 = getelementptr inbounds i8, i8* %1542, i64 8
  %1560 = bitcast i8* %1559 to i64*
  store i64 %1554, i64* %1560, align 1, !tbaa !2452
  %1561 = load i64, i64* %RBP
  %1562 = sub i64 %1561, 56
  %1563 = bitcast %union.vec128_t* %XMM0 to i8*
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 5
  store i64 %1565, i64* %PC
  %1566 = bitcast i8* %1563 to double*
  %1567 = load double, double* %1566, align 1
  %1568 = inttoptr i64 %1562 to double*
  store double %1567, double* %1568
  %1569 = load i64, i64* %RBP
  %1570 = sub i64 %1569, 16
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 4
  store i64 %1572, i64* %PC
  %1573 = inttoptr i64 %1570 to i64*
  %1574 = load i64, i64* %1573
  store i64 %1574, i64* %RDX, align 8, !tbaa !2428
  %1575 = load i64, i64* %RBP
  %1576 = sub i64 %1575, 28
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 3
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1576 to i32*
  %1580 = load i32, i32* %1579
  %1581 = zext i32 %1580 to i64
  store i64 %1581, i64* %RCX, align 8, !tbaa !2428
  %1582 = load i64, i64* %RCX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = trunc i64 %1582 to i32
  %1586 = add i32 1, %1585
  %1587 = zext i32 %1586 to i64
  store i64 %1587, i64* %RCX, align 8, !tbaa !2428
  %1588 = icmp ult i32 %1586, %1585
  %1589 = icmp ult i32 %1586, 1
  %1590 = or i1 %1588, %1589
  %1591 = zext i1 %1590 to i8
  %1592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1591, i8* %1592, align 1, !tbaa !2432
  %1593 = and i32 %1586, 255
  %1594 = call i32 @llvm.ctpop.i32(i32 %1593) #17
  %1595 = trunc i32 %1594 to i8
  %1596 = and i8 %1595, 1
  %1597 = xor i8 %1596, 1
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1597, i8* %1598, align 1, !tbaa !2446
  %1599 = xor i64 1, %1582
  %1600 = trunc i64 %1599 to i32
  %1601 = xor i32 %1600, %1586
  %1602 = lshr i32 %1601, 4
  %1603 = trunc i32 %1602 to i8
  %1604 = and i8 %1603, 1
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1604, i8* %1605, align 1, !tbaa !2447
  %1606 = icmp eq i32 %1586, 0
  %1607 = zext i1 %1606 to i8
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1607, i8* %1608, align 1, !tbaa !2448
  %1609 = lshr i32 %1586, 31
  %1610 = trunc i32 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1610, i8* %1611, align 1, !tbaa !2449
  %1612 = lshr i32 %1585, 31
  %1613 = xor i32 %1609, %1612
  %1614 = add nuw nsw i32 %1613, %1609
  %1615 = icmp eq i32 %1614, 2
  %1616 = zext i1 %1615 to i8
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1616, i8* %1617, align 1, !tbaa !2450
  %1618 = load i32, i32* %ECX
  %1619 = zext i32 %1618 to i64
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 3
  store i64 %1621, i64* %PC
  %1622 = shl i64 %1619, 32
  %1623 = ashr exact i64 %1622, 32
  store i64 %1623, i64* %RSI, align 8, !tbaa !2428
  %1624 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1625 = load i64, i64* %RDX
  %1626 = load i64, i64* %RSI
  %1627 = mul i64 %1626, 8
  %1628 = add i64 %1627, %1625
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 5
  store i64 %1630, i64* %PC
  %1631 = inttoptr i64 %1628 to double*
  %1632 = load double, double* %1631
  %1633 = bitcast i8* %1624 to double*
  store double %1632, double* %1633, align 1, !tbaa !2452
  %1634 = getelementptr inbounds i8, i8* %1624, i64 8
  %1635 = bitcast i8* %1634 to double*
  store double 0.000000e+00, double* %1635, align 1, !tbaa !2452
  %1636 = bitcast %union.vec128_t* %XMM0 to i8*
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 5
  store i64 %1638, i64* %PC
  %1639 = bitcast i8* %1636 to i64*
  %1640 = load i64, i64* %1639, align 1
  store i64 %1640, i64* %RDX, align 1, !tbaa !2428
  %1641 = load i64, i64* %RDX
  %1642 = load i64, i64* %RAX
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 3
  store i64 %1644, i64* %PC
  %1645 = xor i64 %1642, %1641
  store i64 %1645, i64* %RDX, align 8, !tbaa !2428
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1646, align 1, !tbaa !2432
  %1647 = trunc i64 %1645 to i32
  %1648 = and i32 %1647, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #17
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = icmp eq i64 %1645, 0
  %1655 = zext i1 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1655, i8* %1656, align 1, !tbaa !2448
  %1657 = lshr i64 %1645, 63
  %1658 = trunc i64 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1658, i8* %1659, align 1, !tbaa !2449
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1660, align 1, !tbaa !2450
  %1661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1661, align 1, !tbaa !2447
  %1662 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1663 = load i64, i64* %RDX
  %1664 = load i64, i64* %PC
  %1665 = add i64 %1664, 5
  store i64 %1665, i64* %PC
  %1666 = bitcast i8* %1662 to i64*
  store i64 %1663, i64* %1666, align 1, !tbaa !2428
  %1667 = getelementptr inbounds i8, i8* %1662, i64 8
  %1668 = bitcast i8* %1667 to i64*
  store i64 0, i64* %1668, align 1, !tbaa !2428
  %1669 = load i64, i64* %RBP
  %1670 = sub i64 %1669, 16
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 4
  store i64 %1672, i64* %PC
  %1673 = inttoptr i64 %1670 to i64*
  %1674 = load i64, i64* %1673
  store i64 %1674, i64* %RDX, align 8, !tbaa !2428
  %1675 = load i64, i64* %RBP
  %1676 = sub i64 %1675, 32
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 3
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1676 to i32*
  %1680 = load i32, i32* %1679
  %1681 = zext i32 %1680 to i64
  store i64 %1681, i64* %RCX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RCX
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  %1685 = trunc i64 %1682 to i32
  %1686 = add i32 1, %1685
  %1687 = zext i32 %1686 to i64
  store i64 %1687, i64* %RCX, align 8, !tbaa !2428
  %1688 = icmp ult i32 %1686, %1685
  %1689 = icmp ult i32 %1686, 1
  %1690 = or i1 %1688, %1689
  %1691 = zext i1 %1690 to i8
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1691, i8* %1692, align 1, !tbaa !2432
  %1693 = and i32 %1686, 255
  %1694 = call i32 @llvm.ctpop.i32(i32 %1693) #17
  %1695 = trunc i32 %1694 to i8
  %1696 = and i8 %1695, 1
  %1697 = xor i8 %1696, 1
  %1698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1697, i8* %1698, align 1, !tbaa !2446
  %1699 = xor i64 1, %1682
  %1700 = trunc i64 %1699 to i32
  %1701 = xor i32 %1700, %1686
  %1702 = lshr i32 %1701, 4
  %1703 = trunc i32 %1702 to i8
  %1704 = and i8 %1703, 1
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1704, i8* %1705, align 1, !tbaa !2447
  %1706 = icmp eq i32 %1686, 0
  %1707 = zext i1 %1706 to i8
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1707, i8* %1708, align 1, !tbaa !2448
  %1709 = lshr i32 %1686, 31
  %1710 = trunc i32 %1709 to i8
  %1711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1710, i8* %1711, align 1, !tbaa !2449
  %1712 = lshr i32 %1685, 31
  %1713 = xor i32 %1709, %1712
  %1714 = add nuw nsw i32 %1713, %1709
  %1715 = icmp eq i32 %1714, 2
  %1716 = zext i1 %1715 to i8
  %1717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1716, i8* %1717, align 1, !tbaa !2450
  %1718 = load i32, i32* %ECX
  %1719 = zext i32 %1718 to i64
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 3
  store i64 %1721, i64* %PC
  %1722 = shl i64 %1719, 32
  %1723 = ashr exact i64 %1722, 32
  store i64 %1723, i64* %RSI, align 8, !tbaa !2428
  %1724 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1726 = load i64, i64* %RDX
  %1727 = load i64, i64* %RSI
  %1728 = mul i64 %1727, 8
  %1729 = add i64 %1728, %1726
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 5
  store i64 %1731, i64* %PC
  %1732 = bitcast i8* %1725 to double*
  %1733 = load double, double* %1732, align 1
  %1734 = getelementptr inbounds i8, i8* %1725, i64 8
  %1735 = bitcast i8* %1734 to i64*
  %1736 = load i64, i64* %1735, align 1
  %1737 = inttoptr i64 %1729 to double*
  %1738 = load double, double* %1737
  %1739 = fsub double %1733, %1738
  %1740 = bitcast i8* %1724 to double*
  store double %1739, double* %1740, align 1, !tbaa !2452
  %1741 = getelementptr inbounds i8, i8* %1724, i64 8
  %1742 = bitcast i8* %1741 to i64*
  store i64 %1736, i64* %1742, align 1, !tbaa !2452
  %1743 = load i64, i64* %RBP
  %1744 = sub i64 %1743, 64
  %1745 = bitcast %union.vec128_t* %XMM0 to i8*
  %1746 = load i64, i64* %PC
  %1747 = add i64 %1746, 5
  store i64 %1747, i64* %PC
  %1748 = bitcast i8* %1745 to double*
  %1749 = load double, double* %1748, align 1
  %1750 = inttoptr i64 %1744 to double*
  store double %1749, double* %1750
  %1751 = load i64, i64* %RBP
  %1752 = sub i64 %1751, 16
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 4
  store i64 %1754, i64* %PC
  %1755 = inttoptr i64 %1752 to i64*
  %1756 = load i64, i64* %1755
  store i64 %1756, i64* %RDX, align 8, !tbaa !2428
  %1757 = load i64, i64* %RBP
  %1758 = sub i64 %1757, 28
  %1759 = load i64, i64* %PC
  %1760 = add i64 %1759, 4
  store i64 %1760, i64* %PC
  %1761 = inttoptr i64 %1758 to i32*
  %1762 = load i32, i32* %1761
  %1763 = sext i32 %1762 to i64
  store i64 %1763, i64* %RSI, align 8, !tbaa !2428
  %1764 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1765 = load i64, i64* %RDX
  %1766 = load i64, i64* %RSI
  %1767 = mul i64 %1766, 8
  %1768 = add i64 %1767, %1765
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 5
  store i64 %1770, i64* %PC
  %1771 = inttoptr i64 %1768 to double*
  %1772 = load double, double* %1771
  %1773 = bitcast i8* %1764 to double*
  store double %1772, double* %1773, align 1, !tbaa !2452
  %1774 = getelementptr inbounds i8, i8* %1764, i64 8
  %1775 = bitcast i8* %1774 to double*
  store double 0.000000e+00, double* %1775, align 1, !tbaa !2452
  %1776 = load i64, i64* %RBP
  %1777 = sub i64 %1776, 16
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 4
  store i64 %1779, i64* %PC
  %1780 = inttoptr i64 %1777 to i64*
  %1781 = load i64, i64* %1780
  store i64 %1781, i64* %RDX, align 8, !tbaa !2428
  %1782 = load i64, i64* %RBP
  %1783 = sub i64 %1782, 32
  %1784 = load i64, i64* %PC
  %1785 = add i64 %1784, 4
  store i64 %1785, i64* %PC
  %1786 = inttoptr i64 %1783 to i32*
  %1787 = load i32, i32* %1786
  %1788 = sext i32 %1787 to i64
  store i64 %1788, i64* %RSI, align 8, !tbaa !2428
  %1789 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1790 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1791 = load i64, i64* %RDX
  %1792 = load i64, i64* %RSI
  %1793 = mul i64 %1792, 8
  %1794 = add i64 %1793, %1791
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  store i64 %1796, i64* %PC
  %1797 = bitcast i8* %1790 to double*
  %1798 = load double, double* %1797, align 1
  %1799 = getelementptr inbounds i8, i8* %1790, i64 8
  %1800 = bitcast i8* %1799 to i64*
  %1801 = load i64, i64* %1800, align 1
  %1802 = inttoptr i64 %1794 to double*
  %1803 = load double, double* %1802
  %1804 = fsub double %1798, %1803
  %1805 = bitcast i8* %1789 to double*
  store double %1804, double* %1805, align 1, !tbaa !2452
  %1806 = getelementptr inbounds i8, i8* %1789, i64 8
  %1807 = bitcast i8* %1806 to i64*
  store i64 %1801, i64* %1807, align 1, !tbaa !2452
  %1808 = load i64, i64* %RBP
  %1809 = sub i64 %1808, 72
  %1810 = bitcast %union.vec128_t* %XMM0 to i8*
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 5
  store i64 %1812, i64* %PC
  %1813 = bitcast i8* %1810 to double*
  %1814 = load double, double* %1813, align 1
  %1815 = inttoptr i64 %1809 to double*
  store double %1814, double* %1815
  %1816 = load i64, i64* %RBP
  %1817 = sub i64 %1816, 16
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 4
  store i64 %1819, i64* %PC
  %1820 = inttoptr i64 %1817 to i64*
  %1821 = load i64, i64* %1820
  store i64 %1821, i64* %RDX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RBP
  %1823 = sub i64 %1822, 28
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 3
  store i64 %1825, i64* %PC
  %1826 = inttoptr i64 %1823 to i32*
  %1827 = load i32, i32* %1826
  %1828 = zext i32 %1827 to i64
  store i64 %1828, i64* %RCX, align 8, !tbaa !2428
  %1829 = load i64, i64* %RCX
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 3
  store i64 %1831, i64* %PC
  %1832 = trunc i64 %1829 to i32
  %1833 = add i32 1, %1832
  %1834 = zext i32 %1833 to i64
  store i64 %1834, i64* %RCX, align 8, !tbaa !2428
  %1835 = icmp ult i32 %1833, %1832
  %1836 = icmp ult i32 %1833, 1
  %1837 = or i1 %1835, %1836
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1838, i8* %1839, align 1, !tbaa !2432
  %1840 = and i32 %1833, 255
  %1841 = call i32 @llvm.ctpop.i32(i32 %1840) #17
  %1842 = trunc i32 %1841 to i8
  %1843 = and i8 %1842, 1
  %1844 = xor i8 %1843, 1
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1844, i8* %1845, align 1, !tbaa !2446
  %1846 = xor i64 1, %1829
  %1847 = trunc i64 %1846 to i32
  %1848 = xor i32 %1847, %1833
  %1849 = lshr i32 %1848, 4
  %1850 = trunc i32 %1849 to i8
  %1851 = and i8 %1850, 1
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1851, i8* %1852, align 1, !tbaa !2447
  %1853 = icmp eq i32 %1833, 0
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1854, i8* %1855, align 1, !tbaa !2448
  %1856 = lshr i32 %1833, 31
  %1857 = trunc i32 %1856 to i8
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1857, i8* %1858, align 1, !tbaa !2449
  %1859 = lshr i32 %1832, 31
  %1860 = xor i32 %1856, %1859
  %1861 = add nuw nsw i32 %1860, %1856
  %1862 = icmp eq i32 %1861, 2
  %1863 = zext i1 %1862 to i8
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1863, i8* %1864, align 1, !tbaa !2450
  %1865 = load i32, i32* %ECX
  %1866 = zext i32 %1865 to i64
  %1867 = load i64, i64* %PC
  %1868 = add i64 %1867, 3
  store i64 %1868, i64* %PC
  %1869 = shl i64 %1866, 32
  %1870 = ashr exact i64 %1869, 32
  store i64 %1870, i64* %RSI, align 8, !tbaa !2428
  %1871 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1872 = load i64, i64* %RDX
  %1873 = load i64, i64* %RSI
  %1874 = mul i64 %1873, 8
  %1875 = add i64 %1874, %1872
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 5
  store i64 %1877, i64* %PC
  %1878 = inttoptr i64 %1875 to double*
  %1879 = load double, double* %1878
  %1880 = bitcast i8* %1871 to double*
  store double %1879, double* %1880, align 1, !tbaa !2452
  %1881 = getelementptr inbounds i8, i8* %1871, i64 8
  %1882 = bitcast i8* %1881 to double*
  store double 0.000000e+00, double* %1882, align 1, !tbaa !2452
  %1883 = bitcast %union.vec128_t* %XMM0 to i8*
  %1884 = load i64, i64* %PC
  %1885 = add i64 %1884, 5
  store i64 %1885, i64* %PC
  %1886 = bitcast i8* %1883 to i64*
  %1887 = load i64, i64* %1886, align 1
  store i64 %1887, i64* %RDX, align 1, !tbaa !2428
  %1888 = load i64, i64* %RDX
  %1889 = load i64, i64* %RAX
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 3
  store i64 %1891, i64* %PC
  %1892 = xor i64 %1889, %1888
  store i64 %1892, i64* %RDX, align 8, !tbaa !2428
  %1893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1893, align 1, !tbaa !2432
  %1894 = trunc i64 %1892 to i32
  %1895 = and i32 %1894, 255
  %1896 = call i32 @llvm.ctpop.i32(i32 %1895) #17
  %1897 = trunc i32 %1896 to i8
  %1898 = and i8 %1897, 1
  %1899 = xor i8 %1898, 1
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1899, i8* %1900, align 1, !tbaa !2446
  %1901 = icmp eq i64 %1892, 0
  %1902 = zext i1 %1901 to i8
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1902, i8* %1903, align 1, !tbaa !2448
  %1904 = lshr i64 %1892, 63
  %1905 = trunc i64 %1904 to i8
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1905, i8* %1906, align 1, !tbaa !2449
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1907, align 1, !tbaa !2450
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1908, align 1, !tbaa !2447
  %1909 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1910 = load i64, i64* %RDX
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 5
  store i64 %1912, i64* %PC
  %1913 = bitcast i8* %1909 to i64*
  store i64 %1910, i64* %1913, align 1, !tbaa !2428
  %1914 = getelementptr inbounds i8, i8* %1909, i64 8
  %1915 = bitcast i8* %1914 to i64*
  store i64 0, i64* %1915, align 1, !tbaa !2428
  %1916 = load i64, i64* %RBP
  %1917 = sub i64 %1916, 16
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 4
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1917 to i64*
  %1921 = load i64, i64* %1920
  store i64 %1921, i64* %RAX, align 8, !tbaa !2428
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 32
  %1924 = load i64, i64* %PC
  %1925 = add i64 %1924, 3
  store i64 %1925, i64* %PC
  %1926 = inttoptr i64 %1923 to i32*
  %1927 = load i32, i32* %1926
  %1928 = zext i32 %1927 to i64
  store i64 %1928, i64* %RCX, align 8, !tbaa !2428
  %1929 = load i64, i64* %RCX
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 3
  store i64 %1931, i64* %PC
  %1932 = trunc i64 %1929 to i32
  %1933 = add i32 1, %1932
  %1934 = zext i32 %1933 to i64
  store i64 %1934, i64* %RCX, align 8, !tbaa !2428
  %1935 = icmp ult i32 %1933, %1932
  %1936 = icmp ult i32 %1933, 1
  %1937 = or i1 %1935, %1936
  %1938 = zext i1 %1937 to i8
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1938, i8* %1939, align 1, !tbaa !2432
  %1940 = and i32 %1933, 255
  %1941 = call i32 @llvm.ctpop.i32(i32 %1940) #17
  %1942 = trunc i32 %1941 to i8
  %1943 = and i8 %1942, 1
  %1944 = xor i8 %1943, 1
  %1945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1944, i8* %1945, align 1, !tbaa !2446
  %1946 = xor i64 1, %1929
  %1947 = trunc i64 %1946 to i32
  %1948 = xor i32 %1947, %1933
  %1949 = lshr i32 %1948, 4
  %1950 = trunc i32 %1949 to i8
  %1951 = and i8 %1950, 1
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1951, i8* %1952, align 1, !tbaa !2447
  %1953 = icmp eq i32 %1933, 0
  %1954 = zext i1 %1953 to i8
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1954, i8* %1955, align 1, !tbaa !2448
  %1956 = lshr i32 %1933, 31
  %1957 = trunc i32 %1956 to i8
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1957, i8* %1958, align 1, !tbaa !2449
  %1959 = lshr i32 %1932, 31
  %1960 = xor i32 %1956, %1959
  %1961 = add nuw nsw i32 %1960, %1956
  %1962 = icmp eq i32 %1961, 2
  %1963 = zext i1 %1962 to i8
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1963, i8* %1964, align 1, !tbaa !2450
  %1965 = load i32, i32* %ECX
  %1966 = zext i32 %1965 to i64
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 3
  store i64 %1968, i64* %PC
  %1969 = shl i64 %1966, 32
  %1970 = ashr exact i64 %1969, 32
  store i64 %1970, i64* %RDX, align 8, !tbaa !2428
  %1971 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1972 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1973 = load i64, i64* %RAX
  %1974 = load i64, i64* %RDX
  %1975 = mul i64 %1974, 8
  %1976 = add i64 %1975, %1973
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 5
  store i64 %1978, i64* %PC
  %1979 = bitcast i8* %1972 to double*
  %1980 = load double, double* %1979, align 1
  %1981 = getelementptr inbounds i8, i8* %1972, i64 8
  %1982 = bitcast i8* %1981 to i64*
  %1983 = load i64, i64* %1982, align 1
  %1984 = inttoptr i64 %1976 to double*
  %1985 = load double, double* %1984
  %1986 = fadd double %1980, %1985
  %1987 = bitcast i8* %1971 to double*
  store double %1986, double* %1987, align 1, !tbaa !2452
  %1988 = getelementptr inbounds i8, i8* %1971, i64 8
  %1989 = bitcast i8* %1988 to i64*
  store i64 %1983, i64* %1989, align 1, !tbaa !2452
  %1990 = load i64, i64* %RBP
  %1991 = sub i64 %1990, 80
  %1992 = bitcast %union.vec128_t* %XMM0 to i8*
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  store i64 %1994, i64* %PC
  %1995 = bitcast i8* %1992 to double*
  %1996 = load double, double* %1995, align 1
  %1997 = inttoptr i64 %1991 to double*
  store double %1996, double* %1997
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 16
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 4
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i64*
  %2003 = load i64, i64* %2002
  store i64 %2003, i64* %RAX, align 8, !tbaa !2428
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 36
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 4
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2005 to i32*
  %2009 = load i32, i32* %2008
  %2010 = sext i32 %2009 to i64
  store i64 %2010, i64* %RDX, align 8, !tbaa !2428
  %2011 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2012 = load i64, i64* %RAX
  %2013 = load i64, i64* %RDX
  %2014 = mul i64 %2013, 8
  %2015 = add i64 %2014, %2012
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 5
  store i64 %2017, i64* %PC
  %2018 = inttoptr i64 %2015 to double*
  %2019 = load double, double* %2018
  %2020 = bitcast i8* %2011 to double*
  store double %2019, double* %2020, align 1, !tbaa !2452
  %2021 = getelementptr inbounds i8, i8* %2011, i64 8
  %2022 = bitcast i8* %2021 to double*
  store double 0.000000e+00, double* %2022, align 1, !tbaa !2452
  %2023 = load i64, i64* %RBP
  %2024 = sub i64 %2023, 16
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 4
  store i64 %2026, i64* %PC
  %2027 = inttoptr i64 %2024 to i64*
  %2028 = load i64, i64* %2027
  store i64 %2028, i64* %RAX, align 8, !tbaa !2428
  %2029 = load i64, i64* %RBP
  %2030 = sub i64 %2029, 40
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 4
  store i64 %2032, i64* %PC
  %2033 = inttoptr i64 %2030 to i32*
  %2034 = load i32, i32* %2033
  %2035 = sext i32 %2034 to i64
  store i64 %2035, i64* %RDX, align 8, !tbaa !2428
  %2036 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2037 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2038 = load i64, i64* %RAX
  %2039 = load i64, i64* %RDX
  %2040 = mul i64 %2039, 8
  %2041 = add i64 %2040, %2038
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 5
  store i64 %2043, i64* %PC
  %2044 = bitcast i8* %2037 to double*
  %2045 = load double, double* %2044, align 1
  %2046 = getelementptr inbounds i8, i8* %2037, i64 8
  %2047 = bitcast i8* %2046 to i64*
  %2048 = load i64, i64* %2047, align 1
  %2049 = inttoptr i64 %2041 to double*
  %2050 = load double, double* %2049
  %2051 = fadd double %2045, %2050
  %2052 = bitcast i8* %2036 to double*
  store double %2051, double* %2052, align 1, !tbaa !2452
  %2053 = getelementptr inbounds i8, i8* %2036, i64 8
  %2054 = bitcast i8* %2053 to i64*
  store i64 %2048, i64* %2054, align 1, !tbaa !2452
  %2055 = load i64, i64* %RBP
  %2056 = sub i64 %2055, 88
  %2057 = bitcast %union.vec128_t* %XMM0 to i8*
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 5
  store i64 %2059, i64* %PC
  %2060 = bitcast i8* %2057 to double*
  %2061 = load double, double* %2060, align 1
  %2062 = inttoptr i64 %2056 to double*
  store double %2061, double* %2062
  %2063 = load i64, i64* %RBP
  %2064 = sub i64 %2063, 16
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 4
  store i64 %2066, i64* %PC
  %2067 = inttoptr i64 %2064 to i64*
  %2068 = load i64, i64* %2067
  store i64 %2068, i64* %RAX, align 8, !tbaa !2428
  %2069 = load i64, i64* %RBP
  %2070 = sub i64 %2069, 36
  %2071 = load i64, i64* %PC
  %2072 = add i64 %2071, 3
  store i64 %2072, i64* %PC
  %2073 = inttoptr i64 %2070 to i32*
  %2074 = load i32, i32* %2073
  %2075 = zext i32 %2074 to i64
  store i64 %2075, i64* %RCX, align 8, !tbaa !2428
  %2076 = load i64, i64* %RCX
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 3
  store i64 %2078, i64* %PC
  %2079 = trunc i64 %2076 to i32
  %2080 = add i32 1, %2079
  %2081 = zext i32 %2080 to i64
  store i64 %2081, i64* %RCX, align 8, !tbaa !2428
  %2082 = icmp ult i32 %2080, %2079
  %2083 = icmp ult i32 %2080, 1
  %2084 = or i1 %2082, %2083
  %2085 = zext i1 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2085, i8* %2086, align 1, !tbaa !2432
  %2087 = and i32 %2080, 255
  %2088 = call i32 @llvm.ctpop.i32(i32 %2087) #17
  %2089 = trunc i32 %2088 to i8
  %2090 = and i8 %2089, 1
  %2091 = xor i8 %2090, 1
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2091, i8* %2092, align 1, !tbaa !2446
  %2093 = xor i64 1, %2076
  %2094 = trunc i64 %2093 to i32
  %2095 = xor i32 %2094, %2080
  %2096 = lshr i32 %2095, 4
  %2097 = trunc i32 %2096 to i8
  %2098 = and i8 %2097, 1
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2098, i8* %2099, align 1, !tbaa !2447
  %2100 = icmp eq i32 %2080, 0
  %2101 = zext i1 %2100 to i8
  %2102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2101, i8* %2102, align 1, !tbaa !2448
  %2103 = lshr i32 %2080, 31
  %2104 = trunc i32 %2103 to i8
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2104, i8* %2105, align 1, !tbaa !2449
  %2106 = lshr i32 %2079, 31
  %2107 = xor i32 %2103, %2106
  %2108 = add nuw nsw i32 %2107, %2103
  %2109 = icmp eq i32 %2108, 2
  %2110 = zext i1 %2109 to i8
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2110, i8* %2111, align 1, !tbaa !2450
  %2112 = load i32, i32* %ECX
  %2113 = zext i32 %2112 to i64
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 3
  store i64 %2115, i64* %PC
  %2116 = shl i64 %2113, 32
  %2117 = ashr exact i64 %2116, 32
  store i64 %2117, i64* %RDX, align 8, !tbaa !2428
  %2118 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2119 = load i64, i64* %RAX
  %2120 = load i64, i64* %RDX
  %2121 = mul i64 %2120, 8
  %2122 = add i64 %2121, %2119
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 5
  store i64 %2124, i64* %PC
  %2125 = inttoptr i64 %2122 to double*
  %2126 = load double, double* %2125
  %2127 = bitcast i8* %2118 to double*
  store double %2126, double* %2127, align 1, !tbaa !2452
  %2128 = getelementptr inbounds i8, i8* %2118, i64 8
  %2129 = bitcast i8* %2128 to double*
  store double 0.000000e+00, double* %2129, align 1, !tbaa !2452
  %2130 = load i64, i64* %RBP
  %2131 = sub i64 %2130, 16
  %2132 = load i64, i64* %PC
  %2133 = add i64 %2132, 4
  store i64 %2133, i64* %PC
  %2134 = inttoptr i64 %2131 to i64*
  %2135 = load i64, i64* %2134
  store i64 %2135, i64* %RAX, align 8, !tbaa !2428
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 40
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 3
  store i64 %2139, i64* %PC
  %2140 = inttoptr i64 %2137 to i32*
  %2141 = load i32, i32* %2140
  %2142 = zext i32 %2141 to i64
  store i64 %2142, i64* %RCX, align 8, !tbaa !2428
  %2143 = load i64, i64* %RCX
  %2144 = load i64, i64* %PC
  %2145 = add i64 %2144, 3
  store i64 %2145, i64* %PC
  %2146 = trunc i64 %2143 to i32
  %2147 = add i32 1, %2146
  %2148 = zext i32 %2147 to i64
  store i64 %2148, i64* %RCX, align 8, !tbaa !2428
  %2149 = icmp ult i32 %2147, %2146
  %2150 = icmp ult i32 %2147, 1
  %2151 = or i1 %2149, %2150
  %2152 = zext i1 %2151 to i8
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2152, i8* %2153, align 1, !tbaa !2432
  %2154 = and i32 %2147, 255
  %2155 = call i32 @llvm.ctpop.i32(i32 %2154) #17
  %2156 = trunc i32 %2155 to i8
  %2157 = and i8 %2156, 1
  %2158 = xor i8 %2157, 1
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2158, i8* %2159, align 1, !tbaa !2446
  %2160 = xor i64 1, %2143
  %2161 = trunc i64 %2160 to i32
  %2162 = xor i32 %2161, %2147
  %2163 = lshr i32 %2162, 4
  %2164 = trunc i32 %2163 to i8
  %2165 = and i8 %2164, 1
  %2166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2165, i8* %2166, align 1, !tbaa !2447
  %2167 = icmp eq i32 %2147, 0
  %2168 = zext i1 %2167 to i8
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2168, i8* %2169, align 1, !tbaa !2448
  %2170 = lshr i32 %2147, 31
  %2171 = trunc i32 %2170 to i8
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2171, i8* %2172, align 1, !tbaa !2449
  %2173 = lshr i32 %2146, 31
  %2174 = xor i32 %2170, %2173
  %2175 = add nuw nsw i32 %2174, %2170
  %2176 = icmp eq i32 %2175, 2
  %2177 = zext i1 %2176 to i8
  %2178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2177, i8* %2178, align 1, !tbaa !2450
  %2179 = load i32, i32* %ECX
  %2180 = zext i32 %2179 to i64
  %2181 = load i64, i64* %PC
  %2182 = add i64 %2181, 3
  store i64 %2182, i64* %PC
  %2183 = shl i64 %2180, 32
  %2184 = ashr exact i64 %2183, 32
  store i64 %2184, i64* %RDX, align 8, !tbaa !2428
  %2185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2187 = load i64, i64* %RAX
  %2188 = load i64, i64* %RDX
  %2189 = mul i64 %2188, 8
  %2190 = add i64 %2189, %2187
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 5
  store i64 %2192, i64* %PC
  %2193 = bitcast i8* %2186 to double*
  %2194 = load double, double* %2193, align 1
  %2195 = getelementptr inbounds i8, i8* %2186, i64 8
  %2196 = bitcast i8* %2195 to i64*
  %2197 = load i64, i64* %2196, align 1
  %2198 = inttoptr i64 %2190 to double*
  %2199 = load double, double* %2198
  %2200 = fadd double %2194, %2199
  %2201 = bitcast i8* %2185 to double*
  store double %2200, double* %2201, align 1, !tbaa !2452
  %2202 = getelementptr inbounds i8, i8* %2185, i64 8
  %2203 = bitcast i8* %2202 to i64*
  store i64 %2197, i64* %2203, align 1, !tbaa !2452
  %2204 = load i64, i64* %RBP
  %2205 = sub i64 %2204, 96
  %2206 = bitcast %union.vec128_t* %XMM0 to i8*
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 5
  store i64 %2208, i64* %PC
  %2209 = bitcast i8* %2206 to double*
  %2210 = load double, double* %2209, align 1
  %2211 = inttoptr i64 %2205 to double*
  store double %2210, double* %2211
  %2212 = load i64, i64* %RBP
  %2213 = sub i64 %2212, 16
  %2214 = load i64, i64* %PC
  %2215 = add i64 %2214, 4
  store i64 %2215, i64* %PC
  %2216 = inttoptr i64 %2213 to i64*
  %2217 = load i64, i64* %2216
  store i64 %2217, i64* %RAX, align 8, !tbaa !2428
  %2218 = load i64, i64* %RBP
  %2219 = sub i64 %2218, 36
  %2220 = load i64, i64* %PC
  %2221 = add i64 %2220, 4
  store i64 %2221, i64* %PC
  %2222 = inttoptr i64 %2219 to i32*
  %2223 = load i32, i32* %2222
  %2224 = sext i32 %2223 to i64
  store i64 %2224, i64* %RDX, align 8, !tbaa !2428
  %2225 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2226 = load i64, i64* %RAX
  %2227 = load i64, i64* %RDX
  %2228 = mul i64 %2227, 8
  %2229 = add i64 %2228, %2226
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 5
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2229 to double*
  %2233 = load double, double* %2232
  %2234 = bitcast i8* %2225 to double*
  store double %2233, double* %2234, align 1, !tbaa !2452
  %2235 = getelementptr inbounds i8, i8* %2225, i64 8
  %2236 = bitcast i8* %2235 to double*
  store double 0.000000e+00, double* %2236, align 1, !tbaa !2452
  %2237 = load i64, i64* %RBP
  %2238 = sub i64 %2237, 16
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 4
  store i64 %2240, i64* %PC
  %2241 = inttoptr i64 %2238 to i64*
  %2242 = load i64, i64* %2241
  store i64 %2242, i64* %RAX, align 8, !tbaa !2428
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 40
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 4
  store i64 %2246, i64* %PC
  %2247 = inttoptr i64 %2244 to i32*
  %2248 = load i32, i32* %2247
  %2249 = sext i32 %2248 to i64
  store i64 %2249, i64* %RDX, align 8, !tbaa !2428
  %2250 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2252 = load i64, i64* %RAX
  %2253 = load i64, i64* %RDX
  %2254 = mul i64 %2253, 8
  %2255 = add i64 %2254, %2252
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 5
  store i64 %2257, i64* %PC
  %2258 = bitcast i8* %2251 to double*
  %2259 = load double, double* %2258, align 1
  %2260 = getelementptr inbounds i8, i8* %2251, i64 8
  %2261 = bitcast i8* %2260 to i64*
  %2262 = load i64, i64* %2261, align 1
  %2263 = inttoptr i64 %2255 to double*
  %2264 = load double, double* %2263
  %2265 = fsub double %2259, %2264
  %2266 = bitcast i8* %2250 to double*
  store double %2265, double* %2266, align 1, !tbaa !2452
  %2267 = getelementptr inbounds i8, i8* %2250, i64 8
  %2268 = bitcast i8* %2267 to i64*
  store i64 %2262, i64* %2268, align 1, !tbaa !2452
  %2269 = load i64, i64* %RBP
  %2270 = sub i64 %2269, 104
  %2271 = bitcast %union.vec128_t* %XMM0 to i8*
  %2272 = load i64, i64* %PC
  %2273 = add i64 %2272, 5
  store i64 %2273, i64* %PC
  %2274 = bitcast i8* %2271 to double*
  %2275 = load double, double* %2274, align 1
  %2276 = inttoptr i64 %2270 to double*
  store double %2275, double* %2276
  %2277 = load i64, i64* %RBP
  %2278 = sub i64 %2277, 16
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 4
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2278 to i64*
  %2282 = load i64, i64* %2281
  store i64 %2282, i64* %RAX, align 8, !tbaa !2428
  %2283 = load i64, i64* %RBP
  %2284 = sub i64 %2283, 36
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 3
  store i64 %2286, i64* %PC
  %2287 = inttoptr i64 %2284 to i32*
  %2288 = load i32, i32* %2287
  %2289 = zext i32 %2288 to i64
  store i64 %2289, i64* %RCX, align 8, !tbaa !2428
  %2290 = load i64, i64* %RCX
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 3
  store i64 %2292, i64* %PC
  %2293 = trunc i64 %2290 to i32
  %2294 = add i32 1, %2293
  %2295 = zext i32 %2294 to i64
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2296 = icmp ult i32 %2294, %2293
  %2297 = icmp ult i32 %2294, 1
  %2298 = or i1 %2296, %2297
  %2299 = zext i1 %2298 to i8
  %2300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2299, i8* %2300, align 1, !tbaa !2432
  %2301 = and i32 %2294, 255
  %2302 = call i32 @llvm.ctpop.i32(i32 %2301) #17
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = xor i8 %2304, 1
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2305, i8* %2306, align 1, !tbaa !2446
  %2307 = xor i64 1, %2290
  %2308 = trunc i64 %2307 to i32
  %2309 = xor i32 %2308, %2294
  %2310 = lshr i32 %2309, 4
  %2311 = trunc i32 %2310 to i8
  %2312 = and i8 %2311, 1
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2312, i8* %2313, align 1, !tbaa !2447
  %2314 = icmp eq i32 %2294, 0
  %2315 = zext i1 %2314 to i8
  %2316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2315, i8* %2316, align 1, !tbaa !2448
  %2317 = lshr i32 %2294, 31
  %2318 = trunc i32 %2317 to i8
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2318, i8* %2319, align 1, !tbaa !2449
  %2320 = lshr i32 %2293, 31
  %2321 = xor i32 %2317, %2320
  %2322 = add nuw nsw i32 %2321, %2317
  %2323 = icmp eq i32 %2322, 2
  %2324 = zext i1 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2324, i8* %2325, align 1, !tbaa !2450
  %2326 = load i32, i32* %ECX
  %2327 = zext i32 %2326 to i64
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 3
  store i64 %2329, i64* %PC
  %2330 = shl i64 %2327, 32
  %2331 = ashr exact i64 %2330, 32
  store i64 %2331, i64* %RDX, align 8, !tbaa !2428
  %2332 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2333 = load i64, i64* %RAX
  %2334 = load i64, i64* %RDX
  %2335 = mul i64 %2334, 8
  %2336 = add i64 %2335, %2333
  %2337 = load i64, i64* %PC
  %2338 = add i64 %2337, 5
  store i64 %2338, i64* %PC
  %2339 = inttoptr i64 %2336 to double*
  %2340 = load double, double* %2339
  %2341 = bitcast i8* %2332 to double*
  store double %2340, double* %2341, align 1, !tbaa !2452
  %2342 = getelementptr inbounds i8, i8* %2332, i64 8
  %2343 = bitcast i8* %2342 to double*
  store double 0.000000e+00, double* %2343, align 1, !tbaa !2452
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 16
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 4
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i64*
  %2349 = load i64, i64* %2348
  store i64 %2349, i64* %RAX, align 8, !tbaa !2428
  %2350 = load i64, i64* %RBP
  %2351 = sub i64 %2350, 40
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 3
  store i64 %2353, i64* %PC
  %2354 = inttoptr i64 %2351 to i32*
  %2355 = load i32, i32* %2354
  %2356 = zext i32 %2355 to i64
  store i64 %2356, i64* %RCX, align 8, !tbaa !2428
  %2357 = load i64, i64* %RCX
  %2358 = load i64, i64* %PC
  %2359 = add i64 %2358, 3
  store i64 %2359, i64* %PC
  %2360 = trunc i64 %2357 to i32
  %2361 = add i32 1, %2360
  %2362 = zext i32 %2361 to i64
  store i64 %2362, i64* %RCX, align 8, !tbaa !2428
  %2363 = icmp ult i32 %2361, %2360
  %2364 = icmp ult i32 %2361, 1
  %2365 = or i1 %2363, %2364
  %2366 = zext i1 %2365 to i8
  %2367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2366, i8* %2367, align 1, !tbaa !2432
  %2368 = and i32 %2361, 255
  %2369 = call i32 @llvm.ctpop.i32(i32 %2368) #17
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  %2372 = xor i8 %2371, 1
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2372, i8* %2373, align 1, !tbaa !2446
  %2374 = xor i64 1, %2357
  %2375 = trunc i64 %2374 to i32
  %2376 = xor i32 %2375, %2361
  %2377 = lshr i32 %2376, 4
  %2378 = trunc i32 %2377 to i8
  %2379 = and i8 %2378, 1
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2379, i8* %2380, align 1, !tbaa !2447
  %2381 = icmp eq i32 %2361, 0
  %2382 = zext i1 %2381 to i8
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2382, i8* %2383, align 1, !tbaa !2448
  %2384 = lshr i32 %2361, 31
  %2385 = trunc i32 %2384 to i8
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2385, i8* %2386, align 1, !tbaa !2449
  %2387 = lshr i32 %2360, 31
  %2388 = xor i32 %2384, %2387
  %2389 = add nuw nsw i32 %2388, %2384
  %2390 = icmp eq i32 %2389, 2
  %2391 = zext i1 %2390 to i8
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2391, i8* %2392, align 1, !tbaa !2450
  %2393 = load i32, i32* %ECX
  %2394 = zext i32 %2393 to i64
  %2395 = load i64, i64* %PC
  %2396 = add i64 %2395, 3
  store i64 %2396, i64* %PC
  %2397 = shl i64 %2394, 32
  %2398 = ashr exact i64 %2397, 32
  store i64 %2398, i64* %RDX, align 8, !tbaa !2428
  %2399 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2400 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2401 = load i64, i64* %RAX
  %2402 = load i64, i64* %RDX
  %2403 = mul i64 %2402, 8
  %2404 = add i64 %2403, %2401
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 5
  store i64 %2406, i64* %PC
  %2407 = bitcast i8* %2400 to double*
  %2408 = load double, double* %2407, align 1
  %2409 = getelementptr inbounds i8, i8* %2400, i64 8
  %2410 = bitcast i8* %2409 to i64*
  %2411 = load i64, i64* %2410, align 1
  %2412 = inttoptr i64 %2404 to double*
  %2413 = load double, double* %2412
  %2414 = fsub double %2408, %2413
  %2415 = bitcast i8* %2399 to double*
  store double %2414, double* %2415, align 1, !tbaa !2452
  %2416 = getelementptr inbounds i8, i8* %2399, i64 8
  %2417 = bitcast i8* %2416 to i64*
  store i64 %2411, i64* %2417, align 1, !tbaa !2452
  %2418 = load i64, i64* %RBP
  %2419 = sub i64 %2418, 112
  %2420 = bitcast %union.vec128_t* %XMM0 to i8*
  %2421 = load i64, i64* %PC
  %2422 = add i64 %2421, 5
  store i64 %2422, i64* %PC
  %2423 = bitcast i8* %2420 to double*
  %2424 = load double, double* %2423, align 1
  %2425 = inttoptr i64 %2419 to double*
  store double %2424, double* %2425
  %2426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2427 = load i64, i64* %RBP
  %2428 = sub i64 %2427, 56
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 5
  store i64 %2430, i64* %PC
  %2431 = inttoptr i64 %2428 to double*
  %2432 = load double, double* %2431
  %2433 = bitcast i8* %2426 to double*
  store double %2432, double* %2433, align 1, !tbaa !2452
  %2434 = getelementptr inbounds i8, i8* %2426, i64 8
  %2435 = bitcast i8* %2434 to double*
  store double 0.000000e+00, double* %2435, align 1, !tbaa !2452
  %2436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2438 = load i64, i64* %RBP
  %2439 = sub i64 %2438, 88
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 5
  store i64 %2441, i64* %PC
  %2442 = bitcast i8* %2437 to double*
  %2443 = load double, double* %2442, align 1
  %2444 = getelementptr inbounds i8, i8* %2437, i64 8
  %2445 = bitcast i8* %2444 to i64*
  %2446 = load i64, i64* %2445, align 1
  %2447 = inttoptr i64 %2439 to double*
  %2448 = load double, double* %2447
  %2449 = fadd double %2443, %2448
  %2450 = bitcast i8* %2436 to double*
  store double %2449, double* %2450, align 1, !tbaa !2452
  %2451 = getelementptr inbounds i8, i8* %2436, i64 8
  %2452 = bitcast i8* %2451 to i64*
  store i64 %2446, i64* %2452, align 1, !tbaa !2452
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 16
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 4
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i64*
  %2458 = load i64, i64* %2457
  store i64 %2458, i64* %RAX, align 8, !tbaa !2428
  %2459 = load i64, i64* %RBP
  %2460 = sub i64 %2459, 28
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 4
  store i64 %2462, i64* %PC
  %2463 = inttoptr i64 %2460 to i32*
  %2464 = load i32, i32* %2463
  %2465 = sext i32 %2464 to i64
  store i64 %2465, i64* %RDX, align 8, !tbaa !2428
  %2466 = load i64, i64* %RAX
  %2467 = load i64, i64* %RDX
  %2468 = mul i64 %2467, 8
  %2469 = add i64 %2468, %2466
  %2470 = bitcast %union.vec128_t* %XMM0 to i8*
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 5
  store i64 %2472, i64* %PC
  %2473 = bitcast i8* %2470 to double*
  %2474 = load double, double* %2473, align 1
  %2475 = inttoptr i64 %2469 to double*
  store double %2474, double* %2475
  %2476 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2477 = load i64, i64* %RBP
  %2478 = sub i64 %2477, 64
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 5
  store i64 %2480, i64* %PC
  %2481 = inttoptr i64 %2478 to double*
  %2482 = load double, double* %2481
  %2483 = bitcast i8* %2476 to double*
  store double %2482, double* %2483, align 1, !tbaa !2452
  %2484 = getelementptr inbounds i8, i8* %2476, i64 8
  %2485 = bitcast i8* %2484 to double*
  store double 0.000000e+00, double* %2485, align 1, !tbaa !2452
  %2486 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2487 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2488 = load i64, i64* %RBP
  %2489 = sub i64 %2488, 96
  %2490 = load i64, i64* %PC
  %2491 = add i64 %2490, 5
  store i64 %2491, i64* %PC
  %2492 = bitcast i8* %2487 to double*
  %2493 = load double, double* %2492, align 1
  %2494 = getelementptr inbounds i8, i8* %2487, i64 8
  %2495 = bitcast i8* %2494 to i64*
  %2496 = load i64, i64* %2495, align 1
  %2497 = inttoptr i64 %2489 to double*
  %2498 = load double, double* %2497
  %2499 = fsub double %2493, %2498
  %2500 = bitcast i8* %2486 to double*
  store double %2499, double* %2500, align 1, !tbaa !2452
  %2501 = getelementptr inbounds i8, i8* %2486, i64 8
  %2502 = bitcast i8* %2501 to i64*
  store i64 %2496, i64* %2502, align 1, !tbaa !2452
  %2503 = load i64, i64* %RBP
  %2504 = sub i64 %2503, 16
  %2505 = load i64, i64* %PC
  %2506 = add i64 %2505, 4
  store i64 %2506, i64* %PC
  %2507 = inttoptr i64 %2504 to i64*
  %2508 = load i64, i64* %2507
  store i64 %2508, i64* %RAX, align 8, !tbaa !2428
  %2509 = load i64, i64* %RBP
  %2510 = sub i64 %2509, 28
  %2511 = load i64, i64* %PC
  %2512 = add i64 %2511, 3
  store i64 %2512, i64* %PC
  %2513 = inttoptr i64 %2510 to i32*
  %2514 = load i32, i32* %2513
  %2515 = zext i32 %2514 to i64
  store i64 %2515, i64* %RCX, align 8, !tbaa !2428
  %2516 = load i64, i64* %RCX
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 3
  store i64 %2518, i64* %PC
  %2519 = trunc i64 %2516 to i32
  %2520 = add i32 1, %2519
  %2521 = zext i32 %2520 to i64
  store i64 %2521, i64* %RCX, align 8, !tbaa !2428
  %2522 = icmp ult i32 %2520, %2519
  %2523 = icmp ult i32 %2520, 1
  %2524 = or i1 %2522, %2523
  %2525 = zext i1 %2524 to i8
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2525, i8* %2526, align 1, !tbaa !2432
  %2527 = and i32 %2520, 255
  %2528 = call i32 @llvm.ctpop.i32(i32 %2527) #17
  %2529 = trunc i32 %2528 to i8
  %2530 = and i8 %2529, 1
  %2531 = xor i8 %2530, 1
  %2532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2531, i8* %2532, align 1, !tbaa !2446
  %2533 = xor i64 1, %2516
  %2534 = trunc i64 %2533 to i32
  %2535 = xor i32 %2534, %2520
  %2536 = lshr i32 %2535, 4
  %2537 = trunc i32 %2536 to i8
  %2538 = and i8 %2537, 1
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2538, i8* %2539, align 1, !tbaa !2447
  %2540 = icmp eq i32 %2520, 0
  %2541 = zext i1 %2540 to i8
  %2542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2541, i8* %2542, align 1, !tbaa !2448
  %2543 = lshr i32 %2520, 31
  %2544 = trunc i32 %2543 to i8
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2544, i8* %2545, align 1, !tbaa !2449
  %2546 = lshr i32 %2519, 31
  %2547 = xor i32 %2543, %2546
  %2548 = add nuw nsw i32 %2547, %2543
  %2549 = icmp eq i32 %2548, 2
  %2550 = zext i1 %2549 to i8
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2550, i8* %2551, align 1, !tbaa !2450
  %2552 = load i32, i32* %ECX
  %2553 = zext i32 %2552 to i64
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 3
  store i64 %2555, i64* %PC
  %2556 = shl i64 %2553, 32
  %2557 = ashr exact i64 %2556, 32
  store i64 %2557, i64* %RDX, align 8, !tbaa !2428
  %2558 = load i64, i64* %RAX
  %2559 = load i64, i64* %RDX
  %2560 = mul i64 %2559, 8
  %2561 = add i64 %2560, %2558
  %2562 = bitcast %union.vec128_t* %XMM0 to i8*
  %2563 = load i64, i64* %PC
  %2564 = add i64 %2563, 5
  store i64 %2564, i64* %PC
  %2565 = bitcast i8* %2562 to double*
  %2566 = load double, double* %2565, align 1
  %2567 = inttoptr i64 %2561 to double*
  store double %2566, double* %2567
  %2568 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2569 = load i64, i64* %RBP
  %2570 = sub i64 %2569, 56
  %2571 = load i64, i64* %PC
  %2572 = add i64 %2571, 5
  store i64 %2572, i64* %PC
  %2573 = inttoptr i64 %2570 to double*
  %2574 = load double, double* %2573
  %2575 = bitcast i8* %2568 to double*
  store double %2574, double* %2575, align 1, !tbaa !2452
  %2576 = getelementptr inbounds i8, i8* %2568, i64 8
  %2577 = bitcast i8* %2576 to double*
  store double 0.000000e+00, double* %2577, align 1, !tbaa !2452
  %2578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2579 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2580 = load i64, i64* %RBP
  %2581 = sub i64 %2580, 88
  %2582 = load i64, i64* %PC
  %2583 = add i64 %2582, 5
  store i64 %2583, i64* %PC
  %2584 = bitcast i8* %2579 to double*
  %2585 = load double, double* %2584, align 1
  %2586 = getelementptr inbounds i8, i8* %2579, i64 8
  %2587 = bitcast i8* %2586 to i64*
  %2588 = load i64, i64* %2587, align 1
  %2589 = inttoptr i64 %2581 to double*
  %2590 = load double, double* %2589
  %2591 = fsub double %2585, %2590
  %2592 = bitcast i8* %2578 to double*
  store double %2591, double* %2592, align 1, !tbaa !2452
  %2593 = getelementptr inbounds i8, i8* %2578, i64 8
  %2594 = bitcast i8* %2593 to i64*
  store i64 %2588, i64* %2594, align 1, !tbaa !2452
  %2595 = load i64, i64* %RBP
  %2596 = sub i64 %2595, 16
  %2597 = load i64, i64* %PC
  %2598 = add i64 %2597, 4
  store i64 %2598, i64* %PC
  %2599 = inttoptr i64 %2596 to i64*
  %2600 = load i64, i64* %2599
  store i64 %2600, i64* %RAX, align 8, !tbaa !2428
  %2601 = load i64, i64* %RBP
  %2602 = sub i64 %2601, 36
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 4
  store i64 %2604, i64* %PC
  %2605 = inttoptr i64 %2602 to i32*
  %2606 = load i32, i32* %2605
  %2607 = sext i32 %2606 to i64
  store i64 %2607, i64* %RDX, align 8, !tbaa !2428
  %2608 = load i64, i64* %RAX
  %2609 = load i64, i64* %RDX
  %2610 = mul i64 %2609, 8
  %2611 = add i64 %2610, %2608
  %2612 = bitcast %union.vec128_t* %XMM0 to i8*
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 5
  store i64 %2614, i64* %PC
  %2615 = bitcast i8* %2612 to double*
  %2616 = load double, double* %2615, align 1
  %2617 = inttoptr i64 %2611 to double*
  store double %2616, double* %2617
  %2618 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 64
  %2621 = load i64, i64* %PC
  %2622 = add i64 %2621, 5
  store i64 %2622, i64* %PC
  %2623 = inttoptr i64 %2620 to double*
  %2624 = load double, double* %2623
  %2625 = bitcast i8* %2618 to double*
  store double %2624, double* %2625, align 1, !tbaa !2452
  %2626 = getelementptr inbounds i8, i8* %2618, i64 8
  %2627 = bitcast i8* %2626 to double*
  store double 0.000000e+00, double* %2627, align 1, !tbaa !2452
  %2628 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2629 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2630 = load i64, i64* %RBP
  %2631 = sub i64 %2630, 96
  %2632 = load i64, i64* %PC
  %2633 = add i64 %2632, 5
  store i64 %2633, i64* %PC
  %2634 = bitcast i8* %2629 to double*
  %2635 = load double, double* %2634, align 1
  %2636 = getelementptr inbounds i8, i8* %2629, i64 8
  %2637 = bitcast i8* %2636 to i64*
  %2638 = load i64, i64* %2637, align 1
  %2639 = inttoptr i64 %2631 to double*
  %2640 = load double, double* %2639
  %2641 = fadd double %2635, %2640
  %2642 = bitcast i8* %2628 to double*
  store double %2641, double* %2642, align 1, !tbaa !2452
  %2643 = getelementptr inbounds i8, i8* %2628, i64 8
  %2644 = bitcast i8* %2643 to i64*
  store i64 %2638, i64* %2644, align 1, !tbaa !2452
  %2645 = load i64, i64* %RBP
  %2646 = sub i64 %2645, 16
  %2647 = load i64, i64* %PC
  %2648 = add i64 %2647, 4
  store i64 %2648, i64* %PC
  %2649 = inttoptr i64 %2646 to i64*
  %2650 = load i64, i64* %2649
  store i64 %2650, i64* %RAX, align 8, !tbaa !2428
  %2651 = load i64, i64* %RBP
  %2652 = sub i64 %2651, 36
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 3
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to i32*
  %2656 = load i32, i32* %2655
  %2657 = zext i32 %2656 to i64
  store i64 %2657, i64* %RCX, align 8, !tbaa !2428
  %2658 = load i64, i64* %RCX
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 3
  store i64 %2660, i64* %PC
  %2661 = trunc i64 %2658 to i32
  %2662 = add i32 1, %2661
  %2663 = zext i32 %2662 to i64
  store i64 %2663, i64* %RCX, align 8, !tbaa !2428
  %2664 = icmp ult i32 %2662, %2661
  %2665 = icmp ult i32 %2662, 1
  %2666 = or i1 %2664, %2665
  %2667 = zext i1 %2666 to i8
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2667, i8* %2668, align 1, !tbaa !2432
  %2669 = and i32 %2662, 255
  %2670 = call i32 @llvm.ctpop.i32(i32 %2669) #17
  %2671 = trunc i32 %2670 to i8
  %2672 = and i8 %2671, 1
  %2673 = xor i8 %2672, 1
  %2674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2673, i8* %2674, align 1, !tbaa !2446
  %2675 = xor i64 1, %2658
  %2676 = trunc i64 %2675 to i32
  %2677 = xor i32 %2676, %2662
  %2678 = lshr i32 %2677, 4
  %2679 = trunc i32 %2678 to i8
  %2680 = and i8 %2679, 1
  %2681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2680, i8* %2681, align 1, !tbaa !2447
  %2682 = icmp eq i32 %2662, 0
  %2683 = zext i1 %2682 to i8
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2683, i8* %2684, align 1, !tbaa !2448
  %2685 = lshr i32 %2662, 31
  %2686 = trunc i32 %2685 to i8
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2686, i8* %2687, align 1, !tbaa !2449
  %2688 = lshr i32 %2661, 31
  %2689 = xor i32 %2685, %2688
  %2690 = add nuw nsw i32 %2689, %2685
  %2691 = icmp eq i32 %2690, 2
  %2692 = zext i1 %2691 to i8
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2692, i8* %2693, align 1, !tbaa !2450
  %2694 = load i32, i32* %ECX
  %2695 = zext i32 %2694 to i64
  %2696 = load i64, i64* %PC
  %2697 = add i64 %2696, 3
  store i64 %2697, i64* %PC
  %2698 = shl i64 %2695, 32
  %2699 = ashr exact i64 %2698, 32
  store i64 %2699, i64* %RDX, align 8, !tbaa !2428
  %2700 = load i64, i64* %RAX
  %2701 = load i64, i64* %RDX
  %2702 = mul i64 %2701, 8
  %2703 = add i64 %2702, %2700
  %2704 = bitcast %union.vec128_t* %XMM0 to i8*
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 5
  store i64 %2706, i64* %PC
  %2707 = bitcast i8* %2704 to double*
  %2708 = load double, double* %2707, align 1
  %2709 = inttoptr i64 %2703 to double*
  store double %2708, double* %2709
  %2710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2711 = load i64, i64* %RBP
  %2712 = sub i64 %2711, 72
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 5
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2712 to double*
  %2716 = load double, double* %2715
  %2717 = bitcast i8* %2710 to double*
  store double %2716, double* %2717, align 1, !tbaa !2452
  %2718 = getelementptr inbounds i8, i8* %2710, i64 8
  %2719 = bitcast i8* %2718 to double*
  store double 0.000000e+00, double* %2719, align 1, !tbaa !2452
  %2720 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2721 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2722 = load i64, i64* %RBP
  %2723 = sub i64 %2722, 112
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 5
  store i64 %2725, i64* %PC
  %2726 = bitcast i8* %2721 to double*
  %2727 = load double, double* %2726, align 1
  %2728 = getelementptr inbounds i8, i8* %2721, i64 8
  %2729 = bitcast i8* %2728 to i64*
  %2730 = load i64, i64* %2729, align 1
  %2731 = inttoptr i64 %2723 to double*
  %2732 = load double, double* %2731
  %2733 = fsub double %2727, %2732
  %2734 = bitcast i8* %2720 to double*
  store double %2733, double* %2734, align 1, !tbaa !2452
  %2735 = getelementptr inbounds i8, i8* %2720, i64 8
  %2736 = bitcast i8* %2735 to i64*
  store i64 %2730, i64* %2736, align 1, !tbaa !2452
  %2737 = load i64, i64* %RBP
  %2738 = sub i64 %2737, 16
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 4
  store i64 %2740, i64* %PC
  %2741 = inttoptr i64 %2738 to i64*
  %2742 = load i64, i64* %2741
  store i64 %2742, i64* %RAX, align 8, !tbaa !2428
  %2743 = load i64, i64* %RBP
  %2744 = sub i64 %2743, 32
  %2745 = load i64, i64* %PC
  %2746 = add i64 %2745, 4
  store i64 %2746, i64* %PC
  %2747 = inttoptr i64 %2744 to i32*
  %2748 = load i32, i32* %2747
  %2749 = sext i32 %2748 to i64
  store i64 %2749, i64* %RDX, align 8, !tbaa !2428
  %2750 = load i64, i64* %RAX
  %2751 = load i64, i64* %RDX
  %2752 = mul i64 %2751, 8
  %2753 = add i64 %2752, %2750
  %2754 = bitcast %union.vec128_t* %XMM0 to i8*
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 5
  store i64 %2756, i64* %PC
  %2757 = bitcast i8* %2754 to double*
  %2758 = load double, double* %2757, align 1
  %2759 = inttoptr i64 %2753 to double*
  store double %2758, double* %2759
  %2760 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2761 = load i64, i64* %RBP
  %2762 = sub i64 %2761, 80
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 5
  store i64 %2764, i64* %PC
  %2765 = inttoptr i64 %2762 to double*
  %2766 = load double, double* %2765
  %2767 = bitcast i8* %2760 to double*
  store double %2766, double* %2767, align 1, !tbaa !2452
  %2768 = getelementptr inbounds i8, i8* %2760, i64 8
  %2769 = bitcast i8* %2768 to double*
  store double 0.000000e+00, double* %2769, align 1, !tbaa !2452
  %2770 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2771 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2772 = load i64, i64* %RBP
  %2773 = sub i64 %2772, 104
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 5
  store i64 %2775, i64* %PC
  %2776 = bitcast i8* %2771 to double*
  %2777 = load double, double* %2776, align 1
  %2778 = getelementptr inbounds i8, i8* %2771, i64 8
  %2779 = bitcast i8* %2778 to i64*
  %2780 = load i64, i64* %2779, align 1
  %2781 = inttoptr i64 %2773 to double*
  %2782 = load double, double* %2781
  %2783 = fsub double %2777, %2782
  %2784 = bitcast i8* %2770 to double*
  store double %2783, double* %2784, align 1, !tbaa !2452
  %2785 = getelementptr inbounds i8, i8* %2770, i64 8
  %2786 = bitcast i8* %2785 to i64*
  store i64 %2780, i64* %2786, align 1, !tbaa !2452
  %2787 = load i64, i64* %RBP
  %2788 = sub i64 %2787, 16
  %2789 = load i64, i64* %PC
  %2790 = add i64 %2789, 4
  store i64 %2790, i64* %PC
  %2791 = inttoptr i64 %2788 to i64*
  %2792 = load i64, i64* %2791
  store i64 %2792, i64* %RAX, align 8, !tbaa !2428
  %2793 = load i64, i64* %RBP
  %2794 = sub i64 %2793, 32
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 3
  store i64 %2796, i64* %PC
  %2797 = inttoptr i64 %2794 to i32*
  %2798 = load i32, i32* %2797
  %2799 = zext i32 %2798 to i64
  store i64 %2799, i64* %RCX, align 8, !tbaa !2428
  %2800 = load i64, i64* %RCX
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 3
  store i64 %2802, i64* %PC
  %2803 = trunc i64 %2800 to i32
  %2804 = add i32 1, %2803
  %2805 = zext i32 %2804 to i64
  store i64 %2805, i64* %RCX, align 8, !tbaa !2428
  %2806 = icmp ult i32 %2804, %2803
  %2807 = icmp ult i32 %2804, 1
  %2808 = or i1 %2806, %2807
  %2809 = zext i1 %2808 to i8
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2809, i8* %2810, align 1, !tbaa !2432
  %2811 = and i32 %2804, 255
  %2812 = call i32 @llvm.ctpop.i32(i32 %2811) #17
  %2813 = trunc i32 %2812 to i8
  %2814 = and i8 %2813, 1
  %2815 = xor i8 %2814, 1
  %2816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2815, i8* %2816, align 1, !tbaa !2446
  %2817 = xor i64 1, %2800
  %2818 = trunc i64 %2817 to i32
  %2819 = xor i32 %2818, %2804
  %2820 = lshr i32 %2819, 4
  %2821 = trunc i32 %2820 to i8
  %2822 = and i8 %2821, 1
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2822, i8* %2823, align 1, !tbaa !2447
  %2824 = icmp eq i32 %2804, 0
  %2825 = zext i1 %2824 to i8
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2825, i8* %2826, align 1, !tbaa !2448
  %2827 = lshr i32 %2804, 31
  %2828 = trunc i32 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2828, i8* %2829, align 1, !tbaa !2449
  %2830 = lshr i32 %2803, 31
  %2831 = xor i32 %2827, %2830
  %2832 = add nuw nsw i32 %2831, %2827
  %2833 = icmp eq i32 %2832, 2
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2834, i8* %2835, align 1, !tbaa !2450
  %2836 = load i32, i32* %ECX
  %2837 = zext i32 %2836 to i64
  %2838 = load i64, i64* %PC
  %2839 = add i64 %2838, 3
  store i64 %2839, i64* %PC
  %2840 = shl i64 %2837, 32
  %2841 = ashr exact i64 %2840, 32
  store i64 %2841, i64* %RDX, align 8, !tbaa !2428
  %2842 = load i64, i64* %RAX
  %2843 = load i64, i64* %RDX
  %2844 = mul i64 %2843, 8
  %2845 = add i64 %2844, %2842
  %2846 = bitcast %union.vec128_t* %XMM0 to i8*
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 5
  store i64 %2848, i64* %PC
  %2849 = bitcast i8* %2846 to double*
  %2850 = load double, double* %2849, align 1
  %2851 = inttoptr i64 %2845 to double*
  store double %2850, double* %2851
  %2852 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2853 = load i64, i64* %RBP
  %2854 = sub i64 %2853, 72
  %2855 = load i64, i64* %PC
  %2856 = add i64 %2855, 5
  store i64 %2856, i64* %PC
  %2857 = inttoptr i64 %2854 to double*
  %2858 = load double, double* %2857
  %2859 = bitcast i8* %2852 to double*
  store double %2858, double* %2859, align 1, !tbaa !2452
  %2860 = getelementptr inbounds i8, i8* %2852, i64 8
  %2861 = bitcast i8* %2860 to double*
  store double 0.000000e+00, double* %2861, align 1, !tbaa !2452
  %2862 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2863 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2864 = load i64, i64* %RBP
  %2865 = sub i64 %2864, 112
  %2866 = load i64, i64* %PC
  %2867 = add i64 %2866, 5
  store i64 %2867, i64* %PC
  %2868 = bitcast i8* %2863 to double*
  %2869 = load double, double* %2868, align 1
  %2870 = getelementptr inbounds i8, i8* %2863, i64 8
  %2871 = bitcast i8* %2870 to i64*
  %2872 = load i64, i64* %2871, align 1
  %2873 = inttoptr i64 %2865 to double*
  %2874 = load double, double* %2873
  %2875 = fadd double %2869, %2874
  %2876 = bitcast i8* %2862 to double*
  store double %2875, double* %2876, align 1, !tbaa !2452
  %2877 = getelementptr inbounds i8, i8* %2862, i64 8
  %2878 = bitcast i8* %2877 to i64*
  store i64 %2872, i64* %2878, align 1, !tbaa !2452
  %2879 = load i64, i64* %RBP
  %2880 = sub i64 %2879, 16
  %2881 = load i64, i64* %PC
  %2882 = add i64 %2881, 4
  store i64 %2882, i64* %PC
  %2883 = inttoptr i64 %2880 to i64*
  %2884 = load i64, i64* %2883
  store i64 %2884, i64* %RAX, align 8, !tbaa !2428
  %2885 = load i64, i64* %RBP
  %2886 = sub i64 %2885, 40
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 4
  store i64 %2888, i64* %PC
  %2889 = inttoptr i64 %2886 to i32*
  %2890 = load i32, i32* %2889
  %2891 = sext i32 %2890 to i64
  store i64 %2891, i64* %RDX, align 8, !tbaa !2428
  %2892 = load i64, i64* %RAX
  %2893 = load i64, i64* %RDX
  %2894 = mul i64 %2893, 8
  %2895 = add i64 %2894, %2892
  %2896 = bitcast %union.vec128_t* %XMM0 to i8*
  %2897 = load i64, i64* %PC
  %2898 = add i64 %2897, 5
  store i64 %2898, i64* %PC
  %2899 = bitcast i8* %2896 to double*
  %2900 = load double, double* %2899, align 1
  %2901 = inttoptr i64 %2895 to double*
  store double %2900, double* %2901
  %2902 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2903 = load i64, i64* %RBP
  %2904 = sub i64 %2903, 80
  %2905 = load i64, i64* %PC
  %2906 = add i64 %2905, 5
  store i64 %2906, i64* %PC
  %2907 = inttoptr i64 %2904 to double*
  %2908 = load double, double* %2907
  %2909 = bitcast i8* %2902 to double*
  store double %2908, double* %2909, align 1, !tbaa !2452
  %2910 = getelementptr inbounds i8, i8* %2902, i64 8
  %2911 = bitcast i8* %2910 to double*
  store double 0.000000e+00, double* %2911, align 1, !tbaa !2452
  %2912 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2913 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2914 = load i64, i64* %RBP
  %2915 = sub i64 %2914, 104
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 5
  store i64 %2917, i64* %PC
  %2918 = bitcast i8* %2913 to double*
  %2919 = load double, double* %2918, align 1
  %2920 = getelementptr inbounds i8, i8* %2913, i64 8
  %2921 = bitcast i8* %2920 to i64*
  %2922 = load i64, i64* %2921, align 1
  %2923 = inttoptr i64 %2915 to double*
  %2924 = load double, double* %2923
  %2925 = fadd double %2919, %2924
  %2926 = bitcast i8* %2912 to double*
  store double %2925, double* %2926, align 1, !tbaa !2452
  %2927 = getelementptr inbounds i8, i8* %2912, i64 8
  %2928 = bitcast i8* %2927 to i64*
  store i64 %2922, i64* %2928, align 1, !tbaa !2452
  %2929 = load i64, i64* %RBP
  %2930 = sub i64 %2929, 16
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 4
  store i64 %2932, i64* %PC
  %2933 = inttoptr i64 %2930 to i64*
  %2934 = load i64, i64* %2933
  store i64 %2934, i64* %RAX, align 8, !tbaa !2428
  %2935 = load i64, i64* %RBP
  %2936 = sub i64 %2935, 40
  %2937 = load i64, i64* %PC
  %2938 = add i64 %2937, 3
  store i64 %2938, i64* %PC
  %2939 = inttoptr i64 %2936 to i32*
  %2940 = load i32, i32* %2939
  %2941 = zext i32 %2940 to i64
  store i64 %2941, i64* %RCX, align 8, !tbaa !2428
  %2942 = load i64, i64* %RCX
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 3
  store i64 %2944, i64* %PC
  %2945 = trunc i64 %2942 to i32
  %2946 = add i32 1, %2945
  %2947 = zext i32 %2946 to i64
  store i64 %2947, i64* %RCX, align 8, !tbaa !2428
  %2948 = icmp ult i32 %2946, %2945
  %2949 = icmp ult i32 %2946, 1
  %2950 = or i1 %2948, %2949
  %2951 = zext i1 %2950 to i8
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2951, i8* %2952, align 1, !tbaa !2432
  %2953 = and i32 %2946, 255
  %2954 = call i32 @llvm.ctpop.i32(i32 %2953) #17
  %2955 = trunc i32 %2954 to i8
  %2956 = and i8 %2955, 1
  %2957 = xor i8 %2956, 1
  %2958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2957, i8* %2958, align 1, !tbaa !2446
  %2959 = xor i64 1, %2942
  %2960 = trunc i64 %2959 to i32
  %2961 = xor i32 %2960, %2946
  %2962 = lshr i32 %2961, 4
  %2963 = trunc i32 %2962 to i8
  %2964 = and i8 %2963, 1
  %2965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2964, i8* %2965, align 1, !tbaa !2447
  %2966 = icmp eq i32 %2946, 0
  %2967 = zext i1 %2966 to i8
  %2968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2967, i8* %2968, align 1, !tbaa !2448
  %2969 = lshr i32 %2946, 31
  %2970 = trunc i32 %2969 to i8
  %2971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2970, i8* %2971, align 1, !tbaa !2449
  %2972 = lshr i32 %2945, 31
  %2973 = xor i32 %2969, %2972
  %2974 = add nuw nsw i32 %2973, %2969
  %2975 = icmp eq i32 %2974, 2
  %2976 = zext i1 %2975 to i8
  %2977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2976, i8* %2977, align 1, !tbaa !2450
  %2978 = load i32, i32* %ECX
  %2979 = zext i32 %2978 to i64
  %2980 = load i64, i64* %PC
  %2981 = add i64 %2980, 3
  store i64 %2981, i64* %PC
  %2982 = shl i64 %2979, 32
  %2983 = ashr exact i64 %2982, 32
  store i64 %2983, i64* %RDX, align 8, !tbaa !2428
  %2984 = load i64, i64* %RAX
  %2985 = load i64, i64* %RDX
  %2986 = mul i64 %2985, 8
  %2987 = add i64 %2986, %2984
  %2988 = bitcast %union.vec128_t* %XMM0 to i8*
  %2989 = load i64, i64* %PC
  %2990 = add i64 %2989, 5
  store i64 %2990, i64* %PC
  %2991 = bitcast i8* %2988 to double*
  %2992 = load double, double* %2991, align 1
  %2993 = inttoptr i64 %2987 to double*
  store double %2992, double* %2993
  %2994 = load i64, i64* %RBP
  %2995 = sub i64 %2994, 28
  %2996 = load i64, i64* %PC
  %2997 = add i64 %2996, 3
  store i64 %2997, i64* %PC
  %2998 = inttoptr i64 %2995 to i32*
  %2999 = load i32, i32* %2998
  %3000 = zext i32 %2999 to i64
  store i64 %3000, i64* %RAX, align 8, !tbaa !2428
  %3001 = load i64, i64* %RAX
  %3002 = load i64, i64* %PC
  %3003 = add i64 %3002, 3
  store i64 %3003, i64* %PC
  %3004 = trunc i64 %3001 to i32
  %3005 = add i32 2, %3004
  %3006 = zext i32 %3005 to i64
  store i64 %3006, i64* %RAX, align 8, !tbaa !2428
  %3007 = icmp ult i32 %3005, %3004
  %3008 = icmp ult i32 %3005, 2
  %3009 = or i1 %3007, %3008
  %3010 = zext i1 %3009 to i8
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3010, i8* %3011, align 1, !tbaa !2432
  %3012 = and i32 %3005, 255
  %3013 = call i32 @llvm.ctpop.i32(i32 %3012) #17
  %3014 = trunc i32 %3013 to i8
  %3015 = and i8 %3014, 1
  %3016 = xor i8 %3015, 1
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3016, i8* %3017, align 1, !tbaa !2446
  %3018 = xor i64 2, %3001
  %3019 = trunc i64 %3018 to i32
  %3020 = xor i32 %3019, %3005
  %3021 = lshr i32 %3020, 4
  %3022 = trunc i32 %3021 to i8
  %3023 = and i8 %3022, 1
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3023, i8* %3024, align 1, !tbaa !2447
  %3025 = icmp eq i32 %3005, 0
  %3026 = zext i1 %3025 to i8
  %3027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3026, i8* %3027, align 1, !tbaa !2448
  %3028 = lshr i32 %3005, 31
  %3029 = trunc i32 %3028 to i8
  %3030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3029, i8* %3030, align 1, !tbaa !2449
  %3031 = lshr i32 %3004, 31
  %3032 = xor i32 %3028, %3031
  %3033 = add nuw nsw i32 %3032, %3028
  %3034 = icmp eq i32 %3033, 2
  %3035 = zext i1 %3034 to i8
  %3036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3035, i8* %3036, align 1, !tbaa !2450
  %3037 = load i64, i64* %RBP
  %3038 = sub i64 %3037, 28
  %3039 = load i32, i32* %EAX
  %3040 = zext i32 %3039 to i64
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 3
  store i64 %3042, i64* %PC
  %3043 = inttoptr i64 %3038 to i32*
  store i32 %3039, i32* %3043
  %3044 = load i64, i64* %PC
  %3045 = sub i64 %3044, 576
  %3046 = load i64, i64* %PC
  %3047 = add i64 %3046, 5
  store i64 %3047, i64* %PC
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3045, i64* %3048, align 8, !tbaa !2428
  br label %block_402526

block_402510:                                     ; preds = %block_40250b, %block_4024a0
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_4024a0 ], [ %MEMORY.1, %block_40250b ]
  %3049 = load i64, i64* %RBP
  %3050 = sub i64 %3049, 44
  %3051 = load i64, i64* %PC
  %3052 = add i64 %3051, 3
  store i64 %3052, i64* %PC
  %3053 = inttoptr i64 %3050 to i32*
  %3054 = load i32, i32* %3053
  %3055 = zext i32 %3054 to i64
  store i64 %3055, i64* %RAX, align 8, !tbaa !2428
  %3056 = load i64, i64* %RAX
  %3057 = load i64, i64* %PC
  %3058 = add i64 %3057, 3
  store i64 %3058, i64* %PC
  %3059 = and i64 %3056, 4294967295
  %3060 = shl i64 %3059, 1
  %3061 = trunc i64 %3060 to i32
  %3062 = icmp slt i32 %3061, 0
  %3063 = shl i32 %3061, 1
  %3064 = zext i32 %3063 to i64
  store i64 %3064, i64* %RAX, align 8, !tbaa !2428
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3066 = zext i1 %3062 to i8
  store i8 %3066, i8* %3065, align 1, !tbaa !2451
  %3067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3068 = and i32 %3063, 254
  %3069 = call i32 @llvm.ctpop.i32(i32 %3068) #17
  %3070 = trunc i32 %3069 to i8
  %3071 = and i8 %3070, 1
  %3072 = xor i8 %3071, 1
  store i8 %3072, i8* %3067, align 1, !tbaa !2451
  %3073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3073, align 1, !tbaa !2451
  %3074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3075 = icmp eq i32 %3063, 0
  %3076 = zext i1 %3075 to i8
  store i8 %3076, i8* %3074, align 1, !tbaa !2451
  %3077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3078 = lshr i32 %3063, 31
  %3079 = trunc i32 %3078 to i8
  store i8 %3079, i8* %3077, align 1, !tbaa !2451
  %3080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3080, align 1, !tbaa !2451
  %3081 = load i32, i32* %EAX
  %3082 = zext i32 %3081 to i64
  %3083 = load i64, i64* %RBP
  %3084 = sub i64 %3083, 4
  %3085 = load i64, i64* %PC
  %3086 = add i64 %3085, 3
  store i64 %3086, i64* %PC
  %3087 = inttoptr i64 %3084 to i32*
  %3088 = load i32, i32* %3087
  %3089 = sub i32 %3081, %3088
  %3090 = icmp ult i32 %3081, %3088
  %3091 = zext i1 %3090 to i8
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3091, i8* %3092, align 1, !tbaa !2432
  %3093 = and i32 %3089, 255
  %3094 = call i32 @llvm.ctpop.i32(i32 %3093) #17
  %3095 = trunc i32 %3094 to i8
  %3096 = and i8 %3095, 1
  %3097 = xor i8 %3096, 1
  %3098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3097, i8* %3098, align 1, !tbaa !2446
  %3099 = xor i32 %3088, %3081
  %3100 = xor i32 %3099, %3089
  %3101 = lshr i32 %3100, 4
  %3102 = trunc i32 %3101 to i8
  %3103 = and i8 %3102, 1
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3103, i8* %3104, align 1, !tbaa !2447
  %3105 = icmp eq i32 %3089, 0
  %3106 = zext i1 %3105 to i8
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3106, i8* %3107, align 1, !tbaa !2448
  %3108 = lshr i32 %3089, 31
  %3109 = trunc i32 %3108 to i8
  %3110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3109, i8* %3110, align 1, !tbaa !2449
  %3111 = lshr i32 %3081, 31
  %3112 = lshr i32 %3088, 31
  %3113 = xor i32 %3112, %3111
  %3114 = xor i32 %3108, %3111
  %3115 = add nuw nsw i32 %3114, %3113
  %3116 = icmp eq i32 %3115, 2
  %3117 = zext i1 %3116 to i8
  %3118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3117, i8* %3118, align 1, !tbaa !2450
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 599
  %3121 = load i64, i64* %PC
  %3122 = add i64 %3121, 6
  %3123 = load i64, i64* %PC
  %3124 = add i64 %3123, 6
  store i64 %3124, i64* %PC
  %3125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3126 = load i8, i8* %3125, align 1, !tbaa !2448
  %3127 = icmp eq i8 %3126, 0
  %3128 = zext i1 %3127 to i8
  store i8 %3128, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3130 = select i1 %3127, i64 %3120, i64 %3122
  store i64 %3130, i64* %3129, align 8, !tbaa !2428
  %3131 = load i8, i8* %BRANCH_TAKEN
  %3132 = icmp eq i8 %3131, 1
  %3133 = load i64, i64* %RBP
  %3134 = sub i64 %3133, 28
  %3135 = load i64, i64* %PC
  %3136 = add i64 %3135, 7
  store i64 %3136, i64* %PC
  %3137 = inttoptr i64 %3134 to i32*
  store i32 0, i32* %3137
  br i1 %3132, label %block_402777, label %block_402526
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400830_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400830;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400830_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400830_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400800___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400800;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400800___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400800___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006e0_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006d0_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6050f0_abort(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @abort to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6050e8_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605140_sqrt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @sqrt(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400720_memalign(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @memalign to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_605128_memcpy(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006f0_memset(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_404080___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404080;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_404080___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404080___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_404010___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_404010___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404010___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400840;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400840_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_605120___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6050b8_cos(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @cos(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_400730_sin(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @sin(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6050f8_atan(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @atan(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @cdft() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @cdft_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401050_cdft(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @errorcheck() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4010f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @errorcheck_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4010f0_errorcheck(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404084;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404084__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @get_time() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400e20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @get_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400e20_get_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @putdata() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @putdata_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400fd0_putdata(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400678;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400678__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @makewt() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400e60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @makewt_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400e60_makewt(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_404010___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_404080___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind }
attributes #18 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
!2457 = !{!2458, !2460}
!2458 = distinct !{!2458, !2459, !"ext_605140_sqrt: argument 0"}
!2459 = distinct !{!2459, !"ext_605140_sqrt"}
!2460 = distinct !{!2460, !2459, !"ext_605140_sqrt: argument 1"}
!2461 = !{!2458}
!2462 = !{!2460}
!2463 = !{!2464, !2466}
!2464 = distinct !{!2464, !2465, !"ext_6050b8_cos: argument 0"}
!2465 = distinct !{!2465, !"ext_6050b8_cos"}
!2466 = distinct !{!2466, !2465, !"ext_6050b8_cos: argument 1"}
!2467 = !{!2464}
!2468 = !{!2466}
!2469 = !{!2470, !2472}
!2470 = distinct !{!2470, !2471, !"ext_400730_sin: argument 0"}
!2471 = distinct !{!2471, !"ext_400730_sin"}
!2472 = distinct !{!2472, !2471, !"ext_400730_sin: argument 1"}
!2473 = !{!2470}
!2474 = !{!2472}
!2475 = !{!2476, !2478}
!2476 = distinct !{!2476, !2477, !"ext_6050f8_atan: argument 0"}
!2477 = distinct !{!2477, !"ext_6050f8_atan"}
!2478 = distinct !{!2478, !2477, !"ext_6050f8_atan: argument 1"}
!2479 = !{!2476}
!2480 = !{!2478}
!2481 = !{!2482, !2484}
!2482 = distinct !{!2482, !2483, !"ext_6050b8_cos: argument 0"}
!2483 = distinct !{!2483, !"ext_6050b8_cos"}
!2484 = distinct !{!2484, !2483, !"ext_6050b8_cos: argument 1"}
!2485 = !{!2482}
!2486 = !{!2484}
