; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400688__init_type = type <{ [23 x i8] }>
%seg_4006a0__plt_type = type <{ [192 x i8] }>
%seg_400760__text_type = type <{ [60 x i8], i32, [2108 x i8], i32, [12466 x i8] }>
%seg_404094__fini_type = type <{ [9 x i8] }>
%seg_4040a0__rodata_type = type <{ [24 x i8], [88 x i8], [45 x i8], [7 x i8] }>
%seg_404144__eh_frame_hdr_type = type <{ [148 x i8] }>
%seg_4041d8__eh_frame_type = type <{ [560 x i8] }>
%seg_604de0__init_array_type = type <{ i64, i64 }>
%seg_604ff0__got_type = type <{ i64, i64 }>
%seg_605000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_605070__data_type = type <{ [16 x i8] }>
%__bss_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400688__init = internal constant %seg_400688__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05eI \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4006a0__plt = internal constant %seg_4006a0__plt_type <{ [192 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%bI \00\00\00\00\00\00\00\00\00\00\00\FF%ZI \00\00\00\00\00\00\00\00\00\00\00\FF%RI \00\00\00\00\00\00\00\00\00\00\00\FF%JI \00\00\00\00\00\00\00\00\00\00\00\FF%BI \00\00\00\00\00\00\00\00\00\00\00\FF%:I \00\00\00\00\00\00\00\00\00\00\00\FF%2I \00\00\00\00\00\00\00\00\00\00\00\FF%*I \00\00\00\00\00\00\00\00\00\00\00\FF%\22I \00\00\00\00\00\00\00\00\00\00\00\FF%\1AI \00\00\00\00\00\00\00\00\00\00\00\FF%\12I \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400760__text = internal constant %seg_400760__text_type <{ [60 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\90@@\00H\C7\C1 @@\00H\C7\C7P\08@\00\FF\15fH \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00", i32 trunc (i64 add (i64 ptrtoint (%seg_400760__text_type* @seg_400760__text to i64), i64 6063) to i32), [2108 x i8] c"U\B8\80P`\00H=\80P`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF\80P`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE\80P`\00UH\81\EE\80P`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF\80P`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=iH \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05WH \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\E0\00\00\00\B8\10\00\00\00\89\C7\C7E\FC\00\00\00\00H\C7E\A8\00\00\00\00H\89\BDp\FF\FF\FF\E8\B3\05\00\00\F2\0F\11E\C0\E8\A9\05\00\00\F2\0F\11E\B8\F2\0F\10E\B8\F2\0F\10M\C0\F2\0F\5C\C1\F2\0F\11E\B0\F2\0F\10\05\118\00\00\E8\A4\FE\FF\FF\F2\0F\10\0D\0C8\00\00\F2\0FY\C1\F2\0F\10\0D\088\00\00\0F(\D0\F2\0F\5C\D1\F2H\0F,\FAH\B9\00\00\00\00\00\00\00\80H1\CF\F2H\0F,\C8f\0F.\C1H\0FB\F9H\8B\8Dp\FF\FF\FFH\89\BDh\FF\FF\FFH\89\CFH\8B\B5h\FF\FF\FF\E8-\FE\FF\FF\BA\10\00\00\00\89\D7\BA\00P\00\00\89\D6H\89E\E8\E8\16\FE\FF\FF\BF\00\02\00\00H\89E\C8H\8Bu\E8H\8BU\C8\E8@\05\00\00\BF\10\00\00\00A\B8\00@\00\00D\89\C6\E8\ED\FD\FF\FFA\B8\10\00\00\00D\89\C7A\B8\00@\00\00D\89\C6H\89E\E0\E8\D2\FD\FF\FFA\B8\10\00\00\00D\89\C7A\B8\00@\00\00D\89\C6H\89E\D8\E8\B7\FD\FF\FF1\FF\BE\FF\07\00\00H\89E\D0H\8BU\E0\E8S\06\00\00\BF\00\08\00\00\BE\01\00\00\00H\8BU\E0H\8BM\E8L\8BE\C8\E8\B8\06\00\00\BF\00\08\00\00\BE\FF\FF\FF\FFH\8BU\E0H\8BM\E8L\8BE\C8\E8\9D\06\00\001\FF\BE\FF\07\00\00\F2\0F\10\05\DE6\00\00H\8BU\E0\E8%\07\00\00\F2\0F\10\0D\C56\00\00\F2\0F\11E\A0\F2\0F\10E\A0\0F(\15\0C7\00\00f\0F\DB\C2f\0F.\C1\0F\86!\00\00\00H\BF\10A@\00\00\00\00\00\F2\0F\10E\A0\B0\01\E8\C8\FC\FF\FF\89\85d\FF\FF\FF\E8\9D\FC\FF\FF1\C0\BE\FF\03\00\00\B9\00@\00\00\89\CAH\8B}\E0\89\B5`\FF\FF\FF\89\C6\89\85\5C\FF\FF\FF\E8\B8\FC\FF\FFH\8BU\E0\8B\BD\5C\FF\FF\FF\8B\B5`\FF\FF\FF\E8\83\05\00\00\BF\00\08\00\00\BE\01\00\00\00H\8BU\E0H\8BM\E8L\8BE\C8\E8\E8\05\00\00\C7E\F4\00\00\00\00\81}\F4\00\04\00\00\0F\8DO\00\00\00H\B8\00\00\00\00\00\00\00\80H\8BM\E0\8BU\F4\C1\E2\01\83\C2\01Hc\F2\F2\0F\10\04\F1fH\0F~\C1H1\C1fH\0Fn\C1H\8BE\E0\8BU\F4\C1\E2\01\83\C2\01Hc\CA\F2\0F\11\04\C8\8BE\F4\83\C0\01\89E\F4\E9\A4\FF\FF\FF1\C0\BE\FF\03\00\00\B9\00@\00\00\89\CAH\8B}\D0\89\B5X\FF\FF\FF\89\C6\89\85T\FF\FF\FF\E8\00\FC\FF\FFH\8BU\D0\8B\BDT\FF\FF\FF\8B\B5X\FF\FF\FF\E8\CB\04\00\00\E8\16\03\00\00\F2\0F\11E\C0\C7E\F8\00\00\00\00\81}\F8\F0I\02\00\0F\8DZ\01\00\00\BF\00\08\00\00\BE\01\00\00\00\B8\00@\00\00\89\C2H\8BM\D8L\8BE\D0\89\BDP\FF\FF\FFH\89\CF\89\B5L\FF\FF\FFL\89\C6\E8\BD\FB\FF\FFH\8BU\D8H\8BM\E8L\8BE\C8\8B\BDP\FF\FF\FF\8B\B5L\FF\FF\FF\E8\E0\04\00\00\C7E\9C\00\00\00\00\81}\9C\00\04\00\00\0F\8D\D0\00\00\00H\8BE\D8\8BM\9C\C1\E1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11E\90H\8BE\E0\8BM\9C\C1\E1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11E\88H\8BE\D8\8BM\9C\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11E\80H\8BE\E0\8BM\9C\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11\85x\FF\FF\FF\F2\0F\10E\90\F2\0FYE\88\F2\0F\10M\80\F2\0FY\8Dx\FF\FF\FF\F2\0F\5C\C1H\8BE\D8\8BM\9C\C1\E1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\90\F2\0FY\85x\FF\FF\FF\F2\0F\10M\80\F2\0FYM\88\F2\0FX\C1H\8BE\D8\8BM\9C\C1\E1\01\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\9C\83\C0\01\89E\9C\E9#\FF\FF\FF\BF\00\08\00\00\BE\FF\FF\FF\FFH\8BU\D8H\8BM\E8L\8BE\C8\E8\E1\03\00\00\8BE\F8\83\C0\01\89E\F8\E9\99\FE\FF\FF\E8\9E\01\00\00\F2\0F\11E\B8\F2\0F\10E\B8\F2\0F\5CE\C0\F2\0F\5CE\B0\F2\0FXE\A8\F2\0F\11E\A8\C7E\F4\00\00\00\00\81}\F4\00\04\00\00\0F\8D\1A\01\00\00\F2\0F\10\05\044\00\00H\8BE\D8\8BM\F4\C1\E1\01Hc\D1\F2\0F\10\0C\D0\0F(\15\1B4\00\00f\0F\DB\CAf\0F.\C8\0F\86\1F\00\00\00H\8BE\D8\8BM\F4\C1\E1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11\85@\FF\FF\FF\E9\10\00\00\00\0FW\C0\F2\0F\11\85@\FF\FF\FF\E9\00\00\00\00\F2\0F\10\85@\FF\FF\FF\F2\0F\10\0D\9E3\00\00H\8BE\D8\8BM\F4\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\14\D0\0F(\1D\B23\00\00f\0F\DB\D3f\0F.\D1\F2\0F\11\858\FF\FF\FF\0F\86\22\00\00\00H\8BE\D8\8BM\F4\C1\E1\01\83\C1\01Hc\D1\F2\0F\10\04\D0\F2\0F\11\850\FF\FF\FF\E9\10\00\00\00\0FW\C0\F2\0F\11\850\FF\FF\FF\E9\00\00\00\00\F2\0F\10\850\FF\FF\FFH\BF=A@\00\00\00\00\00\F2\0F\10\8D8\FF\FF\FF\F2\0F\11\85(\FF\FF\FF\0F(\C1\F2\0F\10\8D(\FF\FF\FF\B0\02\E8\16\F9\FF\FF\89\85$\FF\FF\FF\8BE\F4\83\C0\01\89E\F4\E9\D9\FE\FF\FFH\8BE\E0H\89\C7\E8\C6\F8\FF\FFH\8BE\C8H\89\C7\E8\BA\F8\FF\FFH\8BE\E8H\89\C7\E8\AE\F8\FF\FFH\8BE\D8H\89\C7\E8\A2\F8\FF\FFH\8BE\D0H\89\C7\E8\96\F8\FF\FF1\C0H\81\C4\E0\00\00\00]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\8D}\F01\C0\89\C6\E8\AB\F8\FF\FF\F2\0F\10\05\8B2\00\00\F2H\0F*M\F0\F2H\0F*U\F8\F2\0FY\D0\F2\0FX\CA\0F(\C1\89E\ECH\83\C4 ]\C3\0F\1F\00UH\89\E5H\83\EC@\89}\FCH\89u\F0H\89U\E8\83}\FC\02\0F\8EI\01\00\00\F2\0F\10\05K2\00\00\8BE\FC\C1\F8\01\89E\E0\E8-\F8\FF\FF\0FW\C9\F2\0F\10\1522\00\00\F2\0F*]\E0\F2\0F^\C3\F2\0F\11E\D8H\8BM\E8\F2\0F\11\11H\8BM\E8\F2\0F\11I\08\F2\0F\10E\D8\F2\0F*M\E0\F2\0FY\C1\E80\F8\FF\FFH\8BM\E8HcU\E0\F2\0F\11\04\D1H\8BM\E8HcU\E0\F2\0F\10\04\D1H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\83}\E0\02\0F\8E\BB\00\00\00\C7E\E4\02\00\00\00\8BE\E4;E\E0\0F\8D\98\00\00\00\F2\0F\10E\D8\F2\0F*M\E4\F2\0FY\C1\E8\D4\F7\FF\FF\F2\0F\11E\D0\F2\0F\10E\D8\F2\0F*M\E4\F2\0FY\C1\E8\EC\F7\FF\FF\F2\0F\11E\C8\F2\0F\10E\D0H\8BE\E8HcM\E4\F2\0F\11\04\C8\F2\0F\10E\C8H\8BE\E8\8BU\E4\83\C2\01Hc\CA\F2\0F\11\04\C8\F2\0F\10E\C8H\8BE\E8\8BU\FC+U\E4Hc\CA\F2\0F\11\04\C8\F2\0F\10E\D0H\8BE\E8\8BU\FC+U\E4\83\C2\01Hc\CA\F2\0F\11\04\C8\8BE\E4\83\C0\02\89E\E4\E9\5C\FF\FF\FF\8B}\FCH\8Bu\F0H\8BU\E8\E8\1F\02\00\00\E9\00\00\00\00H\83\C4@]\C3", i32 trunc (i64 add (i64 ptrtoint (%seg_400760__text_type* @seg_400760__text to i64), i64 6063) to i32), [12466 x i8] c"UH\89\E5\89}\FC\89u\F8H\89U\F0\C7E\E8\00\00\00\00\8Bu\FC\89u\EC\8BE\EC;E\F8\0F\8FK\00\00\00\F2\0F\10\05\D90\00\00\B8\80\F4\03\00iM\E8\E5\1B\00\00\81\C1\F5\D5\00\00\89E\E4\89\C8\99\8BM\E4\F7\F9\89U\E8\F2\0F*\CA\F2\0FY\C8H\8Bu\F0Hc}\EC\F2\0F\11\0C\FE\8BE\EC\83\C0\01\89E\EC\E9\A9\FF\FF\FF]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC \89}\FC\89u\F8H\89U\F0H\89M\E8L\89E\E0\83}\FC\04\0F\8ET\00\00\00\83}\F8\00\0F\8C%\00\00\00\8B}\FCH\8Bu\E8H\8BU\F0\E8R\01\00\00\8B}\FCH\8Bu\F0H\8BU\E0\E8\C2\07\00\00\E9 \00\00\00\8B}\FCH\8Bu\E8H\8BU\F0\E8M\0B\00\00\8B}\FCH\8Bu\F0H\8BU\E0\E8\DD\13\00\00\E9\1F\00\00\00\83}\FC\04\0F\85\10\00\00\00\8B}\FCH\8Bu\F0H\8BU\E0\E8~\07\00\00\E9\00\00\00\00H\83\C4 ]\C3\0F\1F\00UH\89\E5\0FW\C9\89}\FC\89u\F8\F2\0F\11E\F0H\89U\E8\C7E\E0\00\00\00\00\F2\0F\11M\D8\8Bu\FC\89u\E4\8BE\E4;E\F8\0F\8F\A6\00\00\00\F2\0F\10\05\AC/\00\00\B8\80\F4\03\00iM\E0\E5\1B\00\00\81\C1\F5\D5\00\00\89E\CC\89\C8\99\8BM\CC\F7\F9\89U\E0\F2\0F*\CA\F2\0FY\C8H\8Bu\E8Hc}\E4\F2\0F\10\04\FE\F2\0FYE\F0\F2\0F\5C\C8\F2\0F\11M\D0\F2\0F\10E\D8\F2\0F\10M\D0\0F(\15p/\00\00f\0F\DB\CAf\0F.\C1\0F\86\0F\00\00\00\F2\0F\10E\D8\F2\0F\11E\C0\E9\15\00\00\00\F2\0F\10E\D0\0F(\0DG/\00\00f\0F\DB\C1\F2\0F\11E\C0\F2\0F\10E\C0\F2\0F\11E\D8\8BE\E4\83\C0\01\89E\E4\E9N\FF\FF\FF\F2\0F\10E\D8]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FCH\89u\F0H\89U\E8H\8BU\F0\C7\02\00\00\00\00\8B}\FC\89}\D4\C7E\D0\01\00\00\00\8BE\D0\C1\E0\03;E\D4\0F\8DV\00\00\00\8BE\D4\C1\F8\01\89E\D4\C7E\E4\00\00\00\00\8BE\E4;E\D0\0F\8D,\00\00\00H\8BE\F0HcM\E4\8B\14\88\03U\D4H\8BE\F0\8Bu\D0\03u\E4Hc\CE\89\14\88\8BE\E4\83\C0\01\89E\E4\E9\C8\FF\FF\FF\8BE\D0\C1\E0\01\89E\D0\E9\9B\FF\FF\FF\8BE\D0\C1\E0\01\89E\CC\8BE\D0\C1\E0\03;E\D4\0F\85\01\04\00\00\C7E\DC\00\00\00\00\8BE\DC;E\D0\0F\8D\E9\03\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8D\04\03\00\00\8BE\E4\C1\E0\01H\8BM\F0HcU\DC\03\04\91\89E\E0\8BE\DC\C1\E0\01H\8BM\F0HcU\E4\03\04\91\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\C1\E0\01\03E\D8\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\8Bu\D8)\C6\89u\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\C1\E0\01\03E\D8\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\01\89E\E4\E9\F0\FC\FF\FF\8BE\DC\C1\E0\01\03E\CCH\8BM\F0HcU\DC\03\04\91\89E\E0\8BE\E0\03E\CC\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\DC\83\C0\01\89E\DC\E9\0B\FC\FF\FF\E9\CE\01\00\00\C7E\DC\01\00\00\00\8BE\DC;E\D0\0F\8D\B6\01\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8D\90\01\00\00\8BE\E4\C1\E0\01H\8BM\F0HcU\DC\03\04\91\89E\E0\8BE\DC\C1\E0\01H\8BM\F0HcU\E4\03\04\91\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\CC\03E\E0\89E\E0\8BE\CC\03E\D8\89E\D8H\8BM\E8HcU\E0\F2\0F\10\04\D1\F2\0F\11E\C0H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\B8H\8BM\E8HcU\D8\F2\0F\10\04\D1\F2\0F\11E\B0H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\10\04\D1\F2\0F\11E\A8\F2\0F\10E\B0H\8BM\E8HcU\E0\F2\0F\11\04\D1\F2\0F\10E\A8H\8BM\E8\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\E8HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8H\8BM\E8\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\01\89E\E4\E9d\FE\FF\FF\E9\00\00\00\00\8BE\DC\83\C0\01\89E\DC\E9>\FE\FF\FF\E9\00\00\00\00]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECp\89}\FCH\89u\F0H\89U\E8\C7E\D4\02\00\00\00\83}\FC\08\0F\8EL\00\00\00\8B}\FCH\8Bu\F0H\8BU\E8\E8\FC\0F\00\00\C7E\D4\08\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\8D!\00\00\00\8B}\FC\8Bu\D4H\8BU\F0H\8BM\E8\E8c\1A\00\00\8Bu\D4\C1\E6\02\89u\D4\E9\D0\FF\FF\FF\E9\00\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\85-\02\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D\15\02\00\00\8BE\E4\03E\D4\89E\E0\8BE\E0\03E\D4\89E\DC\8BE\DC\03E\D4\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\C8H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\C0H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11E\B8H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11E\B0H\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11E\A8H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\A0H\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11E\98H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11E\90\F2\0F\10E\C8\F2\0FXE\A8H\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\C0\F2\0FXE\A0H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\C8\F2\0F\5CE\A8H\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\C0\F2\0F\5CE\A0H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0F\5CE\90H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\B0\F2\0FXE\98H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0FXE\90H\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B0\F2\0F\5CE\98H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9\DF\FD\FF\FF\E9\E8\00\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D\D0\00\00\00\8BE\E4\03E\D4\89E\E0H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11E\C8H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11E\C0H\8BM\F0HcU\E0\F2\0F\10\04\D1H\8BM\F0HcU\E4\F2\0FX\04\D1\F2\0F\11\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\04\D1\F2\0F\10E\C8H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\C0H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9$\FF\FF\FF\E9\00\00\00\00H\83\C4p]\C3f\0F\1FD\00\00UH\89\E5\89}\FCH\89u\F0H\89U\E8H\8BU\F0\C7\02\00\00\00\00\8B}\FC\89}\D4\C7E\D0\01\00\00\00\8BE\D0\C1\E0\03;E\D4\0F\8DV\00\00\00\8BE\D4\C1\F8\01\89E\D4\C7E\E4\00\00\00\00\8BE\E4;E\D0\0F\8D,\00\00\00H\8BE\F0HcM\E4\8B\14\88\03U\D4H\8BE\F0\8Bu\D0\03u\E4Hc\CE\89\14\88\8BE\E4\83\C0\01\89E\E4\E9\C8\FF\FF\FF\8BE\D0\C1\E0\01\89E\D0\E9\9B\FF\FF\FF\8BE\D0\C1\E0\01\89E\CC\8BE\D0\C1\E0\03;E\D4\0F\85\08\05\00\00\C7E\DC\00\00\00\00\8BE\DC;E\D0\0F\8D\F0\04\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8Dv\03\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\E0\8BM\DC\C1\E1\01H\8BU\F0Hcu\E4\03\0C\B2\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\C1\E1\01\03M\D8\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\8B}\D8)\CF\89}\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\C1\E1\01\03M\D8\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BE\E8HcU\E0\F2\0F\11\04\D0\F2\0F\10E\A8H\8BE\E8\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C0H\8BE\E8HcU\D8\F2\0F\11\04\D0\F2\0F\10E\B8H\8BE\E8\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\01\89E\E4\E9~\FC\FF\FFH\B8\00\00\00\00\00\00\00\80\8BM\DC\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\D8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\D8\03M\CC\89M\E0\8BM\E0\03M\CC\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\D8\89M\D8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\E8\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\DC\83\C0\01\89E\DC\E9\04\FB\FF\FF\E9\E7\02\00\00H\B8\00\00\00\00\00\00\00\80H\8BM\E8\F2\0F\10A\08fH\0F~\C1H1\C1fH\0Fn\C1H\8BM\E8\F2\0F\11A\08H\8BM\E8\8BU\CC\83\C2\01Hc\F2\F2\0F\10\04\F1fH\0F~\C1H1\C1fH\0Fn\C1H\8BE\E8\8BU\CC\83\C2\01Hc\CA\F2\0F\11\04\C8\C7E\DC\01\00\00\00\8BE\DC;E\D0\0F\8Du\02\00\00\C7E\E4\00\00\00\00\8BE\E4;E\DC\0F\8D\CE\01\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\E0\8BM\DC\C1\E1\01H\8BU\F0Hcu\E4\03\0C\B2\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BU\E8Hcu\E0\F2\0F\11\04\F2\F2\0F\10E\A8H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10E\C0H\8BU\E8Hcu\D8\F2\0F\11\04\F2\F2\0F\10E\B8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2\8BM\CC\03M\E0\89M\E0\8BM\CC\03M\D8\89M\D8H\8BU\E8Hcu\E0\F2\0F\10\04\F2\F2\0F\11E\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\B8H\8BU\E8Hcu\D8\F2\0F\10\04\F2\F2\0F\11E\B0H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2\F2\0F\11E\A8\F2\0F\10E\B0H\8BE\E8HcU\E0\F2\0F\11\04\D0\F2\0F\10E\A8H\8BE\E8\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C0H\8BE\E8HcU\D8\F2\0F\11\04\D0\F2\0F\10E\B8H\8BE\E8\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\01\89E\E4\E9&\FE\FF\FFH\B8\00\00\00\00\00\00\00\80\8BM\DC\C1\E1\01H\8BU\F0Hcu\DC\03\0C\B2\89M\D8H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\E8\8BM\D8\83\C1\01Hc\F1\F2\0F\11\04\F2H\8BU\E8\8BM\D8\03M\CC\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\E8\8BM\D8\03M\CC\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\DC\83\C0\01\89E\DC\E9\7F\FD\FF\FF\E9\00\00\00\00]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECp\89}\FCH\89u\F0H\89U\E8\C7E\D4\02\00\00\00\83}\FC\08\0F\8EL\00\00\00\8B}\FCH\8Bu\F0H\8BU\E8\E8\BC\03\00\00\C7E\D4\08\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\8D!\00\00\00\8B}\FC\8Bu\D4H\8BU\F0H\8BM\E8\E8#\0E\00\00\8Bu\D4\C1\E6\02\89u\D4\E9\D0\FF\FF\FF\E9\00\00\00\00\8BE\D4\C1\E0\02;E\FC\0F\85Q\02\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D9\02\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\03M\D4\89M\E0\8BM\E0\03M\D4\89M\DC\8BM\DC\03M\D4\89M\D8H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0FX\04\F2\F2\0F\11E\C8H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0F\5C\04\F2\F2\0F\11E\C0H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0F\5C\04\F2\F2\0F\11E\B8H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0FX\04\D0\F2\0F\11E\B0H\8BE\F0HcU\DC\F2\0F\10\04\D0H\8BE\F0HcU\D8\F2\0FX\04\D0\F2\0F\11E\A8H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\10\04\D0H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0FX\04\D0\F2\0F\11E\A0H\8BE\F0HcU\DC\F2\0F\10\04\D0H\8BE\F0HcU\D8\F2\0F\5C\04\D0\F2\0F\11E\98H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\10\04\D0H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0F\5C\04\D0\F2\0F\11E\90\F2\0F\10E\C8\F2\0FXE\A8H\8BE\F0HcU\E4\F2\0F\11\04\D0\F2\0F\10E\C0\F2\0F\5CE\A0H\8BE\F0\8BM\E4\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C8\F2\0F\5CE\A8H\8BE\F0HcU\DC\F2\0F\11\04\D0\F2\0F\10E\C0\F2\0FXE\A0H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\B8\F2\0F\5CE\90H\8BE\F0HcU\E0\F2\0F\11\04\D0\F2\0F\10E\B0\F2\0F\5CE\98H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\B8\F2\0FXE\90H\8BE\F0HcU\D8\F2\0F\11\04\D0\F2\0F\10E\B0\F2\0FXE\98H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\02\89E\E4\E9\BB\FD\FF\FF\E9\19\01\00\00\C7E\E4\00\00\00\00\8BE\E4;E\D4\0F\8D\01\01\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\03M\D4\89M\E0H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0F\5C\04\F2\F2\0F\11E\C8H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0FX\04\F2\F2\0F\11E\C0H\8BU\F0Hcu\E0\F2\0F\10\04\F2H\8BU\F0Hcu\E4\F2\0FX\04\F2\F2\0F\11\04\F2H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2fH\0F~\C2H1\C2fH\0Fn\C2H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\5C\04\D0H\8BE\F0\8BM\E4\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10E\C8H\8BE\F0HcU\E0\F2\0F\11\04\D0\F2\0F\10E\C0H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\02\89E\E4\E9\F3\FE\FF\FF\E9\00\00\00\00H\83\C4p]\C3\90UH\89\E5H\83\EC\18\89}\FCH\89u\F0H\89U\E8H\8BU\F0\F2\0F\10\02H\8BU\F0\F2\0FXB\10\F2\0F\11E\A0H\8BU\F0\F2\0F\10B\08H\8BU\F0\F2\0FXB\18\F2\0F\11E\98H\8BU\F0\F2\0F\10\02H\8BU\F0\F2\0F\5CB\10\F2\0F\11E\90H\8BU\F0\F2\0F\10B\08H\8BU\F0\F2\0F\5CB\18\F2\0F\11E\88H\8BU\F0\F2\0F\10B H\8BU\F0\F2\0FXB0\F2\0F\11E\80H\8BU\F0\F2\0F\10B(H\8BU\F0\F2\0FXB8\F2\0F\11\85x\FF\FF\FFH\8BU\F0\F2\0F\10B H\8BU\F0\F2\0F\5CB0\F2\0F\11\85p\FF\FF\FFH\8BU\F0\F2\0F\10B(H\8BU\F0\F2\0F\5CB8\F2\0F\11\85h\FF\FF\FF\F2\0F\10E\A0\F2\0FXE\80H\8BU\F0\F2\0F\11\02\F2\0F\10E\98\F2\0FX\85x\FF\FF\FFH\8BU\F0\F2\0F\11B\08\F2\0F\10E\A0\F2\0F\5CE\80H\8BU\F0\F2\0F\11B \F2\0F\10E\98\F2\0F\5C\85x\FF\FF\FFH\8BU\F0\F2\0F\11B(\F2\0F\10E\90\F2\0F\5C\85h\FF\FF\FFH\8BU\F0\F2\0F\11B\10\F2\0F\10E\88\F2\0FX\85p\FF\FF\FFH\8BU\F0\F2\0F\11B\18\F2\0F\10E\90\F2\0FX\85h\FF\FF\FFH\8BU\F0\F2\0F\11B0\F2\0F\10E\88\F2\0F\5C\85p\FF\FF\FFH\8BU\F0\F2\0F\11B8H\8BU\E8\F2\0F\10B\10\F2\0F\11E\D0H\8BU\F0\F2\0F\10B@H\8BU\F0\F2\0FXBP\F2\0F\11E\A0H\8BU\F0\F2\0F\10BHH\8BU\F0\F2\0FXBX\F2\0F\11E\98H\8BU\F0\F2\0F\10B@H\8BU\F0\F2\0F\5CBP\F2\0F\11E\90H\8BU\F0\F2\0F\10BHH\8BU\F0\F2\0F\5CBX\F2\0F\11E\88H\8BU\F0\F2\0F\10B`H\8BU\F0\F2\0FXBp\F2\0F\11E\80H\8BU\F0\F2\0F\10BhH\8BU\F0\F2\0FXBx\F2\0F\11\85x\FF\FF\FFH\8BU\F0\F2\0F\10B`H\8BU\F0\F2\0F\5CBp\F2\0F\11\85p\FF\FF\FFH\8BU\F0\F2\0F\10BhH\8BU\F0\F2\0F\5CBx\F2\0F\11\85h\FF\FF\FF\F2\0F\10E\A0\F2\0FXE\80H\8BU\F0\F2\0F\11B@\F2\0F\10E\98\F2\0FX\85x\FF\FF\FFH\8BU\F0\F2\0F\11BH\F2\0F\10\85x\FF\FF\FF\F2\0F\5CE\98H\8BU\F0\F2\0F\11B`\F2\0F\10E\A0\F2\0F\5CE\80H\8BU\F0\F2\0F\11Bh\F2\0F\10E\90\F2\0F\5C\85h\FF\FF\FF\F2\0F\11E\A0\F2\0F\10E\88\F2\0FX\85p\FF\FF\FF\F2\0F\11E\98\F2\0F\10E\D0\F2\0F\10M\A0\F2\0F\5CM\98\F2\0FY\C1H\8BU\F0\F2\0F\11BP\F2\0F\10E\D0\F2\0F\10M\A0\F2\0FXM\98\F2\0FY\C1H\8BU\F0\F2\0F\11BX\F2\0F\10\85h\FF\FF\FF\F2\0FXE\90\F2\0F\11E\A0\F2\0F\10\85p\FF\FF\FF\F2\0F\5CE\88\F2\0F\11E\98\F2\0F\10E\D0\F2\0F\10M\98\F2\0F\5CM\A0\F2\0FY\C1H\8BU\F0\F2\0F\11Bp\F2\0F\10E\D0\F2\0F\10M\98\F2\0FXM\A0\F2\0FY\C1H\8BU\F0\F2\0F\11Bx\C7E\E0\00\00\00\00\C7E\E4\10\00\00\00\8BE\E4;E\FC\0F\8D\10\07\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10\05\D0\14\00\00\8BM\E0\83\C1\02\89M\E0\8BM\E0\C1\E1\01\89M\DCH\8BU\E8Hcu\E0\F2\0F\10\0C\F2\F2\0F\11M\C0H\8BU\E8\8BM\E0\83\C1\01Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\B8H\8BU\E8Hcu\DC\F2\0F\10\0C\F2\F2\0F\11M\D0H\8BU\E8\8BM\DC\83\C1\01Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\C8\F2\0F\10M\D0\0F(\D0\F2\0FYU\B8\F2\0FYU\C8\F2\0F\5C\CA\F2\0F\11M\B0\0F(\C8\F2\0FYM\B8\F2\0FYM\D0\F2\0F\5CM\C8\F2\0F\11M\A8H\8BU\F0Hcu\E4\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\02Hc\F1\F2\0FX\0C\F2\F2\0F\11M\A0H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\03Hc\F1\F2\0FX\0C\F2\F2\0F\11M\98H\8BU\F0Hcu\E4\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\02Hc\F1\F2\0F\5C\0C\F2\F2\0F\11M\90H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\03Hc\F1\F2\0F\5C\0C\F2\F2\0F\11M\88H\8BU\F0\8BM\E4\83\C1\04Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\06Hc\F1\F2\0FX\0C\F2\F2\0F\11M\80H\8BU\F0\8BM\E4\83\C1\05Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\07Hc\F1\F2\0FX\0C\F2\F2\0F\11\8Dx\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\04Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\06Hc\F1\F2\0F\5C\0C\F2\F2\0F\11\8Dp\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\05Hc\F1\F2\0F\10\0C\F2H\8BU\F0\8BM\E4\83\C1\07Hc\F1\F2\0F\5C\0C\F2\F2\0F\11\8Dh\FF\FF\FF\F2\0F\10M\A0\F2\0FXM\80H\8BU\F0Hcu\E4\F2\0F\11\0C\F2\F2\0F\10M\98\F2\0FX\8Dx\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\80\F2\0F\10U\A0\F2\0F\5C\D1\F2\0F\11U\A0\F2\0F\10\8Dx\FF\FF\FF\F2\0F\10U\98\F2\0F\5C\D1\F2\0F\11U\98\F2\0F\10M\C0\F2\0FYM\A0\F2\0F\10U\B8\F2\0FYU\98\F2\0F\5C\CAH\8BU\F0\8BM\E4\83\C1\04Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\C0\F2\0FYM\98\F2\0F\10U\B8\F2\0FYU\A0\F2\0FX\CAH\8BU\F0\8BM\E4\83\C1\05Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\90\F2\0F\5C\8Dh\FF\FF\FF\F2\0F\11M\A0\F2\0F\10M\88\F2\0FX\8Dp\FF\FF\FF\F2\0F\11M\98\F2\0F\10M\D0\F2\0FYM\A0\F2\0F\10U\C8\F2\0FYU\98\F2\0F\5C\CAH\8BU\F0\8BM\E4\83\C1\02Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\D0\F2\0FYM\98\F2\0F\10U\C8\F2\0FYU\A0\F2\0FX\CAH\8BU\F0\8BM\E4\83\C1\03Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\90\F2\0FX\8Dh\FF\FF\FF\F2\0F\11M\A0\F2\0F\10M\88\F2\0F\5C\8Dp\FF\FF\FF\F2\0F\11M\98\F2\0F\10M\B0\F2\0FYM\A0\F2\0F\10U\A8\F2\0FYU\98\F2\0F\5C\CAH\8BU\F0\8BM\E4\83\C1\06Hc\F1\F2\0F\11\0C\F2\F2\0F\10M\B0\F2\0FYM\98\F2\0F\10U\A8\F2\0FYU\A0\F2\0FX\CAH\8BU\F0\8BM\E4\83\C1\07Hc\F1\F2\0F\11\0C\F2H\8BU\E8\8BM\DC\83\C1\02Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\D0H\8BU\E8\8BM\DC\83\C1\03Hc\F1\F2\0F\10\0C\F2\F2\0F\11M\C8\F2\0F\10M\D0\0F(\D0\F2\0FYU\C0\F2\0FYU\C8\F2\0F\5C\CA\F2\0F\11M\B0\F2\0FYE\C0\F2\0FYE\D0\F2\0F\5CE\C8\F2\0F\11E\A8H\8BU\F0\8BM\E4\83\C1\08Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0AHc\F1\F2\0FX\04\F2\F2\0F\11E\A0H\8BU\F0\8BM\E4\83\C1\09Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0BHc\F1\F2\0FX\04\F2\F2\0F\11E\98H\8BU\F0\8BM\E4\83\C1\08Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0AHc\F1\F2\0F\5C\04\F2\F2\0F\11E\90H\8BU\F0\8BM\E4\83\C1\09Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0BHc\F1\F2\0F\5C\04\F2\F2\0F\11E\88H\8BU\F0\8BM\E4\83\C1\0CHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0EHc\F1\F2\0FX\04\F2\F2\0F\11E\80H\8BU\F0\8BM\E4\83\C1\0DHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0FHc\F1\F2\0FX\04\F2\F2\0F\11\85x\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\0CHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0EHc\F1\F2\0F\5C\04\F2\F2\0F\11\85p\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\0DHc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E4\83\C1\0FHc\F1\F2\0F\5C\04\F2\F2\0F\11\85h\FF\FF\FF\F2\0F\10E\A0\F2\0FXE\80H\8BU\F0\8BM\E4\83\C1\08Hc\F1\F2\0F\11\04\F2\F2\0F\10E\98\F2\0FX\85x\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\09Hc\F1\F2\0F\11\04\F2\F2\0F\10E\80\F2\0F\10M\A0\F2\0F\5C\C8\F2\0F\11M\A0\F2\0F\10\85x\FF\FF\FF\F2\0F\10M\98\F2\0F\5C\C8\F2\0F\11M\98\F2\0F\10E\B8fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\A0\F2\0F\10M\C0\F2\0FYM\98\F2\0F\5C\C1H\8BU\F0\8BM\E4\83\C1\0CHc\F1\F2\0F\11\04\F2\F2\0F\10E\B8fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\98\F2\0F\10M\C0\F2\0FYM\A0\F2\0FX\C1H\8BE\F0\8BM\E4\83\C1\0DHc\D1\F2\0F\11\04\D0\F2\0F\10E\90\F2\0F\5C\85h\FF\FF\FF\F2\0F\11E\A0\F2\0F\10E\88\F2\0FX\85p\FF\FF\FF\F2\0F\11E\98\F2\0F\10E\D0\F2\0FYE\A0\F2\0F\10M\C8\F2\0FYM\98\F2\0F\5C\C1H\8BE\F0\8BM\E4\83\C1\0AHc\D1\F2\0F\11\04\D0\F2\0F\10E\D0\F2\0FYE\98\F2\0F\10M\C8\F2\0FYM\A0\F2\0FX\C1H\8BE\F0\8BM\E4\83\C1\0BHc\D1\F2\0F\11\04\D0\F2\0F\10E\90\F2\0FX\85h\FF\FF\FF\F2\0F\11E\A0\F2\0F\10E\88\F2\0F\5C\85p\FF\FF\FF\F2\0F\11E\98\F2\0F\10E\B0\F2\0FYE\A0\F2\0F\10M\A8\F2\0FYM\98\F2\0F\5C\C1H\8BE\F0\8BM\E4\83\C1\0EHc\D1\F2\0F\11\04\D0\F2\0F\10E\B0\F2\0FYE\98\F2\0F\10M\A8\F2\0FYM\A0\F2\0FX\C1H\8BE\F0\8BM\E4\83\C1\0FHc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\10\89E\E4\E9\E4\F8\FF\FFH\83\C4\18]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0\89}\FC\89u\F8H\89U\F0H\89M\E8\8Bu\F8\C1\E6\02\89u\C8\C7E\E4\00\00\00\00\8BE\E4;E\F8\0F\8DK\02\00\00\8BE\E4\03E\F8\89E\E0\8BE\E0\03E\F8\89E\DC\8BE\DC\03E\F8\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\88H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\80H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11\85x\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85p\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\85`\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11\85X\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10E\88\F2\0F\5C\85h\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\80\F2\0F\5C\85`\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FFH\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FFH\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0FX\85P\FF\FF\FFH\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10\85p\FF\FF\FF\F2\0F\5C\85X\FF\FF\FFH\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9\A9\FD\FF\FFH\8BE\E8\F2\0F\10@\10\F2\0F\11E\B8\8BM\C8\89M\E4\8BE\E4\8BM\F8\03M\C89\C8\0F\8D\AB\02\00\00\8BE\E4\03E\F8\89E\E0\8BE\E0\03E\F8\89E\DC\8BE\DC\03E\F8\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\88H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\80H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11\85x\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85p\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\85`\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11\85X\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85`\FF\FF\FF\F2\0F\5CE\80H\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\88\F2\0F\5C\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0F\10M\88\F2\0F\5CM\80\F2\0FY\C1H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0F\10M\88\F2\0FXM\80\F2\0FY\C1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85P\FF\FF\FF\F2\0FX\85x\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85X\FF\FF\FF\F2\0F\5C\85p\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0F\10M\80\F2\0F\5CM\88\F2\0FY\C1H\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0F\10M\80\F2\0FXM\88\F2\0FY\C1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9D\FD\FF\FF\C7E\D0\00\00\00\00\8BE\C8\C1\E0\01\89E\C4\8BE\C4\89E\D4\8BE\D4;E\FC\0F\8Do\07\00\00\F2\0F\10\05I\08\00\00\8BE\D0\83\C0\02\89E\D0\8BE\D0\C1\E0\01\89E\CCH\8BM\E8HcU\D0\F2\0F\10\0C\D1\F2\0F\11M\A8H\8BM\E8\8BE\D0\83\C0\01Hc\D0\F2\0F\10\0C\D1\F2\0F\11M\A0H\8BM\E8HcU\CC\F2\0F\10\0C\D1\F2\0F\11M\B8H\8BM\E8\8BE\CC\83\C0\01Hc\D0\F2\0F\10\0C\D1\F2\0F\11M\B0\F2\0F\10M\B8\0F(\D0\F2\0FYU\A0\F2\0FYU\B0\F2\0F\5C\CA\F2\0F\11M\98\F2\0FYE\A0\F2\0FYE\B8\F2\0F\5CE\B0\F2\0F\11E\90\8BE\D4\89E\E4\8BE\E4\8BM\F8\03M\D49\C8\0F\8D\01\03\00\00\8BE\E4\03E\F8\89E\E0\8BE\E0\03E\F8\89E\DC\8BE\DC\03E\F8\89E\D8H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0FX\04\D1\F2\0F\11E\88H\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11E\80H\8BM\F0HcU\E4\F2\0F\10\04\D1H\8BM\F0HcU\E0\F2\0F\5C\04\D1\F2\0F\11\85x\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85p\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0FX\04\D1\F2\0F\11\85h\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0FX\04\D1\F2\0F\11\85`\FF\FF\FFH\8BM\F0HcU\DC\F2\0F\10\04\D1H\8BM\F0HcU\D8\F2\0F\5C\04\D1\F2\0F\11\85X\FF\FF\FFH\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\10\04\D1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\5C\04\D1\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BM\F0HcU\E4\F2\0F\11\04\D1\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BM\F0\8BE\E4\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85h\FF\FF\FF\F2\0F\10M\88\F2\0F\5C\C8\F2\0F\11M\88\F2\0F\10\85`\FF\FF\FF\F2\0F\10M\80\F2\0F\5C\C8\F2\0F\11M\80\F2\0F\10E\A8\F2\0FYE\88\F2\0F\10M\A0\F2\0FYM\80\F2\0F\5C\C1H\8BM\F0HcU\DC\F2\0F\11\04\D1\F2\0F\10E\A8\F2\0FYE\80\F2\0F\10M\A0\F2\0FYM\88\F2\0FX\C1H\8BM\F0\8BE\DC\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0FYE\88\F2\0F\10M\B0\F2\0FYM\80\F2\0F\5C\C1H\8BM\F0HcU\E0\F2\0F\11\04\D1\F2\0F\10E\B8\F2\0FYE\80\F2\0F\10M\B0\F2\0FYM\88\F2\0FX\C1H\8BM\F0\8BE\E0\83\C0\01Hc\D0\F2\0F\11\04\D1\F2\0F\10\85x\FF\FF\FF\F2\0FX\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0F\5C\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\98\F2\0FYE\88\F2\0F\10M\90\F2\0FYM\80\F2\0F\5C\C1H\8BM\F0HcU\D8\F2\0F\11\04\D1\F2\0F\10E\98\F2\0FYE\80\F2\0F\10M\90\F2\0FYM\88\F2\0FX\C1H\8BM\F0\8BE\D8\83\C0\01Hc\D0\F2\0F\11\04\D1\8BE\E4\83\C0\02\89E\E4\E9\EE\FC\FF\FF\F2\0F\10\05\96\04\00\00H\8BE\E8\8BM\CC\83\C1\02Hc\D1\F2\0F\10\0C\D0\F2\0F\11M\B8H\8BE\E8\8BM\CC\83\C1\03Hc\D1\F2\0F\10\0C\D0\F2\0F\11M\B0\F2\0F\10M\B8\0F(\D0\F2\0FYU\A8\F2\0FYU\B0\F2\0F\5C\CA\F2\0F\11M\98\F2\0FYE\A8\F2\0FYE\B8\F2\0F\5CE\B0\F2\0F\11E\90\8BM\D4\03M\C8\89M\E4\8BE\E4\8BM\F8\8BU\D4\03U\C8\01\D19\C8\0F\8D%\03\00\00H\B8\00\00\00\00\00\00\00\80\8BM\E4\03M\F8\89M\E0\8BM\E0\03M\F8\89M\DC\8BM\DC\03M\F8\89M\D8H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0FX\04\F2\F2\0F\11E\88H\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0FX\04\F2\F2\0F\11E\80H\8BU\F0Hcu\E4\F2\0F\10\04\F2H\8BU\F0Hcu\E0\F2\0F\5C\04\F2\F2\0F\11\85x\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\E0\83\C1\01Hc\F1\F2\0F\5C\04\F2\F2\0F\11\85p\FF\FF\FFH\8BU\F0Hcu\DC\F2\0F\10\04\F2H\8BU\F0Hcu\D8\F2\0FX\04\F2\F2\0F\11\85h\FF\FF\FFH\8BU\F0\8BM\DC\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\D8\83\C1\01Hc\F1\F2\0FX\04\F2\F2\0F\11\85`\FF\FF\FFH\8BU\F0Hcu\DC\F2\0F\10\04\F2H\8BU\F0Hcu\D8\F2\0F\5C\04\F2\F2\0F\11\85X\FF\FF\FFH\8BU\F0\8BM\DC\83\C1\01Hc\F1\F2\0F\10\04\F2H\8BU\F0\8BM\D8\83\C1\01Hc\F1\F2\0F\5C\04\F2\F2\0F\11\85P\FF\FF\FF\F2\0F\10E\88\F2\0FX\85h\FF\FF\FFH\8BU\F0Hcu\E4\F2\0F\11\04\F2\F2\0F\10E\80\F2\0FX\85`\FF\FF\FFH\8BU\F0\8BM\E4\83\C1\01Hc\F1\F2\0F\11\04\F2\F2\0F\10\85h\FF\FF\FF\F2\0F\10M\88\F2\0F\5C\C8\F2\0F\11M\88\F2\0F\10\85`\FF\FF\FF\F2\0F\10M\80\F2\0F\5C\C8\F2\0F\11M\80\F2\0F\10E\A0fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\88\F2\0F\10M\A8\F2\0FYM\80\F2\0F\5C\C1H\8BU\F0Hcu\DC\F2\0F\11\04\F2\F2\0F\10E\A0fH\0F~\C2H1\C2fH\0Fn\C2\F2\0FYE\80\F2\0F\10M\A8\F2\0FYM\88\F2\0FX\C1H\8BE\F0\8BM\DC\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10\85x\FF\FF\FF\F2\0F\5C\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0FX\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\B8\F2\0FYE\88\F2\0F\10M\B0\F2\0FYM\80\F2\0F\5C\C1H\8BE\F0HcU\E0\F2\0F\11\04\D0\F2\0F\10E\B8\F2\0FYE\80\F2\0F\10M\B0\F2\0FYM\88\F2\0FX\C1H\8BE\F0\8BM\E0\83\C1\01Hc\D1\F2\0F\11\04\D0\F2\0F\10\85x\FF\FF\FF\F2\0FX\85P\FF\FF\FF\F2\0F\11E\88\F2\0F\10\85p\FF\FF\FF\F2\0F\5C\85X\FF\FF\FF\F2\0F\11E\80\F2\0F\10E\98\F2\0FYE\88\F2\0F\10M\90\F2\0FYM\80\F2\0F\5C\C1H\8BE\F0HcU\D8\F2\0F\11\04\D0\F2\0F\10E\98\F2\0FYE\80\F2\0F\10M\90\F2\0FYM\88\F2\0FX\C1H\8BE\F0\8BM\D8\83\C1\01Hc\D1\F2\0F\11\04\D0\8BE\E4\83\C0\02\89E\E4\E9\C5\FC\FF\FF\E9\00\00\00\00\8BE\C4\03E\D4\89E\D4\E9\85\F8\FF\FFH\83\C40]\C3f.\0F\1F\84\00\00\00\00\00f\90AWAVI\89\D7AUATL\8D%\AE\0D \00UH\8D-\AE\0D \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E87\C6\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_404094__fini = internal constant %seg_404094__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_4040a0__rodata = internal constant %seg_4040a0__rodata_type <{ [24 x i8] c"\01\00\02\00\00\00\00\00\BB\BD\D7\D9\DF|\DB=\00\00\00\00\00\00P?", [88 x i8] c"\00\00\00\00\00\00\90@\00\00\00\00\00\00\10@\00\00\00\00\00\00\E0C\95\D6&\E8\0B.\11>\8D\ED\B5\A0\F7\C6\B0>\00\00\00\00\00\00\F0?q\8B\89\C0\85.\D0>\00\00\00\00\00\00\00@\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [45 x i8] c"FFT sanity check failed! Difference is: %le\0A\00", [7 x i8] c"%e %e\0A\00" }>
@seg_404144__eh_frame_hdr = internal constant %seg_404144__eh_frame_hdr_type <{ [148 x i8] c"\01\1B\03;\90\00\00\00\11\00\00\00\5C\C5\FF\FF\EC\00\00\00\1C\C6\FF\FF\AC\00\00\00L\C6\FF\FF\D8\00\00\00\0C\C7\FF\FF\14\01\00\00\EC\CC\FF\FF0\01\00\00,\CD\FF\FFL\01\00\00\9C\CE\FF\FFh\01\00\00\1C\CF\FF\FF\84\01\00\00\BC\CF\FF\FF\A0\01\00\00\AC\D0\FF\FF\BC\01\00\00,\D7\FF\FF\D8\01\00\00\CC\DA\FF\FF\F4\01\00\00l\E3\FF\FF\10\02\00\00\5C\E7\FF\FF,\02\00\00\EC\F1\FF\FFH\02\00\00\DC\FE\FF\FFd\02\00\00L\FF\FF\FF\AC\02\00\00" }>
@seg_4041d8__eh_frame = internal constant %seg_4041d8__eh_frame_type <{ [560 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00h\C5\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00l\C5\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00h\C4\FF\FF\C0\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\F0\C5\FF\FF\D5\05\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\B4\CB\FF\FF=\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\D8\CB\FF\FFl\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00,\CD\FF\FFt\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\90\CD\FF\FF\9D\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\14\CE\FF\FF\E1\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\E8\CE\FF\FFt\06\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00L\D5\FF\FF\9A\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\00\D0\D8\FF\FF\94\08\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00T\E1\FF\FF\EF\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\01\00\00(\E5\FF\FF\84\0A\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\01\00\00\9C\EF\FF\FF\E4\0C\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\A8\01\00\00p\FC\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\F0\01\00\00\98\FC\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_604de0__init_array = internal global %seg_604de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400840_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400810___do_global_dtors_aux to i64) }>
@seg_604ff0__got = internal global %seg_604ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_605000__got_plt = internal global %seg_605000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 ()* @abort to i64), i64 ptrtoint (double (double)* @atan to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), i64 ptrtoint (double (double)* @cos to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), i64 ptrtoint (i64 (i64, i64)* @memalign to i64), i64 ptrtoint (double (double)* @sin to i64), i64 ptrtoint (double (double)* @sqrt to i64) }>
@seg_605070__data = internal global %seg_605070__data_type zeroinitializer
@__bss_start = global %__bss_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400840_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400810___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_404090___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_404020___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @putdata_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @cdft_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @errorcheck_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @get_time_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @makewt_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_400e30_get_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4024b0_cftbsub_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401c10_bitrv2conj_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400fe0_putdata_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400e70_makewt_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401100_errorcheck_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401870_cftfsub_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4011f0_bitrv2_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400688__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_403330_cftmdl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401060_cdft_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4028a0_cft1st_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4007a0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @abort() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memalign(i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400fe0_putdata(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400fe0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %47 to %union.vec128_t*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = load i64, i64* %RBP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 1
  store i64 %52, i64* %PC
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %54 = load i64, i64* %53, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %50, i64* %56
  store i64 %55, i64* %53, align 8, !tbaa !2428
  %57 = load i64, i64* %RSP
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 3
  store i64 %59, i64* %PC
  store i64 %57, i64* %RBP, align 8, !tbaa !2428
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 4
  %62 = load i32, i32* %EDI
  %63 = zext i32 %62 to i64
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 8
  %69 = load i32, i32* %ESI
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 16
  %76 = load i64, i64* %RDX
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %75 to i64*
  store i64 %76, i64* %79
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 24
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  store i32 0, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %RSI, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 20
  %94 = load i32, i32* %ESI
  %95 = zext i32 %94 to i64
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %93 to i32*
  store i32 %94, i32* %98
  br label %block_400ffb

block_400ffb:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_400fe0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400fe0 ], [ %302, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 20
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 3
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = zext i32 %104 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = load i32, i32* %EAX
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 8
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 3
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i32*
  %113 = load i32, i32* %112
  %114 = sub i32 %106, %113
  %115 = icmp ult i32 %106, %113
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %116, i8* %117, align 1, !tbaa !2432
  %118 = and i32 %114, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #17
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i32 %113, %106
  %125 = xor i32 %124, %114
  %126 = lshr i32 %125, 4
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i32 %114, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i32 %114, 31
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i32 %106, 31
  %137 = lshr i32 %113, 31
  %138 = xor i32 %137, %136
  %139 = xor i32 %133, %136
  %140 = add nuw nsw i32 %139, %138
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 81
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 6
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 6
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %151 = load i8, i8* %150, align 1, !tbaa !2448
  %152 = icmp eq i8 %151, 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %154 = load i8, i8* %153, align 1, !tbaa !2449
  %155 = icmp ne i8 %154, 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %157 = load i8, i8* %156, align 1, !tbaa !2450
  %158 = icmp ne i8 %157, 0
  %159 = xor i1 %155, %158
  %160 = xor i1 %159, true
  %161 = and i1 %152, %160
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = select i1 %161, i64 %145, i64 %147
  store i64 %164, i64* %163, align 8, !tbaa !2428
  %165 = load i8, i8* %BRANCH_TAKEN
  %166 = icmp eq i8 %165, 1
  br i1 %166, label %block_401052, label %block_401007

block_401007:                                     ; preds = %block_400ffb
  %167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 8
  store i64 %169, i64* %PC
  %170 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 72) to double*)
  %171 = bitcast i8* %167 to double*
  store double %170, double* %171, align 1, !tbaa !2452
  %172 = getelementptr inbounds i8, i8* %167, i64 8
  %173 = bitcast i8* %172 to double*
  store double 0.000000e+00, double* %173, align 1, !tbaa !2452
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 5
  store i64 %175, i64* %PC
  store i64 259200, i64* %RAX, align 8, !tbaa !2428
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 24
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  %181 = load i32, i32* %180
  %182 = sext i32 %181 to i64
  %183 = mul nsw i64 %182, 7141
  %184 = trunc i64 %183 to i32
  %185 = and i64 %183, 4294967295
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = shl i64 %183, 32
  %187 = ashr exact i64 %186, 32
  %188 = icmp ne i64 %187, %183
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %189, i8* %190, align 1, !tbaa !2432
  %191 = and i32 %184, 255
  %192 = call i32 @llvm.ctpop.i32(i32 %191) #17
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = xor i8 %194, 1
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %195, i8* %196, align 1, !tbaa !2446
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %197, align 1, !tbaa !2447
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %198, align 1, !tbaa !2448
  %199 = lshr i32 %184, 31
  %200 = trunc i32 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %200, i8* %201, align 1, !tbaa !2449
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %189, i8* %202, align 1, !tbaa !2450
  %203 = load i64, i64* %RCX
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 6
  store i64 %205, i64* %PC
  %206 = trunc i64 %203 to i32
  %207 = add i32 54773, %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = icmp ult i32 %207, %206
  %210 = icmp ult i32 %207, 54773
  %211 = or i1 %209, %210
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %212, i8* %213, align 1, !tbaa !2432
  %214 = and i32 %207, 255
  %215 = call i32 @llvm.ctpop.i32(i32 %214) #17
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %218, i8* %219, align 1, !tbaa !2446
  %220 = xor i64 54773, %203
  %221 = trunc i64 %220 to i32
  %222 = xor i32 %221, %207
  %223 = lshr i32 %222, 4
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %225, i8* %226, align 1, !tbaa !2447
  %227 = icmp eq i32 %207, 0
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %228, i8* %229, align 1, !tbaa !2448
  %230 = lshr i32 %207, 31
  %231 = trunc i32 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %231, i8* %232, align 1, !tbaa !2449
  %233 = lshr i32 %206, 31
  %234 = xor i32 %230, %233
  %235 = add nuw nsw i32 %234, %230
  %236 = icmp eq i32 %235, 2
  %237 = zext i1 %236 to i8
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %237, i8* %238, align 1, !tbaa !2450
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 28
  %241 = load i32, i32* %EAX
  %242 = zext i32 %241 to i64
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  %245 = inttoptr i64 %240 to i32*
  store i32 %241, i32* %245
  %246 = load i32, i32* %ECX
  %247 = zext i32 %246 to i64
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 2
  store i64 %249, i64* %PC
  %250 = and i64 %247, 4294967295
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 1
  store i64 %252, i64* %PC
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %255 = bitcast %union.anon* %254 to i32*
  %256 = load i32, i32* %255, align 8, !tbaa !2454
  %257 = sext i32 %256 to i64
  %258 = lshr i64 %257, 32
  store i64 %258, i64* %253, align 8, !tbaa !2428
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 28
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RCX, align 8, !tbaa !2428
  %266 = load i32, i32* %ECX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 2
  store i64 %269, i64* %PC
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %271 = bitcast %union.anon* %270 to i32*
  %272 = load i32, i32* %271, align 8, !tbaa !2454
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %275 = bitcast %union.anon* %274 to i32*
  %276 = load i32, i32* %275, align 8, !tbaa !2454
  %277 = zext i32 %276 to i64
  %278 = shl i64 %267, 32
  %279 = ashr exact i64 %278, 32
  %280 = shl nuw i64 %277, 32
  %281 = or i64 %280, %273
  %282 = sdiv i64 %281, %279
  %283 = shl i64 %282, 32
  %284 = ashr exact i64 %283, 32
  %285 = icmp eq i64 %282, %284
  br i1 %285, label %290, label %286

; <label>:286:                                    ; preds = %block_401007
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %288 = load i64, i64* %287, align 8, !tbaa !2428
  %289 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %288, %struct.Memory* %MEMORY.0) #18
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:290:                                    ; preds = %block_401007
  %291 = srem i64 %281, %279
  %292 = getelementptr inbounds %union.anon, %union.anon* %270, i64 0, i32 0
  %293 = and i64 %282, 4294967295
  store i64 %293, i64* %292, align 8, !tbaa !2428
  %294 = getelementptr inbounds %union.anon, %union.anon* %274, i64 0, i32 0
  %295 = and i64 %291, 4294967295
  store i64 %295, i64* %294, align 8, !tbaa !2428
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %296, align 1, !tbaa !2432
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %297, align 1, !tbaa !2446
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %298, align 1, !tbaa !2447
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %299, align 1, !tbaa !2448
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %300, align 1, !tbaa !2449
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %301, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %286, %290
  %302 = phi %struct.Memory* [ %289, %286 ], [ %MEMORY.0, %290 ]
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 24
  %305 = load i32, i32* %EDX
  %306 = zext i32 %305 to i64
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %304 to i32*
  store i32 %305, i32* %309
  %310 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %311 = load i32, i32* %EDX
  %312 = zext i32 %311 to i64
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 4
  store i64 %314, i64* %PC
  %315 = sitofp i32 %311 to double
  %316 = bitcast i8* %310 to double*
  store double %315, double* %316, align 1, !tbaa !2452
  %317 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %318 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %319 = bitcast %union.vec128_t* %XMM0 to i8*
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = bitcast i8* %318 to double*
  %323 = load double, double* %322, align 1
  %324 = getelementptr inbounds i8, i8* %318, i64 8
  %325 = bitcast i8* %324 to i64*
  %326 = load i64, i64* %325, align 1
  %327 = bitcast i8* %319 to double*
  %328 = load double, double* %327, align 1
  %329 = fmul double %323, %328
  %330 = bitcast i8* %317 to double*
  store double %329, double* %330, align 1, !tbaa !2452
  %331 = getelementptr inbounds i8, i8* %317, i64 8
  %332 = bitcast i8* %331 to i64*
  store i64 %326, i64* %332, align 1, !tbaa !2452
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 16
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 4
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i64*
  %338 = load i64, i64* %337
  store i64 %338, i64* %RSI, align 8, !tbaa !2428
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 20
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %340 to i32*
  %344 = load i32, i32* %343
  %345 = sext i32 %344 to i64
  store i64 %345, i64* %RDI, align 8, !tbaa !2428
  %346 = load i64, i64* %RSI
  %347 = load i64, i64* %RDI
  %348 = mul i64 %347, 8
  %349 = add i64 %348, %346
  %350 = bitcast %union.vec128_t* %XMM1 to i8*
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 5
  store i64 %352, i64* %PC
  %353 = bitcast i8* %350 to double*
  %354 = load double, double* %353, align 1
  %355 = inttoptr i64 %349 to double*
  store double %354, double* %355
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 20
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 3
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i32*
  %361 = load i32, i32* %360
  %362 = zext i32 %361 to i64
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = load i64, i64* %RAX
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = trunc i64 %363 to i32
  %367 = add i32 1, %366
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = icmp ult i32 %367, %366
  %370 = icmp ult i32 %367, 1
  %371 = or i1 %369, %370
  %372 = zext i1 %371 to i8
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %372, i8* %373, align 1, !tbaa !2432
  %374 = and i32 %367, 255
  %375 = call i32 @llvm.ctpop.i32(i32 %374) #17
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  %378 = xor i8 %377, 1
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %378, i8* %379, align 1, !tbaa !2446
  %380 = xor i64 1, %363
  %381 = trunc i64 %380 to i32
  %382 = xor i32 %381, %367
  %383 = lshr i32 %382, 4
  %384 = trunc i32 %383 to i8
  %385 = and i8 %384, 1
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %385, i8* %386, align 1, !tbaa !2447
  %387 = icmp eq i32 %367, 0
  %388 = zext i1 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %388, i8* %389, align 1, !tbaa !2448
  %390 = lshr i32 %367, 31
  %391 = trunc i32 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %391, i8* %392, align 1, !tbaa !2449
  %393 = lshr i32 %366, 31
  %394 = xor i32 %390, %393
  %395 = add nuw nsw i32 %394, %390
  %396 = icmp eq i32 %395, 2
  %397 = zext i1 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %397, i8* %398, align 1, !tbaa !2450
  %399 = load i64, i64* %RBP
  %400 = sub i64 %399, 20
  %401 = load i32, i32* %EAX
  %402 = zext i32 %401 to i64
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 3
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %400 to i32*
  store i32 %401, i32* %405
  %406 = load i64, i64* %PC
  %407 = sub i64 %406, 82
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 5
  store i64 %409, i64* %PC
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %407, i64* %410, align 8, !tbaa !2428
  br label %block_400ffb

block_401052:                                     ; preds = %block_400ffb
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 1
  store i64 %412, i64* %PC
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %414 = load i64, i64* %413, align 8, !tbaa !2428
  %415 = add i64 %414, 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416
  store i64 %417, i64* %RBP, align 8, !tbaa !2428
  store i64 %415, i64* %413, align 8, !tbaa !2428
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 1
  store i64 %419, i64* %PC
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %422 = load i64, i64* %421, align 8, !tbaa !2428
  %423 = inttoptr i64 %422 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %420, align 8, !tbaa !2428
  %425 = add i64 %422, 8
  store i64 %425, i64* %421, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400688__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400688:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #17
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_604ff0__got_type* @seg_604ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #17
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_40069a, label %block_400698

block_400698:                                     ; preds = %block_400688
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_40069a

block_40069a:                                     ; preds = %block_400698, %block_400688
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400688 ], [ %92, %block_400698 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #17
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_404020___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404020:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_604de0__init_array_type* @seg_604de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_604de0__init_array_type* @seg_604de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #17
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #17
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #17
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 14788
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400688__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #17
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_404076, label %block_404056

block_404076:                                     ; preds = %block_404060, %block_404020
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_404020 ], [ %387, %block_404060 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #17
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404056:                                     ; preds = %block_404020
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #17
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_404060

block_404060:                                     ; preds = %block_404060, %block_404056
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_404056 ], [ %387, %block_404060 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #17
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #17
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_404060, label %block_404076
}

; Function Attrs: noinline
define %struct.Memory* @sub_400e70_makewt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400e70:
  %state.i319 = alloca %struct.State*, align 8
  %curr_pc.i320 = alloca i64, align 8
  %memory.i321 = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i322 = alloca i8, align 1
  %SS_BASE.i323 = alloca i64, align 8
  %ES_BASE.i324 = alloca i64, align 8
  %DS_BASE.i325 = alloca i64, align 8
  %CS_BASE.i326 = alloca i64, align 8
  %STATE.i327 = alloca %struct.State*, align 8
  %MEMORY.i328 = alloca %struct.Memory*, align 8
  %_DR0.i329 = alloca i64*, align 8
  %_DR1.i330 = alloca i64*, align 8
  %_DR2.i331 = alloca i64*, align 8
  %_DR3.i332 = alloca i64*, align 8
  %_DR4.i333 = alloca i64*, align 8
  %_DR5.i334 = alloca i64*, align 8
  %_DR6.i335 = alloca i64*, align 8
  %_DR7.i336 = alloca i64*, align 8
  %CR0.i337 = alloca i64*, align 8
  %CR1.i338 = alloca i64*, align 8
  %CR2.i339 = alloca i64*, align 8
  %CR3.i340 = alloca i64*, align 8
  %CR4.i341 = alloca i64*, align 8
  %CR8.i342 = alloca i64*, align 8
  %state.i160 = alloca %struct.State*, align 8
  %curr_pc.i161 = alloca i64, align 8
  %memory.i162 = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i163 = alloca i8, align 1
  %SS_BASE.i164 = alloca i64, align 8
  %ES_BASE.i165 = alloca i64, align 8
  %DS_BASE.i166 = alloca i64, align 8
  %CS_BASE.i167 = alloca i64, align 8
  %STATE.i168 = alloca %struct.State*, align 8
  %MEMORY.i169 = alloca %struct.Memory*, align 8
  %_DR0.i170 = alloca i64*, align 8
  %_DR1.i171 = alloca i64*, align 8
  %_DR2.i172 = alloca i64*, align 8
  %_DR3.i173 = alloca i64*, align 8
  %_DR4.i174 = alloca i64*, align 8
  %_DR5.i175 = alloca i64*, align 8
  %_DR6.i176 = alloca i64*, align 8
  %_DR7.i177 = alloca i64*, align 8
  %CR0.i178 = alloca i64*, align 8
  %CR1.i179 = alloca i64*, align 8
  %CR2.i180 = alloca i64*, align 8
  %CR3.i181 = alloca i64*, align 8
  %CR4.i182 = alloca i64*, align 8
  %CR8.i183 = alloca i64*, align 8
  %state.i1 = alloca %struct.State*, align 8
  %curr_pc.i2 = alloca i64, align 8
  %memory.i3 = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i4 = alloca i8, align 1
  %SS_BASE.i5 = alloca i64, align 8
  %ES_BASE.i6 = alloca i64, align 8
  %DS_BASE.i7 = alloca i64, align 8
  %CS_BASE.i8 = alloca i64, align 8
  %STATE.i9 = alloca %struct.State*, align 8
  %MEMORY.i10 = alloca %struct.Memory*, align 8
  %_DR0.i11 = alloca i64*, align 8
  %_DR1.i12 = alloca i64*, align 8
  %_DR2.i13 = alloca i64*, align 8
  %_DR3.i14 = alloca i64*, align 8
  %_DR4.i15 = alloca i64*, align 8
  %_DR5.i16 = alloca i64*, align 8
  %_DR6.i17 = alloca i64*, align 8
  %_DR7.i18 = alloca i64*, align 8
  %CR0.i19 = alloca i64*, align 8
  %CR1.i20 = alloca i64*, align 8
  %CR2.i21 = alloca i64*, align 8
  %CR3.i22 = alloca i64*, align 8
  %CR4.i23 = alloca i64*, align 8
  %CR8.i24 = alloca i64*, align 8
  %state.i = alloca %struct.State*, align 8
  %curr_pc.i = alloca i64, align 8
  %memory.i = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i = alloca i8, align 1
  %SS_BASE.i = alloca i64, align 8
  %ES_BASE.i = alloca i64, align 8
  %DS_BASE.i = alloca i64, align 8
  %CS_BASE.i = alloca i64, align 8
  %STATE.i = alloca %struct.State*, align 8
  %MEMORY.i = alloca %struct.Memory*, align 8
  %_DR0.i = alloca i64*, align 8
  %_DR1.i = alloca i64*, align 8
  %_DR2.i = alloca i64*, align 8
  %_DR3.i = alloca i64*, align 8
  %_DR4.i = alloca i64*, align 8
  %_DR5.i = alloca i64*, align 8
  %_DR6.i = alloca i64*, align 8
  %_DR7.i = alloca i64*, align 8
  %CR0.i = alloca i64*, align 8
  %CR1.i = alloca i64*, align 8
  %CR2.i = alloca i64*, align 8
  %CR3.i = alloca i64*, align 8
  %CR4.i = alloca i64*, align 8
  %CR8.i = alloca i64*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %39 to %"class.std::bitset"*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %41 to %"class.std::bitset"*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %45 to %union.vec128_t*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %47 to %union.vec128_t*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %51 to %union.vec128_t*
  %52 = load i64, i64* %RBP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 1
  store i64 %54, i64* %PC
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %56 = load i64, i64* %55, align 8, !tbaa !2428
  %57 = add i64 %56, -8
  %58 = inttoptr i64 %57 to i64*
  store i64 %52, i64* %58
  store i64 %57, i64* %55, align 8, !tbaa !2428
  %59 = load i64, i64* %RSP
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %RBP, align 8, !tbaa !2428
  %62 = load i64, i64* %RSP
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = sub i64 %62, 64
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  %66 = icmp ult i64 %62, 64
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = trunc i64 %65 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #17
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 64, %62
  %77 = xor i64 %76, %65
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i64 %65, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i64 %65, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i64 %62, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %88
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 4
  %96 = load i32, i32* %EDI
  %97 = zext i32 %96 to i64
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %95 to i32*
  store i32 %96, i32* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 16
  %103 = load i64, i64* %RSI
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 24
  %109 = load i64, i64* %RDX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %108 to i64*
  store i64 %109, i64* %112
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 4
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %114 to i32*
  %118 = load i32, i32* %117
  %119 = sub i32 %118, 2
  %120 = icmp ult i32 %118, 2
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %121, i8* %122, align 1, !tbaa !2432
  %123 = and i32 %119, 255
  %124 = call i32 @llvm.ctpop.i32(i32 %123) #17
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %127, i8* %128, align 1, !tbaa !2446
  %129 = xor i32 %118, 2
  %130 = xor i32 %129, %119
  %131 = lshr i32 %130, 4
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %133, i8* %134, align 1, !tbaa !2447
  %135 = icmp eq i32 %119, 0
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %136, i8* %137, align 1, !tbaa !2448
  %138 = lshr i32 %119, 31
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %139, i8* %140, align 1, !tbaa !2449
  %141 = lshr i32 %118, 31
  %142 = xor i32 %138, %141
  %143 = add nuw nsw i32 %142, %141
  %144 = icmp eq i32 %143, 2
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 335
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 6
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 6
  store i64 %152, i64* %PC
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %154 = load i8, i8* %153, align 1, !tbaa !2448
  %155 = icmp ne i8 %154, 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %157 = load i8, i8* %156, align 1, !tbaa !2449
  %158 = icmp ne i8 %157, 0
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %160 = load i8, i8* %159, align 1, !tbaa !2450
  %161 = icmp ne i8 %160, 0
  %162 = xor i1 %158, %161
  %163 = or i1 %155, %162
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %166 = select i1 %163, i64 %148, i64 %150
  store i64 %166, i64* %165, align 8, !tbaa !2428
  %167 = load i8, i8* %BRANCH_TAKEN
  %168 = icmp eq i8 %167, 1
  br i1 %168, label %block_400fd6, label %block_400e8d

block_400f1d:                                     ; preds = %block_400f16, %block_400f29
  %MEMORY.0 = phi %struct.Memory* [ %2746, %block_400f16 ], [ %1266, %block_400f29 ]
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 28
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i32*
  %174 = load i32, i32* %173
  %175 = zext i32 %174 to i64
  store i64 %175, i64* %RAX, align 8, !tbaa !2428
  %176 = load i32, i32* %EAX
  %177 = zext i32 %176 to i64
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 32
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  %183 = load i32, i32* %182
  %184 = sub i32 %176, %183
  %185 = icmp ult i32 %176, %183
  %186 = zext i1 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %186, i8* %187, align 1, !tbaa !2432
  %188 = and i32 %184, 255
  %189 = call i32 @llvm.ctpop.i32(i32 %188) #17
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %192, i8* %193, align 1, !tbaa !2446
  %194 = xor i32 %183, %176
  %195 = xor i32 %194, %184
  %196 = lshr i32 %195, 4
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %198, i8* %199, align 1, !tbaa !2447
  %200 = icmp eq i32 %184, 0
  %201 = zext i1 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %201, i8* %202, align 1, !tbaa !2448
  %203 = lshr i32 %184, 31
  %204 = trunc i32 %203 to i8
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %204, i8* %205, align 1, !tbaa !2449
  %206 = lshr i32 %176, 31
  %207 = lshr i32 %183, 31
  %208 = xor i32 %207, %206
  %209 = xor i32 %203, %206
  %210 = add nuw nsw i32 %209, %208
  %211 = icmp eq i32 %210, 2
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %212, i8* %213, align 1, !tbaa !2450
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 158
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 6
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 6
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %221 = load i8, i8* %220, align 1, !tbaa !2449
  %222 = icmp ne i8 %221, 0
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %224 = load i8, i8* %223, align 1, !tbaa !2450
  %225 = icmp ne i8 %224, 0
  %226 = xor i1 %222, %225
  %227 = xor i1 %226, true
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %230 = select i1 %226, i64 %217, i64 %215
  store i64 %230, i64* %229, align 8, !tbaa !2428
  %231 = load i8, i8* %BRANCH_TAKEN
  %232 = icmp eq i8 %231, 1
  br i1 %232, label %block_400fc1, label %block_400f29

block_400fd6:                                     ; preds = %block_400fd1, %block_400e70
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400e70 ], [ %MEMORY.2, %block_400fd1 ]
  %233 = load i64, i64* %RSP
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = add i64 64, %233
  store i64 %236, i64* %RSP, align 8, !tbaa !2428
  %237 = icmp ult i64 %236, %233
  %238 = icmp ult i64 %236, 64
  %239 = or i1 %237, %238
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %240, i8* %241, align 1, !tbaa !2432
  %242 = trunc i64 %236 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #17
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = xor i64 64, %233
  %250 = xor i64 %249, %236
  %251 = lshr i64 %250, 4
  %252 = trunc i64 %251 to i8
  %253 = and i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %253, i8* %254, align 1, !tbaa !2447
  %255 = icmp eq i64 %236, 0
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %256, i8* %257, align 1, !tbaa !2448
  %258 = lshr i64 %236, 63
  %259 = trunc i64 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %259, i8* %260, align 1, !tbaa !2449
  %261 = lshr i64 %233, 63
  %262 = xor i64 %258, %261
  %263 = add nuw nsw i64 %262, %258
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %265, i8* %266, align 1, !tbaa !2450
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 1
  store i64 %268, i64* %PC
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %270 = load i64, i64* %269, align 8, !tbaa !2428
  %271 = add i64 %270, 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272
  store i64 %273, i64* %RBP, align 8, !tbaa !2428
  store i64 %271, i64* %269, align 8, !tbaa !2428
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 1
  store i64 %275, i64* %PC
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %278 = load i64, i64* %277, align 8, !tbaa !2428
  %279 = inttoptr i64 %278 to i64*
  %280 = load i64, i64* %279
  store i64 %280, i64* %276, align 8, !tbaa !2428
  %281 = add i64 %278, 8
  store i64 %281, i64* %277, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400f29:                                     ; preds = %block_400f1d
  %282 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 40
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 5
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %284 to double*
  %288 = load double, double* %287
  %289 = bitcast i8* %282 to double*
  store double %288, double* %289, align 1, !tbaa !2452
  %290 = getelementptr inbounds i8, i8* %282, i64 8
  %291 = bitcast i8* %290 to double*
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %292 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 28
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  %298 = load i32, i32* %297
  %299 = sitofp i32 %298 to double
  %300 = bitcast i8* %292 to double*
  store double %299, double* %300, align 1, !tbaa !2452
  %301 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %302 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %303 = bitcast %union.vec128_t* %XMM1 to i8*
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 4
  store i64 %305, i64* %PC
  %306 = bitcast i8* %302 to double*
  %307 = load double, double* %306, align 1
  %308 = getelementptr inbounds i8, i8* %302, i64 8
  %309 = bitcast i8* %308 to i64*
  %310 = load i64, i64* %309, align 1
  %311 = bitcast i8* %303 to double*
  %312 = load double, double* %311, align 1
  %313 = fmul double %307, %312
  %314 = bitcast i8* %301 to double*
  store double %313, double* %314, align 1, !tbaa !2452
  %315 = getelementptr inbounds i8, i8* %301, i64 8
  %316 = bitcast i8* %315 to i64*
  store i64 %310, i64* %316, align 1, !tbaa !2452
  %317 = load i64, i64* %PC
  %318 = sub i64 %317, 2087
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 5
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 5
  store i64 %322, i64* %PC
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %324 = load i64, i64* %323, align 8, !tbaa !2428
  %325 = add i64 %324, -8
  %326 = inttoptr i64 %325 to i64*
  store i64 %320, i64* %326
  store i64 %325, i64* %323, align 8, !tbaa !2428
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %318, i64* %327, align 8, !tbaa !2428
  %328 = load i64, i64* %PC
  %329 = bitcast %struct.State** %state.i319 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %329)
  %330 = bitcast i64* %curr_pc.i320 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %330)
  %331 = bitcast %struct.Memory** %memory.i321 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %331)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i322)
  %332 = bitcast i64* %SS_BASE.i323 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %332)
  %333 = bitcast i64* %ES_BASE.i324 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %333)
  %334 = bitcast i64* %DS_BASE.i325 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %334)
  %335 = bitcast i64* %CS_BASE.i326 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %335)
  %336 = bitcast %struct.State** %STATE.i327 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %336)
  %337 = bitcast %struct.Memory** %MEMORY.i328 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %337)
  %338 = bitcast i64** %_DR0.i329 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %338)
  %339 = bitcast i64** %_DR1.i330 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %339)
  %340 = bitcast i64** %_DR2.i331 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %340)
  %341 = bitcast i64** %_DR3.i332 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %341)
  %342 = bitcast i64** %_DR4.i333 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %342)
  %343 = bitcast i64** %_DR5.i334 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %343)
  %344 = bitcast i64** %_DR6.i335 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %344)
  %345 = bitcast i64** %_DR7.i336 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %345)
  %346 = bitcast i64** %CR0.i337 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %346)
  %347 = bitcast i64** %CR1.i338 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %347)
  %348 = bitcast i64** %CR2.i339 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %348)
  %349 = bitcast i64** %CR3.i340 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %349)
  %350 = bitcast i64** %CR4.i341 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %350)
  %351 = bitcast i64** %CR8.i342 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %351)
  store %struct.State* %0, %struct.State** %state.i319, align 8, !noalias !2455
  store i64 %328, i64* %curr_pc.i320, align 8, !noalias !2455
  store %struct.Memory* %MEMORY.0, %struct.Memory** %memory.i321, align 8, !noalias !2455
  store i8 0, i8* %BRANCH_TAKEN.i322, align 1, !noalias !2455
  store i64 0, i64* %SS_BASE.i323, align 8, !noalias !2455
  store i64 0, i64* %ES_BASE.i324, align 8, !noalias !2455
  store i64 0, i64* %DS_BASE.i325, align 8, !noalias !2455
  store i64 0, i64* %CS_BASE.i326, align 8, !noalias !2455
  store %struct.State* %0, %struct.State** %STATE.i327, align 8, !noalias !2455
  store %struct.Memory* %MEMORY.0, %struct.Memory** %MEMORY.i328, align 8, !noalias !2455
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %353 = getelementptr inbounds %struct.GPR, %struct.GPR* %352, i32 0, i32 33
  %354 = getelementptr inbounds %struct.Reg, %struct.Reg* %353, i32 0, i32 0
  %PC.i343 = bitcast %union.anon* %354 to i64*
  store i64 %328, i64* %PC.i343, align 8, !alias.scope !2459, !noalias !2460
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %356 = getelementptr inbounds %struct.GPR, %struct.GPR* %355, i32 0, i32 1
  %357 = getelementptr inbounds %struct.Reg, %struct.Reg* %356, i32 0, i32 0
  %358 = bitcast %union.anon* %357 to %struct.anon.2*
  %AH.i344 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %358, i32 0, i32 1
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %360 = getelementptr inbounds %struct.GPR, %struct.GPR* %359, i32 0, i32 3
  %361 = getelementptr inbounds %struct.Reg, %struct.Reg* %360, i32 0, i32 0
  %362 = bitcast %union.anon* %361 to %struct.anon.2*
  %BH.i345 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %362, i32 0, i32 1
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %364 = getelementptr inbounds %struct.GPR, %struct.GPR* %363, i32 0, i32 5
  %365 = getelementptr inbounds %struct.Reg, %struct.Reg* %364, i32 0, i32 0
  %366 = bitcast %union.anon* %365 to %struct.anon.2*
  %CH.i346 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %366, i32 0, i32 1
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %368 = getelementptr inbounds %struct.GPR, %struct.GPR* %367, i32 0, i32 7
  %369 = getelementptr inbounds %struct.Reg, %struct.Reg* %368, i32 0, i32 0
  %370 = bitcast %union.anon* %369 to %struct.anon.2*
  %DH.i347 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %370, i32 0, i32 1
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %372 = getelementptr inbounds %struct.GPR, %struct.GPR* %371, i32 0, i32 1
  %373 = getelementptr inbounds %struct.Reg, %struct.Reg* %372, i32 0, i32 0
  %374 = bitcast %union.anon* %373 to %struct.anon.2*
  %AL.i348 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %374, i32 0, i32 0
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %376 = getelementptr inbounds %struct.GPR, %struct.GPR* %375, i32 0, i32 3
  %377 = getelementptr inbounds %struct.Reg, %struct.Reg* %376, i32 0, i32 0
  %378 = bitcast %union.anon* %377 to %struct.anon.2*
  %BL.i349 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %378, i32 0, i32 0
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %380 = getelementptr inbounds %struct.GPR, %struct.GPR* %379, i32 0, i32 5
  %381 = getelementptr inbounds %struct.Reg, %struct.Reg* %380, i32 0, i32 0
  %382 = bitcast %union.anon* %381 to %struct.anon.2*
  %CL.i350 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %382, i32 0, i32 0
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %384 = getelementptr inbounds %struct.GPR, %struct.GPR* %383, i32 0, i32 7
  %385 = getelementptr inbounds %struct.Reg, %struct.Reg* %384, i32 0, i32 0
  %386 = bitcast %union.anon* %385 to %struct.anon.2*
  %DL.i351 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %386, i32 0, i32 0
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %388 = getelementptr inbounds %struct.GPR, %struct.GPR* %387, i32 0, i32 9
  %389 = getelementptr inbounds %struct.Reg, %struct.Reg* %388, i32 0, i32 0
  %390 = bitcast %union.anon* %389 to %struct.anon.2*
  %SIL.i352 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %390, i32 0, i32 0
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %392 = getelementptr inbounds %struct.GPR, %struct.GPR* %391, i32 0, i32 11
  %393 = getelementptr inbounds %struct.Reg, %struct.Reg* %392, i32 0, i32 0
  %394 = bitcast %union.anon* %393 to %struct.anon.2*
  %DIL.i353 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %394, i32 0, i32 0
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %396 = getelementptr inbounds %struct.GPR, %struct.GPR* %395, i32 0, i32 13
  %397 = getelementptr inbounds %struct.Reg, %struct.Reg* %396, i32 0, i32 0
  %398 = bitcast %union.anon* %397 to %struct.anon.2*
  %SPL.i354 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %398, i32 0, i32 0
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %400 = getelementptr inbounds %struct.GPR, %struct.GPR* %399, i32 0, i32 15
  %401 = getelementptr inbounds %struct.Reg, %struct.Reg* %400, i32 0, i32 0
  %402 = bitcast %union.anon* %401 to %struct.anon.2*
  %BPL.i355 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %402, i32 0, i32 0
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %404 = getelementptr inbounds %struct.GPR, %struct.GPR* %403, i32 0, i32 17
  %405 = getelementptr inbounds %struct.Reg, %struct.Reg* %404, i32 0, i32 0
  %406 = bitcast %union.anon* %405 to %struct.anon.2*
  %R8B.i356 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %406, i32 0, i32 0
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %408 = getelementptr inbounds %struct.GPR, %struct.GPR* %407, i32 0, i32 19
  %409 = getelementptr inbounds %struct.Reg, %struct.Reg* %408, i32 0, i32 0
  %410 = bitcast %union.anon* %409 to %struct.anon.2*
  %R9B.i357 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %410, i32 0, i32 0
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %412 = getelementptr inbounds %struct.GPR, %struct.GPR* %411, i32 0, i32 21
  %413 = getelementptr inbounds %struct.Reg, %struct.Reg* %412, i32 0, i32 0
  %414 = bitcast %union.anon* %413 to %struct.anon.2*
  %R10B.i358 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %414, i32 0, i32 0
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %416 = getelementptr inbounds %struct.GPR, %struct.GPR* %415, i32 0, i32 23
  %417 = getelementptr inbounds %struct.Reg, %struct.Reg* %416, i32 0, i32 0
  %418 = bitcast %union.anon* %417 to %struct.anon.2*
  %R11B.i359 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %418, i32 0, i32 0
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %420 = getelementptr inbounds %struct.GPR, %struct.GPR* %419, i32 0, i32 25
  %421 = getelementptr inbounds %struct.Reg, %struct.Reg* %420, i32 0, i32 0
  %422 = bitcast %union.anon* %421 to %struct.anon.2*
  %R12B.i360 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %422, i32 0, i32 0
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %424 = getelementptr inbounds %struct.GPR, %struct.GPR* %423, i32 0, i32 27
  %425 = getelementptr inbounds %struct.Reg, %struct.Reg* %424, i32 0, i32 0
  %426 = bitcast %union.anon* %425 to %struct.anon.2*
  %R13B.i361 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %426, i32 0, i32 0
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %428 = getelementptr inbounds %struct.GPR, %struct.GPR* %427, i32 0, i32 29
  %429 = getelementptr inbounds %struct.Reg, %struct.Reg* %428, i32 0, i32 0
  %430 = bitcast %union.anon* %429 to %struct.anon.2*
  %R14B.i362 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %430, i32 0, i32 0
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %432 = getelementptr inbounds %struct.GPR, %struct.GPR* %431, i32 0, i32 31
  %433 = getelementptr inbounds %struct.Reg, %struct.Reg* %432, i32 0, i32 0
  %434 = bitcast %union.anon* %433 to %struct.anon.2*
  %R15B.i363 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %434, i32 0, i32 0
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %436 = getelementptr inbounds %struct.GPR, %struct.GPR* %435, i32 0, i32 1
  %437 = getelementptr inbounds %struct.Reg, %struct.Reg* %436, i32 0, i32 0
  %AX.i364 = bitcast %union.anon* %437 to i16*
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %439 = getelementptr inbounds %struct.GPR, %struct.GPR* %438, i32 0, i32 3
  %440 = getelementptr inbounds %struct.Reg, %struct.Reg* %439, i32 0, i32 0
  %BX.i365 = bitcast %union.anon* %440 to i16*
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %442 = getelementptr inbounds %struct.GPR, %struct.GPR* %441, i32 0, i32 5
  %443 = getelementptr inbounds %struct.Reg, %struct.Reg* %442, i32 0, i32 0
  %CX.i366 = bitcast %union.anon* %443 to i16*
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %445 = getelementptr inbounds %struct.GPR, %struct.GPR* %444, i32 0, i32 7
  %446 = getelementptr inbounds %struct.Reg, %struct.Reg* %445, i32 0, i32 0
  %DX.i367 = bitcast %union.anon* %446 to i16*
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %448 = getelementptr inbounds %struct.GPR, %struct.GPR* %447, i32 0, i32 9
  %449 = getelementptr inbounds %struct.Reg, %struct.Reg* %448, i32 0, i32 0
  %SI.i368 = bitcast %union.anon* %449 to i16*
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %451 = getelementptr inbounds %struct.GPR, %struct.GPR* %450, i32 0, i32 11
  %452 = getelementptr inbounds %struct.Reg, %struct.Reg* %451, i32 0, i32 0
  %DI.i369 = bitcast %union.anon* %452 to i16*
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %454 = getelementptr inbounds %struct.GPR, %struct.GPR* %453, i32 0, i32 13
  %455 = getelementptr inbounds %struct.Reg, %struct.Reg* %454, i32 0, i32 0
  %SP.i370 = bitcast %union.anon* %455 to i16*
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %457 = getelementptr inbounds %struct.GPR, %struct.GPR* %456, i32 0, i32 15
  %458 = getelementptr inbounds %struct.Reg, %struct.Reg* %457, i32 0, i32 0
  %BP.i371 = bitcast %union.anon* %458 to i16*
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %460 = getelementptr inbounds %struct.GPR, %struct.GPR* %459, i32 0, i32 17
  %461 = getelementptr inbounds %struct.Reg, %struct.Reg* %460, i32 0, i32 0
  %R8W.i372 = bitcast %union.anon* %461 to i16*
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %463 = getelementptr inbounds %struct.GPR, %struct.GPR* %462, i32 0, i32 19
  %464 = getelementptr inbounds %struct.Reg, %struct.Reg* %463, i32 0, i32 0
  %R9W.i373 = bitcast %union.anon* %464 to i16*
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %466 = getelementptr inbounds %struct.GPR, %struct.GPR* %465, i32 0, i32 21
  %467 = getelementptr inbounds %struct.Reg, %struct.Reg* %466, i32 0, i32 0
  %R10W.i374 = bitcast %union.anon* %467 to i16*
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %469 = getelementptr inbounds %struct.GPR, %struct.GPR* %468, i32 0, i32 23
  %470 = getelementptr inbounds %struct.Reg, %struct.Reg* %469, i32 0, i32 0
  %R11W.i375 = bitcast %union.anon* %470 to i16*
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %472 = getelementptr inbounds %struct.GPR, %struct.GPR* %471, i32 0, i32 25
  %473 = getelementptr inbounds %struct.Reg, %struct.Reg* %472, i32 0, i32 0
  %R12W.i376 = bitcast %union.anon* %473 to i16*
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %475 = getelementptr inbounds %struct.GPR, %struct.GPR* %474, i32 0, i32 27
  %476 = getelementptr inbounds %struct.Reg, %struct.Reg* %475, i32 0, i32 0
  %R13W.i377 = bitcast %union.anon* %476 to i16*
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %478 = getelementptr inbounds %struct.GPR, %struct.GPR* %477, i32 0, i32 29
  %479 = getelementptr inbounds %struct.Reg, %struct.Reg* %478, i32 0, i32 0
  %R14W.i378 = bitcast %union.anon* %479 to i16*
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %481 = getelementptr inbounds %struct.GPR, %struct.GPR* %480, i32 0, i32 31
  %482 = getelementptr inbounds %struct.Reg, %struct.Reg* %481, i32 0, i32 0
  %R15W.i379 = bitcast %union.anon* %482 to i16*
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %484 = getelementptr inbounds %struct.GPR, %struct.GPR* %483, i32 0, i32 33
  %485 = getelementptr inbounds %struct.Reg, %struct.Reg* %484, i32 0, i32 0
  %IP.i380 = bitcast %union.anon* %485 to i16*
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %487 = getelementptr inbounds %struct.GPR, %struct.GPR* %486, i32 0, i32 1
  %488 = getelementptr inbounds %struct.Reg, %struct.Reg* %487, i32 0, i32 0
  %EAX.i381 = bitcast %union.anon* %488 to i32*
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %490 = getelementptr inbounds %struct.GPR, %struct.GPR* %489, i32 0, i32 3
  %491 = getelementptr inbounds %struct.Reg, %struct.Reg* %490, i32 0, i32 0
  %EBX.i382 = bitcast %union.anon* %491 to i32*
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %493 = getelementptr inbounds %struct.GPR, %struct.GPR* %492, i32 0, i32 5
  %494 = getelementptr inbounds %struct.Reg, %struct.Reg* %493, i32 0, i32 0
  %ECX.i383 = bitcast %union.anon* %494 to i32*
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %496 = getelementptr inbounds %struct.GPR, %struct.GPR* %495, i32 0, i32 7
  %497 = getelementptr inbounds %struct.Reg, %struct.Reg* %496, i32 0, i32 0
  %EDX.i384 = bitcast %union.anon* %497 to i32*
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %499 = getelementptr inbounds %struct.GPR, %struct.GPR* %498, i32 0, i32 9
  %500 = getelementptr inbounds %struct.Reg, %struct.Reg* %499, i32 0, i32 0
  %ESI.i385 = bitcast %union.anon* %500 to i32*
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %502 = getelementptr inbounds %struct.GPR, %struct.GPR* %501, i32 0, i32 11
  %503 = getelementptr inbounds %struct.Reg, %struct.Reg* %502, i32 0, i32 0
  %EDI.i386 = bitcast %union.anon* %503 to i32*
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %505 = getelementptr inbounds %struct.GPR, %struct.GPR* %504, i32 0, i32 13
  %506 = getelementptr inbounds %struct.Reg, %struct.Reg* %505, i32 0, i32 0
  %ESP.i387 = bitcast %union.anon* %506 to i32*
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %508 = getelementptr inbounds %struct.GPR, %struct.GPR* %507, i32 0, i32 15
  %509 = getelementptr inbounds %struct.Reg, %struct.Reg* %508, i32 0, i32 0
  %EBP.i388 = bitcast %union.anon* %509 to i32*
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %511 = getelementptr inbounds %struct.GPR, %struct.GPR* %510, i32 0, i32 33
  %512 = getelementptr inbounds %struct.Reg, %struct.Reg* %511, i32 0, i32 0
  %EIP.i389 = bitcast %union.anon* %512 to i32*
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %514 = getelementptr inbounds %struct.GPR, %struct.GPR* %513, i32 0, i32 17
  %515 = getelementptr inbounds %struct.Reg, %struct.Reg* %514, i32 0, i32 0
  %R8D.i390 = bitcast %union.anon* %515 to i32*
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %517 = getelementptr inbounds %struct.GPR, %struct.GPR* %516, i32 0, i32 19
  %518 = getelementptr inbounds %struct.Reg, %struct.Reg* %517, i32 0, i32 0
  %R9D.i391 = bitcast %union.anon* %518 to i32*
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %520 = getelementptr inbounds %struct.GPR, %struct.GPR* %519, i32 0, i32 21
  %521 = getelementptr inbounds %struct.Reg, %struct.Reg* %520, i32 0, i32 0
  %R10D.i392 = bitcast %union.anon* %521 to i32*
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %523 = getelementptr inbounds %struct.GPR, %struct.GPR* %522, i32 0, i32 23
  %524 = getelementptr inbounds %struct.Reg, %struct.Reg* %523, i32 0, i32 0
  %R11D.i393 = bitcast %union.anon* %524 to i32*
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %526 = getelementptr inbounds %struct.GPR, %struct.GPR* %525, i32 0, i32 25
  %527 = getelementptr inbounds %struct.Reg, %struct.Reg* %526, i32 0, i32 0
  %R12D.i394 = bitcast %union.anon* %527 to i32*
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %529 = getelementptr inbounds %struct.GPR, %struct.GPR* %528, i32 0, i32 27
  %530 = getelementptr inbounds %struct.Reg, %struct.Reg* %529, i32 0, i32 0
  %R13D.i395 = bitcast %union.anon* %530 to i32*
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %532 = getelementptr inbounds %struct.GPR, %struct.GPR* %531, i32 0, i32 29
  %533 = getelementptr inbounds %struct.Reg, %struct.Reg* %532, i32 0, i32 0
  %R14D.i396 = bitcast %union.anon* %533 to i32*
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %535 = getelementptr inbounds %struct.GPR, %struct.GPR* %534, i32 0, i32 31
  %536 = getelementptr inbounds %struct.Reg, %struct.Reg* %535, i32 0, i32 0
  %R15D.i397 = bitcast %union.anon* %536 to i32*
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %538 = getelementptr inbounds %struct.GPR, %struct.GPR* %537, i32 0, i32 1
  %539 = getelementptr inbounds %struct.Reg, %struct.Reg* %538, i32 0, i32 0
  %RAX.i398 = bitcast %union.anon* %539 to i64*
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %541 = getelementptr inbounds %struct.GPR, %struct.GPR* %540, i32 0, i32 3
  %542 = getelementptr inbounds %struct.Reg, %struct.Reg* %541, i32 0, i32 0
  %RBX.i399 = bitcast %union.anon* %542 to i64*
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %544 = getelementptr inbounds %struct.GPR, %struct.GPR* %543, i32 0, i32 5
  %545 = getelementptr inbounds %struct.Reg, %struct.Reg* %544, i32 0, i32 0
  %RCX.i400 = bitcast %union.anon* %545 to i64*
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %547 = getelementptr inbounds %struct.GPR, %struct.GPR* %546, i32 0, i32 7
  %548 = getelementptr inbounds %struct.Reg, %struct.Reg* %547, i32 0, i32 0
  %RDX.i401 = bitcast %union.anon* %548 to i64*
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %550 = getelementptr inbounds %struct.GPR, %struct.GPR* %549, i32 0, i32 9
  %551 = getelementptr inbounds %struct.Reg, %struct.Reg* %550, i32 0, i32 0
  %RSI.i402 = bitcast %union.anon* %551 to i64*
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %553 = getelementptr inbounds %struct.GPR, %struct.GPR* %552, i32 0, i32 11
  %554 = getelementptr inbounds %struct.Reg, %struct.Reg* %553, i32 0, i32 0
  %RDI.i403 = bitcast %union.anon* %554 to i64*
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %556 = getelementptr inbounds %struct.GPR, %struct.GPR* %555, i32 0, i32 13
  %557 = getelementptr inbounds %struct.Reg, %struct.Reg* %556, i32 0, i32 0
  %RSP.i404 = bitcast %union.anon* %557 to i64*
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %559 = getelementptr inbounds %struct.GPR, %struct.GPR* %558, i32 0, i32 15
  %560 = getelementptr inbounds %struct.Reg, %struct.Reg* %559, i32 0, i32 0
  %RBP.i405 = bitcast %union.anon* %560 to i64*
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %562 = getelementptr inbounds %struct.GPR, %struct.GPR* %561, i32 0, i32 17
  %563 = getelementptr inbounds %struct.Reg, %struct.Reg* %562, i32 0, i32 0
  %R8.i406 = bitcast %union.anon* %563 to i64*
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %565 = getelementptr inbounds %struct.GPR, %struct.GPR* %564, i32 0, i32 19
  %566 = getelementptr inbounds %struct.Reg, %struct.Reg* %565, i32 0, i32 0
  %R9.i407 = bitcast %union.anon* %566 to i64*
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %568 = getelementptr inbounds %struct.GPR, %struct.GPR* %567, i32 0, i32 21
  %569 = getelementptr inbounds %struct.Reg, %struct.Reg* %568, i32 0, i32 0
  %R10.i408 = bitcast %union.anon* %569 to i64*
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %571 = getelementptr inbounds %struct.GPR, %struct.GPR* %570, i32 0, i32 23
  %572 = getelementptr inbounds %struct.Reg, %struct.Reg* %571, i32 0, i32 0
  %R11.i409 = bitcast %union.anon* %572 to i64*
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %574 = getelementptr inbounds %struct.GPR, %struct.GPR* %573, i32 0, i32 25
  %575 = getelementptr inbounds %struct.Reg, %struct.Reg* %574, i32 0, i32 0
  %R12.i410 = bitcast %union.anon* %575 to i64*
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %577 = getelementptr inbounds %struct.GPR, %struct.GPR* %576, i32 0, i32 27
  %578 = getelementptr inbounds %struct.Reg, %struct.Reg* %577, i32 0, i32 0
  %R13.i411 = bitcast %union.anon* %578 to i64*
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %580 = getelementptr inbounds %struct.GPR, %struct.GPR* %579, i32 0, i32 29
  %581 = getelementptr inbounds %struct.Reg, %struct.Reg* %580, i32 0, i32 0
  %R14.i412 = bitcast %union.anon* %581 to i64*
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %583 = getelementptr inbounds %struct.GPR, %struct.GPR* %582, i32 0, i32 31
  %584 = getelementptr inbounds %struct.Reg, %struct.Reg* %583, i32 0, i32 0
  %R15.i413 = bitcast %union.anon* %584 to i64*
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %586 = getelementptr inbounds %struct.GPR, %struct.GPR* %585, i32 0, i32 33
  %587 = getelementptr inbounds %struct.Reg, %struct.Reg* %586, i32 0, i32 0
  %RIP.i414 = bitcast %union.anon* %587 to i64*
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %589 = getelementptr inbounds %struct.Segments, %struct.Segments* %588, i32 0, i32 1
  %SS.i415 = bitcast %union.SegmentSelector* %589 to i16*
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %591 = getelementptr inbounds %struct.Segments, %struct.Segments* %590, i32 0, i32 3
  %ES.i416 = bitcast %union.SegmentSelector* %591 to i16*
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %593 = getelementptr inbounds %struct.Segments, %struct.Segments* %592, i32 0, i32 5
  %GS.i417 = bitcast %union.SegmentSelector* %593 to i16*
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %595 = getelementptr inbounds %struct.Segments, %struct.Segments* %594, i32 0, i32 7
  %FS.i418 = bitcast %union.SegmentSelector* %595 to i16*
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %597 = getelementptr inbounds %struct.Segments, %struct.Segments* %596, i32 0, i32 9
  %DS.i419 = bitcast %union.SegmentSelector* %597 to i16*
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %599 = getelementptr inbounds %struct.Segments, %struct.Segments* %598, i32 0, i32 11
  %CS.i420 = bitcast %union.SegmentSelector* %599 to i16*
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %601 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %600, i32 0, i32 5
  %602 = getelementptr inbounds %struct.Reg, %struct.Reg* %601, i32 0, i32 0
  %GS_BASE.i421 = bitcast %union.anon* %602 to i64*
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %604 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %603, i32 0, i32 7
  %605 = getelementptr inbounds %struct.Reg, %struct.Reg* %604, i32 0, i32 0
  %FS_BASE.i422 = bitcast %union.anon* %605 to i64*
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %607 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %606, i64 0, i64 0
  %YMM0.i423 = bitcast %union.VectorReg* %607 to %"class.std::bitset"*
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %609 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %608, i64 0, i64 1
  %YMM1.i424 = bitcast %union.VectorReg* %609 to %"class.std::bitset"*
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %611 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %610, i64 0, i64 2
  %YMM2.i425 = bitcast %union.VectorReg* %611 to %"class.std::bitset"*
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %613 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %612, i64 0, i64 3
  %YMM3.i426 = bitcast %union.VectorReg* %613 to %"class.std::bitset"*
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %615 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %614, i64 0, i64 4
  %YMM4.i427 = bitcast %union.VectorReg* %615 to %"class.std::bitset"*
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %617 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %616, i64 0, i64 5
  %YMM5.i428 = bitcast %union.VectorReg* %617 to %"class.std::bitset"*
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %619 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %618, i64 0, i64 6
  %YMM6.i429 = bitcast %union.VectorReg* %619 to %"class.std::bitset"*
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %621 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %620, i64 0, i64 7
  %YMM7.i430 = bitcast %union.VectorReg* %621 to %"class.std::bitset"*
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %623 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %622, i64 0, i64 8
  %YMM8.i431 = bitcast %union.VectorReg* %623 to %"class.std::bitset"*
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %625 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %624, i64 0, i64 9
  %YMM9.i432 = bitcast %union.VectorReg* %625 to %"class.std::bitset"*
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %627 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %626, i64 0, i64 10
  %YMM10.i433 = bitcast %union.VectorReg* %627 to %"class.std::bitset"*
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %629 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %628, i64 0, i64 11
  %YMM11.i434 = bitcast %union.VectorReg* %629 to %"class.std::bitset"*
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %631 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %630, i64 0, i64 12
  %YMM12.i435 = bitcast %union.VectorReg* %631 to %"class.std::bitset"*
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %633 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %632, i64 0, i64 13
  %YMM13.i436 = bitcast %union.VectorReg* %633 to %"class.std::bitset"*
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %635 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %634, i64 0, i64 14
  %YMM14.i437 = bitcast %union.VectorReg* %635 to %"class.std::bitset"*
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %637 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %636, i64 0, i64 15
  %YMM15.i438 = bitcast %union.VectorReg* %637 to %"class.std::bitset"*
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %639 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %638, i64 0, i64 0
  %XMM0.i439 = bitcast %union.VectorReg* %639 to %union.vec128_t*
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %641 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %640, i64 0, i64 1
  %XMM1.i440 = bitcast %union.VectorReg* %641 to %union.vec128_t*
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %643 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %642, i64 0, i64 2
  %XMM2.i441 = bitcast %union.VectorReg* %643 to %union.vec128_t*
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %645 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %644, i64 0, i64 3
  %XMM3.i442 = bitcast %union.VectorReg* %645 to %union.vec128_t*
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %647 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %646, i64 0, i64 4
  %XMM4.i443 = bitcast %union.VectorReg* %647 to %union.vec128_t*
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %649 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %648, i64 0, i64 5
  %XMM5.i444 = bitcast %union.VectorReg* %649 to %union.vec128_t*
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %651 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %650, i64 0, i64 6
  %XMM6.i445 = bitcast %union.VectorReg* %651 to %union.vec128_t*
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %653 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %652, i64 0, i64 7
  %XMM7.i446 = bitcast %union.VectorReg* %653 to %union.vec128_t*
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %655 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %654, i64 0, i64 8
  %XMM8.i447 = bitcast %union.VectorReg* %655 to %union.vec128_t*
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %657 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %656, i64 0, i64 9
  %XMM9.i448 = bitcast %union.VectorReg* %657 to %union.vec128_t*
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %659 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %658, i64 0, i64 10
  %XMM10.i449 = bitcast %union.VectorReg* %659 to %union.vec128_t*
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %661 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %660, i64 0, i64 11
  %XMM11.i450 = bitcast %union.VectorReg* %661 to %union.vec128_t*
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %663 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %662, i64 0, i64 12
  %XMM12.i451 = bitcast %union.VectorReg* %663 to %union.vec128_t*
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %665 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %664, i64 0, i64 13
  %XMM13.i452 = bitcast %union.VectorReg* %665 to %union.vec128_t*
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %667 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %666, i64 0, i64 14
  %XMM14.i453 = bitcast %union.VectorReg* %667 to %union.vec128_t*
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %669 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %668, i64 0, i64 15
  %XMM15.i454 = bitcast %union.VectorReg* %669 to %union.vec128_t*
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %671 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %670, i32 0, i32 0
  %672 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %671, i64 0, i64 0
  %ST0.i455 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %672, i32 0, i32 1
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %674 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %673, i32 0, i32 0
  %675 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %674, i64 0, i64 1
  %ST1.i456 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %675, i32 0, i32 1
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %677 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %676, i32 0, i32 0
  %678 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %677, i64 0, i64 2
  %ST2.i457 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %678, i32 0, i32 1
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %680 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %679, i32 0, i32 0
  %681 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %680, i64 0, i64 3
  %ST3.i458 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %681, i32 0, i32 1
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %683 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %682, i32 0, i32 0
  %684 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %683, i64 0, i64 4
  %ST4.i459 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %684, i32 0, i32 1
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %686 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %685, i32 0, i32 0
  %687 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %686, i64 0, i64 5
  %ST5.i460 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %687, i32 0, i32 1
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %689 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %688, i32 0, i32 0
  %690 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %689, i64 0, i64 6
  %ST6.i461 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %690, i32 0, i32 1
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %692 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %691, i32 0, i32 0
  %693 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %692, i64 0, i64 7
  %ST7.i462 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %693, i32 0, i32 1
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %695 = getelementptr inbounds %struct.MMX, %struct.MMX* %694, i32 0, i32 0
  %696 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %695, i64 0, i64 0
  %697 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %696, i32 0, i32 1
  %698 = bitcast %union.vec64_t* %697 to %struct.uint64v1_t*
  %699 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %698, i32 0, i32 0
  %MM0.i463 = getelementptr inbounds [1 x i64], [1 x i64]* %699, i64 0, i64 0
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %701 = getelementptr inbounds %struct.MMX, %struct.MMX* %700, i32 0, i32 0
  %702 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %701, i64 0, i64 1
  %703 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %702, i32 0, i32 1
  %704 = bitcast %union.vec64_t* %703 to %struct.uint64v1_t*
  %705 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %704, i32 0, i32 0
  %MM1.i464 = getelementptr inbounds [1 x i64], [1 x i64]* %705, i64 0, i64 0
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %707 = getelementptr inbounds %struct.MMX, %struct.MMX* %706, i32 0, i32 0
  %708 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %707, i64 0, i64 2
  %709 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %708, i32 0, i32 1
  %710 = bitcast %union.vec64_t* %709 to %struct.uint64v1_t*
  %711 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %710, i32 0, i32 0
  %MM2.i465 = getelementptr inbounds [1 x i64], [1 x i64]* %711, i64 0, i64 0
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %713 = getelementptr inbounds %struct.MMX, %struct.MMX* %712, i32 0, i32 0
  %714 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %713, i64 0, i64 3
  %715 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %714, i32 0, i32 1
  %716 = bitcast %union.vec64_t* %715 to %struct.uint64v1_t*
  %717 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %716, i32 0, i32 0
  %MM3.i466 = getelementptr inbounds [1 x i64], [1 x i64]* %717, i64 0, i64 0
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %719 = getelementptr inbounds %struct.MMX, %struct.MMX* %718, i32 0, i32 0
  %720 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %719, i64 0, i64 4
  %721 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %720, i32 0, i32 1
  %722 = bitcast %union.vec64_t* %721 to %struct.uint64v1_t*
  %723 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %722, i32 0, i32 0
  %MM4.i467 = getelementptr inbounds [1 x i64], [1 x i64]* %723, i64 0, i64 0
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %725 = getelementptr inbounds %struct.MMX, %struct.MMX* %724, i32 0, i32 0
  %726 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %725, i64 0, i64 5
  %727 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %726, i32 0, i32 1
  %728 = bitcast %union.vec64_t* %727 to %struct.uint64v1_t*
  %729 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %728, i32 0, i32 0
  %MM5.i468 = getelementptr inbounds [1 x i64], [1 x i64]* %729, i64 0, i64 0
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %731 = getelementptr inbounds %struct.MMX, %struct.MMX* %730, i32 0, i32 0
  %732 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %731, i64 0, i64 6
  %733 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %732, i32 0, i32 1
  %734 = bitcast %union.vec64_t* %733 to %struct.uint64v1_t*
  %735 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %734, i32 0, i32 0
  %MM6.i469 = getelementptr inbounds [1 x i64], [1 x i64]* %735, i64 0, i64 0
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %737 = getelementptr inbounds %struct.MMX, %struct.MMX* %736, i32 0, i32 0
  %738 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %737, i64 0, i64 7
  %739 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %738, i32 0, i32 1
  %740 = bitcast %union.vec64_t* %739 to %struct.uint64v1_t*
  %741 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %740, i32 0, i32 0
  %MM7.i470 = getelementptr inbounds [1 x i64], [1 x i64]* %741, i64 0, i64 0
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i471 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %742, i32 0, i32 5
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i472 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %743, i32 0, i32 1
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i473 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %744, i32 0, i32 11
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i474 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %745, i32 0, i32 13
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i475 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %746, i32 0, i32 3
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i476 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %747, i32 0, i32 9
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i477 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %748, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i329, align 8, !noalias !2455
  store i64* @DR1, i64** %_DR1.i330, align 8, !noalias !2455
  store i64* @DR2, i64** %_DR2.i331, align 8, !noalias !2455
  store i64* @DR3, i64** %_DR3.i332, align 8, !noalias !2455
  store i64* @DR4, i64** %_DR4.i333, align 8, !noalias !2455
  store i64* @DR5, i64** %_DR5.i334, align 8, !noalias !2455
  store i64* @DR6, i64** %_DR6.i335, align 8, !noalias !2455
  store i64* @DR7, i64** %_DR7.i336, align 8, !noalias !2455
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i337, align 8, !noalias !2455
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i338, align 8, !noalias !2455
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i339, align 8, !noalias !2455
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i340, align 8, !noalias !2455
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i341, align 8, !noalias !2455
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i342, align 8, !noalias !2455
  %749 = bitcast %"class.std::bitset"* %YMM0.i423 to double*
  %750 = load double, double* %749, !alias.scope !2459, !noalias !2460
  %751 = load i64, i64* %RSP.i404, !alias.scope !2459, !noalias !2460
  %752 = load %struct.Memory*, %struct.Memory** %MEMORY.i328, !noalias !2455
  %753 = inttoptr i64 %751 to i64*
  %754 = load i64, i64* %753
  store i64 %754, i64* %PC.i343, !alias.scope !2459, !noalias !2460
  %755 = add i64 %751, 8
  store i64 %755, i64* %RSP.i404, !alias.scope !2459, !noalias !2460
  %756 = call double @cos(double %750)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i423, !alias.scope !2459, !noalias !2460
  %757 = bitcast %"class.std::bitset"* %YMM0.i423 to double*
  store double %756, double* %757, !alias.scope !2459, !noalias !2460
  %758 = load %struct.Memory*, %struct.Memory** %MEMORY.i328, !noalias !2455
  %759 = bitcast %struct.State** %state.i319 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %759)
  %760 = bitcast i64* %curr_pc.i320 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %760)
  %761 = bitcast %struct.Memory** %memory.i321 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %761)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i322)
  %762 = bitcast i64* %SS_BASE.i323 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %762)
  %763 = bitcast i64* %ES_BASE.i324 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %763)
  %764 = bitcast i64* %DS_BASE.i325 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %764)
  %765 = bitcast i64* %CS_BASE.i326 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %765)
  %766 = bitcast %struct.State** %STATE.i327 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %766)
  %767 = bitcast %struct.Memory** %MEMORY.i328 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %767)
  %768 = bitcast i64** %_DR0.i329 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %768)
  %769 = bitcast i64** %_DR1.i330 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %769)
  %770 = bitcast i64** %_DR2.i331 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %770)
  %771 = bitcast i64** %_DR3.i332 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %771)
  %772 = bitcast i64** %_DR4.i333 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %772)
  %773 = bitcast i64** %_DR5.i334 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %773)
  %774 = bitcast i64** %_DR6.i335 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %774)
  %775 = bitcast i64** %_DR7.i336 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %775)
  %776 = bitcast i64** %CR0.i337 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %776)
  %777 = bitcast i64** %CR1.i338 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %777)
  %778 = bitcast i64** %CR2.i339 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %778)
  %779 = bitcast i64** %CR3.i340 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %779)
  %780 = bitcast i64** %CR4.i341 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %780)
  %781 = bitcast i64** %CR8.i342 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %781)
  %782 = load i64, i64* %RBP
  %783 = sub i64 %782, 48
  %784 = bitcast %union.vec128_t* %XMM0 to i8*
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 5
  store i64 %786, i64* %PC
  %787 = bitcast i8* %784 to double*
  %788 = load double, double* %787, align 1
  %789 = inttoptr i64 %783 to double*
  store double %788, double* %789
  %790 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %791 = load i64, i64* %RBP
  %792 = sub i64 %791, 40
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 5
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %792 to double*
  %796 = load double, double* %795
  %797 = bitcast i8* %790 to double*
  store double %796, double* %797, align 1, !tbaa !2452
  %798 = getelementptr inbounds i8, i8* %790, i64 8
  %799 = bitcast i8* %798 to double*
  store double 0.000000e+00, double* %799, align 1, !tbaa !2452
  %800 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 28
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 5
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i32*
  %806 = load i32, i32* %805
  %807 = sitofp i32 %806 to double
  %808 = bitcast i8* %800 to double*
  store double %807, double* %808, align 1, !tbaa !2452
  %809 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %810 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %811 = bitcast %union.vec128_t* %XMM1 to i8*
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 4
  store i64 %813, i64* %PC
  %814 = bitcast i8* %810 to double*
  %815 = load double, double* %814, align 1
  %816 = getelementptr inbounds i8, i8* %810, i64 8
  %817 = bitcast i8* %816 to i64*
  %818 = load i64, i64* %817, align 1
  %819 = bitcast i8* %811 to double*
  %820 = load double, double* %819, align 1
  %821 = fmul double %815, %820
  %822 = bitcast i8* %809 to double*
  store double %821, double* %822, align 1, !tbaa !2452
  %823 = getelementptr inbounds i8, i8* %809, i64 8
  %824 = bitcast i8* %823 to i64*
  store i64 %818, i64* %824, align 1, !tbaa !2452
  %825 = load i64, i64* %PC
  %826 = sub i64 %825, 2063
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %832 = load i64, i64* %831, align 8, !tbaa !2428
  %833 = add i64 %832, -8
  %834 = inttoptr i64 %833 to i64*
  store i64 %828, i64* %834
  store i64 %833, i64* %831, align 8, !tbaa !2428
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %826, i64* %835, align 8, !tbaa !2428
  %836 = load i64, i64* %PC
  %837 = bitcast %struct.State** %state.i160 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %837)
  %838 = bitcast i64* %curr_pc.i161 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %838)
  %839 = bitcast %struct.Memory** %memory.i162 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %839)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i163)
  %840 = bitcast i64* %SS_BASE.i164 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %840)
  %841 = bitcast i64* %ES_BASE.i165 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %841)
  %842 = bitcast i64* %DS_BASE.i166 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %842)
  %843 = bitcast i64* %CS_BASE.i167 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %843)
  %844 = bitcast %struct.State** %STATE.i168 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %844)
  %845 = bitcast %struct.Memory** %MEMORY.i169 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %845)
  %846 = bitcast i64** %_DR0.i170 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %846)
  %847 = bitcast i64** %_DR1.i171 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %847)
  %848 = bitcast i64** %_DR2.i172 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %848)
  %849 = bitcast i64** %_DR3.i173 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %849)
  %850 = bitcast i64** %_DR4.i174 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %850)
  %851 = bitcast i64** %_DR5.i175 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %851)
  %852 = bitcast i64** %_DR6.i176 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %852)
  %853 = bitcast i64** %_DR7.i177 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %853)
  %854 = bitcast i64** %CR0.i178 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %854)
  %855 = bitcast i64** %CR1.i179 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %855)
  %856 = bitcast i64** %CR2.i180 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %856)
  %857 = bitcast i64** %CR3.i181 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %857)
  %858 = bitcast i64** %CR4.i182 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %858)
  %859 = bitcast i64** %CR8.i183 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %859)
  store %struct.State* %0, %struct.State** %state.i160, align 8, !noalias !2461
  store i64 %836, i64* %curr_pc.i161, align 8, !noalias !2461
  store %struct.Memory* %758, %struct.Memory** %memory.i162, align 8, !noalias !2461
  store i8 0, i8* %BRANCH_TAKEN.i163, align 1, !noalias !2461
  store i64 0, i64* %SS_BASE.i164, align 8, !noalias !2461
  store i64 0, i64* %ES_BASE.i165, align 8, !noalias !2461
  store i64 0, i64* %DS_BASE.i166, align 8, !noalias !2461
  store i64 0, i64* %CS_BASE.i167, align 8, !noalias !2461
  store %struct.State* %0, %struct.State** %STATE.i168, align 8, !noalias !2461
  store %struct.Memory* %758, %struct.Memory** %MEMORY.i169, align 8, !noalias !2461
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %861 = getelementptr inbounds %struct.GPR, %struct.GPR* %860, i32 0, i32 33
  %862 = getelementptr inbounds %struct.Reg, %struct.Reg* %861, i32 0, i32 0
  %PC.i184 = bitcast %union.anon* %862 to i64*
  store i64 %836, i64* %PC.i184, align 8, !alias.scope !2465, !noalias !2466
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %864 = getelementptr inbounds %struct.GPR, %struct.GPR* %863, i32 0, i32 1
  %865 = getelementptr inbounds %struct.Reg, %struct.Reg* %864, i32 0, i32 0
  %866 = bitcast %union.anon* %865 to %struct.anon.2*
  %AH.i185 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %866, i32 0, i32 1
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %868 = getelementptr inbounds %struct.GPR, %struct.GPR* %867, i32 0, i32 3
  %869 = getelementptr inbounds %struct.Reg, %struct.Reg* %868, i32 0, i32 0
  %870 = bitcast %union.anon* %869 to %struct.anon.2*
  %BH.i186 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %870, i32 0, i32 1
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %872 = getelementptr inbounds %struct.GPR, %struct.GPR* %871, i32 0, i32 5
  %873 = getelementptr inbounds %struct.Reg, %struct.Reg* %872, i32 0, i32 0
  %874 = bitcast %union.anon* %873 to %struct.anon.2*
  %CH.i187 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %874, i32 0, i32 1
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %876 = getelementptr inbounds %struct.GPR, %struct.GPR* %875, i32 0, i32 7
  %877 = getelementptr inbounds %struct.Reg, %struct.Reg* %876, i32 0, i32 0
  %878 = bitcast %union.anon* %877 to %struct.anon.2*
  %DH.i188 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %878, i32 0, i32 1
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %880 = getelementptr inbounds %struct.GPR, %struct.GPR* %879, i32 0, i32 1
  %881 = getelementptr inbounds %struct.Reg, %struct.Reg* %880, i32 0, i32 0
  %882 = bitcast %union.anon* %881 to %struct.anon.2*
  %AL.i189 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %882, i32 0, i32 0
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %884 = getelementptr inbounds %struct.GPR, %struct.GPR* %883, i32 0, i32 3
  %885 = getelementptr inbounds %struct.Reg, %struct.Reg* %884, i32 0, i32 0
  %886 = bitcast %union.anon* %885 to %struct.anon.2*
  %BL.i190 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %886, i32 0, i32 0
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %888 = getelementptr inbounds %struct.GPR, %struct.GPR* %887, i32 0, i32 5
  %889 = getelementptr inbounds %struct.Reg, %struct.Reg* %888, i32 0, i32 0
  %890 = bitcast %union.anon* %889 to %struct.anon.2*
  %CL.i191 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %890, i32 0, i32 0
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %892 = getelementptr inbounds %struct.GPR, %struct.GPR* %891, i32 0, i32 7
  %893 = getelementptr inbounds %struct.Reg, %struct.Reg* %892, i32 0, i32 0
  %894 = bitcast %union.anon* %893 to %struct.anon.2*
  %DL.i192 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %894, i32 0, i32 0
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %896 = getelementptr inbounds %struct.GPR, %struct.GPR* %895, i32 0, i32 9
  %897 = getelementptr inbounds %struct.Reg, %struct.Reg* %896, i32 0, i32 0
  %898 = bitcast %union.anon* %897 to %struct.anon.2*
  %SIL.i193 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %898, i32 0, i32 0
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %900 = getelementptr inbounds %struct.GPR, %struct.GPR* %899, i32 0, i32 11
  %901 = getelementptr inbounds %struct.Reg, %struct.Reg* %900, i32 0, i32 0
  %902 = bitcast %union.anon* %901 to %struct.anon.2*
  %DIL.i194 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %902, i32 0, i32 0
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %904 = getelementptr inbounds %struct.GPR, %struct.GPR* %903, i32 0, i32 13
  %905 = getelementptr inbounds %struct.Reg, %struct.Reg* %904, i32 0, i32 0
  %906 = bitcast %union.anon* %905 to %struct.anon.2*
  %SPL.i195 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %906, i32 0, i32 0
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %908 = getelementptr inbounds %struct.GPR, %struct.GPR* %907, i32 0, i32 15
  %909 = getelementptr inbounds %struct.Reg, %struct.Reg* %908, i32 0, i32 0
  %910 = bitcast %union.anon* %909 to %struct.anon.2*
  %BPL.i196 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %910, i32 0, i32 0
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %912 = getelementptr inbounds %struct.GPR, %struct.GPR* %911, i32 0, i32 17
  %913 = getelementptr inbounds %struct.Reg, %struct.Reg* %912, i32 0, i32 0
  %914 = bitcast %union.anon* %913 to %struct.anon.2*
  %R8B.i197 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %914, i32 0, i32 0
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %916 = getelementptr inbounds %struct.GPR, %struct.GPR* %915, i32 0, i32 19
  %917 = getelementptr inbounds %struct.Reg, %struct.Reg* %916, i32 0, i32 0
  %918 = bitcast %union.anon* %917 to %struct.anon.2*
  %R9B.i198 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %918, i32 0, i32 0
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %920 = getelementptr inbounds %struct.GPR, %struct.GPR* %919, i32 0, i32 21
  %921 = getelementptr inbounds %struct.Reg, %struct.Reg* %920, i32 0, i32 0
  %922 = bitcast %union.anon* %921 to %struct.anon.2*
  %R10B.i199 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %922, i32 0, i32 0
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %924 = getelementptr inbounds %struct.GPR, %struct.GPR* %923, i32 0, i32 23
  %925 = getelementptr inbounds %struct.Reg, %struct.Reg* %924, i32 0, i32 0
  %926 = bitcast %union.anon* %925 to %struct.anon.2*
  %R11B.i200 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %926, i32 0, i32 0
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %928 = getelementptr inbounds %struct.GPR, %struct.GPR* %927, i32 0, i32 25
  %929 = getelementptr inbounds %struct.Reg, %struct.Reg* %928, i32 0, i32 0
  %930 = bitcast %union.anon* %929 to %struct.anon.2*
  %R12B.i201 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %930, i32 0, i32 0
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %932 = getelementptr inbounds %struct.GPR, %struct.GPR* %931, i32 0, i32 27
  %933 = getelementptr inbounds %struct.Reg, %struct.Reg* %932, i32 0, i32 0
  %934 = bitcast %union.anon* %933 to %struct.anon.2*
  %R13B.i202 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %934, i32 0, i32 0
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %936 = getelementptr inbounds %struct.GPR, %struct.GPR* %935, i32 0, i32 29
  %937 = getelementptr inbounds %struct.Reg, %struct.Reg* %936, i32 0, i32 0
  %938 = bitcast %union.anon* %937 to %struct.anon.2*
  %R14B.i203 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %938, i32 0, i32 0
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %940 = getelementptr inbounds %struct.GPR, %struct.GPR* %939, i32 0, i32 31
  %941 = getelementptr inbounds %struct.Reg, %struct.Reg* %940, i32 0, i32 0
  %942 = bitcast %union.anon* %941 to %struct.anon.2*
  %R15B.i204 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %942, i32 0, i32 0
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %944 = getelementptr inbounds %struct.GPR, %struct.GPR* %943, i32 0, i32 1
  %945 = getelementptr inbounds %struct.Reg, %struct.Reg* %944, i32 0, i32 0
  %AX.i205 = bitcast %union.anon* %945 to i16*
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %947 = getelementptr inbounds %struct.GPR, %struct.GPR* %946, i32 0, i32 3
  %948 = getelementptr inbounds %struct.Reg, %struct.Reg* %947, i32 0, i32 0
  %BX.i206 = bitcast %union.anon* %948 to i16*
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %950 = getelementptr inbounds %struct.GPR, %struct.GPR* %949, i32 0, i32 5
  %951 = getelementptr inbounds %struct.Reg, %struct.Reg* %950, i32 0, i32 0
  %CX.i207 = bitcast %union.anon* %951 to i16*
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %953 = getelementptr inbounds %struct.GPR, %struct.GPR* %952, i32 0, i32 7
  %954 = getelementptr inbounds %struct.Reg, %struct.Reg* %953, i32 0, i32 0
  %DX.i208 = bitcast %union.anon* %954 to i16*
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %956 = getelementptr inbounds %struct.GPR, %struct.GPR* %955, i32 0, i32 9
  %957 = getelementptr inbounds %struct.Reg, %struct.Reg* %956, i32 0, i32 0
  %SI.i209 = bitcast %union.anon* %957 to i16*
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %959 = getelementptr inbounds %struct.GPR, %struct.GPR* %958, i32 0, i32 11
  %960 = getelementptr inbounds %struct.Reg, %struct.Reg* %959, i32 0, i32 0
  %DI.i210 = bitcast %union.anon* %960 to i16*
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %962 = getelementptr inbounds %struct.GPR, %struct.GPR* %961, i32 0, i32 13
  %963 = getelementptr inbounds %struct.Reg, %struct.Reg* %962, i32 0, i32 0
  %SP.i211 = bitcast %union.anon* %963 to i16*
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %965 = getelementptr inbounds %struct.GPR, %struct.GPR* %964, i32 0, i32 15
  %966 = getelementptr inbounds %struct.Reg, %struct.Reg* %965, i32 0, i32 0
  %BP.i212 = bitcast %union.anon* %966 to i16*
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %968 = getelementptr inbounds %struct.GPR, %struct.GPR* %967, i32 0, i32 17
  %969 = getelementptr inbounds %struct.Reg, %struct.Reg* %968, i32 0, i32 0
  %R8W.i213 = bitcast %union.anon* %969 to i16*
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %971 = getelementptr inbounds %struct.GPR, %struct.GPR* %970, i32 0, i32 19
  %972 = getelementptr inbounds %struct.Reg, %struct.Reg* %971, i32 0, i32 0
  %R9W.i214 = bitcast %union.anon* %972 to i16*
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %974 = getelementptr inbounds %struct.GPR, %struct.GPR* %973, i32 0, i32 21
  %975 = getelementptr inbounds %struct.Reg, %struct.Reg* %974, i32 0, i32 0
  %R10W.i215 = bitcast %union.anon* %975 to i16*
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %977 = getelementptr inbounds %struct.GPR, %struct.GPR* %976, i32 0, i32 23
  %978 = getelementptr inbounds %struct.Reg, %struct.Reg* %977, i32 0, i32 0
  %R11W.i216 = bitcast %union.anon* %978 to i16*
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %980 = getelementptr inbounds %struct.GPR, %struct.GPR* %979, i32 0, i32 25
  %981 = getelementptr inbounds %struct.Reg, %struct.Reg* %980, i32 0, i32 0
  %R12W.i217 = bitcast %union.anon* %981 to i16*
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %983 = getelementptr inbounds %struct.GPR, %struct.GPR* %982, i32 0, i32 27
  %984 = getelementptr inbounds %struct.Reg, %struct.Reg* %983, i32 0, i32 0
  %R13W.i218 = bitcast %union.anon* %984 to i16*
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %986 = getelementptr inbounds %struct.GPR, %struct.GPR* %985, i32 0, i32 29
  %987 = getelementptr inbounds %struct.Reg, %struct.Reg* %986, i32 0, i32 0
  %R14W.i219 = bitcast %union.anon* %987 to i16*
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %989 = getelementptr inbounds %struct.GPR, %struct.GPR* %988, i32 0, i32 31
  %990 = getelementptr inbounds %struct.Reg, %struct.Reg* %989, i32 0, i32 0
  %R15W.i220 = bitcast %union.anon* %990 to i16*
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %992 = getelementptr inbounds %struct.GPR, %struct.GPR* %991, i32 0, i32 33
  %993 = getelementptr inbounds %struct.Reg, %struct.Reg* %992, i32 0, i32 0
  %IP.i221 = bitcast %union.anon* %993 to i16*
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %995 = getelementptr inbounds %struct.GPR, %struct.GPR* %994, i32 0, i32 1
  %996 = getelementptr inbounds %struct.Reg, %struct.Reg* %995, i32 0, i32 0
  %EAX.i222 = bitcast %union.anon* %996 to i32*
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %998 = getelementptr inbounds %struct.GPR, %struct.GPR* %997, i32 0, i32 3
  %999 = getelementptr inbounds %struct.Reg, %struct.Reg* %998, i32 0, i32 0
  %EBX.i223 = bitcast %union.anon* %999 to i32*
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1001 = getelementptr inbounds %struct.GPR, %struct.GPR* %1000, i32 0, i32 5
  %1002 = getelementptr inbounds %struct.Reg, %struct.Reg* %1001, i32 0, i32 0
  %ECX.i224 = bitcast %union.anon* %1002 to i32*
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1004 = getelementptr inbounds %struct.GPR, %struct.GPR* %1003, i32 0, i32 7
  %1005 = getelementptr inbounds %struct.Reg, %struct.Reg* %1004, i32 0, i32 0
  %EDX.i225 = bitcast %union.anon* %1005 to i32*
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1007 = getelementptr inbounds %struct.GPR, %struct.GPR* %1006, i32 0, i32 9
  %1008 = getelementptr inbounds %struct.Reg, %struct.Reg* %1007, i32 0, i32 0
  %ESI.i226 = bitcast %union.anon* %1008 to i32*
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1010 = getelementptr inbounds %struct.GPR, %struct.GPR* %1009, i32 0, i32 11
  %1011 = getelementptr inbounds %struct.Reg, %struct.Reg* %1010, i32 0, i32 0
  %EDI.i227 = bitcast %union.anon* %1011 to i32*
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1013 = getelementptr inbounds %struct.GPR, %struct.GPR* %1012, i32 0, i32 13
  %1014 = getelementptr inbounds %struct.Reg, %struct.Reg* %1013, i32 0, i32 0
  %ESP.i228 = bitcast %union.anon* %1014 to i32*
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1016 = getelementptr inbounds %struct.GPR, %struct.GPR* %1015, i32 0, i32 15
  %1017 = getelementptr inbounds %struct.Reg, %struct.Reg* %1016, i32 0, i32 0
  %EBP.i229 = bitcast %union.anon* %1017 to i32*
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1019 = getelementptr inbounds %struct.GPR, %struct.GPR* %1018, i32 0, i32 33
  %1020 = getelementptr inbounds %struct.Reg, %struct.Reg* %1019, i32 0, i32 0
  %EIP.i230 = bitcast %union.anon* %1020 to i32*
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1022 = getelementptr inbounds %struct.GPR, %struct.GPR* %1021, i32 0, i32 17
  %1023 = getelementptr inbounds %struct.Reg, %struct.Reg* %1022, i32 0, i32 0
  %R8D.i231 = bitcast %union.anon* %1023 to i32*
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1025 = getelementptr inbounds %struct.GPR, %struct.GPR* %1024, i32 0, i32 19
  %1026 = getelementptr inbounds %struct.Reg, %struct.Reg* %1025, i32 0, i32 0
  %R9D.i232 = bitcast %union.anon* %1026 to i32*
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1028 = getelementptr inbounds %struct.GPR, %struct.GPR* %1027, i32 0, i32 21
  %1029 = getelementptr inbounds %struct.Reg, %struct.Reg* %1028, i32 0, i32 0
  %R10D.i233 = bitcast %union.anon* %1029 to i32*
  %1030 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1031 = getelementptr inbounds %struct.GPR, %struct.GPR* %1030, i32 0, i32 23
  %1032 = getelementptr inbounds %struct.Reg, %struct.Reg* %1031, i32 0, i32 0
  %R11D.i234 = bitcast %union.anon* %1032 to i32*
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1034 = getelementptr inbounds %struct.GPR, %struct.GPR* %1033, i32 0, i32 25
  %1035 = getelementptr inbounds %struct.Reg, %struct.Reg* %1034, i32 0, i32 0
  %R12D.i235 = bitcast %union.anon* %1035 to i32*
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1037 = getelementptr inbounds %struct.GPR, %struct.GPR* %1036, i32 0, i32 27
  %1038 = getelementptr inbounds %struct.Reg, %struct.Reg* %1037, i32 0, i32 0
  %R13D.i236 = bitcast %union.anon* %1038 to i32*
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1040 = getelementptr inbounds %struct.GPR, %struct.GPR* %1039, i32 0, i32 29
  %1041 = getelementptr inbounds %struct.Reg, %struct.Reg* %1040, i32 0, i32 0
  %R14D.i237 = bitcast %union.anon* %1041 to i32*
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1043 = getelementptr inbounds %struct.GPR, %struct.GPR* %1042, i32 0, i32 31
  %1044 = getelementptr inbounds %struct.Reg, %struct.Reg* %1043, i32 0, i32 0
  %R15D.i238 = bitcast %union.anon* %1044 to i32*
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1046 = getelementptr inbounds %struct.GPR, %struct.GPR* %1045, i32 0, i32 1
  %1047 = getelementptr inbounds %struct.Reg, %struct.Reg* %1046, i32 0, i32 0
  %RAX.i239 = bitcast %union.anon* %1047 to i64*
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1049 = getelementptr inbounds %struct.GPR, %struct.GPR* %1048, i32 0, i32 3
  %1050 = getelementptr inbounds %struct.Reg, %struct.Reg* %1049, i32 0, i32 0
  %RBX.i240 = bitcast %union.anon* %1050 to i64*
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1052 = getelementptr inbounds %struct.GPR, %struct.GPR* %1051, i32 0, i32 5
  %1053 = getelementptr inbounds %struct.Reg, %struct.Reg* %1052, i32 0, i32 0
  %RCX.i241 = bitcast %union.anon* %1053 to i64*
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1055 = getelementptr inbounds %struct.GPR, %struct.GPR* %1054, i32 0, i32 7
  %1056 = getelementptr inbounds %struct.Reg, %struct.Reg* %1055, i32 0, i32 0
  %RDX.i242 = bitcast %union.anon* %1056 to i64*
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1058 = getelementptr inbounds %struct.GPR, %struct.GPR* %1057, i32 0, i32 9
  %1059 = getelementptr inbounds %struct.Reg, %struct.Reg* %1058, i32 0, i32 0
  %RSI.i243 = bitcast %union.anon* %1059 to i64*
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1061 = getelementptr inbounds %struct.GPR, %struct.GPR* %1060, i32 0, i32 11
  %1062 = getelementptr inbounds %struct.Reg, %struct.Reg* %1061, i32 0, i32 0
  %RDI.i244 = bitcast %union.anon* %1062 to i64*
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1064 = getelementptr inbounds %struct.GPR, %struct.GPR* %1063, i32 0, i32 13
  %1065 = getelementptr inbounds %struct.Reg, %struct.Reg* %1064, i32 0, i32 0
  %RSP.i245 = bitcast %union.anon* %1065 to i64*
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1067 = getelementptr inbounds %struct.GPR, %struct.GPR* %1066, i32 0, i32 15
  %1068 = getelementptr inbounds %struct.Reg, %struct.Reg* %1067, i32 0, i32 0
  %RBP.i246 = bitcast %union.anon* %1068 to i64*
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1070 = getelementptr inbounds %struct.GPR, %struct.GPR* %1069, i32 0, i32 17
  %1071 = getelementptr inbounds %struct.Reg, %struct.Reg* %1070, i32 0, i32 0
  %R8.i247 = bitcast %union.anon* %1071 to i64*
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1073 = getelementptr inbounds %struct.GPR, %struct.GPR* %1072, i32 0, i32 19
  %1074 = getelementptr inbounds %struct.Reg, %struct.Reg* %1073, i32 0, i32 0
  %R9.i248 = bitcast %union.anon* %1074 to i64*
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1076 = getelementptr inbounds %struct.GPR, %struct.GPR* %1075, i32 0, i32 21
  %1077 = getelementptr inbounds %struct.Reg, %struct.Reg* %1076, i32 0, i32 0
  %R10.i249 = bitcast %union.anon* %1077 to i64*
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1079 = getelementptr inbounds %struct.GPR, %struct.GPR* %1078, i32 0, i32 23
  %1080 = getelementptr inbounds %struct.Reg, %struct.Reg* %1079, i32 0, i32 0
  %R11.i250 = bitcast %union.anon* %1080 to i64*
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1082 = getelementptr inbounds %struct.GPR, %struct.GPR* %1081, i32 0, i32 25
  %1083 = getelementptr inbounds %struct.Reg, %struct.Reg* %1082, i32 0, i32 0
  %R12.i251 = bitcast %union.anon* %1083 to i64*
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1085 = getelementptr inbounds %struct.GPR, %struct.GPR* %1084, i32 0, i32 27
  %1086 = getelementptr inbounds %struct.Reg, %struct.Reg* %1085, i32 0, i32 0
  %R13.i252 = bitcast %union.anon* %1086 to i64*
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1088 = getelementptr inbounds %struct.GPR, %struct.GPR* %1087, i32 0, i32 29
  %1089 = getelementptr inbounds %struct.Reg, %struct.Reg* %1088, i32 0, i32 0
  %R14.i253 = bitcast %union.anon* %1089 to i64*
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1091 = getelementptr inbounds %struct.GPR, %struct.GPR* %1090, i32 0, i32 31
  %1092 = getelementptr inbounds %struct.Reg, %struct.Reg* %1091, i32 0, i32 0
  %R15.i254 = bitcast %union.anon* %1092 to i64*
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1094 = getelementptr inbounds %struct.GPR, %struct.GPR* %1093, i32 0, i32 33
  %1095 = getelementptr inbounds %struct.Reg, %struct.Reg* %1094, i32 0, i32 0
  %RIP.i255 = bitcast %union.anon* %1095 to i64*
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1097 = getelementptr inbounds %struct.Segments, %struct.Segments* %1096, i32 0, i32 1
  %SS.i256 = bitcast %union.SegmentSelector* %1097 to i16*
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1099 = getelementptr inbounds %struct.Segments, %struct.Segments* %1098, i32 0, i32 3
  %ES.i257 = bitcast %union.SegmentSelector* %1099 to i16*
  %1100 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1101 = getelementptr inbounds %struct.Segments, %struct.Segments* %1100, i32 0, i32 5
  %GS.i258 = bitcast %union.SegmentSelector* %1101 to i16*
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1103 = getelementptr inbounds %struct.Segments, %struct.Segments* %1102, i32 0, i32 7
  %FS.i259 = bitcast %union.SegmentSelector* %1103 to i16*
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1105 = getelementptr inbounds %struct.Segments, %struct.Segments* %1104, i32 0, i32 9
  %DS.i260 = bitcast %union.SegmentSelector* %1105 to i16*
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1107 = getelementptr inbounds %struct.Segments, %struct.Segments* %1106, i32 0, i32 11
  %CS.i261 = bitcast %union.SegmentSelector* %1107 to i16*
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %1109 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %1108, i32 0, i32 5
  %1110 = getelementptr inbounds %struct.Reg, %struct.Reg* %1109, i32 0, i32 0
  %GS_BASE.i262 = bitcast %union.anon* %1110 to i64*
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %1112 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %1111, i32 0, i32 7
  %1113 = getelementptr inbounds %struct.Reg, %struct.Reg* %1112, i32 0, i32 0
  %FS_BASE.i263 = bitcast %union.anon* %1113 to i64*
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1115 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1114, i64 0, i64 0
  %YMM0.i264 = bitcast %union.VectorReg* %1115 to %"class.std::bitset"*
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1117 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1116, i64 0, i64 1
  %YMM1.i265 = bitcast %union.VectorReg* %1117 to %"class.std::bitset"*
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1119 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1118, i64 0, i64 2
  %YMM2.i266 = bitcast %union.VectorReg* %1119 to %"class.std::bitset"*
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1121 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1120, i64 0, i64 3
  %YMM3.i267 = bitcast %union.VectorReg* %1121 to %"class.std::bitset"*
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1123 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1122, i64 0, i64 4
  %YMM4.i268 = bitcast %union.VectorReg* %1123 to %"class.std::bitset"*
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1125 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1124, i64 0, i64 5
  %YMM5.i269 = bitcast %union.VectorReg* %1125 to %"class.std::bitset"*
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1127 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1126, i64 0, i64 6
  %YMM6.i270 = bitcast %union.VectorReg* %1127 to %"class.std::bitset"*
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1129 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1128, i64 0, i64 7
  %YMM7.i271 = bitcast %union.VectorReg* %1129 to %"class.std::bitset"*
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1131 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1130, i64 0, i64 8
  %YMM8.i272 = bitcast %union.VectorReg* %1131 to %"class.std::bitset"*
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1133 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1132, i64 0, i64 9
  %YMM9.i273 = bitcast %union.VectorReg* %1133 to %"class.std::bitset"*
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1135 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1134, i64 0, i64 10
  %YMM10.i274 = bitcast %union.VectorReg* %1135 to %"class.std::bitset"*
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1137 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1136, i64 0, i64 11
  %YMM11.i275 = bitcast %union.VectorReg* %1137 to %"class.std::bitset"*
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1139 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1138, i64 0, i64 12
  %YMM12.i276 = bitcast %union.VectorReg* %1139 to %"class.std::bitset"*
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1141 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1140, i64 0, i64 13
  %YMM13.i277 = bitcast %union.VectorReg* %1141 to %"class.std::bitset"*
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1143 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1142, i64 0, i64 14
  %YMM14.i278 = bitcast %union.VectorReg* %1143 to %"class.std::bitset"*
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1145 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1144, i64 0, i64 15
  %YMM15.i279 = bitcast %union.VectorReg* %1145 to %"class.std::bitset"*
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1147 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1146, i64 0, i64 0
  %XMM0.i280 = bitcast %union.VectorReg* %1147 to %union.vec128_t*
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1149 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1148, i64 0, i64 1
  %XMM1.i281 = bitcast %union.VectorReg* %1149 to %union.vec128_t*
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1151 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1150, i64 0, i64 2
  %XMM2.i282 = bitcast %union.VectorReg* %1151 to %union.vec128_t*
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1153 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1152, i64 0, i64 3
  %XMM3.i283 = bitcast %union.VectorReg* %1153 to %union.vec128_t*
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1155 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1154, i64 0, i64 4
  %XMM4.i284 = bitcast %union.VectorReg* %1155 to %union.vec128_t*
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1157 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1156, i64 0, i64 5
  %XMM5.i285 = bitcast %union.VectorReg* %1157 to %union.vec128_t*
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1159 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1158, i64 0, i64 6
  %XMM6.i286 = bitcast %union.VectorReg* %1159 to %union.vec128_t*
  %1160 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1161 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1160, i64 0, i64 7
  %XMM7.i287 = bitcast %union.VectorReg* %1161 to %union.vec128_t*
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1163 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1162, i64 0, i64 8
  %XMM8.i288 = bitcast %union.VectorReg* %1163 to %union.vec128_t*
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1165 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1164, i64 0, i64 9
  %XMM9.i289 = bitcast %union.VectorReg* %1165 to %union.vec128_t*
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1167 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1166, i64 0, i64 10
  %XMM10.i290 = bitcast %union.VectorReg* %1167 to %union.vec128_t*
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1169 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1168, i64 0, i64 11
  %XMM11.i291 = bitcast %union.VectorReg* %1169 to %union.vec128_t*
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1171 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1170, i64 0, i64 12
  %XMM12.i292 = bitcast %union.VectorReg* %1171 to %union.vec128_t*
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1173 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1172, i64 0, i64 13
  %XMM13.i293 = bitcast %union.VectorReg* %1173 to %union.vec128_t*
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1175 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1174, i64 0, i64 14
  %XMM14.i294 = bitcast %union.VectorReg* %1175 to %union.vec128_t*
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1177 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1176, i64 0, i64 15
  %XMM15.i295 = bitcast %union.VectorReg* %1177 to %union.vec128_t*
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1179 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1178, i32 0, i32 0
  %1180 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1179, i64 0, i64 0
  %ST0.i296 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1180, i32 0, i32 1
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1182 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1181, i32 0, i32 0
  %1183 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1182, i64 0, i64 1
  %ST1.i297 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1183, i32 0, i32 1
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1185 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1184, i32 0, i32 0
  %1186 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1185, i64 0, i64 2
  %ST2.i298 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1186, i32 0, i32 1
  %1187 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1188 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1187, i32 0, i32 0
  %1189 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1188, i64 0, i64 3
  %ST3.i299 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1189, i32 0, i32 1
  %1190 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1191 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1190, i32 0, i32 0
  %1192 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1191, i64 0, i64 4
  %ST4.i300 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1192, i32 0, i32 1
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1194 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1193, i32 0, i32 0
  %1195 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1194, i64 0, i64 5
  %ST5.i301 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1195, i32 0, i32 1
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1197 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1196, i32 0, i32 0
  %1198 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1197, i64 0, i64 6
  %ST6.i302 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1198, i32 0, i32 1
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %1200 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %1199, i32 0, i32 0
  %1201 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %1200, i64 0, i64 7
  %ST7.i303 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %1201, i32 0, i32 1
  %1202 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1203 = getelementptr inbounds %struct.MMX, %struct.MMX* %1202, i32 0, i32 0
  %1204 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1203, i64 0, i64 0
  %1205 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1204, i32 0, i32 1
  %1206 = bitcast %union.vec64_t* %1205 to %struct.uint64v1_t*
  %1207 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1206, i32 0, i32 0
  %MM0.i304 = getelementptr inbounds [1 x i64], [1 x i64]* %1207, i64 0, i64 0
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1209 = getelementptr inbounds %struct.MMX, %struct.MMX* %1208, i32 0, i32 0
  %1210 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1209, i64 0, i64 1
  %1211 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1210, i32 0, i32 1
  %1212 = bitcast %union.vec64_t* %1211 to %struct.uint64v1_t*
  %1213 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1212, i32 0, i32 0
  %MM1.i305 = getelementptr inbounds [1 x i64], [1 x i64]* %1213, i64 0, i64 0
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1215 = getelementptr inbounds %struct.MMX, %struct.MMX* %1214, i32 0, i32 0
  %1216 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1215, i64 0, i64 2
  %1217 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1216, i32 0, i32 1
  %1218 = bitcast %union.vec64_t* %1217 to %struct.uint64v1_t*
  %1219 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1218, i32 0, i32 0
  %MM2.i306 = getelementptr inbounds [1 x i64], [1 x i64]* %1219, i64 0, i64 0
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1221 = getelementptr inbounds %struct.MMX, %struct.MMX* %1220, i32 0, i32 0
  %1222 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1221, i64 0, i64 3
  %1223 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1222, i32 0, i32 1
  %1224 = bitcast %union.vec64_t* %1223 to %struct.uint64v1_t*
  %1225 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1224, i32 0, i32 0
  %MM3.i307 = getelementptr inbounds [1 x i64], [1 x i64]* %1225, i64 0, i64 0
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1227 = getelementptr inbounds %struct.MMX, %struct.MMX* %1226, i32 0, i32 0
  %1228 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1227, i64 0, i64 4
  %1229 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1228, i32 0, i32 1
  %1230 = bitcast %union.vec64_t* %1229 to %struct.uint64v1_t*
  %1231 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1230, i32 0, i32 0
  %MM4.i308 = getelementptr inbounds [1 x i64], [1 x i64]* %1231, i64 0, i64 0
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1233 = getelementptr inbounds %struct.MMX, %struct.MMX* %1232, i32 0, i32 0
  %1234 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1233, i64 0, i64 5
  %1235 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1234, i32 0, i32 1
  %1236 = bitcast %union.vec64_t* %1235 to %struct.uint64v1_t*
  %1237 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1236, i32 0, i32 0
  %MM5.i309 = getelementptr inbounds [1 x i64], [1 x i64]* %1237, i64 0, i64 0
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1239 = getelementptr inbounds %struct.MMX, %struct.MMX* %1238, i32 0, i32 0
  %1240 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1239, i64 0, i64 6
  %1241 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1240, i32 0, i32 1
  %1242 = bitcast %union.vec64_t* %1241 to %struct.uint64v1_t*
  %1243 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1242, i32 0, i32 0
  %MM6.i310 = getelementptr inbounds [1 x i64], [1 x i64]* %1243, i64 0, i64 0
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %1245 = getelementptr inbounds %struct.MMX, %struct.MMX* %1244, i32 0, i32 0
  %1246 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %1245, i64 0, i64 7
  %1247 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %1246, i32 0, i32 1
  %1248 = bitcast %union.vec64_t* %1247 to %struct.uint64v1_t*
  %1249 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %1248, i32 0, i32 0
  %MM7.i311 = getelementptr inbounds [1 x i64], [1 x i64]* %1249, i64 0, i64 0
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i312 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1250, i32 0, i32 5
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i313 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1251, i32 0, i32 1
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i314 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1252, i32 0, i32 11
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i315 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1253, i32 0, i32 13
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i316 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1254, i32 0, i32 3
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i317 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1255, i32 0, i32 9
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i318 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %1256, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i170, align 8, !noalias !2461
  store i64* @DR1, i64** %_DR1.i171, align 8, !noalias !2461
  store i64* @DR2, i64** %_DR2.i172, align 8, !noalias !2461
  store i64* @DR3, i64** %_DR3.i173, align 8, !noalias !2461
  store i64* @DR4, i64** %_DR4.i174, align 8, !noalias !2461
  store i64* @DR5, i64** %_DR5.i175, align 8, !noalias !2461
  store i64* @DR6, i64** %_DR6.i176, align 8, !noalias !2461
  store i64* @DR7, i64** %_DR7.i177, align 8, !noalias !2461
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i178, align 8, !noalias !2461
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i179, align 8, !noalias !2461
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i180, align 8, !noalias !2461
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i181, align 8, !noalias !2461
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i182, align 8, !noalias !2461
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i183, align 8, !noalias !2461
  %1257 = bitcast %"class.std::bitset"* %YMM0.i264 to double*
  %1258 = load double, double* %1257, !alias.scope !2465, !noalias !2466
  %1259 = load i64, i64* %RSP.i245, !alias.scope !2465, !noalias !2466
  %1260 = load %struct.Memory*, %struct.Memory** %MEMORY.i169, !noalias !2461
  %1261 = inttoptr i64 %1259 to i64*
  %1262 = load i64, i64* %1261
  store i64 %1262, i64* %PC.i184, !alias.scope !2465, !noalias !2466
  %1263 = add i64 %1259, 8
  store i64 %1263, i64* %RSP.i245, !alias.scope !2465, !noalias !2466
  %1264 = call double @sin(double %1258)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i264, !alias.scope !2465, !noalias !2466
  %1265 = bitcast %"class.std::bitset"* %YMM0.i264 to double*
  store double %1264, double* %1265, !alias.scope !2465, !noalias !2466
  %1266 = load %struct.Memory*, %struct.Memory** %MEMORY.i169, !noalias !2461
  %1267 = bitcast %struct.State** %state.i160 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1267)
  %1268 = bitcast i64* %curr_pc.i161 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1268)
  %1269 = bitcast %struct.Memory** %memory.i162 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1269)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i163)
  %1270 = bitcast i64* %SS_BASE.i164 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1270)
  %1271 = bitcast i64* %ES_BASE.i165 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1271)
  %1272 = bitcast i64* %DS_BASE.i166 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1272)
  %1273 = bitcast i64* %CS_BASE.i167 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1273)
  %1274 = bitcast %struct.State** %STATE.i168 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1274)
  %1275 = bitcast %struct.Memory** %MEMORY.i169 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1275)
  %1276 = bitcast i64** %_DR0.i170 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1276)
  %1277 = bitcast i64** %_DR1.i171 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1277)
  %1278 = bitcast i64** %_DR2.i172 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1278)
  %1279 = bitcast i64** %_DR3.i173 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1279)
  %1280 = bitcast i64** %_DR4.i174 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1280)
  %1281 = bitcast i64** %_DR5.i175 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1281)
  %1282 = bitcast i64** %_DR6.i176 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1282)
  %1283 = bitcast i64** %_DR7.i177 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1283)
  %1284 = bitcast i64** %CR0.i178 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1284)
  %1285 = bitcast i64** %CR1.i179 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1285)
  %1286 = bitcast i64** %CR2.i180 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1286)
  %1287 = bitcast i64** %CR3.i181 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1287)
  %1288 = bitcast i64** %CR4.i182 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1288)
  %1289 = bitcast i64** %CR8.i183 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %1289)
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 56
  %1292 = bitcast %union.vec128_t* %XMM0 to i8*
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 5
  store i64 %1294, i64* %PC
  %1295 = bitcast i8* %1292 to double*
  %1296 = load double, double* %1295, align 1
  %1297 = inttoptr i64 %1291 to double*
  store double %1296, double* %1297
  %1298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1299 = load i64, i64* %RBP
  %1300 = sub i64 %1299, 48
  %1301 = load i64, i64* %PC
  %1302 = add i64 %1301, 5
  store i64 %1302, i64* %PC
  %1303 = inttoptr i64 %1300 to double*
  %1304 = load double, double* %1303
  %1305 = bitcast i8* %1298 to double*
  store double %1304, double* %1305, align 1, !tbaa !2452
  %1306 = getelementptr inbounds i8, i8* %1298, i64 8
  %1307 = bitcast i8* %1306 to double*
  store double 0.000000e+00, double* %1307, align 1, !tbaa !2452
  %1308 = load i64, i64* %RBP
  %1309 = sub i64 %1308, 24
  %1310 = load i64, i64* %PC
  %1311 = add i64 %1310, 4
  store i64 %1311, i64* %PC
  %1312 = inttoptr i64 %1309 to i64*
  %1313 = load i64, i64* %1312
  store i64 %1313, i64* %RAX, align 8, !tbaa !2428
  %1314 = load i64, i64* %RBP
  %1315 = sub i64 %1314, 28
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 4
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1315 to i32*
  %1319 = load i32, i32* %1318
  %1320 = sext i32 %1319 to i64
  store i64 %1320, i64* %RCX, align 8, !tbaa !2428
  %1321 = load i64, i64* %RAX
  %1322 = load i64, i64* %RCX
  %1323 = mul i64 %1322, 8
  %1324 = add i64 %1323, %1321
  %1325 = bitcast %union.vec128_t* %XMM0 to i8*
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  store i64 %1327, i64* %PC
  %1328 = bitcast i8* %1325 to double*
  %1329 = load double, double* %1328, align 1
  %1330 = inttoptr i64 %1324 to double*
  store double %1329, double* %1330
  %1331 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1332 = load i64, i64* %RBP
  %1333 = sub i64 %1332, 56
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 5
  store i64 %1335, i64* %PC
  %1336 = inttoptr i64 %1333 to double*
  %1337 = load double, double* %1336
  %1338 = bitcast i8* %1331 to double*
  store double %1337, double* %1338, align 1, !tbaa !2452
  %1339 = getelementptr inbounds i8, i8* %1331, i64 8
  %1340 = bitcast i8* %1339 to double*
  store double 0.000000e+00, double* %1340, align 1, !tbaa !2452
  %1341 = load i64, i64* %RBP
  %1342 = sub i64 %1341, 24
  %1343 = load i64, i64* %PC
  %1344 = add i64 %1343, 4
  store i64 %1344, i64* %PC
  %1345 = inttoptr i64 %1342 to i64*
  %1346 = load i64, i64* %1345
  store i64 %1346, i64* %RAX, align 8, !tbaa !2428
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 28
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 3
  store i64 %1350, i64* %PC
  %1351 = inttoptr i64 %1348 to i32*
  %1352 = load i32, i32* %1351
  %1353 = zext i32 %1352 to i64
  store i64 %1353, i64* %RDX, align 8, !tbaa !2428
  %1354 = load i64, i64* %RDX
  %1355 = load i64, i64* %PC
  %1356 = add i64 %1355, 3
  store i64 %1356, i64* %PC
  %1357 = trunc i64 %1354 to i32
  %1358 = add i32 1, %1357
  %1359 = zext i32 %1358 to i64
  store i64 %1359, i64* %RDX, align 8, !tbaa !2428
  %1360 = icmp ult i32 %1358, %1357
  %1361 = icmp ult i32 %1358, 1
  %1362 = or i1 %1360, %1361
  %1363 = zext i1 %1362 to i8
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1363, i8* %1364, align 1, !tbaa !2432
  %1365 = and i32 %1358, 255
  %1366 = call i32 @llvm.ctpop.i32(i32 %1365) #17
  %1367 = trunc i32 %1366 to i8
  %1368 = and i8 %1367, 1
  %1369 = xor i8 %1368, 1
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1369, i8* %1370, align 1, !tbaa !2446
  %1371 = xor i64 1, %1354
  %1372 = trunc i64 %1371 to i32
  %1373 = xor i32 %1372, %1358
  %1374 = lshr i32 %1373, 4
  %1375 = trunc i32 %1374 to i8
  %1376 = and i8 %1375, 1
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1376, i8* %1377, align 1, !tbaa !2447
  %1378 = icmp eq i32 %1358, 0
  %1379 = zext i1 %1378 to i8
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1379, i8* %1380, align 1, !tbaa !2448
  %1381 = lshr i32 %1358, 31
  %1382 = trunc i32 %1381 to i8
  %1383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1382, i8* %1383, align 1, !tbaa !2449
  %1384 = lshr i32 %1357, 31
  %1385 = xor i32 %1381, %1384
  %1386 = add nuw nsw i32 %1385, %1381
  %1387 = icmp eq i32 %1386, 2
  %1388 = zext i1 %1387 to i8
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1388, i8* %1389, align 1, !tbaa !2450
  %1390 = load i32, i32* %EDX
  %1391 = zext i32 %1390 to i64
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 3
  store i64 %1393, i64* %PC
  %1394 = shl i64 %1391, 32
  %1395 = ashr exact i64 %1394, 32
  store i64 %1395, i64* %RCX, align 8, !tbaa !2428
  %1396 = load i64, i64* %RAX
  %1397 = load i64, i64* %RCX
  %1398 = mul i64 %1397, 8
  %1399 = add i64 %1398, %1396
  %1400 = bitcast %union.vec128_t* %XMM0 to i8*
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 5
  store i64 %1402, i64* %PC
  %1403 = bitcast i8* %1400 to double*
  %1404 = load double, double* %1403, align 1
  %1405 = inttoptr i64 %1399 to double*
  store double %1404, double* %1405
  %1406 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1407 = load i64, i64* %RBP
  %1408 = sub i64 %1407, 56
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 5
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1408 to double*
  %1412 = load double, double* %1411
  %1413 = bitcast i8* %1406 to double*
  store double %1412, double* %1413, align 1, !tbaa !2452
  %1414 = getelementptr inbounds i8, i8* %1406, i64 8
  %1415 = bitcast i8* %1414 to double*
  store double 0.000000e+00, double* %1415, align 1, !tbaa !2452
  %1416 = load i64, i64* %RBP
  %1417 = sub i64 %1416, 24
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 4
  store i64 %1419, i64* %PC
  %1420 = inttoptr i64 %1417 to i64*
  %1421 = load i64, i64* %1420
  store i64 %1421, i64* %RAX, align 8, !tbaa !2428
  %1422 = load i64, i64* %RBP
  %1423 = sub i64 %1422, 4
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 3
  store i64 %1425, i64* %PC
  %1426 = inttoptr i64 %1423 to i32*
  %1427 = load i32, i32* %1426
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RDX, align 8, !tbaa !2428
  %1429 = load i64, i64* %RDX
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 28
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 3
  store i64 %1433, i64* %PC
  %1434 = trunc i64 %1429 to i32
  %1435 = inttoptr i64 %1431 to i32*
  %1436 = load i32, i32* %1435
  %1437 = sub i32 %1434, %1436
  %1438 = zext i32 %1437 to i64
  store i64 %1438, i64* %RDX, align 8, !tbaa !2428
  %1439 = icmp ult i32 %1434, %1436
  %1440 = zext i1 %1439 to i8
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1440, i8* %1441, align 1, !tbaa !2432
  %1442 = and i32 %1437, 255
  %1443 = call i32 @llvm.ctpop.i32(i32 %1442) #17
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  %1446 = xor i8 %1445, 1
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1446, i8* %1447, align 1, !tbaa !2446
  %1448 = xor i32 %1436, %1434
  %1449 = xor i32 %1448, %1437
  %1450 = lshr i32 %1449, 4
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1452, i8* %1453, align 1, !tbaa !2447
  %1454 = icmp eq i32 %1437, 0
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1455, i8* %1456, align 1, !tbaa !2448
  %1457 = lshr i32 %1437, 31
  %1458 = trunc i32 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1458, i8* %1459, align 1, !tbaa !2449
  %1460 = lshr i32 %1434, 31
  %1461 = lshr i32 %1436, 31
  %1462 = xor i32 %1461, %1460
  %1463 = xor i32 %1457, %1460
  %1464 = add nuw nsw i32 %1463, %1462
  %1465 = icmp eq i32 %1464, 2
  %1466 = zext i1 %1465 to i8
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1466, i8* %1467, align 1, !tbaa !2450
  %1468 = load i32, i32* %EDX
  %1469 = zext i32 %1468 to i64
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 3
  store i64 %1471, i64* %PC
  %1472 = shl i64 %1469, 32
  %1473 = ashr exact i64 %1472, 32
  store i64 %1473, i64* %RCX, align 8, !tbaa !2428
  %1474 = load i64, i64* %RAX
  %1475 = load i64, i64* %RCX
  %1476 = mul i64 %1475, 8
  %1477 = add i64 %1476, %1474
  %1478 = bitcast %union.vec128_t* %XMM0 to i8*
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 5
  store i64 %1480, i64* %PC
  %1481 = bitcast i8* %1478 to double*
  %1482 = load double, double* %1481, align 1
  %1483 = inttoptr i64 %1477 to double*
  store double %1482, double* %1483
  %1484 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1485 = load i64, i64* %RBP
  %1486 = sub i64 %1485, 48
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 5
  store i64 %1488, i64* %PC
  %1489 = inttoptr i64 %1486 to double*
  %1490 = load double, double* %1489
  %1491 = bitcast i8* %1484 to double*
  store double %1490, double* %1491, align 1, !tbaa !2452
  %1492 = getelementptr inbounds i8, i8* %1484, i64 8
  %1493 = bitcast i8* %1492 to double*
  store double 0.000000e+00, double* %1493, align 1, !tbaa !2452
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 24
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 4
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %RAX, align 8, !tbaa !2428
  %1500 = load i64, i64* %RBP
  %1501 = sub i64 %1500, 4
  %1502 = load i64, i64* %PC
  %1503 = add i64 %1502, 3
  store i64 %1503, i64* %PC
  %1504 = inttoptr i64 %1501 to i32*
  %1505 = load i32, i32* %1504
  %1506 = zext i32 %1505 to i64
  store i64 %1506, i64* %RDX, align 8, !tbaa !2428
  %1507 = load i64, i64* %RDX
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 28
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 3
  store i64 %1511, i64* %PC
  %1512 = trunc i64 %1507 to i32
  %1513 = inttoptr i64 %1509 to i32*
  %1514 = load i32, i32* %1513
  %1515 = sub i32 %1512, %1514
  %1516 = zext i32 %1515 to i64
  store i64 %1516, i64* %RDX, align 8, !tbaa !2428
  %1517 = icmp ult i32 %1512, %1514
  %1518 = zext i1 %1517 to i8
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1518, i8* %1519, align 1, !tbaa !2432
  %1520 = and i32 %1515, 255
  %1521 = call i32 @llvm.ctpop.i32(i32 %1520) #17
  %1522 = trunc i32 %1521 to i8
  %1523 = and i8 %1522, 1
  %1524 = xor i8 %1523, 1
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1524, i8* %1525, align 1, !tbaa !2446
  %1526 = xor i32 %1514, %1512
  %1527 = xor i32 %1526, %1515
  %1528 = lshr i32 %1527, 4
  %1529 = trunc i32 %1528 to i8
  %1530 = and i8 %1529, 1
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1530, i8* %1531, align 1, !tbaa !2447
  %1532 = icmp eq i32 %1515, 0
  %1533 = zext i1 %1532 to i8
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1533, i8* %1534, align 1, !tbaa !2448
  %1535 = lshr i32 %1515, 31
  %1536 = trunc i32 %1535 to i8
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1536, i8* %1537, align 1, !tbaa !2449
  %1538 = lshr i32 %1512, 31
  %1539 = lshr i32 %1514, 31
  %1540 = xor i32 %1539, %1538
  %1541 = xor i32 %1535, %1538
  %1542 = add nuw nsw i32 %1541, %1540
  %1543 = icmp eq i32 %1542, 2
  %1544 = zext i1 %1543 to i8
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1544, i8* %1545, align 1, !tbaa !2450
  %1546 = load i64, i64* %RDX
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 3
  store i64 %1548, i64* %PC
  %1549 = trunc i64 %1546 to i32
  %1550 = add i32 1, %1549
  %1551 = zext i32 %1550 to i64
  store i64 %1551, i64* %RDX, align 8, !tbaa !2428
  %1552 = icmp ult i32 %1550, %1549
  %1553 = icmp ult i32 %1550, 1
  %1554 = or i1 %1552, %1553
  %1555 = zext i1 %1554 to i8
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1555, i8* %1556, align 1, !tbaa !2432
  %1557 = and i32 %1550, 255
  %1558 = call i32 @llvm.ctpop.i32(i32 %1557) #17
  %1559 = trunc i32 %1558 to i8
  %1560 = and i8 %1559, 1
  %1561 = xor i8 %1560, 1
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1561, i8* %1562, align 1, !tbaa !2446
  %1563 = xor i64 1, %1546
  %1564 = trunc i64 %1563 to i32
  %1565 = xor i32 %1564, %1550
  %1566 = lshr i32 %1565, 4
  %1567 = trunc i32 %1566 to i8
  %1568 = and i8 %1567, 1
  %1569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1568, i8* %1569, align 1, !tbaa !2447
  %1570 = icmp eq i32 %1550, 0
  %1571 = zext i1 %1570 to i8
  %1572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1571, i8* %1572, align 1, !tbaa !2448
  %1573 = lshr i32 %1550, 31
  %1574 = trunc i32 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1574, i8* %1575, align 1, !tbaa !2449
  %1576 = lshr i32 %1549, 31
  %1577 = xor i32 %1573, %1576
  %1578 = add nuw nsw i32 %1577, %1573
  %1579 = icmp eq i32 %1578, 2
  %1580 = zext i1 %1579 to i8
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1580, i8* %1581, align 1, !tbaa !2450
  %1582 = load i32, i32* %EDX
  %1583 = zext i32 %1582 to i64
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 3
  store i64 %1585, i64* %PC
  %1586 = shl i64 %1583, 32
  %1587 = ashr exact i64 %1586, 32
  store i64 %1587, i64* %RCX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = load i64, i64* %RCX
  %1590 = mul i64 %1589, 8
  %1591 = add i64 %1590, %1588
  %1592 = bitcast %union.vec128_t* %XMM0 to i8*
  %1593 = load i64, i64* %PC
  %1594 = add i64 %1593, 5
  store i64 %1594, i64* %PC
  %1595 = bitcast i8* %1592 to double*
  %1596 = load double, double* %1595, align 1
  %1597 = inttoptr i64 %1591 to double*
  store double %1596, double* %1597
  %1598 = load i64, i64* %RBP
  %1599 = sub i64 %1598, 28
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 3
  store i64 %1601, i64* %PC
  %1602 = inttoptr i64 %1599 to i32*
  %1603 = load i32, i32* %1602
  %1604 = zext i32 %1603 to i64
  store i64 %1604, i64* %RAX, align 8, !tbaa !2428
  %1605 = load i64, i64* %RAX
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 3
  store i64 %1607, i64* %PC
  %1608 = trunc i64 %1605 to i32
  %1609 = add i32 2, %1608
  %1610 = zext i32 %1609 to i64
  store i64 %1610, i64* %RAX, align 8, !tbaa !2428
  %1611 = icmp ult i32 %1609, %1608
  %1612 = icmp ult i32 %1609, 2
  %1613 = or i1 %1611, %1612
  %1614 = zext i1 %1613 to i8
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1614, i8* %1615, align 1, !tbaa !2432
  %1616 = and i32 %1609, 255
  %1617 = call i32 @llvm.ctpop.i32(i32 %1616) #17
  %1618 = trunc i32 %1617 to i8
  %1619 = and i8 %1618, 1
  %1620 = xor i8 %1619, 1
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1620, i8* %1621, align 1, !tbaa !2446
  %1622 = xor i64 2, %1605
  %1623 = trunc i64 %1622 to i32
  %1624 = xor i32 %1623, %1609
  %1625 = lshr i32 %1624, 4
  %1626 = trunc i32 %1625 to i8
  %1627 = and i8 %1626, 1
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1627, i8* %1628, align 1, !tbaa !2447
  %1629 = icmp eq i32 %1609, 0
  %1630 = zext i1 %1629 to i8
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1630, i8* %1631, align 1, !tbaa !2448
  %1632 = lshr i32 %1609, 31
  %1633 = trunc i32 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1633, i8* %1634, align 1, !tbaa !2449
  %1635 = lshr i32 %1608, 31
  %1636 = xor i32 %1632, %1635
  %1637 = add nuw nsw i32 %1636, %1632
  %1638 = icmp eq i32 %1637, 2
  %1639 = zext i1 %1638 to i8
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1639, i8* %1640, align 1, !tbaa !2450
  %1641 = load i64, i64* %RBP
  %1642 = sub i64 %1641, 28
  %1643 = load i32, i32* %EAX
  %1644 = zext i32 %1643 to i64
  %1645 = load i64, i64* %PC
  %1646 = add i64 %1645, 3
  store i64 %1646, i64* %PC
  %1647 = inttoptr i64 %1642 to i32*
  store i32 %1643, i32* %1647
  %1648 = load i64, i64* %PC
  %1649 = sub i64 %1648, 159
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 5
  store i64 %1651, i64* %PC
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1649, i64* %1652, align 8, !tbaa !2428
  br label %block_400f1d

block_400fd1:                                     ; preds = %block_400fc1, %block_400e8d
  %MEMORY.2 = phi %struct.Memory* [ %2746, %block_400e8d ], [ %2970, %block_400fc1 ]
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 5
  %1655 = load i64, i64* %PC
  %1656 = add i64 %1655, 5
  store i64 %1656, i64* %PC
  %1657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1654, i64* %1657, align 8, !tbaa !2428
  br label %block_400fd6

block_400f16:                                     ; preds = %block_400e8d
  %1658 = load i64, i64* %RBP
  %1659 = sub i64 %1658, 28
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 7
  store i64 %1661, i64* %PC
  %1662 = inttoptr i64 %1659 to i32*
  store i32 2, i32* %1662
  br label %block_400f1d

block_400e8d:                                     ; preds = %block_400e70
  %1663 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1664 = load i64, i64* %PC
  %1665 = add i64 %1664, 8
  store i64 %1665, i64* %PC
  %1666 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 64) to double*)
  %1667 = bitcast i8* %1663 to double*
  store double %1666, double* %1667, align 1, !tbaa !2452
  %1668 = getelementptr inbounds i8, i8* %1663, i64 8
  %1669 = bitcast i8* %1668 to double*
  store double 0.000000e+00, double* %1669, align 1, !tbaa !2452
  %1670 = load i64, i64* %RBP
  %1671 = sub i64 %1670, 4
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 3
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i32*
  %1675 = load i32, i32* %1674
  %1676 = zext i32 %1675 to i64
  store i64 %1676, i64* %RAX, align 8, !tbaa !2428
  %1677 = load i64, i64* %RAX
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 3
  store i64 %1679, i64* %PC
  %1680 = shl i64 %1677, 32
  %1681 = ashr i64 %1680, 33
  %1682 = trunc i64 %1677 to i8
  %1683 = and i8 %1682, 1
  %1684 = trunc i64 %1681 to i32
  %1685 = and i64 %1681, 4294967295
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1683, i8* %1686, align 1, !tbaa !2451
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1688 = and i32 %1684, 255
  %1689 = call i32 @llvm.ctpop.i32(i32 %1688) #17
  %1690 = trunc i32 %1689 to i8
  %1691 = and i8 %1690, 1
  %1692 = xor i8 %1691, 1
  store i8 %1692, i8* %1687, align 1, !tbaa !2451
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1693, align 1, !tbaa !2451
  %1694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1695 = icmp eq i32 %1684, 0
  %1696 = zext i1 %1695 to i8
  store i8 %1696, i8* %1694, align 1, !tbaa !2451
  %1697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1698 = lshr i32 %1684, 31
  %1699 = trunc i32 %1698 to i8
  store i8 %1699, i8* %1697, align 1, !tbaa !2451
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1700, align 1, !tbaa !2451
  %1701 = load i64, i64* %RBP
  %1702 = sub i64 %1701, 32
  %1703 = load i32, i32* %EAX
  %1704 = zext i32 %1703 to i64
  %1705 = load i64, i64* %PC
  %1706 = add i64 %1705, 3
  store i64 %1706, i64* %PC
  %1707 = inttoptr i64 %1702 to i32*
  store i32 %1703, i32* %1707
  %1708 = load i64, i64* %PC
  %1709 = sub i64 %1708, 1998
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 5
  %1712 = load i64, i64* %PC
  %1713 = add i64 %1712, 5
  store i64 %1713, i64* %PC
  %1714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1715 = load i64, i64* %1714, align 8, !tbaa !2428
  %1716 = add i64 %1715, -8
  %1717 = inttoptr i64 %1716 to i64*
  store i64 %1711, i64* %1717
  store i64 %1716, i64* %1714, align 8, !tbaa !2428
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1709, i64* %1718, align 8, !tbaa !2428
  %1719 = load i64, i64* %PC
  %1720 = bitcast %struct.State** %state.i1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1720)
  %1721 = bitcast i64* %curr_pc.i2 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1721)
  %1722 = bitcast %struct.Memory** %memory.i3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1722)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i4)
  %1723 = bitcast i64* %SS_BASE.i5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1723)
  %1724 = bitcast i64* %ES_BASE.i6 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1724)
  %1725 = bitcast i64* %DS_BASE.i7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1725)
  %1726 = bitcast i64* %CS_BASE.i8 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1726)
  %1727 = bitcast %struct.State** %STATE.i9 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1727)
  %1728 = bitcast %struct.Memory** %MEMORY.i10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1728)
  %1729 = bitcast i64** %_DR0.i11 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1729)
  %1730 = bitcast i64** %_DR1.i12 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1730)
  %1731 = bitcast i64** %_DR2.i13 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1731)
  %1732 = bitcast i64** %_DR3.i14 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1732)
  %1733 = bitcast i64** %_DR4.i15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1733)
  %1734 = bitcast i64** %_DR5.i16 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1734)
  %1735 = bitcast i64** %_DR6.i17 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1735)
  %1736 = bitcast i64** %_DR7.i18 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1736)
  %1737 = bitcast i64** %CR0.i19 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1737)
  %1738 = bitcast i64** %CR1.i20 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1738)
  %1739 = bitcast i64** %CR2.i21 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1739)
  %1740 = bitcast i64** %CR3.i22 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1740)
  %1741 = bitcast i64** %CR4.i23 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1741)
  %1742 = bitcast i64** %CR8.i24 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1742)
  store %struct.State* %0, %struct.State** %state.i1, align 8, !noalias !2467
  store i64 %1719, i64* %curr_pc.i2, align 8, !noalias !2467
  store %struct.Memory* %2, %struct.Memory** %memory.i3, align 8, !noalias !2467
  store i8 0, i8* %BRANCH_TAKEN.i4, align 1, !noalias !2467
  store i64 0, i64* %SS_BASE.i5, align 8, !noalias !2467
  store i64 0, i64* %ES_BASE.i6, align 8, !noalias !2467
  store i64 0, i64* %DS_BASE.i7, align 8, !noalias !2467
  store i64 0, i64* %CS_BASE.i8, align 8, !noalias !2467
  store %struct.State* %0, %struct.State** %STATE.i9, align 8, !noalias !2467
  store %struct.Memory* %2, %struct.Memory** %MEMORY.i10, align 8, !noalias !2467
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1744 = getelementptr inbounds %struct.GPR, %struct.GPR* %1743, i32 0, i32 33
  %1745 = getelementptr inbounds %struct.Reg, %struct.Reg* %1744, i32 0, i32 0
  %PC.i25 = bitcast %union.anon* %1745 to i64*
  store i64 %1719, i64* %PC.i25, align 8, !alias.scope !2471, !noalias !2472
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1747 = getelementptr inbounds %struct.GPR, %struct.GPR* %1746, i32 0, i32 1
  %1748 = getelementptr inbounds %struct.Reg, %struct.Reg* %1747, i32 0, i32 0
  %1749 = bitcast %union.anon* %1748 to %struct.anon.2*
  %AH.i26 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1749, i32 0, i32 1
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1751 = getelementptr inbounds %struct.GPR, %struct.GPR* %1750, i32 0, i32 3
  %1752 = getelementptr inbounds %struct.Reg, %struct.Reg* %1751, i32 0, i32 0
  %1753 = bitcast %union.anon* %1752 to %struct.anon.2*
  %BH.i27 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1753, i32 0, i32 1
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1755 = getelementptr inbounds %struct.GPR, %struct.GPR* %1754, i32 0, i32 5
  %1756 = getelementptr inbounds %struct.Reg, %struct.Reg* %1755, i32 0, i32 0
  %1757 = bitcast %union.anon* %1756 to %struct.anon.2*
  %CH.i28 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1757, i32 0, i32 1
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1759 = getelementptr inbounds %struct.GPR, %struct.GPR* %1758, i32 0, i32 7
  %1760 = getelementptr inbounds %struct.Reg, %struct.Reg* %1759, i32 0, i32 0
  %1761 = bitcast %union.anon* %1760 to %struct.anon.2*
  %DH.i29 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1761, i32 0, i32 1
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1763 = getelementptr inbounds %struct.GPR, %struct.GPR* %1762, i32 0, i32 1
  %1764 = getelementptr inbounds %struct.Reg, %struct.Reg* %1763, i32 0, i32 0
  %1765 = bitcast %union.anon* %1764 to %struct.anon.2*
  %AL.i30 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1765, i32 0, i32 0
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1767 = getelementptr inbounds %struct.GPR, %struct.GPR* %1766, i32 0, i32 3
  %1768 = getelementptr inbounds %struct.Reg, %struct.Reg* %1767, i32 0, i32 0
  %1769 = bitcast %union.anon* %1768 to %struct.anon.2*
  %BL.i31 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1769, i32 0, i32 0
  %1770 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1771 = getelementptr inbounds %struct.GPR, %struct.GPR* %1770, i32 0, i32 5
  %1772 = getelementptr inbounds %struct.Reg, %struct.Reg* %1771, i32 0, i32 0
  %1773 = bitcast %union.anon* %1772 to %struct.anon.2*
  %CL.i32 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1773, i32 0, i32 0
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1775 = getelementptr inbounds %struct.GPR, %struct.GPR* %1774, i32 0, i32 7
  %1776 = getelementptr inbounds %struct.Reg, %struct.Reg* %1775, i32 0, i32 0
  %1777 = bitcast %union.anon* %1776 to %struct.anon.2*
  %DL.i33 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1777, i32 0, i32 0
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1779 = getelementptr inbounds %struct.GPR, %struct.GPR* %1778, i32 0, i32 9
  %1780 = getelementptr inbounds %struct.Reg, %struct.Reg* %1779, i32 0, i32 0
  %1781 = bitcast %union.anon* %1780 to %struct.anon.2*
  %SIL.i34 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1781, i32 0, i32 0
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1783 = getelementptr inbounds %struct.GPR, %struct.GPR* %1782, i32 0, i32 11
  %1784 = getelementptr inbounds %struct.Reg, %struct.Reg* %1783, i32 0, i32 0
  %1785 = bitcast %union.anon* %1784 to %struct.anon.2*
  %DIL.i35 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1785, i32 0, i32 0
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1787 = getelementptr inbounds %struct.GPR, %struct.GPR* %1786, i32 0, i32 13
  %1788 = getelementptr inbounds %struct.Reg, %struct.Reg* %1787, i32 0, i32 0
  %1789 = bitcast %union.anon* %1788 to %struct.anon.2*
  %SPL.i36 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1789, i32 0, i32 0
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1791 = getelementptr inbounds %struct.GPR, %struct.GPR* %1790, i32 0, i32 15
  %1792 = getelementptr inbounds %struct.Reg, %struct.Reg* %1791, i32 0, i32 0
  %1793 = bitcast %union.anon* %1792 to %struct.anon.2*
  %BPL.i37 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1793, i32 0, i32 0
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1795 = getelementptr inbounds %struct.GPR, %struct.GPR* %1794, i32 0, i32 17
  %1796 = getelementptr inbounds %struct.Reg, %struct.Reg* %1795, i32 0, i32 0
  %1797 = bitcast %union.anon* %1796 to %struct.anon.2*
  %R8B.i38 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1797, i32 0, i32 0
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1799 = getelementptr inbounds %struct.GPR, %struct.GPR* %1798, i32 0, i32 19
  %1800 = getelementptr inbounds %struct.Reg, %struct.Reg* %1799, i32 0, i32 0
  %1801 = bitcast %union.anon* %1800 to %struct.anon.2*
  %R9B.i39 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1801, i32 0, i32 0
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1803 = getelementptr inbounds %struct.GPR, %struct.GPR* %1802, i32 0, i32 21
  %1804 = getelementptr inbounds %struct.Reg, %struct.Reg* %1803, i32 0, i32 0
  %1805 = bitcast %union.anon* %1804 to %struct.anon.2*
  %R10B.i40 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1805, i32 0, i32 0
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1807 = getelementptr inbounds %struct.GPR, %struct.GPR* %1806, i32 0, i32 23
  %1808 = getelementptr inbounds %struct.Reg, %struct.Reg* %1807, i32 0, i32 0
  %1809 = bitcast %union.anon* %1808 to %struct.anon.2*
  %R11B.i41 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1809, i32 0, i32 0
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1811 = getelementptr inbounds %struct.GPR, %struct.GPR* %1810, i32 0, i32 25
  %1812 = getelementptr inbounds %struct.Reg, %struct.Reg* %1811, i32 0, i32 0
  %1813 = bitcast %union.anon* %1812 to %struct.anon.2*
  %R12B.i42 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1813, i32 0, i32 0
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1815 = getelementptr inbounds %struct.GPR, %struct.GPR* %1814, i32 0, i32 27
  %1816 = getelementptr inbounds %struct.Reg, %struct.Reg* %1815, i32 0, i32 0
  %1817 = bitcast %union.anon* %1816 to %struct.anon.2*
  %R13B.i43 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1817, i32 0, i32 0
  %1818 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1819 = getelementptr inbounds %struct.GPR, %struct.GPR* %1818, i32 0, i32 29
  %1820 = getelementptr inbounds %struct.Reg, %struct.Reg* %1819, i32 0, i32 0
  %1821 = bitcast %union.anon* %1820 to %struct.anon.2*
  %R14B.i44 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1821, i32 0, i32 0
  %1822 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1823 = getelementptr inbounds %struct.GPR, %struct.GPR* %1822, i32 0, i32 31
  %1824 = getelementptr inbounds %struct.Reg, %struct.Reg* %1823, i32 0, i32 0
  %1825 = bitcast %union.anon* %1824 to %struct.anon.2*
  %R15B.i45 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %1825, i32 0, i32 0
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1827 = getelementptr inbounds %struct.GPR, %struct.GPR* %1826, i32 0, i32 1
  %1828 = getelementptr inbounds %struct.Reg, %struct.Reg* %1827, i32 0, i32 0
  %AX.i46 = bitcast %union.anon* %1828 to i16*
  %1829 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1830 = getelementptr inbounds %struct.GPR, %struct.GPR* %1829, i32 0, i32 3
  %1831 = getelementptr inbounds %struct.Reg, %struct.Reg* %1830, i32 0, i32 0
  %BX.i47 = bitcast %union.anon* %1831 to i16*
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1833 = getelementptr inbounds %struct.GPR, %struct.GPR* %1832, i32 0, i32 5
  %1834 = getelementptr inbounds %struct.Reg, %struct.Reg* %1833, i32 0, i32 0
  %CX.i48 = bitcast %union.anon* %1834 to i16*
  %1835 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1836 = getelementptr inbounds %struct.GPR, %struct.GPR* %1835, i32 0, i32 7
  %1837 = getelementptr inbounds %struct.Reg, %struct.Reg* %1836, i32 0, i32 0
  %DX.i49 = bitcast %union.anon* %1837 to i16*
  %1838 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1839 = getelementptr inbounds %struct.GPR, %struct.GPR* %1838, i32 0, i32 9
  %1840 = getelementptr inbounds %struct.Reg, %struct.Reg* %1839, i32 0, i32 0
  %SI.i50 = bitcast %union.anon* %1840 to i16*
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1842 = getelementptr inbounds %struct.GPR, %struct.GPR* %1841, i32 0, i32 11
  %1843 = getelementptr inbounds %struct.Reg, %struct.Reg* %1842, i32 0, i32 0
  %DI.i51 = bitcast %union.anon* %1843 to i16*
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1845 = getelementptr inbounds %struct.GPR, %struct.GPR* %1844, i32 0, i32 13
  %1846 = getelementptr inbounds %struct.Reg, %struct.Reg* %1845, i32 0, i32 0
  %SP.i52 = bitcast %union.anon* %1846 to i16*
  %1847 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1848 = getelementptr inbounds %struct.GPR, %struct.GPR* %1847, i32 0, i32 15
  %1849 = getelementptr inbounds %struct.Reg, %struct.Reg* %1848, i32 0, i32 0
  %BP.i53 = bitcast %union.anon* %1849 to i16*
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1851 = getelementptr inbounds %struct.GPR, %struct.GPR* %1850, i32 0, i32 17
  %1852 = getelementptr inbounds %struct.Reg, %struct.Reg* %1851, i32 0, i32 0
  %R8W.i54 = bitcast %union.anon* %1852 to i16*
  %1853 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1854 = getelementptr inbounds %struct.GPR, %struct.GPR* %1853, i32 0, i32 19
  %1855 = getelementptr inbounds %struct.Reg, %struct.Reg* %1854, i32 0, i32 0
  %R9W.i55 = bitcast %union.anon* %1855 to i16*
  %1856 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1857 = getelementptr inbounds %struct.GPR, %struct.GPR* %1856, i32 0, i32 21
  %1858 = getelementptr inbounds %struct.Reg, %struct.Reg* %1857, i32 0, i32 0
  %R10W.i56 = bitcast %union.anon* %1858 to i16*
  %1859 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1860 = getelementptr inbounds %struct.GPR, %struct.GPR* %1859, i32 0, i32 23
  %1861 = getelementptr inbounds %struct.Reg, %struct.Reg* %1860, i32 0, i32 0
  %R11W.i57 = bitcast %union.anon* %1861 to i16*
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1863 = getelementptr inbounds %struct.GPR, %struct.GPR* %1862, i32 0, i32 25
  %1864 = getelementptr inbounds %struct.Reg, %struct.Reg* %1863, i32 0, i32 0
  %R12W.i58 = bitcast %union.anon* %1864 to i16*
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1866 = getelementptr inbounds %struct.GPR, %struct.GPR* %1865, i32 0, i32 27
  %1867 = getelementptr inbounds %struct.Reg, %struct.Reg* %1866, i32 0, i32 0
  %R13W.i59 = bitcast %union.anon* %1867 to i16*
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1869 = getelementptr inbounds %struct.GPR, %struct.GPR* %1868, i32 0, i32 29
  %1870 = getelementptr inbounds %struct.Reg, %struct.Reg* %1869, i32 0, i32 0
  %R14W.i60 = bitcast %union.anon* %1870 to i16*
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1872 = getelementptr inbounds %struct.GPR, %struct.GPR* %1871, i32 0, i32 31
  %1873 = getelementptr inbounds %struct.Reg, %struct.Reg* %1872, i32 0, i32 0
  %R15W.i61 = bitcast %union.anon* %1873 to i16*
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1875 = getelementptr inbounds %struct.GPR, %struct.GPR* %1874, i32 0, i32 33
  %1876 = getelementptr inbounds %struct.Reg, %struct.Reg* %1875, i32 0, i32 0
  %IP.i62 = bitcast %union.anon* %1876 to i16*
  %1877 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1878 = getelementptr inbounds %struct.GPR, %struct.GPR* %1877, i32 0, i32 1
  %1879 = getelementptr inbounds %struct.Reg, %struct.Reg* %1878, i32 0, i32 0
  %EAX.i63 = bitcast %union.anon* %1879 to i32*
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1881 = getelementptr inbounds %struct.GPR, %struct.GPR* %1880, i32 0, i32 3
  %1882 = getelementptr inbounds %struct.Reg, %struct.Reg* %1881, i32 0, i32 0
  %EBX.i64 = bitcast %union.anon* %1882 to i32*
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1884 = getelementptr inbounds %struct.GPR, %struct.GPR* %1883, i32 0, i32 5
  %1885 = getelementptr inbounds %struct.Reg, %struct.Reg* %1884, i32 0, i32 0
  %ECX.i65 = bitcast %union.anon* %1885 to i32*
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1887 = getelementptr inbounds %struct.GPR, %struct.GPR* %1886, i32 0, i32 7
  %1888 = getelementptr inbounds %struct.Reg, %struct.Reg* %1887, i32 0, i32 0
  %EDX.i66 = bitcast %union.anon* %1888 to i32*
  %1889 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1890 = getelementptr inbounds %struct.GPR, %struct.GPR* %1889, i32 0, i32 9
  %1891 = getelementptr inbounds %struct.Reg, %struct.Reg* %1890, i32 0, i32 0
  %ESI.i67 = bitcast %union.anon* %1891 to i32*
  %1892 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1893 = getelementptr inbounds %struct.GPR, %struct.GPR* %1892, i32 0, i32 11
  %1894 = getelementptr inbounds %struct.Reg, %struct.Reg* %1893, i32 0, i32 0
  %EDI.i68 = bitcast %union.anon* %1894 to i32*
  %1895 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1896 = getelementptr inbounds %struct.GPR, %struct.GPR* %1895, i32 0, i32 13
  %1897 = getelementptr inbounds %struct.Reg, %struct.Reg* %1896, i32 0, i32 0
  %ESP.i69 = bitcast %union.anon* %1897 to i32*
  %1898 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1899 = getelementptr inbounds %struct.GPR, %struct.GPR* %1898, i32 0, i32 15
  %1900 = getelementptr inbounds %struct.Reg, %struct.Reg* %1899, i32 0, i32 0
  %EBP.i70 = bitcast %union.anon* %1900 to i32*
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1902 = getelementptr inbounds %struct.GPR, %struct.GPR* %1901, i32 0, i32 33
  %1903 = getelementptr inbounds %struct.Reg, %struct.Reg* %1902, i32 0, i32 0
  %EIP.i71 = bitcast %union.anon* %1903 to i32*
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1905 = getelementptr inbounds %struct.GPR, %struct.GPR* %1904, i32 0, i32 17
  %1906 = getelementptr inbounds %struct.Reg, %struct.Reg* %1905, i32 0, i32 0
  %R8D.i72 = bitcast %union.anon* %1906 to i32*
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1908 = getelementptr inbounds %struct.GPR, %struct.GPR* %1907, i32 0, i32 19
  %1909 = getelementptr inbounds %struct.Reg, %struct.Reg* %1908, i32 0, i32 0
  %R9D.i73 = bitcast %union.anon* %1909 to i32*
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1911 = getelementptr inbounds %struct.GPR, %struct.GPR* %1910, i32 0, i32 21
  %1912 = getelementptr inbounds %struct.Reg, %struct.Reg* %1911, i32 0, i32 0
  %R10D.i74 = bitcast %union.anon* %1912 to i32*
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1914 = getelementptr inbounds %struct.GPR, %struct.GPR* %1913, i32 0, i32 23
  %1915 = getelementptr inbounds %struct.Reg, %struct.Reg* %1914, i32 0, i32 0
  %R11D.i75 = bitcast %union.anon* %1915 to i32*
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1917 = getelementptr inbounds %struct.GPR, %struct.GPR* %1916, i32 0, i32 25
  %1918 = getelementptr inbounds %struct.Reg, %struct.Reg* %1917, i32 0, i32 0
  %R12D.i76 = bitcast %union.anon* %1918 to i32*
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1920 = getelementptr inbounds %struct.GPR, %struct.GPR* %1919, i32 0, i32 27
  %1921 = getelementptr inbounds %struct.Reg, %struct.Reg* %1920, i32 0, i32 0
  %R13D.i77 = bitcast %union.anon* %1921 to i32*
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1923 = getelementptr inbounds %struct.GPR, %struct.GPR* %1922, i32 0, i32 29
  %1924 = getelementptr inbounds %struct.Reg, %struct.Reg* %1923, i32 0, i32 0
  %R14D.i78 = bitcast %union.anon* %1924 to i32*
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1926 = getelementptr inbounds %struct.GPR, %struct.GPR* %1925, i32 0, i32 31
  %1927 = getelementptr inbounds %struct.Reg, %struct.Reg* %1926, i32 0, i32 0
  %R15D.i79 = bitcast %union.anon* %1927 to i32*
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1929 = getelementptr inbounds %struct.GPR, %struct.GPR* %1928, i32 0, i32 1
  %1930 = getelementptr inbounds %struct.Reg, %struct.Reg* %1929, i32 0, i32 0
  %RAX.i80 = bitcast %union.anon* %1930 to i64*
  %1931 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1932 = getelementptr inbounds %struct.GPR, %struct.GPR* %1931, i32 0, i32 3
  %1933 = getelementptr inbounds %struct.Reg, %struct.Reg* %1932, i32 0, i32 0
  %RBX.i81 = bitcast %union.anon* %1933 to i64*
  %1934 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1935 = getelementptr inbounds %struct.GPR, %struct.GPR* %1934, i32 0, i32 5
  %1936 = getelementptr inbounds %struct.Reg, %struct.Reg* %1935, i32 0, i32 0
  %RCX.i82 = bitcast %union.anon* %1936 to i64*
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1938 = getelementptr inbounds %struct.GPR, %struct.GPR* %1937, i32 0, i32 7
  %1939 = getelementptr inbounds %struct.Reg, %struct.Reg* %1938, i32 0, i32 0
  %RDX.i83 = bitcast %union.anon* %1939 to i64*
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1941 = getelementptr inbounds %struct.GPR, %struct.GPR* %1940, i32 0, i32 9
  %1942 = getelementptr inbounds %struct.Reg, %struct.Reg* %1941, i32 0, i32 0
  %RSI.i84 = bitcast %union.anon* %1942 to i64*
  %1943 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1944 = getelementptr inbounds %struct.GPR, %struct.GPR* %1943, i32 0, i32 11
  %1945 = getelementptr inbounds %struct.Reg, %struct.Reg* %1944, i32 0, i32 0
  %RDI.i85 = bitcast %union.anon* %1945 to i64*
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1947 = getelementptr inbounds %struct.GPR, %struct.GPR* %1946, i32 0, i32 13
  %1948 = getelementptr inbounds %struct.Reg, %struct.Reg* %1947, i32 0, i32 0
  %RSP.i86 = bitcast %union.anon* %1948 to i64*
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1950 = getelementptr inbounds %struct.GPR, %struct.GPR* %1949, i32 0, i32 15
  %1951 = getelementptr inbounds %struct.Reg, %struct.Reg* %1950, i32 0, i32 0
  %RBP.i87 = bitcast %union.anon* %1951 to i64*
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1953 = getelementptr inbounds %struct.GPR, %struct.GPR* %1952, i32 0, i32 17
  %1954 = getelementptr inbounds %struct.Reg, %struct.Reg* %1953, i32 0, i32 0
  %R8.i88 = bitcast %union.anon* %1954 to i64*
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1956 = getelementptr inbounds %struct.GPR, %struct.GPR* %1955, i32 0, i32 19
  %1957 = getelementptr inbounds %struct.Reg, %struct.Reg* %1956, i32 0, i32 0
  %R9.i89 = bitcast %union.anon* %1957 to i64*
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1959 = getelementptr inbounds %struct.GPR, %struct.GPR* %1958, i32 0, i32 21
  %1960 = getelementptr inbounds %struct.Reg, %struct.Reg* %1959, i32 0, i32 0
  %R10.i90 = bitcast %union.anon* %1960 to i64*
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1962 = getelementptr inbounds %struct.GPR, %struct.GPR* %1961, i32 0, i32 23
  %1963 = getelementptr inbounds %struct.Reg, %struct.Reg* %1962, i32 0, i32 0
  %R11.i91 = bitcast %union.anon* %1963 to i64*
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1965 = getelementptr inbounds %struct.GPR, %struct.GPR* %1964, i32 0, i32 25
  %1966 = getelementptr inbounds %struct.Reg, %struct.Reg* %1965, i32 0, i32 0
  %R12.i92 = bitcast %union.anon* %1966 to i64*
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1968 = getelementptr inbounds %struct.GPR, %struct.GPR* %1967, i32 0, i32 27
  %1969 = getelementptr inbounds %struct.Reg, %struct.Reg* %1968, i32 0, i32 0
  %R13.i93 = bitcast %union.anon* %1969 to i64*
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1971 = getelementptr inbounds %struct.GPR, %struct.GPR* %1970, i32 0, i32 29
  %1972 = getelementptr inbounds %struct.Reg, %struct.Reg* %1971, i32 0, i32 0
  %R14.i94 = bitcast %union.anon* %1972 to i64*
  %1973 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1974 = getelementptr inbounds %struct.GPR, %struct.GPR* %1973, i32 0, i32 31
  %1975 = getelementptr inbounds %struct.Reg, %struct.Reg* %1974, i32 0, i32 0
  %R15.i95 = bitcast %union.anon* %1975 to i64*
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %1977 = getelementptr inbounds %struct.GPR, %struct.GPR* %1976, i32 0, i32 33
  %1978 = getelementptr inbounds %struct.Reg, %struct.Reg* %1977, i32 0, i32 0
  %RIP.i96 = bitcast %union.anon* %1978 to i64*
  %1979 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1980 = getelementptr inbounds %struct.Segments, %struct.Segments* %1979, i32 0, i32 1
  %SS.i97 = bitcast %union.SegmentSelector* %1980 to i16*
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1982 = getelementptr inbounds %struct.Segments, %struct.Segments* %1981, i32 0, i32 3
  %ES.i98 = bitcast %union.SegmentSelector* %1982 to i16*
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1984 = getelementptr inbounds %struct.Segments, %struct.Segments* %1983, i32 0, i32 5
  %GS.i99 = bitcast %union.SegmentSelector* %1984 to i16*
  %1985 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1986 = getelementptr inbounds %struct.Segments, %struct.Segments* %1985, i32 0, i32 7
  %FS.i100 = bitcast %union.SegmentSelector* %1986 to i16*
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1988 = getelementptr inbounds %struct.Segments, %struct.Segments* %1987, i32 0, i32 9
  %DS.i101 = bitcast %union.SegmentSelector* %1988 to i16*
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %1990 = getelementptr inbounds %struct.Segments, %struct.Segments* %1989, i32 0, i32 11
  %CS.i102 = bitcast %union.SegmentSelector* %1990 to i16*
  %1991 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %1992 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %1991, i32 0, i32 5
  %1993 = getelementptr inbounds %struct.Reg, %struct.Reg* %1992, i32 0, i32 0
  %GS_BASE.i103 = bitcast %union.anon* %1993 to i64*
  %1994 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %1995 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %1994, i32 0, i32 7
  %1996 = getelementptr inbounds %struct.Reg, %struct.Reg* %1995, i32 0, i32 0
  %FS_BASE.i104 = bitcast %union.anon* %1996 to i64*
  %1997 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %1998 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1997, i64 0, i64 0
  %YMM0.i105 = bitcast %union.VectorReg* %1998 to %"class.std::bitset"*
  %1999 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2000 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1999, i64 0, i64 1
  %YMM1.i106 = bitcast %union.VectorReg* %2000 to %"class.std::bitset"*
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2002 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2001, i64 0, i64 2
  %YMM2.i107 = bitcast %union.VectorReg* %2002 to %"class.std::bitset"*
  %2003 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2004 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2003, i64 0, i64 3
  %YMM3.i108 = bitcast %union.VectorReg* %2004 to %"class.std::bitset"*
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2006 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2005, i64 0, i64 4
  %YMM4.i109 = bitcast %union.VectorReg* %2006 to %"class.std::bitset"*
  %2007 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2008 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2007, i64 0, i64 5
  %YMM5.i110 = bitcast %union.VectorReg* %2008 to %"class.std::bitset"*
  %2009 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2010 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2009, i64 0, i64 6
  %YMM6.i111 = bitcast %union.VectorReg* %2010 to %"class.std::bitset"*
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2012 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2011, i64 0, i64 7
  %YMM7.i112 = bitcast %union.VectorReg* %2012 to %"class.std::bitset"*
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2014 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2013, i64 0, i64 8
  %YMM8.i113 = bitcast %union.VectorReg* %2014 to %"class.std::bitset"*
  %2015 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2016 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2015, i64 0, i64 9
  %YMM9.i114 = bitcast %union.VectorReg* %2016 to %"class.std::bitset"*
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2018 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2017, i64 0, i64 10
  %YMM10.i115 = bitcast %union.VectorReg* %2018 to %"class.std::bitset"*
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2020 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2019, i64 0, i64 11
  %YMM11.i116 = bitcast %union.VectorReg* %2020 to %"class.std::bitset"*
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2022 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2021, i64 0, i64 12
  %YMM12.i117 = bitcast %union.VectorReg* %2022 to %"class.std::bitset"*
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2024 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2023, i64 0, i64 13
  %YMM13.i118 = bitcast %union.VectorReg* %2024 to %"class.std::bitset"*
  %2025 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2026 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2025, i64 0, i64 14
  %YMM14.i119 = bitcast %union.VectorReg* %2026 to %"class.std::bitset"*
  %2027 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2028 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2027, i64 0, i64 15
  %YMM15.i120 = bitcast %union.VectorReg* %2028 to %"class.std::bitset"*
  %2029 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2030 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2029, i64 0, i64 0
  %XMM0.i121 = bitcast %union.VectorReg* %2030 to %union.vec128_t*
  %2031 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2032 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2031, i64 0, i64 1
  %XMM1.i122 = bitcast %union.VectorReg* %2032 to %union.vec128_t*
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2034 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2033, i64 0, i64 2
  %XMM2.i123 = bitcast %union.VectorReg* %2034 to %union.vec128_t*
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2036 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2035, i64 0, i64 3
  %XMM3.i124 = bitcast %union.VectorReg* %2036 to %union.vec128_t*
  %2037 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2038 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2037, i64 0, i64 4
  %XMM4.i125 = bitcast %union.VectorReg* %2038 to %union.vec128_t*
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2040 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2039, i64 0, i64 5
  %XMM5.i126 = bitcast %union.VectorReg* %2040 to %union.vec128_t*
  %2041 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2042 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2041, i64 0, i64 6
  %XMM6.i127 = bitcast %union.VectorReg* %2042 to %union.vec128_t*
  %2043 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2044 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2043, i64 0, i64 7
  %XMM7.i128 = bitcast %union.VectorReg* %2044 to %union.vec128_t*
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2046 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2045, i64 0, i64 8
  %XMM8.i129 = bitcast %union.VectorReg* %2046 to %union.vec128_t*
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2048 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2047, i64 0, i64 9
  %XMM9.i130 = bitcast %union.VectorReg* %2048 to %union.vec128_t*
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2050 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2049, i64 0, i64 10
  %XMM10.i131 = bitcast %union.VectorReg* %2050 to %union.vec128_t*
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2052 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2051, i64 0, i64 11
  %XMM11.i132 = bitcast %union.VectorReg* %2052 to %union.vec128_t*
  %2053 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2054 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2053, i64 0, i64 12
  %XMM12.i133 = bitcast %union.VectorReg* %2054 to %union.vec128_t*
  %2055 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2056 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2055, i64 0, i64 13
  %XMM13.i134 = bitcast %union.VectorReg* %2056 to %union.vec128_t*
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2058 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2057, i64 0, i64 14
  %XMM14.i135 = bitcast %union.VectorReg* %2058 to %union.vec128_t*
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2060 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2059, i64 0, i64 15
  %XMM15.i136 = bitcast %union.VectorReg* %2060 to %union.vec128_t*
  %2061 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2062 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2061, i32 0, i32 0
  %2063 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2062, i64 0, i64 0
  %ST0.i137 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2063, i32 0, i32 1
  %2064 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2065 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2064, i32 0, i32 0
  %2066 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2065, i64 0, i64 1
  %ST1.i138 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2066, i32 0, i32 1
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2068 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2067, i32 0, i32 0
  %2069 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2068, i64 0, i64 2
  %ST2.i139 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2069, i32 0, i32 1
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2071 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2070, i32 0, i32 0
  %2072 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2071, i64 0, i64 3
  %ST3.i140 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2072, i32 0, i32 1
  %2073 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2074 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2073, i32 0, i32 0
  %2075 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2074, i64 0, i64 4
  %ST4.i141 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2075, i32 0, i32 1
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2077 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2076, i32 0, i32 0
  %2078 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2077, i64 0, i64 5
  %ST5.i142 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2078, i32 0, i32 1
  %2079 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2080 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2079, i32 0, i32 0
  %2081 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2080, i64 0, i64 6
  %ST6.i143 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2081, i32 0, i32 1
  %2082 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2083 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2082, i32 0, i32 0
  %2084 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2083, i64 0, i64 7
  %ST7.i144 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2084, i32 0, i32 1
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2086 = getelementptr inbounds %struct.MMX, %struct.MMX* %2085, i32 0, i32 0
  %2087 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2086, i64 0, i64 0
  %2088 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2087, i32 0, i32 1
  %2089 = bitcast %union.vec64_t* %2088 to %struct.uint64v1_t*
  %2090 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2089, i32 0, i32 0
  %MM0.i145 = getelementptr inbounds [1 x i64], [1 x i64]* %2090, i64 0, i64 0
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2092 = getelementptr inbounds %struct.MMX, %struct.MMX* %2091, i32 0, i32 0
  %2093 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2092, i64 0, i64 1
  %2094 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2093, i32 0, i32 1
  %2095 = bitcast %union.vec64_t* %2094 to %struct.uint64v1_t*
  %2096 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2095, i32 0, i32 0
  %MM1.i146 = getelementptr inbounds [1 x i64], [1 x i64]* %2096, i64 0, i64 0
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2098 = getelementptr inbounds %struct.MMX, %struct.MMX* %2097, i32 0, i32 0
  %2099 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2098, i64 0, i64 2
  %2100 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2099, i32 0, i32 1
  %2101 = bitcast %union.vec64_t* %2100 to %struct.uint64v1_t*
  %2102 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2101, i32 0, i32 0
  %MM2.i147 = getelementptr inbounds [1 x i64], [1 x i64]* %2102, i64 0, i64 0
  %2103 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2104 = getelementptr inbounds %struct.MMX, %struct.MMX* %2103, i32 0, i32 0
  %2105 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2104, i64 0, i64 3
  %2106 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2105, i32 0, i32 1
  %2107 = bitcast %union.vec64_t* %2106 to %struct.uint64v1_t*
  %2108 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2107, i32 0, i32 0
  %MM3.i148 = getelementptr inbounds [1 x i64], [1 x i64]* %2108, i64 0, i64 0
  %2109 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2110 = getelementptr inbounds %struct.MMX, %struct.MMX* %2109, i32 0, i32 0
  %2111 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2110, i64 0, i64 4
  %2112 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2111, i32 0, i32 1
  %2113 = bitcast %union.vec64_t* %2112 to %struct.uint64v1_t*
  %2114 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2113, i32 0, i32 0
  %MM4.i149 = getelementptr inbounds [1 x i64], [1 x i64]* %2114, i64 0, i64 0
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2116 = getelementptr inbounds %struct.MMX, %struct.MMX* %2115, i32 0, i32 0
  %2117 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2116, i64 0, i64 5
  %2118 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2117, i32 0, i32 1
  %2119 = bitcast %union.vec64_t* %2118 to %struct.uint64v1_t*
  %2120 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2119, i32 0, i32 0
  %MM5.i150 = getelementptr inbounds [1 x i64], [1 x i64]* %2120, i64 0, i64 0
  %2121 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2122 = getelementptr inbounds %struct.MMX, %struct.MMX* %2121, i32 0, i32 0
  %2123 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2122, i64 0, i64 6
  %2124 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2123, i32 0, i32 1
  %2125 = bitcast %union.vec64_t* %2124 to %struct.uint64v1_t*
  %2126 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2125, i32 0, i32 0
  %MM6.i151 = getelementptr inbounds [1 x i64], [1 x i64]* %2126, i64 0, i64 0
  %2127 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2128 = getelementptr inbounds %struct.MMX, %struct.MMX* %2127, i32 0, i32 0
  %2129 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2128, i64 0, i64 7
  %2130 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2129, i32 0, i32 1
  %2131 = bitcast %union.vec64_t* %2130 to %struct.uint64v1_t*
  %2132 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2131, i32 0, i32 0
  %MM7.i152 = getelementptr inbounds [1 x i64], [1 x i64]* %2132, i64 0, i64 0
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i153 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2133, i32 0, i32 5
  %2134 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i154 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2134, i32 0, i32 1
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i155 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2135, i32 0, i32 11
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i156 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2136, i32 0, i32 13
  %2137 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i157 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2137, i32 0, i32 3
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i158 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2138, i32 0, i32 9
  %2139 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i159 = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2139, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i11, align 8, !noalias !2467
  store i64* @DR1, i64** %_DR1.i12, align 8, !noalias !2467
  store i64* @DR2, i64** %_DR2.i13, align 8, !noalias !2467
  store i64* @DR3, i64** %_DR3.i14, align 8, !noalias !2467
  store i64* @DR4, i64** %_DR4.i15, align 8, !noalias !2467
  store i64* @DR5, i64** %_DR5.i16, align 8, !noalias !2467
  store i64* @DR6, i64** %_DR6.i17, align 8, !noalias !2467
  store i64* @DR7, i64** %_DR7.i18, align 8, !noalias !2467
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i19, align 8, !noalias !2467
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i20, align 8, !noalias !2467
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i21, align 8, !noalias !2467
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i22, align 8, !noalias !2467
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i23, align 8, !noalias !2467
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i24, align 8, !noalias !2467
  %2140 = bitcast %"class.std::bitset"* %YMM0.i105 to double*
  %2141 = load double, double* %2140, !alias.scope !2471, !noalias !2472
  %2142 = load i64, i64* %RSP.i86, !alias.scope !2471, !noalias !2472
  %2143 = load %struct.Memory*, %struct.Memory** %MEMORY.i10, !noalias !2467
  %2144 = inttoptr i64 %2142 to i64*
  %2145 = load i64, i64* %2144
  store i64 %2145, i64* %PC.i25, !alias.scope !2471, !noalias !2472
  %2146 = add i64 %2142, 8
  store i64 %2146, i64* %RSP.i86, !alias.scope !2471, !noalias !2472
  %2147 = call double @atan(double %2141)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i105, !alias.scope !2471, !noalias !2472
  %2148 = bitcast %"class.std::bitset"* %YMM0.i105 to double*
  store double %2147, double* %2148, !alias.scope !2471, !noalias !2472
  %2149 = load %struct.Memory*, %struct.Memory** %MEMORY.i10, !noalias !2467
  %2150 = bitcast %struct.State** %state.i1 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2150)
  %2151 = bitcast i64* %curr_pc.i2 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2151)
  %2152 = bitcast %struct.Memory** %memory.i3 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2152)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i4)
  %2153 = bitcast i64* %SS_BASE.i5 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2153)
  %2154 = bitcast i64* %ES_BASE.i6 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2154)
  %2155 = bitcast i64* %DS_BASE.i7 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2155)
  %2156 = bitcast i64* %CS_BASE.i8 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2156)
  %2157 = bitcast %struct.State** %STATE.i9 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2157)
  %2158 = bitcast %struct.Memory** %MEMORY.i10 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2158)
  %2159 = bitcast i64** %_DR0.i11 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2159)
  %2160 = bitcast i64** %_DR1.i12 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2160)
  %2161 = bitcast i64** %_DR2.i13 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2161)
  %2162 = bitcast i64** %_DR3.i14 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2162)
  %2163 = bitcast i64** %_DR4.i15 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2163)
  %2164 = bitcast i64** %_DR5.i16 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2164)
  %2165 = bitcast i64** %_DR6.i17 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2165)
  %2166 = bitcast i64** %_DR7.i18 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2166)
  %2167 = bitcast i64** %CR0.i19 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2167)
  %2168 = bitcast i64** %CR1.i20 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2168)
  %2169 = bitcast i64** %CR2.i21 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2169)
  %2170 = bitcast i64** %CR3.i22 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2170)
  %2171 = bitcast i64** %CR4.i23 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2171)
  %2172 = bitcast i64** %CR8.i24 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2172)
  %2173 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2174 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2175 = bitcast %union.vec128_t* %XMM1 to i8*
  %2176 = load i64, i64* %PC
  %2177 = add i64 %2176, 3
  store i64 %2177, i64* %PC
  %2178 = bitcast i8* %2174 to i64*
  %2179 = load i64, i64* %2178, align 1
  %2180 = getelementptr inbounds i8, i8* %2174, i64 8
  %2181 = bitcast i8* %2180 to i64*
  %2182 = load i64, i64* %2181, align 1
  %2183 = bitcast i8* %2175 to i64*
  %2184 = load i64, i64* %2183, align 1
  %2185 = getelementptr inbounds i8, i8* %2175, i64 8
  %2186 = bitcast i8* %2185 to i64*
  %2187 = load i64, i64* %2186, align 1
  %2188 = xor i64 %2184, %2179
  %2189 = xor i64 %2187, %2182
  %2190 = trunc i64 %2188 to i32
  %2191 = lshr i64 %2188, 32
  %2192 = trunc i64 %2191 to i32
  %2193 = bitcast i8* %2173 to i32*
  store i32 %2190, i32* %2193, align 1, !tbaa !2454
  %2194 = getelementptr inbounds i8, i8* %2173, i64 4
  %2195 = bitcast i8* %2194 to i32*
  store i32 %2192, i32* %2195, align 1, !tbaa !2454
  %2196 = trunc i64 %2189 to i32
  %2197 = getelementptr inbounds i8, i8* %2173, i64 8
  %2198 = bitcast i8* %2197 to i32*
  store i32 %2196, i32* %2198, align 1, !tbaa !2454
  %2199 = lshr i64 %2189, 32
  %2200 = trunc i64 %2199 to i32
  %2201 = getelementptr inbounds i8, i8* %2173, i64 12
  %2202 = bitcast i8* %2201 to i32*
  store i32 %2200, i32* %2202, align 1, !tbaa !2454
  %2203 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2204 = load i64, i64* %PC
  %2205 = add i64 %2204, 8
  store i64 %2205, i64* %PC
  %2206 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 64) to double*)
  %2207 = bitcast i8* %2203 to double*
  store double %2206, double* %2207, align 1, !tbaa !2452
  %2208 = getelementptr inbounds i8, i8* %2203, i64 8
  %2209 = bitcast i8* %2208 to double*
  store double 0.000000e+00, double* %2209, align 1, !tbaa !2452
  %2210 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2211 = load i64, i64* %RBP
  %2212 = sub i64 %2211, 32
  %2213 = load i64, i64* %PC
  %2214 = add i64 %2213, 5
  store i64 %2214, i64* %PC
  %2215 = inttoptr i64 %2212 to i32*
  %2216 = load i32, i32* %2215
  %2217 = sitofp i32 %2216 to double
  %2218 = bitcast i8* %2210 to double*
  store double %2217, double* %2218, align 1, !tbaa !2452
  %2219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2221 = bitcast %union.vec128_t* %XMM3 to i8*
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 4
  store i64 %2223, i64* %PC
  %2224 = bitcast i8* %2220 to double*
  %2225 = load double, double* %2224, align 1
  %2226 = getelementptr inbounds i8, i8* %2220, i64 8
  %2227 = bitcast i8* %2226 to i64*
  %2228 = load i64, i64* %2227, align 1
  %2229 = bitcast i8* %2221 to double*
  %2230 = load double, double* %2229, align 1
  %2231 = fdiv double %2225, %2230
  %2232 = bitcast i8* %2219 to double*
  store double %2231, double* %2232, align 1, !tbaa !2452
  %2233 = getelementptr inbounds i8, i8* %2219, i64 8
  %2234 = bitcast i8* %2233 to i64*
  store i64 %2228, i64* %2234, align 1, !tbaa !2452
  %2235 = load i64, i64* %RBP
  %2236 = sub i64 %2235, 40
  %2237 = bitcast %union.vec128_t* %XMM0 to i8*
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 5
  store i64 %2239, i64* %PC
  %2240 = bitcast i8* %2237 to double*
  %2241 = load double, double* %2240, align 1
  %2242 = inttoptr i64 %2236 to double*
  store double %2241, double* %2242
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 24
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 4
  store i64 %2246, i64* %PC
  %2247 = inttoptr i64 %2244 to i64*
  %2248 = load i64, i64* %2247
  store i64 %2248, i64* %RCX, align 8, !tbaa !2428
  %2249 = load i64, i64* %RCX
  %2250 = bitcast %union.vec128_t* %XMM2 to i8*
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 4
  store i64 %2252, i64* %PC
  %2253 = bitcast i8* %2250 to double*
  %2254 = load double, double* %2253, align 1
  %2255 = inttoptr i64 %2249 to double*
  store double %2254, double* %2255
  %2256 = load i64, i64* %RBP
  %2257 = sub i64 %2256, 24
  %2258 = load i64, i64* %PC
  %2259 = add i64 %2258, 4
  store i64 %2259, i64* %PC
  %2260 = inttoptr i64 %2257 to i64*
  %2261 = load i64, i64* %2260
  store i64 %2261, i64* %RCX, align 8, !tbaa !2428
  %2262 = load i64, i64* %RCX
  %2263 = add i64 %2262, 8
  %2264 = bitcast %union.vec128_t* %XMM1 to i8*
  %2265 = load i64, i64* %PC
  %2266 = add i64 %2265, 5
  store i64 %2266, i64* %PC
  %2267 = bitcast i8* %2264 to double*
  %2268 = load double, double* %2267, align 1
  %2269 = inttoptr i64 %2263 to double*
  store double %2268, double* %2269
  %2270 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 40
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 5
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to double*
  %2276 = load double, double* %2275
  %2277 = bitcast i8* %2270 to double*
  store double %2276, double* %2277, align 1, !tbaa !2452
  %2278 = getelementptr inbounds i8, i8* %2270, i64 8
  %2279 = bitcast i8* %2278 to double*
  store double 0.000000e+00, double* %2279, align 1, !tbaa !2452
  %2280 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2281 = load i64, i64* %RBP
  %2282 = sub i64 %2281, 32
  %2283 = load i64, i64* %PC
  %2284 = add i64 %2283, 5
  store i64 %2284, i64* %PC
  %2285 = inttoptr i64 %2282 to i32*
  %2286 = load i32, i32* %2285
  %2287 = sitofp i32 %2286 to double
  %2288 = bitcast i8* %2280 to double*
  store double %2287, double* %2288, align 1, !tbaa !2452
  %2289 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2290 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2291 = bitcast %union.vec128_t* %XMM1 to i8*
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 4
  store i64 %2293, i64* %PC
  %2294 = bitcast i8* %2290 to double*
  %2295 = load double, double* %2294, align 1
  %2296 = getelementptr inbounds i8, i8* %2290, i64 8
  %2297 = bitcast i8* %2296 to i64*
  %2298 = load i64, i64* %2297, align 1
  %2299 = bitcast i8* %2291 to double*
  %2300 = load double, double* %2299, align 1
  %2301 = fmul double %2295, %2300
  %2302 = bitcast i8* %2289 to double*
  store double %2301, double* %2302, align 1, !tbaa !2452
  %2303 = getelementptr inbounds i8, i8* %2289, i64 8
  %2304 = bitcast i8* %2303 to i64*
  store i64 %2298, i64* %2304, align 1, !tbaa !2452
  %2305 = load i64, i64* %PC
  %2306 = sub i64 %2305, 1995
  %2307 = load i64, i64* %PC
  %2308 = add i64 %2307, 5
  %2309 = load i64, i64* %PC
  %2310 = add i64 %2309, 5
  store i64 %2310, i64* %PC
  %2311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2312 = load i64, i64* %2311, align 8, !tbaa !2428
  %2313 = add i64 %2312, -8
  %2314 = inttoptr i64 %2313 to i64*
  store i64 %2308, i64* %2314
  store i64 %2313, i64* %2311, align 8, !tbaa !2428
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2306, i64* %2315, align 8, !tbaa !2428
  %2316 = load i64, i64* %PC
  %2317 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2317)
  %2318 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2318)
  %2319 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2319)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i)
  %2320 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2320)
  %2321 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2321)
  %2322 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2322)
  %2323 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2323)
  %2324 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2324)
  %2325 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2325)
  %2326 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2326)
  %2327 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2327)
  %2328 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2328)
  %2329 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2329)
  %2330 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2330)
  %2331 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2331)
  %2332 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2332)
  %2333 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2333)
  %2334 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2334)
  %2335 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2335)
  %2336 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2336)
  %2337 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2337)
  %2338 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2338)
  %2339 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2339)
  store %struct.State* %0, %struct.State** %state.i, align 8, !noalias !2473
  store i64 %2316, i64* %curr_pc.i, align 8, !noalias !2473
  store %struct.Memory* %2149, %struct.Memory** %memory.i, align 8, !noalias !2473
  store i8 0, i8* %BRANCH_TAKEN.i, align 1, !noalias !2473
  store i64 0, i64* %SS_BASE.i, align 8, !noalias !2473
  store i64 0, i64* %ES_BASE.i, align 8, !noalias !2473
  store i64 0, i64* %DS_BASE.i, align 8, !noalias !2473
  store i64 0, i64* %CS_BASE.i, align 8, !noalias !2473
  store %struct.State* %0, %struct.State** %STATE.i, align 8, !noalias !2473
  store %struct.Memory* %2149, %struct.Memory** %MEMORY.i, align 8, !noalias !2473
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2341 = getelementptr inbounds %struct.GPR, %struct.GPR* %2340, i32 0, i32 33
  %2342 = getelementptr inbounds %struct.Reg, %struct.Reg* %2341, i32 0, i32 0
  %PC.i = bitcast %union.anon* %2342 to i64*
  store i64 %2316, i64* %PC.i, align 8, !alias.scope !2477, !noalias !2478
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2344 = getelementptr inbounds %struct.GPR, %struct.GPR* %2343, i32 0, i32 1
  %2345 = getelementptr inbounds %struct.Reg, %struct.Reg* %2344, i32 0, i32 0
  %2346 = bitcast %union.anon* %2345 to %struct.anon.2*
  %AH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2346, i32 0, i32 1
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2348 = getelementptr inbounds %struct.GPR, %struct.GPR* %2347, i32 0, i32 3
  %2349 = getelementptr inbounds %struct.Reg, %struct.Reg* %2348, i32 0, i32 0
  %2350 = bitcast %union.anon* %2349 to %struct.anon.2*
  %BH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2350, i32 0, i32 1
  %2351 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2352 = getelementptr inbounds %struct.GPR, %struct.GPR* %2351, i32 0, i32 5
  %2353 = getelementptr inbounds %struct.Reg, %struct.Reg* %2352, i32 0, i32 0
  %2354 = bitcast %union.anon* %2353 to %struct.anon.2*
  %CH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2354, i32 0, i32 1
  %2355 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2356 = getelementptr inbounds %struct.GPR, %struct.GPR* %2355, i32 0, i32 7
  %2357 = getelementptr inbounds %struct.Reg, %struct.Reg* %2356, i32 0, i32 0
  %2358 = bitcast %union.anon* %2357 to %struct.anon.2*
  %DH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2358, i32 0, i32 1
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2360 = getelementptr inbounds %struct.GPR, %struct.GPR* %2359, i32 0, i32 1
  %2361 = getelementptr inbounds %struct.Reg, %struct.Reg* %2360, i32 0, i32 0
  %2362 = bitcast %union.anon* %2361 to %struct.anon.2*
  %AL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2362, i32 0, i32 0
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2364 = getelementptr inbounds %struct.GPR, %struct.GPR* %2363, i32 0, i32 3
  %2365 = getelementptr inbounds %struct.Reg, %struct.Reg* %2364, i32 0, i32 0
  %2366 = bitcast %union.anon* %2365 to %struct.anon.2*
  %BL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2366, i32 0, i32 0
  %2367 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2368 = getelementptr inbounds %struct.GPR, %struct.GPR* %2367, i32 0, i32 5
  %2369 = getelementptr inbounds %struct.Reg, %struct.Reg* %2368, i32 0, i32 0
  %2370 = bitcast %union.anon* %2369 to %struct.anon.2*
  %CL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2370, i32 0, i32 0
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2372 = getelementptr inbounds %struct.GPR, %struct.GPR* %2371, i32 0, i32 7
  %2373 = getelementptr inbounds %struct.Reg, %struct.Reg* %2372, i32 0, i32 0
  %2374 = bitcast %union.anon* %2373 to %struct.anon.2*
  %DL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2374, i32 0, i32 0
  %2375 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2376 = getelementptr inbounds %struct.GPR, %struct.GPR* %2375, i32 0, i32 9
  %2377 = getelementptr inbounds %struct.Reg, %struct.Reg* %2376, i32 0, i32 0
  %2378 = bitcast %union.anon* %2377 to %struct.anon.2*
  %SIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2378, i32 0, i32 0
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2380 = getelementptr inbounds %struct.GPR, %struct.GPR* %2379, i32 0, i32 11
  %2381 = getelementptr inbounds %struct.Reg, %struct.Reg* %2380, i32 0, i32 0
  %2382 = bitcast %union.anon* %2381 to %struct.anon.2*
  %DIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2382, i32 0, i32 0
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2384 = getelementptr inbounds %struct.GPR, %struct.GPR* %2383, i32 0, i32 13
  %2385 = getelementptr inbounds %struct.Reg, %struct.Reg* %2384, i32 0, i32 0
  %2386 = bitcast %union.anon* %2385 to %struct.anon.2*
  %SPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2386, i32 0, i32 0
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2388 = getelementptr inbounds %struct.GPR, %struct.GPR* %2387, i32 0, i32 15
  %2389 = getelementptr inbounds %struct.Reg, %struct.Reg* %2388, i32 0, i32 0
  %2390 = bitcast %union.anon* %2389 to %struct.anon.2*
  %BPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2390, i32 0, i32 0
  %2391 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2392 = getelementptr inbounds %struct.GPR, %struct.GPR* %2391, i32 0, i32 17
  %2393 = getelementptr inbounds %struct.Reg, %struct.Reg* %2392, i32 0, i32 0
  %2394 = bitcast %union.anon* %2393 to %struct.anon.2*
  %R8B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2394, i32 0, i32 0
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2396 = getelementptr inbounds %struct.GPR, %struct.GPR* %2395, i32 0, i32 19
  %2397 = getelementptr inbounds %struct.Reg, %struct.Reg* %2396, i32 0, i32 0
  %2398 = bitcast %union.anon* %2397 to %struct.anon.2*
  %R9B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2398, i32 0, i32 0
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2400 = getelementptr inbounds %struct.GPR, %struct.GPR* %2399, i32 0, i32 21
  %2401 = getelementptr inbounds %struct.Reg, %struct.Reg* %2400, i32 0, i32 0
  %2402 = bitcast %union.anon* %2401 to %struct.anon.2*
  %R10B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2402, i32 0, i32 0
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2404 = getelementptr inbounds %struct.GPR, %struct.GPR* %2403, i32 0, i32 23
  %2405 = getelementptr inbounds %struct.Reg, %struct.Reg* %2404, i32 0, i32 0
  %2406 = bitcast %union.anon* %2405 to %struct.anon.2*
  %R11B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2406, i32 0, i32 0
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2408 = getelementptr inbounds %struct.GPR, %struct.GPR* %2407, i32 0, i32 25
  %2409 = getelementptr inbounds %struct.Reg, %struct.Reg* %2408, i32 0, i32 0
  %2410 = bitcast %union.anon* %2409 to %struct.anon.2*
  %R12B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2410, i32 0, i32 0
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2412 = getelementptr inbounds %struct.GPR, %struct.GPR* %2411, i32 0, i32 27
  %2413 = getelementptr inbounds %struct.Reg, %struct.Reg* %2412, i32 0, i32 0
  %2414 = bitcast %union.anon* %2413 to %struct.anon.2*
  %R13B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2414, i32 0, i32 0
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2416 = getelementptr inbounds %struct.GPR, %struct.GPR* %2415, i32 0, i32 29
  %2417 = getelementptr inbounds %struct.Reg, %struct.Reg* %2416, i32 0, i32 0
  %2418 = bitcast %union.anon* %2417 to %struct.anon.2*
  %R14B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2418, i32 0, i32 0
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2420 = getelementptr inbounds %struct.GPR, %struct.GPR* %2419, i32 0, i32 31
  %2421 = getelementptr inbounds %struct.Reg, %struct.Reg* %2420, i32 0, i32 0
  %2422 = bitcast %union.anon* %2421 to %struct.anon.2*
  %R15B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %2422, i32 0, i32 0
  %2423 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2424 = getelementptr inbounds %struct.GPR, %struct.GPR* %2423, i32 0, i32 1
  %2425 = getelementptr inbounds %struct.Reg, %struct.Reg* %2424, i32 0, i32 0
  %AX.i = bitcast %union.anon* %2425 to i16*
  %2426 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2427 = getelementptr inbounds %struct.GPR, %struct.GPR* %2426, i32 0, i32 3
  %2428 = getelementptr inbounds %struct.Reg, %struct.Reg* %2427, i32 0, i32 0
  %BX.i = bitcast %union.anon* %2428 to i16*
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2430 = getelementptr inbounds %struct.GPR, %struct.GPR* %2429, i32 0, i32 5
  %2431 = getelementptr inbounds %struct.Reg, %struct.Reg* %2430, i32 0, i32 0
  %CX.i = bitcast %union.anon* %2431 to i16*
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2433 = getelementptr inbounds %struct.GPR, %struct.GPR* %2432, i32 0, i32 7
  %2434 = getelementptr inbounds %struct.Reg, %struct.Reg* %2433, i32 0, i32 0
  %DX.i = bitcast %union.anon* %2434 to i16*
  %2435 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2436 = getelementptr inbounds %struct.GPR, %struct.GPR* %2435, i32 0, i32 9
  %2437 = getelementptr inbounds %struct.Reg, %struct.Reg* %2436, i32 0, i32 0
  %SI.i = bitcast %union.anon* %2437 to i16*
  %2438 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2439 = getelementptr inbounds %struct.GPR, %struct.GPR* %2438, i32 0, i32 11
  %2440 = getelementptr inbounds %struct.Reg, %struct.Reg* %2439, i32 0, i32 0
  %DI.i = bitcast %union.anon* %2440 to i16*
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2442 = getelementptr inbounds %struct.GPR, %struct.GPR* %2441, i32 0, i32 13
  %2443 = getelementptr inbounds %struct.Reg, %struct.Reg* %2442, i32 0, i32 0
  %SP.i = bitcast %union.anon* %2443 to i16*
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2445 = getelementptr inbounds %struct.GPR, %struct.GPR* %2444, i32 0, i32 15
  %2446 = getelementptr inbounds %struct.Reg, %struct.Reg* %2445, i32 0, i32 0
  %BP.i = bitcast %union.anon* %2446 to i16*
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2448 = getelementptr inbounds %struct.GPR, %struct.GPR* %2447, i32 0, i32 17
  %2449 = getelementptr inbounds %struct.Reg, %struct.Reg* %2448, i32 0, i32 0
  %R8W.i = bitcast %union.anon* %2449 to i16*
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2451 = getelementptr inbounds %struct.GPR, %struct.GPR* %2450, i32 0, i32 19
  %2452 = getelementptr inbounds %struct.Reg, %struct.Reg* %2451, i32 0, i32 0
  %R9W.i = bitcast %union.anon* %2452 to i16*
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2454 = getelementptr inbounds %struct.GPR, %struct.GPR* %2453, i32 0, i32 21
  %2455 = getelementptr inbounds %struct.Reg, %struct.Reg* %2454, i32 0, i32 0
  %R10W.i = bitcast %union.anon* %2455 to i16*
  %2456 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2457 = getelementptr inbounds %struct.GPR, %struct.GPR* %2456, i32 0, i32 23
  %2458 = getelementptr inbounds %struct.Reg, %struct.Reg* %2457, i32 0, i32 0
  %R11W.i = bitcast %union.anon* %2458 to i16*
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2460 = getelementptr inbounds %struct.GPR, %struct.GPR* %2459, i32 0, i32 25
  %2461 = getelementptr inbounds %struct.Reg, %struct.Reg* %2460, i32 0, i32 0
  %R12W.i = bitcast %union.anon* %2461 to i16*
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2463 = getelementptr inbounds %struct.GPR, %struct.GPR* %2462, i32 0, i32 27
  %2464 = getelementptr inbounds %struct.Reg, %struct.Reg* %2463, i32 0, i32 0
  %R13W.i = bitcast %union.anon* %2464 to i16*
  %2465 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2466 = getelementptr inbounds %struct.GPR, %struct.GPR* %2465, i32 0, i32 29
  %2467 = getelementptr inbounds %struct.Reg, %struct.Reg* %2466, i32 0, i32 0
  %R14W.i = bitcast %union.anon* %2467 to i16*
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2469 = getelementptr inbounds %struct.GPR, %struct.GPR* %2468, i32 0, i32 31
  %2470 = getelementptr inbounds %struct.Reg, %struct.Reg* %2469, i32 0, i32 0
  %R15W.i = bitcast %union.anon* %2470 to i16*
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2472 = getelementptr inbounds %struct.GPR, %struct.GPR* %2471, i32 0, i32 33
  %2473 = getelementptr inbounds %struct.Reg, %struct.Reg* %2472, i32 0, i32 0
  %IP.i = bitcast %union.anon* %2473 to i16*
  %2474 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2475 = getelementptr inbounds %struct.GPR, %struct.GPR* %2474, i32 0, i32 1
  %2476 = getelementptr inbounds %struct.Reg, %struct.Reg* %2475, i32 0, i32 0
  %EAX.i = bitcast %union.anon* %2476 to i32*
  %2477 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2478 = getelementptr inbounds %struct.GPR, %struct.GPR* %2477, i32 0, i32 3
  %2479 = getelementptr inbounds %struct.Reg, %struct.Reg* %2478, i32 0, i32 0
  %EBX.i = bitcast %union.anon* %2479 to i32*
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2481 = getelementptr inbounds %struct.GPR, %struct.GPR* %2480, i32 0, i32 5
  %2482 = getelementptr inbounds %struct.Reg, %struct.Reg* %2481, i32 0, i32 0
  %ECX.i = bitcast %union.anon* %2482 to i32*
  %2483 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2484 = getelementptr inbounds %struct.GPR, %struct.GPR* %2483, i32 0, i32 7
  %2485 = getelementptr inbounds %struct.Reg, %struct.Reg* %2484, i32 0, i32 0
  %EDX.i = bitcast %union.anon* %2485 to i32*
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2487 = getelementptr inbounds %struct.GPR, %struct.GPR* %2486, i32 0, i32 9
  %2488 = getelementptr inbounds %struct.Reg, %struct.Reg* %2487, i32 0, i32 0
  %ESI.i = bitcast %union.anon* %2488 to i32*
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2490 = getelementptr inbounds %struct.GPR, %struct.GPR* %2489, i32 0, i32 11
  %2491 = getelementptr inbounds %struct.Reg, %struct.Reg* %2490, i32 0, i32 0
  %EDI.i = bitcast %union.anon* %2491 to i32*
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2493 = getelementptr inbounds %struct.GPR, %struct.GPR* %2492, i32 0, i32 13
  %2494 = getelementptr inbounds %struct.Reg, %struct.Reg* %2493, i32 0, i32 0
  %ESP.i = bitcast %union.anon* %2494 to i32*
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2496 = getelementptr inbounds %struct.GPR, %struct.GPR* %2495, i32 0, i32 15
  %2497 = getelementptr inbounds %struct.Reg, %struct.Reg* %2496, i32 0, i32 0
  %EBP.i = bitcast %union.anon* %2497 to i32*
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2499 = getelementptr inbounds %struct.GPR, %struct.GPR* %2498, i32 0, i32 33
  %2500 = getelementptr inbounds %struct.Reg, %struct.Reg* %2499, i32 0, i32 0
  %EIP.i = bitcast %union.anon* %2500 to i32*
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2502 = getelementptr inbounds %struct.GPR, %struct.GPR* %2501, i32 0, i32 17
  %2503 = getelementptr inbounds %struct.Reg, %struct.Reg* %2502, i32 0, i32 0
  %R8D.i = bitcast %union.anon* %2503 to i32*
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2505 = getelementptr inbounds %struct.GPR, %struct.GPR* %2504, i32 0, i32 19
  %2506 = getelementptr inbounds %struct.Reg, %struct.Reg* %2505, i32 0, i32 0
  %R9D.i = bitcast %union.anon* %2506 to i32*
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2508 = getelementptr inbounds %struct.GPR, %struct.GPR* %2507, i32 0, i32 21
  %2509 = getelementptr inbounds %struct.Reg, %struct.Reg* %2508, i32 0, i32 0
  %R10D.i = bitcast %union.anon* %2509 to i32*
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2511 = getelementptr inbounds %struct.GPR, %struct.GPR* %2510, i32 0, i32 23
  %2512 = getelementptr inbounds %struct.Reg, %struct.Reg* %2511, i32 0, i32 0
  %R11D.i = bitcast %union.anon* %2512 to i32*
  %2513 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2514 = getelementptr inbounds %struct.GPR, %struct.GPR* %2513, i32 0, i32 25
  %2515 = getelementptr inbounds %struct.Reg, %struct.Reg* %2514, i32 0, i32 0
  %R12D.i = bitcast %union.anon* %2515 to i32*
  %2516 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2517 = getelementptr inbounds %struct.GPR, %struct.GPR* %2516, i32 0, i32 27
  %2518 = getelementptr inbounds %struct.Reg, %struct.Reg* %2517, i32 0, i32 0
  %R13D.i = bitcast %union.anon* %2518 to i32*
  %2519 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2520 = getelementptr inbounds %struct.GPR, %struct.GPR* %2519, i32 0, i32 29
  %2521 = getelementptr inbounds %struct.Reg, %struct.Reg* %2520, i32 0, i32 0
  %R14D.i = bitcast %union.anon* %2521 to i32*
  %2522 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2523 = getelementptr inbounds %struct.GPR, %struct.GPR* %2522, i32 0, i32 31
  %2524 = getelementptr inbounds %struct.Reg, %struct.Reg* %2523, i32 0, i32 0
  %R15D.i = bitcast %union.anon* %2524 to i32*
  %2525 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2526 = getelementptr inbounds %struct.GPR, %struct.GPR* %2525, i32 0, i32 1
  %2527 = getelementptr inbounds %struct.Reg, %struct.Reg* %2526, i32 0, i32 0
  %RAX.i = bitcast %union.anon* %2527 to i64*
  %2528 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2529 = getelementptr inbounds %struct.GPR, %struct.GPR* %2528, i32 0, i32 3
  %2530 = getelementptr inbounds %struct.Reg, %struct.Reg* %2529, i32 0, i32 0
  %RBX.i = bitcast %union.anon* %2530 to i64*
  %2531 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2532 = getelementptr inbounds %struct.GPR, %struct.GPR* %2531, i32 0, i32 5
  %2533 = getelementptr inbounds %struct.Reg, %struct.Reg* %2532, i32 0, i32 0
  %RCX.i = bitcast %union.anon* %2533 to i64*
  %2534 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2535 = getelementptr inbounds %struct.GPR, %struct.GPR* %2534, i32 0, i32 7
  %2536 = getelementptr inbounds %struct.Reg, %struct.Reg* %2535, i32 0, i32 0
  %RDX.i = bitcast %union.anon* %2536 to i64*
  %2537 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2538 = getelementptr inbounds %struct.GPR, %struct.GPR* %2537, i32 0, i32 9
  %2539 = getelementptr inbounds %struct.Reg, %struct.Reg* %2538, i32 0, i32 0
  %RSI.i = bitcast %union.anon* %2539 to i64*
  %2540 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2541 = getelementptr inbounds %struct.GPR, %struct.GPR* %2540, i32 0, i32 11
  %2542 = getelementptr inbounds %struct.Reg, %struct.Reg* %2541, i32 0, i32 0
  %RDI.i = bitcast %union.anon* %2542 to i64*
  %2543 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2544 = getelementptr inbounds %struct.GPR, %struct.GPR* %2543, i32 0, i32 13
  %2545 = getelementptr inbounds %struct.Reg, %struct.Reg* %2544, i32 0, i32 0
  %RSP.i = bitcast %union.anon* %2545 to i64*
  %2546 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2547 = getelementptr inbounds %struct.GPR, %struct.GPR* %2546, i32 0, i32 15
  %2548 = getelementptr inbounds %struct.Reg, %struct.Reg* %2547, i32 0, i32 0
  %RBP.i = bitcast %union.anon* %2548 to i64*
  %2549 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2550 = getelementptr inbounds %struct.GPR, %struct.GPR* %2549, i32 0, i32 17
  %2551 = getelementptr inbounds %struct.Reg, %struct.Reg* %2550, i32 0, i32 0
  %R8.i = bitcast %union.anon* %2551 to i64*
  %2552 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2553 = getelementptr inbounds %struct.GPR, %struct.GPR* %2552, i32 0, i32 19
  %2554 = getelementptr inbounds %struct.Reg, %struct.Reg* %2553, i32 0, i32 0
  %R9.i = bitcast %union.anon* %2554 to i64*
  %2555 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2556 = getelementptr inbounds %struct.GPR, %struct.GPR* %2555, i32 0, i32 21
  %2557 = getelementptr inbounds %struct.Reg, %struct.Reg* %2556, i32 0, i32 0
  %R10.i = bitcast %union.anon* %2557 to i64*
  %2558 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2559 = getelementptr inbounds %struct.GPR, %struct.GPR* %2558, i32 0, i32 23
  %2560 = getelementptr inbounds %struct.Reg, %struct.Reg* %2559, i32 0, i32 0
  %R11.i = bitcast %union.anon* %2560 to i64*
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2562 = getelementptr inbounds %struct.GPR, %struct.GPR* %2561, i32 0, i32 25
  %2563 = getelementptr inbounds %struct.Reg, %struct.Reg* %2562, i32 0, i32 0
  %R12.i = bitcast %union.anon* %2563 to i64*
  %2564 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2565 = getelementptr inbounds %struct.GPR, %struct.GPR* %2564, i32 0, i32 27
  %2566 = getelementptr inbounds %struct.Reg, %struct.Reg* %2565, i32 0, i32 0
  %R13.i = bitcast %union.anon* %2566 to i64*
  %2567 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2568 = getelementptr inbounds %struct.GPR, %struct.GPR* %2567, i32 0, i32 29
  %2569 = getelementptr inbounds %struct.Reg, %struct.Reg* %2568, i32 0, i32 0
  %R14.i = bitcast %union.anon* %2569 to i64*
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2571 = getelementptr inbounds %struct.GPR, %struct.GPR* %2570, i32 0, i32 31
  %2572 = getelementptr inbounds %struct.Reg, %struct.Reg* %2571, i32 0, i32 0
  %R15.i = bitcast %union.anon* %2572 to i64*
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %2574 = getelementptr inbounds %struct.GPR, %struct.GPR* %2573, i32 0, i32 33
  %2575 = getelementptr inbounds %struct.Reg, %struct.Reg* %2574, i32 0, i32 0
  %RIP.i = bitcast %union.anon* %2575 to i64*
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2577 = getelementptr inbounds %struct.Segments, %struct.Segments* %2576, i32 0, i32 1
  %SS.i = bitcast %union.SegmentSelector* %2577 to i16*
  %2578 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2579 = getelementptr inbounds %struct.Segments, %struct.Segments* %2578, i32 0, i32 3
  %ES.i = bitcast %union.SegmentSelector* %2579 to i16*
  %2580 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2581 = getelementptr inbounds %struct.Segments, %struct.Segments* %2580, i32 0, i32 5
  %GS.i = bitcast %union.SegmentSelector* %2581 to i16*
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2583 = getelementptr inbounds %struct.Segments, %struct.Segments* %2582, i32 0, i32 7
  %FS.i = bitcast %union.SegmentSelector* %2583 to i16*
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2585 = getelementptr inbounds %struct.Segments, %struct.Segments* %2584, i32 0, i32 9
  %DS.i = bitcast %union.SegmentSelector* %2585 to i16*
  %2586 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %2587 = getelementptr inbounds %struct.Segments, %struct.Segments* %2586, i32 0, i32 11
  %CS.i = bitcast %union.SegmentSelector* %2587 to i16*
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %2589 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %2588, i32 0, i32 5
  %2590 = getelementptr inbounds %struct.Reg, %struct.Reg* %2589, i32 0, i32 0
  %GS_BASE.i = bitcast %union.anon* %2590 to i64*
  %2591 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %2592 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %2591, i32 0, i32 7
  %2593 = getelementptr inbounds %struct.Reg, %struct.Reg* %2592, i32 0, i32 0
  %FS_BASE.i = bitcast %union.anon* %2593 to i64*
  %2594 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2595 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2594, i64 0, i64 0
  %YMM0.i = bitcast %union.VectorReg* %2595 to %"class.std::bitset"*
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2597 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2596, i64 0, i64 1
  %YMM1.i = bitcast %union.VectorReg* %2597 to %"class.std::bitset"*
  %2598 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2599 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2598, i64 0, i64 2
  %YMM2.i = bitcast %union.VectorReg* %2599 to %"class.std::bitset"*
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2601 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2600, i64 0, i64 3
  %YMM3.i = bitcast %union.VectorReg* %2601 to %"class.std::bitset"*
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2603 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2602, i64 0, i64 4
  %YMM4.i = bitcast %union.VectorReg* %2603 to %"class.std::bitset"*
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2605 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2604, i64 0, i64 5
  %YMM5.i = bitcast %union.VectorReg* %2605 to %"class.std::bitset"*
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2607 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2606, i64 0, i64 6
  %YMM6.i = bitcast %union.VectorReg* %2607 to %"class.std::bitset"*
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2609 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2608, i64 0, i64 7
  %YMM7.i = bitcast %union.VectorReg* %2609 to %"class.std::bitset"*
  %2610 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2611 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2610, i64 0, i64 8
  %YMM8.i = bitcast %union.VectorReg* %2611 to %"class.std::bitset"*
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2613 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2612, i64 0, i64 9
  %YMM9.i = bitcast %union.VectorReg* %2613 to %"class.std::bitset"*
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2615 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2614, i64 0, i64 10
  %YMM10.i = bitcast %union.VectorReg* %2615 to %"class.std::bitset"*
  %2616 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2617 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2616, i64 0, i64 11
  %YMM11.i = bitcast %union.VectorReg* %2617 to %"class.std::bitset"*
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2619 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2618, i64 0, i64 12
  %YMM12.i = bitcast %union.VectorReg* %2619 to %"class.std::bitset"*
  %2620 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2621 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2620, i64 0, i64 13
  %YMM13.i = bitcast %union.VectorReg* %2621 to %"class.std::bitset"*
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2623 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2622, i64 0, i64 14
  %YMM14.i = bitcast %union.VectorReg* %2623 to %"class.std::bitset"*
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2625 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2624, i64 0, i64 15
  %YMM15.i = bitcast %union.VectorReg* %2625 to %"class.std::bitset"*
  %2626 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2627 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2626, i64 0, i64 0
  %XMM0.i = bitcast %union.VectorReg* %2627 to %union.vec128_t*
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2629 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2628, i64 0, i64 1
  %XMM1.i = bitcast %union.VectorReg* %2629 to %union.vec128_t*
  %2630 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2631 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2630, i64 0, i64 2
  %XMM2.i = bitcast %union.VectorReg* %2631 to %union.vec128_t*
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2633 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2632, i64 0, i64 3
  %XMM3.i = bitcast %union.VectorReg* %2633 to %union.vec128_t*
  %2634 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2635 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2634, i64 0, i64 4
  %XMM4.i = bitcast %union.VectorReg* %2635 to %union.vec128_t*
  %2636 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2637 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2636, i64 0, i64 5
  %XMM5.i = bitcast %union.VectorReg* %2637 to %union.vec128_t*
  %2638 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2639 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2638, i64 0, i64 6
  %XMM6.i = bitcast %union.VectorReg* %2639 to %union.vec128_t*
  %2640 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2641 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2640, i64 0, i64 7
  %XMM7.i = bitcast %union.VectorReg* %2641 to %union.vec128_t*
  %2642 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2643 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2642, i64 0, i64 8
  %XMM8.i = bitcast %union.VectorReg* %2643 to %union.vec128_t*
  %2644 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2645 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2644, i64 0, i64 9
  %XMM9.i = bitcast %union.VectorReg* %2645 to %union.vec128_t*
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2647 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2646, i64 0, i64 10
  %XMM10.i = bitcast %union.VectorReg* %2647 to %union.vec128_t*
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2649 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2648, i64 0, i64 11
  %XMM11.i = bitcast %union.VectorReg* %2649 to %union.vec128_t*
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2651 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2650, i64 0, i64 12
  %XMM12.i = bitcast %union.VectorReg* %2651 to %union.vec128_t*
  %2652 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2653 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2652, i64 0, i64 13
  %XMM13.i = bitcast %union.VectorReg* %2653 to %union.vec128_t*
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2655 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2654, i64 0, i64 14
  %XMM14.i = bitcast %union.VectorReg* %2655 to %union.vec128_t*
  %2656 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %2657 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %2656, i64 0, i64 15
  %XMM15.i = bitcast %union.VectorReg* %2657 to %union.vec128_t*
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2659 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2658, i32 0, i32 0
  %2660 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2659, i64 0, i64 0
  %ST0.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2660, i32 0, i32 1
  %2661 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2662 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2661, i32 0, i32 0
  %2663 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2662, i64 0, i64 1
  %ST1.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2663, i32 0, i32 1
  %2664 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2665 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2664, i32 0, i32 0
  %2666 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2665, i64 0, i64 2
  %ST2.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2666, i32 0, i32 1
  %2667 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2668 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2667, i32 0, i32 0
  %2669 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2668, i64 0, i64 3
  %ST3.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2669, i32 0, i32 1
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2671 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2670, i32 0, i32 0
  %2672 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2671, i64 0, i64 4
  %ST4.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2672, i32 0, i32 1
  %2673 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2674 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2673, i32 0, i32 0
  %2675 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2674, i64 0, i64 5
  %ST5.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2675, i32 0, i32 1
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2677 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2676, i32 0, i32 0
  %2678 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2677, i64 0, i64 6
  %ST6.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2678, i32 0, i32 1
  %2679 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %2680 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %2679, i32 0, i32 0
  %2681 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %2680, i64 0, i64 7
  %ST7.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %2681, i32 0, i32 1
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2683 = getelementptr inbounds %struct.MMX, %struct.MMX* %2682, i32 0, i32 0
  %2684 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2683, i64 0, i64 0
  %2685 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2684, i32 0, i32 1
  %2686 = bitcast %union.vec64_t* %2685 to %struct.uint64v1_t*
  %2687 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2686, i32 0, i32 0
  %MM0.i = getelementptr inbounds [1 x i64], [1 x i64]* %2687, i64 0, i64 0
  %2688 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2689 = getelementptr inbounds %struct.MMX, %struct.MMX* %2688, i32 0, i32 0
  %2690 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2689, i64 0, i64 1
  %2691 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2690, i32 0, i32 1
  %2692 = bitcast %union.vec64_t* %2691 to %struct.uint64v1_t*
  %2693 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2692, i32 0, i32 0
  %MM1.i = getelementptr inbounds [1 x i64], [1 x i64]* %2693, i64 0, i64 0
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2695 = getelementptr inbounds %struct.MMX, %struct.MMX* %2694, i32 0, i32 0
  %2696 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2695, i64 0, i64 2
  %2697 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2696, i32 0, i32 1
  %2698 = bitcast %union.vec64_t* %2697 to %struct.uint64v1_t*
  %2699 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2698, i32 0, i32 0
  %MM2.i = getelementptr inbounds [1 x i64], [1 x i64]* %2699, i64 0, i64 0
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2701 = getelementptr inbounds %struct.MMX, %struct.MMX* %2700, i32 0, i32 0
  %2702 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2701, i64 0, i64 3
  %2703 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2702, i32 0, i32 1
  %2704 = bitcast %union.vec64_t* %2703 to %struct.uint64v1_t*
  %2705 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2704, i32 0, i32 0
  %MM3.i = getelementptr inbounds [1 x i64], [1 x i64]* %2705, i64 0, i64 0
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2707 = getelementptr inbounds %struct.MMX, %struct.MMX* %2706, i32 0, i32 0
  %2708 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2707, i64 0, i64 4
  %2709 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2708, i32 0, i32 1
  %2710 = bitcast %union.vec64_t* %2709 to %struct.uint64v1_t*
  %2711 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2710, i32 0, i32 0
  %MM4.i = getelementptr inbounds [1 x i64], [1 x i64]* %2711, i64 0, i64 0
  %2712 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2713 = getelementptr inbounds %struct.MMX, %struct.MMX* %2712, i32 0, i32 0
  %2714 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2713, i64 0, i64 5
  %2715 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2714, i32 0, i32 1
  %2716 = bitcast %union.vec64_t* %2715 to %struct.uint64v1_t*
  %2717 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2716, i32 0, i32 0
  %MM5.i = getelementptr inbounds [1 x i64], [1 x i64]* %2717, i64 0, i64 0
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2719 = getelementptr inbounds %struct.MMX, %struct.MMX* %2718, i32 0, i32 0
  %2720 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2719, i64 0, i64 6
  %2721 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2720, i32 0, i32 1
  %2722 = bitcast %union.vec64_t* %2721 to %struct.uint64v1_t*
  %2723 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2722, i32 0, i32 0
  %MM6.i = getelementptr inbounds [1 x i64], [1 x i64]* %2723, i64 0, i64 0
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %2725 = getelementptr inbounds %struct.MMX, %struct.MMX* %2724, i32 0, i32 0
  %2726 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %2725, i64 0, i64 7
  %2727 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %2726, i32 0, i32 1
  %2728 = bitcast %union.vec64_t* %2727 to %struct.uint64v1_t*
  %2729 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %2728, i32 0, i32 0
  %MM7.i = getelementptr inbounds [1 x i64], [1 x i64]* %2729, i64 0, i64 0
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2730, i32 0, i32 5
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2731, i32 0, i32 1
  %2732 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2732, i32 0, i32 11
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2733, i32 0, i32 13
  %2734 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2734, i32 0, i32 3
  %2735 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2735, i32 0, i32 9
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %2736, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i, align 8, !noalias !2473
  store i64* @DR1, i64** %_DR1.i, align 8, !noalias !2473
  store i64* @DR2, i64** %_DR2.i, align 8, !noalias !2473
  store i64* @DR3, i64** %_DR3.i, align 8, !noalias !2473
  store i64* @DR4, i64** %_DR4.i, align 8, !noalias !2473
  store i64* @DR5, i64** %_DR5.i, align 8, !noalias !2473
  store i64* @DR6, i64** %_DR6.i, align 8, !noalias !2473
  store i64* @DR7, i64** %_DR7.i, align 8, !noalias !2473
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i, align 8, !noalias !2473
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i, align 8, !noalias !2473
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i, align 8, !noalias !2473
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i, align 8, !noalias !2473
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i, align 8, !noalias !2473
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i, align 8, !noalias !2473
  %2737 = bitcast %"class.std::bitset"* %YMM0.i to double*
  %2738 = load double, double* %2737, !alias.scope !2477, !noalias !2478
  %2739 = load i64, i64* %RSP.i, !alias.scope !2477, !noalias !2478
  %2740 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2473
  %2741 = inttoptr i64 %2739 to i64*
  %2742 = load i64, i64* %2741
  store i64 %2742, i64* %PC.i, !alias.scope !2477, !noalias !2478
  %2743 = add i64 %2739, 8
  store i64 %2743, i64* %RSP.i, !alias.scope !2477, !noalias !2478
  %2744 = call double @cos(double %2738)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i, !alias.scope !2477, !noalias !2478
  %2745 = bitcast %"class.std::bitset"* %YMM0.i to double*
  store double %2744, double* %2745, !alias.scope !2477, !noalias !2478
  %2746 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2473
  %2747 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2747)
  %2748 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2748)
  %2749 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2749)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i)
  %2750 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2750)
  %2751 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2751)
  %2752 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2752)
  %2753 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2753)
  %2754 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2754)
  %2755 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2755)
  %2756 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2756)
  %2757 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2757)
  %2758 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2758)
  %2759 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2759)
  %2760 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2760)
  %2761 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2761)
  %2762 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2762)
  %2763 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2763)
  %2764 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2764)
  %2765 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2765)
  %2766 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2766)
  %2767 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2767)
  %2768 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2768)
  %2769 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %2769)
  %2770 = load i64, i64* %RBP
  %2771 = sub i64 %2770, 24
  %2772 = load i64, i64* %PC
  %2773 = add i64 %2772, 4
  store i64 %2773, i64* %PC
  %2774 = inttoptr i64 %2771 to i64*
  %2775 = load i64, i64* %2774
  store i64 %2775, i64* %RCX, align 8, !tbaa !2428
  %2776 = load i64, i64* %RBP
  %2777 = sub i64 %2776, 32
  %2778 = load i64, i64* %PC
  %2779 = add i64 %2778, 4
  store i64 %2779, i64* %PC
  %2780 = inttoptr i64 %2777 to i32*
  %2781 = load i32, i32* %2780
  %2782 = sext i32 %2781 to i64
  store i64 %2782, i64* %RDX, align 8, !tbaa !2428
  %2783 = load i64, i64* %RCX
  %2784 = load i64, i64* %RDX
  %2785 = mul i64 %2784, 8
  %2786 = add i64 %2785, %2783
  %2787 = bitcast %union.vec128_t* %XMM0 to i8*
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 5
  store i64 %2789, i64* %PC
  %2790 = bitcast i8* %2787 to double*
  %2791 = load double, double* %2790, align 1
  %2792 = inttoptr i64 %2786 to double*
  store double %2791, double* %2792
  %2793 = load i64, i64* %RBP
  %2794 = sub i64 %2793, 24
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 4
  store i64 %2796, i64* %PC
  %2797 = inttoptr i64 %2794 to i64*
  %2798 = load i64, i64* %2797
  store i64 %2798, i64* %RCX, align 8, !tbaa !2428
  %2799 = load i64, i64* %RBP
  %2800 = sub i64 %2799, 32
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 4
  store i64 %2802, i64* %PC
  %2803 = inttoptr i64 %2800 to i32*
  %2804 = load i32, i32* %2803
  %2805 = sext i32 %2804 to i64
  store i64 %2805, i64* %RDX, align 8, !tbaa !2428
  %2806 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2807 = load i64, i64* %RCX
  %2808 = load i64, i64* %RDX
  %2809 = mul i64 %2808, 8
  %2810 = add i64 %2809, %2807
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 5
  store i64 %2812, i64* %PC
  %2813 = inttoptr i64 %2810 to double*
  %2814 = load double, double* %2813
  %2815 = bitcast i8* %2806 to double*
  store double %2814, double* %2815, align 1, !tbaa !2452
  %2816 = getelementptr inbounds i8, i8* %2806, i64 8
  %2817 = bitcast i8* %2816 to double*
  store double 0.000000e+00, double* %2817, align 1, !tbaa !2452
  %2818 = load i64, i64* %RBP
  %2819 = sub i64 %2818, 24
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 4
  store i64 %2821, i64* %PC
  %2822 = inttoptr i64 %2819 to i64*
  %2823 = load i64, i64* %2822
  store i64 %2823, i64* %RCX, align 8, !tbaa !2428
  %2824 = load i64, i64* %RBP
  %2825 = sub i64 %2824, 32
  %2826 = load i64, i64* %PC
  %2827 = add i64 %2826, 3
  store i64 %2827, i64* %PC
  %2828 = inttoptr i64 %2825 to i32*
  %2829 = load i32, i32* %2828
  %2830 = zext i32 %2829 to i64
  store i64 %2830, i64* %RAX, align 8, !tbaa !2428
  %2831 = load i64, i64* %RAX
  %2832 = load i64, i64* %PC
  %2833 = add i64 %2832, 3
  store i64 %2833, i64* %PC
  %2834 = trunc i64 %2831 to i32
  %2835 = add i32 1, %2834
  %2836 = zext i32 %2835 to i64
  store i64 %2836, i64* %RAX, align 8, !tbaa !2428
  %2837 = icmp ult i32 %2835, %2834
  %2838 = icmp ult i32 %2835, 1
  %2839 = or i1 %2837, %2838
  %2840 = zext i1 %2839 to i8
  %2841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2840, i8* %2841, align 1, !tbaa !2432
  %2842 = and i32 %2835, 255
  %2843 = call i32 @llvm.ctpop.i32(i32 %2842) #17
  %2844 = trunc i32 %2843 to i8
  %2845 = and i8 %2844, 1
  %2846 = xor i8 %2845, 1
  %2847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2846, i8* %2847, align 1, !tbaa !2446
  %2848 = xor i64 1, %2831
  %2849 = trunc i64 %2848 to i32
  %2850 = xor i32 %2849, %2835
  %2851 = lshr i32 %2850, 4
  %2852 = trunc i32 %2851 to i8
  %2853 = and i8 %2852, 1
  %2854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2853, i8* %2854, align 1, !tbaa !2447
  %2855 = icmp eq i32 %2835, 0
  %2856 = zext i1 %2855 to i8
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2856, i8* %2857, align 1, !tbaa !2448
  %2858 = lshr i32 %2835, 31
  %2859 = trunc i32 %2858 to i8
  %2860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2859, i8* %2860, align 1, !tbaa !2449
  %2861 = lshr i32 %2834, 31
  %2862 = xor i32 %2858, %2861
  %2863 = add nuw nsw i32 %2862, %2858
  %2864 = icmp eq i32 %2863, 2
  %2865 = zext i1 %2864 to i8
  %2866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2865, i8* %2866, align 1, !tbaa !2450
  %2867 = load i32, i32* %EAX
  %2868 = zext i32 %2867 to i64
  %2869 = load i64, i64* %PC
  %2870 = add i64 %2869, 3
  store i64 %2870, i64* %PC
  %2871 = shl i64 %2868, 32
  %2872 = ashr exact i64 %2871, 32
  store i64 %2872, i64* %RDX, align 8, !tbaa !2428
  %2873 = load i64, i64* %RCX
  %2874 = load i64, i64* %RDX
  %2875 = mul i64 %2874, 8
  %2876 = add i64 %2875, %2873
  %2877 = bitcast %union.vec128_t* %XMM0 to i8*
  %2878 = load i64, i64* %PC
  %2879 = add i64 %2878, 5
  store i64 %2879, i64* %PC
  %2880 = bitcast i8* %2877 to double*
  %2881 = load double, double* %2880, align 1
  %2882 = inttoptr i64 %2876 to double*
  store double %2881, double* %2882
  %2883 = load i64, i64* %RBP
  %2884 = sub i64 %2883, 32
  %2885 = load i64, i64* %PC
  %2886 = add i64 %2885, 4
  store i64 %2886, i64* %PC
  %2887 = inttoptr i64 %2884 to i32*
  %2888 = load i32, i32* %2887
  %2889 = sub i32 %2888, 2
  %2890 = icmp ult i32 %2888, 2
  %2891 = zext i1 %2890 to i8
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2891, i8* %2892, align 1, !tbaa !2432
  %2893 = and i32 %2889, 255
  %2894 = call i32 @llvm.ctpop.i32(i32 %2893) #17
  %2895 = trunc i32 %2894 to i8
  %2896 = and i8 %2895, 1
  %2897 = xor i8 %2896, 1
  %2898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2897, i8* %2898, align 1, !tbaa !2446
  %2899 = xor i32 %2888, 2
  %2900 = xor i32 %2899, %2889
  %2901 = lshr i32 %2900, 4
  %2902 = trunc i32 %2901 to i8
  %2903 = and i8 %2902, 1
  %2904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2903, i8* %2904, align 1, !tbaa !2447
  %2905 = icmp eq i32 %2889, 0
  %2906 = zext i1 %2905 to i8
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2906, i8* %2907, align 1, !tbaa !2448
  %2908 = lshr i32 %2889, 31
  %2909 = trunc i32 %2908 to i8
  %2910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2909, i8* %2910, align 1, !tbaa !2449
  %2911 = lshr i32 %2888, 31
  %2912 = xor i32 %2908, %2911
  %2913 = add nuw nsw i32 %2912, %2911
  %2914 = icmp eq i32 %2913, 2
  %2915 = zext i1 %2914 to i8
  %2916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2915, i8* %2916, align 1, !tbaa !2450
  %2917 = load i64, i64* %PC
  %2918 = add i64 %2917, 193
  %2919 = load i64, i64* %PC
  %2920 = add i64 %2919, 6
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 6
  store i64 %2922, i64* %PC
  %2923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2924 = load i8, i8* %2923, align 1, !tbaa !2448
  %2925 = icmp ne i8 %2924, 0
  %2926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2927 = load i8, i8* %2926, align 1, !tbaa !2449
  %2928 = icmp ne i8 %2927, 0
  %2929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2930 = load i8, i8* %2929, align 1, !tbaa !2450
  %2931 = icmp ne i8 %2930, 0
  %2932 = xor i1 %2928, %2931
  %2933 = or i1 %2925, %2932
  %2934 = zext i1 %2933 to i8
  store i8 %2934, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2936 = select i1 %2933, i64 %2918, i64 %2920
  store i64 %2936, i64* %2935, align 8, !tbaa !2428
  %2937 = load i8, i8* %BRANCH_TAKEN
  %2938 = icmp eq i8 %2937, 1
  br i1 %2938, label %block_400fd1, label %block_400f16

block_400fc1:                                     ; preds = %block_400f1d
  %2939 = load i64, i64* %RBP
  %2940 = sub i64 %2939, 4
  %2941 = load i64, i64* %PC
  %2942 = add i64 %2941, 3
  store i64 %2942, i64* %PC
  %2943 = inttoptr i64 %2940 to i32*
  %2944 = load i32, i32* %2943
  %2945 = zext i32 %2944 to i64
  store i64 %2945, i64* %RDI, align 8, !tbaa !2428
  %2946 = load i64, i64* %RBP
  %2947 = sub i64 %2946, 16
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 4
  store i64 %2949, i64* %PC
  %2950 = inttoptr i64 %2947 to i64*
  %2951 = load i64, i64* %2950
  store i64 %2951, i64* %RSI, align 8, !tbaa !2428
  %2952 = load i64, i64* %RBP
  %2953 = sub i64 %2952, 24
  %2954 = load i64, i64* %PC
  %2955 = add i64 %2954, 4
  store i64 %2955, i64* %PC
  %2956 = inttoptr i64 %2953 to i64*
  %2957 = load i64, i64* %2956
  store i64 %2957, i64* %RDX, align 8, !tbaa !2428
  %2958 = load i64, i64* %PC
  %2959 = add i64 %2958, 548
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 5
  %2962 = load i64, i64* %PC
  %2963 = add i64 %2962, 5
  store i64 %2963, i64* %PC
  %2964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2965 = load i64, i64* %2964, align 8, !tbaa !2428
  %2966 = add i64 %2965, -8
  %2967 = inttoptr i64 %2966 to i64*
  store i64 %2961, i64* %2967
  store i64 %2966, i64* %2964, align 8, !tbaa !2428
  %2968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2959, i64* %2968, align 8, !tbaa !2428
  %2969 = load i64, i64* %PC
  %2970 = call %struct.Memory* @sub_4011f0_bitrv2_renamed_(%struct.State* %0, i64 %2969, %struct.Memory* %MEMORY.0)
  br label %block_400fd1
}

; Function Attrs: noinline
define %struct.Memory* @sub_4024b0_cftbsub(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4024b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 112
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 112
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2432
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #17
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2446
  %67 = xor i64 112, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i32, i32* %EDI
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 3
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %86 to i32*
  store i32 %87, i32* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 16
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %93 to i64*
  store i64 %94, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 24
  %100 = load i64, i64* %RDX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 44
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  store i32 2, i32* %108
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 4
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113
  %115 = sub i32 %114, 8
  %116 = icmp ult i32 %114, 8
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %117, i8* %118, align 1, !tbaa !2432
  %119 = and i32 %115, 255
  %120 = call i32 @llvm.ctpop.i32(i32 %119) #17
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %123, i8* %124, align 1, !tbaa !2446
  %125 = xor i32 %114, 8
  %126 = xor i32 %125, %115
  %127 = lshr i32 %126, 4
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %129, i8* %130, align 1, !tbaa !2447
  %131 = icmp eq i32 %115, 0
  %132 = zext i1 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %132, i8* %133, align 1, !tbaa !2448
  %134 = lshr i32 %115, 31
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %135, i8* %136, align 1, !tbaa !2449
  %137 = lshr i32 %114, 31
  %138 = xor i32 %134, %137
  %139 = add nuw nsw i32 %138, %137
  %140 = icmp eq i32 %139, 2
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %141, i8* %142, align 1, !tbaa !2450
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 82
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 6
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 6
  store i64 %148, i64* %PC
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %150 = load i8, i8* %149, align 1, !tbaa !2448
  %151 = icmp ne i8 %150, 0
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %153 = load i8, i8* %152, align 1, !tbaa !2449
  %154 = icmp ne i8 %153, 0
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %156 = load i8, i8* %155, align 1, !tbaa !2450
  %157 = icmp ne i8 %156, 0
  %158 = xor i1 %154, %157
  %159 = or i1 %151, %158
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %162 = select i1 %159, i64 %144, i64 %146
  store i64 %162, i64* %161, align 8, !tbaa !2428
  %163 = load i8, i8* %BRANCH_TAKEN
  %164 = icmp eq i8 %163, 1
  br i1 %164, label %block_402520, label %block_4024d4

block_40277b:                                     ; preds = %block_402536
  %165 = add i64 %282, 286
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 5
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %165, i64* %168, align 8, !tbaa !2428
  br label %block_402899

block_402899:                                     ; preds = %block_402894, %block_40277b
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_402894 ], [ %MEMORY.1, %block_40277b ]
  %169 = load i64, i64* %RSP
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 4
  store i64 %171, i64* %PC
  %172 = add i64 112, %169
  store i64 %172, i64* %RSP, align 8, !tbaa !2428
  %173 = icmp ult i64 %172, %169
  %174 = icmp ult i64 %172, 112
  %175 = or i1 %173, %174
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %176, i8* %177, align 1, !tbaa !2432
  %178 = trunc i64 %172 to i32
  %179 = and i32 %178, 255
  %180 = call i32 @llvm.ctpop.i32(i32 %179) #17
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %183, i8* %184, align 1, !tbaa !2446
  %185 = xor i64 112, %169
  %186 = xor i64 %185, %172
  %187 = lshr i64 %186, 4
  %188 = trunc i64 %187 to i8
  %189 = and i8 %188, 1
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %189, i8* %190, align 1, !tbaa !2447
  %191 = icmp eq i64 %172, 0
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %192, i8* %193, align 1, !tbaa !2448
  %194 = lshr i64 %172, 63
  %195 = trunc i64 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %195, i8* %196, align 1, !tbaa !2449
  %197 = lshr i64 %169, 63
  %198 = xor i64 %194, %197
  %199 = add nuw nsw i64 %198, %194
  %200 = icmp eq i64 %199, 2
  %201 = zext i1 %200 to i8
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %201, i8* %202, align 1, !tbaa !2450
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 1
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %RBP, align 8, !tbaa !2428
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 1
  store i64 %211, i64* %PC
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %214 = load i64, i64* %213, align 8, !tbaa !2428
  %215 = inttoptr i64 %214 to i64*
  %216 = load i64, i64* %215
  store i64 %216, i64* %212, align 8, !tbaa !2428
  %217 = add i64 %214, 8
  store i64 %217, i64* %213, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402536:                                     ; preds = %block_402520, %block_402542
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_402520 ], [ %MEMORY.1, %block_402542 ]
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 28
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 3
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %219 to i32*
  %223 = load i32, i32* %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = load i32, i32* %EAX
  %226 = zext i32 %225 to i64
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 44
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 3
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %228 to i32*
  %232 = load i32, i32* %231
  %233 = sub i32 %225, %232
  %234 = icmp ult i32 %225, %232
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %235, i8* %236, align 1, !tbaa !2432
  %237 = and i32 %233, 255
  %238 = call i32 @llvm.ctpop.i32(i32 %237) #17
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %241, i8* %242, align 1, !tbaa !2446
  %243 = xor i32 %232, %225
  %244 = xor i32 %243, %233
  %245 = lshr i32 %244, 4
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %247, i8* %248, align 1, !tbaa !2447
  %249 = icmp eq i32 %233, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2448
  %252 = lshr i32 %233, 31
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = lshr i32 %225, 31
  %256 = lshr i32 %232, 31
  %257 = xor i32 %256, %255
  %258 = xor i32 %252, %255
  %259 = add nuw nsw i32 %258, %257
  %260 = icmp eq i32 %259, 2
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %262, align 1, !tbaa !2450
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 575
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 6
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 6
  store i64 %268, i64* %PC
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %270 = load i8, i8* %269, align 1, !tbaa !2449
  %271 = icmp ne i8 %270, 0
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %273 = load i8, i8* %272, align 1, !tbaa !2450
  %274 = icmp ne i8 %273, 0
  %275 = xor i1 %271, %274
  %276 = xor i1 %275, true
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %279 = select i1 %275, i64 %266, i64 %264
  store i64 %279, i64* %278, align 8, !tbaa !2428
  %280 = load i8, i8* %BRANCH_TAKEN
  %281 = icmp eq i8 %280, 1
  %282 = load i64, i64* %PC
  br i1 %281, label %block_40277b, label %block_402542

block_4024d4:                                     ; preds = %block_4024b0
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 4
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 3
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %284 to i32*
  %288 = load i32, i32* %287
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RDI, align 8, !tbaa !2428
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 16
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 4
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RSI, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 24
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RDX, align 8, !tbaa !2428
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 961
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 5
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 5
  store i64 %307, i64* %PC
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %309 = load i64, i64* %308, align 8, !tbaa !2428
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %305, i64* %311
  store i64 %310, i64* %308, align 8, !tbaa !2428
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %303, i64* %312, align 8, !tbaa !2428
  %313 = load i64, i64* %PC
  %314 = call %struct.Memory* @sub_4028a0_cft1st_renamed_(%struct.State* %0, i64 %313, %struct.Memory* %2)
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 44
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 7
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i32*
  store i32 8, i32* %319
  br label %block_4024eb

block_402793:                                     ; preds = %block_402787
  %320 = add i64 %1245, 10
  store i64 %320, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 28
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 3
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %322 to i32*
  %326 = load i32, i32* %325
  %327 = zext i32 %326 to i64
  store i64 %327, i64* %RCX, align 8, !tbaa !2428
  %328 = load i64, i64* %RCX
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 44
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = trunc i64 %328 to i32
  %334 = inttoptr i64 %330 to i32*
  %335 = load i32, i32* %334
  %336 = add i32 %335, %333
  %337 = zext i32 %336 to i64
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %338 = icmp ult i32 %336, %333
  %339 = icmp ult i32 %336, %335
  %340 = or i1 %338, %339
  %341 = zext i1 %340 to i8
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %341, i8* %342, align 1, !tbaa !2432
  %343 = and i32 %336, 255
  %344 = call i32 @llvm.ctpop.i32(i32 %343) #17
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = xor i8 %346, 1
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %347, i8* %348, align 1, !tbaa !2446
  %349 = xor i32 %335, %333
  %350 = xor i32 %349, %336
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %353, i8* %354, align 1, !tbaa !2447
  %355 = icmp eq i32 %336, 0
  %356 = zext i1 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %356, i8* %357, align 1, !tbaa !2448
  %358 = lshr i32 %336, 31
  %359 = trunc i32 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %359, i8* %360, align 1, !tbaa !2449
  %361 = lshr i32 %333, 31
  %362 = lshr i32 %335, 31
  %363 = xor i32 %358, %361
  %364 = xor i32 %358, %362
  %365 = add nuw nsw i32 %363, %364
  %366 = icmp eq i32 %365, 2
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %367, i8* %368, align 1, !tbaa !2450
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 32
  %371 = load i32, i32* %ECX
  %372 = zext i32 %371 to i64
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %370 to i32*
  store i32 %371, i32* %375
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 16
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380
  store i64 %381, i64* %RDX, align 8, !tbaa !2428
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 28
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i32*
  %387 = load i32, i32* %386
  %388 = sext i32 %387 to i64
  store i64 %388, i64* %RSI, align 8, !tbaa !2428
  %389 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %390 = load i64, i64* %RDX
  %391 = load i64, i64* %RSI
  %392 = mul i64 %391, 8
  %393 = add i64 %392, %390
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 5
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %393 to double*
  %397 = load double, double* %396
  %398 = bitcast i8* %389 to double*
  store double %397, double* %398, align 1, !tbaa !2452
  %399 = getelementptr inbounds i8, i8* %389, i64 8
  %400 = bitcast i8* %399 to double*
  store double 0.000000e+00, double* %400, align 1, !tbaa !2452
  %401 = load i64, i64* %RBP
  %402 = sub i64 %401, 16
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 4
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RDX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 32
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 4
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411
  %413 = sext i32 %412 to i64
  store i64 %413, i64* %RSI, align 8, !tbaa !2428
  %414 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %415 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %416 = load i64, i64* %RDX
  %417 = load i64, i64* %RSI
  %418 = mul i64 %417, 8
  %419 = add i64 %418, %416
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC
  %422 = bitcast i8* %415 to double*
  %423 = load double, double* %422, align 1
  %424 = getelementptr inbounds i8, i8* %415, i64 8
  %425 = bitcast i8* %424 to i64*
  %426 = load i64, i64* %425, align 1
  %427 = inttoptr i64 %419 to double*
  %428 = load double, double* %427
  %429 = fsub double %423, %428
  %430 = bitcast i8* %414 to double*
  store double %429, double* %430, align 1, !tbaa !2452
  %431 = getelementptr inbounds i8, i8* %414, i64 8
  %432 = bitcast i8* %431 to i64*
  store i64 %426, i64* %432, align 1, !tbaa !2452
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 56
  %435 = bitcast %union.vec128_t* %XMM0 to i8*
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 5
  store i64 %437, i64* %PC
  %438 = bitcast i8* %435 to double*
  %439 = load double, double* %438, align 1
  %440 = inttoptr i64 %434 to double*
  store double %439, double* %440
  %441 = load i64, i64* %RBP
  %442 = sub i64 %441, 16
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %RDX, align 8, !tbaa !2428
  %447 = load i64, i64* %RBP
  %448 = sub i64 %447, 28
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 3
  store i64 %450, i64* %PC
  %451 = inttoptr i64 %448 to i32*
  %452 = load i32, i32* %451
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RCX, align 8, !tbaa !2428
  %454 = load i64, i64* %RCX
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 3
  store i64 %456, i64* %PC
  %457 = trunc i64 %454 to i32
  %458 = add i32 1, %457
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RCX, align 8, !tbaa !2428
  %460 = icmp ult i32 %458, %457
  %461 = icmp ult i32 %458, 1
  %462 = or i1 %460, %461
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %463, i8* %464, align 1, !tbaa !2432
  %465 = and i32 %458, 255
  %466 = call i32 @llvm.ctpop.i32(i32 %465) #17
  %467 = trunc i32 %466 to i8
  %468 = and i8 %467, 1
  %469 = xor i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %469, i8* %470, align 1, !tbaa !2446
  %471 = xor i64 1, %454
  %472 = trunc i64 %471 to i32
  %473 = xor i32 %472, %458
  %474 = lshr i32 %473, 4
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %476, i8* %477, align 1, !tbaa !2447
  %478 = icmp eq i32 %458, 0
  %479 = zext i1 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %479, i8* %480, align 1, !tbaa !2448
  %481 = lshr i32 %458, 31
  %482 = trunc i32 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %482, i8* %483, align 1, !tbaa !2449
  %484 = lshr i32 %457, 31
  %485 = xor i32 %481, %484
  %486 = add nuw nsw i32 %485, %481
  %487 = icmp eq i32 %486, 2
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %488, i8* %489, align 1, !tbaa !2450
  %490 = load i32, i32* %ECX
  %491 = zext i32 %490 to i64
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC
  %494 = shl i64 %491, 32
  %495 = ashr exact i64 %494, 32
  store i64 %495, i64* %RSI, align 8, !tbaa !2428
  %496 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %497 = load i64, i64* %RDX
  %498 = load i64, i64* %RSI
  %499 = mul i64 %498, 8
  %500 = add i64 %499, %497
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 5
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to double*
  %504 = load double, double* %503
  %505 = bitcast i8* %496 to double*
  store double %504, double* %505, align 1, !tbaa !2452
  %506 = getelementptr inbounds i8, i8* %496, i64 8
  %507 = bitcast i8* %506 to double*
  store double 0.000000e+00, double* %507, align 1, !tbaa !2452
  %508 = bitcast %union.vec128_t* %XMM0 to i8*
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 5
  store i64 %510, i64* %PC
  %511 = bitcast i8* %508 to i64*
  %512 = load i64, i64* %511, align 1
  store i64 %512, i64* %RDX, align 1, !tbaa !2428
  %513 = load i64, i64* %RDX
  %514 = load i64, i64* %RAX
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 3
  store i64 %516, i64* %PC
  %517 = xor i64 %514, %513
  store i64 %517, i64* %RDX, align 8, !tbaa !2428
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %518, align 1, !tbaa !2432
  %519 = trunc i64 %517 to i32
  %520 = and i32 %519, 255
  %521 = call i32 @llvm.ctpop.i32(i32 %520) #17
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  %524 = xor i8 %523, 1
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %524, i8* %525, align 1, !tbaa !2446
  %526 = icmp eq i64 %517, 0
  %527 = zext i1 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %527, i8* %528, align 1, !tbaa !2448
  %529 = lshr i64 %517, 63
  %530 = trunc i64 %529 to i8
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %530, i8* %531, align 1, !tbaa !2449
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %532, align 1, !tbaa !2450
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %533, align 1, !tbaa !2447
  %534 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %535 = load i64, i64* %RDX
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 5
  store i64 %537, i64* %PC
  %538 = bitcast i8* %534 to i64*
  store i64 %535, i64* %538, align 1, !tbaa !2428
  %539 = getelementptr inbounds i8, i8* %534, i64 8
  %540 = bitcast i8* %539 to i64*
  store i64 0, i64* %540, align 1, !tbaa !2428
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 16
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i64*
  %546 = load i64, i64* %545
  store i64 %546, i64* %RDX, align 8, !tbaa !2428
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 32
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 3
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i32*
  %552 = load i32, i32* %551
  %553 = zext i32 %552 to i64
  store i64 %553, i64* %RCX, align 8, !tbaa !2428
  %554 = load i64, i64* %RCX
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 3
  store i64 %556, i64* %PC
  %557 = trunc i64 %554 to i32
  %558 = add i32 1, %557
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RCX, align 8, !tbaa !2428
  %560 = icmp ult i32 %558, %557
  %561 = icmp ult i32 %558, 1
  %562 = or i1 %560, %561
  %563 = zext i1 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %563, i8* %564, align 1, !tbaa !2432
  %565 = and i32 %558, 255
  %566 = call i32 @llvm.ctpop.i32(i32 %565) #17
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %569, i8* %570, align 1, !tbaa !2446
  %571 = xor i64 1, %554
  %572 = trunc i64 %571 to i32
  %573 = xor i32 %572, %558
  %574 = lshr i32 %573, 4
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %576, i8* %577, align 1, !tbaa !2447
  %578 = icmp eq i32 %558, 0
  %579 = zext i1 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %579, i8* %580, align 1, !tbaa !2448
  %581 = lshr i32 %558, 31
  %582 = trunc i32 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %582, i8* %583, align 1, !tbaa !2449
  %584 = lshr i32 %557, 31
  %585 = xor i32 %581, %584
  %586 = add nuw nsw i32 %585, %581
  %587 = icmp eq i32 %586, 2
  %588 = zext i1 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %588, i8* %589, align 1, !tbaa !2450
  %590 = load i32, i32* %ECX
  %591 = zext i32 %590 to i64
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 3
  store i64 %593, i64* %PC
  %594 = shl i64 %591, 32
  %595 = ashr exact i64 %594, 32
  store i64 %595, i64* %RSI, align 8, !tbaa !2428
  %596 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %597 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %598 = load i64, i64* %RDX
  %599 = load i64, i64* %RSI
  %600 = mul i64 %599, 8
  %601 = add i64 %600, %598
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 5
  store i64 %603, i64* %PC
  %604 = bitcast i8* %597 to double*
  %605 = load double, double* %604, align 1
  %606 = getelementptr inbounds i8, i8* %597, i64 8
  %607 = bitcast i8* %606 to i64*
  %608 = load i64, i64* %607, align 1
  %609 = inttoptr i64 %601 to double*
  %610 = load double, double* %609
  %611 = fadd double %605, %610
  %612 = bitcast i8* %596 to double*
  store double %611, double* %612, align 1, !tbaa !2452
  %613 = getelementptr inbounds i8, i8* %596, i64 8
  %614 = bitcast i8* %613 to i64*
  store i64 %608, i64* %614, align 1, !tbaa !2452
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 64
  %617 = bitcast %union.vec128_t* %XMM0 to i8*
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 5
  store i64 %619, i64* %PC
  %620 = bitcast i8* %617 to double*
  %621 = load double, double* %620, align 1
  %622 = inttoptr i64 %616 to double*
  store double %621, double* %622
  %623 = load i64, i64* %RBP
  %624 = sub i64 %623, 16
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 4
  store i64 %626, i64* %PC
  %627 = inttoptr i64 %624 to i64*
  %628 = load i64, i64* %627
  store i64 %628, i64* %RDX, align 8, !tbaa !2428
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 32
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 4
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i32*
  %634 = load i32, i32* %633
  %635 = sext i32 %634 to i64
  store i64 %635, i64* %RSI, align 8, !tbaa !2428
  %636 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %637 = load i64, i64* %RDX
  %638 = load i64, i64* %RSI
  %639 = mul i64 %638, 8
  %640 = add i64 %639, %637
  %641 = load i64, i64* %PC
  %642 = add i64 %641, 5
  store i64 %642, i64* %PC
  %643 = inttoptr i64 %640 to double*
  %644 = load double, double* %643
  %645 = bitcast i8* %636 to double*
  store double %644, double* %645, align 1, !tbaa !2452
  %646 = getelementptr inbounds i8, i8* %636, i64 8
  %647 = bitcast i8* %646 to double*
  store double 0.000000e+00, double* %647, align 1, !tbaa !2452
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 16
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %649 to i64*
  %653 = load i64, i64* %652
  store i64 %653, i64* %RDX, align 8, !tbaa !2428
  %654 = load i64, i64* %RBP
  %655 = sub i64 %654, 28
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 4
  store i64 %657, i64* %PC
  %658 = inttoptr i64 %655 to i32*
  %659 = load i32, i32* %658
  %660 = sext i32 %659 to i64
  store i64 %660, i64* %RSI, align 8, !tbaa !2428
  %661 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %662 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %663 = load i64, i64* %RDX
  %664 = load i64, i64* %RSI
  %665 = mul i64 %664, 8
  %666 = add i64 %665, %663
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 5
  store i64 %668, i64* %PC
  %669 = bitcast i8* %662 to double*
  %670 = load double, double* %669, align 1
  %671 = getelementptr inbounds i8, i8* %662, i64 8
  %672 = bitcast i8* %671 to i64*
  %673 = load i64, i64* %672, align 1
  %674 = inttoptr i64 %666 to double*
  %675 = load double, double* %674
  %676 = fadd double %670, %675
  %677 = bitcast i8* %661 to double*
  store double %676, double* %677, align 1, !tbaa !2452
  %678 = getelementptr inbounds i8, i8* %661, i64 8
  %679 = bitcast i8* %678 to i64*
  store i64 %673, i64* %679, align 1, !tbaa !2452
  %680 = load i64, i64* %RDX
  %681 = load i64, i64* %RSI
  %682 = mul i64 %681, 8
  %683 = add i64 %682, %680
  %684 = bitcast %union.vec128_t* %XMM0 to i8*
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 5
  store i64 %686, i64* %PC
  %687 = bitcast i8* %684 to double*
  %688 = load double, double* %687, align 1
  %689 = inttoptr i64 %683 to double*
  store double %688, double* %689
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 16
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 4
  store i64 %693, i64* %PC
  %694 = inttoptr i64 %691 to i64*
  %695 = load i64, i64* %694
  store i64 %695, i64* %RDX, align 8, !tbaa !2428
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 28
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 3
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700
  %702 = zext i32 %701 to i64
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = load i64, i64* %RCX
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 3
  store i64 %705, i64* %PC
  %706 = trunc i64 %703 to i32
  %707 = add i32 1, %706
  %708 = zext i32 %707 to i64
  store i64 %708, i64* %RCX, align 8, !tbaa !2428
  %709 = icmp ult i32 %707, %706
  %710 = icmp ult i32 %707, 1
  %711 = or i1 %709, %710
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = and i32 %707, 255
  %715 = call i32 @llvm.ctpop.i32(i32 %714) #17
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %718, i8* %719, align 1, !tbaa !2446
  %720 = xor i64 1, %703
  %721 = trunc i64 %720 to i32
  %722 = xor i32 %721, %707
  %723 = lshr i32 %722, 4
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %725, i8* %726, align 1, !tbaa !2447
  %727 = icmp eq i32 %707, 0
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %728, i8* %729, align 1, !tbaa !2448
  %730 = lshr i32 %707, 31
  %731 = trunc i32 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %731, i8* %732, align 1, !tbaa !2449
  %733 = lshr i32 %706, 31
  %734 = xor i32 %730, %733
  %735 = add nuw nsw i32 %734, %730
  %736 = icmp eq i32 %735, 2
  %737 = zext i1 %736 to i8
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %737, i8* %738, align 1, !tbaa !2450
  %739 = load i32, i32* %ECX
  %740 = zext i32 %739 to i64
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 3
  store i64 %742, i64* %PC
  %743 = shl i64 %740, 32
  %744 = ashr exact i64 %743, 32
  store i64 %744, i64* %RSI, align 8, !tbaa !2428
  %745 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %746 = load i64, i64* %RDX
  %747 = load i64, i64* %RSI
  %748 = mul i64 %747, 8
  %749 = add i64 %748, %746
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 5
  store i64 %751, i64* %PC
  %752 = inttoptr i64 %749 to double*
  %753 = load double, double* %752
  %754 = bitcast i8* %745 to double*
  store double %753, double* %754, align 1, !tbaa !2452
  %755 = getelementptr inbounds i8, i8* %745, i64 8
  %756 = bitcast i8* %755 to double*
  store double 0.000000e+00, double* %756, align 1, !tbaa !2452
  %757 = bitcast %union.vec128_t* %XMM0 to i8*
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  store i64 %759, i64* %PC
  %760 = bitcast i8* %757 to i64*
  %761 = load i64, i64* %760, align 1
  store i64 %761, i64* %RDX, align 1, !tbaa !2428
  %762 = load i64, i64* %RDX
  %763 = load i64, i64* %RAX
  %764 = load i64, i64* %PC
  %765 = add i64 %764, 3
  store i64 %765, i64* %PC
  %766 = xor i64 %763, %762
  store i64 %766, i64* %RDX, align 8, !tbaa !2428
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %767, align 1, !tbaa !2432
  %768 = trunc i64 %766 to i32
  %769 = and i32 %768, 255
  %770 = call i32 @llvm.ctpop.i32(i32 %769) #17
  %771 = trunc i32 %770 to i8
  %772 = and i8 %771, 1
  %773 = xor i8 %772, 1
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %773, i8* %774, align 1, !tbaa !2446
  %775 = icmp eq i64 %766, 0
  %776 = zext i1 %775 to i8
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %776, i8* %777, align 1, !tbaa !2448
  %778 = lshr i64 %766, 63
  %779 = trunc i64 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %779, i8* %780, align 1, !tbaa !2449
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %781, align 1, !tbaa !2450
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %782, align 1, !tbaa !2447
  %783 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %784 = load i64, i64* %RDX
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 5
  store i64 %786, i64* %PC
  %787 = bitcast i8* %783 to i64*
  store i64 %784, i64* %787, align 1, !tbaa !2428
  %788 = getelementptr inbounds i8, i8* %783, i64 8
  %789 = bitcast i8* %788 to i64*
  store i64 0, i64* %789, align 1, !tbaa !2428
  %790 = load i64, i64* %RBP
  %791 = sub i64 %790, 16
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 4
  store i64 %793, i64* %PC
  %794 = inttoptr i64 %791 to i64*
  %795 = load i64, i64* %794
  store i64 %795, i64* %RAX, align 8, !tbaa !2428
  %796 = load i64, i64* %RBP
  %797 = sub i64 %796, 32
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 3
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %797 to i32*
  %801 = load i32, i32* %800
  %802 = zext i32 %801 to i64
  store i64 %802, i64* %RCX, align 8, !tbaa !2428
  %803 = load i64, i64* %RCX
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 3
  store i64 %805, i64* %PC
  %806 = trunc i64 %803 to i32
  %807 = add i32 1, %806
  %808 = zext i32 %807 to i64
  store i64 %808, i64* %RCX, align 8, !tbaa !2428
  %809 = icmp ult i32 %807, %806
  %810 = icmp ult i32 %807, 1
  %811 = or i1 %809, %810
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %812, i8* %813, align 1, !tbaa !2432
  %814 = and i32 %807, 255
  %815 = call i32 @llvm.ctpop.i32(i32 %814) #17
  %816 = trunc i32 %815 to i8
  %817 = and i8 %816, 1
  %818 = xor i8 %817, 1
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %818, i8* %819, align 1, !tbaa !2446
  %820 = xor i64 1, %803
  %821 = trunc i64 %820 to i32
  %822 = xor i32 %821, %807
  %823 = lshr i32 %822, 4
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %825, i8* %826, align 1, !tbaa !2447
  %827 = icmp eq i32 %807, 0
  %828 = zext i1 %827 to i8
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %828, i8* %829, align 1, !tbaa !2448
  %830 = lshr i32 %807, 31
  %831 = trunc i32 %830 to i8
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %831, i8* %832, align 1, !tbaa !2449
  %833 = lshr i32 %806, 31
  %834 = xor i32 %830, %833
  %835 = add nuw nsw i32 %834, %830
  %836 = icmp eq i32 %835, 2
  %837 = zext i1 %836 to i8
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %837, i8* %838, align 1, !tbaa !2450
  %839 = load i32, i32* %ECX
  %840 = zext i32 %839 to i64
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 3
  store i64 %842, i64* %PC
  %843 = shl i64 %840, 32
  %844 = ashr exact i64 %843, 32
  store i64 %844, i64* %RDX, align 8, !tbaa !2428
  %845 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %846 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %847 = load i64, i64* %RAX
  %848 = load i64, i64* %RDX
  %849 = mul i64 %848, 8
  %850 = add i64 %849, %847
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 5
  store i64 %852, i64* %PC
  %853 = bitcast i8* %846 to double*
  %854 = load double, double* %853, align 1
  %855 = getelementptr inbounds i8, i8* %846, i64 8
  %856 = bitcast i8* %855 to i64*
  %857 = load i64, i64* %856, align 1
  %858 = inttoptr i64 %850 to double*
  %859 = load double, double* %858
  %860 = fsub double %854, %859
  %861 = bitcast i8* %845 to double*
  store double %860, double* %861, align 1, !tbaa !2452
  %862 = getelementptr inbounds i8, i8* %845, i64 8
  %863 = bitcast i8* %862 to i64*
  store i64 %857, i64* %863, align 1, !tbaa !2452
  %864 = load i64, i64* %RBP
  %865 = sub i64 %864, 16
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 4
  store i64 %867, i64* %PC
  %868 = inttoptr i64 %865 to i64*
  %869 = load i64, i64* %868
  store i64 %869, i64* %RAX, align 8, !tbaa !2428
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 28
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 3
  store i64 %873, i64* %PC
  %874 = inttoptr i64 %871 to i32*
  %875 = load i32, i32* %874
  %876 = zext i32 %875 to i64
  store i64 %876, i64* %RCX, align 8, !tbaa !2428
  %877 = load i64, i64* %RCX
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 3
  store i64 %879, i64* %PC
  %880 = trunc i64 %877 to i32
  %881 = add i32 1, %880
  %882 = zext i32 %881 to i64
  store i64 %882, i64* %RCX, align 8, !tbaa !2428
  %883 = icmp ult i32 %881, %880
  %884 = icmp ult i32 %881, 1
  %885 = or i1 %883, %884
  %886 = zext i1 %885 to i8
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %886, i8* %887, align 1, !tbaa !2432
  %888 = and i32 %881, 255
  %889 = call i32 @llvm.ctpop.i32(i32 %888) #17
  %890 = trunc i32 %889 to i8
  %891 = and i8 %890, 1
  %892 = xor i8 %891, 1
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %892, i8* %893, align 1, !tbaa !2446
  %894 = xor i64 1, %877
  %895 = trunc i64 %894 to i32
  %896 = xor i32 %895, %881
  %897 = lshr i32 %896, 4
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %899, i8* %900, align 1, !tbaa !2447
  %901 = icmp eq i32 %881, 0
  %902 = zext i1 %901 to i8
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %902, i8* %903, align 1, !tbaa !2448
  %904 = lshr i32 %881, 31
  %905 = trunc i32 %904 to i8
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %905, i8* %906, align 1, !tbaa !2449
  %907 = lshr i32 %880, 31
  %908 = xor i32 %904, %907
  %909 = add nuw nsw i32 %908, %904
  %910 = icmp eq i32 %909, 2
  %911 = zext i1 %910 to i8
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %911, i8* %912, align 1, !tbaa !2450
  %913 = load i32, i32* %ECX
  %914 = zext i32 %913 to i64
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 3
  store i64 %916, i64* %PC
  %917 = shl i64 %914, 32
  %918 = ashr exact i64 %917, 32
  store i64 %918, i64* %RDX, align 8, !tbaa !2428
  %919 = load i64, i64* %RAX
  %920 = load i64, i64* %RDX
  %921 = mul i64 %920, 8
  %922 = add i64 %921, %919
  %923 = bitcast %union.vec128_t* %XMM0 to i8*
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 5
  store i64 %925, i64* %PC
  %926 = bitcast i8* %923 to double*
  %927 = load double, double* %926, align 1
  %928 = inttoptr i64 %922 to double*
  store double %927, double* %928
  %929 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 56
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to double*
  %935 = load double, double* %934
  %936 = bitcast i8* %929 to double*
  store double %935, double* %936, align 1, !tbaa !2452
  %937 = getelementptr inbounds i8, i8* %929, i64 8
  %938 = bitcast i8* %937 to double*
  store double 0.000000e+00, double* %938, align 1, !tbaa !2452
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 16
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 4
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i64*
  %944 = load i64, i64* %943
  store i64 %944, i64* %RAX, align 8, !tbaa !2428
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 32
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 4
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i32*
  %950 = load i32, i32* %949
  %951 = sext i32 %950 to i64
  store i64 %951, i64* %RDX, align 8, !tbaa !2428
  %952 = load i64, i64* %RAX
  %953 = load i64, i64* %RDX
  %954 = mul i64 %953, 8
  %955 = add i64 %954, %952
  %956 = bitcast %union.vec128_t* %XMM0 to i8*
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 5
  store i64 %958, i64* %PC
  %959 = bitcast i8* %956 to double*
  %960 = load double, double* %959, align 1
  %961 = inttoptr i64 %955 to double*
  store double %960, double* %961
  %962 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %963 = load i64, i64* %RBP
  %964 = sub i64 %963, 64
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 5
  store i64 %966, i64* %PC
  %967 = inttoptr i64 %964 to double*
  %968 = load double, double* %967
  %969 = bitcast i8* %962 to double*
  store double %968, double* %969, align 1, !tbaa !2452
  %970 = getelementptr inbounds i8, i8* %962, i64 8
  %971 = bitcast i8* %970 to double*
  store double 0.000000e+00, double* %971, align 1, !tbaa !2452
  %972 = load i64, i64* %RBP
  %973 = sub i64 %972, 16
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976
  store i64 %977, i64* %RAX, align 8, !tbaa !2428
  %978 = load i64, i64* %RBP
  %979 = sub i64 %978, 32
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 3
  store i64 %981, i64* %PC
  %982 = inttoptr i64 %979 to i32*
  %983 = load i32, i32* %982
  %984 = zext i32 %983 to i64
  store i64 %984, i64* %RCX, align 8, !tbaa !2428
  %985 = load i64, i64* %RCX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = trunc i64 %985 to i32
  %989 = add i32 1, %988
  %990 = zext i32 %989 to i64
  store i64 %990, i64* %RCX, align 8, !tbaa !2428
  %991 = icmp ult i32 %989, %988
  %992 = icmp ult i32 %989, 1
  %993 = or i1 %991, %992
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %994, i8* %995, align 1, !tbaa !2432
  %996 = and i32 %989, 255
  %997 = call i32 @llvm.ctpop.i32(i32 %996) #17
  %998 = trunc i32 %997 to i8
  %999 = and i8 %998, 1
  %1000 = xor i8 %999, 1
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1000, i8* %1001, align 1, !tbaa !2446
  %1002 = xor i64 1, %985
  %1003 = trunc i64 %1002 to i32
  %1004 = xor i32 %1003, %989
  %1005 = lshr i32 %1004, 4
  %1006 = trunc i32 %1005 to i8
  %1007 = and i8 %1006, 1
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1007, i8* %1008, align 1, !tbaa !2447
  %1009 = icmp eq i32 %989, 0
  %1010 = zext i1 %1009 to i8
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1010, i8* %1011, align 1, !tbaa !2448
  %1012 = lshr i32 %989, 31
  %1013 = trunc i32 %1012 to i8
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1013, i8* %1014, align 1, !tbaa !2449
  %1015 = lshr i32 %988, 31
  %1016 = xor i32 %1012, %1015
  %1017 = add nuw nsw i32 %1016, %1012
  %1018 = icmp eq i32 %1017, 2
  %1019 = zext i1 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1019, i8* %1020, align 1, !tbaa !2450
  %1021 = load i32, i32* %ECX
  %1022 = zext i32 %1021 to i64
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 3
  store i64 %1024, i64* %PC
  %1025 = shl i64 %1022, 32
  %1026 = ashr exact i64 %1025, 32
  store i64 %1026, i64* %RDX, align 8, !tbaa !2428
  %1027 = load i64, i64* %RAX
  %1028 = load i64, i64* %RDX
  %1029 = mul i64 %1028, 8
  %1030 = add i64 %1029, %1027
  %1031 = bitcast %union.vec128_t* %XMM0 to i8*
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 5
  store i64 %1033, i64* %PC
  %1034 = bitcast i8* %1031 to double*
  %1035 = load double, double* %1034, align 1
  %1036 = inttoptr i64 %1030 to double*
  store double %1035, double* %1036
  %1037 = load i64, i64* %RBP
  %1038 = sub i64 %1037, 28
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 3
  store i64 %1040, i64* %PC
  %1041 = inttoptr i64 %1038 to i32*
  %1042 = load i32, i32* %1041
  %1043 = zext i32 %1042 to i64
  store i64 %1043, i64* %RAX, align 8, !tbaa !2428
  %1044 = load i64, i64* %RAX
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 3
  store i64 %1046, i64* %PC
  %1047 = trunc i64 %1044 to i32
  %1048 = add i32 2, %1047
  %1049 = zext i32 %1048 to i64
  store i64 %1049, i64* %RAX, align 8, !tbaa !2428
  %1050 = icmp ult i32 %1048, %1047
  %1051 = icmp ult i32 %1048, 2
  %1052 = or i1 %1050, %1051
  %1053 = zext i1 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1053, i8* %1054, align 1, !tbaa !2432
  %1055 = and i32 %1048, 255
  %1056 = call i32 @llvm.ctpop.i32(i32 %1055) #17
  %1057 = trunc i32 %1056 to i8
  %1058 = and i8 %1057, 1
  %1059 = xor i8 %1058, 1
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1059, i8* %1060, align 1, !tbaa !2446
  %1061 = xor i64 2, %1044
  %1062 = trunc i64 %1061 to i32
  %1063 = xor i32 %1062, %1048
  %1064 = lshr i32 %1063, 4
  %1065 = trunc i32 %1064 to i8
  %1066 = and i8 %1065, 1
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1066, i8* %1067, align 1, !tbaa !2447
  %1068 = icmp eq i32 %1048, 0
  %1069 = zext i1 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1069, i8* %1070, align 1, !tbaa !2448
  %1071 = lshr i32 %1048, 31
  %1072 = trunc i32 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1072, i8* %1073, align 1, !tbaa !2449
  %1074 = lshr i32 %1047, 31
  %1075 = xor i32 %1071, %1074
  %1076 = add nuw nsw i32 %1075, %1071
  %1077 = icmp eq i32 %1076, 2
  %1078 = zext i1 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1078, i8* %1079, align 1, !tbaa !2450
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 28
  %1082 = load i32, i32* %EAX
  %1083 = zext i32 %1082 to i64
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 3
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1081 to i32*
  store i32 %1082, i32* %1086
  %1087 = load i64, i64* %PC
  %1088 = sub i64 %1087, 264
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 5
  store i64 %1090, i64* %PC
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1088, i64* %1091, align 8, !tbaa !2428
  br label %block_402787

block_4024eb:                                     ; preds = %block_4024fa, %block_4024d4
  %MEMORY.2 = phi %struct.Memory* [ %314, %block_4024d4 ], [ %1289, %block_4024fa ]
  %1092 = load i64, i64* %RBP
  %1093 = sub i64 %1092, 44
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 3
  store i64 %1095, i64* %PC
  %1096 = inttoptr i64 %1093 to i32*
  %1097 = load i32, i32* %1096
  %1098 = zext i32 %1097 to i64
  store i64 %1098, i64* %RAX, align 8, !tbaa !2428
  %1099 = load i64, i64* %RAX
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 3
  store i64 %1101, i64* %PC
  %1102 = and i64 %1099, 4294967295
  %1103 = shl i64 %1102, 1
  %1104 = trunc i64 %1103 to i32
  %1105 = icmp slt i32 %1104, 0
  %1106 = shl i32 %1104, 1
  %1107 = zext i32 %1106 to i64
  store i64 %1107, i64* %RAX, align 8, !tbaa !2428
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1109 = zext i1 %1105 to i8
  store i8 %1109, i8* %1108, align 1, !tbaa !2451
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1111 = and i32 %1106, 254
  %1112 = call i32 @llvm.ctpop.i32(i32 %1111) #17
  %1113 = trunc i32 %1112 to i8
  %1114 = and i8 %1113, 1
  %1115 = xor i8 %1114, 1
  store i8 %1115, i8* %1110, align 1, !tbaa !2451
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1116, align 1, !tbaa !2451
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1118 = icmp eq i32 %1106, 0
  %1119 = zext i1 %1118 to i8
  store i8 %1119, i8* %1117, align 1, !tbaa !2451
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1121 = lshr i32 %1106, 31
  %1122 = trunc i32 %1121 to i8
  store i8 %1122, i8* %1120, align 1, !tbaa !2451
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1123, align 1, !tbaa !2451
  %1124 = load i32, i32* %EAX
  %1125 = zext i32 %1124 to i64
  %1126 = load i64, i64* %RBP
  %1127 = sub i64 %1126, 4
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 3
  store i64 %1129, i64* %PC
  %1130 = inttoptr i64 %1127 to i32*
  %1131 = load i32, i32* %1130
  %1132 = sub i32 %1124, %1131
  %1133 = icmp ult i32 %1124, %1131
  %1134 = zext i1 %1133 to i8
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1134, i8* %1135, align 1, !tbaa !2432
  %1136 = and i32 %1132, 255
  %1137 = call i32 @llvm.ctpop.i32(i32 %1136) #17
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = xor i8 %1139, 1
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1140, i8* %1141, align 1, !tbaa !2446
  %1142 = xor i32 %1131, %1124
  %1143 = xor i32 %1142, %1132
  %1144 = lshr i32 %1143, 4
  %1145 = trunc i32 %1144 to i8
  %1146 = and i8 %1145, 1
  %1147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1146, i8* %1147, align 1, !tbaa !2447
  %1148 = icmp eq i32 %1132, 0
  %1149 = zext i1 %1148 to i8
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1149, i8* %1150, align 1, !tbaa !2448
  %1151 = lshr i32 %1132, 31
  %1152 = trunc i32 %1151 to i8
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1152, i8* %1153, align 1, !tbaa !2449
  %1154 = lshr i32 %1124, 31
  %1155 = lshr i32 %1131, 31
  %1156 = xor i32 %1155, %1154
  %1157 = xor i32 %1151, %1154
  %1158 = add nuw nsw i32 %1157, %1156
  %1159 = icmp eq i32 %1158, 2
  %1160 = zext i1 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1160, i8* %1161, align 1, !tbaa !2450
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 39
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 6
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 6
  store i64 %1167, i64* %PC
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1169 = load i8, i8* %1168, align 1, !tbaa !2449
  %1170 = icmp ne i8 %1169, 0
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1172 = load i8, i8* %1171, align 1, !tbaa !2450
  %1173 = icmp ne i8 %1172, 0
  %1174 = xor i1 %1170, %1173
  %1175 = xor i1 %1174, true
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1178 = select i1 %1174, i64 %1165, i64 %1163
  store i64 %1178, i64* %1177, align 8, !tbaa !2428
  %1179 = load i8, i8* %BRANCH_TAKEN
  %1180 = icmp eq i8 %1179, 1
  br i1 %1180, label %block_40251b, label %block_4024fa

block_402787:                                     ; preds = %block_402520, %block_402793
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_402520 ], [ %MEMORY.3, %block_402793 ]
  %1181 = load i64, i64* %RBP
  %1182 = sub i64 %1181, 28
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 3
  store i64 %1184, i64* %PC
  %1185 = inttoptr i64 %1182 to i32*
  %1186 = load i32, i32* %1185
  %1187 = zext i32 %1186 to i64
  store i64 %1187, i64* %RAX, align 8, !tbaa !2428
  %1188 = load i32, i32* %EAX
  %1189 = zext i32 %1188 to i64
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 44
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 3
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i32*
  %1195 = load i32, i32* %1194
  %1196 = sub i32 %1188, %1195
  %1197 = icmp ult i32 %1188, %1195
  %1198 = zext i1 %1197 to i8
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1198, i8* %1199, align 1, !tbaa !2432
  %1200 = and i32 %1196, 255
  %1201 = call i32 @llvm.ctpop.i32(i32 %1200) #17
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1204, i8* %1205, align 1, !tbaa !2446
  %1206 = xor i32 %1195, %1188
  %1207 = xor i32 %1206, %1196
  %1208 = lshr i32 %1207, 4
  %1209 = trunc i32 %1208 to i8
  %1210 = and i8 %1209, 1
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1210, i8* %1211, align 1, !tbaa !2447
  %1212 = icmp eq i32 %1196, 0
  %1213 = zext i1 %1212 to i8
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1213, i8* %1214, align 1, !tbaa !2448
  %1215 = lshr i32 %1196, 31
  %1216 = trunc i32 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1216, i8* %1217, align 1, !tbaa !2449
  %1218 = lshr i32 %1188, 31
  %1219 = lshr i32 %1195, 31
  %1220 = xor i32 %1219, %1218
  %1221 = xor i32 %1215, %1218
  %1222 = add nuw nsw i32 %1221, %1220
  %1223 = icmp eq i32 %1222, 2
  %1224 = zext i1 %1223 to i8
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1224, i8* %1225, align 1, !tbaa !2450
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 263
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 6
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 6
  store i64 %1231, i64* %PC
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1233 = load i8, i8* %1232, align 1, !tbaa !2449
  %1234 = icmp ne i8 %1233, 0
  %1235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1236 = load i8, i8* %1235, align 1, !tbaa !2450
  %1237 = icmp ne i8 %1236, 0
  %1238 = xor i1 %1234, %1237
  %1239 = xor i1 %1238, true
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1242 = select i1 %1238, i64 %1229, i64 %1227
  store i64 %1242, i64* %1241, align 8, !tbaa !2428
  %1243 = load i8, i8* %BRANCH_TAKEN
  %1244 = icmp eq i8 %1243, 1
  %1245 = load i64, i64* %PC
  br i1 %1244, label %block_402894, label %block_402793

block_40251b:                                     ; preds = %block_4024eb
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 5
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 5
  store i64 %1249, i64* %PC
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1247, i64* %1250, align 8, !tbaa !2428
  br label %block_402520

block_4024fa:                                     ; preds = %block_4024eb
  %1251 = load i64, i64* %RBP
  %1252 = sub i64 %1251, 4
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 3
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1252 to i32*
  %1256 = load i32, i32* %1255
  %1257 = zext i32 %1256 to i64
  store i64 %1257, i64* %RDI, align 8, !tbaa !2428
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 44
  %1260 = load i64, i64* %PC
  %1261 = add i64 %1260, 3
  store i64 %1261, i64* %PC
  %1262 = inttoptr i64 %1259 to i32*
  %1263 = load i32, i32* %1262
  %1264 = zext i32 %1263 to i64
  store i64 %1264, i64* %RSI, align 8, !tbaa !2428
  %1265 = load i64, i64* %RBP
  %1266 = sub i64 %1265, 16
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 4
  store i64 %1268, i64* %PC
  %1269 = inttoptr i64 %1266 to i64*
  %1270 = load i64, i64* %1269
  store i64 %1270, i64* %RDX, align 8, !tbaa !2428
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 24
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 4
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i64*
  %1276 = load i64, i64* %1275
  store i64 %1276, i64* %RCX, align 8, !tbaa !2428
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 3624
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 5
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 5
  store i64 %1282, i64* %PC
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1284 = load i64, i64* %1283, align 8, !tbaa !2428
  %1285 = add i64 %1284, -8
  %1286 = inttoptr i64 %1285 to i64*
  store i64 %1280, i64* %1286
  store i64 %1285, i64* %1283, align 8, !tbaa !2428
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1278, i64* %1287, align 8, !tbaa !2428
  %1288 = load i64, i64* %PC
  %1289 = call %struct.Memory* @sub_403330_cftmdl_renamed_(%struct.State* %0, i64 %1288, %struct.Memory* %MEMORY.2)
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 44
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 3
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1291 to i32*
  %1295 = load i32, i32* %1294
  %1296 = zext i32 %1295 to i64
  store i64 %1296, i64* %RSI, align 8, !tbaa !2428
  %1297 = load i64, i64* %RSI
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 3
  store i64 %1299, i64* %PC
  %1300 = and i64 %1297, 4294967295
  %1301 = shl i64 %1300, 1
  %1302 = trunc i64 %1301 to i32
  %1303 = icmp slt i32 %1302, 0
  %1304 = shl i32 %1302, 1
  %1305 = zext i32 %1304 to i64
  store i64 %1305, i64* %RSI, align 8, !tbaa !2428
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1307 = zext i1 %1303 to i8
  store i8 %1307, i8* %1306, align 1, !tbaa !2451
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1309 = and i32 %1304, 254
  %1310 = call i32 @llvm.ctpop.i32(i32 %1309) #17
  %1311 = trunc i32 %1310 to i8
  %1312 = and i8 %1311, 1
  %1313 = xor i8 %1312, 1
  store i8 %1313, i8* %1308, align 1, !tbaa !2451
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1314, align 1, !tbaa !2451
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1316 = icmp eq i32 %1304, 0
  %1317 = zext i1 %1316 to i8
  store i8 %1317, i8* %1315, align 1, !tbaa !2451
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1319 = lshr i32 %1304, 31
  %1320 = trunc i32 %1319 to i8
  store i8 %1320, i8* %1318, align 1, !tbaa !2451
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1321, align 1, !tbaa !2451
  %1322 = load i64, i64* %RBP
  %1323 = sub i64 %1322, 44
  %1324 = load i32, i32* %ESI
  %1325 = zext i32 %1324 to i64
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC
  %1328 = inttoptr i64 %1323 to i32*
  store i32 %1324, i32* %1328
  %1329 = load i64, i64* %PC
  %1330 = sub i64 %1329, 43
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 5
  store i64 %1332, i64* %PC
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1330, i64* %1333, align 8, !tbaa !2428
  br label %block_4024eb

block_402894:                                     ; preds = %block_402787
  %1334 = add i64 %1245, 5
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 5
  store i64 %1336, i64* %PC
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1334, i64* %1337, align 8, !tbaa !2428
  br label %block_402899

block_402542:                                     ; preds = %block_402536
  %1338 = add i64 %282, 10
  store i64 %1338, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1339 = load i64, i64* %RBP
  %1340 = sub i64 %1339, 28
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 3
  store i64 %1342, i64* %PC
  %1343 = inttoptr i64 %1340 to i32*
  %1344 = load i32, i32* %1343
  %1345 = zext i32 %1344 to i64
  store i64 %1345, i64* %RCX, align 8, !tbaa !2428
  %1346 = load i64, i64* %RCX
  %1347 = load i64, i64* %RBP
  %1348 = sub i64 %1347, 44
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 3
  store i64 %1350, i64* %PC
  %1351 = trunc i64 %1346 to i32
  %1352 = inttoptr i64 %1348 to i32*
  %1353 = load i32, i32* %1352
  %1354 = add i32 %1353, %1351
  %1355 = zext i32 %1354 to i64
  store i64 %1355, i64* %RCX, align 8, !tbaa !2428
  %1356 = icmp ult i32 %1354, %1351
  %1357 = icmp ult i32 %1354, %1353
  %1358 = or i1 %1356, %1357
  %1359 = zext i1 %1358 to i8
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1359, i8* %1360, align 1, !tbaa !2432
  %1361 = and i32 %1354, 255
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #17
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1365, i8* %1366, align 1, !tbaa !2446
  %1367 = xor i32 %1353, %1351
  %1368 = xor i32 %1367, %1354
  %1369 = lshr i32 %1368, 4
  %1370 = trunc i32 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1371, i8* %1372, align 1, !tbaa !2447
  %1373 = icmp eq i32 %1354, 0
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1374, i8* %1375, align 1, !tbaa !2448
  %1376 = lshr i32 %1354, 31
  %1377 = trunc i32 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1377, i8* %1378, align 1, !tbaa !2449
  %1379 = lshr i32 %1351, 31
  %1380 = lshr i32 %1353, 31
  %1381 = xor i32 %1376, %1379
  %1382 = xor i32 %1376, %1380
  %1383 = add nuw nsw i32 %1381, %1382
  %1384 = icmp eq i32 %1383, 2
  %1385 = zext i1 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1385, i8* %1386, align 1, !tbaa !2450
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 32
  %1389 = load i32, i32* %ECX
  %1390 = zext i32 %1389 to i64
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 3
  store i64 %1392, i64* %PC
  %1393 = inttoptr i64 %1388 to i32*
  store i32 %1389, i32* %1393
  %1394 = load i64, i64* %RBP
  %1395 = sub i64 %1394, 32
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 3
  store i64 %1397, i64* %PC
  %1398 = inttoptr i64 %1395 to i32*
  %1399 = load i32, i32* %1398
  %1400 = zext i32 %1399 to i64
  store i64 %1400, i64* %RCX, align 8, !tbaa !2428
  %1401 = load i64, i64* %RCX
  %1402 = load i64, i64* %RBP
  %1403 = sub i64 %1402, 44
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 3
  store i64 %1405, i64* %PC
  %1406 = trunc i64 %1401 to i32
  %1407 = inttoptr i64 %1403 to i32*
  %1408 = load i32, i32* %1407
  %1409 = add i32 %1408, %1406
  %1410 = zext i32 %1409 to i64
  store i64 %1410, i64* %RCX, align 8, !tbaa !2428
  %1411 = icmp ult i32 %1409, %1406
  %1412 = icmp ult i32 %1409, %1408
  %1413 = or i1 %1411, %1412
  %1414 = zext i1 %1413 to i8
  %1415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1414, i8* %1415, align 1, !tbaa !2432
  %1416 = and i32 %1409, 255
  %1417 = call i32 @llvm.ctpop.i32(i32 %1416) #17
  %1418 = trunc i32 %1417 to i8
  %1419 = and i8 %1418, 1
  %1420 = xor i8 %1419, 1
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1420, i8* %1421, align 1, !tbaa !2446
  %1422 = xor i32 %1408, %1406
  %1423 = xor i32 %1422, %1409
  %1424 = lshr i32 %1423, 4
  %1425 = trunc i32 %1424 to i8
  %1426 = and i8 %1425, 1
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1426, i8* %1427, align 1, !tbaa !2447
  %1428 = icmp eq i32 %1409, 0
  %1429 = zext i1 %1428 to i8
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1429, i8* %1430, align 1, !tbaa !2448
  %1431 = lshr i32 %1409, 31
  %1432 = trunc i32 %1431 to i8
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1432, i8* %1433, align 1, !tbaa !2449
  %1434 = lshr i32 %1406, 31
  %1435 = lshr i32 %1408, 31
  %1436 = xor i32 %1431, %1434
  %1437 = xor i32 %1431, %1435
  %1438 = add nuw nsw i32 %1436, %1437
  %1439 = icmp eq i32 %1438, 2
  %1440 = zext i1 %1439 to i8
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1440, i8* %1441, align 1, !tbaa !2450
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 36
  %1444 = load i32, i32* %ECX
  %1445 = zext i32 %1444 to i64
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 3
  store i64 %1447, i64* %PC
  %1448 = inttoptr i64 %1443 to i32*
  store i32 %1444, i32* %1448
  %1449 = load i64, i64* %RBP
  %1450 = sub i64 %1449, 36
  %1451 = load i64, i64* %PC
  %1452 = add i64 %1451, 3
  store i64 %1452, i64* %PC
  %1453 = inttoptr i64 %1450 to i32*
  %1454 = load i32, i32* %1453
  %1455 = zext i32 %1454 to i64
  store i64 %1455, i64* %RCX, align 8, !tbaa !2428
  %1456 = load i64, i64* %RCX
  %1457 = load i64, i64* %RBP
  %1458 = sub i64 %1457, 44
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 3
  store i64 %1460, i64* %PC
  %1461 = trunc i64 %1456 to i32
  %1462 = inttoptr i64 %1458 to i32*
  %1463 = load i32, i32* %1462
  %1464 = add i32 %1463, %1461
  %1465 = zext i32 %1464 to i64
  store i64 %1465, i64* %RCX, align 8, !tbaa !2428
  %1466 = icmp ult i32 %1464, %1461
  %1467 = icmp ult i32 %1464, %1463
  %1468 = or i1 %1466, %1467
  %1469 = zext i1 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1469, i8* %1470, align 1, !tbaa !2432
  %1471 = and i32 %1464, 255
  %1472 = call i32 @llvm.ctpop.i32(i32 %1471) #17
  %1473 = trunc i32 %1472 to i8
  %1474 = and i8 %1473, 1
  %1475 = xor i8 %1474, 1
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1475, i8* %1476, align 1, !tbaa !2446
  %1477 = xor i32 %1463, %1461
  %1478 = xor i32 %1477, %1464
  %1479 = lshr i32 %1478, 4
  %1480 = trunc i32 %1479 to i8
  %1481 = and i8 %1480, 1
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1481, i8* %1482, align 1, !tbaa !2447
  %1483 = icmp eq i32 %1464, 0
  %1484 = zext i1 %1483 to i8
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1484, i8* %1485, align 1, !tbaa !2448
  %1486 = lshr i32 %1464, 31
  %1487 = trunc i32 %1486 to i8
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1487, i8* %1488, align 1, !tbaa !2449
  %1489 = lshr i32 %1461, 31
  %1490 = lshr i32 %1463, 31
  %1491 = xor i32 %1486, %1489
  %1492 = xor i32 %1486, %1490
  %1493 = add nuw nsw i32 %1491, %1492
  %1494 = icmp eq i32 %1493, 2
  %1495 = zext i1 %1494 to i8
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1495, i8* %1496, align 1, !tbaa !2450
  %1497 = load i64, i64* %RBP
  %1498 = sub i64 %1497, 40
  %1499 = load i32, i32* %ECX
  %1500 = zext i32 %1499 to i64
  %1501 = load i64, i64* %PC
  %1502 = add i64 %1501, 3
  store i64 %1502, i64* %PC
  %1503 = inttoptr i64 %1498 to i32*
  store i32 %1499, i32* %1503
  %1504 = load i64, i64* %RBP
  %1505 = sub i64 %1504, 16
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 4
  store i64 %1507, i64* %PC
  %1508 = inttoptr i64 %1505 to i64*
  %1509 = load i64, i64* %1508
  store i64 %1509, i64* %RDX, align 8, !tbaa !2428
  %1510 = load i64, i64* %RBP
  %1511 = sub i64 %1510, 28
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 4
  store i64 %1513, i64* %PC
  %1514 = inttoptr i64 %1511 to i32*
  %1515 = load i32, i32* %1514
  %1516 = sext i32 %1515 to i64
  store i64 %1516, i64* %RSI, align 8, !tbaa !2428
  %1517 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1518 = load i64, i64* %RDX
  %1519 = load i64, i64* %RSI
  %1520 = mul i64 %1519, 8
  %1521 = add i64 %1520, %1518
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 5
  store i64 %1523, i64* %PC
  %1524 = inttoptr i64 %1521 to double*
  %1525 = load double, double* %1524
  %1526 = bitcast i8* %1517 to double*
  store double %1525, double* %1526, align 1, !tbaa !2452
  %1527 = getelementptr inbounds i8, i8* %1517, i64 8
  %1528 = bitcast i8* %1527 to double*
  store double 0.000000e+00, double* %1528, align 1, !tbaa !2452
  %1529 = load i64, i64* %RBP
  %1530 = sub i64 %1529, 16
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 4
  store i64 %1532, i64* %PC
  %1533 = inttoptr i64 %1530 to i64*
  %1534 = load i64, i64* %1533
  store i64 %1534, i64* %RDX, align 8, !tbaa !2428
  %1535 = load i64, i64* %RBP
  %1536 = sub i64 %1535, 32
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 4
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1536 to i32*
  %1540 = load i32, i32* %1539
  %1541 = sext i32 %1540 to i64
  store i64 %1541, i64* %RSI, align 8, !tbaa !2428
  %1542 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1543 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1544 = load i64, i64* %RDX
  %1545 = load i64, i64* %RSI
  %1546 = mul i64 %1545, 8
  %1547 = add i64 %1546, %1544
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 5
  store i64 %1549, i64* %PC
  %1550 = bitcast i8* %1543 to double*
  %1551 = load double, double* %1550, align 1
  %1552 = getelementptr inbounds i8, i8* %1543, i64 8
  %1553 = bitcast i8* %1552 to i64*
  %1554 = load i64, i64* %1553, align 1
  %1555 = inttoptr i64 %1547 to double*
  %1556 = load double, double* %1555
  %1557 = fadd double %1551, %1556
  %1558 = bitcast i8* %1542 to double*
  store double %1557, double* %1558, align 1, !tbaa !2452
  %1559 = getelementptr inbounds i8, i8* %1542, i64 8
  %1560 = bitcast i8* %1559 to i64*
  store i64 %1554, i64* %1560, align 1, !tbaa !2452
  %1561 = load i64, i64* %RBP
  %1562 = sub i64 %1561, 56
  %1563 = bitcast %union.vec128_t* %XMM0 to i8*
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 5
  store i64 %1565, i64* %PC
  %1566 = bitcast i8* %1563 to double*
  %1567 = load double, double* %1566, align 1
  %1568 = inttoptr i64 %1562 to double*
  store double %1567, double* %1568
  %1569 = load i64, i64* %RBP
  %1570 = sub i64 %1569, 16
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 4
  store i64 %1572, i64* %PC
  %1573 = inttoptr i64 %1570 to i64*
  %1574 = load i64, i64* %1573
  store i64 %1574, i64* %RDX, align 8, !tbaa !2428
  %1575 = load i64, i64* %RBP
  %1576 = sub i64 %1575, 28
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 3
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1576 to i32*
  %1580 = load i32, i32* %1579
  %1581 = zext i32 %1580 to i64
  store i64 %1581, i64* %RCX, align 8, !tbaa !2428
  %1582 = load i64, i64* %RCX
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = trunc i64 %1582 to i32
  %1586 = add i32 1, %1585
  %1587 = zext i32 %1586 to i64
  store i64 %1587, i64* %RCX, align 8, !tbaa !2428
  %1588 = icmp ult i32 %1586, %1585
  %1589 = icmp ult i32 %1586, 1
  %1590 = or i1 %1588, %1589
  %1591 = zext i1 %1590 to i8
  %1592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1591, i8* %1592, align 1, !tbaa !2432
  %1593 = and i32 %1586, 255
  %1594 = call i32 @llvm.ctpop.i32(i32 %1593) #17
  %1595 = trunc i32 %1594 to i8
  %1596 = and i8 %1595, 1
  %1597 = xor i8 %1596, 1
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1597, i8* %1598, align 1, !tbaa !2446
  %1599 = xor i64 1, %1582
  %1600 = trunc i64 %1599 to i32
  %1601 = xor i32 %1600, %1586
  %1602 = lshr i32 %1601, 4
  %1603 = trunc i32 %1602 to i8
  %1604 = and i8 %1603, 1
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1604, i8* %1605, align 1, !tbaa !2447
  %1606 = icmp eq i32 %1586, 0
  %1607 = zext i1 %1606 to i8
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1607, i8* %1608, align 1, !tbaa !2448
  %1609 = lshr i32 %1586, 31
  %1610 = trunc i32 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1610, i8* %1611, align 1, !tbaa !2449
  %1612 = lshr i32 %1585, 31
  %1613 = xor i32 %1609, %1612
  %1614 = add nuw nsw i32 %1613, %1609
  %1615 = icmp eq i32 %1614, 2
  %1616 = zext i1 %1615 to i8
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1616, i8* %1617, align 1, !tbaa !2450
  %1618 = load i32, i32* %ECX
  %1619 = zext i32 %1618 to i64
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 3
  store i64 %1621, i64* %PC
  %1622 = shl i64 %1619, 32
  %1623 = ashr exact i64 %1622, 32
  store i64 %1623, i64* %RSI, align 8, !tbaa !2428
  %1624 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1625 = load i64, i64* %RDX
  %1626 = load i64, i64* %RSI
  %1627 = mul i64 %1626, 8
  %1628 = add i64 %1627, %1625
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 5
  store i64 %1630, i64* %PC
  %1631 = inttoptr i64 %1628 to double*
  %1632 = load double, double* %1631
  %1633 = bitcast i8* %1624 to double*
  store double %1632, double* %1633, align 1, !tbaa !2452
  %1634 = getelementptr inbounds i8, i8* %1624, i64 8
  %1635 = bitcast i8* %1634 to double*
  store double 0.000000e+00, double* %1635, align 1, !tbaa !2452
  %1636 = bitcast %union.vec128_t* %XMM0 to i8*
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 5
  store i64 %1638, i64* %PC
  %1639 = bitcast i8* %1636 to i64*
  %1640 = load i64, i64* %1639, align 1
  store i64 %1640, i64* %RDX, align 1, !tbaa !2428
  %1641 = load i64, i64* %RDX
  %1642 = load i64, i64* %RAX
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 3
  store i64 %1644, i64* %PC
  %1645 = xor i64 %1642, %1641
  store i64 %1645, i64* %RDX, align 8, !tbaa !2428
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1646, align 1, !tbaa !2432
  %1647 = trunc i64 %1645 to i32
  %1648 = and i32 %1647, 255
  %1649 = call i32 @llvm.ctpop.i32(i32 %1648) #17
  %1650 = trunc i32 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = xor i8 %1651, 1
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1652, i8* %1653, align 1, !tbaa !2446
  %1654 = icmp eq i64 %1645, 0
  %1655 = zext i1 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1655, i8* %1656, align 1, !tbaa !2448
  %1657 = lshr i64 %1645, 63
  %1658 = trunc i64 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1658, i8* %1659, align 1, !tbaa !2449
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1660, align 1, !tbaa !2450
  %1661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1661, align 1, !tbaa !2447
  %1662 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1663 = load i64, i64* %RDX
  %1664 = load i64, i64* %PC
  %1665 = add i64 %1664, 5
  store i64 %1665, i64* %PC
  %1666 = bitcast i8* %1662 to i64*
  store i64 %1663, i64* %1666, align 1, !tbaa !2428
  %1667 = getelementptr inbounds i8, i8* %1662, i64 8
  %1668 = bitcast i8* %1667 to i64*
  store i64 0, i64* %1668, align 1, !tbaa !2428
  %1669 = load i64, i64* %RBP
  %1670 = sub i64 %1669, 16
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 4
  store i64 %1672, i64* %PC
  %1673 = inttoptr i64 %1670 to i64*
  %1674 = load i64, i64* %1673
  store i64 %1674, i64* %RDX, align 8, !tbaa !2428
  %1675 = load i64, i64* %RBP
  %1676 = sub i64 %1675, 32
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 3
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1676 to i32*
  %1680 = load i32, i32* %1679
  %1681 = zext i32 %1680 to i64
  store i64 %1681, i64* %RCX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RCX
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  %1685 = trunc i64 %1682 to i32
  %1686 = add i32 1, %1685
  %1687 = zext i32 %1686 to i64
  store i64 %1687, i64* %RCX, align 8, !tbaa !2428
  %1688 = icmp ult i32 %1686, %1685
  %1689 = icmp ult i32 %1686, 1
  %1690 = or i1 %1688, %1689
  %1691 = zext i1 %1690 to i8
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1691, i8* %1692, align 1, !tbaa !2432
  %1693 = and i32 %1686, 255
  %1694 = call i32 @llvm.ctpop.i32(i32 %1693) #17
  %1695 = trunc i32 %1694 to i8
  %1696 = and i8 %1695, 1
  %1697 = xor i8 %1696, 1
  %1698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1697, i8* %1698, align 1, !tbaa !2446
  %1699 = xor i64 1, %1682
  %1700 = trunc i64 %1699 to i32
  %1701 = xor i32 %1700, %1686
  %1702 = lshr i32 %1701, 4
  %1703 = trunc i32 %1702 to i8
  %1704 = and i8 %1703, 1
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1704, i8* %1705, align 1, !tbaa !2447
  %1706 = icmp eq i32 %1686, 0
  %1707 = zext i1 %1706 to i8
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1707, i8* %1708, align 1, !tbaa !2448
  %1709 = lshr i32 %1686, 31
  %1710 = trunc i32 %1709 to i8
  %1711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1710, i8* %1711, align 1, !tbaa !2449
  %1712 = lshr i32 %1685, 31
  %1713 = xor i32 %1709, %1712
  %1714 = add nuw nsw i32 %1713, %1709
  %1715 = icmp eq i32 %1714, 2
  %1716 = zext i1 %1715 to i8
  %1717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1716, i8* %1717, align 1, !tbaa !2450
  %1718 = load i32, i32* %ECX
  %1719 = zext i32 %1718 to i64
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 3
  store i64 %1721, i64* %PC
  %1722 = shl i64 %1719, 32
  %1723 = ashr exact i64 %1722, 32
  store i64 %1723, i64* %RSI, align 8, !tbaa !2428
  %1724 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1726 = load i64, i64* %RDX
  %1727 = load i64, i64* %RSI
  %1728 = mul i64 %1727, 8
  %1729 = add i64 %1728, %1726
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 5
  store i64 %1731, i64* %PC
  %1732 = bitcast i8* %1725 to double*
  %1733 = load double, double* %1732, align 1
  %1734 = getelementptr inbounds i8, i8* %1725, i64 8
  %1735 = bitcast i8* %1734 to i64*
  %1736 = load i64, i64* %1735, align 1
  %1737 = inttoptr i64 %1729 to double*
  %1738 = load double, double* %1737
  %1739 = fsub double %1733, %1738
  %1740 = bitcast i8* %1724 to double*
  store double %1739, double* %1740, align 1, !tbaa !2452
  %1741 = getelementptr inbounds i8, i8* %1724, i64 8
  %1742 = bitcast i8* %1741 to i64*
  store i64 %1736, i64* %1742, align 1, !tbaa !2452
  %1743 = load i64, i64* %RBP
  %1744 = sub i64 %1743, 64
  %1745 = bitcast %union.vec128_t* %XMM0 to i8*
  %1746 = load i64, i64* %PC
  %1747 = add i64 %1746, 5
  store i64 %1747, i64* %PC
  %1748 = bitcast i8* %1745 to double*
  %1749 = load double, double* %1748, align 1
  %1750 = inttoptr i64 %1744 to double*
  store double %1749, double* %1750
  %1751 = load i64, i64* %RBP
  %1752 = sub i64 %1751, 16
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 4
  store i64 %1754, i64* %PC
  %1755 = inttoptr i64 %1752 to i64*
  %1756 = load i64, i64* %1755
  store i64 %1756, i64* %RDX, align 8, !tbaa !2428
  %1757 = load i64, i64* %RBP
  %1758 = sub i64 %1757, 28
  %1759 = load i64, i64* %PC
  %1760 = add i64 %1759, 4
  store i64 %1760, i64* %PC
  %1761 = inttoptr i64 %1758 to i32*
  %1762 = load i32, i32* %1761
  %1763 = sext i32 %1762 to i64
  store i64 %1763, i64* %RSI, align 8, !tbaa !2428
  %1764 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1765 = load i64, i64* %RDX
  %1766 = load i64, i64* %RSI
  %1767 = mul i64 %1766, 8
  %1768 = add i64 %1767, %1765
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 5
  store i64 %1770, i64* %PC
  %1771 = inttoptr i64 %1768 to double*
  %1772 = load double, double* %1771
  %1773 = bitcast i8* %1764 to double*
  store double %1772, double* %1773, align 1, !tbaa !2452
  %1774 = getelementptr inbounds i8, i8* %1764, i64 8
  %1775 = bitcast i8* %1774 to double*
  store double 0.000000e+00, double* %1775, align 1, !tbaa !2452
  %1776 = load i64, i64* %RBP
  %1777 = sub i64 %1776, 16
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 4
  store i64 %1779, i64* %PC
  %1780 = inttoptr i64 %1777 to i64*
  %1781 = load i64, i64* %1780
  store i64 %1781, i64* %RDX, align 8, !tbaa !2428
  %1782 = load i64, i64* %RBP
  %1783 = sub i64 %1782, 32
  %1784 = load i64, i64* %PC
  %1785 = add i64 %1784, 4
  store i64 %1785, i64* %PC
  %1786 = inttoptr i64 %1783 to i32*
  %1787 = load i32, i32* %1786
  %1788 = sext i32 %1787 to i64
  store i64 %1788, i64* %RSI, align 8, !tbaa !2428
  %1789 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1790 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1791 = load i64, i64* %RDX
  %1792 = load i64, i64* %RSI
  %1793 = mul i64 %1792, 8
  %1794 = add i64 %1793, %1791
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 5
  store i64 %1796, i64* %PC
  %1797 = bitcast i8* %1790 to double*
  %1798 = load double, double* %1797, align 1
  %1799 = getelementptr inbounds i8, i8* %1790, i64 8
  %1800 = bitcast i8* %1799 to i64*
  %1801 = load i64, i64* %1800, align 1
  %1802 = inttoptr i64 %1794 to double*
  %1803 = load double, double* %1802
  %1804 = fsub double %1798, %1803
  %1805 = bitcast i8* %1789 to double*
  store double %1804, double* %1805, align 1, !tbaa !2452
  %1806 = getelementptr inbounds i8, i8* %1789, i64 8
  %1807 = bitcast i8* %1806 to i64*
  store i64 %1801, i64* %1807, align 1, !tbaa !2452
  %1808 = load i64, i64* %RBP
  %1809 = sub i64 %1808, 72
  %1810 = bitcast %union.vec128_t* %XMM0 to i8*
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 5
  store i64 %1812, i64* %PC
  %1813 = bitcast i8* %1810 to double*
  %1814 = load double, double* %1813, align 1
  %1815 = inttoptr i64 %1809 to double*
  store double %1814, double* %1815
  %1816 = load i64, i64* %RBP
  %1817 = sub i64 %1816, 16
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 4
  store i64 %1819, i64* %PC
  %1820 = inttoptr i64 %1817 to i64*
  %1821 = load i64, i64* %1820
  store i64 %1821, i64* %RDX, align 8, !tbaa !2428
  %1822 = load i64, i64* %RBP
  %1823 = sub i64 %1822, 28
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 3
  store i64 %1825, i64* %PC
  %1826 = inttoptr i64 %1823 to i32*
  %1827 = load i32, i32* %1826
  %1828 = zext i32 %1827 to i64
  store i64 %1828, i64* %RCX, align 8, !tbaa !2428
  %1829 = load i64, i64* %RCX
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 3
  store i64 %1831, i64* %PC
  %1832 = trunc i64 %1829 to i32
  %1833 = add i32 1, %1832
  %1834 = zext i32 %1833 to i64
  store i64 %1834, i64* %RCX, align 8, !tbaa !2428
  %1835 = icmp ult i32 %1833, %1832
  %1836 = icmp ult i32 %1833, 1
  %1837 = or i1 %1835, %1836
  %1838 = zext i1 %1837 to i8
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1838, i8* %1839, align 1, !tbaa !2432
  %1840 = and i32 %1833, 255
  %1841 = call i32 @llvm.ctpop.i32(i32 %1840) #17
  %1842 = trunc i32 %1841 to i8
  %1843 = and i8 %1842, 1
  %1844 = xor i8 %1843, 1
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1844, i8* %1845, align 1, !tbaa !2446
  %1846 = xor i64 1, %1829
  %1847 = trunc i64 %1846 to i32
  %1848 = xor i32 %1847, %1833
  %1849 = lshr i32 %1848, 4
  %1850 = trunc i32 %1849 to i8
  %1851 = and i8 %1850, 1
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1851, i8* %1852, align 1, !tbaa !2447
  %1853 = icmp eq i32 %1833, 0
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1854, i8* %1855, align 1, !tbaa !2448
  %1856 = lshr i32 %1833, 31
  %1857 = trunc i32 %1856 to i8
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1857, i8* %1858, align 1, !tbaa !2449
  %1859 = lshr i32 %1832, 31
  %1860 = xor i32 %1856, %1859
  %1861 = add nuw nsw i32 %1860, %1856
  %1862 = icmp eq i32 %1861, 2
  %1863 = zext i1 %1862 to i8
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1863, i8* %1864, align 1, !tbaa !2450
  %1865 = load i32, i32* %ECX
  %1866 = zext i32 %1865 to i64
  %1867 = load i64, i64* %PC
  %1868 = add i64 %1867, 3
  store i64 %1868, i64* %PC
  %1869 = shl i64 %1866, 32
  %1870 = ashr exact i64 %1869, 32
  store i64 %1870, i64* %RSI, align 8, !tbaa !2428
  %1871 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1872 = load i64, i64* %RDX
  %1873 = load i64, i64* %RSI
  %1874 = mul i64 %1873, 8
  %1875 = add i64 %1874, %1872
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 5
  store i64 %1877, i64* %PC
  %1878 = inttoptr i64 %1875 to double*
  %1879 = load double, double* %1878
  %1880 = bitcast i8* %1871 to double*
  store double %1879, double* %1880, align 1, !tbaa !2452
  %1881 = getelementptr inbounds i8, i8* %1871, i64 8
  %1882 = bitcast i8* %1881 to double*
  store double 0.000000e+00, double* %1882, align 1, !tbaa !2452
  %1883 = bitcast %union.vec128_t* %XMM0 to i8*
  %1884 = load i64, i64* %PC
  %1885 = add i64 %1884, 5
  store i64 %1885, i64* %PC
  %1886 = bitcast i8* %1883 to i64*
  %1887 = load i64, i64* %1886, align 1
  store i64 %1887, i64* %RDX, align 1, !tbaa !2428
  %1888 = load i64, i64* %RDX
  %1889 = load i64, i64* %RAX
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 3
  store i64 %1891, i64* %PC
  %1892 = xor i64 %1889, %1888
  store i64 %1892, i64* %RDX, align 8, !tbaa !2428
  %1893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1893, align 1, !tbaa !2432
  %1894 = trunc i64 %1892 to i32
  %1895 = and i32 %1894, 255
  %1896 = call i32 @llvm.ctpop.i32(i32 %1895) #17
  %1897 = trunc i32 %1896 to i8
  %1898 = and i8 %1897, 1
  %1899 = xor i8 %1898, 1
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1899, i8* %1900, align 1, !tbaa !2446
  %1901 = icmp eq i64 %1892, 0
  %1902 = zext i1 %1901 to i8
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1902, i8* %1903, align 1, !tbaa !2448
  %1904 = lshr i64 %1892, 63
  %1905 = trunc i64 %1904 to i8
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1905, i8* %1906, align 1, !tbaa !2449
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1907, align 1, !tbaa !2450
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1908, align 1, !tbaa !2447
  %1909 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1910 = load i64, i64* %RDX
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 5
  store i64 %1912, i64* %PC
  %1913 = bitcast i8* %1909 to i64*
  store i64 %1910, i64* %1913, align 1, !tbaa !2428
  %1914 = getelementptr inbounds i8, i8* %1909, i64 8
  %1915 = bitcast i8* %1914 to i64*
  store i64 0, i64* %1915, align 1, !tbaa !2428
  %1916 = load i64, i64* %RBP
  %1917 = sub i64 %1916, 16
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 4
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1917 to i64*
  %1921 = load i64, i64* %1920
  store i64 %1921, i64* %RAX, align 8, !tbaa !2428
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 32
  %1924 = load i64, i64* %PC
  %1925 = add i64 %1924, 3
  store i64 %1925, i64* %PC
  %1926 = inttoptr i64 %1923 to i32*
  %1927 = load i32, i32* %1926
  %1928 = zext i32 %1927 to i64
  store i64 %1928, i64* %RCX, align 8, !tbaa !2428
  %1929 = load i64, i64* %RCX
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 3
  store i64 %1931, i64* %PC
  %1932 = trunc i64 %1929 to i32
  %1933 = add i32 1, %1932
  %1934 = zext i32 %1933 to i64
  store i64 %1934, i64* %RCX, align 8, !tbaa !2428
  %1935 = icmp ult i32 %1933, %1932
  %1936 = icmp ult i32 %1933, 1
  %1937 = or i1 %1935, %1936
  %1938 = zext i1 %1937 to i8
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1938, i8* %1939, align 1, !tbaa !2432
  %1940 = and i32 %1933, 255
  %1941 = call i32 @llvm.ctpop.i32(i32 %1940) #17
  %1942 = trunc i32 %1941 to i8
  %1943 = and i8 %1942, 1
  %1944 = xor i8 %1943, 1
  %1945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1944, i8* %1945, align 1, !tbaa !2446
  %1946 = xor i64 1, %1929
  %1947 = trunc i64 %1946 to i32
  %1948 = xor i32 %1947, %1933
  %1949 = lshr i32 %1948, 4
  %1950 = trunc i32 %1949 to i8
  %1951 = and i8 %1950, 1
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1951, i8* %1952, align 1, !tbaa !2447
  %1953 = icmp eq i32 %1933, 0
  %1954 = zext i1 %1953 to i8
  %1955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1954, i8* %1955, align 1, !tbaa !2448
  %1956 = lshr i32 %1933, 31
  %1957 = trunc i32 %1956 to i8
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1957, i8* %1958, align 1, !tbaa !2449
  %1959 = lshr i32 %1932, 31
  %1960 = xor i32 %1956, %1959
  %1961 = add nuw nsw i32 %1960, %1956
  %1962 = icmp eq i32 %1961, 2
  %1963 = zext i1 %1962 to i8
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1963, i8* %1964, align 1, !tbaa !2450
  %1965 = load i32, i32* %ECX
  %1966 = zext i32 %1965 to i64
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 3
  store i64 %1968, i64* %PC
  %1969 = shl i64 %1966, 32
  %1970 = ashr exact i64 %1969, 32
  store i64 %1970, i64* %RDX, align 8, !tbaa !2428
  %1971 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1972 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1973 = load i64, i64* %RAX
  %1974 = load i64, i64* %RDX
  %1975 = mul i64 %1974, 8
  %1976 = add i64 %1975, %1973
  %1977 = load i64, i64* %PC
  %1978 = add i64 %1977, 5
  store i64 %1978, i64* %PC
  %1979 = bitcast i8* %1972 to double*
  %1980 = load double, double* %1979, align 1
  %1981 = getelementptr inbounds i8, i8* %1972, i64 8
  %1982 = bitcast i8* %1981 to i64*
  %1983 = load i64, i64* %1982, align 1
  %1984 = inttoptr i64 %1976 to double*
  %1985 = load double, double* %1984
  %1986 = fadd double %1980, %1985
  %1987 = bitcast i8* %1971 to double*
  store double %1986, double* %1987, align 1, !tbaa !2452
  %1988 = getelementptr inbounds i8, i8* %1971, i64 8
  %1989 = bitcast i8* %1988 to i64*
  store i64 %1983, i64* %1989, align 1, !tbaa !2452
  %1990 = load i64, i64* %RBP
  %1991 = sub i64 %1990, 80
  %1992 = bitcast %union.vec128_t* %XMM0 to i8*
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 5
  store i64 %1994, i64* %PC
  %1995 = bitcast i8* %1992 to double*
  %1996 = load double, double* %1995, align 1
  %1997 = inttoptr i64 %1991 to double*
  store double %1996, double* %1997
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 16
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 4
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i64*
  %2003 = load i64, i64* %2002
  store i64 %2003, i64* %RAX, align 8, !tbaa !2428
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 36
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 4
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2005 to i32*
  %2009 = load i32, i32* %2008
  %2010 = sext i32 %2009 to i64
  store i64 %2010, i64* %RDX, align 8, !tbaa !2428
  %2011 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2012 = load i64, i64* %RAX
  %2013 = load i64, i64* %RDX
  %2014 = mul i64 %2013, 8
  %2015 = add i64 %2014, %2012
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 5
  store i64 %2017, i64* %PC
  %2018 = inttoptr i64 %2015 to double*
  %2019 = load double, double* %2018
  %2020 = bitcast i8* %2011 to double*
  store double %2019, double* %2020, align 1, !tbaa !2452
  %2021 = getelementptr inbounds i8, i8* %2011, i64 8
  %2022 = bitcast i8* %2021 to double*
  store double 0.000000e+00, double* %2022, align 1, !tbaa !2452
  %2023 = load i64, i64* %RBP
  %2024 = sub i64 %2023, 16
  %2025 = load i64, i64* %PC
  %2026 = add i64 %2025, 4
  store i64 %2026, i64* %PC
  %2027 = inttoptr i64 %2024 to i64*
  %2028 = load i64, i64* %2027
  store i64 %2028, i64* %RAX, align 8, !tbaa !2428
  %2029 = load i64, i64* %RBP
  %2030 = sub i64 %2029, 40
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 4
  store i64 %2032, i64* %PC
  %2033 = inttoptr i64 %2030 to i32*
  %2034 = load i32, i32* %2033
  %2035 = sext i32 %2034 to i64
  store i64 %2035, i64* %RDX, align 8, !tbaa !2428
  %2036 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2037 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2038 = load i64, i64* %RAX
  %2039 = load i64, i64* %RDX
  %2040 = mul i64 %2039, 8
  %2041 = add i64 %2040, %2038
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 5
  store i64 %2043, i64* %PC
  %2044 = bitcast i8* %2037 to double*
  %2045 = load double, double* %2044, align 1
  %2046 = getelementptr inbounds i8, i8* %2037, i64 8
  %2047 = bitcast i8* %2046 to i64*
  %2048 = load i64, i64* %2047, align 1
  %2049 = inttoptr i64 %2041 to double*
  %2050 = load double, double* %2049
  %2051 = fadd double %2045, %2050
  %2052 = bitcast i8* %2036 to double*
  store double %2051, double* %2052, align 1, !tbaa !2452
  %2053 = getelementptr inbounds i8, i8* %2036, i64 8
  %2054 = bitcast i8* %2053 to i64*
  store i64 %2048, i64* %2054, align 1, !tbaa !2452
  %2055 = load i64, i64* %RBP
  %2056 = sub i64 %2055, 88
  %2057 = bitcast %union.vec128_t* %XMM0 to i8*
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 5
  store i64 %2059, i64* %PC
  %2060 = bitcast i8* %2057 to double*
  %2061 = load double, double* %2060, align 1
  %2062 = inttoptr i64 %2056 to double*
  store double %2061, double* %2062
  %2063 = load i64, i64* %RBP
  %2064 = sub i64 %2063, 16
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 4
  store i64 %2066, i64* %PC
  %2067 = inttoptr i64 %2064 to i64*
  %2068 = load i64, i64* %2067
  store i64 %2068, i64* %RAX, align 8, !tbaa !2428
  %2069 = load i64, i64* %RBP
  %2070 = sub i64 %2069, 36
  %2071 = load i64, i64* %PC
  %2072 = add i64 %2071, 3
  store i64 %2072, i64* %PC
  %2073 = inttoptr i64 %2070 to i32*
  %2074 = load i32, i32* %2073
  %2075 = zext i32 %2074 to i64
  store i64 %2075, i64* %RCX, align 8, !tbaa !2428
  %2076 = load i64, i64* %RCX
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 3
  store i64 %2078, i64* %PC
  %2079 = trunc i64 %2076 to i32
  %2080 = add i32 1, %2079
  %2081 = zext i32 %2080 to i64
  store i64 %2081, i64* %RCX, align 8, !tbaa !2428
  %2082 = icmp ult i32 %2080, %2079
  %2083 = icmp ult i32 %2080, 1
  %2084 = or i1 %2082, %2083
  %2085 = zext i1 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2085, i8* %2086, align 1, !tbaa !2432
  %2087 = and i32 %2080, 255
  %2088 = call i32 @llvm.ctpop.i32(i32 %2087) #17
  %2089 = trunc i32 %2088 to i8
  %2090 = and i8 %2089, 1
  %2091 = xor i8 %2090, 1
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2091, i8* %2092, align 1, !tbaa !2446
  %2093 = xor i64 1, %2076
  %2094 = trunc i64 %2093 to i32
  %2095 = xor i32 %2094, %2080
  %2096 = lshr i32 %2095, 4
  %2097 = trunc i32 %2096 to i8
  %2098 = and i8 %2097, 1
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2098, i8* %2099, align 1, !tbaa !2447
  %2100 = icmp eq i32 %2080, 0
  %2101 = zext i1 %2100 to i8
  %2102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2101, i8* %2102, align 1, !tbaa !2448
  %2103 = lshr i32 %2080, 31
  %2104 = trunc i32 %2103 to i8
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2104, i8* %2105, align 1, !tbaa !2449
  %2106 = lshr i32 %2079, 31
  %2107 = xor i32 %2103, %2106
  %2108 = add nuw nsw i32 %2107, %2103
  %2109 = icmp eq i32 %2108, 2
  %2110 = zext i1 %2109 to i8
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2110, i8* %2111, align 1, !tbaa !2450
  %2112 = load i32, i32* %ECX
  %2113 = zext i32 %2112 to i64
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 3
  store i64 %2115, i64* %PC
  %2116 = shl i64 %2113, 32
  %2117 = ashr exact i64 %2116, 32
  store i64 %2117, i64* %RDX, align 8, !tbaa !2428
  %2118 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2119 = load i64, i64* %RAX
  %2120 = load i64, i64* %RDX
  %2121 = mul i64 %2120, 8
  %2122 = add i64 %2121, %2119
  %2123 = load i64, i64* %PC
  %2124 = add i64 %2123, 5
  store i64 %2124, i64* %PC
  %2125 = inttoptr i64 %2122 to double*
  %2126 = load double, double* %2125
  %2127 = bitcast i8* %2118 to double*
  store double %2126, double* %2127, align 1, !tbaa !2452
  %2128 = getelementptr inbounds i8, i8* %2118, i64 8
  %2129 = bitcast i8* %2128 to double*
  store double 0.000000e+00, double* %2129, align 1, !tbaa !2452
  %2130 = load i64, i64* %RBP
  %2131 = sub i64 %2130, 16
  %2132 = load i64, i64* %PC
  %2133 = add i64 %2132, 4
  store i64 %2133, i64* %PC
  %2134 = inttoptr i64 %2131 to i64*
  %2135 = load i64, i64* %2134
  store i64 %2135, i64* %RAX, align 8, !tbaa !2428
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 40
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 3
  store i64 %2139, i64* %PC
  %2140 = inttoptr i64 %2137 to i32*
  %2141 = load i32, i32* %2140
  %2142 = zext i32 %2141 to i64
  store i64 %2142, i64* %RCX, align 8, !tbaa !2428
  %2143 = load i64, i64* %RCX
  %2144 = load i64, i64* %PC
  %2145 = add i64 %2144, 3
  store i64 %2145, i64* %PC
  %2146 = trunc i64 %2143 to i32
  %2147 = add i32 1, %2146
  %2148 = zext i32 %2147 to i64
  store i64 %2148, i64* %RCX, align 8, !tbaa !2428
  %2149 = icmp ult i32 %2147, %2146
  %2150 = icmp ult i32 %2147, 1
  %2151 = or i1 %2149, %2150
  %2152 = zext i1 %2151 to i8
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2152, i8* %2153, align 1, !tbaa !2432
  %2154 = and i32 %2147, 255
  %2155 = call i32 @llvm.ctpop.i32(i32 %2154) #17
  %2156 = trunc i32 %2155 to i8
  %2157 = and i8 %2156, 1
  %2158 = xor i8 %2157, 1
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2158, i8* %2159, align 1, !tbaa !2446
  %2160 = xor i64 1, %2143
  %2161 = trunc i64 %2160 to i32
  %2162 = xor i32 %2161, %2147
  %2163 = lshr i32 %2162, 4
  %2164 = trunc i32 %2163 to i8
  %2165 = and i8 %2164, 1
  %2166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2165, i8* %2166, align 1, !tbaa !2447
  %2167 = icmp eq i32 %2147, 0
  %2168 = zext i1 %2167 to i8
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2168, i8* %2169, align 1, !tbaa !2448
  %2170 = lshr i32 %2147, 31
  %2171 = trunc i32 %2170 to i8
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2171, i8* %2172, align 1, !tbaa !2449
  %2173 = lshr i32 %2146, 31
  %2174 = xor i32 %2170, %2173
  %2175 = add nuw nsw i32 %2174, %2170
  %2176 = icmp eq i32 %2175, 2
  %2177 = zext i1 %2176 to i8
  %2178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2177, i8* %2178, align 1, !tbaa !2450
  %2179 = load i32, i32* %ECX
  %2180 = zext i32 %2179 to i64
  %2181 = load i64, i64* %PC
  %2182 = add i64 %2181, 3
  store i64 %2182, i64* %PC
  %2183 = shl i64 %2180, 32
  %2184 = ashr exact i64 %2183, 32
  store i64 %2184, i64* %RDX, align 8, !tbaa !2428
  %2185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2187 = load i64, i64* %RAX
  %2188 = load i64, i64* %RDX
  %2189 = mul i64 %2188, 8
  %2190 = add i64 %2189, %2187
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 5
  store i64 %2192, i64* %PC
  %2193 = bitcast i8* %2186 to double*
  %2194 = load double, double* %2193, align 1
  %2195 = getelementptr inbounds i8, i8* %2186, i64 8
  %2196 = bitcast i8* %2195 to i64*
  %2197 = load i64, i64* %2196, align 1
  %2198 = inttoptr i64 %2190 to double*
  %2199 = load double, double* %2198
  %2200 = fadd double %2194, %2199
  %2201 = bitcast i8* %2185 to double*
  store double %2200, double* %2201, align 1, !tbaa !2452
  %2202 = getelementptr inbounds i8, i8* %2185, i64 8
  %2203 = bitcast i8* %2202 to i64*
  store i64 %2197, i64* %2203, align 1, !tbaa !2452
  %2204 = load i64, i64* %RBP
  %2205 = sub i64 %2204, 96
  %2206 = bitcast %union.vec128_t* %XMM0 to i8*
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 5
  store i64 %2208, i64* %PC
  %2209 = bitcast i8* %2206 to double*
  %2210 = load double, double* %2209, align 1
  %2211 = inttoptr i64 %2205 to double*
  store double %2210, double* %2211
  %2212 = load i64, i64* %RBP
  %2213 = sub i64 %2212, 16
  %2214 = load i64, i64* %PC
  %2215 = add i64 %2214, 4
  store i64 %2215, i64* %PC
  %2216 = inttoptr i64 %2213 to i64*
  %2217 = load i64, i64* %2216
  store i64 %2217, i64* %RAX, align 8, !tbaa !2428
  %2218 = load i64, i64* %RBP
  %2219 = sub i64 %2218, 36
  %2220 = load i64, i64* %PC
  %2221 = add i64 %2220, 4
  store i64 %2221, i64* %PC
  %2222 = inttoptr i64 %2219 to i32*
  %2223 = load i32, i32* %2222
  %2224 = sext i32 %2223 to i64
  store i64 %2224, i64* %RDX, align 8, !tbaa !2428
  %2225 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2226 = load i64, i64* %RAX
  %2227 = load i64, i64* %RDX
  %2228 = mul i64 %2227, 8
  %2229 = add i64 %2228, %2226
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 5
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2229 to double*
  %2233 = load double, double* %2232
  %2234 = bitcast i8* %2225 to double*
  store double %2233, double* %2234, align 1, !tbaa !2452
  %2235 = getelementptr inbounds i8, i8* %2225, i64 8
  %2236 = bitcast i8* %2235 to double*
  store double 0.000000e+00, double* %2236, align 1, !tbaa !2452
  %2237 = load i64, i64* %RBP
  %2238 = sub i64 %2237, 16
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 4
  store i64 %2240, i64* %PC
  %2241 = inttoptr i64 %2238 to i64*
  %2242 = load i64, i64* %2241
  store i64 %2242, i64* %RAX, align 8, !tbaa !2428
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 40
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 4
  store i64 %2246, i64* %PC
  %2247 = inttoptr i64 %2244 to i32*
  %2248 = load i32, i32* %2247
  %2249 = sext i32 %2248 to i64
  store i64 %2249, i64* %RDX, align 8, !tbaa !2428
  %2250 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2252 = load i64, i64* %RAX
  %2253 = load i64, i64* %RDX
  %2254 = mul i64 %2253, 8
  %2255 = add i64 %2254, %2252
  %2256 = load i64, i64* %PC
  %2257 = add i64 %2256, 5
  store i64 %2257, i64* %PC
  %2258 = bitcast i8* %2251 to double*
  %2259 = load double, double* %2258, align 1
  %2260 = getelementptr inbounds i8, i8* %2251, i64 8
  %2261 = bitcast i8* %2260 to i64*
  %2262 = load i64, i64* %2261, align 1
  %2263 = inttoptr i64 %2255 to double*
  %2264 = load double, double* %2263
  %2265 = fsub double %2259, %2264
  %2266 = bitcast i8* %2250 to double*
  store double %2265, double* %2266, align 1, !tbaa !2452
  %2267 = getelementptr inbounds i8, i8* %2250, i64 8
  %2268 = bitcast i8* %2267 to i64*
  store i64 %2262, i64* %2268, align 1, !tbaa !2452
  %2269 = load i64, i64* %RBP
  %2270 = sub i64 %2269, 104
  %2271 = bitcast %union.vec128_t* %XMM0 to i8*
  %2272 = load i64, i64* %PC
  %2273 = add i64 %2272, 5
  store i64 %2273, i64* %PC
  %2274 = bitcast i8* %2271 to double*
  %2275 = load double, double* %2274, align 1
  %2276 = inttoptr i64 %2270 to double*
  store double %2275, double* %2276
  %2277 = load i64, i64* %RBP
  %2278 = sub i64 %2277, 16
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 4
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2278 to i64*
  %2282 = load i64, i64* %2281
  store i64 %2282, i64* %RAX, align 8, !tbaa !2428
  %2283 = load i64, i64* %RBP
  %2284 = sub i64 %2283, 36
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 3
  store i64 %2286, i64* %PC
  %2287 = inttoptr i64 %2284 to i32*
  %2288 = load i32, i32* %2287
  %2289 = zext i32 %2288 to i64
  store i64 %2289, i64* %RCX, align 8, !tbaa !2428
  %2290 = load i64, i64* %RCX
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 3
  store i64 %2292, i64* %PC
  %2293 = trunc i64 %2290 to i32
  %2294 = add i32 1, %2293
  %2295 = zext i32 %2294 to i64
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2296 = icmp ult i32 %2294, %2293
  %2297 = icmp ult i32 %2294, 1
  %2298 = or i1 %2296, %2297
  %2299 = zext i1 %2298 to i8
  %2300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2299, i8* %2300, align 1, !tbaa !2432
  %2301 = and i32 %2294, 255
  %2302 = call i32 @llvm.ctpop.i32(i32 %2301) #17
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = xor i8 %2304, 1
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2305, i8* %2306, align 1, !tbaa !2446
  %2307 = xor i64 1, %2290
  %2308 = trunc i64 %2307 to i32
  %2309 = xor i32 %2308, %2294
  %2310 = lshr i32 %2309, 4
  %2311 = trunc i32 %2310 to i8
  %2312 = and i8 %2311, 1
  %2313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2312, i8* %2313, align 1, !tbaa !2447
  %2314 = icmp eq i32 %2294, 0
  %2315 = zext i1 %2314 to i8
  %2316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2315, i8* %2316, align 1, !tbaa !2448
  %2317 = lshr i32 %2294, 31
  %2318 = trunc i32 %2317 to i8
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2318, i8* %2319, align 1, !tbaa !2449
  %2320 = lshr i32 %2293, 31
  %2321 = xor i32 %2317, %2320
  %2322 = add nuw nsw i32 %2321, %2317
  %2323 = icmp eq i32 %2322, 2
  %2324 = zext i1 %2323 to i8
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2324, i8* %2325, align 1, !tbaa !2450
  %2326 = load i32, i32* %ECX
  %2327 = zext i32 %2326 to i64
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 3
  store i64 %2329, i64* %PC
  %2330 = shl i64 %2327, 32
  %2331 = ashr exact i64 %2330, 32
  store i64 %2331, i64* %RDX, align 8, !tbaa !2428
  %2332 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2333 = load i64, i64* %RAX
  %2334 = load i64, i64* %RDX
  %2335 = mul i64 %2334, 8
  %2336 = add i64 %2335, %2333
  %2337 = load i64, i64* %PC
  %2338 = add i64 %2337, 5
  store i64 %2338, i64* %PC
  %2339 = inttoptr i64 %2336 to double*
  %2340 = load double, double* %2339
  %2341 = bitcast i8* %2332 to double*
  store double %2340, double* %2341, align 1, !tbaa !2452
  %2342 = getelementptr inbounds i8, i8* %2332, i64 8
  %2343 = bitcast i8* %2342 to double*
  store double 0.000000e+00, double* %2343, align 1, !tbaa !2452
  %2344 = load i64, i64* %RBP
  %2345 = sub i64 %2344, 16
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 4
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i64*
  %2349 = load i64, i64* %2348
  store i64 %2349, i64* %RAX, align 8, !tbaa !2428
  %2350 = load i64, i64* %RBP
  %2351 = sub i64 %2350, 40
  %2352 = load i64, i64* %PC
  %2353 = add i64 %2352, 3
  store i64 %2353, i64* %PC
  %2354 = inttoptr i64 %2351 to i32*
  %2355 = load i32, i32* %2354
  %2356 = zext i32 %2355 to i64
  store i64 %2356, i64* %RCX, align 8, !tbaa !2428
  %2357 = load i64, i64* %RCX
  %2358 = load i64, i64* %PC
  %2359 = add i64 %2358, 3
  store i64 %2359, i64* %PC
  %2360 = trunc i64 %2357 to i32
  %2361 = add i32 1, %2360
  %2362 = zext i32 %2361 to i64
  store i64 %2362, i64* %RCX, align 8, !tbaa !2428
  %2363 = icmp ult i32 %2361, %2360
  %2364 = icmp ult i32 %2361, 1
  %2365 = or i1 %2363, %2364
  %2366 = zext i1 %2365 to i8
  %2367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2366, i8* %2367, align 1, !tbaa !2432
  %2368 = and i32 %2361, 255
  %2369 = call i32 @llvm.ctpop.i32(i32 %2368) #17
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  %2372 = xor i8 %2371, 1
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2372, i8* %2373, align 1, !tbaa !2446
  %2374 = xor i64 1, %2357
  %2375 = trunc i64 %2374 to i32
  %2376 = xor i32 %2375, %2361
  %2377 = lshr i32 %2376, 4
  %2378 = trunc i32 %2377 to i8
  %2379 = and i8 %2378, 1
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2379, i8* %2380, align 1, !tbaa !2447
  %2381 = icmp eq i32 %2361, 0
  %2382 = zext i1 %2381 to i8
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2382, i8* %2383, align 1, !tbaa !2448
  %2384 = lshr i32 %2361, 31
  %2385 = trunc i32 %2384 to i8
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2385, i8* %2386, align 1, !tbaa !2449
  %2387 = lshr i32 %2360, 31
  %2388 = xor i32 %2384, %2387
  %2389 = add nuw nsw i32 %2388, %2384
  %2390 = icmp eq i32 %2389, 2
  %2391 = zext i1 %2390 to i8
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2391, i8* %2392, align 1, !tbaa !2450
  %2393 = load i32, i32* %ECX
  %2394 = zext i32 %2393 to i64
  %2395 = load i64, i64* %PC
  %2396 = add i64 %2395, 3
  store i64 %2396, i64* %PC
  %2397 = shl i64 %2394, 32
  %2398 = ashr exact i64 %2397, 32
  store i64 %2398, i64* %RDX, align 8, !tbaa !2428
  %2399 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2400 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2401 = load i64, i64* %RAX
  %2402 = load i64, i64* %RDX
  %2403 = mul i64 %2402, 8
  %2404 = add i64 %2403, %2401
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 5
  store i64 %2406, i64* %PC
  %2407 = bitcast i8* %2400 to double*
  %2408 = load double, double* %2407, align 1
  %2409 = getelementptr inbounds i8, i8* %2400, i64 8
  %2410 = bitcast i8* %2409 to i64*
  %2411 = load i64, i64* %2410, align 1
  %2412 = inttoptr i64 %2404 to double*
  %2413 = load double, double* %2412
  %2414 = fsub double %2408, %2413
  %2415 = bitcast i8* %2399 to double*
  store double %2414, double* %2415, align 1, !tbaa !2452
  %2416 = getelementptr inbounds i8, i8* %2399, i64 8
  %2417 = bitcast i8* %2416 to i64*
  store i64 %2411, i64* %2417, align 1, !tbaa !2452
  %2418 = load i64, i64* %RBP
  %2419 = sub i64 %2418, 112
  %2420 = bitcast %union.vec128_t* %XMM0 to i8*
  %2421 = load i64, i64* %PC
  %2422 = add i64 %2421, 5
  store i64 %2422, i64* %PC
  %2423 = bitcast i8* %2420 to double*
  %2424 = load double, double* %2423, align 1
  %2425 = inttoptr i64 %2419 to double*
  store double %2424, double* %2425
  %2426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2427 = load i64, i64* %RBP
  %2428 = sub i64 %2427, 56
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 5
  store i64 %2430, i64* %PC
  %2431 = inttoptr i64 %2428 to double*
  %2432 = load double, double* %2431
  %2433 = bitcast i8* %2426 to double*
  store double %2432, double* %2433, align 1, !tbaa !2452
  %2434 = getelementptr inbounds i8, i8* %2426, i64 8
  %2435 = bitcast i8* %2434 to double*
  store double 0.000000e+00, double* %2435, align 1, !tbaa !2452
  %2436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2438 = load i64, i64* %RBP
  %2439 = sub i64 %2438, 88
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 5
  store i64 %2441, i64* %PC
  %2442 = bitcast i8* %2437 to double*
  %2443 = load double, double* %2442, align 1
  %2444 = getelementptr inbounds i8, i8* %2437, i64 8
  %2445 = bitcast i8* %2444 to i64*
  %2446 = load i64, i64* %2445, align 1
  %2447 = inttoptr i64 %2439 to double*
  %2448 = load double, double* %2447
  %2449 = fadd double %2443, %2448
  %2450 = bitcast i8* %2436 to double*
  store double %2449, double* %2450, align 1, !tbaa !2452
  %2451 = getelementptr inbounds i8, i8* %2436, i64 8
  %2452 = bitcast i8* %2451 to i64*
  store i64 %2446, i64* %2452, align 1, !tbaa !2452
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 16
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 4
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i64*
  %2458 = load i64, i64* %2457
  store i64 %2458, i64* %RAX, align 8, !tbaa !2428
  %2459 = load i64, i64* %RBP
  %2460 = sub i64 %2459, 28
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 4
  store i64 %2462, i64* %PC
  %2463 = inttoptr i64 %2460 to i32*
  %2464 = load i32, i32* %2463
  %2465 = sext i32 %2464 to i64
  store i64 %2465, i64* %RDX, align 8, !tbaa !2428
  %2466 = load i64, i64* %RAX
  %2467 = load i64, i64* %RDX
  %2468 = mul i64 %2467, 8
  %2469 = add i64 %2468, %2466
  %2470 = bitcast %union.vec128_t* %XMM0 to i8*
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 5
  store i64 %2472, i64* %PC
  %2473 = bitcast i8* %2470 to double*
  %2474 = load double, double* %2473, align 1
  %2475 = inttoptr i64 %2469 to double*
  store double %2474, double* %2475
  %2476 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2477 = load i64, i64* %RBP
  %2478 = sub i64 %2477, 64
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 5
  store i64 %2480, i64* %PC
  %2481 = inttoptr i64 %2478 to double*
  %2482 = load double, double* %2481
  %2483 = bitcast i8* %2476 to double*
  store double %2482, double* %2483, align 1, !tbaa !2452
  %2484 = getelementptr inbounds i8, i8* %2476, i64 8
  %2485 = bitcast i8* %2484 to double*
  store double 0.000000e+00, double* %2485, align 1, !tbaa !2452
  %2486 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2487 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2488 = load i64, i64* %RBP
  %2489 = sub i64 %2488, 96
  %2490 = load i64, i64* %PC
  %2491 = add i64 %2490, 5
  store i64 %2491, i64* %PC
  %2492 = bitcast i8* %2487 to double*
  %2493 = load double, double* %2492, align 1
  %2494 = getelementptr inbounds i8, i8* %2487, i64 8
  %2495 = bitcast i8* %2494 to i64*
  %2496 = load i64, i64* %2495, align 1
  %2497 = inttoptr i64 %2489 to double*
  %2498 = load double, double* %2497
  %2499 = fsub double %2493, %2498
  %2500 = bitcast i8* %2486 to double*
  store double %2499, double* %2500, align 1, !tbaa !2452
  %2501 = getelementptr inbounds i8, i8* %2486, i64 8
  %2502 = bitcast i8* %2501 to i64*
  store i64 %2496, i64* %2502, align 1, !tbaa !2452
  %2503 = load i64, i64* %RBP
  %2504 = sub i64 %2503, 16
  %2505 = load i64, i64* %PC
  %2506 = add i64 %2505, 4
  store i64 %2506, i64* %PC
  %2507 = inttoptr i64 %2504 to i64*
  %2508 = load i64, i64* %2507
  store i64 %2508, i64* %RAX, align 8, !tbaa !2428
  %2509 = load i64, i64* %RBP
  %2510 = sub i64 %2509, 28
  %2511 = load i64, i64* %PC
  %2512 = add i64 %2511, 3
  store i64 %2512, i64* %PC
  %2513 = inttoptr i64 %2510 to i32*
  %2514 = load i32, i32* %2513
  %2515 = zext i32 %2514 to i64
  store i64 %2515, i64* %RCX, align 8, !tbaa !2428
  %2516 = load i64, i64* %RCX
  %2517 = load i64, i64* %PC
  %2518 = add i64 %2517, 3
  store i64 %2518, i64* %PC
  %2519 = trunc i64 %2516 to i32
  %2520 = add i32 1, %2519
  %2521 = zext i32 %2520 to i64
  store i64 %2521, i64* %RCX, align 8, !tbaa !2428
  %2522 = icmp ult i32 %2520, %2519
  %2523 = icmp ult i32 %2520, 1
  %2524 = or i1 %2522, %2523
  %2525 = zext i1 %2524 to i8
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2525, i8* %2526, align 1, !tbaa !2432
  %2527 = and i32 %2520, 255
  %2528 = call i32 @llvm.ctpop.i32(i32 %2527) #17
  %2529 = trunc i32 %2528 to i8
  %2530 = and i8 %2529, 1
  %2531 = xor i8 %2530, 1
  %2532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2531, i8* %2532, align 1, !tbaa !2446
  %2533 = xor i64 1, %2516
  %2534 = trunc i64 %2533 to i32
  %2535 = xor i32 %2534, %2520
  %2536 = lshr i32 %2535, 4
  %2537 = trunc i32 %2536 to i8
  %2538 = and i8 %2537, 1
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2538, i8* %2539, align 1, !tbaa !2447
  %2540 = icmp eq i32 %2520, 0
  %2541 = zext i1 %2540 to i8
  %2542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2541, i8* %2542, align 1, !tbaa !2448
  %2543 = lshr i32 %2520, 31
  %2544 = trunc i32 %2543 to i8
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2544, i8* %2545, align 1, !tbaa !2449
  %2546 = lshr i32 %2519, 31
  %2547 = xor i32 %2543, %2546
  %2548 = add nuw nsw i32 %2547, %2543
  %2549 = icmp eq i32 %2548, 2
  %2550 = zext i1 %2549 to i8
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2550, i8* %2551, align 1, !tbaa !2450
  %2552 = load i32, i32* %ECX
  %2553 = zext i32 %2552 to i64
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 3
  store i64 %2555, i64* %PC
  %2556 = shl i64 %2553, 32
  %2557 = ashr exact i64 %2556, 32
  store i64 %2557, i64* %RDX, align 8, !tbaa !2428
  %2558 = load i64, i64* %RAX
  %2559 = load i64, i64* %RDX
  %2560 = mul i64 %2559, 8
  %2561 = add i64 %2560, %2558
  %2562 = bitcast %union.vec128_t* %XMM0 to i8*
  %2563 = load i64, i64* %PC
  %2564 = add i64 %2563, 5
  store i64 %2564, i64* %PC
  %2565 = bitcast i8* %2562 to double*
  %2566 = load double, double* %2565, align 1
  %2567 = inttoptr i64 %2561 to double*
  store double %2566, double* %2567
  %2568 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2569 = load i64, i64* %RBP
  %2570 = sub i64 %2569, 56
  %2571 = load i64, i64* %PC
  %2572 = add i64 %2571, 5
  store i64 %2572, i64* %PC
  %2573 = inttoptr i64 %2570 to double*
  %2574 = load double, double* %2573
  %2575 = bitcast i8* %2568 to double*
  store double %2574, double* %2575, align 1, !tbaa !2452
  %2576 = getelementptr inbounds i8, i8* %2568, i64 8
  %2577 = bitcast i8* %2576 to double*
  store double 0.000000e+00, double* %2577, align 1, !tbaa !2452
  %2578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2579 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2580 = load i64, i64* %RBP
  %2581 = sub i64 %2580, 88
  %2582 = load i64, i64* %PC
  %2583 = add i64 %2582, 5
  store i64 %2583, i64* %PC
  %2584 = bitcast i8* %2579 to double*
  %2585 = load double, double* %2584, align 1
  %2586 = getelementptr inbounds i8, i8* %2579, i64 8
  %2587 = bitcast i8* %2586 to i64*
  %2588 = load i64, i64* %2587, align 1
  %2589 = inttoptr i64 %2581 to double*
  %2590 = load double, double* %2589
  %2591 = fsub double %2585, %2590
  %2592 = bitcast i8* %2578 to double*
  store double %2591, double* %2592, align 1, !tbaa !2452
  %2593 = getelementptr inbounds i8, i8* %2578, i64 8
  %2594 = bitcast i8* %2593 to i64*
  store i64 %2588, i64* %2594, align 1, !tbaa !2452
  %2595 = load i64, i64* %RBP
  %2596 = sub i64 %2595, 16
  %2597 = load i64, i64* %PC
  %2598 = add i64 %2597, 4
  store i64 %2598, i64* %PC
  %2599 = inttoptr i64 %2596 to i64*
  %2600 = load i64, i64* %2599
  store i64 %2600, i64* %RAX, align 8, !tbaa !2428
  %2601 = load i64, i64* %RBP
  %2602 = sub i64 %2601, 36
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 4
  store i64 %2604, i64* %PC
  %2605 = inttoptr i64 %2602 to i32*
  %2606 = load i32, i32* %2605
  %2607 = sext i32 %2606 to i64
  store i64 %2607, i64* %RDX, align 8, !tbaa !2428
  %2608 = load i64, i64* %RAX
  %2609 = load i64, i64* %RDX
  %2610 = mul i64 %2609, 8
  %2611 = add i64 %2610, %2608
  %2612 = bitcast %union.vec128_t* %XMM0 to i8*
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 5
  store i64 %2614, i64* %PC
  %2615 = bitcast i8* %2612 to double*
  %2616 = load double, double* %2615, align 1
  %2617 = inttoptr i64 %2611 to double*
  store double %2616, double* %2617
  %2618 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 64
  %2621 = load i64, i64* %PC
  %2622 = add i64 %2621, 5
  store i64 %2622, i64* %PC
  %2623 = inttoptr i64 %2620 to double*
  %2624 = load double, double* %2623
  %2625 = bitcast i8* %2618 to double*
  store double %2624, double* %2625, align 1, !tbaa !2452
  %2626 = getelementptr inbounds i8, i8* %2618, i64 8
  %2627 = bitcast i8* %2626 to double*
  store double 0.000000e+00, double* %2627, align 1, !tbaa !2452
  %2628 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2629 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2630 = load i64, i64* %RBP
  %2631 = sub i64 %2630, 96
  %2632 = load i64, i64* %PC
  %2633 = add i64 %2632, 5
  store i64 %2633, i64* %PC
  %2634 = bitcast i8* %2629 to double*
  %2635 = load double, double* %2634, align 1
  %2636 = getelementptr inbounds i8, i8* %2629, i64 8
  %2637 = bitcast i8* %2636 to i64*
  %2638 = load i64, i64* %2637, align 1
  %2639 = inttoptr i64 %2631 to double*
  %2640 = load double, double* %2639
  %2641 = fadd double %2635, %2640
  %2642 = bitcast i8* %2628 to double*
  store double %2641, double* %2642, align 1, !tbaa !2452
  %2643 = getelementptr inbounds i8, i8* %2628, i64 8
  %2644 = bitcast i8* %2643 to i64*
  store i64 %2638, i64* %2644, align 1, !tbaa !2452
  %2645 = load i64, i64* %RBP
  %2646 = sub i64 %2645, 16
  %2647 = load i64, i64* %PC
  %2648 = add i64 %2647, 4
  store i64 %2648, i64* %PC
  %2649 = inttoptr i64 %2646 to i64*
  %2650 = load i64, i64* %2649
  store i64 %2650, i64* %RAX, align 8, !tbaa !2428
  %2651 = load i64, i64* %RBP
  %2652 = sub i64 %2651, 36
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 3
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to i32*
  %2656 = load i32, i32* %2655
  %2657 = zext i32 %2656 to i64
  store i64 %2657, i64* %RCX, align 8, !tbaa !2428
  %2658 = load i64, i64* %RCX
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 3
  store i64 %2660, i64* %PC
  %2661 = trunc i64 %2658 to i32
  %2662 = add i32 1, %2661
  %2663 = zext i32 %2662 to i64
  store i64 %2663, i64* %RCX, align 8, !tbaa !2428
  %2664 = icmp ult i32 %2662, %2661
  %2665 = icmp ult i32 %2662, 1
  %2666 = or i1 %2664, %2665
  %2667 = zext i1 %2666 to i8
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2667, i8* %2668, align 1, !tbaa !2432
  %2669 = and i32 %2662, 255
  %2670 = call i32 @llvm.ctpop.i32(i32 %2669) #17
  %2671 = trunc i32 %2670 to i8
  %2672 = and i8 %2671, 1
  %2673 = xor i8 %2672, 1
  %2674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2673, i8* %2674, align 1, !tbaa !2446
  %2675 = xor i64 1, %2658
  %2676 = trunc i64 %2675 to i32
  %2677 = xor i32 %2676, %2662
  %2678 = lshr i32 %2677, 4
  %2679 = trunc i32 %2678 to i8
  %2680 = and i8 %2679, 1
  %2681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2680, i8* %2681, align 1, !tbaa !2447
  %2682 = icmp eq i32 %2662, 0
  %2683 = zext i1 %2682 to i8
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2683, i8* %2684, align 1, !tbaa !2448
  %2685 = lshr i32 %2662, 31
  %2686 = trunc i32 %2685 to i8
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2686, i8* %2687, align 1, !tbaa !2449
  %2688 = lshr i32 %2661, 31
  %2689 = xor i32 %2685, %2688
  %2690 = add nuw nsw i32 %2689, %2685
  %2691 = icmp eq i32 %2690, 2
  %2692 = zext i1 %2691 to i8
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2692, i8* %2693, align 1, !tbaa !2450
  %2694 = load i32, i32* %ECX
  %2695 = zext i32 %2694 to i64
  %2696 = load i64, i64* %PC
  %2697 = add i64 %2696, 3
  store i64 %2697, i64* %PC
  %2698 = shl i64 %2695, 32
  %2699 = ashr exact i64 %2698, 32
  store i64 %2699, i64* %RDX, align 8, !tbaa !2428
  %2700 = load i64, i64* %RAX
  %2701 = load i64, i64* %RDX
  %2702 = mul i64 %2701, 8
  %2703 = add i64 %2702, %2700
  %2704 = bitcast %union.vec128_t* %XMM0 to i8*
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 5
  store i64 %2706, i64* %PC
  %2707 = bitcast i8* %2704 to double*
  %2708 = load double, double* %2707, align 1
  %2709 = inttoptr i64 %2703 to double*
  store double %2708, double* %2709
  %2710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2711 = load i64, i64* %RBP
  %2712 = sub i64 %2711, 72
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 5
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2712 to double*
  %2716 = load double, double* %2715
  %2717 = bitcast i8* %2710 to double*
  store double %2716, double* %2717, align 1, !tbaa !2452
  %2718 = getelementptr inbounds i8, i8* %2710, i64 8
  %2719 = bitcast i8* %2718 to double*
  store double 0.000000e+00, double* %2719, align 1, !tbaa !2452
  %2720 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2721 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2722 = load i64, i64* %RBP
  %2723 = sub i64 %2722, 112
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 5
  store i64 %2725, i64* %PC
  %2726 = bitcast i8* %2721 to double*
  %2727 = load double, double* %2726, align 1
  %2728 = getelementptr inbounds i8, i8* %2721, i64 8
  %2729 = bitcast i8* %2728 to i64*
  %2730 = load i64, i64* %2729, align 1
  %2731 = inttoptr i64 %2723 to double*
  %2732 = load double, double* %2731
  %2733 = fsub double %2727, %2732
  %2734 = bitcast i8* %2720 to double*
  store double %2733, double* %2734, align 1, !tbaa !2452
  %2735 = getelementptr inbounds i8, i8* %2720, i64 8
  %2736 = bitcast i8* %2735 to i64*
  store i64 %2730, i64* %2736, align 1, !tbaa !2452
  %2737 = load i64, i64* %RBP
  %2738 = sub i64 %2737, 16
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 4
  store i64 %2740, i64* %PC
  %2741 = inttoptr i64 %2738 to i64*
  %2742 = load i64, i64* %2741
  store i64 %2742, i64* %RAX, align 8, !tbaa !2428
  %2743 = load i64, i64* %RBP
  %2744 = sub i64 %2743, 32
  %2745 = load i64, i64* %PC
  %2746 = add i64 %2745, 4
  store i64 %2746, i64* %PC
  %2747 = inttoptr i64 %2744 to i32*
  %2748 = load i32, i32* %2747
  %2749 = sext i32 %2748 to i64
  store i64 %2749, i64* %RDX, align 8, !tbaa !2428
  %2750 = load i64, i64* %RAX
  %2751 = load i64, i64* %RDX
  %2752 = mul i64 %2751, 8
  %2753 = add i64 %2752, %2750
  %2754 = bitcast %union.vec128_t* %XMM0 to i8*
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 5
  store i64 %2756, i64* %PC
  %2757 = bitcast i8* %2754 to double*
  %2758 = load double, double* %2757, align 1
  %2759 = inttoptr i64 %2753 to double*
  store double %2758, double* %2759
  %2760 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2761 = load i64, i64* %RBP
  %2762 = sub i64 %2761, 80
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 5
  store i64 %2764, i64* %PC
  %2765 = inttoptr i64 %2762 to double*
  %2766 = load double, double* %2765
  %2767 = bitcast i8* %2760 to double*
  store double %2766, double* %2767, align 1, !tbaa !2452
  %2768 = getelementptr inbounds i8, i8* %2760, i64 8
  %2769 = bitcast i8* %2768 to double*
  store double 0.000000e+00, double* %2769, align 1, !tbaa !2452
  %2770 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2771 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2772 = load i64, i64* %RBP
  %2773 = sub i64 %2772, 104
  %2774 = load i64, i64* %PC
  %2775 = add i64 %2774, 5
  store i64 %2775, i64* %PC
  %2776 = bitcast i8* %2771 to double*
  %2777 = load double, double* %2776, align 1
  %2778 = getelementptr inbounds i8, i8* %2771, i64 8
  %2779 = bitcast i8* %2778 to i64*
  %2780 = load i64, i64* %2779, align 1
  %2781 = inttoptr i64 %2773 to double*
  %2782 = load double, double* %2781
  %2783 = fsub double %2777, %2782
  %2784 = bitcast i8* %2770 to double*
  store double %2783, double* %2784, align 1, !tbaa !2452
  %2785 = getelementptr inbounds i8, i8* %2770, i64 8
  %2786 = bitcast i8* %2785 to i64*
  store i64 %2780, i64* %2786, align 1, !tbaa !2452
  %2787 = load i64, i64* %RBP
  %2788 = sub i64 %2787, 16
  %2789 = load i64, i64* %PC
  %2790 = add i64 %2789, 4
  store i64 %2790, i64* %PC
  %2791 = inttoptr i64 %2788 to i64*
  %2792 = load i64, i64* %2791
  store i64 %2792, i64* %RAX, align 8, !tbaa !2428
  %2793 = load i64, i64* %RBP
  %2794 = sub i64 %2793, 32
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 3
  store i64 %2796, i64* %PC
  %2797 = inttoptr i64 %2794 to i32*
  %2798 = load i32, i32* %2797
  %2799 = zext i32 %2798 to i64
  store i64 %2799, i64* %RCX, align 8, !tbaa !2428
  %2800 = load i64, i64* %RCX
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 3
  store i64 %2802, i64* %PC
  %2803 = trunc i64 %2800 to i32
  %2804 = add i32 1, %2803
  %2805 = zext i32 %2804 to i64
  store i64 %2805, i64* %RCX, align 8, !tbaa !2428
  %2806 = icmp ult i32 %2804, %2803
  %2807 = icmp ult i32 %2804, 1
  %2808 = or i1 %2806, %2807
  %2809 = zext i1 %2808 to i8
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2809, i8* %2810, align 1, !tbaa !2432
  %2811 = and i32 %2804, 255
  %2812 = call i32 @llvm.ctpop.i32(i32 %2811) #17
  %2813 = trunc i32 %2812 to i8
  %2814 = and i8 %2813, 1
  %2815 = xor i8 %2814, 1
  %2816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2815, i8* %2816, align 1, !tbaa !2446
  %2817 = xor i64 1, %2800
  %2818 = trunc i64 %2817 to i32
  %2819 = xor i32 %2818, %2804
  %2820 = lshr i32 %2819, 4
  %2821 = trunc i32 %2820 to i8
  %2822 = and i8 %2821, 1
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2822, i8* %2823, align 1, !tbaa !2447
  %2824 = icmp eq i32 %2804, 0
  %2825 = zext i1 %2824 to i8
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2825, i8* %2826, align 1, !tbaa !2448
  %2827 = lshr i32 %2804, 31
  %2828 = trunc i32 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2828, i8* %2829, align 1, !tbaa !2449
  %2830 = lshr i32 %2803, 31
  %2831 = xor i32 %2827, %2830
  %2832 = add nuw nsw i32 %2831, %2827
  %2833 = icmp eq i32 %2832, 2
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2834, i8* %2835, align 1, !tbaa !2450
  %2836 = load i32, i32* %ECX
  %2837 = zext i32 %2836 to i64
  %2838 = load i64, i64* %PC
  %2839 = add i64 %2838, 3
  store i64 %2839, i64* %PC
  %2840 = shl i64 %2837, 32
  %2841 = ashr exact i64 %2840, 32
  store i64 %2841, i64* %RDX, align 8, !tbaa !2428
  %2842 = load i64, i64* %RAX
  %2843 = load i64, i64* %RDX
  %2844 = mul i64 %2843, 8
  %2845 = add i64 %2844, %2842
  %2846 = bitcast %union.vec128_t* %XMM0 to i8*
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 5
  store i64 %2848, i64* %PC
  %2849 = bitcast i8* %2846 to double*
  %2850 = load double, double* %2849, align 1
  %2851 = inttoptr i64 %2845 to double*
  store double %2850, double* %2851
  %2852 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2853 = load i64, i64* %RBP
  %2854 = sub i64 %2853, 72
  %2855 = load i64, i64* %PC
  %2856 = add i64 %2855, 5
  store i64 %2856, i64* %PC
  %2857 = inttoptr i64 %2854 to double*
  %2858 = load double, double* %2857
  %2859 = bitcast i8* %2852 to double*
  store double %2858, double* %2859, align 1, !tbaa !2452
  %2860 = getelementptr inbounds i8, i8* %2852, i64 8
  %2861 = bitcast i8* %2860 to double*
  store double 0.000000e+00, double* %2861, align 1, !tbaa !2452
  %2862 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2863 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2864 = load i64, i64* %RBP
  %2865 = sub i64 %2864, 112
  %2866 = load i64, i64* %PC
  %2867 = add i64 %2866, 5
  store i64 %2867, i64* %PC
  %2868 = bitcast i8* %2863 to double*
  %2869 = load double, double* %2868, align 1
  %2870 = getelementptr inbounds i8, i8* %2863, i64 8
  %2871 = bitcast i8* %2870 to i64*
  %2872 = load i64, i64* %2871, align 1
  %2873 = inttoptr i64 %2865 to double*
  %2874 = load double, double* %2873
  %2875 = fadd double %2869, %2874
  %2876 = bitcast i8* %2862 to double*
  store double %2875, double* %2876, align 1, !tbaa !2452
  %2877 = getelementptr inbounds i8, i8* %2862, i64 8
  %2878 = bitcast i8* %2877 to i64*
  store i64 %2872, i64* %2878, align 1, !tbaa !2452
  %2879 = load i64, i64* %RBP
  %2880 = sub i64 %2879, 16
  %2881 = load i64, i64* %PC
  %2882 = add i64 %2881, 4
  store i64 %2882, i64* %PC
  %2883 = inttoptr i64 %2880 to i64*
  %2884 = load i64, i64* %2883
  store i64 %2884, i64* %RAX, align 8, !tbaa !2428
  %2885 = load i64, i64* %RBP
  %2886 = sub i64 %2885, 40
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 4
  store i64 %2888, i64* %PC
  %2889 = inttoptr i64 %2886 to i32*
  %2890 = load i32, i32* %2889
  %2891 = sext i32 %2890 to i64
  store i64 %2891, i64* %RDX, align 8, !tbaa !2428
  %2892 = load i64, i64* %RAX
  %2893 = load i64, i64* %RDX
  %2894 = mul i64 %2893, 8
  %2895 = add i64 %2894, %2892
  %2896 = bitcast %union.vec128_t* %XMM0 to i8*
  %2897 = load i64, i64* %PC
  %2898 = add i64 %2897, 5
  store i64 %2898, i64* %PC
  %2899 = bitcast i8* %2896 to double*
  %2900 = load double, double* %2899, align 1
  %2901 = inttoptr i64 %2895 to double*
  store double %2900, double* %2901
  %2902 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2903 = load i64, i64* %RBP
  %2904 = sub i64 %2903, 80
  %2905 = load i64, i64* %PC
  %2906 = add i64 %2905, 5
  store i64 %2906, i64* %PC
  %2907 = inttoptr i64 %2904 to double*
  %2908 = load double, double* %2907
  %2909 = bitcast i8* %2902 to double*
  store double %2908, double* %2909, align 1, !tbaa !2452
  %2910 = getelementptr inbounds i8, i8* %2902, i64 8
  %2911 = bitcast i8* %2910 to double*
  store double 0.000000e+00, double* %2911, align 1, !tbaa !2452
  %2912 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2913 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2914 = load i64, i64* %RBP
  %2915 = sub i64 %2914, 104
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 5
  store i64 %2917, i64* %PC
  %2918 = bitcast i8* %2913 to double*
  %2919 = load double, double* %2918, align 1
  %2920 = getelementptr inbounds i8, i8* %2913, i64 8
  %2921 = bitcast i8* %2920 to i64*
  %2922 = load i64, i64* %2921, align 1
  %2923 = inttoptr i64 %2915 to double*
  %2924 = load double, double* %2923
  %2925 = fadd double %2919, %2924
  %2926 = bitcast i8* %2912 to double*
  store double %2925, double* %2926, align 1, !tbaa !2452
  %2927 = getelementptr inbounds i8, i8* %2912, i64 8
  %2928 = bitcast i8* %2927 to i64*
  store i64 %2922, i64* %2928, align 1, !tbaa !2452
  %2929 = load i64, i64* %RBP
  %2930 = sub i64 %2929, 16
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 4
  store i64 %2932, i64* %PC
  %2933 = inttoptr i64 %2930 to i64*
  %2934 = load i64, i64* %2933
  store i64 %2934, i64* %RAX, align 8, !tbaa !2428
  %2935 = load i64, i64* %RBP
  %2936 = sub i64 %2935, 40
  %2937 = load i64, i64* %PC
  %2938 = add i64 %2937, 3
  store i64 %2938, i64* %PC
  %2939 = inttoptr i64 %2936 to i32*
  %2940 = load i32, i32* %2939
  %2941 = zext i32 %2940 to i64
  store i64 %2941, i64* %RCX, align 8, !tbaa !2428
  %2942 = load i64, i64* %RCX
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 3
  store i64 %2944, i64* %PC
  %2945 = trunc i64 %2942 to i32
  %2946 = add i32 1, %2945
  %2947 = zext i32 %2946 to i64
  store i64 %2947, i64* %RCX, align 8, !tbaa !2428
  %2948 = icmp ult i32 %2946, %2945
  %2949 = icmp ult i32 %2946, 1
  %2950 = or i1 %2948, %2949
  %2951 = zext i1 %2950 to i8
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2951, i8* %2952, align 1, !tbaa !2432
  %2953 = and i32 %2946, 255
  %2954 = call i32 @llvm.ctpop.i32(i32 %2953) #17
  %2955 = trunc i32 %2954 to i8
  %2956 = and i8 %2955, 1
  %2957 = xor i8 %2956, 1
  %2958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2957, i8* %2958, align 1, !tbaa !2446
  %2959 = xor i64 1, %2942
  %2960 = trunc i64 %2959 to i32
  %2961 = xor i32 %2960, %2946
  %2962 = lshr i32 %2961, 4
  %2963 = trunc i32 %2962 to i8
  %2964 = and i8 %2963, 1
  %2965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2964, i8* %2965, align 1, !tbaa !2447
  %2966 = icmp eq i32 %2946, 0
  %2967 = zext i1 %2966 to i8
  %2968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2967, i8* %2968, align 1, !tbaa !2448
  %2969 = lshr i32 %2946, 31
  %2970 = trunc i32 %2969 to i8
  %2971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2970, i8* %2971, align 1, !tbaa !2449
  %2972 = lshr i32 %2945, 31
  %2973 = xor i32 %2969, %2972
  %2974 = add nuw nsw i32 %2973, %2969
  %2975 = icmp eq i32 %2974, 2
  %2976 = zext i1 %2975 to i8
  %2977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2976, i8* %2977, align 1, !tbaa !2450
  %2978 = load i32, i32* %ECX
  %2979 = zext i32 %2978 to i64
  %2980 = load i64, i64* %PC
  %2981 = add i64 %2980, 3
  store i64 %2981, i64* %PC
  %2982 = shl i64 %2979, 32
  %2983 = ashr exact i64 %2982, 32
  store i64 %2983, i64* %RDX, align 8, !tbaa !2428
  %2984 = load i64, i64* %RAX
  %2985 = load i64, i64* %RDX
  %2986 = mul i64 %2985, 8
  %2987 = add i64 %2986, %2984
  %2988 = bitcast %union.vec128_t* %XMM0 to i8*
  %2989 = load i64, i64* %PC
  %2990 = add i64 %2989, 5
  store i64 %2990, i64* %PC
  %2991 = bitcast i8* %2988 to double*
  %2992 = load double, double* %2991, align 1
  %2993 = inttoptr i64 %2987 to double*
  store double %2992, double* %2993
  %2994 = load i64, i64* %RBP
  %2995 = sub i64 %2994, 28
  %2996 = load i64, i64* %PC
  %2997 = add i64 %2996, 3
  store i64 %2997, i64* %PC
  %2998 = inttoptr i64 %2995 to i32*
  %2999 = load i32, i32* %2998
  %3000 = zext i32 %2999 to i64
  store i64 %3000, i64* %RAX, align 8, !tbaa !2428
  %3001 = load i64, i64* %RAX
  %3002 = load i64, i64* %PC
  %3003 = add i64 %3002, 3
  store i64 %3003, i64* %PC
  %3004 = trunc i64 %3001 to i32
  %3005 = add i32 2, %3004
  %3006 = zext i32 %3005 to i64
  store i64 %3006, i64* %RAX, align 8, !tbaa !2428
  %3007 = icmp ult i32 %3005, %3004
  %3008 = icmp ult i32 %3005, 2
  %3009 = or i1 %3007, %3008
  %3010 = zext i1 %3009 to i8
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3010, i8* %3011, align 1, !tbaa !2432
  %3012 = and i32 %3005, 255
  %3013 = call i32 @llvm.ctpop.i32(i32 %3012) #17
  %3014 = trunc i32 %3013 to i8
  %3015 = and i8 %3014, 1
  %3016 = xor i8 %3015, 1
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3016, i8* %3017, align 1, !tbaa !2446
  %3018 = xor i64 2, %3001
  %3019 = trunc i64 %3018 to i32
  %3020 = xor i32 %3019, %3005
  %3021 = lshr i32 %3020, 4
  %3022 = trunc i32 %3021 to i8
  %3023 = and i8 %3022, 1
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3023, i8* %3024, align 1, !tbaa !2447
  %3025 = icmp eq i32 %3005, 0
  %3026 = zext i1 %3025 to i8
  %3027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3026, i8* %3027, align 1, !tbaa !2448
  %3028 = lshr i32 %3005, 31
  %3029 = trunc i32 %3028 to i8
  %3030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3029, i8* %3030, align 1, !tbaa !2449
  %3031 = lshr i32 %3004, 31
  %3032 = xor i32 %3028, %3031
  %3033 = add nuw nsw i32 %3032, %3028
  %3034 = icmp eq i32 %3033, 2
  %3035 = zext i1 %3034 to i8
  %3036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3035, i8* %3036, align 1, !tbaa !2450
  %3037 = load i64, i64* %RBP
  %3038 = sub i64 %3037, 28
  %3039 = load i32, i32* %EAX
  %3040 = zext i32 %3039 to i64
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 3
  store i64 %3042, i64* %PC
  %3043 = inttoptr i64 %3038 to i32*
  store i32 %3039, i32* %3043
  %3044 = load i64, i64* %PC
  %3045 = sub i64 %3044, 576
  %3046 = load i64, i64* %PC
  %3047 = add i64 %3046, 5
  store i64 %3047, i64* %PC
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3045, i64* %3048, align 8, !tbaa !2428
  br label %block_402536

block_402520:                                     ; preds = %block_40251b, %block_4024b0
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_4024b0 ], [ %MEMORY.2, %block_40251b ]
  %3049 = load i64, i64* %RBP
  %3050 = sub i64 %3049, 44
  %3051 = load i64, i64* %PC
  %3052 = add i64 %3051, 3
  store i64 %3052, i64* %PC
  %3053 = inttoptr i64 %3050 to i32*
  %3054 = load i32, i32* %3053
  %3055 = zext i32 %3054 to i64
  store i64 %3055, i64* %RAX, align 8, !tbaa !2428
  %3056 = load i64, i64* %RAX
  %3057 = load i64, i64* %PC
  %3058 = add i64 %3057, 3
  store i64 %3058, i64* %PC
  %3059 = and i64 %3056, 4294967295
  %3060 = shl i64 %3059, 1
  %3061 = trunc i64 %3060 to i32
  %3062 = icmp slt i32 %3061, 0
  %3063 = shl i32 %3061, 1
  %3064 = zext i32 %3063 to i64
  store i64 %3064, i64* %RAX, align 8, !tbaa !2428
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3066 = zext i1 %3062 to i8
  store i8 %3066, i8* %3065, align 1, !tbaa !2451
  %3067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3068 = and i32 %3063, 254
  %3069 = call i32 @llvm.ctpop.i32(i32 %3068) #17
  %3070 = trunc i32 %3069 to i8
  %3071 = and i8 %3070, 1
  %3072 = xor i8 %3071, 1
  store i8 %3072, i8* %3067, align 1, !tbaa !2451
  %3073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3073, align 1, !tbaa !2451
  %3074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3075 = icmp eq i32 %3063, 0
  %3076 = zext i1 %3075 to i8
  store i8 %3076, i8* %3074, align 1, !tbaa !2451
  %3077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3078 = lshr i32 %3063, 31
  %3079 = trunc i32 %3078 to i8
  store i8 %3079, i8* %3077, align 1, !tbaa !2451
  %3080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3080, align 1, !tbaa !2451
  %3081 = load i32, i32* %EAX
  %3082 = zext i32 %3081 to i64
  %3083 = load i64, i64* %RBP
  %3084 = sub i64 %3083, 4
  %3085 = load i64, i64* %PC
  %3086 = add i64 %3085, 3
  store i64 %3086, i64* %PC
  %3087 = inttoptr i64 %3084 to i32*
  %3088 = load i32, i32* %3087
  %3089 = sub i32 %3081, %3088
  %3090 = icmp ult i32 %3081, %3088
  %3091 = zext i1 %3090 to i8
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3091, i8* %3092, align 1, !tbaa !2432
  %3093 = and i32 %3089, 255
  %3094 = call i32 @llvm.ctpop.i32(i32 %3093) #17
  %3095 = trunc i32 %3094 to i8
  %3096 = and i8 %3095, 1
  %3097 = xor i8 %3096, 1
  %3098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3097, i8* %3098, align 1, !tbaa !2446
  %3099 = xor i32 %3088, %3081
  %3100 = xor i32 %3099, %3089
  %3101 = lshr i32 %3100, 4
  %3102 = trunc i32 %3101 to i8
  %3103 = and i8 %3102, 1
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3103, i8* %3104, align 1, !tbaa !2447
  %3105 = icmp eq i32 %3089, 0
  %3106 = zext i1 %3105 to i8
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3106, i8* %3107, align 1, !tbaa !2448
  %3108 = lshr i32 %3089, 31
  %3109 = trunc i32 %3108 to i8
  %3110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3109, i8* %3110, align 1, !tbaa !2449
  %3111 = lshr i32 %3081, 31
  %3112 = lshr i32 %3088, 31
  %3113 = xor i32 %3112, %3111
  %3114 = xor i32 %3108, %3111
  %3115 = add nuw nsw i32 %3114, %3113
  %3116 = icmp eq i32 %3115, 2
  %3117 = zext i1 %3116 to i8
  %3118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3117, i8* %3118, align 1, !tbaa !2450
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 599
  %3121 = load i64, i64* %PC
  %3122 = add i64 %3121, 6
  %3123 = load i64, i64* %PC
  %3124 = add i64 %3123, 6
  store i64 %3124, i64* %PC
  %3125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3126 = load i8, i8* %3125, align 1, !tbaa !2448
  %3127 = icmp eq i8 %3126, 0
  %3128 = zext i1 %3127 to i8
  store i8 %3128, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3130 = select i1 %3127, i64 %3120, i64 %3122
  store i64 %3130, i64* %3129, align 8, !tbaa !2428
  %3131 = load i8, i8* %BRANCH_TAKEN
  %3132 = icmp eq i8 %3131, 1
  %3133 = load i64, i64* %RBP
  %3134 = sub i64 %3133, 28
  %3135 = load i64, i64* %PC
  %3136 = add i64 %3135, 7
  store i64 %3136, i64* %PC
  %3137 = inttoptr i64 %3134 to i32*
  store i32 0, i32* %3137
  br i1 %3132, label %block_402787, label %block_402536
}

; Function Attrs: noinline
define %struct.Memory* @sub_400810___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400810:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #17
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400830, label %block_400819

block_400830:                                     ; preds = %block_400810
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400819:                                     ; preds = %block_400810
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4007a0_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_404094__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404094:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #17
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #17
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4011f0_bitrv2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4011f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i32, i32* %EDI
  %56 = zext i32 %55 to i64
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 16
  %62 = load i64, i64* %RSI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 24
  %68 = load i64, i64* %RDX
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 16
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDX, align 8, !tbaa !2428
  %78 = load i64, i64* %RDX
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 6
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i32*
  store i32 0, i32* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i32*
  %87 = load i32, i32* %86
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %RDI, align 8, !tbaa !2428
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 44
  %91 = load i32, i32* %EDI
  %92 = zext i32 %91 to i64
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 3
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %90 to i32*
  store i32 %91, i32* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 48
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 7
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %97 to i32*
  store i32 1, i32* %100
  br label %block_401216

block_401862:                                     ; preds = %block_40168f, %block_40185d
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_40185d ], [ %MEMORY.5, %block_40168f ]
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 1
  store i64 %102, i64* %PC
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %104 = load i64, i64* %103, align 8, !tbaa !2428
  %105 = add i64 %104, 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %RBP, align 8, !tbaa !2428
  store i64 %105, i64* %103, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 1
  store i64 %109, i64* %PC
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %112 = load i64, i64* %111, align 8, !tbaa !2428
  %113 = inttoptr i64 %112 to i64*
  %114 = load i64, i64* %113
  store i64 %114, i64* %110, align 8, !tbaa !2428
  %115 = add i64 %112, 8
  store i64 %115, i64* %111, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40185d:                                     ; preds = %block_40169b
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 5
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  store i64 %119, i64* %PC
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %117, i64* %120, align 8, !tbaa !2428
  br label %block_401862

block_40184a:                                     ; preds = %block_4016ae
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 5
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 5
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 36
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  %131 = load i32, i32* %130
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = trunc i64 %133 to i32
  %137 = add i32 1, %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = icmp ult i32 %137, %136
  %140 = icmp ult i32 %137, 1
  %141 = or i1 %139, %140
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %142, i8* %143, align 1, !tbaa !2432
  %144 = and i32 %137, 255
  %145 = call i32 @llvm.ctpop.i32(i32 %144) #17
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %148, i8* %149, align 1, !tbaa !2446
  %150 = xor i64 1, %133
  %151 = trunc i64 %150 to i32
  %152 = xor i32 %151, %137
  %153 = lshr i32 %152, 4
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %155, i8* %156, align 1, !tbaa !2447
  %157 = icmp eq i32 %137, 0
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %158, i8* %159, align 1, !tbaa !2448
  %160 = lshr i32 %137, 31
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %161, i8* %162, align 1, !tbaa !2449
  %163 = lshr i32 %136, 31
  %164 = xor i32 %160, %163
  %165 = add nuw nsw i32 %164, %160
  %166 = icmp eq i32 %165, 2
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %167, i8* %168, align 1, !tbaa !2450
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 36
  %171 = load i32, i32* %EAX
  %172 = zext i32 %171 to i64
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 3
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %170 to i32*
  store i32 %171, i32* %175
  %176 = load i64, i64* %PC
  %177 = sub i64 %176, 445
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %177, i64* %180, align 8, !tbaa !2428
  br label %block_40169b

block_4015bd:                                     ; preds = %block_4012ad
  %181 = sub i64 %3348, 36
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i32*
  %185 = load i32, i32* %184
  %186 = zext i32 %185 to i64
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RAX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = trunc i64 %187 to i32
  %191 = shl i32 %190, 1
  %192 = icmp slt i32 %190, 0
  %193 = icmp slt i32 %191, 0
  %194 = xor i1 %192, %193
  %195 = zext i32 %191 to i64
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %197 = zext i1 %192 to i8
  store i8 %197, i8* %196, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %199 = and i32 %191, 254
  %200 = call i32 @llvm.ctpop.i32(i32 %199) #17
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  store i8 %203, i8* %198, align 1, !tbaa !2451
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %204, align 1, !tbaa !2451
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %206 = icmp eq i32 %191, 0
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %205, align 1, !tbaa !2451
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %209 = lshr i32 %191, 31
  %210 = trunc i32 %209 to i8
  store i8 %210, i8* %208, align 1, !tbaa !2451
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %212 = zext i1 %194 to i8
  store i8 %212, i8* %211, align 1, !tbaa !2451
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 52
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC
  %218 = trunc i64 %213 to i32
  %219 = inttoptr i64 %215 to i32*
  %220 = load i32, i32* %219
  %221 = add i32 %220, %218
  %222 = zext i32 %221 to i64
  store i64 %222, i64* %RAX, align 8, !tbaa !2428
  %223 = icmp ult i32 %221, %218
  %224 = icmp ult i32 %221, %220
  %225 = or i1 %223, %224
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %226, i8* %227, align 1, !tbaa !2432
  %228 = and i32 %221, 255
  %229 = call i32 @llvm.ctpop.i32(i32 %228) #17
  %230 = trunc i32 %229 to i8
  %231 = and i8 %230, 1
  %232 = xor i8 %231, 1
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %232, i8* %233, align 1, !tbaa !2446
  %234 = xor i32 %220, %218
  %235 = xor i32 %234, %221
  %236 = lshr i32 %235, 4
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %238, i8* %239, align 1, !tbaa !2447
  %240 = icmp eq i32 %221, 0
  %241 = zext i1 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %241, i8* %242, align 1, !tbaa !2448
  %243 = lshr i32 %221, 31
  %244 = trunc i32 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %244, i8* %245, align 1, !tbaa !2449
  %246 = lshr i32 %218, 31
  %247 = lshr i32 %220, 31
  %248 = xor i32 %243, %246
  %249 = xor i32 %243, %247
  %250 = add nuw nsw i32 %248, %249
  %251 = icmp eq i32 %250, 2
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %252, i8* %253, align 1, !tbaa !2450
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 16
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i64*
  %259 = load i64, i64* %258
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 36
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i32*
  %265 = load i32, i32* %264
  %266 = sext i32 %265 to i64
  store i64 %266, i64* %RDX, align 8, !tbaa !2428
  %267 = load i64, i64* %RAX
  %268 = load i64, i64* %RCX
  %269 = load i64, i64* %RDX
  %270 = mul i64 %269, 4
  %271 = add i64 %270, %268
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 3
  store i64 %273, i64* %PC
  %274 = trunc i64 %267 to i32
  %275 = inttoptr i64 %271 to i32*
  %276 = load i32, i32* %275
  %277 = add i32 %276, %274
  %278 = zext i32 %277 to i64
  store i64 %278, i64* %RAX, align 8, !tbaa !2428
  %279 = icmp ult i32 %277, %274
  %280 = icmp ult i32 %277, %276
  %281 = or i1 %279, %280
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %282, i8* %283, align 1, !tbaa !2432
  %284 = and i32 %277, 255
  %285 = call i32 @llvm.ctpop.i32(i32 %284) #17
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = xor i8 %287, 1
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %288, i8* %289, align 1, !tbaa !2446
  %290 = xor i32 %276, %274
  %291 = xor i32 %290, %277
  %292 = lshr i32 %291, 4
  %293 = trunc i32 %292 to i8
  %294 = and i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %294, i8* %295, align 1, !tbaa !2447
  %296 = icmp eq i32 %277, 0
  %297 = zext i1 %296 to i8
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %297, i8* %298, align 1, !tbaa !2448
  %299 = lshr i32 %277, 31
  %300 = trunc i32 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %300, i8* %301, align 1, !tbaa !2449
  %302 = lshr i32 %274, 31
  %303 = lshr i32 %276, 31
  %304 = xor i32 %299, %302
  %305 = xor i32 %299, %303
  %306 = add nuw nsw i32 %304, %305
  %307 = icmp eq i32 %306, 2
  %308 = zext i1 %307 to i8
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %308, i8* %309, align 1, !tbaa !2450
  %310 = load i64, i64* %RBP
  %311 = sub i64 %310, 32
  %312 = load i32, i32* %EAX
  %313 = zext i32 %312 to i64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 3
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %311 to i32*
  store i32 %312, i32* %316
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 32
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 52
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = trunc i64 %324 to i32
  %330 = inttoptr i64 %326 to i32*
  %331 = load i32, i32* %330
  %332 = add i32 %331, %329
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ult i32 %332, %329
  %335 = icmp ult i32 %332, %331
  %336 = or i1 %334, %335
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %337, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %332, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #17
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = xor i32 %331, %329
  %346 = xor i32 %345, %332
  %347 = lshr i32 %346, 4
  %348 = trunc i32 %347 to i8
  %349 = and i8 %348, 1
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %349, i8* %350, align 1, !tbaa !2447
  %351 = icmp eq i32 %332, 0
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %352, i8* %353, align 1, !tbaa !2448
  %354 = lshr i32 %332, 31
  %355 = trunc i32 %354 to i8
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %355, i8* %356, align 1, !tbaa !2449
  %357 = lshr i32 %329, 31
  %358 = lshr i32 %331, 31
  %359 = xor i32 %354, %357
  %360 = xor i32 %354, %358
  %361 = add nuw nsw i32 %359, %360
  %362 = icmp eq i32 %361, 2
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %363, i8* %364, align 1, !tbaa !2450
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 40
  %367 = load i32, i32* %EAX
  %368 = zext i32 %367 to i64
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 3
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %366 to i32*
  store i32 %367, i32* %371
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 24
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %373 to i64*
  %377 = load i64, i64* %376
  store i64 %377, i64* %RCX, align 8, !tbaa !2428
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 32
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  store i64 %384, i64* %RDX, align 8, !tbaa !2428
  %385 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %386 = load i64, i64* %RCX
  %387 = load i64, i64* %RDX
  %388 = mul i64 %387, 8
  %389 = add i64 %388, %386
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 5
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %389 to double*
  %393 = load double, double* %392
  %394 = bitcast i8* %385 to double*
  store double %393, double* %394, align 1, !tbaa !2452
  %395 = getelementptr inbounds i8, i8* %385, i64 8
  %396 = bitcast i8* %395 to double*
  store double 0.000000e+00, double* %396, align 1, !tbaa !2452
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 64
  %399 = bitcast %union.vec128_t* %XMM0 to i8*
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 5
  store i64 %401, i64* %PC
  %402 = bitcast i8* %399 to double*
  %403 = load double, double* %402, align 1
  %404 = inttoptr i64 %398 to double*
  store double %403, double* %404
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 24
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i64*
  %410 = load i64, i64* %409
  store i64 %410, i64* %RCX, align 8, !tbaa !2428
  %411 = load i64, i64* %RBP
  %412 = sub i64 %411, 32
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 3
  store i64 %414, i64* %PC
  %415 = inttoptr i64 %412 to i32*
  %416 = load i32, i32* %415
  %417 = zext i32 %416 to i64
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = load i64, i64* %RAX
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 3
  store i64 %420, i64* %PC
  %421 = trunc i64 %418 to i32
  %422 = add i32 1, %421
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = icmp ult i32 %422, %421
  %425 = icmp ult i32 %422, 1
  %426 = or i1 %424, %425
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %427, i8* %428, align 1, !tbaa !2432
  %429 = and i32 %422, 255
  %430 = call i32 @llvm.ctpop.i32(i32 %429) #17
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = xor i8 %432, 1
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %433, i8* %434, align 1, !tbaa !2446
  %435 = xor i64 1, %418
  %436 = trunc i64 %435 to i32
  %437 = xor i32 %436, %422
  %438 = lshr i32 %437, 4
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %440, i8* %441, align 1, !tbaa !2447
  %442 = icmp eq i32 %422, 0
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %443, i8* %444, align 1, !tbaa !2448
  %445 = lshr i32 %422, 31
  %446 = trunc i32 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %446, i8* %447, align 1, !tbaa !2449
  %448 = lshr i32 %421, 31
  %449 = xor i32 %445, %448
  %450 = add nuw nsw i32 %449, %445
  %451 = icmp eq i32 %450, 2
  %452 = zext i1 %451 to i8
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %452, i8* %453, align 1, !tbaa !2450
  %454 = load i32, i32* %EAX
  %455 = zext i32 %454 to i64
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 3
  store i64 %457, i64* %PC
  %458 = shl i64 %455, 32
  %459 = ashr exact i64 %458, 32
  store i64 %459, i64* %RDX, align 8, !tbaa !2428
  %460 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %461 = load i64, i64* %RCX
  %462 = load i64, i64* %RDX
  %463 = mul i64 %462, 8
  %464 = add i64 %463, %461
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 5
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to double*
  %468 = load double, double* %467
  %469 = bitcast i8* %460 to double*
  store double %468, double* %469, align 1, !tbaa !2452
  %470 = getelementptr inbounds i8, i8* %460, i64 8
  %471 = bitcast i8* %470 to double*
  store double 0.000000e+00, double* %471, align 1, !tbaa !2452
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 72
  %474 = bitcast %union.vec128_t* %XMM0 to i8*
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = bitcast i8* %474 to double*
  %478 = load double, double* %477, align 1
  %479 = inttoptr i64 %473 to double*
  store double %478, double* %479
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 24
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 4
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i64*
  %485 = load i64, i64* %484
  store i64 %485, i64* %RCX, align 8, !tbaa !2428
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 40
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 4
  store i64 %489, i64* %PC
  %490 = inttoptr i64 %487 to i32*
  %491 = load i32, i32* %490
  %492 = sext i32 %491 to i64
  store i64 %492, i64* %RDX, align 8, !tbaa !2428
  %493 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %494 = load i64, i64* %RCX
  %495 = load i64, i64* %RDX
  %496 = mul i64 %495, 8
  %497 = add i64 %496, %494
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 5
  store i64 %499, i64* %PC
  %500 = inttoptr i64 %497 to double*
  %501 = load double, double* %500
  %502 = bitcast i8* %493 to double*
  store double %501, double* %502, align 1, !tbaa !2452
  %503 = getelementptr inbounds i8, i8* %493, i64 8
  %504 = bitcast i8* %503 to double*
  store double 0.000000e+00, double* %504, align 1, !tbaa !2452
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 80
  %507 = bitcast %union.vec128_t* %XMM0 to i8*
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  store i64 %509, i64* %PC
  %510 = bitcast i8* %507 to double*
  %511 = load double, double* %510, align 1
  %512 = inttoptr i64 %506 to double*
  store double %511, double* %512
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 24
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = load i64, i64* %RBP
  %520 = sub i64 %519, 40
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 3
  store i64 %522, i64* %PC
  %523 = inttoptr i64 %520 to i32*
  %524 = load i32, i32* %523
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 3
  store i64 %528, i64* %PC
  %529 = trunc i64 %526 to i32
  %530 = add i32 1, %529
  %531 = zext i32 %530 to i64
  store i64 %531, i64* %RAX, align 8, !tbaa !2428
  %532 = icmp ult i32 %530, %529
  %533 = icmp ult i32 %530, 1
  %534 = or i1 %532, %533
  %535 = zext i1 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %535, i8* %536, align 1, !tbaa !2432
  %537 = and i32 %530, 255
  %538 = call i32 @llvm.ctpop.i32(i32 %537) #17
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %541, i8* %542, align 1, !tbaa !2446
  %543 = xor i64 1, %526
  %544 = trunc i64 %543 to i32
  %545 = xor i32 %544, %530
  %546 = lshr i32 %545, 4
  %547 = trunc i32 %546 to i8
  %548 = and i8 %547, 1
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %548, i8* %549, align 1, !tbaa !2447
  %550 = icmp eq i32 %530, 0
  %551 = zext i1 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %551, i8* %552, align 1, !tbaa !2448
  %553 = lshr i32 %530, 31
  %554 = trunc i32 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %554, i8* %555, align 1, !tbaa !2449
  %556 = lshr i32 %529, 31
  %557 = xor i32 %553, %556
  %558 = add nuw nsw i32 %557, %553
  %559 = icmp eq i32 %558, 2
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %560, i8* %561, align 1, !tbaa !2450
  %562 = load i32, i32* %EAX
  %563 = zext i32 %562 to i64
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 3
  store i64 %565, i64* %PC
  %566 = shl i64 %563, 32
  %567 = ashr exact i64 %566, 32
  store i64 %567, i64* %RDX, align 8, !tbaa !2428
  %568 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %569 = load i64, i64* %RCX
  %570 = load i64, i64* %RDX
  %571 = mul i64 %570, 8
  %572 = add i64 %571, %569
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 5
  store i64 %574, i64* %PC
  %575 = inttoptr i64 %572 to double*
  %576 = load double, double* %575
  %577 = bitcast i8* %568 to double*
  store double %576, double* %577, align 1, !tbaa !2452
  %578 = getelementptr inbounds i8, i8* %568, i64 8
  %579 = bitcast i8* %578 to double*
  store double 0.000000e+00, double* %579, align 1, !tbaa !2452
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 88
  %582 = bitcast %union.vec128_t* %XMM0 to i8*
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 5
  store i64 %584, i64* %PC
  %585 = bitcast i8* %582 to double*
  %586 = load double, double* %585, align 1
  %587 = inttoptr i64 %581 to double*
  store double %586, double* %587
  %588 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %589 = load i64, i64* %RBP
  %590 = sub i64 %589, 80
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 5
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to double*
  %594 = load double, double* %593
  %595 = bitcast i8* %588 to double*
  store double %594, double* %595, align 1, !tbaa !2452
  %596 = getelementptr inbounds i8, i8* %588, i64 8
  %597 = bitcast i8* %596 to double*
  store double 0.000000e+00, double* %597, align 1, !tbaa !2452
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 24
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 4
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 32
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i32*
  %609 = load i32, i32* %608
  %610 = sext i32 %609 to i64
  store i64 %610, i64* %RDX, align 8, !tbaa !2428
  %611 = load i64, i64* %RCX
  %612 = load i64, i64* %RDX
  %613 = mul i64 %612, 8
  %614 = add i64 %613, %611
  %615 = bitcast %union.vec128_t* %XMM0 to i8*
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 5
  store i64 %617, i64* %PC
  %618 = bitcast i8* %615 to double*
  %619 = load double, double* %618, align 1
  %620 = inttoptr i64 %614 to double*
  store double %619, double* %620
  %621 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 88
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 5
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to double*
  %627 = load double, double* %626
  %628 = bitcast i8* %621 to double*
  store double %627, double* %628, align 1, !tbaa !2452
  %629 = getelementptr inbounds i8, i8* %621, i64 8
  %630 = bitcast i8* %629 to double*
  store double 0.000000e+00, double* %630, align 1, !tbaa !2452
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 24
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %632 to i64*
  %636 = load i64, i64* %635
  store i64 %636, i64* %RCX, align 8, !tbaa !2428
  %637 = load i64, i64* %RBP
  %638 = sub i64 %637, 32
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 3
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %638 to i32*
  %642 = load i32, i32* %641
  %643 = zext i32 %642 to i64
  store i64 %643, i64* %RAX, align 8, !tbaa !2428
  %644 = load i64, i64* %RAX
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 3
  store i64 %646, i64* %PC
  %647 = trunc i64 %644 to i32
  %648 = add i32 1, %647
  %649 = zext i32 %648 to i64
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = icmp ult i32 %648, %647
  %651 = icmp ult i32 %648, 1
  %652 = or i1 %650, %651
  %653 = zext i1 %652 to i8
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %653, i8* %654, align 1, !tbaa !2432
  %655 = and i32 %648, 255
  %656 = call i32 @llvm.ctpop.i32(i32 %655) #17
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  %659 = xor i8 %658, 1
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %659, i8* %660, align 1, !tbaa !2446
  %661 = xor i64 1, %644
  %662 = trunc i64 %661 to i32
  %663 = xor i32 %662, %648
  %664 = lshr i32 %663, 4
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i32 %648, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %648, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %647, 31
  %675 = xor i32 %671, %674
  %676 = add nuw nsw i32 %675, %671
  %677 = icmp eq i32 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i32, i32* %EAX
  %681 = zext i32 %680 to i64
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 3
  store i64 %683, i64* %PC
  %684 = shl i64 %681, 32
  %685 = ashr exact i64 %684, 32
  store i64 %685, i64* %RDX, align 8, !tbaa !2428
  %686 = load i64, i64* %RCX
  %687 = load i64, i64* %RDX
  %688 = mul i64 %687, 8
  %689 = add i64 %688, %686
  %690 = bitcast %union.vec128_t* %XMM0 to i8*
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 5
  store i64 %692, i64* %PC
  %693 = bitcast i8* %690 to double*
  %694 = load double, double* %693, align 1
  %695 = inttoptr i64 %689 to double*
  store double %694, double* %695
  %696 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 64
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 5
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to double*
  %702 = load double, double* %701
  %703 = bitcast i8* %696 to double*
  store double %702, double* %703, align 1, !tbaa !2452
  %704 = getelementptr inbounds i8, i8* %696, i64 8
  %705 = bitcast i8* %704 to double*
  store double 0.000000e+00, double* %705, align 1, !tbaa !2452
  %706 = load i64, i64* %RBP
  %707 = sub i64 %706, 24
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 4
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i64*
  %711 = load i64, i64* %710
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 40
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 4
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i32*
  %717 = load i32, i32* %716
  %718 = sext i32 %717 to i64
  store i64 %718, i64* %RDX, align 8, !tbaa !2428
  %719 = load i64, i64* %RCX
  %720 = load i64, i64* %RDX
  %721 = mul i64 %720, 8
  %722 = add i64 %721, %719
  %723 = bitcast %union.vec128_t* %XMM0 to i8*
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 5
  store i64 %725, i64* %PC
  %726 = bitcast i8* %723 to double*
  %727 = load double, double* %726, align 1
  %728 = inttoptr i64 %722 to double*
  store double %727, double* %728
  %729 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 72
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 5
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %731 to double*
  %735 = load double, double* %734
  %736 = bitcast i8* %729 to double*
  store double %735, double* %736, align 1, !tbaa !2452
  %737 = getelementptr inbounds i8, i8* %729, i64 8
  %738 = bitcast i8* %737 to double*
  store double 0.000000e+00, double* %738, align 1, !tbaa !2452
  %739 = load i64, i64* %RBP
  %740 = sub i64 %739, 24
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 4
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %740 to i64*
  %744 = load i64, i64* %743
  store i64 %744, i64* %RCX, align 8, !tbaa !2428
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 40
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 3
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i32*
  %750 = load i32, i32* %749
  %751 = zext i32 %750 to i64
  store i64 %751, i64* %RAX, align 8, !tbaa !2428
  %752 = load i64, i64* %RAX
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 3
  store i64 %754, i64* %PC
  %755 = trunc i64 %752 to i32
  %756 = add i32 1, %755
  %757 = zext i32 %756 to i64
  store i64 %757, i64* %RAX, align 8, !tbaa !2428
  %758 = icmp ult i32 %756, %755
  %759 = icmp ult i32 %756, 1
  %760 = or i1 %758, %759
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %761, i8* %762, align 1, !tbaa !2432
  %763 = and i32 %756, 255
  %764 = call i32 @llvm.ctpop.i32(i32 %763) #17
  %765 = trunc i32 %764 to i8
  %766 = and i8 %765, 1
  %767 = xor i8 %766, 1
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %767, i8* %768, align 1, !tbaa !2446
  %769 = xor i64 1, %752
  %770 = trunc i64 %769 to i32
  %771 = xor i32 %770, %756
  %772 = lshr i32 %771, 4
  %773 = trunc i32 %772 to i8
  %774 = and i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %774, i8* %775, align 1, !tbaa !2447
  %776 = icmp eq i32 %756, 0
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %777, i8* %778, align 1, !tbaa !2448
  %779 = lshr i32 %756, 31
  %780 = trunc i32 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %780, i8* %781, align 1, !tbaa !2449
  %782 = lshr i32 %755, 31
  %783 = xor i32 %779, %782
  %784 = add nuw nsw i32 %783, %779
  %785 = icmp eq i32 %784, 2
  %786 = zext i1 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %786, i8* %787, align 1, !tbaa !2450
  %788 = load i32, i32* %EAX
  %789 = zext i32 %788 to i64
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = shl i64 %789, 32
  %793 = ashr exact i64 %792, 32
  store i64 %793, i64* %RDX, align 8, !tbaa !2428
  %794 = load i64, i64* %RCX
  %795 = load i64, i64* %RDX
  %796 = mul i64 %795, 8
  %797 = add i64 %796, %794
  %798 = bitcast %union.vec128_t* %XMM0 to i8*
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 5
  store i64 %800, i64* %PC
  %801 = bitcast i8* %798 to double*
  %802 = load double, double* %801, align 1
  %803 = inttoptr i64 %797 to double*
  store double %802, double* %803
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 36
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 3
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i32*
  %809 = load i32, i32* %808
  %810 = zext i32 %809 to i64
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = load i64, i64* %RAX
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 3
  store i64 %813, i64* %PC
  %814 = trunc i64 %811 to i32
  %815 = add i32 1, %814
  %816 = zext i32 %815 to i64
  store i64 %816, i64* %RAX, align 8, !tbaa !2428
  %817 = icmp ult i32 %815, %814
  %818 = icmp ult i32 %815, 1
  %819 = or i1 %817, %818
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %820, i8* %821, align 1, !tbaa !2432
  %822 = and i32 %815, 255
  %823 = call i32 @llvm.ctpop.i32(i32 %822) #17
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  %826 = xor i8 %825, 1
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %826, i8* %827, align 1, !tbaa !2446
  %828 = xor i64 1, %811
  %829 = trunc i64 %828 to i32
  %830 = xor i32 %829, %815
  %831 = lshr i32 %830, 4
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %833, i8* %834, align 1, !tbaa !2447
  %835 = icmp eq i32 %815, 0
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %836, i8* %837, align 1, !tbaa !2448
  %838 = lshr i32 %815, 31
  %839 = trunc i32 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %839, i8* %840, align 1, !tbaa !2449
  %841 = lshr i32 %814, 31
  %842 = xor i32 %838, %841
  %843 = add nuw nsw i32 %842, %838
  %844 = icmp eq i32 %843, 2
  %845 = zext i1 %844 to i8
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %845, i8* %846, align 1, !tbaa !2450
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 36
  %849 = load i32, i32* %EAX
  %850 = zext i32 %849 to i64
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 3
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %848 to i32*
  store i32 %849, i32* %853
  %854 = load i64, i64* %PC
  %855 = sub i64 %854, 1008
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  store i64 %857, i64* %PC
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %855, i64* %858, align 8, !tbaa !2428
  br label %block_40129a

block_4012b9:                                     ; preds = %block_4012ad
  %859 = sub i64 %3348, 28
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 3
  store i64 %861, i64* %PC
  %862 = inttoptr i64 %859 to i32*
  %863 = load i32, i32* %862
  %864 = zext i32 %863 to i64
  store i64 %864, i64* %RAX, align 8, !tbaa !2428
  %865 = load i64, i64* %RAX
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 3
  store i64 %867, i64* %PC
  %868 = trunc i64 %865 to i32
  %869 = shl i32 %868, 1
  %870 = icmp slt i32 %868, 0
  %871 = icmp slt i32 %869, 0
  %872 = xor i1 %870, %871
  %873 = zext i32 %869 to i64
  store i64 %873, i64* %RAX, align 8, !tbaa !2428
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %875 = zext i1 %870 to i8
  store i8 %875, i8* %874, align 1, !tbaa !2451
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %877 = and i32 %869, 254
  %878 = call i32 @llvm.ctpop.i32(i32 %877) #17
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  %881 = xor i8 %880, 1
  store i8 %881, i8* %876, align 1, !tbaa !2451
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %882, align 1, !tbaa !2451
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %884 = icmp eq i32 %869, 0
  %885 = zext i1 %884 to i8
  store i8 %885, i8* %883, align 1, !tbaa !2451
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %887 = lshr i32 %869, 31
  %888 = trunc i32 %887 to i8
  store i8 %888, i8* %886, align 1, !tbaa !2451
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %890 = zext i1 %872 to i8
  store i8 %890, i8* %889, align 1, !tbaa !2451
  %891 = load i64, i64* %RBP
  %892 = sub i64 %891, 16
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 4
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %892 to i64*
  %896 = load i64, i64* %895
  store i64 %896, i64* %RCX, align 8, !tbaa !2428
  %897 = load i64, i64* %RBP
  %898 = sub i64 %897, 36
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 4
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i32*
  %902 = load i32, i32* %901
  %903 = sext i32 %902 to i64
  store i64 %903, i64* %RDX, align 8, !tbaa !2428
  %904 = load i64, i64* %RAX
  %905 = load i64, i64* %RCX
  %906 = load i64, i64* %RDX
  %907 = mul i64 %906, 4
  %908 = add i64 %907, %905
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 3
  store i64 %910, i64* %PC
  %911 = trunc i64 %904 to i32
  %912 = inttoptr i64 %908 to i32*
  %913 = load i32, i32* %912
  %914 = add i32 %913, %911
  %915 = zext i32 %914 to i64
  store i64 %915, i64* %RAX, align 8, !tbaa !2428
  %916 = icmp ult i32 %914, %911
  %917 = icmp ult i32 %914, %913
  %918 = or i1 %916, %917
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %919, i8* %920, align 1, !tbaa !2432
  %921 = and i32 %914, 255
  %922 = call i32 @llvm.ctpop.i32(i32 %921) #17
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %925, i8* %926, align 1, !tbaa !2446
  %927 = xor i32 %913, %911
  %928 = xor i32 %927, %914
  %929 = lshr i32 %928, 4
  %930 = trunc i32 %929 to i8
  %931 = and i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %931, i8* %932, align 1, !tbaa !2447
  %933 = icmp eq i32 %914, 0
  %934 = zext i1 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %934, i8* %935, align 1, !tbaa !2448
  %936 = lshr i32 %914, 31
  %937 = trunc i32 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %937, i8* %938, align 1, !tbaa !2449
  %939 = lshr i32 %911, 31
  %940 = lshr i32 %913, 31
  %941 = xor i32 %936, %939
  %942 = xor i32 %936, %940
  %943 = add nuw nsw i32 %941, %942
  %944 = icmp eq i32 %943, 2
  %945 = zext i1 %944 to i8
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %945, i8* %946, align 1, !tbaa !2450
  %947 = load i64, i64* %RBP
  %948 = sub i64 %947, 32
  %949 = load i32, i32* %EAX
  %950 = zext i32 %949 to i64
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 3
  store i64 %952, i64* %PC
  %953 = inttoptr i64 %948 to i32*
  store i32 %949, i32* %953
  %954 = load i64, i64* %RBP
  %955 = sub i64 %954, 36
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 3
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i32*
  %959 = load i32, i32* %958
  %960 = zext i32 %959 to i64
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = load i64, i64* %RAX
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 3
  store i64 %963, i64* %PC
  %964 = trunc i64 %961 to i32
  %965 = shl i32 %964, 1
  %966 = icmp slt i32 %964, 0
  %967 = icmp slt i32 %965, 0
  %968 = xor i1 %966, %967
  %969 = zext i32 %965 to i64
  store i64 %969, i64* %RAX, align 8, !tbaa !2428
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %971 = zext i1 %966 to i8
  store i8 %971, i8* %970, align 1, !tbaa !2451
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %973 = and i32 %965, 254
  %974 = call i32 @llvm.ctpop.i32(i32 %973) #17
  %975 = trunc i32 %974 to i8
  %976 = and i8 %975, 1
  %977 = xor i8 %976, 1
  store i8 %977, i8* %972, align 1, !tbaa !2451
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %978, align 1, !tbaa !2451
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %980 = icmp eq i32 %965, 0
  %981 = zext i1 %980 to i8
  store i8 %981, i8* %979, align 1, !tbaa !2451
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %983 = lshr i32 %965, 31
  %984 = trunc i32 %983 to i8
  store i8 %984, i8* %982, align 1, !tbaa !2451
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %986 = zext i1 %968 to i8
  store i8 %986, i8* %985, align 1, !tbaa !2451
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 16
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i64*
  %992 = load i64, i64* %991
  store i64 %992, i64* %RCX, align 8, !tbaa !2428
  %993 = load i64, i64* %RBP
  %994 = sub i64 %993, 28
  %995 = load i64, i64* %PC
  %996 = add i64 %995, 4
  store i64 %996, i64* %PC
  %997 = inttoptr i64 %994 to i32*
  %998 = load i32, i32* %997
  %999 = sext i32 %998 to i64
  store i64 %999, i64* %RDX, align 8, !tbaa !2428
  %1000 = load i64, i64* %RAX
  %1001 = load i64, i64* %RCX
  %1002 = load i64, i64* %RDX
  %1003 = mul i64 %1002, 4
  %1004 = add i64 %1003, %1001
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 3
  store i64 %1006, i64* %PC
  %1007 = trunc i64 %1000 to i32
  %1008 = inttoptr i64 %1004 to i32*
  %1009 = load i32, i32* %1008
  %1010 = add i32 %1009, %1007
  %1011 = zext i32 %1010 to i64
  store i64 %1011, i64* %RAX, align 8, !tbaa !2428
  %1012 = icmp ult i32 %1010, %1007
  %1013 = icmp ult i32 %1010, %1009
  %1014 = or i1 %1012, %1013
  %1015 = zext i1 %1014 to i8
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1015, i8* %1016, align 1, !tbaa !2432
  %1017 = and i32 %1010, 255
  %1018 = call i32 @llvm.ctpop.i32(i32 %1017) #17
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = xor i8 %1020, 1
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1021, i8* %1022, align 1, !tbaa !2446
  %1023 = xor i32 %1009, %1007
  %1024 = xor i32 %1023, %1010
  %1025 = lshr i32 %1024, 4
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1027, i8* %1028, align 1, !tbaa !2447
  %1029 = icmp eq i32 %1010, 0
  %1030 = zext i1 %1029 to i8
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1030, i8* %1031, align 1, !tbaa !2448
  %1032 = lshr i32 %1010, 31
  %1033 = trunc i32 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1033, i8* %1034, align 1, !tbaa !2449
  %1035 = lshr i32 %1007, 31
  %1036 = lshr i32 %1009, 31
  %1037 = xor i32 %1032, %1035
  %1038 = xor i32 %1032, %1036
  %1039 = add nuw nsw i32 %1037, %1038
  %1040 = icmp eq i32 %1039, 2
  %1041 = zext i1 %1040 to i8
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1041, i8* %1042, align 1, !tbaa !2450
  %1043 = load i64, i64* %RBP
  %1044 = sub i64 %1043, 40
  %1045 = load i32, i32* %EAX
  %1046 = zext i32 %1045 to i64
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 3
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1044 to i32*
  store i32 %1045, i32* %1049
  %1050 = load i64, i64* %RBP
  %1051 = sub i64 %1050, 24
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 4
  store i64 %1053, i64* %PC
  %1054 = inttoptr i64 %1051 to i64*
  %1055 = load i64, i64* %1054
  store i64 %1055, i64* %RCX, align 8, !tbaa !2428
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 32
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 4
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i32*
  %1061 = load i32, i32* %1060
  %1062 = sext i32 %1061 to i64
  store i64 %1062, i64* %RDX, align 8, !tbaa !2428
  %1063 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1064 = load i64, i64* %RCX
  %1065 = load i64, i64* %RDX
  %1066 = mul i64 %1065, 8
  %1067 = add i64 %1066, %1064
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 5
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to double*
  %1071 = load double, double* %1070
  %1072 = bitcast i8* %1063 to double*
  store double %1071, double* %1072, align 1, !tbaa !2452
  %1073 = getelementptr inbounds i8, i8* %1063, i64 8
  %1074 = bitcast i8* %1073 to double*
  store double 0.000000e+00, double* %1074, align 1, !tbaa !2452
  %1075 = load i64, i64* %RBP
  %1076 = sub i64 %1075, 64
  %1077 = bitcast %union.vec128_t* %XMM0 to i8*
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 5
  store i64 %1079, i64* %PC
  %1080 = bitcast i8* %1077 to double*
  %1081 = load double, double* %1080, align 1
  %1082 = inttoptr i64 %1076 to double*
  store double %1081, double* %1082
  %1083 = load i64, i64* %RBP
  %1084 = sub i64 %1083, 24
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 4
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1084 to i64*
  %1088 = load i64, i64* %1087
  store i64 %1088, i64* %RCX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RBP
  %1090 = sub i64 %1089, 32
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 3
  store i64 %1092, i64* %PC
  %1093 = inttoptr i64 %1090 to i32*
  %1094 = load i32, i32* %1093
  %1095 = zext i32 %1094 to i64
  store i64 %1095, i64* %RAX, align 8, !tbaa !2428
  %1096 = load i64, i64* %RAX
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 3
  store i64 %1098, i64* %PC
  %1099 = trunc i64 %1096 to i32
  %1100 = add i32 1, %1099
  %1101 = zext i32 %1100 to i64
  store i64 %1101, i64* %RAX, align 8, !tbaa !2428
  %1102 = icmp ult i32 %1100, %1099
  %1103 = icmp ult i32 %1100, 1
  %1104 = or i1 %1102, %1103
  %1105 = zext i1 %1104 to i8
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1105, i8* %1106, align 1, !tbaa !2432
  %1107 = and i32 %1100, 255
  %1108 = call i32 @llvm.ctpop.i32(i32 %1107) #17
  %1109 = trunc i32 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = xor i8 %1110, 1
  %1112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1111, i8* %1112, align 1, !tbaa !2446
  %1113 = xor i64 1, %1096
  %1114 = trunc i64 %1113 to i32
  %1115 = xor i32 %1114, %1100
  %1116 = lshr i32 %1115, 4
  %1117 = trunc i32 %1116 to i8
  %1118 = and i8 %1117, 1
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1118, i8* %1119, align 1, !tbaa !2447
  %1120 = icmp eq i32 %1100, 0
  %1121 = zext i1 %1120 to i8
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1121, i8* %1122, align 1, !tbaa !2448
  %1123 = lshr i32 %1100, 31
  %1124 = trunc i32 %1123 to i8
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1124, i8* %1125, align 1, !tbaa !2449
  %1126 = lshr i32 %1099, 31
  %1127 = xor i32 %1123, %1126
  %1128 = add nuw nsw i32 %1127, %1123
  %1129 = icmp eq i32 %1128, 2
  %1130 = zext i1 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1130, i8* %1131, align 1, !tbaa !2450
  %1132 = load i32, i32* %EAX
  %1133 = zext i32 %1132 to i64
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 3
  store i64 %1135, i64* %PC
  %1136 = shl i64 %1133, 32
  %1137 = ashr exact i64 %1136, 32
  store i64 %1137, i64* %RDX, align 8, !tbaa !2428
  %1138 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1139 = load i64, i64* %RCX
  %1140 = load i64, i64* %RDX
  %1141 = mul i64 %1140, 8
  %1142 = add i64 %1141, %1139
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 5
  store i64 %1144, i64* %PC
  %1145 = inttoptr i64 %1142 to double*
  %1146 = load double, double* %1145
  %1147 = bitcast i8* %1138 to double*
  store double %1146, double* %1147, align 1, !tbaa !2452
  %1148 = getelementptr inbounds i8, i8* %1138, i64 8
  %1149 = bitcast i8* %1148 to double*
  store double 0.000000e+00, double* %1149, align 1, !tbaa !2452
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 72
  %1152 = bitcast %union.vec128_t* %XMM0 to i8*
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 5
  store i64 %1154, i64* %PC
  %1155 = bitcast i8* %1152 to double*
  %1156 = load double, double* %1155, align 1
  %1157 = inttoptr i64 %1151 to double*
  store double %1156, double* %1157
  %1158 = load i64, i64* %RBP
  %1159 = sub i64 %1158, 24
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 4
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to i64*
  %1163 = load i64, i64* %1162
  store i64 %1163, i64* %RCX, align 8, !tbaa !2428
  %1164 = load i64, i64* %RBP
  %1165 = sub i64 %1164, 40
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 4
  store i64 %1167, i64* %PC
  %1168 = inttoptr i64 %1165 to i32*
  %1169 = load i32, i32* %1168
  %1170 = sext i32 %1169 to i64
  store i64 %1170, i64* %RDX, align 8, !tbaa !2428
  %1171 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1172 = load i64, i64* %RCX
  %1173 = load i64, i64* %RDX
  %1174 = mul i64 %1173, 8
  %1175 = add i64 %1174, %1172
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 5
  store i64 %1177, i64* %PC
  %1178 = inttoptr i64 %1175 to double*
  %1179 = load double, double* %1178
  %1180 = bitcast i8* %1171 to double*
  store double %1179, double* %1180, align 1, !tbaa !2452
  %1181 = getelementptr inbounds i8, i8* %1171, i64 8
  %1182 = bitcast i8* %1181 to double*
  store double 0.000000e+00, double* %1182, align 1, !tbaa !2452
  %1183 = load i64, i64* %RBP
  %1184 = sub i64 %1183, 80
  %1185 = bitcast %union.vec128_t* %XMM0 to i8*
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 5
  store i64 %1187, i64* %PC
  %1188 = bitcast i8* %1185 to double*
  %1189 = load double, double* %1188, align 1
  %1190 = inttoptr i64 %1184 to double*
  store double %1189, double* %1190
  %1191 = load i64, i64* %RBP
  %1192 = sub i64 %1191, 24
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 4
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1192 to i64*
  %1196 = load i64, i64* %1195
  store i64 %1196, i64* %RCX, align 8, !tbaa !2428
  %1197 = load i64, i64* %RBP
  %1198 = sub i64 %1197, 40
  %1199 = load i64, i64* %PC
  %1200 = add i64 %1199, 3
  store i64 %1200, i64* %PC
  %1201 = inttoptr i64 %1198 to i32*
  %1202 = load i32, i32* %1201
  %1203 = zext i32 %1202 to i64
  store i64 %1203, i64* %RAX, align 8, !tbaa !2428
  %1204 = load i64, i64* %RAX
  %1205 = load i64, i64* %PC
  %1206 = add i64 %1205, 3
  store i64 %1206, i64* %PC
  %1207 = trunc i64 %1204 to i32
  %1208 = add i32 1, %1207
  %1209 = zext i32 %1208 to i64
  store i64 %1209, i64* %RAX, align 8, !tbaa !2428
  %1210 = icmp ult i32 %1208, %1207
  %1211 = icmp ult i32 %1208, 1
  %1212 = or i1 %1210, %1211
  %1213 = zext i1 %1212 to i8
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1213, i8* %1214, align 1, !tbaa !2432
  %1215 = and i32 %1208, 255
  %1216 = call i32 @llvm.ctpop.i32(i32 %1215) #17
  %1217 = trunc i32 %1216 to i8
  %1218 = and i8 %1217, 1
  %1219 = xor i8 %1218, 1
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1219, i8* %1220, align 1, !tbaa !2446
  %1221 = xor i64 1, %1204
  %1222 = trunc i64 %1221 to i32
  %1223 = xor i32 %1222, %1208
  %1224 = lshr i32 %1223, 4
  %1225 = trunc i32 %1224 to i8
  %1226 = and i8 %1225, 1
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1226, i8* %1227, align 1, !tbaa !2447
  %1228 = icmp eq i32 %1208, 0
  %1229 = zext i1 %1228 to i8
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1229, i8* %1230, align 1, !tbaa !2448
  %1231 = lshr i32 %1208, 31
  %1232 = trunc i32 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1232, i8* %1233, align 1, !tbaa !2449
  %1234 = lshr i32 %1207, 31
  %1235 = xor i32 %1231, %1234
  %1236 = add nuw nsw i32 %1235, %1231
  %1237 = icmp eq i32 %1236, 2
  %1238 = zext i1 %1237 to i8
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1238, i8* %1239, align 1, !tbaa !2450
  %1240 = load i32, i32* %EAX
  %1241 = zext i32 %1240 to i64
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 3
  store i64 %1243, i64* %PC
  %1244 = shl i64 %1241, 32
  %1245 = ashr exact i64 %1244, 32
  store i64 %1245, i64* %RDX, align 8, !tbaa !2428
  %1246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1247 = load i64, i64* %RCX
  %1248 = load i64, i64* %RDX
  %1249 = mul i64 %1248, 8
  %1250 = add i64 %1249, %1247
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 5
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to double*
  %1254 = load double, double* %1253
  %1255 = bitcast i8* %1246 to double*
  store double %1254, double* %1255, align 1, !tbaa !2452
  %1256 = getelementptr inbounds i8, i8* %1246, i64 8
  %1257 = bitcast i8* %1256 to double*
  store double 0.000000e+00, double* %1257, align 1, !tbaa !2452
  %1258 = load i64, i64* %RBP
  %1259 = sub i64 %1258, 88
  %1260 = bitcast %union.vec128_t* %XMM0 to i8*
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 5
  store i64 %1262, i64* %PC
  %1263 = bitcast i8* %1260 to double*
  %1264 = load double, double* %1263, align 1
  %1265 = inttoptr i64 %1259 to double*
  store double %1264, double* %1265
  %1266 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1267 = load i64, i64* %RBP
  %1268 = sub i64 %1267, 80
  %1269 = load i64, i64* %PC
  %1270 = add i64 %1269, 5
  store i64 %1270, i64* %PC
  %1271 = inttoptr i64 %1268 to double*
  %1272 = load double, double* %1271
  %1273 = bitcast i8* %1266 to double*
  store double %1272, double* %1273, align 1, !tbaa !2452
  %1274 = getelementptr inbounds i8, i8* %1266, i64 8
  %1275 = bitcast i8* %1274 to double*
  store double 0.000000e+00, double* %1275, align 1, !tbaa !2452
  %1276 = load i64, i64* %RBP
  %1277 = sub i64 %1276, 24
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 4
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1277 to i64*
  %1281 = load i64, i64* %1280
  store i64 %1281, i64* %RCX, align 8, !tbaa !2428
  %1282 = load i64, i64* %RBP
  %1283 = sub i64 %1282, 32
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 4
  store i64 %1285, i64* %PC
  %1286 = inttoptr i64 %1283 to i32*
  %1287 = load i32, i32* %1286
  %1288 = sext i32 %1287 to i64
  store i64 %1288, i64* %RDX, align 8, !tbaa !2428
  %1289 = load i64, i64* %RCX
  %1290 = load i64, i64* %RDX
  %1291 = mul i64 %1290, 8
  %1292 = add i64 %1291, %1289
  %1293 = bitcast %union.vec128_t* %XMM0 to i8*
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 5
  store i64 %1295, i64* %PC
  %1296 = bitcast i8* %1293 to double*
  %1297 = load double, double* %1296, align 1
  %1298 = inttoptr i64 %1292 to double*
  store double %1297, double* %1298
  %1299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1300 = load i64, i64* %RBP
  %1301 = sub i64 %1300, 88
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 5
  store i64 %1303, i64* %PC
  %1304 = inttoptr i64 %1301 to double*
  %1305 = load double, double* %1304
  %1306 = bitcast i8* %1299 to double*
  store double %1305, double* %1306, align 1, !tbaa !2452
  %1307 = getelementptr inbounds i8, i8* %1299, i64 8
  %1308 = bitcast i8* %1307 to double*
  store double 0.000000e+00, double* %1308, align 1, !tbaa !2452
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 24
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 4
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i64*
  %1314 = load i64, i64* %1313
  store i64 %1314, i64* %RCX, align 8, !tbaa !2428
  %1315 = load i64, i64* %RBP
  %1316 = sub i64 %1315, 32
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 3
  store i64 %1318, i64* %PC
  %1319 = inttoptr i64 %1316 to i32*
  %1320 = load i32, i32* %1319
  %1321 = zext i32 %1320 to i64
  store i64 %1321, i64* %RAX, align 8, !tbaa !2428
  %1322 = load i64, i64* %RAX
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 3
  store i64 %1324, i64* %PC
  %1325 = trunc i64 %1322 to i32
  %1326 = add i32 1, %1325
  %1327 = zext i32 %1326 to i64
  store i64 %1327, i64* %RAX, align 8, !tbaa !2428
  %1328 = icmp ult i32 %1326, %1325
  %1329 = icmp ult i32 %1326, 1
  %1330 = or i1 %1328, %1329
  %1331 = zext i1 %1330 to i8
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1331, i8* %1332, align 1, !tbaa !2432
  %1333 = and i32 %1326, 255
  %1334 = call i32 @llvm.ctpop.i32(i32 %1333) #17
  %1335 = trunc i32 %1334 to i8
  %1336 = and i8 %1335, 1
  %1337 = xor i8 %1336, 1
  %1338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1337, i8* %1338, align 1, !tbaa !2446
  %1339 = xor i64 1, %1322
  %1340 = trunc i64 %1339 to i32
  %1341 = xor i32 %1340, %1326
  %1342 = lshr i32 %1341, 4
  %1343 = trunc i32 %1342 to i8
  %1344 = and i8 %1343, 1
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1344, i8* %1345, align 1, !tbaa !2447
  %1346 = icmp eq i32 %1326, 0
  %1347 = zext i1 %1346 to i8
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1347, i8* %1348, align 1, !tbaa !2448
  %1349 = lshr i32 %1326, 31
  %1350 = trunc i32 %1349 to i8
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1350, i8* %1351, align 1, !tbaa !2449
  %1352 = lshr i32 %1325, 31
  %1353 = xor i32 %1349, %1352
  %1354 = add nuw nsw i32 %1353, %1349
  %1355 = icmp eq i32 %1354, 2
  %1356 = zext i1 %1355 to i8
  %1357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1356, i8* %1357, align 1, !tbaa !2450
  %1358 = load i32, i32* %EAX
  %1359 = zext i32 %1358 to i64
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 3
  store i64 %1361, i64* %PC
  %1362 = shl i64 %1359, 32
  %1363 = ashr exact i64 %1362, 32
  store i64 %1363, i64* %RDX, align 8, !tbaa !2428
  %1364 = load i64, i64* %RCX
  %1365 = load i64, i64* %RDX
  %1366 = mul i64 %1365, 8
  %1367 = add i64 %1366, %1364
  %1368 = bitcast %union.vec128_t* %XMM0 to i8*
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 5
  store i64 %1370, i64* %PC
  %1371 = bitcast i8* %1368 to double*
  %1372 = load double, double* %1371, align 1
  %1373 = inttoptr i64 %1367 to double*
  store double %1372, double* %1373
  %1374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1375 = load i64, i64* %RBP
  %1376 = sub i64 %1375, 64
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 5
  store i64 %1378, i64* %PC
  %1379 = inttoptr i64 %1376 to double*
  %1380 = load double, double* %1379
  %1381 = bitcast i8* %1374 to double*
  store double %1380, double* %1381, align 1, !tbaa !2452
  %1382 = getelementptr inbounds i8, i8* %1374, i64 8
  %1383 = bitcast i8* %1382 to double*
  store double 0.000000e+00, double* %1383, align 1, !tbaa !2452
  %1384 = load i64, i64* %RBP
  %1385 = sub i64 %1384, 24
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 4
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to i64*
  %1389 = load i64, i64* %1388
  store i64 %1389, i64* %RCX, align 8, !tbaa !2428
  %1390 = load i64, i64* %RBP
  %1391 = sub i64 %1390, 40
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 4
  store i64 %1393, i64* %PC
  %1394 = inttoptr i64 %1391 to i32*
  %1395 = load i32, i32* %1394
  %1396 = sext i32 %1395 to i64
  store i64 %1396, i64* %RDX, align 8, !tbaa !2428
  %1397 = load i64, i64* %RCX
  %1398 = load i64, i64* %RDX
  %1399 = mul i64 %1398, 8
  %1400 = add i64 %1399, %1397
  %1401 = bitcast %union.vec128_t* %XMM0 to i8*
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 5
  store i64 %1403, i64* %PC
  %1404 = bitcast i8* %1401 to double*
  %1405 = load double, double* %1404, align 1
  %1406 = inttoptr i64 %1400 to double*
  store double %1405, double* %1406
  %1407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1408 = load i64, i64* %RBP
  %1409 = sub i64 %1408, 72
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 5
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1409 to double*
  %1413 = load double, double* %1412
  %1414 = bitcast i8* %1407 to double*
  store double %1413, double* %1414, align 1, !tbaa !2452
  %1415 = getelementptr inbounds i8, i8* %1407, i64 8
  %1416 = bitcast i8* %1415 to double*
  store double 0.000000e+00, double* %1416, align 1, !tbaa !2452
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 24
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 4
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i64*
  %1422 = load i64, i64* %1421
  store i64 %1422, i64* %RCX, align 8, !tbaa !2428
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 40
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 3
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i32*
  %1428 = load i32, i32* %1427
  %1429 = zext i32 %1428 to i64
  store i64 %1429, i64* %RAX, align 8, !tbaa !2428
  %1430 = load i64, i64* %RAX
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 3
  store i64 %1432, i64* %PC
  %1433 = trunc i64 %1430 to i32
  %1434 = add i32 1, %1433
  %1435 = zext i32 %1434 to i64
  store i64 %1435, i64* %RAX, align 8, !tbaa !2428
  %1436 = icmp ult i32 %1434, %1433
  %1437 = icmp ult i32 %1434, 1
  %1438 = or i1 %1436, %1437
  %1439 = zext i1 %1438 to i8
  %1440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1439, i8* %1440, align 1, !tbaa !2432
  %1441 = and i32 %1434, 255
  %1442 = call i32 @llvm.ctpop.i32(i32 %1441) #17
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1445, i8* %1446, align 1, !tbaa !2446
  %1447 = xor i64 1, %1430
  %1448 = trunc i64 %1447 to i32
  %1449 = xor i32 %1448, %1434
  %1450 = lshr i32 %1449, 4
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1452, i8* %1453, align 1, !tbaa !2447
  %1454 = icmp eq i32 %1434, 0
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1455, i8* %1456, align 1, !tbaa !2448
  %1457 = lshr i32 %1434, 31
  %1458 = trunc i32 %1457 to i8
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1458, i8* %1459, align 1, !tbaa !2449
  %1460 = lshr i32 %1433, 31
  %1461 = xor i32 %1457, %1460
  %1462 = add nuw nsw i32 %1461, %1457
  %1463 = icmp eq i32 %1462, 2
  %1464 = zext i1 %1463 to i8
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1464, i8* %1465, align 1, !tbaa !2450
  %1466 = load i32, i32* %EAX
  %1467 = zext i32 %1466 to i64
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 3
  store i64 %1469, i64* %PC
  %1470 = shl i64 %1467, 32
  %1471 = ashr exact i64 %1470, 32
  store i64 %1471, i64* %RDX, align 8, !tbaa !2428
  %1472 = load i64, i64* %RCX
  %1473 = load i64, i64* %RDX
  %1474 = mul i64 %1473, 8
  %1475 = add i64 %1474, %1472
  %1476 = bitcast %union.vec128_t* %XMM0 to i8*
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 5
  store i64 %1478, i64* %PC
  %1479 = bitcast i8* %1476 to double*
  %1480 = load double, double* %1479, align 1
  %1481 = inttoptr i64 %1475 to double*
  store double %1480, double* %1481
  %1482 = load i64, i64* %RBP
  %1483 = sub i64 %1482, 52
  %1484 = load i64, i64* %PC
  %1485 = add i64 %1484, 3
  store i64 %1485, i64* %PC
  %1486 = inttoptr i64 %1483 to i32*
  %1487 = load i32, i32* %1486
  %1488 = zext i32 %1487 to i64
  store i64 %1488, i64* %RAX, align 8, !tbaa !2428
  %1489 = load i64, i64* %RAX
  %1490 = load i64, i64* %RBP
  %1491 = sub i64 %1490, 32
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3
  store i64 %1493, i64* %PC
  %1494 = trunc i64 %1489 to i32
  %1495 = inttoptr i64 %1491 to i32*
  %1496 = load i32, i32* %1495
  %1497 = add i32 %1496, %1494
  %1498 = zext i32 %1497 to i64
  store i64 %1498, i64* %RAX, align 8, !tbaa !2428
  %1499 = icmp ult i32 %1497, %1494
  %1500 = icmp ult i32 %1497, %1496
  %1501 = or i1 %1499, %1500
  %1502 = zext i1 %1501 to i8
  %1503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1502, i8* %1503, align 1, !tbaa !2432
  %1504 = and i32 %1497, 255
  %1505 = call i32 @llvm.ctpop.i32(i32 %1504) #17
  %1506 = trunc i32 %1505 to i8
  %1507 = and i8 %1506, 1
  %1508 = xor i8 %1507, 1
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1508, i8* %1509, align 1, !tbaa !2446
  %1510 = xor i32 %1496, %1494
  %1511 = xor i32 %1510, %1497
  %1512 = lshr i32 %1511, 4
  %1513 = trunc i32 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1514, i8* %1515, align 1, !tbaa !2447
  %1516 = icmp eq i32 %1497, 0
  %1517 = zext i1 %1516 to i8
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1517, i8* %1518, align 1, !tbaa !2448
  %1519 = lshr i32 %1497, 31
  %1520 = trunc i32 %1519 to i8
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1520, i8* %1521, align 1, !tbaa !2449
  %1522 = lshr i32 %1494, 31
  %1523 = lshr i32 %1496, 31
  %1524 = xor i32 %1519, %1522
  %1525 = xor i32 %1519, %1523
  %1526 = add nuw nsw i32 %1524, %1525
  %1527 = icmp eq i32 %1526, 2
  %1528 = zext i1 %1527 to i8
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1528, i8* %1529, align 1, !tbaa !2450
  %1530 = load i64, i64* %RBP
  %1531 = sub i64 %1530, 32
  %1532 = load i32, i32* %EAX
  %1533 = zext i32 %1532 to i64
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 3
  store i64 %1535, i64* %PC
  %1536 = inttoptr i64 %1531 to i32*
  store i32 %1532, i32* %1536
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 52
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 3
  store i64 %1540, i64* %PC
  %1541 = inttoptr i64 %1538 to i32*
  %1542 = load i32, i32* %1541
  %1543 = zext i32 %1542 to i64
  store i64 %1543, i64* %RAX, align 8, !tbaa !2428
  %1544 = load i64, i64* %RAX
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 3
  store i64 %1546, i64* %PC
  %1547 = trunc i64 %1544 to i32
  %1548 = shl i32 %1547, 1
  %1549 = icmp slt i32 %1547, 0
  %1550 = icmp slt i32 %1548, 0
  %1551 = xor i1 %1549, %1550
  %1552 = zext i32 %1548 to i64
  store i64 %1552, i64* %RAX, align 8, !tbaa !2428
  %1553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1554 = zext i1 %1549 to i8
  store i8 %1554, i8* %1553, align 1, !tbaa !2451
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1556 = and i32 %1548, 254
  %1557 = call i32 @llvm.ctpop.i32(i32 %1556) #17
  %1558 = trunc i32 %1557 to i8
  %1559 = and i8 %1558, 1
  %1560 = xor i8 %1559, 1
  store i8 %1560, i8* %1555, align 1, !tbaa !2451
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1561, align 1, !tbaa !2451
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1563 = icmp eq i32 %1548, 0
  %1564 = zext i1 %1563 to i8
  store i8 %1564, i8* %1562, align 1, !tbaa !2451
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1566 = lshr i32 %1548, 31
  %1567 = trunc i32 %1566 to i8
  store i8 %1567, i8* %1565, align 1, !tbaa !2451
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1569 = zext i1 %1551 to i8
  store i8 %1569, i8* %1568, align 1, !tbaa !2451
  %1570 = load i64, i64* %RAX
  %1571 = load i64, i64* %RBP
  %1572 = sub i64 %1571, 40
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 3
  store i64 %1574, i64* %PC
  %1575 = trunc i64 %1570 to i32
  %1576 = inttoptr i64 %1572 to i32*
  %1577 = load i32, i32* %1576
  %1578 = add i32 %1577, %1575
  %1579 = zext i32 %1578 to i64
  store i64 %1579, i64* %RAX, align 8, !tbaa !2428
  %1580 = icmp ult i32 %1578, %1575
  %1581 = icmp ult i32 %1578, %1577
  %1582 = or i1 %1580, %1581
  %1583 = zext i1 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1583, i8* %1584, align 1, !tbaa !2432
  %1585 = and i32 %1578, 255
  %1586 = call i32 @llvm.ctpop.i32(i32 %1585) #17
  %1587 = trunc i32 %1586 to i8
  %1588 = and i8 %1587, 1
  %1589 = xor i8 %1588, 1
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1589, i8* %1590, align 1, !tbaa !2446
  %1591 = xor i32 %1577, %1575
  %1592 = xor i32 %1591, %1578
  %1593 = lshr i32 %1592, 4
  %1594 = trunc i32 %1593 to i8
  %1595 = and i8 %1594, 1
  %1596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1595, i8* %1596, align 1, !tbaa !2447
  %1597 = icmp eq i32 %1578, 0
  %1598 = zext i1 %1597 to i8
  %1599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1598, i8* %1599, align 1, !tbaa !2448
  %1600 = lshr i32 %1578, 31
  %1601 = trunc i32 %1600 to i8
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1601, i8* %1602, align 1, !tbaa !2449
  %1603 = lshr i32 %1575, 31
  %1604 = lshr i32 %1577, 31
  %1605 = xor i32 %1600, %1603
  %1606 = xor i32 %1600, %1604
  %1607 = add nuw nsw i32 %1605, %1606
  %1608 = icmp eq i32 %1607, 2
  %1609 = zext i1 %1608 to i8
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1609, i8* %1610, align 1, !tbaa !2450
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 40
  %1613 = load i32, i32* %EAX
  %1614 = zext i32 %1613 to i64
  %1615 = load i64, i64* %PC
  %1616 = add i64 %1615, 3
  store i64 %1616, i64* %PC
  %1617 = inttoptr i64 %1612 to i32*
  store i32 %1613, i32* %1617
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 24
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 4
  store i64 %1621, i64* %PC
  %1622 = inttoptr i64 %1619 to i64*
  %1623 = load i64, i64* %1622
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1624 = load i64, i64* %RBP
  %1625 = sub i64 %1624, 32
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 4
  store i64 %1627, i64* %PC
  %1628 = inttoptr i64 %1625 to i32*
  %1629 = load i32, i32* %1628
  %1630 = sext i32 %1629 to i64
  store i64 %1630, i64* %RDX, align 8, !tbaa !2428
  %1631 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1632 = load i64, i64* %RCX
  %1633 = load i64, i64* %RDX
  %1634 = mul i64 %1633, 8
  %1635 = add i64 %1634, %1632
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 5
  store i64 %1637, i64* %PC
  %1638 = inttoptr i64 %1635 to double*
  %1639 = load double, double* %1638
  %1640 = bitcast i8* %1631 to double*
  store double %1639, double* %1640, align 1, !tbaa !2452
  %1641 = getelementptr inbounds i8, i8* %1631, i64 8
  %1642 = bitcast i8* %1641 to double*
  store double 0.000000e+00, double* %1642, align 1, !tbaa !2452
  %1643 = load i64, i64* %RBP
  %1644 = sub i64 %1643, 64
  %1645 = bitcast %union.vec128_t* %XMM0 to i8*
  %1646 = load i64, i64* %PC
  %1647 = add i64 %1646, 5
  store i64 %1647, i64* %PC
  %1648 = bitcast i8* %1645 to double*
  %1649 = load double, double* %1648, align 1
  %1650 = inttoptr i64 %1644 to double*
  store double %1649, double* %1650
  %1651 = load i64, i64* %RBP
  %1652 = sub i64 %1651, 24
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 4
  store i64 %1654, i64* %PC
  %1655 = inttoptr i64 %1652 to i64*
  %1656 = load i64, i64* %1655
  store i64 %1656, i64* %RCX, align 8, !tbaa !2428
  %1657 = load i64, i64* %RBP
  %1658 = sub i64 %1657, 32
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 3
  store i64 %1660, i64* %PC
  %1661 = inttoptr i64 %1658 to i32*
  %1662 = load i32, i32* %1661
  %1663 = zext i32 %1662 to i64
  store i64 %1663, i64* %RAX, align 8, !tbaa !2428
  %1664 = load i64, i64* %RAX
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 3
  store i64 %1666, i64* %PC
  %1667 = trunc i64 %1664 to i32
  %1668 = add i32 1, %1667
  %1669 = zext i32 %1668 to i64
  store i64 %1669, i64* %RAX, align 8, !tbaa !2428
  %1670 = icmp ult i32 %1668, %1667
  %1671 = icmp ult i32 %1668, 1
  %1672 = or i1 %1670, %1671
  %1673 = zext i1 %1672 to i8
  %1674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1673, i8* %1674, align 1, !tbaa !2432
  %1675 = and i32 %1668, 255
  %1676 = call i32 @llvm.ctpop.i32(i32 %1675) #17
  %1677 = trunc i32 %1676 to i8
  %1678 = and i8 %1677, 1
  %1679 = xor i8 %1678, 1
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1679, i8* %1680, align 1, !tbaa !2446
  %1681 = xor i64 1, %1664
  %1682 = trunc i64 %1681 to i32
  %1683 = xor i32 %1682, %1668
  %1684 = lshr i32 %1683, 4
  %1685 = trunc i32 %1684 to i8
  %1686 = and i8 %1685, 1
  %1687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1686, i8* %1687, align 1, !tbaa !2447
  %1688 = icmp eq i32 %1668, 0
  %1689 = zext i1 %1688 to i8
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1689, i8* %1690, align 1, !tbaa !2448
  %1691 = lshr i32 %1668, 31
  %1692 = trunc i32 %1691 to i8
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1692, i8* %1693, align 1, !tbaa !2449
  %1694 = lshr i32 %1667, 31
  %1695 = xor i32 %1691, %1694
  %1696 = add nuw nsw i32 %1695, %1691
  %1697 = icmp eq i32 %1696, 2
  %1698 = zext i1 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1698, i8* %1699, align 1, !tbaa !2450
  %1700 = load i32, i32* %EAX
  %1701 = zext i32 %1700 to i64
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 3
  store i64 %1703, i64* %PC
  %1704 = shl i64 %1701, 32
  %1705 = ashr exact i64 %1704, 32
  store i64 %1705, i64* %RDX, align 8, !tbaa !2428
  %1706 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1707 = load i64, i64* %RCX
  %1708 = load i64, i64* %RDX
  %1709 = mul i64 %1708, 8
  %1710 = add i64 %1709, %1707
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 5
  store i64 %1712, i64* %PC
  %1713 = inttoptr i64 %1710 to double*
  %1714 = load double, double* %1713
  %1715 = bitcast i8* %1706 to double*
  store double %1714, double* %1715, align 1, !tbaa !2452
  %1716 = getelementptr inbounds i8, i8* %1706, i64 8
  %1717 = bitcast i8* %1716 to double*
  store double 0.000000e+00, double* %1717, align 1, !tbaa !2452
  %1718 = load i64, i64* %RBP
  %1719 = sub i64 %1718, 72
  %1720 = bitcast %union.vec128_t* %XMM0 to i8*
  %1721 = load i64, i64* %PC
  %1722 = add i64 %1721, 5
  store i64 %1722, i64* %PC
  %1723 = bitcast i8* %1720 to double*
  %1724 = load double, double* %1723, align 1
  %1725 = inttoptr i64 %1719 to double*
  store double %1724, double* %1725
  %1726 = load i64, i64* %RBP
  %1727 = sub i64 %1726, 24
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 4
  store i64 %1729, i64* %PC
  %1730 = inttoptr i64 %1727 to i64*
  %1731 = load i64, i64* %1730
  store i64 %1731, i64* %RCX, align 8, !tbaa !2428
  %1732 = load i64, i64* %RBP
  %1733 = sub i64 %1732, 40
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 4
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1733 to i32*
  %1737 = load i32, i32* %1736
  %1738 = sext i32 %1737 to i64
  store i64 %1738, i64* %RDX, align 8, !tbaa !2428
  %1739 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1740 = load i64, i64* %RCX
  %1741 = load i64, i64* %RDX
  %1742 = mul i64 %1741, 8
  %1743 = add i64 %1742, %1740
  %1744 = load i64, i64* %PC
  %1745 = add i64 %1744, 5
  store i64 %1745, i64* %PC
  %1746 = inttoptr i64 %1743 to double*
  %1747 = load double, double* %1746
  %1748 = bitcast i8* %1739 to double*
  store double %1747, double* %1748, align 1, !tbaa !2452
  %1749 = getelementptr inbounds i8, i8* %1739, i64 8
  %1750 = bitcast i8* %1749 to double*
  store double 0.000000e+00, double* %1750, align 1, !tbaa !2452
  %1751 = load i64, i64* %RBP
  %1752 = sub i64 %1751, 80
  %1753 = bitcast %union.vec128_t* %XMM0 to i8*
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 5
  store i64 %1755, i64* %PC
  %1756 = bitcast i8* %1753 to double*
  %1757 = load double, double* %1756, align 1
  %1758 = inttoptr i64 %1752 to double*
  store double %1757, double* %1758
  %1759 = load i64, i64* %RBP
  %1760 = sub i64 %1759, 24
  %1761 = load i64, i64* %PC
  %1762 = add i64 %1761, 4
  store i64 %1762, i64* %PC
  %1763 = inttoptr i64 %1760 to i64*
  %1764 = load i64, i64* %1763
  store i64 %1764, i64* %RCX, align 8, !tbaa !2428
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 40
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 3
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to i32*
  %1770 = load i32, i32* %1769
  %1771 = zext i32 %1770 to i64
  store i64 %1771, i64* %RAX, align 8, !tbaa !2428
  %1772 = load i64, i64* %RAX
  %1773 = load i64, i64* %PC
  %1774 = add i64 %1773, 3
  store i64 %1774, i64* %PC
  %1775 = trunc i64 %1772 to i32
  %1776 = add i32 1, %1775
  %1777 = zext i32 %1776 to i64
  store i64 %1777, i64* %RAX, align 8, !tbaa !2428
  %1778 = icmp ult i32 %1776, %1775
  %1779 = icmp ult i32 %1776, 1
  %1780 = or i1 %1778, %1779
  %1781 = zext i1 %1780 to i8
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1781, i8* %1782, align 1, !tbaa !2432
  %1783 = and i32 %1776, 255
  %1784 = call i32 @llvm.ctpop.i32(i32 %1783) #17
  %1785 = trunc i32 %1784 to i8
  %1786 = and i8 %1785, 1
  %1787 = xor i8 %1786, 1
  %1788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1787, i8* %1788, align 1, !tbaa !2446
  %1789 = xor i64 1, %1772
  %1790 = trunc i64 %1789 to i32
  %1791 = xor i32 %1790, %1776
  %1792 = lshr i32 %1791, 4
  %1793 = trunc i32 %1792 to i8
  %1794 = and i8 %1793, 1
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1794, i8* %1795, align 1, !tbaa !2447
  %1796 = icmp eq i32 %1776, 0
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1797, i8* %1798, align 1, !tbaa !2448
  %1799 = lshr i32 %1776, 31
  %1800 = trunc i32 %1799 to i8
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1800, i8* %1801, align 1, !tbaa !2449
  %1802 = lshr i32 %1775, 31
  %1803 = xor i32 %1799, %1802
  %1804 = add nuw nsw i32 %1803, %1799
  %1805 = icmp eq i32 %1804, 2
  %1806 = zext i1 %1805 to i8
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1806, i8* %1807, align 1, !tbaa !2450
  %1808 = load i32, i32* %EAX
  %1809 = zext i32 %1808 to i64
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 3
  store i64 %1811, i64* %PC
  %1812 = shl i64 %1809, 32
  %1813 = ashr exact i64 %1812, 32
  store i64 %1813, i64* %RDX, align 8, !tbaa !2428
  %1814 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1815 = load i64, i64* %RCX
  %1816 = load i64, i64* %RDX
  %1817 = mul i64 %1816, 8
  %1818 = add i64 %1817, %1815
  %1819 = load i64, i64* %PC
  %1820 = add i64 %1819, 5
  store i64 %1820, i64* %PC
  %1821 = inttoptr i64 %1818 to double*
  %1822 = load double, double* %1821
  %1823 = bitcast i8* %1814 to double*
  store double %1822, double* %1823, align 1, !tbaa !2452
  %1824 = getelementptr inbounds i8, i8* %1814, i64 8
  %1825 = bitcast i8* %1824 to double*
  store double 0.000000e+00, double* %1825, align 1, !tbaa !2452
  %1826 = load i64, i64* %RBP
  %1827 = sub i64 %1826, 88
  %1828 = bitcast %union.vec128_t* %XMM0 to i8*
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 5
  store i64 %1830, i64* %PC
  %1831 = bitcast i8* %1828 to double*
  %1832 = load double, double* %1831, align 1
  %1833 = inttoptr i64 %1827 to double*
  store double %1832, double* %1833
  %1834 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1835 = load i64, i64* %RBP
  %1836 = sub i64 %1835, 80
  %1837 = load i64, i64* %PC
  %1838 = add i64 %1837, 5
  store i64 %1838, i64* %PC
  %1839 = inttoptr i64 %1836 to double*
  %1840 = load double, double* %1839
  %1841 = bitcast i8* %1834 to double*
  store double %1840, double* %1841, align 1, !tbaa !2452
  %1842 = getelementptr inbounds i8, i8* %1834, i64 8
  %1843 = bitcast i8* %1842 to double*
  store double 0.000000e+00, double* %1843, align 1, !tbaa !2452
  %1844 = load i64, i64* %RBP
  %1845 = sub i64 %1844, 24
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1845 to i64*
  %1849 = load i64, i64* %1848
  store i64 %1849, i64* %RCX, align 8, !tbaa !2428
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 32
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 4
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1851 to i32*
  %1855 = load i32, i32* %1854
  %1856 = sext i32 %1855 to i64
  store i64 %1856, i64* %RDX, align 8, !tbaa !2428
  %1857 = load i64, i64* %RCX
  %1858 = load i64, i64* %RDX
  %1859 = mul i64 %1858, 8
  %1860 = add i64 %1859, %1857
  %1861 = bitcast %union.vec128_t* %XMM0 to i8*
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 5
  store i64 %1863, i64* %PC
  %1864 = bitcast i8* %1861 to double*
  %1865 = load double, double* %1864, align 1
  %1866 = inttoptr i64 %1860 to double*
  store double %1865, double* %1866
  %1867 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 88
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 5
  store i64 %1871, i64* %PC
  %1872 = inttoptr i64 %1869 to double*
  %1873 = load double, double* %1872
  %1874 = bitcast i8* %1867 to double*
  store double %1873, double* %1874, align 1, !tbaa !2452
  %1875 = getelementptr inbounds i8, i8* %1867, i64 8
  %1876 = bitcast i8* %1875 to double*
  store double 0.000000e+00, double* %1876, align 1, !tbaa !2452
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 24
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 4
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i64*
  %1882 = load i64, i64* %1881
  store i64 %1882, i64* %RCX, align 8, !tbaa !2428
  %1883 = load i64, i64* %RBP
  %1884 = sub i64 %1883, 32
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 3
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1884 to i32*
  %1888 = load i32, i32* %1887
  %1889 = zext i32 %1888 to i64
  store i64 %1889, i64* %RAX, align 8, !tbaa !2428
  %1890 = load i64, i64* %RAX
  %1891 = load i64, i64* %PC
  %1892 = add i64 %1891, 3
  store i64 %1892, i64* %PC
  %1893 = trunc i64 %1890 to i32
  %1894 = add i32 1, %1893
  %1895 = zext i32 %1894 to i64
  store i64 %1895, i64* %RAX, align 8, !tbaa !2428
  %1896 = icmp ult i32 %1894, %1893
  %1897 = icmp ult i32 %1894, 1
  %1898 = or i1 %1896, %1897
  %1899 = zext i1 %1898 to i8
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1899, i8* %1900, align 1, !tbaa !2432
  %1901 = and i32 %1894, 255
  %1902 = call i32 @llvm.ctpop.i32(i32 %1901) #17
  %1903 = trunc i32 %1902 to i8
  %1904 = and i8 %1903, 1
  %1905 = xor i8 %1904, 1
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1905, i8* %1906, align 1, !tbaa !2446
  %1907 = xor i64 1, %1890
  %1908 = trunc i64 %1907 to i32
  %1909 = xor i32 %1908, %1894
  %1910 = lshr i32 %1909, 4
  %1911 = trunc i32 %1910 to i8
  %1912 = and i8 %1911, 1
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1912, i8* %1913, align 1, !tbaa !2447
  %1914 = icmp eq i32 %1894, 0
  %1915 = zext i1 %1914 to i8
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1915, i8* %1916, align 1, !tbaa !2448
  %1917 = lshr i32 %1894, 31
  %1918 = trunc i32 %1917 to i8
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1918, i8* %1919, align 1, !tbaa !2449
  %1920 = lshr i32 %1893, 31
  %1921 = xor i32 %1917, %1920
  %1922 = add nuw nsw i32 %1921, %1917
  %1923 = icmp eq i32 %1922, 2
  %1924 = zext i1 %1923 to i8
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1924, i8* %1925, align 1, !tbaa !2450
  %1926 = load i32, i32* %EAX
  %1927 = zext i32 %1926 to i64
  %1928 = load i64, i64* %PC
  %1929 = add i64 %1928, 3
  store i64 %1929, i64* %PC
  %1930 = shl i64 %1927, 32
  %1931 = ashr exact i64 %1930, 32
  store i64 %1931, i64* %RDX, align 8, !tbaa !2428
  %1932 = load i64, i64* %RCX
  %1933 = load i64, i64* %RDX
  %1934 = mul i64 %1933, 8
  %1935 = add i64 %1934, %1932
  %1936 = bitcast %union.vec128_t* %XMM0 to i8*
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 5
  store i64 %1938, i64* %PC
  %1939 = bitcast i8* %1936 to double*
  %1940 = load double, double* %1939, align 1
  %1941 = inttoptr i64 %1935 to double*
  store double %1940, double* %1941
  %1942 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1943 = load i64, i64* %RBP
  %1944 = sub i64 %1943, 64
  %1945 = load i64, i64* %PC
  %1946 = add i64 %1945, 5
  store i64 %1946, i64* %PC
  %1947 = inttoptr i64 %1944 to double*
  %1948 = load double, double* %1947
  %1949 = bitcast i8* %1942 to double*
  store double %1948, double* %1949, align 1, !tbaa !2452
  %1950 = getelementptr inbounds i8, i8* %1942, i64 8
  %1951 = bitcast i8* %1950 to double*
  store double 0.000000e+00, double* %1951, align 1, !tbaa !2452
  %1952 = load i64, i64* %RBP
  %1953 = sub i64 %1952, 24
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 4
  store i64 %1955, i64* %PC
  %1956 = inttoptr i64 %1953 to i64*
  %1957 = load i64, i64* %1956
  store i64 %1957, i64* %RCX, align 8, !tbaa !2428
  %1958 = load i64, i64* %RBP
  %1959 = sub i64 %1958, 40
  %1960 = load i64, i64* %PC
  %1961 = add i64 %1960, 4
  store i64 %1961, i64* %PC
  %1962 = inttoptr i64 %1959 to i32*
  %1963 = load i32, i32* %1962
  %1964 = sext i32 %1963 to i64
  store i64 %1964, i64* %RDX, align 8, !tbaa !2428
  %1965 = load i64, i64* %RCX
  %1966 = load i64, i64* %RDX
  %1967 = mul i64 %1966, 8
  %1968 = add i64 %1967, %1965
  %1969 = bitcast %union.vec128_t* %XMM0 to i8*
  %1970 = load i64, i64* %PC
  %1971 = add i64 %1970, 5
  store i64 %1971, i64* %PC
  %1972 = bitcast i8* %1969 to double*
  %1973 = load double, double* %1972, align 1
  %1974 = inttoptr i64 %1968 to double*
  store double %1973, double* %1974
  %1975 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1976 = load i64, i64* %RBP
  %1977 = sub i64 %1976, 72
  %1978 = load i64, i64* %PC
  %1979 = add i64 %1978, 5
  store i64 %1979, i64* %PC
  %1980 = inttoptr i64 %1977 to double*
  %1981 = load double, double* %1980
  %1982 = bitcast i8* %1975 to double*
  store double %1981, double* %1982, align 1, !tbaa !2452
  %1983 = getelementptr inbounds i8, i8* %1975, i64 8
  %1984 = bitcast i8* %1983 to double*
  store double 0.000000e+00, double* %1984, align 1, !tbaa !2452
  %1985 = load i64, i64* %RBP
  %1986 = sub i64 %1985, 24
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 4
  store i64 %1988, i64* %PC
  %1989 = inttoptr i64 %1986 to i64*
  %1990 = load i64, i64* %1989
  store i64 %1990, i64* %RCX, align 8, !tbaa !2428
  %1991 = load i64, i64* %RBP
  %1992 = sub i64 %1991, 40
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 3
  store i64 %1994, i64* %PC
  %1995 = inttoptr i64 %1992 to i32*
  %1996 = load i32, i32* %1995
  %1997 = zext i32 %1996 to i64
  store i64 %1997, i64* %RAX, align 8, !tbaa !2428
  %1998 = load i64, i64* %RAX
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 3
  store i64 %2000, i64* %PC
  %2001 = trunc i64 %1998 to i32
  %2002 = add i32 1, %2001
  %2003 = zext i32 %2002 to i64
  store i64 %2003, i64* %RAX, align 8, !tbaa !2428
  %2004 = icmp ult i32 %2002, %2001
  %2005 = icmp ult i32 %2002, 1
  %2006 = or i1 %2004, %2005
  %2007 = zext i1 %2006 to i8
  %2008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2007, i8* %2008, align 1, !tbaa !2432
  %2009 = and i32 %2002, 255
  %2010 = call i32 @llvm.ctpop.i32(i32 %2009) #17
  %2011 = trunc i32 %2010 to i8
  %2012 = and i8 %2011, 1
  %2013 = xor i8 %2012, 1
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2013, i8* %2014, align 1, !tbaa !2446
  %2015 = xor i64 1, %1998
  %2016 = trunc i64 %2015 to i32
  %2017 = xor i32 %2016, %2002
  %2018 = lshr i32 %2017, 4
  %2019 = trunc i32 %2018 to i8
  %2020 = and i8 %2019, 1
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2020, i8* %2021, align 1, !tbaa !2447
  %2022 = icmp eq i32 %2002, 0
  %2023 = zext i1 %2022 to i8
  %2024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2023, i8* %2024, align 1, !tbaa !2448
  %2025 = lshr i32 %2002, 31
  %2026 = trunc i32 %2025 to i8
  %2027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2026, i8* %2027, align 1, !tbaa !2449
  %2028 = lshr i32 %2001, 31
  %2029 = xor i32 %2025, %2028
  %2030 = add nuw nsw i32 %2029, %2025
  %2031 = icmp eq i32 %2030, 2
  %2032 = zext i1 %2031 to i8
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2032, i8* %2033, align 1, !tbaa !2450
  %2034 = load i32, i32* %EAX
  %2035 = zext i32 %2034 to i64
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 3
  store i64 %2037, i64* %PC
  %2038 = shl i64 %2035, 32
  %2039 = ashr exact i64 %2038, 32
  store i64 %2039, i64* %RDX, align 8, !tbaa !2428
  %2040 = load i64, i64* %RCX
  %2041 = load i64, i64* %RDX
  %2042 = mul i64 %2041, 8
  %2043 = add i64 %2042, %2040
  %2044 = bitcast %union.vec128_t* %XMM0 to i8*
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 5
  store i64 %2046, i64* %PC
  %2047 = bitcast i8* %2044 to double*
  %2048 = load double, double* %2047, align 1
  %2049 = inttoptr i64 %2043 to double*
  store double %2048, double* %2049
  %2050 = load i64, i64* %RBP
  %2051 = sub i64 %2050, 52
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 3
  store i64 %2053, i64* %PC
  %2054 = inttoptr i64 %2051 to i32*
  %2055 = load i32, i32* %2054
  %2056 = zext i32 %2055 to i64
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RAX
  %2058 = load i64, i64* %RBP
  %2059 = sub i64 %2058, 32
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 3
  store i64 %2061, i64* %PC
  %2062 = trunc i64 %2057 to i32
  %2063 = inttoptr i64 %2059 to i32*
  %2064 = load i32, i32* %2063
  %2065 = add i32 %2064, %2062
  %2066 = zext i32 %2065 to i64
  store i64 %2066, i64* %RAX, align 8, !tbaa !2428
  %2067 = icmp ult i32 %2065, %2062
  %2068 = icmp ult i32 %2065, %2064
  %2069 = or i1 %2067, %2068
  %2070 = zext i1 %2069 to i8
  %2071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2070, i8* %2071, align 1, !tbaa !2432
  %2072 = and i32 %2065, 255
  %2073 = call i32 @llvm.ctpop.i32(i32 %2072) #17
  %2074 = trunc i32 %2073 to i8
  %2075 = and i8 %2074, 1
  %2076 = xor i8 %2075, 1
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2076, i8* %2077, align 1, !tbaa !2446
  %2078 = xor i32 %2064, %2062
  %2079 = xor i32 %2078, %2065
  %2080 = lshr i32 %2079, 4
  %2081 = trunc i32 %2080 to i8
  %2082 = and i8 %2081, 1
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2082, i8* %2083, align 1, !tbaa !2447
  %2084 = icmp eq i32 %2065, 0
  %2085 = zext i1 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2085, i8* %2086, align 1, !tbaa !2448
  %2087 = lshr i32 %2065, 31
  %2088 = trunc i32 %2087 to i8
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2088, i8* %2089, align 1, !tbaa !2449
  %2090 = lshr i32 %2062, 31
  %2091 = lshr i32 %2064, 31
  %2092 = xor i32 %2087, %2090
  %2093 = xor i32 %2087, %2091
  %2094 = add nuw nsw i32 %2092, %2093
  %2095 = icmp eq i32 %2094, 2
  %2096 = zext i1 %2095 to i8
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2096, i8* %2097, align 1, !tbaa !2450
  %2098 = load i64, i64* %RBP
  %2099 = sub i64 %2098, 32
  %2100 = load i32, i32* %EAX
  %2101 = zext i32 %2100 to i64
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 3
  store i64 %2103, i64* %PC
  %2104 = inttoptr i64 %2099 to i32*
  store i32 %2100, i32* %2104
  %2105 = load i64, i64* %RBP
  %2106 = sub i64 %2105, 52
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 3
  store i64 %2108, i64* %PC
  %2109 = inttoptr i64 %2106 to i32*
  %2110 = load i32, i32* %2109
  %2111 = zext i32 %2110 to i64
  store i64 %2111, i64* %RAX, align 8, !tbaa !2428
  %2112 = load i64, i64* %RBP
  %2113 = sub i64 %2112, 40
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 3
  store i64 %2115, i64* %PC
  %2116 = inttoptr i64 %2113 to i32*
  %2117 = load i32, i32* %2116
  %2118 = zext i32 %2117 to i64
  store i64 %2118, i64* %RSI, align 8, !tbaa !2428
  %2119 = load i64, i64* %RSI
  %2120 = load i32, i32* %EAX
  %2121 = zext i32 %2120 to i64
  %2122 = load i64, i64* %PC
  %2123 = add i64 %2122, 2
  store i64 %2123, i64* %PC
  %2124 = trunc i64 %2119 to i32
  %2125 = sub i32 %2124, %2120
  %2126 = zext i32 %2125 to i64
  store i64 %2126, i64* %RSI, align 8, !tbaa !2428
  %2127 = icmp ult i32 %2124, %2120
  %2128 = zext i1 %2127 to i8
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2128, i8* %2129, align 1, !tbaa !2432
  %2130 = and i32 %2125, 255
  %2131 = call i32 @llvm.ctpop.i32(i32 %2130) #17
  %2132 = trunc i32 %2131 to i8
  %2133 = and i8 %2132, 1
  %2134 = xor i8 %2133, 1
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2134, i8* %2135, align 1, !tbaa !2446
  %2136 = xor i64 %2121, %2119
  %2137 = trunc i64 %2136 to i32
  %2138 = xor i32 %2137, %2125
  %2139 = lshr i32 %2138, 4
  %2140 = trunc i32 %2139 to i8
  %2141 = and i8 %2140, 1
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2141, i8* %2142, align 1, !tbaa !2447
  %2143 = icmp eq i32 %2125, 0
  %2144 = zext i1 %2143 to i8
  %2145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2144, i8* %2145, align 1, !tbaa !2448
  %2146 = lshr i32 %2125, 31
  %2147 = trunc i32 %2146 to i8
  %2148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2147, i8* %2148, align 1, !tbaa !2449
  %2149 = lshr i32 %2124, 31
  %2150 = lshr i32 %2120, 31
  %2151 = xor i32 %2150, %2149
  %2152 = xor i32 %2146, %2149
  %2153 = add nuw nsw i32 %2152, %2151
  %2154 = icmp eq i32 %2153, 2
  %2155 = zext i1 %2154 to i8
  %2156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2155, i8* %2156, align 1, !tbaa !2450
  %2157 = load i64, i64* %RBP
  %2158 = sub i64 %2157, 40
  %2159 = load i32, i32* %ESI
  %2160 = zext i32 %2159 to i64
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 3
  store i64 %2162, i64* %PC
  %2163 = inttoptr i64 %2158 to i32*
  store i32 %2159, i32* %2163
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 24
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 4
  store i64 %2167, i64* %PC
  %2168 = inttoptr i64 %2165 to i64*
  %2169 = load i64, i64* %2168
  store i64 %2169, i64* %RCX, align 8, !tbaa !2428
  %2170 = load i64, i64* %RBP
  %2171 = sub i64 %2170, 32
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 4
  store i64 %2173, i64* %PC
  %2174 = inttoptr i64 %2171 to i32*
  %2175 = load i32, i32* %2174
  %2176 = sext i32 %2175 to i64
  store i64 %2176, i64* %RDX, align 8, !tbaa !2428
  %2177 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2178 = load i64, i64* %RCX
  %2179 = load i64, i64* %RDX
  %2180 = mul i64 %2179, 8
  %2181 = add i64 %2180, %2178
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 5
  store i64 %2183, i64* %PC
  %2184 = inttoptr i64 %2181 to double*
  %2185 = load double, double* %2184
  %2186 = bitcast i8* %2177 to double*
  store double %2185, double* %2186, align 1, !tbaa !2452
  %2187 = getelementptr inbounds i8, i8* %2177, i64 8
  %2188 = bitcast i8* %2187 to double*
  store double 0.000000e+00, double* %2188, align 1, !tbaa !2452
  %2189 = load i64, i64* %RBP
  %2190 = sub i64 %2189, 64
  %2191 = bitcast %union.vec128_t* %XMM0 to i8*
  %2192 = load i64, i64* %PC
  %2193 = add i64 %2192, 5
  store i64 %2193, i64* %PC
  %2194 = bitcast i8* %2191 to double*
  %2195 = load double, double* %2194, align 1
  %2196 = inttoptr i64 %2190 to double*
  store double %2195, double* %2196
  %2197 = load i64, i64* %RBP
  %2198 = sub i64 %2197, 24
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 4
  store i64 %2200, i64* %PC
  %2201 = inttoptr i64 %2198 to i64*
  %2202 = load i64, i64* %2201
  store i64 %2202, i64* %RCX, align 8, !tbaa !2428
  %2203 = load i64, i64* %RBP
  %2204 = sub i64 %2203, 32
  %2205 = load i64, i64* %PC
  %2206 = add i64 %2205, 3
  store i64 %2206, i64* %PC
  %2207 = inttoptr i64 %2204 to i32*
  %2208 = load i32, i32* %2207
  %2209 = zext i32 %2208 to i64
  store i64 %2209, i64* %RAX, align 8, !tbaa !2428
  %2210 = load i64, i64* %RAX
  %2211 = load i64, i64* %PC
  %2212 = add i64 %2211, 3
  store i64 %2212, i64* %PC
  %2213 = trunc i64 %2210 to i32
  %2214 = add i32 1, %2213
  %2215 = zext i32 %2214 to i64
  store i64 %2215, i64* %RAX, align 8, !tbaa !2428
  %2216 = icmp ult i32 %2214, %2213
  %2217 = icmp ult i32 %2214, 1
  %2218 = or i1 %2216, %2217
  %2219 = zext i1 %2218 to i8
  %2220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2219, i8* %2220, align 1, !tbaa !2432
  %2221 = and i32 %2214, 255
  %2222 = call i32 @llvm.ctpop.i32(i32 %2221) #17
  %2223 = trunc i32 %2222 to i8
  %2224 = and i8 %2223, 1
  %2225 = xor i8 %2224, 1
  %2226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2225, i8* %2226, align 1, !tbaa !2446
  %2227 = xor i64 1, %2210
  %2228 = trunc i64 %2227 to i32
  %2229 = xor i32 %2228, %2214
  %2230 = lshr i32 %2229, 4
  %2231 = trunc i32 %2230 to i8
  %2232 = and i8 %2231, 1
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2232, i8* %2233, align 1, !tbaa !2447
  %2234 = icmp eq i32 %2214, 0
  %2235 = zext i1 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2235, i8* %2236, align 1, !tbaa !2448
  %2237 = lshr i32 %2214, 31
  %2238 = trunc i32 %2237 to i8
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2238, i8* %2239, align 1, !tbaa !2449
  %2240 = lshr i32 %2213, 31
  %2241 = xor i32 %2237, %2240
  %2242 = add nuw nsw i32 %2241, %2237
  %2243 = icmp eq i32 %2242, 2
  %2244 = zext i1 %2243 to i8
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2244, i8* %2245, align 1, !tbaa !2450
  %2246 = load i32, i32* %EAX
  %2247 = zext i32 %2246 to i64
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC
  %2250 = shl i64 %2247, 32
  %2251 = ashr exact i64 %2250, 32
  store i64 %2251, i64* %RDX, align 8, !tbaa !2428
  %2252 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2253 = load i64, i64* %RCX
  %2254 = load i64, i64* %RDX
  %2255 = mul i64 %2254, 8
  %2256 = add i64 %2255, %2253
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 5
  store i64 %2258, i64* %PC
  %2259 = inttoptr i64 %2256 to double*
  %2260 = load double, double* %2259
  %2261 = bitcast i8* %2252 to double*
  store double %2260, double* %2261, align 1, !tbaa !2452
  %2262 = getelementptr inbounds i8, i8* %2252, i64 8
  %2263 = bitcast i8* %2262 to double*
  store double 0.000000e+00, double* %2263, align 1, !tbaa !2452
  %2264 = load i64, i64* %RBP
  %2265 = sub i64 %2264, 72
  %2266 = bitcast %union.vec128_t* %XMM0 to i8*
  %2267 = load i64, i64* %PC
  %2268 = add i64 %2267, 5
  store i64 %2268, i64* %PC
  %2269 = bitcast i8* %2266 to double*
  %2270 = load double, double* %2269, align 1
  %2271 = inttoptr i64 %2265 to double*
  store double %2270, double* %2271
  %2272 = load i64, i64* %RBP
  %2273 = sub i64 %2272, 24
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 4
  store i64 %2275, i64* %PC
  %2276 = inttoptr i64 %2273 to i64*
  %2277 = load i64, i64* %2276
  store i64 %2277, i64* %RCX, align 8, !tbaa !2428
  %2278 = load i64, i64* %RBP
  %2279 = sub i64 %2278, 40
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 4
  store i64 %2281, i64* %PC
  %2282 = inttoptr i64 %2279 to i32*
  %2283 = load i32, i32* %2282
  %2284 = sext i32 %2283 to i64
  store i64 %2284, i64* %RDX, align 8, !tbaa !2428
  %2285 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2286 = load i64, i64* %RCX
  %2287 = load i64, i64* %RDX
  %2288 = mul i64 %2287, 8
  %2289 = add i64 %2288, %2286
  %2290 = load i64, i64* %PC
  %2291 = add i64 %2290, 5
  store i64 %2291, i64* %PC
  %2292 = inttoptr i64 %2289 to double*
  %2293 = load double, double* %2292
  %2294 = bitcast i8* %2285 to double*
  store double %2293, double* %2294, align 1, !tbaa !2452
  %2295 = getelementptr inbounds i8, i8* %2285, i64 8
  %2296 = bitcast i8* %2295 to double*
  store double 0.000000e+00, double* %2296, align 1, !tbaa !2452
  %2297 = load i64, i64* %RBP
  %2298 = sub i64 %2297, 80
  %2299 = bitcast %union.vec128_t* %XMM0 to i8*
  %2300 = load i64, i64* %PC
  %2301 = add i64 %2300, 5
  store i64 %2301, i64* %PC
  %2302 = bitcast i8* %2299 to double*
  %2303 = load double, double* %2302, align 1
  %2304 = inttoptr i64 %2298 to double*
  store double %2303, double* %2304
  %2305 = load i64, i64* %RBP
  %2306 = sub i64 %2305, 24
  %2307 = load i64, i64* %PC
  %2308 = add i64 %2307, 4
  store i64 %2308, i64* %PC
  %2309 = inttoptr i64 %2306 to i64*
  %2310 = load i64, i64* %2309
  store i64 %2310, i64* %RCX, align 8, !tbaa !2428
  %2311 = load i64, i64* %RBP
  %2312 = sub i64 %2311, 40
  %2313 = load i64, i64* %PC
  %2314 = add i64 %2313, 3
  store i64 %2314, i64* %PC
  %2315 = inttoptr i64 %2312 to i32*
  %2316 = load i32, i32* %2315
  %2317 = zext i32 %2316 to i64
  store i64 %2317, i64* %RAX, align 8, !tbaa !2428
  %2318 = load i64, i64* %RAX
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 3
  store i64 %2320, i64* %PC
  %2321 = trunc i64 %2318 to i32
  %2322 = add i32 1, %2321
  %2323 = zext i32 %2322 to i64
  store i64 %2323, i64* %RAX, align 8, !tbaa !2428
  %2324 = icmp ult i32 %2322, %2321
  %2325 = icmp ult i32 %2322, 1
  %2326 = or i1 %2324, %2325
  %2327 = zext i1 %2326 to i8
  %2328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2327, i8* %2328, align 1, !tbaa !2432
  %2329 = and i32 %2322, 255
  %2330 = call i32 @llvm.ctpop.i32(i32 %2329) #17
  %2331 = trunc i32 %2330 to i8
  %2332 = and i8 %2331, 1
  %2333 = xor i8 %2332, 1
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2333, i8* %2334, align 1, !tbaa !2446
  %2335 = xor i64 1, %2318
  %2336 = trunc i64 %2335 to i32
  %2337 = xor i32 %2336, %2322
  %2338 = lshr i32 %2337, 4
  %2339 = trunc i32 %2338 to i8
  %2340 = and i8 %2339, 1
  %2341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2340, i8* %2341, align 1, !tbaa !2447
  %2342 = icmp eq i32 %2322, 0
  %2343 = zext i1 %2342 to i8
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2343, i8* %2344, align 1, !tbaa !2448
  %2345 = lshr i32 %2322, 31
  %2346 = trunc i32 %2345 to i8
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2346, i8* %2347, align 1, !tbaa !2449
  %2348 = lshr i32 %2321, 31
  %2349 = xor i32 %2345, %2348
  %2350 = add nuw nsw i32 %2349, %2345
  %2351 = icmp eq i32 %2350, 2
  %2352 = zext i1 %2351 to i8
  %2353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2352, i8* %2353, align 1, !tbaa !2450
  %2354 = load i32, i32* %EAX
  %2355 = zext i32 %2354 to i64
  %2356 = load i64, i64* %PC
  %2357 = add i64 %2356, 3
  store i64 %2357, i64* %PC
  %2358 = shl i64 %2355, 32
  %2359 = ashr exact i64 %2358, 32
  store i64 %2359, i64* %RDX, align 8, !tbaa !2428
  %2360 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2361 = load i64, i64* %RCX
  %2362 = load i64, i64* %RDX
  %2363 = mul i64 %2362, 8
  %2364 = add i64 %2363, %2361
  %2365 = load i64, i64* %PC
  %2366 = add i64 %2365, 5
  store i64 %2366, i64* %PC
  %2367 = inttoptr i64 %2364 to double*
  %2368 = load double, double* %2367
  %2369 = bitcast i8* %2360 to double*
  store double %2368, double* %2369, align 1, !tbaa !2452
  %2370 = getelementptr inbounds i8, i8* %2360, i64 8
  %2371 = bitcast i8* %2370 to double*
  store double 0.000000e+00, double* %2371, align 1, !tbaa !2452
  %2372 = load i64, i64* %RBP
  %2373 = sub i64 %2372, 88
  %2374 = bitcast %union.vec128_t* %XMM0 to i8*
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 5
  store i64 %2376, i64* %PC
  %2377 = bitcast i8* %2374 to double*
  %2378 = load double, double* %2377, align 1
  %2379 = inttoptr i64 %2373 to double*
  store double %2378, double* %2379
  %2380 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2381 = load i64, i64* %RBP
  %2382 = sub i64 %2381, 80
  %2383 = load i64, i64* %PC
  %2384 = add i64 %2383, 5
  store i64 %2384, i64* %PC
  %2385 = inttoptr i64 %2382 to double*
  %2386 = load double, double* %2385
  %2387 = bitcast i8* %2380 to double*
  store double %2386, double* %2387, align 1, !tbaa !2452
  %2388 = getelementptr inbounds i8, i8* %2380, i64 8
  %2389 = bitcast i8* %2388 to double*
  store double 0.000000e+00, double* %2389, align 1, !tbaa !2452
  %2390 = load i64, i64* %RBP
  %2391 = sub i64 %2390, 24
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 4
  store i64 %2393, i64* %PC
  %2394 = inttoptr i64 %2391 to i64*
  %2395 = load i64, i64* %2394
  store i64 %2395, i64* %RCX, align 8, !tbaa !2428
  %2396 = load i64, i64* %RBP
  %2397 = sub i64 %2396, 32
  %2398 = load i64, i64* %PC
  %2399 = add i64 %2398, 4
  store i64 %2399, i64* %PC
  %2400 = inttoptr i64 %2397 to i32*
  %2401 = load i32, i32* %2400
  %2402 = sext i32 %2401 to i64
  store i64 %2402, i64* %RDX, align 8, !tbaa !2428
  %2403 = load i64, i64* %RCX
  %2404 = load i64, i64* %RDX
  %2405 = mul i64 %2404, 8
  %2406 = add i64 %2405, %2403
  %2407 = bitcast %union.vec128_t* %XMM0 to i8*
  %2408 = load i64, i64* %PC
  %2409 = add i64 %2408, 5
  store i64 %2409, i64* %PC
  %2410 = bitcast i8* %2407 to double*
  %2411 = load double, double* %2410, align 1
  %2412 = inttoptr i64 %2406 to double*
  store double %2411, double* %2412
  %2413 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2414 = load i64, i64* %RBP
  %2415 = sub i64 %2414, 88
  %2416 = load i64, i64* %PC
  %2417 = add i64 %2416, 5
  store i64 %2417, i64* %PC
  %2418 = inttoptr i64 %2415 to double*
  %2419 = load double, double* %2418
  %2420 = bitcast i8* %2413 to double*
  store double %2419, double* %2420, align 1, !tbaa !2452
  %2421 = getelementptr inbounds i8, i8* %2413, i64 8
  %2422 = bitcast i8* %2421 to double*
  store double 0.000000e+00, double* %2422, align 1, !tbaa !2452
  %2423 = load i64, i64* %RBP
  %2424 = sub i64 %2423, 24
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 4
  store i64 %2426, i64* %PC
  %2427 = inttoptr i64 %2424 to i64*
  %2428 = load i64, i64* %2427
  store i64 %2428, i64* %RCX, align 8, !tbaa !2428
  %2429 = load i64, i64* %RBP
  %2430 = sub i64 %2429, 32
  %2431 = load i64, i64* %PC
  %2432 = add i64 %2431, 3
  store i64 %2432, i64* %PC
  %2433 = inttoptr i64 %2430 to i32*
  %2434 = load i32, i32* %2433
  %2435 = zext i32 %2434 to i64
  store i64 %2435, i64* %RAX, align 8, !tbaa !2428
  %2436 = load i64, i64* %RAX
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 3
  store i64 %2438, i64* %PC
  %2439 = trunc i64 %2436 to i32
  %2440 = add i32 1, %2439
  %2441 = zext i32 %2440 to i64
  store i64 %2441, i64* %RAX, align 8, !tbaa !2428
  %2442 = icmp ult i32 %2440, %2439
  %2443 = icmp ult i32 %2440, 1
  %2444 = or i1 %2442, %2443
  %2445 = zext i1 %2444 to i8
  %2446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2445, i8* %2446, align 1, !tbaa !2432
  %2447 = and i32 %2440, 255
  %2448 = call i32 @llvm.ctpop.i32(i32 %2447) #17
  %2449 = trunc i32 %2448 to i8
  %2450 = and i8 %2449, 1
  %2451 = xor i8 %2450, 1
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2451, i8* %2452, align 1, !tbaa !2446
  %2453 = xor i64 1, %2436
  %2454 = trunc i64 %2453 to i32
  %2455 = xor i32 %2454, %2440
  %2456 = lshr i32 %2455, 4
  %2457 = trunc i32 %2456 to i8
  %2458 = and i8 %2457, 1
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2458, i8* %2459, align 1, !tbaa !2447
  %2460 = icmp eq i32 %2440, 0
  %2461 = zext i1 %2460 to i8
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2461, i8* %2462, align 1, !tbaa !2448
  %2463 = lshr i32 %2440, 31
  %2464 = trunc i32 %2463 to i8
  %2465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2464, i8* %2465, align 1, !tbaa !2449
  %2466 = lshr i32 %2439, 31
  %2467 = xor i32 %2463, %2466
  %2468 = add nuw nsw i32 %2467, %2463
  %2469 = icmp eq i32 %2468, 2
  %2470 = zext i1 %2469 to i8
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2470, i8* %2471, align 1, !tbaa !2450
  %2472 = load i32, i32* %EAX
  %2473 = zext i32 %2472 to i64
  %2474 = load i64, i64* %PC
  %2475 = add i64 %2474, 3
  store i64 %2475, i64* %PC
  %2476 = shl i64 %2473, 32
  %2477 = ashr exact i64 %2476, 32
  store i64 %2477, i64* %RDX, align 8, !tbaa !2428
  %2478 = load i64, i64* %RCX
  %2479 = load i64, i64* %RDX
  %2480 = mul i64 %2479, 8
  %2481 = add i64 %2480, %2478
  %2482 = bitcast %union.vec128_t* %XMM0 to i8*
  %2483 = load i64, i64* %PC
  %2484 = add i64 %2483, 5
  store i64 %2484, i64* %PC
  %2485 = bitcast i8* %2482 to double*
  %2486 = load double, double* %2485, align 1
  %2487 = inttoptr i64 %2481 to double*
  store double %2486, double* %2487
  %2488 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2489 = load i64, i64* %RBP
  %2490 = sub i64 %2489, 64
  %2491 = load i64, i64* %PC
  %2492 = add i64 %2491, 5
  store i64 %2492, i64* %PC
  %2493 = inttoptr i64 %2490 to double*
  %2494 = load double, double* %2493
  %2495 = bitcast i8* %2488 to double*
  store double %2494, double* %2495, align 1, !tbaa !2452
  %2496 = getelementptr inbounds i8, i8* %2488, i64 8
  %2497 = bitcast i8* %2496 to double*
  store double 0.000000e+00, double* %2497, align 1, !tbaa !2452
  %2498 = load i64, i64* %RBP
  %2499 = sub i64 %2498, 24
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 4
  store i64 %2501, i64* %PC
  %2502 = inttoptr i64 %2499 to i64*
  %2503 = load i64, i64* %2502
  store i64 %2503, i64* %RCX, align 8, !tbaa !2428
  %2504 = load i64, i64* %RBP
  %2505 = sub i64 %2504, 40
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 4
  store i64 %2507, i64* %PC
  %2508 = inttoptr i64 %2505 to i32*
  %2509 = load i32, i32* %2508
  %2510 = sext i32 %2509 to i64
  store i64 %2510, i64* %RDX, align 8, !tbaa !2428
  %2511 = load i64, i64* %RCX
  %2512 = load i64, i64* %RDX
  %2513 = mul i64 %2512, 8
  %2514 = add i64 %2513, %2511
  %2515 = bitcast %union.vec128_t* %XMM0 to i8*
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 5
  store i64 %2517, i64* %PC
  %2518 = bitcast i8* %2515 to double*
  %2519 = load double, double* %2518, align 1
  %2520 = inttoptr i64 %2514 to double*
  store double %2519, double* %2520
  %2521 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2522 = load i64, i64* %RBP
  %2523 = sub i64 %2522, 72
  %2524 = load i64, i64* %PC
  %2525 = add i64 %2524, 5
  store i64 %2525, i64* %PC
  %2526 = inttoptr i64 %2523 to double*
  %2527 = load double, double* %2526
  %2528 = bitcast i8* %2521 to double*
  store double %2527, double* %2528, align 1, !tbaa !2452
  %2529 = getelementptr inbounds i8, i8* %2521, i64 8
  %2530 = bitcast i8* %2529 to double*
  store double 0.000000e+00, double* %2530, align 1, !tbaa !2452
  %2531 = load i64, i64* %RBP
  %2532 = sub i64 %2531, 24
  %2533 = load i64, i64* %PC
  %2534 = add i64 %2533, 4
  store i64 %2534, i64* %PC
  %2535 = inttoptr i64 %2532 to i64*
  %2536 = load i64, i64* %2535
  store i64 %2536, i64* %RCX, align 8, !tbaa !2428
  %2537 = load i64, i64* %RBP
  %2538 = sub i64 %2537, 40
  %2539 = load i64, i64* %PC
  %2540 = add i64 %2539, 3
  store i64 %2540, i64* %PC
  %2541 = inttoptr i64 %2538 to i32*
  %2542 = load i32, i32* %2541
  %2543 = zext i32 %2542 to i64
  store i64 %2543, i64* %RAX, align 8, !tbaa !2428
  %2544 = load i64, i64* %RAX
  %2545 = load i64, i64* %PC
  %2546 = add i64 %2545, 3
  store i64 %2546, i64* %PC
  %2547 = trunc i64 %2544 to i32
  %2548 = add i32 1, %2547
  %2549 = zext i32 %2548 to i64
  store i64 %2549, i64* %RAX, align 8, !tbaa !2428
  %2550 = icmp ult i32 %2548, %2547
  %2551 = icmp ult i32 %2548, 1
  %2552 = or i1 %2550, %2551
  %2553 = zext i1 %2552 to i8
  %2554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2553, i8* %2554, align 1, !tbaa !2432
  %2555 = and i32 %2548, 255
  %2556 = call i32 @llvm.ctpop.i32(i32 %2555) #17
  %2557 = trunc i32 %2556 to i8
  %2558 = and i8 %2557, 1
  %2559 = xor i8 %2558, 1
  %2560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2559, i8* %2560, align 1, !tbaa !2446
  %2561 = xor i64 1, %2544
  %2562 = trunc i64 %2561 to i32
  %2563 = xor i32 %2562, %2548
  %2564 = lshr i32 %2563, 4
  %2565 = trunc i32 %2564 to i8
  %2566 = and i8 %2565, 1
  %2567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2566, i8* %2567, align 1, !tbaa !2447
  %2568 = icmp eq i32 %2548, 0
  %2569 = zext i1 %2568 to i8
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2569, i8* %2570, align 1, !tbaa !2448
  %2571 = lshr i32 %2548, 31
  %2572 = trunc i32 %2571 to i8
  %2573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2572, i8* %2573, align 1, !tbaa !2449
  %2574 = lshr i32 %2547, 31
  %2575 = xor i32 %2571, %2574
  %2576 = add nuw nsw i32 %2575, %2571
  %2577 = icmp eq i32 %2576, 2
  %2578 = zext i1 %2577 to i8
  %2579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2578, i8* %2579, align 1, !tbaa !2450
  %2580 = load i32, i32* %EAX
  %2581 = zext i32 %2580 to i64
  %2582 = load i64, i64* %PC
  %2583 = add i64 %2582, 3
  store i64 %2583, i64* %PC
  %2584 = shl i64 %2581, 32
  %2585 = ashr exact i64 %2584, 32
  store i64 %2585, i64* %RDX, align 8, !tbaa !2428
  %2586 = load i64, i64* %RCX
  %2587 = load i64, i64* %RDX
  %2588 = mul i64 %2587, 8
  %2589 = add i64 %2588, %2586
  %2590 = bitcast %union.vec128_t* %XMM0 to i8*
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 5
  store i64 %2592, i64* %PC
  %2593 = bitcast i8* %2590 to double*
  %2594 = load double, double* %2593, align 1
  %2595 = inttoptr i64 %2589 to double*
  store double %2594, double* %2595
  %2596 = load i64, i64* %RBP
  %2597 = sub i64 %2596, 52
  %2598 = load i64, i64* %PC
  %2599 = add i64 %2598, 3
  store i64 %2599, i64* %PC
  %2600 = inttoptr i64 %2597 to i32*
  %2601 = load i32, i32* %2600
  %2602 = zext i32 %2601 to i64
  store i64 %2602, i64* %RAX, align 8, !tbaa !2428
  %2603 = load i64, i64* %RAX
  %2604 = load i64, i64* %RBP
  %2605 = sub i64 %2604, 32
  %2606 = load i64, i64* %PC
  %2607 = add i64 %2606, 3
  store i64 %2607, i64* %PC
  %2608 = trunc i64 %2603 to i32
  %2609 = inttoptr i64 %2605 to i32*
  %2610 = load i32, i32* %2609
  %2611 = add i32 %2610, %2608
  %2612 = zext i32 %2611 to i64
  store i64 %2612, i64* %RAX, align 8, !tbaa !2428
  %2613 = icmp ult i32 %2611, %2608
  %2614 = icmp ult i32 %2611, %2610
  %2615 = or i1 %2613, %2614
  %2616 = zext i1 %2615 to i8
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2616, i8* %2617, align 1, !tbaa !2432
  %2618 = and i32 %2611, 255
  %2619 = call i32 @llvm.ctpop.i32(i32 %2618) #17
  %2620 = trunc i32 %2619 to i8
  %2621 = and i8 %2620, 1
  %2622 = xor i8 %2621, 1
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2622, i8* %2623, align 1, !tbaa !2446
  %2624 = xor i32 %2610, %2608
  %2625 = xor i32 %2624, %2611
  %2626 = lshr i32 %2625, 4
  %2627 = trunc i32 %2626 to i8
  %2628 = and i8 %2627, 1
  %2629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2628, i8* %2629, align 1, !tbaa !2447
  %2630 = icmp eq i32 %2611, 0
  %2631 = zext i1 %2630 to i8
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2631, i8* %2632, align 1, !tbaa !2448
  %2633 = lshr i32 %2611, 31
  %2634 = trunc i32 %2633 to i8
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2634, i8* %2635, align 1, !tbaa !2449
  %2636 = lshr i32 %2608, 31
  %2637 = lshr i32 %2610, 31
  %2638 = xor i32 %2633, %2636
  %2639 = xor i32 %2633, %2637
  %2640 = add nuw nsw i32 %2638, %2639
  %2641 = icmp eq i32 %2640, 2
  %2642 = zext i1 %2641 to i8
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2642, i8* %2643, align 1, !tbaa !2450
  %2644 = load i64, i64* %RBP
  %2645 = sub i64 %2644, 32
  %2646 = load i32, i32* %EAX
  %2647 = zext i32 %2646 to i64
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 3
  store i64 %2649, i64* %PC
  %2650 = inttoptr i64 %2645 to i32*
  store i32 %2646, i32* %2650
  %2651 = load i64, i64* %RBP
  %2652 = sub i64 %2651, 52
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 3
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to i32*
  %2656 = load i32, i32* %2655
  %2657 = zext i32 %2656 to i64
  store i64 %2657, i64* %RAX, align 8, !tbaa !2428
  %2658 = load i64, i64* %RAX
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 3
  store i64 %2660, i64* %PC
  %2661 = trunc i64 %2658 to i32
  %2662 = shl i32 %2661, 1
  %2663 = icmp slt i32 %2661, 0
  %2664 = icmp slt i32 %2662, 0
  %2665 = xor i1 %2663, %2664
  %2666 = zext i32 %2662 to i64
  store i64 %2666, i64* %RAX, align 8, !tbaa !2428
  %2667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2668 = zext i1 %2663 to i8
  store i8 %2668, i8* %2667, align 1, !tbaa !2451
  %2669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2670 = and i32 %2662, 254
  %2671 = call i32 @llvm.ctpop.i32(i32 %2670) #17
  %2672 = trunc i32 %2671 to i8
  %2673 = and i8 %2672, 1
  %2674 = xor i8 %2673, 1
  store i8 %2674, i8* %2669, align 1, !tbaa !2451
  %2675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2675, align 1, !tbaa !2451
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2677 = icmp eq i32 %2662, 0
  %2678 = zext i1 %2677 to i8
  store i8 %2678, i8* %2676, align 1, !tbaa !2451
  %2679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2680 = lshr i32 %2662, 31
  %2681 = trunc i32 %2680 to i8
  store i8 %2681, i8* %2679, align 1, !tbaa !2451
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2683 = zext i1 %2665 to i8
  store i8 %2683, i8* %2682, align 1, !tbaa !2451
  %2684 = load i64, i64* %RAX
  %2685 = load i64, i64* %RBP
  %2686 = sub i64 %2685, 40
  %2687 = load i64, i64* %PC
  %2688 = add i64 %2687, 3
  store i64 %2688, i64* %PC
  %2689 = trunc i64 %2684 to i32
  %2690 = inttoptr i64 %2686 to i32*
  %2691 = load i32, i32* %2690
  %2692 = add i32 %2691, %2689
  %2693 = zext i32 %2692 to i64
  store i64 %2693, i64* %RAX, align 8, !tbaa !2428
  %2694 = icmp ult i32 %2692, %2689
  %2695 = icmp ult i32 %2692, %2691
  %2696 = or i1 %2694, %2695
  %2697 = zext i1 %2696 to i8
  %2698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2697, i8* %2698, align 1, !tbaa !2432
  %2699 = and i32 %2692, 255
  %2700 = call i32 @llvm.ctpop.i32(i32 %2699) #17
  %2701 = trunc i32 %2700 to i8
  %2702 = and i8 %2701, 1
  %2703 = xor i8 %2702, 1
  %2704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2703, i8* %2704, align 1, !tbaa !2446
  %2705 = xor i32 %2691, %2689
  %2706 = xor i32 %2705, %2692
  %2707 = lshr i32 %2706, 4
  %2708 = trunc i32 %2707 to i8
  %2709 = and i8 %2708, 1
  %2710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2709, i8* %2710, align 1, !tbaa !2447
  %2711 = icmp eq i32 %2692, 0
  %2712 = zext i1 %2711 to i8
  %2713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2712, i8* %2713, align 1, !tbaa !2448
  %2714 = lshr i32 %2692, 31
  %2715 = trunc i32 %2714 to i8
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2715, i8* %2716, align 1, !tbaa !2449
  %2717 = lshr i32 %2689, 31
  %2718 = lshr i32 %2691, 31
  %2719 = xor i32 %2714, %2717
  %2720 = xor i32 %2714, %2718
  %2721 = add nuw nsw i32 %2719, %2720
  %2722 = icmp eq i32 %2721, 2
  %2723 = zext i1 %2722 to i8
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2723, i8* %2724, align 1, !tbaa !2450
  %2725 = load i64, i64* %RBP
  %2726 = sub i64 %2725, 40
  %2727 = load i32, i32* %EAX
  %2728 = zext i32 %2727 to i64
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 3
  store i64 %2730, i64* %PC
  %2731 = inttoptr i64 %2726 to i32*
  store i32 %2727, i32* %2731
  %2732 = load i64, i64* %RBP
  %2733 = sub i64 %2732, 24
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 4
  store i64 %2735, i64* %PC
  %2736 = inttoptr i64 %2733 to i64*
  %2737 = load i64, i64* %2736
  store i64 %2737, i64* %RCX, align 8, !tbaa !2428
  %2738 = load i64, i64* %RBP
  %2739 = sub i64 %2738, 32
  %2740 = load i64, i64* %PC
  %2741 = add i64 %2740, 4
  store i64 %2741, i64* %PC
  %2742 = inttoptr i64 %2739 to i32*
  %2743 = load i32, i32* %2742
  %2744 = sext i32 %2743 to i64
  store i64 %2744, i64* %RDX, align 8, !tbaa !2428
  %2745 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2746 = load i64, i64* %RCX
  %2747 = load i64, i64* %RDX
  %2748 = mul i64 %2747, 8
  %2749 = add i64 %2748, %2746
  %2750 = load i64, i64* %PC
  %2751 = add i64 %2750, 5
  store i64 %2751, i64* %PC
  %2752 = inttoptr i64 %2749 to double*
  %2753 = load double, double* %2752
  %2754 = bitcast i8* %2745 to double*
  store double %2753, double* %2754, align 1, !tbaa !2452
  %2755 = getelementptr inbounds i8, i8* %2745, i64 8
  %2756 = bitcast i8* %2755 to double*
  store double 0.000000e+00, double* %2756, align 1, !tbaa !2452
  %2757 = load i64, i64* %RBP
  %2758 = sub i64 %2757, 64
  %2759 = bitcast %union.vec128_t* %XMM0 to i8*
  %2760 = load i64, i64* %PC
  %2761 = add i64 %2760, 5
  store i64 %2761, i64* %PC
  %2762 = bitcast i8* %2759 to double*
  %2763 = load double, double* %2762, align 1
  %2764 = inttoptr i64 %2758 to double*
  store double %2763, double* %2764
  %2765 = load i64, i64* %RBP
  %2766 = sub i64 %2765, 24
  %2767 = load i64, i64* %PC
  %2768 = add i64 %2767, 4
  store i64 %2768, i64* %PC
  %2769 = inttoptr i64 %2766 to i64*
  %2770 = load i64, i64* %2769
  store i64 %2770, i64* %RCX, align 8, !tbaa !2428
  %2771 = load i64, i64* %RBP
  %2772 = sub i64 %2771, 32
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 3
  store i64 %2774, i64* %PC
  %2775 = inttoptr i64 %2772 to i32*
  %2776 = load i32, i32* %2775
  %2777 = zext i32 %2776 to i64
  store i64 %2777, i64* %RAX, align 8, !tbaa !2428
  %2778 = load i64, i64* %RAX
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 3
  store i64 %2780, i64* %PC
  %2781 = trunc i64 %2778 to i32
  %2782 = add i32 1, %2781
  %2783 = zext i32 %2782 to i64
  store i64 %2783, i64* %RAX, align 8, !tbaa !2428
  %2784 = icmp ult i32 %2782, %2781
  %2785 = icmp ult i32 %2782, 1
  %2786 = or i1 %2784, %2785
  %2787 = zext i1 %2786 to i8
  %2788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2787, i8* %2788, align 1, !tbaa !2432
  %2789 = and i32 %2782, 255
  %2790 = call i32 @llvm.ctpop.i32(i32 %2789) #17
  %2791 = trunc i32 %2790 to i8
  %2792 = and i8 %2791, 1
  %2793 = xor i8 %2792, 1
  %2794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2793, i8* %2794, align 1, !tbaa !2446
  %2795 = xor i64 1, %2778
  %2796 = trunc i64 %2795 to i32
  %2797 = xor i32 %2796, %2782
  %2798 = lshr i32 %2797, 4
  %2799 = trunc i32 %2798 to i8
  %2800 = and i8 %2799, 1
  %2801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2800, i8* %2801, align 1, !tbaa !2447
  %2802 = icmp eq i32 %2782, 0
  %2803 = zext i1 %2802 to i8
  %2804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2803, i8* %2804, align 1, !tbaa !2448
  %2805 = lshr i32 %2782, 31
  %2806 = trunc i32 %2805 to i8
  %2807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2806, i8* %2807, align 1, !tbaa !2449
  %2808 = lshr i32 %2781, 31
  %2809 = xor i32 %2805, %2808
  %2810 = add nuw nsw i32 %2809, %2805
  %2811 = icmp eq i32 %2810, 2
  %2812 = zext i1 %2811 to i8
  %2813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2812, i8* %2813, align 1, !tbaa !2450
  %2814 = load i32, i32* %EAX
  %2815 = zext i32 %2814 to i64
  %2816 = load i64, i64* %PC
  %2817 = add i64 %2816, 3
  store i64 %2817, i64* %PC
  %2818 = shl i64 %2815, 32
  %2819 = ashr exact i64 %2818, 32
  store i64 %2819, i64* %RDX, align 8, !tbaa !2428
  %2820 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2821 = load i64, i64* %RCX
  %2822 = load i64, i64* %RDX
  %2823 = mul i64 %2822, 8
  %2824 = add i64 %2823, %2821
  %2825 = load i64, i64* %PC
  %2826 = add i64 %2825, 5
  store i64 %2826, i64* %PC
  %2827 = inttoptr i64 %2824 to double*
  %2828 = load double, double* %2827
  %2829 = bitcast i8* %2820 to double*
  store double %2828, double* %2829, align 1, !tbaa !2452
  %2830 = getelementptr inbounds i8, i8* %2820, i64 8
  %2831 = bitcast i8* %2830 to double*
  store double 0.000000e+00, double* %2831, align 1, !tbaa !2452
  %2832 = load i64, i64* %RBP
  %2833 = sub i64 %2832, 72
  %2834 = bitcast %union.vec128_t* %XMM0 to i8*
  %2835 = load i64, i64* %PC
  %2836 = add i64 %2835, 5
  store i64 %2836, i64* %PC
  %2837 = bitcast i8* %2834 to double*
  %2838 = load double, double* %2837, align 1
  %2839 = inttoptr i64 %2833 to double*
  store double %2838, double* %2839
  %2840 = load i64, i64* %RBP
  %2841 = sub i64 %2840, 24
  %2842 = load i64, i64* %PC
  %2843 = add i64 %2842, 4
  store i64 %2843, i64* %PC
  %2844 = inttoptr i64 %2841 to i64*
  %2845 = load i64, i64* %2844
  store i64 %2845, i64* %RCX, align 8, !tbaa !2428
  %2846 = load i64, i64* %RBP
  %2847 = sub i64 %2846, 40
  %2848 = load i64, i64* %PC
  %2849 = add i64 %2848, 4
  store i64 %2849, i64* %PC
  %2850 = inttoptr i64 %2847 to i32*
  %2851 = load i32, i32* %2850
  %2852 = sext i32 %2851 to i64
  store i64 %2852, i64* %RDX, align 8, !tbaa !2428
  %2853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2854 = load i64, i64* %RCX
  %2855 = load i64, i64* %RDX
  %2856 = mul i64 %2855, 8
  %2857 = add i64 %2856, %2854
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 5
  store i64 %2859, i64* %PC
  %2860 = inttoptr i64 %2857 to double*
  %2861 = load double, double* %2860
  %2862 = bitcast i8* %2853 to double*
  store double %2861, double* %2862, align 1, !tbaa !2452
  %2863 = getelementptr inbounds i8, i8* %2853, i64 8
  %2864 = bitcast i8* %2863 to double*
  store double 0.000000e+00, double* %2864, align 1, !tbaa !2452
  %2865 = load i64, i64* %RBP
  %2866 = sub i64 %2865, 80
  %2867 = bitcast %union.vec128_t* %XMM0 to i8*
  %2868 = load i64, i64* %PC
  %2869 = add i64 %2868, 5
  store i64 %2869, i64* %PC
  %2870 = bitcast i8* %2867 to double*
  %2871 = load double, double* %2870, align 1
  %2872 = inttoptr i64 %2866 to double*
  store double %2871, double* %2872
  %2873 = load i64, i64* %RBP
  %2874 = sub i64 %2873, 24
  %2875 = load i64, i64* %PC
  %2876 = add i64 %2875, 4
  store i64 %2876, i64* %PC
  %2877 = inttoptr i64 %2874 to i64*
  %2878 = load i64, i64* %2877
  store i64 %2878, i64* %RCX, align 8, !tbaa !2428
  %2879 = load i64, i64* %RBP
  %2880 = sub i64 %2879, 40
  %2881 = load i64, i64* %PC
  %2882 = add i64 %2881, 3
  store i64 %2882, i64* %PC
  %2883 = inttoptr i64 %2880 to i32*
  %2884 = load i32, i32* %2883
  %2885 = zext i32 %2884 to i64
  store i64 %2885, i64* %RAX, align 8, !tbaa !2428
  %2886 = load i64, i64* %RAX
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 3
  store i64 %2888, i64* %PC
  %2889 = trunc i64 %2886 to i32
  %2890 = add i32 1, %2889
  %2891 = zext i32 %2890 to i64
  store i64 %2891, i64* %RAX, align 8, !tbaa !2428
  %2892 = icmp ult i32 %2890, %2889
  %2893 = icmp ult i32 %2890, 1
  %2894 = or i1 %2892, %2893
  %2895 = zext i1 %2894 to i8
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2895, i8* %2896, align 1, !tbaa !2432
  %2897 = and i32 %2890, 255
  %2898 = call i32 @llvm.ctpop.i32(i32 %2897) #17
  %2899 = trunc i32 %2898 to i8
  %2900 = and i8 %2899, 1
  %2901 = xor i8 %2900, 1
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2901, i8* %2902, align 1, !tbaa !2446
  %2903 = xor i64 1, %2886
  %2904 = trunc i64 %2903 to i32
  %2905 = xor i32 %2904, %2890
  %2906 = lshr i32 %2905, 4
  %2907 = trunc i32 %2906 to i8
  %2908 = and i8 %2907, 1
  %2909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2908, i8* %2909, align 1, !tbaa !2447
  %2910 = icmp eq i32 %2890, 0
  %2911 = zext i1 %2910 to i8
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2911, i8* %2912, align 1, !tbaa !2448
  %2913 = lshr i32 %2890, 31
  %2914 = trunc i32 %2913 to i8
  %2915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2914, i8* %2915, align 1, !tbaa !2449
  %2916 = lshr i32 %2889, 31
  %2917 = xor i32 %2913, %2916
  %2918 = add nuw nsw i32 %2917, %2913
  %2919 = icmp eq i32 %2918, 2
  %2920 = zext i1 %2919 to i8
  %2921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2920, i8* %2921, align 1, !tbaa !2450
  %2922 = load i32, i32* %EAX
  %2923 = zext i32 %2922 to i64
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 3
  store i64 %2925, i64* %PC
  %2926 = shl i64 %2923, 32
  %2927 = ashr exact i64 %2926, 32
  store i64 %2927, i64* %RDX, align 8, !tbaa !2428
  %2928 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2929 = load i64, i64* %RCX
  %2930 = load i64, i64* %RDX
  %2931 = mul i64 %2930, 8
  %2932 = add i64 %2931, %2929
  %2933 = load i64, i64* %PC
  %2934 = add i64 %2933, 5
  store i64 %2934, i64* %PC
  %2935 = inttoptr i64 %2932 to double*
  %2936 = load double, double* %2935
  %2937 = bitcast i8* %2928 to double*
  store double %2936, double* %2937, align 1, !tbaa !2452
  %2938 = getelementptr inbounds i8, i8* %2928, i64 8
  %2939 = bitcast i8* %2938 to double*
  store double 0.000000e+00, double* %2939, align 1, !tbaa !2452
  %2940 = load i64, i64* %RBP
  %2941 = sub i64 %2940, 88
  %2942 = bitcast %union.vec128_t* %XMM0 to i8*
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 5
  store i64 %2944, i64* %PC
  %2945 = bitcast i8* %2942 to double*
  %2946 = load double, double* %2945, align 1
  %2947 = inttoptr i64 %2941 to double*
  store double %2946, double* %2947
  %2948 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2949 = load i64, i64* %RBP
  %2950 = sub i64 %2949, 80
  %2951 = load i64, i64* %PC
  %2952 = add i64 %2951, 5
  store i64 %2952, i64* %PC
  %2953 = inttoptr i64 %2950 to double*
  %2954 = load double, double* %2953
  %2955 = bitcast i8* %2948 to double*
  store double %2954, double* %2955, align 1, !tbaa !2452
  %2956 = getelementptr inbounds i8, i8* %2948, i64 8
  %2957 = bitcast i8* %2956 to double*
  store double 0.000000e+00, double* %2957, align 1, !tbaa !2452
  %2958 = load i64, i64* %RBP
  %2959 = sub i64 %2958, 24
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 4
  store i64 %2961, i64* %PC
  %2962 = inttoptr i64 %2959 to i64*
  %2963 = load i64, i64* %2962
  store i64 %2963, i64* %RCX, align 8, !tbaa !2428
  %2964 = load i64, i64* %RBP
  %2965 = sub i64 %2964, 32
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 4
  store i64 %2967, i64* %PC
  %2968 = inttoptr i64 %2965 to i32*
  %2969 = load i32, i32* %2968
  %2970 = sext i32 %2969 to i64
  store i64 %2970, i64* %RDX, align 8, !tbaa !2428
  %2971 = load i64, i64* %RCX
  %2972 = load i64, i64* %RDX
  %2973 = mul i64 %2972, 8
  %2974 = add i64 %2973, %2971
  %2975 = bitcast %union.vec128_t* %XMM0 to i8*
  %2976 = load i64, i64* %PC
  %2977 = add i64 %2976, 5
  store i64 %2977, i64* %PC
  %2978 = bitcast i8* %2975 to double*
  %2979 = load double, double* %2978, align 1
  %2980 = inttoptr i64 %2974 to double*
  store double %2979, double* %2980
  %2981 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2982 = load i64, i64* %RBP
  %2983 = sub i64 %2982, 88
  %2984 = load i64, i64* %PC
  %2985 = add i64 %2984, 5
  store i64 %2985, i64* %PC
  %2986 = inttoptr i64 %2983 to double*
  %2987 = load double, double* %2986
  %2988 = bitcast i8* %2981 to double*
  store double %2987, double* %2988, align 1, !tbaa !2452
  %2989 = getelementptr inbounds i8, i8* %2981, i64 8
  %2990 = bitcast i8* %2989 to double*
  store double 0.000000e+00, double* %2990, align 1, !tbaa !2452
  %2991 = load i64, i64* %RBP
  %2992 = sub i64 %2991, 24
  %2993 = load i64, i64* %PC
  %2994 = add i64 %2993, 4
  store i64 %2994, i64* %PC
  %2995 = inttoptr i64 %2992 to i64*
  %2996 = load i64, i64* %2995
  store i64 %2996, i64* %RCX, align 8, !tbaa !2428
  %2997 = load i64, i64* %RBP
  %2998 = sub i64 %2997, 32
  %2999 = load i64, i64* %PC
  %3000 = add i64 %2999, 3
  store i64 %3000, i64* %PC
  %3001 = inttoptr i64 %2998 to i32*
  %3002 = load i32, i32* %3001
  %3003 = zext i32 %3002 to i64
  store i64 %3003, i64* %RAX, align 8, !tbaa !2428
  %3004 = load i64, i64* %RAX
  %3005 = load i64, i64* %PC
  %3006 = add i64 %3005, 3
  store i64 %3006, i64* %PC
  %3007 = trunc i64 %3004 to i32
  %3008 = add i32 1, %3007
  %3009 = zext i32 %3008 to i64
  store i64 %3009, i64* %RAX, align 8, !tbaa !2428
  %3010 = icmp ult i32 %3008, %3007
  %3011 = icmp ult i32 %3008, 1
  %3012 = or i1 %3010, %3011
  %3013 = zext i1 %3012 to i8
  %3014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3013, i8* %3014, align 1, !tbaa !2432
  %3015 = and i32 %3008, 255
  %3016 = call i32 @llvm.ctpop.i32(i32 %3015) #17
  %3017 = trunc i32 %3016 to i8
  %3018 = and i8 %3017, 1
  %3019 = xor i8 %3018, 1
  %3020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3019, i8* %3020, align 1, !tbaa !2446
  %3021 = xor i64 1, %3004
  %3022 = trunc i64 %3021 to i32
  %3023 = xor i32 %3022, %3008
  %3024 = lshr i32 %3023, 4
  %3025 = trunc i32 %3024 to i8
  %3026 = and i8 %3025, 1
  %3027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3026, i8* %3027, align 1, !tbaa !2447
  %3028 = icmp eq i32 %3008, 0
  %3029 = zext i1 %3028 to i8
  %3030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3029, i8* %3030, align 1, !tbaa !2448
  %3031 = lshr i32 %3008, 31
  %3032 = trunc i32 %3031 to i8
  %3033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3032, i8* %3033, align 1, !tbaa !2449
  %3034 = lshr i32 %3007, 31
  %3035 = xor i32 %3031, %3034
  %3036 = add nuw nsw i32 %3035, %3031
  %3037 = icmp eq i32 %3036, 2
  %3038 = zext i1 %3037 to i8
  %3039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3038, i8* %3039, align 1, !tbaa !2450
  %3040 = load i32, i32* %EAX
  %3041 = zext i32 %3040 to i64
  %3042 = load i64, i64* %PC
  %3043 = add i64 %3042, 3
  store i64 %3043, i64* %PC
  %3044 = shl i64 %3041, 32
  %3045 = ashr exact i64 %3044, 32
  store i64 %3045, i64* %RDX, align 8, !tbaa !2428
  %3046 = load i64, i64* %RCX
  %3047 = load i64, i64* %RDX
  %3048 = mul i64 %3047, 8
  %3049 = add i64 %3048, %3046
  %3050 = bitcast %union.vec128_t* %XMM0 to i8*
  %3051 = load i64, i64* %PC
  %3052 = add i64 %3051, 5
  store i64 %3052, i64* %PC
  %3053 = bitcast i8* %3050 to double*
  %3054 = load double, double* %3053, align 1
  %3055 = inttoptr i64 %3049 to double*
  store double %3054, double* %3055
  %3056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3057 = load i64, i64* %RBP
  %3058 = sub i64 %3057, 64
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 5
  store i64 %3060, i64* %PC
  %3061 = inttoptr i64 %3058 to double*
  %3062 = load double, double* %3061
  %3063 = bitcast i8* %3056 to double*
  store double %3062, double* %3063, align 1, !tbaa !2452
  %3064 = getelementptr inbounds i8, i8* %3056, i64 8
  %3065 = bitcast i8* %3064 to double*
  store double 0.000000e+00, double* %3065, align 1, !tbaa !2452
  %3066 = load i64, i64* %RBP
  %3067 = sub i64 %3066, 24
  %3068 = load i64, i64* %PC
  %3069 = add i64 %3068, 4
  store i64 %3069, i64* %PC
  %3070 = inttoptr i64 %3067 to i64*
  %3071 = load i64, i64* %3070
  store i64 %3071, i64* %RCX, align 8, !tbaa !2428
  %3072 = load i64, i64* %RBP
  %3073 = sub i64 %3072, 40
  %3074 = load i64, i64* %PC
  %3075 = add i64 %3074, 4
  store i64 %3075, i64* %PC
  %3076 = inttoptr i64 %3073 to i32*
  %3077 = load i32, i32* %3076
  %3078 = sext i32 %3077 to i64
  store i64 %3078, i64* %RDX, align 8, !tbaa !2428
  %3079 = load i64, i64* %RCX
  %3080 = load i64, i64* %RDX
  %3081 = mul i64 %3080, 8
  %3082 = add i64 %3081, %3079
  %3083 = bitcast %union.vec128_t* %XMM0 to i8*
  %3084 = load i64, i64* %PC
  %3085 = add i64 %3084, 5
  store i64 %3085, i64* %PC
  %3086 = bitcast i8* %3083 to double*
  %3087 = load double, double* %3086, align 1
  %3088 = inttoptr i64 %3082 to double*
  store double %3087, double* %3088
  %3089 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3090 = load i64, i64* %RBP
  %3091 = sub i64 %3090, 72
  %3092 = load i64, i64* %PC
  %3093 = add i64 %3092, 5
  store i64 %3093, i64* %PC
  %3094 = inttoptr i64 %3091 to double*
  %3095 = load double, double* %3094
  %3096 = bitcast i8* %3089 to double*
  store double %3095, double* %3096, align 1, !tbaa !2452
  %3097 = getelementptr inbounds i8, i8* %3089, i64 8
  %3098 = bitcast i8* %3097 to double*
  store double 0.000000e+00, double* %3098, align 1, !tbaa !2452
  %3099 = load i64, i64* %RBP
  %3100 = sub i64 %3099, 24
  %3101 = load i64, i64* %PC
  %3102 = add i64 %3101, 4
  store i64 %3102, i64* %PC
  %3103 = inttoptr i64 %3100 to i64*
  %3104 = load i64, i64* %3103
  store i64 %3104, i64* %RCX, align 8, !tbaa !2428
  %3105 = load i64, i64* %RBP
  %3106 = sub i64 %3105, 40
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 3
  store i64 %3108, i64* %PC
  %3109 = inttoptr i64 %3106 to i32*
  %3110 = load i32, i32* %3109
  %3111 = zext i32 %3110 to i64
  store i64 %3111, i64* %RAX, align 8, !tbaa !2428
  %3112 = load i64, i64* %RAX
  %3113 = load i64, i64* %PC
  %3114 = add i64 %3113, 3
  store i64 %3114, i64* %PC
  %3115 = trunc i64 %3112 to i32
  %3116 = add i32 1, %3115
  %3117 = zext i32 %3116 to i64
  store i64 %3117, i64* %RAX, align 8, !tbaa !2428
  %3118 = icmp ult i32 %3116, %3115
  %3119 = icmp ult i32 %3116, 1
  %3120 = or i1 %3118, %3119
  %3121 = zext i1 %3120 to i8
  %3122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3121, i8* %3122, align 1, !tbaa !2432
  %3123 = and i32 %3116, 255
  %3124 = call i32 @llvm.ctpop.i32(i32 %3123) #17
  %3125 = trunc i32 %3124 to i8
  %3126 = and i8 %3125, 1
  %3127 = xor i8 %3126, 1
  %3128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3127, i8* %3128, align 1, !tbaa !2446
  %3129 = xor i64 1, %3112
  %3130 = trunc i64 %3129 to i32
  %3131 = xor i32 %3130, %3116
  %3132 = lshr i32 %3131, 4
  %3133 = trunc i32 %3132 to i8
  %3134 = and i8 %3133, 1
  %3135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3134, i8* %3135, align 1, !tbaa !2447
  %3136 = icmp eq i32 %3116, 0
  %3137 = zext i1 %3136 to i8
  %3138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3137, i8* %3138, align 1, !tbaa !2448
  %3139 = lshr i32 %3116, 31
  %3140 = trunc i32 %3139 to i8
  %3141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3140, i8* %3141, align 1, !tbaa !2449
  %3142 = lshr i32 %3115, 31
  %3143 = xor i32 %3139, %3142
  %3144 = add nuw nsw i32 %3143, %3139
  %3145 = icmp eq i32 %3144, 2
  %3146 = zext i1 %3145 to i8
  %3147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3146, i8* %3147, align 1, !tbaa !2450
  %3148 = load i32, i32* %EAX
  %3149 = zext i32 %3148 to i64
  %3150 = load i64, i64* %PC
  %3151 = add i64 %3150, 3
  store i64 %3151, i64* %PC
  %3152 = shl i64 %3149, 32
  %3153 = ashr exact i64 %3152, 32
  store i64 %3153, i64* %RDX, align 8, !tbaa !2428
  %3154 = load i64, i64* %RCX
  %3155 = load i64, i64* %RDX
  %3156 = mul i64 %3155, 8
  %3157 = add i64 %3156, %3154
  %3158 = bitcast %union.vec128_t* %XMM0 to i8*
  %3159 = load i64, i64* %PC
  %3160 = add i64 %3159, 5
  store i64 %3160, i64* %PC
  %3161 = bitcast i8* %3158 to double*
  %3162 = load double, double* %3161, align 1
  %3163 = inttoptr i64 %3157 to double*
  store double %3162, double* %3163
  %3164 = load i64, i64* %RBP
  %3165 = sub i64 %3164, 28
  %3166 = load i64, i64* %PC
  %3167 = add i64 %3166, 3
  store i64 %3167, i64* %PC
  %3168 = inttoptr i64 %3165 to i32*
  %3169 = load i32, i32* %3168
  %3170 = zext i32 %3169 to i64
  store i64 %3170, i64* %RAX, align 8, !tbaa !2428
  %3171 = load i64, i64* %RAX
  %3172 = load i64, i64* %PC
  %3173 = add i64 %3172, 3
  store i64 %3173, i64* %PC
  %3174 = trunc i64 %3171 to i32
  %3175 = add i32 1, %3174
  %3176 = zext i32 %3175 to i64
  store i64 %3176, i64* %RAX, align 8, !tbaa !2428
  %3177 = icmp ult i32 %3175, %3174
  %3178 = icmp ult i32 %3175, 1
  %3179 = or i1 %3177, %3178
  %3180 = zext i1 %3179 to i8
  %3181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3180, i8* %3181, align 1, !tbaa !2432
  %3182 = and i32 %3175, 255
  %3183 = call i32 @llvm.ctpop.i32(i32 %3182) #17
  %3184 = trunc i32 %3183 to i8
  %3185 = and i8 %3184, 1
  %3186 = xor i8 %3185, 1
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3186, i8* %3187, align 1, !tbaa !2446
  %3188 = xor i64 1, %3171
  %3189 = trunc i64 %3188 to i32
  %3190 = xor i32 %3189, %3175
  %3191 = lshr i32 %3190, 4
  %3192 = trunc i32 %3191 to i8
  %3193 = and i8 %3192, 1
  %3194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3193, i8* %3194, align 1, !tbaa !2447
  %3195 = icmp eq i32 %3175, 0
  %3196 = zext i1 %3195 to i8
  %3197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3196, i8* %3197, align 1, !tbaa !2448
  %3198 = lshr i32 %3175, 31
  %3199 = trunc i32 %3198 to i8
  %3200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3199, i8* %3200, align 1, !tbaa !2449
  %3201 = lshr i32 %3174, 31
  %3202 = xor i32 %3198, %3201
  %3203 = add nuw nsw i32 %3202, %3198
  %3204 = icmp eq i32 %3203, 2
  %3205 = zext i1 %3204 to i8
  %3206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3205, i8* %3206, align 1, !tbaa !2450
  %3207 = load i64, i64* %RBP
  %3208 = sub i64 %3207, 28
  %3209 = load i32, i32* %EAX
  %3210 = zext i32 %3209 to i64
  %3211 = load i64, i64* %PC
  %3212 = add i64 %3211, 3
  store i64 %3212, i64* %PC
  %3213 = inttoptr i64 %3208 to i32*
  store i32 %3209, i32* %3213
  %3214 = load i64, i64* %PC
  %3215 = sub i64 %3214, 779
  %3216 = load i64, i64* %PC
  %3217 = add i64 %3216, 5
  store i64 %3217, i64* %PC
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3215, i64* %3218, align 8, !tbaa !2428
  br label %block_4012ad

block_401235:                                     ; preds = %block_401241, %block_401225
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.6, %block_401225 ], [ %MEMORY.1, %block_401241 ]
  %3219 = load i64, i64* %RBP
  %3220 = sub i64 %3219, 28
  %3221 = load i64, i64* %PC
  %3222 = add i64 %3221, 3
  store i64 %3222, i64* %PC
  %3223 = inttoptr i64 %3220 to i32*
  %3224 = load i32, i32* %3223
  %3225 = zext i32 %3224 to i64
  store i64 %3225, i64* %RAX, align 8, !tbaa !2428
  %3226 = load i32, i32* %EAX
  %3227 = zext i32 %3226 to i64
  %3228 = load i64, i64* %RBP
  %3229 = sub i64 %3228, 48
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 3
  store i64 %3231, i64* %PC
  %3232 = inttoptr i64 %3229 to i32*
  %3233 = load i32, i32* %3232
  %3234 = sub i32 %3226, %3233
  %3235 = icmp ult i32 %3226, %3233
  %3236 = zext i1 %3235 to i8
  %3237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3236, i8* %3237, align 1, !tbaa !2432
  %3238 = and i32 %3234, 255
  %3239 = call i32 @llvm.ctpop.i32(i32 %3238) #17
  %3240 = trunc i32 %3239 to i8
  %3241 = and i8 %3240, 1
  %3242 = xor i8 %3241, 1
  %3243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3242, i8* %3243, align 1, !tbaa !2446
  %3244 = xor i32 %3233, %3226
  %3245 = xor i32 %3244, %3234
  %3246 = lshr i32 %3245, 4
  %3247 = trunc i32 %3246 to i8
  %3248 = and i8 %3247, 1
  %3249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3248, i8* %3249, align 1, !tbaa !2447
  %3250 = icmp eq i32 %3234, 0
  %3251 = zext i1 %3250 to i8
  %3252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3251, i8* %3252, align 1, !tbaa !2448
  %3253 = lshr i32 %3234, 31
  %3254 = trunc i32 %3253 to i8
  %3255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3254, i8* %3255, align 1, !tbaa !2449
  %3256 = lshr i32 %3226, 31
  %3257 = lshr i32 %3233, 31
  %3258 = xor i32 %3257, %3256
  %3259 = xor i32 %3253, %3256
  %3260 = add nuw nsw i32 %3259, %3258
  %3261 = icmp eq i32 %3260, 2
  %3262 = zext i1 %3261 to i8
  %3263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3262, i8* %3263, align 1, !tbaa !2450
  %3264 = load i64, i64* %PC
  %3265 = add i64 %3264, 50
  %3266 = load i64, i64* %PC
  %3267 = add i64 %3266, 6
  %3268 = load i64, i64* %PC
  %3269 = add i64 %3268, 6
  store i64 %3269, i64* %PC
  %3270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3271 = load i8, i8* %3270, align 1, !tbaa !2449
  %3272 = icmp ne i8 %3271, 0
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3274 = load i8, i8* %3273, align 1, !tbaa !2450
  %3275 = icmp ne i8 %3274, 0
  %3276 = xor i1 %3272, %3275
  %3277 = xor i1 %3276, true
  %3278 = zext i1 %3277 to i8
  store i8 %3278, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3280 = select i1 %3276, i64 %3267, i64 %3265
  store i64 %3280, i64* %3279, align 8, !tbaa !2428
  %3281 = load i8, i8* %BRANCH_TAKEN
  %3282 = icmp eq i8 %3281, 1
  %3283 = load i64, i64* %RBP
  br i1 %3282, label %block_40126d, label %block_401241

block_4012ad:                                     ; preds = %block_4012a6, %block_4012b9
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.5, %block_4012a6 ], [ %MEMORY.2, %block_4012b9 ]
  %3284 = load i64, i64* %RBP
  %3285 = sub i64 %3284, 28
  %3286 = load i64, i64* %PC
  %3287 = add i64 %3286, 3
  store i64 %3287, i64* %PC
  %3288 = inttoptr i64 %3285 to i32*
  %3289 = load i32, i32* %3288
  %3290 = zext i32 %3289 to i64
  store i64 %3290, i64* %RAX, align 8, !tbaa !2428
  %3291 = load i32, i32* %EAX
  %3292 = zext i32 %3291 to i64
  %3293 = load i64, i64* %RBP
  %3294 = sub i64 %3293, 36
  %3295 = load i64, i64* %PC
  %3296 = add i64 %3295, 3
  store i64 %3296, i64* %PC
  %3297 = inttoptr i64 %3294 to i32*
  %3298 = load i32, i32* %3297
  %3299 = sub i32 %3291, %3298
  %3300 = icmp ult i32 %3291, %3298
  %3301 = zext i1 %3300 to i8
  %3302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3301, i8* %3302, align 1, !tbaa !2432
  %3303 = and i32 %3299, 255
  %3304 = call i32 @llvm.ctpop.i32(i32 %3303) #17
  %3305 = trunc i32 %3304 to i8
  %3306 = and i8 %3305, 1
  %3307 = xor i8 %3306, 1
  %3308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3307, i8* %3308, align 1, !tbaa !2446
  %3309 = xor i32 %3298, %3291
  %3310 = xor i32 %3309, %3299
  %3311 = lshr i32 %3310, 4
  %3312 = trunc i32 %3311 to i8
  %3313 = and i8 %3312, 1
  %3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3313, i8* %3314, align 1, !tbaa !2447
  %3315 = icmp eq i32 %3299, 0
  %3316 = zext i1 %3315 to i8
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3316, i8* %3317, align 1, !tbaa !2448
  %3318 = lshr i32 %3299, 31
  %3319 = trunc i32 %3318 to i8
  %3320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3319, i8* %3320, align 1, !tbaa !2449
  %3321 = lshr i32 %3291, 31
  %3322 = lshr i32 %3298, 31
  %3323 = xor i32 %3322, %3321
  %3324 = xor i32 %3318, %3321
  %3325 = add nuw nsw i32 %3324, %3323
  %3326 = icmp eq i32 %3325, 2
  %3327 = zext i1 %3326 to i8
  %3328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3327, i8* %3328, align 1, !tbaa !2450
  %3329 = load i64, i64* %PC
  %3330 = add i64 %3329, 778
  %3331 = load i64, i64* %PC
  %3332 = add i64 %3331, 6
  %3333 = load i64, i64* %PC
  %3334 = add i64 %3333, 6
  store i64 %3334, i64* %PC
  %3335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3336 = load i8, i8* %3335, align 1, !tbaa !2449
  %3337 = icmp ne i8 %3336, 0
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3339 = load i8, i8* %3338, align 1, !tbaa !2450
  %3340 = icmp ne i8 %3339, 0
  %3341 = xor i1 %3337, %3340
  %3342 = xor i1 %3341, true
  %3343 = zext i1 %3342 to i8
  store i8 %3343, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3345 = select i1 %3341, i64 %3332, i64 %3330
  store i64 %3345, i64* %3344, align 8, !tbaa !2428
  %3346 = load i8, i8* %BRANCH_TAKEN
  %3347 = icmp eq i8 %3346, 1
  %3348 = load i64, i64* %RBP
  br i1 %3347, label %block_4015bd, label %block_4012b9

block_4016ba:                                     ; preds = %block_4016ae
  %3349 = load i64, i64* %RBP
  %3350 = sub i64 %3349, 28
  %3351 = load i64, i64* %PC
  %3352 = add i64 %3351, 3
  store i64 %3352, i64* %PC
  %3353 = inttoptr i64 %3350 to i32*
  %3354 = load i32, i32* %3353
  %3355 = zext i32 %3354 to i64
  store i64 %3355, i64* %RAX, align 8, !tbaa !2428
  %3356 = load i64, i64* %RAX
  %3357 = load i64, i64* %PC
  %3358 = add i64 %3357, 3
  store i64 %3358, i64* %PC
  %3359 = trunc i64 %3356 to i32
  %3360 = shl i32 %3359, 1
  %3361 = icmp slt i32 %3359, 0
  %3362 = icmp slt i32 %3360, 0
  %3363 = xor i1 %3361, %3362
  %3364 = zext i32 %3360 to i64
  store i64 %3364, i64* %RAX, align 8, !tbaa !2428
  %3365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3366 = zext i1 %3361 to i8
  store i8 %3366, i8* %3365, align 1, !tbaa !2451
  %3367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3368 = and i32 %3360, 254
  %3369 = call i32 @llvm.ctpop.i32(i32 %3368) #17
  %3370 = trunc i32 %3369 to i8
  %3371 = and i8 %3370, 1
  %3372 = xor i8 %3371, 1
  store i8 %3372, i8* %3367, align 1, !tbaa !2451
  %3373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3373, align 1, !tbaa !2451
  %3374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3375 = icmp eq i32 %3360, 0
  %3376 = zext i1 %3375 to i8
  store i8 %3376, i8* %3374, align 1, !tbaa !2451
  %3377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3378 = lshr i32 %3360, 31
  %3379 = trunc i32 %3378 to i8
  store i8 %3379, i8* %3377, align 1, !tbaa !2451
  %3380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3381 = zext i1 %3363 to i8
  store i8 %3381, i8* %3380, align 1, !tbaa !2451
  %3382 = load i64, i64* %RBP
  %3383 = sub i64 %3382, 16
  %3384 = load i64, i64* %PC
  %3385 = add i64 %3384, 4
  store i64 %3385, i64* %PC
  %3386 = inttoptr i64 %3383 to i64*
  %3387 = load i64, i64* %3386
  store i64 %3387, i64* %RCX, align 8, !tbaa !2428
  %3388 = load i64, i64* %RBP
  %3389 = sub i64 %3388, 36
  %3390 = load i64, i64* %PC
  %3391 = add i64 %3390, 4
  store i64 %3391, i64* %PC
  %3392 = inttoptr i64 %3389 to i32*
  %3393 = load i32, i32* %3392
  %3394 = sext i32 %3393 to i64
  store i64 %3394, i64* %RDX, align 8, !tbaa !2428
  %3395 = load i64, i64* %RAX
  %3396 = load i64, i64* %RCX
  %3397 = load i64, i64* %RDX
  %3398 = mul i64 %3397, 4
  %3399 = add i64 %3398, %3396
  %3400 = load i64, i64* %PC
  %3401 = add i64 %3400, 3
  store i64 %3401, i64* %PC
  %3402 = trunc i64 %3395 to i32
  %3403 = inttoptr i64 %3399 to i32*
  %3404 = load i32, i32* %3403
  %3405 = add i32 %3404, %3402
  %3406 = zext i32 %3405 to i64
  store i64 %3406, i64* %RAX, align 8, !tbaa !2428
  %3407 = icmp ult i32 %3405, %3402
  %3408 = icmp ult i32 %3405, %3404
  %3409 = or i1 %3407, %3408
  %3410 = zext i1 %3409 to i8
  %3411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3410, i8* %3411, align 1, !tbaa !2432
  %3412 = and i32 %3405, 255
  %3413 = call i32 @llvm.ctpop.i32(i32 %3412) #17
  %3414 = trunc i32 %3413 to i8
  %3415 = and i8 %3414, 1
  %3416 = xor i8 %3415, 1
  %3417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3416, i8* %3417, align 1, !tbaa !2446
  %3418 = xor i32 %3404, %3402
  %3419 = xor i32 %3418, %3405
  %3420 = lshr i32 %3419, 4
  %3421 = trunc i32 %3420 to i8
  %3422 = and i8 %3421, 1
  %3423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3422, i8* %3423, align 1, !tbaa !2447
  %3424 = icmp eq i32 %3405, 0
  %3425 = zext i1 %3424 to i8
  %3426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3425, i8* %3426, align 1, !tbaa !2448
  %3427 = lshr i32 %3405, 31
  %3428 = trunc i32 %3427 to i8
  %3429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3428, i8* %3429, align 1, !tbaa !2449
  %3430 = lshr i32 %3402, 31
  %3431 = lshr i32 %3404, 31
  %3432 = xor i32 %3427, %3430
  %3433 = xor i32 %3427, %3431
  %3434 = add nuw nsw i32 %3432, %3433
  %3435 = icmp eq i32 %3434, 2
  %3436 = zext i1 %3435 to i8
  %3437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3436, i8* %3437, align 1, !tbaa !2450
  %3438 = load i64, i64* %RBP
  %3439 = sub i64 %3438, 32
  %3440 = load i32, i32* %EAX
  %3441 = zext i32 %3440 to i64
  %3442 = load i64, i64* %PC
  %3443 = add i64 %3442, 3
  store i64 %3443, i64* %PC
  %3444 = inttoptr i64 %3439 to i32*
  store i32 %3440, i32* %3444
  %3445 = load i64, i64* %RBP
  %3446 = sub i64 %3445, 36
  %3447 = load i64, i64* %PC
  %3448 = add i64 %3447, 3
  store i64 %3448, i64* %PC
  %3449 = inttoptr i64 %3446 to i32*
  %3450 = load i32, i32* %3449
  %3451 = zext i32 %3450 to i64
  store i64 %3451, i64* %RAX, align 8, !tbaa !2428
  %3452 = load i64, i64* %RAX
  %3453 = load i64, i64* %PC
  %3454 = add i64 %3453, 3
  store i64 %3454, i64* %PC
  %3455 = trunc i64 %3452 to i32
  %3456 = shl i32 %3455, 1
  %3457 = icmp slt i32 %3455, 0
  %3458 = icmp slt i32 %3456, 0
  %3459 = xor i1 %3457, %3458
  %3460 = zext i32 %3456 to i64
  store i64 %3460, i64* %RAX, align 8, !tbaa !2428
  %3461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3462 = zext i1 %3457 to i8
  store i8 %3462, i8* %3461, align 1, !tbaa !2451
  %3463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3464 = and i32 %3456, 254
  %3465 = call i32 @llvm.ctpop.i32(i32 %3464) #17
  %3466 = trunc i32 %3465 to i8
  %3467 = and i8 %3466, 1
  %3468 = xor i8 %3467, 1
  store i8 %3468, i8* %3463, align 1, !tbaa !2451
  %3469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3469, align 1, !tbaa !2451
  %3470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3471 = icmp eq i32 %3456, 0
  %3472 = zext i1 %3471 to i8
  store i8 %3472, i8* %3470, align 1, !tbaa !2451
  %3473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3474 = lshr i32 %3456, 31
  %3475 = trunc i32 %3474 to i8
  store i8 %3475, i8* %3473, align 1, !tbaa !2451
  %3476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3477 = zext i1 %3459 to i8
  store i8 %3477, i8* %3476, align 1, !tbaa !2451
  %3478 = load i64, i64* %RBP
  %3479 = sub i64 %3478, 16
  %3480 = load i64, i64* %PC
  %3481 = add i64 %3480, 4
  store i64 %3481, i64* %PC
  %3482 = inttoptr i64 %3479 to i64*
  %3483 = load i64, i64* %3482
  store i64 %3483, i64* %RCX, align 8, !tbaa !2428
  %3484 = load i64, i64* %RBP
  %3485 = sub i64 %3484, 28
  %3486 = load i64, i64* %PC
  %3487 = add i64 %3486, 4
  store i64 %3487, i64* %PC
  %3488 = inttoptr i64 %3485 to i32*
  %3489 = load i32, i32* %3488
  %3490 = sext i32 %3489 to i64
  store i64 %3490, i64* %RDX, align 8, !tbaa !2428
  %3491 = load i64, i64* %RAX
  %3492 = load i64, i64* %RCX
  %3493 = load i64, i64* %RDX
  %3494 = mul i64 %3493, 4
  %3495 = add i64 %3494, %3492
  %3496 = load i64, i64* %PC
  %3497 = add i64 %3496, 3
  store i64 %3497, i64* %PC
  %3498 = trunc i64 %3491 to i32
  %3499 = inttoptr i64 %3495 to i32*
  %3500 = load i32, i32* %3499
  %3501 = add i32 %3500, %3498
  %3502 = zext i32 %3501 to i64
  store i64 %3502, i64* %RAX, align 8, !tbaa !2428
  %3503 = icmp ult i32 %3501, %3498
  %3504 = icmp ult i32 %3501, %3500
  %3505 = or i1 %3503, %3504
  %3506 = zext i1 %3505 to i8
  %3507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3506, i8* %3507, align 1, !tbaa !2432
  %3508 = and i32 %3501, 255
  %3509 = call i32 @llvm.ctpop.i32(i32 %3508) #17
  %3510 = trunc i32 %3509 to i8
  %3511 = and i8 %3510, 1
  %3512 = xor i8 %3511, 1
  %3513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3512, i8* %3513, align 1, !tbaa !2446
  %3514 = xor i32 %3500, %3498
  %3515 = xor i32 %3514, %3501
  %3516 = lshr i32 %3515, 4
  %3517 = trunc i32 %3516 to i8
  %3518 = and i8 %3517, 1
  %3519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3518, i8* %3519, align 1, !tbaa !2447
  %3520 = icmp eq i32 %3501, 0
  %3521 = zext i1 %3520 to i8
  %3522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3521, i8* %3522, align 1, !tbaa !2448
  %3523 = lshr i32 %3501, 31
  %3524 = trunc i32 %3523 to i8
  %3525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3524, i8* %3525, align 1, !tbaa !2449
  %3526 = lshr i32 %3498, 31
  %3527 = lshr i32 %3500, 31
  %3528 = xor i32 %3523, %3526
  %3529 = xor i32 %3523, %3527
  %3530 = add nuw nsw i32 %3528, %3529
  %3531 = icmp eq i32 %3530, 2
  %3532 = zext i1 %3531 to i8
  %3533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3532, i8* %3533, align 1, !tbaa !2450
  %3534 = load i64, i64* %RBP
  %3535 = sub i64 %3534, 40
  %3536 = load i32, i32* %EAX
  %3537 = zext i32 %3536 to i64
  %3538 = load i64, i64* %PC
  %3539 = add i64 %3538, 3
  store i64 %3539, i64* %PC
  %3540 = inttoptr i64 %3535 to i32*
  store i32 %3536, i32* %3540
  %3541 = load i64, i64* %RBP
  %3542 = sub i64 %3541, 24
  %3543 = load i64, i64* %PC
  %3544 = add i64 %3543, 4
  store i64 %3544, i64* %PC
  %3545 = inttoptr i64 %3542 to i64*
  %3546 = load i64, i64* %3545
  store i64 %3546, i64* %RCX, align 8, !tbaa !2428
  %3547 = load i64, i64* %RBP
  %3548 = sub i64 %3547, 32
  %3549 = load i64, i64* %PC
  %3550 = add i64 %3549, 4
  store i64 %3550, i64* %PC
  %3551 = inttoptr i64 %3548 to i32*
  %3552 = load i32, i32* %3551
  %3553 = sext i32 %3552 to i64
  store i64 %3553, i64* %RDX, align 8, !tbaa !2428
  %3554 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3555 = load i64, i64* %RCX
  %3556 = load i64, i64* %RDX
  %3557 = mul i64 %3556, 8
  %3558 = add i64 %3557, %3555
  %3559 = load i64, i64* %PC
  %3560 = add i64 %3559, 5
  store i64 %3560, i64* %PC
  %3561 = inttoptr i64 %3558 to double*
  %3562 = load double, double* %3561
  %3563 = bitcast i8* %3554 to double*
  store double %3562, double* %3563, align 1, !tbaa !2452
  %3564 = getelementptr inbounds i8, i8* %3554, i64 8
  %3565 = bitcast i8* %3564 to double*
  store double 0.000000e+00, double* %3565, align 1, !tbaa !2452
  %3566 = load i64, i64* %RBP
  %3567 = sub i64 %3566, 64
  %3568 = bitcast %union.vec128_t* %XMM0 to i8*
  %3569 = load i64, i64* %PC
  %3570 = add i64 %3569, 5
  store i64 %3570, i64* %PC
  %3571 = bitcast i8* %3568 to double*
  %3572 = load double, double* %3571, align 1
  %3573 = inttoptr i64 %3567 to double*
  store double %3572, double* %3573
  %3574 = load i64, i64* %RBP
  %3575 = sub i64 %3574, 24
  %3576 = load i64, i64* %PC
  %3577 = add i64 %3576, 4
  store i64 %3577, i64* %PC
  %3578 = inttoptr i64 %3575 to i64*
  %3579 = load i64, i64* %3578
  store i64 %3579, i64* %RCX, align 8, !tbaa !2428
  %3580 = load i64, i64* %RBP
  %3581 = sub i64 %3580, 32
  %3582 = load i64, i64* %PC
  %3583 = add i64 %3582, 3
  store i64 %3583, i64* %PC
  %3584 = inttoptr i64 %3581 to i32*
  %3585 = load i32, i32* %3584
  %3586 = zext i32 %3585 to i64
  store i64 %3586, i64* %RAX, align 8, !tbaa !2428
  %3587 = load i64, i64* %RAX
  %3588 = load i64, i64* %PC
  %3589 = add i64 %3588, 3
  store i64 %3589, i64* %PC
  %3590 = trunc i64 %3587 to i32
  %3591 = add i32 1, %3590
  %3592 = zext i32 %3591 to i64
  store i64 %3592, i64* %RAX, align 8, !tbaa !2428
  %3593 = icmp ult i32 %3591, %3590
  %3594 = icmp ult i32 %3591, 1
  %3595 = or i1 %3593, %3594
  %3596 = zext i1 %3595 to i8
  %3597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3596, i8* %3597, align 1, !tbaa !2432
  %3598 = and i32 %3591, 255
  %3599 = call i32 @llvm.ctpop.i32(i32 %3598) #17
  %3600 = trunc i32 %3599 to i8
  %3601 = and i8 %3600, 1
  %3602 = xor i8 %3601, 1
  %3603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3602, i8* %3603, align 1, !tbaa !2446
  %3604 = xor i64 1, %3587
  %3605 = trunc i64 %3604 to i32
  %3606 = xor i32 %3605, %3591
  %3607 = lshr i32 %3606, 4
  %3608 = trunc i32 %3607 to i8
  %3609 = and i8 %3608, 1
  %3610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3609, i8* %3610, align 1, !tbaa !2447
  %3611 = icmp eq i32 %3591, 0
  %3612 = zext i1 %3611 to i8
  %3613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3612, i8* %3613, align 1, !tbaa !2448
  %3614 = lshr i32 %3591, 31
  %3615 = trunc i32 %3614 to i8
  %3616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3615, i8* %3616, align 1, !tbaa !2449
  %3617 = lshr i32 %3590, 31
  %3618 = xor i32 %3614, %3617
  %3619 = add nuw nsw i32 %3618, %3614
  %3620 = icmp eq i32 %3619, 2
  %3621 = zext i1 %3620 to i8
  %3622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3621, i8* %3622, align 1, !tbaa !2450
  %3623 = load i32, i32* %EAX
  %3624 = zext i32 %3623 to i64
  %3625 = load i64, i64* %PC
  %3626 = add i64 %3625, 3
  store i64 %3626, i64* %PC
  %3627 = shl i64 %3624, 32
  %3628 = ashr exact i64 %3627, 32
  store i64 %3628, i64* %RDX, align 8, !tbaa !2428
  %3629 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3630 = load i64, i64* %RCX
  %3631 = load i64, i64* %RDX
  %3632 = mul i64 %3631, 8
  %3633 = add i64 %3632, %3630
  %3634 = load i64, i64* %PC
  %3635 = add i64 %3634, 5
  store i64 %3635, i64* %PC
  %3636 = inttoptr i64 %3633 to double*
  %3637 = load double, double* %3636
  %3638 = bitcast i8* %3629 to double*
  store double %3637, double* %3638, align 1, !tbaa !2452
  %3639 = getelementptr inbounds i8, i8* %3629, i64 8
  %3640 = bitcast i8* %3639 to double*
  store double 0.000000e+00, double* %3640, align 1, !tbaa !2452
  %3641 = load i64, i64* %RBP
  %3642 = sub i64 %3641, 72
  %3643 = bitcast %union.vec128_t* %XMM0 to i8*
  %3644 = load i64, i64* %PC
  %3645 = add i64 %3644, 5
  store i64 %3645, i64* %PC
  %3646 = bitcast i8* %3643 to double*
  %3647 = load double, double* %3646, align 1
  %3648 = inttoptr i64 %3642 to double*
  store double %3647, double* %3648
  %3649 = load i64, i64* %RBP
  %3650 = sub i64 %3649, 24
  %3651 = load i64, i64* %PC
  %3652 = add i64 %3651, 4
  store i64 %3652, i64* %PC
  %3653 = inttoptr i64 %3650 to i64*
  %3654 = load i64, i64* %3653
  store i64 %3654, i64* %RCX, align 8, !tbaa !2428
  %3655 = load i64, i64* %RBP
  %3656 = sub i64 %3655, 40
  %3657 = load i64, i64* %PC
  %3658 = add i64 %3657, 4
  store i64 %3658, i64* %PC
  %3659 = inttoptr i64 %3656 to i32*
  %3660 = load i32, i32* %3659
  %3661 = sext i32 %3660 to i64
  store i64 %3661, i64* %RDX, align 8, !tbaa !2428
  %3662 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3663 = load i64, i64* %RCX
  %3664 = load i64, i64* %RDX
  %3665 = mul i64 %3664, 8
  %3666 = add i64 %3665, %3663
  %3667 = load i64, i64* %PC
  %3668 = add i64 %3667, 5
  store i64 %3668, i64* %PC
  %3669 = inttoptr i64 %3666 to double*
  %3670 = load double, double* %3669
  %3671 = bitcast i8* %3662 to double*
  store double %3670, double* %3671, align 1, !tbaa !2452
  %3672 = getelementptr inbounds i8, i8* %3662, i64 8
  %3673 = bitcast i8* %3672 to double*
  store double 0.000000e+00, double* %3673, align 1, !tbaa !2452
  %3674 = load i64, i64* %RBP
  %3675 = sub i64 %3674, 80
  %3676 = bitcast %union.vec128_t* %XMM0 to i8*
  %3677 = load i64, i64* %PC
  %3678 = add i64 %3677, 5
  store i64 %3678, i64* %PC
  %3679 = bitcast i8* %3676 to double*
  %3680 = load double, double* %3679, align 1
  %3681 = inttoptr i64 %3675 to double*
  store double %3680, double* %3681
  %3682 = load i64, i64* %RBP
  %3683 = sub i64 %3682, 24
  %3684 = load i64, i64* %PC
  %3685 = add i64 %3684, 4
  store i64 %3685, i64* %PC
  %3686 = inttoptr i64 %3683 to i64*
  %3687 = load i64, i64* %3686
  store i64 %3687, i64* %RCX, align 8, !tbaa !2428
  %3688 = load i64, i64* %RBP
  %3689 = sub i64 %3688, 40
  %3690 = load i64, i64* %PC
  %3691 = add i64 %3690, 3
  store i64 %3691, i64* %PC
  %3692 = inttoptr i64 %3689 to i32*
  %3693 = load i32, i32* %3692
  %3694 = zext i32 %3693 to i64
  store i64 %3694, i64* %RAX, align 8, !tbaa !2428
  %3695 = load i64, i64* %RAX
  %3696 = load i64, i64* %PC
  %3697 = add i64 %3696, 3
  store i64 %3697, i64* %PC
  %3698 = trunc i64 %3695 to i32
  %3699 = add i32 1, %3698
  %3700 = zext i32 %3699 to i64
  store i64 %3700, i64* %RAX, align 8, !tbaa !2428
  %3701 = icmp ult i32 %3699, %3698
  %3702 = icmp ult i32 %3699, 1
  %3703 = or i1 %3701, %3702
  %3704 = zext i1 %3703 to i8
  %3705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3704, i8* %3705, align 1, !tbaa !2432
  %3706 = and i32 %3699, 255
  %3707 = call i32 @llvm.ctpop.i32(i32 %3706) #17
  %3708 = trunc i32 %3707 to i8
  %3709 = and i8 %3708, 1
  %3710 = xor i8 %3709, 1
  %3711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3710, i8* %3711, align 1, !tbaa !2446
  %3712 = xor i64 1, %3695
  %3713 = trunc i64 %3712 to i32
  %3714 = xor i32 %3713, %3699
  %3715 = lshr i32 %3714, 4
  %3716 = trunc i32 %3715 to i8
  %3717 = and i8 %3716, 1
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3717, i8* %3718, align 1, !tbaa !2447
  %3719 = icmp eq i32 %3699, 0
  %3720 = zext i1 %3719 to i8
  %3721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3720, i8* %3721, align 1, !tbaa !2448
  %3722 = lshr i32 %3699, 31
  %3723 = trunc i32 %3722 to i8
  %3724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3723, i8* %3724, align 1, !tbaa !2449
  %3725 = lshr i32 %3698, 31
  %3726 = xor i32 %3722, %3725
  %3727 = add nuw nsw i32 %3726, %3722
  %3728 = icmp eq i32 %3727, 2
  %3729 = zext i1 %3728 to i8
  %3730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3729, i8* %3730, align 1, !tbaa !2450
  %3731 = load i32, i32* %EAX
  %3732 = zext i32 %3731 to i64
  %3733 = load i64, i64* %PC
  %3734 = add i64 %3733, 3
  store i64 %3734, i64* %PC
  %3735 = shl i64 %3732, 32
  %3736 = ashr exact i64 %3735, 32
  store i64 %3736, i64* %RDX, align 8, !tbaa !2428
  %3737 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3738 = load i64, i64* %RCX
  %3739 = load i64, i64* %RDX
  %3740 = mul i64 %3739, 8
  %3741 = add i64 %3740, %3738
  %3742 = load i64, i64* %PC
  %3743 = add i64 %3742, 5
  store i64 %3743, i64* %PC
  %3744 = inttoptr i64 %3741 to double*
  %3745 = load double, double* %3744
  %3746 = bitcast i8* %3737 to double*
  store double %3745, double* %3746, align 1, !tbaa !2452
  %3747 = getelementptr inbounds i8, i8* %3737, i64 8
  %3748 = bitcast i8* %3747 to double*
  store double 0.000000e+00, double* %3748, align 1, !tbaa !2452
  %3749 = load i64, i64* %RBP
  %3750 = sub i64 %3749, 88
  %3751 = bitcast %union.vec128_t* %XMM0 to i8*
  %3752 = load i64, i64* %PC
  %3753 = add i64 %3752, 5
  store i64 %3753, i64* %PC
  %3754 = bitcast i8* %3751 to double*
  %3755 = load double, double* %3754, align 1
  %3756 = inttoptr i64 %3750 to double*
  store double %3755, double* %3756
  %3757 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3758 = load i64, i64* %RBP
  %3759 = sub i64 %3758, 80
  %3760 = load i64, i64* %PC
  %3761 = add i64 %3760, 5
  store i64 %3761, i64* %PC
  %3762 = inttoptr i64 %3759 to double*
  %3763 = load double, double* %3762
  %3764 = bitcast i8* %3757 to double*
  store double %3763, double* %3764, align 1, !tbaa !2452
  %3765 = getelementptr inbounds i8, i8* %3757, i64 8
  %3766 = bitcast i8* %3765 to double*
  store double 0.000000e+00, double* %3766, align 1, !tbaa !2452
  %3767 = load i64, i64* %RBP
  %3768 = sub i64 %3767, 24
  %3769 = load i64, i64* %PC
  %3770 = add i64 %3769, 4
  store i64 %3770, i64* %PC
  %3771 = inttoptr i64 %3768 to i64*
  %3772 = load i64, i64* %3771
  store i64 %3772, i64* %RCX, align 8, !tbaa !2428
  %3773 = load i64, i64* %RBP
  %3774 = sub i64 %3773, 32
  %3775 = load i64, i64* %PC
  %3776 = add i64 %3775, 4
  store i64 %3776, i64* %PC
  %3777 = inttoptr i64 %3774 to i32*
  %3778 = load i32, i32* %3777
  %3779 = sext i32 %3778 to i64
  store i64 %3779, i64* %RDX, align 8, !tbaa !2428
  %3780 = load i64, i64* %RCX
  %3781 = load i64, i64* %RDX
  %3782 = mul i64 %3781, 8
  %3783 = add i64 %3782, %3780
  %3784 = bitcast %union.vec128_t* %XMM0 to i8*
  %3785 = load i64, i64* %PC
  %3786 = add i64 %3785, 5
  store i64 %3786, i64* %PC
  %3787 = bitcast i8* %3784 to double*
  %3788 = load double, double* %3787, align 1
  %3789 = inttoptr i64 %3783 to double*
  store double %3788, double* %3789
  %3790 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3791 = load i64, i64* %RBP
  %3792 = sub i64 %3791, 88
  %3793 = load i64, i64* %PC
  %3794 = add i64 %3793, 5
  store i64 %3794, i64* %PC
  %3795 = inttoptr i64 %3792 to double*
  %3796 = load double, double* %3795
  %3797 = bitcast i8* %3790 to double*
  store double %3796, double* %3797, align 1, !tbaa !2452
  %3798 = getelementptr inbounds i8, i8* %3790, i64 8
  %3799 = bitcast i8* %3798 to double*
  store double 0.000000e+00, double* %3799, align 1, !tbaa !2452
  %3800 = load i64, i64* %RBP
  %3801 = sub i64 %3800, 24
  %3802 = load i64, i64* %PC
  %3803 = add i64 %3802, 4
  store i64 %3803, i64* %PC
  %3804 = inttoptr i64 %3801 to i64*
  %3805 = load i64, i64* %3804
  store i64 %3805, i64* %RCX, align 8, !tbaa !2428
  %3806 = load i64, i64* %RBP
  %3807 = sub i64 %3806, 32
  %3808 = load i64, i64* %PC
  %3809 = add i64 %3808, 3
  store i64 %3809, i64* %PC
  %3810 = inttoptr i64 %3807 to i32*
  %3811 = load i32, i32* %3810
  %3812 = zext i32 %3811 to i64
  store i64 %3812, i64* %RAX, align 8, !tbaa !2428
  %3813 = load i64, i64* %RAX
  %3814 = load i64, i64* %PC
  %3815 = add i64 %3814, 3
  store i64 %3815, i64* %PC
  %3816 = trunc i64 %3813 to i32
  %3817 = add i32 1, %3816
  %3818 = zext i32 %3817 to i64
  store i64 %3818, i64* %RAX, align 8, !tbaa !2428
  %3819 = icmp ult i32 %3817, %3816
  %3820 = icmp ult i32 %3817, 1
  %3821 = or i1 %3819, %3820
  %3822 = zext i1 %3821 to i8
  %3823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3822, i8* %3823, align 1, !tbaa !2432
  %3824 = and i32 %3817, 255
  %3825 = call i32 @llvm.ctpop.i32(i32 %3824) #17
  %3826 = trunc i32 %3825 to i8
  %3827 = and i8 %3826, 1
  %3828 = xor i8 %3827, 1
  %3829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3828, i8* %3829, align 1, !tbaa !2446
  %3830 = xor i64 1, %3813
  %3831 = trunc i64 %3830 to i32
  %3832 = xor i32 %3831, %3817
  %3833 = lshr i32 %3832, 4
  %3834 = trunc i32 %3833 to i8
  %3835 = and i8 %3834, 1
  %3836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3835, i8* %3836, align 1, !tbaa !2447
  %3837 = icmp eq i32 %3817, 0
  %3838 = zext i1 %3837 to i8
  %3839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3838, i8* %3839, align 1, !tbaa !2448
  %3840 = lshr i32 %3817, 31
  %3841 = trunc i32 %3840 to i8
  %3842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3841, i8* %3842, align 1, !tbaa !2449
  %3843 = lshr i32 %3816, 31
  %3844 = xor i32 %3840, %3843
  %3845 = add nuw nsw i32 %3844, %3840
  %3846 = icmp eq i32 %3845, 2
  %3847 = zext i1 %3846 to i8
  %3848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3847, i8* %3848, align 1, !tbaa !2450
  %3849 = load i32, i32* %EAX
  %3850 = zext i32 %3849 to i64
  %3851 = load i64, i64* %PC
  %3852 = add i64 %3851, 3
  store i64 %3852, i64* %PC
  %3853 = shl i64 %3850, 32
  %3854 = ashr exact i64 %3853, 32
  store i64 %3854, i64* %RDX, align 8, !tbaa !2428
  %3855 = load i64, i64* %RCX
  %3856 = load i64, i64* %RDX
  %3857 = mul i64 %3856, 8
  %3858 = add i64 %3857, %3855
  %3859 = bitcast %union.vec128_t* %XMM0 to i8*
  %3860 = load i64, i64* %PC
  %3861 = add i64 %3860, 5
  store i64 %3861, i64* %PC
  %3862 = bitcast i8* %3859 to double*
  %3863 = load double, double* %3862, align 1
  %3864 = inttoptr i64 %3858 to double*
  store double %3863, double* %3864
  %3865 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3866 = load i64, i64* %RBP
  %3867 = sub i64 %3866, 64
  %3868 = load i64, i64* %PC
  %3869 = add i64 %3868, 5
  store i64 %3869, i64* %PC
  %3870 = inttoptr i64 %3867 to double*
  %3871 = load double, double* %3870
  %3872 = bitcast i8* %3865 to double*
  store double %3871, double* %3872, align 1, !tbaa !2452
  %3873 = getelementptr inbounds i8, i8* %3865, i64 8
  %3874 = bitcast i8* %3873 to double*
  store double 0.000000e+00, double* %3874, align 1, !tbaa !2452
  %3875 = load i64, i64* %RBP
  %3876 = sub i64 %3875, 24
  %3877 = load i64, i64* %PC
  %3878 = add i64 %3877, 4
  store i64 %3878, i64* %PC
  %3879 = inttoptr i64 %3876 to i64*
  %3880 = load i64, i64* %3879
  store i64 %3880, i64* %RCX, align 8, !tbaa !2428
  %3881 = load i64, i64* %RBP
  %3882 = sub i64 %3881, 40
  %3883 = load i64, i64* %PC
  %3884 = add i64 %3883, 4
  store i64 %3884, i64* %PC
  %3885 = inttoptr i64 %3882 to i32*
  %3886 = load i32, i32* %3885
  %3887 = sext i32 %3886 to i64
  store i64 %3887, i64* %RDX, align 8, !tbaa !2428
  %3888 = load i64, i64* %RCX
  %3889 = load i64, i64* %RDX
  %3890 = mul i64 %3889, 8
  %3891 = add i64 %3890, %3888
  %3892 = bitcast %union.vec128_t* %XMM0 to i8*
  %3893 = load i64, i64* %PC
  %3894 = add i64 %3893, 5
  store i64 %3894, i64* %PC
  %3895 = bitcast i8* %3892 to double*
  %3896 = load double, double* %3895, align 1
  %3897 = inttoptr i64 %3891 to double*
  store double %3896, double* %3897
  %3898 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3899 = load i64, i64* %RBP
  %3900 = sub i64 %3899, 72
  %3901 = load i64, i64* %PC
  %3902 = add i64 %3901, 5
  store i64 %3902, i64* %PC
  %3903 = inttoptr i64 %3900 to double*
  %3904 = load double, double* %3903
  %3905 = bitcast i8* %3898 to double*
  store double %3904, double* %3905, align 1, !tbaa !2452
  %3906 = getelementptr inbounds i8, i8* %3898, i64 8
  %3907 = bitcast i8* %3906 to double*
  store double 0.000000e+00, double* %3907, align 1, !tbaa !2452
  %3908 = load i64, i64* %RBP
  %3909 = sub i64 %3908, 24
  %3910 = load i64, i64* %PC
  %3911 = add i64 %3910, 4
  store i64 %3911, i64* %PC
  %3912 = inttoptr i64 %3909 to i64*
  %3913 = load i64, i64* %3912
  store i64 %3913, i64* %RCX, align 8, !tbaa !2428
  %3914 = load i64, i64* %RBP
  %3915 = sub i64 %3914, 40
  %3916 = load i64, i64* %PC
  %3917 = add i64 %3916, 3
  store i64 %3917, i64* %PC
  %3918 = inttoptr i64 %3915 to i32*
  %3919 = load i32, i32* %3918
  %3920 = zext i32 %3919 to i64
  store i64 %3920, i64* %RAX, align 8, !tbaa !2428
  %3921 = load i64, i64* %RAX
  %3922 = load i64, i64* %PC
  %3923 = add i64 %3922, 3
  store i64 %3923, i64* %PC
  %3924 = trunc i64 %3921 to i32
  %3925 = add i32 1, %3924
  %3926 = zext i32 %3925 to i64
  store i64 %3926, i64* %RAX, align 8, !tbaa !2428
  %3927 = icmp ult i32 %3925, %3924
  %3928 = icmp ult i32 %3925, 1
  %3929 = or i1 %3927, %3928
  %3930 = zext i1 %3929 to i8
  %3931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3930, i8* %3931, align 1, !tbaa !2432
  %3932 = and i32 %3925, 255
  %3933 = call i32 @llvm.ctpop.i32(i32 %3932) #17
  %3934 = trunc i32 %3933 to i8
  %3935 = and i8 %3934, 1
  %3936 = xor i8 %3935, 1
  %3937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3936, i8* %3937, align 1, !tbaa !2446
  %3938 = xor i64 1, %3921
  %3939 = trunc i64 %3938 to i32
  %3940 = xor i32 %3939, %3925
  %3941 = lshr i32 %3940, 4
  %3942 = trunc i32 %3941 to i8
  %3943 = and i8 %3942, 1
  %3944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3943, i8* %3944, align 1, !tbaa !2447
  %3945 = icmp eq i32 %3925, 0
  %3946 = zext i1 %3945 to i8
  %3947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3946, i8* %3947, align 1, !tbaa !2448
  %3948 = lshr i32 %3925, 31
  %3949 = trunc i32 %3948 to i8
  %3950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3949, i8* %3950, align 1, !tbaa !2449
  %3951 = lshr i32 %3924, 31
  %3952 = xor i32 %3948, %3951
  %3953 = add nuw nsw i32 %3952, %3948
  %3954 = icmp eq i32 %3953, 2
  %3955 = zext i1 %3954 to i8
  %3956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3955, i8* %3956, align 1, !tbaa !2450
  %3957 = load i32, i32* %EAX
  %3958 = zext i32 %3957 to i64
  %3959 = load i64, i64* %PC
  %3960 = add i64 %3959, 3
  store i64 %3960, i64* %PC
  %3961 = shl i64 %3958, 32
  %3962 = ashr exact i64 %3961, 32
  store i64 %3962, i64* %RDX, align 8, !tbaa !2428
  %3963 = load i64, i64* %RCX
  %3964 = load i64, i64* %RDX
  %3965 = mul i64 %3964, 8
  %3966 = add i64 %3965, %3963
  %3967 = bitcast %union.vec128_t* %XMM0 to i8*
  %3968 = load i64, i64* %PC
  %3969 = add i64 %3968, 5
  store i64 %3969, i64* %PC
  %3970 = bitcast i8* %3967 to double*
  %3971 = load double, double* %3970, align 1
  %3972 = inttoptr i64 %3966 to double*
  store double %3971, double* %3972
  %3973 = load i64, i64* %RBP
  %3974 = sub i64 %3973, 52
  %3975 = load i64, i64* %PC
  %3976 = add i64 %3975, 3
  store i64 %3976, i64* %PC
  %3977 = inttoptr i64 %3974 to i32*
  %3978 = load i32, i32* %3977
  %3979 = zext i32 %3978 to i64
  store i64 %3979, i64* %RAX, align 8, !tbaa !2428
  %3980 = load i64, i64* %RAX
  %3981 = load i64, i64* %RBP
  %3982 = sub i64 %3981, 32
  %3983 = load i64, i64* %PC
  %3984 = add i64 %3983, 3
  store i64 %3984, i64* %PC
  %3985 = trunc i64 %3980 to i32
  %3986 = inttoptr i64 %3982 to i32*
  %3987 = load i32, i32* %3986
  %3988 = add i32 %3987, %3985
  %3989 = zext i32 %3988 to i64
  store i64 %3989, i64* %RAX, align 8, !tbaa !2428
  %3990 = icmp ult i32 %3988, %3985
  %3991 = icmp ult i32 %3988, %3987
  %3992 = or i1 %3990, %3991
  %3993 = zext i1 %3992 to i8
  %3994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3993, i8* %3994, align 1, !tbaa !2432
  %3995 = and i32 %3988, 255
  %3996 = call i32 @llvm.ctpop.i32(i32 %3995) #17
  %3997 = trunc i32 %3996 to i8
  %3998 = and i8 %3997, 1
  %3999 = xor i8 %3998, 1
  %4000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3999, i8* %4000, align 1, !tbaa !2446
  %4001 = xor i32 %3987, %3985
  %4002 = xor i32 %4001, %3988
  %4003 = lshr i32 %4002, 4
  %4004 = trunc i32 %4003 to i8
  %4005 = and i8 %4004, 1
  %4006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4005, i8* %4006, align 1, !tbaa !2447
  %4007 = icmp eq i32 %3988, 0
  %4008 = zext i1 %4007 to i8
  %4009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4008, i8* %4009, align 1, !tbaa !2448
  %4010 = lshr i32 %3988, 31
  %4011 = trunc i32 %4010 to i8
  %4012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4011, i8* %4012, align 1, !tbaa !2449
  %4013 = lshr i32 %3985, 31
  %4014 = lshr i32 %3987, 31
  %4015 = xor i32 %4010, %4013
  %4016 = xor i32 %4010, %4014
  %4017 = add nuw nsw i32 %4015, %4016
  %4018 = icmp eq i32 %4017, 2
  %4019 = zext i1 %4018 to i8
  %4020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4019, i8* %4020, align 1, !tbaa !2450
  %4021 = load i64, i64* %RBP
  %4022 = sub i64 %4021, 32
  %4023 = load i32, i32* %EAX
  %4024 = zext i32 %4023 to i64
  %4025 = load i64, i64* %PC
  %4026 = add i64 %4025, 3
  store i64 %4026, i64* %PC
  %4027 = inttoptr i64 %4022 to i32*
  store i32 %4023, i32* %4027
  %4028 = load i64, i64* %RBP
  %4029 = sub i64 %4028, 52
  %4030 = load i64, i64* %PC
  %4031 = add i64 %4030, 3
  store i64 %4031, i64* %PC
  %4032 = inttoptr i64 %4029 to i32*
  %4033 = load i32, i32* %4032
  %4034 = zext i32 %4033 to i64
  store i64 %4034, i64* %RAX, align 8, !tbaa !2428
  %4035 = load i64, i64* %RAX
  %4036 = load i64, i64* %RBP
  %4037 = sub i64 %4036, 40
  %4038 = load i64, i64* %PC
  %4039 = add i64 %4038, 3
  store i64 %4039, i64* %PC
  %4040 = trunc i64 %4035 to i32
  %4041 = inttoptr i64 %4037 to i32*
  %4042 = load i32, i32* %4041
  %4043 = add i32 %4042, %4040
  %4044 = zext i32 %4043 to i64
  store i64 %4044, i64* %RAX, align 8, !tbaa !2428
  %4045 = icmp ult i32 %4043, %4040
  %4046 = icmp ult i32 %4043, %4042
  %4047 = or i1 %4045, %4046
  %4048 = zext i1 %4047 to i8
  %4049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4048, i8* %4049, align 1, !tbaa !2432
  %4050 = and i32 %4043, 255
  %4051 = call i32 @llvm.ctpop.i32(i32 %4050) #17
  %4052 = trunc i32 %4051 to i8
  %4053 = and i8 %4052, 1
  %4054 = xor i8 %4053, 1
  %4055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4054, i8* %4055, align 1, !tbaa !2446
  %4056 = xor i32 %4042, %4040
  %4057 = xor i32 %4056, %4043
  %4058 = lshr i32 %4057, 4
  %4059 = trunc i32 %4058 to i8
  %4060 = and i8 %4059, 1
  %4061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4060, i8* %4061, align 1, !tbaa !2447
  %4062 = icmp eq i32 %4043, 0
  %4063 = zext i1 %4062 to i8
  %4064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4063, i8* %4064, align 1, !tbaa !2448
  %4065 = lshr i32 %4043, 31
  %4066 = trunc i32 %4065 to i8
  %4067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4066, i8* %4067, align 1, !tbaa !2449
  %4068 = lshr i32 %4040, 31
  %4069 = lshr i32 %4042, 31
  %4070 = xor i32 %4065, %4068
  %4071 = xor i32 %4065, %4069
  %4072 = add nuw nsw i32 %4070, %4071
  %4073 = icmp eq i32 %4072, 2
  %4074 = zext i1 %4073 to i8
  %4075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4074, i8* %4075, align 1, !tbaa !2450
  %4076 = load i64, i64* %RBP
  %4077 = sub i64 %4076, 40
  %4078 = load i32, i32* %EAX
  %4079 = zext i32 %4078 to i64
  %4080 = load i64, i64* %PC
  %4081 = add i64 %4080, 3
  store i64 %4081, i64* %PC
  %4082 = inttoptr i64 %4077 to i32*
  store i32 %4078, i32* %4082
  %4083 = load i64, i64* %RBP
  %4084 = sub i64 %4083, 24
  %4085 = load i64, i64* %PC
  %4086 = add i64 %4085, 4
  store i64 %4086, i64* %PC
  %4087 = inttoptr i64 %4084 to i64*
  %4088 = load i64, i64* %4087
  store i64 %4088, i64* %RCX, align 8, !tbaa !2428
  %4089 = load i64, i64* %RBP
  %4090 = sub i64 %4089, 32
  %4091 = load i64, i64* %PC
  %4092 = add i64 %4091, 4
  store i64 %4092, i64* %PC
  %4093 = inttoptr i64 %4090 to i32*
  %4094 = load i32, i32* %4093
  %4095 = sext i32 %4094 to i64
  store i64 %4095, i64* %RDX, align 8, !tbaa !2428
  %4096 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4097 = load i64, i64* %RCX
  %4098 = load i64, i64* %RDX
  %4099 = mul i64 %4098, 8
  %4100 = add i64 %4099, %4097
  %4101 = load i64, i64* %PC
  %4102 = add i64 %4101, 5
  store i64 %4102, i64* %PC
  %4103 = inttoptr i64 %4100 to double*
  %4104 = load double, double* %4103
  %4105 = bitcast i8* %4096 to double*
  store double %4104, double* %4105, align 1, !tbaa !2452
  %4106 = getelementptr inbounds i8, i8* %4096, i64 8
  %4107 = bitcast i8* %4106 to double*
  store double 0.000000e+00, double* %4107, align 1, !tbaa !2452
  %4108 = load i64, i64* %RBP
  %4109 = sub i64 %4108, 64
  %4110 = bitcast %union.vec128_t* %XMM0 to i8*
  %4111 = load i64, i64* %PC
  %4112 = add i64 %4111, 5
  store i64 %4112, i64* %PC
  %4113 = bitcast i8* %4110 to double*
  %4114 = load double, double* %4113, align 1
  %4115 = inttoptr i64 %4109 to double*
  store double %4114, double* %4115
  %4116 = load i64, i64* %RBP
  %4117 = sub i64 %4116, 24
  %4118 = load i64, i64* %PC
  %4119 = add i64 %4118, 4
  store i64 %4119, i64* %PC
  %4120 = inttoptr i64 %4117 to i64*
  %4121 = load i64, i64* %4120
  store i64 %4121, i64* %RCX, align 8, !tbaa !2428
  %4122 = load i64, i64* %RBP
  %4123 = sub i64 %4122, 32
  %4124 = load i64, i64* %PC
  %4125 = add i64 %4124, 3
  store i64 %4125, i64* %PC
  %4126 = inttoptr i64 %4123 to i32*
  %4127 = load i32, i32* %4126
  %4128 = zext i32 %4127 to i64
  store i64 %4128, i64* %RAX, align 8, !tbaa !2428
  %4129 = load i64, i64* %RAX
  %4130 = load i64, i64* %PC
  %4131 = add i64 %4130, 3
  store i64 %4131, i64* %PC
  %4132 = trunc i64 %4129 to i32
  %4133 = add i32 1, %4132
  %4134 = zext i32 %4133 to i64
  store i64 %4134, i64* %RAX, align 8, !tbaa !2428
  %4135 = icmp ult i32 %4133, %4132
  %4136 = icmp ult i32 %4133, 1
  %4137 = or i1 %4135, %4136
  %4138 = zext i1 %4137 to i8
  %4139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4138, i8* %4139, align 1, !tbaa !2432
  %4140 = and i32 %4133, 255
  %4141 = call i32 @llvm.ctpop.i32(i32 %4140) #17
  %4142 = trunc i32 %4141 to i8
  %4143 = and i8 %4142, 1
  %4144 = xor i8 %4143, 1
  %4145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4144, i8* %4145, align 1, !tbaa !2446
  %4146 = xor i64 1, %4129
  %4147 = trunc i64 %4146 to i32
  %4148 = xor i32 %4147, %4133
  %4149 = lshr i32 %4148, 4
  %4150 = trunc i32 %4149 to i8
  %4151 = and i8 %4150, 1
  %4152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4151, i8* %4152, align 1, !tbaa !2447
  %4153 = icmp eq i32 %4133, 0
  %4154 = zext i1 %4153 to i8
  %4155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4154, i8* %4155, align 1, !tbaa !2448
  %4156 = lshr i32 %4133, 31
  %4157 = trunc i32 %4156 to i8
  %4158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4157, i8* %4158, align 1, !tbaa !2449
  %4159 = lshr i32 %4132, 31
  %4160 = xor i32 %4156, %4159
  %4161 = add nuw nsw i32 %4160, %4156
  %4162 = icmp eq i32 %4161, 2
  %4163 = zext i1 %4162 to i8
  %4164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4163, i8* %4164, align 1, !tbaa !2450
  %4165 = load i32, i32* %EAX
  %4166 = zext i32 %4165 to i64
  %4167 = load i64, i64* %PC
  %4168 = add i64 %4167, 3
  store i64 %4168, i64* %PC
  %4169 = shl i64 %4166, 32
  %4170 = ashr exact i64 %4169, 32
  store i64 %4170, i64* %RDX, align 8, !tbaa !2428
  %4171 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4172 = load i64, i64* %RCX
  %4173 = load i64, i64* %RDX
  %4174 = mul i64 %4173, 8
  %4175 = add i64 %4174, %4172
  %4176 = load i64, i64* %PC
  %4177 = add i64 %4176, 5
  store i64 %4177, i64* %PC
  %4178 = inttoptr i64 %4175 to double*
  %4179 = load double, double* %4178
  %4180 = bitcast i8* %4171 to double*
  store double %4179, double* %4180, align 1, !tbaa !2452
  %4181 = getelementptr inbounds i8, i8* %4171, i64 8
  %4182 = bitcast i8* %4181 to double*
  store double 0.000000e+00, double* %4182, align 1, !tbaa !2452
  %4183 = load i64, i64* %RBP
  %4184 = sub i64 %4183, 72
  %4185 = bitcast %union.vec128_t* %XMM0 to i8*
  %4186 = load i64, i64* %PC
  %4187 = add i64 %4186, 5
  store i64 %4187, i64* %PC
  %4188 = bitcast i8* %4185 to double*
  %4189 = load double, double* %4188, align 1
  %4190 = inttoptr i64 %4184 to double*
  store double %4189, double* %4190
  %4191 = load i64, i64* %RBP
  %4192 = sub i64 %4191, 24
  %4193 = load i64, i64* %PC
  %4194 = add i64 %4193, 4
  store i64 %4194, i64* %PC
  %4195 = inttoptr i64 %4192 to i64*
  %4196 = load i64, i64* %4195
  store i64 %4196, i64* %RCX, align 8, !tbaa !2428
  %4197 = load i64, i64* %RBP
  %4198 = sub i64 %4197, 40
  %4199 = load i64, i64* %PC
  %4200 = add i64 %4199, 4
  store i64 %4200, i64* %PC
  %4201 = inttoptr i64 %4198 to i32*
  %4202 = load i32, i32* %4201
  %4203 = sext i32 %4202 to i64
  store i64 %4203, i64* %RDX, align 8, !tbaa !2428
  %4204 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4205 = load i64, i64* %RCX
  %4206 = load i64, i64* %RDX
  %4207 = mul i64 %4206, 8
  %4208 = add i64 %4207, %4205
  %4209 = load i64, i64* %PC
  %4210 = add i64 %4209, 5
  store i64 %4210, i64* %PC
  %4211 = inttoptr i64 %4208 to double*
  %4212 = load double, double* %4211
  %4213 = bitcast i8* %4204 to double*
  store double %4212, double* %4213, align 1, !tbaa !2452
  %4214 = getelementptr inbounds i8, i8* %4204, i64 8
  %4215 = bitcast i8* %4214 to double*
  store double 0.000000e+00, double* %4215, align 1, !tbaa !2452
  %4216 = load i64, i64* %RBP
  %4217 = sub i64 %4216, 80
  %4218 = bitcast %union.vec128_t* %XMM0 to i8*
  %4219 = load i64, i64* %PC
  %4220 = add i64 %4219, 5
  store i64 %4220, i64* %PC
  %4221 = bitcast i8* %4218 to double*
  %4222 = load double, double* %4221, align 1
  %4223 = inttoptr i64 %4217 to double*
  store double %4222, double* %4223
  %4224 = load i64, i64* %RBP
  %4225 = sub i64 %4224, 24
  %4226 = load i64, i64* %PC
  %4227 = add i64 %4226, 4
  store i64 %4227, i64* %PC
  %4228 = inttoptr i64 %4225 to i64*
  %4229 = load i64, i64* %4228
  store i64 %4229, i64* %RCX, align 8, !tbaa !2428
  %4230 = load i64, i64* %RBP
  %4231 = sub i64 %4230, 40
  %4232 = load i64, i64* %PC
  %4233 = add i64 %4232, 3
  store i64 %4233, i64* %PC
  %4234 = inttoptr i64 %4231 to i32*
  %4235 = load i32, i32* %4234
  %4236 = zext i32 %4235 to i64
  store i64 %4236, i64* %RAX, align 8, !tbaa !2428
  %4237 = load i64, i64* %RAX
  %4238 = load i64, i64* %PC
  %4239 = add i64 %4238, 3
  store i64 %4239, i64* %PC
  %4240 = trunc i64 %4237 to i32
  %4241 = add i32 1, %4240
  %4242 = zext i32 %4241 to i64
  store i64 %4242, i64* %RAX, align 8, !tbaa !2428
  %4243 = icmp ult i32 %4241, %4240
  %4244 = icmp ult i32 %4241, 1
  %4245 = or i1 %4243, %4244
  %4246 = zext i1 %4245 to i8
  %4247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4246, i8* %4247, align 1, !tbaa !2432
  %4248 = and i32 %4241, 255
  %4249 = call i32 @llvm.ctpop.i32(i32 %4248) #17
  %4250 = trunc i32 %4249 to i8
  %4251 = and i8 %4250, 1
  %4252 = xor i8 %4251, 1
  %4253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4252, i8* %4253, align 1, !tbaa !2446
  %4254 = xor i64 1, %4237
  %4255 = trunc i64 %4254 to i32
  %4256 = xor i32 %4255, %4241
  %4257 = lshr i32 %4256, 4
  %4258 = trunc i32 %4257 to i8
  %4259 = and i8 %4258, 1
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4259, i8* %4260, align 1, !tbaa !2447
  %4261 = icmp eq i32 %4241, 0
  %4262 = zext i1 %4261 to i8
  %4263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4262, i8* %4263, align 1, !tbaa !2448
  %4264 = lshr i32 %4241, 31
  %4265 = trunc i32 %4264 to i8
  %4266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4265, i8* %4266, align 1, !tbaa !2449
  %4267 = lshr i32 %4240, 31
  %4268 = xor i32 %4264, %4267
  %4269 = add nuw nsw i32 %4268, %4264
  %4270 = icmp eq i32 %4269, 2
  %4271 = zext i1 %4270 to i8
  %4272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4271, i8* %4272, align 1, !tbaa !2450
  %4273 = load i32, i32* %EAX
  %4274 = zext i32 %4273 to i64
  %4275 = load i64, i64* %PC
  %4276 = add i64 %4275, 3
  store i64 %4276, i64* %PC
  %4277 = shl i64 %4274, 32
  %4278 = ashr exact i64 %4277, 32
  store i64 %4278, i64* %RDX, align 8, !tbaa !2428
  %4279 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4280 = load i64, i64* %RCX
  %4281 = load i64, i64* %RDX
  %4282 = mul i64 %4281, 8
  %4283 = add i64 %4282, %4280
  %4284 = load i64, i64* %PC
  %4285 = add i64 %4284, 5
  store i64 %4285, i64* %PC
  %4286 = inttoptr i64 %4283 to double*
  %4287 = load double, double* %4286
  %4288 = bitcast i8* %4279 to double*
  store double %4287, double* %4288, align 1, !tbaa !2452
  %4289 = getelementptr inbounds i8, i8* %4279, i64 8
  %4290 = bitcast i8* %4289 to double*
  store double 0.000000e+00, double* %4290, align 1, !tbaa !2452
  %4291 = load i64, i64* %RBP
  %4292 = sub i64 %4291, 88
  %4293 = bitcast %union.vec128_t* %XMM0 to i8*
  %4294 = load i64, i64* %PC
  %4295 = add i64 %4294, 5
  store i64 %4295, i64* %PC
  %4296 = bitcast i8* %4293 to double*
  %4297 = load double, double* %4296, align 1
  %4298 = inttoptr i64 %4292 to double*
  store double %4297, double* %4298
  %4299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4300 = load i64, i64* %RBP
  %4301 = sub i64 %4300, 80
  %4302 = load i64, i64* %PC
  %4303 = add i64 %4302, 5
  store i64 %4303, i64* %PC
  %4304 = inttoptr i64 %4301 to double*
  %4305 = load double, double* %4304
  %4306 = bitcast i8* %4299 to double*
  store double %4305, double* %4306, align 1, !tbaa !2452
  %4307 = getelementptr inbounds i8, i8* %4299, i64 8
  %4308 = bitcast i8* %4307 to double*
  store double 0.000000e+00, double* %4308, align 1, !tbaa !2452
  %4309 = load i64, i64* %RBP
  %4310 = sub i64 %4309, 24
  %4311 = load i64, i64* %PC
  %4312 = add i64 %4311, 4
  store i64 %4312, i64* %PC
  %4313 = inttoptr i64 %4310 to i64*
  %4314 = load i64, i64* %4313
  store i64 %4314, i64* %RCX, align 8, !tbaa !2428
  %4315 = load i64, i64* %RBP
  %4316 = sub i64 %4315, 32
  %4317 = load i64, i64* %PC
  %4318 = add i64 %4317, 4
  store i64 %4318, i64* %PC
  %4319 = inttoptr i64 %4316 to i32*
  %4320 = load i32, i32* %4319
  %4321 = sext i32 %4320 to i64
  store i64 %4321, i64* %RDX, align 8, !tbaa !2428
  %4322 = load i64, i64* %RCX
  %4323 = load i64, i64* %RDX
  %4324 = mul i64 %4323, 8
  %4325 = add i64 %4324, %4322
  %4326 = bitcast %union.vec128_t* %XMM0 to i8*
  %4327 = load i64, i64* %PC
  %4328 = add i64 %4327, 5
  store i64 %4328, i64* %PC
  %4329 = bitcast i8* %4326 to double*
  %4330 = load double, double* %4329, align 1
  %4331 = inttoptr i64 %4325 to double*
  store double %4330, double* %4331
  %4332 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4333 = load i64, i64* %RBP
  %4334 = sub i64 %4333, 88
  %4335 = load i64, i64* %PC
  %4336 = add i64 %4335, 5
  store i64 %4336, i64* %PC
  %4337 = inttoptr i64 %4334 to double*
  %4338 = load double, double* %4337
  %4339 = bitcast i8* %4332 to double*
  store double %4338, double* %4339, align 1, !tbaa !2452
  %4340 = getelementptr inbounds i8, i8* %4332, i64 8
  %4341 = bitcast i8* %4340 to double*
  store double 0.000000e+00, double* %4341, align 1, !tbaa !2452
  %4342 = load i64, i64* %RBP
  %4343 = sub i64 %4342, 24
  %4344 = load i64, i64* %PC
  %4345 = add i64 %4344, 4
  store i64 %4345, i64* %PC
  %4346 = inttoptr i64 %4343 to i64*
  %4347 = load i64, i64* %4346
  store i64 %4347, i64* %RCX, align 8, !tbaa !2428
  %4348 = load i64, i64* %RBP
  %4349 = sub i64 %4348, 32
  %4350 = load i64, i64* %PC
  %4351 = add i64 %4350, 3
  store i64 %4351, i64* %PC
  %4352 = inttoptr i64 %4349 to i32*
  %4353 = load i32, i32* %4352
  %4354 = zext i32 %4353 to i64
  store i64 %4354, i64* %RAX, align 8, !tbaa !2428
  %4355 = load i64, i64* %RAX
  %4356 = load i64, i64* %PC
  %4357 = add i64 %4356, 3
  store i64 %4357, i64* %PC
  %4358 = trunc i64 %4355 to i32
  %4359 = add i32 1, %4358
  %4360 = zext i32 %4359 to i64
  store i64 %4360, i64* %RAX, align 8, !tbaa !2428
  %4361 = icmp ult i32 %4359, %4358
  %4362 = icmp ult i32 %4359, 1
  %4363 = or i1 %4361, %4362
  %4364 = zext i1 %4363 to i8
  %4365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4364, i8* %4365, align 1, !tbaa !2432
  %4366 = and i32 %4359, 255
  %4367 = call i32 @llvm.ctpop.i32(i32 %4366) #17
  %4368 = trunc i32 %4367 to i8
  %4369 = and i8 %4368, 1
  %4370 = xor i8 %4369, 1
  %4371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4370, i8* %4371, align 1, !tbaa !2446
  %4372 = xor i64 1, %4355
  %4373 = trunc i64 %4372 to i32
  %4374 = xor i32 %4373, %4359
  %4375 = lshr i32 %4374, 4
  %4376 = trunc i32 %4375 to i8
  %4377 = and i8 %4376, 1
  %4378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4377, i8* %4378, align 1, !tbaa !2447
  %4379 = icmp eq i32 %4359, 0
  %4380 = zext i1 %4379 to i8
  %4381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4380, i8* %4381, align 1, !tbaa !2448
  %4382 = lshr i32 %4359, 31
  %4383 = trunc i32 %4382 to i8
  %4384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4383, i8* %4384, align 1, !tbaa !2449
  %4385 = lshr i32 %4358, 31
  %4386 = xor i32 %4382, %4385
  %4387 = add nuw nsw i32 %4386, %4382
  %4388 = icmp eq i32 %4387, 2
  %4389 = zext i1 %4388 to i8
  %4390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4389, i8* %4390, align 1, !tbaa !2450
  %4391 = load i32, i32* %EAX
  %4392 = zext i32 %4391 to i64
  %4393 = load i64, i64* %PC
  %4394 = add i64 %4393, 3
  store i64 %4394, i64* %PC
  %4395 = shl i64 %4392, 32
  %4396 = ashr exact i64 %4395, 32
  store i64 %4396, i64* %RDX, align 8, !tbaa !2428
  %4397 = load i64, i64* %RCX
  %4398 = load i64, i64* %RDX
  %4399 = mul i64 %4398, 8
  %4400 = add i64 %4399, %4397
  %4401 = bitcast %union.vec128_t* %XMM0 to i8*
  %4402 = load i64, i64* %PC
  %4403 = add i64 %4402, 5
  store i64 %4403, i64* %PC
  %4404 = bitcast i8* %4401 to double*
  %4405 = load double, double* %4404, align 1
  %4406 = inttoptr i64 %4400 to double*
  store double %4405, double* %4406
  %4407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4408 = load i64, i64* %RBP
  %4409 = sub i64 %4408, 64
  %4410 = load i64, i64* %PC
  %4411 = add i64 %4410, 5
  store i64 %4411, i64* %PC
  %4412 = inttoptr i64 %4409 to double*
  %4413 = load double, double* %4412
  %4414 = bitcast i8* %4407 to double*
  store double %4413, double* %4414, align 1, !tbaa !2452
  %4415 = getelementptr inbounds i8, i8* %4407, i64 8
  %4416 = bitcast i8* %4415 to double*
  store double 0.000000e+00, double* %4416, align 1, !tbaa !2452
  %4417 = load i64, i64* %RBP
  %4418 = sub i64 %4417, 24
  %4419 = load i64, i64* %PC
  %4420 = add i64 %4419, 4
  store i64 %4420, i64* %PC
  %4421 = inttoptr i64 %4418 to i64*
  %4422 = load i64, i64* %4421
  store i64 %4422, i64* %RCX, align 8, !tbaa !2428
  %4423 = load i64, i64* %RBP
  %4424 = sub i64 %4423, 40
  %4425 = load i64, i64* %PC
  %4426 = add i64 %4425, 4
  store i64 %4426, i64* %PC
  %4427 = inttoptr i64 %4424 to i32*
  %4428 = load i32, i32* %4427
  %4429 = sext i32 %4428 to i64
  store i64 %4429, i64* %RDX, align 8, !tbaa !2428
  %4430 = load i64, i64* %RCX
  %4431 = load i64, i64* %RDX
  %4432 = mul i64 %4431, 8
  %4433 = add i64 %4432, %4430
  %4434 = bitcast %union.vec128_t* %XMM0 to i8*
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 5
  store i64 %4436, i64* %PC
  %4437 = bitcast i8* %4434 to double*
  %4438 = load double, double* %4437, align 1
  %4439 = inttoptr i64 %4433 to double*
  store double %4438, double* %4439
  %4440 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4441 = load i64, i64* %RBP
  %4442 = sub i64 %4441, 72
  %4443 = load i64, i64* %PC
  %4444 = add i64 %4443, 5
  store i64 %4444, i64* %PC
  %4445 = inttoptr i64 %4442 to double*
  %4446 = load double, double* %4445
  %4447 = bitcast i8* %4440 to double*
  store double %4446, double* %4447, align 1, !tbaa !2452
  %4448 = getelementptr inbounds i8, i8* %4440, i64 8
  %4449 = bitcast i8* %4448 to double*
  store double 0.000000e+00, double* %4449, align 1, !tbaa !2452
  %4450 = load i64, i64* %RBP
  %4451 = sub i64 %4450, 24
  %4452 = load i64, i64* %PC
  %4453 = add i64 %4452, 4
  store i64 %4453, i64* %PC
  %4454 = inttoptr i64 %4451 to i64*
  %4455 = load i64, i64* %4454
  store i64 %4455, i64* %RCX, align 8, !tbaa !2428
  %4456 = load i64, i64* %RBP
  %4457 = sub i64 %4456, 40
  %4458 = load i64, i64* %PC
  %4459 = add i64 %4458, 3
  store i64 %4459, i64* %PC
  %4460 = inttoptr i64 %4457 to i32*
  %4461 = load i32, i32* %4460
  %4462 = zext i32 %4461 to i64
  store i64 %4462, i64* %RAX, align 8, !tbaa !2428
  %4463 = load i64, i64* %RAX
  %4464 = load i64, i64* %PC
  %4465 = add i64 %4464, 3
  store i64 %4465, i64* %PC
  %4466 = trunc i64 %4463 to i32
  %4467 = add i32 1, %4466
  %4468 = zext i32 %4467 to i64
  store i64 %4468, i64* %RAX, align 8, !tbaa !2428
  %4469 = icmp ult i32 %4467, %4466
  %4470 = icmp ult i32 %4467, 1
  %4471 = or i1 %4469, %4470
  %4472 = zext i1 %4471 to i8
  %4473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4472, i8* %4473, align 1, !tbaa !2432
  %4474 = and i32 %4467, 255
  %4475 = call i32 @llvm.ctpop.i32(i32 %4474) #17
  %4476 = trunc i32 %4475 to i8
  %4477 = and i8 %4476, 1
  %4478 = xor i8 %4477, 1
  %4479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4478, i8* %4479, align 1, !tbaa !2446
  %4480 = xor i64 1, %4463
  %4481 = trunc i64 %4480 to i32
  %4482 = xor i32 %4481, %4467
  %4483 = lshr i32 %4482, 4
  %4484 = trunc i32 %4483 to i8
  %4485 = and i8 %4484, 1
  %4486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4485, i8* %4486, align 1, !tbaa !2447
  %4487 = icmp eq i32 %4467, 0
  %4488 = zext i1 %4487 to i8
  %4489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4488, i8* %4489, align 1, !tbaa !2448
  %4490 = lshr i32 %4467, 31
  %4491 = trunc i32 %4490 to i8
  %4492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4491, i8* %4492, align 1, !tbaa !2449
  %4493 = lshr i32 %4466, 31
  %4494 = xor i32 %4490, %4493
  %4495 = add nuw nsw i32 %4494, %4490
  %4496 = icmp eq i32 %4495, 2
  %4497 = zext i1 %4496 to i8
  %4498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4497, i8* %4498, align 1, !tbaa !2450
  %4499 = load i32, i32* %EAX
  %4500 = zext i32 %4499 to i64
  %4501 = load i64, i64* %PC
  %4502 = add i64 %4501, 3
  store i64 %4502, i64* %PC
  %4503 = shl i64 %4500, 32
  %4504 = ashr exact i64 %4503, 32
  store i64 %4504, i64* %RDX, align 8, !tbaa !2428
  %4505 = load i64, i64* %RCX
  %4506 = load i64, i64* %RDX
  %4507 = mul i64 %4506, 8
  %4508 = add i64 %4507, %4505
  %4509 = bitcast %union.vec128_t* %XMM0 to i8*
  %4510 = load i64, i64* %PC
  %4511 = add i64 %4510, 5
  store i64 %4511, i64* %PC
  %4512 = bitcast i8* %4509 to double*
  %4513 = load double, double* %4512, align 1
  %4514 = inttoptr i64 %4508 to double*
  store double %4513, double* %4514
  %4515 = load i64, i64* %RBP
  %4516 = sub i64 %4515, 28
  %4517 = load i64, i64* %PC
  %4518 = add i64 %4517, 3
  store i64 %4518, i64* %PC
  %4519 = inttoptr i64 %4516 to i32*
  %4520 = load i32, i32* %4519
  %4521 = zext i32 %4520 to i64
  store i64 %4521, i64* %RAX, align 8, !tbaa !2428
  %4522 = load i64, i64* %RAX
  %4523 = load i64, i64* %PC
  %4524 = add i64 %4523, 3
  store i64 %4524, i64* %PC
  %4525 = trunc i64 %4522 to i32
  %4526 = add i32 1, %4525
  %4527 = zext i32 %4526 to i64
  store i64 %4527, i64* %RAX, align 8, !tbaa !2428
  %4528 = icmp ult i32 %4526, %4525
  %4529 = icmp ult i32 %4526, 1
  %4530 = or i1 %4528, %4529
  %4531 = zext i1 %4530 to i8
  %4532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4531, i8* %4532, align 1, !tbaa !2432
  %4533 = and i32 %4526, 255
  %4534 = call i32 @llvm.ctpop.i32(i32 %4533) #17
  %4535 = trunc i32 %4534 to i8
  %4536 = and i8 %4535, 1
  %4537 = xor i8 %4536, 1
  %4538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4537, i8* %4538, align 1, !tbaa !2446
  %4539 = xor i64 1, %4522
  %4540 = trunc i64 %4539 to i32
  %4541 = xor i32 %4540, %4526
  %4542 = lshr i32 %4541, 4
  %4543 = trunc i32 %4542 to i8
  %4544 = and i8 %4543, 1
  %4545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4544, i8* %4545, align 1, !tbaa !2447
  %4546 = icmp eq i32 %4526, 0
  %4547 = zext i1 %4546 to i8
  %4548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4547, i8* %4548, align 1, !tbaa !2448
  %4549 = lshr i32 %4526, 31
  %4550 = trunc i32 %4549 to i8
  %4551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4550, i8* %4551, align 1, !tbaa !2449
  %4552 = lshr i32 %4525, 31
  %4553 = xor i32 %4549, %4552
  %4554 = add nuw nsw i32 %4553, %4549
  %4555 = icmp eq i32 %4554, 2
  %4556 = zext i1 %4555 to i8
  %4557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4556, i8* %4557, align 1, !tbaa !2450
  %4558 = load i64, i64* %RBP
  %4559 = sub i64 %4558, 28
  %4560 = load i32, i32* %EAX
  %4561 = zext i32 %4560 to i64
  %4562 = load i64, i64* %PC
  %4563 = add i64 %4562, 3
  store i64 %4563, i64* %PC
  %4564 = inttoptr i64 %4559 to i32*
  store i32 %4560, i32* %4564
  %4565 = load i64, i64* %PC
  %4566 = sub i64 %4565, 407
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 5
  store i64 %4568, i64* %PC
  %4569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4566, i64* %4569, align 8, !tbaa !2428
  br label %block_4016ae

block_4012a6:                                     ; preds = %block_40129a
  %4570 = load i64, i64* %RBP
  %4571 = sub i64 %4570, 28
  %4572 = load i64, i64* %PC
  %4573 = add i64 %4572, 7
  store i64 %4573, i64* %PC
  %4574 = inttoptr i64 %4571 to i32*
  store i32 0, i32* %4574
  br label %block_4012ad

block_401225:                                     ; preds = %block_401216
  %4575 = sub i64 %4942, 44
  %4576 = load i64, i64* %PC
  %4577 = add i64 %4576, 3
  store i64 %4577, i64* %PC
  %4578 = inttoptr i64 %4575 to i32*
  %4579 = load i32, i32* %4578
  %4580 = zext i32 %4579 to i64
  store i64 %4580, i64* %RAX, align 8, !tbaa !2428
  %4581 = load i64, i64* %RAX
  %4582 = load i64, i64* %PC
  %4583 = add i64 %4582, 3
  store i64 %4583, i64* %PC
  %4584 = shl i64 %4581, 32
  %4585 = ashr i64 %4584, 33
  %4586 = trunc i64 %4581 to i8
  %4587 = and i8 %4586, 1
  %4588 = trunc i64 %4585 to i32
  %4589 = and i64 %4585, 4294967295
  store i64 %4589, i64* %RAX, align 8, !tbaa !2428
  %4590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4587, i8* %4590, align 1, !tbaa !2451
  %4591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4592 = and i32 %4588, 255
  %4593 = call i32 @llvm.ctpop.i32(i32 %4592) #17
  %4594 = trunc i32 %4593 to i8
  %4595 = and i8 %4594, 1
  %4596 = xor i8 %4595, 1
  store i8 %4596, i8* %4591, align 1, !tbaa !2451
  %4597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4597, align 1, !tbaa !2451
  %4598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4599 = icmp eq i32 %4588, 0
  %4600 = zext i1 %4599 to i8
  store i8 %4600, i8* %4598, align 1, !tbaa !2451
  %4601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4602 = lshr i32 %4588, 31
  %4603 = trunc i32 %4602 to i8
  store i8 %4603, i8* %4601, align 1, !tbaa !2451
  %4604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4604, align 1, !tbaa !2451
  %4605 = load i64, i64* %RBP
  %4606 = sub i64 %4605, 44
  %4607 = load i32, i32* %EAX
  %4608 = zext i32 %4607 to i64
  %4609 = load i64, i64* %PC
  %4610 = add i64 %4609, 3
  store i64 %4610, i64* %PC
  %4611 = inttoptr i64 %4606 to i32*
  store i32 %4607, i32* %4611
  %4612 = load i64, i64* %RBP
  %4613 = sub i64 %4612, 28
  %4614 = load i64, i64* %PC
  %4615 = add i64 %4614, 7
  store i64 %4615, i64* %PC
  %4616 = inttoptr i64 %4613 to i32*
  store i32 0, i32* %4616
  br label %block_401235

block_40169b:                                     ; preds = %block_401694, %block_40184a
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.6, %block_401694 ], [ %MEMORY.4, %block_40184a ]
  %4617 = load i64, i64* %RBP
  %4618 = sub i64 %4617, 36
  %4619 = load i64, i64* %PC
  %4620 = add i64 %4619, 3
  store i64 %4620, i64* %PC
  %4621 = inttoptr i64 %4618 to i32*
  %4622 = load i32, i32* %4621
  %4623 = zext i32 %4622 to i64
  store i64 %4623, i64* %RAX, align 8, !tbaa !2428
  %4624 = load i32, i32* %EAX
  %4625 = zext i32 %4624 to i64
  %4626 = load i64, i64* %RBP
  %4627 = sub i64 %4626, 48
  %4628 = load i64, i64* %PC
  %4629 = add i64 %4628, 3
  store i64 %4629, i64* %PC
  %4630 = inttoptr i64 %4627 to i32*
  %4631 = load i32, i32* %4630
  %4632 = sub i32 %4624, %4631
  %4633 = icmp ult i32 %4624, %4631
  %4634 = zext i1 %4633 to i8
  %4635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4634, i8* %4635, align 1, !tbaa !2432
  %4636 = and i32 %4632, 255
  %4637 = call i32 @llvm.ctpop.i32(i32 %4636) #17
  %4638 = trunc i32 %4637 to i8
  %4639 = and i8 %4638, 1
  %4640 = xor i8 %4639, 1
  %4641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4640, i8* %4641, align 1, !tbaa !2446
  %4642 = xor i32 %4631, %4624
  %4643 = xor i32 %4642, %4632
  %4644 = lshr i32 %4643, 4
  %4645 = trunc i32 %4644 to i8
  %4646 = and i8 %4645, 1
  %4647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4646, i8* %4647, align 1, !tbaa !2447
  %4648 = icmp eq i32 %4632, 0
  %4649 = zext i1 %4648 to i8
  %4650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4649, i8* %4650, align 1, !tbaa !2448
  %4651 = lshr i32 %4632, 31
  %4652 = trunc i32 %4651 to i8
  %4653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4652, i8* %4653, align 1, !tbaa !2449
  %4654 = lshr i32 %4624, 31
  %4655 = lshr i32 %4631, 31
  %4656 = xor i32 %4655, %4654
  %4657 = xor i32 %4651, %4654
  %4658 = add nuw nsw i32 %4657, %4656
  %4659 = icmp eq i32 %4658, 2
  %4660 = zext i1 %4659 to i8
  %4661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4660, i8* %4661, align 1, !tbaa !2450
  %4662 = load i64, i64* %PC
  %4663 = add i64 %4662, 444
  %4664 = load i64, i64* %PC
  %4665 = add i64 %4664, 6
  %4666 = load i64, i64* %PC
  %4667 = add i64 %4666, 6
  store i64 %4667, i64* %PC
  %4668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4669 = load i8, i8* %4668, align 1, !tbaa !2449
  %4670 = icmp ne i8 %4669, 0
  %4671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4672 = load i8, i8* %4671, align 1, !tbaa !2450
  %4673 = icmp ne i8 %4672, 0
  %4674 = xor i1 %4670, %4673
  %4675 = xor i1 %4674, true
  %4676 = zext i1 %4675 to i8
  store i8 %4676, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4678 = select i1 %4674, i64 %4665, i64 %4663
  store i64 %4678, i64* %4677, align 8, !tbaa !2428
  %4679 = load i8, i8* %BRANCH_TAKEN
  %4680 = icmp eq i8 %4679, 1
  br i1 %4680, label %block_40185d, label %block_4016a7

block_4016ae:                                     ; preds = %block_4016a7, %block_4016ba
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_4016a7 ], [ %MEMORY.4, %block_4016ba ]
  %4681 = load i64, i64* %RBP
  %4682 = sub i64 %4681, 28
  %4683 = load i64, i64* %PC
  %4684 = add i64 %4683, 3
  store i64 %4684, i64* %PC
  %4685 = inttoptr i64 %4682 to i32*
  %4686 = load i32, i32* %4685
  %4687 = zext i32 %4686 to i64
  store i64 %4687, i64* %RAX, align 8, !tbaa !2428
  %4688 = load i32, i32* %EAX
  %4689 = zext i32 %4688 to i64
  %4690 = load i64, i64* %RBP
  %4691 = sub i64 %4690, 36
  %4692 = load i64, i64* %PC
  %4693 = add i64 %4692, 3
  store i64 %4693, i64* %PC
  %4694 = inttoptr i64 %4691 to i32*
  %4695 = load i32, i32* %4694
  %4696 = sub i32 %4688, %4695
  %4697 = icmp ult i32 %4688, %4695
  %4698 = zext i1 %4697 to i8
  %4699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4698, i8* %4699, align 1, !tbaa !2432
  %4700 = and i32 %4696, 255
  %4701 = call i32 @llvm.ctpop.i32(i32 %4700) #17
  %4702 = trunc i32 %4701 to i8
  %4703 = and i8 %4702, 1
  %4704 = xor i8 %4703, 1
  %4705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4704, i8* %4705, align 1, !tbaa !2446
  %4706 = xor i32 %4695, %4688
  %4707 = xor i32 %4706, %4696
  %4708 = lshr i32 %4707, 4
  %4709 = trunc i32 %4708 to i8
  %4710 = and i8 %4709, 1
  %4711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4710, i8* %4711, align 1, !tbaa !2447
  %4712 = icmp eq i32 %4696, 0
  %4713 = zext i1 %4712 to i8
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4713, i8* %4714, align 1, !tbaa !2448
  %4715 = lshr i32 %4696, 31
  %4716 = trunc i32 %4715 to i8
  %4717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4716, i8* %4717, align 1, !tbaa !2449
  %4718 = lshr i32 %4688, 31
  %4719 = lshr i32 %4695, 31
  %4720 = xor i32 %4719, %4718
  %4721 = xor i32 %4715, %4718
  %4722 = add nuw nsw i32 %4721, %4720
  %4723 = icmp eq i32 %4722, 2
  %4724 = zext i1 %4723 to i8
  %4725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4724, i8* %4725, align 1, !tbaa !2450
  %4726 = load i64, i64* %PC
  %4727 = add i64 %4726, 406
  %4728 = load i64, i64* %PC
  %4729 = add i64 %4728, 6
  %4730 = load i64, i64* %PC
  %4731 = add i64 %4730, 6
  store i64 %4731, i64* %PC
  %4732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4733 = load i8, i8* %4732, align 1, !tbaa !2449
  %4734 = icmp ne i8 %4733, 0
  %4735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4736 = load i8, i8* %4735, align 1, !tbaa !2450
  %4737 = icmp ne i8 %4736, 0
  %4738 = xor i1 %4734, %4737
  %4739 = xor i1 %4738, true
  %4740 = zext i1 %4739 to i8
  store i8 %4740, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4742 = select i1 %4738, i64 %4729, i64 %4727
  store i64 %4742, i64* %4741, align 8, !tbaa !2428
  %4743 = load i8, i8* %BRANCH_TAKEN
  %4744 = icmp eq i8 %4743, 1
  br i1 %4744, label %block_40184a, label %block_4016ba

block_40129a:                                     ; preds = %block_401293, %block_4015bd
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.6, %block_401293 ], [ %MEMORY.2, %block_4015bd ]
  %4745 = load i64, i64* %RBP
  %4746 = sub i64 %4745, 36
  %4747 = load i64, i64* %PC
  %4748 = add i64 %4747, 3
  store i64 %4748, i64* %PC
  %4749 = inttoptr i64 %4746 to i32*
  %4750 = load i32, i32* %4749
  %4751 = zext i32 %4750 to i64
  store i64 %4751, i64* %RAX, align 8, !tbaa !2428
  %4752 = load i32, i32* %EAX
  %4753 = zext i32 %4752 to i64
  %4754 = load i64, i64* %RBP
  %4755 = sub i64 %4754, 48
  %4756 = load i64, i64* %PC
  %4757 = add i64 %4756, 3
  store i64 %4757, i64* %PC
  %4758 = inttoptr i64 %4755 to i32*
  %4759 = load i32, i32* %4758
  %4760 = sub i32 %4752, %4759
  %4761 = icmp ult i32 %4752, %4759
  %4762 = zext i1 %4761 to i8
  %4763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4762, i8* %4763, align 1, !tbaa !2432
  %4764 = and i32 %4760, 255
  %4765 = call i32 @llvm.ctpop.i32(i32 %4764) #17
  %4766 = trunc i32 %4765 to i8
  %4767 = and i8 %4766, 1
  %4768 = xor i8 %4767, 1
  %4769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4768, i8* %4769, align 1, !tbaa !2446
  %4770 = xor i32 %4759, %4752
  %4771 = xor i32 %4770, %4760
  %4772 = lshr i32 %4771, 4
  %4773 = trunc i32 %4772 to i8
  %4774 = and i8 %4773, 1
  %4775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4774, i8* %4775, align 1, !tbaa !2447
  %4776 = icmp eq i32 %4760, 0
  %4777 = zext i1 %4776 to i8
  %4778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4777, i8* %4778, align 1, !tbaa !2448
  %4779 = lshr i32 %4760, 31
  %4780 = trunc i32 %4779 to i8
  %4781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4780, i8* %4781, align 1, !tbaa !2449
  %4782 = lshr i32 %4752, 31
  %4783 = lshr i32 %4759, 31
  %4784 = xor i32 %4783, %4782
  %4785 = xor i32 %4779, %4782
  %4786 = add nuw nsw i32 %4785, %4784
  %4787 = icmp eq i32 %4786, 2
  %4788 = zext i1 %4787 to i8
  %4789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4788, i8* %4789, align 1, !tbaa !2450
  %4790 = load i64, i64* %PC
  %4791 = add i64 %4790, 1007
  %4792 = load i64, i64* %PC
  %4793 = add i64 %4792, 6
  %4794 = load i64, i64* %PC
  %4795 = add i64 %4794, 6
  store i64 %4795, i64* %PC
  %4796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4797 = load i8, i8* %4796, align 1, !tbaa !2449
  %4798 = icmp ne i8 %4797, 0
  %4799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4800 = load i8, i8* %4799, align 1, !tbaa !2450
  %4801 = icmp ne i8 %4800, 0
  %4802 = xor i1 %4798, %4801
  %4803 = xor i1 %4802, true
  %4804 = zext i1 %4803 to i8
  store i8 %4804, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4806 = select i1 %4802, i64 %4793, i64 %4791
  store i64 %4806, i64* %4805, align 8, !tbaa !2428
  %4807 = load i8, i8* %BRANCH_TAKEN
  %4808 = icmp eq i8 %4807, 1
  br i1 %4808, label %block_40168f, label %block_4012a6

block_40126d:                                     ; preds = %block_401235
  %4809 = sub i64 %3283, 48
  %4810 = load i64, i64* %PC
  %4811 = add i64 %4810, 3
  store i64 %4811, i64* %PC
  %4812 = inttoptr i64 %4809 to i32*
  %4813 = load i32, i32* %4812
  %4814 = zext i32 %4813 to i64
  store i64 %4814, i64* %RAX, align 8, !tbaa !2428
  %4815 = load i64, i64* %RAX
  %4816 = load i64, i64* %PC
  %4817 = add i64 %4816, 3
  store i64 %4817, i64* %PC
  %4818 = trunc i64 %4815 to i32
  %4819 = shl i32 %4818, 1
  %4820 = icmp slt i32 %4818, 0
  %4821 = icmp slt i32 %4819, 0
  %4822 = xor i1 %4820, %4821
  %4823 = zext i32 %4819 to i64
  store i64 %4823, i64* %RAX, align 8, !tbaa !2428
  %4824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4825 = zext i1 %4820 to i8
  store i8 %4825, i8* %4824, align 1, !tbaa !2451
  %4826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4827 = and i32 %4819, 254
  %4828 = call i32 @llvm.ctpop.i32(i32 %4827) #17
  %4829 = trunc i32 %4828 to i8
  %4830 = and i8 %4829, 1
  %4831 = xor i8 %4830, 1
  store i8 %4831, i8* %4826, align 1, !tbaa !2451
  %4832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4832, align 1, !tbaa !2451
  %4833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4834 = icmp eq i32 %4819, 0
  %4835 = zext i1 %4834 to i8
  store i8 %4835, i8* %4833, align 1, !tbaa !2451
  %4836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4837 = lshr i32 %4819, 31
  %4838 = trunc i32 %4837 to i8
  store i8 %4838, i8* %4836, align 1, !tbaa !2451
  %4839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4840 = zext i1 %4822 to i8
  store i8 %4840, i8* %4839, align 1, !tbaa !2451
  %4841 = load i64, i64* %RBP
  %4842 = sub i64 %4841, 48
  %4843 = load i32, i32* %EAX
  %4844 = zext i32 %4843 to i64
  %4845 = load i64, i64* %PC
  %4846 = add i64 %4845, 3
  store i64 %4846, i64* %PC
  %4847 = inttoptr i64 %4842 to i32*
  store i32 %4843, i32* %4847
  %4848 = load i64, i64* %PC
  %4849 = sub i64 %4848, 96
  %4850 = load i64, i64* %PC
  %4851 = add i64 %4850, 5
  store i64 %4851, i64* %PC
  %4852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4849, i64* %4852, align 8, !tbaa !2428
  br label %block_401216

block_401216:                                     ; preds = %block_40126d, %block_4011f0
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_4011f0 ], [ %MEMORY.1, %block_40126d ]
  %4853 = load i64, i64* %RBP
  %4854 = sub i64 %4853, 48
  %4855 = load i64, i64* %PC
  %4856 = add i64 %4855, 3
  store i64 %4856, i64* %PC
  %4857 = inttoptr i64 %4854 to i32*
  %4858 = load i32, i32* %4857
  %4859 = zext i32 %4858 to i64
  store i64 %4859, i64* %RAX, align 8, !tbaa !2428
  %4860 = load i64, i64* %RAX
  %4861 = load i64, i64* %PC
  %4862 = add i64 %4861, 3
  store i64 %4862, i64* %PC
  %4863 = and i64 %4860, 4294967295
  %4864 = shl i64 %4863, 2
  %4865 = trunc i64 %4864 to i32
  %4866 = icmp slt i32 %4865, 0
  %4867 = shl i32 %4865, 1
  %4868 = zext i32 %4867 to i64
  store i64 %4868, i64* %RAX, align 8, !tbaa !2428
  %4869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4870 = zext i1 %4866 to i8
  store i8 %4870, i8* %4869, align 1, !tbaa !2451
  %4871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4872 = and i32 %4867, 254
  %4873 = call i32 @llvm.ctpop.i32(i32 %4872) #17
  %4874 = trunc i32 %4873 to i8
  %4875 = and i8 %4874, 1
  %4876 = xor i8 %4875, 1
  store i8 %4876, i8* %4871, align 1, !tbaa !2451
  %4877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4877, align 1, !tbaa !2451
  %4878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4879 = icmp eq i32 %4867, 0
  %4880 = zext i1 %4879 to i8
  store i8 %4880, i8* %4878, align 1, !tbaa !2451
  %4881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4882 = lshr i32 %4867, 31
  %4883 = trunc i32 %4882 to i8
  store i8 %4883, i8* %4881, align 1, !tbaa !2451
  %4884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4884, align 1, !tbaa !2451
  %4885 = load i32, i32* %EAX
  %4886 = zext i32 %4885 to i64
  %4887 = load i64, i64* %RBP
  %4888 = sub i64 %4887, 44
  %4889 = load i64, i64* %PC
  %4890 = add i64 %4889, 3
  store i64 %4890, i64* %PC
  %4891 = inttoptr i64 %4888 to i32*
  %4892 = load i32, i32* %4891
  %4893 = sub i32 %4885, %4892
  %4894 = icmp ult i32 %4885, %4892
  %4895 = zext i1 %4894 to i8
  %4896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4895, i8* %4896, align 1, !tbaa !2432
  %4897 = and i32 %4893, 255
  %4898 = call i32 @llvm.ctpop.i32(i32 %4897) #17
  %4899 = trunc i32 %4898 to i8
  %4900 = and i8 %4899, 1
  %4901 = xor i8 %4900, 1
  %4902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4901, i8* %4902, align 1, !tbaa !2446
  %4903 = xor i32 %4892, %4885
  %4904 = xor i32 %4903, %4893
  %4905 = lshr i32 %4904, 4
  %4906 = trunc i32 %4905 to i8
  %4907 = and i8 %4906, 1
  %4908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4907, i8* %4908, align 1, !tbaa !2447
  %4909 = icmp eq i32 %4893, 0
  %4910 = zext i1 %4909 to i8
  %4911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4910, i8* %4911, align 1, !tbaa !2448
  %4912 = lshr i32 %4893, 31
  %4913 = trunc i32 %4912 to i8
  %4914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4913, i8* %4914, align 1, !tbaa !2449
  %4915 = lshr i32 %4885, 31
  %4916 = lshr i32 %4892, 31
  %4917 = xor i32 %4916, %4915
  %4918 = xor i32 %4912, %4915
  %4919 = add nuw nsw i32 %4918, %4917
  %4920 = icmp eq i32 %4919, 2
  %4921 = zext i1 %4920 to i8
  %4922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4921, i8* %4922, align 1, !tbaa !2450
  %4923 = load i64, i64* %PC
  %4924 = add i64 %4923, 92
  %4925 = load i64, i64* %PC
  %4926 = add i64 %4925, 6
  %4927 = load i64, i64* %PC
  %4928 = add i64 %4927, 6
  store i64 %4928, i64* %PC
  %4929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4930 = load i8, i8* %4929, align 1, !tbaa !2449
  %4931 = icmp ne i8 %4930, 0
  %4932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4933 = load i8, i8* %4932, align 1, !tbaa !2450
  %4934 = icmp ne i8 %4933, 0
  %4935 = xor i1 %4931, %4934
  %4936 = xor i1 %4935, true
  %4937 = zext i1 %4936 to i8
  store i8 %4937, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4939 = select i1 %4935, i64 %4926, i64 %4924
  store i64 %4939, i64* %4938, align 8, !tbaa !2428
  %4940 = load i8, i8* %BRANCH_TAKEN
  %4941 = icmp eq i8 %4940, 1
  %4942 = load i64, i64* %RBP
  br i1 %4941, label %block_40127b, label %block_401225

block_401694:                                     ; preds = %block_40127b
  %4943 = inttoptr i64 %5074 to i32*
  store i32 1, i32* %4943
  br label %block_40169b

block_4016a7:                                     ; preds = %block_40169b
  %4944 = load i64, i64* %RBP
  %4945 = sub i64 %4944, 28
  %4946 = load i64, i64* %PC
  %4947 = add i64 %4946, 7
  store i64 %4947, i64* %PC
  %4948 = inttoptr i64 %4945 to i32*
  store i32 0, i32* %4948
  br label %block_4016ae

block_401293:                                     ; preds = %block_40127b
  %4949 = inttoptr i64 %5074 to i32*
  store i32 0, i32* %4949
  br label %block_40129a

block_40127b:                                     ; preds = %block_401216
  %4950 = sub i64 %4942, 48
  %4951 = load i64, i64* %PC
  %4952 = add i64 %4951, 3
  store i64 %4952, i64* %PC
  %4953 = inttoptr i64 %4950 to i32*
  %4954 = load i32, i32* %4953
  %4955 = zext i32 %4954 to i64
  store i64 %4955, i64* %RAX, align 8, !tbaa !2428
  %4956 = load i64, i64* %RAX
  %4957 = load i64, i64* %PC
  %4958 = add i64 %4957, 3
  store i64 %4958, i64* %PC
  %4959 = trunc i64 %4956 to i32
  %4960 = shl i32 %4959, 1
  %4961 = icmp slt i32 %4959, 0
  %4962 = icmp slt i32 %4960, 0
  %4963 = xor i1 %4961, %4962
  %4964 = zext i32 %4960 to i64
  store i64 %4964, i64* %RAX, align 8, !tbaa !2428
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4966 = zext i1 %4961 to i8
  store i8 %4966, i8* %4965, align 1, !tbaa !2451
  %4967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4968 = and i32 %4960, 254
  %4969 = call i32 @llvm.ctpop.i32(i32 %4968) #17
  %4970 = trunc i32 %4969 to i8
  %4971 = and i8 %4970, 1
  %4972 = xor i8 %4971, 1
  store i8 %4972, i8* %4967, align 1, !tbaa !2451
  %4973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4973, align 1, !tbaa !2451
  %4974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4975 = icmp eq i32 %4960, 0
  %4976 = zext i1 %4975 to i8
  store i8 %4976, i8* %4974, align 1, !tbaa !2451
  %4977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4978 = lshr i32 %4960, 31
  %4979 = trunc i32 %4978 to i8
  store i8 %4979, i8* %4977, align 1, !tbaa !2451
  %4980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4981 = zext i1 %4963 to i8
  store i8 %4981, i8* %4980, align 1, !tbaa !2451
  %4982 = load i64, i64* %RBP
  %4983 = sub i64 %4982, 52
  %4984 = load i32, i32* %EAX
  %4985 = zext i32 %4984 to i64
  %4986 = load i64, i64* %PC
  %4987 = add i64 %4986, 3
  store i64 %4987, i64* %PC
  %4988 = inttoptr i64 %4983 to i32*
  store i32 %4984, i32* %4988
  %4989 = load i64, i64* %RBP
  %4990 = sub i64 %4989, 48
  %4991 = load i64, i64* %PC
  %4992 = add i64 %4991, 3
  store i64 %4992, i64* %PC
  %4993 = inttoptr i64 %4990 to i32*
  %4994 = load i32, i32* %4993
  %4995 = zext i32 %4994 to i64
  store i64 %4995, i64* %RAX, align 8, !tbaa !2428
  %4996 = load i64, i64* %RAX
  %4997 = load i64, i64* %PC
  %4998 = add i64 %4997, 3
  store i64 %4998, i64* %PC
  %4999 = and i64 %4996, 4294967295
  %5000 = shl i64 %4999, 2
  %5001 = trunc i64 %5000 to i32
  %5002 = icmp slt i32 %5001, 0
  %5003 = shl i32 %5001, 1
  %5004 = zext i32 %5003 to i64
  store i64 %5004, i64* %RAX, align 8, !tbaa !2428
  %5005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5006 = zext i1 %5002 to i8
  store i8 %5006, i8* %5005, align 1, !tbaa !2451
  %5007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5008 = and i32 %5003, 254
  %5009 = call i32 @llvm.ctpop.i32(i32 %5008) #17
  %5010 = trunc i32 %5009 to i8
  %5011 = and i8 %5010, 1
  %5012 = xor i8 %5011, 1
  store i8 %5012, i8* %5007, align 1, !tbaa !2451
  %5013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5013, align 1, !tbaa !2451
  %5014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5015 = icmp eq i32 %5003, 0
  %5016 = zext i1 %5015 to i8
  store i8 %5016, i8* %5014, align 1, !tbaa !2451
  %5017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5018 = lshr i32 %5003, 31
  %5019 = trunc i32 %5018 to i8
  store i8 %5019, i8* %5017, align 1, !tbaa !2451
  %5020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5020, align 1, !tbaa !2451
  %5021 = load i32, i32* %EAX
  %5022 = zext i32 %5021 to i64
  %5023 = load i64, i64* %RBP
  %5024 = sub i64 %5023, 44
  %5025 = load i64, i64* %PC
  %5026 = add i64 %5025, 3
  store i64 %5026, i64* %PC
  %5027 = inttoptr i64 %5024 to i32*
  %5028 = load i32, i32* %5027
  %5029 = sub i32 %5021, %5028
  %5030 = icmp ult i32 %5021, %5028
  %5031 = zext i1 %5030 to i8
  %5032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5031, i8* %5032, align 1, !tbaa !2432
  %5033 = and i32 %5029, 255
  %5034 = call i32 @llvm.ctpop.i32(i32 %5033) #17
  %5035 = trunc i32 %5034 to i8
  %5036 = and i8 %5035, 1
  %5037 = xor i8 %5036, 1
  %5038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5037, i8* %5038, align 1, !tbaa !2446
  %5039 = xor i32 %5028, %5021
  %5040 = xor i32 %5039, %5029
  %5041 = lshr i32 %5040, 4
  %5042 = trunc i32 %5041 to i8
  %5043 = and i8 %5042, 1
  %5044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5043, i8* %5044, align 1, !tbaa !2447
  %5045 = icmp eq i32 %5029, 0
  %5046 = zext i1 %5045 to i8
  %5047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5046, i8* %5047, align 1, !tbaa !2448
  %5048 = lshr i32 %5029, 31
  %5049 = trunc i32 %5048 to i8
  %5050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5049, i8* %5050, align 1, !tbaa !2449
  %5051 = lshr i32 %5021, 31
  %5052 = lshr i32 %5028, 31
  %5053 = xor i32 %5052, %5051
  %5054 = xor i32 %5048, %5051
  %5055 = add nuw nsw i32 %5054, %5053
  %5056 = icmp eq i32 %5055, 2
  %5057 = zext i1 %5056 to i8
  %5058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5057, i8* %5058, align 1, !tbaa !2450
  %5059 = load i64, i64* %PC
  %5060 = add i64 %5059, 1031
  %5061 = load i64, i64* %PC
  %5062 = add i64 %5061, 6
  %5063 = load i64, i64* %PC
  %5064 = add i64 %5063, 6
  store i64 %5064, i64* %PC
  %5065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5066 = load i8, i8* %5065, align 1, !tbaa !2448
  %5067 = icmp eq i8 %5066, 0
  %5068 = zext i1 %5067 to i8
  store i8 %5068, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5070 = select i1 %5067, i64 %5060, i64 %5062
  store i64 %5070, i64* %5069, align 8, !tbaa !2428
  %5071 = load i8, i8* %BRANCH_TAKEN
  %5072 = icmp eq i8 %5071, 1
  %5073 = load i64, i64* %RBP
  %5074 = sub i64 %5073, 36
  %5075 = load i64, i64* %PC
  %5076 = add i64 %5075, 7
  store i64 %5076, i64* %PC
  br i1 %5072, label %block_401694, label %block_401293

block_401241:                                     ; preds = %block_401235
  %5077 = sub i64 %3283, 16
  %5078 = load i64, i64* %PC
  %5079 = add i64 %5078, 4
  store i64 %5079, i64* %PC
  %5080 = inttoptr i64 %5077 to i64*
  %5081 = load i64, i64* %5080
  store i64 %5081, i64* %RAX, align 8, !tbaa !2428
  %5082 = load i64, i64* %RBP
  %5083 = sub i64 %5082, 28
  %5084 = load i64, i64* %PC
  %5085 = add i64 %5084, 4
  store i64 %5085, i64* %PC
  %5086 = inttoptr i64 %5083 to i32*
  %5087 = load i32, i32* %5086
  %5088 = sext i32 %5087 to i64
  store i64 %5088, i64* %RCX, align 8, !tbaa !2428
  %5089 = load i64, i64* %RAX
  %5090 = load i64, i64* %RCX
  %5091 = mul i64 %5090, 4
  %5092 = add i64 %5091, %5089
  %5093 = load i64, i64* %PC
  %5094 = add i64 %5093, 3
  store i64 %5094, i64* %PC
  %5095 = inttoptr i64 %5092 to i32*
  %5096 = load i32, i32* %5095
  %5097 = zext i32 %5096 to i64
  store i64 %5097, i64* %RDX, align 8, !tbaa !2428
  %5098 = load i64, i64* %RDX
  %5099 = load i64, i64* %RBP
  %5100 = sub i64 %5099, 44
  %5101 = load i64, i64* %PC
  %5102 = add i64 %5101, 3
  store i64 %5102, i64* %PC
  %5103 = trunc i64 %5098 to i32
  %5104 = inttoptr i64 %5100 to i32*
  %5105 = load i32, i32* %5104
  %5106 = add i32 %5105, %5103
  %5107 = zext i32 %5106 to i64
  store i64 %5107, i64* %RDX, align 8, !tbaa !2428
  %5108 = icmp ult i32 %5106, %5103
  %5109 = icmp ult i32 %5106, %5105
  %5110 = or i1 %5108, %5109
  %5111 = zext i1 %5110 to i8
  %5112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5111, i8* %5112, align 1, !tbaa !2432
  %5113 = and i32 %5106, 255
  %5114 = call i32 @llvm.ctpop.i32(i32 %5113) #17
  %5115 = trunc i32 %5114 to i8
  %5116 = and i8 %5115, 1
  %5117 = xor i8 %5116, 1
  %5118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5117, i8* %5118, align 1, !tbaa !2446
  %5119 = xor i32 %5105, %5103
  %5120 = xor i32 %5119, %5106
  %5121 = lshr i32 %5120, 4
  %5122 = trunc i32 %5121 to i8
  %5123 = and i8 %5122, 1
  %5124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5123, i8* %5124, align 1, !tbaa !2447
  %5125 = icmp eq i32 %5106, 0
  %5126 = zext i1 %5125 to i8
  %5127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5126, i8* %5127, align 1, !tbaa !2448
  %5128 = lshr i32 %5106, 31
  %5129 = trunc i32 %5128 to i8
  %5130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5129, i8* %5130, align 1, !tbaa !2449
  %5131 = lshr i32 %5103, 31
  %5132 = lshr i32 %5105, 31
  %5133 = xor i32 %5128, %5131
  %5134 = xor i32 %5128, %5132
  %5135 = add nuw nsw i32 %5133, %5134
  %5136 = icmp eq i32 %5135, 2
  %5137 = zext i1 %5136 to i8
  %5138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5137, i8* %5138, align 1, !tbaa !2450
  %5139 = load i64, i64* %RBP
  %5140 = sub i64 %5139, 16
  %5141 = load i64, i64* %PC
  %5142 = add i64 %5141, 4
  store i64 %5142, i64* %PC
  %5143 = inttoptr i64 %5140 to i64*
  %5144 = load i64, i64* %5143
  store i64 %5144, i64* %RAX, align 8, !tbaa !2428
  %5145 = load i64, i64* %RBP
  %5146 = sub i64 %5145, 48
  %5147 = load i64, i64* %PC
  %5148 = add i64 %5147, 3
  store i64 %5148, i64* %PC
  %5149 = inttoptr i64 %5146 to i32*
  %5150 = load i32, i32* %5149
  %5151 = zext i32 %5150 to i64
  store i64 %5151, i64* %RSI, align 8, !tbaa !2428
  %5152 = load i64, i64* %RSI
  %5153 = load i64, i64* %RBP
  %5154 = sub i64 %5153, 28
  %5155 = load i64, i64* %PC
  %5156 = add i64 %5155, 3
  store i64 %5156, i64* %PC
  %5157 = trunc i64 %5152 to i32
  %5158 = inttoptr i64 %5154 to i32*
  %5159 = load i32, i32* %5158
  %5160 = add i32 %5159, %5157
  %5161 = zext i32 %5160 to i64
  store i64 %5161, i64* %RSI, align 8, !tbaa !2428
  %5162 = icmp ult i32 %5160, %5157
  %5163 = icmp ult i32 %5160, %5159
  %5164 = or i1 %5162, %5163
  %5165 = zext i1 %5164 to i8
  %5166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5165, i8* %5166, align 1, !tbaa !2432
  %5167 = and i32 %5160, 255
  %5168 = call i32 @llvm.ctpop.i32(i32 %5167) #17
  %5169 = trunc i32 %5168 to i8
  %5170 = and i8 %5169, 1
  %5171 = xor i8 %5170, 1
  %5172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5171, i8* %5172, align 1, !tbaa !2446
  %5173 = xor i32 %5159, %5157
  %5174 = xor i32 %5173, %5160
  %5175 = lshr i32 %5174, 4
  %5176 = trunc i32 %5175 to i8
  %5177 = and i8 %5176, 1
  %5178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5177, i8* %5178, align 1, !tbaa !2447
  %5179 = icmp eq i32 %5160, 0
  %5180 = zext i1 %5179 to i8
  %5181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5180, i8* %5181, align 1, !tbaa !2448
  %5182 = lshr i32 %5160, 31
  %5183 = trunc i32 %5182 to i8
  %5184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5183, i8* %5184, align 1, !tbaa !2449
  %5185 = lshr i32 %5157, 31
  %5186 = lshr i32 %5159, 31
  %5187 = xor i32 %5182, %5185
  %5188 = xor i32 %5182, %5186
  %5189 = add nuw nsw i32 %5187, %5188
  %5190 = icmp eq i32 %5189, 2
  %5191 = zext i1 %5190 to i8
  %5192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5191, i8* %5192, align 1, !tbaa !2450
  %5193 = load i32, i32* %ESI
  %5194 = zext i32 %5193 to i64
  %5195 = load i64, i64* %PC
  %5196 = add i64 %5195, 3
  store i64 %5196, i64* %PC
  %5197 = shl i64 %5194, 32
  %5198 = ashr exact i64 %5197, 32
  store i64 %5198, i64* %RCX, align 8, !tbaa !2428
  %5199 = load i64, i64* %RAX
  %5200 = load i64, i64* %RCX
  %5201 = mul i64 %5200, 4
  %5202 = add i64 %5201, %5199
  %5203 = load i32, i32* %EDX
  %5204 = zext i32 %5203 to i64
  %5205 = load i64, i64* %PC
  %5206 = add i64 %5205, 3
  store i64 %5206, i64* %PC
  %5207 = inttoptr i64 %5202 to i32*
  store i32 %5203, i32* %5207
  %5208 = load i64, i64* %RBP
  %5209 = sub i64 %5208, 28
  %5210 = load i64, i64* %PC
  %5211 = add i64 %5210, 3
  store i64 %5211, i64* %PC
  %5212 = inttoptr i64 %5209 to i32*
  %5213 = load i32, i32* %5212
  %5214 = zext i32 %5213 to i64
  store i64 %5214, i64* %RAX, align 8, !tbaa !2428
  %5215 = load i64, i64* %RAX
  %5216 = load i64, i64* %PC
  %5217 = add i64 %5216, 3
  store i64 %5217, i64* %PC
  %5218 = trunc i64 %5215 to i32
  %5219 = add i32 1, %5218
  %5220 = zext i32 %5219 to i64
  store i64 %5220, i64* %RAX, align 8, !tbaa !2428
  %5221 = icmp ult i32 %5219, %5218
  %5222 = icmp ult i32 %5219, 1
  %5223 = or i1 %5221, %5222
  %5224 = zext i1 %5223 to i8
  %5225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5224, i8* %5225, align 1, !tbaa !2432
  %5226 = and i32 %5219, 255
  %5227 = call i32 @llvm.ctpop.i32(i32 %5226) #17
  %5228 = trunc i32 %5227 to i8
  %5229 = and i8 %5228, 1
  %5230 = xor i8 %5229, 1
  %5231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5230, i8* %5231, align 1, !tbaa !2446
  %5232 = xor i64 1, %5215
  %5233 = trunc i64 %5232 to i32
  %5234 = xor i32 %5233, %5219
  %5235 = lshr i32 %5234, 4
  %5236 = trunc i32 %5235 to i8
  %5237 = and i8 %5236, 1
  %5238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5237, i8* %5238, align 1, !tbaa !2447
  %5239 = icmp eq i32 %5219, 0
  %5240 = zext i1 %5239 to i8
  %5241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5240, i8* %5241, align 1, !tbaa !2448
  %5242 = lshr i32 %5219, 31
  %5243 = trunc i32 %5242 to i8
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5243, i8* %5244, align 1, !tbaa !2449
  %5245 = lshr i32 %5218, 31
  %5246 = xor i32 %5242, %5245
  %5247 = add nuw nsw i32 %5246, %5242
  %5248 = icmp eq i32 %5247, 2
  %5249 = zext i1 %5248 to i8
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5249, i8* %5250, align 1, !tbaa !2450
  %5251 = load i64, i64* %RBP
  %5252 = sub i64 %5251, 28
  %5253 = load i32, i32* %EAX
  %5254 = zext i32 %5253 to i64
  %5255 = load i64, i64* %PC
  %5256 = add i64 %5255, 3
  store i64 %5256, i64* %PC
  %5257 = inttoptr i64 %5252 to i32*
  store i32 %5253, i32* %5257
  %5258 = load i64, i64* %PC
  %5259 = sub i64 %5258, 51
  %5260 = load i64, i64* %PC
  %5261 = add i64 %5260, 5
  store i64 %5261, i64* %PC
  %5262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5259, i64* %5262, align 8, !tbaa !2428
  br label %block_401235

block_40168f:                                     ; preds = %block_40129a
  %5263 = load i64, i64* %PC
  %5264 = add i64 %5263, 467
  %5265 = load i64, i64* %PC
  %5266 = add i64 %5265, 5
  store i64 %5266, i64* %PC
  %5267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5264, i64* %5267, align 8, !tbaa !2428
  br label %block_401862
}

; Function Attrs: noinline
define %struct.Memory* @sub_400760__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400760:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #17
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #17
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_404090___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_404020___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_604ff0__got_type, %seg_604ff0__got_type* @seg_604ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_605120___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_401100_errorcheck(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401100:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %45 to %"class.std::bitset"*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %47 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %46, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %47 to %"class.std::bitset"*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %49 to %union.vec128_t*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %51 to %union.vec128_t*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %53 to %union.vec128_t*
  %54 = load i64, i64* %RBP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 1
  store i64 %56, i64* %PC
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8, !tbaa !2428
  %59 = add i64 %58, -8
  %60 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %60
  store i64 %59, i64* %57, align 8, !tbaa !2428
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 3
  store i64 %63, i64* %PC
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  %64 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %65 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %66 = bitcast %union.vec128_t* %XMM1 to i8*
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  %69 = bitcast i8* %65 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = getelementptr inbounds i8, i8* %65, i64 8
  %72 = bitcast i8* %71 to i64*
  %73 = load i64, i64* %72, align 1
  %74 = bitcast i8* %66 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = getelementptr inbounds i8, i8* %66, i64 8
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = xor i64 %75, %70
  %80 = xor i64 %78, %73
  %81 = trunc i64 %79 to i32
  %82 = lshr i64 %79, 32
  %83 = trunc i64 %82 to i32
  %84 = bitcast i8* %64 to i32*
  store i32 %81, i32* %84, align 1, !tbaa !2454
  %85 = getelementptr inbounds i8, i8* %64, i64 4
  %86 = bitcast i8* %85 to i32*
  store i32 %83, i32* %86, align 1, !tbaa !2454
  %87 = trunc i64 %80 to i32
  %88 = getelementptr inbounds i8, i8* %64, i64 8
  %89 = bitcast i8* %88 to i32*
  store i32 %87, i32* %89, align 1, !tbaa !2454
  %90 = lshr i64 %80, 32
  %91 = trunc i64 %90 to i32
  %92 = getelementptr inbounds i8, i8* %64, i64 12
  %93 = bitcast i8* %92 to i32*
  store i32 %91, i32* %93, align 1, !tbaa !2454
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 4
  %96 = load i32, i32* %EDI
  %97 = zext i32 %96 to i64
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %95 to i32*
  store i32 %96, i32* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 8
  %103 = load i32, i32* %ESI
  %104 = zext i32 %103 to i64
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 3
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %107
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 16
  %110 = bitcast %union.vec128_t* %XMM0 to i8*
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  %113 = bitcast i8* %110 to double*
  %114 = load double, double* %113, align 1
  %115 = inttoptr i64 %109 to double*
  store double %114, double* %115
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 24
  %118 = load i64, i64* %RDX
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 32
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 7
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  store i32 0, i32* %126
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 40
  %129 = bitcast %union.vec128_t* %XMM1 to i8*
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 5
  store i64 %131, i64* %PC
  %132 = bitcast i8* %129 to double*
  %133 = load double, double* %132, align 1
  %134 = inttoptr i64 %128 to double*
  store double %133, double* %134
  %135 = load i64, i64* %RBP
  %136 = sub i64 %135, 4
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 3
  store i64 %138, i64* %PC
  %139 = inttoptr i64 %136 to i32*
  %140 = load i32, i32* %139
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %RSI, align 8, !tbaa !2428
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 28
  %144 = load i32, i32* %ESI
  %145 = zext i32 %144 to i64
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 3
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %143 to i32*
  store i32 %144, i32* %148
  br label %block_401128

block_40119e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %149 = sub i64 %546, 40
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to double*
  %153 = load double, double* %152
  %154 = bitcast i8* %545 to double*
  store double %153, double* %154, align 1, !tbaa !2452
  %155 = getelementptr inbounds i8, i8* %545, i64 8
  %156 = bitcast i8* %155 to double*
  store double 0.000000e+00, double* %156, align 1, !tbaa !2452
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 64
  %159 = bitcast %union.vec128_t* %XMM0 to i8*
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC
  %162 = bitcast i8* %159 to double*
  %163 = load double, double* %162, align 1
  %164 = inttoptr i64 %158 to double*
  store double %163, double* %164
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 26
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %166, i64* %169, align 8, !tbaa !2428
  br label %block_4011c2

block_4011da:                                     ; preds = %block_401128
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 40
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 5
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to double*
  %175 = load double, double* %174
  %176 = bitcast i8* %675 to double*
  store double %175, double* %176, align 1, !tbaa !2452
  %177 = getelementptr inbounds i8, i8* %675, i64 8
  %178 = bitcast i8* %177 to double*
  store double 0.000000e+00, double* %178, align 1, !tbaa !2452
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 1
  store i64 %180, i64* %PC
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %182 = load i64, i64* %181, align 8, !tbaa !2428
  %183 = add i64 %182, 8
  %184 = inttoptr i64 %182 to i64*
  %185 = load i64, i64* %184
  store i64 %185, i64* %RBP, align 8, !tbaa !2428
  store i64 %183, i64* %181, align 8, !tbaa !2428
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 1
  store i64 %187, i64* %PC
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %190 = load i64, i64* %189, align 8, !tbaa !2428
  %191 = inttoptr i64 %190 to i64*
  %192 = load i64, i64* %191
  store i64 %192, i64* %188, align 8, !tbaa !2428
  %193 = add i64 %190, 8
  store i64 %193, i64* %189, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401134:                                     ; preds = %block_401128
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 8
  store i64 %195, i64* %PC
  %196 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 72) to double*)
  %197 = bitcast i8* %675 to double*
  store double %196, double* %197, align 1, !tbaa !2452
  %198 = getelementptr inbounds i8, i8* %675, i64 8
  %199 = bitcast i8* %198 to double*
  store double 0.000000e+00, double* %199, align 1, !tbaa !2452
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 5
  store i64 %201, i64* %PC
  store i64 259200, i64* %RAX, align 8, !tbaa !2428
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 32
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 7
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i32*
  %207 = load i32, i32* %206
  %208 = sext i32 %207 to i64
  %209 = mul nsw i64 %208, 7141
  %210 = trunc i64 %209 to i32
  %211 = and i64 %209, 4294967295
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = shl i64 %209, 32
  %213 = ashr exact i64 %212, 32
  %214 = icmp ne i64 %213, %209
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %215, i8* %216, align 1, !tbaa !2432
  %217 = and i32 %210, 255
  %218 = call i32 @llvm.ctpop.i32(i32 %217) #17
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %221, i8* %222, align 1, !tbaa !2446
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %223, align 1, !tbaa !2447
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %224, align 1, !tbaa !2448
  %225 = lshr i32 %210, 31
  %226 = trunc i32 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %226, i8* %227, align 1, !tbaa !2449
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %215, i8* %228, align 1, !tbaa !2450
  %229 = load i64, i64* %RCX
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 6
  store i64 %231, i64* %PC
  %232 = trunc i64 %229 to i32
  %233 = add i32 54773, %232
  %234 = zext i32 %233 to i64
  store i64 %234, i64* %RCX, align 8, !tbaa !2428
  %235 = icmp ult i32 %233, %232
  %236 = icmp ult i32 %233, 54773
  %237 = or i1 %235, %236
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %238, i8* %239, align 1, !tbaa !2432
  %240 = and i32 %233, 255
  %241 = call i32 @llvm.ctpop.i32(i32 %240) #17
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  %244 = xor i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %244, i8* %245, align 1, !tbaa !2446
  %246 = xor i64 54773, %229
  %247 = trunc i64 %246 to i32
  %248 = xor i32 %247, %233
  %249 = lshr i32 %248, 4
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %251, i8* %252, align 1, !tbaa !2447
  %253 = icmp eq i32 %233, 0
  %254 = zext i1 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %254, i8* %255, align 1, !tbaa !2448
  %256 = lshr i32 %233, 31
  %257 = trunc i32 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %257, i8* %258, align 1, !tbaa !2449
  %259 = lshr i32 %232, 31
  %260 = xor i32 %256, %259
  %261 = add nuw nsw i32 %260, %256
  %262 = icmp eq i32 %261, 2
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %263, i8* %264, align 1, !tbaa !2450
  %265 = load i64, i64* %RBP
  %266 = sub i64 %265, 52
  %267 = load i32, i32* %EAX
  %268 = zext i32 %267 to i64
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 3
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %266 to i32*
  store i32 %267, i32* %271
  %272 = load i32, i32* %ECX
  %273 = zext i32 %272 to i64
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 2
  store i64 %275, i64* %PC
  %276 = and i64 %273, 4294967295
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 1
  store i64 %278, i64* %PC
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %281 = bitcast %union.anon* %280 to i32*
  %282 = load i32, i32* %281, align 8, !tbaa !2454
  %283 = sext i32 %282 to i64
  %284 = lshr i64 %283, 32
  store i64 %284, i64* %279, align 8, !tbaa !2428
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 52
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 3
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i32*
  %290 = load i32, i32* %289
  %291 = zext i32 %290 to i64
  store i64 %291, i64* %RCX, align 8, !tbaa !2428
  %292 = load i32, i32* %ECX
  %293 = zext i32 %292 to i64
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %297 = bitcast %union.anon* %296 to i32*
  %298 = load i32, i32* %297, align 8, !tbaa !2454
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %301 = bitcast %union.anon* %300 to i32*
  %302 = load i32, i32* %301, align 8, !tbaa !2454
  %303 = zext i32 %302 to i64
  %304 = shl i64 %293, 32
  %305 = ashr exact i64 %304, 32
  %306 = shl nuw i64 %303, 32
  %307 = or i64 %306, %299
  %308 = sdiv i64 %307, %305
  %309 = shl i64 %308, 32
  %310 = ashr exact i64 %309, 32
  %311 = icmp eq i64 %308, %310
  br i1 %311, label %316, label %312

; <label>:312:                                    ; preds = %block_401134
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %314 = load i64, i64* %313, align 8, !tbaa !2428
  %315 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %314, %struct.Memory* %MEMORY.0) #18
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:316:                                    ; preds = %block_401134
  %317 = srem i64 %307, %305
  %318 = getelementptr inbounds %union.anon, %union.anon* %296, i64 0, i32 0
  %319 = and i64 %308, 4294967295
  store i64 %319, i64* %318, align 8, !tbaa !2428
  %320 = getelementptr inbounds %union.anon, %union.anon* %300, i64 0, i32 0
  %321 = and i64 %317, 4294967295
  store i64 %321, i64* %320, align 8, !tbaa !2428
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %322, align 1, !tbaa !2432
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %323, align 1, !tbaa !2446
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %324, align 1, !tbaa !2447
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %325, align 1, !tbaa !2448
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %326, align 1, !tbaa !2449
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %327, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %312, %316
  %328 = phi %struct.Memory* [ %315, %312 ], [ %MEMORY.0, %316 ]
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 32
  %331 = load i32, i32* %EDX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 3
  store i64 %334, i64* %PC
  %335 = inttoptr i64 %330 to i32*
  store i32 %331, i32* %335
  %336 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %337 = load i32, i32* %EDX
  %338 = zext i32 %337 to i64
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 4
  store i64 %340, i64* %PC
  %341 = sitofp i32 %337 to double
  %342 = bitcast i8* %336 to double*
  store double %341, double* %342, align 1, !tbaa !2452
  %343 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %344 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %345 = bitcast %union.vec128_t* %XMM0 to i8*
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 4
  store i64 %347, i64* %PC
  %348 = bitcast i8* %344 to double*
  %349 = load double, double* %348, align 1
  %350 = getelementptr inbounds i8, i8* %344, i64 8
  %351 = bitcast i8* %350 to i64*
  %352 = load i64, i64* %351, align 1
  %353 = bitcast i8* %345 to double*
  %354 = load double, double* %353, align 1
  %355 = fmul double %349, %354
  %356 = bitcast i8* %343 to double*
  store double %355, double* %356, align 1, !tbaa !2452
  %357 = getelementptr inbounds i8, i8* %343, i64 8
  %358 = bitcast i8* %357 to i64*
  store i64 %352, i64* %358, align 1, !tbaa !2452
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 24
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %RSI, align 8, !tbaa !2428
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 28
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i32*
  %370 = load i32, i32* %369
  %371 = sext i32 %370 to i64
  store i64 %371, i64* %RDI, align 8, !tbaa !2428
  %372 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %373 = load i64, i64* %RSI
  %374 = load i64, i64* %RDI
  %375 = mul i64 %374, 8
  %376 = add i64 %375, %373
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 5
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to double*
  %380 = load double, double* %379
  %381 = bitcast i8* %372 to double*
  store double %380, double* %381, align 1, !tbaa !2452
  %382 = getelementptr inbounds i8, i8* %372, i64 8
  %383 = bitcast i8* %382 to double*
  store double 0.000000e+00, double* %383, align 1, !tbaa !2452
  %384 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %385 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 16
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 5
  store i64 %389, i64* %PC
  %390 = bitcast i8* %385 to double*
  %391 = load double, double* %390, align 1
  %392 = getelementptr inbounds i8, i8* %385, i64 8
  %393 = bitcast i8* %392 to i64*
  %394 = load i64, i64* %393, align 1
  %395 = inttoptr i64 %387 to double*
  %396 = load double, double* %395
  %397 = fmul double %391, %396
  %398 = bitcast i8* %384 to double*
  store double %397, double* %398, align 1, !tbaa !2452
  %399 = getelementptr inbounds i8, i8* %384, i64 8
  %400 = bitcast i8* %399 to i64*
  store i64 %394, i64* %400, align 1, !tbaa !2452
  %401 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %402 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %403 = bitcast %union.vec128_t* %XMM0 to i8*
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = bitcast i8* %402 to double*
  %407 = load double, double* %406, align 1
  %408 = getelementptr inbounds i8, i8* %402, i64 8
  %409 = bitcast i8* %408 to i64*
  %410 = load i64, i64* %409, align 1
  %411 = bitcast i8* %403 to double*
  %412 = load double, double* %411, align 1
  %413 = fsub double %407, %412
  %414 = bitcast i8* %401 to double*
  store double %413, double* %414, align 1, !tbaa !2452
  %415 = getelementptr inbounds i8, i8* %401, i64 8
  %416 = bitcast i8* %415 to i64*
  store i64 %410, i64* %416, align 1, !tbaa !2452
  %417 = load i64, i64* %RBP
  %418 = sub i64 %417, 48
  %419 = bitcast %union.vec128_t* %XMM1 to i8*
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 5
  store i64 %421, i64* %PC
  %422 = bitcast i8* %419 to double*
  %423 = load double, double* %422, align 1
  %424 = inttoptr i64 %418 to double*
  store double %423, double* %424
  %425 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 40
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 5
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to double*
  %431 = load double, double* %430
  %432 = bitcast i8* %425 to double*
  store double %431, double* %432, align 1, !tbaa !2452
  %433 = getelementptr inbounds i8, i8* %425, i64 8
  %434 = bitcast i8* %433 to double*
  store double 0.000000e+00, double* %434, align 1, !tbaa !2452
  %435 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %436 = load i64, i64* %RBP
  %437 = sub i64 %436, 48
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 5
  store i64 %439, i64* %PC
  %440 = inttoptr i64 %437 to double*
  %441 = load double, double* %440
  %442 = bitcast i8* %435 to double*
  store double %441, double* %442, align 1, !tbaa !2452
  %443 = getelementptr inbounds i8, i8* %435, i64 8
  %444 = bitcast i8* %443 to double*
  store double 0.000000e+00, double* %444, align 1, !tbaa !2452
  %445 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 7
  store i64 %447, i64* %PC
  %448 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 96) to float*)
  %449 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 100) to float*)
  %450 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 104) to float*)
  %451 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 108) to float*)
  %452 = bitcast i8* %445 to float*
  store float %448, float* %452, align 1, !tbaa !2479
  %453 = getelementptr inbounds i8, i8* %445, i64 4
  %454 = bitcast i8* %453 to float*
  store float %449, float* %454, align 1, !tbaa !2479
  %455 = getelementptr inbounds i8, i8* %445, i64 8
  %456 = bitcast i8* %455 to float*
  store float %450, float* %456, align 1, !tbaa !2479
  %457 = getelementptr inbounds i8, i8* %445, i64 12
  %458 = bitcast i8* %457 to float*
  store float %451, float* %458, align 1, !tbaa !2479
  %459 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %460 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %461 = bitcast %union.vec128_t* %XMM2 to i8*
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 4
  store i64 %463, i64* %PC
  %464 = bitcast i8* %460 to i64*
  %465 = load i64, i64* %464, align 1
  %466 = getelementptr inbounds i8, i8* %460, i64 8
  %467 = bitcast i8* %466 to i64*
  %468 = load i64, i64* %467, align 1
  %469 = bitcast i8* %461 to i64*
  %470 = load i64, i64* %469, align 1
  %471 = getelementptr inbounds i8, i8* %461, i64 8
  %472 = bitcast i8* %471 to i64*
  %473 = load i64, i64* %472, align 1
  %474 = and i64 %470, %465
  %475 = and i64 %473, %468
  %476 = trunc i64 %474 to i32
  %477 = lshr i64 %474, 32
  %478 = trunc i64 %477 to i32
  %479 = bitcast i8* %459 to i32*
  store i32 %476, i32* %479, align 1, !tbaa !2454
  %480 = getelementptr inbounds i8, i8* %459, i64 4
  %481 = bitcast i8* %480 to i32*
  store i32 %478, i32* %481, align 1, !tbaa !2454
  %482 = trunc i64 %475 to i32
  %483 = getelementptr inbounds i8, i8* %459, i64 8
  %484 = bitcast i8* %483 to i32*
  store i32 %482, i32* %484, align 1, !tbaa !2454
  %485 = lshr i64 %475, 32
  %486 = trunc i64 %485 to i32
  %487 = getelementptr inbounds i8, i8* %459, i64 12
  %488 = bitcast i8* %487 to i32*
  store i32 %486, i32* %488, align 1, !tbaa !2454
  %489 = bitcast %union.vec128_t* %XMM0 to i8*
  %490 = bitcast %union.vec128_t* %XMM1 to i8*
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC
  %493 = bitcast i8* %489 to double*
  %494 = load double, double* %493, align 1
  %495 = bitcast i8* %490 to double*
  %496 = load double, double* %495, align 1
  %497 = fcmp uno double %494, %496
  br i1 %497, label %498, label %510

; <label>:498:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %499 = fadd double %494, %496
  %500 = bitcast double %499 to i64
  %501 = and i64 %500, 9221120237041090560
  %502 = icmp eq i64 %501, 9218868437227405312
  %503 = and i64 %500, 2251799813685247
  %504 = icmp ne i64 %503, 0
  %505 = and i1 %502, %504
  br i1 %505, label %506, label %516

; <label>:506:                                    ; preds = %498
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %508 = load i64, i64* %507, align 8, !tbaa !2428
  %509 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %508, %struct.Memory* %328) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:510:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %511 = fcmp ogt double %494, %496
  br i1 %511, label %516, label %512

; <label>:512:                                    ; preds = %510
  %513 = fcmp olt double %494, %496
  br i1 %513, label %516, label %514

; <label>:514:                                    ; preds = %512
  %515 = fcmp oeq double %494, %496
  br i1 %515, label %516, label %523

; <label>:516:                                    ; preds = %514, %512, %510, %498
  %517 = phi i8 [ 0, %510 ], [ 0, %512 ], [ 1, %514 ], [ 1, %498 ]
  %518 = phi i8 [ 0, %510 ], [ 0, %512 ], [ 0, %514 ], [ 1, %498 ]
  %519 = phi i8 [ 0, %510 ], [ 1, %512 ], [ 0, %514 ], [ 1, %498 ]
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %517, i8* %520, align 1, !tbaa !2451
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %518, i8* %521, align 1, !tbaa !2451
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %519, i8* %522, align 1, !tbaa !2451
  br label %523

; <label>:523:                                    ; preds = %516, %514
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %524, align 1, !tbaa !2451
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %525, align 1, !tbaa !2451
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %526, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %506, %523
  %527 = phi %struct.Memory* [ %509, %506 ], [ %328, %523 ]
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 21
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 6
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 6
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %535 = load i8, i8* %534, align 1, !tbaa !2432
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %537 = load i8, i8* %536, align 1, !tbaa !2448
  %538 = or i8 %537, %535
  %539 = icmp ne i8 %538, 0
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %542 = select i1 %539, i64 %529, i64 %531
  store i64 %542, i64* %541, align 8, !tbaa !2428
  %543 = load i8, i8* %BRANCH_TAKEN
  %544 = icmp eq i8 %543, 1
  %545 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %546 = load i64, i64* %RBP
  br i1 %544, label %block_4011ad, label %block_40119e

block_4011ad:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %547 = sub i64 %546, 48
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 5
  store i64 %549, i64* %PC
  %550 = inttoptr i64 %547 to double*
  %551 = load double, double* %550
  %552 = bitcast i8* %545 to double*
  store double %551, double* %552, align 1, !tbaa !2452
  %553 = getelementptr inbounds i8, i8* %545, i64 8
  %554 = bitcast i8* %553 to double*
  store double 0.000000e+00, double* %554, align 1, !tbaa !2452
  %555 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 7
  store i64 %557, i64* %PC
  %558 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 96) to float*)
  %559 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 100) to float*)
  %560 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 104) to float*)
  %561 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 108) to float*)
  %562 = bitcast i8* %555 to float*
  store float %558, float* %562, align 1, !tbaa !2479
  %563 = getelementptr inbounds i8, i8* %555, i64 4
  %564 = bitcast i8* %563 to float*
  store float %559, float* %564, align 1, !tbaa !2479
  %565 = getelementptr inbounds i8, i8* %555, i64 8
  %566 = bitcast i8* %565 to float*
  store float %560, float* %566, align 1, !tbaa !2479
  %567 = getelementptr inbounds i8, i8* %555, i64 12
  %568 = bitcast i8* %567 to float*
  store float %561, float* %568, align 1, !tbaa !2479
  %569 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %571 = bitcast %union.vec128_t* %XMM1 to i8*
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC
  %574 = bitcast i8* %570 to i64*
  %575 = load i64, i64* %574, align 1
  %576 = getelementptr inbounds i8, i8* %570, i64 8
  %577 = bitcast i8* %576 to i64*
  %578 = load i64, i64* %577, align 1
  %579 = bitcast i8* %571 to i64*
  %580 = load i64, i64* %579, align 1
  %581 = getelementptr inbounds i8, i8* %571, i64 8
  %582 = bitcast i8* %581 to i64*
  %583 = load i64, i64* %582, align 1
  %584 = and i64 %580, %575
  %585 = and i64 %583, %578
  %586 = trunc i64 %584 to i32
  %587 = lshr i64 %584, 32
  %588 = trunc i64 %587 to i32
  %589 = bitcast i8* %569 to i32*
  store i32 %586, i32* %589, align 1, !tbaa !2454
  %590 = getelementptr inbounds i8, i8* %569, i64 4
  %591 = bitcast i8* %590 to i32*
  store i32 %588, i32* %591, align 1, !tbaa !2454
  %592 = trunc i64 %585 to i32
  %593 = getelementptr inbounds i8, i8* %569, i64 8
  %594 = bitcast i8* %593 to i32*
  store i32 %592, i32* %594, align 1, !tbaa !2454
  %595 = lshr i64 %585, 32
  %596 = trunc i64 %595 to i32
  %597 = getelementptr inbounds i8, i8* %569, i64 12
  %598 = bitcast i8* %597 to i32*
  store i32 %596, i32* %598, align 1, !tbaa !2454
  %599 = load i64, i64* %RBP
  %600 = sub i64 %599, 64
  %601 = bitcast %union.vec128_t* %XMM0 to i8*
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 5
  store i64 %603, i64* %PC
  %604 = bitcast i8* %601 to double*
  %605 = load double, double* %604, align 1
  %606 = inttoptr i64 %600 to double*
  store double %605, double* %606
  br label %block_4011c2

block_401128:                                     ; preds = %block_4011c2, %block_401100
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401100 ], [ %MEMORY.1, %block_4011c2 ]
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 28
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 3
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = zext i32 %612 to i64
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = load i32, i32* %EAX
  %615 = zext i32 %614 to i64
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 8
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 3
  store i64 %619, i64* %PC
  %620 = inttoptr i64 %617 to i32*
  %621 = load i32, i32* %620
  %622 = sub i32 %614, %621
  %623 = icmp ult i32 %614, %621
  %624 = zext i1 %623 to i8
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %624, i8* %625, align 1, !tbaa !2432
  %626 = and i32 %622, 255
  %627 = call i32 @llvm.ctpop.i32(i32 %626) #17
  %628 = trunc i32 %627 to i8
  %629 = and i8 %628, 1
  %630 = xor i8 %629, 1
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %630, i8* %631, align 1, !tbaa !2446
  %632 = xor i32 %621, %614
  %633 = xor i32 %632, %622
  %634 = lshr i32 %633, 4
  %635 = trunc i32 %634 to i8
  %636 = and i8 %635, 1
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %636, i8* %637, align 1, !tbaa !2447
  %638 = icmp eq i32 %622, 0
  %639 = zext i1 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %639, i8* %640, align 1, !tbaa !2448
  %641 = lshr i32 %622, 31
  %642 = trunc i32 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %642, i8* %643, align 1, !tbaa !2449
  %644 = lshr i32 %614, 31
  %645 = lshr i32 %621, 31
  %646 = xor i32 %645, %644
  %647 = xor i32 %641, %644
  %648 = add nuw nsw i32 %647, %646
  %649 = icmp eq i32 %648, 2
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %650, i8* %651, align 1, !tbaa !2450
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 172
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 6
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 6
  store i64 %657, i64* %PC
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %659 = load i8, i8* %658, align 1, !tbaa !2448
  %660 = icmp eq i8 %659, 0
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %662 = load i8, i8* %661, align 1, !tbaa !2449
  %663 = icmp ne i8 %662, 0
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %665 = load i8, i8* %664, align 1, !tbaa !2450
  %666 = icmp ne i8 %665, 0
  %667 = xor i1 %663, %666
  %668 = xor i1 %667, true
  %669 = and i1 %660, %668
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %672 = select i1 %669, i64 %653, i64 %655
  store i64 %672, i64* %671, align 8, !tbaa !2428
  %673 = load i8, i8* %BRANCH_TAKEN
  %674 = icmp eq i8 %673, 1
  %675 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %674, label %block_4011da, label %block_401134

block_4011c2:                                     ; preds = %block_4011ad, %block_40119e
  %MEMORY.1 = phi %struct.Memory* [ %527, %block_4011ad ], [ %527, %block_40119e ]
  %676 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 64
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 5
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to double*
  %682 = load double, double* %681
  %683 = bitcast i8* %676 to double*
  store double %682, double* %683, align 1, !tbaa !2452
  %684 = getelementptr inbounds i8, i8* %676, i64 8
  %685 = bitcast i8* %684 to double*
  store double 0.000000e+00, double* %685, align 1, !tbaa !2452
  %686 = load i64, i64* %RBP
  %687 = sub i64 %686, 40
  %688 = bitcast %union.vec128_t* %XMM0 to i8*
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 5
  store i64 %690, i64* %PC
  %691 = bitcast i8* %688 to double*
  %692 = load double, double* %691, align 1
  %693 = inttoptr i64 %687 to double*
  store double %692, double* %693
  %694 = load i64, i64* %RBP
  %695 = sub i64 %694, 28
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 3
  store i64 %697, i64* %PC
  %698 = inttoptr i64 %695 to i32*
  %699 = load i32, i32* %698
  %700 = zext i32 %699 to i64
  store i64 %700, i64* %RAX, align 8, !tbaa !2428
  %701 = load i64, i64* %RAX
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 3
  store i64 %703, i64* %PC
  %704 = trunc i64 %701 to i32
  %705 = add i32 1, %704
  %706 = zext i32 %705 to i64
  store i64 %706, i64* %RAX, align 8, !tbaa !2428
  %707 = icmp ult i32 %705, %704
  %708 = icmp ult i32 %705, 1
  %709 = or i1 %707, %708
  %710 = zext i1 %709 to i8
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %710, i8* %711, align 1, !tbaa !2432
  %712 = and i32 %705, 255
  %713 = call i32 @llvm.ctpop.i32(i32 %712) #17
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %716, i8* %717, align 1, !tbaa !2446
  %718 = xor i64 1, %701
  %719 = trunc i64 %718 to i32
  %720 = xor i32 %719, %705
  %721 = lshr i32 %720, 4
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %723, i8* %724, align 1, !tbaa !2447
  %725 = icmp eq i32 %705, 0
  %726 = zext i1 %725 to i8
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %726, i8* %727, align 1, !tbaa !2448
  %728 = lshr i32 %705, 31
  %729 = trunc i32 %728 to i8
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %729, i8* %730, align 1, !tbaa !2449
  %731 = lshr i32 %704, 31
  %732 = xor i32 %728, %731
  %733 = add nuw nsw i32 %732, %728
  %734 = icmp eq i32 %733, 2
  %735 = zext i1 %734 to i8
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %735, i8* %736, align 1, !tbaa !2450
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 28
  %739 = load i32, i32* %EAX
  %740 = zext i32 %739 to i64
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 3
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %738 to i32*
  store i32 %739, i32* %743
  %744 = load i64, i64* %PC
  %745 = sub i64 %744, 173
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 5
  store i64 %747, i64* %PC
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %745, i64* %748, align 8, !tbaa !2428
  br label %block_401128
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c10_bitrv2conj(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %43 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %42, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %43 to %"class.std::bitset"*
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %45 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %44, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %45 to %union.vec128_t*
  %46 = load i64, i64* %RBP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 1
  store i64 %48, i64* %PC
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %50 = load i64, i64* %49, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %46, i64* %52
  store i64 %51, i64* %49, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 3
  store i64 %55, i64* %PC
  store i64 %53, i64* %RBP, align 8, !tbaa !2428
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 4
  %58 = load i32, i32* %EDI
  %59 = zext i32 %58 to i64
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = load i64, i64* %RSI
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %64 to i64*
  store i64 %65, i64* %68
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 24
  %71 = load i64, i64* %RDX
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 16
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = load i64, i64* %RDX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 6
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i32*
  store i32 0, i32* %84
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 3
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  %90 = load i32, i32* %89
  %91 = zext i32 %90 to i64
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 44
  %94 = load i32, i32* %EDI
  %95 = zext i32 %94 to i64
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %93 to i32*
  store i32 %94, i32* %98
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 48
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 7
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  store i32 1, i32* %103
  br label %block_401c36

block_401c61:                                     ; preds = %block_401c55
  %104 = sub i64 %3641, 16
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i64*
  %108 = load i64, i64* %107
  store i64 %108, i64* %RAX, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 28
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113
  %115 = sext i32 %114 to i64
  store i64 %115, i64* %RCX, align 8, !tbaa !2428
  %116 = load i64, i64* %RAX
  %117 = load i64, i64* %RCX
  %118 = mul i64 %117, 4
  %119 = add i64 %118, %116
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122
  %124 = zext i32 %123 to i64
  store i64 %124, i64* %RDX, align 8, !tbaa !2428
  %125 = load i64, i64* %RDX
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 44
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 3
  store i64 %129, i64* %PC
  %130 = trunc i64 %125 to i32
  %131 = inttoptr i64 %127 to i32*
  %132 = load i32, i32* %131
  %133 = add i32 %132, %130
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RDX, align 8, !tbaa !2428
  %135 = icmp ult i32 %133, %130
  %136 = icmp ult i32 %133, %132
  %137 = or i1 %135, %136
  %138 = zext i1 %137 to i8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %138, i8* %139, align 1, !tbaa !2432
  %140 = and i32 %133, 255
  %141 = call i32 @llvm.ctpop.i32(i32 %140) #17
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  %144 = xor i8 %143, 1
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %144, i8* %145, align 1, !tbaa !2446
  %146 = xor i32 %132, %130
  %147 = xor i32 %146, %133
  %148 = lshr i32 %147, 4
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %150, i8* %151, align 1, !tbaa !2447
  %152 = icmp eq i32 %133, 0
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %153, i8* %154, align 1, !tbaa !2448
  %155 = lshr i32 %133, 31
  %156 = trunc i32 %155 to i8
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %156, i8* %157, align 1, !tbaa !2449
  %158 = lshr i32 %130, 31
  %159 = lshr i32 %132, 31
  %160 = xor i32 %155, %158
  %161 = xor i32 %155, %159
  %162 = add nuw nsw i32 %160, %161
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %164, i8* %165, align 1, !tbaa !2450
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 16
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 48
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RSI, align 8, !tbaa !2428
  %179 = load i64, i64* %RSI
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 28
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = trunc i64 %179 to i32
  %185 = inttoptr i64 %181 to i32*
  %186 = load i32, i32* %185
  %187 = add i32 %186, %184
  %188 = zext i32 %187 to i64
  store i64 %188, i64* %RSI, align 8, !tbaa !2428
  %189 = icmp ult i32 %187, %184
  %190 = icmp ult i32 %187, %186
  %191 = or i1 %189, %190
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2432
  %194 = and i32 %187, 255
  %195 = call i32 @llvm.ctpop.i32(i32 %194) #17
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %198, i8* %199, align 1, !tbaa !2446
  %200 = xor i32 %186, %184
  %201 = xor i32 %200, %187
  %202 = lshr i32 %201, 4
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %204, i8* %205, align 1, !tbaa !2447
  %206 = icmp eq i32 %187, 0
  %207 = zext i1 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %207, i8* %208, align 1, !tbaa !2448
  %209 = lshr i32 %187, 31
  %210 = trunc i32 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %210, i8* %211, align 1, !tbaa !2449
  %212 = lshr i32 %184, 31
  %213 = lshr i32 %186, 31
  %214 = xor i32 %209, %212
  %215 = xor i32 %209, %213
  %216 = add nuw nsw i32 %214, %215
  %217 = icmp eq i32 %216, 2
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %218, i8* %219, align 1, !tbaa !2450
  %220 = load i32, i32* %ESI
  %221 = zext i32 %220 to i64
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = shl i64 %221, 32
  %225 = ashr exact i64 %224, 32
  store i64 %225, i64* %RCX, align 8, !tbaa !2428
  %226 = load i64, i64* %RAX
  %227 = load i64, i64* %RCX
  %228 = mul i64 %227, 4
  %229 = add i64 %228, %226
  %230 = load i32, i32* %EDX
  %231 = zext i32 %230 to i64
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 3
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %229 to i32*
  store i32 %230, i32* %234
  %235 = load i64, i64* %RBP
  %236 = sub i64 %235, 28
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = inttoptr i64 %236 to i32*
  %240 = load i32, i32* %239
  %241 = zext i32 %240 to i64
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = load i64, i64* %RAX
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  %245 = trunc i64 %242 to i32
  %246 = add i32 1, %245
  %247 = zext i32 %246 to i64
  store i64 %247, i64* %RAX, align 8, !tbaa !2428
  %248 = icmp ult i32 %246, %245
  %249 = icmp ult i32 %246, 1
  %250 = or i1 %248, %249
  %251 = zext i1 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %251, i8* %252, align 1, !tbaa !2432
  %253 = and i32 %246, 255
  %254 = call i32 @llvm.ctpop.i32(i32 %253) #17
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %257, i8* %258, align 1, !tbaa !2446
  %259 = xor i64 1, %242
  %260 = trunc i64 %259 to i32
  %261 = xor i32 %260, %246
  %262 = lshr i32 %261, 4
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %264, i8* %265, align 1, !tbaa !2447
  %266 = icmp eq i32 %246, 0
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %267, i8* %268, align 1, !tbaa !2448
  %269 = lshr i32 %246, 31
  %270 = trunc i32 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %270, i8* %271, align 1, !tbaa !2449
  %272 = lshr i32 %245, 31
  %273 = xor i32 %269, %272
  %274 = add nuw nsw i32 %273, %269
  %275 = icmp eq i32 %274, 2
  %276 = zext i1 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %276, i8* %277, align 1, !tbaa !2450
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 28
  %280 = load i32, i32* %EAX
  %281 = zext i32 %280 to i64
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %279 to i32*
  store i32 %280, i32* %284
  %285 = load i64, i64* %PC
  %286 = sub i64 %285, 51
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %286, i64* %289, align 8, !tbaa !2428
  br label %block_401c55

block_40204f:                                     ; preds = %block_401ccd
  %290 = sub i64 %1499, 36
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 3
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %290 to i32*
  %294 = load i32, i32* %293
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RCX, align 8, !tbaa !2428
  %296 = load i64, i64* %RCX
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 3
  store i64 %298, i64* %PC
  %299 = trunc i64 %296 to i32
  %300 = shl i32 %299, 1
  %301 = icmp slt i32 %299, 0
  %302 = icmp slt i32 %300, 0
  %303 = xor i1 %301, %302
  %304 = zext i32 %300 to i64
  store i64 %304, i64* %RCX, align 8, !tbaa !2428
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %306 = zext i1 %301 to i8
  store i8 %306, i8* %305, align 1, !tbaa !2451
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %308 = and i32 %300, 254
  %309 = call i32 @llvm.ctpop.i32(i32 %308) #17
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  store i8 %312, i8* %307, align 1, !tbaa !2451
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %313, align 1, !tbaa !2451
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %315 = icmp eq i32 %300, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %314, align 1, !tbaa !2451
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %318 = lshr i32 %300, 31
  %319 = trunc i32 %318 to i8
  store i8 %319, i8* %317, align 1, !tbaa !2451
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %321 = zext i1 %303 to i8
  store i8 %321, i8* %320, align 1, !tbaa !2451
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 16
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i64*
  %327 = load i64, i64* %326
  store i64 %327, i64* %RDX, align 8, !tbaa !2428
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 36
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 4
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  %333 = load i32, i32* %332
  %334 = sext i32 %333 to i64
  store i64 %334, i64* %RSI, align 8, !tbaa !2428
  %335 = load i64, i64* %RCX
  %336 = load i64, i64* %RDX
  %337 = load i64, i64* %RSI
  %338 = mul i64 %337, 4
  %339 = add i64 %338, %336
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 3
  store i64 %341, i64* %PC
  %342 = trunc i64 %335 to i32
  %343 = inttoptr i64 %339 to i32*
  %344 = load i32, i32* %343
  %345 = add i32 %344, %342
  %346 = zext i32 %345 to i64
  store i64 %346, i64* %RCX, align 8, !tbaa !2428
  %347 = icmp ult i32 %345, %342
  %348 = icmp ult i32 %345, %344
  %349 = or i1 %347, %348
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2432
  %352 = and i32 %345, 255
  %353 = call i32 @llvm.ctpop.i32(i32 %352) #17
  %354 = trunc i32 %353 to i8
  %355 = and i8 %354, 1
  %356 = xor i8 %355, 1
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %356, i8* %357, align 1, !tbaa !2446
  %358 = xor i32 %344, %342
  %359 = xor i32 %358, %345
  %360 = lshr i32 %359, 4
  %361 = trunc i32 %360 to i8
  %362 = and i8 %361, 1
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %362, i8* %363, align 1, !tbaa !2447
  %364 = icmp eq i32 %345, 0
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %365, i8* %366, align 1, !tbaa !2448
  %367 = lshr i32 %345, 31
  %368 = trunc i32 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %368, i8* %369, align 1, !tbaa !2449
  %370 = lshr i32 %342, 31
  %371 = lshr i32 %344, 31
  %372 = xor i32 %367, %370
  %373 = xor i32 %367, %371
  %374 = add nuw nsw i32 %372, %373
  %375 = icmp eq i32 %374, 2
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %376, i8* %377, align 1, !tbaa !2450
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 40
  %380 = load i32, i32* %ECX
  %381 = zext i32 %380 to i64
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %379 to i32*
  store i32 %380, i32* %384
  %385 = load i64, i64* %RBP
  %386 = sub i64 %385, 24
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 4
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i64*
  %390 = load i64, i64* %389
  store i64 %390, i64* %RDX, align 8, !tbaa !2428
  %391 = load i64, i64* %RBP
  %392 = sub i64 %391, 40
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 3
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to i32*
  %396 = load i32, i32* %395
  %397 = zext i32 %396 to i64
  store i64 %397, i64* %RCX, align 8, !tbaa !2428
  %398 = load i64, i64* %RCX
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 3
  store i64 %400, i64* %PC
  %401 = trunc i64 %398 to i32
  %402 = add i32 1, %401
  %403 = zext i32 %402 to i64
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = icmp ult i32 %402, %401
  %405 = icmp ult i32 %402, 1
  %406 = or i1 %404, %405
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %407, i8* %408, align 1, !tbaa !2432
  %409 = and i32 %402, 255
  %410 = call i32 @llvm.ctpop.i32(i32 %409) #17
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  %413 = xor i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %413, i8* %414, align 1, !tbaa !2446
  %415 = xor i64 1, %398
  %416 = trunc i64 %415 to i32
  %417 = xor i32 %416, %402
  %418 = lshr i32 %417, 4
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %420, i8* %421, align 1, !tbaa !2447
  %422 = icmp eq i32 %402, 0
  %423 = zext i1 %422 to i8
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %423, i8* %424, align 1, !tbaa !2448
  %425 = lshr i32 %402, 31
  %426 = trunc i32 %425 to i8
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %426, i8* %427, align 1, !tbaa !2449
  %428 = lshr i32 %401, 31
  %429 = xor i32 %425, %428
  %430 = add nuw nsw i32 %429, %425
  %431 = icmp eq i32 %430, 2
  %432 = zext i1 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %432, i8* %433, align 1, !tbaa !2450
  %434 = load i32, i32* %ECX
  %435 = zext i32 %434 to i64
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 3
  store i64 %437, i64* %PC
  %438 = shl i64 %435, 32
  %439 = ashr exact i64 %438, 32
  store i64 %439, i64* %RSI, align 8, !tbaa !2428
  %440 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %441 = load i64, i64* %RDX
  %442 = load i64, i64* %RSI
  %443 = mul i64 %442, 8
  %444 = add i64 %443, %441
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 5
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to double*
  %448 = load double, double* %447
  %449 = bitcast i8* %440 to double*
  store double %448, double* %449, align 1, !tbaa !2452
  %450 = getelementptr inbounds i8, i8* %440, i64 8
  %451 = bitcast i8* %450 to double*
  store double 0.000000e+00, double* %451, align 1, !tbaa !2452
  %452 = bitcast %union.vec128_t* %XMM0 to i8*
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 5
  store i64 %454, i64* %PC
  %455 = bitcast i8* %452 to i64*
  %456 = load i64, i64* %455, align 1
  store i64 %456, i64* %RDX, align 1, !tbaa !2428
  %457 = load i64, i64* %RDX
  %458 = load i64, i64* %RAX
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC
  %461 = xor i64 %458, %457
  store i64 %461, i64* %RDX, align 8, !tbaa !2428
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %462, align 1, !tbaa !2432
  %463 = trunc i64 %461 to i32
  %464 = and i32 %463, 255
  %465 = call i32 @llvm.ctpop.i32(i32 %464) #17
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %468, i8* %469, align 1, !tbaa !2446
  %470 = icmp eq i64 %461, 0
  %471 = zext i1 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %471, i8* %472, align 1, !tbaa !2448
  %473 = lshr i64 %461, 63
  %474 = trunc i64 %473 to i8
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %474, i8* %475, align 1, !tbaa !2449
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %476, align 1, !tbaa !2450
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %477, align 1, !tbaa !2447
  %478 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %479 = load i64, i64* %RDX
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 5
  store i64 %481, i64* %PC
  %482 = bitcast i8* %478 to i64*
  store i64 %479, i64* %482, align 1, !tbaa !2428
  %483 = getelementptr inbounds i8, i8* %478, i64 8
  %484 = bitcast i8* %483 to i64*
  store i64 0, i64* %484, align 1, !tbaa !2428
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 24
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i64*
  %490 = load i64, i64* %489
  store i64 %490, i64* %RDX, align 8, !tbaa !2428
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 40
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i32*
  %496 = load i32, i32* %495
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RCX, align 8, !tbaa !2428
  %498 = load i64, i64* %RCX
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 3
  store i64 %500, i64* %PC
  %501 = trunc i64 %498 to i32
  %502 = add i32 1, %501
  %503 = zext i32 %502 to i64
  store i64 %503, i64* %RCX, align 8, !tbaa !2428
  %504 = icmp ult i32 %502, %501
  %505 = icmp ult i32 %502, 1
  %506 = or i1 %504, %505
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %507, i8* %508, align 1, !tbaa !2432
  %509 = and i32 %502, 255
  %510 = call i32 @llvm.ctpop.i32(i32 %509) #17
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %513, i8* %514, align 1, !tbaa !2446
  %515 = xor i64 1, %498
  %516 = trunc i64 %515 to i32
  %517 = xor i32 %516, %502
  %518 = lshr i32 %517, 4
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %520, i8* %521, align 1, !tbaa !2447
  %522 = icmp eq i32 %502, 0
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %523, i8* %524, align 1, !tbaa !2448
  %525 = lshr i32 %502, 31
  %526 = trunc i32 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %526, i8* %527, align 1, !tbaa !2449
  %528 = lshr i32 %501, 31
  %529 = xor i32 %525, %528
  %530 = add nuw nsw i32 %529, %525
  %531 = icmp eq i32 %530, 2
  %532 = zext i1 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %532, i8* %533, align 1, !tbaa !2450
  %534 = load i32, i32* %ECX
  %535 = zext i32 %534 to i64
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 3
  store i64 %537, i64* %PC
  %538 = shl i64 %535, 32
  %539 = ashr exact i64 %538, 32
  store i64 %539, i64* %RSI, align 8, !tbaa !2428
  %540 = load i64, i64* %RDX
  %541 = load i64, i64* %RSI
  %542 = mul i64 %541, 8
  %543 = add i64 %542, %540
  %544 = bitcast %union.vec128_t* %XMM0 to i8*
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 5
  store i64 %546, i64* %PC
  %547 = bitcast i8* %544 to double*
  %548 = load double, double* %547, align 1
  %549 = inttoptr i64 %543 to double*
  store double %548, double* %549
  %550 = load i64, i64* %RBP
  %551 = sub i64 %550, 40
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC
  %554 = inttoptr i64 %551 to i32*
  %555 = load i32, i32* %554
  %556 = zext i32 %555 to i64
  store i64 %556, i64* %RCX, align 8, !tbaa !2428
  %557 = load i64, i64* %RCX
  %558 = load i64, i64* %RBP
  %559 = sub i64 %558, 52
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = trunc i64 %557 to i32
  %563 = inttoptr i64 %559 to i32*
  %564 = load i32, i32* %563
  %565 = add i32 %564, %562
  %566 = zext i32 %565 to i64
  store i64 %566, i64* %RCX, align 8, !tbaa !2428
  %567 = icmp ult i32 %565, %562
  %568 = icmp ult i32 %565, %564
  %569 = or i1 %567, %568
  %570 = zext i1 %569 to i8
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %570, i8* %571, align 1, !tbaa !2432
  %572 = and i32 %565, 255
  %573 = call i32 @llvm.ctpop.i32(i32 %572) #17
  %574 = trunc i32 %573 to i8
  %575 = and i8 %574, 1
  %576 = xor i8 %575, 1
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %576, i8* %577, align 1, !tbaa !2446
  %578 = xor i32 %564, %562
  %579 = xor i32 %578, %565
  %580 = lshr i32 %579, 4
  %581 = trunc i32 %580 to i8
  %582 = and i8 %581, 1
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %582, i8* %583, align 1, !tbaa !2447
  %584 = icmp eq i32 %565, 0
  %585 = zext i1 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %585, i8* %586, align 1, !tbaa !2448
  %587 = lshr i32 %565, 31
  %588 = trunc i32 %587 to i8
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %588, i8* %589, align 1, !tbaa !2449
  %590 = lshr i32 %562, 31
  %591 = lshr i32 %564, 31
  %592 = xor i32 %587, %590
  %593 = xor i32 %587, %591
  %594 = add nuw nsw i32 %592, %593
  %595 = icmp eq i32 %594, 2
  %596 = zext i1 %595 to i8
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %596, i8* %597, align 1, !tbaa !2450
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 32
  %600 = load i32, i32* %ECX
  %601 = zext i32 %600 to i64
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %599 to i32*
  store i32 %600, i32* %604
  %605 = load i64, i64* %RBP
  %606 = sub i64 %605, 32
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 3
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i32*
  %610 = load i32, i32* %609
  %611 = zext i32 %610 to i64
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = load i64, i64* %RCX
  %613 = load i64, i64* %RBP
  %614 = sub i64 %613, 52
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 3
  store i64 %616, i64* %PC
  %617 = trunc i64 %612 to i32
  %618 = inttoptr i64 %614 to i32*
  %619 = load i32, i32* %618
  %620 = add i32 %619, %617
  %621 = zext i32 %620 to i64
  store i64 %621, i64* %RCX, align 8, !tbaa !2428
  %622 = icmp ult i32 %620, %617
  %623 = icmp ult i32 %620, %619
  %624 = or i1 %622, %623
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %625, i8* %626, align 1, !tbaa !2432
  %627 = and i32 %620, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #17
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2446
  %633 = xor i32 %619, %617
  %634 = xor i32 %633, %620
  %635 = lshr i32 %634, 4
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2447
  %639 = icmp eq i32 %620, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2448
  %642 = lshr i32 %620, 31
  %643 = trunc i32 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2449
  %645 = lshr i32 %617, 31
  %646 = lshr i32 %619, 31
  %647 = xor i32 %642, %645
  %648 = xor i32 %642, %646
  %649 = add nuw nsw i32 %647, %648
  %650 = icmp eq i32 %649, 2
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %651, i8* %652, align 1, !tbaa !2450
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 40
  %655 = load i32, i32* %ECX
  %656 = zext i32 %655 to i64
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 3
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %654 to i32*
  store i32 %655, i32* %659
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 24
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 4
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i64*
  %665 = load i64, i64* %664
  store i64 %665, i64* %RDX, align 8, !tbaa !2428
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 32
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 4
  store i64 %669, i64* %PC
  %670 = inttoptr i64 %667 to i32*
  %671 = load i32, i32* %670
  %672 = sext i32 %671 to i64
  store i64 %672, i64* %RSI, align 8, !tbaa !2428
  %673 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %674 = load i64, i64* %RDX
  %675 = load i64, i64* %RSI
  %676 = mul i64 %675, 8
  %677 = add i64 %676, %674
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 5
  store i64 %679, i64* %PC
  %680 = inttoptr i64 %677 to double*
  %681 = load double, double* %680
  %682 = bitcast i8* %673 to double*
  store double %681, double* %682, align 1, !tbaa !2452
  %683 = getelementptr inbounds i8, i8* %673, i64 8
  %684 = bitcast i8* %683 to double*
  store double 0.000000e+00, double* %684, align 1, !tbaa !2452
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 64
  %687 = bitcast %union.vec128_t* %XMM0 to i8*
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 5
  store i64 %689, i64* %PC
  %690 = bitcast i8* %687 to double*
  %691 = load double, double* %690, align 1
  %692 = inttoptr i64 %686 to double*
  store double %691, double* %692
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 24
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697
  store i64 %698, i64* %RDX, align 8, !tbaa !2428
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 32
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 3
  store i64 %702, i64* %PC
  %703 = inttoptr i64 %700 to i32*
  %704 = load i32, i32* %703
  %705 = zext i32 %704 to i64
  store i64 %705, i64* %RCX, align 8, !tbaa !2428
  %706 = load i64, i64* %RCX
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC
  %709 = trunc i64 %706 to i32
  %710 = add i32 1, %709
  %711 = zext i32 %710 to i64
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = icmp ult i32 %710, %709
  %713 = icmp ult i32 %710, 1
  %714 = or i1 %712, %713
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %715, i8* %716, align 1, !tbaa !2432
  %717 = and i32 %710, 255
  %718 = call i32 @llvm.ctpop.i32(i32 %717) #17
  %719 = trunc i32 %718 to i8
  %720 = and i8 %719, 1
  %721 = xor i8 %720, 1
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %721, i8* %722, align 1, !tbaa !2446
  %723 = xor i64 1, %706
  %724 = trunc i64 %723 to i32
  %725 = xor i32 %724, %710
  %726 = lshr i32 %725, 4
  %727 = trunc i32 %726 to i8
  %728 = and i8 %727, 1
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %728, i8* %729, align 1, !tbaa !2447
  %730 = icmp eq i32 %710, 0
  %731 = zext i1 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %731, i8* %732, align 1, !tbaa !2448
  %733 = lshr i32 %710, 31
  %734 = trunc i32 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %734, i8* %735, align 1, !tbaa !2449
  %736 = lshr i32 %709, 31
  %737 = xor i32 %733, %736
  %738 = add nuw nsw i32 %737, %733
  %739 = icmp eq i32 %738, 2
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %740, i8* %741, align 1, !tbaa !2450
  %742 = load i32, i32* %ECX
  %743 = zext i32 %742 to i64
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 3
  store i64 %745, i64* %PC
  %746 = shl i64 %743, 32
  %747 = ashr exact i64 %746, 32
  store i64 %747, i64* %RSI, align 8, !tbaa !2428
  %748 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %749 = load i64, i64* %RDX
  %750 = load i64, i64* %RSI
  %751 = mul i64 %750, 8
  %752 = add i64 %751, %749
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 5
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to double*
  %756 = load double, double* %755
  %757 = bitcast i8* %748 to double*
  store double %756, double* %757, align 1, !tbaa !2452
  %758 = getelementptr inbounds i8, i8* %748, i64 8
  %759 = bitcast i8* %758 to double*
  store double 0.000000e+00, double* %759, align 1, !tbaa !2452
  %760 = bitcast %union.vec128_t* %XMM0 to i8*
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 5
  store i64 %762, i64* %PC
  %763 = bitcast i8* %760 to i64*
  %764 = load i64, i64* %763, align 1
  store i64 %764, i64* %RDX, align 1, !tbaa !2428
  %765 = load i64, i64* %RDX
  %766 = load i64, i64* %RAX
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 3
  store i64 %768, i64* %PC
  %769 = xor i64 %766, %765
  store i64 %769, i64* %RDX, align 8, !tbaa !2428
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %770, align 1, !tbaa !2432
  %771 = trunc i64 %769 to i32
  %772 = and i32 %771, 255
  %773 = call i32 @llvm.ctpop.i32(i32 %772) #17
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %776, i8* %777, align 1, !tbaa !2446
  %778 = icmp eq i64 %769, 0
  %779 = zext i1 %778 to i8
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %779, i8* %780, align 1, !tbaa !2448
  %781 = lshr i64 %769, 63
  %782 = trunc i64 %781 to i8
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %782, i8* %783, align 1, !tbaa !2449
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %784, align 1, !tbaa !2450
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %785, align 1, !tbaa !2447
  %786 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %787 = load i64, i64* %RDX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 5
  store i64 %789, i64* %PC
  %790 = bitcast i8* %786 to i64*
  store i64 %787, i64* %790, align 1, !tbaa !2428
  %791 = getelementptr inbounds i8, i8* %786, i64 8
  %792 = bitcast i8* %791 to i64*
  store i64 0, i64* %792, align 1, !tbaa !2428
  %793 = load i64, i64* %RBP
  %794 = sub i64 %793, 72
  %795 = bitcast %union.vec128_t* %XMM0 to i8*
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 5
  store i64 %797, i64* %PC
  %798 = bitcast i8* %795 to double*
  %799 = load double, double* %798, align 1
  %800 = inttoptr i64 %794 to double*
  store double %799, double* %800
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 24
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i64*
  %806 = load i64, i64* %805
  store i64 %806, i64* %RDX, align 8, !tbaa !2428
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 40
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 4
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i32*
  %812 = load i32, i32* %811
  %813 = sext i32 %812 to i64
  store i64 %813, i64* %RSI, align 8, !tbaa !2428
  %814 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %815 = load i64, i64* %RDX
  %816 = load i64, i64* %RSI
  %817 = mul i64 %816, 8
  %818 = add i64 %817, %815
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 5
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to double*
  %822 = load double, double* %821
  %823 = bitcast i8* %814 to double*
  store double %822, double* %823, align 1, !tbaa !2452
  %824 = getelementptr inbounds i8, i8* %814, i64 8
  %825 = bitcast i8* %824 to double*
  store double 0.000000e+00, double* %825, align 1, !tbaa !2452
  %826 = load i64, i64* %RBP
  %827 = sub i64 %826, 80
  %828 = bitcast %union.vec128_t* %XMM0 to i8*
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = bitcast i8* %828 to double*
  %832 = load double, double* %831, align 1
  %833 = inttoptr i64 %827 to double*
  store double %832, double* %833
  %834 = load i64, i64* %RBP
  %835 = sub i64 %834, 24
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 4
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %835 to i64*
  %839 = load i64, i64* %838
  store i64 %839, i64* %RDX, align 8, !tbaa !2428
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 40
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 3
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i32*
  %845 = load i32, i32* %844
  %846 = zext i32 %845 to i64
  store i64 %846, i64* %RCX, align 8, !tbaa !2428
  %847 = load i64, i64* %RCX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 3
  store i64 %849, i64* %PC
  %850 = trunc i64 %847 to i32
  %851 = add i32 1, %850
  %852 = zext i32 %851 to i64
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = icmp ult i32 %851, %850
  %854 = icmp ult i32 %851, 1
  %855 = or i1 %853, %854
  %856 = zext i1 %855 to i8
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %856, i8* %857, align 1, !tbaa !2432
  %858 = and i32 %851, 255
  %859 = call i32 @llvm.ctpop.i32(i32 %858) #17
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = xor i8 %861, 1
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %862, i8* %863, align 1, !tbaa !2446
  %864 = xor i64 1, %847
  %865 = trunc i64 %864 to i32
  %866 = xor i32 %865, %851
  %867 = lshr i32 %866, 4
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %869, i8* %870, align 1, !tbaa !2447
  %871 = icmp eq i32 %851, 0
  %872 = zext i1 %871 to i8
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %872, i8* %873, align 1, !tbaa !2448
  %874 = lshr i32 %851, 31
  %875 = trunc i32 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %875, i8* %876, align 1, !tbaa !2449
  %877 = lshr i32 %850, 31
  %878 = xor i32 %874, %877
  %879 = add nuw nsw i32 %878, %874
  %880 = icmp eq i32 %879, 2
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %881, i8* %882, align 1, !tbaa !2450
  %883 = load i32, i32* %ECX
  %884 = zext i32 %883 to i64
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 3
  store i64 %886, i64* %PC
  %887 = shl i64 %884, 32
  %888 = ashr exact i64 %887, 32
  store i64 %888, i64* %RSI, align 8, !tbaa !2428
  %889 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %890 = load i64, i64* %RDX
  %891 = load i64, i64* %RSI
  %892 = mul i64 %891, 8
  %893 = add i64 %892, %890
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 5
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to double*
  %897 = load double, double* %896
  %898 = bitcast i8* %889 to double*
  store double %897, double* %898, align 1, !tbaa !2452
  %899 = getelementptr inbounds i8, i8* %889, i64 8
  %900 = bitcast i8* %899 to double*
  store double 0.000000e+00, double* %900, align 1, !tbaa !2452
  %901 = bitcast %union.vec128_t* %XMM0 to i8*
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 5
  store i64 %903, i64* %PC
  %904 = bitcast i8* %901 to i64*
  %905 = load i64, i64* %904, align 1
  store i64 %905, i64* %RDX, align 1, !tbaa !2428
  %906 = load i64, i64* %RDX
  %907 = load i64, i64* %RAX
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 3
  store i64 %909, i64* %PC
  %910 = xor i64 %907, %906
  store i64 %910, i64* %RDX, align 8, !tbaa !2428
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %911, align 1, !tbaa !2432
  %912 = trunc i64 %910 to i32
  %913 = and i32 %912, 255
  %914 = call i32 @llvm.ctpop.i32(i32 %913) #17
  %915 = trunc i32 %914 to i8
  %916 = and i8 %915, 1
  %917 = xor i8 %916, 1
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %917, i8* %918, align 1, !tbaa !2446
  %919 = icmp eq i64 %910, 0
  %920 = zext i1 %919 to i8
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %920, i8* %921, align 1, !tbaa !2448
  %922 = lshr i64 %910, 63
  %923 = trunc i64 %922 to i8
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %923, i8* %924, align 1, !tbaa !2449
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %925, align 1, !tbaa !2450
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %926, align 1, !tbaa !2447
  %927 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %928 = load i64, i64* %RDX
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 5
  store i64 %930, i64* %PC
  %931 = bitcast i8* %927 to i64*
  store i64 %928, i64* %931, align 1, !tbaa !2428
  %932 = getelementptr inbounds i8, i8* %927, i64 8
  %933 = bitcast i8* %932 to i64*
  store i64 0, i64* %933, align 1, !tbaa !2428
  %934 = load i64, i64* %RBP
  %935 = sub i64 %934, 88
  %936 = bitcast %union.vec128_t* %XMM0 to i8*
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 5
  store i64 %938, i64* %PC
  %939 = bitcast i8* %936 to double*
  %940 = load double, double* %939, align 1
  %941 = inttoptr i64 %935 to double*
  store double %940, double* %941
  %942 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %943 = load i64, i64* %RBP
  %944 = sub i64 %943, 80
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 5
  store i64 %946, i64* %PC
  %947 = inttoptr i64 %944 to double*
  %948 = load double, double* %947
  %949 = bitcast i8* %942 to double*
  store double %948, double* %949, align 1, !tbaa !2452
  %950 = getelementptr inbounds i8, i8* %942, i64 8
  %951 = bitcast i8* %950 to double*
  store double 0.000000e+00, double* %951, align 1, !tbaa !2452
  %952 = load i64, i64* %RBP
  %953 = sub i64 %952, 24
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 4
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i64*
  %957 = load i64, i64* %956
  store i64 %957, i64* %RDX, align 8, !tbaa !2428
  %958 = load i64, i64* %RBP
  %959 = sub i64 %958, 32
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 4
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i32*
  %963 = load i32, i32* %962
  %964 = sext i32 %963 to i64
  store i64 %964, i64* %RSI, align 8, !tbaa !2428
  %965 = load i64, i64* %RDX
  %966 = load i64, i64* %RSI
  %967 = mul i64 %966, 8
  %968 = add i64 %967, %965
  %969 = bitcast %union.vec128_t* %XMM0 to i8*
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 5
  store i64 %971, i64* %PC
  %972 = bitcast i8* %969 to double*
  %973 = load double, double* %972, align 1
  %974 = inttoptr i64 %968 to double*
  store double %973, double* %974
  %975 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 88
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 5
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to double*
  %981 = load double, double* %980
  %982 = bitcast i8* %975 to double*
  store double %981, double* %982, align 1, !tbaa !2452
  %983 = getelementptr inbounds i8, i8* %975, i64 8
  %984 = bitcast i8* %983 to double*
  store double 0.000000e+00, double* %984, align 1, !tbaa !2452
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 24
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 4
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %986 to i64*
  %990 = load i64, i64* %989
  store i64 %990, i64* %RDX, align 8, !tbaa !2428
  %991 = load i64, i64* %RBP
  %992 = sub i64 %991, 32
  %993 = load i64, i64* %PC
  %994 = add i64 %993, 3
  store i64 %994, i64* %PC
  %995 = inttoptr i64 %992 to i32*
  %996 = load i32, i32* %995
  %997 = zext i32 %996 to i64
  store i64 %997, i64* %RCX, align 8, !tbaa !2428
  %998 = load i64, i64* %RCX
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 3
  store i64 %1000, i64* %PC
  %1001 = trunc i64 %998 to i32
  %1002 = add i32 1, %1001
  %1003 = zext i32 %1002 to i64
  store i64 %1003, i64* %RCX, align 8, !tbaa !2428
  %1004 = icmp ult i32 %1002, %1001
  %1005 = icmp ult i32 %1002, 1
  %1006 = or i1 %1004, %1005
  %1007 = zext i1 %1006 to i8
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1007, i8* %1008, align 1, !tbaa !2432
  %1009 = and i32 %1002, 255
  %1010 = call i32 @llvm.ctpop.i32(i32 %1009) #17
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1013, i8* %1014, align 1, !tbaa !2446
  %1015 = xor i64 1, %998
  %1016 = trunc i64 %1015 to i32
  %1017 = xor i32 %1016, %1002
  %1018 = lshr i32 %1017, 4
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1020, i8* %1021, align 1, !tbaa !2447
  %1022 = icmp eq i32 %1002, 0
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1023, i8* %1024, align 1, !tbaa !2448
  %1025 = lshr i32 %1002, 31
  %1026 = trunc i32 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1026, i8* %1027, align 1, !tbaa !2449
  %1028 = lshr i32 %1001, 31
  %1029 = xor i32 %1025, %1028
  %1030 = add nuw nsw i32 %1029, %1025
  %1031 = icmp eq i32 %1030, 2
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1032, i8* %1033, align 1, !tbaa !2450
  %1034 = load i32, i32* %ECX
  %1035 = zext i32 %1034 to i64
  %1036 = load i64, i64* %PC
  %1037 = add i64 %1036, 3
  store i64 %1037, i64* %PC
  %1038 = shl i64 %1035, 32
  %1039 = ashr exact i64 %1038, 32
  store i64 %1039, i64* %RSI, align 8, !tbaa !2428
  %1040 = load i64, i64* %RDX
  %1041 = load i64, i64* %RSI
  %1042 = mul i64 %1041, 8
  %1043 = add i64 %1042, %1040
  %1044 = bitcast %union.vec128_t* %XMM0 to i8*
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 5
  store i64 %1046, i64* %PC
  %1047 = bitcast i8* %1044 to double*
  %1048 = load double, double* %1047, align 1
  %1049 = inttoptr i64 %1043 to double*
  store double %1048, double* %1049
  %1050 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1051 = load i64, i64* %RBP
  %1052 = sub i64 %1051, 64
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 5
  store i64 %1054, i64* %PC
  %1055 = inttoptr i64 %1052 to double*
  %1056 = load double, double* %1055
  %1057 = bitcast i8* %1050 to double*
  store double %1056, double* %1057, align 1, !tbaa !2452
  %1058 = getelementptr inbounds i8, i8* %1050, i64 8
  %1059 = bitcast i8* %1058 to double*
  store double 0.000000e+00, double* %1059, align 1, !tbaa !2452
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 24
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 4
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i64*
  %1065 = load i64, i64* %1064
  store i64 %1065, i64* %RDX, align 8, !tbaa !2428
  %1066 = load i64, i64* %RBP
  %1067 = sub i64 %1066, 40
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to i32*
  %1071 = load i32, i32* %1070
  %1072 = sext i32 %1071 to i64
  store i64 %1072, i64* %RSI, align 8, !tbaa !2428
  %1073 = load i64, i64* %RDX
  %1074 = load i64, i64* %RSI
  %1075 = mul i64 %1074, 8
  %1076 = add i64 %1075, %1073
  %1077 = bitcast %union.vec128_t* %XMM0 to i8*
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 5
  store i64 %1079, i64* %PC
  %1080 = bitcast i8* %1077 to double*
  %1081 = load double, double* %1080, align 1
  %1082 = inttoptr i64 %1076 to double*
  store double %1081, double* %1082
  %1083 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1084 = load i64, i64* %RBP
  %1085 = sub i64 %1084, 72
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 5
  store i64 %1087, i64* %PC
  %1088 = inttoptr i64 %1085 to double*
  %1089 = load double, double* %1088
  %1090 = bitcast i8* %1083 to double*
  store double %1089, double* %1090, align 1, !tbaa !2452
  %1091 = getelementptr inbounds i8, i8* %1083, i64 8
  %1092 = bitcast i8* %1091 to double*
  store double 0.000000e+00, double* %1092, align 1, !tbaa !2452
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 24
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i64*
  %1098 = load i64, i64* %1097
  store i64 %1098, i64* %RDX, align 8, !tbaa !2428
  %1099 = load i64, i64* %RBP
  %1100 = sub i64 %1099, 40
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 3
  store i64 %1102, i64* %PC
  %1103 = inttoptr i64 %1100 to i32*
  %1104 = load i32, i32* %1103
  %1105 = zext i32 %1104 to i64
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RCX
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 3
  store i64 %1108, i64* %PC
  %1109 = trunc i64 %1106 to i32
  %1110 = add i32 1, %1109
  %1111 = zext i32 %1110 to i64
  store i64 %1111, i64* %RCX, align 8, !tbaa !2428
  %1112 = icmp ult i32 %1110, %1109
  %1113 = icmp ult i32 %1110, 1
  %1114 = or i1 %1112, %1113
  %1115 = zext i1 %1114 to i8
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1115, i8* %1116, align 1, !tbaa !2432
  %1117 = and i32 %1110, 255
  %1118 = call i32 @llvm.ctpop.i32(i32 %1117) #17
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1121, i8* %1122, align 1, !tbaa !2446
  %1123 = xor i64 1, %1106
  %1124 = trunc i64 %1123 to i32
  %1125 = xor i32 %1124, %1110
  %1126 = lshr i32 %1125, 4
  %1127 = trunc i32 %1126 to i8
  %1128 = and i8 %1127, 1
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1128, i8* %1129, align 1, !tbaa !2447
  %1130 = icmp eq i32 %1110, 0
  %1131 = zext i1 %1130 to i8
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1131, i8* %1132, align 1, !tbaa !2448
  %1133 = lshr i32 %1110, 31
  %1134 = trunc i32 %1133 to i8
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1134, i8* %1135, align 1, !tbaa !2449
  %1136 = lshr i32 %1109, 31
  %1137 = xor i32 %1133, %1136
  %1138 = add nuw nsw i32 %1137, %1133
  %1139 = icmp eq i32 %1138, 2
  %1140 = zext i1 %1139 to i8
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1140, i8* %1141, align 1, !tbaa !2450
  %1142 = load i32, i32* %ECX
  %1143 = zext i32 %1142 to i64
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 3
  store i64 %1145, i64* %PC
  %1146 = shl i64 %1143, 32
  %1147 = ashr exact i64 %1146, 32
  store i64 %1147, i64* %RSI, align 8, !tbaa !2428
  %1148 = load i64, i64* %RDX
  %1149 = load i64, i64* %RSI
  %1150 = mul i64 %1149, 8
  %1151 = add i64 %1150, %1148
  %1152 = bitcast %union.vec128_t* %XMM0 to i8*
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 5
  store i64 %1154, i64* %PC
  %1155 = bitcast i8* %1152 to double*
  %1156 = load double, double* %1155, align 1
  %1157 = inttoptr i64 %1151 to double*
  store double %1156, double* %1157
  %1158 = load i64, i64* %RBP
  %1159 = sub i64 %1158, 52
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 3
  store i64 %1161, i64* %PC
  %1162 = inttoptr i64 %1159 to i32*
  %1163 = load i32, i32* %1162
  %1164 = zext i32 %1163 to i64
  store i64 %1164, i64* %RCX, align 8, !tbaa !2428
  %1165 = load i64, i64* %RCX
  %1166 = load i64, i64* %RBP
  %1167 = sub i64 %1166, 40
  %1168 = load i64, i64* %PC
  %1169 = add i64 %1168, 3
  store i64 %1169, i64* %PC
  %1170 = trunc i64 %1165 to i32
  %1171 = inttoptr i64 %1167 to i32*
  %1172 = load i32, i32* %1171
  %1173 = add i32 %1172, %1170
  %1174 = zext i32 %1173 to i64
  store i64 %1174, i64* %RCX, align 8, !tbaa !2428
  %1175 = icmp ult i32 %1173, %1170
  %1176 = icmp ult i32 %1173, %1172
  %1177 = or i1 %1175, %1176
  %1178 = zext i1 %1177 to i8
  %1179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1178, i8* %1179, align 1, !tbaa !2432
  %1180 = and i32 %1173, 255
  %1181 = call i32 @llvm.ctpop.i32(i32 %1180) #17
  %1182 = trunc i32 %1181 to i8
  %1183 = and i8 %1182, 1
  %1184 = xor i8 %1183, 1
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1184, i8* %1185, align 1, !tbaa !2446
  %1186 = xor i32 %1172, %1170
  %1187 = xor i32 %1186, %1173
  %1188 = lshr i32 %1187, 4
  %1189 = trunc i32 %1188 to i8
  %1190 = and i8 %1189, 1
  %1191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1190, i8* %1191, align 1, !tbaa !2447
  %1192 = icmp eq i32 %1173, 0
  %1193 = zext i1 %1192 to i8
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1193, i8* %1194, align 1, !tbaa !2448
  %1195 = lshr i32 %1173, 31
  %1196 = trunc i32 %1195 to i8
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1196, i8* %1197, align 1, !tbaa !2449
  %1198 = lshr i32 %1170, 31
  %1199 = lshr i32 %1172, 31
  %1200 = xor i32 %1195, %1198
  %1201 = xor i32 %1195, %1199
  %1202 = add nuw nsw i32 %1200, %1201
  %1203 = icmp eq i32 %1202, 2
  %1204 = zext i1 %1203 to i8
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1204, i8* %1205, align 1, !tbaa !2450
  %1206 = load i64, i64* %RBP
  %1207 = sub i64 %1206, 40
  %1208 = load i32, i32* %ECX
  %1209 = zext i32 %1208 to i64
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 3
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1207 to i32*
  store i32 %1208, i32* %1212
  %1213 = load i64, i64* %RBP
  %1214 = sub i64 %1213, 24
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 4
  store i64 %1216, i64* %PC
  %1217 = inttoptr i64 %1214 to i64*
  %1218 = load i64, i64* %1217
  store i64 %1218, i64* %RDX, align 8, !tbaa !2428
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 40
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 3
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1220 to i32*
  %1224 = load i32, i32* %1223
  %1225 = zext i32 %1224 to i64
  store i64 %1225, i64* %RCX, align 8, !tbaa !2428
  %1226 = load i64, i64* %RCX
  %1227 = load i64, i64* %PC
  %1228 = add i64 %1227, 3
  store i64 %1228, i64* %PC
  %1229 = trunc i64 %1226 to i32
  %1230 = add i32 1, %1229
  %1231 = zext i32 %1230 to i64
  store i64 %1231, i64* %RCX, align 8, !tbaa !2428
  %1232 = icmp ult i32 %1230, %1229
  %1233 = icmp ult i32 %1230, 1
  %1234 = or i1 %1232, %1233
  %1235 = zext i1 %1234 to i8
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1235, i8* %1236, align 1, !tbaa !2432
  %1237 = and i32 %1230, 255
  %1238 = call i32 @llvm.ctpop.i32(i32 %1237) #17
  %1239 = trunc i32 %1238 to i8
  %1240 = and i8 %1239, 1
  %1241 = xor i8 %1240, 1
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1241, i8* %1242, align 1, !tbaa !2446
  %1243 = xor i64 1, %1226
  %1244 = trunc i64 %1243 to i32
  %1245 = xor i32 %1244, %1230
  %1246 = lshr i32 %1245, 4
  %1247 = trunc i32 %1246 to i8
  %1248 = and i8 %1247, 1
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1248, i8* %1249, align 1, !tbaa !2447
  %1250 = icmp eq i32 %1230, 0
  %1251 = zext i1 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1251, i8* %1252, align 1, !tbaa !2448
  %1253 = lshr i32 %1230, 31
  %1254 = trunc i32 %1253 to i8
  %1255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1254, i8* %1255, align 1, !tbaa !2449
  %1256 = lshr i32 %1229, 31
  %1257 = xor i32 %1253, %1256
  %1258 = add nuw nsw i32 %1257, %1253
  %1259 = icmp eq i32 %1258, 2
  %1260 = zext i1 %1259 to i8
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1260, i8* %1261, align 1, !tbaa !2450
  %1262 = load i32, i32* %ECX
  %1263 = zext i32 %1262 to i64
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 3
  store i64 %1265, i64* %PC
  %1266 = shl i64 %1263, 32
  %1267 = ashr exact i64 %1266, 32
  store i64 %1267, i64* %RSI, align 8, !tbaa !2428
  %1268 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1269 = load i64, i64* %RDX
  %1270 = load i64, i64* %RSI
  %1271 = mul i64 %1270, 8
  %1272 = add i64 %1271, %1269
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 5
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to double*
  %1276 = load double, double* %1275
  %1277 = bitcast i8* %1268 to double*
  store double %1276, double* %1277, align 1, !tbaa !2452
  %1278 = getelementptr inbounds i8, i8* %1268, i64 8
  %1279 = bitcast i8* %1278 to double*
  store double 0.000000e+00, double* %1279, align 1, !tbaa !2452
  %1280 = bitcast %union.vec128_t* %XMM0 to i8*
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 5
  store i64 %1282, i64* %PC
  %1283 = bitcast i8* %1280 to i64*
  %1284 = load i64, i64* %1283, align 1
  store i64 %1284, i64* %RDX, align 1, !tbaa !2428
  %1285 = load i64, i64* %RDX
  %1286 = load i64, i64* %RAX
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 3
  store i64 %1288, i64* %PC
  %1289 = xor i64 %1286, %1285
  store i64 %1289, i64* %RDX, align 8, !tbaa !2428
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1290, align 1, !tbaa !2432
  %1291 = trunc i64 %1289 to i32
  %1292 = and i32 %1291, 255
  %1293 = call i32 @llvm.ctpop.i32(i32 %1292) #17
  %1294 = trunc i32 %1293 to i8
  %1295 = and i8 %1294, 1
  %1296 = xor i8 %1295, 1
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1296, i8* %1297, align 1, !tbaa !2446
  %1298 = icmp eq i64 %1289, 0
  %1299 = zext i1 %1298 to i8
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1299, i8* %1300, align 1, !tbaa !2448
  %1301 = lshr i64 %1289, 63
  %1302 = trunc i64 %1301 to i8
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1302, i8* %1303, align 1, !tbaa !2449
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1304, align 1, !tbaa !2450
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1305, align 1, !tbaa !2447
  %1306 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1307 = load i64, i64* %RDX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 5
  store i64 %1309, i64* %PC
  %1310 = bitcast i8* %1306 to i64*
  store i64 %1307, i64* %1310, align 1, !tbaa !2428
  %1311 = getelementptr inbounds i8, i8* %1306, i64 8
  %1312 = bitcast i8* %1311 to i64*
  store i64 0, i64* %1312, align 1, !tbaa !2428
  %1313 = load i64, i64* %RBP
  %1314 = sub i64 %1313, 24
  %1315 = load i64, i64* %PC
  %1316 = add i64 %1315, 4
  store i64 %1316, i64* %PC
  %1317 = inttoptr i64 %1314 to i64*
  %1318 = load i64, i64* %1317
  store i64 %1318, i64* %RAX, align 8, !tbaa !2428
  %1319 = load i64, i64* %RBP
  %1320 = sub i64 %1319, 40
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 3
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i32*
  %1324 = load i32, i32* %1323
  %1325 = zext i32 %1324 to i64
  store i64 %1325, i64* %RCX, align 8, !tbaa !2428
  %1326 = load i64, i64* %RCX
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 3
  store i64 %1328, i64* %PC
  %1329 = trunc i64 %1326 to i32
  %1330 = add i32 1, %1329
  %1331 = zext i32 %1330 to i64
  store i64 %1331, i64* %RCX, align 8, !tbaa !2428
  %1332 = icmp ult i32 %1330, %1329
  %1333 = icmp ult i32 %1330, 1
  %1334 = or i1 %1332, %1333
  %1335 = zext i1 %1334 to i8
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1335, i8* %1336, align 1, !tbaa !2432
  %1337 = and i32 %1330, 255
  %1338 = call i32 @llvm.ctpop.i32(i32 %1337) #17
  %1339 = trunc i32 %1338 to i8
  %1340 = and i8 %1339, 1
  %1341 = xor i8 %1340, 1
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1341, i8* %1342, align 1, !tbaa !2446
  %1343 = xor i64 1, %1326
  %1344 = trunc i64 %1343 to i32
  %1345 = xor i32 %1344, %1330
  %1346 = lshr i32 %1345, 4
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1348, i8* %1349, align 1, !tbaa !2447
  %1350 = icmp eq i32 %1330, 0
  %1351 = zext i1 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1351, i8* %1352, align 1, !tbaa !2448
  %1353 = lshr i32 %1330, 31
  %1354 = trunc i32 %1353 to i8
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1354, i8* %1355, align 1, !tbaa !2449
  %1356 = lshr i32 %1329, 31
  %1357 = xor i32 %1353, %1356
  %1358 = add nuw nsw i32 %1357, %1353
  %1359 = icmp eq i32 %1358, 2
  %1360 = zext i1 %1359 to i8
  %1361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1360, i8* %1361, align 1, !tbaa !2450
  %1362 = load i32, i32* %ECX
  %1363 = zext i32 %1362 to i64
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 3
  store i64 %1365, i64* %PC
  %1366 = shl i64 %1363, 32
  %1367 = ashr exact i64 %1366, 32
  store i64 %1367, i64* %RDX, align 8, !tbaa !2428
  %1368 = load i64, i64* %RAX
  %1369 = load i64, i64* %RDX
  %1370 = mul i64 %1369, 8
  %1371 = add i64 %1370, %1368
  %1372 = bitcast %union.vec128_t* %XMM0 to i8*
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 5
  store i64 %1374, i64* %PC
  %1375 = bitcast i8* %1372 to double*
  %1376 = load double, double* %1375, align 1
  %1377 = inttoptr i64 %1371 to double*
  store double %1376, double* %1377
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 36
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 3
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i32*
  %1383 = load i32, i32* %1382
  %1384 = zext i32 %1383 to i64
  store i64 %1384, i64* %RAX, align 8, !tbaa !2428
  %1385 = load i64, i64* %RAX
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 3
  store i64 %1387, i64* %PC
  %1388 = trunc i64 %1385 to i32
  %1389 = add i32 1, %1388
  %1390 = zext i32 %1389 to i64
  store i64 %1390, i64* %RAX, align 8, !tbaa !2428
  %1391 = icmp ult i32 %1389, %1388
  %1392 = icmp ult i32 %1389, 1
  %1393 = or i1 %1391, %1392
  %1394 = zext i1 %1393 to i8
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1394, i8* %1395, align 1, !tbaa !2432
  %1396 = and i32 %1389, 255
  %1397 = call i32 @llvm.ctpop.i32(i32 %1396) #17
  %1398 = trunc i32 %1397 to i8
  %1399 = and i8 %1398, 1
  %1400 = xor i8 %1399, 1
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1400, i8* %1401, align 1, !tbaa !2446
  %1402 = xor i64 1, %1385
  %1403 = trunc i64 %1402 to i32
  %1404 = xor i32 %1403, %1389
  %1405 = lshr i32 %1404, 4
  %1406 = trunc i32 %1405 to i8
  %1407 = and i8 %1406, 1
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1407, i8* %1408, align 1, !tbaa !2447
  %1409 = icmp eq i32 %1389, 0
  %1410 = zext i1 %1409 to i8
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1410, i8* %1411, align 1, !tbaa !2448
  %1412 = lshr i32 %1389, 31
  %1413 = trunc i32 %1412 to i8
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1413, i8* %1414, align 1, !tbaa !2449
  %1415 = lshr i32 %1388, 31
  %1416 = xor i32 %1412, %1415
  %1417 = add nuw nsw i32 %1416, %1412
  %1418 = icmp eq i32 %1417, 2
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1419, i8* %1420, align 1, !tbaa !2450
  %1421 = load i64, i64* %RBP
  %1422 = sub i64 %1421, 36
  %1423 = load i32, i32* %EAX
  %1424 = zext i32 %1423 to i64
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 3
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1422 to i32*
  store i32 %1423, i32* %1427
  %1428 = load i64, i64* %PC
  %1429 = sub i64 %1428, 1271
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 5
  store i64 %1431, i64* %PC
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1429, i64* %1432, align 8, !tbaa !2428
  br label %block_401cba

block_401ccd:                                     ; preds = %block_401cd9, %block_401cc6
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_401cc6 ], [ %MEMORY.0, %block_401cd9 ]
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 28
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 3
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i32*
  %1438 = load i32, i32* %1437
  %1439 = zext i32 %1438 to i64
  store i64 %1439, i64* %RAX, align 8, !tbaa !2428
  %1440 = load i32, i32* %EAX
  %1441 = zext i32 %1440 to i64
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 36
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 3
  store i64 %1445, i64* %PC
  %1446 = inttoptr i64 %1443 to i32*
  %1447 = load i32, i32* %1446
  %1448 = sub i32 %1440, %1447
  %1449 = icmp ult i32 %1440, %1447
  %1450 = zext i1 %1449 to i8
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1450, i8* %1451, align 1, !tbaa !2432
  %1452 = and i32 %1448, 255
  %1453 = call i32 @llvm.ctpop.i32(i32 %1452) #17
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = xor i8 %1455, 1
  %1457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1456, i8* %1457, align 1, !tbaa !2446
  %1458 = xor i32 %1447, %1440
  %1459 = xor i32 %1458, %1448
  %1460 = lshr i32 %1459, 4
  %1461 = trunc i32 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1462, i8* %1463, align 1, !tbaa !2447
  %1464 = icmp eq i32 %1448, 0
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1465, i8* %1466, align 1, !tbaa !2448
  %1467 = lshr i32 %1448, 31
  %1468 = trunc i32 %1467 to i8
  %1469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1468, i8* %1469, align 1, !tbaa !2449
  %1470 = lshr i32 %1440, 31
  %1471 = lshr i32 %1447, 31
  %1472 = xor i32 %1471, %1470
  %1473 = xor i32 %1467, %1470
  %1474 = add nuw nsw i32 %1473, %1472
  %1475 = icmp eq i32 %1474, 2
  %1476 = zext i1 %1475 to i8
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1476, i8* %1477, align 1, !tbaa !2450
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 892
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 6
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 6
  store i64 %1483, i64* %PC
  %1484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1485 = load i8, i8* %1484, align 1, !tbaa !2449
  %1486 = icmp ne i8 %1485, 0
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1488 = load i8, i8* %1487, align 1, !tbaa !2450
  %1489 = icmp ne i8 %1488, 0
  %1490 = xor i1 %1486, %1489
  %1491 = xor i1 %1490, true
  %1492 = zext i1 %1491 to i8
  store i8 %1492, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1494 = select i1 %1490, i64 %1481, i64 %1479
  store i64 %1494, i64* %1493, align 8, !tbaa !2428
  %1495 = load i8, i8* %BRANCH_TAKEN
  %1496 = icmp eq i8 %1495, 1
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 10
  store i64 %1498, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1499 = load i64, i64* %RBP
  br i1 %1496, label %block_40204f, label %block_401cd9

block_401cc6:                                     ; preds = %block_401cba
  %1500 = load i64, i64* %RBP
  %1501 = sub i64 %1500, 28
  %1502 = load i64, i64* %PC
  %1503 = add i64 %1502, 7
  store i64 %1503, i64* %PC
  %1504 = inttoptr i64 %1501 to i32*
  store i32 0, i32* %1504
  br label %block_401ccd

block_40223b:                                     ; preds = %block_40222f
  %1505 = sub i64 %3258, 28
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 3
  store i64 %1507, i64* %PC
  %1508 = inttoptr i64 %1505 to i32*
  %1509 = load i32, i32* %1508
  %1510 = zext i32 %1509 to i64
  store i64 %1510, i64* %RCX, align 8, !tbaa !2428
  %1511 = load i64, i64* %RCX
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 3
  store i64 %1513, i64* %PC
  %1514 = trunc i64 %1511 to i32
  %1515 = shl i32 %1514, 1
  %1516 = icmp slt i32 %1514, 0
  %1517 = icmp slt i32 %1515, 0
  %1518 = xor i1 %1516, %1517
  %1519 = zext i32 %1515 to i64
  store i64 %1519, i64* %RCX, align 8, !tbaa !2428
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1521 = zext i1 %1516 to i8
  store i8 %1521, i8* %1520, align 1, !tbaa !2451
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1523 = and i32 %1515, 254
  %1524 = call i32 @llvm.ctpop.i32(i32 %1523) #17
  %1525 = trunc i32 %1524 to i8
  %1526 = and i8 %1525, 1
  %1527 = xor i8 %1526, 1
  store i8 %1527, i8* %1522, align 1, !tbaa !2451
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1528, align 1, !tbaa !2451
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1530 = icmp eq i32 %1515, 0
  %1531 = zext i1 %1530 to i8
  store i8 %1531, i8* %1529, align 1, !tbaa !2451
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1533 = lshr i32 %1515, 31
  %1534 = trunc i32 %1533 to i8
  store i8 %1534, i8* %1532, align 1, !tbaa !2451
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1536 = zext i1 %1518 to i8
  store i8 %1536, i8* %1535, align 1, !tbaa !2451
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 16
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 4
  store i64 %1540, i64* %PC
  %1541 = inttoptr i64 %1538 to i64*
  %1542 = load i64, i64* %1541
  store i64 %1542, i64* %RDX, align 8, !tbaa !2428
  %1543 = load i64, i64* %RBP
  %1544 = sub i64 %1543, 36
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 4
  store i64 %1546, i64* %PC
  %1547 = inttoptr i64 %1544 to i32*
  %1548 = load i32, i32* %1547
  %1549 = sext i32 %1548 to i64
  store i64 %1549, i64* %RSI, align 8, !tbaa !2428
  %1550 = load i64, i64* %RCX
  %1551 = load i64, i64* %RDX
  %1552 = load i64, i64* %RSI
  %1553 = mul i64 %1552, 4
  %1554 = add i64 %1553, %1551
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 3
  store i64 %1556, i64* %PC
  %1557 = trunc i64 %1550 to i32
  %1558 = inttoptr i64 %1554 to i32*
  %1559 = load i32, i32* %1558
  %1560 = add i32 %1559, %1557
  %1561 = zext i32 %1560 to i64
  store i64 %1561, i64* %RCX, align 8, !tbaa !2428
  %1562 = icmp ult i32 %1560, %1557
  %1563 = icmp ult i32 %1560, %1559
  %1564 = or i1 %1562, %1563
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1565, i8* %1566, align 1, !tbaa !2432
  %1567 = and i32 %1560, 255
  %1568 = call i32 @llvm.ctpop.i32(i32 %1567) #17
  %1569 = trunc i32 %1568 to i8
  %1570 = and i8 %1569, 1
  %1571 = xor i8 %1570, 1
  %1572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1571, i8* %1572, align 1, !tbaa !2446
  %1573 = xor i32 %1559, %1557
  %1574 = xor i32 %1573, %1560
  %1575 = lshr i32 %1574, 4
  %1576 = trunc i32 %1575 to i8
  %1577 = and i8 %1576, 1
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1577, i8* %1578, align 1, !tbaa !2447
  %1579 = icmp eq i32 %1560, 0
  %1580 = zext i1 %1579 to i8
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1580, i8* %1581, align 1, !tbaa !2448
  %1582 = lshr i32 %1560, 31
  %1583 = trunc i32 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1583, i8* %1584, align 1, !tbaa !2449
  %1585 = lshr i32 %1557, 31
  %1586 = lshr i32 %1559, 31
  %1587 = xor i32 %1582, %1585
  %1588 = xor i32 %1582, %1586
  %1589 = add nuw nsw i32 %1587, %1588
  %1590 = icmp eq i32 %1589, 2
  %1591 = zext i1 %1590 to i8
  %1592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1591, i8* %1592, align 1, !tbaa !2450
  %1593 = load i64, i64* %RBP
  %1594 = sub i64 %1593, 32
  %1595 = load i32, i32* %ECX
  %1596 = zext i32 %1595 to i64
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 3
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1594 to i32*
  store i32 %1595, i32* %1599
  %1600 = load i64, i64* %RBP
  %1601 = sub i64 %1600, 36
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 3
  store i64 %1603, i64* %PC
  %1604 = inttoptr i64 %1601 to i32*
  %1605 = load i32, i32* %1604
  %1606 = zext i32 %1605 to i64
  store i64 %1606, i64* %RCX, align 8, !tbaa !2428
  %1607 = load i64, i64* %RCX
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 3
  store i64 %1609, i64* %PC
  %1610 = trunc i64 %1607 to i32
  %1611 = shl i32 %1610, 1
  %1612 = icmp slt i32 %1610, 0
  %1613 = icmp slt i32 %1611, 0
  %1614 = xor i1 %1612, %1613
  %1615 = zext i32 %1611 to i64
  store i64 %1615, i64* %RCX, align 8, !tbaa !2428
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1617 = zext i1 %1612 to i8
  store i8 %1617, i8* %1616, align 1, !tbaa !2451
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1619 = and i32 %1611, 254
  %1620 = call i32 @llvm.ctpop.i32(i32 %1619) #17
  %1621 = trunc i32 %1620 to i8
  %1622 = and i8 %1621, 1
  %1623 = xor i8 %1622, 1
  store i8 %1623, i8* %1618, align 1, !tbaa !2451
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1624, align 1, !tbaa !2451
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1626 = icmp eq i32 %1611, 0
  %1627 = zext i1 %1626 to i8
  store i8 %1627, i8* %1625, align 1, !tbaa !2451
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1629 = lshr i32 %1611, 31
  %1630 = trunc i32 %1629 to i8
  store i8 %1630, i8* %1628, align 1, !tbaa !2451
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1632 = zext i1 %1614 to i8
  store i8 %1632, i8* %1631, align 1, !tbaa !2451
  %1633 = load i64, i64* %RBP
  %1634 = sub i64 %1633, 16
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 4
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i64*
  %1638 = load i64, i64* %1637
  store i64 %1638, i64* %RDX, align 8, !tbaa !2428
  %1639 = load i64, i64* %RBP
  %1640 = sub i64 %1639, 28
  %1641 = load i64, i64* %PC
  %1642 = add i64 %1641, 4
  store i64 %1642, i64* %PC
  %1643 = inttoptr i64 %1640 to i32*
  %1644 = load i32, i32* %1643
  %1645 = sext i32 %1644 to i64
  store i64 %1645, i64* %RSI, align 8, !tbaa !2428
  %1646 = load i64, i64* %RCX
  %1647 = load i64, i64* %RDX
  %1648 = load i64, i64* %RSI
  %1649 = mul i64 %1648, 4
  %1650 = add i64 %1649, %1647
  %1651 = load i64, i64* %PC
  %1652 = add i64 %1651, 3
  store i64 %1652, i64* %PC
  %1653 = trunc i64 %1646 to i32
  %1654 = inttoptr i64 %1650 to i32*
  %1655 = load i32, i32* %1654
  %1656 = add i32 %1655, %1653
  %1657 = zext i32 %1656 to i64
  store i64 %1657, i64* %RCX, align 8, !tbaa !2428
  %1658 = icmp ult i32 %1656, %1653
  %1659 = icmp ult i32 %1656, %1655
  %1660 = or i1 %1658, %1659
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1661, i8* %1662, align 1, !tbaa !2432
  %1663 = and i32 %1656, 255
  %1664 = call i32 @llvm.ctpop.i32(i32 %1663) #17
  %1665 = trunc i32 %1664 to i8
  %1666 = and i8 %1665, 1
  %1667 = xor i8 %1666, 1
  %1668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1667, i8* %1668, align 1, !tbaa !2446
  %1669 = xor i32 %1655, %1653
  %1670 = xor i32 %1669, %1656
  %1671 = lshr i32 %1670, 4
  %1672 = trunc i32 %1671 to i8
  %1673 = and i8 %1672, 1
  %1674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1673, i8* %1674, align 1, !tbaa !2447
  %1675 = icmp eq i32 %1656, 0
  %1676 = zext i1 %1675 to i8
  %1677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1676, i8* %1677, align 1, !tbaa !2448
  %1678 = lshr i32 %1656, 31
  %1679 = trunc i32 %1678 to i8
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1679, i8* %1680, align 1, !tbaa !2449
  %1681 = lshr i32 %1653, 31
  %1682 = lshr i32 %1655, 31
  %1683 = xor i32 %1678, %1681
  %1684 = xor i32 %1678, %1682
  %1685 = add nuw nsw i32 %1683, %1684
  %1686 = icmp eq i32 %1685, 2
  %1687 = zext i1 %1686 to i8
  %1688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1687, i8* %1688, align 1, !tbaa !2450
  %1689 = load i64, i64* %RBP
  %1690 = sub i64 %1689, 40
  %1691 = load i32, i32* %ECX
  %1692 = zext i32 %1691 to i64
  %1693 = load i64, i64* %PC
  %1694 = add i64 %1693, 3
  store i64 %1694, i64* %PC
  %1695 = inttoptr i64 %1690 to i32*
  store i32 %1691, i32* %1695
  %1696 = load i64, i64* %RBP
  %1697 = sub i64 %1696, 24
  %1698 = load i64, i64* %PC
  %1699 = add i64 %1698, 4
  store i64 %1699, i64* %PC
  %1700 = inttoptr i64 %1697 to i64*
  %1701 = load i64, i64* %1700
  store i64 %1701, i64* %RDX, align 8, !tbaa !2428
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 32
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 4
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i32*
  %1707 = load i32, i32* %1706
  %1708 = sext i32 %1707 to i64
  store i64 %1708, i64* %RSI, align 8, !tbaa !2428
  %1709 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1710 = load i64, i64* %RDX
  %1711 = load i64, i64* %RSI
  %1712 = mul i64 %1711, 8
  %1713 = add i64 %1712, %1710
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 5
  store i64 %1715, i64* %PC
  %1716 = inttoptr i64 %1713 to double*
  %1717 = load double, double* %1716
  %1718 = bitcast i8* %1709 to double*
  store double %1717, double* %1718, align 1, !tbaa !2452
  %1719 = getelementptr inbounds i8, i8* %1709, i64 8
  %1720 = bitcast i8* %1719 to double*
  store double 0.000000e+00, double* %1720, align 1, !tbaa !2452
  %1721 = load i64, i64* %RBP
  %1722 = sub i64 %1721, 64
  %1723 = bitcast %union.vec128_t* %XMM0 to i8*
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 5
  store i64 %1725, i64* %PC
  %1726 = bitcast i8* %1723 to double*
  %1727 = load double, double* %1726, align 1
  %1728 = inttoptr i64 %1722 to double*
  store double %1727, double* %1728
  %1729 = load i64, i64* %RBP
  %1730 = sub i64 %1729, 24
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 4
  store i64 %1732, i64* %PC
  %1733 = inttoptr i64 %1730 to i64*
  %1734 = load i64, i64* %1733
  store i64 %1734, i64* %RDX, align 8, !tbaa !2428
  %1735 = load i64, i64* %RBP
  %1736 = sub i64 %1735, 32
  %1737 = load i64, i64* %PC
  %1738 = add i64 %1737, 3
  store i64 %1738, i64* %PC
  %1739 = inttoptr i64 %1736 to i32*
  %1740 = load i32, i32* %1739
  %1741 = zext i32 %1740 to i64
  store i64 %1741, i64* %RCX, align 8, !tbaa !2428
  %1742 = load i64, i64* %RCX
  %1743 = load i64, i64* %PC
  %1744 = add i64 %1743, 3
  store i64 %1744, i64* %PC
  %1745 = trunc i64 %1742 to i32
  %1746 = add i32 1, %1745
  %1747 = zext i32 %1746 to i64
  store i64 %1747, i64* %RCX, align 8, !tbaa !2428
  %1748 = icmp ult i32 %1746, %1745
  %1749 = icmp ult i32 %1746, 1
  %1750 = or i1 %1748, %1749
  %1751 = zext i1 %1750 to i8
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1751, i8* %1752, align 1, !tbaa !2432
  %1753 = and i32 %1746, 255
  %1754 = call i32 @llvm.ctpop.i32(i32 %1753) #17
  %1755 = trunc i32 %1754 to i8
  %1756 = and i8 %1755, 1
  %1757 = xor i8 %1756, 1
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1757, i8* %1758, align 1, !tbaa !2446
  %1759 = xor i64 1, %1742
  %1760 = trunc i64 %1759 to i32
  %1761 = xor i32 %1760, %1746
  %1762 = lshr i32 %1761, 4
  %1763 = trunc i32 %1762 to i8
  %1764 = and i8 %1763, 1
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1764, i8* %1765, align 1, !tbaa !2447
  %1766 = icmp eq i32 %1746, 0
  %1767 = zext i1 %1766 to i8
  %1768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1767, i8* %1768, align 1, !tbaa !2448
  %1769 = lshr i32 %1746, 31
  %1770 = trunc i32 %1769 to i8
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1770, i8* %1771, align 1, !tbaa !2449
  %1772 = lshr i32 %1745, 31
  %1773 = xor i32 %1769, %1772
  %1774 = add nuw nsw i32 %1773, %1769
  %1775 = icmp eq i32 %1774, 2
  %1776 = zext i1 %1775 to i8
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1776, i8* %1777, align 1, !tbaa !2450
  %1778 = load i32, i32* %ECX
  %1779 = zext i32 %1778 to i64
  %1780 = load i64, i64* %PC
  %1781 = add i64 %1780, 3
  store i64 %1781, i64* %PC
  %1782 = shl i64 %1779, 32
  %1783 = ashr exact i64 %1782, 32
  store i64 %1783, i64* %RSI, align 8, !tbaa !2428
  %1784 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1785 = load i64, i64* %RDX
  %1786 = load i64, i64* %RSI
  %1787 = mul i64 %1786, 8
  %1788 = add i64 %1787, %1785
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 5
  store i64 %1790, i64* %PC
  %1791 = inttoptr i64 %1788 to double*
  %1792 = load double, double* %1791
  %1793 = bitcast i8* %1784 to double*
  store double %1792, double* %1793, align 1, !tbaa !2452
  %1794 = getelementptr inbounds i8, i8* %1784, i64 8
  %1795 = bitcast i8* %1794 to double*
  store double 0.000000e+00, double* %1795, align 1, !tbaa !2452
  %1796 = bitcast %union.vec128_t* %XMM0 to i8*
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = bitcast i8* %1796 to i64*
  %1800 = load i64, i64* %1799, align 1
  store i64 %1800, i64* %RDX, align 1, !tbaa !2428
  %1801 = load i64, i64* %RDX
  %1802 = load i64, i64* %RAX
  %1803 = load i64, i64* %PC
  %1804 = add i64 %1803, 3
  store i64 %1804, i64* %PC
  %1805 = xor i64 %1802, %1801
  store i64 %1805, i64* %RDX, align 8, !tbaa !2428
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1806, align 1, !tbaa !2432
  %1807 = trunc i64 %1805 to i32
  %1808 = and i32 %1807, 255
  %1809 = call i32 @llvm.ctpop.i32(i32 %1808) #17
  %1810 = trunc i32 %1809 to i8
  %1811 = and i8 %1810, 1
  %1812 = xor i8 %1811, 1
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1812, i8* %1813, align 1, !tbaa !2446
  %1814 = icmp eq i64 %1805, 0
  %1815 = zext i1 %1814 to i8
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1815, i8* %1816, align 1, !tbaa !2448
  %1817 = lshr i64 %1805, 63
  %1818 = trunc i64 %1817 to i8
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1818, i8* %1819, align 1, !tbaa !2449
  %1820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1820, align 1, !tbaa !2450
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1821, align 1, !tbaa !2447
  %1822 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1823 = load i64, i64* %RDX
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 5
  store i64 %1825, i64* %PC
  %1826 = bitcast i8* %1822 to i64*
  store i64 %1823, i64* %1826, align 1, !tbaa !2428
  %1827 = getelementptr inbounds i8, i8* %1822, i64 8
  %1828 = bitcast i8* %1827 to i64*
  store i64 0, i64* %1828, align 1, !tbaa !2428
  %1829 = load i64, i64* %RBP
  %1830 = sub i64 %1829, 72
  %1831 = bitcast %union.vec128_t* %XMM0 to i8*
  %1832 = load i64, i64* %PC
  %1833 = add i64 %1832, 5
  store i64 %1833, i64* %PC
  %1834 = bitcast i8* %1831 to double*
  %1835 = load double, double* %1834, align 1
  %1836 = inttoptr i64 %1830 to double*
  store double %1835, double* %1836
  %1837 = load i64, i64* %RBP
  %1838 = sub i64 %1837, 24
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 4
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %RDX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 40
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 4
  store i64 %1846, i64* %PC
  %1847 = inttoptr i64 %1844 to i32*
  %1848 = load i32, i32* %1847
  %1849 = sext i32 %1848 to i64
  store i64 %1849, i64* %RSI, align 8, !tbaa !2428
  %1850 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1851 = load i64, i64* %RDX
  %1852 = load i64, i64* %RSI
  %1853 = mul i64 %1852, 8
  %1854 = add i64 %1853, %1851
  %1855 = load i64, i64* %PC
  %1856 = add i64 %1855, 5
  store i64 %1856, i64* %PC
  %1857 = inttoptr i64 %1854 to double*
  %1858 = load double, double* %1857
  %1859 = bitcast i8* %1850 to double*
  store double %1858, double* %1859, align 1, !tbaa !2452
  %1860 = getelementptr inbounds i8, i8* %1850, i64 8
  %1861 = bitcast i8* %1860 to double*
  store double 0.000000e+00, double* %1861, align 1, !tbaa !2452
  %1862 = load i64, i64* %RBP
  %1863 = sub i64 %1862, 80
  %1864 = bitcast %union.vec128_t* %XMM0 to i8*
  %1865 = load i64, i64* %PC
  %1866 = add i64 %1865, 5
  store i64 %1866, i64* %PC
  %1867 = bitcast i8* %1864 to double*
  %1868 = load double, double* %1867, align 1
  %1869 = inttoptr i64 %1863 to double*
  store double %1868, double* %1869
  %1870 = load i64, i64* %RBP
  %1871 = sub i64 %1870, 24
  %1872 = load i64, i64* %PC
  %1873 = add i64 %1872, 4
  store i64 %1873, i64* %PC
  %1874 = inttoptr i64 %1871 to i64*
  %1875 = load i64, i64* %1874
  store i64 %1875, i64* %RDX, align 8, !tbaa !2428
  %1876 = load i64, i64* %RBP
  %1877 = sub i64 %1876, 40
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 3
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1877 to i32*
  %1881 = load i32, i32* %1880
  %1882 = zext i32 %1881 to i64
  store i64 %1882, i64* %RCX, align 8, !tbaa !2428
  %1883 = load i64, i64* %RCX
  %1884 = load i64, i64* %PC
  %1885 = add i64 %1884, 3
  store i64 %1885, i64* %PC
  %1886 = trunc i64 %1883 to i32
  %1887 = add i32 1, %1886
  %1888 = zext i32 %1887 to i64
  store i64 %1888, i64* %RCX, align 8, !tbaa !2428
  %1889 = icmp ult i32 %1887, %1886
  %1890 = icmp ult i32 %1887, 1
  %1891 = or i1 %1889, %1890
  %1892 = zext i1 %1891 to i8
  %1893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1892, i8* %1893, align 1, !tbaa !2432
  %1894 = and i32 %1887, 255
  %1895 = call i32 @llvm.ctpop.i32(i32 %1894) #17
  %1896 = trunc i32 %1895 to i8
  %1897 = and i8 %1896, 1
  %1898 = xor i8 %1897, 1
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1898, i8* %1899, align 1, !tbaa !2446
  %1900 = xor i64 1, %1883
  %1901 = trunc i64 %1900 to i32
  %1902 = xor i32 %1901, %1887
  %1903 = lshr i32 %1902, 4
  %1904 = trunc i32 %1903 to i8
  %1905 = and i8 %1904, 1
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1905, i8* %1906, align 1, !tbaa !2447
  %1907 = icmp eq i32 %1887, 0
  %1908 = zext i1 %1907 to i8
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1908, i8* %1909, align 1, !tbaa !2448
  %1910 = lshr i32 %1887, 31
  %1911 = trunc i32 %1910 to i8
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1911, i8* %1912, align 1, !tbaa !2449
  %1913 = lshr i32 %1886, 31
  %1914 = xor i32 %1910, %1913
  %1915 = add nuw nsw i32 %1914, %1910
  %1916 = icmp eq i32 %1915, 2
  %1917 = zext i1 %1916 to i8
  %1918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1917, i8* %1918, align 1, !tbaa !2450
  %1919 = load i32, i32* %ECX
  %1920 = zext i32 %1919 to i64
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 3
  store i64 %1922, i64* %PC
  %1923 = shl i64 %1920, 32
  %1924 = ashr exact i64 %1923, 32
  store i64 %1924, i64* %RSI, align 8, !tbaa !2428
  %1925 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1926 = load i64, i64* %RDX
  %1927 = load i64, i64* %RSI
  %1928 = mul i64 %1927, 8
  %1929 = add i64 %1928, %1926
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 5
  store i64 %1931, i64* %PC
  %1932 = inttoptr i64 %1929 to double*
  %1933 = load double, double* %1932
  %1934 = bitcast i8* %1925 to double*
  store double %1933, double* %1934, align 1, !tbaa !2452
  %1935 = getelementptr inbounds i8, i8* %1925, i64 8
  %1936 = bitcast i8* %1935 to double*
  store double 0.000000e+00, double* %1936, align 1, !tbaa !2452
  %1937 = bitcast %union.vec128_t* %XMM0 to i8*
  %1938 = load i64, i64* %PC
  %1939 = add i64 %1938, 5
  store i64 %1939, i64* %PC
  %1940 = bitcast i8* %1937 to i64*
  %1941 = load i64, i64* %1940, align 1
  store i64 %1941, i64* %RDX, align 1, !tbaa !2428
  %1942 = load i64, i64* %RDX
  %1943 = load i64, i64* %RAX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 3
  store i64 %1945, i64* %PC
  %1946 = xor i64 %1943, %1942
  store i64 %1946, i64* %RDX, align 8, !tbaa !2428
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1947, align 1, !tbaa !2432
  %1948 = trunc i64 %1946 to i32
  %1949 = and i32 %1948, 255
  %1950 = call i32 @llvm.ctpop.i32(i32 %1949) #17
  %1951 = trunc i32 %1950 to i8
  %1952 = and i8 %1951, 1
  %1953 = xor i8 %1952, 1
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1953, i8* %1954, align 1, !tbaa !2446
  %1955 = icmp eq i64 %1946, 0
  %1956 = zext i1 %1955 to i8
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1956, i8* %1957, align 1, !tbaa !2448
  %1958 = lshr i64 %1946, 63
  %1959 = trunc i64 %1958 to i8
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1959, i8* %1960, align 1, !tbaa !2449
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1961, align 1, !tbaa !2450
  %1962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1962, align 1, !tbaa !2447
  %1963 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1964 = load i64, i64* %RDX
  %1965 = load i64, i64* %PC
  %1966 = add i64 %1965, 5
  store i64 %1966, i64* %PC
  %1967 = bitcast i8* %1963 to i64*
  store i64 %1964, i64* %1967, align 1, !tbaa !2428
  %1968 = getelementptr inbounds i8, i8* %1963, i64 8
  %1969 = bitcast i8* %1968 to i64*
  store i64 0, i64* %1969, align 1, !tbaa !2428
  %1970 = load i64, i64* %RBP
  %1971 = sub i64 %1970, 88
  %1972 = bitcast %union.vec128_t* %XMM0 to i8*
  %1973 = load i64, i64* %PC
  %1974 = add i64 %1973, 5
  store i64 %1974, i64* %PC
  %1975 = bitcast i8* %1972 to double*
  %1976 = load double, double* %1975, align 1
  %1977 = inttoptr i64 %1971 to double*
  store double %1976, double* %1977
  %1978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1979 = load i64, i64* %RBP
  %1980 = sub i64 %1979, 80
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to double*
  %1984 = load double, double* %1983
  %1985 = bitcast i8* %1978 to double*
  store double %1984, double* %1985, align 1, !tbaa !2452
  %1986 = getelementptr inbounds i8, i8* %1978, i64 8
  %1987 = bitcast i8* %1986 to double*
  store double 0.000000e+00, double* %1987, align 1, !tbaa !2452
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 24
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 4
  store i64 %1991, i64* %PC
  %1992 = inttoptr i64 %1989 to i64*
  %1993 = load i64, i64* %1992
  store i64 %1993, i64* %RDX, align 8, !tbaa !2428
  %1994 = load i64, i64* %RBP
  %1995 = sub i64 %1994, 32
  %1996 = load i64, i64* %PC
  %1997 = add i64 %1996, 4
  store i64 %1997, i64* %PC
  %1998 = inttoptr i64 %1995 to i32*
  %1999 = load i32, i32* %1998
  %2000 = sext i32 %1999 to i64
  store i64 %2000, i64* %RSI, align 8, !tbaa !2428
  %2001 = load i64, i64* %RDX
  %2002 = load i64, i64* %RSI
  %2003 = mul i64 %2002, 8
  %2004 = add i64 %2003, %2001
  %2005 = bitcast %union.vec128_t* %XMM0 to i8*
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 5
  store i64 %2007, i64* %PC
  %2008 = bitcast i8* %2005 to double*
  %2009 = load double, double* %2008, align 1
  %2010 = inttoptr i64 %2004 to double*
  store double %2009, double* %2010
  %2011 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2012 = load i64, i64* %RBP
  %2013 = sub i64 %2012, 88
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 5
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2013 to double*
  %2017 = load double, double* %2016
  %2018 = bitcast i8* %2011 to double*
  store double %2017, double* %2018, align 1, !tbaa !2452
  %2019 = getelementptr inbounds i8, i8* %2011, i64 8
  %2020 = bitcast i8* %2019 to double*
  store double 0.000000e+00, double* %2020, align 1, !tbaa !2452
  %2021 = load i64, i64* %RBP
  %2022 = sub i64 %2021, 24
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 4
  store i64 %2024, i64* %PC
  %2025 = inttoptr i64 %2022 to i64*
  %2026 = load i64, i64* %2025
  store i64 %2026, i64* %RDX, align 8, !tbaa !2428
  %2027 = load i64, i64* %RBP
  %2028 = sub i64 %2027, 32
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 3
  store i64 %2030, i64* %PC
  %2031 = inttoptr i64 %2028 to i32*
  %2032 = load i32, i32* %2031
  %2033 = zext i32 %2032 to i64
  store i64 %2033, i64* %RCX, align 8, !tbaa !2428
  %2034 = load i64, i64* %RCX
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 3
  store i64 %2036, i64* %PC
  %2037 = trunc i64 %2034 to i32
  %2038 = add i32 1, %2037
  %2039 = zext i32 %2038 to i64
  store i64 %2039, i64* %RCX, align 8, !tbaa !2428
  %2040 = icmp ult i32 %2038, %2037
  %2041 = icmp ult i32 %2038, 1
  %2042 = or i1 %2040, %2041
  %2043 = zext i1 %2042 to i8
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2043, i8* %2044, align 1, !tbaa !2432
  %2045 = and i32 %2038, 255
  %2046 = call i32 @llvm.ctpop.i32(i32 %2045) #17
  %2047 = trunc i32 %2046 to i8
  %2048 = and i8 %2047, 1
  %2049 = xor i8 %2048, 1
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2049, i8* %2050, align 1, !tbaa !2446
  %2051 = xor i64 1, %2034
  %2052 = trunc i64 %2051 to i32
  %2053 = xor i32 %2052, %2038
  %2054 = lshr i32 %2053, 4
  %2055 = trunc i32 %2054 to i8
  %2056 = and i8 %2055, 1
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2056, i8* %2057, align 1, !tbaa !2447
  %2058 = icmp eq i32 %2038, 0
  %2059 = zext i1 %2058 to i8
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2059, i8* %2060, align 1, !tbaa !2448
  %2061 = lshr i32 %2038, 31
  %2062 = trunc i32 %2061 to i8
  %2063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2062, i8* %2063, align 1, !tbaa !2449
  %2064 = lshr i32 %2037, 31
  %2065 = xor i32 %2061, %2064
  %2066 = add nuw nsw i32 %2065, %2061
  %2067 = icmp eq i32 %2066, 2
  %2068 = zext i1 %2067 to i8
  %2069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2068, i8* %2069, align 1, !tbaa !2450
  %2070 = load i32, i32* %ECX
  %2071 = zext i32 %2070 to i64
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 3
  store i64 %2073, i64* %PC
  %2074 = shl i64 %2071, 32
  %2075 = ashr exact i64 %2074, 32
  store i64 %2075, i64* %RSI, align 8, !tbaa !2428
  %2076 = load i64, i64* %RDX
  %2077 = load i64, i64* %RSI
  %2078 = mul i64 %2077, 8
  %2079 = add i64 %2078, %2076
  %2080 = bitcast %union.vec128_t* %XMM0 to i8*
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 5
  store i64 %2082, i64* %PC
  %2083 = bitcast i8* %2080 to double*
  %2084 = load double, double* %2083, align 1
  %2085 = inttoptr i64 %2079 to double*
  store double %2084, double* %2085
  %2086 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2087 = load i64, i64* %RBP
  %2088 = sub i64 %2087, 64
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  store i64 %2090, i64* %PC
  %2091 = inttoptr i64 %2088 to double*
  %2092 = load double, double* %2091
  %2093 = bitcast i8* %2086 to double*
  store double %2092, double* %2093, align 1, !tbaa !2452
  %2094 = getelementptr inbounds i8, i8* %2086, i64 8
  %2095 = bitcast i8* %2094 to double*
  store double 0.000000e+00, double* %2095, align 1, !tbaa !2452
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 24
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 4
  store i64 %2099, i64* %PC
  %2100 = inttoptr i64 %2097 to i64*
  %2101 = load i64, i64* %2100
  store i64 %2101, i64* %RDX, align 8, !tbaa !2428
  %2102 = load i64, i64* %RBP
  %2103 = sub i64 %2102, 40
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 4
  store i64 %2105, i64* %PC
  %2106 = inttoptr i64 %2103 to i32*
  %2107 = load i32, i32* %2106
  %2108 = sext i32 %2107 to i64
  store i64 %2108, i64* %RSI, align 8, !tbaa !2428
  %2109 = load i64, i64* %RDX
  %2110 = load i64, i64* %RSI
  %2111 = mul i64 %2110, 8
  %2112 = add i64 %2111, %2109
  %2113 = bitcast %union.vec128_t* %XMM0 to i8*
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 5
  store i64 %2115, i64* %PC
  %2116 = bitcast i8* %2113 to double*
  %2117 = load double, double* %2116, align 1
  %2118 = inttoptr i64 %2112 to double*
  store double %2117, double* %2118
  %2119 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2120 = load i64, i64* %RBP
  %2121 = sub i64 %2120, 72
  %2122 = load i64, i64* %PC
  %2123 = add i64 %2122, 5
  store i64 %2123, i64* %PC
  %2124 = inttoptr i64 %2121 to double*
  %2125 = load double, double* %2124
  %2126 = bitcast i8* %2119 to double*
  store double %2125, double* %2126, align 1, !tbaa !2452
  %2127 = getelementptr inbounds i8, i8* %2119, i64 8
  %2128 = bitcast i8* %2127 to double*
  store double 0.000000e+00, double* %2128, align 1, !tbaa !2452
  %2129 = load i64, i64* %RBP
  %2130 = sub i64 %2129, 24
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 4
  store i64 %2132, i64* %PC
  %2133 = inttoptr i64 %2130 to i64*
  %2134 = load i64, i64* %2133
  store i64 %2134, i64* %RDX, align 8, !tbaa !2428
  %2135 = load i64, i64* %RBP
  %2136 = sub i64 %2135, 40
  %2137 = load i64, i64* %PC
  %2138 = add i64 %2137, 3
  store i64 %2138, i64* %PC
  %2139 = inttoptr i64 %2136 to i32*
  %2140 = load i32, i32* %2139
  %2141 = zext i32 %2140 to i64
  store i64 %2141, i64* %RCX, align 8, !tbaa !2428
  %2142 = load i64, i64* %RCX
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 3
  store i64 %2144, i64* %PC
  %2145 = trunc i64 %2142 to i32
  %2146 = add i32 1, %2145
  %2147 = zext i32 %2146 to i64
  store i64 %2147, i64* %RCX, align 8, !tbaa !2428
  %2148 = icmp ult i32 %2146, %2145
  %2149 = icmp ult i32 %2146, 1
  %2150 = or i1 %2148, %2149
  %2151 = zext i1 %2150 to i8
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2151, i8* %2152, align 1, !tbaa !2432
  %2153 = and i32 %2146, 255
  %2154 = call i32 @llvm.ctpop.i32(i32 %2153) #17
  %2155 = trunc i32 %2154 to i8
  %2156 = and i8 %2155, 1
  %2157 = xor i8 %2156, 1
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2157, i8* %2158, align 1, !tbaa !2446
  %2159 = xor i64 1, %2142
  %2160 = trunc i64 %2159 to i32
  %2161 = xor i32 %2160, %2146
  %2162 = lshr i32 %2161, 4
  %2163 = trunc i32 %2162 to i8
  %2164 = and i8 %2163, 1
  %2165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2164, i8* %2165, align 1, !tbaa !2447
  %2166 = icmp eq i32 %2146, 0
  %2167 = zext i1 %2166 to i8
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2167, i8* %2168, align 1, !tbaa !2448
  %2169 = lshr i32 %2146, 31
  %2170 = trunc i32 %2169 to i8
  %2171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2170, i8* %2171, align 1, !tbaa !2449
  %2172 = lshr i32 %2145, 31
  %2173 = xor i32 %2169, %2172
  %2174 = add nuw nsw i32 %2173, %2169
  %2175 = icmp eq i32 %2174, 2
  %2176 = zext i1 %2175 to i8
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2176, i8* %2177, align 1, !tbaa !2450
  %2178 = load i32, i32* %ECX
  %2179 = zext i32 %2178 to i64
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 3
  store i64 %2181, i64* %PC
  %2182 = shl i64 %2179, 32
  %2183 = ashr exact i64 %2182, 32
  store i64 %2183, i64* %RSI, align 8, !tbaa !2428
  %2184 = load i64, i64* %RDX
  %2185 = load i64, i64* %RSI
  %2186 = mul i64 %2185, 8
  %2187 = add i64 %2186, %2184
  %2188 = bitcast %union.vec128_t* %XMM0 to i8*
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  store i64 %2190, i64* %PC
  %2191 = bitcast i8* %2188 to double*
  %2192 = load double, double* %2191, align 1
  %2193 = inttoptr i64 %2187 to double*
  store double %2192, double* %2193
  %2194 = load i64, i64* %RBP
  %2195 = sub i64 %2194, 52
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 3
  store i64 %2197, i64* %PC
  %2198 = inttoptr i64 %2195 to i32*
  %2199 = load i32, i32* %2198
  %2200 = zext i32 %2199 to i64
  store i64 %2200, i64* %RCX, align 8, !tbaa !2428
  %2201 = load i64, i64* %RCX
  %2202 = load i64, i64* %RBP
  %2203 = sub i64 %2202, 32
  %2204 = load i64, i64* %PC
  %2205 = add i64 %2204, 3
  store i64 %2205, i64* %PC
  %2206 = trunc i64 %2201 to i32
  %2207 = inttoptr i64 %2203 to i32*
  %2208 = load i32, i32* %2207
  %2209 = add i32 %2208, %2206
  %2210 = zext i32 %2209 to i64
  store i64 %2210, i64* %RCX, align 8, !tbaa !2428
  %2211 = icmp ult i32 %2209, %2206
  %2212 = icmp ult i32 %2209, %2208
  %2213 = or i1 %2211, %2212
  %2214 = zext i1 %2213 to i8
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2214, i8* %2215, align 1, !tbaa !2432
  %2216 = and i32 %2209, 255
  %2217 = call i32 @llvm.ctpop.i32(i32 %2216) #17
  %2218 = trunc i32 %2217 to i8
  %2219 = and i8 %2218, 1
  %2220 = xor i8 %2219, 1
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2220, i8* %2221, align 1, !tbaa !2446
  %2222 = xor i32 %2208, %2206
  %2223 = xor i32 %2222, %2209
  %2224 = lshr i32 %2223, 4
  %2225 = trunc i32 %2224 to i8
  %2226 = and i8 %2225, 1
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2226, i8* %2227, align 1, !tbaa !2447
  %2228 = icmp eq i32 %2209, 0
  %2229 = zext i1 %2228 to i8
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2229, i8* %2230, align 1, !tbaa !2448
  %2231 = lshr i32 %2209, 31
  %2232 = trunc i32 %2231 to i8
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2232, i8* %2233, align 1, !tbaa !2449
  %2234 = lshr i32 %2206, 31
  %2235 = lshr i32 %2208, 31
  %2236 = xor i32 %2231, %2234
  %2237 = xor i32 %2231, %2235
  %2238 = add nuw nsw i32 %2236, %2237
  %2239 = icmp eq i32 %2238, 2
  %2240 = zext i1 %2239 to i8
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2240, i8* %2241, align 1, !tbaa !2450
  %2242 = load i64, i64* %RBP
  %2243 = sub i64 %2242, 32
  %2244 = load i32, i32* %ECX
  %2245 = zext i32 %2244 to i64
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 3
  store i64 %2247, i64* %PC
  %2248 = inttoptr i64 %2243 to i32*
  store i32 %2244, i32* %2248
  %2249 = load i64, i64* %RBP
  %2250 = sub i64 %2249, 52
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 3
  store i64 %2252, i64* %PC
  %2253 = inttoptr i64 %2250 to i32*
  %2254 = load i32, i32* %2253
  %2255 = zext i32 %2254 to i64
  store i64 %2255, i64* %RCX, align 8, !tbaa !2428
  %2256 = load i64, i64* %RCX
  %2257 = load i64, i64* %RBP
  %2258 = sub i64 %2257, 40
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 3
  store i64 %2260, i64* %PC
  %2261 = trunc i64 %2256 to i32
  %2262 = inttoptr i64 %2258 to i32*
  %2263 = load i32, i32* %2262
  %2264 = add i32 %2263, %2261
  %2265 = zext i32 %2264 to i64
  store i64 %2265, i64* %RCX, align 8, !tbaa !2428
  %2266 = icmp ult i32 %2264, %2261
  %2267 = icmp ult i32 %2264, %2263
  %2268 = or i1 %2266, %2267
  %2269 = zext i1 %2268 to i8
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2269, i8* %2270, align 1, !tbaa !2432
  %2271 = and i32 %2264, 255
  %2272 = call i32 @llvm.ctpop.i32(i32 %2271) #17
  %2273 = trunc i32 %2272 to i8
  %2274 = and i8 %2273, 1
  %2275 = xor i8 %2274, 1
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2275, i8* %2276, align 1, !tbaa !2446
  %2277 = xor i32 %2263, %2261
  %2278 = xor i32 %2277, %2264
  %2279 = lshr i32 %2278, 4
  %2280 = trunc i32 %2279 to i8
  %2281 = and i8 %2280, 1
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2281, i8* %2282, align 1, !tbaa !2447
  %2283 = icmp eq i32 %2264, 0
  %2284 = zext i1 %2283 to i8
  %2285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2284, i8* %2285, align 1, !tbaa !2448
  %2286 = lshr i32 %2264, 31
  %2287 = trunc i32 %2286 to i8
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2287, i8* %2288, align 1, !tbaa !2449
  %2289 = lshr i32 %2261, 31
  %2290 = lshr i32 %2263, 31
  %2291 = xor i32 %2286, %2289
  %2292 = xor i32 %2286, %2290
  %2293 = add nuw nsw i32 %2291, %2292
  %2294 = icmp eq i32 %2293, 2
  %2295 = zext i1 %2294 to i8
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2295, i8* %2296, align 1, !tbaa !2450
  %2297 = load i64, i64* %RBP
  %2298 = sub i64 %2297, 40
  %2299 = load i32, i32* %ECX
  %2300 = zext i32 %2299 to i64
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 3
  store i64 %2302, i64* %PC
  %2303 = inttoptr i64 %2298 to i32*
  store i32 %2299, i32* %2303
  %2304 = load i64, i64* %RBP
  %2305 = sub i64 %2304, 24
  %2306 = load i64, i64* %PC
  %2307 = add i64 %2306, 4
  store i64 %2307, i64* %PC
  %2308 = inttoptr i64 %2305 to i64*
  %2309 = load i64, i64* %2308
  store i64 %2309, i64* %RDX, align 8, !tbaa !2428
  %2310 = load i64, i64* %RBP
  %2311 = sub i64 %2310, 32
  %2312 = load i64, i64* %PC
  %2313 = add i64 %2312, 4
  store i64 %2313, i64* %PC
  %2314 = inttoptr i64 %2311 to i32*
  %2315 = load i32, i32* %2314
  %2316 = sext i32 %2315 to i64
  store i64 %2316, i64* %RSI, align 8, !tbaa !2428
  %2317 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2318 = load i64, i64* %RDX
  %2319 = load i64, i64* %RSI
  %2320 = mul i64 %2319, 8
  %2321 = add i64 %2320, %2318
  %2322 = load i64, i64* %PC
  %2323 = add i64 %2322, 5
  store i64 %2323, i64* %PC
  %2324 = inttoptr i64 %2321 to double*
  %2325 = load double, double* %2324
  %2326 = bitcast i8* %2317 to double*
  store double %2325, double* %2326, align 1, !tbaa !2452
  %2327 = getelementptr inbounds i8, i8* %2317, i64 8
  %2328 = bitcast i8* %2327 to double*
  store double 0.000000e+00, double* %2328, align 1, !tbaa !2452
  %2329 = load i64, i64* %RBP
  %2330 = sub i64 %2329, 64
  %2331 = bitcast %union.vec128_t* %XMM0 to i8*
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 5
  store i64 %2333, i64* %PC
  %2334 = bitcast i8* %2331 to double*
  %2335 = load double, double* %2334, align 1
  %2336 = inttoptr i64 %2330 to double*
  store double %2335, double* %2336
  %2337 = load i64, i64* %RBP
  %2338 = sub i64 %2337, 24
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 4
  store i64 %2340, i64* %PC
  %2341 = inttoptr i64 %2338 to i64*
  %2342 = load i64, i64* %2341
  store i64 %2342, i64* %RDX, align 8, !tbaa !2428
  %2343 = load i64, i64* %RBP
  %2344 = sub i64 %2343, 32
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 3
  store i64 %2346, i64* %PC
  %2347 = inttoptr i64 %2344 to i32*
  %2348 = load i32, i32* %2347
  %2349 = zext i32 %2348 to i64
  store i64 %2349, i64* %RCX, align 8, !tbaa !2428
  %2350 = load i64, i64* %RCX
  %2351 = load i64, i64* %PC
  %2352 = add i64 %2351, 3
  store i64 %2352, i64* %PC
  %2353 = trunc i64 %2350 to i32
  %2354 = add i32 1, %2353
  %2355 = zext i32 %2354 to i64
  store i64 %2355, i64* %RCX, align 8, !tbaa !2428
  %2356 = icmp ult i32 %2354, %2353
  %2357 = icmp ult i32 %2354, 1
  %2358 = or i1 %2356, %2357
  %2359 = zext i1 %2358 to i8
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2359, i8* %2360, align 1, !tbaa !2432
  %2361 = and i32 %2354, 255
  %2362 = call i32 @llvm.ctpop.i32(i32 %2361) #17
  %2363 = trunc i32 %2362 to i8
  %2364 = and i8 %2363, 1
  %2365 = xor i8 %2364, 1
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2365, i8* %2366, align 1, !tbaa !2446
  %2367 = xor i64 1, %2350
  %2368 = trunc i64 %2367 to i32
  %2369 = xor i32 %2368, %2354
  %2370 = lshr i32 %2369, 4
  %2371 = trunc i32 %2370 to i8
  %2372 = and i8 %2371, 1
  %2373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2372, i8* %2373, align 1, !tbaa !2447
  %2374 = icmp eq i32 %2354, 0
  %2375 = zext i1 %2374 to i8
  %2376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2375, i8* %2376, align 1, !tbaa !2448
  %2377 = lshr i32 %2354, 31
  %2378 = trunc i32 %2377 to i8
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2378, i8* %2379, align 1, !tbaa !2449
  %2380 = lshr i32 %2353, 31
  %2381 = xor i32 %2377, %2380
  %2382 = add nuw nsw i32 %2381, %2377
  %2383 = icmp eq i32 %2382, 2
  %2384 = zext i1 %2383 to i8
  %2385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2384, i8* %2385, align 1, !tbaa !2450
  %2386 = load i32, i32* %ECX
  %2387 = zext i32 %2386 to i64
  %2388 = load i64, i64* %PC
  %2389 = add i64 %2388, 3
  store i64 %2389, i64* %PC
  %2390 = shl i64 %2387, 32
  %2391 = ashr exact i64 %2390, 32
  store i64 %2391, i64* %RSI, align 8, !tbaa !2428
  %2392 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2393 = load i64, i64* %RDX
  %2394 = load i64, i64* %RSI
  %2395 = mul i64 %2394, 8
  %2396 = add i64 %2395, %2393
  %2397 = load i64, i64* %PC
  %2398 = add i64 %2397, 5
  store i64 %2398, i64* %PC
  %2399 = inttoptr i64 %2396 to double*
  %2400 = load double, double* %2399
  %2401 = bitcast i8* %2392 to double*
  store double %2400, double* %2401, align 1, !tbaa !2452
  %2402 = getelementptr inbounds i8, i8* %2392, i64 8
  %2403 = bitcast i8* %2402 to double*
  store double 0.000000e+00, double* %2403, align 1, !tbaa !2452
  %2404 = bitcast %union.vec128_t* %XMM0 to i8*
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 5
  store i64 %2406, i64* %PC
  %2407 = bitcast i8* %2404 to i64*
  %2408 = load i64, i64* %2407, align 1
  store i64 %2408, i64* %RDX, align 1, !tbaa !2428
  %2409 = load i64, i64* %RDX
  %2410 = load i64, i64* %RAX
  %2411 = load i64, i64* %PC
  %2412 = add i64 %2411, 3
  store i64 %2412, i64* %PC
  %2413 = xor i64 %2410, %2409
  store i64 %2413, i64* %RDX, align 8, !tbaa !2428
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2414, align 1, !tbaa !2432
  %2415 = trunc i64 %2413 to i32
  %2416 = and i32 %2415, 255
  %2417 = call i32 @llvm.ctpop.i32(i32 %2416) #17
  %2418 = trunc i32 %2417 to i8
  %2419 = and i8 %2418, 1
  %2420 = xor i8 %2419, 1
  %2421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2420, i8* %2421, align 1, !tbaa !2446
  %2422 = icmp eq i64 %2413, 0
  %2423 = zext i1 %2422 to i8
  %2424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2423, i8* %2424, align 1, !tbaa !2448
  %2425 = lshr i64 %2413, 63
  %2426 = trunc i64 %2425 to i8
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2426, i8* %2427, align 1, !tbaa !2449
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2428, align 1, !tbaa !2450
  %2429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2429, align 1, !tbaa !2447
  %2430 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2431 = load i64, i64* %RDX
  %2432 = load i64, i64* %PC
  %2433 = add i64 %2432, 5
  store i64 %2433, i64* %PC
  %2434 = bitcast i8* %2430 to i64*
  store i64 %2431, i64* %2434, align 1, !tbaa !2428
  %2435 = getelementptr inbounds i8, i8* %2430, i64 8
  %2436 = bitcast i8* %2435 to i64*
  store i64 0, i64* %2436, align 1, !tbaa !2428
  %2437 = load i64, i64* %RBP
  %2438 = sub i64 %2437, 72
  %2439 = bitcast %union.vec128_t* %XMM0 to i8*
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 5
  store i64 %2441, i64* %PC
  %2442 = bitcast i8* %2439 to double*
  %2443 = load double, double* %2442, align 1
  %2444 = inttoptr i64 %2438 to double*
  store double %2443, double* %2444
  %2445 = load i64, i64* %RBP
  %2446 = sub i64 %2445, 24
  %2447 = load i64, i64* %PC
  %2448 = add i64 %2447, 4
  store i64 %2448, i64* %PC
  %2449 = inttoptr i64 %2446 to i64*
  %2450 = load i64, i64* %2449
  store i64 %2450, i64* %RDX, align 8, !tbaa !2428
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 40
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 4
  store i64 %2454, i64* %PC
  %2455 = inttoptr i64 %2452 to i32*
  %2456 = load i32, i32* %2455
  %2457 = sext i32 %2456 to i64
  store i64 %2457, i64* %RSI, align 8, !tbaa !2428
  %2458 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2459 = load i64, i64* %RDX
  %2460 = load i64, i64* %RSI
  %2461 = mul i64 %2460, 8
  %2462 = add i64 %2461, %2459
  %2463 = load i64, i64* %PC
  %2464 = add i64 %2463, 5
  store i64 %2464, i64* %PC
  %2465 = inttoptr i64 %2462 to double*
  %2466 = load double, double* %2465
  %2467 = bitcast i8* %2458 to double*
  store double %2466, double* %2467, align 1, !tbaa !2452
  %2468 = getelementptr inbounds i8, i8* %2458, i64 8
  %2469 = bitcast i8* %2468 to double*
  store double 0.000000e+00, double* %2469, align 1, !tbaa !2452
  %2470 = load i64, i64* %RBP
  %2471 = sub i64 %2470, 80
  %2472 = bitcast %union.vec128_t* %XMM0 to i8*
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 5
  store i64 %2474, i64* %PC
  %2475 = bitcast i8* %2472 to double*
  %2476 = load double, double* %2475, align 1
  %2477 = inttoptr i64 %2471 to double*
  store double %2476, double* %2477
  %2478 = load i64, i64* %RBP
  %2479 = sub i64 %2478, 24
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 4
  store i64 %2481, i64* %PC
  %2482 = inttoptr i64 %2479 to i64*
  %2483 = load i64, i64* %2482
  store i64 %2483, i64* %RDX, align 8, !tbaa !2428
  %2484 = load i64, i64* %RBP
  %2485 = sub i64 %2484, 40
  %2486 = load i64, i64* %PC
  %2487 = add i64 %2486, 3
  store i64 %2487, i64* %PC
  %2488 = inttoptr i64 %2485 to i32*
  %2489 = load i32, i32* %2488
  %2490 = zext i32 %2489 to i64
  store i64 %2490, i64* %RCX, align 8, !tbaa !2428
  %2491 = load i64, i64* %RCX
  %2492 = load i64, i64* %PC
  %2493 = add i64 %2492, 3
  store i64 %2493, i64* %PC
  %2494 = trunc i64 %2491 to i32
  %2495 = add i32 1, %2494
  %2496 = zext i32 %2495 to i64
  store i64 %2496, i64* %RCX, align 8, !tbaa !2428
  %2497 = icmp ult i32 %2495, %2494
  %2498 = icmp ult i32 %2495, 1
  %2499 = or i1 %2497, %2498
  %2500 = zext i1 %2499 to i8
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2500, i8* %2501, align 1, !tbaa !2432
  %2502 = and i32 %2495, 255
  %2503 = call i32 @llvm.ctpop.i32(i32 %2502) #17
  %2504 = trunc i32 %2503 to i8
  %2505 = and i8 %2504, 1
  %2506 = xor i8 %2505, 1
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2506, i8* %2507, align 1, !tbaa !2446
  %2508 = xor i64 1, %2491
  %2509 = trunc i64 %2508 to i32
  %2510 = xor i32 %2509, %2495
  %2511 = lshr i32 %2510, 4
  %2512 = trunc i32 %2511 to i8
  %2513 = and i8 %2512, 1
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2513, i8* %2514, align 1, !tbaa !2447
  %2515 = icmp eq i32 %2495, 0
  %2516 = zext i1 %2515 to i8
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2516, i8* %2517, align 1, !tbaa !2448
  %2518 = lshr i32 %2495, 31
  %2519 = trunc i32 %2518 to i8
  %2520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2519, i8* %2520, align 1, !tbaa !2449
  %2521 = lshr i32 %2494, 31
  %2522 = xor i32 %2518, %2521
  %2523 = add nuw nsw i32 %2522, %2518
  %2524 = icmp eq i32 %2523, 2
  %2525 = zext i1 %2524 to i8
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2525, i8* %2526, align 1, !tbaa !2450
  %2527 = load i32, i32* %ECX
  %2528 = zext i32 %2527 to i64
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 3
  store i64 %2530, i64* %PC
  %2531 = shl i64 %2528, 32
  %2532 = ashr exact i64 %2531, 32
  store i64 %2532, i64* %RSI, align 8, !tbaa !2428
  %2533 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2534 = load i64, i64* %RDX
  %2535 = load i64, i64* %RSI
  %2536 = mul i64 %2535, 8
  %2537 = add i64 %2536, %2534
  %2538 = load i64, i64* %PC
  %2539 = add i64 %2538, 5
  store i64 %2539, i64* %PC
  %2540 = inttoptr i64 %2537 to double*
  %2541 = load double, double* %2540
  %2542 = bitcast i8* %2533 to double*
  store double %2541, double* %2542, align 1, !tbaa !2452
  %2543 = getelementptr inbounds i8, i8* %2533, i64 8
  %2544 = bitcast i8* %2543 to double*
  store double 0.000000e+00, double* %2544, align 1, !tbaa !2452
  %2545 = bitcast %union.vec128_t* %XMM0 to i8*
  %2546 = load i64, i64* %PC
  %2547 = add i64 %2546, 5
  store i64 %2547, i64* %PC
  %2548 = bitcast i8* %2545 to i64*
  %2549 = load i64, i64* %2548, align 1
  store i64 %2549, i64* %RDX, align 1, !tbaa !2428
  %2550 = load i64, i64* %RDX
  %2551 = load i64, i64* %RAX
  %2552 = load i64, i64* %PC
  %2553 = add i64 %2552, 3
  store i64 %2553, i64* %PC
  %2554 = xor i64 %2551, %2550
  store i64 %2554, i64* %RDX, align 8, !tbaa !2428
  %2555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2555, align 1, !tbaa !2432
  %2556 = trunc i64 %2554 to i32
  %2557 = and i32 %2556, 255
  %2558 = call i32 @llvm.ctpop.i32(i32 %2557) #17
  %2559 = trunc i32 %2558 to i8
  %2560 = and i8 %2559, 1
  %2561 = xor i8 %2560, 1
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2561, i8* %2562, align 1, !tbaa !2446
  %2563 = icmp eq i64 %2554, 0
  %2564 = zext i1 %2563 to i8
  %2565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2564, i8* %2565, align 1, !tbaa !2448
  %2566 = lshr i64 %2554, 63
  %2567 = trunc i64 %2566 to i8
  %2568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2567, i8* %2568, align 1, !tbaa !2449
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2569, align 1, !tbaa !2450
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2570, align 1, !tbaa !2447
  %2571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2572 = load i64, i64* %RDX
  %2573 = load i64, i64* %PC
  %2574 = add i64 %2573, 5
  store i64 %2574, i64* %PC
  %2575 = bitcast i8* %2571 to i64*
  store i64 %2572, i64* %2575, align 1, !tbaa !2428
  %2576 = getelementptr inbounds i8, i8* %2571, i64 8
  %2577 = bitcast i8* %2576 to i64*
  store i64 0, i64* %2577, align 1, !tbaa !2428
  %2578 = load i64, i64* %RBP
  %2579 = sub i64 %2578, 88
  %2580 = bitcast %union.vec128_t* %XMM0 to i8*
  %2581 = load i64, i64* %PC
  %2582 = add i64 %2581, 5
  store i64 %2582, i64* %PC
  %2583 = bitcast i8* %2580 to double*
  %2584 = load double, double* %2583, align 1
  %2585 = inttoptr i64 %2579 to double*
  store double %2584, double* %2585
  %2586 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2587 = load i64, i64* %RBP
  %2588 = sub i64 %2587, 80
  %2589 = load i64, i64* %PC
  %2590 = add i64 %2589, 5
  store i64 %2590, i64* %PC
  %2591 = inttoptr i64 %2588 to double*
  %2592 = load double, double* %2591
  %2593 = bitcast i8* %2586 to double*
  store double %2592, double* %2593, align 1, !tbaa !2452
  %2594 = getelementptr inbounds i8, i8* %2586, i64 8
  %2595 = bitcast i8* %2594 to double*
  store double 0.000000e+00, double* %2595, align 1, !tbaa !2452
  %2596 = load i64, i64* %RBP
  %2597 = sub i64 %2596, 24
  %2598 = load i64, i64* %PC
  %2599 = add i64 %2598, 4
  store i64 %2599, i64* %PC
  %2600 = inttoptr i64 %2597 to i64*
  %2601 = load i64, i64* %2600
  store i64 %2601, i64* %RAX, align 8, !tbaa !2428
  %2602 = load i64, i64* %RBP
  %2603 = sub i64 %2602, 32
  %2604 = load i64, i64* %PC
  %2605 = add i64 %2604, 4
  store i64 %2605, i64* %PC
  %2606 = inttoptr i64 %2603 to i32*
  %2607 = load i32, i32* %2606
  %2608 = sext i32 %2607 to i64
  store i64 %2608, i64* %RDX, align 8, !tbaa !2428
  %2609 = load i64, i64* %RAX
  %2610 = load i64, i64* %RDX
  %2611 = mul i64 %2610, 8
  %2612 = add i64 %2611, %2609
  %2613 = bitcast %union.vec128_t* %XMM0 to i8*
  %2614 = load i64, i64* %PC
  %2615 = add i64 %2614, 5
  store i64 %2615, i64* %PC
  %2616 = bitcast i8* %2613 to double*
  %2617 = load double, double* %2616, align 1
  %2618 = inttoptr i64 %2612 to double*
  store double %2617, double* %2618
  %2619 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2620 = load i64, i64* %RBP
  %2621 = sub i64 %2620, 88
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 5
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2621 to double*
  %2625 = load double, double* %2624
  %2626 = bitcast i8* %2619 to double*
  store double %2625, double* %2626, align 1, !tbaa !2452
  %2627 = getelementptr inbounds i8, i8* %2619, i64 8
  %2628 = bitcast i8* %2627 to double*
  store double 0.000000e+00, double* %2628, align 1, !tbaa !2452
  %2629 = load i64, i64* %RBP
  %2630 = sub i64 %2629, 24
  %2631 = load i64, i64* %PC
  %2632 = add i64 %2631, 4
  store i64 %2632, i64* %PC
  %2633 = inttoptr i64 %2630 to i64*
  %2634 = load i64, i64* %2633
  store i64 %2634, i64* %RAX, align 8, !tbaa !2428
  %2635 = load i64, i64* %RBP
  %2636 = sub i64 %2635, 32
  %2637 = load i64, i64* %PC
  %2638 = add i64 %2637, 3
  store i64 %2638, i64* %PC
  %2639 = inttoptr i64 %2636 to i32*
  %2640 = load i32, i32* %2639
  %2641 = zext i32 %2640 to i64
  store i64 %2641, i64* %RCX, align 8, !tbaa !2428
  %2642 = load i64, i64* %RCX
  %2643 = load i64, i64* %PC
  %2644 = add i64 %2643, 3
  store i64 %2644, i64* %PC
  %2645 = trunc i64 %2642 to i32
  %2646 = add i32 1, %2645
  %2647 = zext i32 %2646 to i64
  store i64 %2647, i64* %RCX, align 8, !tbaa !2428
  %2648 = icmp ult i32 %2646, %2645
  %2649 = icmp ult i32 %2646, 1
  %2650 = or i1 %2648, %2649
  %2651 = zext i1 %2650 to i8
  %2652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2651, i8* %2652, align 1, !tbaa !2432
  %2653 = and i32 %2646, 255
  %2654 = call i32 @llvm.ctpop.i32(i32 %2653) #17
  %2655 = trunc i32 %2654 to i8
  %2656 = and i8 %2655, 1
  %2657 = xor i8 %2656, 1
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2657, i8* %2658, align 1, !tbaa !2446
  %2659 = xor i64 1, %2642
  %2660 = trunc i64 %2659 to i32
  %2661 = xor i32 %2660, %2646
  %2662 = lshr i32 %2661, 4
  %2663 = trunc i32 %2662 to i8
  %2664 = and i8 %2663, 1
  %2665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2664, i8* %2665, align 1, !tbaa !2447
  %2666 = icmp eq i32 %2646, 0
  %2667 = zext i1 %2666 to i8
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2667, i8* %2668, align 1, !tbaa !2448
  %2669 = lshr i32 %2646, 31
  %2670 = trunc i32 %2669 to i8
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2670, i8* %2671, align 1, !tbaa !2449
  %2672 = lshr i32 %2645, 31
  %2673 = xor i32 %2669, %2672
  %2674 = add nuw nsw i32 %2673, %2669
  %2675 = icmp eq i32 %2674, 2
  %2676 = zext i1 %2675 to i8
  %2677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2676, i8* %2677, align 1, !tbaa !2450
  %2678 = load i32, i32* %ECX
  %2679 = zext i32 %2678 to i64
  %2680 = load i64, i64* %PC
  %2681 = add i64 %2680, 3
  store i64 %2681, i64* %PC
  %2682 = shl i64 %2679, 32
  %2683 = ashr exact i64 %2682, 32
  store i64 %2683, i64* %RDX, align 8, !tbaa !2428
  %2684 = load i64, i64* %RAX
  %2685 = load i64, i64* %RDX
  %2686 = mul i64 %2685, 8
  %2687 = add i64 %2686, %2684
  %2688 = bitcast %union.vec128_t* %XMM0 to i8*
  %2689 = load i64, i64* %PC
  %2690 = add i64 %2689, 5
  store i64 %2690, i64* %PC
  %2691 = bitcast i8* %2688 to double*
  %2692 = load double, double* %2691, align 1
  %2693 = inttoptr i64 %2687 to double*
  store double %2692, double* %2693
  %2694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2695 = load i64, i64* %RBP
  %2696 = sub i64 %2695, 64
  %2697 = load i64, i64* %PC
  %2698 = add i64 %2697, 5
  store i64 %2698, i64* %PC
  %2699 = inttoptr i64 %2696 to double*
  %2700 = load double, double* %2699
  %2701 = bitcast i8* %2694 to double*
  store double %2700, double* %2701, align 1, !tbaa !2452
  %2702 = getelementptr inbounds i8, i8* %2694, i64 8
  %2703 = bitcast i8* %2702 to double*
  store double 0.000000e+00, double* %2703, align 1, !tbaa !2452
  %2704 = load i64, i64* %RBP
  %2705 = sub i64 %2704, 24
  %2706 = load i64, i64* %PC
  %2707 = add i64 %2706, 4
  store i64 %2707, i64* %PC
  %2708 = inttoptr i64 %2705 to i64*
  %2709 = load i64, i64* %2708
  store i64 %2709, i64* %RAX, align 8, !tbaa !2428
  %2710 = load i64, i64* %RBP
  %2711 = sub i64 %2710, 40
  %2712 = load i64, i64* %PC
  %2713 = add i64 %2712, 4
  store i64 %2713, i64* %PC
  %2714 = inttoptr i64 %2711 to i32*
  %2715 = load i32, i32* %2714
  %2716 = sext i32 %2715 to i64
  store i64 %2716, i64* %RDX, align 8, !tbaa !2428
  %2717 = load i64, i64* %RAX
  %2718 = load i64, i64* %RDX
  %2719 = mul i64 %2718, 8
  %2720 = add i64 %2719, %2717
  %2721 = bitcast %union.vec128_t* %XMM0 to i8*
  %2722 = load i64, i64* %PC
  %2723 = add i64 %2722, 5
  store i64 %2723, i64* %PC
  %2724 = bitcast i8* %2721 to double*
  %2725 = load double, double* %2724, align 1
  %2726 = inttoptr i64 %2720 to double*
  store double %2725, double* %2726
  %2727 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2728 = load i64, i64* %RBP
  %2729 = sub i64 %2728, 72
  %2730 = load i64, i64* %PC
  %2731 = add i64 %2730, 5
  store i64 %2731, i64* %PC
  %2732 = inttoptr i64 %2729 to double*
  %2733 = load double, double* %2732
  %2734 = bitcast i8* %2727 to double*
  store double %2733, double* %2734, align 1, !tbaa !2452
  %2735 = getelementptr inbounds i8, i8* %2727, i64 8
  %2736 = bitcast i8* %2735 to double*
  store double 0.000000e+00, double* %2736, align 1, !tbaa !2452
  %2737 = load i64, i64* %RBP
  %2738 = sub i64 %2737, 24
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 4
  store i64 %2740, i64* %PC
  %2741 = inttoptr i64 %2738 to i64*
  %2742 = load i64, i64* %2741
  store i64 %2742, i64* %RAX, align 8, !tbaa !2428
  %2743 = load i64, i64* %RBP
  %2744 = sub i64 %2743, 40
  %2745 = load i64, i64* %PC
  %2746 = add i64 %2745, 3
  store i64 %2746, i64* %PC
  %2747 = inttoptr i64 %2744 to i32*
  %2748 = load i32, i32* %2747
  %2749 = zext i32 %2748 to i64
  store i64 %2749, i64* %RCX, align 8, !tbaa !2428
  %2750 = load i64, i64* %RCX
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 3
  store i64 %2752, i64* %PC
  %2753 = trunc i64 %2750 to i32
  %2754 = add i32 1, %2753
  %2755 = zext i32 %2754 to i64
  store i64 %2755, i64* %RCX, align 8, !tbaa !2428
  %2756 = icmp ult i32 %2754, %2753
  %2757 = icmp ult i32 %2754, 1
  %2758 = or i1 %2756, %2757
  %2759 = zext i1 %2758 to i8
  %2760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2759, i8* %2760, align 1, !tbaa !2432
  %2761 = and i32 %2754, 255
  %2762 = call i32 @llvm.ctpop.i32(i32 %2761) #17
  %2763 = trunc i32 %2762 to i8
  %2764 = and i8 %2763, 1
  %2765 = xor i8 %2764, 1
  %2766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2765, i8* %2766, align 1, !tbaa !2446
  %2767 = xor i64 1, %2750
  %2768 = trunc i64 %2767 to i32
  %2769 = xor i32 %2768, %2754
  %2770 = lshr i32 %2769, 4
  %2771 = trunc i32 %2770 to i8
  %2772 = and i8 %2771, 1
  %2773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2772, i8* %2773, align 1, !tbaa !2447
  %2774 = icmp eq i32 %2754, 0
  %2775 = zext i1 %2774 to i8
  %2776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2775, i8* %2776, align 1, !tbaa !2448
  %2777 = lshr i32 %2754, 31
  %2778 = trunc i32 %2777 to i8
  %2779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2778, i8* %2779, align 1, !tbaa !2449
  %2780 = lshr i32 %2753, 31
  %2781 = xor i32 %2777, %2780
  %2782 = add nuw nsw i32 %2781, %2777
  %2783 = icmp eq i32 %2782, 2
  %2784 = zext i1 %2783 to i8
  %2785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2784, i8* %2785, align 1, !tbaa !2450
  %2786 = load i32, i32* %ECX
  %2787 = zext i32 %2786 to i64
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 3
  store i64 %2789, i64* %PC
  %2790 = shl i64 %2787, 32
  %2791 = ashr exact i64 %2790, 32
  store i64 %2791, i64* %RDX, align 8, !tbaa !2428
  %2792 = load i64, i64* %RAX
  %2793 = load i64, i64* %RDX
  %2794 = mul i64 %2793, 8
  %2795 = add i64 %2794, %2792
  %2796 = bitcast %union.vec128_t* %XMM0 to i8*
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 5
  store i64 %2798, i64* %PC
  %2799 = bitcast i8* %2796 to double*
  %2800 = load double, double* %2799, align 1
  %2801 = inttoptr i64 %2795 to double*
  store double %2800, double* %2801
  %2802 = load i64, i64* %RBP
  %2803 = sub i64 %2802, 28
  %2804 = load i64, i64* %PC
  %2805 = add i64 %2804, 3
  store i64 %2805, i64* %PC
  %2806 = inttoptr i64 %2803 to i32*
  %2807 = load i32, i32* %2806
  %2808 = zext i32 %2807 to i64
  store i64 %2808, i64* %RAX, align 8, !tbaa !2428
  %2809 = load i64, i64* %RAX
  %2810 = load i64, i64* %PC
  %2811 = add i64 %2810, 3
  store i64 %2811, i64* %PC
  %2812 = trunc i64 %2809 to i32
  %2813 = add i32 1, %2812
  %2814 = zext i32 %2813 to i64
  store i64 %2814, i64* %RAX, align 8, !tbaa !2428
  %2815 = icmp ult i32 %2813, %2812
  %2816 = icmp ult i32 %2813, 1
  %2817 = or i1 %2815, %2816
  %2818 = zext i1 %2817 to i8
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2818, i8* %2819, align 1, !tbaa !2432
  %2820 = and i32 %2813, 255
  %2821 = call i32 @llvm.ctpop.i32(i32 %2820) #17
  %2822 = trunc i32 %2821 to i8
  %2823 = and i8 %2822, 1
  %2824 = xor i8 %2823, 1
  %2825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2824, i8* %2825, align 1, !tbaa !2446
  %2826 = xor i64 1, %2809
  %2827 = trunc i64 %2826 to i32
  %2828 = xor i32 %2827, %2813
  %2829 = lshr i32 %2828, 4
  %2830 = trunc i32 %2829 to i8
  %2831 = and i8 %2830, 1
  %2832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2831, i8* %2832, align 1, !tbaa !2447
  %2833 = icmp eq i32 %2813, 0
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2834, i8* %2835, align 1, !tbaa !2448
  %2836 = lshr i32 %2813, 31
  %2837 = trunc i32 %2836 to i8
  %2838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2837, i8* %2838, align 1, !tbaa !2449
  %2839 = lshr i32 %2812, 31
  %2840 = xor i32 %2836, %2839
  %2841 = add nuw nsw i32 %2840, %2836
  %2842 = icmp eq i32 %2841, 2
  %2843 = zext i1 %2842 to i8
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2843, i8* %2844, align 1, !tbaa !2450
  %2845 = load i64, i64* %RBP
  %2846 = sub i64 %2845, 28
  %2847 = load i32, i32* %EAX
  %2848 = zext i32 %2847 to i64
  %2849 = load i64, i64* %PC
  %2850 = add i64 %2849, 3
  store i64 %2850, i64* %PC
  %2851 = inttoptr i64 %2846 to i32*
  store i32 %2847, i32* %2851
  %2852 = load i64, i64* %PC
  %2853 = sub i64 %2852, 469
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 5
  store i64 %2855, i64* %PC
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2853, i64* %2856, align 8, !tbaa !2428
  br label %block_40222f

block_401c36:                                     ; preds = %block_401c8d, %block_401c10
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401c10 ], [ %MEMORY.6, %block_401c8d ]
  %2857 = load i64, i64* %RBP
  %2858 = sub i64 %2857, 48
  %2859 = load i64, i64* %PC
  %2860 = add i64 %2859, 3
  store i64 %2860, i64* %PC
  %2861 = inttoptr i64 %2858 to i32*
  %2862 = load i32, i32* %2861
  %2863 = zext i32 %2862 to i64
  store i64 %2863, i64* %RAX, align 8, !tbaa !2428
  %2864 = load i64, i64* %RAX
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 3
  store i64 %2866, i64* %PC
  %2867 = and i64 %2864, 4294967295
  %2868 = shl i64 %2867, 2
  %2869 = trunc i64 %2868 to i32
  %2870 = icmp slt i32 %2869, 0
  %2871 = shl i32 %2869, 1
  %2872 = zext i32 %2871 to i64
  store i64 %2872, i64* %RAX, align 8, !tbaa !2428
  %2873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2874 = zext i1 %2870 to i8
  store i8 %2874, i8* %2873, align 1, !tbaa !2451
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2876 = and i32 %2871, 254
  %2877 = call i32 @llvm.ctpop.i32(i32 %2876) #17
  %2878 = trunc i32 %2877 to i8
  %2879 = and i8 %2878, 1
  %2880 = xor i8 %2879, 1
  store i8 %2880, i8* %2875, align 1, !tbaa !2451
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2881, align 1, !tbaa !2451
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2883 = icmp eq i32 %2871, 0
  %2884 = zext i1 %2883 to i8
  store i8 %2884, i8* %2882, align 1, !tbaa !2451
  %2885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2886 = lshr i32 %2871, 31
  %2887 = trunc i32 %2886 to i8
  store i8 %2887, i8* %2885, align 1, !tbaa !2451
  %2888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2888, align 1, !tbaa !2451
  %2889 = load i32, i32* %EAX
  %2890 = zext i32 %2889 to i64
  %2891 = load i64, i64* %RBP
  %2892 = sub i64 %2891, 44
  %2893 = load i64, i64* %PC
  %2894 = add i64 %2893, 3
  store i64 %2894, i64* %PC
  %2895 = inttoptr i64 %2892 to i32*
  %2896 = load i32, i32* %2895
  %2897 = sub i32 %2889, %2896
  %2898 = icmp ult i32 %2889, %2896
  %2899 = zext i1 %2898 to i8
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2899, i8* %2900, align 1, !tbaa !2432
  %2901 = and i32 %2897, 255
  %2902 = call i32 @llvm.ctpop.i32(i32 %2901) #17
  %2903 = trunc i32 %2902 to i8
  %2904 = and i8 %2903, 1
  %2905 = xor i8 %2904, 1
  %2906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2905, i8* %2906, align 1, !tbaa !2446
  %2907 = xor i32 %2896, %2889
  %2908 = xor i32 %2907, %2897
  %2909 = lshr i32 %2908, 4
  %2910 = trunc i32 %2909 to i8
  %2911 = and i8 %2910, 1
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2911, i8* %2912, align 1, !tbaa !2447
  %2913 = icmp eq i32 %2897, 0
  %2914 = zext i1 %2913 to i8
  %2915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2914, i8* %2915, align 1, !tbaa !2448
  %2916 = lshr i32 %2897, 31
  %2917 = trunc i32 %2916 to i8
  %2918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2917, i8* %2918, align 1, !tbaa !2449
  %2919 = lshr i32 %2889, 31
  %2920 = lshr i32 %2896, 31
  %2921 = xor i32 %2920, %2919
  %2922 = xor i32 %2916, %2919
  %2923 = add nuw nsw i32 %2922, %2921
  %2924 = icmp eq i32 %2923, 2
  %2925 = zext i1 %2924 to i8
  %2926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2925, i8* %2926, align 1, !tbaa !2450
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 92
  %2929 = load i64, i64* %PC
  %2930 = add i64 %2929, 6
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 6
  store i64 %2932, i64* %PC
  %2933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2934 = load i8, i8* %2933, align 1, !tbaa !2449
  %2935 = icmp ne i8 %2934, 0
  %2936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2937 = load i8, i8* %2936, align 1, !tbaa !2450
  %2938 = icmp ne i8 %2937, 0
  %2939 = xor i1 %2935, %2938
  %2940 = xor i1 %2939, true
  %2941 = zext i1 %2940 to i8
  store i8 %2941, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2943 = select i1 %2939, i64 %2930, i64 %2928
  store i64 %2943, i64* %2942, align 8, !tbaa !2428
  %2944 = load i8, i8* %BRANCH_TAKEN
  %2945 = icmp eq i8 %2944, 1
  %2946 = load i64, i64* %RBP
  br i1 %2945, label %block_401c9b, label %block_401c45

block_4021b6:                                     ; preds = %block_401cba
  %2947 = load i64, i64* %PC
  %2948 = add i64 %2947, 748
  %2949 = load i64, i64* %PC
  %2950 = add i64 %2949, 5
  store i64 %2950, i64* %PC
  %2951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2948, i64* %2951, align 8, !tbaa !2428
  br label %block_4024a2

block_4021bb:                                     ; preds = %block_401c9b
  %2952 = load i64, i64* %PC
  %2953 = add i64 %2952, 10
  store i64 %2953, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %2954 = load i64, i64* %RBP
  %2955 = sub i64 %2954, 24
  %2956 = load i64, i64* %PC
  %2957 = add i64 %2956, 4
  store i64 %2957, i64* %PC
  %2958 = inttoptr i64 %2955 to i64*
  %2959 = load i64, i64* %2958
  store i64 %2959, i64* %RCX, align 8, !tbaa !2428
  %2960 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2961 = load i64, i64* %RCX
  %2962 = add i64 %2961, 8
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 5
  store i64 %2964, i64* %PC
  %2965 = inttoptr i64 %2962 to double*
  %2966 = load double, double* %2965
  %2967 = bitcast i8* %2960 to double*
  store double %2966, double* %2967, align 1, !tbaa !2452
  %2968 = getelementptr inbounds i8, i8* %2960, i64 8
  %2969 = bitcast i8* %2968 to double*
  store double 0.000000e+00, double* %2969, align 1, !tbaa !2452
  %2970 = bitcast %union.vec128_t* %XMM0 to i8*
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 5
  store i64 %2972, i64* %PC
  %2973 = bitcast i8* %2970 to i64*
  %2974 = load i64, i64* %2973, align 1
  store i64 %2974, i64* %RCX, align 1, !tbaa !2428
  %2975 = load i64, i64* %RCX
  %2976 = load i64, i64* %RAX
  %2977 = load i64, i64* %PC
  %2978 = add i64 %2977, 3
  store i64 %2978, i64* %PC
  %2979 = xor i64 %2976, %2975
  store i64 %2979, i64* %RCX, align 8, !tbaa !2428
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2980, align 1, !tbaa !2432
  %2981 = trunc i64 %2979 to i32
  %2982 = and i32 %2981, 255
  %2983 = call i32 @llvm.ctpop.i32(i32 %2982) #17
  %2984 = trunc i32 %2983 to i8
  %2985 = and i8 %2984, 1
  %2986 = xor i8 %2985, 1
  %2987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2986, i8* %2987, align 1, !tbaa !2446
  %2988 = icmp eq i64 %2979, 0
  %2989 = zext i1 %2988 to i8
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2989, i8* %2990, align 1, !tbaa !2448
  %2991 = lshr i64 %2979, 63
  %2992 = trunc i64 %2991 to i8
  %2993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2992, i8* %2993, align 1, !tbaa !2449
  %2994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2994, align 1, !tbaa !2450
  %2995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2995, align 1, !tbaa !2447
  %2996 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2997 = load i64, i64* %RCX
  %2998 = load i64, i64* %PC
  %2999 = add i64 %2998, 5
  store i64 %2999, i64* %PC
  %3000 = bitcast i8* %2996 to i64*
  store i64 %2997, i64* %3000, align 1, !tbaa !2428
  %3001 = getelementptr inbounds i8, i8* %2996, i64 8
  %3002 = bitcast i8* %3001 to i64*
  store i64 0, i64* %3002, align 1, !tbaa !2428
  %3003 = load i64, i64* %RBP
  %3004 = sub i64 %3003, 24
  %3005 = load i64, i64* %PC
  %3006 = add i64 %3005, 4
  store i64 %3006, i64* %PC
  %3007 = inttoptr i64 %3004 to i64*
  %3008 = load i64, i64* %3007
  store i64 %3008, i64* %RCX, align 8, !tbaa !2428
  %3009 = load i64, i64* %RCX
  %3010 = add i64 %3009, 8
  %3011 = bitcast %union.vec128_t* %XMM0 to i8*
  %3012 = load i64, i64* %PC
  %3013 = add i64 %3012, 5
  store i64 %3013, i64* %PC
  %3014 = bitcast i8* %3011 to double*
  %3015 = load double, double* %3014, align 1
  %3016 = inttoptr i64 %3010 to double*
  store double %3015, double* %3016
  %3017 = load i64, i64* %RBP
  %3018 = sub i64 %3017, 24
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 4
  store i64 %3020, i64* %PC
  %3021 = inttoptr i64 %3018 to i64*
  %3022 = load i64, i64* %3021
  store i64 %3022, i64* %RCX, align 8, !tbaa !2428
  %3023 = load i64, i64* %RBP
  %3024 = sub i64 %3023, 52
  %3025 = load i64, i64* %PC
  %3026 = add i64 %3025, 3
  store i64 %3026, i64* %PC
  %3027 = inttoptr i64 %3024 to i32*
  %3028 = load i32, i32* %3027
  %3029 = zext i32 %3028 to i64
  store i64 %3029, i64* %RDX, align 8, !tbaa !2428
  %3030 = load i64, i64* %RDX
  %3031 = load i64, i64* %PC
  %3032 = add i64 %3031, 3
  store i64 %3032, i64* %PC
  %3033 = trunc i64 %3030 to i32
  %3034 = add i32 1, %3033
  %3035 = zext i32 %3034 to i64
  store i64 %3035, i64* %RDX, align 8, !tbaa !2428
  %3036 = icmp ult i32 %3034, %3033
  %3037 = icmp ult i32 %3034, 1
  %3038 = or i1 %3036, %3037
  %3039 = zext i1 %3038 to i8
  %3040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3039, i8* %3040, align 1, !tbaa !2432
  %3041 = and i32 %3034, 255
  %3042 = call i32 @llvm.ctpop.i32(i32 %3041) #17
  %3043 = trunc i32 %3042 to i8
  %3044 = and i8 %3043, 1
  %3045 = xor i8 %3044, 1
  %3046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3045, i8* %3046, align 1, !tbaa !2446
  %3047 = xor i64 1, %3030
  %3048 = trunc i64 %3047 to i32
  %3049 = xor i32 %3048, %3034
  %3050 = lshr i32 %3049, 4
  %3051 = trunc i32 %3050 to i8
  %3052 = and i8 %3051, 1
  %3053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3052, i8* %3053, align 1, !tbaa !2447
  %3054 = icmp eq i32 %3034, 0
  %3055 = zext i1 %3054 to i8
  %3056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3055, i8* %3056, align 1, !tbaa !2448
  %3057 = lshr i32 %3034, 31
  %3058 = trunc i32 %3057 to i8
  %3059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3058, i8* %3059, align 1, !tbaa !2449
  %3060 = lshr i32 %3033, 31
  %3061 = xor i32 %3057, %3060
  %3062 = add nuw nsw i32 %3061, %3057
  %3063 = icmp eq i32 %3062, 2
  %3064 = zext i1 %3063 to i8
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3064, i8* %3065, align 1, !tbaa !2450
  %3066 = load i32, i32* %EDX
  %3067 = zext i32 %3066 to i64
  %3068 = load i64, i64* %PC
  %3069 = add i64 %3068, 3
  store i64 %3069, i64* %PC
  %3070 = shl i64 %3067, 32
  %3071 = ashr exact i64 %3070, 32
  store i64 %3071, i64* %RSI, align 8, !tbaa !2428
  %3072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3073 = load i64, i64* %RCX
  %3074 = load i64, i64* %RSI
  %3075 = mul i64 %3074, 8
  %3076 = add i64 %3075, %3073
  %3077 = load i64, i64* %PC
  %3078 = add i64 %3077, 5
  store i64 %3078, i64* %PC
  %3079 = inttoptr i64 %3076 to double*
  %3080 = load double, double* %3079
  %3081 = bitcast i8* %3072 to double*
  store double %3080, double* %3081, align 1, !tbaa !2452
  %3082 = getelementptr inbounds i8, i8* %3072, i64 8
  %3083 = bitcast i8* %3082 to double*
  store double 0.000000e+00, double* %3083, align 1, !tbaa !2452
  %3084 = bitcast %union.vec128_t* %XMM0 to i8*
  %3085 = load i64, i64* %PC
  %3086 = add i64 %3085, 5
  store i64 %3086, i64* %PC
  %3087 = bitcast i8* %3084 to i64*
  %3088 = load i64, i64* %3087, align 1
  store i64 %3088, i64* %RCX, align 1, !tbaa !2428
  %3089 = load i64, i64* %RCX
  %3090 = load i64, i64* %RAX
  %3091 = load i64, i64* %PC
  %3092 = add i64 %3091, 3
  store i64 %3092, i64* %PC
  %3093 = xor i64 %3090, %3089
  store i64 %3093, i64* %RCX, align 8, !tbaa !2428
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3094, align 1, !tbaa !2432
  %3095 = trunc i64 %3093 to i32
  %3096 = and i32 %3095, 255
  %3097 = call i32 @llvm.ctpop.i32(i32 %3096) #17
  %3098 = trunc i32 %3097 to i8
  %3099 = and i8 %3098, 1
  %3100 = xor i8 %3099, 1
  %3101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3100, i8* %3101, align 1, !tbaa !2446
  %3102 = icmp eq i64 %3093, 0
  %3103 = zext i1 %3102 to i8
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3103, i8* %3104, align 1, !tbaa !2448
  %3105 = lshr i64 %3093, 63
  %3106 = trunc i64 %3105 to i8
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3106, i8* %3107, align 1, !tbaa !2449
  %3108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3108, align 1, !tbaa !2450
  %3109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3109, align 1, !tbaa !2447
  %3110 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3111 = load i64, i64* %RCX
  %3112 = load i64, i64* %PC
  %3113 = add i64 %3112, 5
  store i64 %3113, i64* %PC
  %3114 = bitcast i8* %3110 to i64*
  store i64 %3111, i64* %3114, align 1, !tbaa !2428
  %3115 = getelementptr inbounds i8, i8* %3110, i64 8
  %3116 = bitcast i8* %3115 to i64*
  store i64 0, i64* %3116, align 1, !tbaa !2428
  %3117 = load i64, i64* %RBP
  %3118 = sub i64 %3117, 24
  %3119 = load i64, i64* %PC
  %3120 = add i64 %3119, 4
  store i64 %3120, i64* %PC
  %3121 = inttoptr i64 %3118 to i64*
  %3122 = load i64, i64* %3121
  store i64 %3122, i64* %RAX, align 8, !tbaa !2428
  %3123 = load i64, i64* %RBP
  %3124 = sub i64 %3123, 52
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 3
  store i64 %3126, i64* %PC
  %3127 = inttoptr i64 %3124 to i32*
  %3128 = load i32, i32* %3127
  %3129 = zext i32 %3128 to i64
  store i64 %3129, i64* %RDX, align 8, !tbaa !2428
  %3130 = load i64, i64* %RDX
  %3131 = load i64, i64* %PC
  %3132 = add i64 %3131, 3
  store i64 %3132, i64* %PC
  %3133 = trunc i64 %3130 to i32
  %3134 = add i32 1, %3133
  %3135 = zext i32 %3134 to i64
  store i64 %3135, i64* %RDX, align 8, !tbaa !2428
  %3136 = icmp ult i32 %3134, %3133
  %3137 = icmp ult i32 %3134, 1
  %3138 = or i1 %3136, %3137
  %3139 = zext i1 %3138 to i8
  %3140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3139, i8* %3140, align 1, !tbaa !2432
  %3141 = and i32 %3134, 255
  %3142 = call i32 @llvm.ctpop.i32(i32 %3141) #17
  %3143 = trunc i32 %3142 to i8
  %3144 = and i8 %3143, 1
  %3145 = xor i8 %3144, 1
  %3146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3145, i8* %3146, align 1, !tbaa !2446
  %3147 = xor i64 1, %3130
  %3148 = trunc i64 %3147 to i32
  %3149 = xor i32 %3148, %3134
  %3150 = lshr i32 %3149, 4
  %3151 = trunc i32 %3150 to i8
  %3152 = and i8 %3151, 1
  %3153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3152, i8* %3153, align 1, !tbaa !2447
  %3154 = icmp eq i32 %3134, 0
  %3155 = zext i1 %3154 to i8
  %3156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3155, i8* %3156, align 1, !tbaa !2448
  %3157 = lshr i32 %3134, 31
  %3158 = trunc i32 %3157 to i8
  %3159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3158, i8* %3159, align 1, !tbaa !2449
  %3160 = lshr i32 %3133, 31
  %3161 = xor i32 %3157, %3160
  %3162 = add nuw nsw i32 %3161, %3157
  %3163 = icmp eq i32 %3162, 2
  %3164 = zext i1 %3163 to i8
  %3165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3164, i8* %3165, align 1, !tbaa !2450
  %3166 = load i32, i32* %EDX
  %3167 = zext i32 %3166 to i64
  %3168 = load i64, i64* %PC
  %3169 = add i64 %3168, 3
  store i64 %3169, i64* %PC
  %3170 = shl i64 %3167, 32
  %3171 = ashr exact i64 %3170, 32
  store i64 %3171, i64* %RCX, align 8, !tbaa !2428
  %3172 = load i64, i64* %RAX
  %3173 = load i64, i64* %RCX
  %3174 = mul i64 %3173, 8
  %3175 = add i64 %3174, %3172
  %3176 = bitcast %union.vec128_t* %XMM0 to i8*
  %3177 = load i64, i64* %PC
  %3178 = add i64 %3177, 5
  store i64 %3178, i64* %PC
  %3179 = bitcast i8* %3176 to double*
  %3180 = load double, double* %3179, align 1
  %3181 = inttoptr i64 %3175 to double*
  store double %3180, double* %3181
  %3182 = load i64, i64* %RBP
  %3183 = sub i64 %3182, 36
  %3184 = load i64, i64* %PC
  %3185 = add i64 %3184, 7
  store i64 %3185, i64* %PC
  %3186 = inttoptr i64 %3183 to i32*
  store i32 1, i32* %3186
  br label %block_40221c

block_401cb3:                                     ; preds = %block_401c9b
  %3187 = load i64, i64* %RBP
  %3188 = sub i64 %3187, 36
  %3189 = load i64, i64* %PC
  %3190 = add i64 %3189, 7
  store i64 %3190, i64* %PC
  %3191 = inttoptr i64 %3188 to i32*
  store i32 0, i32* %3191
  br label %block_401cba

block_40222f:                                     ; preds = %block_402228, %block_40223b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.5, %block_402228 ], [ %MEMORY.2, %block_40223b ]
  %3192 = load i64, i64* %RBP
  %3193 = sub i64 %3192, 28
  %3194 = load i64, i64* %PC
  %3195 = add i64 %3194, 3
  store i64 %3195, i64* %PC
  %3196 = inttoptr i64 %3193 to i32*
  %3197 = load i32, i32* %3196
  %3198 = zext i32 %3197 to i64
  store i64 %3198, i64* %RAX, align 8, !tbaa !2428
  %3199 = load i32, i32* %EAX
  %3200 = zext i32 %3199 to i64
  %3201 = load i64, i64* %RBP
  %3202 = sub i64 %3201, 36
  %3203 = load i64, i64* %PC
  %3204 = add i64 %3203, 3
  store i64 %3204, i64* %PC
  %3205 = inttoptr i64 %3202 to i32*
  %3206 = load i32, i32* %3205
  %3207 = sub i32 %3199, %3206
  %3208 = icmp ult i32 %3199, %3206
  %3209 = zext i1 %3208 to i8
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3209, i8* %3210, align 1, !tbaa !2432
  %3211 = and i32 %3207, 255
  %3212 = call i32 @llvm.ctpop.i32(i32 %3211) #17
  %3213 = trunc i32 %3212 to i8
  %3214 = and i8 %3213, 1
  %3215 = xor i8 %3214, 1
  %3216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3215, i8* %3216, align 1, !tbaa !2446
  %3217 = xor i32 %3206, %3199
  %3218 = xor i32 %3217, %3207
  %3219 = lshr i32 %3218, 4
  %3220 = trunc i32 %3219 to i8
  %3221 = and i8 %3220, 1
  %3222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3221, i8* %3222, align 1, !tbaa !2447
  %3223 = icmp eq i32 %3207, 0
  %3224 = zext i1 %3223 to i8
  %3225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3224, i8* %3225, align 1, !tbaa !2448
  %3226 = lshr i32 %3207, 31
  %3227 = trunc i32 %3226 to i8
  %3228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3227, i8* %3228, align 1, !tbaa !2449
  %3229 = lshr i32 %3199, 31
  %3230 = lshr i32 %3206, 31
  %3231 = xor i32 %3230, %3229
  %3232 = xor i32 %3226, %3229
  %3233 = add nuw nsw i32 %3232, %3231
  %3234 = icmp eq i32 %3233, 2
  %3235 = zext i1 %3234 to i8
  %3236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3235, i8* %3236, align 1, !tbaa !2450
  %3237 = load i64, i64* %PC
  %3238 = add i64 %3237, 468
  %3239 = load i64, i64* %PC
  %3240 = add i64 %3239, 6
  %3241 = load i64, i64* %PC
  %3242 = add i64 %3241, 6
  store i64 %3242, i64* %PC
  %3243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3244 = load i8, i8* %3243, align 1, !tbaa !2449
  %3245 = icmp ne i8 %3244, 0
  %3246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3247 = load i8, i8* %3246, align 1, !tbaa !2450
  %3248 = icmp ne i8 %3247, 0
  %3249 = xor i1 %3245, %3248
  %3250 = xor i1 %3249, true
  %3251 = zext i1 %3250 to i8
  store i8 %3251, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3253 = select i1 %3249, i64 %3240, i64 %3238
  store i64 %3253, i64* %3252, align 8, !tbaa !2428
  %3254 = load i8, i8* %BRANCH_TAKEN
  %3255 = icmp eq i8 %3254, 1
  %3256 = load i64, i64* %PC
  %3257 = add i64 %3256, 10
  store i64 %3257, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %3258 = load i64, i64* %RBP
  br i1 %3255, label %block_402409, label %block_40223b

block_402228:                                     ; preds = %block_40221c
  %3259 = load i64, i64* %RBP
  %3260 = sub i64 %3259, 28
  %3261 = load i64, i64* %PC
  %3262 = add i64 %3261, 7
  store i64 %3262, i64* %PC
  %3263 = inttoptr i64 %3260 to i32*
  store i32 0, i32* %3263
  br label %block_40222f

block_401cba:                                     ; preds = %block_401cb3, %block_40204f
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_401cb3 ], [ %MEMORY.0, %block_40204f ]
  %3264 = load i64, i64* %RBP
  %3265 = sub i64 %3264, 36
  %3266 = load i64, i64* %PC
  %3267 = add i64 %3266, 3
  store i64 %3267, i64* %PC
  %3268 = inttoptr i64 %3265 to i32*
  %3269 = load i32, i32* %3268
  %3270 = zext i32 %3269 to i64
  store i64 %3270, i64* %RAX, align 8, !tbaa !2428
  %3271 = load i32, i32* %EAX
  %3272 = zext i32 %3271 to i64
  %3273 = load i64, i64* %RBP
  %3274 = sub i64 %3273, 48
  %3275 = load i64, i64* %PC
  %3276 = add i64 %3275, 3
  store i64 %3276, i64* %PC
  %3277 = inttoptr i64 %3274 to i32*
  %3278 = load i32, i32* %3277
  %3279 = sub i32 %3271, %3278
  %3280 = icmp ult i32 %3271, %3278
  %3281 = zext i1 %3280 to i8
  %3282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3281, i8* %3282, align 1, !tbaa !2432
  %3283 = and i32 %3279, 255
  %3284 = call i32 @llvm.ctpop.i32(i32 %3283) #17
  %3285 = trunc i32 %3284 to i8
  %3286 = and i8 %3285, 1
  %3287 = xor i8 %3286, 1
  %3288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3287, i8* %3288, align 1, !tbaa !2446
  %3289 = xor i32 %3278, %3271
  %3290 = xor i32 %3289, %3279
  %3291 = lshr i32 %3290, 4
  %3292 = trunc i32 %3291 to i8
  %3293 = and i8 %3292, 1
  %3294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3293, i8* %3294, align 1, !tbaa !2447
  %3295 = icmp eq i32 %3279, 0
  %3296 = zext i1 %3295 to i8
  %3297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3296, i8* %3297, align 1, !tbaa !2448
  %3298 = lshr i32 %3279, 31
  %3299 = trunc i32 %3298 to i8
  %3300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3299, i8* %3300, align 1, !tbaa !2449
  %3301 = lshr i32 %3271, 31
  %3302 = lshr i32 %3278, 31
  %3303 = xor i32 %3302, %3301
  %3304 = xor i32 %3298, %3301
  %3305 = add nuw nsw i32 %3304, %3303
  %3306 = icmp eq i32 %3305, 2
  %3307 = zext i1 %3306 to i8
  %3308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3307, i8* %3308, align 1, !tbaa !2450
  %3309 = load i64, i64* %PC
  %3310 = add i64 %3309, 1270
  %3311 = load i64, i64* %PC
  %3312 = add i64 %3311, 6
  %3313 = load i64, i64* %PC
  %3314 = add i64 %3313, 6
  store i64 %3314, i64* %PC
  %3315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3316 = load i8, i8* %3315, align 1, !tbaa !2449
  %3317 = icmp ne i8 %3316, 0
  %3318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3319 = load i8, i8* %3318, align 1, !tbaa !2450
  %3320 = icmp ne i8 %3319, 0
  %3321 = xor i1 %3317, %3320
  %3322 = xor i1 %3321, true
  %3323 = zext i1 %3322 to i8
  store i8 %3323, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3325 = select i1 %3321, i64 %3312, i64 %3310
  store i64 %3325, i64* %3324, align 8, !tbaa !2428
  %3326 = load i8, i8* %BRANCH_TAKEN
  %3327 = icmp eq i8 %3326, 1
  br i1 %3327, label %block_4021b6, label %block_401cc6

block_4024a2:                                     ; preds = %block_40249d, %block_4021b6
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_40249d ], [ %MEMORY.3, %block_4021b6 ]
  %3328 = load i64, i64* %PC
  %3329 = add i64 %3328, 1
  store i64 %3329, i64* %PC
  %3330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3331 = load i64, i64* %3330, align 8, !tbaa !2428
  %3332 = add i64 %3331, 8
  %3333 = inttoptr i64 %3331 to i64*
  %3334 = load i64, i64* %3333
  store i64 %3334, i64* %RBP, align 8, !tbaa !2428
  store i64 %3332, i64* %3330, align 8, !tbaa !2428
  %3335 = load i64, i64* %PC
  %3336 = add i64 %3335, 1
  store i64 %3336, i64* %PC
  %3337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3339 = load i64, i64* %3338, align 8, !tbaa !2428
  %3340 = inttoptr i64 %3339 to i64*
  %3341 = load i64, i64* %3340
  store i64 %3341, i64* %3337, align 8, !tbaa !2428
  %3342 = add i64 %3339, 8
  store i64 %3342, i64* %3338, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_40249d:                                     ; preds = %block_40221c
  %3343 = load i64, i64* %PC
  %3344 = add i64 %3343, 5
  %3345 = load i64, i64* %PC
  %3346 = add i64 %3345, 5
  store i64 %3346, i64* %PC
  %3347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3344, i64* %3347, align 8, !tbaa !2428
  br label %block_4024a2

block_401c45:                                     ; preds = %block_401c36
  %3348 = sub i64 %2946, 44
  %3349 = load i64, i64* %PC
  %3350 = add i64 %3349, 3
  store i64 %3350, i64* %PC
  %3351 = inttoptr i64 %3348 to i32*
  %3352 = load i32, i32* %3351
  %3353 = zext i32 %3352 to i64
  store i64 %3353, i64* %RAX, align 8, !tbaa !2428
  %3354 = load i64, i64* %RAX
  %3355 = load i64, i64* %PC
  %3356 = add i64 %3355, 3
  store i64 %3356, i64* %PC
  %3357 = shl i64 %3354, 32
  %3358 = ashr i64 %3357, 33
  %3359 = trunc i64 %3354 to i8
  %3360 = and i8 %3359, 1
  %3361 = trunc i64 %3358 to i32
  %3362 = and i64 %3358, 4294967295
  store i64 %3362, i64* %RAX, align 8, !tbaa !2428
  %3363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3360, i8* %3363, align 1, !tbaa !2451
  %3364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3365 = and i32 %3361, 255
  %3366 = call i32 @llvm.ctpop.i32(i32 %3365) #17
  %3367 = trunc i32 %3366 to i8
  %3368 = and i8 %3367, 1
  %3369 = xor i8 %3368, 1
  store i8 %3369, i8* %3364, align 1, !tbaa !2451
  %3370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3370, align 1, !tbaa !2451
  %3371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3372 = icmp eq i32 %3361, 0
  %3373 = zext i1 %3372 to i8
  store i8 %3373, i8* %3371, align 1, !tbaa !2451
  %3374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3375 = lshr i32 %3361, 31
  %3376 = trunc i32 %3375 to i8
  store i8 %3376, i8* %3374, align 1, !tbaa !2451
  %3377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3377, align 1, !tbaa !2451
  %3378 = load i64, i64* %RBP
  %3379 = sub i64 %3378, 44
  %3380 = load i32, i32* %EAX
  %3381 = zext i32 %3380 to i64
  %3382 = load i64, i64* %PC
  %3383 = add i64 %3382, 3
  store i64 %3383, i64* %PC
  %3384 = inttoptr i64 %3379 to i32*
  store i32 %3380, i32* %3384
  %3385 = load i64, i64* %RBP
  %3386 = sub i64 %3385, 28
  %3387 = load i64, i64* %PC
  %3388 = add i64 %3387, 7
  store i64 %3388, i64* %PC
  %3389 = inttoptr i64 %3386 to i32*
  store i32 0, i32* %3389
  br label %block_401c55

block_40221c:                                     ; preds = %block_402409, %block_4021bb
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_4021bb ], [ %MEMORY.2, %block_402409 ]
  %3390 = load i64, i64* %RBP
  %3391 = sub i64 %3390, 36
  %3392 = load i64, i64* %PC
  %3393 = add i64 %3392, 3
  store i64 %3393, i64* %PC
  %3394 = inttoptr i64 %3391 to i32*
  %3395 = load i32, i32* %3394
  %3396 = zext i32 %3395 to i64
  store i64 %3396, i64* %RAX, align 8, !tbaa !2428
  %3397 = load i32, i32* %EAX
  %3398 = zext i32 %3397 to i64
  %3399 = load i64, i64* %RBP
  %3400 = sub i64 %3399, 48
  %3401 = load i64, i64* %PC
  %3402 = add i64 %3401, 3
  store i64 %3402, i64* %PC
  %3403 = inttoptr i64 %3400 to i32*
  %3404 = load i32, i32* %3403
  %3405 = sub i32 %3397, %3404
  %3406 = icmp ult i32 %3397, %3404
  %3407 = zext i1 %3406 to i8
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3407, i8* %3408, align 1, !tbaa !2432
  %3409 = and i32 %3405, 255
  %3410 = call i32 @llvm.ctpop.i32(i32 %3409) #17
  %3411 = trunc i32 %3410 to i8
  %3412 = and i8 %3411, 1
  %3413 = xor i8 %3412, 1
  %3414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3413, i8* %3414, align 1, !tbaa !2446
  %3415 = xor i32 %3404, %3397
  %3416 = xor i32 %3415, %3405
  %3417 = lshr i32 %3416, 4
  %3418 = trunc i32 %3417 to i8
  %3419 = and i8 %3418, 1
  %3420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3419, i8* %3420, align 1, !tbaa !2447
  %3421 = icmp eq i32 %3405, 0
  %3422 = zext i1 %3421 to i8
  %3423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3422, i8* %3423, align 1, !tbaa !2448
  %3424 = lshr i32 %3405, 31
  %3425 = trunc i32 %3424 to i8
  %3426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3425, i8* %3426, align 1, !tbaa !2449
  %3427 = lshr i32 %3397, 31
  %3428 = lshr i32 %3404, 31
  %3429 = xor i32 %3428, %3427
  %3430 = xor i32 %3424, %3427
  %3431 = add nuw nsw i32 %3430, %3429
  %3432 = icmp eq i32 %3431, 2
  %3433 = zext i1 %3432 to i8
  %3434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3433, i8* %3434, align 1, !tbaa !2450
  %3435 = load i64, i64* %PC
  %3436 = add i64 %3435, 635
  %3437 = load i64, i64* %PC
  %3438 = add i64 %3437, 6
  %3439 = load i64, i64* %PC
  %3440 = add i64 %3439, 6
  store i64 %3440, i64* %PC
  %3441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3442 = load i8, i8* %3441, align 1, !tbaa !2449
  %3443 = icmp ne i8 %3442, 0
  %3444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3445 = load i8, i8* %3444, align 1, !tbaa !2450
  %3446 = icmp ne i8 %3445, 0
  %3447 = xor i1 %3443, %3446
  %3448 = xor i1 %3447, true
  %3449 = zext i1 %3448 to i8
  store i8 %3449, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3451 = select i1 %3447, i64 %3438, i64 %3436
  store i64 %3451, i64* %3450, align 8, !tbaa !2428
  %3452 = load i8, i8* %BRANCH_TAKEN
  %3453 = icmp eq i8 %3452, 1
  br i1 %3453, label %block_40249d, label %block_402228

block_401c9b:                                     ; preds = %block_401c36
  %3454 = sub i64 %2946, 48
  %3455 = load i64, i64* %PC
  %3456 = add i64 %3455, 3
  store i64 %3456, i64* %PC
  %3457 = inttoptr i64 %3454 to i32*
  %3458 = load i32, i32* %3457
  %3459 = zext i32 %3458 to i64
  store i64 %3459, i64* %RAX, align 8, !tbaa !2428
  %3460 = load i64, i64* %RAX
  %3461 = load i64, i64* %PC
  %3462 = add i64 %3461, 3
  store i64 %3462, i64* %PC
  %3463 = trunc i64 %3460 to i32
  %3464 = shl i32 %3463, 1
  %3465 = icmp slt i32 %3463, 0
  %3466 = icmp slt i32 %3464, 0
  %3467 = xor i1 %3465, %3466
  %3468 = zext i32 %3464 to i64
  store i64 %3468, i64* %RAX, align 8, !tbaa !2428
  %3469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3470 = zext i1 %3465 to i8
  store i8 %3470, i8* %3469, align 1, !tbaa !2451
  %3471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3472 = and i32 %3464, 254
  %3473 = call i32 @llvm.ctpop.i32(i32 %3472) #17
  %3474 = trunc i32 %3473 to i8
  %3475 = and i8 %3474, 1
  %3476 = xor i8 %3475, 1
  store i8 %3476, i8* %3471, align 1, !tbaa !2451
  %3477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3477, align 1, !tbaa !2451
  %3478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3479 = icmp eq i32 %3464, 0
  %3480 = zext i1 %3479 to i8
  store i8 %3480, i8* %3478, align 1, !tbaa !2451
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3482 = lshr i32 %3464, 31
  %3483 = trunc i32 %3482 to i8
  store i8 %3483, i8* %3481, align 1, !tbaa !2451
  %3484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3485 = zext i1 %3467 to i8
  store i8 %3485, i8* %3484, align 1, !tbaa !2451
  %3486 = load i64, i64* %RBP
  %3487 = sub i64 %3486, 52
  %3488 = load i32, i32* %EAX
  %3489 = zext i32 %3488 to i64
  %3490 = load i64, i64* %PC
  %3491 = add i64 %3490, 3
  store i64 %3491, i64* %PC
  %3492 = inttoptr i64 %3487 to i32*
  store i32 %3488, i32* %3492
  %3493 = load i64, i64* %RBP
  %3494 = sub i64 %3493, 48
  %3495 = load i64, i64* %PC
  %3496 = add i64 %3495, 3
  store i64 %3496, i64* %PC
  %3497 = inttoptr i64 %3494 to i32*
  %3498 = load i32, i32* %3497
  %3499 = zext i32 %3498 to i64
  store i64 %3499, i64* %RAX, align 8, !tbaa !2428
  %3500 = load i64, i64* %RAX
  %3501 = load i64, i64* %PC
  %3502 = add i64 %3501, 3
  store i64 %3502, i64* %PC
  %3503 = and i64 %3500, 4294967295
  %3504 = shl i64 %3503, 2
  %3505 = trunc i64 %3504 to i32
  %3506 = icmp slt i32 %3505, 0
  %3507 = shl i32 %3505, 1
  %3508 = zext i32 %3507 to i64
  store i64 %3508, i64* %RAX, align 8, !tbaa !2428
  %3509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3510 = zext i1 %3506 to i8
  store i8 %3510, i8* %3509, align 1, !tbaa !2451
  %3511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3512 = and i32 %3507, 254
  %3513 = call i32 @llvm.ctpop.i32(i32 %3512) #17
  %3514 = trunc i32 %3513 to i8
  %3515 = and i8 %3514, 1
  %3516 = xor i8 %3515, 1
  store i8 %3516, i8* %3511, align 1, !tbaa !2451
  %3517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3517, align 1, !tbaa !2451
  %3518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3519 = icmp eq i32 %3507, 0
  %3520 = zext i1 %3519 to i8
  store i8 %3520, i8* %3518, align 1, !tbaa !2451
  %3521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3522 = lshr i32 %3507, 31
  %3523 = trunc i32 %3522 to i8
  store i8 %3523, i8* %3521, align 1, !tbaa !2451
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3524, align 1, !tbaa !2451
  %3525 = load i32, i32* %EAX
  %3526 = zext i32 %3525 to i64
  %3527 = load i64, i64* %RBP
  %3528 = sub i64 %3527, 44
  %3529 = load i64, i64* %PC
  %3530 = add i64 %3529, 3
  store i64 %3530, i64* %PC
  %3531 = inttoptr i64 %3528 to i32*
  %3532 = load i32, i32* %3531
  %3533 = sub i32 %3525, %3532
  %3534 = icmp ult i32 %3525, %3532
  %3535 = zext i1 %3534 to i8
  %3536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3535, i8* %3536, align 1, !tbaa !2432
  %3537 = and i32 %3533, 255
  %3538 = call i32 @llvm.ctpop.i32(i32 %3537) #17
  %3539 = trunc i32 %3538 to i8
  %3540 = and i8 %3539, 1
  %3541 = xor i8 %3540, 1
  %3542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3541, i8* %3542, align 1, !tbaa !2446
  %3543 = xor i32 %3532, %3525
  %3544 = xor i32 %3543, %3533
  %3545 = lshr i32 %3544, 4
  %3546 = trunc i32 %3545 to i8
  %3547 = and i8 %3546, 1
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3547, i8* %3548, align 1, !tbaa !2447
  %3549 = icmp eq i32 %3533, 0
  %3550 = zext i1 %3549 to i8
  %3551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3550, i8* %3551, align 1, !tbaa !2448
  %3552 = lshr i32 %3533, 31
  %3553 = trunc i32 %3552 to i8
  %3554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3553, i8* %3554, align 1, !tbaa !2449
  %3555 = lshr i32 %3525, 31
  %3556 = lshr i32 %3532, 31
  %3557 = xor i32 %3556, %3555
  %3558 = xor i32 %3552, %3555
  %3559 = add nuw nsw i32 %3558, %3557
  %3560 = icmp eq i32 %3559, 2
  %3561 = zext i1 %3560 to i8
  %3562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3561, i8* %3562, align 1, !tbaa !2450
  %3563 = load i64, i64* %PC
  %3564 = add i64 %3563, 1294
  %3565 = load i64, i64* %PC
  %3566 = add i64 %3565, 6
  %3567 = load i64, i64* %PC
  %3568 = add i64 %3567, 6
  store i64 %3568, i64* %PC
  %3569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3570 = load i8, i8* %3569, align 1, !tbaa !2448
  %3571 = icmp eq i8 %3570, 0
  %3572 = zext i1 %3571 to i8
  store i8 %3572, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3574 = select i1 %3571, i64 %3564, i64 %3566
  store i64 %3574, i64* %3573, align 8, !tbaa !2428
  %3575 = load i8, i8* %BRANCH_TAKEN
  %3576 = icmp eq i8 %3575, 1
  br i1 %3576, label %block_4021bb, label %block_401cb3

block_401c55:                                     ; preds = %block_401c45, %block_401c61
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.1, %block_401c45 ], [ %MEMORY.6, %block_401c61 ]
  %3577 = load i64, i64* %RBP
  %3578 = sub i64 %3577, 28
  %3579 = load i64, i64* %PC
  %3580 = add i64 %3579, 3
  store i64 %3580, i64* %PC
  %3581 = inttoptr i64 %3578 to i32*
  %3582 = load i32, i32* %3581
  %3583 = zext i32 %3582 to i64
  store i64 %3583, i64* %RAX, align 8, !tbaa !2428
  %3584 = load i32, i32* %EAX
  %3585 = zext i32 %3584 to i64
  %3586 = load i64, i64* %RBP
  %3587 = sub i64 %3586, 48
  %3588 = load i64, i64* %PC
  %3589 = add i64 %3588, 3
  store i64 %3589, i64* %PC
  %3590 = inttoptr i64 %3587 to i32*
  %3591 = load i32, i32* %3590
  %3592 = sub i32 %3584, %3591
  %3593 = icmp ult i32 %3584, %3591
  %3594 = zext i1 %3593 to i8
  %3595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3594, i8* %3595, align 1, !tbaa !2432
  %3596 = and i32 %3592, 255
  %3597 = call i32 @llvm.ctpop.i32(i32 %3596) #17
  %3598 = trunc i32 %3597 to i8
  %3599 = and i8 %3598, 1
  %3600 = xor i8 %3599, 1
  %3601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3600, i8* %3601, align 1, !tbaa !2446
  %3602 = xor i32 %3591, %3584
  %3603 = xor i32 %3602, %3592
  %3604 = lshr i32 %3603, 4
  %3605 = trunc i32 %3604 to i8
  %3606 = and i8 %3605, 1
  %3607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3606, i8* %3607, align 1, !tbaa !2447
  %3608 = icmp eq i32 %3592, 0
  %3609 = zext i1 %3608 to i8
  %3610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3609, i8* %3610, align 1, !tbaa !2448
  %3611 = lshr i32 %3592, 31
  %3612 = trunc i32 %3611 to i8
  %3613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3612, i8* %3613, align 1, !tbaa !2449
  %3614 = lshr i32 %3584, 31
  %3615 = lshr i32 %3591, 31
  %3616 = xor i32 %3615, %3614
  %3617 = xor i32 %3611, %3614
  %3618 = add nuw nsw i32 %3617, %3616
  %3619 = icmp eq i32 %3618, 2
  %3620 = zext i1 %3619 to i8
  %3621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3620, i8* %3621, align 1, !tbaa !2450
  %3622 = load i64, i64* %PC
  %3623 = add i64 %3622, 50
  %3624 = load i64, i64* %PC
  %3625 = add i64 %3624, 6
  %3626 = load i64, i64* %PC
  %3627 = add i64 %3626, 6
  store i64 %3627, i64* %PC
  %3628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3629 = load i8, i8* %3628, align 1, !tbaa !2449
  %3630 = icmp ne i8 %3629, 0
  %3631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3632 = load i8, i8* %3631, align 1, !tbaa !2450
  %3633 = icmp ne i8 %3632, 0
  %3634 = xor i1 %3630, %3633
  %3635 = xor i1 %3634, true
  %3636 = zext i1 %3635 to i8
  store i8 %3636, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3638 = select i1 %3634, i64 %3625, i64 %3623
  store i64 %3638, i64* %3637, align 8, !tbaa !2428
  %3639 = load i8, i8* %BRANCH_TAKEN
  %3640 = icmp eq i8 %3639, 1
  %3641 = load i64, i64* %RBP
  br i1 %3640, label %block_401c8d, label %block_401c61

block_401c8d:                                     ; preds = %block_401c55
  %3642 = sub i64 %3641, 48
  %3643 = load i64, i64* %PC
  %3644 = add i64 %3643, 3
  store i64 %3644, i64* %PC
  %3645 = inttoptr i64 %3642 to i32*
  %3646 = load i32, i32* %3645
  %3647 = zext i32 %3646 to i64
  store i64 %3647, i64* %RAX, align 8, !tbaa !2428
  %3648 = load i64, i64* %RAX
  %3649 = load i64, i64* %PC
  %3650 = add i64 %3649, 3
  store i64 %3650, i64* %PC
  %3651 = trunc i64 %3648 to i32
  %3652 = shl i32 %3651, 1
  %3653 = icmp slt i32 %3651, 0
  %3654 = icmp slt i32 %3652, 0
  %3655 = xor i1 %3653, %3654
  %3656 = zext i32 %3652 to i64
  store i64 %3656, i64* %RAX, align 8, !tbaa !2428
  %3657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3658 = zext i1 %3653 to i8
  store i8 %3658, i8* %3657, align 1, !tbaa !2451
  %3659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3660 = and i32 %3652, 254
  %3661 = call i32 @llvm.ctpop.i32(i32 %3660) #17
  %3662 = trunc i32 %3661 to i8
  %3663 = and i8 %3662, 1
  %3664 = xor i8 %3663, 1
  store i8 %3664, i8* %3659, align 1, !tbaa !2451
  %3665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3665, align 1, !tbaa !2451
  %3666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3667 = icmp eq i32 %3652, 0
  %3668 = zext i1 %3667 to i8
  store i8 %3668, i8* %3666, align 1, !tbaa !2451
  %3669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3670 = lshr i32 %3652, 31
  %3671 = trunc i32 %3670 to i8
  store i8 %3671, i8* %3669, align 1, !tbaa !2451
  %3672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3673 = zext i1 %3655 to i8
  store i8 %3673, i8* %3672, align 1, !tbaa !2451
  %3674 = load i64, i64* %RBP
  %3675 = sub i64 %3674, 48
  %3676 = load i32, i32* %EAX
  %3677 = zext i32 %3676 to i64
  %3678 = load i64, i64* %PC
  %3679 = add i64 %3678, 3
  store i64 %3679, i64* %PC
  %3680 = inttoptr i64 %3675 to i32*
  store i32 %3676, i32* %3680
  %3681 = load i64, i64* %PC
  %3682 = sub i64 %3681, 96
  %3683 = load i64, i64* %PC
  %3684 = add i64 %3683, 5
  store i64 %3684, i64* %PC
  %3685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3682, i64* %3685, align 8, !tbaa !2428
  br label %block_401c36

block_401cd9:                                     ; preds = %block_401ccd
  %3686 = sub i64 %1499, 28
  %3687 = load i64, i64* %PC
  %3688 = add i64 %3687, 3
  store i64 %3688, i64* %PC
  %3689 = inttoptr i64 %3686 to i32*
  %3690 = load i32, i32* %3689
  %3691 = zext i32 %3690 to i64
  store i64 %3691, i64* %RCX, align 8, !tbaa !2428
  %3692 = load i64, i64* %RCX
  %3693 = load i64, i64* %PC
  %3694 = add i64 %3693, 3
  store i64 %3694, i64* %PC
  %3695 = trunc i64 %3692 to i32
  %3696 = shl i32 %3695, 1
  %3697 = icmp slt i32 %3695, 0
  %3698 = icmp slt i32 %3696, 0
  %3699 = xor i1 %3697, %3698
  %3700 = zext i32 %3696 to i64
  store i64 %3700, i64* %RCX, align 8, !tbaa !2428
  %3701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3702 = zext i1 %3697 to i8
  store i8 %3702, i8* %3701, align 1, !tbaa !2451
  %3703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3704 = and i32 %3696, 254
  %3705 = call i32 @llvm.ctpop.i32(i32 %3704) #17
  %3706 = trunc i32 %3705 to i8
  %3707 = and i8 %3706, 1
  %3708 = xor i8 %3707, 1
  store i8 %3708, i8* %3703, align 1, !tbaa !2451
  %3709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3709, align 1, !tbaa !2451
  %3710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3711 = icmp eq i32 %3696, 0
  %3712 = zext i1 %3711 to i8
  store i8 %3712, i8* %3710, align 1, !tbaa !2451
  %3713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3714 = lshr i32 %3696, 31
  %3715 = trunc i32 %3714 to i8
  store i8 %3715, i8* %3713, align 1, !tbaa !2451
  %3716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3717 = zext i1 %3699 to i8
  store i8 %3717, i8* %3716, align 1, !tbaa !2451
  %3718 = load i64, i64* %RBP
  %3719 = sub i64 %3718, 16
  %3720 = load i64, i64* %PC
  %3721 = add i64 %3720, 4
  store i64 %3721, i64* %PC
  %3722 = inttoptr i64 %3719 to i64*
  %3723 = load i64, i64* %3722
  store i64 %3723, i64* %RDX, align 8, !tbaa !2428
  %3724 = load i64, i64* %RBP
  %3725 = sub i64 %3724, 36
  %3726 = load i64, i64* %PC
  %3727 = add i64 %3726, 4
  store i64 %3727, i64* %PC
  %3728 = inttoptr i64 %3725 to i32*
  %3729 = load i32, i32* %3728
  %3730 = sext i32 %3729 to i64
  store i64 %3730, i64* %RSI, align 8, !tbaa !2428
  %3731 = load i64, i64* %RCX
  %3732 = load i64, i64* %RDX
  %3733 = load i64, i64* %RSI
  %3734 = mul i64 %3733, 4
  %3735 = add i64 %3734, %3732
  %3736 = load i64, i64* %PC
  %3737 = add i64 %3736, 3
  store i64 %3737, i64* %PC
  %3738 = trunc i64 %3731 to i32
  %3739 = inttoptr i64 %3735 to i32*
  %3740 = load i32, i32* %3739
  %3741 = add i32 %3740, %3738
  %3742 = zext i32 %3741 to i64
  store i64 %3742, i64* %RCX, align 8, !tbaa !2428
  %3743 = icmp ult i32 %3741, %3738
  %3744 = icmp ult i32 %3741, %3740
  %3745 = or i1 %3743, %3744
  %3746 = zext i1 %3745 to i8
  %3747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3746, i8* %3747, align 1, !tbaa !2432
  %3748 = and i32 %3741, 255
  %3749 = call i32 @llvm.ctpop.i32(i32 %3748) #17
  %3750 = trunc i32 %3749 to i8
  %3751 = and i8 %3750, 1
  %3752 = xor i8 %3751, 1
  %3753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3752, i8* %3753, align 1, !tbaa !2446
  %3754 = xor i32 %3740, %3738
  %3755 = xor i32 %3754, %3741
  %3756 = lshr i32 %3755, 4
  %3757 = trunc i32 %3756 to i8
  %3758 = and i8 %3757, 1
  %3759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3758, i8* %3759, align 1, !tbaa !2447
  %3760 = icmp eq i32 %3741, 0
  %3761 = zext i1 %3760 to i8
  %3762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3761, i8* %3762, align 1, !tbaa !2448
  %3763 = lshr i32 %3741, 31
  %3764 = trunc i32 %3763 to i8
  %3765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3764, i8* %3765, align 1, !tbaa !2449
  %3766 = lshr i32 %3738, 31
  %3767 = lshr i32 %3740, 31
  %3768 = xor i32 %3763, %3766
  %3769 = xor i32 %3763, %3767
  %3770 = add nuw nsw i32 %3768, %3769
  %3771 = icmp eq i32 %3770, 2
  %3772 = zext i1 %3771 to i8
  %3773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3772, i8* %3773, align 1, !tbaa !2450
  %3774 = load i64, i64* %RBP
  %3775 = sub i64 %3774, 32
  %3776 = load i32, i32* %ECX
  %3777 = zext i32 %3776 to i64
  %3778 = load i64, i64* %PC
  %3779 = add i64 %3778, 3
  store i64 %3779, i64* %PC
  %3780 = inttoptr i64 %3775 to i32*
  store i32 %3776, i32* %3780
  %3781 = load i64, i64* %RBP
  %3782 = sub i64 %3781, 36
  %3783 = load i64, i64* %PC
  %3784 = add i64 %3783, 3
  store i64 %3784, i64* %PC
  %3785 = inttoptr i64 %3782 to i32*
  %3786 = load i32, i32* %3785
  %3787 = zext i32 %3786 to i64
  store i64 %3787, i64* %RCX, align 8, !tbaa !2428
  %3788 = load i64, i64* %RCX
  %3789 = load i64, i64* %PC
  %3790 = add i64 %3789, 3
  store i64 %3790, i64* %PC
  %3791 = trunc i64 %3788 to i32
  %3792 = shl i32 %3791, 1
  %3793 = icmp slt i32 %3791, 0
  %3794 = icmp slt i32 %3792, 0
  %3795 = xor i1 %3793, %3794
  %3796 = zext i32 %3792 to i64
  store i64 %3796, i64* %RCX, align 8, !tbaa !2428
  %3797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3798 = zext i1 %3793 to i8
  store i8 %3798, i8* %3797, align 1, !tbaa !2451
  %3799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3800 = and i32 %3792, 254
  %3801 = call i32 @llvm.ctpop.i32(i32 %3800) #17
  %3802 = trunc i32 %3801 to i8
  %3803 = and i8 %3802, 1
  %3804 = xor i8 %3803, 1
  store i8 %3804, i8* %3799, align 1, !tbaa !2451
  %3805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3805, align 1, !tbaa !2451
  %3806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3807 = icmp eq i32 %3792, 0
  %3808 = zext i1 %3807 to i8
  store i8 %3808, i8* %3806, align 1, !tbaa !2451
  %3809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3810 = lshr i32 %3792, 31
  %3811 = trunc i32 %3810 to i8
  store i8 %3811, i8* %3809, align 1, !tbaa !2451
  %3812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3813 = zext i1 %3795 to i8
  store i8 %3813, i8* %3812, align 1, !tbaa !2451
  %3814 = load i64, i64* %RBP
  %3815 = sub i64 %3814, 16
  %3816 = load i64, i64* %PC
  %3817 = add i64 %3816, 4
  store i64 %3817, i64* %PC
  %3818 = inttoptr i64 %3815 to i64*
  %3819 = load i64, i64* %3818
  store i64 %3819, i64* %RDX, align 8, !tbaa !2428
  %3820 = load i64, i64* %RBP
  %3821 = sub i64 %3820, 28
  %3822 = load i64, i64* %PC
  %3823 = add i64 %3822, 4
  store i64 %3823, i64* %PC
  %3824 = inttoptr i64 %3821 to i32*
  %3825 = load i32, i32* %3824
  %3826 = sext i32 %3825 to i64
  store i64 %3826, i64* %RSI, align 8, !tbaa !2428
  %3827 = load i64, i64* %RCX
  %3828 = load i64, i64* %RDX
  %3829 = load i64, i64* %RSI
  %3830 = mul i64 %3829, 4
  %3831 = add i64 %3830, %3828
  %3832 = load i64, i64* %PC
  %3833 = add i64 %3832, 3
  store i64 %3833, i64* %PC
  %3834 = trunc i64 %3827 to i32
  %3835 = inttoptr i64 %3831 to i32*
  %3836 = load i32, i32* %3835
  %3837 = add i32 %3836, %3834
  %3838 = zext i32 %3837 to i64
  store i64 %3838, i64* %RCX, align 8, !tbaa !2428
  %3839 = icmp ult i32 %3837, %3834
  %3840 = icmp ult i32 %3837, %3836
  %3841 = or i1 %3839, %3840
  %3842 = zext i1 %3841 to i8
  %3843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3842, i8* %3843, align 1, !tbaa !2432
  %3844 = and i32 %3837, 255
  %3845 = call i32 @llvm.ctpop.i32(i32 %3844) #17
  %3846 = trunc i32 %3845 to i8
  %3847 = and i8 %3846, 1
  %3848 = xor i8 %3847, 1
  %3849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3848, i8* %3849, align 1, !tbaa !2446
  %3850 = xor i32 %3836, %3834
  %3851 = xor i32 %3850, %3837
  %3852 = lshr i32 %3851, 4
  %3853 = trunc i32 %3852 to i8
  %3854 = and i8 %3853, 1
  %3855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3854, i8* %3855, align 1, !tbaa !2447
  %3856 = icmp eq i32 %3837, 0
  %3857 = zext i1 %3856 to i8
  %3858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3857, i8* %3858, align 1, !tbaa !2448
  %3859 = lshr i32 %3837, 31
  %3860 = trunc i32 %3859 to i8
  %3861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3860, i8* %3861, align 1, !tbaa !2449
  %3862 = lshr i32 %3834, 31
  %3863 = lshr i32 %3836, 31
  %3864 = xor i32 %3859, %3862
  %3865 = xor i32 %3859, %3863
  %3866 = add nuw nsw i32 %3864, %3865
  %3867 = icmp eq i32 %3866, 2
  %3868 = zext i1 %3867 to i8
  %3869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3868, i8* %3869, align 1, !tbaa !2450
  %3870 = load i64, i64* %RBP
  %3871 = sub i64 %3870, 40
  %3872 = load i32, i32* %ECX
  %3873 = zext i32 %3872 to i64
  %3874 = load i64, i64* %PC
  %3875 = add i64 %3874, 3
  store i64 %3875, i64* %PC
  %3876 = inttoptr i64 %3871 to i32*
  store i32 %3872, i32* %3876
  %3877 = load i64, i64* %RBP
  %3878 = sub i64 %3877, 24
  %3879 = load i64, i64* %PC
  %3880 = add i64 %3879, 4
  store i64 %3880, i64* %PC
  %3881 = inttoptr i64 %3878 to i64*
  %3882 = load i64, i64* %3881
  store i64 %3882, i64* %RDX, align 8, !tbaa !2428
  %3883 = load i64, i64* %RBP
  %3884 = sub i64 %3883, 32
  %3885 = load i64, i64* %PC
  %3886 = add i64 %3885, 4
  store i64 %3886, i64* %PC
  %3887 = inttoptr i64 %3884 to i32*
  %3888 = load i32, i32* %3887
  %3889 = sext i32 %3888 to i64
  store i64 %3889, i64* %RSI, align 8, !tbaa !2428
  %3890 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3891 = load i64, i64* %RDX
  %3892 = load i64, i64* %RSI
  %3893 = mul i64 %3892, 8
  %3894 = add i64 %3893, %3891
  %3895 = load i64, i64* %PC
  %3896 = add i64 %3895, 5
  store i64 %3896, i64* %PC
  %3897 = inttoptr i64 %3894 to double*
  %3898 = load double, double* %3897
  %3899 = bitcast i8* %3890 to double*
  store double %3898, double* %3899, align 1, !tbaa !2452
  %3900 = getelementptr inbounds i8, i8* %3890, i64 8
  %3901 = bitcast i8* %3900 to double*
  store double 0.000000e+00, double* %3901, align 1, !tbaa !2452
  %3902 = load i64, i64* %RBP
  %3903 = sub i64 %3902, 64
  %3904 = bitcast %union.vec128_t* %XMM0 to i8*
  %3905 = load i64, i64* %PC
  %3906 = add i64 %3905, 5
  store i64 %3906, i64* %PC
  %3907 = bitcast i8* %3904 to double*
  %3908 = load double, double* %3907, align 1
  %3909 = inttoptr i64 %3903 to double*
  store double %3908, double* %3909
  %3910 = load i64, i64* %RBP
  %3911 = sub i64 %3910, 24
  %3912 = load i64, i64* %PC
  %3913 = add i64 %3912, 4
  store i64 %3913, i64* %PC
  %3914 = inttoptr i64 %3911 to i64*
  %3915 = load i64, i64* %3914
  store i64 %3915, i64* %RDX, align 8, !tbaa !2428
  %3916 = load i64, i64* %RBP
  %3917 = sub i64 %3916, 32
  %3918 = load i64, i64* %PC
  %3919 = add i64 %3918, 3
  store i64 %3919, i64* %PC
  %3920 = inttoptr i64 %3917 to i32*
  %3921 = load i32, i32* %3920
  %3922 = zext i32 %3921 to i64
  store i64 %3922, i64* %RCX, align 8, !tbaa !2428
  %3923 = load i64, i64* %RCX
  %3924 = load i64, i64* %PC
  %3925 = add i64 %3924, 3
  store i64 %3925, i64* %PC
  %3926 = trunc i64 %3923 to i32
  %3927 = add i32 1, %3926
  %3928 = zext i32 %3927 to i64
  store i64 %3928, i64* %RCX, align 8, !tbaa !2428
  %3929 = icmp ult i32 %3927, %3926
  %3930 = icmp ult i32 %3927, 1
  %3931 = or i1 %3929, %3930
  %3932 = zext i1 %3931 to i8
  %3933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3932, i8* %3933, align 1, !tbaa !2432
  %3934 = and i32 %3927, 255
  %3935 = call i32 @llvm.ctpop.i32(i32 %3934) #17
  %3936 = trunc i32 %3935 to i8
  %3937 = and i8 %3936, 1
  %3938 = xor i8 %3937, 1
  %3939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3938, i8* %3939, align 1, !tbaa !2446
  %3940 = xor i64 1, %3923
  %3941 = trunc i64 %3940 to i32
  %3942 = xor i32 %3941, %3927
  %3943 = lshr i32 %3942, 4
  %3944 = trunc i32 %3943 to i8
  %3945 = and i8 %3944, 1
  %3946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3945, i8* %3946, align 1, !tbaa !2447
  %3947 = icmp eq i32 %3927, 0
  %3948 = zext i1 %3947 to i8
  %3949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3948, i8* %3949, align 1, !tbaa !2448
  %3950 = lshr i32 %3927, 31
  %3951 = trunc i32 %3950 to i8
  %3952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3951, i8* %3952, align 1, !tbaa !2449
  %3953 = lshr i32 %3926, 31
  %3954 = xor i32 %3950, %3953
  %3955 = add nuw nsw i32 %3954, %3950
  %3956 = icmp eq i32 %3955, 2
  %3957 = zext i1 %3956 to i8
  %3958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3957, i8* %3958, align 1, !tbaa !2450
  %3959 = load i32, i32* %ECX
  %3960 = zext i32 %3959 to i64
  %3961 = load i64, i64* %PC
  %3962 = add i64 %3961, 3
  store i64 %3962, i64* %PC
  %3963 = shl i64 %3960, 32
  %3964 = ashr exact i64 %3963, 32
  store i64 %3964, i64* %RSI, align 8, !tbaa !2428
  %3965 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3966 = load i64, i64* %RDX
  %3967 = load i64, i64* %RSI
  %3968 = mul i64 %3967, 8
  %3969 = add i64 %3968, %3966
  %3970 = load i64, i64* %PC
  %3971 = add i64 %3970, 5
  store i64 %3971, i64* %PC
  %3972 = inttoptr i64 %3969 to double*
  %3973 = load double, double* %3972
  %3974 = bitcast i8* %3965 to double*
  store double %3973, double* %3974, align 1, !tbaa !2452
  %3975 = getelementptr inbounds i8, i8* %3965, i64 8
  %3976 = bitcast i8* %3975 to double*
  store double 0.000000e+00, double* %3976, align 1, !tbaa !2452
  %3977 = bitcast %union.vec128_t* %XMM0 to i8*
  %3978 = load i64, i64* %PC
  %3979 = add i64 %3978, 5
  store i64 %3979, i64* %PC
  %3980 = bitcast i8* %3977 to i64*
  %3981 = load i64, i64* %3980, align 1
  store i64 %3981, i64* %RDX, align 1, !tbaa !2428
  %3982 = load i64, i64* %RDX
  %3983 = load i64, i64* %RAX
  %3984 = load i64, i64* %PC
  %3985 = add i64 %3984, 3
  store i64 %3985, i64* %PC
  %3986 = xor i64 %3983, %3982
  store i64 %3986, i64* %RDX, align 8, !tbaa !2428
  %3987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3987, align 1, !tbaa !2432
  %3988 = trunc i64 %3986 to i32
  %3989 = and i32 %3988, 255
  %3990 = call i32 @llvm.ctpop.i32(i32 %3989) #17
  %3991 = trunc i32 %3990 to i8
  %3992 = and i8 %3991, 1
  %3993 = xor i8 %3992, 1
  %3994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3993, i8* %3994, align 1, !tbaa !2446
  %3995 = icmp eq i64 %3986, 0
  %3996 = zext i1 %3995 to i8
  %3997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3996, i8* %3997, align 1, !tbaa !2448
  %3998 = lshr i64 %3986, 63
  %3999 = trunc i64 %3998 to i8
  %4000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3999, i8* %4000, align 1, !tbaa !2449
  %4001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4001, align 1, !tbaa !2450
  %4002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4002, align 1, !tbaa !2447
  %4003 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4004 = load i64, i64* %RDX
  %4005 = load i64, i64* %PC
  %4006 = add i64 %4005, 5
  store i64 %4006, i64* %PC
  %4007 = bitcast i8* %4003 to i64*
  store i64 %4004, i64* %4007, align 1, !tbaa !2428
  %4008 = getelementptr inbounds i8, i8* %4003, i64 8
  %4009 = bitcast i8* %4008 to i64*
  store i64 0, i64* %4009, align 1, !tbaa !2428
  %4010 = load i64, i64* %RBP
  %4011 = sub i64 %4010, 72
  %4012 = bitcast %union.vec128_t* %XMM0 to i8*
  %4013 = load i64, i64* %PC
  %4014 = add i64 %4013, 5
  store i64 %4014, i64* %PC
  %4015 = bitcast i8* %4012 to double*
  %4016 = load double, double* %4015, align 1
  %4017 = inttoptr i64 %4011 to double*
  store double %4016, double* %4017
  %4018 = load i64, i64* %RBP
  %4019 = sub i64 %4018, 24
  %4020 = load i64, i64* %PC
  %4021 = add i64 %4020, 4
  store i64 %4021, i64* %PC
  %4022 = inttoptr i64 %4019 to i64*
  %4023 = load i64, i64* %4022
  store i64 %4023, i64* %RDX, align 8, !tbaa !2428
  %4024 = load i64, i64* %RBP
  %4025 = sub i64 %4024, 40
  %4026 = load i64, i64* %PC
  %4027 = add i64 %4026, 4
  store i64 %4027, i64* %PC
  %4028 = inttoptr i64 %4025 to i32*
  %4029 = load i32, i32* %4028
  %4030 = sext i32 %4029 to i64
  store i64 %4030, i64* %RSI, align 8, !tbaa !2428
  %4031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4032 = load i64, i64* %RDX
  %4033 = load i64, i64* %RSI
  %4034 = mul i64 %4033, 8
  %4035 = add i64 %4034, %4032
  %4036 = load i64, i64* %PC
  %4037 = add i64 %4036, 5
  store i64 %4037, i64* %PC
  %4038 = inttoptr i64 %4035 to double*
  %4039 = load double, double* %4038
  %4040 = bitcast i8* %4031 to double*
  store double %4039, double* %4040, align 1, !tbaa !2452
  %4041 = getelementptr inbounds i8, i8* %4031, i64 8
  %4042 = bitcast i8* %4041 to double*
  store double 0.000000e+00, double* %4042, align 1, !tbaa !2452
  %4043 = load i64, i64* %RBP
  %4044 = sub i64 %4043, 80
  %4045 = bitcast %union.vec128_t* %XMM0 to i8*
  %4046 = load i64, i64* %PC
  %4047 = add i64 %4046, 5
  store i64 %4047, i64* %PC
  %4048 = bitcast i8* %4045 to double*
  %4049 = load double, double* %4048, align 1
  %4050 = inttoptr i64 %4044 to double*
  store double %4049, double* %4050
  %4051 = load i64, i64* %RBP
  %4052 = sub i64 %4051, 24
  %4053 = load i64, i64* %PC
  %4054 = add i64 %4053, 4
  store i64 %4054, i64* %PC
  %4055 = inttoptr i64 %4052 to i64*
  %4056 = load i64, i64* %4055
  store i64 %4056, i64* %RDX, align 8, !tbaa !2428
  %4057 = load i64, i64* %RBP
  %4058 = sub i64 %4057, 40
  %4059 = load i64, i64* %PC
  %4060 = add i64 %4059, 3
  store i64 %4060, i64* %PC
  %4061 = inttoptr i64 %4058 to i32*
  %4062 = load i32, i32* %4061
  %4063 = zext i32 %4062 to i64
  store i64 %4063, i64* %RCX, align 8, !tbaa !2428
  %4064 = load i64, i64* %RCX
  %4065 = load i64, i64* %PC
  %4066 = add i64 %4065, 3
  store i64 %4066, i64* %PC
  %4067 = trunc i64 %4064 to i32
  %4068 = add i32 1, %4067
  %4069 = zext i32 %4068 to i64
  store i64 %4069, i64* %RCX, align 8, !tbaa !2428
  %4070 = icmp ult i32 %4068, %4067
  %4071 = icmp ult i32 %4068, 1
  %4072 = or i1 %4070, %4071
  %4073 = zext i1 %4072 to i8
  %4074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4073, i8* %4074, align 1, !tbaa !2432
  %4075 = and i32 %4068, 255
  %4076 = call i32 @llvm.ctpop.i32(i32 %4075) #17
  %4077 = trunc i32 %4076 to i8
  %4078 = and i8 %4077, 1
  %4079 = xor i8 %4078, 1
  %4080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4079, i8* %4080, align 1, !tbaa !2446
  %4081 = xor i64 1, %4064
  %4082 = trunc i64 %4081 to i32
  %4083 = xor i32 %4082, %4068
  %4084 = lshr i32 %4083, 4
  %4085 = trunc i32 %4084 to i8
  %4086 = and i8 %4085, 1
  %4087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4086, i8* %4087, align 1, !tbaa !2447
  %4088 = icmp eq i32 %4068, 0
  %4089 = zext i1 %4088 to i8
  %4090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4089, i8* %4090, align 1, !tbaa !2448
  %4091 = lshr i32 %4068, 31
  %4092 = trunc i32 %4091 to i8
  %4093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4092, i8* %4093, align 1, !tbaa !2449
  %4094 = lshr i32 %4067, 31
  %4095 = xor i32 %4091, %4094
  %4096 = add nuw nsw i32 %4095, %4091
  %4097 = icmp eq i32 %4096, 2
  %4098 = zext i1 %4097 to i8
  %4099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4098, i8* %4099, align 1, !tbaa !2450
  %4100 = load i32, i32* %ECX
  %4101 = zext i32 %4100 to i64
  %4102 = load i64, i64* %PC
  %4103 = add i64 %4102, 3
  store i64 %4103, i64* %PC
  %4104 = shl i64 %4101, 32
  %4105 = ashr exact i64 %4104, 32
  store i64 %4105, i64* %RSI, align 8, !tbaa !2428
  %4106 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4107 = load i64, i64* %RDX
  %4108 = load i64, i64* %RSI
  %4109 = mul i64 %4108, 8
  %4110 = add i64 %4109, %4107
  %4111 = load i64, i64* %PC
  %4112 = add i64 %4111, 5
  store i64 %4112, i64* %PC
  %4113 = inttoptr i64 %4110 to double*
  %4114 = load double, double* %4113
  %4115 = bitcast i8* %4106 to double*
  store double %4114, double* %4115, align 1, !tbaa !2452
  %4116 = getelementptr inbounds i8, i8* %4106, i64 8
  %4117 = bitcast i8* %4116 to double*
  store double 0.000000e+00, double* %4117, align 1, !tbaa !2452
  %4118 = bitcast %union.vec128_t* %XMM0 to i8*
  %4119 = load i64, i64* %PC
  %4120 = add i64 %4119, 5
  store i64 %4120, i64* %PC
  %4121 = bitcast i8* %4118 to i64*
  %4122 = load i64, i64* %4121, align 1
  store i64 %4122, i64* %RDX, align 1, !tbaa !2428
  %4123 = load i64, i64* %RDX
  %4124 = load i64, i64* %RAX
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 3
  store i64 %4126, i64* %PC
  %4127 = xor i64 %4124, %4123
  store i64 %4127, i64* %RDX, align 8, !tbaa !2428
  %4128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4128, align 1, !tbaa !2432
  %4129 = trunc i64 %4127 to i32
  %4130 = and i32 %4129, 255
  %4131 = call i32 @llvm.ctpop.i32(i32 %4130) #17
  %4132 = trunc i32 %4131 to i8
  %4133 = and i8 %4132, 1
  %4134 = xor i8 %4133, 1
  %4135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4134, i8* %4135, align 1, !tbaa !2446
  %4136 = icmp eq i64 %4127, 0
  %4137 = zext i1 %4136 to i8
  %4138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4137, i8* %4138, align 1, !tbaa !2448
  %4139 = lshr i64 %4127, 63
  %4140 = trunc i64 %4139 to i8
  %4141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4140, i8* %4141, align 1, !tbaa !2449
  %4142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4142, align 1, !tbaa !2450
  %4143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4143, align 1, !tbaa !2447
  %4144 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4145 = load i64, i64* %RDX
  %4146 = load i64, i64* %PC
  %4147 = add i64 %4146, 5
  store i64 %4147, i64* %PC
  %4148 = bitcast i8* %4144 to i64*
  store i64 %4145, i64* %4148, align 1, !tbaa !2428
  %4149 = getelementptr inbounds i8, i8* %4144, i64 8
  %4150 = bitcast i8* %4149 to i64*
  store i64 0, i64* %4150, align 1, !tbaa !2428
  %4151 = load i64, i64* %RBP
  %4152 = sub i64 %4151, 88
  %4153 = bitcast %union.vec128_t* %XMM0 to i8*
  %4154 = load i64, i64* %PC
  %4155 = add i64 %4154, 5
  store i64 %4155, i64* %PC
  %4156 = bitcast i8* %4153 to double*
  %4157 = load double, double* %4156, align 1
  %4158 = inttoptr i64 %4152 to double*
  store double %4157, double* %4158
  %4159 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4160 = load i64, i64* %RBP
  %4161 = sub i64 %4160, 80
  %4162 = load i64, i64* %PC
  %4163 = add i64 %4162, 5
  store i64 %4163, i64* %PC
  %4164 = inttoptr i64 %4161 to double*
  %4165 = load double, double* %4164
  %4166 = bitcast i8* %4159 to double*
  store double %4165, double* %4166, align 1, !tbaa !2452
  %4167 = getelementptr inbounds i8, i8* %4159, i64 8
  %4168 = bitcast i8* %4167 to double*
  store double 0.000000e+00, double* %4168, align 1, !tbaa !2452
  %4169 = load i64, i64* %RBP
  %4170 = sub i64 %4169, 24
  %4171 = load i64, i64* %PC
  %4172 = add i64 %4171, 4
  store i64 %4172, i64* %PC
  %4173 = inttoptr i64 %4170 to i64*
  %4174 = load i64, i64* %4173
  store i64 %4174, i64* %RDX, align 8, !tbaa !2428
  %4175 = load i64, i64* %RBP
  %4176 = sub i64 %4175, 32
  %4177 = load i64, i64* %PC
  %4178 = add i64 %4177, 4
  store i64 %4178, i64* %PC
  %4179 = inttoptr i64 %4176 to i32*
  %4180 = load i32, i32* %4179
  %4181 = sext i32 %4180 to i64
  store i64 %4181, i64* %RSI, align 8, !tbaa !2428
  %4182 = load i64, i64* %RDX
  %4183 = load i64, i64* %RSI
  %4184 = mul i64 %4183, 8
  %4185 = add i64 %4184, %4182
  %4186 = bitcast %union.vec128_t* %XMM0 to i8*
  %4187 = load i64, i64* %PC
  %4188 = add i64 %4187, 5
  store i64 %4188, i64* %PC
  %4189 = bitcast i8* %4186 to double*
  %4190 = load double, double* %4189, align 1
  %4191 = inttoptr i64 %4185 to double*
  store double %4190, double* %4191
  %4192 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4193 = load i64, i64* %RBP
  %4194 = sub i64 %4193, 88
  %4195 = load i64, i64* %PC
  %4196 = add i64 %4195, 5
  store i64 %4196, i64* %PC
  %4197 = inttoptr i64 %4194 to double*
  %4198 = load double, double* %4197
  %4199 = bitcast i8* %4192 to double*
  store double %4198, double* %4199, align 1, !tbaa !2452
  %4200 = getelementptr inbounds i8, i8* %4192, i64 8
  %4201 = bitcast i8* %4200 to double*
  store double 0.000000e+00, double* %4201, align 1, !tbaa !2452
  %4202 = load i64, i64* %RBP
  %4203 = sub i64 %4202, 24
  %4204 = load i64, i64* %PC
  %4205 = add i64 %4204, 4
  store i64 %4205, i64* %PC
  %4206 = inttoptr i64 %4203 to i64*
  %4207 = load i64, i64* %4206
  store i64 %4207, i64* %RDX, align 8, !tbaa !2428
  %4208 = load i64, i64* %RBP
  %4209 = sub i64 %4208, 32
  %4210 = load i64, i64* %PC
  %4211 = add i64 %4210, 3
  store i64 %4211, i64* %PC
  %4212 = inttoptr i64 %4209 to i32*
  %4213 = load i32, i32* %4212
  %4214 = zext i32 %4213 to i64
  store i64 %4214, i64* %RCX, align 8, !tbaa !2428
  %4215 = load i64, i64* %RCX
  %4216 = load i64, i64* %PC
  %4217 = add i64 %4216, 3
  store i64 %4217, i64* %PC
  %4218 = trunc i64 %4215 to i32
  %4219 = add i32 1, %4218
  %4220 = zext i32 %4219 to i64
  store i64 %4220, i64* %RCX, align 8, !tbaa !2428
  %4221 = icmp ult i32 %4219, %4218
  %4222 = icmp ult i32 %4219, 1
  %4223 = or i1 %4221, %4222
  %4224 = zext i1 %4223 to i8
  %4225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4224, i8* %4225, align 1, !tbaa !2432
  %4226 = and i32 %4219, 255
  %4227 = call i32 @llvm.ctpop.i32(i32 %4226) #17
  %4228 = trunc i32 %4227 to i8
  %4229 = and i8 %4228, 1
  %4230 = xor i8 %4229, 1
  %4231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4230, i8* %4231, align 1, !tbaa !2446
  %4232 = xor i64 1, %4215
  %4233 = trunc i64 %4232 to i32
  %4234 = xor i32 %4233, %4219
  %4235 = lshr i32 %4234, 4
  %4236 = trunc i32 %4235 to i8
  %4237 = and i8 %4236, 1
  %4238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4237, i8* %4238, align 1, !tbaa !2447
  %4239 = icmp eq i32 %4219, 0
  %4240 = zext i1 %4239 to i8
  %4241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4240, i8* %4241, align 1, !tbaa !2448
  %4242 = lshr i32 %4219, 31
  %4243 = trunc i32 %4242 to i8
  %4244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4243, i8* %4244, align 1, !tbaa !2449
  %4245 = lshr i32 %4218, 31
  %4246 = xor i32 %4242, %4245
  %4247 = add nuw nsw i32 %4246, %4242
  %4248 = icmp eq i32 %4247, 2
  %4249 = zext i1 %4248 to i8
  %4250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4249, i8* %4250, align 1, !tbaa !2450
  %4251 = load i32, i32* %ECX
  %4252 = zext i32 %4251 to i64
  %4253 = load i64, i64* %PC
  %4254 = add i64 %4253, 3
  store i64 %4254, i64* %PC
  %4255 = shl i64 %4252, 32
  %4256 = ashr exact i64 %4255, 32
  store i64 %4256, i64* %RSI, align 8, !tbaa !2428
  %4257 = load i64, i64* %RDX
  %4258 = load i64, i64* %RSI
  %4259 = mul i64 %4258, 8
  %4260 = add i64 %4259, %4257
  %4261 = bitcast %union.vec128_t* %XMM0 to i8*
  %4262 = load i64, i64* %PC
  %4263 = add i64 %4262, 5
  store i64 %4263, i64* %PC
  %4264 = bitcast i8* %4261 to double*
  %4265 = load double, double* %4264, align 1
  %4266 = inttoptr i64 %4260 to double*
  store double %4265, double* %4266
  %4267 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4268 = load i64, i64* %RBP
  %4269 = sub i64 %4268, 64
  %4270 = load i64, i64* %PC
  %4271 = add i64 %4270, 5
  store i64 %4271, i64* %PC
  %4272 = inttoptr i64 %4269 to double*
  %4273 = load double, double* %4272
  %4274 = bitcast i8* %4267 to double*
  store double %4273, double* %4274, align 1, !tbaa !2452
  %4275 = getelementptr inbounds i8, i8* %4267, i64 8
  %4276 = bitcast i8* %4275 to double*
  store double 0.000000e+00, double* %4276, align 1, !tbaa !2452
  %4277 = load i64, i64* %RBP
  %4278 = sub i64 %4277, 24
  %4279 = load i64, i64* %PC
  %4280 = add i64 %4279, 4
  store i64 %4280, i64* %PC
  %4281 = inttoptr i64 %4278 to i64*
  %4282 = load i64, i64* %4281
  store i64 %4282, i64* %RDX, align 8, !tbaa !2428
  %4283 = load i64, i64* %RBP
  %4284 = sub i64 %4283, 40
  %4285 = load i64, i64* %PC
  %4286 = add i64 %4285, 4
  store i64 %4286, i64* %PC
  %4287 = inttoptr i64 %4284 to i32*
  %4288 = load i32, i32* %4287
  %4289 = sext i32 %4288 to i64
  store i64 %4289, i64* %RSI, align 8, !tbaa !2428
  %4290 = load i64, i64* %RDX
  %4291 = load i64, i64* %RSI
  %4292 = mul i64 %4291, 8
  %4293 = add i64 %4292, %4290
  %4294 = bitcast %union.vec128_t* %XMM0 to i8*
  %4295 = load i64, i64* %PC
  %4296 = add i64 %4295, 5
  store i64 %4296, i64* %PC
  %4297 = bitcast i8* %4294 to double*
  %4298 = load double, double* %4297, align 1
  %4299 = inttoptr i64 %4293 to double*
  store double %4298, double* %4299
  %4300 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4301 = load i64, i64* %RBP
  %4302 = sub i64 %4301, 72
  %4303 = load i64, i64* %PC
  %4304 = add i64 %4303, 5
  store i64 %4304, i64* %PC
  %4305 = inttoptr i64 %4302 to double*
  %4306 = load double, double* %4305
  %4307 = bitcast i8* %4300 to double*
  store double %4306, double* %4307, align 1, !tbaa !2452
  %4308 = getelementptr inbounds i8, i8* %4300, i64 8
  %4309 = bitcast i8* %4308 to double*
  store double 0.000000e+00, double* %4309, align 1, !tbaa !2452
  %4310 = load i64, i64* %RBP
  %4311 = sub i64 %4310, 24
  %4312 = load i64, i64* %PC
  %4313 = add i64 %4312, 4
  store i64 %4313, i64* %PC
  %4314 = inttoptr i64 %4311 to i64*
  %4315 = load i64, i64* %4314
  store i64 %4315, i64* %RDX, align 8, !tbaa !2428
  %4316 = load i64, i64* %RBP
  %4317 = sub i64 %4316, 40
  %4318 = load i64, i64* %PC
  %4319 = add i64 %4318, 3
  store i64 %4319, i64* %PC
  %4320 = inttoptr i64 %4317 to i32*
  %4321 = load i32, i32* %4320
  %4322 = zext i32 %4321 to i64
  store i64 %4322, i64* %RCX, align 8, !tbaa !2428
  %4323 = load i64, i64* %RCX
  %4324 = load i64, i64* %PC
  %4325 = add i64 %4324, 3
  store i64 %4325, i64* %PC
  %4326 = trunc i64 %4323 to i32
  %4327 = add i32 1, %4326
  %4328 = zext i32 %4327 to i64
  store i64 %4328, i64* %RCX, align 8, !tbaa !2428
  %4329 = icmp ult i32 %4327, %4326
  %4330 = icmp ult i32 %4327, 1
  %4331 = or i1 %4329, %4330
  %4332 = zext i1 %4331 to i8
  %4333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4332, i8* %4333, align 1, !tbaa !2432
  %4334 = and i32 %4327, 255
  %4335 = call i32 @llvm.ctpop.i32(i32 %4334) #17
  %4336 = trunc i32 %4335 to i8
  %4337 = and i8 %4336, 1
  %4338 = xor i8 %4337, 1
  %4339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4338, i8* %4339, align 1, !tbaa !2446
  %4340 = xor i64 1, %4323
  %4341 = trunc i64 %4340 to i32
  %4342 = xor i32 %4341, %4327
  %4343 = lshr i32 %4342, 4
  %4344 = trunc i32 %4343 to i8
  %4345 = and i8 %4344, 1
  %4346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4345, i8* %4346, align 1, !tbaa !2447
  %4347 = icmp eq i32 %4327, 0
  %4348 = zext i1 %4347 to i8
  %4349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4348, i8* %4349, align 1, !tbaa !2448
  %4350 = lshr i32 %4327, 31
  %4351 = trunc i32 %4350 to i8
  %4352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4351, i8* %4352, align 1, !tbaa !2449
  %4353 = lshr i32 %4326, 31
  %4354 = xor i32 %4350, %4353
  %4355 = add nuw nsw i32 %4354, %4350
  %4356 = icmp eq i32 %4355, 2
  %4357 = zext i1 %4356 to i8
  %4358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4357, i8* %4358, align 1, !tbaa !2450
  %4359 = load i32, i32* %ECX
  %4360 = zext i32 %4359 to i64
  %4361 = load i64, i64* %PC
  %4362 = add i64 %4361, 3
  store i64 %4362, i64* %PC
  %4363 = shl i64 %4360, 32
  %4364 = ashr exact i64 %4363, 32
  store i64 %4364, i64* %RSI, align 8, !tbaa !2428
  %4365 = load i64, i64* %RDX
  %4366 = load i64, i64* %RSI
  %4367 = mul i64 %4366, 8
  %4368 = add i64 %4367, %4365
  %4369 = bitcast %union.vec128_t* %XMM0 to i8*
  %4370 = load i64, i64* %PC
  %4371 = add i64 %4370, 5
  store i64 %4371, i64* %PC
  %4372 = bitcast i8* %4369 to double*
  %4373 = load double, double* %4372, align 1
  %4374 = inttoptr i64 %4368 to double*
  store double %4373, double* %4374
  %4375 = load i64, i64* %RBP
  %4376 = sub i64 %4375, 52
  %4377 = load i64, i64* %PC
  %4378 = add i64 %4377, 3
  store i64 %4378, i64* %PC
  %4379 = inttoptr i64 %4376 to i32*
  %4380 = load i32, i32* %4379
  %4381 = zext i32 %4380 to i64
  store i64 %4381, i64* %RCX, align 8, !tbaa !2428
  %4382 = load i64, i64* %RCX
  %4383 = load i64, i64* %RBP
  %4384 = sub i64 %4383, 32
  %4385 = load i64, i64* %PC
  %4386 = add i64 %4385, 3
  store i64 %4386, i64* %PC
  %4387 = trunc i64 %4382 to i32
  %4388 = inttoptr i64 %4384 to i32*
  %4389 = load i32, i32* %4388
  %4390 = add i32 %4389, %4387
  %4391 = zext i32 %4390 to i64
  store i64 %4391, i64* %RCX, align 8, !tbaa !2428
  %4392 = icmp ult i32 %4390, %4387
  %4393 = icmp ult i32 %4390, %4389
  %4394 = or i1 %4392, %4393
  %4395 = zext i1 %4394 to i8
  %4396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4395, i8* %4396, align 1, !tbaa !2432
  %4397 = and i32 %4390, 255
  %4398 = call i32 @llvm.ctpop.i32(i32 %4397) #17
  %4399 = trunc i32 %4398 to i8
  %4400 = and i8 %4399, 1
  %4401 = xor i8 %4400, 1
  %4402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4401, i8* %4402, align 1, !tbaa !2446
  %4403 = xor i32 %4389, %4387
  %4404 = xor i32 %4403, %4390
  %4405 = lshr i32 %4404, 4
  %4406 = trunc i32 %4405 to i8
  %4407 = and i8 %4406, 1
  %4408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4407, i8* %4408, align 1, !tbaa !2447
  %4409 = icmp eq i32 %4390, 0
  %4410 = zext i1 %4409 to i8
  %4411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4410, i8* %4411, align 1, !tbaa !2448
  %4412 = lshr i32 %4390, 31
  %4413 = trunc i32 %4412 to i8
  %4414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4413, i8* %4414, align 1, !tbaa !2449
  %4415 = lshr i32 %4387, 31
  %4416 = lshr i32 %4389, 31
  %4417 = xor i32 %4412, %4415
  %4418 = xor i32 %4412, %4416
  %4419 = add nuw nsw i32 %4417, %4418
  %4420 = icmp eq i32 %4419, 2
  %4421 = zext i1 %4420 to i8
  %4422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4421, i8* %4422, align 1, !tbaa !2450
  %4423 = load i64, i64* %RBP
  %4424 = sub i64 %4423, 32
  %4425 = load i32, i32* %ECX
  %4426 = zext i32 %4425 to i64
  %4427 = load i64, i64* %PC
  %4428 = add i64 %4427, 3
  store i64 %4428, i64* %PC
  %4429 = inttoptr i64 %4424 to i32*
  store i32 %4425, i32* %4429
  %4430 = load i64, i64* %RBP
  %4431 = sub i64 %4430, 52
  %4432 = load i64, i64* %PC
  %4433 = add i64 %4432, 3
  store i64 %4433, i64* %PC
  %4434 = inttoptr i64 %4431 to i32*
  %4435 = load i32, i32* %4434
  %4436 = zext i32 %4435 to i64
  store i64 %4436, i64* %RCX, align 8, !tbaa !2428
  %4437 = load i64, i64* %RCX
  %4438 = load i64, i64* %PC
  %4439 = add i64 %4438, 3
  store i64 %4439, i64* %PC
  %4440 = trunc i64 %4437 to i32
  %4441 = shl i32 %4440, 1
  %4442 = icmp slt i32 %4440, 0
  %4443 = icmp slt i32 %4441, 0
  %4444 = xor i1 %4442, %4443
  %4445 = zext i32 %4441 to i64
  store i64 %4445, i64* %RCX, align 8, !tbaa !2428
  %4446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4447 = zext i1 %4442 to i8
  store i8 %4447, i8* %4446, align 1, !tbaa !2451
  %4448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4449 = and i32 %4441, 254
  %4450 = call i32 @llvm.ctpop.i32(i32 %4449) #17
  %4451 = trunc i32 %4450 to i8
  %4452 = and i8 %4451, 1
  %4453 = xor i8 %4452, 1
  store i8 %4453, i8* %4448, align 1, !tbaa !2451
  %4454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4454, align 1, !tbaa !2451
  %4455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4456 = icmp eq i32 %4441, 0
  %4457 = zext i1 %4456 to i8
  store i8 %4457, i8* %4455, align 1, !tbaa !2451
  %4458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4459 = lshr i32 %4441, 31
  %4460 = trunc i32 %4459 to i8
  store i8 %4460, i8* %4458, align 1, !tbaa !2451
  %4461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4462 = zext i1 %4444 to i8
  store i8 %4462, i8* %4461, align 1, !tbaa !2451
  %4463 = load i64, i64* %RCX
  %4464 = load i64, i64* %RBP
  %4465 = sub i64 %4464, 40
  %4466 = load i64, i64* %PC
  %4467 = add i64 %4466, 3
  store i64 %4467, i64* %PC
  %4468 = trunc i64 %4463 to i32
  %4469 = inttoptr i64 %4465 to i32*
  %4470 = load i32, i32* %4469
  %4471 = add i32 %4470, %4468
  %4472 = zext i32 %4471 to i64
  store i64 %4472, i64* %RCX, align 8, !tbaa !2428
  %4473 = icmp ult i32 %4471, %4468
  %4474 = icmp ult i32 %4471, %4470
  %4475 = or i1 %4473, %4474
  %4476 = zext i1 %4475 to i8
  %4477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4476, i8* %4477, align 1, !tbaa !2432
  %4478 = and i32 %4471, 255
  %4479 = call i32 @llvm.ctpop.i32(i32 %4478) #17
  %4480 = trunc i32 %4479 to i8
  %4481 = and i8 %4480, 1
  %4482 = xor i8 %4481, 1
  %4483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4482, i8* %4483, align 1, !tbaa !2446
  %4484 = xor i32 %4470, %4468
  %4485 = xor i32 %4484, %4471
  %4486 = lshr i32 %4485, 4
  %4487 = trunc i32 %4486 to i8
  %4488 = and i8 %4487, 1
  %4489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4488, i8* %4489, align 1, !tbaa !2447
  %4490 = icmp eq i32 %4471, 0
  %4491 = zext i1 %4490 to i8
  %4492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4491, i8* %4492, align 1, !tbaa !2448
  %4493 = lshr i32 %4471, 31
  %4494 = trunc i32 %4493 to i8
  %4495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4494, i8* %4495, align 1, !tbaa !2449
  %4496 = lshr i32 %4468, 31
  %4497 = lshr i32 %4470, 31
  %4498 = xor i32 %4493, %4496
  %4499 = xor i32 %4493, %4497
  %4500 = add nuw nsw i32 %4498, %4499
  %4501 = icmp eq i32 %4500, 2
  %4502 = zext i1 %4501 to i8
  %4503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4502, i8* %4503, align 1, !tbaa !2450
  %4504 = load i64, i64* %RBP
  %4505 = sub i64 %4504, 40
  %4506 = load i32, i32* %ECX
  %4507 = zext i32 %4506 to i64
  %4508 = load i64, i64* %PC
  %4509 = add i64 %4508, 3
  store i64 %4509, i64* %PC
  %4510 = inttoptr i64 %4505 to i32*
  store i32 %4506, i32* %4510
  %4511 = load i64, i64* %RBP
  %4512 = sub i64 %4511, 24
  %4513 = load i64, i64* %PC
  %4514 = add i64 %4513, 4
  store i64 %4514, i64* %PC
  %4515 = inttoptr i64 %4512 to i64*
  %4516 = load i64, i64* %4515
  store i64 %4516, i64* %RDX, align 8, !tbaa !2428
  %4517 = load i64, i64* %RBP
  %4518 = sub i64 %4517, 32
  %4519 = load i64, i64* %PC
  %4520 = add i64 %4519, 4
  store i64 %4520, i64* %PC
  %4521 = inttoptr i64 %4518 to i32*
  %4522 = load i32, i32* %4521
  %4523 = sext i32 %4522 to i64
  store i64 %4523, i64* %RSI, align 8, !tbaa !2428
  %4524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4525 = load i64, i64* %RDX
  %4526 = load i64, i64* %RSI
  %4527 = mul i64 %4526, 8
  %4528 = add i64 %4527, %4525
  %4529 = load i64, i64* %PC
  %4530 = add i64 %4529, 5
  store i64 %4530, i64* %PC
  %4531 = inttoptr i64 %4528 to double*
  %4532 = load double, double* %4531
  %4533 = bitcast i8* %4524 to double*
  store double %4532, double* %4533, align 1, !tbaa !2452
  %4534 = getelementptr inbounds i8, i8* %4524, i64 8
  %4535 = bitcast i8* %4534 to double*
  store double 0.000000e+00, double* %4535, align 1, !tbaa !2452
  %4536 = load i64, i64* %RBP
  %4537 = sub i64 %4536, 64
  %4538 = bitcast %union.vec128_t* %XMM0 to i8*
  %4539 = load i64, i64* %PC
  %4540 = add i64 %4539, 5
  store i64 %4540, i64* %PC
  %4541 = bitcast i8* %4538 to double*
  %4542 = load double, double* %4541, align 1
  %4543 = inttoptr i64 %4537 to double*
  store double %4542, double* %4543
  %4544 = load i64, i64* %RBP
  %4545 = sub i64 %4544, 24
  %4546 = load i64, i64* %PC
  %4547 = add i64 %4546, 4
  store i64 %4547, i64* %PC
  %4548 = inttoptr i64 %4545 to i64*
  %4549 = load i64, i64* %4548
  store i64 %4549, i64* %RDX, align 8, !tbaa !2428
  %4550 = load i64, i64* %RBP
  %4551 = sub i64 %4550, 32
  %4552 = load i64, i64* %PC
  %4553 = add i64 %4552, 3
  store i64 %4553, i64* %PC
  %4554 = inttoptr i64 %4551 to i32*
  %4555 = load i32, i32* %4554
  %4556 = zext i32 %4555 to i64
  store i64 %4556, i64* %RCX, align 8, !tbaa !2428
  %4557 = load i64, i64* %RCX
  %4558 = load i64, i64* %PC
  %4559 = add i64 %4558, 3
  store i64 %4559, i64* %PC
  %4560 = trunc i64 %4557 to i32
  %4561 = add i32 1, %4560
  %4562 = zext i32 %4561 to i64
  store i64 %4562, i64* %RCX, align 8, !tbaa !2428
  %4563 = icmp ult i32 %4561, %4560
  %4564 = icmp ult i32 %4561, 1
  %4565 = or i1 %4563, %4564
  %4566 = zext i1 %4565 to i8
  %4567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4566, i8* %4567, align 1, !tbaa !2432
  %4568 = and i32 %4561, 255
  %4569 = call i32 @llvm.ctpop.i32(i32 %4568) #17
  %4570 = trunc i32 %4569 to i8
  %4571 = and i8 %4570, 1
  %4572 = xor i8 %4571, 1
  %4573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4572, i8* %4573, align 1, !tbaa !2446
  %4574 = xor i64 1, %4557
  %4575 = trunc i64 %4574 to i32
  %4576 = xor i32 %4575, %4561
  %4577 = lshr i32 %4576, 4
  %4578 = trunc i32 %4577 to i8
  %4579 = and i8 %4578, 1
  %4580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4579, i8* %4580, align 1, !tbaa !2447
  %4581 = icmp eq i32 %4561, 0
  %4582 = zext i1 %4581 to i8
  %4583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4582, i8* %4583, align 1, !tbaa !2448
  %4584 = lshr i32 %4561, 31
  %4585 = trunc i32 %4584 to i8
  %4586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4585, i8* %4586, align 1, !tbaa !2449
  %4587 = lshr i32 %4560, 31
  %4588 = xor i32 %4584, %4587
  %4589 = add nuw nsw i32 %4588, %4584
  %4590 = icmp eq i32 %4589, 2
  %4591 = zext i1 %4590 to i8
  %4592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4591, i8* %4592, align 1, !tbaa !2450
  %4593 = load i32, i32* %ECX
  %4594 = zext i32 %4593 to i64
  %4595 = load i64, i64* %PC
  %4596 = add i64 %4595, 3
  store i64 %4596, i64* %PC
  %4597 = shl i64 %4594, 32
  %4598 = ashr exact i64 %4597, 32
  store i64 %4598, i64* %RSI, align 8, !tbaa !2428
  %4599 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4600 = load i64, i64* %RDX
  %4601 = load i64, i64* %RSI
  %4602 = mul i64 %4601, 8
  %4603 = add i64 %4602, %4600
  %4604 = load i64, i64* %PC
  %4605 = add i64 %4604, 5
  store i64 %4605, i64* %PC
  %4606 = inttoptr i64 %4603 to double*
  %4607 = load double, double* %4606
  %4608 = bitcast i8* %4599 to double*
  store double %4607, double* %4608, align 1, !tbaa !2452
  %4609 = getelementptr inbounds i8, i8* %4599, i64 8
  %4610 = bitcast i8* %4609 to double*
  store double 0.000000e+00, double* %4610, align 1, !tbaa !2452
  %4611 = bitcast %union.vec128_t* %XMM0 to i8*
  %4612 = load i64, i64* %PC
  %4613 = add i64 %4612, 5
  store i64 %4613, i64* %PC
  %4614 = bitcast i8* %4611 to i64*
  %4615 = load i64, i64* %4614, align 1
  store i64 %4615, i64* %RDX, align 1, !tbaa !2428
  %4616 = load i64, i64* %RDX
  %4617 = load i64, i64* %RAX
  %4618 = load i64, i64* %PC
  %4619 = add i64 %4618, 3
  store i64 %4619, i64* %PC
  %4620 = xor i64 %4617, %4616
  store i64 %4620, i64* %RDX, align 8, !tbaa !2428
  %4621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4621, align 1, !tbaa !2432
  %4622 = trunc i64 %4620 to i32
  %4623 = and i32 %4622, 255
  %4624 = call i32 @llvm.ctpop.i32(i32 %4623) #17
  %4625 = trunc i32 %4624 to i8
  %4626 = and i8 %4625, 1
  %4627 = xor i8 %4626, 1
  %4628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4627, i8* %4628, align 1, !tbaa !2446
  %4629 = icmp eq i64 %4620, 0
  %4630 = zext i1 %4629 to i8
  %4631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4630, i8* %4631, align 1, !tbaa !2448
  %4632 = lshr i64 %4620, 63
  %4633 = trunc i64 %4632 to i8
  %4634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4633, i8* %4634, align 1, !tbaa !2449
  %4635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4635, align 1, !tbaa !2450
  %4636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4636, align 1, !tbaa !2447
  %4637 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4638 = load i64, i64* %RDX
  %4639 = load i64, i64* %PC
  %4640 = add i64 %4639, 5
  store i64 %4640, i64* %PC
  %4641 = bitcast i8* %4637 to i64*
  store i64 %4638, i64* %4641, align 1, !tbaa !2428
  %4642 = getelementptr inbounds i8, i8* %4637, i64 8
  %4643 = bitcast i8* %4642 to i64*
  store i64 0, i64* %4643, align 1, !tbaa !2428
  %4644 = load i64, i64* %RBP
  %4645 = sub i64 %4644, 72
  %4646 = bitcast %union.vec128_t* %XMM0 to i8*
  %4647 = load i64, i64* %PC
  %4648 = add i64 %4647, 5
  store i64 %4648, i64* %PC
  %4649 = bitcast i8* %4646 to double*
  %4650 = load double, double* %4649, align 1
  %4651 = inttoptr i64 %4645 to double*
  store double %4650, double* %4651
  %4652 = load i64, i64* %RBP
  %4653 = sub i64 %4652, 24
  %4654 = load i64, i64* %PC
  %4655 = add i64 %4654, 4
  store i64 %4655, i64* %PC
  %4656 = inttoptr i64 %4653 to i64*
  %4657 = load i64, i64* %4656
  store i64 %4657, i64* %RDX, align 8, !tbaa !2428
  %4658 = load i64, i64* %RBP
  %4659 = sub i64 %4658, 40
  %4660 = load i64, i64* %PC
  %4661 = add i64 %4660, 4
  store i64 %4661, i64* %PC
  %4662 = inttoptr i64 %4659 to i32*
  %4663 = load i32, i32* %4662
  %4664 = sext i32 %4663 to i64
  store i64 %4664, i64* %RSI, align 8, !tbaa !2428
  %4665 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4666 = load i64, i64* %RDX
  %4667 = load i64, i64* %RSI
  %4668 = mul i64 %4667, 8
  %4669 = add i64 %4668, %4666
  %4670 = load i64, i64* %PC
  %4671 = add i64 %4670, 5
  store i64 %4671, i64* %PC
  %4672 = inttoptr i64 %4669 to double*
  %4673 = load double, double* %4672
  %4674 = bitcast i8* %4665 to double*
  store double %4673, double* %4674, align 1, !tbaa !2452
  %4675 = getelementptr inbounds i8, i8* %4665, i64 8
  %4676 = bitcast i8* %4675 to double*
  store double 0.000000e+00, double* %4676, align 1, !tbaa !2452
  %4677 = load i64, i64* %RBP
  %4678 = sub i64 %4677, 80
  %4679 = bitcast %union.vec128_t* %XMM0 to i8*
  %4680 = load i64, i64* %PC
  %4681 = add i64 %4680, 5
  store i64 %4681, i64* %PC
  %4682 = bitcast i8* %4679 to double*
  %4683 = load double, double* %4682, align 1
  %4684 = inttoptr i64 %4678 to double*
  store double %4683, double* %4684
  %4685 = load i64, i64* %RBP
  %4686 = sub i64 %4685, 24
  %4687 = load i64, i64* %PC
  %4688 = add i64 %4687, 4
  store i64 %4688, i64* %PC
  %4689 = inttoptr i64 %4686 to i64*
  %4690 = load i64, i64* %4689
  store i64 %4690, i64* %RDX, align 8, !tbaa !2428
  %4691 = load i64, i64* %RBP
  %4692 = sub i64 %4691, 40
  %4693 = load i64, i64* %PC
  %4694 = add i64 %4693, 3
  store i64 %4694, i64* %PC
  %4695 = inttoptr i64 %4692 to i32*
  %4696 = load i32, i32* %4695
  %4697 = zext i32 %4696 to i64
  store i64 %4697, i64* %RCX, align 8, !tbaa !2428
  %4698 = load i64, i64* %RCX
  %4699 = load i64, i64* %PC
  %4700 = add i64 %4699, 3
  store i64 %4700, i64* %PC
  %4701 = trunc i64 %4698 to i32
  %4702 = add i32 1, %4701
  %4703 = zext i32 %4702 to i64
  store i64 %4703, i64* %RCX, align 8, !tbaa !2428
  %4704 = icmp ult i32 %4702, %4701
  %4705 = icmp ult i32 %4702, 1
  %4706 = or i1 %4704, %4705
  %4707 = zext i1 %4706 to i8
  %4708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4707, i8* %4708, align 1, !tbaa !2432
  %4709 = and i32 %4702, 255
  %4710 = call i32 @llvm.ctpop.i32(i32 %4709) #17
  %4711 = trunc i32 %4710 to i8
  %4712 = and i8 %4711, 1
  %4713 = xor i8 %4712, 1
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4713, i8* %4714, align 1, !tbaa !2446
  %4715 = xor i64 1, %4698
  %4716 = trunc i64 %4715 to i32
  %4717 = xor i32 %4716, %4702
  %4718 = lshr i32 %4717, 4
  %4719 = trunc i32 %4718 to i8
  %4720 = and i8 %4719, 1
  %4721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4720, i8* %4721, align 1, !tbaa !2447
  %4722 = icmp eq i32 %4702, 0
  %4723 = zext i1 %4722 to i8
  %4724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4723, i8* %4724, align 1, !tbaa !2448
  %4725 = lshr i32 %4702, 31
  %4726 = trunc i32 %4725 to i8
  %4727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4726, i8* %4727, align 1, !tbaa !2449
  %4728 = lshr i32 %4701, 31
  %4729 = xor i32 %4725, %4728
  %4730 = add nuw nsw i32 %4729, %4725
  %4731 = icmp eq i32 %4730, 2
  %4732 = zext i1 %4731 to i8
  %4733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4732, i8* %4733, align 1, !tbaa !2450
  %4734 = load i32, i32* %ECX
  %4735 = zext i32 %4734 to i64
  %4736 = load i64, i64* %PC
  %4737 = add i64 %4736, 3
  store i64 %4737, i64* %PC
  %4738 = shl i64 %4735, 32
  %4739 = ashr exact i64 %4738, 32
  store i64 %4739, i64* %RSI, align 8, !tbaa !2428
  %4740 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4741 = load i64, i64* %RDX
  %4742 = load i64, i64* %RSI
  %4743 = mul i64 %4742, 8
  %4744 = add i64 %4743, %4741
  %4745 = load i64, i64* %PC
  %4746 = add i64 %4745, 5
  store i64 %4746, i64* %PC
  %4747 = inttoptr i64 %4744 to double*
  %4748 = load double, double* %4747
  %4749 = bitcast i8* %4740 to double*
  store double %4748, double* %4749, align 1, !tbaa !2452
  %4750 = getelementptr inbounds i8, i8* %4740, i64 8
  %4751 = bitcast i8* %4750 to double*
  store double 0.000000e+00, double* %4751, align 1, !tbaa !2452
  %4752 = bitcast %union.vec128_t* %XMM0 to i8*
  %4753 = load i64, i64* %PC
  %4754 = add i64 %4753, 5
  store i64 %4754, i64* %PC
  %4755 = bitcast i8* %4752 to i64*
  %4756 = load i64, i64* %4755, align 1
  store i64 %4756, i64* %RDX, align 1, !tbaa !2428
  %4757 = load i64, i64* %RDX
  %4758 = load i64, i64* %RAX
  %4759 = load i64, i64* %PC
  %4760 = add i64 %4759, 3
  store i64 %4760, i64* %PC
  %4761 = xor i64 %4758, %4757
  store i64 %4761, i64* %RDX, align 8, !tbaa !2428
  %4762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4762, align 1, !tbaa !2432
  %4763 = trunc i64 %4761 to i32
  %4764 = and i32 %4763, 255
  %4765 = call i32 @llvm.ctpop.i32(i32 %4764) #17
  %4766 = trunc i32 %4765 to i8
  %4767 = and i8 %4766, 1
  %4768 = xor i8 %4767, 1
  %4769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4768, i8* %4769, align 1, !tbaa !2446
  %4770 = icmp eq i64 %4761, 0
  %4771 = zext i1 %4770 to i8
  %4772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4771, i8* %4772, align 1, !tbaa !2448
  %4773 = lshr i64 %4761, 63
  %4774 = trunc i64 %4773 to i8
  %4775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4774, i8* %4775, align 1, !tbaa !2449
  %4776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4776, align 1, !tbaa !2450
  %4777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4777, align 1, !tbaa !2447
  %4778 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4779 = load i64, i64* %RDX
  %4780 = load i64, i64* %PC
  %4781 = add i64 %4780, 5
  store i64 %4781, i64* %PC
  %4782 = bitcast i8* %4778 to i64*
  store i64 %4779, i64* %4782, align 1, !tbaa !2428
  %4783 = getelementptr inbounds i8, i8* %4778, i64 8
  %4784 = bitcast i8* %4783 to i64*
  store i64 0, i64* %4784, align 1, !tbaa !2428
  %4785 = load i64, i64* %RBP
  %4786 = sub i64 %4785, 88
  %4787 = bitcast %union.vec128_t* %XMM0 to i8*
  %4788 = load i64, i64* %PC
  %4789 = add i64 %4788, 5
  store i64 %4789, i64* %PC
  %4790 = bitcast i8* %4787 to double*
  %4791 = load double, double* %4790, align 1
  %4792 = inttoptr i64 %4786 to double*
  store double %4791, double* %4792
  %4793 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4794 = load i64, i64* %RBP
  %4795 = sub i64 %4794, 80
  %4796 = load i64, i64* %PC
  %4797 = add i64 %4796, 5
  store i64 %4797, i64* %PC
  %4798 = inttoptr i64 %4795 to double*
  %4799 = load double, double* %4798
  %4800 = bitcast i8* %4793 to double*
  store double %4799, double* %4800, align 1, !tbaa !2452
  %4801 = getelementptr inbounds i8, i8* %4793, i64 8
  %4802 = bitcast i8* %4801 to double*
  store double 0.000000e+00, double* %4802, align 1, !tbaa !2452
  %4803 = load i64, i64* %RBP
  %4804 = sub i64 %4803, 24
  %4805 = load i64, i64* %PC
  %4806 = add i64 %4805, 4
  store i64 %4806, i64* %PC
  %4807 = inttoptr i64 %4804 to i64*
  %4808 = load i64, i64* %4807
  store i64 %4808, i64* %RDX, align 8, !tbaa !2428
  %4809 = load i64, i64* %RBP
  %4810 = sub i64 %4809, 32
  %4811 = load i64, i64* %PC
  %4812 = add i64 %4811, 4
  store i64 %4812, i64* %PC
  %4813 = inttoptr i64 %4810 to i32*
  %4814 = load i32, i32* %4813
  %4815 = sext i32 %4814 to i64
  store i64 %4815, i64* %RSI, align 8, !tbaa !2428
  %4816 = load i64, i64* %RDX
  %4817 = load i64, i64* %RSI
  %4818 = mul i64 %4817, 8
  %4819 = add i64 %4818, %4816
  %4820 = bitcast %union.vec128_t* %XMM0 to i8*
  %4821 = load i64, i64* %PC
  %4822 = add i64 %4821, 5
  store i64 %4822, i64* %PC
  %4823 = bitcast i8* %4820 to double*
  %4824 = load double, double* %4823, align 1
  %4825 = inttoptr i64 %4819 to double*
  store double %4824, double* %4825
  %4826 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4827 = load i64, i64* %RBP
  %4828 = sub i64 %4827, 88
  %4829 = load i64, i64* %PC
  %4830 = add i64 %4829, 5
  store i64 %4830, i64* %PC
  %4831 = inttoptr i64 %4828 to double*
  %4832 = load double, double* %4831
  %4833 = bitcast i8* %4826 to double*
  store double %4832, double* %4833, align 1, !tbaa !2452
  %4834 = getelementptr inbounds i8, i8* %4826, i64 8
  %4835 = bitcast i8* %4834 to double*
  store double 0.000000e+00, double* %4835, align 1, !tbaa !2452
  %4836 = load i64, i64* %RBP
  %4837 = sub i64 %4836, 24
  %4838 = load i64, i64* %PC
  %4839 = add i64 %4838, 4
  store i64 %4839, i64* %PC
  %4840 = inttoptr i64 %4837 to i64*
  %4841 = load i64, i64* %4840
  store i64 %4841, i64* %RDX, align 8, !tbaa !2428
  %4842 = load i64, i64* %RBP
  %4843 = sub i64 %4842, 32
  %4844 = load i64, i64* %PC
  %4845 = add i64 %4844, 3
  store i64 %4845, i64* %PC
  %4846 = inttoptr i64 %4843 to i32*
  %4847 = load i32, i32* %4846
  %4848 = zext i32 %4847 to i64
  store i64 %4848, i64* %RCX, align 8, !tbaa !2428
  %4849 = load i64, i64* %RCX
  %4850 = load i64, i64* %PC
  %4851 = add i64 %4850, 3
  store i64 %4851, i64* %PC
  %4852 = trunc i64 %4849 to i32
  %4853 = add i32 1, %4852
  %4854 = zext i32 %4853 to i64
  store i64 %4854, i64* %RCX, align 8, !tbaa !2428
  %4855 = icmp ult i32 %4853, %4852
  %4856 = icmp ult i32 %4853, 1
  %4857 = or i1 %4855, %4856
  %4858 = zext i1 %4857 to i8
  %4859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4858, i8* %4859, align 1, !tbaa !2432
  %4860 = and i32 %4853, 255
  %4861 = call i32 @llvm.ctpop.i32(i32 %4860) #17
  %4862 = trunc i32 %4861 to i8
  %4863 = and i8 %4862, 1
  %4864 = xor i8 %4863, 1
  %4865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4864, i8* %4865, align 1, !tbaa !2446
  %4866 = xor i64 1, %4849
  %4867 = trunc i64 %4866 to i32
  %4868 = xor i32 %4867, %4853
  %4869 = lshr i32 %4868, 4
  %4870 = trunc i32 %4869 to i8
  %4871 = and i8 %4870, 1
  %4872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4871, i8* %4872, align 1, !tbaa !2447
  %4873 = icmp eq i32 %4853, 0
  %4874 = zext i1 %4873 to i8
  %4875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4874, i8* %4875, align 1, !tbaa !2448
  %4876 = lshr i32 %4853, 31
  %4877 = trunc i32 %4876 to i8
  %4878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4877, i8* %4878, align 1, !tbaa !2449
  %4879 = lshr i32 %4852, 31
  %4880 = xor i32 %4876, %4879
  %4881 = add nuw nsw i32 %4880, %4876
  %4882 = icmp eq i32 %4881, 2
  %4883 = zext i1 %4882 to i8
  %4884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4883, i8* %4884, align 1, !tbaa !2450
  %4885 = load i32, i32* %ECX
  %4886 = zext i32 %4885 to i64
  %4887 = load i64, i64* %PC
  %4888 = add i64 %4887, 3
  store i64 %4888, i64* %PC
  %4889 = shl i64 %4886, 32
  %4890 = ashr exact i64 %4889, 32
  store i64 %4890, i64* %RSI, align 8, !tbaa !2428
  %4891 = load i64, i64* %RDX
  %4892 = load i64, i64* %RSI
  %4893 = mul i64 %4892, 8
  %4894 = add i64 %4893, %4891
  %4895 = bitcast %union.vec128_t* %XMM0 to i8*
  %4896 = load i64, i64* %PC
  %4897 = add i64 %4896, 5
  store i64 %4897, i64* %PC
  %4898 = bitcast i8* %4895 to double*
  %4899 = load double, double* %4898, align 1
  %4900 = inttoptr i64 %4894 to double*
  store double %4899, double* %4900
  %4901 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4902 = load i64, i64* %RBP
  %4903 = sub i64 %4902, 64
  %4904 = load i64, i64* %PC
  %4905 = add i64 %4904, 5
  store i64 %4905, i64* %PC
  %4906 = inttoptr i64 %4903 to double*
  %4907 = load double, double* %4906
  %4908 = bitcast i8* %4901 to double*
  store double %4907, double* %4908, align 1, !tbaa !2452
  %4909 = getelementptr inbounds i8, i8* %4901, i64 8
  %4910 = bitcast i8* %4909 to double*
  store double 0.000000e+00, double* %4910, align 1, !tbaa !2452
  %4911 = load i64, i64* %RBP
  %4912 = sub i64 %4911, 24
  %4913 = load i64, i64* %PC
  %4914 = add i64 %4913, 4
  store i64 %4914, i64* %PC
  %4915 = inttoptr i64 %4912 to i64*
  %4916 = load i64, i64* %4915
  store i64 %4916, i64* %RDX, align 8, !tbaa !2428
  %4917 = load i64, i64* %RBP
  %4918 = sub i64 %4917, 40
  %4919 = load i64, i64* %PC
  %4920 = add i64 %4919, 4
  store i64 %4920, i64* %PC
  %4921 = inttoptr i64 %4918 to i32*
  %4922 = load i32, i32* %4921
  %4923 = sext i32 %4922 to i64
  store i64 %4923, i64* %RSI, align 8, !tbaa !2428
  %4924 = load i64, i64* %RDX
  %4925 = load i64, i64* %RSI
  %4926 = mul i64 %4925, 8
  %4927 = add i64 %4926, %4924
  %4928 = bitcast %union.vec128_t* %XMM0 to i8*
  %4929 = load i64, i64* %PC
  %4930 = add i64 %4929, 5
  store i64 %4930, i64* %PC
  %4931 = bitcast i8* %4928 to double*
  %4932 = load double, double* %4931, align 1
  %4933 = inttoptr i64 %4927 to double*
  store double %4932, double* %4933
  %4934 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4935 = load i64, i64* %RBP
  %4936 = sub i64 %4935, 72
  %4937 = load i64, i64* %PC
  %4938 = add i64 %4937, 5
  store i64 %4938, i64* %PC
  %4939 = inttoptr i64 %4936 to double*
  %4940 = load double, double* %4939
  %4941 = bitcast i8* %4934 to double*
  store double %4940, double* %4941, align 1, !tbaa !2452
  %4942 = getelementptr inbounds i8, i8* %4934, i64 8
  %4943 = bitcast i8* %4942 to double*
  store double 0.000000e+00, double* %4943, align 1, !tbaa !2452
  %4944 = load i64, i64* %RBP
  %4945 = sub i64 %4944, 24
  %4946 = load i64, i64* %PC
  %4947 = add i64 %4946, 4
  store i64 %4947, i64* %PC
  %4948 = inttoptr i64 %4945 to i64*
  %4949 = load i64, i64* %4948
  store i64 %4949, i64* %RDX, align 8, !tbaa !2428
  %4950 = load i64, i64* %RBP
  %4951 = sub i64 %4950, 40
  %4952 = load i64, i64* %PC
  %4953 = add i64 %4952, 3
  store i64 %4953, i64* %PC
  %4954 = inttoptr i64 %4951 to i32*
  %4955 = load i32, i32* %4954
  %4956 = zext i32 %4955 to i64
  store i64 %4956, i64* %RCX, align 8, !tbaa !2428
  %4957 = load i64, i64* %RCX
  %4958 = load i64, i64* %PC
  %4959 = add i64 %4958, 3
  store i64 %4959, i64* %PC
  %4960 = trunc i64 %4957 to i32
  %4961 = add i32 1, %4960
  %4962 = zext i32 %4961 to i64
  store i64 %4962, i64* %RCX, align 8, !tbaa !2428
  %4963 = icmp ult i32 %4961, %4960
  %4964 = icmp ult i32 %4961, 1
  %4965 = or i1 %4963, %4964
  %4966 = zext i1 %4965 to i8
  %4967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4966, i8* %4967, align 1, !tbaa !2432
  %4968 = and i32 %4961, 255
  %4969 = call i32 @llvm.ctpop.i32(i32 %4968) #17
  %4970 = trunc i32 %4969 to i8
  %4971 = and i8 %4970, 1
  %4972 = xor i8 %4971, 1
  %4973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4972, i8* %4973, align 1, !tbaa !2446
  %4974 = xor i64 1, %4957
  %4975 = trunc i64 %4974 to i32
  %4976 = xor i32 %4975, %4961
  %4977 = lshr i32 %4976, 4
  %4978 = trunc i32 %4977 to i8
  %4979 = and i8 %4978, 1
  %4980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4979, i8* %4980, align 1, !tbaa !2447
  %4981 = icmp eq i32 %4961, 0
  %4982 = zext i1 %4981 to i8
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4982, i8* %4983, align 1, !tbaa !2448
  %4984 = lshr i32 %4961, 31
  %4985 = trunc i32 %4984 to i8
  %4986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4985, i8* %4986, align 1, !tbaa !2449
  %4987 = lshr i32 %4960, 31
  %4988 = xor i32 %4984, %4987
  %4989 = add nuw nsw i32 %4988, %4984
  %4990 = icmp eq i32 %4989, 2
  %4991 = zext i1 %4990 to i8
  %4992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4991, i8* %4992, align 1, !tbaa !2450
  %4993 = load i32, i32* %ECX
  %4994 = zext i32 %4993 to i64
  %4995 = load i64, i64* %PC
  %4996 = add i64 %4995, 3
  store i64 %4996, i64* %PC
  %4997 = shl i64 %4994, 32
  %4998 = ashr exact i64 %4997, 32
  store i64 %4998, i64* %RSI, align 8, !tbaa !2428
  %4999 = load i64, i64* %RDX
  %5000 = load i64, i64* %RSI
  %5001 = mul i64 %5000, 8
  %5002 = add i64 %5001, %4999
  %5003 = bitcast %union.vec128_t* %XMM0 to i8*
  %5004 = load i64, i64* %PC
  %5005 = add i64 %5004, 5
  store i64 %5005, i64* %PC
  %5006 = bitcast i8* %5003 to double*
  %5007 = load double, double* %5006, align 1
  %5008 = inttoptr i64 %5002 to double*
  store double %5007, double* %5008
  %5009 = load i64, i64* %RBP
  %5010 = sub i64 %5009, 52
  %5011 = load i64, i64* %PC
  %5012 = add i64 %5011, 3
  store i64 %5012, i64* %PC
  %5013 = inttoptr i64 %5010 to i32*
  %5014 = load i32, i32* %5013
  %5015 = zext i32 %5014 to i64
  store i64 %5015, i64* %RCX, align 8, !tbaa !2428
  %5016 = load i64, i64* %RCX
  %5017 = load i64, i64* %RBP
  %5018 = sub i64 %5017, 32
  %5019 = load i64, i64* %PC
  %5020 = add i64 %5019, 3
  store i64 %5020, i64* %PC
  %5021 = trunc i64 %5016 to i32
  %5022 = inttoptr i64 %5018 to i32*
  %5023 = load i32, i32* %5022
  %5024 = add i32 %5023, %5021
  %5025 = zext i32 %5024 to i64
  store i64 %5025, i64* %RCX, align 8, !tbaa !2428
  %5026 = icmp ult i32 %5024, %5021
  %5027 = icmp ult i32 %5024, %5023
  %5028 = or i1 %5026, %5027
  %5029 = zext i1 %5028 to i8
  %5030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5029, i8* %5030, align 1, !tbaa !2432
  %5031 = and i32 %5024, 255
  %5032 = call i32 @llvm.ctpop.i32(i32 %5031) #17
  %5033 = trunc i32 %5032 to i8
  %5034 = and i8 %5033, 1
  %5035 = xor i8 %5034, 1
  %5036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5035, i8* %5036, align 1, !tbaa !2446
  %5037 = xor i32 %5023, %5021
  %5038 = xor i32 %5037, %5024
  %5039 = lshr i32 %5038, 4
  %5040 = trunc i32 %5039 to i8
  %5041 = and i8 %5040, 1
  %5042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5041, i8* %5042, align 1, !tbaa !2447
  %5043 = icmp eq i32 %5024, 0
  %5044 = zext i1 %5043 to i8
  %5045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5044, i8* %5045, align 1, !tbaa !2448
  %5046 = lshr i32 %5024, 31
  %5047 = trunc i32 %5046 to i8
  %5048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5047, i8* %5048, align 1, !tbaa !2449
  %5049 = lshr i32 %5021, 31
  %5050 = lshr i32 %5023, 31
  %5051 = xor i32 %5046, %5049
  %5052 = xor i32 %5046, %5050
  %5053 = add nuw nsw i32 %5051, %5052
  %5054 = icmp eq i32 %5053, 2
  %5055 = zext i1 %5054 to i8
  %5056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5055, i8* %5056, align 1, !tbaa !2450
  %5057 = load i64, i64* %RBP
  %5058 = sub i64 %5057, 32
  %5059 = load i32, i32* %ECX
  %5060 = zext i32 %5059 to i64
  %5061 = load i64, i64* %PC
  %5062 = add i64 %5061, 3
  store i64 %5062, i64* %PC
  %5063 = inttoptr i64 %5058 to i32*
  store i32 %5059, i32* %5063
  %5064 = load i64, i64* %RBP
  %5065 = sub i64 %5064, 52
  %5066 = load i64, i64* %PC
  %5067 = add i64 %5066, 3
  store i64 %5067, i64* %PC
  %5068 = inttoptr i64 %5065 to i32*
  %5069 = load i32, i32* %5068
  %5070 = zext i32 %5069 to i64
  store i64 %5070, i64* %RCX, align 8, !tbaa !2428
  %5071 = load i64, i64* %RBP
  %5072 = sub i64 %5071, 40
  %5073 = load i64, i64* %PC
  %5074 = add i64 %5073, 3
  store i64 %5074, i64* %PC
  %5075 = inttoptr i64 %5072 to i32*
  %5076 = load i32, i32* %5075
  %5077 = zext i32 %5076 to i64
  store i64 %5077, i64* %RDI, align 8, !tbaa !2428
  %5078 = load i64, i64* %RDI
  %5079 = load i32, i32* %ECX
  %5080 = zext i32 %5079 to i64
  %5081 = load i64, i64* %PC
  %5082 = add i64 %5081, 2
  store i64 %5082, i64* %PC
  %5083 = trunc i64 %5078 to i32
  %5084 = sub i32 %5083, %5079
  %5085 = zext i32 %5084 to i64
  store i64 %5085, i64* %RDI, align 8, !tbaa !2428
  %5086 = icmp ult i32 %5083, %5079
  %5087 = zext i1 %5086 to i8
  %5088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5087, i8* %5088, align 1, !tbaa !2432
  %5089 = and i32 %5084, 255
  %5090 = call i32 @llvm.ctpop.i32(i32 %5089) #17
  %5091 = trunc i32 %5090 to i8
  %5092 = and i8 %5091, 1
  %5093 = xor i8 %5092, 1
  %5094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5093, i8* %5094, align 1, !tbaa !2446
  %5095 = xor i64 %5080, %5078
  %5096 = trunc i64 %5095 to i32
  %5097 = xor i32 %5096, %5084
  %5098 = lshr i32 %5097, 4
  %5099 = trunc i32 %5098 to i8
  %5100 = and i8 %5099, 1
  %5101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5100, i8* %5101, align 1, !tbaa !2447
  %5102 = icmp eq i32 %5084, 0
  %5103 = zext i1 %5102 to i8
  %5104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5103, i8* %5104, align 1, !tbaa !2448
  %5105 = lshr i32 %5084, 31
  %5106 = trunc i32 %5105 to i8
  %5107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5106, i8* %5107, align 1, !tbaa !2449
  %5108 = lshr i32 %5083, 31
  %5109 = lshr i32 %5079, 31
  %5110 = xor i32 %5109, %5108
  %5111 = xor i32 %5105, %5108
  %5112 = add nuw nsw i32 %5111, %5110
  %5113 = icmp eq i32 %5112, 2
  %5114 = zext i1 %5113 to i8
  %5115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5114, i8* %5115, align 1, !tbaa !2450
  %5116 = load i64, i64* %RBP
  %5117 = sub i64 %5116, 40
  %5118 = load i32, i32* %EDI
  %5119 = zext i32 %5118 to i64
  %5120 = load i64, i64* %PC
  %5121 = add i64 %5120, 3
  store i64 %5121, i64* %PC
  %5122 = inttoptr i64 %5117 to i32*
  store i32 %5118, i32* %5122
  %5123 = load i64, i64* %RBP
  %5124 = sub i64 %5123, 24
  %5125 = load i64, i64* %PC
  %5126 = add i64 %5125, 4
  store i64 %5126, i64* %PC
  %5127 = inttoptr i64 %5124 to i64*
  %5128 = load i64, i64* %5127
  store i64 %5128, i64* %RDX, align 8, !tbaa !2428
  %5129 = load i64, i64* %RBP
  %5130 = sub i64 %5129, 32
  %5131 = load i64, i64* %PC
  %5132 = add i64 %5131, 4
  store i64 %5132, i64* %PC
  %5133 = inttoptr i64 %5130 to i32*
  %5134 = load i32, i32* %5133
  %5135 = sext i32 %5134 to i64
  store i64 %5135, i64* %RSI, align 8, !tbaa !2428
  %5136 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5137 = load i64, i64* %RDX
  %5138 = load i64, i64* %RSI
  %5139 = mul i64 %5138, 8
  %5140 = add i64 %5139, %5137
  %5141 = load i64, i64* %PC
  %5142 = add i64 %5141, 5
  store i64 %5142, i64* %PC
  %5143 = inttoptr i64 %5140 to double*
  %5144 = load double, double* %5143
  %5145 = bitcast i8* %5136 to double*
  store double %5144, double* %5145, align 1, !tbaa !2452
  %5146 = getelementptr inbounds i8, i8* %5136, i64 8
  %5147 = bitcast i8* %5146 to double*
  store double 0.000000e+00, double* %5147, align 1, !tbaa !2452
  %5148 = load i64, i64* %RBP
  %5149 = sub i64 %5148, 64
  %5150 = bitcast %union.vec128_t* %XMM0 to i8*
  %5151 = load i64, i64* %PC
  %5152 = add i64 %5151, 5
  store i64 %5152, i64* %PC
  %5153 = bitcast i8* %5150 to double*
  %5154 = load double, double* %5153, align 1
  %5155 = inttoptr i64 %5149 to double*
  store double %5154, double* %5155
  %5156 = load i64, i64* %RBP
  %5157 = sub i64 %5156, 24
  %5158 = load i64, i64* %PC
  %5159 = add i64 %5158, 4
  store i64 %5159, i64* %PC
  %5160 = inttoptr i64 %5157 to i64*
  %5161 = load i64, i64* %5160
  store i64 %5161, i64* %RDX, align 8, !tbaa !2428
  %5162 = load i64, i64* %RBP
  %5163 = sub i64 %5162, 32
  %5164 = load i64, i64* %PC
  %5165 = add i64 %5164, 3
  store i64 %5165, i64* %PC
  %5166 = inttoptr i64 %5163 to i32*
  %5167 = load i32, i32* %5166
  %5168 = zext i32 %5167 to i64
  store i64 %5168, i64* %RCX, align 8, !tbaa !2428
  %5169 = load i64, i64* %RCX
  %5170 = load i64, i64* %PC
  %5171 = add i64 %5170, 3
  store i64 %5171, i64* %PC
  %5172 = trunc i64 %5169 to i32
  %5173 = add i32 1, %5172
  %5174 = zext i32 %5173 to i64
  store i64 %5174, i64* %RCX, align 8, !tbaa !2428
  %5175 = icmp ult i32 %5173, %5172
  %5176 = icmp ult i32 %5173, 1
  %5177 = or i1 %5175, %5176
  %5178 = zext i1 %5177 to i8
  %5179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5178, i8* %5179, align 1, !tbaa !2432
  %5180 = and i32 %5173, 255
  %5181 = call i32 @llvm.ctpop.i32(i32 %5180) #17
  %5182 = trunc i32 %5181 to i8
  %5183 = and i8 %5182, 1
  %5184 = xor i8 %5183, 1
  %5185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5184, i8* %5185, align 1, !tbaa !2446
  %5186 = xor i64 1, %5169
  %5187 = trunc i64 %5186 to i32
  %5188 = xor i32 %5187, %5173
  %5189 = lshr i32 %5188, 4
  %5190 = trunc i32 %5189 to i8
  %5191 = and i8 %5190, 1
  %5192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5191, i8* %5192, align 1, !tbaa !2447
  %5193 = icmp eq i32 %5173, 0
  %5194 = zext i1 %5193 to i8
  %5195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5194, i8* %5195, align 1, !tbaa !2448
  %5196 = lshr i32 %5173, 31
  %5197 = trunc i32 %5196 to i8
  %5198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5197, i8* %5198, align 1, !tbaa !2449
  %5199 = lshr i32 %5172, 31
  %5200 = xor i32 %5196, %5199
  %5201 = add nuw nsw i32 %5200, %5196
  %5202 = icmp eq i32 %5201, 2
  %5203 = zext i1 %5202 to i8
  %5204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5203, i8* %5204, align 1, !tbaa !2450
  %5205 = load i32, i32* %ECX
  %5206 = zext i32 %5205 to i64
  %5207 = load i64, i64* %PC
  %5208 = add i64 %5207, 3
  store i64 %5208, i64* %PC
  %5209 = shl i64 %5206, 32
  %5210 = ashr exact i64 %5209, 32
  store i64 %5210, i64* %RSI, align 8, !tbaa !2428
  %5211 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5212 = load i64, i64* %RDX
  %5213 = load i64, i64* %RSI
  %5214 = mul i64 %5213, 8
  %5215 = add i64 %5214, %5212
  %5216 = load i64, i64* %PC
  %5217 = add i64 %5216, 5
  store i64 %5217, i64* %PC
  %5218 = inttoptr i64 %5215 to double*
  %5219 = load double, double* %5218
  %5220 = bitcast i8* %5211 to double*
  store double %5219, double* %5220, align 1, !tbaa !2452
  %5221 = getelementptr inbounds i8, i8* %5211, i64 8
  %5222 = bitcast i8* %5221 to double*
  store double 0.000000e+00, double* %5222, align 1, !tbaa !2452
  %5223 = bitcast %union.vec128_t* %XMM0 to i8*
  %5224 = load i64, i64* %PC
  %5225 = add i64 %5224, 5
  store i64 %5225, i64* %PC
  %5226 = bitcast i8* %5223 to i64*
  %5227 = load i64, i64* %5226, align 1
  store i64 %5227, i64* %RDX, align 1, !tbaa !2428
  %5228 = load i64, i64* %RDX
  %5229 = load i64, i64* %RAX
  %5230 = load i64, i64* %PC
  %5231 = add i64 %5230, 3
  store i64 %5231, i64* %PC
  %5232 = xor i64 %5229, %5228
  store i64 %5232, i64* %RDX, align 8, !tbaa !2428
  %5233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5233, align 1, !tbaa !2432
  %5234 = trunc i64 %5232 to i32
  %5235 = and i32 %5234, 255
  %5236 = call i32 @llvm.ctpop.i32(i32 %5235) #17
  %5237 = trunc i32 %5236 to i8
  %5238 = and i8 %5237, 1
  %5239 = xor i8 %5238, 1
  %5240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5239, i8* %5240, align 1, !tbaa !2446
  %5241 = icmp eq i64 %5232, 0
  %5242 = zext i1 %5241 to i8
  %5243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5242, i8* %5243, align 1, !tbaa !2448
  %5244 = lshr i64 %5232, 63
  %5245 = trunc i64 %5244 to i8
  %5246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5245, i8* %5246, align 1, !tbaa !2449
  %5247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5247, align 1, !tbaa !2450
  %5248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5248, align 1, !tbaa !2447
  %5249 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5250 = load i64, i64* %RDX
  %5251 = load i64, i64* %PC
  %5252 = add i64 %5251, 5
  store i64 %5252, i64* %PC
  %5253 = bitcast i8* %5249 to i64*
  store i64 %5250, i64* %5253, align 1, !tbaa !2428
  %5254 = getelementptr inbounds i8, i8* %5249, i64 8
  %5255 = bitcast i8* %5254 to i64*
  store i64 0, i64* %5255, align 1, !tbaa !2428
  %5256 = load i64, i64* %RBP
  %5257 = sub i64 %5256, 72
  %5258 = bitcast %union.vec128_t* %XMM0 to i8*
  %5259 = load i64, i64* %PC
  %5260 = add i64 %5259, 5
  store i64 %5260, i64* %PC
  %5261 = bitcast i8* %5258 to double*
  %5262 = load double, double* %5261, align 1
  %5263 = inttoptr i64 %5257 to double*
  store double %5262, double* %5263
  %5264 = load i64, i64* %RBP
  %5265 = sub i64 %5264, 24
  %5266 = load i64, i64* %PC
  %5267 = add i64 %5266, 4
  store i64 %5267, i64* %PC
  %5268 = inttoptr i64 %5265 to i64*
  %5269 = load i64, i64* %5268
  store i64 %5269, i64* %RDX, align 8, !tbaa !2428
  %5270 = load i64, i64* %RBP
  %5271 = sub i64 %5270, 40
  %5272 = load i64, i64* %PC
  %5273 = add i64 %5272, 4
  store i64 %5273, i64* %PC
  %5274 = inttoptr i64 %5271 to i32*
  %5275 = load i32, i32* %5274
  %5276 = sext i32 %5275 to i64
  store i64 %5276, i64* %RSI, align 8, !tbaa !2428
  %5277 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5278 = load i64, i64* %RDX
  %5279 = load i64, i64* %RSI
  %5280 = mul i64 %5279, 8
  %5281 = add i64 %5280, %5278
  %5282 = load i64, i64* %PC
  %5283 = add i64 %5282, 5
  store i64 %5283, i64* %PC
  %5284 = inttoptr i64 %5281 to double*
  %5285 = load double, double* %5284
  %5286 = bitcast i8* %5277 to double*
  store double %5285, double* %5286, align 1, !tbaa !2452
  %5287 = getelementptr inbounds i8, i8* %5277, i64 8
  %5288 = bitcast i8* %5287 to double*
  store double 0.000000e+00, double* %5288, align 1, !tbaa !2452
  %5289 = load i64, i64* %RBP
  %5290 = sub i64 %5289, 80
  %5291 = bitcast %union.vec128_t* %XMM0 to i8*
  %5292 = load i64, i64* %PC
  %5293 = add i64 %5292, 5
  store i64 %5293, i64* %PC
  %5294 = bitcast i8* %5291 to double*
  %5295 = load double, double* %5294, align 1
  %5296 = inttoptr i64 %5290 to double*
  store double %5295, double* %5296
  %5297 = load i64, i64* %RBP
  %5298 = sub i64 %5297, 24
  %5299 = load i64, i64* %PC
  %5300 = add i64 %5299, 4
  store i64 %5300, i64* %PC
  %5301 = inttoptr i64 %5298 to i64*
  %5302 = load i64, i64* %5301
  store i64 %5302, i64* %RDX, align 8, !tbaa !2428
  %5303 = load i64, i64* %RBP
  %5304 = sub i64 %5303, 40
  %5305 = load i64, i64* %PC
  %5306 = add i64 %5305, 3
  store i64 %5306, i64* %PC
  %5307 = inttoptr i64 %5304 to i32*
  %5308 = load i32, i32* %5307
  %5309 = zext i32 %5308 to i64
  store i64 %5309, i64* %RCX, align 8, !tbaa !2428
  %5310 = load i64, i64* %RCX
  %5311 = load i64, i64* %PC
  %5312 = add i64 %5311, 3
  store i64 %5312, i64* %PC
  %5313 = trunc i64 %5310 to i32
  %5314 = add i32 1, %5313
  %5315 = zext i32 %5314 to i64
  store i64 %5315, i64* %RCX, align 8, !tbaa !2428
  %5316 = icmp ult i32 %5314, %5313
  %5317 = icmp ult i32 %5314, 1
  %5318 = or i1 %5316, %5317
  %5319 = zext i1 %5318 to i8
  %5320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5319, i8* %5320, align 1, !tbaa !2432
  %5321 = and i32 %5314, 255
  %5322 = call i32 @llvm.ctpop.i32(i32 %5321) #17
  %5323 = trunc i32 %5322 to i8
  %5324 = and i8 %5323, 1
  %5325 = xor i8 %5324, 1
  %5326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5325, i8* %5326, align 1, !tbaa !2446
  %5327 = xor i64 1, %5310
  %5328 = trunc i64 %5327 to i32
  %5329 = xor i32 %5328, %5314
  %5330 = lshr i32 %5329, 4
  %5331 = trunc i32 %5330 to i8
  %5332 = and i8 %5331, 1
  %5333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5332, i8* %5333, align 1, !tbaa !2447
  %5334 = icmp eq i32 %5314, 0
  %5335 = zext i1 %5334 to i8
  %5336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5335, i8* %5336, align 1, !tbaa !2448
  %5337 = lshr i32 %5314, 31
  %5338 = trunc i32 %5337 to i8
  %5339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5338, i8* %5339, align 1, !tbaa !2449
  %5340 = lshr i32 %5313, 31
  %5341 = xor i32 %5337, %5340
  %5342 = add nuw nsw i32 %5341, %5337
  %5343 = icmp eq i32 %5342, 2
  %5344 = zext i1 %5343 to i8
  %5345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5344, i8* %5345, align 1, !tbaa !2450
  %5346 = load i32, i32* %ECX
  %5347 = zext i32 %5346 to i64
  %5348 = load i64, i64* %PC
  %5349 = add i64 %5348, 3
  store i64 %5349, i64* %PC
  %5350 = shl i64 %5347, 32
  %5351 = ashr exact i64 %5350, 32
  store i64 %5351, i64* %RSI, align 8, !tbaa !2428
  %5352 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5353 = load i64, i64* %RDX
  %5354 = load i64, i64* %RSI
  %5355 = mul i64 %5354, 8
  %5356 = add i64 %5355, %5353
  %5357 = load i64, i64* %PC
  %5358 = add i64 %5357, 5
  store i64 %5358, i64* %PC
  %5359 = inttoptr i64 %5356 to double*
  %5360 = load double, double* %5359
  %5361 = bitcast i8* %5352 to double*
  store double %5360, double* %5361, align 1, !tbaa !2452
  %5362 = getelementptr inbounds i8, i8* %5352, i64 8
  %5363 = bitcast i8* %5362 to double*
  store double 0.000000e+00, double* %5363, align 1, !tbaa !2452
  %5364 = bitcast %union.vec128_t* %XMM0 to i8*
  %5365 = load i64, i64* %PC
  %5366 = add i64 %5365, 5
  store i64 %5366, i64* %PC
  %5367 = bitcast i8* %5364 to i64*
  %5368 = load i64, i64* %5367, align 1
  store i64 %5368, i64* %RDX, align 1, !tbaa !2428
  %5369 = load i64, i64* %RDX
  %5370 = load i64, i64* %RAX
  %5371 = load i64, i64* %PC
  %5372 = add i64 %5371, 3
  store i64 %5372, i64* %PC
  %5373 = xor i64 %5370, %5369
  store i64 %5373, i64* %RDX, align 8, !tbaa !2428
  %5374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5374, align 1, !tbaa !2432
  %5375 = trunc i64 %5373 to i32
  %5376 = and i32 %5375, 255
  %5377 = call i32 @llvm.ctpop.i32(i32 %5376) #17
  %5378 = trunc i32 %5377 to i8
  %5379 = and i8 %5378, 1
  %5380 = xor i8 %5379, 1
  %5381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5380, i8* %5381, align 1, !tbaa !2446
  %5382 = icmp eq i64 %5373, 0
  %5383 = zext i1 %5382 to i8
  %5384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5383, i8* %5384, align 1, !tbaa !2448
  %5385 = lshr i64 %5373, 63
  %5386 = trunc i64 %5385 to i8
  %5387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5386, i8* %5387, align 1, !tbaa !2449
  %5388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5388, align 1, !tbaa !2450
  %5389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5389, align 1, !tbaa !2447
  %5390 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5391 = load i64, i64* %RDX
  %5392 = load i64, i64* %PC
  %5393 = add i64 %5392, 5
  store i64 %5393, i64* %PC
  %5394 = bitcast i8* %5390 to i64*
  store i64 %5391, i64* %5394, align 1, !tbaa !2428
  %5395 = getelementptr inbounds i8, i8* %5390, i64 8
  %5396 = bitcast i8* %5395 to i64*
  store i64 0, i64* %5396, align 1, !tbaa !2428
  %5397 = load i64, i64* %RBP
  %5398 = sub i64 %5397, 88
  %5399 = bitcast %union.vec128_t* %XMM0 to i8*
  %5400 = load i64, i64* %PC
  %5401 = add i64 %5400, 5
  store i64 %5401, i64* %PC
  %5402 = bitcast i8* %5399 to double*
  %5403 = load double, double* %5402, align 1
  %5404 = inttoptr i64 %5398 to double*
  store double %5403, double* %5404
  %5405 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5406 = load i64, i64* %RBP
  %5407 = sub i64 %5406, 80
  %5408 = load i64, i64* %PC
  %5409 = add i64 %5408, 5
  store i64 %5409, i64* %PC
  %5410 = inttoptr i64 %5407 to double*
  %5411 = load double, double* %5410
  %5412 = bitcast i8* %5405 to double*
  store double %5411, double* %5412, align 1, !tbaa !2452
  %5413 = getelementptr inbounds i8, i8* %5405, i64 8
  %5414 = bitcast i8* %5413 to double*
  store double 0.000000e+00, double* %5414, align 1, !tbaa !2452
  %5415 = load i64, i64* %RBP
  %5416 = sub i64 %5415, 24
  %5417 = load i64, i64* %PC
  %5418 = add i64 %5417, 4
  store i64 %5418, i64* %PC
  %5419 = inttoptr i64 %5416 to i64*
  %5420 = load i64, i64* %5419
  store i64 %5420, i64* %RDX, align 8, !tbaa !2428
  %5421 = load i64, i64* %RBP
  %5422 = sub i64 %5421, 32
  %5423 = load i64, i64* %PC
  %5424 = add i64 %5423, 4
  store i64 %5424, i64* %PC
  %5425 = inttoptr i64 %5422 to i32*
  %5426 = load i32, i32* %5425
  %5427 = sext i32 %5426 to i64
  store i64 %5427, i64* %RSI, align 8, !tbaa !2428
  %5428 = load i64, i64* %RDX
  %5429 = load i64, i64* %RSI
  %5430 = mul i64 %5429, 8
  %5431 = add i64 %5430, %5428
  %5432 = bitcast %union.vec128_t* %XMM0 to i8*
  %5433 = load i64, i64* %PC
  %5434 = add i64 %5433, 5
  store i64 %5434, i64* %PC
  %5435 = bitcast i8* %5432 to double*
  %5436 = load double, double* %5435, align 1
  %5437 = inttoptr i64 %5431 to double*
  store double %5436, double* %5437
  %5438 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5439 = load i64, i64* %RBP
  %5440 = sub i64 %5439, 88
  %5441 = load i64, i64* %PC
  %5442 = add i64 %5441, 5
  store i64 %5442, i64* %PC
  %5443 = inttoptr i64 %5440 to double*
  %5444 = load double, double* %5443
  %5445 = bitcast i8* %5438 to double*
  store double %5444, double* %5445, align 1, !tbaa !2452
  %5446 = getelementptr inbounds i8, i8* %5438, i64 8
  %5447 = bitcast i8* %5446 to double*
  store double 0.000000e+00, double* %5447, align 1, !tbaa !2452
  %5448 = load i64, i64* %RBP
  %5449 = sub i64 %5448, 24
  %5450 = load i64, i64* %PC
  %5451 = add i64 %5450, 4
  store i64 %5451, i64* %PC
  %5452 = inttoptr i64 %5449 to i64*
  %5453 = load i64, i64* %5452
  store i64 %5453, i64* %RDX, align 8, !tbaa !2428
  %5454 = load i64, i64* %RBP
  %5455 = sub i64 %5454, 32
  %5456 = load i64, i64* %PC
  %5457 = add i64 %5456, 3
  store i64 %5457, i64* %PC
  %5458 = inttoptr i64 %5455 to i32*
  %5459 = load i32, i32* %5458
  %5460 = zext i32 %5459 to i64
  store i64 %5460, i64* %RCX, align 8, !tbaa !2428
  %5461 = load i64, i64* %RCX
  %5462 = load i64, i64* %PC
  %5463 = add i64 %5462, 3
  store i64 %5463, i64* %PC
  %5464 = trunc i64 %5461 to i32
  %5465 = add i32 1, %5464
  %5466 = zext i32 %5465 to i64
  store i64 %5466, i64* %RCX, align 8, !tbaa !2428
  %5467 = icmp ult i32 %5465, %5464
  %5468 = icmp ult i32 %5465, 1
  %5469 = or i1 %5467, %5468
  %5470 = zext i1 %5469 to i8
  %5471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5470, i8* %5471, align 1, !tbaa !2432
  %5472 = and i32 %5465, 255
  %5473 = call i32 @llvm.ctpop.i32(i32 %5472) #17
  %5474 = trunc i32 %5473 to i8
  %5475 = and i8 %5474, 1
  %5476 = xor i8 %5475, 1
  %5477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5476, i8* %5477, align 1, !tbaa !2446
  %5478 = xor i64 1, %5461
  %5479 = trunc i64 %5478 to i32
  %5480 = xor i32 %5479, %5465
  %5481 = lshr i32 %5480, 4
  %5482 = trunc i32 %5481 to i8
  %5483 = and i8 %5482, 1
  %5484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5483, i8* %5484, align 1, !tbaa !2447
  %5485 = icmp eq i32 %5465, 0
  %5486 = zext i1 %5485 to i8
  %5487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5486, i8* %5487, align 1, !tbaa !2448
  %5488 = lshr i32 %5465, 31
  %5489 = trunc i32 %5488 to i8
  %5490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5489, i8* %5490, align 1, !tbaa !2449
  %5491 = lshr i32 %5464, 31
  %5492 = xor i32 %5488, %5491
  %5493 = add nuw nsw i32 %5492, %5488
  %5494 = icmp eq i32 %5493, 2
  %5495 = zext i1 %5494 to i8
  %5496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5495, i8* %5496, align 1, !tbaa !2450
  %5497 = load i32, i32* %ECX
  %5498 = zext i32 %5497 to i64
  %5499 = load i64, i64* %PC
  %5500 = add i64 %5499, 3
  store i64 %5500, i64* %PC
  %5501 = shl i64 %5498, 32
  %5502 = ashr exact i64 %5501, 32
  store i64 %5502, i64* %RSI, align 8, !tbaa !2428
  %5503 = load i64, i64* %RDX
  %5504 = load i64, i64* %RSI
  %5505 = mul i64 %5504, 8
  %5506 = add i64 %5505, %5503
  %5507 = bitcast %union.vec128_t* %XMM0 to i8*
  %5508 = load i64, i64* %PC
  %5509 = add i64 %5508, 5
  store i64 %5509, i64* %PC
  %5510 = bitcast i8* %5507 to double*
  %5511 = load double, double* %5510, align 1
  %5512 = inttoptr i64 %5506 to double*
  store double %5511, double* %5512
  %5513 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5514 = load i64, i64* %RBP
  %5515 = sub i64 %5514, 64
  %5516 = load i64, i64* %PC
  %5517 = add i64 %5516, 5
  store i64 %5517, i64* %PC
  %5518 = inttoptr i64 %5515 to double*
  %5519 = load double, double* %5518
  %5520 = bitcast i8* %5513 to double*
  store double %5519, double* %5520, align 1, !tbaa !2452
  %5521 = getelementptr inbounds i8, i8* %5513, i64 8
  %5522 = bitcast i8* %5521 to double*
  store double 0.000000e+00, double* %5522, align 1, !tbaa !2452
  %5523 = load i64, i64* %RBP
  %5524 = sub i64 %5523, 24
  %5525 = load i64, i64* %PC
  %5526 = add i64 %5525, 4
  store i64 %5526, i64* %PC
  %5527 = inttoptr i64 %5524 to i64*
  %5528 = load i64, i64* %5527
  store i64 %5528, i64* %RDX, align 8, !tbaa !2428
  %5529 = load i64, i64* %RBP
  %5530 = sub i64 %5529, 40
  %5531 = load i64, i64* %PC
  %5532 = add i64 %5531, 4
  store i64 %5532, i64* %PC
  %5533 = inttoptr i64 %5530 to i32*
  %5534 = load i32, i32* %5533
  %5535 = sext i32 %5534 to i64
  store i64 %5535, i64* %RSI, align 8, !tbaa !2428
  %5536 = load i64, i64* %RDX
  %5537 = load i64, i64* %RSI
  %5538 = mul i64 %5537, 8
  %5539 = add i64 %5538, %5536
  %5540 = bitcast %union.vec128_t* %XMM0 to i8*
  %5541 = load i64, i64* %PC
  %5542 = add i64 %5541, 5
  store i64 %5542, i64* %PC
  %5543 = bitcast i8* %5540 to double*
  %5544 = load double, double* %5543, align 1
  %5545 = inttoptr i64 %5539 to double*
  store double %5544, double* %5545
  %5546 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5547 = load i64, i64* %RBP
  %5548 = sub i64 %5547, 72
  %5549 = load i64, i64* %PC
  %5550 = add i64 %5549, 5
  store i64 %5550, i64* %PC
  %5551 = inttoptr i64 %5548 to double*
  %5552 = load double, double* %5551
  %5553 = bitcast i8* %5546 to double*
  store double %5552, double* %5553, align 1, !tbaa !2452
  %5554 = getelementptr inbounds i8, i8* %5546, i64 8
  %5555 = bitcast i8* %5554 to double*
  store double 0.000000e+00, double* %5555, align 1, !tbaa !2452
  %5556 = load i64, i64* %RBP
  %5557 = sub i64 %5556, 24
  %5558 = load i64, i64* %PC
  %5559 = add i64 %5558, 4
  store i64 %5559, i64* %PC
  %5560 = inttoptr i64 %5557 to i64*
  %5561 = load i64, i64* %5560
  store i64 %5561, i64* %RDX, align 8, !tbaa !2428
  %5562 = load i64, i64* %RBP
  %5563 = sub i64 %5562, 40
  %5564 = load i64, i64* %PC
  %5565 = add i64 %5564, 3
  store i64 %5565, i64* %PC
  %5566 = inttoptr i64 %5563 to i32*
  %5567 = load i32, i32* %5566
  %5568 = zext i32 %5567 to i64
  store i64 %5568, i64* %RCX, align 8, !tbaa !2428
  %5569 = load i64, i64* %RCX
  %5570 = load i64, i64* %PC
  %5571 = add i64 %5570, 3
  store i64 %5571, i64* %PC
  %5572 = trunc i64 %5569 to i32
  %5573 = add i32 1, %5572
  %5574 = zext i32 %5573 to i64
  store i64 %5574, i64* %RCX, align 8, !tbaa !2428
  %5575 = icmp ult i32 %5573, %5572
  %5576 = icmp ult i32 %5573, 1
  %5577 = or i1 %5575, %5576
  %5578 = zext i1 %5577 to i8
  %5579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5578, i8* %5579, align 1, !tbaa !2432
  %5580 = and i32 %5573, 255
  %5581 = call i32 @llvm.ctpop.i32(i32 %5580) #17
  %5582 = trunc i32 %5581 to i8
  %5583 = and i8 %5582, 1
  %5584 = xor i8 %5583, 1
  %5585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5584, i8* %5585, align 1, !tbaa !2446
  %5586 = xor i64 1, %5569
  %5587 = trunc i64 %5586 to i32
  %5588 = xor i32 %5587, %5573
  %5589 = lshr i32 %5588, 4
  %5590 = trunc i32 %5589 to i8
  %5591 = and i8 %5590, 1
  %5592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5591, i8* %5592, align 1, !tbaa !2447
  %5593 = icmp eq i32 %5573, 0
  %5594 = zext i1 %5593 to i8
  %5595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5594, i8* %5595, align 1, !tbaa !2448
  %5596 = lshr i32 %5573, 31
  %5597 = trunc i32 %5596 to i8
  %5598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5597, i8* %5598, align 1, !tbaa !2449
  %5599 = lshr i32 %5572, 31
  %5600 = xor i32 %5596, %5599
  %5601 = add nuw nsw i32 %5600, %5596
  %5602 = icmp eq i32 %5601, 2
  %5603 = zext i1 %5602 to i8
  %5604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5603, i8* %5604, align 1, !tbaa !2450
  %5605 = load i32, i32* %ECX
  %5606 = zext i32 %5605 to i64
  %5607 = load i64, i64* %PC
  %5608 = add i64 %5607, 3
  store i64 %5608, i64* %PC
  %5609 = shl i64 %5606, 32
  %5610 = ashr exact i64 %5609, 32
  store i64 %5610, i64* %RSI, align 8, !tbaa !2428
  %5611 = load i64, i64* %RDX
  %5612 = load i64, i64* %RSI
  %5613 = mul i64 %5612, 8
  %5614 = add i64 %5613, %5611
  %5615 = bitcast %union.vec128_t* %XMM0 to i8*
  %5616 = load i64, i64* %PC
  %5617 = add i64 %5616, 5
  store i64 %5617, i64* %PC
  %5618 = bitcast i8* %5615 to double*
  %5619 = load double, double* %5618, align 1
  %5620 = inttoptr i64 %5614 to double*
  store double %5619, double* %5620
  %5621 = load i64, i64* %RBP
  %5622 = sub i64 %5621, 52
  %5623 = load i64, i64* %PC
  %5624 = add i64 %5623, 3
  store i64 %5624, i64* %PC
  %5625 = inttoptr i64 %5622 to i32*
  %5626 = load i32, i32* %5625
  %5627 = zext i32 %5626 to i64
  store i64 %5627, i64* %RCX, align 8, !tbaa !2428
  %5628 = load i64, i64* %RCX
  %5629 = load i64, i64* %RBP
  %5630 = sub i64 %5629, 32
  %5631 = load i64, i64* %PC
  %5632 = add i64 %5631, 3
  store i64 %5632, i64* %PC
  %5633 = trunc i64 %5628 to i32
  %5634 = inttoptr i64 %5630 to i32*
  %5635 = load i32, i32* %5634
  %5636 = add i32 %5635, %5633
  %5637 = zext i32 %5636 to i64
  store i64 %5637, i64* %RCX, align 8, !tbaa !2428
  %5638 = icmp ult i32 %5636, %5633
  %5639 = icmp ult i32 %5636, %5635
  %5640 = or i1 %5638, %5639
  %5641 = zext i1 %5640 to i8
  %5642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5641, i8* %5642, align 1, !tbaa !2432
  %5643 = and i32 %5636, 255
  %5644 = call i32 @llvm.ctpop.i32(i32 %5643) #17
  %5645 = trunc i32 %5644 to i8
  %5646 = and i8 %5645, 1
  %5647 = xor i8 %5646, 1
  %5648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5647, i8* %5648, align 1, !tbaa !2446
  %5649 = xor i32 %5635, %5633
  %5650 = xor i32 %5649, %5636
  %5651 = lshr i32 %5650, 4
  %5652 = trunc i32 %5651 to i8
  %5653 = and i8 %5652, 1
  %5654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5653, i8* %5654, align 1, !tbaa !2447
  %5655 = icmp eq i32 %5636, 0
  %5656 = zext i1 %5655 to i8
  %5657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5656, i8* %5657, align 1, !tbaa !2448
  %5658 = lshr i32 %5636, 31
  %5659 = trunc i32 %5658 to i8
  %5660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5659, i8* %5660, align 1, !tbaa !2449
  %5661 = lshr i32 %5633, 31
  %5662 = lshr i32 %5635, 31
  %5663 = xor i32 %5658, %5661
  %5664 = xor i32 %5658, %5662
  %5665 = add nuw nsw i32 %5663, %5664
  %5666 = icmp eq i32 %5665, 2
  %5667 = zext i1 %5666 to i8
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5667, i8* %5668, align 1, !tbaa !2450
  %5669 = load i64, i64* %RBP
  %5670 = sub i64 %5669, 32
  %5671 = load i32, i32* %ECX
  %5672 = zext i32 %5671 to i64
  %5673 = load i64, i64* %PC
  %5674 = add i64 %5673, 3
  store i64 %5674, i64* %PC
  %5675 = inttoptr i64 %5670 to i32*
  store i32 %5671, i32* %5675
  %5676 = load i64, i64* %RBP
  %5677 = sub i64 %5676, 52
  %5678 = load i64, i64* %PC
  %5679 = add i64 %5678, 3
  store i64 %5679, i64* %PC
  %5680 = inttoptr i64 %5677 to i32*
  %5681 = load i32, i32* %5680
  %5682 = zext i32 %5681 to i64
  store i64 %5682, i64* %RCX, align 8, !tbaa !2428
  %5683 = load i64, i64* %RCX
  %5684 = load i64, i64* %PC
  %5685 = add i64 %5684, 3
  store i64 %5685, i64* %PC
  %5686 = trunc i64 %5683 to i32
  %5687 = shl i32 %5686, 1
  %5688 = icmp slt i32 %5686, 0
  %5689 = icmp slt i32 %5687, 0
  %5690 = xor i1 %5688, %5689
  %5691 = zext i32 %5687 to i64
  store i64 %5691, i64* %RCX, align 8, !tbaa !2428
  %5692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5693 = zext i1 %5688 to i8
  store i8 %5693, i8* %5692, align 1, !tbaa !2451
  %5694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5695 = and i32 %5687, 254
  %5696 = call i32 @llvm.ctpop.i32(i32 %5695) #17
  %5697 = trunc i32 %5696 to i8
  %5698 = and i8 %5697, 1
  %5699 = xor i8 %5698, 1
  store i8 %5699, i8* %5694, align 1, !tbaa !2451
  %5700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5700, align 1, !tbaa !2451
  %5701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5702 = icmp eq i32 %5687, 0
  %5703 = zext i1 %5702 to i8
  store i8 %5703, i8* %5701, align 1, !tbaa !2451
  %5704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5705 = lshr i32 %5687, 31
  %5706 = trunc i32 %5705 to i8
  store i8 %5706, i8* %5704, align 1, !tbaa !2451
  %5707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5708 = zext i1 %5690 to i8
  store i8 %5708, i8* %5707, align 1, !tbaa !2451
  %5709 = load i64, i64* %RCX
  %5710 = load i64, i64* %RBP
  %5711 = sub i64 %5710, 40
  %5712 = load i64, i64* %PC
  %5713 = add i64 %5712, 3
  store i64 %5713, i64* %PC
  %5714 = trunc i64 %5709 to i32
  %5715 = inttoptr i64 %5711 to i32*
  %5716 = load i32, i32* %5715
  %5717 = add i32 %5716, %5714
  %5718 = zext i32 %5717 to i64
  store i64 %5718, i64* %RCX, align 8, !tbaa !2428
  %5719 = icmp ult i32 %5717, %5714
  %5720 = icmp ult i32 %5717, %5716
  %5721 = or i1 %5719, %5720
  %5722 = zext i1 %5721 to i8
  %5723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5722, i8* %5723, align 1, !tbaa !2432
  %5724 = and i32 %5717, 255
  %5725 = call i32 @llvm.ctpop.i32(i32 %5724) #17
  %5726 = trunc i32 %5725 to i8
  %5727 = and i8 %5726, 1
  %5728 = xor i8 %5727, 1
  %5729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5728, i8* %5729, align 1, !tbaa !2446
  %5730 = xor i32 %5716, %5714
  %5731 = xor i32 %5730, %5717
  %5732 = lshr i32 %5731, 4
  %5733 = trunc i32 %5732 to i8
  %5734 = and i8 %5733, 1
  %5735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5734, i8* %5735, align 1, !tbaa !2447
  %5736 = icmp eq i32 %5717, 0
  %5737 = zext i1 %5736 to i8
  %5738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5737, i8* %5738, align 1, !tbaa !2448
  %5739 = lshr i32 %5717, 31
  %5740 = trunc i32 %5739 to i8
  %5741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5740, i8* %5741, align 1, !tbaa !2449
  %5742 = lshr i32 %5714, 31
  %5743 = lshr i32 %5716, 31
  %5744 = xor i32 %5739, %5742
  %5745 = xor i32 %5739, %5743
  %5746 = add nuw nsw i32 %5744, %5745
  %5747 = icmp eq i32 %5746, 2
  %5748 = zext i1 %5747 to i8
  %5749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5748, i8* %5749, align 1, !tbaa !2450
  %5750 = load i64, i64* %RBP
  %5751 = sub i64 %5750, 40
  %5752 = load i32, i32* %ECX
  %5753 = zext i32 %5752 to i64
  %5754 = load i64, i64* %PC
  %5755 = add i64 %5754, 3
  store i64 %5755, i64* %PC
  %5756 = inttoptr i64 %5751 to i32*
  store i32 %5752, i32* %5756
  %5757 = load i64, i64* %RBP
  %5758 = sub i64 %5757, 24
  %5759 = load i64, i64* %PC
  %5760 = add i64 %5759, 4
  store i64 %5760, i64* %PC
  %5761 = inttoptr i64 %5758 to i64*
  %5762 = load i64, i64* %5761
  store i64 %5762, i64* %RDX, align 8, !tbaa !2428
  %5763 = load i64, i64* %RBP
  %5764 = sub i64 %5763, 32
  %5765 = load i64, i64* %PC
  %5766 = add i64 %5765, 4
  store i64 %5766, i64* %PC
  %5767 = inttoptr i64 %5764 to i32*
  %5768 = load i32, i32* %5767
  %5769 = sext i32 %5768 to i64
  store i64 %5769, i64* %RSI, align 8, !tbaa !2428
  %5770 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5771 = load i64, i64* %RDX
  %5772 = load i64, i64* %RSI
  %5773 = mul i64 %5772, 8
  %5774 = add i64 %5773, %5771
  %5775 = load i64, i64* %PC
  %5776 = add i64 %5775, 5
  store i64 %5776, i64* %PC
  %5777 = inttoptr i64 %5774 to double*
  %5778 = load double, double* %5777
  %5779 = bitcast i8* %5770 to double*
  store double %5778, double* %5779, align 1, !tbaa !2452
  %5780 = getelementptr inbounds i8, i8* %5770, i64 8
  %5781 = bitcast i8* %5780 to double*
  store double 0.000000e+00, double* %5781, align 1, !tbaa !2452
  %5782 = load i64, i64* %RBP
  %5783 = sub i64 %5782, 64
  %5784 = bitcast %union.vec128_t* %XMM0 to i8*
  %5785 = load i64, i64* %PC
  %5786 = add i64 %5785, 5
  store i64 %5786, i64* %PC
  %5787 = bitcast i8* %5784 to double*
  %5788 = load double, double* %5787, align 1
  %5789 = inttoptr i64 %5783 to double*
  store double %5788, double* %5789
  %5790 = load i64, i64* %RBP
  %5791 = sub i64 %5790, 24
  %5792 = load i64, i64* %PC
  %5793 = add i64 %5792, 4
  store i64 %5793, i64* %PC
  %5794 = inttoptr i64 %5791 to i64*
  %5795 = load i64, i64* %5794
  store i64 %5795, i64* %RDX, align 8, !tbaa !2428
  %5796 = load i64, i64* %RBP
  %5797 = sub i64 %5796, 32
  %5798 = load i64, i64* %PC
  %5799 = add i64 %5798, 3
  store i64 %5799, i64* %PC
  %5800 = inttoptr i64 %5797 to i32*
  %5801 = load i32, i32* %5800
  %5802 = zext i32 %5801 to i64
  store i64 %5802, i64* %RCX, align 8, !tbaa !2428
  %5803 = load i64, i64* %RCX
  %5804 = load i64, i64* %PC
  %5805 = add i64 %5804, 3
  store i64 %5805, i64* %PC
  %5806 = trunc i64 %5803 to i32
  %5807 = add i32 1, %5806
  %5808 = zext i32 %5807 to i64
  store i64 %5808, i64* %RCX, align 8, !tbaa !2428
  %5809 = icmp ult i32 %5807, %5806
  %5810 = icmp ult i32 %5807, 1
  %5811 = or i1 %5809, %5810
  %5812 = zext i1 %5811 to i8
  %5813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5812, i8* %5813, align 1, !tbaa !2432
  %5814 = and i32 %5807, 255
  %5815 = call i32 @llvm.ctpop.i32(i32 %5814) #17
  %5816 = trunc i32 %5815 to i8
  %5817 = and i8 %5816, 1
  %5818 = xor i8 %5817, 1
  %5819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5818, i8* %5819, align 1, !tbaa !2446
  %5820 = xor i64 1, %5803
  %5821 = trunc i64 %5820 to i32
  %5822 = xor i32 %5821, %5807
  %5823 = lshr i32 %5822, 4
  %5824 = trunc i32 %5823 to i8
  %5825 = and i8 %5824, 1
  %5826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5825, i8* %5826, align 1, !tbaa !2447
  %5827 = icmp eq i32 %5807, 0
  %5828 = zext i1 %5827 to i8
  %5829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5828, i8* %5829, align 1, !tbaa !2448
  %5830 = lshr i32 %5807, 31
  %5831 = trunc i32 %5830 to i8
  %5832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5831, i8* %5832, align 1, !tbaa !2449
  %5833 = lshr i32 %5806, 31
  %5834 = xor i32 %5830, %5833
  %5835 = add nuw nsw i32 %5834, %5830
  %5836 = icmp eq i32 %5835, 2
  %5837 = zext i1 %5836 to i8
  %5838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5837, i8* %5838, align 1, !tbaa !2450
  %5839 = load i32, i32* %ECX
  %5840 = zext i32 %5839 to i64
  %5841 = load i64, i64* %PC
  %5842 = add i64 %5841, 3
  store i64 %5842, i64* %PC
  %5843 = shl i64 %5840, 32
  %5844 = ashr exact i64 %5843, 32
  store i64 %5844, i64* %RSI, align 8, !tbaa !2428
  %5845 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5846 = load i64, i64* %RDX
  %5847 = load i64, i64* %RSI
  %5848 = mul i64 %5847, 8
  %5849 = add i64 %5848, %5846
  %5850 = load i64, i64* %PC
  %5851 = add i64 %5850, 5
  store i64 %5851, i64* %PC
  %5852 = inttoptr i64 %5849 to double*
  %5853 = load double, double* %5852
  %5854 = bitcast i8* %5845 to double*
  store double %5853, double* %5854, align 1, !tbaa !2452
  %5855 = getelementptr inbounds i8, i8* %5845, i64 8
  %5856 = bitcast i8* %5855 to double*
  store double 0.000000e+00, double* %5856, align 1, !tbaa !2452
  %5857 = bitcast %union.vec128_t* %XMM0 to i8*
  %5858 = load i64, i64* %PC
  %5859 = add i64 %5858, 5
  store i64 %5859, i64* %PC
  %5860 = bitcast i8* %5857 to i64*
  %5861 = load i64, i64* %5860, align 1
  store i64 %5861, i64* %RDX, align 1, !tbaa !2428
  %5862 = load i64, i64* %RDX
  %5863 = load i64, i64* %RAX
  %5864 = load i64, i64* %PC
  %5865 = add i64 %5864, 3
  store i64 %5865, i64* %PC
  %5866 = xor i64 %5863, %5862
  store i64 %5866, i64* %RDX, align 8, !tbaa !2428
  %5867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5867, align 1, !tbaa !2432
  %5868 = trunc i64 %5866 to i32
  %5869 = and i32 %5868, 255
  %5870 = call i32 @llvm.ctpop.i32(i32 %5869) #17
  %5871 = trunc i32 %5870 to i8
  %5872 = and i8 %5871, 1
  %5873 = xor i8 %5872, 1
  %5874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5873, i8* %5874, align 1, !tbaa !2446
  %5875 = icmp eq i64 %5866, 0
  %5876 = zext i1 %5875 to i8
  %5877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5876, i8* %5877, align 1, !tbaa !2448
  %5878 = lshr i64 %5866, 63
  %5879 = trunc i64 %5878 to i8
  %5880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5879, i8* %5880, align 1, !tbaa !2449
  %5881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5881, align 1, !tbaa !2450
  %5882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5882, align 1, !tbaa !2447
  %5883 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5884 = load i64, i64* %RDX
  %5885 = load i64, i64* %PC
  %5886 = add i64 %5885, 5
  store i64 %5886, i64* %PC
  %5887 = bitcast i8* %5883 to i64*
  store i64 %5884, i64* %5887, align 1, !tbaa !2428
  %5888 = getelementptr inbounds i8, i8* %5883, i64 8
  %5889 = bitcast i8* %5888 to i64*
  store i64 0, i64* %5889, align 1, !tbaa !2428
  %5890 = load i64, i64* %RBP
  %5891 = sub i64 %5890, 72
  %5892 = bitcast %union.vec128_t* %XMM0 to i8*
  %5893 = load i64, i64* %PC
  %5894 = add i64 %5893, 5
  store i64 %5894, i64* %PC
  %5895 = bitcast i8* %5892 to double*
  %5896 = load double, double* %5895, align 1
  %5897 = inttoptr i64 %5891 to double*
  store double %5896, double* %5897
  %5898 = load i64, i64* %RBP
  %5899 = sub i64 %5898, 24
  %5900 = load i64, i64* %PC
  %5901 = add i64 %5900, 4
  store i64 %5901, i64* %PC
  %5902 = inttoptr i64 %5899 to i64*
  %5903 = load i64, i64* %5902
  store i64 %5903, i64* %RDX, align 8, !tbaa !2428
  %5904 = load i64, i64* %RBP
  %5905 = sub i64 %5904, 40
  %5906 = load i64, i64* %PC
  %5907 = add i64 %5906, 4
  store i64 %5907, i64* %PC
  %5908 = inttoptr i64 %5905 to i32*
  %5909 = load i32, i32* %5908
  %5910 = sext i32 %5909 to i64
  store i64 %5910, i64* %RSI, align 8, !tbaa !2428
  %5911 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5912 = load i64, i64* %RDX
  %5913 = load i64, i64* %RSI
  %5914 = mul i64 %5913, 8
  %5915 = add i64 %5914, %5912
  %5916 = load i64, i64* %PC
  %5917 = add i64 %5916, 5
  store i64 %5917, i64* %PC
  %5918 = inttoptr i64 %5915 to double*
  %5919 = load double, double* %5918
  %5920 = bitcast i8* %5911 to double*
  store double %5919, double* %5920, align 1, !tbaa !2452
  %5921 = getelementptr inbounds i8, i8* %5911, i64 8
  %5922 = bitcast i8* %5921 to double*
  store double 0.000000e+00, double* %5922, align 1, !tbaa !2452
  %5923 = load i64, i64* %RBP
  %5924 = sub i64 %5923, 80
  %5925 = bitcast %union.vec128_t* %XMM0 to i8*
  %5926 = load i64, i64* %PC
  %5927 = add i64 %5926, 5
  store i64 %5927, i64* %PC
  %5928 = bitcast i8* %5925 to double*
  %5929 = load double, double* %5928, align 1
  %5930 = inttoptr i64 %5924 to double*
  store double %5929, double* %5930
  %5931 = load i64, i64* %RBP
  %5932 = sub i64 %5931, 24
  %5933 = load i64, i64* %PC
  %5934 = add i64 %5933, 4
  store i64 %5934, i64* %PC
  %5935 = inttoptr i64 %5932 to i64*
  %5936 = load i64, i64* %5935
  store i64 %5936, i64* %RDX, align 8, !tbaa !2428
  %5937 = load i64, i64* %RBP
  %5938 = sub i64 %5937, 40
  %5939 = load i64, i64* %PC
  %5940 = add i64 %5939, 3
  store i64 %5940, i64* %PC
  %5941 = inttoptr i64 %5938 to i32*
  %5942 = load i32, i32* %5941
  %5943 = zext i32 %5942 to i64
  store i64 %5943, i64* %RCX, align 8, !tbaa !2428
  %5944 = load i64, i64* %RCX
  %5945 = load i64, i64* %PC
  %5946 = add i64 %5945, 3
  store i64 %5946, i64* %PC
  %5947 = trunc i64 %5944 to i32
  %5948 = add i32 1, %5947
  %5949 = zext i32 %5948 to i64
  store i64 %5949, i64* %RCX, align 8, !tbaa !2428
  %5950 = icmp ult i32 %5948, %5947
  %5951 = icmp ult i32 %5948, 1
  %5952 = or i1 %5950, %5951
  %5953 = zext i1 %5952 to i8
  %5954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5953, i8* %5954, align 1, !tbaa !2432
  %5955 = and i32 %5948, 255
  %5956 = call i32 @llvm.ctpop.i32(i32 %5955) #17
  %5957 = trunc i32 %5956 to i8
  %5958 = and i8 %5957, 1
  %5959 = xor i8 %5958, 1
  %5960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5959, i8* %5960, align 1, !tbaa !2446
  %5961 = xor i64 1, %5944
  %5962 = trunc i64 %5961 to i32
  %5963 = xor i32 %5962, %5948
  %5964 = lshr i32 %5963, 4
  %5965 = trunc i32 %5964 to i8
  %5966 = and i8 %5965, 1
  %5967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5966, i8* %5967, align 1, !tbaa !2447
  %5968 = icmp eq i32 %5948, 0
  %5969 = zext i1 %5968 to i8
  %5970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5969, i8* %5970, align 1, !tbaa !2448
  %5971 = lshr i32 %5948, 31
  %5972 = trunc i32 %5971 to i8
  %5973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5972, i8* %5973, align 1, !tbaa !2449
  %5974 = lshr i32 %5947, 31
  %5975 = xor i32 %5971, %5974
  %5976 = add nuw nsw i32 %5975, %5971
  %5977 = icmp eq i32 %5976, 2
  %5978 = zext i1 %5977 to i8
  %5979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5978, i8* %5979, align 1, !tbaa !2450
  %5980 = load i32, i32* %ECX
  %5981 = zext i32 %5980 to i64
  %5982 = load i64, i64* %PC
  %5983 = add i64 %5982, 3
  store i64 %5983, i64* %PC
  %5984 = shl i64 %5981, 32
  %5985 = ashr exact i64 %5984, 32
  store i64 %5985, i64* %RSI, align 8, !tbaa !2428
  %5986 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5987 = load i64, i64* %RDX
  %5988 = load i64, i64* %RSI
  %5989 = mul i64 %5988, 8
  %5990 = add i64 %5989, %5987
  %5991 = load i64, i64* %PC
  %5992 = add i64 %5991, 5
  store i64 %5992, i64* %PC
  %5993 = inttoptr i64 %5990 to double*
  %5994 = load double, double* %5993
  %5995 = bitcast i8* %5986 to double*
  store double %5994, double* %5995, align 1, !tbaa !2452
  %5996 = getelementptr inbounds i8, i8* %5986, i64 8
  %5997 = bitcast i8* %5996 to double*
  store double 0.000000e+00, double* %5997, align 1, !tbaa !2452
  %5998 = bitcast %union.vec128_t* %XMM0 to i8*
  %5999 = load i64, i64* %PC
  %6000 = add i64 %5999, 5
  store i64 %6000, i64* %PC
  %6001 = bitcast i8* %5998 to i64*
  %6002 = load i64, i64* %6001, align 1
  store i64 %6002, i64* %RDX, align 1, !tbaa !2428
  %6003 = load i64, i64* %RDX
  %6004 = load i64, i64* %RAX
  %6005 = load i64, i64* %PC
  %6006 = add i64 %6005, 3
  store i64 %6006, i64* %PC
  %6007 = xor i64 %6004, %6003
  store i64 %6007, i64* %RDX, align 8, !tbaa !2428
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6008, align 1, !tbaa !2432
  %6009 = trunc i64 %6007 to i32
  %6010 = and i32 %6009, 255
  %6011 = call i32 @llvm.ctpop.i32(i32 %6010) #17
  %6012 = trunc i32 %6011 to i8
  %6013 = and i8 %6012, 1
  %6014 = xor i8 %6013, 1
  %6015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6014, i8* %6015, align 1, !tbaa !2446
  %6016 = icmp eq i64 %6007, 0
  %6017 = zext i1 %6016 to i8
  %6018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6017, i8* %6018, align 1, !tbaa !2448
  %6019 = lshr i64 %6007, 63
  %6020 = trunc i64 %6019 to i8
  %6021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6020, i8* %6021, align 1, !tbaa !2449
  %6022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6022, align 1, !tbaa !2450
  %6023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6023, align 1, !tbaa !2447
  %6024 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6025 = load i64, i64* %RDX
  %6026 = load i64, i64* %PC
  %6027 = add i64 %6026, 5
  store i64 %6027, i64* %PC
  %6028 = bitcast i8* %6024 to i64*
  store i64 %6025, i64* %6028, align 1, !tbaa !2428
  %6029 = getelementptr inbounds i8, i8* %6024, i64 8
  %6030 = bitcast i8* %6029 to i64*
  store i64 0, i64* %6030, align 1, !tbaa !2428
  %6031 = load i64, i64* %RBP
  %6032 = sub i64 %6031, 88
  %6033 = bitcast %union.vec128_t* %XMM0 to i8*
  %6034 = load i64, i64* %PC
  %6035 = add i64 %6034, 5
  store i64 %6035, i64* %PC
  %6036 = bitcast i8* %6033 to double*
  %6037 = load double, double* %6036, align 1
  %6038 = inttoptr i64 %6032 to double*
  store double %6037, double* %6038
  %6039 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6040 = load i64, i64* %RBP
  %6041 = sub i64 %6040, 80
  %6042 = load i64, i64* %PC
  %6043 = add i64 %6042, 5
  store i64 %6043, i64* %PC
  %6044 = inttoptr i64 %6041 to double*
  %6045 = load double, double* %6044
  %6046 = bitcast i8* %6039 to double*
  store double %6045, double* %6046, align 1, !tbaa !2452
  %6047 = getelementptr inbounds i8, i8* %6039, i64 8
  %6048 = bitcast i8* %6047 to double*
  store double 0.000000e+00, double* %6048, align 1, !tbaa !2452
  %6049 = load i64, i64* %RBP
  %6050 = sub i64 %6049, 24
  %6051 = load i64, i64* %PC
  %6052 = add i64 %6051, 4
  store i64 %6052, i64* %PC
  %6053 = inttoptr i64 %6050 to i64*
  %6054 = load i64, i64* %6053
  store i64 %6054, i64* %RAX, align 8, !tbaa !2428
  %6055 = load i64, i64* %RBP
  %6056 = sub i64 %6055, 32
  %6057 = load i64, i64* %PC
  %6058 = add i64 %6057, 4
  store i64 %6058, i64* %PC
  %6059 = inttoptr i64 %6056 to i32*
  %6060 = load i32, i32* %6059
  %6061 = sext i32 %6060 to i64
  store i64 %6061, i64* %RDX, align 8, !tbaa !2428
  %6062 = load i64, i64* %RAX
  %6063 = load i64, i64* %RDX
  %6064 = mul i64 %6063, 8
  %6065 = add i64 %6064, %6062
  %6066 = bitcast %union.vec128_t* %XMM0 to i8*
  %6067 = load i64, i64* %PC
  %6068 = add i64 %6067, 5
  store i64 %6068, i64* %PC
  %6069 = bitcast i8* %6066 to double*
  %6070 = load double, double* %6069, align 1
  %6071 = inttoptr i64 %6065 to double*
  store double %6070, double* %6071
  %6072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6073 = load i64, i64* %RBP
  %6074 = sub i64 %6073, 88
  %6075 = load i64, i64* %PC
  %6076 = add i64 %6075, 5
  store i64 %6076, i64* %PC
  %6077 = inttoptr i64 %6074 to double*
  %6078 = load double, double* %6077
  %6079 = bitcast i8* %6072 to double*
  store double %6078, double* %6079, align 1, !tbaa !2452
  %6080 = getelementptr inbounds i8, i8* %6072, i64 8
  %6081 = bitcast i8* %6080 to double*
  store double 0.000000e+00, double* %6081, align 1, !tbaa !2452
  %6082 = load i64, i64* %RBP
  %6083 = sub i64 %6082, 24
  %6084 = load i64, i64* %PC
  %6085 = add i64 %6084, 4
  store i64 %6085, i64* %PC
  %6086 = inttoptr i64 %6083 to i64*
  %6087 = load i64, i64* %6086
  store i64 %6087, i64* %RAX, align 8, !tbaa !2428
  %6088 = load i64, i64* %RBP
  %6089 = sub i64 %6088, 32
  %6090 = load i64, i64* %PC
  %6091 = add i64 %6090, 3
  store i64 %6091, i64* %PC
  %6092 = inttoptr i64 %6089 to i32*
  %6093 = load i32, i32* %6092
  %6094 = zext i32 %6093 to i64
  store i64 %6094, i64* %RCX, align 8, !tbaa !2428
  %6095 = load i64, i64* %RCX
  %6096 = load i64, i64* %PC
  %6097 = add i64 %6096, 3
  store i64 %6097, i64* %PC
  %6098 = trunc i64 %6095 to i32
  %6099 = add i32 1, %6098
  %6100 = zext i32 %6099 to i64
  store i64 %6100, i64* %RCX, align 8, !tbaa !2428
  %6101 = icmp ult i32 %6099, %6098
  %6102 = icmp ult i32 %6099, 1
  %6103 = or i1 %6101, %6102
  %6104 = zext i1 %6103 to i8
  %6105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6104, i8* %6105, align 1, !tbaa !2432
  %6106 = and i32 %6099, 255
  %6107 = call i32 @llvm.ctpop.i32(i32 %6106) #17
  %6108 = trunc i32 %6107 to i8
  %6109 = and i8 %6108, 1
  %6110 = xor i8 %6109, 1
  %6111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6110, i8* %6111, align 1, !tbaa !2446
  %6112 = xor i64 1, %6095
  %6113 = trunc i64 %6112 to i32
  %6114 = xor i32 %6113, %6099
  %6115 = lshr i32 %6114, 4
  %6116 = trunc i32 %6115 to i8
  %6117 = and i8 %6116, 1
  %6118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6117, i8* %6118, align 1, !tbaa !2447
  %6119 = icmp eq i32 %6099, 0
  %6120 = zext i1 %6119 to i8
  %6121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6120, i8* %6121, align 1, !tbaa !2448
  %6122 = lshr i32 %6099, 31
  %6123 = trunc i32 %6122 to i8
  %6124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6123, i8* %6124, align 1, !tbaa !2449
  %6125 = lshr i32 %6098, 31
  %6126 = xor i32 %6122, %6125
  %6127 = add nuw nsw i32 %6126, %6122
  %6128 = icmp eq i32 %6127, 2
  %6129 = zext i1 %6128 to i8
  %6130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6129, i8* %6130, align 1, !tbaa !2450
  %6131 = load i32, i32* %ECX
  %6132 = zext i32 %6131 to i64
  %6133 = load i64, i64* %PC
  %6134 = add i64 %6133, 3
  store i64 %6134, i64* %PC
  %6135 = shl i64 %6132, 32
  %6136 = ashr exact i64 %6135, 32
  store i64 %6136, i64* %RDX, align 8, !tbaa !2428
  %6137 = load i64, i64* %RAX
  %6138 = load i64, i64* %RDX
  %6139 = mul i64 %6138, 8
  %6140 = add i64 %6139, %6137
  %6141 = bitcast %union.vec128_t* %XMM0 to i8*
  %6142 = load i64, i64* %PC
  %6143 = add i64 %6142, 5
  store i64 %6143, i64* %PC
  %6144 = bitcast i8* %6141 to double*
  %6145 = load double, double* %6144, align 1
  %6146 = inttoptr i64 %6140 to double*
  store double %6145, double* %6146
  %6147 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6148 = load i64, i64* %RBP
  %6149 = sub i64 %6148, 64
  %6150 = load i64, i64* %PC
  %6151 = add i64 %6150, 5
  store i64 %6151, i64* %PC
  %6152 = inttoptr i64 %6149 to double*
  %6153 = load double, double* %6152
  %6154 = bitcast i8* %6147 to double*
  store double %6153, double* %6154, align 1, !tbaa !2452
  %6155 = getelementptr inbounds i8, i8* %6147, i64 8
  %6156 = bitcast i8* %6155 to double*
  store double 0.000000e+00, double* %6156, align 1, !tbaa !2452
  %6157 = load i64, i64* %RBP
  %6158 = sub i64 %6157, 24
  %6159 = load i64, i64* %PC
  %6160 = add i64 %6159, 4
  store i64 %6160, i64* %PC
  %6161 = inttoptr i64 %6158 to i64*
  %6162 = load i64, i64* %6161
  store i64 %6162, i64* %RAX, align 8, !tbaa !2428
  %6163 = load i64, i64* %RBP
  %6164 = sub i64 %6163, 40
  %6165 = load i64, i64* %PC
  %6166 = add i64 %6165, 4
  store i64 %6166, i64* %PC
  %6167 = inttoptr i64 %6164 to i32*
  %6168 = load i32, i32* %6167
  %6169 = sext i32 %6168 to i64
  store i64 %6169, i64* %RDX, align 8, !tbaa !2428
  %6170 = load i64, i64* %RAX
  %6171 = load i64, i64* %RDX
  %6172 = mul i64 %6171, 8
  %6173 = add i64 %6172, %6170
  %6174 = bitcast %union.vec128_t* %XMM0 to i8*
  %6175 = load i64, i64* %PC
  %6176 = add i64 %6175, 5
  store i64 %6176, i64* %PC
  %6177 = bitcast i8* %6174 to double*
  %6178 = load double, double* %6177, align 1
  %6179 = inttoptr i64 %6173 to double*
  store double %6178, double* %6179
  %6180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6181 = load i64, i64* %RBP
  %6182 = sub i64 %6181, 72
  %6183 = load i64, i64* %PC
  %6184 = add i64 %6183, 5
  store i64 %6184, i64* %PC
  %6185 = inttoptr i64 %6182 to double*
  %6186 = load double, double* %6185
  %6187 = bitcast i8* %6180 to double*
  store double %6186, double* %6187, align 1, !tbaa !2452
  %6188 = getelementptr inbounds i8, i8* %6180, i64 8
  %6189 = bitcast i8* %6188 to double*
  store double 0.000000e+00, double* %6189, align 1, !tbaa !2452
  %6190 = load i64, i64* %RBP
  %6191 = sub i64 %6190, 24
  %6192 = load i64, i64* %PC
  %6193 = add i64 %6192, 4
  store i64 %6193, i64* %PC
  %6194 = inttoptr i64 %6191 to i64*
  %6195 = load i64, i64* %6194
  store i64 %6195, i64* %RAX, align 8, !tbaa !2428
  %6196 = load i64, i64* %RBP
  %6197 = sub i64 %6196, 40
  %6198 = load i64, i64* %PC
  %6199 = add i64 %6198, 3
  store i64 %6199, i64* %PC
  %6200 = inttoptr i64 %6197 to i32*
  %6201 = load i32, i32* %6200
  %6202 = zext i32 %6201 to i64
  store i64 %6202, i64* %RCX, align 8, !tbaa !2428
  %6203 = load i64, i64* %RCX
  %6204 = load i64, i64* %PC
  %6205 = add i64 %6204, 3
  store i64 %6205, i64* %PC
  %6206 = trunc i64 %6203 to i32
  %6207 = add i32 1, %6206
  %6208 = zext i32 %6207 to i64
  store i64 %6208, i64* %RCX, align 8, !tbaa !2428
  %6209 = icmp ult i32 %6207, %6206
  %6210 = icmp ult i32 %6207, 1
  %6211 = or i1 %6209, %6210
  %6212 = zext i1 %6211 to i8
  %6213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6212, i8* %6213, align 1, !tbaa !2432
  %6214 = and i32 %6207, 255
  %6215 = call i32 @llvm.ctpop.i32(i32 %6214) #17
  %6216 = trunc i32 %6215 to i8
  %6217 = and i8 %6216, 1
  %6218 = xor i8 %6217, 1
  %6219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6218, i8* %6219, align 1, !tbaa !2446
  %6220 = xor i64 1, %6203
  %6221 = trunc i64 %6220 to i32
  %6222 = xor i32 %6221, %6207
  %6223 = lshr i32 %6222, 4
  %6224 = trunc i32 %6223 to i8
  %6225 = and i8 %6224, 1
  %6226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6225, i8* %6226, align 1, !tbaa !2447
  %6227 = icmp eq i32 %6207, 0
  %6228 = zext i1 %6227 to i8
  %6229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6228, i8* %6229, align 1, !tbaa !2448
  %6230 = lshr i32 %6207, 31
  %6231 = trunc i32 %6230 to i8
  %6232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6231, i8* %6232, align 1, !tbaa !2449
  %6233 = lshr i32 %6206, 31
  %6234 = xor i32 %6230, %6233
  %6235 = add nuw nsw i32 %6234, %6230
  %6236 = icmp eq i32 %6235, 2
  %6237 = zext i1 %6236 to i8
  %6238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6237, i8* %6238, align 1, !tbaa !2450
  %6239 = load i32, i32* %ECX
  %6240 = zext i32 %6239 to i64
  %6241 = load i64, i64* %PC
  %6242 = add i64 %6241, 3
  store i64 %6242, i64* %PC
  %6243 = shl i64 %6240, 32
  %6244 = ashr exact i64 %6243, 32
  store i64 %6244, i64* %RDX, align 8, !tbaa !2428
  %6245 = load i64, i64* %RAX
  %6246 = load i64, i64* %RDX
  %6247 = mul i64 %6246, 8
  %6248 = add i64 %6247, %6245
  %6249 = bitcast %union.vec128_t* %XMM0 to i8*
  %6250 = load i64, i64* %PC
  %6251 = add i64 %6250, 5
  store i64 %6251, i64* %PC
  %6252 = bitcast i8* %6249 to double*
  %6253 = load double, double* %6252, align 1
  %6254 = inttoptr i64 %6248 to double*
  store double %6253, double* %6254
  %6255 = load i64, i64* %RBP
  %6256 = sub i64 %6255, 28
  %6257 = load i64, i64* %PC
  %6258 = add i64 %6257, 3
  store i64 %6258, i64* %PC
  %6259 = inttoptr i64 %6256 to i32*
  %6260 = load i32, i32* %6259
  %6261 = zext i32 %6260 to i64
  store i64 %6261, i64* %RAX, align 8, !tbaa !2428
  %6262 = load i64, i64* %RAX
  %6263 = load i64, i64* %PC
  %6264 = add i64 %6263, 3
  store i64 %6264, i64* %PC
  %6265 = trunc i64 %6262 to i32
  %6266 = add i32 1, %6265
  %6267 = zext i32 %6266 to i64
  store i64 %6267, i64* %RAX, align 8, !tbaa !2428
  %6268 = icmp ult i32 %6266, %6265
  %6269 = icmp ult i32 %6266, 1
  %6270 = or i1 %6268, %6269
  %6271 = zext i1 %6270 to i8
  %6272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6271, i8* %6272, align 1, !tbaa !2432
  %6273 = and i32 %6266, 255
  %6274 = call i32 @llvm.ctpop.i32(i32 %6273) #17
  %6275 = trunc i32 %6274 to i8
  %6276 = and i8 %6275, 1
  %6277 = xor i8 %6276, 1
  %6278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6277, i8* %6278, align 1, !tbaa !2446
  %6279 = xor i64 1, %6262
  %6280 = trunc i64 %6279 to i32
  %6281 = xor i32 %6280, %6266
  %6282 = lshr i32 %6281, 4
  %6283 = trunc i32 %6282 to i8
  %6284 = and i8 %6283, 1
  %6285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6284, i8* %6285, align 1, !tbaa !2447
  %6286 = icmp eq i32 %6266, 0
  %6287 = zext i1 %6286 to i8
  %6288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6287, i8* %6288, align 1, !tbaa !2448
  %6289 = lshr i32 %6266, 31
  %6290 = trunc i32 %6289 to i8
  %6291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6290, i8* %6291, align 1, !tbaa !2449
  %6292 = lshr i32 %6265, 31
  %6293 = xor i32 %6289, %6292
  %6294 = add nuw nsw i32 %6293, %6289
  %6295 = icmp eq i32 %6294, 2
  %6296 = zext i1 %6295 to i8
  %6297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6296, i8* %6297, align 1, !tbaa !2450
  %6298 = load i64, i64* %RBP
  %6299 = sub i64 %6298, 28
  %6300 = load i32, i32* %EAX
  %6301 = zext i32 %6300 to i64
  %6302 = load i64, i64* %PC
  %6303 = add i64 %6302, 3
  store i64 %6303, i64* %PC
  %6304 = inttoptr i64 %6299 to i32*
  store i32 %6300, i32* %6304
  %6305 = load i64, i64* %PC
  %6306 = sub i64 %6305, 893
  %6307 = load i64, i64* %PC
  %6308 = add i64 %6307, 5
  store i64 %6308, i64* %PC
  %6309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6306, i64* %6309, align 8, !tbaa !2428
  br label %block_401ccd

block_402409:                                     ; preds = %block_40222f
  %6310 = sub i64 %3258, 36
  %6311 = load i64, i64* %PC
  %6312 = add i64 %6311, 3
  store i64 %6312, i64* %PC
  %6313 = inttoptr i64 %6310 to i32*
  %6314 = load i32, i32* %6313
  %6315 = zext i32 %6314 to i64
  store i64 %6315, i64* %RCX, align 8, !tbaa !2428
  %6316 = load i64, i64* %RCX
  %6317 = load i64, i64* %PC
  %6318 = add i64 %6317, 3
  store i64 %6318, i64* %PC
  %6319 = trunc i64 %6316 to i32
  %6320 = shl i32 %6319, 1
  %6321 = icmp slt i32 %6319, 0
  %6322 = icmp slt i32 %6320, 0
  %6323 = xor i1 %6321, %6322
  %6324 = zext i32 %6320 to i64
  store i64 %6324, i64* %RCX, align 8, !tbaa !2428
  %6325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6326 = zext i1 %6321 to i8
  store i8 %6326, i8* %6325, align 1, !tbaa !2451
  %6327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6328 = and i32 %6320, 254
  %6329 = call i32 @llvm.ctpop.i32(i32 %6328) #17
  %6330 = trunc i32 %6329 to i8
  %6331 = and i8 %6330, 1
  %6332 = xor i8 %6331, 1
  store i8 %6332, i8* %6327, align 1, !tbaa !2451
  %6333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6333, align 1, !tbaa !2451
  %6334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6335 = icmp eq i32 %6320, 0
  %6336 = zext i1 %6335 to i8
  store i8 %6336, i8* %6334, align 1, !tbaa !2451
  %6337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6338 = lshr i32 %6320, 31
  %6339 = trunc i32 %6338 to i8
  store i8 %6339, i8* %6337, align 1, !tbaa !2451
  %6340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6341 = zext i1 %6323 to i8
  store i8 %6341, i8* %6340, align 1, !tbaa !2451
  %6342 = load i64, i64* %RBP
  %6343 = sub i64 %6342, 16
  %6344 = load i64, i64* %PC
  %6345 = add i64 %6344, 4
  store i64 %6345, i64* %PC
  %6346 = inttoptr i64 %6343 to i64*
  %6347 = load i64, i64* %6346
  store i64 %6347, i64* %RDX, align 8, !tbaa !2428
  %6348 = load i64, i64* %RBP
  %6349 = sub i64 %6348, 36
  %6350 = load i64, i64* %PC
  %6351 = add i64 %6350, 4
  store i64 %6351, i64* %PC
  %6352 = inttoptr i64 %6349 to i32*
  %6353 = load i32, i32* %6352
  %6354 = sext i32 %6353 to i64
  store i64 %6354, i64* %RSI, align 8, !tbaa !2428
  %6355 = load i64, i64* %RCX
  %6356 = load i64, i64* %RDX
  %6357 = load i64, i64* %RSI
  %6358 = mul i64 %6357, 4
  %6359 = add i64 %6358, %6356
  %6360 = load i64, i64* %PC
  %6361 = add i64 %6360, 3
  store i64 %6361, i64* %PC
  %6362 = trunc i64 %6355 to i32
  %6363 = inttoptr i64 %6359 to i32*
  %6364 = load i32, i32* %6363
  %6365 = add i32 %6364, %6362
  %6366 = zext i32 %6365 to i64
  store i64 %6366, i64* %RCX, align 8, !tbaa !2428
  %6367 = icmp ult i32 %6365, %6362
  %6368 = icmp ult i32 %6365, %6364
  %6369 = or i1 %6367, %6368
  %6370 = zext i1 %6369 to i8
  %6371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6370, i8* %6371, align 1, !tbaa !2432
  %6372 = and i32 %6365, 255
  %6373 = call i32 @llvm.ctpop.i32(i32 %6372) #17
  %6374 = trunc i32 %6373 to i8
  %6375 = and i8 %6374, 1
  %6376 = xor i8 %6375, 1
  %6377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6376, i8* %6377, align 1, !tbaa !2446
  %6378 = xor i32 %6364, %6362
  %6379 = xor i32 %6378, %6365
  %6380 = lshr i32 %6379, 4
  %6381 = trunc i32 %6380 to i8
  %6382 = and i8 %6381, 1
  %6383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6382, i8* %6383, align 1, !tbaa !2447
  %6384 = icmp eq i32 %6365, 0
  %6385 = zext i1 %6384 to i8
  %6386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6385, i8* %6386, align 1, !tbaa !2448
  %6387 = lshr i32 %6365, 31
  %6388 = trunc i32 %6387 to i8
  %6389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6388, i8* %6389, align 1, !tbaa !2449
  %6390 = lshr i32 %6362, 31
  %6391 = lshr i32 %6364, 31
  %6392 = xor i32 %6387, %6390
  %6393 = xor i32 %6387, %6391
  %6394 = add nuw nsw i32 %6392, %6393
  %6395 = icmp eq i32 %6394, 2
  %6396 = zext i1 %6395 to i8
  %6397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6396, i8* %6397, align 1, !tbaa !2450
  %6398 = load i64, i64* %RBP
  %6399 = sub i64 %6398, 40
  %6400 = load i32, i32* %ECX
  %6401 = zext i32 %6400 to i64
  %6402 = load i64, i64* %PC
  %6403 = add i64 %6402, 3
  store i64 %6403, i64* %PC
  %6404 = inttoptr i64 %6399 to i32*
  store i32 %6400, i32* %6404
  %6405 = load i64, i64* %RBP
  %6406 = sub i64 %6405, 24
  %6407 = load i64, i64* %PC
  %6408 = add i64 %6407, 4
  store i64 %6408, i64* %PC
  %6409 = inttoptr i64 %6406 to i64*
  %6410 = load i64, i64* %6409
  store i64 %6410, i64* %RDX, align 8, !tbaa !2428
  %6411 = load i64, i64* %RBP
  %6412 = sub i64 %6411, 40
  %6413 = load i64, i64* %PC
  %6414 = add i64 %6413, 3
  store i64 %6414, i64* %PC
  %6415 = inttoptr i64 %6412 to i32*
  %6416 = load i32, i32* %6415
  %6417 = zext i32 %6416 to i64
  store i64 %6417, i64* %RCX, align 8, !tbaa !2428
  %6418 = load i64, i64* %RCX
  %6419 = load i64, i64* %PC
  %6420 = add i64 %6419, 3
  store i64 %6420, i64* %PC
  %6421 = trunc i64 %6418 to i32
  %6422 = add i32 1, %6421
  %6423 = zext i32 %6422 to i64
  store i64 %6423, i64* %RCX, align 8, !tbaa !2428
  %6424 = icmp ult i32 %6422, %6421
  %6425 = icmp ult i32 %6422, 1
  %6426 = or i1 %6424, %6425
  %6427 = zext i1 %6426 to i8
  %6428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6427, i8* %6428, align 1, !tbaa !2432
  %6429 = and i32 %6422, 255
  %6430 = call i32 @llvm.ctpop.i32(i32 %6429) #17
  %6431 = trunc i32 %6430 to i8
  %6432 = and i8 %6431, 1
  %6433 = xor i8 %6432, 1
  %6434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6433, i8* %6434, align 1, !tbaa !2446
  %6435 = xor i64 1, %6418
  %6436 = trunc i64 %6435 to i32
  %6437 = xor i32 %6436, %6422
  %6438 = lshr i32 %6437, 4
  %6439 = trunc i32 %6438 to i8
  %6440 = and i8 %6439, 1
  %6441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6440, i8* %6441, align 1, !tbaa !2447
  %6442 = icmp eq i32 %6422, 0
  %6443 = zext i1 %6442 to i8
  %6444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6443, i8* %6444, align 1, !tbaa !2448
  %6445 = lshr i32 %6422, 31
  %6446 = trunc i32 %6445 to i8
  %6447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6446, i8* %6447, align 1, !tbaa !2449
  %6448 = lshr i32 %6421, 31
  %6449 = xor i32 %6445, %6448
  %6450 = add nuw nsw i32 %6449, %6445
  %6451 = icmp eq i32 %6450, 2
  %6452 = zext i1 %6451 to i8
  %6453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6452, i8* %6453, align 1, !tbaa !2450
  %6454 = load i32, i32* %ECX
  %6455 = zext i32 %6454 to i64
  %6456 = load i64, i64* %PC
  %6457 = add i64 %6456, 3
  store i64 %6457, i64* %PC
  %6458 = shl i64 %6455, 32
  %6459 = ashr exact i64 %6458, 32
  store i64 %6459, i64* %RSI, align 8, !tbaa !2428
  %6460 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6461 = load i64, i64* %RDX
  %6462 = load i64, i64* %RSI
  %6463 = mul i64 %6462, 8
  %6464 = add i64 %6463, %6461
  %6465 = load i64, i64* %PC
  %6466 = add i64 %6465, 5
  store i64 %6466, i64* %PC
  %6467 = inttoptr i64 %6464 to double*
  %6468 = load double, double* %6467
  %6469 = bitcast i8* %6460 to double*
  store double %6468, double* %6469, align 1, !tbaa !2452
  %6470 = getelementptr inbounds i8, i8* %6460, i64 8
  %6471 = bitcast i8* %6470 to double*
  store double 0.000000e+00, double* %6471, align 1, !tbaa !2452
  %6472 = bitcast %union.vec128_t* %XMM0 to i8*
  %6473 = load i64, i64* %PC
  %6474 = add i64 %6473, 5
  store i64 %6474, i64* %PC
  %6475 = bitcast i8* %6472 to i64*
  %6476 = load i64, i64* %6475, align 1
  store i64 %6476, i64* %RDX, align 1, !tbaa !2428
  %6477 = load i64, i64* %RDX
  %6478 = load i64, i64* %RAX
  %6479 = load i64, i64* %PC
  %6480 = add i64 %6479, 3
  store i64 %6480, i64* %PC
  %6481 = xor i64 %6478, %6477
  store i64 %6481, i64* %RDX, align 8, !tbaa !2428
  %6482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6482, align 1, !tbaa !2432
  %6483 = trunc i64 %6481 to i32
  %6484 = and i32 %6483, 255
  %6485 = call i32 @llvm.ctpop.i32(i32 %6484) #17
  %6486 = trunc i32 %6485 to i8
  %6487 = and i8 %6486, 1
  %6488 = xor i8 %6487, 1
  %6489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6488, i8* %6489, align 1, !tbaa !2446
  %6490 = icmp eq i64 %6481, 0
  %6491 = zext i1 %6490 to i8
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6491, i8* %6492, align 1, !tbaa !2448
  %6493 = lshr i64 %6481, 63
  %6494 = trunc i64 %6493 to i8
  %6495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6494, i8* %6495, align 1, !tbaa !2449
  %6496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6496, align 1, !tbaa !2450
  %6497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6497, align 1, !tbaa !2447
  %6498 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6499 = load i64, i64* %RDX
  %6500 = load i64, i64* %PC
  %6501 = add i64 %6500, 5
  store i64 %6501, i64* %PC
  %6502 = bitcast i8* %6498 to i64*
  store i64 %6499, i64* %6502, align 1, !tbaa !2428
  %6503 = getelementptr inbounds i8, i8* %6498, i64 8
  %6504 = bitcast i8* %6503 to i64*
  store i64 0, i64* %6504, align 1, !tbaa !2428
  %6505 = load i64, i64* %RBP
  %6506 = sub i64 %6505, 24
  %6507 = load i64, i64* %PC
  %6508 = add i64 %6507, 4
  store i64 %6508, i64* %PC
  %6509 = inttoptr i64 %6506 to i64*
  %6510 = load i64, i64* %6509
  store i64 %6510, i64* %RDX, align 8, !tbaa !2428
  %6511 = load i64, i64* %RBP
  %6512 = sub i64 %6511, 40
  %6513 = load i64, i64* %PC
  %6514 = add i64 %6513, 3
  store i64 %6514, i64* %PC
  %6515 = inttoptr i64 %6512 to i32*
  %6516 = load i32, i32* %6515
  %6517 = zext i32 %6516 to i64
  store i64 %6517, i64* %RCX, align 8, !tbaa !2428
  %6518 = load i64, i64* %RCX
  %6519 = load i64, i64* %PC
  %6520 = add i64 %6519, 3
  store i64 %6520, i64* %PC
  %6521 = trunc i64 %6518 to i32
  %6522 = add i32 1, %6521
  %6523 = zext i32 %6522 to i64
  store i64 %6523, i64* %RCX, align 8, !tbaa !2428
  %6524 = icmp ult i32 %6522, %6521
  %6525 = icmp ult i32 %6522, 1
  %6526 = or i1 %6524, %6525
  %6527 = zext i1 %6526 to i8
  %6528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6527, i8* %6528, align 1, !tbaa !2432
  %6529 = and i32 %6522, 255
  %6530 = call i32 @llvm.ctpop.i32(i32 %6529) #17
  %6531 = trunc i32 %6530 to i8
  %6532 = and i8 %6531, 1
  %6533 = xor i8 %6532, 1
  %6534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6533, i8* %6534, align 1, !tbaa !2446
  %6535 = xor i64 1, %6518
  %6536 = trunc i64 %6535 to i32
  %6537 = xor i32 %6536, %6522
  %6538 = lshr i32 %6537, 4
  %6539 = trunc i32 %6538 to i8
  %6540 = and i8 %6539, 1
  %6541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6540, i8* %6541, align 1, !tbaa !2447
  %6542 = icmp eq i32 %6522, 0
  %6543 = zext i1 %6542 to i8
  %6544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6543, i8* %6544, align 1, !tbaa !2448
  %6545 = lshr i32 %6522, 31
  %6546 = trunc i32 %6545 to i8
  %6547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6546, i8* %6547, align 1, !tbaa !2449
  %6548 = lshr i32 %6521, 31
  %6549 = xor i32 %6545, %6548
  %6550 = add nuw nsw i32 %6549, %6545
  %6551 = icmp eq i32 %6550, 2
  %6552 = zext i1 %6551 to i8
  %6553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6552, i8* %6553, align 1, !tbaa !2450
  %6554 = load i32, i32* %ECX
  %6555 = zext i32 %6554 to i64
  %6556 = load i64, i64* %PC
  %6557 = add i64 %6556, 3
  store i64 %6557, i64* %PC
  %6558 = shl i64 %6555, 32
  %6559 = ashr exact i64 %6558, 32
  store i64 %6559, i64* %RSI, align 8, !tbaa !2428
  %6560 = load i64, i64* %RDX
  %6561 = load i64, i64* %RSI
  %6562 = mul i64 %6561, 8
  %6563 = add i64 %6562, %6560
  %6564 = bitcast %union.vec128_t* %XMM0 to i8*
  %6565 = load i64, i64* %PC
  %6566 = add i64 %6565, 5
  store i64 %6566, i64* %PC
  %6567 = bitcast i8* %6564 to double*
  %6568 = load double, double* %6567, align 1
  %6569 = inttoptr i64 %6563 to double*
  store double %6568, double* %6569
  %6570 = load i64, i64* %RBP
  %6571 = sub i64 %6570, 24
  %6572 = load i64, i64* %PC
  %6573 = add i64 %6572, 4
  store i64 %6573, i64* %PC
  %6574 = inttoptr i64 %6571 to i64*
  %6575 = load i64, i64* %6574
  store i64 %6575, i64* %RDX, align 8, !tbaa !2428
  %6576 = load i64, i64* %RBP
  %6577 = sub i64 %6576, 40
  %6578 = load i64, i64* %PC
  %6579 = add i64 %6578, 3
  store i64 %6579, i64* %PC
  %6580 = inttoptr i64 %6577 to i32*
  %6581 = load i32, i32* %6580
  %6582 = zext i32 %6581 to i64
  store i64 %6582, i64* %RCX, align 8, !tbaa !2428
  %6583 = load i64, i64* %RCX
  %6584 = load i64, i64* %RBP
  %6585 = sub i64 %6584, 52
  %6586 = load i64, i64* %PC
  %6587 = add i64 %6586, 3
  store i64 %6587, i64* %PC
  %6588 = trunc i64 %6583 to i32
  %6589 = inttoptr i64 %6585 to i32*
  %6590 = load i32, i32* %6589
  %6591 = add i32 %6590, %6588
  %6592 = zext i32 %6591 to i64
  store i64 %6592, i64* %RCX, align 8, !tbaa !2428
  %6593 = icmp ult i32 %6591, %6588
  %6594 = icmp ult i32 %6591, %6590
  %6595 = or i1 %6593, %6594
  %6596 = zext i1 %6595 to i8
  %6597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6596, i8* %6597, align 1, !tbaa !2432
  %6598 = and i32 %6591, 255
  %6599 = call i32 @llvm.ctpop.i32(i32 %6598) #17
  %6600 = trunc i32 %6599 to i8
  %6601 = and i8 %6600, 1
  %6602 = xor i8 %6601, 1
  %6603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6602, i8* %6603, align 1, !tbaa !2446
  %6604 = xor i32 %6590, %6588
  %6605 = xor i32 %6604, %6591
  %6606 = lshr i32 %6605, 4
  %6607 = trunc i32 %6606 to i8
  %6608 = and i8 %6607, 1
  %6609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6608, i8* %6609, align 1, !tbaa !2447
  %6610 = icmp eq i32 %6591, 0
  %6611 = zext i1 %6610 to i8
  %6612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6611, i8* %6612, align 1, !tbaa !2448
  %6613 = lshr i32 %6591, 31
  %6614 = trunc i32 %6613 to i8
  %6615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6614, i8* %6615, align 1, !tbaa !2449
  %6616 = lshr i32 %6588, 31
  %6617 = lshr i32 %6590, 31
  %6618 = xor i32 %6613, %6616
  %6619 = xor i32 %6613, %6617
  %6620 = add nuw nsw i32 %6618, %6619
  %6621 = icmp eq i32 %6620, 2
  %6622 = zext i1 %6621 to i8
  %6623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6622, i8* %6623, align 1, !tbaa !2450
  %6624 = load i64, i64* %RCX
  %6625 = load i64, i64* %PC
  %6626 = add i64 %6625, 3
  store i64 %6626, i64* %PC
  %6627 = trunc i64 %6624 to i32
  %6628 = add i32 1, %6627
  %6629 = zext i32 %6628 to i64
  store i64 %6629, i64* %RCX, align 8, !tbaa !2428
  %6630 = icmp ult i32 %6628, %6627
  %6631 = icmp ult i32 %6628, 1
  %6632 = or i1 %6630, %6631
  %6633 = zext i1 %6632 to i8
  %6634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6633, i8* %6634, align 1, !tbaa !2432
  %6635 = and i32 %6628, 255
  %6636 = call i32 @llvm.ctpop.i32(i32 %6635) #17
  %6637 = trunc i32 %6636 to i8
  %6638 = and i8 %6637, 1
  %6639 = xor i8 %6638, 1
  %6640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6639, i8* %6640, align 1, !tbaa !2446
  %6641 = xor i64 1, %6624
  %6642 = trunc i64 %6641 to i32
  %6643 = xor i32 %6642, %6628
  %6644 = lshr i32 %6643, 4
  %6645 = trunc i32 %6644 to i8
  %6646 = and i8 %6645, 1
  %6647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6646, i8* %6647, align 1, !tbaa !2447
  %6648 = icmp eq i32 %6628, 0
  %6649 = zext i1 %6648 to i8
  %6650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6649, i8* %6650, align 1, !tbaa !2448
  %6651 = lshr i32 %6628, 31
  %6652 = trunc i32 %6651 to i8
  %6653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6652, i8* %6653, align 1, !tbaa !2449
  %6654 = lshr i32 %6627, 31
  %6655 = xor i32 %6651, %6654
  %6656 = add nuw nsw i32 %6655, %6651
  %6657 = icmp eq i32 %6656, 2
  %6658 = zext i1 %6657 to i8
  %6659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6658, i8* %6659, align 1, !tbaa !2450
  %6660 = load i32, i32* %ECX
  %6661 = zext i32 %6660 to i64
  %6662 = load i64, i64* %PC
  %6663 = add i64 %6662, 3
  store i64 %6663, i64* %PC
  %6664 = shl i64 %6661, 32
  %6665 = ashr exact i64 %6664, 32
  store i64 %6665, i64* %RSI, align 8, !tbaa !2428
  %6666 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6667 = load i64, i64* %RDX
  %6668 = load i64, i64* %RSI
  %6669 = mul i64 %6668, 8
  %6670 = add i64 %6669, %6667
  %6671 = load i64, i64* %PC
  %6672 = add i64 %6671, 5
  store i64 %6672, i64* %PC
  %6673 = inttoptr i64 %6670 to double*
  %6674 = load double, double* %6673
  %6675 = bitcast i8* %6666 to double*
  store double %6674, double* %6675, align 1, !tbaa !2452
  %6676 = getelementptr inbounds i8, i8* %6666, i64 8
  %6677 = bitcast i8* %6676 to double*
  store double 0.000000e+00, double* %6677, align 1, !tbaa !2452
  %6678 = bitcast %union.vec128_t* %XMM0 to i8*
  %6679 = load i64, i64* %PC
  %6680 = add i64 %6679, 5
  store i64 %6680, i64* %PC
  %6681 = bitcast i8* %6678 to i64*
  %6682 = load i64, i64* %6681, align 1
  store i64 %6682, i64* %RDX, align 1, !tbaa !2428
  %6683 = load i64, i64* %RDX
  %6684 = load i64, i64* %RAX
  %6685 = load i64, i64* %PC
  %6686 = add i64 %6685, 3
  store i64 %6686, i64* %PC
  %6687 = xor i64 %6684, %6683
  store i64 %6687, i64* %RDX, align 8, !tbaa !2428
  %6688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6688, align 1, !tbaa !2432
  %6689 = trunc i64 %6687 to i32
  %6690 = and i32 %6689, 255
  %6691 = call i32 @llvm.ctpop.i32(i32 %6690) #17
  %6692 = trunc i32 %6691 to i8
  %6693 = and i8 %6692, 1
  %6694 = xor i8 %6693, 1
  %6695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6694, i8* %6695, align 1, !tbaa !2446
  %6696 = icmp eq i64 %6687, 0
  %6697 = zext i1 %6696 to i8
  %6698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6697, i8* %6698, align 1, !tbaa !2448
  %6699 = lshr i64 %6687, 63
  %6700 = trunc i64 %6699 to i8
  %6701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6700, i8* %6701, align 1, !tbaa !2449
  %6702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6702, align 1, !tbaa !2450
  %6703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6703, align 1, !tbaa !2447
  %6704 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6705 = load i64, i64* %RDX
  %6706 = load i64, i64* %PC
  %6707 = add i64 %6706, 5
  store i64 %6707, i64* %PC
  %6708 = bitcast i8* %6704 to i64*
  store i64 %6705, i64* %6708, align 1, !tbaa !2428
  %6709 = getelementptr inbounds i8, i8* %6704, i64 8
  %6710 = bitcast i8* %6709 to i64*
  store i64 0, i64* %6710, align 1, !tbaa !2428
  %6711 = load i64, i64* %RBP
  %6712 = sub i64 %6711, 24
  %6713 = load i64, i64* %PC
  %6714 = add i64 %6713, 4
  store i64 %6714, i64* %PC
  %6715 = inttoptr i64 %6712 to i64*
  %6716 = load i64, i64* %6715
  store i64 %6716, i64* %RAX, align 8, !tbaa !2428
  %6717 = load i64, i64* %RBP
  %6718 = sub i64 %6717, 40
  %6719 = load i64, i64* %PC
  %6720 = add i64 %6719, 3
  store i64 %6720, i64* %PC
  %6721 = inttoptr i64 %6718 to i32*
  %6722 = load i32, i32* %6721
  %6723 = zext i32 %6722 to i64
  store i64 %6723, i64* %RCX, align 8, !tbaa !2428
  %6724 = load i64, i64* %RCX
  %6725 = load i64, i64* %RBP
  %6726 = sub i64 %6725, 52
  %6727 = load i64, i64* %PC
  %6728 = add i64 %6727, 3
  store i64 %6728, i64* %PC
  %6729 = trunc i64 %6724 to i32
  %6730 = inttoptr i64 %6726 to i32*
  %6731 = load i32, i32* %6730
  %6732 = add i32 %6731, %6729
  %6733 = zext i32 %6732 to i64
  store i64 %6733, i64* %RCX, align 8, !tbaa !2428
  %6734 = icmp ult i32 %6732, %6729
  %6735 = icmp ult i32 %6732, %6731
  %6736 = or i1 %6734, %6735
  %6737 = zext i1 %6736 to i8
  %6738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6737, i8* %6738, align 1, !tbaa !2432
  %6739 = and i32 %6732, 255
  %6740 = call i32 @llvm.ctpop.i32(i32 %6739) #17
  %6741 = trunc i32 %6740 to i8
  %6742 = and i8 %6741, 1
  %6743 = xor i8 %6742, 1
  %6744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6743, i8* %6744, align 1, !tbaa !2446
  %6745 = xor i32 %6731, %6729
  %6746 = xor i32 %6745, %6732
  %6747 = lshr i32 %6746, 4
  %6748 = trunc i32 %6747 to i8
  %6749 = and i8 %6748, 1
  %6750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6749, i8* %6750, align 1, !tbaa !2447
  %6751 = icmp eq i32 %6732, 0
  %6752 = zext i1 %6751 to i8
  %6753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6752, i8* %6753, align 1, !tbaa !2448
  %6754 = lshr i32 %6732, 31
  %6755 = trunc i32 %6754 to i8
  %6756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6755, i8* %6756, align 1, !tbaa !2449
  %6757 = lshr i32 %6729, 31
  %6758 = lshr i32 %6731, 31
  %6759 = xor i32 %6754, %6757
  %6760 = xor i32 %6754, %6758
  %6761 = add nuw nsw i32 %6759, %6760
  %6762 = icmp eq i32 %6761, 2
  %6763 = zext i1 %6762 to i8
  %6764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6763, i8* %6764, align 1, !tbaa !2450
  %6765 = load i64, i64* %RCX
  %6766 = load i64, i64* %PC
  %6767 = add i64 %6766, 3
  store i64 %6767, i64* %PC
  %6768 = trunc i64 %6765 to i32
  %6769 = add i32 1, %6768
  %6770 = zext i32 %6769 to i64
  store i64 %6770, i64* %RCX, align 8, !tbaa !2428
  %6771 = icmp ult i32 %6769, %6768
  %6772 = icmp ult i32 %6769, 1
  %6773 = or i1 %6771, %6772
  %6774 = zext i1 %6773 to i8
  %6775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6774, i8* %6775, align 1, !tbaa !2432
  %6776 = and i32 %6769, 255
  %6777 = call i32 @llvm.ctpop.i32(i32 %6776) #17
  %6778 = trunc i32 %6777 to i8
  %6779 = and i8 %6778, 1
  %6780 = xor i8 %6779, 1
  %6781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6780, i8* %6781, align 1, !tbaa !2446
  %6782 = xor i64 1, %6765
  %6783 = trunc i64 %6782 to i32
  %6784 = xor i32 %6783, %6769
  %6785 = lshr i32 %6784, 4
  %6786 = trunc i32 %6785 to i8
  %6787 = and i8 %6786, 1
  %6788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6787, i8* %6788, align 1, !tbaa !2447
  %6789 = icmp eq i32 %6769, 0
  %6790 = zext i1 %6789 to i8
  %6791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6790, i8* %6791, align 1, !tbaa !2448
  %6792 = lshr i32 %6769, 31
  %6793 = trunc i32 %6792 to i8
  %6794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6793, i8* %6794, align 1, !tbaa !2449
  %6795 = lshr i32 %6768, 31
  %6796 = xor i32 %6792, %6795
  %6797 = add nuw nsw i32 %6796, %6792
  %6798 = icmp eq i32 %6797, 2
  %6799 = zext i1 %6798 to i8
  %6800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6799, i8* %6800, align 1, !tbaa !2450
  %6801 = load i32, i32* %ECX
  %6802 = zext i32 %6801 to i64
  %6803 = load i64, i64* %PC
  %6804 = add i64 %6803, 3
  store i64 %6804, i64* %PC
  %6805 = shl i64 %6802, 32
  %6806 = ashr exact i64 %6805, 32
  store i64 %6806, i64* %RDX, align 8, !tbaa !2428
  %6807 = load i64, i64* %RAX
  %6808 = load i64, i64* %RDX
  %6809 = mul i64 %6808, 8
  %6810 = add i64 %6809, %6807
  %6811 = bitcast %union.vec128_t* %XMM0 to i8*
  %6812 = load i64, i64* %PC
  %6813 = add i64 %6812, 5
  store i64 %6813, i64* %PC
  %6814 = bitcast i8* %6811 to double*
  %6815 = load double, double* %6814, align 1
  %6816 = inttoptr i64 %6810 to double*
  store double %6815, double* %6816
  %6817 = load i64, i64* %RBP
  %6818 = sub i64 %6817, 36
  %6819 = load i64, i64* %PC
  %6820 = add i64 %6819, 3
  store i64 %6820, i64* %PC
  %6821 = inttoptr i64 %6818 to i32*
  %6822 = load i32, i32* %6821
  %6823 = zext i32 %6822 to i64
  store i64 %6823, i64* %RAX, align 8, !tbaa !2428
  %6824 = load i64, i64* %RAX
  %6825 = load i64, i64* %PC
  %6826 = add i64 %6825, 3
  store i64 %6826, i64* %PC
  %6827 = trunc i64 %6824 to i32
  %6828 = add i32 1, %6827
  %6829 = zext i32 %6828 to i64
  store i64 %6829, i64* %RAX, align 8, !tbaa !2428
  %6830 = icmp ult i32 %6828, %6827
  %6831 = icmp ult i32 %6828, 1
  %6832 = or i1 %6830, %6831
  %6833 = zext i1 %6832 to i8
  %6834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6833, i8* %6834, align 1, !tbaa !2432
  %6835 = and i32 %6828, 255
  %6836 = call i32 @llvm.ctpop.i32(i32 %6835) #17
  %6837 = trunc i32 %6836 to i8
  %6838 = and i8 %6837, 1
  %6839 = xor i8 %6838, 1
  %6840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6839, i8* %6840, align 1, !tbaa !2446
  %6841 = xor i64 1, %6824
  %6842 = trunc i64 %6841 to i32
  %6843 = xor i32 %6842, %6828
  %6844 = lshr i32 %6843, 4
  %6845 = trunc i32 %6844 to i8
  %6846 = and i8 %6845, 1
  %6847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6846, i8* %6847, align 1, !tbaa !2447
  %6848 = icmp eq i32 %6828, 0
  %6849 = zext i1 %6848 to i8
  %6850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6849, i8* %6850, align 1, !tbaa !2448
  %6851 = lshr i32 %6828, 31
  %6852 = trunc i32 %6851 to i8
  %6853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6852, i8* %6853, align 1, !tbaa !2449
  %6854 = lshr i32 %6827, 31
  %6855 = xor i32 %6851, %6854
  %6856 = add nuw nsw i32 %6855, %6851
  %6857 = icmp eq i32 %6856, 2
  %6858 = zext i1 %6857 to i8
  %6859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6858, i8* %6859, align 1, !tbaa !2450
  %6860 = load i64, i64* %RBP
  %6861 = sub i64 %6860, 36
  %6862 = load i32, i32* %EAX
  %6863 = zext i32 %6862 to i64
  %6864 = load i64, i64* %PC
  %6865 = add i64 %6864, 3
  store i64 %6865, i64* %PC
  %6866 = inttoptr i64 %6861 to i32*
  store i32 %6862, i32* %6866
  %6867 = load i64, i64* %PC
  %6868 = sub i64 %6867, 636
  %6869 = load i64, i64* %PC
  %6870 = add i64 %6869, 5
  store i64 %6870, i64* %PC
  %6871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6868, i64* %6871, align 8, !tbaa !2428
  br label %block_40221c
}

; Function Attrs: noinline
define %struct.Memory* @sub_400840_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400840:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4007d0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400790__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400790:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401060_cdft(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401060:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 9
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ESI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !2428
  %38 = add i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64 %33, i64* %39
  store i64 %38, i64* %36, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC
  %46 = sub i64 %43, 32
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  %47 = icmp ult i64 %43, 32
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %46 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #17
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 32, %43
  %58 = xor i64 %57, %46
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %46, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %46, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %43, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %69
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %RBP
  %76 = sub i64 %75, 4
  %77 = load i32, i32* %EDI
  %78 = zext i32 %77 to i64
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %76 to i32*
  store i32 %77, i32* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 8
  %84 = load i32, i32* %ESI
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RDX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %RCX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 32
  %103 = load i64, i64* %R8
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 4
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i32*
  %112 = load i32, i32* %111
  %113 = sub i32 %112, 4
  %114 = icmp ult i32 %112, 4
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = and i32 %113, 255
  %118 = call i32 @llvm.ctpop.i32(i32 %117) #17
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 1
  %121 = xor i8 %120, 1
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %121, i8* %122, align 1, !tbaa !2446
  %123 = xor i32 %112, 4
  %124 = xor i32 %123, %113
  %125 = lshr i32 %124, 4
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %127, i8* %128, align 1, !tbaa !2447
  %129 = icmp eq i32 %113, 0
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %130, i8* %131, align 1, !tbaa !2448
  %132 = lshr i32 %113, 31
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %133, i8* %134, align 1, !tbaa !2449
  %135 = lshr i32 %112, 31
  %136 = xor i32 %132, %135
  %137 = add nuw nsw i32 %136, %135
  %138 = icmp eq i32 %137, 2
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %139, i8* %140, align 1, !tbaa !2450
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 90
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 6
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 6
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %148 = load i8, i8* %147, align 1, !tbaa !2448
  %149 = icmp ne i8 %148, 0
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %151 = load i8, i8* %150, align 1, !tbaa !2449
  %152 = icmp ne i8 %151, 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %154 = load i8, i8* %153, align 1, !tbaa !2450
  %155 = icmp ne i8 %154, 0
  %156 = xor i1 %152, %155
  %157 = or i1 %149, %156
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %160 = select i1 %157, i64 %142, i64 %144
  store i64 %160, i64* %159, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  %163 = load i64, i64* %RBP
  br i1 %162, label %block_4010d8, label %block_401084

block_4010d8:                                     ; preds = %block_401060
  %164 = sub i64 %163, 4
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i32*
  %168 = load i32, i32* %167
  %169 = sub i32 %168, 4
  %170 = icmp ult i32 %168, 4
  %171 = zext i1 %170 to i8
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %171, i8* %172, align 1, !tbaa !2432
  %173 = and i32 %169, 255
  %174 = call i32 @llvm.ctpop.i32(i32 %173) #17
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = xor i8 %176, 1
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %177, i8* %178, align 1, !tbaa !2446
  %179 = xor i32 %168, 4
  %180 = xor i32 %179, %169
  %181 = lshr i32 %180, 4
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %183, i8* %184, align 1, !tbaa !2447
  %185 = icmp eq i32 %169, 0
  %186 = zext i1 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %186, i8* %187, align 1, !tbaa !2448
  %188 = lshr i32 %169, 31
  %189 = trunc i32 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %189, i8* %190, align 1, !tbaa !2449
  %191 = lshr i32 %168, 31
  %192 = xor i32 %188, %191
  %193 = add nuw nsw i32 %192, %191
  %194 = icmp eq i32 %193, 2
  %195 = zext i1 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %195, i8* %196, align 1, !tbaa !2450
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 22
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 6
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 6
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %204 = load i8, i8* %203, align 1, !tbaa !2448
  %205 = icmp eq i8 %204, 0
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %208 = select i1 %205, i64 %198, i64 %200
  store i64 %208, i64* %207, align 8, !tbaa !2428
  %209 = load i8, i8* %BRANCH_TAKEN
  %210 = icmp eq i8 %209, 1
  br i1 %210, label %block_4010f2, label %block_4010e2

block_4010f7:                                     ; preds = %block_4010f2, %block_4010d3
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_4010f2 ], [ %MEMORY.1, %block_4010d3 ]
  %211 = load i64, i64* %RSP
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = add i64 32, %211
  store i64 %214, i64* %RSP, align 8, !tbaa !2428
  %215 = icmp ult i64 %214, %211
  %216 = icmp ult i64 %214, 32
  %217 = or i1 %215, %216
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %218, i8* %219, align 1, !tbaa !2432
  %220 = trunc i64 %214 to i32
  %221 = and i32 %220, 255
  %222 = call i32 @llvm.ctpop.i32(i32 %221) #17
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %225, i8* %226, align 1, !tbaa !2446
  %227 = xor i64 32, %211
  %228 = xor i64 %227, %214
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %231, i8* %232, align 1, !tbaa !2447
  %233 = icmp eq i64 %214, 0
  %234 = zext i1 %233 to i8
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %234, i8* %235, align 1, !tbaa !2448
  %236 = lshr i64 %214, 63
  %237 = trunc i64 %236 to i8
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %237, i8* %238, align 1, !tbaa !2449
  %239 = lshr i64 %211, 63
  %240 = xor i64 %236, %239
  %241 = add nuw nsw i64 %240, %236
  %242 = icmp eq i64 %241, 2
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %243, i8* %244, align 1, !tbaa !2450
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 1
  store i64 %246, i64* %PC
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %248 = load i64, i64* %247, align 8, !tbaa !2428
  %249 = add i64 %248, 8
  %250 = inttoptr i64 %248 to i64*
  %251 = load i64, i64* %250
  store i64 %251, i64* %RBP, align 8, !tbaa !2428
  store i64 %249, i64* %247, align 8, !tbaa !2428
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 1
  store i64 %253, i64* %PC
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %256 = load i64, i64* %255, align 8, !tbaa !2428
  %257 = inttoptr i64 %256 to i64*
  %258 = load i64, i64* %257
  store i64 %258, i64* %254, align 8, !tbaa !2428
  %259 = add i64 %256, 8
  store i64 %259, i64* %255, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4010d3:                                     ; preds = %block_4010b3, %block_40108e
  %MEMORY.1 = phi %struct.Memory* [ %357, %block_4010b3 ], [ %308, %block_40108e ]
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 36
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 5
  store i64 %263, i64* %PC
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %261, i64* %264, align 8, !tbaa !2428
  br label %block_4010f7

block_40108e:                                     ; preds = %block_401084
  %265 = add i64 %425, 343
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 5
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 5
  store i64 %269, i64* %PC
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %271 = load i64, i64* %270, align 8, !tbaa !2428
  %272 = add i64 %271, -8
  %273 = inttoptr i64 %272 to i64*
  store i64 %267, i64* %273
  store i64 %272, i64* %270, align 8, !tbaa !2428
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %265, i64* %274, align 8, !tbaa !2428
  %275 = load i64, i64* %PC
  %276 = call %struct.Memory* @sub_4011f0_bitrv2_renamed_(%struct.State* %0, i64 %275, %struct.Memory* %2)
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 4
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 3
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i32*
  %282 = load i32, i32* %281
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %RDI, align 8, !tbaa !2428
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 16
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i64*
  %289 = load i64, i64* %288
  store i64 %289, i64* %RSI, align 8, !tbaa !2428
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 32
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 4
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RDX, align 8, !tbaa !2428
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 1991
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 5
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 5
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %303 = load i64, i64* %302, align 8, !tbaa !2428
  %304 = add i64 %303, -8
  %305 = inttoptr i64 %304 to i64*
  store i64 %299, i64* %305
  store i64 %304, i64* %302, align 8, !tbaa !2428
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %297, i64* %306, align 8, !tbaa !2428
  %307 = load i64, i64* %PC
  %308 = call %struct.Memory* @sub_401870_cftfsub_renamed_(%struct.State* %0, i64 %307, %struct.Memory* %276)
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 37
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 5
  store i64 %312, i64* %PC
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %310, i64* %313, align 8, !tbaa !2428
  br label %block_4010d3

block_4010b3:                                     ; preds = %block_401084
  %314 = add i64 %425, 2898
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 5
  store i64 %318, i64* %PC
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %320 = load i64, i64* %319, align 8, !tbaa !2428
  %321 = add i64 %320, -8
  %322 = inttoptr i64 %321 to i64*
  store i64 %316, i64* %322
  store i64 %321, i64* %319, align 8, !tbaa !2428
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %314, i64* %323, align 8, !tbaa !2428
  %324 = load i64, i64* %PC
  %325 = call %struct.Memory* @sub_401c10_bitrv2conj_renamed_(%struct.State* %0, i64 %324, %struct.Memory* %2)
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 4
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 3
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RDI, align 8, !tbaa !2428
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 16
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 4
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i64*
  %338 = load i64, i64* %337
  store i64 %338, i64* %RSI, align 8, !tbaa !2428
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 32
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %340 to i64*
  %344 = load i64, i64* %343
  store i64 %344, i64* %RDX, align 8, !tbaa !2428
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5090
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 5
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 5
  store i64 %350, i64* %PC
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %352 = load i64, i64* %351, align 8, !tbaa !2428
  %353 = add i64 %352, -8
  %354 = inttoptr i64 %353 to i64*
  store i64 %348, i64* %354
  store i64 %353, i64* %351, align 8, !tbaa !2428
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %346, i64* %355, align 8, !tbaa !2428
  %356 = load i64, i64* %PC
  %357 = call %struct.Memory* @sub_4024b0_cftbsub_renamed_(%struct.State* %0, i64 %356, %struct.Memory* %325)
  br label %block_4010d3

block_4010f2:                                     ; preds = %block_4010e2, %block_4010d8
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_4010d8 ], [ %457, %block_4010e2 ]
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 5
  store i64 %361, i64* %PC
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %359, i64* %362, align 8, !tbaa !2428
  br label %block_4010f7

block_401084:                                     ; preds = %block_401060
  %363 = sub i64 %163, 8
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 4
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  %367 = load i32, i32* %366
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %368, align 1, !tbaa !2432
  %369 = and i32 %367, 255
  %370 = call i32 @llvm.ctpop.i32(i32 %369) #17
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %373, i8* %374, align 1, !tbaa !2446
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %375, align 1, !tbaa !2447
  %376 = icmp eq i32 %367, 0
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %377, i8* %378, align 1, !tbaa !2448
  %379 = lshr i32 %367, 31
  %380 = trunc i32 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %380, i8* %381, align 1, !tbaa !2449
  %382 = lshr i32 %367, 31
  %383 = xor i32 %379, %382
  %384 = add nuw nsw i32 %383, %382
  %385 = icmp eq i32 %384, 2
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %386, i8* %387, align 1, !tbaa !2450
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 43
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 6
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 6
  store i64 %393, i64* %PC
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %395 = load i8, i8* %394, align 1, !tbaa !2449
  %396 = icmp ne i8 %395, 0
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %398 = load i8, i8* %397, align 1, !tbaa !2450
  %399 = icmp ne i8 %398, 0
  %400 = xor i1 %396, %399
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %403 = select i1 %400, i64 %389, i64 %391
  store i64 %403, i64* %402, align 8, !tbaa !2428
  %404 = load i8, i8* %BRANCH_TAKEN
  %405 = icmp eq i8 %404, 1
  %406 = load i64, i64* %RBP
  %407 = sub i64 %406, 4
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 3
  store i64 %409, i64* %PC
  %410 = inttoptr i64 %407 to i32*
  %411 = load i32, i32* %410
  %412 = zext i32 %411 to i64
  store i64 %412, i64* %RDI, align 8, !tbaa !2428
  %413 = load i64, i64* %RBP
  %414 = sub i64 %413, 24
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %414 to i64*
  %418 = load i64, i64* %417
  store i64 %418, i64* %RSI, align 8, !tbaa !2428
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 16
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 4
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %RDX, align 8, !tbaa !2428
  %425 = load i64, i64* %PC
  br i1 %405, label %block_4010b3, label %block_40108e

block_4010e2:                                     ; preds = %block_4010d8
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 4
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 3
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i32*
  %431 = load i32, i32* %430
  %432 = zext i32 %431 to i64
  store i64 %432, i64* %RDI, align 8, !tbaa !2428
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %RSI, align 8, !tbaa !2428
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 32
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 4
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %440 to i64*
  %444 = load i64, i64* %443
  store i64 %444, i64* %RDX, align 8, !tbaa !2428
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 1923
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 5
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 5
  store i64 %450, i64* %PC
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %452 = load i64, i64* %451, align 8, !tbaa !2428
  %453 = add i64 %452, -8
  %454 = inttoptr i64 %453 to i64*
  store i64 %448, i64* %454
  store i64 %453, i64* %451, align 8, !tbaa !2428
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %446, i64* %455, align 8, !tbaa !2428
  %456 = load i64, i64* %PC
  %457 = call %struct.Memory* @sub_401870_cftfsub_renamed_(%struct.State* %0, i64 %456, %struct.Memory* %2)
  br label %block_4010f2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4028a0_cft1st(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4028a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %36 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %35, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %36 to %"class.std::bitset"*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %38 to %"class.std::bitset"*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %40 to %union.vec128_t*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %42 to %union.vec128_t*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %44 to %union.vec128_t*
  %45 = load i64, i64* %RBP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 1
  store i64 %47, i64* %PC
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %49 = load i64, i64* %48, align 8, !tbaa !2428
  %50 = add i64 %49, -8
  %51 = inttoptr i64 %50 to i64*
  store i64 %45, i64* %51
  store i64 %50, i64* %48, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 3
  store i64 %54, i64* %PC
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  %55 = load i64, i64* %RSP
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC
  %58 = sub i64 %55, 24
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  %59 = icmp ult i64 %55, 24
  %60 = zext i1 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %60, i8* %61, align 1, !tbaa !2432
  %62 = trunc i64 %58 to i32
  %63 = and i32 %62, 255
  %64 = call i32 @llvm.ctpop.i32(i32 %63) #17
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %67, i8* %68, align 1, !tbaa !2446
  %69 = xor i64 24, %55
  %70 = xor i64 %69, %58
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i64 %58, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %58, 63
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = lshr i64 %55, 63
  %82 = xor i64 %78, %81
  %83 = add nuw nsw i64 %82, %81
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 4
  %89 = load i32, i32* %EDI
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 3
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %88 to i32*
  store i32 %89, i32* %93
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 16
  %96 = load i64, i64* %RSI
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 24
  %102 = load i64, i64* %RDX
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %101 to i64*
  store i64 %102, i64* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 16
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110
  store i64 %111, i64* %RDX, align 8, !tbaa !2428
  %112 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %113 = load i64, i64* %RDX
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to double*
  %117 = load double, double* %116
  %118 = bitcast i8* %112 to double*
  store double %117, double* %118, align 1, !tbaa !2452
  %119 = getelementptr inbounds i8, i8* %112, i64 8
  %120 = bitcast i8* %119 to double*
  store double 0.000000e+00, double* %120, align 1, !tbaa !2452
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 16
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %122 to i64*
  %126 = load i64, i64* %125
  store i64 %126, i64* %RDX, align 8, !tbaa !2428
  %127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %129 = load i64, i64* %RDX
  %130 = add i64 %129, 16
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 5
  store i64 %132, i64* %PC
  %133 = bitcast i8* %128 to double*
  %134 = load double, double* %133, align 1
  %135 = getelementptr inbounds i8, i8* %128, i64 8
  %136 = bitcast i8* %135 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = inttoptr i64 %130 to double*
  %139 = load double, double* %138
  %140 = fadd double %134, %139
  %141 = bitcast i8* %127 to double*
  store double %140, double* %141, align 1, !tbaa !2452
  %142 = getelementptr inbounds i8, i8* %127, i64 8
  %143 = bitcast i8* %142 to i64*
  store i64 %137, i64* %143, align 1, !tbaa !2452
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 96
  %146 = bitcast %union.vec128_t* %XMM0 to i8*
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  store i64 %148, i64* %PC
  %149 = bitcast i8* %146 to double*
  %150 = load double, double* %149, align 1
  %151 = inttoptr i64 %145 to double*
  store double %150, double* %151
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 16
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RDX, align 8, !tbaa !2428
  %158 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %159 = load i64, i64* %RDX
  %160 = add i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to double*
  %164 = load double, double* %163
  %165 = bitcast i8* %158 to double*
  store double %164, double* %165, align 1, !tbaa !2452
  %166 = getelementptr inbounds i8, i8* %158, i64 8
  %167 = bitcast i8* %166 to double*
  store double 0.000000e+00, double* %167, align 1, !tbaa !2452
  %168 = load i64, i64* %RBP
  %169 = sub i64 %168, 16
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 4
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %169 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %RDX, align 8, !tbaa !2428
  %174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %176 = load i64, i64* %RDX
  %177 = add i64 %176, 24
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = bitcast i8* %175 to double*
  %181 = load double, double* %180, align 1
  %182 = getelementptr inbounds i8, i8* %175, i64 8
  %183 = bitcast i8* %182 to i64*
  %184 = load i64, i64* %183, align 1
  %185 = inttoptr i64 %177 to double*
  %186 = load double, double* %185
  %187 = fadd double %181, %186
  %188 = bitcast i8* %174 to double*
  store double %187, double* %188, align 1, !tbaa !2452
  %189 = getelementptr inbounds i8, i8* %174, i64 8
  %190 = bitcast i8* %189 to i64*
  store i64 %184, i64* %190, align 1, !tbaa !2452
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 104
  %193 = bitcast %union.vec128_t* %XMM0 to i8*
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 5
  store i64 %195, i64* %PC
  %196 = bitcast i8* %193 to double*
  %197 = load double, double* %196, align 1
  %198 = inttoptr i64 %192 to double*
  store double %197, double* %198
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 16
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RDX, align 8, !tbaa !2428
  %205 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %206 = load i64, i64* %RDX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to double*
  %210 = load double, double* %209
  %211 = bitcast i8* %205 to double*
  store double %210, double* %211, align 1, !tbaa !2452
  %212 = getelementptr inbounds i8, i8* %205, i64 8
  %213 = bitcast i8* %212 to double*
  store double 0.000000e+00, double* %213, align 1, !tbaa !2452
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 16
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %RDX, align 8, !tbaa !2428
  %220 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %221 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %222 = load i64, i64* %RDX
  %223 = add i64 %222, 16
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  store i64 %225, i64* %PC
  %226 = bitcast i8* %221 to double*
  %227 = load double, double* %226, align 1
  %228 = getelementptr inbounds i8, i8* %221, i64 8
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 1
  %231 = inttoptr i64 %223 to double*
  %232 = load double, double* %231
  %233 = fsub double %227, %232
  %234 = bitcast i8* %220 to double*
  store double %233, double* %234, align 1, !tbaa !2452
  %235 = getelementptr inbounds i8, i8* %220, i64 8
  %236 = bitcast i8* %235 to i64*
  store i64 %230, i64* %236, align 1, !tbaa !2452
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 112
  %239 = bitcast %union.vec128_t* %XMM0 to i8*
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 5
  store i64 %241, i64* %PC
  %242 = bitcast i8* %239 to double*
  %243 = load double, double* %242, align 1
  %244 = inttoptr i64 %238 to double*
  store double %243, double* %244
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 16
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RDX, align 8, !tbaa !2428
  %251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %252 = load i64, i64* %RDX
  %253 = add i64 %252, 8
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 5
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %253 to double*
  %257 = load double, double* %256
  %258 = bitcast i8* %251 to double*
  store double %257, double* %258, align 1, !tbaa !2452
  %259 = getelementptr inbounds i8, i8* %251, i64 8
  %260 = bitcast i8* %259 to double*
  store double 0.000000e+00, double* %260, align 1, !tbaa !2452
  %261 = load i64, i64* %RBP
  %262 = sub i64 %261, 16
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to i64*
  %266 = load i64, i64* %265
  store i64 %266, i64* %RDX, align 8, !tbaa !2428
  %267 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %268 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %269 = load i64, i64* %RDX
  %270 = add i64 %269, 24
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 5
  store i64 %272, i64* %PC
  %273 = bitcast i8* %268 to double*
  %274 = load double, double* %273, align 1
  %275 = getelementptr inbounds i8, i8* %268, i64 8
  %276 = bitcast i8* %275 to i64*
  %277 = load i64, i64* %276, align 1
  %278 = inttoptr i64 %270 to double*
  %279 = load double, double* %278
  %280 = fsub double %274, %279
  %281 = bitcast i8* %267 to double*
  store double %280, double* %281, align 1, !tbaa !2452
  %282 = getelementptr inbounds i8, i8* %267, i64 8
  %283 = bitcast i8* %282 to i64*
  store i64 %277, i64* %283, align 1, !tbaa !2452
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 120
  %286 = bitcast %union.vec128_t* %XMM0 to i8*
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  store i64 %288, i64* %PC
  %289 = bitcast i8* %286 to double*
  %290 = load double, double* %289, align 1
  %291 = inttoptr i64 %285 to double*
  store double %290, double* %291
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 16
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296
  store i64 %297, i64* %RDX, align 8, !tbaa !2428
  %298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %299 = load i64, i64* %RDX
  %300 = add i64 %299, 32
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 5
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to double*
  %304 = load double, double* %303
  %305 = bitcast i8* %298 to double*
  store double %304, double* %305, align 1, !tbaa !2452
  %306 = getelementptr inbounds i8, i8* %298, i64 8
  %307 = bitcast i8* %306 to double*
  store double 0.000000e+00, double* %307, align 1, !tbaa !2452
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 16
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312
  store i64 %313, i64* %RDX, align 8, !tbaa !2428
  %314 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %315 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %316 = load i64, i64* %RDX
  %317 = add i64 %316, 48
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 5
  store i64 %319, i64* %PC
  %320 = bitcast i8* %315 to double*
  %321 = load double, double* %320, align 1
  %322 = getelementptr inbounds i8, i8* %315, i64 8
  %323 = bitcast i8* %322 to i64*
  %324 = load i64, i64* %323, align 1
  %325 = inttoptr i64 %317 to double*
  %326 = load double, double* %325
  %327 = fadd double %321, %326
  %328 = bitcast i8* %314 to double*
  store double %327, double* %328, align 1, !tbaa !2452
  %329 = getelementptr inbounds i8, i8* %314, i64 8
  %330 = bitcast i8* %329 to i64*
  store i64 %324, i64* %330, align 1, !tbaa !2452
  %331 = load i64, i64* %RBP
  %332 = sub i64 %331, 128
  %333 = bitcast %union.vec128_t* %XMM0 to i8*
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = bitcast i8* %333 to double*
  %337 = load double, double* %336, align 1
  %338 = inttoptr i64 %332 to double*
  store double %337, double* %338
  %339 = load i64, i64* %RBP
  %340 = sub i64 %339, 16
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 4
  store i64 %342, i64* %PC
  %343 = inttoptr i64 %340 to i64*
  %344 = load i64, i64* %343
  store i64 %344, i64* %RDX, align 8, !tbaa !2428
  %345 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %346 = load i64, i64* %RDX
  %347 = add i64 %346, 40
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 5
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to double*
  %351 = load double, double* %350
  %352 = bitcast i8* %345 to double*
  store double %351, double* %352, align 1, !tbaa !2452
  %353 = getelementptr inbounds i8, i8* %345, i64 8
  %354 = bitcast i8* %353 to double*
  store double 0.000000e+00, double* %354, align 1, !tbaa !2452
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 16
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %361 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %362 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %363 = load i64, i64* %RDX
  %364 = add i64 %363, 56
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  store i64 %366, i64* %PC
  %367 = bitcast i8* %362 to double*
  %368 = load double, double* %367, align 1
  %369 = getelementptr inbounds i8, i8* %362, i64 8
  %370 = bitcast i8* %369 to i64*
  %371 = load i64, i64* %370, align 1
  %372 = inttoptr i64 %364 to double*
  %373 = load double, double* %372
  %374 = fadd double %368, %373
  %375 = bitcast i8* %361 to double*
  store double %374, double* %375, align 1, !tbaa !2452
  %376 = getelementptr inbounds i8, i8* %361, i64 8
  %377 = bitcast i8* %376 to i64*
  store i64 %371, i64* %377, align 1, !tbaa !2452
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 136
  %380 = bitcast %union.vec128_t* %XMM0 to i8*
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 8
  store i64 %382, i64* %PC
  %383 = bitcast i8* %380 to double*
  %384 = load double, double* %383, align 1
  %385 = inttoptr i64 %379 to double*
  store double %384, double* %385
  %386 = load i64, i64* %RBP
  %387 = sub i64 %386, 16
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %387 to i64*
  %391 = load i64, i64* %390
  store i64 %391, i64* %RDX, align 8, !tbaa !2428
  %392 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %393 = load i64, i64* %RDX
  %394 = add i64 %393, 32
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to double*
  %398 = load double, double* %397
  %399 = bitcast i8* %392 to double*
  store double %398, double* %399, align 1, !tbaa !2452
  %400 = getelementptr inbounds i8, i8* %392, i64 8
  %401 = bitcast i8* %400 to double*
  store double 0.000000e+00, double* %401, align 1, !tbaa !2452
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 16
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  store i64 %407, i64* %RDX, align 8, !tbaa !2428
  %408 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %409 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %410 = load i64, i64* %RDX
  %411 = add i64 %410, 48
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 5
  store i64 %413, i64* %PC
  %414 = bitcast i8* %409 to double*
  %415 = load double, double* %414, align 1
  %416 = getelementptr inbounds i8, i8* %409, i64 8
  %417 = bitcast i8* %416 to i64*
  %418 = load i64, i64* %417, align 1
  %419 = inttoptr i64 %411 to double*
  %420 = load double, double* %419
  %421 = fsub double %415, %420
  %422 = bitcast i8* %408 to double*
  store double %421, double* %422, align 1, !tbaa !2452
  %423 = getelementptr inbounds i8, i8* %408, i64 8
  %424 = bitcast i8* %423 to i64*
  store i64 %418, i64* %424, align 1, !tbaa !2452
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 144
  %427 = bitcast %union.vec128_t* %XMM0 to i8*
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 8
  store i64 %429, i64* %PC
  %430 = bitcast i8* %427 to double*
  %431 = load double, double* %430, align 1
  %432 = inttoptr i64 %426 to double*
  store double %431, double* %432
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %RDX, align 8, !tbaa !2428
  %439 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %440 = load i64, i64* %RDX
  %441 = add i64 %440, 40
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to double*
  %445 = load double, double* %444
  %446 = bitcast i8* %439 to double*
  store double %445, double* %446, align 1, !tbaa !2452
  %447 = getelementptr inbounds i8, i8* %439, i64 8
  %448 = bitcast i8* %447 to double*
  store double 0.000000e+00, double* %448, align 1, !tbaa !2452
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 16
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %450 to i64*
  %454 = load i64, i64* %453
  store i64 %454, i64* %RDX, align 8, !tbaa !2428
  %455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %456 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %457 = load i64, i64* %RDX
  %458 = add i64 %457, 56
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC
  %461 = bitcast i8* %456 to double*
  %462 = load double, double* %461, align 1
  %463 = getelementptr inbounds i8, i8* %456, i64 8
  %464 = bitcast i8* %463 to i64*
  %465 = load i64, i64* %464, align 1
  %466 = inttoptr i64 %458 to double*
  %467 = load double, double* %466
  %468 = fsub double %462, %467
  %469 = bitcast i8* %455 to double*
  store double %468, double* %469, align 1, !tbaa !2452
  %470 = getelementptr inbounds i8, i8* %455, i64 8
  %471 = bitcast i8* %470 to i64*
  store i64 %465, i64* %471, align 1, !tbaa !2452
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 152
  %474 = bitcast %union.vec128_t* %XMM0 to i8*
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 8
  store i64 %476, i64* %PC
  %477 = bitcast i8* %474 to double*
  %478 = load double, double* %477, align 1
  %479 = inttoptr i64 %473 to double*
  store double %478, double* %479
  %480 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 96
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 5
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to double*
  %486 = load double, double* %485
  %487 = bitcast i8* %480 to double*
  store double %486, double* %487, align 1, !tbaa !2452
  %488 = getelementptr inbounds i8, i8* %480, i64 8
  %489 = bitcast i8* %488 to double*
  store double 0.000000e+00, double* %489, align 1, !tbaa !2452
  %490 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %491 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %492 = load i64, i64* %RBP
  %493 = sub i64 %492, 128
  %494 = load i64, i64* %PC
  %495 = add i64 %494, 5
  store i64 %495, i64* %PC
  %496 = bitcast i8* %491 to double*
  %497 = load double, double* %496, align 1
  %498 = getelementptr inbounds i8, i8* %491, i64 8
  %499 = bitcast i8* %498 to i64*
  %500 = load i64, i64* %499, align 1
  %501 = inttoptr i64 %493 to double*
  %502 = load double, double* %501
  %503 = fadd double %497, %502
  %504 = bitcast i8* %490 to double*
  store double %503, double* %504, align 1, !tbaa !2452
  %505 = getelementptr inbounds i8, i8* %490, i64 8
  %506 = bitcast i8* %505 to i64*
  store i64 %500, i64* %506, align 1, !tbaa !2452
  %507 = load i64, i64* %RBP
  %508 = sub i64 %507, 16
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i64*
  %512 = load i64, i64* %511
  store i64 %512, i64* %RDX, align 8, !tbaa !2428
  %513 = load i64, i64* %RDX
  %514 = bitcast %union.vec128_t* %XMM0 to i8*
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC
  %517 = bitcast i8* %514 to double*
  %518 = load double, double* %517, align 1
  %519 = inttoptr i64 %513 to double*
  store double %518, double* %519
  %520 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %521 = load i64, i64* %RBP
  %522 = sub i64 %521, 104
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 5
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to double*
  %526 = load double, double* %525
  %527 = bitcast i8* %520 to double*
  store double %526, double* %527, align 1, !tbaa !2452
  %528 = getelementptr inbounds i8, i8* %520, i64 8
  %529 = bitcast i8* %528 to double*
  store double 0.000000e+00, double* %529, align 1, !tbaa !2452
  %530 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %531 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 136
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 8
  store i64 %535, i64* %PC
  %536 = bitcast i8* %531 to double*
  %537 = load double, double* %536, align 1
  %538 = getelementptr inbounds i8, i8* %531, i64 8
  %539 = bitcast i8* %538 to i64*
  %540 = load i64, i64* %539, align 1
  %541 = inttoptr i64 %533 to double*
  %542 = load double, double* %541
  %543 = fadd double %537, %542
  %544 = bitcast i8* %530 to double*
  store double %543, double* %544, align 1, !tbaa !2452
  %545 = getelementptr inbounds i8, i8* %530, i64 8
  %546 = bitcast i8* %545 to i64*
  store i64 %540, i64* %546, align 1, !tbaa !2452
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 16
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i64*
  %552 = load i64, i64* %551
  store i64 %552, i64* %RDX, align 8, !tbaa !2428
  %553 = load i64, i64* %RDX
  %554 = add i64 %553, 8
  %555 = bitcast %union.vec128_t* %XMM0 to i8*
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 5
  store i64 %557, i64* %PC
  %558 = bitcast i8* %555 to double*
  %559 = load double, double* %558, align 1
  %560 = inttoptr i64 %554 to double*
  store double %559, double* %560
  %561 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 96
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to double*
  %567 = load double, double* %566
  %568 = bitcast i8* %561 to double*
  store double %567, double* %568, align 1, !tbaa !2452
  %569 = getelementptr inbounds i8, i8* %561, i64 8
  %570 = bitcast i8* %569 to double*
  store double 0.000000e+00, double* %570, align 1, !tbaa !2452
  %571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %572 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 128
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 5
  store i64 %576, i64* %PC
  %577 = bitcast i8* %572 to double*
  %578 = load double, double* %577, align 1
  %579 = getelementptr inbounds i8, i8* %572, i64 8
  %580 = bitcast i8* %579 to i64*
  %581 = load i64, i64* %580, align 1
  %582 = inttoptr i64 %574 to double*
  %583 = load double, double* %582
  %584 = fsub double %578, %583
  %585 = bitcast i8* %571 to double*
  store double %584, double* %585, align 1, !tbaa !2452
  %586 = getelementptr inbounds i8, i8* %571, i64 8
  %587 = bitcast i8* %586 to i64*
  store i64 %581, i64* %587, align 1, !tbaa !2452
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 16
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %589 to i64*
  %593 = load i64, i64* %592
  store i64 %593, i64* %RDX, align 8, !tbaa !2428
  %594 = load i64, i64* %RDX
  %595 = add i64 %594, 32
  %596 = bitcast %union.vec128_t* %XMM0 to i8*
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = bitcast i8* %596 to double*
  %600 = load double, double* %599, align 1
  %601 = inttoptr i64 %595 to double*
  store double %600, double* %601
  %602 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 104
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to double*
  %608 = load double, double* %607
  %609 = bitcast i8* %602 to double*
  store double %608, double* %609, align 1, !tbaa !2452
  %610 = getelementptr inbounds i8, i8* %602, i64 8
  %611 = bitcast i8* %610 to double*
  store double 0.000000e+00, double* %611, align 1, !tbaa !2452
  %612 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %613 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %614 = load i64, i64* %RBP
  %615 = sub i64 %614, 136
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 8
  store i64 %617, i64* %PC
  %618 = bitcast i8* %613 to double*
  %619 = load double, double* %618, align 1
  %620 = getelementptr inbounds i8, i8* %613, i64 8
  %621 = bitcast i8* %620 to i64*
  %622 = load i64, i64* %621, align 1
  %623 = inttoptr i64 %615 to double*
  %624 = load double, double* %623
  %625 = fsub double %619, %624
  %626 = bitcast i8* %612 to double*
  store double %625, double* %626, align 1, !tbaa !2452
  %627 = getelementptr inbounds i8, i8* %612, i64 8
  %628 = bitcast i8* %627 to i64*
  store i64 %622, i64* %628, align 1, !tbaa !2452
  %629 = load i64, i64* %RBP
  %630 = sub i64 %629, 16
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 4
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i64*
  %634 = load i64, i64* %633
  store i64 %634, i64* %RDX, align 8, !tbaa !2428
  %635 = load i64, i64* %RDX
  %636 = add i64 %635, 40
  %637 = bitcast %union.vec128_t* %XMM0 to i8*
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  %640 = bitcast i8* %637 to double*
  %641 = load double, double* %640, align 1
  %642 = inttoptr i64 %636 to double*
  store double %641, double* %642
  %643 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 112
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 5
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to double*
  %649 = load double, double* %648
  %650 = bitcast i8* %643 to double*
  store double %649, double* %650, align 1, !tbaa !2452
  %651 = getelementptr inbounds i8, i8* %643, i64 8
  %652 = bitcast i8* %651 to double*
  store double 0.000000e+00, double* %652, align 1, !tbaa !2452
  %653 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %654 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 152
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 8
  store i64 %658, i64* %PC
  %659 = bitcast i8* %654 to double*
  %660 = load double, double* %659, align 1
  %661 = getelementptr inbounds i8, i8* %654, i64 8
  %662 = bitcast i8* %661 to i64*
  %663 = load i64, i64* %662, align 1
  %664 = inttoptr i64 %656 to double*
  %665 = load double, double* %664
  %666 = fsub double %660, %665
  %667 = bitcast i8* %653 to double*
  store double %666, double* %667, align 1, !tbaa !2452
  %668 = getelementptr inbounds i8, i8* %653, i64 8
  %669 = bitcast i8* %668 to i64*
  store i64 %663, i64* %669, align 1, !tbaa !2452
  %670 = load i64, i64* %RBP
  %671 = sub i64 %670, 16
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 4
  store i64 %673, i64* %PC
  %674 = inttoptr i64 %671 to i64*
  %675 = load i64, i64* %674
  store i64 %675, i64* %RDX, align 8, !tbaa !2428
  %676 = load i64, i64* %RDX
  %677 = add i64 %676, 16
  %678 = bitcast %union.vec128_t* %XMM0 to i8*
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 5
  store i64 %680, i64* %PC
  %681 = bitcast i8* %678 to double*
  %682 = load double, double* %681, align 1
  %683 = inttoptr i64 %677 to double*
  store double %682, double* %683
  %684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 120
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 5
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %686 to double*
  %690 = load double, double* %689
  %691 = bitcast i8* %684 to double*
  store double %690, double* %691, align 1, !tbaa !2452
  %692 = getelementptr inbounds i8, i8* %684, i64 8
  %693 = bitcast i8* %692 to double*
  store double 0.000000e+00, double* %693, align 1, !tbaa !2452
  %694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %695 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 144
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 8
  store i64 %699, i64* %PC
  %700 = bitcast i8* %695 to double*
  %701 = load double, double* %700, align 1
  %702 = getelementptr inbounds i8, i8* %695, i64 8
  %703 = bitcast i8* %702 to i64*
  %704 = load i64, i64* %703, align 1
  %705 = inttoptr i64 %697 to double*
  %706 = load double, double* %705
  %707 = fadd double %701, %706
  %708 = bitcast i8* %694 to double*
  store double %707, double* %708, align 1, !tbaa !2452
  %709 = getelementptr inbounds i8, i8* %694, i64 8
  %710 = bitcast i8* %709 to i64*
  store i64 %704, i64* %710, align 1, !tbaa !2452
  %711 = load i64, i64* %RBP
  %712 = sub i64 %711, 16
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 4
  store i64 %714, i64* %PC
  %715 = inttoptr i64 %712 to i64*
  %716 = load i64, i64* %715
  store i64 %716, i64* %RDX, align 8, !tbaa !2428
  %717 = load i64, i64* %RDX
  %718 = add i64 %717, 24
  %719 = bitcast %union.vec128_t* %XMM0 to i8*
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 5
  store i64 %721, i64* %PC
  %722 = bitcast i8* %719 to double*
  %723 = load double, double* %722, align 1
  %724 = inttoptr i64 %718 to double*
  store double %723, double* %724
  %725 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 112
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 5
  store i64 %729, i64* %PC
  %730 = inttoptr i64 %727 to double*
  %731 = load double, double* %730
  %732 = bitcast i8* %725 to double*
  store double %731, double* %732, align 1, !tbaa !2452
  %733 = getelementptr inbounds i8, i8* %725, i64 8
  %734 = bitcast i8* %733 to double*
  store double 0.000000e+00, double* %734, align 1, !tbaa !2452
  %735 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %736 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %737 = load i64, i64* %RBP
  %738 = sub i64 %737, 152
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 8
  store i64 %740, i64* %PC
  %741 = bitcast i8* %736 to double*
  %742 = load double, double* %741, align 1
  %743 = getelementptr inbounds i8, i8* %736, i64 8
  %744 = bitcast i8* %743 to i64*
  %745 = load i64, i64* %744, align 1
  %746 = inttoptr i64 %738 to double*
  %747 = load double, double* %746
  %748 = fadd double %742, %747
  %749 = bitcast i8* %735 to double*
  store double %748, double* %749, align 1, !tbaa !2452
  %750 = getelementptr inbounds i8, i8* %735, i64 8
  %751 = bitcast i8* %750 to i64*
  store i64 %745, i64* %751, align 1, !tbaa !2452
  %752 = load i64, i64* %RBP
  %753 = sub i64 %752, 16
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 4
  store i64 %755, i64* %PC
  %756 = inttoptr i64 %753 to i64*
  %757 = load i64, i64* %756
  store i64 %757, i64* %RDX, align 8, !tbaa !2428
  %758 = load i64, i64* %RDX
  %759 = add i64 %758, 48
  %760 = bitcast %union.vec128_t* %XMM0 to i8*
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 5
  store i64 %762, i64* %PC
  %763 = bitcast i8* %760 to double*
  %764 = load double, double* %763, align 1
  %765 = inttoptr i64 %759 to double*
  store double %764, double* %765
  %766 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %767 = load i64, i64* %RBP
  %768 = sub i64 %767, 120
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 5
  store i64 %770, i64* %PC
  %771 = inttoptr i64 %768 to double*
  %772 = load double, double* %771
  %773 = bitcast i8* %766 to double*
  store double %772, double* %773, align 1, !tbaa !2452
  %774 = getelementptr inbounds i8, i8* %766, i64 8
  %775 = bitcast i8* %774 to double*
  store double 0.000000e+00, double* %775, align 1, !tbaa !2452
  %776 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %777 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %778 = load i64, i64* %RBP
  %779 = sub i64 %778, 144
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 8
  store i64 %781, i64* %PC
  %782 = bitcast i8* %777 to double*
  %783 = load double, double* %782, align 1
  %784 = getelementptr inbounds i8, i8* %777, i64 8
  %785 = bitcast i8* %784 to i64*
  %786 = load i64, i64* %785, align 1
  %787 = inttoptr i64 %779 to double*
  %788 = load double, double* %787
  %789 = fsub double %783, %788
  %790 = bitcast i8* %776 to double*
  store double %789, double* %790, align 1, !tbaa !2452
  %791 = getelementptr inbounds i8, i8* %776, i64 8
  %792 = bitcast i8* %791 to i64*
  store i64 %786, i64* %792, align 1, !tbaa !2452
  %793 = load i64, i64* %RBP
  %794 = sub i64 %793, 16
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 4
  store i64 %796, i64* %PC
  %797 = inttoptr i64 %794 to i64*
  %798 = load i64, i64* %797
  store i64 %798, i64* %RDX, align 8, !tbaa !2428
  %799 = load i64, i64* %RDX
  %800 = add i64 %799, 56
  %801 = bitcast %union.vec128_t* %XMM0 to i8*
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 5
  store i64 %803, i64* %PC
  %804 = bitcast i8* %801 to double*
  %805 = load double, double* %804, align 1
  %806 = inttoptr i64 %800 to double*
  store double %805, double* %806
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 24
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 4
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811
  store i64 %812, i64* %RDX, align 8, !tbaa !2428
  %813 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %814 = load i64, i64* %RDX
  %815 = add i64 %814, 16
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to double*
  %819 = load double, double* %818
  %820 = bitcast i8* %813 to double*
  store double %819, double* %820, align 1, !tbaa !2452
  %821 = getelementptr inbounds i8, i8* %813, i64 8
  %822 = bitcast i8* %821 to double*
  store double 0.000000e+00, double* %822, align 1, !tbaa !2452
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 48
  %825 = bitcast %union.vec128_t* %XMM0 to i8*
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC
  %828 = bitcast i8* %825 to double*
  %829 = load double, double* %828, align 1
  %830 = inttoptr i64 %824 to double*
  store double %829, double* %830
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 16
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 4
  store i64 %834, i64* %PC
  %835 = inttoptr i64 %832 to i64*
  %836 = load i64, i64* %835
  store i64 %836, i64* %RDX, align 8, !tbaa !2428
  %837 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %838 = load i64, i64* %RDX
  %839 = add i64 %838, 64
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 5
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to double*
  %843 = load double, double* %842
  %844 = bitcast i8* %837 to double*
  store double %843, double* %844, align 1, !tbaa !2452
  %845 = getelementptr inbounds i8, i8* %837, i64 8
  %846 = bitcast i8* %845 to double*
  store double 0.000000e+00, double* %846, align 1, !tbaa !2452
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 16
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 4
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RDX, align 8, !tbaa !2428
  %853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %854 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %855 = load i64, i64* %RDX
  %856 = add i64 %855, 80
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 5
  store i64 %858, i64* %PC
  %859 = bitcast i8* %854 to double*
  %860 = load double, double* %859, align 1
  %861 = getelementptr inbounds i8, i8* %854, i64 8
  %862 = bitcast i8* %861 to i64*
  %863 = load i64, i64* %862, align 1
  %864 = inttoptr i64 %856 to double*
  %865 = load double, double* %864
  %866 = fadd double %860, %865
  %867 = bitcast i8* %853 to double*
  store double %866, double* %867, align 1, !tbaa !2452
  %868 = getelementptr inbounds i8, i8* %853, i64 8
  %869 = bitcast i8* %868 to i64*
  store i64 %863, i64* %869, align 1, !tbaa !2452
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 96
  %872 = bitcast %union.vec128_t* %XMM0 to i8*
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 5
  store i64 %874, i64* %PC
  %875 = bitcast i8* %872 to double*
  %876 = load double, double* %875, align 1
  %877 = inttoptr i64 %871 to double*
  store double %876, double* %877
  %878 = load i64, i64* %RBP
  %879 = sub i64 %878, 16
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 4
  store i64 %881, i64* %PC
  %882 = inttoptr i64 %879 to i64*
  %883 = load i64, i64* %882
  store i64 %883, i64* %RDX, align 8, !tbaa !2428
  %884 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %885 = load i64, i64* %RDX
  %886 = add i64 %885, 72
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to double*
  %890 = load double, double* %889
  %891 = bitcast i8* %884 to double*
  store double %890, double* %891, align 1, !tbaa !2452
  %892 = getelementptr inbounds i8, i8* %884, i64 8
  %893 = bitcast i8* %892 to double*
  store double 0.000000e+00, double* %893, align 1, !tbaa !2452
  %894 = load i64, i64* %RBP
  %895 = sub i64 %894, 16
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RDX, align 8, !tbaa !2428
  %900 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %901 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %902 = load i64, i64* %RDX
  %903 = add i64 %902, 88
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 5
  store i64 %905, i64* %PC
  %906 = bitcast i8* %901 to double*
  %907 = load double, double* %906, align 1
  %908 = getelementptr inbounds i8, i8* %901, i64 8
  %909 = bitcast i8* %908 to i64*
  %910 = load i64, i64* %909, align 1
  %911 = inttoptr i64 %903 to double*
  %912 = load double, double* %911
  %913 = fadd double %907, %912
  %914 = bitcast i8* %900 to double*
  store double %913, double* %914, align 1, !tbaa !2452
  %915 = getelementptr inbounds i8, i8* %900, i64 8
  %916 = bitcast i8* %915 to i64*
  store i64 %910, i64* %916, align 1, !tbaa !2452
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 104
  %919 = bitcast %union.vec128_t* %XMM0 to i8*
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 5
  store i64 %921, i64* %PC
  %922 = bitcast i8* %919 to double*
  %923 = load double, double* %922, align 1
  %924 = inttoptr i64 %918 to double*
  store double %923, double* %924
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 16
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 4
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i64*
  %930 = load i64, i64* %929
  store i64 %930, i64* %RDX, align 8, !tbaa !2428
  %931 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %932 = load i64, i64* %RDX
  %933 = add i64 %932, 64
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 5
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to double*
  %937 = load double, double* %936
  %938 = bitcast i8* %931 to double*
  store double %937, double* %938, align 1, !tbaa !2452
  %939 = getelementptr inbounds i8, i8* %931, i64 8
  %940 = bitcast i8* %939 to double*
  store double 0.000000e+00, double* %940, align 1, !tbaa !2452
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 16
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 4
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %942 to i64*
  %946 = load i64, i64* %945
  store i64 %946, i64* %RDX, align 8, !tbaa !2428
  %947 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %948 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %949 = load i64, i64* %RDX
  %950 = add i64 %949, 80
  %951 = load i64, i64* %PC
  %952 = add i64 %951, 5
  store i64 %952, i64* %PC
  %953 = bitcast i8* %948 to double*
  %954 = load double, double* %953, align 1
  %955 = getelementptr inbounds i8, i8* %948, i64 8
  %956 = bitcast i8* %955 to i64*
  %957 = load i64, i64* %956, align 1
  %958 = inttoptr i64 %950 to double*
  %959 = load double, double* %958
  %960 = fsub double %954, %959
  %961 = bitcast i8* %947 to double*
  store double %960, double* %961, align 1, !tbaa !2452
  %962 = getelementptr inbounds i8, i8* %947, i64 8
  %963 = bitcast i8* %962 to i64*
  store i64 %957, i64* %963, align 1, !tbaa !2452
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 112
  %966 = bitcast %union.vec128_t* %XMM0 to i8*
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC
  %969 = bitcast i8* %966 to double*
  %970 = load double, double* %969, align 1
  %971 = inttoptr i64 %965 to double*
  store double %970, double* %971
  %972 = load i64, i64* %RBP
  %973 = sub i64 %972, 16
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976
  store i64 %977, i64* %RDX, align 8, !tbaa !2428
  %978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %979 = load i64, i64* %RDX
  %980 = add i64 %979, 72
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 5
  store i64 %982, i64* %PC
  %983 = inttoptr i64 %980 to double*
  %984 = load double, double* %983
  %985 = bitcast i8* %978 to double*
  store double %984, double* %985, align 1, !tbaa !2452
  %986 = getelementptr inbounds i8, i8* %978, i64 8
  %987 = bitcast i8* %986 to double*
  store double 0.000000e+00, double* %987, align 1, !tbaa !2452
  %988 = load i64, i64* %RBP
  %989 = sub i64 %988, 16
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 4
  store i64 %991, i64* %PC
  %992 = inttoptr i64 %989 to i64*
  %993 = load i64, i64* %992
  store i64 %993, i64* %RDX, align 8, !tbaa !2428
  %994 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %995 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %996 = load i64, i64* %RDX
  %997 = add i64 %996, 88
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 5
  store i64 %999, i64* %PC
  %1000 = bitcast i8* %995 to double*
  %1001 = load double, double* %1000, align 1
  %1002 = getelementptr inbounds i8, i8* %995, i64 8
  %1003 = bitcast i8* %1002 to i64*
  %1004 = load i64, i64* %1003, align 1
  %1005 = inttoptr i64 %997 to double*
  %1006 = load double, double* %1005
  %1007 = fsub double %1001, %1006
  %1008 = bitcast i8* %994 to double*
  store double %1007, double* %1008, align 1, !tbaa !2452
  %1009 = getelementptr inbounds i8, i8* %994, i64 8
  %1010 = bitcast i8* %1009 to i64*
  store i64 %1004, i64* %1010, align 1, !tbaa !2452
  %1011 = load i64, i64* %RBP
  %1012 = sub i64 %1011, 120
  %1013 = bitcast %union.vec128_t* %XMM0 to i8*
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC
  %1016 = bitcast i8* %1013 to double*
  %1017 = load double, double* %1016, align 1
  %1018 = inttoptr i64 %1012 to double*
  store double %1017, double* %1018
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 16
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 4
  store i64 %1022, i64* %PC
  %1023 = inttoptr i64 %1020 to i64*
  %1024 = load i64, i64* %1023
  store i64 %1024, i64* %RDX, align 8, !tbaa !2428
  %1025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1026 = load i64, i64* %RDX
  %1027 = add i64 %1026, 96
  %1028 = load i64, i64* %PC
  %1029 = add i64 %1028, 5
  store i64 %1029, i64* %PC
  %1030 = inttoptr i64 %1027 to double*
  %1031 = load double, double* %1030
  %1032 = bitcast i8* %1025 to double*
  store double %1031, double* %1032, align 1, !tbaa !2452
  %1033 = getelementptr inbounds i8, i8* %1025, i64 8
  %1034 = bitcast i8* %1033 to double*
  store double 0.000000e+00, double* %1034, align 1, !tbaa !2452
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 16
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i64*
  %1040 = load i64, i64* %1039
  store i64 %1040, i64* %RDX, align 8, !tbaa !2428
  %1041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1042 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1043 = load i64, i64* %RDX
  %1044 = add i64 %1043, 112
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 5
  store i64 %1046, i64* %PC
  %1047 = bitcast i8* %1042 to double*
  %1048 = load double, double* %1047, align 1
  %1049 = getelementptr inbounds i8, i8* %1042, i64 8
  %1050 = bitcast i8* %1049 to i64*
  %1051 = load i64, i64* %1050, align 1
  %1052 = inttoptr i64 %1044 to double*
  %1053 = load double, double* %1052
  %1054 = fadd double %1048, %1053
  %1055 = bitcast i8* %1041 to double*
  store double %1054, double* %1055, align 1, !tbaa !2452
  %1056 = getelementptr inbounds i8, i8* %1041, i64 8
  %1057 = bitcast i8* %1056 to i64*
  store i64 %1051, i64* %1057, align 1, !tbaa !2452
  %1058 = load i64, i64* %RBP
  %1059 = sub i64 %1058, 128
  %1060 = bitcast %union.vec128_t* %XMM0 to i8*
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 5
  store i64 %1062, i64* %PC
  %1063 = bitcast i8* %1060 to double*
  %1064 = load double, double* %1063, align 1
  %1065 = inttoptr i64 %1059 to double*
  store double %1064, double* %1065
  %1066 = load i64, i64* %RBP
  %1067 = sub i64 %1066, 16
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to i64*
  %1071 = load i64, i64* %1070
  store i64 %1071, i64* %RDX, align 8, !tbaa !2428
  %1072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1073 = load i64, i64* %RDX
  %1074 = add i64 %1073, 104
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 5
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to double*
  %1078 = load double, double* %1077
  %1079 = bitcast i8* %1072 to double*
  store double %1078, double* %1079, align 1, !tbaa !2452
  %1080 = getelementptr inbounds i8, i8* %1072, i64 8
  %1081 = bitcast i8* %1080 to double*
  store double 0.000000e+00, double* %1081, align 1, !tbaa !2452
  %1082 = load i64, i64* %RBP
  %1083 = sub i64 %1082, 16
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 4
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1083 to i64*
  %1087 = load i64, i64* %1086
  store i64 %1087, i64* %RDX, align 8, !tbaa !2428
  %1088 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1089 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1090 = load i64, i64* %RDX
  %1091 = add i64 %1090, 120
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 5
  store i64 %1093, i64* %PC
  %1094 = bitcast i8* %1089 to double*
  %1095 = load double, double* %1094, align 1
  %1096 = getelementptr inbounds i8, i8* %1089, i64 8
  %1097 = bitcast i8* %1096 to i64*
  %1098 = load i64, i64* %1097, align 1
  %1099 = inttoptr i64 %1091 to double*
  %1100 = load double, double* %1099
  %1101 = fadd double %1095, %1100
  %1102 = bitcast i8* %1088 to double*
  store double %1101, double* %1102, align 1, !tbaa !2452
  %1103 = getelementptr inbounds i8, i8* %1088, i64 8
  %1104 = bitcast i8* %1103 to i64*
  store i64 %1098, i64* %1104, align 1, !tbaa !2452
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 136
  %1107 = bitcast %union.vec128_t* %XMM0 to i8*
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 8
  store i64 %1109, i64* %PC
  %1110 = bitcast i8* %1107 to double*
  %1111 = load double, double* %1110, align 1
  %1112 = inttoptr i64 %1106 to double*
  store double %1111, double* %1112
  %1113 = load i64, i64* %RBP
  %1114 = sub i64 %1113, 16
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1114 to i64*
  %1118 = load i64, i64* %1117
  store i64 %1118, i64* %RDX, align 8, !tbaa !2428
  %1119 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1120 = load i64, i64* %RDX
  %1121 = add i64 %1120, 96
  %1122 = load i64, i64* %PC
  %1123 = add i64 %1122, 5
  store i64 %1123, i64* %PC
  %1124 = inttoptr i64 %1121 to double*
  %1125 = load double, double* %1124
  %1126 = bitcast i8* %1119 to double*
  store double %1125, double* %1126, align 1, !tbaa !2452
  %1127 = getelementptr inbounds i8, i8* %1119, i64 8
  %1128 = bitcast i8* %1127 to double*
  store double 0.000000e+00, double* %1128, align 1, !tbaa !2452
  %1129 = load i64, i64* %RBP
  %1130 = sub i64 %1129, 16
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 4
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1130 to i64*
  %1134 = load i64, i64* %1133
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1136 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1137 = load i64, i64* %RDX
  %1138 = add i64 %1137, 112
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 5
  store i64 %1140, i64* %PC
  %1141 = bitcast i8* %1136 to double*
  %1142 = load double, double* %1141, align 1
  %1143 = getelementptr inbounds i8, i8* %1136, i64 8
  %1144 = bitcast i8* %1143 to i64*
  %1145 = load i64, i64* %1144, align 1
  %1146 = inttoptr i64 %1138 to double*
  %1147 = load double, double* %1146
  %1148 = fsub double %1142, %1147
  %1149 = bitcast i8* %1135 to double*
  store double %1148, double* %1149, align 1, !tbaa !2452
  %1150 = getelementptr inbounds i8, i8* %1135, i64 8
  %1151 = bitcast i8* %1150 to i64*
  store i64 %1145, i64* %1151, align 1, !tbaa !2452
  %1152 = load i64, i64* %RBP
  %1153 = sub i64 %1152, 144
  %1154 = bitcast %union.vec128_t* %XMM0 to i8*
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 8
  store i64 %1156, i64* %PC
  %1157 = bitcast i8* %1154 to double*
  %1158 = load double, double* %1157, align 1
  %1159 = inttoptr i64 %1153 to double*
  store double %1158, double* %1159
  %1160 = load i64, i64* %RBP
  %1161 = sub i64 %1160, 16
  %1162 = load i64, i64* %PC
  %1163 = add i64 %1162, 4
  store i64 %1163, i64* %PC
  %1164 = inttoptr i64 %1161 to i64*
  %1165 = load i64, i64* %1164
  store i64 %1165, i64* %RDX, align 8, !tbaa !2428
  %1166 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1167 = load i64, i64* %RDX
  %1168 = add i64 %1167, 104
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 5
  store i64 %1170, i64* %PC
  %1171 = inttoptr i64 %1168 to double*
  %1172 = load double, double* %1171
  %1173 = bitcast i8* %1166 to double*
  store double %1172, double* %1173, align 1, !tbaa !2452
  %1174 = getelementptr inbounds i8, i8* %1166, i64 8
  %1175 = bitcast i8* %1174 to double*
  store double 0.000000e+00, double* %1175, align 1, !tbaa !2452
  %1176 = load i64, i64* %RBP
  %1177 = sub i64 %1176, 16
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 4
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to i64*
  %1181 = load i64, i64* %1180
  store i64 %1181, i64* %RDX, align 8, !tbaa !2428
  %1182 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1184 = load i64, i64* %RDX
  %1185 = add i64 %1184, 120
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 5
  store i64 %1187, i64* %PC
  %1188 = bitcast i8* %1183 to double*
  %1189 = load double, double* %1188, align 1
  %1190 = getelementptr inbounds i8, i8* %1183, i64 8
  %1191 = bitcast i8* %1190 to i64*
  %1192 = load i64, i64* %1191, align 1
  %1193 = inttoptr i64 %1185 to double*
  %1194 = load double, double* %1193
  %1195 = fsub double %1189, %1194
  %1196 = bitcast i8* %1182 to double*
  store double %1195, double* %1196, align 1, !tbaa !2452
  %1197 = getelementptr inbounds i8, i8* %1182, i64 8
  %1198 = bitcast i8* %1197 to i64*
  store i64 %1192, i64* %1198, align 1, !tbaa !2452
  %1199 = load i64, i64* %RBP
  %1200 = sub i64 %1199, 152
  %1201 = bitcast %union.vec128_t* %XMM0 to i8*
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 8
  store i64 %1203, i64* %PC
  %1204 = bitcast i8* %1201 to double*
  %1205 = load double, double* %1204, align 1
  %1206 = inttoptr i64 %1200 to double*
  store double %1205, double* %1206
  %1207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1208 = load i64, i64* %RBP
  %1209 = sub i64 %1208, 96
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 5
  store i64 %1211, i64* %PC
  %1212 = inttoptr i64 %1209 to double*
  %1213 = load double, double* %1212
  %1214 = bitcast i8* %1207 to double*
  store double %1213, double* %1214, align 1, !tbaa !2452
  %1215 = getelementptr inbounds i8, i8* %1207, i64 8
  %1216 = bitcast i8* %1215 to double*
  store double 0.000000e+00, double* %1216, align 1, !tbaa !2452
  %1217 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 128
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = bitcast i8* %1218 to double*
  %1224 = load double, double* %1223, align 1
  %1225 = getelementptr inbounds i8, i8* %1218, i64 8
  %1226 = bitcast i8* %1225 to i64*
  %1227 = load i64, i64* %1226, align 1
  %1228 = inttoptr i64 %1220 to double*
  %1229 = load double, double* %1228
  %1230 = fadd double %1224, %1229
  %1231 = bitcast i8* %1217 to double*
  store double %1230, double* %1231, align 1, !tbaa !2452
  %1232 = getelementptr inbounds i8, i8* %1217, i64 8
  %1233 = bitcast i8* %1232 to i64*
  store i64 %1227, i64* %1233, align 1, !tbaa !2452
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 16
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i64*
  %1239 = load i64, i64* %1238
  store i64 %1239, i64* %RDX, align 8, !tbaa !2428
  %1240 = load i64, i64* %RDX
  %1241 = add i64 %1240, 64
  %1242 = bitcast %union.vec128_t* %XMM0 to i8*
  %1243 = load i64, i64* %PC
  %1244 = add i64 %1243, 5
  store i64 %1244, i64* %PC
  %1245 = bitcast i8* %1242 to double*
  %1246 = load double, double* %1245, align 1
  %1247 = inttoptr i64 %1241 to double*
  store double %1246, double* %1247
  %1248 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1249 = load i64, i64* %RBP
  %1250 = sub i64 %1249, 104
  %1251 = load i64, i64* %PC
  %1252 = add i64 %1251, 5
  store i64 %1252, i64* %PC
  %1253 = inttoptr i64 %1250 to double*
  %1254 = load double, double* %1253
  %1255 = bitcast i8* %1248 to double*
  store double %1254, double* %1255, align 1, !tbaa !2452
  %1256 = getelementptr inbounds i8, i8* %1248, i64 8
  %1257 = bitcast i8* %1256 to double*
  store double 0.000000e+00, double* %1257, align 1, !tbaa !2452
  %1258 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1259 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1260 = load i64, i64* %RBP
  %1261 = sub i64 %1260, 136
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 8
  store i64 %1263, i64* %PC
  %1264 = bitcast i8* %1259 to double*
  %1265 = load double, double* %1264, align 1
  %1266 = getelementptr inbounds i8, i8* %1259, i64 8
  %1267 = bitcast i8* %1266 to i64*
  %1268 = load i64, i64* %1267, align 1
  %1269 = inttoptr i64 %1261 to double*
  %1270 = load double, double* %1269
  %1271 = fadd double %1265, %1270
  %1272 = bitcast i8* %1258 to double*
  store double %1271, double* %1272, align 1, !tbaa !2452
  %1273 = getelementptr inbounds i8, i8* %1258, i64 8
  %1274 = bitcast i8* %1273 to i64*
  store i64 %1268, i64* %1274, align 1, !tbaa !2452
  %1275 = load i64, i64* %RBP
  %1276 = sub i64 %1275, 16
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 4
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1276 to i64*
  %1280 = load i64, i64* %1279
  store i64 %1280, i64* %RDX, align 8, !tbaa !2428
  %1281 = load i64, i64* %RDX
  %1282 = add i64 %1281, 72
  %1283 = bitcast %union.vec128_t* %XMM0 to i8*
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 5
  store i64 %1285, i64* %PC
  %1286 = bitcast i8* %1283 to double*
  %1287 = load double, double* %1286, align 1
  %1288 = inttoptr i64 %1282 to double*
  store double %1287, double* %1288
  %1289 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 136
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 8
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1291 to double*
  %1295 = load double, double* %1294
  %1296 = bitcast i8* %1289 to double*
  store double %1295, double* %1296, align 1, !tbaa !2452
  %1297 = getelementptr inbounds i8, i8* %1289, i64 8
  %1298 = bitcast i8* %1297 to double*
  store double 0.000000e+00, double* %1298, align 1, !tbaa !2452
  %1299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1300 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1301 = load i64, i64* %RBP
  %1302 = sub i64 %1301, 104
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 5
  store i64 %1304, i64* %PC
  %1305 = bitcast i8* %1300 to double*
  %1306 = load double, double* %1305, align 1
  %1307 = getelementptr inbounds i8, i8* %1300, i64 8
  %1308 = bitcast i8* %1307 to i64*
  %1309 = load i64, i64* %1308, align 1
  %1310 = inttoptr i64 %1302 to double*
  %1311 = load double, double* %1310
  %1312 = fsub double %1306, %1311
  %1313 = bitcast i8* %1299 to double*
  store double %1312, double* %1313, align 1, !tbaa !2452
  %1314 = getelementptr inbounds i8, i8* %1299, i64 8
  %1315 = bitcast i8* %1314 to i64*
  store i64 %1309, i64* %1315, align 1, !tbaa !2452
  %1316 = load i64, i64* %RBP
  %1317 = sub i64 %1316, 16
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 4
  store i64 %1319, i64* %PC
  %1320 = inttoptr i64 %1317 to i64*
  %1321 = load i64, i64* %1320
  store i64 %1321, i64* %RDX, align 8, !tbaa !2428
  %1322 = load i64, i64* %RDX
  %1323 = add i64 %1322, 96
  %1324 = bitcast %union.vec128_t* %XMM0 to i8*
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 5
  store i64 %1326, i64* %PC
  %1327 = bitcast i8* %1324 to double*
  %1328 = load double, double* %1327, align 1
  %1329 = inttoptr i64 %1323 to double*
  store double %1328, double* %1329
  %1330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 96
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 5
  store i64 %1334, i64* %PC
  %1335 = inttoptr i64 %1332 to double*
  %1336 = load double, double* %1335
  %1337 = bitcast i8* %1330 to double*
  store double %1336, double* %1337, align 1, !tbaa !2452
  %1338 = getelementptr inbounds i8, i8* %1330, i64 8
  %1339 = bitcast i8* %1338 to double*
  store double 0.000000e+00, double* %1339, align 1, !tbaa !2452
  %1340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1341 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1342 = load i64, i64* %RBP
  %1343 = sub i64 %1342, 128
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 5
  store i64 %1345, i64* %PC
  %1346 = bitcast i8* %1341 to double*
  %1347 = load double, double* %1346, align 1
  %1348 = getelementptr inbounds i8, i8* %1341, i64 8
  %1349 = bitcast i8* %1348 to i64*
  %1350 = load i64, i64* %1349, align 1
  %1351 = inttoptr i64 %1343 to double*
  %1352 = load double, double* %1351
  %1353 = fsub double %1347, %1352
  %1354 = bitcast i8* %1340 to double*
  store double %1353, double* %1354, align 1, !tbaa !2452
  %1355 = getelementptr inbounds i8, i8* %1340, i64 8
  %1356 = bitcast i8* %1355 to i64*
  store i64 %1350, i64* %1356, align 1, !tbaa !2452
  %1357 = load i64, i64* %RBP
  %1358 = sub i64 %1357, 16
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 4
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i64*
  %1362 = load i64, i64* %1361
  store i64 %1362, i64* %RDX, align 8, !tbaa !2428
  %1363 = load i64, i64* %RDX
  %1364 = add i64 %1363, 104
  %1365 = bitcast %union.vec128_t* %XMM0 to i8*
  %1366 = load i64, i64* %PC
  %1367 = add i64 %1366, 5
  store i64 %1367, i64* %PC
  %1368 = bitcast i8* %1365 to double*
  %1369 = load double, double* %1368, align 1
  %1370 = inttoptr i64 %1364 to double*
  store double %1369, double* %1370
  %1371 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 112
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 5
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to double*
  %1377 = load double, double* %1376
  %1378 = bitcast i8* %1371 to double*
  store double %1377, double* %1378, align 1, !tbaa !2452
  %1379 = getelementptr inbounds i8, i8* %1371, i64 8
  %1380 = bitcast i8* %1379 to double*
  store double 0.000000e+00, double* %1380, align 1, !tbaa !2452
  %1381 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1382 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1383 = load i64, i64* %RBP
  %1384 = sub i64 %1383, 152
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 8
  store i64 %1386, i64* %PC
  %1387 = bitcast i8* %1382 to double*
  %1388 = load double, double* %1387, align 1
  %1389 = getelementptr inbounds i8, i8* %1382, i64 8
  %1390 = bitcast i8* %1389 to i64*
  %1391 = load i64, i64* %1390, align 1
  %1392 = inttoptr i64 %1384 to double*
  %1393 = load double, double* %1392
  %1394 = fsub double %1388, %1393
  %1395 = bitcast i8* %1381 to double*
  store double %1394, double* %1395, align 1, !tbaa !2452
  %1396 = getelementptr inbounds i8, i8* %1381, i64 8
  %1397 = bitcast i8* %1396 to i64*
  store i64 %1391, i64* %1397, align 1, !tbaa !2452
  %1398 = load i64, i64* %RBP
  %1399 = sub i64 %1398, 96
  %1400 = bitcast %union.vec128_t* %XMM0 to i8*
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 5
  store i64 %1402, i64* %PC
  %1403 = bitcast i8* %1400 to double*
  %1404 = load double, double* %1403, align 1
  %1405 = inttoptr i64 %1399 to double*
  store double %1404, double* %1405
  %1406 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1407 = load i64, i64* %RBP
  %1408 = sub i64 %1407, 120
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 5
  store i64 %1410, i64* %PC
  %1411 = inttoptr i64 %1408 to double*
  %1412 = load double, double* %1411
  %1413 = bitcast i8* %1406 to double*
  store double %1412, double* %1413, align 1, !tbaa !2452
  %1414 = getelementptr inbounds i8, i8* %1406, i64 8
  %1415 = bitcast i8* %1414 to double*
  store double 0.000000e+00, double* %1415, align 1, !tbaa !2452
  %1416 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1417 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1418 = load i64, i64* %RBP
  %1419 = sub i64 %1418, 144
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 8
  store i64 %1421, i64* %PC
  %1422 = bitcast i8* %1417 to double*
  %1423 = load double, double* %1422, align 1
  %1424 = getelementptr inbounds i8, i8* %1417, i64 8
  %1425 = bitcast i8* %1424 to i64*
  %1426 = load i64, i64* %1425, align 1
  %1427 = inttoptr i64 %1419 to double*
  %1428 = load double, double* %1427
  %1429 = fadd double %1423, %1428
  %1430 = bitcast i8* %1416 to double*
  store double %1429, double* %1430, align 1, !tbaa !2452
  %1431 = getelementptr inbounds i8, i8* %1416, i64 8
  %1432 = bitcast i8* %1431 to i64*
  store i64 %1426, i64* %1432, align 1, !tbaa !2452
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 104
  %1435 = bitcast %union.vec128_t* %XMM0 to i8*
  %1436 = load i64, i64* %PC
  %1437 = add i64 %1436, 5
  store i64 %1437, i64* %PC
  %1438 = bitcast i8* %1435 to double*
  %1439 = load double, double* %1438, align 1
  %1440 = inttoptr i64 %1434 to double*
  store double %1439, double* %1440
  %1441 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1442 = load i64, i64* %RBP
  %1443 = sub i64 %1442, 48
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 5
  store i64 %1445, i64* %PC
  %1446 = inttoptr i64 %1443 to double*
  %1447 = load double, double* %1446
  %1448 = bitcast i8* %1441 to double*
  store double %1447, double* %1448, align 1, !tbaa !2452
  %1449 = getelementptr inbounds i8, i8* %1441, i64 8
  %1450 = bitcast i8* %1449 to double*
  store double 0.000000e+00, double* %1450, align 1, !tbaa !2452
  %1451 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1452 = load i64, i64* %RBP
  %1453 = sub i64 %1452, 96
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 5
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1453 to double*
  %1457 = load double, double* %1456
  %1458 = bitcast i8* %1451 to double*
  store double %1457, double* %1458, align 1, !tbaa !2452
  %1459 = getelementptr inbounds i8, i8* %1451, i64 8
  %1460 = bitcast i8* %1459 to double*
  store double 0.000000e+00, double* %1460, align 1, !tbaa !2452
  %1461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1462 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1463 = load i64, i64* %RBP
  %1464 = sub i64 %1463, 104
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 5
  store i64 %1466, i64* %PC
  %1467 = bitcast i8* %1462 to double*
  %1468 = load double, double* %1467, align 1
  %1469 = getelementptr inbounds i8, i8* %1462, i64 8
  %1470 = bitcast i8* %1469 to i64*
  %1471 = load i64, i64* %1470, align 1
  %1472 = inttoptr i64 %1464 to double*
  %1473 = load double, double* %1472
  %1474 = fsub double %1468, %1473
  %1475 = bitcast i8* %1461 to double*
  store double %1474, double* %1475, align 1, !tbaa !2452
  %1476 = getelementptr inbounds i8, i8* %1461, i64 8
  %1477 = bitcast i8* %1476 to i64*
  store i64 %1471, i64* %1477, align 1, !tbaa !2452
  %1478 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1479 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1480 = bitcast %union.vec128_t* %XMM1 to i8*
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 4
  store i64 %1482, i64* %PC
  %1483 = bitcast i8* %1479 to double*
  %1484 = load double, double* %1483, align 1
  %1485 = getelementptr inbounds i8, i8* %1479, i64 8
  %1486 = bitcast i8* %1485 to i64*
  %1487 = load i64, i64* %1486, align 1
  %1488 = bitcast i8* %1480 to double*
  %1489 = load double, double* %1488, align 1
  %1490 = fmul double %1484, %1489
  %1491 = bitcast i8* %1478 to double*
  store double %1490, double* %1491, align 1, !tbaa !2452
  %1492 = getelementptr inbounds i8, i8* %1478, i64 8
  %1493 = bitcast i8* %1492 to i64*
  store i64 %1487, i64* %1493, align 1, !tbaa !2452
  %1494 = load i64, i64* %RBP
  %1495 = sub i64 %1494, 16
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 4
  store i64 %1497, i64* %PC
  %1498 = inttoptr i64 %1495 to i64*
  %1499 = load i64, i64* %1498
  store i64 %1499, i64* %RDX, align 8, !tbaa !2428
  %1500 = load i64, i64* %RDX
  %1501 = add i64 %1500, 80
  %1502 = bitcast %union.vec128_t* %XMM0 to i8*
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = bitcast i8* %1502 to double*
  %1506 = load double, double* %1505, align 1
  %1507 = inttoptr i64 %1501 to double*
  store double %1506, double* %1507
  %1508 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1509 = load i64, i64* %RBP
  %1510 = sub i64 %1509, 48
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 5
  store i64 %1512, i64* %PC
  %1513 = inttoptr i64 %1510 to double*
  %1514 = load double, double* %1513
  %1515 = bitcast i8* %1508 to double*
  store double %1514, double* %1515, align 1, !tbaa !2452
  %1516 = getelementptr inbounds i8, i8* %1508, i64 8
  %1517 = bitcast i8* %1516 to double*
  store double 0.000000e+00, double* %1517, align 1, !tbaa !2452
  %1518 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 96
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 5
  store i64 %1522, i64* %PC
  %1523 = inttoptr i64 %1520 to double*
  %1524 = load double, double* %1523
  %1525 = bitcast i8* %1518 to double*
  store double %1524, double* %1525, align 1, !tbaa !2452
  %1526 = getelementptr inbounds i8, i8* %1518, i64 8
  %1527 = bitcast i8* %1526 to double*
  store double 0.000000e+00, double* %1527, align 1, !tbaa !2452
  %1528 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1529 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1530 = load i64, i64* %RBP
  %1531 = sub i64 %1530, 104
  %1532 = load i64, i64* %PC
  %1533 = add i64 %1532, 5
  store i64 %1533, i64* %PC
  %1534 = bitcast i8* %1529 to double*
  %1535 = load double, double* %1534, align 1
  %1536 = getelementptr inbounds i8, i8* %1529, i64 8
  %1537 = bitcast i8* %1536 to i64*
  %1538 = load i64, i64* %1537, align 1
  %1539 = inttoptr i64 %1531 to double*
  %1540 = load double, double* %1539
  %1541 = fadd double %1535, %1540
  %1542 = bitcast i8* %1528 to double*
  store double %1541, double* %1542, align 1, !tbaa !2452
  %1543 = getelementptr inbounds i8, i8* %1528, i64 8
  %1544 = bitcast i8* %1543 to i64*
  store i64 %1538, i64* %1544, align 1, !tbaa !2452
  %1545 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1546 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1547 = bitcast %union.vec128_t* %XMM1 to i8*
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 4
  store i64 %1549, i64* %PC
  %1550 = bitcast i8* %1546 to double*
  %1551 = load double, double* %1550, align 1
  %1552 = getelementptr inbounds i8, i8* %1546, i64 8
  %1553 = bitcast i8* %1552 to i64*
  %1554 = load i64, i64* %1553, align 1
  %1555 = bitcast i8* %1547 to double*
  %1556 = load double, double* %1555, align 1
  %1557 = fmul double %1551, %1556
  %1558 = bitcast i8* %1545 to double*
  store double %1557, double* %1558, align 1, !tbaa !2452
  %1559 = getelementptr inbounds i8, i8* %1545, i64 8
  %1560 = bitcast i8* %1559 to i64*
  store i64 %1554, i64* %1560, align 1, !tbaa !2452
  %1561 = load i64, i64* %RBP
  %1562 = sub i64 %1561, 16
  %1563 = load i64, i64* %PC
  %1564 = add i64 %1563, 4
  store i64 %1564, i64* %PC
  %1565 = inttoptr i64 %1562 to i64*
  %1566 = load i64, i64* %1565
  store i64 %1566, i64* %RDX, align 8, !tbaa !2428
  %1567 = load i64, i64* %RDX
  %1568 = add i64 %1567, 88
  %1569 = bitcast %union.vec128_t* %XMM0 to i8*
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 5
  store i64 %1571, i64* %PC
  %1572 = bitcast i8* %1569 to double*
  %1573 = load double, double* %1572, align 1
  %1574 = inttoptr i64 %1568 to double*
  store double %1573, double* %1574
  %1575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1576 = load i64, i64* %RBP
  %1577 = sub i64 %1576, 152
  %1578 = load i64, i64* %PC
  %1579 = add i64 %1578, 8
  store i64 %1579, i64* %PC
  %1580 = inttoptr i64 %1577 to double*
  %1581 = load double, double* %1580
  %1582 = bitcast i8* %1575 to double*
  store double %1581, double* %1582, align 1, !tbaa !2452
  %1583 = getelementptr inbounds i8, i8* %1575, i64 8
  %1584 = bitcast i8* %1583 to double*
  store double 0.000000e+00, double* %1584, align 1, !tbaa !2452
  %1585 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1586 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1587 = load i64, i64* %RBP
  %1588 = sub i64 %1587, 112
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 5
  store i64 %1590, i64* %PC
  %1591 = bitcast i8* %1586 to double*
  %1592 = load double, double* %1591, align 1
  %1593 = getelementptr inbounds i8, i8* %1586, i64 8
  %1594 = bitcast i8* %1593 to i64*
  %1595 = load i64, i64* %1594, align 1
  %1596 = inttoptr i64 %1588 to double*
  %1597 = load double, double* %1596
  %1598 = fadd double %1592, %1597
  %1599 = bitcast i8* %1585 to double*
  store double %1598, double* %1599, align 1, !tbaa !2452
  %1600 = getelementptr inbounds i8, i8* %1585, i64 8
  %1601 = bitcast i8* %1600 to i64*
  store i64 %1595, i64* %1601, align 1, !tbaa !2452
  %1602 = load i64, i64* %RBP
  %1603 = sub i64 %1602, 96
  %1604 = bitcast %union.vec128_t* %XMM0 to i8*
  %1605 = load i64, i64* %PC
  %1606 = add i64 %1605, 5
  store i64 %1606, i64* %PC
  %1607 = bitcast i8* %1604 to double*
  %1608 = load double, double* %1607, align 1
  %1609 = inttoptr i64 %1603 to double*
  store double %1608, double* %1609
  %1610 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1611 = load i64, i64* %RBP
  %1612 = sub i64 %1611, 144
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 8
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to double*
  %1616 = load double, double* %1615
  %1617 = bitcast i8* %1610 to double*
  store double %1616, double* %1617, align 1, !tbaa !2452
  %1618 = getelementptr inbounds i8, i8* %1610, i64 8
  %1619 = bitcast i8* %1618 to double*
  store double 0.000000e+00, double* %1619, align 1, !tbaa !2452
  %1620 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1621 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1622 = load i64, i64* %RBP
  %1623 = sub i64 %1622, 120
  %1624 = load i64, i64* %PC
  %1625 = add i64 %1624, 5
  store i64 %1625, i64* %PC
  %1626 = bitcast i8* %1621 to double*
  %1627 = load double, double* %1626, align 1
  %1628 = getelementptr inbounds i8, i8* %1621, i64 8
  %1629 = bitcast i8* %1628 to i64*
  %1630 = load i64, i64* %1629, align 1
  %1631 = inttoptr i64 %1623 to double*
  %1632 = load double, double* %1631
  %1633 = fsub double %1627, %1632
  %1634 = bitcast i8* %1620 to double*
  store double %1633, double* %1634, align 1, !tbaa !2452
  %1635 = getelementptr inbounds i8, i8* %1620, i64 8
  %1636 = bitcast i8* %1635 to i64*
  store i64 %1630, i64* %1636, align 1, !tbaa !2452
  %1637 = load i64, i64* %RBP
  %1638 = sub i64 %1637, 104
  %1639 = bitcast %union.vec128_t* %XMM0 to i8*
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 5
  store i64 %1641, i64* %PC
  %1642 = bitcast i8* %1639 to double*
  %1643 = load double, double* %1642, align 1
  %1644 = inttoptr i64 %1638 to double*
  store double %1643, double* %1644
  %1645 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1646 = load i64, i64* %RBP
  %1647 = sub i64 %1646, 48
  %1648 = load i64, i64* %PC
  %1649 = add i64 %1648, 5
  store i64 %1649, i64* %PC
  %1650 = inttoptr i64 %1647 to double*
  %1651 = load double, double* %1650
  %1652 = bitcast i8* %1645 to double*
  store double %1651, double* %1652, align 1, !tbaa !2452
  %1653 = getelementptr inbounds i8, i8* %1645, i64 8
  %1654 = bitcast i8* %1653 to double*
  store double 0.000000e+00, double* %1654, align 1, !tbaa !2452
  %1655 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1656 = load i64, i64* %RBP
  %1657 = sub i64 %1656, 104
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 5
  store i64 %1659, i64* %PC
  %1660 = inttoptr i64 %1657 to double*
  %1661 = load double, double* %1660
  %1662 = bitcast i8* %1655 to double*
  store double %1661, double* %1662, align 1, !tbaa !2452
  %1663 = getelementptr inbounds i8, i8* %1655, i64 8
  %1664 = bitcast i8* %1663 to double*
  store double 0.000000e+00, double* %1664, align 1, !tbaa !2452
  %1665 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1666 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 96
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 5
  store i64 %1670, i64* %PC
  %1671 = bitcast i8* %1666 to double*
  %1672 = load double, double* %1671, align 1
  %1673 = getelementptr inbounds i8, i8* %1666, i64 8
  %1674 = bitcast i8* %1673 to i64*
  %1675 = load i64, i64* %1674, align 1
  %1676 = inttoptr i64 %1668 to double*
  %1677 = load double, double* %1676
  %1678 = fsub double %1672, %1677
  %1679 = bitcast i8* %1665 to double*
  store double %1678, double* %1679, align 1, !tbaa !2452
  %1680 = getelementptr inbounds i8, i8* %1665, i64 8
  %1681 = bitcast i8* %1680 to i64*
  store i64 %1675, i64* %1681, align 1, !tbaa !2452
  %1682 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1684 = bitcast %union.vec128_t* %XMM1 to i8*
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 4
  store i64 %1686, i64* %PC
  %1687 = bitcast i8* %1683 to double*
  %1688 = load double, double* %1687, align 1
  %1689 = getelementptr inbounds i8, i8* %1683, i64 8
  %1690 = bitcast i8* %1689 to i64*
  %1691 = load i64, i64* %1690, align 1
  %1692 = bitcast i8* %1684 to double*
  %1693 = load double, double* %1692, align 1
  %1694 = fmul double %1688, %1693
  %1695 = bitcast i8* %1682 to double*
  store double %1694, double* %1695, align 1, !tbaa !2452
  %1696 = getelementptr inbounds i8, i8* %1682, i64 8
  %1697 = bitcast i8* %1696 to i64*
  store i64 %1691, i64* %1697, align 1, !tbaa !2452
  %1698 = load i64, i64* %RBP
  %1699 = sub i64 %1698, 16
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 4
  store i64 %1701, i64* %PC
  %1702 = inttoptr i64 %1699 to i64*
  %1703 = load i64, i64* %1702
  store i64 %1703, i64* %RDX, align 8, !tbaa !2428
  %1704 = load i64, i64* %RDX
  %1705 = add i64 %1704, 112
  %1706 = bitcast %union.vec128_t* %XMM0 to i8*
  %1707 = load i64, i64* %PC
  %1708 = add i64 %1707, 5
  store i64 %1708, i64* %PC
  %1709 = bitcast i8* %1706 to double*
  %1710 = load double, double* %1709, align 1
  %1711 = inttoptr i64 %1705 to double*
  store double %1710, double* %1711
  %1712 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1713 = load i64, i64* %RBP
  %1714 = sub i64 %1713, 48
  %1715 = load i64, i64* %PC
  %1716 = add i64 %1715, 5
  store i64 %1716, i64* %PC
  %1717 = inttoptr i64 %1714 to double*
  %1718 = load double, double* %1717
  %1719 = bitcast i8* %1712 to double*
  store double %1718, double* %1719, align 1, !tbaa !2452
  %1720 = getelementptr inbounds i8, i8* %1712, i64 8
  %1721 = bitcast i8* %1720 to double*
  store double 0.000000e+00, double* %1721, align 1, !tbaa !2452
  %1722 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1723 = load i64, i64* %RBP
  %1724 = sub i64 %1723, 104
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 5
  store i64 %1726, i64* %PC
  %1727 = inttoptr i64 %1724 to double*
  %1728 = load double, double* %1727
  %1729 = bitcast i8* %1722 to double*
  store double %1728, double* %1729, align 1, !tbaa !2452
  %1730 = getelementptr inbounds i8, i8* %1722, i64 8
  %1731 = bitcast i8* %1730 to double*
  store double 0.000000e+00, double* %1731, align 1, !tbaa !2452
  %1732 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1733 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1734 = load i64, i64* %RBP
  %1735 = sub i64 %1734, 96
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 5
  store i64 %1737, i64* %PC
  %1738 = bitcast i8* %1733 to double*
  %1739 = load double, double* %1738, align 1
  %1740 = getelementptr inbounds i8, i8* %1733, i64 8
  %1741 = bitcast i8* %1740 to i64*
  %1742 = load i64, i64* %1741, align 1
  %1743 = inttoptr i64 %1735 to double*
  %1744 = load double, double* %1743
  %1745 = fadd double %1739, %1744
  %1746 = bitcast i8* %1732 to double*
  store double %1745, double* %1746, align 1, !tbaa !2452
  %1747 = getelementptr inbounds i8, i8* %1732, i64 8
  %1748 = bitcast i8* %1747 to i64*
  store i64 %1742, i64* %1748, align 1, !tbaa !2452
  %1749 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1750 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1751 = bitcast %union.vec128_t* %XMM1 to i8*
  %1752 = load i64, i64* %PC
  %1753 = add i64 %1752, 4
  store i64 %1753, i64* %PC
  %1754 = bitcast i8* %1750 to double*
  %1755 = load double, double* %1754, align 1
  %1756 = getelementptr inbounds i8, i8* %1750, i64 8
  %1757 = bitcast i8* %1756 to i64*
  %1758 = load i64, i64* %1757, align 1
  %1759 = bitcast i8* %1751 to double*
  %1760 = load double, double* %1759, align 1
  %1761 = fmul double %1755, %1760
  %1762 = bitcast i8* %1749 to double*
  store double %1761, double* %1762, align 1, !tbaa !2452
  %1763 = getelementptr inbounds i8, i8* %1749, i64 8
  %1764 = bitcast i8* %1763 to i64*
  store i64 %1758, i64* %1764, align 1, !tbaa !2452
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 16
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 4
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to i64*
  %1770 = load i64, i64* %1769
  store i64 %1770, i64* %RDX, align 8, !tbaa !2428
  %1771 = load i64, i64* %RDX
  %1772 = add i64 %1771, 120
  %1773 = bitcast %union.vec128_t* %XMM0 to i8*
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 5
  store i64 %1775, i64* %PC
  %1776 = bitcast i8* %1773 to double*
  %1777 = load double, double* %1776, align 1
  %1778 = inttoptr i64 %1772 to double*
  store double %1777, double* %1778
  %1779 = load i64, i64* %RBP
  %1780 = sub i64 %1779, 32
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 7
  store i64 %1782, i64* %PC
  %1783 = inttoptr i64 %1780 to i32*
  store i32 0, i32* %1783
  %1784 = load i64, i64* %RBP
  %1785 = sub i64 %1784, 28
  %1786 = load i64, i64* %PC
  %1787 = add i64 %1786, 7
  store i64 %1787, i64* %PC
  %1788 = inttoptr i64 %1785 to i32*
  store i32 16, i32* %1788
  br label %block_402c02

block_402c0e:                                     ; preds = %block_402c02
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 10
  store i64 %1790, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1791 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 8
  store i64 %1793, i64* %PC
  %1794 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 80) to double*)
  %1795 = bitcast i8* %1791 to double*
  store double %1794, double* %1795, align 1, !tbaa !2452
  %1796 = getelementptr inbounds i8, i8* %1791, i64 8
  %1797 = bitcast i8* %1796 to double*
  store double 0.000000e+00, double* %1797, align 1, !tbaa !2452
  %1798 = load i64, i64* %RBP
  %1799 = sub i64 %1798, 32
  %1800 = load i64, i64* %PC
  %1801 = add i64 %1800, 3
  store i64 %1801, i64* %PC
  %1802 = inttoptr i64 %1799 to i32*
  %1803 = load i32, i32* %1802
  %1804 = zext i32 %1803 to i64
  store i64 %1804, i64* %RCX, align 8, !tbaa !2428
  %1805 = load i64, i64* %RCX
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 3
  store i64 %1807, i64* %PC
  %1808 = trunc i64 %1805 to i32
  %1809 = add i32 2, %1808
  %1810 = zext i32 %1809 to i64
  store i64 %1810, i64* %RCX, align 8, !tbaa !2428
  %1811 = icmp ult i32 %1809, %1808
  %1812 = icmp ult i32 %1809, 2
  %1813 = or i1 %1811, %1812
  %1814 = zext i1 %1813 to i8
  %1815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1814, i8* %1815, align 1, !tbaa !2432
  %1816 = and i32 %1809, 255
  %1817 = call i32 @llvm.ctpop.i32(i32 %1816) #17
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  %1820 = xor i8 %1819, 1
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1820, i8* %1821, align 1, !tbaa !2446
  %1822 = xor i64 2, %1805
  %1823 = trunc i64 %1822 to i32
  %1824 = xor i32 %1823, %1809
  %1825 = lshr i32 %1824, 4
  %1826 = trunc i32 %1825 to i8
  %1827 = and i8 %1826, 1
  %1828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1827, i8* %1828, align 1, !tbaa !2447
  %1829 = icmp eq i32 %1809, 0
  %1830 = zext i1 %1829 to i8
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1830, i8* %1831, align 1, !tbaa !2448
  %1832 = lshr i32 %1809, 31
  %1833 = trunc i32 %1832 to i8
  %1834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1833, i8* %1834, align 1, !tbaa !2449
  %1835 = lshr i32 %1808, 31
  %1836 = xor i32 %1832, %1835
  %1837 = add nuw nsw i32 %1836, %1832
  %1838 = icmp eq i32 %1837, 2
  %1839 = zext i1 %1838 to i8
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1839, i8* %1840, align 1, !tbaa !2450
  %1841 = load i64, i64* %RBP
  %1842 = sub i64 %1841, 32
  %1843 = load i32, i32* %ECX
  %1844 = zext i32 %1843 to i64
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 3
  store i64 %1846, i64* %PC
  %1847 = inttoptr i64 %1842 to i32*
  store i32 %1843, i32* %1847
  %1848 = load i64, i64* %RBP
  %1849 = sub i64 %1848, 32
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 3
  store i64 %1851, i64* %PC
  %1852 = inttoptr i64 %1849 to i32*
  %1853 = load i32, i32* %1852
  %1854 = zext i32 %1853 to i64
  store i64 %1854, i64* %RCX, align 8, !tbaa !2428
  %1855 = load i64, i64* %RCX
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 3
  store i64 %1857, i64* %PC
  %1858 = trunc i64 %1855 to i32
  %1859 = shl i32 %1858, 1
  %1860 = icmp slt i32 %1858, 0
  %1861 = icmp slt i32 %1859, 0
  %1862 = xor i1 %1860, %1861
  %1863 = zext i32 %1859 to i64
  store i64 %1863, i64* %RCX, align 8, !tbaa !2428
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1865 = zext i1 %1860 to i8
  store i8 %1865, i8* %1864, align 1, !tbaa !2451
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1867 = and i32 %1859, 254
  %1868 = call i32 @llvm.ctpop.i32(i32 %1867) #17
  %1869 = trunc i32 %1868 to i8
  %1870 = and i8 %1869, 1
  %1871 = xor i8 %1870, 1
  store i8 %1871, i8* %1866, align 1, !tbaa !2451
  %1872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1872, align 1, !tbaa !2451
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1874 = icmp eq i32 %1859, 0
  %1875 = zext i1 %1874 to i8
  store i8 %1875, i8* %1873, align 1, !tbaa !2451
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1877 = lshr i32 %1859, 31
  %1878 = trunc i32 %1877 to i8
  store i8 %1878, i8* %1876, align 1, !tbaa !2451
  %1879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1880 = zext i1 %1862 to i8
  store i8 %1880, i8* %1879, align 1, !tbaa !2451
  %1881 = load i64, i64* %RBP
  %1882 = sub i64 %1881, 36
  %1883 = load i32, i32* %ECX
  %1884 = zext i32 %1883 to i64
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 3
  store i64 %1886, i64* %PC
  %1887 = inttoptr i64 %1882 to i32*
  store i32 %1883, i32* %1887
  %1888 = load i64, i64* %RBP
  %1889 = sub i64 %1888, 24
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 4
  store i64 %1891, i64* %PC
  %1892 = inttoptr i64 %1889 to i64*
  %1893 = load i64, i64* %1892
  store i64 %1893, i64* %RDX, align 8, !tbaa !2428
  %1894 = load i64, i64* %RBP
  %1895 = sub i64 %1894, 32
  %1896 = load i64, i64* %PC
  %1897 = add i64 %1896, 4
  store i64 %1897, i64* %PC
  %1898 = inttoptr i64 %1895 to i32*
  %1899 = load i32, i32* %1898
  %1900 = sext i32 %1899 to i64
  store i64 %1900, i64* %RSI, align 8, !tbaa !2428
  %1901 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1902 = load i64, i64* %RDX
  %1903 = load i64, i64* %RSI
  %1904 = mul i64 %1903, 8
  %1905 = add i64 %1904, %1902
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 5
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to double*
  %1909 = load double, double* %1908
  %1910 = bitcast i8* %1901 to double*
  store double %1909, double* %1910, align 1, !tbaa !2452
  %1911 = getelementptr inbounds i8, i8* %1901, i64 8
  %1912 = bitcast i8* %1911 to double*
  store double 0.000000e+00, double* %1912, align 1, !tbaa !2452
  %1913 = load i64, i64* %RBP
  %1914 = sub i64 %1913, 64
  %1915 = bitcast %union.vec128_t* %XMM1 to i8*
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 5
  store i64 %1917, i64* %PC
  %1918 = bitcast i8* %1915 to double*
  %1919 = load double, double* %1918, align 1
  %1920 = inttoptr i64 %1914 to double*
  store double %1919, double* %1920
  %1921 = load i64, i64* %RBP
  %1922 = sub i64 %1921, 24
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 4
  store i64 %1924, i64* %PC
  %1925 = inttoptr i64 %1922 to i64*
  %1926 = load i64, i64* %1925
  store i64 %1926, i64* %RDX, align 8, !tbaa !2428
  %1927 = load i64, i64* %RBP
  %1928 = sub i64 %1927, 32
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 3
  store i64 %1930, i64* %PC
  %1931 = inttoptr i64 %1928 to i32*
  %1932 = load i32, i32* %1931
  %1933 = zext i32 %1932 to i64
  store i64 %1933, i64* %RCX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RCX
  %1935 = load i64, i64* %PC
  %1936 = add i64 %1935, 3
  store i64 %1936, i64* %PC
  %1937 = trunc i64 %1934 to i32
  %1938 = add i32 1, %1937
  %1939 = zext i32 %1938 to i64
  store i64 %1939, i64* %RCX, align 8, !tbaa !2428
  %1940 = icmp ult i32 %1938, %1937
  %1941 = icmp ult i32 %1938, 1
  %1942 = or i1 %1940, %1941
  %1943 = zext i1 %1942 to i8
  %1944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1943, i8* %1944, align 1, !tbaa !2432
  %1945 = and i32 %1938, 255
  %1946 = call i32 @llvm.ctpop.i32(i32 %1945) #17
  %1947 = trunc i32 %1946 to i8
  %1948 = and i8 %1947, 1
  %1949 = xor i8 %1948, 1
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1949, i8* %1950, align 1, !tbaa !2446
  %1951 = xor i64 1, %1934
  %1952 = trunc i64 %1951 to i32
  %1953 = xor i32 %1952, %1938
  %1954 = lshr i32 %1953, 4
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1956, i8* %1957, align 1, !tbaa !2447
  %1958 = icmp eq i32 %1938, 0
  %1959 = zext i1 %1958 to i8
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1959, i8* %1960, align 1, !tbaa !2448
  %1961 = lshr i32 %1938, 31
  %1962 = trunc i32 %1961 to i8
  %1963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1962, i8* %1963, align 1, !tbaa !2449
  %1964 = lshr i32 %1937, 31
  %1965 = xor i32 %1961, %1964
  %1966 = add nuw nsw i32 %1965, %1961
  %1967 = icmp eq i32 %1966, 2
  %1968 = zext i1 %1967 to i8
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1968, i8* %1969, align 1, !tbaa !2450
  %1970 = load i32, i32* %ECX
  %1971 = zext i32 %1970 to i64
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 3
  store i64 %1973, i64* %PC
  %1974 = shl i64 %1971, 32
  %1975 = ashr exact i64 %1974, 32
  store i64 %1975, i64* %RSI, align 8, !tbaa !2428
  %1976 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1977 = load i64, i64* %RDX
  %1978 = load i64, i64* %RSI
  %1979 = mul i64 %1978, 8
  %1980 = add i64 %1979, %1977
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 5
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1980 to double*
  %1984 = load double, double* %1983
  %1985 = bitcast i8* %1976 to double*
  store double %1984, double* %1985, align 1, !tbaa !2452
  %1986 = getelementptr inbounds i8, i8* %1976, i64 8
  %1987 = bitcast i8* %1986 to double*
  store double 0.000000e+00, double* %1987, align 1, !tbaa !2452
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 72
  %1990 = bitcast %union.vec128_t* %XMM1 to i8*
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 5
  store i64 %1992, i64* %PC
  %1993 = bitcast i8* %1990 to double*
  %1994 = load double, double* %1993, align 1
  %1995 = inttoptr i64 %1989 to double*
  store double %1994, double* %1995
  %1996 = load i64, i64* %RBP
  %1997 = sub i64 %1996, 24
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 4
  store i64 %1999, i64* %PC
  %2000 = inttoptr i64 %1997 to i64*
  %2001 = load i64, i64* %2000
  store i64 %2001, i64* %RDX, align 8, !tbaa !2428
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 36
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = inttoptr i64 %2003 to i32*
  %2007 = load i32, i32* %2006
  %2008 = sext i32 %2007 to i64
  store i64 %2008, i64* %RSI, align 8, !tbaa !2428
  %2009 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2010 = load i64, i64* %RDX
  %2011 = load i64, i64* %RSI
  %2012 = mul i64 %2011, 8
  %2013 = add i64 %2012, %2010
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 5
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2013 to double*
  %2017 = load double, double* %2016
  %2018 = bitcast i8* %2009 to double*
  store double %2017, double* %2018, align 1, !tbaa !2452
  %2019 = getelementptr inbounds i8, i8* %2009, i64 8
  %2020 = bitcast i8* %2019 to double*
  store double 0.000000e+00, double* %2020, align 1, !tbaa !2452
  %2021 = load i64, i64* %RBP
  %2022 = sub i64 %2021, 48
  %2023 = bitcast %union.vec128_t* %XMM1 to i8*
  %2024 = load i64, i64* %PC
  %2025 = add i64 %2024, 5
  store i64 %2025, i64* %PC
  %2026 = bitcast i8* %2023 to double*
  %2027 = load double, double* %2026, align 1
  %2028 = inttoptr i64 %2022 to double*
  store double %2027, double* %2028
  %2029 = load i64, i64* %RBP
  %2030 = sub i64 %2029, 24
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 4
  store i64 %2032, i64* %PC
  %2033 = inttoptr i64 %2030 to i64*
  %2034 = load i64, i64* %2033
  store i64 %2034, i64* %RDX, align 8, !tbaa !2428
  %2035 = load i64, i64* %RBP
  %2036 = sub i64 %2035, 36
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 3
  store i64 %2038, i64* %PC
  %2039 = inttoptr i64 %2036 to i32*
  %2040 = load i32, i32* %2039
  %2041 = zext i32 %2040 to i64
  store i64 %2041, i64* %RCX, align 8, !tbaa !2428
  %2042 = load i64, i64* %RCX
  %2043 = load i64, i64* %PC
  %2044 = add i64 %2043, 3
  store i64 %2044, i64* %PC
  %2045 = trunc i64 %2042 to i32
  %2046 = add i32 1, %2045
  %2047 = zext i32 %2046 to i64
  store i64 %2047, i64* %RCX, align 8, !tbaa !2428
  %2048 = icmp ult i32 %2046, %2045
  %2049 = icmp ult i32 %2046, 1
  %2050 = or i1 %2048, %2049
  %2051 = zext i1 %2050 to i8
  %2052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2051, i8* %2052, align 1, !tbaa !2432
  %2053 = and i32 %2046, 255
  %2054 = call i32 @llvm.ctpop.i32(i32 %2053) #17
  %2055 = trunc i32 %2054 to i8
  %2056 = and i8 %2055, 1
  %2057 = xor i8 %2056, 1
  %2058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2057, i8* %2058, align 1, !tbaa !2446
  %2059 = xor i64 1, %2042
  %2060 = trunc i64 %2059 to i32
  %2061 = xor i32 %2060, %2046
  %2062 = lshr i32 %2061, 4
  %2063 = trunc i32 %2062 to i8
  %2064 = and i8 %2063, 1
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2064, i8* %2065, align 1, !tbaa !2447
  %2066 = icmp eq i32 %2046, 0
  %2067 = zext i1 %2066 to i8
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2067, i8* %2068, align 1, !tbaa !2448
  %2069 = lshr i32 %2046, 31
  %2070 = trunc i32 %2069 to i8
  %2071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2070, i8* %2071, align 1, !tbaa !2449
  %2072 = lshr i32 %2045, 31
  %2073 = xor i32 %2069, %2072
  %2074 = add nuw nsw i32 %2073, %2069
  %2075 = icmp eq i32 %2074, 2
  %2076 = zext i1 %2075 to i8
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2076, i8* %2077, align 1, !tbaa !2450
  %2078 = load i32, i32* %ECX
  %2079 = zext i32 %2078 to i64
  %2080 = load i64, i64* %PC
  %2081 = add i64 %2080, 3
  store i64 %2081, i64* %PC
  %2082 = shl i64 %2079, 32
  %2083 = ashr exact i64 %2082, 32
  store i64 %2083, i64* %RSI, align 8, !tbaa !2428
  %2084 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2085 = load i64, i64* %RDX
  %2086 = load i64, i64* %RSI
  %2087 = mul i64 %2086, 8
  %2088 = add i64 %2087, %2085
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  store i64 %2090, i64* %PC
  %2091 = inttoptr i64 %2088 to double*
  %2092 = load double, double* %2091
  %2093 = bitcast i8* %2084 to double*
  store double %2092, double* %2093, align 1, !tbaa !2452
  %2094 = getelementptr inbounds i8, i8* %2084, i64 8
  %2095 = bitcast i8* %2094 to double*
  store double 0.000000e+00, double* %2095, align 1, !tbaa !2452
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 56
  %2098 = bitcast %union.vec128_t* %XMM1 to i8*
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 5
  store i64 %2100, i64* %PC
  %2101 = bitcast i8* %2098 to double*
  %2102 = load double, double* %2101, align 1
  %2103 = inttoptr i64 %2097 to double*
  store double %2102, double* %2103
  %2104 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2105 = load i64, i64* %RBP
  %2106 = sub i64 %2105, 48
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 5
  store i64 %2108, i64* %PC
  %2109 = inttoptr i64 %2106 to double*
  %2110 = load double, double* %2109
  %2111 = bitcast i8* %2104 to double*
  store double %2110, double* %2111, align 1, !tbaa !2452
  %2112 = getelementptr inbounds i8, i8* %2104, i64 8
  %2113 = bitcast i8* %2112 to double*
  store double 0.000000e+00, double* %2113, align 1, !tbaa !2452
  %2114 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2115 = bitcast %union.vec128_t* %XMM0 to i8*
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 3
  store i64 %2117, i64* %PC
  %2118 = bitcast i8* %2115 to <2 x i32>*
  %2119 = load <2 x i32>, <2 x i32>* %2118, align 1
  %2120 = getelementptr inbounds i8, i8* %2115, i64 8
  %2121 = bitcast i8* %2120 to <2 x i32>*
  %2122 = load <2 x i32>, <2 x i32>* %2121, align 1
  %2123 = extractelement <2 x i32> %2119, i32 0
  %2124 = bitcast i8* %2114 to i32*
  store i32 %2123, i32* %2124, align 1, !tbaa !2479
  %2125 = extractelement <2 x i32> %2119, i32 1
  %2126 = getelementptr inbounds i8, i8* %2114, i64 4
  %2127 = bitcast i8* %2126 to i32*
  store i32 %2125, i32* %2127, align 1, !tbaa !2479
  %2128 = extractelement <2 x i32> %2122, i32 0
  %2129 = getelementptr inbounds i8, i8* %2114, i64 8
  %2130 = bitcast i8* %2129 to i32*
  store i32 %2128, i32* %2130, align 1, !tbaa !2479
  %2131 = extractelement <2 x i32> %2122, i32 1
  %2132 = getelementptr inbounds i8, i8* %2114, i64 12
  %2133 = bitcast i8* %2132 to i32*
  store i32 %2131, i32* %2133, align 1, !tbaa !2479
  %2134 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2135 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 72
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 5
  store i64 %2139, i64* %PC
  %2140 = bitcast i8* %2135 to double*
  %2141 = load double, double* %2140, align 1
  %2142 = getelementptr inbounds i8, i8* %2135, i64 8
  %2143 = bitcast i8* %2142 to i64*
  %2144 = load i64, i64* %2143, align 1
  %2145 = inttoptr i64 %2137 to double*
  %2146 = load double, double* %2145
  %2147 = fmul double %2141, %2146
  %2148 = bitcast i8* %2134 to double*
  store double %2147, double* %2148, align 1, !tbaa !2452
  %2149 = getelementptr inbounds i8, i8* %2134, i64 8
  %2150 = bitcast i8* %2149 to i64*
  store i64 %2144, i64* %2150, align 1, !tbaa !2452
  %2151 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2152 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2153 = load i64, i64* %RBP
  %2154 = sub i64 %2153, 56
  %2155 = load i64, i64* %PC
  %2156 = add i64 %2155, 5
  store i64 %2156, i64* %PC
  %2157 = bitcast i8* %2152 to double*
  %2158 = load double, double* %2157, align 1
  %2159 = getelementptr inbounds i8, i8* %2152, i64 8
  %2160 = bitcast i8* %2159 to i64*
  %2161 = load i64, i64* %2160, align 1
  %2162 = inttoptr i64 %2154 to double*
  %2163 = load double, double* %2162
  %2164 = fmul double %2158, %2163
  %2165 = bitcast i8* %2151 to double*
  store double %2164, double* %2165, align 1, !tbaa !2452
  %2166 = getelementptr inbounds i8, i8* %2151, i64 8
  %2167 = bitcast i8* %2166 to i64*
  store i64 %2161, i64* %2167, align 1, !tbaa !2452
  %2168 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2169 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2170 = bitcast %union.vec128_t* %XMM2 to i8*
  %2171 = load i64, i64* %PC
  %2172 = add i64 %2171, 4
  store i64 %2172, i64* %PC
  %2173 = bitcast i8* %2169 to double*
  %2174 = load double, double* %2173, align 1
  %2175 = getelementptr inbounds i8, i8* %2169, i64 8
  %2176 = bitcast i8* %2175 to i64*
  %2177 = load i64, i64* %2176, align 1
  %2178 = bitcast i8* %2170 to double*
  %2179 = load double, double* %2178, align 1
  %2180 = fsub double %2174, %2179
  %2181 = bitcast i8* %2168 to double*
  store double %2180, double* %2181, align 1, !tbaa !2452
  %2182 = getelementptr inbounds i8, i8* %2168, i64 8
  %2183 = bitcast i8* %2182 to i64*
  store i64 %2177, i64* %2183, align 1, !tbaa !2452
  %2184 = load i64, i64* %RBP
  %2185 = sub i64 %2184, 80
  %2186 = bitcast %union.vec128_t* %XMM1 to i8*
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 5
  store i64 %2188, i64* %PC
  %2189 = bitcast i8* %2186 to double*
  %2190 = load double, double* %2189, align 1
  %2191 = inttoptr i64 %2185 to double*
  store double %2190, double* %2191
  %2192 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2193 = bitcast %union.vec128_t* %XMM0 to i8*
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 3
  store i64 %2195, i64* %PC
  %2196 = bitcast i8* %2193 to <2 x i32>*
  %2197 = load <2 x i32>, <2 x i32>* %2196, align 1
  %2198 = getelementptr inbounds i8, i8* %2193, i64 8
  %2199 = bitcast i8* %2198 to <2 x i32>*
  %2200 = load <2 x i32>, <2 x i32>* %2199, align 1
  %2201 = extractelement <2 x i32> %2197, i32 0
  %2202 = bitcast i8* %2192 to i32*
  store i32 %2201, i32* %2202, align 1, !tbaa !2479
  %2203 = extractelement <2 x i32> %2197, i32 1
  %2204 = getelementptr inbounds i8, i8* %2192, i64 4
  %2205 = bitcast i8* %2204 to i32*
  store i32 %2203, i32* %2205, align 1, !tbaa !2479
  %2206 = extractelement <2 x i32> %2200, i32 0
  %2207 = getelementptr inbounds i8, i8* %2192, i64 8
  %2208 = bitcast i8* %2207 to i32*
  store i32 %2206, i32* %2208, align 1, !tbaa !2479
  %2209 = extractelement <2 x i32> %2200, i32 1
  %2210 = getelementptr inbounds i8, i8* %2192, i64 12
  %2211 = bitcast i8* %2210 to i32*
  store i32 %2209, i32* %2211, align 1, !tbaa !2479
  %2212 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2213 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2214 = load i64, i64* %RBP
  %2215 = sub i64 %2214, 72
  %2216 = load i64, i64* %PC
  %2217 = add i64 %2216, 5
  store i64 %2217, i64* %PC
  %2218 = bitcast i8* %2213 to double*
  %2219 = load double, double* %2218, align 1
  %2220 = getelementptr inbounds i8, i8* %2213, i64 8
  %2221 = bitcast i8* %2220 to i64*
  %2222 = load i64, i64* %2221, align 1
  %2223 = inttoptr i64 %2215 to double*
  %2224 = load double, double* %2223
  %2225 = fmul double %2219, %2224
  %2226 = bitcast i8* %2212 to double*
  store double %2225, double* %2226, align 1, !tbaa !2452
  %2227 = getelementptr inbounds i8, i8* %2212, i64 8
  %2228 = bitcast i8* %2227 to i64*
  store i64 %2222, i64* %2228, align 1, !tbaa !2452
  %2229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2230 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2231 = load i64, i64* %RBP
  %2232 = sub i64 %2231, 48
  %2233 = load i64, i64* %PC
  %2234 = add i64 %2233, 5
  store i64 %2234, i64* %PC
  %2235 = bitcast i8* %2230 to double*
  %2236 = load double, double* %2235, align 1
  %2237 = getelementptr inbounds i8, i8* %2230, i64 8
  %2238 = bitcast i8* %2237 to i64*
  %2239 = load i64, i64* %2238, align 1
  %2240 = inttoptr i64 %2232 to double*
  %2241 = load double, double* %2240
  %2242 = fmul double %2236, %2241
  %2243 = bitcast i8* %2229 to double*
  store double %2242, double* %2243, align 1, !tbaa !2452
  %2244 = getelementptr inbounds i8, i8* %2229, i64 8
  %2245 = bitcast i8* %2244 to i64*
  store i64 %2239, i64* %2245, align 1, !tbaa !2452
  %2246 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2247 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2248 = load i64, i64* %RBP
  %2249 = sub i64 %2248, 56
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 5
  store i64 %2251, i64* %PC
  %2252 = bitcast i8* %2247 to double*
  %2253 = load double, double* %2252, align 1
  %2254 = getelementptr inbounds i8, i8* %2247, i64 8
  %2255 = bitcast i8* %2254 to i64*
  %2256 = load i64, i64* %2255, align 1
  %2257 = inttoptr i64 %2249 to double*
  %2258 = load double, double* %2257
  %2259 = fsub double %2253, %2258
  %2260 = bitcast i8* %2246 to double*
  store double %2259, double* %2260, align 1, !tbaa !2452
  %2261 = getelementptr inbounds i8, i8* %2246, i64 8
  %2262 = bitcast i8* %2261 to i64*
  store i64 %2256, i64* %2262, align 1, !tbaa !2452
  %2263 = load i64, i64* %RBP
  %2264 = sub i64 %2263, 88
  %2265 = bitcast %union.vec128_t* %XMM1 to i8*
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 5
  store i64 %2267, i64* %PC
  %2268 = bitcast i8* %2265 to double*
  %2269 = load double, double* %2268, align 1
  %2270 = inttoptr i64 %2264 to double*
  store double %2269, double* %2270
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 16
  %2273 = load i64, i64* %PC
  %2274 = add i64 %2273, 4
  store i64 %2274, i64* %PC
  %2275 = inttoptr i64 %2272 to i64*
  %2276 = load i64, i64* %2275
  store i64 %2276, i64* %RDX, align 8, !tbaa !2428
  %2277 = load i64, i64* %RBP
  %2278 = sub i64 %2277, 28
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 4
  store i64 %2280, i64* %PC
  %2281 = inttoptr i64 %2278 to i32*
  %2282 = load i32, i32* %2281
  %2283 = sext i32 %2282 to i64
  store i64 %2283, i64* %RSI, align 8, !tbaa !2428
  %2284 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2285 = load i64, i64* %RDX
  %2286 = load i64, i64* %RSI
  %2287 = mul i64 %2286, 8
  %2288 = add i64 %2287, %2285
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 5
  store i64 %2290, i64* %PC
  %2291 = inttoptr i64 %2288 to double*
  %2292 = load double, double* %2291
  %2293 = bitcast i8* %2284 to double*
  store double %2292, double* %2293, align 1, !tbaa !2452
  %2294 = getelementptr inbounds i8, i8* %2284, i64 8
  %2295 = bitcast i8* %2294 to double*
  store double 0.000000e+00, double* %2295, align 1, !tbaa !2452
  %2296 = load i64, i64* %RBP
  %2297 = sub i64 %2296, 16
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2297 to i64*
  %2301 = load i64, i64* %2300
  store i64 %2301, i64* %RDX, align 8, !tbaa !2428
  %2302 = load i64, i64* %RBP
  %2303 = sub i64 %2302, 28
  %2304 = load i64, i64* %PC
  %2305 = add i64 %2304, 3
  store i64 %2305, i64* %PC
  %2306 = inttoptr i64 %2303 to i32*
  %2307 = load i32, i32* %2306
  %2308 = zext i32 %2307 to i64
  store i64 %2308, i64* %RCX, align 8, !tbaa !2428
  %2309 = load i64, i64* %RCX
  %2310 = load i64, i64* %PC
  %2311 = add i64 %2310, 3
  store i64 %2311, i64* %PC
  %2312 = trunc i64 %2309 to i32
  %2313 = add i32 2, %2312
  %2314 = zext i32 %2313 to i64
  store i64 %2314, i64* %RCX, align 8, !tbaa !2428
  %2315 = icmp ult i32 %2313, %2312
  %2316 = icmp ult i32 %2313, 2
  %2317 = or i1 %2315, %2316
  %2318 = zext i1 %2317 to i8
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2318, i8* %2319, align 1, !tbaa !2432
  %2320 = and i32 %2313, 255
  %2321 = call i32 @llvm.ctpop.i32(i32 %2320) #17
  %2322 = trunc i32 %2321 to i8
  %2323 = and i8 %2322, 1
  %2324 = xor i8 %2323, 1
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2324, i8* %2325, align 1, !tbaa !2446
  %2326 = xor i64 2, %2309
  %2327 = trunc i64 %2326 to i32
  %2328 = xor i32 %2327, %2313
  %2329 = lshr i32 %2328, 4
  %2330 = trunc i32 %2329 to i8
  %2331 = and i8 %2330, 1
  %2332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2331, i8* %2332, align 1, !tbaa !2447
  %2333 = icmp eq i32 %2313, 0
  %2334 = zext i1 %2333 to i8
  %2335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2334, i8* %2335, align 1, !tbaa !2448
  %2336 = lshr i32 %2313, 31
  %2337 = trunc i32 %2336 to i8
  %2338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2337, i8* %2338, align 1, !tbaa !2449
  %2339 = lshr i32 %2312, 31
  %2340 = xor i32 %2336, %2339
  %2341 = add nuw nsw i32 %2340, %2336
  %2342 = icmp eq i32 %2341, 2
  %2343 = zext i1 %2342 to i8
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2343, i8* %2344, align 1, !tbaa !2450
  %2345 = load i32, i32* %ECX
  %2346 = zext i32 %2345 to i64
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 3
  store i64 %2348, i64* %PC
  %2349 = shl i64 %2346, 32
  %2350 = ashr exact i64 %2349, 32
  store i64 %2350, i64* %RSI, align 8, !tbaa !2428
  %2351 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2352 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2353 = load i64, i64* %RDX
  %2354 = load i64, i64* %RSI
  %2355 = mul i64 %2354, 8
  %2356 = add i64 %2355, %2353
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 5
  store i64 %2358, i64* %PC
  %2359 = bitcast i8* %2352 to double*
  %2360 = load double, double* %2359, align 1
  %2361 = getelementptr inbounds i8, i8* %2352, i64 8
  %2362 = bitcast i8* %2361 to i64*
  %2363 = load i64, i64* %2362, align 1
  %2364 = inttoptr i64 %2356 to double*
  %2365 = load double, double* %2364
  %2366 = fadd double %2360, %2365
  %2367 = bitcast i8* %2351 to double*
  store double %2366, double* %2367, align 1, !tbaa !2452
  %2368 = getelementptr inbounds i8, i8* %2351, i64 8
  %2369 = bitcast i8* %2368 to i64*
  store i64 %2363, i64* %2369, align 1, !tbaa !2452
  %2370 = load i64, i64* %RBP
  %2371 = sub i64 %2370, 96
  %2372 = bitcast %union.vec128_t* %XMM1 to i8*
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 5
  store i64 %2374, i64* %PC
  %2375 = bitcast i8* %2372 to double*
  %2376 = load double, double* %2375, align 1
  %2377 = inttoptr i64 %2371 to double*
  store double %2376, double* %2377
  %2378 = load i64, i64* %RBP
  %2379 = sub i64 %2378, 16
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 4
  store i64 %2381, i64* %PC
  %2382 = inttoptr i64 %2379 to i64*
  %2383 = load i64, i64* %2382
  store i64 %2383, i64* %RDX, align 8, !tbaa !2428
  %2384 = load i64, i64* %RBP
  %2385 = sub i64 %2384, 28
  %2386 = load i64, i64* %PC
  %2387 = add i64 %2386, 3
  store i64 %2387, i64* %PC
  %2388 = inttoptr i64 %2385 to i32*
  %2389 = load i32, i32* %2388
  %2390 = zext i32 %2389 to i64
  store i64 %2390, i64* %RCX, align 8, !tbaa !2428
  %2391 = load i64, i64* %RCX
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 3
  store i64 %2393, i64* %PC
  %2394 = trunc i64 %2391 to i32
  %2395 = add i32 1, %2394
  %2396 = zext i32 %2395 to i64
  store i64 %2396, i64* %RCX, align 8, !tbaa !2428
  %2397 = icmp ult i32 %2395, %2394
  %2398 = icmp ult i32 %2395, 1
  %2399 = or i1 %2397, %2398
  %2400 = zext i1 %2399 to i8
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2400, i8* %2401, align 1, !tbaa !2432
  %2402 = and i32 %2395, 255
  %2403 = call i32 @llvm.ctpop.i32(i32 %2402) #17
  %2404 = trunc i32 %2403 to i8
  %2405 = and i8 %2404, 1
  %2406 = xor i8 %2405, 1
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2406, i8* %2407, align 1, !tbaa !2446
  %2408 = xor i64 1, %2391
  %2409 = trunc i64 %2408 to i32
  %2410 = xor i32 %2409, %2395
  %2411 = lshr i32 %2410, 4
  %2412 = trunc i32 %2411 to i8
  %2413 = and i8 %2412, 1
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2413, i8* %2414, align 1, !tbaa !2447
  %2415 = icmp eq i32 %2395, 0
  %2416 = zext i1 %2415 to i8
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2416, i8* %2417, align 1, !tbaa !2448
  %2418 = lshr i32 %2395, 31
  %2419 = trunc i32 %2418 to i8
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2419, i8* %2420, align 1, !tbaa !2449
  %2421 = lshr i32 %2394, 31
  %2422 = xor i32 %2418, %2421
  %2423 = add nuw nsw i32 %2422, %2418
  %2424 = icmp eq i32 %2423, 2
  %2425 = zext i1 %2424 to i8
  %2426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2425, i8* %2426, align 1, !tbaa !2450
  %2427 = load i32, i32* %ECX
  %2428 = zext i32 %2427 to i64
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 3
  store i64 %2430, i64* %PC
  %2431 = shl i64 %2428, 32
  %2432 = ashr exact i64 %2431, 32
  store i64 %2432, i64* %RSI, align 8, !tbaa !2428
  %2433 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2434 = load i64, i64* %RDX
  %2435 = load i64, i64* %RSI
  %2436 = mul i64 %2435, 8
  %2437 = add i64 %2436, %2434
  %2438 = load i64, i64* %PC
  %2439 = add i64 %2438, 5
  store i64 %2439, i64* %PC
  %2440 = inttoptr i64 %2437 to double*
  %2441 = load double, double* %2440
  %2442 = bitcast i8* %2433 to double*
  store double %2441, double* %2442, align 1, !tbaa !2452
  %2443 = getelementptr inbounds i8, i8* %2433, i64 8
  %2444 = bitcast i8* %2443 to double*
  store double 0.000000e+00, double* %2444, align 1, !tbaa !2452
  %2445 = load i64, i64* %RBP
  %2446 = sub i64 %2445, 16
  %2447 = load i64, i64* %PC
  %2448 = add i64 %2447, 4
  store i64 %2448, i64* %PC
  %2449 = inttoptr i64 %2446 to i64*
  %2450 = load i64, i64* %2449
  store i64 %2450, i64* %RDX, align 8, !tbaa !2428
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 28
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 3
  store i64 %2454, i64* %PC
  %2455 = inttoptr i64 %2452 to i32*
  %2456 = load i32, i32* %2455
  %2457 = zext i32 %2456 to i64
  store i64 %2457, i64* %RCX, align 8, !tbaa !2428
  %2458 = load i64, i64* %RCX
  %2459 = load i64, i64* %PC
  %2460 = add i64 %2459, 3
  store i64 %2460, i64* %PC
  %2461 = trunc i64 %2458 to i32
  %2462 = add i32 3, %2461
  %2463 = zext i32 %2462 to i64
  store i64 %2463, i64* %RCX, align 8, !tbaa !2428
  %2464 = icmp ult i32 %2462, %2461
  %2465 = icmp ult i32 %2462, 3
  %2466 = or i1 %2464, %2465
  %2467 = zext i1 %2466 to i8
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2467, i8* %2468, align 1, !tbaa !2432
  %2469 = and i32 %2462, 255
  %2470 = call i32 @llvm.ctpop.i32(i32 %2469) #17
  %2471 = trunc i32 %2470 to i8
  %2472 = and i8 %2471, 1
  %2473 = xor i8 %2472, 1
  %2474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2473, i8* %2474, align 1, !tbaa !2446
  %2475 = xor i64 3, %2458
  %2476 = trunc i64 %2475 to i32
  %2477 = xor i32 %2476, %2462
  %2478 = lshr i32 %2477, 4
  %2479 = trunc i32 %2478 to i8
  %2480 = and i8 %2479, 1
  %2481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2480, i8* %2481, align 1, !tbaa !2447
  %2482 = icmp eq i32 %2462, 0
  %2483 = zext i1 %2482 to i8
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2483, i8* %2484, align 1, !tbaa !2448
  %2485 = lshr i32 %2462, 31
  %2486 = trunc i32 %2485 to i8
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2486, i8* %2487, align 1, !tbaa !2449
  %2488 = lshr i32 %2461, 31
  %2489 = xor i32 %2485, %2488
  %2490 = add nuw nsw i32 %2489, %2485
  %2491 = icmp eq i32 %2490, 2
  %2492 = zext i1 %2491 to i8
  %2493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2492, i8* %2493, align 1, !tbaa !2450
  %2494 = load i32, i32* %ECX
  %2495 = zext i32 %2494 to i64
  %2496 = load i64, i64* %PC
  %2497 = add i64 %2496, 3
  store i64 %2497, i64* %PC
  %2498 = shl i64 %2495, 32
  %2499 = ashr exact i64 %2498, 32
  store i64 %2499, i64* %RSI, align 8, !tbaa !2428
  %2500 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2501 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2502 = load i64, i64* %RDX
  %2503 = load i64, i64* %RSI
  %2504 = mul i64 %2503, 8
  %2505 = add i64 %2504, %2502
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 5
  store i64 %2507, i64* %PC
  %2508 = bitcast i8* %2501 to double*
  %2509 = load double, double* %2508, align 1
  %2510 = getelementptr inbounds i8, i8* %2501, i64 8
  %2511 = bitcast i8* %2510 to i64*
  %2512 = load i64, i64* %2511, align 1
  %2513 = inttoptr i64 %2505 to double*
  %2514 = load double, double* %2513
  %2515 = fadd double %2509, %2514
  %2516 = bitcast i8* %2500 to double*
  store double %2515, double* %2516, align 1, !tbaa !2452
  %2517 = getelementptr inbounds i8, i8* %2500, i64 8
  %2518 = bitcast i8* %2517 to i64*
  store i64 %2512, i64* %2518, align 1, !tbaa !2452
  %2519 = load i64, i64* %RBP
  %2520 = sub i64 %2519, 104
  %2521 = bitcast %union.vec128_t* %XMM1 to i8*
  %2522 = load i64, i64* %PC
  %2523 = add i64 %2522, 5
  store i64 %2523, i64* %PC
  %2524 = bitcast i8* %2521 to double*
  %2525 = load double, double* %2524, align 1
  %2526 = inttoptr i64 %2520 to double*
  store double %2525, double* %2526
  %2527 = load i64, i64* %RBP
  %2528 = sub i64 %2527, 16
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 4
  store i64 %2530, i64* %PC
  %2531 = inttoptr i64 %2528 to i64*
  %2532 = load i64, i64* %2531
  store i64 %2532, i64* %RDX, align 8, !tbaa !2428
  %2533 = load i64, i64* %RBP
  %2534 = sub i64 %2533, 28
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 4
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to i32*
  %2538 = load i32, i32* %2537
  %2539 = sext i32 %2538 to i64
  store i64 %2539, i64* %RSI, align 8, !tbaa !2428
  %2540 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2541 = load i64, i64* %RDX
  %2542 = load i64, i64* %RSI
  %2543 = mul i64 %2542, 8
  %2544 = add i64 %2543, %2541
  %2545 = load i64, i64* %PC
  %2546 = add i64 %2545, 5
  store i64 %2546, i64* %PC
  %2547 = inttoptr i64 %2544 to double*
  %2548 = load double, double* %2547
  %2549 = bitcast i8* %2540 to double*
  store double %2548, double* %2549, align 1, !tbaa !2452
  %2550 = getelementptr inbounds i8, i8* %2540, i64 8
  %2551 = bitcast i8* %2550 to double*
  store double 0.000000e+00, double* %2551, align 1, !tbaa !2452
  %2552 = load i64, i64* %RBP
  %2553 = sub i64 %2552, 16
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 4
  store i64 %2555, i64* %PC
  %2556 = inttoptr i64 %2553 to i64*
  %2557 = load i64, i64* %2556
  store i64 %2557, i64* %RDX, align 8, !tbaa !2428
  %2558 = load i64, i64* %RBP
  %2559 = sub i64 %2558, 28
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 3
  store i64 %2561, i64* %PC
  %2562 = inttoptr i64 %2559 to i32*
  %2563 = load i32, i32* %2562
  %2564 = zext i32 %2563 to i64
  store i64 %2564, i64* %RCX, align 8, !tbaa !2428
  %2565 = load i64, i64* %RCX
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 3
  store i64 %2567, i64* %PC
  %2568 = trunc i64 %2565 to i32
  %2569 = add i32 2, %2568
  %2570 = zext i32 %2569 to i64
  store i64 %2570, i64* %RCX, align 8, !tbaa !2428
  %2571 = icmp ult i32 %2569, %2568
  %2572 = icmp ult i32 %2569, 2
  %2573 = or i1 %2571, %2572
  %2574 = zext i1 %2573 to i8
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2574, i8* %2575, align 1, !tbaa !2432
  %2576 = and i32 %2569, 255
  %2577 = call i32 @llvm.ctpop.i32(i32 %2576) #17
  %2578 = trunc i32 %2577 to i8
  %2579 = and i8 %2578, 1
  %2580 = xor i8 %2579, 1
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2580, i8* %2581, align 1, !tbaa !2446
  %2582 = xor i64 2, %2565
  %2583 = trunc i64 %2582 to i32
  %2584 = xor i32 %2583, %2569
  %2585 = lshr i32 %2584, 4
  %2586 = trunc i32 %2585 to i8
  %2587 = and i8 %2586, 1
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2587, i8* %2588, align 1, !tbaa !2447
  %2589 = icmp eq i32 %2569, 0
  %2590 = zext i1 %2589 to i8
  %2591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2590, i8* %2591, align 1, !tbaa !2448
  %2592 = lshr i32 %2569, 31
  %2593 = trunc i32 %2592 to i8
  %2594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2593, i8* %2594, align 1, !tbaa !2449
  %2595 = lshr i32 %2568, 31
  %2596 = xor i32 %2592, %2595
  %2597 = add nuw nsw i32 %2596, %2592
  %2598 = icmp eq i32 %2597, 2
  %2599 = zext i1 %2598 to i8
  %2600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2599, i8* %2600, align 1, !tbaa !2450
  %2601 = load i32, i32* %ECX
  %2602 = zext i32 %2601 to i64
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 3
  store i64 %2604, i64* %PC
  %2605 = shl i64 %2602, 32
  %2606 = ashr exact i64 %2605, 32
  store i64 %2606, i64* %RSI, align 8, !tbaa !2428
  %2607 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2608 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2609 = load i64, i64* %RDX
  %2610 = load i64, i64* %RSI
  %2611 = mul i64 %2610, 8
  %2612 = add i64 %2611, %2609
  %2613 = load i64, i64* %PC
  %2614 = add i64 %2613, 5
  store i64 %2614, i64* %PC
  %2615 = bitcast i8* %2608 to double*
  %2616 = load double, double* %2615, align 1
  %2617 = getelementptr inbounds i8, i8* %2608, i64 8
  %2618 = bitcast i8* %2617 to i64*
  %2619 = load i64, i64* %2618, align 1
  %2620 = inttoptr i64 %2612 to double*
  %2621 = load double, double* %2620
  %2622 = fsub double %2616, %2621
  %2623 = bitcast i8* %2607 to double*
  store double %2622, double* %2623, align 1, !tbaa !2452
  %2624 = getelementptr inbounds i8, i8* %2607, i64 8
  %2625 = bitcast i8* %2624 to i64*
  store i64 %2619, i64* %2625, align 1, !tbaa !2452
  %2626 = load i64, i64* %RBP
  %2627 = sub i64 %2626, 112
  %2628 = bitcast %union.vec128_t* %XMM1 to i8*
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 5
  store i64 %2630, i64* %PC
  %2631 = bitcast i8* %2628 to double*
  %2632 = load double, double* %2631, align 1
  %2633 = inttoptr i64 %2627 to double*
  store double %2632, double* %2633
  %2634 = load i64, i64* %RBP
  %2635 = sub i64 %2634, 16
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 4
  store i64 %2637, i64* %PC
  %2638 = inttoptr i64 %2635 to i64*
  %2639 = load i64, i64* %2638
  store i64 %2639, i64* %RDX, align 8, !tbaa !2428
  %2640 = load i64, i64* %RBP
  %2641 = sub i64 %2640, 28
  %2642 = load i64, i64* %PC
  %2643 = add i64 %2642, 3
  store i64 %2643, i64* %PC
  %2644 = inttoptr i64 %2641 to i32*
  %2645 = load i32, i32* %2644
  %2646 = zext i32 %2645 to i64
  store i64 %2646, i64* %RCX, align 8, !tbaa !2428
  %2647 = load i64, i64* %RCX
  %2648 = load i64, i64* %PC
  %2649 = add i64 %2648, 3
  store i64 %2649, i64* %PC
  %2650 = trunc i64 %2647 to i32
  %2651 = add i32 1, %2650
  %2652 = zext i32 %2651 to i64
  store i64 %2652, i64* %RCX, align 8, !tbaa !2428
  %2653 = icmp ult i32 %2651, %2650
  %2654 = icmp ult i32 %2651, 1
  %2655 = or i1 %2653, %2654
  %2656 = zext i1 %2655 to i8
  %2657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2656, i8* %2657, align 1, !tbaa !2432
  %2658 = and i32 %2651, 255
  %2659 = call i32 @llvm.ctpop.i32(i32 %2658) #17
  %2660 = trunc i32 %2659 to i8
  %2661 = and i8 %2660, 1
  %2662 = xor i8 %2661, 1
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2662, i8* %2663, align 1, !tbaa !2446
  %2664 = xor i64 1, %2647
  %2665 = trunc i64 %2664 to i32
  %2666 = xor i32 %2665, %2651
  %2667 = lshr i32 %2666, 4
  %2668 = trunc i32 %2667 to i8
  %2669 = and i8 %2668, 1
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2669, i8* %2670, align 1, !tbaa !2447
  %2671 = icmp eq i32 %2651, 0
  %2672 = zext i1 %2671 to i8
  %2673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2672, i8* %2673, align 1, !tbaa !2448
  %2674 = lshr i32 %2651, 31
  %2675 = trunc i32 %2674 to i8
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2675, i8* %2676, align 1, !tbaa !2449
  %2677 = lshr i32 %2650, 31
  %2678 = xor i32 %2674, %2677
  %2679 = add nuw nsw i32 %2678, %2674
  %2680 = icmp eq i32 %2679, 2
  %2681 = zext i1 %2680 to i8
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2681, i8* %2682, align 1, !tbaa !2450
  %2683 = load i32, i32* %ECX
  %2684 = zext i32 %2683 to i64
  %2685 = load i64, i64* %PC
  %2686 = add i64 %2685, 3
  store i64 %2686, i64* %PC
  %2687 = shl i64 %2684, 32
  %2688 = ashr exact i64 %2687, 32
  store i64 %2688, i64* %RSI, align 8, !tbaa !2428
  %2689 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2690 = load i64, i64* %RDX
  %2691 = load i64, i64* %RSI
  %2692 = mul i64 %2691, 8
  %2693 = add i64 %2692, %2690
  %2694 = load i64, i64* %PC
  %2695 = add i64 %2694, 5
  store i64 %2695, i64* %PC
  %2696 = inttoptr i64 %2693 to double*
  %2697 = load double, double* %2696
  %2698 = bitcast i8* %2689 to double*
  store double %2697, double* %2698, align 1, !tbaa !2452
  %2699 = getelementptr inbounds i8, i8* %2689, i64 8
  %2700 = bitcast i8* %2699 to double*
  store double 0.000000e+00, double* %2700, align 1, !tbaa !2452
  %2701 = load i64, i64* %RBP
  %2702 = sub i64 %2701, 16
  %2703 = load i64, i64* %PC
  %2704 = add i64 %2703, 4
  store i64 %2704, i64* %PC
  %2705 = inttoptr i64 %2702 to i64*
  %2706 = load i64, i64* %2705
  store i64 %2706, i64* %RDX, align 8, !tbaa !2428
  %2707 = load i64, i64* %RBP
  %2708 = sub i64 %2707, 28
  %2709 = load i64, i64* %PC
  %2710 = add i64 %2709, 3
  store i64 %2710, i64* %PC
  %2711 = inttoptr i64 %2708 to i32*
  %2712 = load i32, i32* %2711
  %2713 = zext i32 %2712 to i64
  store i64 %2713, i64* %RCX, align 8, !tbaa !2428
  %2714 = load i64, i64* %RCX
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 3
  store i64 %2716, i64* %PC
  %2717 = trunc i64 %2714 to i32
  %2718 = add i32 3, %2717
  %2719 = zext i32 %2718 to i64
  store i64 %2719, i64* %RCX, align 8, !tbaa !2428
  %2720 = icmp ult i32 %2718, %2717
  %2721 = icmp ult i32 %2718, 3
  %2722 = or i1 %2720, %2721
  %2723 = zext i1 %2722 to i8
  %2724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2723, i8* %2724, align 1, !tbaa !2432
  %2725 = and i32 %2718, 255
  %2726 = call i32 @llvm.ctpop.i32(i32 %2725) #17
  %2727 = trunc i32 %2726 to i8
  %2728 = and i8 %2727, 1
  %2729 = xor i8 %2728, 1
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2729, i8* %2730, align 1, !tbaa !2446
  %2731 = xor i64 3, %2714
  %2732 = trunc i64 %2731 to i32
  %2733 = xor i32 %2732, %2718
  %2734 = lshr i32 %2733, 4
  %2735 = trunc i32 %2734 to i8
  %2736 = and i8 %2735, 1
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2736, i8* %2737, align 1, !tbaa !2447
  %2738 = icmp eq i32 %2718, 0
  %2739 = zext i1 %2738 to i8
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2739, i8* %2740, align 1, !tbaa !2448
  %2741 = lshr i32 %2718, 31
  %2742 = trunc i32 %2741 to i8
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2742, i8* %2743, align 1, !tbaa !2449
  %2744 = lshr i32 %2717, 31
  %2745 = xor i32 %2741, %2744
  %2746 = add nuw nsw i32 %2745, %2741
  %2747 = icmp eq i32 %2746, 2
  %2748 = zext i1 %2747 to i8
  %2749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2748, i8* %2749, align 1, !tbaa !2450
  %2750 = load i32, i32* %ECX
  %2751 = zext i32 %2750 to i64
  %2752 = load i64, i64* %PC
  %2753 = add i64 %2752, 3
  store i64 %2753, i64* %PC
  %2754 = shl i64 %2751, 32
  %2755 = ashr exact i64 %2754, 32
  store i64 %2755, i64* %RSI, align 8, !tbaa !2428
  %2756 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2757 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2758 = load i64, i64* %RDX
  %2759 = load i64, i64* %RSI
  %2760 = mul i64 %2759, 8
  %2761 = add i64 %2760, %2758
  %2762 = load i64, i64* %PC
  %2763 = add i64 %2762, 5
  store i64 %2763, i64* %PC
  %2764 = bitcast i8* %2757 to double*
  %2765 = load double, double* %2764, align 1
  %2766 = getelementptr inbounds i8, i8* %2757, i64 8
  %2767 = bitcast i8* %2766 to i64*
  %2768 = load i64, i64* %2767, align 1
  %2769 = inttoptr i64 %2761 to double*
  %2770 = load double, double* %2769
  %2771 = fsub double %2765, %2770
  %2772 = bitcast i8* %2756 to double*
  store double %2771, double* %2772, align 1, !tbaa !2452
  %2773 = getelementptr inbounds i8, i8* %2756, i64 8
  %2774 = bitcast i8* %2773 to i64*
  store i64 %2768, i64* %2774, align 1, !tbaa !2452
  %2775 = load i64, i64* %RBP
  %2776 = sub i64 %2775, 120
  %2777 = bitcast %union.vec128_t* %XMM1 to i8*
  %2778 = load i64, i64* %PC
  %2779 = add i64 %2778, 5
  store i64 %2779, i64* %PC
  %2780 = bitcast i8* %2777 to double*
  %2781 = load double, double* %2780, align 1
  %2782 = inttoptr i64 %2776 to double*
  store double %2781, double* %2782
  %2783 = load i64, i64* %RBP
  %2784 = sub i64 %2783, 16
  %2785 = load i64, i64* %PC
  %2786 = add i64 %2785, 4
  store i64 %2786, i64* %PC
  %2787 = inttoptr i64 %2784 to i64*
  %2788 = load i64, i64* %2787
  store i64 %2788, i64* %RDX, align 8, !tbaa !2428
  %2789 = load i64, i64* %RBP
  %2790 = sub i64 %2789, 28
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 3
  store i64 %2792, i64* %PC
  %2793 = inttoptr i64 %2790 to i32*
  %2794 = load i32, i32* %2793
  %2795 = zext i32 %2794 to i64
  store i64 %2795, i64* %RCX, align 8, !tbaa !2428
  %2796 = load i64, i64* %RCX
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 3
  store i64 %2798, i64* %PC
  %2799 = trunc i64 %2796 to i32
  %2800 = add i32 4, %2799
  %2801 = zext i32 %2800 to i64
  store i64 %2801, i64* %RCX, align 8, !tbaa !2428
  %2802 = icmp ult i32 %2800, %2799
  %2803 = icmp ult i32 %2800, 4
  %2804 = or i1 %2802, %2803
  %2805 = zext i1 %2804 to i8
  %2806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2805, i8* %2806, align 1, !tbaa !2432
  %2807 = and i32 %2800, 255
  %2808 = call i32 @llvm.ctpop.i32(i32 %2807) #17
  %2809 = trunc i32 %2808 to i8
  %2810 = and i8 %2809, 1
  %2811 = xor i8 %2810, 1
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2811, i8* %2812, align 1, !tbaa !2446
  %2813 = xor i64 4, %2796
  %2814 = trunc i64 %2813 to i32
  %2815 = xor i32 %2814, %2800
  %2816 = lshr i32 %2815, 4
  %2817 = trunc i32 %2816 to i8
  %2818 = and i8 %2817, 1
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2818, i8* %2819, align 1, !tbaa !2447
  %2820 = icmp eq i32 %2800, 0
  %2821 = zext i1 %2820 to i8
  %2822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2821, i8* %2822, align 1, !tbaa !2448
  %2823 = lshr i32 %2800, 31
  %2824 = trunc i32 %2823 to i8
  %2825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2824, i8* %2825, align 1, !tbaa !2449
  %2826 = lshr i32 %2799, 31
  %2827 = xor i32 %2823, %2826
  %2828 = add nuw nsw i32 %2827, %2823
  %2829 = icmp eq i32 %2828, 2
  %2830 = zext i1 %2829 to i8
  %2831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2830, i8* %2831, align 1, !tbaa !2450
  %2832 = load i32, i32* %ECX
  %2833 = zext i32 %2832 to i64
  %2834 = load i64, i64* %PC
  %2835 = add i64 %2834, 3
  store i64 %2835, i64* %PC
  %2836 = shl i64 %2833, 32
  %2837 = ashr exact i64 %2836, 32
  store i64 %2837, i64* %RSI, align 8, !tbaa !2428
  %2838 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2839 = load i64, i64* %RDX
  %2840 = load i64, i64* %RSI
  %2841 = mul i64 %2840, 8
  %2842 = add i64 %2841, %2839
  %2843 = load i64, i64* %PC
  %2844 = add i64 %2843, 5
  store i64 %2844, i64* %PC
  %2845 = inttoptr i64 %2842 to double*
  %2846 = load double, double* %2845
  %2847 = bitcast i8* %2838 to double*
  store double %2846, double* %2847, align 1, !tbaa !2452
  %2848 = getelementptr inbounds i8, i8* %2838, i64 8
  %2849 = bitcast i8* %2848 to double*
  store double 0.000000e+00, double* %2849, align 1, !tbaa !2452
  %2850 = load i64, i64* %RBP
  %2851 = sub i64 %2850, 16
  %2852 = load i64, i64* %PC
  %2853 = add i64 %2852, 4
  store i64 %2853, i64* %PC
  %2854 = inttoptr i64 %2851 to i64*
  %2855 = load i64, i64* %2854
  store i64 %2855, i64* %RDX, align 8, !tbaa !2428
  %2856 = load i64, i64* %RBP
  %2857 = sub i64 %2856, 28
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 3
  store i64 %2859, i64* %PC
  %2860 = inttoptr i64 %2857 to i32*
  %2861 = load i32, i32* %2860
  %2862 = zext i32 %2861 to i64
  store i64 %2862, i64* %RCX, align 8, !tbaa !2428
  %2863 = load i64, i64* %RCX
  %2864 = load i64, i64* %PC
  %2865 = add i64 %2864, 3
  store i64 %2865, i64* %PC
  %2866 = trunc i64 %2863 to i32
  %2867 = add i32 6, %2866
  %2868 = zext i32 %2867 to i64
  store i64 %2868, i64* %RCX, align 8, !tbaa !2428
  %2869 = icmp ult i32 %2867, %2866
  %2870 = icmp ult i32 %2867, 6
  %2871 = or i1 %2869, %2870
  %2872 = zext i1 %2871 to i8
  %2873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2872, i8* %2873, align 1, !tbaa !2432
  %2874 = and i32 %2867, 255
  %2875 = call i32 @llvm.ctpop.i32(i32 %2874) #17
  %2876 = trunc i32 %2875 to i8
  %2877 = and i8 %2876, 1
  %2878 = xor i8 %2877, 1
  %2879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2878, i8* %2879, align 1, !tbaa !2446
  %2880 = xor i64 6, %2863
  %2881 = trunc i64 %2880 to i32
  %2882 = xor i32 %2881, %2867
  %2883 = lshr i32 %2882, 4
  %2884 = trunc i32 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2885, i8* %2886, align 1, !tbaa !2447
  %2887 = icmp eq i32 %2867, 0
  %2888 = zext i1 %2887 to i8
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2888, i8* %2889, align 1, !tbaa !2448
  %2890 = lshr i32 %2867, 31
  %2891 = trunc i32 %2890 to i8
  %2892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2891, i8* %2892, align 1, !tbaa !2449
  %2893 = lshr i32 %2866, 31
  %2894 = xor i32 %2890, %2893
  %2895 = add nuw nsw i32 %2894, %2890
  %2896 = icmp eq i32 %2895, 2
  %2897 = zext i1 %2896 to i8
  %2898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2897, i8* %2898, align 1, !tbaa !2450
  %2899 = load i32, i32* %ECX
  %2900 = zext i32 %2899 to i64
  %2901 = load i64, i64* %PC
  %2902 = add i64 %2901, 3
  store i64 %2902, i64* %PC
  %2903 = shl i64 %2900, 32
  %2904 = ashr exact i64 %2903, 32
  store i64 %2904, i64* %RSI, align 8, !tbaa !2428
  %2905 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2906 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2907 = load i64, i64* %RDX
  %2908 = load i64, i64* %RSI
  %2909 = mul i64 %2908, 8
  %2910 = add i64 %2909, %2907
  %2911 = load i64, i64* %PC
  %2912 = add i64 %2911, 5
  store i64 %2912, i64* %PC
  %2913 = bitcast i8* %2906 to double*
  %2914 = load double, double* %2913, align 1
  %2915 = getelementptr inbounds i8, i8* %2906, i64 8
  %2916 = bitcast i8* %2915 to i64*
  %2917 = load i64, i64* %2916, align 1
  %2918 = inttoptr i64 %2910 to double*
  %2919 = load double, double* %2918
  %2920 = fadd double %2914, %2919
  %2921 = bitcast i8* %2905 to double*
  store double %2920, double* %2921, align 1, !tbaa !2452
  %2922 = getelementptr inbounds i8, i8* %2905, i64 8
  %2923 = bitcast i8* %2922 to i64*
  store i64 %2917, i64* %2923, align 1, !tbaa !2452
  %2924 = load i64, i64* %RBP
  %2925 = sub i64 %2924, 128
  %2926 = bitcast %union.vec128_t* %XMM1 to i8*
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 5
  store i64 %2928, i64* %PC
  %2929 = bitcast i8* %2926 to double*
  %2930 = load double, double* %2929, align 1
  %2931 = inttoptr i64 %2925 to double*
  store double %2930, double* %2931
  %2932 = load i64, i64* %RBP
  %2933 = sub i64 %2932, 16
  %2934 = load i64, i64* %PC
  %2935 = add i64 %2934, 4
  store i64 %2935, i64* %PC
  %2936 = inttoptr i64 %2933 to i64*
  %2937 = load i64, i64* %2936
  store i64 %2937, i64* %RDX, align 8, !tbaa !2428
  %2938 = load i64, i64* %RBP
  %2939 = sub i64 %2938, 28
  %2940 = load i64, i64* %PC
  %2941 = add i64 %2940, 3
  store i64 %2941, i64* %PC
  %2942 = inttoptr i64 %2939 to i32*
  %2943 = load i32, i32* %2942
  %2944 = zext i32 %2943 to i64
  store i64 %2944, i64* %RCX, align 8, !tbaa !2428
  %2945 = load i64, i64* %RCX
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 3
  store i64 %2947, i64* %PC
  %2948 = trunc i64 %2945 to i32
  %2949 = add i32 5, %2948
  %2950 = zext i32 %2949 to i64
  store i64 %2950, i64* %RCX, align 8, !tbaa !2428
  %2951 = icmp ult i32 %2949, %2948
  %2952 = icmp ult i32 %2949, 5
  %2953 = or i1 %2951, %2952
  %2954 = zext i1 %2953 to i8
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2954, i8* %2955, align 1, !tbaa !2432
  %2956 = and i32 %2949, 255
  %2957 = call i32 @llvm.ctpop.i32(i32 %2956) #17
  %2958 = trunc i32 %2957 to i8
  %2959 = and i8 %2958, 1
  %2960 = xor i8 %2959, 1
  %2961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2960, i8* %2961, align 1, !tbaa !2446
  %2962 = xor i64 5, %2945
  %2963 = trunc i64 %2962 to i32
  %2964 = xor i32 %2963, %2949
  %2965 = lshr i32 %2964, 4
  %2966 = trunc i32 %2965 to i8
  %2967 = and i8 %2966, 1
  %2968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2967, i8* %2968, align 1, !tbaa !2447
  %2969 = icmp eq i32 %2949, 0
  %2970 = zext i1 %2969 to i8
  %2971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2970, i8* %2971, align 1, !tbaa !2448
  %2972 = lshr i32 %2949, 31
  %2973 = trunc i32 %2972 to i8
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2973, i8* %2974, align 1, !tbaa !2449
  %2975 = lshr i32 %2948, 31
  %2976 = xor i32 %2972, %2975
  %2977 = add nuw nsw i32 %2976, %2972
  %2978 = icmp eq i32 %2977, 2
  %2979 = zext i1 %2978 to i8
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2979, i8* %2980, align 1, !tbaa !2450
  %2981 = load i32, i32* %ECX
  %2982 = zext i32 %2981 to i64
  %2983 = load i64, i64* %PC
  %2984 = add i64 %2983, 3
  store i64 %2984, i64* %PC
  %2985 = shl i64 %2982, 32
  %2986 = ashr exact i64 %2985, 32
  store i64 %2986, i64* %RSI, align 8, !tbaa !2428
  %2987 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2988 = load i64, i64* %RDX
  %2989 = load i64, i64* %RSI
  %2990 = mul i64 %2989, 8
  %2991 = add i64 %2990, %2988
  %2992 = load i64, i64* %PC
  %2993 = add i64 %2992, 5
  store i64 %2993, i64* %PC
  %2994 = inttoptr i64 %2991 to double*
  %2995 = load double, double* %2994
  %2996 = bitcast i8* %2987 to double*
  store double %2995, double* %2996, align 1, !tbaa !2452
  %2997 = getelementptr inbounds i8, i8* %2987, i64 8
  %2998 = bitcast i8* %2997 to double*
  store double 0.000000e+00, double* %2998, align 1, !tbaa !2452
  %2999 = load i64, i64* %RBP
  %3000 = sub i64 %2999, 16
  %3001 = load i64, i64* %PC
  %3002 = add i64 %3001, 4
  store i64 %3002, i64* %PC
  %3003 = inttoptr i64 %3000 to i64*
  %3004 = load i64, i64* %3003
  store i64 %3004, i64* %RDX, align 8, !tbaa !2428
  %3005 = load i64, i64* %RBP
  %3006 = sub i64 %3005, 28
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 3
  store i64 %3008, i64* %PC
  %3009 = inttoptr i64 %3006 to i32*
  %3010 = load i32, i32* %3009
  %3011 = zext i32 %3010 to i64
  store i64 %3011, i64* %RCX, align 8, !tbaa !2428
  %3012 = load i64, i64* %RCX
  %3013 = load i64, i64* %PC
  %3014 = add i64 %3013, 3
  store i64 %3014, i64* %PC
  %3015 = trunc i64 %3012 to i32
  %3016 = add i32 7, %3015
  %3017 = zext i32 %3016 to i64
  store i64 %3017, i64* %RCX, align 8, !tbaa !2428
  %3018 = icmp ult i32 %3016, %3015
  %3019 = icmp ult i32 %3016, 7
  %3020 = or i1 %3018, %3019
  %3021 = zext i1 %3020 to i8
  %3022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3021, i8* %3022, align 1, !tbaa !2432
  %3023 = and i32 %3016, 255
  %3024 = call i32 @llvm.ctpop.i32(i32 %3023) #17
  %3025 = trunc i32 %3024 to i8
  %3026 = and i8 %3025, 1
  %3027 = xor i8 %3026, 1
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3027, i8* %3028, align 1, !tbaa !2446
  %3029 = xor i64 7, %3012
  %3030 = trunc i64 %3029 to i32
  %3031 = xor i32 %3030, %3016
  %3032 = lshr i32 %3031, 4
  %3033 = trunc i32 %3032 to i8
  %3034 = and i8 %3033, 1
  %3035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3034, i8* %3035, align 1, !tbaa !2447
  %3036 = icmp eq i32 %3016, 0
  %3037 = zext i1 %3036 to i8
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3037, i8* %3038, align 1, !tbaa !2448
  %3039 = lshr i32 %3016, 31
  %3040 = trunc i32 %3039 to i8
  %3041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3040, i8* %3041, align 1, !tbaa !2449
  %3042 = lshr i32 %3015, 31
  %3043 = xor i32 %3039, %3042
  %3044 = add nuw nsw i32 %3043, %3039
  %3045 = icmp eq i32 %3044, 2
  %3046 = zext i1 %3045 to i8
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3046, i8* %3047, align 1, !tbaa !2450
  %3048 = load i32, i32* %ECX
  %3049 = zext i32 %3048 to i64
  %3050 = load i64, i64* %PC
  %3051 = add i64 %3050, 3
  store i64 %3051, i64* %PC
  %3052 = shl i64 %3049, 32
  %3053 = ashr exact i64 %3052, 32
  store i64 %3053, i64* %RSI, align 8, !tbaa !2428
  %3054 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3055 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3056 = load i64, i64* %RDX
  %3057 = load i64, i64* %RSI
  %3058 = mul i64 %3057, 8
  %3059 = add i64 %3058, %3056
  %3060 = load i64, i64* %PC
  %3061 = add i64 %3060, 5
  store i64 %3061, i64* %PC
  %3062 = bitcast i8* %3055 to double*
  %3063 = load double, double* %3062, align 1
  %3064 = getelementptr inbounds i8, i8* %3055, i64 8
  %3065 = bitcast i8* %3064 to i64*
  %3066 = load i64, i64* %3065, align 1
  %3067 = inttoptr i64 %3059 to double*
  %3068 = load double, double* %3067
  %3069 = fadd double %3063, %3068
  %3070 = bitcast i8* %3054 to double*
  store double %3069, double* %3070, align 1, !tbaa !2452
  %3071 = getelementptr inbounds i8, i8* %3054, i64 8
  %3072 = bitcast i8* %3071 to i64*
  store i64 %3066, i64* %3072, align 1, !tbaa !2452
  %3073 = load i64, i64* %RBP
  %3074 = sub i64 %3073, 136
  %3075 = bitcast %union.vec128_t* %XMM1 to i8*
  %3076 = load i64, i64* %PC
  %3077 = add i64 %3076, 8
  store i64 %3077, i64* %PC
  %3078 = bitcast i8* %3075 to double*
  %3079 = load double, double* %3078, align 1
  %3080 = inttoptr i64 %3074 to double*
  store double %3079, double* %3080
  %3081 = load i64, i64* %RBP
  %3082 = sub i64 %3081, 16
  %3083 = load i64, i64* %PC
  %3084 = add i64 %3083, 4
  store i64 %3084, i64* %PC
  %3085 = inttoptr i64 %3082 to i64*
  %3086 = load i64, i64* %3085
  store i64 %3086, i64* %RDX, align 8, !tbaa !2428
  %3087 = load i64, i64* %RBP
  %3088 = sub i64 %3087, 28
  %3089 = load i64, i64* %PC
  %3090 = add i64 %3089, 3
  store i64 %3090, i64* %PC
  %3091 = inttoptr i64 %3088 to i32*
  %3092 = load i32, i32* %3091
  %3093 = zext i32 %3092 to i64
  store i64 %3093, i64* %RCX, align 8, !tbaa !2428
  %3094 = load i64, i64* %RCX
  %3095 = load i64, i64* %PC
  %3096 = add i64 %3095, 3
  store i64 %3096, i64* %PC
  %3097 = trunc i64 %3094 to i32
  %3098 = add i32 4, %3097
  %3099 = zext i32 %3098 to i64
  store i64 %3099, i64* %RCX, align 8, !tbaa !2428
  %3100 = icmp ult i32 %3098, %3097
  %3101 = icmp ult i32 %3098, 4
  %3102 = or i1 %3100, %3101
  %3103 = zext i1 %3102 to i8
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3103, i8* %3104, align 1, !tbaa !2432
  %3105 = and i32 %3098, 255
  %3106 = call i32 @llvm.ctpop.i32(i32 %3105) #17
  %3107 = trunc i32 %3106 to i8
  %3108 = and i8 %3107, 1
  %3109 = xor i8 %3108, 1
  %3110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3109, i8* %3110, align 1, !tbaa !2446
  %3111 = xor i64 4, %3094
  %3112 = trunc i64 %3111 to i32
  %3113 = xor i32 %3112, %3098
  %3114 = lshr i32 %3113, 4
  %3115 = trunc i32 %3114 to i8
  %3116 = and i8 %3115, 1
  %3117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3116, i8* %3117, align 1, !tbaa !2447
  %3118 = icmp eq i32 %3098, 0
  %3119 = zext i1 %3118 to i8
  %3120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3119, i8* %3120, align 1, !tbaa !2448
  %3121 = lshr i32 %3098, 31
  %3122 = trunc i32 %3121 to i8
  %3123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3122, i8* %3123, align 1, !tbaa !2449
  %3124 = lshr i32 %3097, 31
  %3125 = xor i32 %3121, %3124
  %3126 = add nuw nsw i32 %3125, %3121
  %3127 = icmp eq i32 %3126, 2
  %3128 = zext i1 %3127 to i8
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3128, i8* %3129, align 1, !tbaa !2450
  %3130 = load i32, i32* %ECX
  %3131 = zext i32 %3130 to i64
  %3132 = load i64, i64* %PC
  %3133 = add i64 %3132, 3
  store i64 %3133, i64* %PC
  %3134 = shl i64 %3131, 32
  %3135 = ashr exact i64 %3134, 32
  store i64 %3135, i64* %RSI, align 8, !tbaa !2428
  %3136 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3137 = load i64, i64* %RDX
  %3138 = load i64, i64* %RSI
  %3139 = mul i64 %3138, 8
  %3140 = add i64 %3139, %3137
  %3141 = load i64, i64* %PC
  %3142 = add i64 %3141, 5
  store i64 %3142, i64* %PC
  %3143 = inttoptr i64 %3140 to double*
  %3144 = load double, double* %3143
  %3145 = bitcast i8* %3136 to double*
  store double %3144, double* %3145, align 1, !tbaa !2452
  %3146 = getelementptr inbounds i8, i8* %3136, i64 8
  %3147 = bitcast i8* %3146 to double*
  store double 0.000000e+00, double* %3147, align 1, !tbaa !2452
  %3148 = load i64, i64* %RBP
  %3149 = sub i64 %3148, 16
  %3150 = load i64, i64* %PC
  %3151 = add i64 %3150, 4
  store i64 %3151, i64* %PC
  %3152 = inttoptr i64 %3149 to i64*
  %3153 = load i64, i64* %3152
  store i64 %3153, i64* %RDX, align 8, !tbaa !2428
  %3154 = load i64, i64* %RBP
  %3155 = sub i64 %3154, 28
  %3156 = load i64, i64* %PC
  %3157 = add i64 %3156, 3
  store i64 %3157, i64* %PC
  %3158 = inttoptr i64 %3155 to i32*
  %3159 = load i32, i32* %3158
  %3160 = zext i32 %3159 to i64
  store i64 %3160, i64* %RCX, align 8, !tbaa !2428
  %3161 = load i64, i64* %RCX
  %3162 = load i64, i64* %PC
  %3163 = add i64 %3162, 3
  store i64 %3163, i64* %PC
  %3164 = trunc i64 %3161 to i32
  %3165 = add i32 6, %3164
  %3166 = zext i32 %3165 to i64
  store i64 %3166, i64* %RCX, align 8, !tbaa !2428
  %3167 = icmp ult i32 %3165, %3164
  %3168 = icmp ult i32 %3165, 6
  %3169 = or i1 %3167, %3168
  %3170 = zext i1 %3169 to i8
  %3171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3170, i8* %3171, align 1, !tbaa !2432
  %3172 = and i32 %3165, 255
  %3173 = call i32 @llvm.ctpop.i32(i32 %3172) #17
  %3174 = trunc i32 %3173 to i8
  %3175 = and i8 %3174, 1
  %3176 = xor i8 %3175, 1
  %3177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3176, i8* %3177, align 1, !tbaa !2446
  %3178 = xor i64 6, %3161
  %3179 = trunc i64 %3178 to i32
  %3180 = xor i32 %3179, %3165
  %3181 = lshr i32 %3180, 4
  %3182 = trunc i32 %3181 to i8
  %3183 = and i8 %3182, 1
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3183, i8* %3184, align 1, !tbaa !2447
  %3185 = icmp eq i32 %3165, 0
  %3186 = zext i1 %3185 to i8
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3186, i8* %3187, align 1, !tbaa !2448
  %3188 = lshr i32 %3165, 31
  %3189 = trunc i32 %3188 to i8
  %3190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3189, i8* %3190, align 1, !tbaa !2449
  %3191 = lshr i32 %3164, 31
  %3192 = xor i32 %3188, %3191
  %3193 = add nuw nsw i32 %3192, %3188
  %3194 = icmp eq i32 %3193, 2
  %3195 = zext i1 %3194 to i8
  %3196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3195, i8* %3196, align 1, !tbaa !2450
  %3197 = load i32, i32* %ECX
  %3198 = zext i32 %3197 to i64
  %3199 = load i64, i64* %PC
  %3200 = add i64 %3199, 3
  store i64 %3200, i64* %PC
  %3201 = shl i64 %3198, 32
  %3202 = ashr exact i64 %3201, 32
  store i64 %3202, i64* %RSI, align 8, !tbaa !2428
  %3203 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3205 = load i64, i64* %RDX
  %3206 = load i64, i64* %RSI
  %3207 = mul i64 %3206, 8
  %3208 = add i64 %3207, %3205
  %3209 = load i64, i64* %PC
  %3210 = add i64 %3209, 5
  store i64 %3210, i64* %PC
  %3211 = bitcast i8* %3204 to double*
  %3212 = load double, double* %3211, align 1
  %3213 = getelementptr inbounds i8, i8* %3204, i64 8
  %3214 = bitcast i8* %3213 to i64*
  %3215 = load i64, i64* %3214, align 1
  %3216 = inttoptr i64 %3208 to double*
  %3217 = load double, double* %3216
  %3218 = fsub double %3212, %3217
  %3219 = bitcast i8* %3203 to double*
  store double %3218, double* %3219, align 1, !tbaa !2452
  %3220 = getelementptr inbounds i8, i8* %3203, i64 8
  %3221 = bitcast i8* %3220 to i64*
  store i64 %3215, i64* %3221, align 1, !tbaa !2452
  %3222 = load i64, i64* %RBP
  %3223 = sub i64 %3222, 144
  %3224 = bitcast %union.vec128_t* %XMM1 to i8*
  %3225 = load i64, i64* %PC
  %3226 = add i64 %3225, 8
  store i64 %3226, i64* %PC
  %3227 = bitcast i8* %3224 to double*
  %3228 = load double, double* %3227, align 1
  %3229 = inttoptr i64 %3223 to double*
  store double %3228, double* %3229
  %3230 = load i64, i64* %RBP
  %3231 = sub i64 %3230, 16
  %3232 = load i64, i64* %PC
  %3233 = add i64 %3232, 4
  store i64 %3233, i64* %PC
  %3234 = inttoptr i64 %3231 to i64*
  %3235 = load i64, i64* %3234
  store i64 %3235, i64* %RDX, align 8, !tbaa !2428
  %3236 = load i64, i64* %RBP
  %3237 = sub i64 %3236, 28
  %3238 = load i64, i64* %PC
  %3239 = add i64 %3238, 3
  store i64 %3239, i64* %PC
  %3240 = inttoptr i64 %3237 to i32*
  %3241 = load i32, i32* %3240
  %3242 = zext i32 %3241 to i64
  store i64 %3242, i64* %RCX, align 8, !tbaa !2428
  %3243 = load i64, i64* %RCX
  %3244 = load i64, i64* %PC
  %3245 = add i64 %3244, 3
  store i64 %3245, i64* %PC
  %3246 = trunc i64 %3243 to i32
  %3247 = add i32 5, %3246
  %3248 = zext i32 %3247 to i64
  store i64 %3248, i64* %RCX, align 8, !tbaa !2428
  %3249 = icmp ult i32 %3247, %3246
  %3250 = icmp ult i32 %3247, 5
  %3251 = or i1 %3249, %3250
  %3252 = zext i1 %3251 to i8
  %3253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3252, i8* %3253, align 1, !tbaa !2432
  %3254 = and i32 %3247, 255
  %3255 = call i32 @llvm.ctpop.i32(i32 %3254) #17
  %3256 = trunc i32 %3255 to i8
  %3257 = and i8 %3256, 1
  %3258 = xor i8 %3257, 1
  %3259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3258, i8* %3259, align 1, !tbaa !2446
  %3260 = xor i64 5, %3243
  %3261 = trunc i64 %3260 to i32
  %3262 = xor i32 %3261, %3247
  %3263 = lshr i32 %3262, 4
  %3264 = trunc i32 %3263 to i8
  %3265 = and i8 %3264, 1
  %3266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3265, i8* %3266, align 1, !tbaa !2447
  %3267 = icmp eq i32 %3247, 0
  %3268 = zext i1 %3267 to i8
  %3269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3268, i8* %3269, align 1, !tbaa !2448
  %3270 = lshr i32 %3247, 31
  %3271 = trunc i32 %3270 to i8
  %3272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3271, i8* %3272, align 1, !tbaa !2449
  %3273 = lshr i32 %3246, 31
  %3274 = xor i32 %3270, %3273
  %3275 = add nuw nsw i32 %3274, %3270
  %3276 = icmp eq i32 %3275, 2
  %3277 = zext i1 %3276 to i8
  %3278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3277, i8* %3278, align 1, !tbaa !2450
  %3279 = load i32, i32* %ECX
  %3280 = zext i32 %3279 to i64
  %3281 = load i64, i64* %PC
  %3282 = add i64 %3281, 3
  store i64 %3282, i64* %PC
  %3283 = shl i64 %3280, 32
  %3284 = ashr exact i64 %3283, 32
  store i64 %3284, i64* %RSI, align 8, !tbaa !2428
  %3285 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3286 = load i64, i64* %RDX
  %3287 = load i64, i64* %RSI
  %3288 = mul i64 %3287, 8
  %3289 = add i64 %3288, %3286
  %3290 = load i64, i64* %PC
  %3291 = add i64 %3290, 5
  store i64 %3291, i64* %PC
  %3292 = inttoptr i64 %3289 to double*
  %3293 = load double, double* %3292
  %3294 = bitcast i8* %3285 to double*
  store double %3293, double* %3294, align 1, !tbaa !2452
  %3295 = getelementptr inbounds i8, i8* %3285, i64 8
  %3296 = bitcast i8* %3295 to double*
  store double 0.000000e+00, double* %3296, align 1, !tbaa !2452
  %3297 = load i64, i64* %RBP
  %3298 = sub i64 %3297, 16
  %3299 = load i64, i64* %PC
  %3300 = add i64 %3299, 4
  store i64 %3300, i64* %PC
  %3301 = inttoptr i64 %3298 to i64*
  %3302 = load i64, i64* %3301
  store i64 %3302, i64* %RDX, align 8, !tbaa !2428
  %3303 = load i64, i64* %RBP
  %3304 = sub i64 %3303, 28
  %3305 = load i64, i64* %PC
  %3306 = add i64 %3305, 3
  store i64 %3306, i64* %PC
  %3307 = inttoptr i64 %3304 to i32*
  %3308 = load i32, i32* %3307
  %3309 = zext i32 %3308 to i64
  store i64 %3309, i64* %RCX, align 8, !tbaa !2428
  %3310 = load i64, i64* %RCX
  %3311 = load i64, i64* %PC
  %3312 = add i64 %3311, 3
  store i64 %3312, i64* %PC
  %3313 = trunc i64 %3310 to i32
  %3314 = add i32 7, %3313
  %3315 = zext i32 %3314 to i64
  store i64 %3315, i64* %RCX, align 8, !tbaa !2428
  %3316 = icmp ult i32 %3314, %3313
  %3317 = icmp ult i32 %3314, 7
  %3318 = or i1 %3316, %3317
  %3319 = zext i1 %3318 to i8
  %3320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3319, i8* %3320, align 1, !tbaa !2432
  %3321 = and i32 %3314, 255
  %3322 = call i32 @llvm.ctpop.i32(i32 %3321) #17
  %3323 = trunc i32 %3322 to i8
  %3324 = and i8 %3323, 1
  %3325 = xor i8 %3324, 1
  %3326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3325, i8* %3326, align 1, !tbaa !2446
  %3327 = xor i64 7, %3310
  %3328 = trunc i64 %3327 to i32
  %3329 = xor i32 %3328, %3314
  %3330 = lshr i32 %3329, 4
  %3331 = trunc i32 %3330 to i8
  %3332 = and i8 %3331, 1
  %3333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3332, i8* %3333, align 1, !tbaa !2447
  %3334 = icmp eq i32 %3314, 0
  %3335 = zext i1 %3334 to i8
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3335, i8* %3336, align 1, !tbaa !2448
  %3337 = lshr i32 %3314, 31
  %3338 = trunc i32 %3337 to i8
  %3339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3338, i8* %3339, align 1, !tbaa !2449
  %3340 = lshr i32 %3313, 31
  %3341 = xor i32 %3337, %3340
  %3342 = add nuw nsw i32 %3341, %3337
  %3343 = icmp eq i32 %3342, 2
  %3344 = zext i1 %3343 to i8
  %3345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3344, i8* %3345, align 1, !tbaa !2450
  %3346 = load i32, i32* %ECX
  %3347 = zext i32 %3346 to i64
  %3348 = load i64, i64* %PC
  %3349 = add i64 %3348, 3
  store i64 %3349, i64* %PC
  %3350 = shl i64 %3347, 32
  %3351 = ashr exact i64 %3350, 32
  store i64 %3351, i64* %RSI, align 8, !tbaa !2428
  %3352 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3353 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3354 = load i64, i64* %RDX
  %3355 = load i64, i64* %RSI
  %3356 = mul i64 %3355, 8
  %3357 = add i64 %3356, %3354
  %3358 = load i64, i64* %PC
  %3359 = add i64 %3358, 5
  store i64 %3359, i64* %PC
  %3360 = bitcast i8* %3353 to double*
  %3361 = load double, double* %3360, align 1
  %3362 = getelementptr inbounds i8, i8* %3353, i64 8
  %3363 = bitcast i8* %3362 to i64*
  %3364 = load i64, i64* %3363, align 1
  %3365 = inttoptr i64 %3357 to double*
  %3366 = load double, double* %3365
  %3367 = fsub double %3361, %3366
  %3368 = bitcast i8* %3352 to double*
  store double %3367, double* %3368, align 1, !tbaa !2452
  %3369 = getelementptr inbounds i8, i8* %3352, i64 8
  %3370 = bitcast i8* %3369 to i64*
  store i64 %3364, i64* %3370, align 1, !tbaa !2452
  %3371 = load i64, i64* %RBP
  %3372 = sub i64 %3371, 152
  %3373 = bitcast %union.vec128_t* %XMM1 to i8*
  %3374 = load i64, i64* %PC
  %3375 = add i64 %3374, 8
  store i64 %3375, i64* %PC
  %3376 = bitcast i8* %3373 to double*
  %3377 = load double, double* %3376, align 1
  %3378 = inttoptr i64 %3372 to double*
  store double %3377, double* %3378
  %3379 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3380 = load i64, i64* %RBP
  %3381 = sub i64 %3380, 96
  %3382 = load i64, i64* %PC
  %3383 = add i64 %3382, 5
  store i64 %3383, i64* %PC
  %3384 = inttoptr i64 %3381 to double*
  %3385 = load double, double* %3384
  %3386 = bitcast i8* %3379 to double*
  store double %3385, double* %3386, align 1, !tbaa !2452
  %3387 = getelementptr inbounds i8, i8* %3379, i64 8
  %3388 = bitcast i8* %3387 to double*
  store double 0.000000e+00, double* %3388, align 1, !tbaa !2452
  %3389 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3390 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3391 = load i64, i64* %RBP
  %3392 = sub i64 %3391, 128
  %3393 = load i64, i64* %PC
  %3394 = add i64 %3393, 5
  store i64 %3394, i64* %PC
  %3395 = bitcast i8* %3390 to double*
  %3396 = load double, double* %3395, align 1
  %3397 = getelementptr inbounds i8, i8* %3390, i64 8
  %3398 = bitcast i8* %3397 to i64*
  %3399 = load i64, i64* %3398, align 1
  %3400 = inttoptr i64 %3392 to double*
  %3401 = load double, double* %3400
  %3402 = fadd double %3396, %3401
  %3403 = bitcast i8* %3389 to double*
  store double %3402, double* %3403, align 1, !tbaa !2452
  %3404 = getelementptr inbounds i8, i8* %3389, i64 8
  %3405 = bitcast i8* %3404 to i64*
  store i64 %3399, i64* %3405, align 1, !tbaa !2452
  %3406 = load i64, i64* %RBP
  %3407 = sub i64 %3406, 16
  %3408 = load i64, i64* %PC
  %3409 = add i64 %3408, 4
  store i64 %3409, i64* %PC
  %3410 = inttoptr i64 %3407 to i64*
  %3411 = load i64, i64* %3410
  store i64 %3411, i64* %RDX, align 8, !tbaa !2428
  %3412 = load i64, i64* %RBP
  %3413 = sub i64 %3412, 28
  %3414 = load i64, i64* %PC
  %3415 = add i64 %3414, 4
  store i64 %3415, i64* %PC
  %3416 = inttoptr i64 %3413 to i32*
  %3417 = load i32, i32* %3416
  %3418 = sext i32 %3417 to i64
  store i64 %3418, i64* %RSI, align 8, !tbaa !2428
  %3419 = load i64, i64* %RDX
  %3420 = load i64, i64* %RSI
  %3421 = mul i64 %3420, 8
  %3422 = add i64 %3421, %3419
  %3423 = bitcast %union.vec128_t* %XMM1 to i8*
  %3424 = load i64, i64* %PC
  %3425 = add i64 %3424, 5
  store i64 %3425, i64* %PC
  %3426 = bitcast i8* %3423 to double*
  %3427 = load double, double* %3426, align 1
  %3428 = inttoptr i64 %3422 to double*
  store double %3427, double* %3428
  %3429 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3430 = load i64, i64* %RBP
  %3431 = sub i64 %3430, 104
  %3432 = load i64, i64* %PC
  %3433 = add i64 %3432, 5
  store i64 %3433, i64* %PC
  %3434 = inttoptr i64 %3431 to double*
  %3435 = load double, double* %3434
  %3436 = bitcast i8* %3429 to double*
  store double %3435, double* %3436, align 1, !tbaa !2452
  %3437 = getelementptr inbounds i8, i8* %3429, i64 8
  %3438 = bitcast i8* %3437 to double*
  store double 0.000000e+00, double* %3438, align 1, !tbaa !2452
  %3439 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3440 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3441 = load i64, i64* %RBP
  %3442 = sub i64 %3441, 136
  %3443 = load i64, i64* %PC
  %3444 = add i64 %3443, 8
  store i64 %3444, i64* %PC
  %3445 = bitcast i8* %3440 to double*
  %3446 = load double, double* %3445, align 1
  %3447 = getelementptr inbounds i8, i8* %3440, i64 8
  %3448 = bitcast i8* %3447 to i64*
  %3449 = load i64, i64* %3448, align 1
  %3450 = inttoptr i64 %3442 to double*
  %3451 = load double, double* %3450
  %3452 = fadd double %3446, %3451
  %3453 = bitcast i8* %3439 to double*
  store double %3452, double* %3453, align 1, !tbaa !2452
  %3454 = getelementptr inbounds i8, i8* %3439, i64 8
  %3455 = bitcast i8* %3454 to i64*
  store i64 %3449, i64* %3455, align 1, !tbaa !2452
  %3456 = load i64, i64* %RBP
  %3457 = sub i64 %3456, 16
  %3458 = load i64, i64* %PC
  %3459 = add i64 %3458, 4
  store i64 %3459, i64* %PC
  %3460 = inttoptr i64 %3457 to i64*
  %3461 = load i64, i64* %3460
  store i64 %3461, i64* %RDX, align 8, !tbaa !2428
  %3462 = load i64, i64* %RBP
  %3463 = sub i64 %3462, 28
  %3464 = load i64, i64* %PC
  %3465 = add i64 %3464, 3
  store i64 %3465, i64* %PC
  %3466 = inttoptr i64 %3463 to i32*
  %3467 = load i32, i32* %3466
  %3468 = zext i32 %3467 to i64
  store i64 %3468, i64* %RCX, align 8, !tbaa !2428
  %3469 = load i64, i64* %RCX
  %3470 = load i64, i64* %PC
  %3471 = add i64 %3470, 3
  store i64 %3471, i64* %PC
  %3472 = trunc i64 %3469 to i32
  %3473 = add i32 1, %3472
  %3474 = zext i32 %3473 to i64
  store i64 %3474, i64* %RCX, align 8, !tbaa !2428
  %3475 = icmp ult i32 %3473, %3472
  %3476 = icmp ult i32 %3473, 1
  %3477 = or i1 %3475, %3476
  %3478 = zext i1 %3477 to i8
  %3479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3478, i8* %3479, align 1, !tbaa !2432
  %3480 = and i32 %3473, 255
  %3481 = call i32 @llvm.ctpop.i32(i32 %3480) #17
  %3482 = trunc i32 %3481 to i8
  %3483 = and i8 %3482, 1
  %3484 = xor i8 %3483, 1
  %3485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3484, i8* %3485, align 1, !tbaa !2446
  %3486 = xor i64 1, %3469
  %3487 = trunc i64 %3486 to i32
  %3488 = xor i32 %3487, %3473
  %3489 = lshr i32 %3488, 4
  %3490 = trunc i32 %3489 to i8
  %3491 = and i8 %3490, 1
  %3492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3491, i8* %3492, align 1, !tbaa !2447
  %3493 = icmp eq i32 %3473, 0
  %3494 = zext i1 %3493 to i8
  %3495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3494, i8* %3495, align 1, !tbaa !2448
  %3496 = lshr i32 %3473, 31
  %3497 = trunc i32 %3496 to i8
  %3498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3497, i8* %3498, align 1, !tbaa !2449
  %3499 = lshr i32 %3472, 31
  %3500 = xor i32 %3496, %3499
  %3501 = add nuw nsw i32 %3500, %3496
  %3502 = icmp eq i32 %3501, 2
  %3503 = zext i1 %3502 to i8
  %3504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3503, i8* %3504, align 1, !tbaa !2450
  %3505 = load i32, i32* %ECX
  %3506 = zext i32 %3505 to i64
  %3507 = load i64, i64* %PC
  %3508 = add i64 %3507, 3
  store i64 %3508, i64* %PC
  %3509 = shl i64 %3506, 32
  %3510 = ashr exact i64 %3509, 32
  store i64 %3510, i64* %RSI, align 8, !tbaa !2428
  %3511 = load i64, i64* %RDX
  %3512 = load i64, i64* %RSI
  %3513 = mul i64 %3512, 8
  %3514 = add i64 %3513, %3511
  %3515 = bitcast %union.vec128_t* %XMM1 to i8*
  %3516 = load i64, i64* %PC
  %3517 = add i64 %3516, 5
  store i64 %3517, i64* %PC
  %3518 = bitcast i8* %3515 to double*
  %3519 = load double, double* %3518, align 1
  %3520 = inttoptr i64 %3514 to double*
  store double %3519, double* %3520
  %3521 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3522 = load i64, i64* %RBP
  %3523 = sub i64 %3522, 128
  %3524 = load i64, i64* %PC
  %3525 = add i64 %3524, 5
  store i64 %3525, i64* %PC
  %3526 = inttoptr i64 %3523 to double*
  %3527 = load double, double* %3526
  %3528 = bitcast i8* %3521 to double*
  store double %3527, double* %3528, align 1, !tbaa !2452
  %3529 = getelementptr inbounds i8, i8* %3521, i64 8
  %3530 = bitcast i8* %3529 to double*
  store double 0.000000e+00, double* %3530, align 1, !tbaa !2452
  %3531 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3532 = load i64, i64* %RBP
  %3533 = sub i64 %3532, 96
  %3534 = load i64, i64* %PC
  %3535 = add i64 %3534, 5
  store i64 %3535, i64* %PC
  %3536 = inttoptr i64 %3533 to double*
  %3537 = load double, double* %3536
  %3538 = bitcast i8* %3531 to double*
  store double %3537, double* %3538, align 1, !tbaa !2452
  %3539 = getelementptr inbounds i8, i8* %3531, i64 8
  %3540 = bitcast i8* %3539 to double*
  store double 0.000000e+00, double* %3540, align 1, !tbaa !2452
  %3541 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3542 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3543 = bitcast %union.vec128_t* %XMM1 to i8*
  %3544 = load i64, i64* %PC
  %3545 = add i64 %3544, 4
  store i64 %3545, i64* %PC
  %3546 = bitcast i8* %3542 to double*
  %3547 = load double, double* %3546, align 1
  %3548 = getelementptr inbounds i8, i8* %3542, i64 8
  %3549 = bitcast i8* %3548 to i64*
  %3550 = load i64, i64* %3549, align 1
  %3551 = bitcast i8* %3543 to double*
  %3552 = load double, double* %3551, align 1
  %3553 = fsub double %3547, %3552
  %3554 = bitcast i8* %3541 to double*
  store double %3553, double* %3554, align 1, !tbaa !2452
  %3555 = getelementptr inbounds i8, i8* %3541, i64 8
  %3556 = bitcast i8* %3555 to i64*
  store i64 %3550, i64* %3556, align 1, !tbaa !2452
  %3557 = load i64, i64* %RBP
  %3558 = sub i64 %3557, 96
  %3559 = bitcast %union.vec128_t* %XMM2 to i8*
  %3560 = load i64, i64* %PC
  %3561 = add i64 %3560, 5
  store i64 %3561, i64* %PC
  %3562 = bitcast i8* %3559 to double*
  %3563 = load double, double* %3562, align 1
  %3564 = inttoptr i64 %3558 to double*
  store double %3563, double* %3564
  %3565 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3566 = load i64, i64* %RBP
  %3567 = sub i64 %3566, 136
  %3568 = load i64, i64* %PC
  %3569 = add i64 %3568, 8
  store i64 %3569, i64* %PC
  %3570 = inttoptr i64 %3567 to double*
  %3571 = load double, double* %3570
  %3572 = bitcast i8* %3565 to double*
  store double %3571, double* %3572, align 1, !tbaa !2452
  %3573 = getelementptr inbounds i8, i8* %3565, i64 8
  %3574 = bitcast i8* %3573 to double*
  store double 0.000000e+00, double* %3574, align 1, !tbaa !2452
  %3575 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3576 = load i64, i64* %RBP
  %3577 = sub i64 %3576, 104
  %3578 = load i64, i64* %PC
  %3579 = add i64 %3578, 5
  store i64 %3579, i64* %PC
  %3580 = inttoptr i64 %3577 to double*
  %3581 = load double, double* %3580
  %3582 = bitcast i8* %3575 to double*
  store double %3581, double* %3582, align 1, !tbaa !2452
  %3583 = getelementptr inbounds i8, i8* %3575, i64 8
  %3584 = bitcast i8* %3583 to double*
  store double 0.000000e+00, double* %3584, align 1, !tbaa !2452
  %3585 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3586 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3587 = bitcast %union.vec128_t* %XMM1 to i8*
  %3588 = load i64, i64* %PC
  %3589 = add i64 %3588, 4
  store i64 %3589, i64* %PC
  %3590 = bitcast i8* %3586 to double*
  %3591 = load double, double* %3590, align 1
  %3592 = getelementptr inbounds i8, i8* %3586, i64 8
  %3593 = bitcast i8* %3592 to i64*
  %3594 = load i64, i64* %3593, align 1
  %3595 = bitcast i8* %3587 to double*
  %3596 = load double, double* %3595, align 1
  %3597 = fsub double %3591, %3596
  %3598 = bitcast i8* %3585 to double*
  store double %3597, double* %3598, align 1, !tbaa !2452
  %3599 = getelementptr inbounds i8, i8* %3585, i64 8
  %3600 = bitcast i8* %3599 to i64*
  store i64 %3594, i64* %3600, align 1, !tbaa !2452
  %3601 = load i64, i64* %RBP
  %3602 = sub i64 %3601, 104
  %3603 = bitcast %union.vec128_t* %XMM2 to i8*
  %3604 = load i64, i64* %PC
  %3605 = add i64 %3604, 5
  store i64 %3605, i64* %PC
  %3606 = bitcast i8* %3603 to double*
  %3607 = load double, double* %3606, align 1
  %3608 = inttoptr i64 %3602 to double*
  store double %3607, double* %3608
  %3609 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3610 = load i64, i64* %RBP
  %3611 = sub i64 %3610, 64
  %3612 = load i64, i64* %PC
  %3613 = add i64 %3612, 5
  store i64 %3613, i64* %PC
  %3614 = inttoptr i64 %3611 to double*
  %3615 = load double, double* %3614
  %3616 = bitcast i8* %3609 to double*
  store double %3615, double* %3616, align 1, !tbaa !2452
  %3617 = getelementptr inbounds i8, i8* %3609, i64 8
  %3618 = bitcast i8* %3617 to double*
  store double 0.000000e+00, double* %3618, align 1, !tbaa !2452
  %3619 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3620 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3621 = load i64, i64* %RBP
  %3622 = sub i64 %3621, 96
  %3623 = load i64, i64* %PC
  %3624 = add i64 %3623, 5
  store i64 %3624, i64* %PC
  %3625 = bitcast i8* %3620 to double*
  %3626 = load double, double* %3625, align 1
  %3627 = getelementptr inbounds i8, i8* %3620, i64 8
  %3628 = bitcast i8* %3627 to i64*
  %3629 = load i64, i64* %3628, align 1
  %3630 = inttoptr i64 %3622 to double*
  %3631 = load double, double* %3630
  %3632 = fmul double %3626, %3631
  %3633 = bitcast i8* %3619 to double*
  store double %3632, double* %3633, align 1, !tbaa !2452
  %3634 = getelementptr inbounds i8, i8* %3619, i64 8
  %3635 = bitcast i8* %3634 to i64*
  store i64 %3629, i64* %3635, align 1, !tbaa !2452
  %3636 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3637 = load i64, i64* %RBP
  %3638 = sub i64 %3637, 72
  %3639 = load i64, i64* %PC
  %3640 = add i64 %3639, 5
  store i64 %3640, i64* %PC
  %3641 = inttoptr i64 %3638 to double*
  %3642 = load double, double* %3641
  %3643 = bitcast i8* %3636 to double*
  store double %3642, double* %3643, align 1, !tbaa !2452
  %3644 = getelementptr inbounds i8, i8* %3636, i64 8
  %3645 = bitcast i8* %3644 to double*
  store double 0.000000e+00, double* %3645, align 1, !tbaa !2452
  %3646 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3647 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3648 = load i64, i64* %RBP
  %3649 = sub i64 %3648, 104
  %3650 = load i64, i64* %PC
  %3651 = add i64 %3650, 5
  store i64 %3651, i64* %PC
  %3652 = bitcast i8* %3647 to double*
  %3653 = load double, double* %3652, align 1
  %3654 = getelementptr inbounds i8, i8* %3647, i64 8
  %3655 = bitcast i8* %3654 to i64*
  %3656 = load i64, i64* %3655, align 1
  %3657 = inttoptr i64 %3649 to double*
  %3658 = load double, double* %3657
  %3659 = fmul double %3653, %3658
  %3660 = bitcast i8* %3646 to double*
  store double %3659, double* %3660, align 1, !tbaa !2452
  %3661 = getelementptr inbounds i8, i8* %3646, i64 8
  %3662 = bitcast i8* %3661 to i64*
  store i64 %3656, i64* %3662, align 1, !tbaa !2452
  %3663 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3664 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3665 = bitcast %union.vec128_t* %XMM2 to i8*
  %3666 = load i64, i64* %PC
  %3667 = add i64 %3666, 4
  store i64 %3667, i64* %PC
  %3668 = bitcast i8* %3664 to double*
  %3669 = load double, double* %3668, align 1
  %3670 = getelementptr inbounds i8, i8* %3664, i64 8
  %3671 = bitcast i8* %3670 to i64*
  %3672 = load i64, i64* %3671, align 1
  %3673 = bitcast i8* %3665 to double*
  %3674 = load double, double* %3673, align 1
  %3675 = fsub double %3669, %3674
  %3676 = bitcast i8* %3663 to double*
  store double %3675, double* %3676, align 1, !tbaa !2452
  %3677 = getelementptr inbounds i8, i8* %3663, i64 8
  %3678 = bitcast i8* %3677 to i64*
  store i64 %3672, i64* %3678, align 1, !tbaa !2452
  %3679 = load i64, i64* %RBP
  %3680 = sub i64 %3679, 16
  %3681 = load i64, i64* %PC
  %3682 = add i64 %3681, 4
  store i64 %3682, i64* %PC
  %3683 = inttoptr i64 %3680 to i64*
  %3684 = load i64, i64* %3683
  store i64 %3684, i64* %RDX, align 8, !tbaa !2428
  %3685 = load i64, i64* %RBP
  %3686 = sub i64 %3685, 28
  %3687 = load i64, i64* %PC
  %3688 = add i64 %3687, 3
  store i64 %3688, i64* %PC
  %3689 = inttoptr i64 %3686 to i32*
  %3690 = load i32, i32* %3689
  %3691 = zext i32 %3690 to i64
  store i64 %3691, i64* %RCX, align 8, !tbaa !2428
  %3692 = load i64, i64* %RCX
  %3693 = load i64, i64* %PC
  %3694 = add i64 %3693, 3
  store i64 %3694, i64* %PC
  %3695 = trunc i64 %3692 to i32
  %3696 = add i32 4, %3695
  %3697 = zext i32 %3696 to i64
  store i64 %3697, i64* %RCX, align 8, !tbaa !2428
  %3698 = icmp ult i32 %3696, %3695
  %3699 = icmp ult i32 %3696, 4
  %3700 = or i1 %3698, %3699
  %3701 = zext i1 %3700 to i8
  %3702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3701, i8* %3702, align 1, !tbaa !2432
  %3703 = and i32 %3696, 255
  %3704 = call i32 @llvm.ctpop.i32(i32 %3703) #17
  %3705 = trunc i32 %3704 to i8
  %3706 = and i8 %3705, 1
  %3707 = xor i8 %3706, 1
  %3708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3707, i8* %3708, align 1, !tbaa !2446
  %3709 = xor i64 4, %3692
  %3710 = trunc i64 %3709 to i32
  %3711 = xor i32 %3710, %3696
  %3712 = lshr i32 %3711, 4
  %3713 = trunc i32 %3712 to i8
  %3714 = and i8 %3713, 1
  %3715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3714, i8* %3715, align 1, !tbaa !2447
  %3716 = icmp eq i32 %3696, 0
  %3717 = zext i1 %3716 to i8
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3717, i8* %3718, align 1, !tbaa !2448
  %3719 = lshr i32 %3696, 31
  %3720 = trunc i32 %3719 to i8
  %3721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3720, i8* %3721, align 1, !tbaa !2449
  %3722 = lshr i32 %3695, 31
  %3723 = xor i32 %3719, %3722
  %3724 = add nuw nsw i32 %3723, %3719
  %3725 = icmp eq i32 %3724, 2
  %3726 = zext i1 %3725 to i8
  %3727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3726, i8* %3727, align 1, !tbaa !2450
  %3728 = load i32, i32* %ECX
  %3729 = zext i32 %3728 to i64
  %3730 = load i64, i64* %PC
  %3731 = add i64 %3730, 3
  store i64 %3731, i64* %PC
  %3732 = shl i64 %3729, 32
  %3733 = ashr exact i64 %3732, 32
  store i64 %3733, i64* %RSI, align 8, !tbaa !2428
  %3734 = load i64, i64* %RDX
  %3735 = load i64, i64* %RSI
  %3736 = mul i64 %3735, 8
  %3737 = add i64 %3736, %3734
  %3738 = bitcast %union.vec128_t* %XMM1 to i8*
  %3739 = load i64, i64* %PC
  %3740 = add i64 %3739, 5
  store i64 %3740, i64* %PC
  %3741 = bitcast i8* %3738 to double*
  %3742 = load double, double* %3741, align 1
  %3743 = inttoptr i64 %3737 to double*
  store double %3742, double* %3743
  %3744 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3745 = load i64, i64* %RBP
  %3746 = sub i64 %3745, 64
  %3747 = load i64, i64* %PC
  %3748 = add i64 %3747, 5
  store i64 %3748, i64* %PC
  %3749 = inttoptr i64 %3746 to double*
  %3750 = load double, double* %3749
  %3751 = bitcast i8* %3744 to double*
  store double %3750, double* %3751, align 1, !tbaa !2452
  %3752 = getelementptr inbounds i8, i8* %3744, i64 8
  %3753 = bitcast i8* %3752 to double*
  store double 0.000000e+00, double* %3753, align 1, !tbaa !2452
  %3754 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3755 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3756 = load i64, i64* %RBP
  %3757 = sub i64 %3756, 104
  %3758 = load i64, i64* %PC
  %3759 = add i64 %3758, 5
  store i64 %3759, i64* %PC
  %3760 = bitcast i8* %3755 to double*
  %3761 = load double, double* %3760, align 1
  %3762 = getelementptr inbounds i8, i8* %3755, i64 8
  %3763 = bitcast i8* %3762 to i64*
  %3764 = load i64, i64* %3763, align 1
  %3765 = inttoptr i64 %3757 to double*
  %3766 = load double, double* %3765
  %3767 = fmul double %3761, %3766
  %3768 = bitcast i8* %3754 to double*
  store double %3767, double* %3768, align 1, !tbaa !2452
  %3769 = getelementptr inbounds i8, i8* %3754, i64 8
  %3770 = bitcast i8* %3769 to i64*
  store i64 %3764, i64* %3770, align 1, !tbaa !2452
  %3771 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3772 = load i64, i64* %RBP
  %3773 = sub i64 %3772, 72
  %3774 = load i64, i64* %PC
  %3775 = add i64 %3774, 5
  store i64 %3775, i64* %PC
  %3776 = inttoptr i64 %3773 to double*
  %3777 = load double, double* %3776
  %3778 = bitcast i8* %3771 to double*
  store double %3777, double* %3778, align 1, !tbaa !2452
  %3779 = getelementptr inbounds i8, i8* %3771, i64 8
  %3780 = bitcast i8* %3779 to double*
  store double 0.000000e+00, double* %3780, align 1, !tbaa !2452
  %3781 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3782 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3783 = load i64, i64* %RBP
  %3784 = sub i64 %3783, 96
  %3785 = load i64, i64* %PC
  %3786 = add i64 %3785, 5
  store i64 %3786, i64* %PC
  %3787 = bitcast i8* %3782 to double*
  %3788 = load double, double* %3787, align 1
  %3789 = getelementptr inbounds i8, i8* %3782, i64 8
  %3790 = bitcast i8* %3789 to i64*
  %3791 = load i64, i64* %3790, align 1
  %3792 = inttoptr i64 %3784 to double*
  %3793 = load double, double* %3792
  %3794 = fmul double %3788, %3793
  %3795 = bitcast i8* %3781 to double*
  store double %3794, double* %3795, align 1, !tbaa !2452
  %3796 = getelementptr inbounds i8, i8* %3781, i64 8
  %3797 = bitcast i8* %3796 to i64*
  store i64 %3791, i64* %3797, align 1, !tbaa !2452
  %3798 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3799 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3800 = bitcast %union.vec128_t* %XMM2 to i8*
  %3801 = load i64, i64* %PC
  %3802 = add i64 %3801, 4
  store i64 %3802, i64* %PC
  %3803 = bitcast i8* %3799 to double*
  %3804 = load double, double* %3803, align 1
  %3805 = getelementptr inbounds i8, i8* %3799, i64 8
  %3806 = bitcast i8* %3805 to i64*
  %3807 = load i64, i64* %3806, align 1
  %3808 = bitcast i8* %3800 to double*
  %3809 = load double, double* %3808, align 1
  %3810 = fadd double %3804, %3809
  %3811 = bitcast i8* %3798 to double*
  store double %3810, double* %3811, align 1, !tbaa !2452
  %3812 = getelementptr inbounds i8, i8* %3798, i64 8
  %3813 = bitcast i8* %3812 to i64*
  store i64 %3807, i64* %3813, align 1, !tbaa !2452
  %3814 = load i64, i64* %RBP
  %3815 = sub i64 %3814, 16
  %3816 = load i64, i64* %PC
  %3817 = add i64 %3816, 4
  store i64 %3817, i64* %PC
  %3818 = inttoptr i64 %3815 to i64*
  %3819 = load i64, i64* %3818
  store i64 %3819, i64* %RDX, align 8, !tbaa !2428
  %3820 = load i64, i64* %RBP
  %3821 = sub i64 %3820, 28
  %3822 = load i64, i64* %PC
  %3823 = add i64 %3822, 3
  store i64 %3823, i64* %PC
  %3824 = inttoptr i64 %3821 to i32*
  %3825 = load i32, i32* %3824
  %3826 = zext i32 %3825 to i64
  store i64 %3826, i64* %RCX, align 8, !tbaa !2428
  %3827 = load i64, i64* %RCX
  %3828 = load i64, i64* %PC
  %3829 = add i64 %3828, 3
  store i64 %3829, i64* %PC
  %3830 = trunc i64 %3827 to i32
  %3831 = add i32 5, %3830
  %3832 = zext i32 %3831 to i64
  store i64 %3832, i64* %RCX, align 8, !tbaa !2428
  %3833 = icmp ult i32 %3831, %3830
  %3834 = icmp ult i32 %3831, 5
  %3835 = or i1 %3833, %3834
  %3836 = zext i1 %3835 to i8
  %3837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3836, i8* %3837, align 1, !tbaa !2432
  %3838 = and i32 %3831, 255
  %3839 = call i32 @llvm.ctpop.i32(i32 %3838) #17
  %3840 = trunc i32 %3839 to i8
  %3841 = and i8 %3840, 1
  %3842 = xor i8 %3841, 1
  %3843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3842, i8* %3843, align 1, !tbaa !2446
  %3844 = xor i64 5, %3827
  %3845 = trunc i64 %3844 to i32
  %3846 = xor i32 %3845, %3831
  %3847 = lshr i32 %3846, 4
  %3848 = trunc i32 %3847 to i8
  %3849 = and i8 %3848, 1
  %3850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3849, i8* %3850, align 1, !tbaa !2447
  %3851 = icmp eq i32 %3831, 0
  %3852 = zext i1 %3851 to i8
  %3853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3852, i8* %3853, align 1, !tbaa !2448
  %3854 = lshr i32 %3831, 31
  %3855 = trunc i32 %3854 to i8
  %3856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3855, i8* %3856, align 1, !tbaa !2449
  %3857 = lshr i32 %3830, 31
  %3858 = xor i32 %3854, %3857
  %3859 = add nuw nsw i32 %3858, %3854
  %3860 = icmp eq i32 %3859, 2
  %3861 = zext i1 %3860 to i8
  %3862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3861, i8* %3862, align 1, !tbaa !2450
  %3863 = load i32, i32* %ECX
  %3864 = zext i32 %3863 to i64
  %3865 = load i64, i64* %PC
  %3866 = add i64 %3865, 3
  store i64 %3866, i64* %PC
  %3867 = shl i64 %3864, 32
  %3868 = ashr exact i64 %3867, 32
  store i64 %3868, i64* %RSI, align 8, !tbaa !2428
  %3869 = load i64, i64* %RDX
  %3870 = load i64, i64* %RSI
  %3871 = mul i64 %3870, 8
  %3872 = add i64 %3871, %3869
  %3873 = bitcast %union.vec128_t* %XMM1 to i8*
  %3874 = load i64, i64* %PC
  %3875 = add i64 %3874, 5
  store i64 %3875, i64* %PC
  %3876 = bitcast i8* %3873 to double*
  %3877 = load double, double* %3876, align 1
  %3878 = inttoptr i64 %3872 to double*
  store double %3877, double* %3878
  %3879 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3880 = load i64, i64* %RBP
  %3881 = sub i64 %3880, 112
  %3882 = load i64, i64* %PC
  %3883 = add i64 %3882, 5
  store i64 %3883, i64* %PC
  %3884 = inttoptr i64 %3881 to double*
  %3885 = load double, double* %3884
  %3886 = bitcast i8* %3879 to double*
  store double %3885, double* %3886, align 1, !tbaa !2452
  %3887 = getelementptr inbounds i8, i8* %3879, i64 8
  %3888 = bitcast i8* %3887 to double*
  store double 0.000000e+00, double* %3888, align 1, !tbaa !2452
  %3889 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3890 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3891 = load i64, i64* %RBP
  %3892 = sub i64 %3891, 152
  %3893 = load i64, i64* %PC
  %3894 = add i64 %3893, 8
  store i64 %3894, i64* %PC
  %3895 = bitcast i8* %3890 to double*
  %3896 = load double, double* %3895, align 1
  %3897 = getelementptr inbounds i8, i8* %3890, i64 8
  %3898 = bitcast i8* %3897 to i64*
  %3899 = load i64, i64* %3898, align 1
  %3900 = inttoptr i64 %3892 to double*
  %3901 = load double, double* %3900
  %3902 = fsub double %3896, %3901
  %3903 = bitcast i8* %3889 to double*
  store double %3902, double* %3903, align 1, !tbaa !2452
  %3904 = getelementptr inbounds i8, i8* %3889, i64 8
  %3905 = bitcast i8* %3904 to i64*
  store i64 %3899, i64* %3905, align 1, !tbaa !2452
  %3906 = load i64, i64* %RBP
  %3907 = sub i64 %3906, 96
  %3908 = bitcast %union.vec128_t* %XMM1 to i8*
  %3909 = load i64, i64* %PC
  %3910 = add i64 %3909, 5
  store i64 %3910, i64* %PC
  %3911 = bitcast i8* %3908 to double*
  %3912 = load double, double* %3911, align 1
  %3913 = inttoptr i64 %3907 to double*
  store double %3912, double* %3913
  %3914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3915 = load i64, i64* %RBP
  %3916 = sub i64 %3915, 120
  %3917 = load i64, i64* %PC
  %3918 = add i64 %3917, 5
  store i64 %3918, i64* %PC
  %3919 = inttoptr i64 %3916 to double*
  %3920 = load double, double* %3919
  %3921 = bitcast i8* %3914 to double*
  store double %3920, double* %3921, align 1, !tbaa !2452
  %3922 = getelementptr inbounds i8, i8* %3914, i64 8
  %3923 = bitcast i8* %3922 to double*
  store double 0.000000e+00, double* %3923, align 1, !tbaa !2452
  %3924 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3925 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3926 = load i64, i64* %RBP
  %3927 = sub i64 %3926, 144
  %3928 = load i64, i64* %PC
  %3929 = add i64 %3928, 8
  store i64 %3929, i64* %PC
  %3930 = bitcast i8* %3925 to double*
  %3931 = load double, double* %3930, align 1
  %3932 = getelementptr inbounds i8, i8* %3925, i64 8
  %3933 = bitcast i8* %3932 to i64*
  %3934 = load i64, i64* %3933, align 1
  %3935 = inttoptr i64 %3927 to double*
  %3936 = load double, double* %3935
  %3937 = fadd double %3931, %3936
  %3938 = bitcast i8* %3924 to double*
  store double %3937, double* %3938, align 1, !tbaa !2452
  %3939 = getelementptr inbounds i8, i8* %3924, i64 8
  %3940 = bitcast i8* %3939 to i64*
  store i64 %3934, i64* %3940, align 1, !tbaa !2452
  %3941 = load i64, i64* %RBP
  %3942 = sub i64 %3941, 104
  %3943 = bitcast %union.vec128_t* %XMM1 to i8*
  %3944 = load i64, i64* %PC
  %3945 = add i64 %3944, 5
  store i64 %3945, i64* %PC
  %3946 = bitcast i8* %3943 to double*
  %3947 = load double, double* %3946, align 1
  %3948 = inttoptr i64 %3942 to double*
  store double %3947, double* %3948
  %3949 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3950 = load i64, i64* %RBP
  %3951 = sub i64 %3950, 48
  %3952 = load i64, i64* %PC
  %3953 = add i64 %3952, 5
  store i64 %3953, i64* %PC
  %3954 = inttoptr i64 %3951 to double*
  %3955 = load double, double* %3954
  %3956 = bitcast i8* %3949 to double*
  store double %3955, double* %3956, align 1, !tbaa !2452
  %3957 = getelementptr inbounds i8, i8* %3949, i64 8
  %3958 = bitcast i8* %3957 to double*
  store double 0.000000e+00, double* %3958, align 1, !tbaa !2452
  %3959 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3960 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3961 = load i64, i64* %RBP
  %3962 = sub i64 %3961, 96
  %3963 = load i64, i64* %PC
  %3964 = add i64 %3963, 5
  store i64 %3964, i64* %PC
  %3965 = bitcast i8* %3960 to double*
  %3966 = load double, double* %3965, align 1
  %3967 = getelementptr inbounds i8, i8* %3960, i64 8
  %3968 = bitcast i8* %3967 to i64*
  %3969 = load i64, i64* %3968, align 1
  %3970 = inttoptr i64 %3962 to double*
  %3971 = load double, double* %3970
  %3972 = fmul double %3966, %3971
  %3973 = bitcast i8* %3959 to double*
  store double %3972, double* %3973, align 1, !tbaa !2452
  %3974 = getelementptr inbounds i8, i8* %3959, i64 8
  %3975 = bitcast i8* %3974 to i64*
  store i64 %3969, i64* %3975, align 1, !tbaa !2452
  %3976 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3977 = load i64, i64* %RBP
  %3978 = sub i64 %3977, 56
  %3979 = load i64, i64* %PC
  %3980 = add i64 %3979, 5
  store i64 %3980, i64* %PC
  %3981 = inttoptr i64 %3978 to double*
  %3982 = load double, double* %3981
  %3983 = bitcast i8* %3976 to double*
  store double %3982, double* %3983, align 1, !tbaa !2452
  %3984 = getelementptr inbounds i8, i8* %3976, i64 8
  %3985 = bitcast i8* %3984 to double*
  store double 0.000000e+00, double* %3985, align 1, !tbaa !2452
  %3986 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3987 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3988 = load i64, i64* %RBP
  %3989 = sub i64 %3988, 104
  %3990 = load i64, i64* %PC
  %3991 = add i64 %3990, 5
  store i64 %3991, i64* %PC
  %3992 = bitcast i8* %3987 to double*
  %3993 = load double, double* %3992, align 1
  %3994 = getelementptr inbounds i8, i8* %3987, i64 8
  %3995 = bitcast i8* %3994 to i64*
  %3996 = load i64, i64* %3995, align 1
  %3997 = inttoptr i64 %3989 to double*
  %3998 = load double, double* %3997
  %3999 = fmul double %3993, %3998
  %4000 = bitcast i8* %3986 to double*
  store double %3999, double* %4000, align 1, !tbaa !2452
  %4001 = getelementptr inbounds i8, i8* %3986, i64 8
  %4002 = bitcast i8* %4001 to i64*
  store i64 %3996, i64* %4002, align 1, !tbaa !2452
  %4003 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4004 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4005 = bitcast %union.vec128_t* %XMM2 to i8*
  %4006 = load i64, i64* %PC
  %4007 = add i64 %4006, 4
  store i64 %4007, i64* %PC
  %4008 = bitcast i8* %4004 to double*
  %4009 = load double, double* %4008, align 1
  %4010 = getelementptr inbounds i8, i8* %4004, i64 8
  %4011 = bitcast i8* %4010 to i64*
  %4012 = load i64, i64* %4011, align 1
  %4013 = bitcast i8* %4005 to double*
  %4014 = load double, double* %4013, align 1
  %4015 = fsub double %4009, %4014
  %4016 = bitcast i8* %4003 to double*
  store double %4015, double* %4016, align 1, !tbaa !2452
  %4017 = getelementptr inbounds i8, i8* %4003, i64 8
  %4018 = bitcast i8* %4017 to i64*
  store i64 %4012, i64* %4018, align 1, !tbaa !2452
  %4019 = load i64, i64* %RBP
  %4020 = sub i64 %4019, 16
  %4021 = load i64, i64* %PC
  %4022 = add i64 %4021, 4
  store i64 %4022, i64* %PC
  %4023 = inttoptr i64 %4020 to i64*
  %4024 = load i64, i64* %4023
  store i64 %4024, i64* %RDX, align 8, !tbaa !2428
  %4025 = load i64, i64* %RBP
  %4026 = sub i64 %4025, 28
  %4027 = load i64, i64* %PC
  %4028 = add i64 %4027, 3
  store i64 %4028, i64* %PC
  %4029 = inttoptr i64 %4026 to i32*
  %4030 = load i32, i32* %4029
  %4031 = zext i32 %4030 to i64
  store i64 %4031, i64* %RCX, align 8, !tbaa !2428
  %4032 = load i64, i64* %RCX
  %4033 = load i64, i64* %PC
  %4034 = add i64 %4033, 3
  store i64 %4034, i64* %PC
  %4035 = trunc i64 %4032 to i32
  %4036 = add i32 2, %4035
  %4037 = zext i32 %4036 to i64
  store i64 %4037, i64* %RCX, align 8, !tbaa !2428
  %4038 = icmp ult i32 %4036, %4035
  %4039 = icmp ult i32 %4036, 2
  %4040 = or i1 %4038, %4039
  %4041 = zext i1 %4040 to i8
  %4042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4041, i8* %4042, align 1, !tbaa !2432
  %4043 = and i32 %4036, 255
  %4044 = call i32 @llvm.ctpop.i32(i32 %4043) #17
  %4045 = trunc i32 %4044 to i8
  %4046 = and i8 %4045, 1
  %4047 = xor i8 %4046, 1
  %4048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4047, i8* %4048, align 1, !tbaa !2446
  %4049 = xor i64 2, %4032
  %4050 = trunc i64 %4049 to i32
  %4051 = xor i32 %4050, %4036
  %4052 = lshr i32 %4051, 4
  %4053 = trunc i32 %4052 to i8
  %4054 = and i8 %4053, 1
  %4055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4054, i8* %4055, align 1, !tbaa !2447
  %4056 = icmp eq i32 %4036, 0
  %4057 = zext i1 %4056 to i8
  %4058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4057, i8* %4058, align 1, !tbaa !2448
  %4059 = lshr i32 %4036, 31
  %4060 = trunc i32 %4059 to i8
  %4061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4060, i8* %4061, align 1, !tbaa !2449
  %4062 = lshr i32 %4035, 31
  %4063 = xor i32 %4059, %4062
  %4064 = add nuw nsw i32 %4063, %4059
  %4065 = icmp eq i32 %4064, 2
  %4066 = zext i1 %4065 to i8
  %4067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4066, i8* %4067, align 1, !tbaa !2450
  %4068 = load i32, i32* %ECX
  %4069 = zext i32 %4068 to i64
  %4070 = load i64, i64* %PC
  %4071 = add i64 %4070, 3
  store i64 %4071, i64* %PC
  %4072 = shl i64 %4069, 32
  %4073 = ashr exact i64 %4072, 32
  store i64 %4073, i64* %RSI, align 8, !tbaa !2428
  %4074 = load i64, i64* %RDX
  %4075 = load i64, i64* %RSI
  %4076 = mul i64 %4075, 8
  %4077 = add i64 %4076, %4074
  %4078 = bitcast %union.vec128_t* %XMM1 to i8*
  %4079 = load i64, i64* %PC
  %4080 = add i64 %4079, 5
  store i64 %4080, i64* %PC
  %4081 = bitcast i8* %4078 to double*
  %4082 = load double, double* %4081, align 1
  %4083 = inttoptr i64 %4077 to double*
  store double %4082, double* %4083
  %4084 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4085 = load i64, i64* %RBP
  %4086 = sub i64 %4085, 48
  %4087 = load i64, i64* %PC
  %4088 = add i64 %4087, 5
  store i64 %4088, i64* %PC
  %4089 = inttoptr i64 %4086 to double*
  %4090 = load double, double* %4089
  %4091 = bitcast i8* %4084 to double*
  store double %4090, double* %4091, align 1, !tbaa !2452
  %4092 = getelementptr inbounds i8, i8* %4084, i64 8
  %4093 = bitcast i8* %4092 to double*
  store double 0.000000e+00, double* %4093, align 1, !tbaa !2452
  %4094 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4095 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4096 = load i64, i64* %RBP
  %4097 = sub i64 %4096, 104
  %4098 = load i64, i64* %PC
  %4099 = add i64 %4098, 5
  store i64 %4099, i64* %PC
  %4100 = bitcast i8* %4095 to double*
  %4101 = load double, double* %4100, align 1
  %4102 = getelementptr inbounds i8, i8* %4095, i64 8
  %4103 = bitcast i8* %4102 to i64*
  %4104 = load i64, i64* %4103, align 1
  %4105 = inttoptr i64 %4097 to double*
  %4106 = load double, double* %4105
  %4107 = fmul double %4101, %4106
  %4108 = bitcast i8* %4094 to double*
  store double %4107, double* %4108, align 1, !tbaa !2452
  %4109 = getelementptr inbounds i8, i8* %4094, i64 8
  %4110 = bitcast i8* %4109 to i64*
  store i64 %4104, i64* %4110, align 1, !tbaa !2452
  %4111 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4112 = load i64, i64* %RBP
  %4113 = sub i64 %4112, 56
  %4114 = load i64, i64* %PC
  %4115 = add i64 %4114, 5
  store i64 %4115, i64* %PC
  %4116 = inttoptr i64 %4113 to double*
  %4117 = load double, double* %4116
  %4118 = bitcast i8* %4111 to double*
  store double %4117, double* %4118, align 1, !tbaa !2452
  %4119 = getelementptr inbounds i8, i8* %4111, i64 8
  %4120 = bitcast i8* %4119 to double*
  store double 0.000000e+00, double* %4120, align 1, !tbaa !2452
  %4121 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4122 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4123 = load i64, i64* %RBP
  %4124 = sub i64 %4123, 96
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 5
  store i64 %4126, i64* %PC
  %4127 = bitcast i8* %4122 to double*
  %4128 = load double, double* %4127, align 1
  %4129 = getelementptr inbounds i8, i8* %4122, i64 8
  %4130 = bitcast i8* %4129 to i64*
  %4131 = load i64, i64* %4130, align 1
  %4132 = inttoptr i64 %4124 to double*
  %4133 = load double, double* %4132
  %4134 = fmul double %4128, %4133
  %4135 = bitcast i8* %4121 to double*
  store double %4134, double* %4135, align 1, !tbaa !2452
  %4136 = getelementptr inbounds i8, i8* %4121, i64 8
  %4137 = bitcast i8* %4136 to i64*
  store i64 %4131, i64* %4137, align 1, !tbaa !2452
  %4138 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4139 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4140 = bitcast %union.vec128_t* %XMM2 to i8*
  %4141 = load i64, i64* %PC
  %4142 = add i64 %4141, 4
  store i64 %4142, i64* %PC
  %4143 = bitcast i8* %4139 to double*
  %4144 = load double, double* %4143, align 1
  %4145 = getelementptr inbounds i8, i8* %4139, i64 8
  %4146 = bitcast i8* %4145 to i64*
  %4147 = load i64, i64* %4146, align 1
  %4148 = bitcast i8* %4140 to double*
  %4149 = load double, double* %4148, align 1
  %4150 = fadd double %4144, %4149
  %4151 = bitcast i8* %4138 to double*
  store double %4150, double* %4151, align 1, !tbaa !2452
  %4152 = getelementptr inbounds i8, i8* %4138, i64 8
  %4153 = bitcast i8* %4152 to i64*
  store i64 %4147, i64* %4153, align 1, !tbaa !2452
  %4154 = load i64, i64* %RBP
  %4155 = sub i64 %4154, 16
  %4156 = load i64, i64* %PC
  %4157 = add i64 %4156, 4
  store i64 %4157, i64* %PC
  %4158 = inttoptr i64 %4155 to i64*
  %4159 = load i64, i64* %4158
  store i64 %4159, i64* %RDX, align 8, !tbaa !2428
  %4160 = load i64, i64* %RBP
  %4161 = sub i64 %4160, 28
  %4162 = load i64, i64* %PC
  %4163 = add i64 %4162, 3
  store i64 %4163, i64* %PC
  %4164 = inttoptr i64 %4161 to i32*
  %4165 = load i32, i32* %4164
  %4166 = zext i32 %4165 to i64
  store i64 %4166, i64* %RCX, align 8, !tbaa !2428
  %4167 = load i64, i64* %RCX
  %4168 = load i64, i64* %PC
  %4169 = add i64 %4168, 3
  store i64 %4169, i64* %PC
  %4170 = trunc i64 %4167 to i32
  %4171 = add i32 3, %4170
  %4172 = zext i32 %4171 to i64
  store i64 %4172, i64* %RCX, align 8, !tbaa !2428
  %4173 = icmp ult i32 %4171, %4170
  %4174 = icmp ult i32 %4171, 3
  %4175 = or i1 %4173, %4174
  %4176 = zext i1 %4175 to i8
  %4177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4176, i8* %4177, align 1, !tbaa !2432
  %4178 = and i32 %4171, 255
  %4179 = call i32 @llvm.ctpop.i32(i32 %4178) #17
  %4180 = trunc i32 %4179 to i8
  %4181 = and i8 %4180, 1
  %4182 = xor i8 %4181, 1
  %4183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4182, i8* %4183, align 1, !tbaa !2446
  %4184 = xor i64 3, %4167
  %4185 = trunc i64 %4184 to i32
  %4186 = xor i32 %4185, %4171
  %4187 = lshr i32 %4186, 4
  %4188 = trunc i32 %4187 to i8
  %4189 = and i8 %4188, 1
  %4190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4189, i8* %4190, align 1, !tbaa !2447
  %4191 = icmp eq i32 %4171, 0
  %4192 = zext i1 %4191 to i8
  %4193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4192, i8* %4193, align 1, !tbaa !2448
  %4194 = lshr i32 %4171, 31
  %4195 = trunc i32 %4194 to i8
  %4196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4195, i8* %4196, align 1, !tbaa !2449
  %4197 = lshr i32 %4170, 31
  %4198 = xor i32 %4194, %4197
  %4199 = add nuw nsw i32 %4198, %4194
  %4200 = icmp eq i32 %4199, 2
  %4201 = zext i1 %4200 to i8
  %4202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4201, i8* %4202, align 1, !tbaa !2450
  %4203 = load i32, i32* %ECX
  %4204 = zext i32 %4203 to i64
  %4205 = load i64, i64* %PC
  %4206 = add i64 %4205, 3
  store i64 %4206, i64* %PC
  %4207 = shl i64 %4204, 32
  %4208 = ashr exact i64 %4207, 32
  store i64 %4208, i64* %RSI, align 8, !tbaa !2428
  %4209 = load i64, i64* %RDX
  %4210 = load i64, i64* %RSI
  %4211 = mul i64 %4210, 8
  %4212 = add i64 %4211, %4209
  %4213 = bitcast %union.vec128_t* %XMM1 to i8*
  %4214 = load i64, i64* %PC
  %4215 = add i64 %4214, 5
  store i64 %4215, i64* %PC
  %4216 = bitcast i8* %4213 to double*
  %4217 = load double, double* %4216, align 1
  %4218 = inttoptr i64 %4212 to double*
  store double %4217, double* %4218
  %4219 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4220 = load i64, i64* %RBP
  %4221 = sub i64 %4220, 112
  %4222 = load i64, i64* %PC
  %4223 = add i64 %4222, 5
  store i64 %4223, i64* %PC
  %4224 = inttoptr i64 %4221 to double*
  %4225 = load double, double* %4224
  %4226 = bitcast i8* %4219 to double*
  store double %4225, double* %4226, align 1, !tbaa !2452
  %4227 = getelementptr inbounds i8, i8* %4219, i64 8
  %4228 = bitcast i8* %4227 to double*
  store double 0.000000e+00, double* %4228, align 1, !tbaa !2452
  %4229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4230 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4231 = load i64, i64* %RBP
  %4232 = sub i64 %4231, 152
  %4233 = load i64, i64* %PC
  %4234 = add i64 %4233, 8
  store i64 %4234, i64* %PC
  %4235 = bitcast i8* %4230 to double*
  %4236 = load double, double* %4235, align 1
  %4237 = getelementptr inbounds i8, i8* %4230, i64 8
  %4238 = bitcast i8* %4237 to i64*
  %4239 = load i64, i64* %4238, align 1
  %4240 = inttoptr i64 %4232 to double*
  %4241 = load double, double* %4240
  %4242 = fadd double %4236, %4241
  %4243 = bitcast i8* %4229 to double*
  store double %4242, double* %4243, align 1, !tbaa !2452
  %4244 = getelementptr inbounds i8, i8* %4229, i64 8
  %4245 = bitcast i8* %4244 to i64*
  store i64 %4239, i64* %4245, align 1, !tbaa !2452
  %4246 = load i64, i64* %RBP
  %4247 = sub i64 %4246, 96
  %4248 = bitcast %union.vec128_t* %XMM1 to i8*
  %4249 = load i64, i64* %PC
  %4250 = add i64 %4249, 5
  store i64 %4250, i64* %PC
  %4251 = bitcast i8* %4248 to double*
  %4252 = load double, double* %4251, align 1
  %4253 = inttoptr i64 %4247 to double*
  store double %4252, double* %4253
  %4254 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4255 = load i64, i64* %RBP
  %4256 = sub i64 %4255, 120
  %4257 = load i64, i64* %PC
  %4258 = add i64 %4257, 5
  store i64 %4258, i64* %PC
  %4259 = inttoptr i64 %4256 to double*
  %4260 = load double, double* %4259
  %4261 = bitcast i8* %4254 to double*
  store double %4260, double* %4261, align 1, !tbaa !2452
  %4262 = getelementptr inbounds i8, i8* %4254, i64 8
  %4263 = bitcast i8* %4262 to double*
  store double 0.000000e+00, double* %4263, align 1, !tbaa !2452
  %4264 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4265 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4266 = load i64, i64* %RBP
  %4267 = sub i64 %4266, 144
  %4268 = load i64, i64* %PC
  %4269 = add i64 %4268, 8
  store i64 %4269, i64* %PC
  %4270 = bitcast i8* %4265 to double*
  %4271 = load double, double* %4270, align 1
  %4272 = getelementptr inbounds i8, i8* %4265, i64 8
  %4273 = bitcast i8* %4272 to i64*
  %4274 = load i64, i64* %4273, align 1
  %4275 = inttoptr i64 %4267 to double*
  %4276 = load double, double* %4275
  %4277 = fsub double %4271, %4276
  %4278 = bitcast i8* %4264 to double*
  store double %4277, double* %4278, align 1, !tbaa !2452
  %4279 = getelementptr inbounds i8, i8* %4264, i64 8
  %4280 = bitcast i8* %4279 to i64*
  store i64 %4274, i64* %4280, align 1, !tbaa !2452
  %4281 = load i64, i64* %RBP
  %4282 = sub i64 %4281, 104
  %4283 = bitcast %union.vec128_t* %XMM1 to i8*
  %4284 = load i64, i64* %PC
  %4285 = add i64 %4284, 5
  store i64 %4285, i64* %PC
  %4286 = bitcast i8* %4283 to double*
  %4287 = load double, double* %4286, align 1
  %4288 = inttoptr i64 %4282 to double*
  store double %4287, double* %4288
  %4289 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4290 = load i64, i64* %RBP
  %4291 = sub i64 %4290, 80
  %4292 = load i64, i64* %PC
  %4293 = add i64 %4292, 5
  store i64 %4293, i64* %PC
  %4294 = inttoptr i64 %4291 to double*
  %4295 = load double, double* %4294
  %4296 = bitcast i8* %4289 to double*
  store double %4295, double* %4296, align 1, !tbaa !2452
  %4297 = getelementptr inbounds i8, i8* %4289, i64 8
  %4298 = bitcast i8* %4297 to double*
  store double 0.000000e+00, double* %4298, align 1, !tbaa !2452
  %4299 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4300 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4301 = load i64, i64* %RBP
  %4302 = sub i64 %4301, 96
  %4303 = load i64, i64* %PC
  %4304 = add i64 %4303, 5
  store i64 %4304, i64* %PC
  %4305 = bitcast i8* %4300 to double*
  %4306 = load double, double* %4305, align 1
  %4307 = getelementptr inbounds i8, i8* %4300, i64 8
  %4308 = bitcast i8* %4307 to i64*
  %4309 = load i64, i64* %4308, align 1
  %4310 = inttoptr i64 %4302 to double*
  %4311 = load double, double* %4310
  %4312 = fmul double %4306, %4311
  %4313 = bitcast i8* %4299 to double*
  store double %4312, double* %4313, align 1, !tbaa !2452
  %4314 = getelementptr inbounds i8, i8* %4299, i64 8
  %4315 = bitcast i8* %4314 to i64*
  store i64 %4309, i64* %4315, align 1, !tbaa !2452
  %4316 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4317 = load i64, i64* %RBP
  %4318 = sub i64 %4317, 88
  %4319 = load i64, i64* %PC
  %4320 = add i64 %4319, 5
  store i64 %4320, i64* %PC
  %4321 = inttoptr i64 %4318 to double*
  %4322 = load double, double* %4321
  %4323 = bitcast i8* %4316 to double*
  store double %4322, double* %4323, align 1, !tbaa !2452
  %4324 = getelementptr inbounds i8, i8* %4316, i64 8
  %4325 = bitcast i8* %4324 to double*
  store double 0.000000e+00, double* %4325, align 1, !tbaa !2452
  %4326 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4327 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4328 = load i64, i64* %RBP
  %4329 = sub i64 %4328, 104
  %4330 = load i64, i64* %PC
  %4331 = add i64 %4330, 5
  store i64 %4331, i64* %PC
  %4332 = bitcast i8* %4327 to double*
  %4333 = load double, double* %4332, align 1
  %4334 = getelementptr inbounds i8, i8* %4327, i64 8
  %4335 = bitcast i8* %4334 to i64*
  %4336 = load i64, i64* %4335, align 1
  %4337 = inttoptr i64 %4329 to double*
  %4338 = load double, double* %4337
  %4339 = fmul double %4333, %4338
  %4340 = bitcast i8* %4326 to double*
  store double %4339, double* %4340, align 1, !tbaa !2452
  %4341 = getelementptr inbounds i8, i8* %4326, i64 8
  %4342 = bitcast i8* %4341 to i64*
  store i64 %4336, i64* %4342, align 1, !tbaa !2452
  %4343 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4344 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4345 = bitcast %union.vec128_t* %XMM2 to i8*
  %4346 = load i64, i64* %PC
  %4347 = add i64 %4346, 4
  store i64 %4347, i64* %PC
  %4348 = bitcast i8* %4344 to double*
  %4349 = load double, double* %4348, align 1
  %4350 = getelementptr inbounds i8, i8* %4344, i64 8
  %4351 = bitcast i8* %4350 to i64*
  %4352 = load i64, i64* %4351, align 1
  %4353 = bitcast i8* %4345 to double*
  %4354 = load double, double* %4353, align 1
  %4355 = fsub double %4349, %4354
  %4356 = bitcast i8* %4343 to double*
  store double %4355, double* %4356, align 1, !tbaa !2452
  %4357 = getelementptr inbounds i8, i8* %4343, i64 8
  %4358 = bitcast i8* %4357 to i64*
  store i64 %4352, i64* %4358, align 1, !tbaa !2452
  %4359 = load i64, i64* %RBP
  %4360 = sub i64 %4359, 16
  %4361 = load i64, i64* %PC
  %4362 = add i64 %4361, 4
  store i64 %4362, i64* %PC
  %4363 = inttoptr i64 %4360 to i64*
  %4364 = load i64, i64* %4363
  store i64 %4364, i64* %RDX, align 8, !tbaa !2428
  %4365 = load i64, i64* %RBP
  %4366 = sub i64 %4365, 28
  %4367 = load i64, i64* %PC
  %4368 = add i64 %4367, 3
  store i64 %4368, i64* %PC
  %4369 = inttoptr i64 %4366 to i32*
  %4370 = load i32, i32* %4369
  %4371 = zext i32 %4370 to i64
  store i64 %4371, i64* %RCX, align 8, !tbaa !2428
  %4372 = load i64, i64* %RCX
  %4373 = load i64, i64* %PC
  %4374 = add i64 %4373, 3
  store i64 %4374, i64* %PC
  %4375 = trunc i64 %4372 to i32
  %4376 = add i32 6, %4375
  %4377 = zext i32 %4376 to i64
  store i64 %4377, i64* %RCX, align 8, !tbaa !2428
  %4378 = icmp ult i32 %4376, %4375
  %4379 = icmp ult i32 %4376, 6
  %4380 = or i1 %4378, %4379
  %4381 = zext i1 %4380 to i8
  %4382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4381, i8* %4382, align 1, !tbaa !2432
  %4383 = and i32 %4376, 255
  %4384 = call i32 @llvm.ctpop.i32(i32 %4383) #17
  %4385 = trunc i32 %4384 to i8
  %4386 = and i8 %4385, 1
  %4387 = xor i8 %4386, 1
  %4388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4387, i8* %4388, align 1, !tbaa !2446
  %4389 = xor i64 6, %4372
  %4390 = trunc i64 %4389 to i32
  %4391 = xor i32 %4390, %4376
  %4392 = lshr i32 %4391, 4
  %4393 = trunc i32 %4392 to i8
  %4394 = and i8 %4393, 1
  %4395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4394, i8* %4395, align 1, !tbaa !2447
  %4396 = icmp eq i32 %4376, 0
  %4397 = zext i1 %4396 to i8
  %4398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4397, i8* %4398, align 1, !tbaa !2448
  %4399 = lshr i32 %4376, 31
  %4400 = trunc i32 %4399 to i8
  %4401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4400, i8* %4401, align 1, !tbaa !2449
  %4402 = lshr i32 %4375, 31
  %4403 = xor i32 %4399, %4402
  %4404 = add nuw nsw i32 %4403, %4399
  %4405 = icmp eq i32 %4404, 2
  %4406 = zext i1 %4405 to i8
  %4407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4406, i8* %4407, align 1, !tbaa !2450
  %4408 = load i32, i32* %ECX
  %4409 = zext i32 %4408 to i64
  %4410 = load i64, i64* %PC
  %4411 = add i64 %4410, 3
  store i64 %4411, i64* %PC
  %4412 = shl i64 %4409, 32
  %4413 = ashr exact i64 %4412, 32
  store i64 %4413, i64* %RSI, align 8, !tbaa !2428
  %4414 = load i64, i64* %RDX
  %4415 = load i64, i64* %RSI
  %4416 = mul i64 %4415, 8
  %4417 = add i64 %4416, %4414
  %4418 = bitcast %union.vec128_t* %XMM1 to i8*
  %4419 = load i64, i64* %PC
  %4420 = add i64 %4419, 5
  store i64 %4420, i64* %PC
  %4421 = bitcast i8* %4418 to double*
  %4422 = load double, double* %4421, align 1
  %4423 = inttoptr i64 %4417 to double*
  store double %4422, double* %4423
  %4424 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4425 = load i64, i64* %RBP
  %4426 = sub i64 %4425, 80
  %4427 = load i64, i64* %PC
  %4428 = add i64 %4427, 5
  store i64 %4428, i64* %PC
  %4429 = inttoptr i64 %4426 to double*
  %4430 = load double, double* %4429
  %4431 = bitcast i8* %4424 to double*
  store double %4430, double* %4431, align 1, !tbaa !2452
  %4432 = getelementptr inbounds i8, i8* %4424, i64 8
  %4433 = bitcast i8* %4432 to double*
  store double 0.000000e+00, double* %4433, align 1, !tbaa !2452
  %4434 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4435 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4436 = load i64, i64* %RBP
  %4437 = sub i64 %4436, 104
  %4438 = load i64, i64* %PC
  %4439 = add i64 %4438, 5
  store i64 %4439, i64* %PC
  %4440 = bitcast i8* %4435 to double*
  %4441 = load double, double* %4440, align 1
  %4442 = getelementptr inbounds i8, i8* %4435, i64 8
  %4443 = bitcast i8* %4442 to i64*
  %4444 = load i64, i64* %4443, align 1
  %4445 = inttoptr i64 %4437 to double*
  %4446 = load double, double* %4445
  %4447 = fmul double %4441, %4446
  %4448 = bitcast i8* %4434 to double*
  store double %4447, double* %4448, align 1, !tbaa !2452
  %4449 = getelementptr inbounds i8, i8* %4434, i64 8
  %4450 = bitcast i8* %4449 to i64*
  store i64 %4444, i64* %4450, align 1, !tbaa !2452
  %4451 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4452 = load i64, i64* %RBP
  %4453 = sub i64 %4452, 88
  %4454 = load i64, i64* %PC
  %4455 = add i64 %4454, 5
  store i64 %4455, i64* %PC
  %4456 = inttoptr i64 %4453 to double*
  %4457 = load double, double* %4456
  %4458 = bitcast i8* %4451 to double*
  store double %4457, double* %4458, align 1, !tbaa !2452
  %4459 = getelementptr inbounds i8, i8* %4451, i64 8
  %4460 = bitcast i8* %4459 to double*
  store double 0.000000e+00, double* %4460, align 1, !tbaa !2452
  %4461 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4462 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4463 = load i64, i64* %RBP
  %4464 = sub i64 %4463, 96
  %4465 = load i64, i64* %PC
  %4466 = add i64 %4465, 5
  store i64 %4466, i64* %PC
  %4467 = bitcast i8* %4462 to double*
  %4468 = load double, double* %4467, align 1
  %4469 = getelementptr inbounds i8, i8* %4462, i64 8
  %4470 = bitcast i8* %4469 to i64*
  %4471 = load i64, i64* %4470, align 1
  %4472 = inttoptr i64 %4464 to double*
  %4473 = load double, double* %4472
  %4474 = fmul double %4468, %4473
  %4475 = bitcast i8* %4461 to double*
  store double %4474, double* %4475, align 1, !tbaa !2452
  %4476 = getelementptr inbounds i8, i8* %4461, i64 8
  %4477 = bitcast i8* %4476 to i64*
  store i64 %4471, i64* %4477, align 1, !tbaa !2452
  %4478 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4479 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4480 = bitcast %union.vec128_t* %XMM2 to i8*
  %4481 = load i64, i64* %PC
  %4482 = add i64 %4481, 4
  store i64 %4482, i64* %PC
  %4483 = bitcast i8* %4479 to double*
  %4484 = load double, double* %4483, align 1
  %4485 = getelementptr inbounds i8, i8* %4479, i64 8
  %4486 = bitcast i8* %4485 to i64*
  %4487 = load i64, i64* %4486, align 1
  %4488 = bitcast i8* %4480 to double*
  %4489 = load double, double* %4488, align 1
  %4490 = fadd double %4484, %4489
  %4491 = bitcast i8* %4478 to double*
  store double %4490, double* %4491, align 1, !tbaa !2452
  %4492 = getelementptr inbounds i8, i8* %4478, i64 8
  %4493 = bitcast i8* %4492 to i64*
  store i64 %4487, i64* %4493, align 1, !tbaa !2452
  %4494 = load i64, i64* %RBP
  %4495 = sub i64 %4494, 16
  %4496 = load i64, i64* %PC
  %4497 = add i64 %4496, 4
  store i64 %4497, i64* %PC
  %4498 = inttoptr i64 %4495 to i64*
  %4499 = load i64, i64* %4498
  store i64 %4499, i64* %RDX, align 8, !tbaa !2428
  %4500 = load i64, i64* %RBP
  %4501 = sub i64 %4500, 28
  %4502 = load i64, i64* %PC
  %4503 = add i64 %4502, 3
  store i64 %4503, i64* %PC
  %4504 = inttoptr i64 %4501 to i32*
  %4505 = load i32, i32* %4504
  %4506 = zext i32 %4505 to i64
  store i64 %4506, i64* %RCX, align 8, !tbaa !2428
  %4507 = load i64, i64* %RCX
  %4508 = load i64, i64* %PC
  %4509 = add i64 %4508, 3
  store i64 %4509, i64* %PC
  %4510 = trunc i64 %4507 to i32
  %4511 = add i32 7, %4510
  %4512 = zext i32 %4511 to i64
  store i64 %4512, i64* %RCX, align 8, !tbaa !2428
  %4513 = icmp ult i32 %4511, %4510
  %4514 = icmp ult i32 %4511, 7
  %4515 = or i1 %4513, %4514
  %4516 = zext i1 %4515 to i8
  %4517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4516, i8* %4517, align 1, !tbaa !2432
  %4518 = and i32 %4511, 255
  %4519 = call i32 @llvm.ctpop.i32(i32 %4518) #17
  %4520 = trunc i32 %4519 to i8
  %4521 = and i8 %4520, 1
  %4522 = xor i8 %4521, 1
  %4523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4522, i8* %4523, align 1, !tbaa !2446
  %4524 = xor i64 7, %4507
  %4525 = trunc i64 %4524 to i32
  %4526 = xor i32 %4525, %4511
  %4527 = lshr i32 %4526, 4
  %4528 = trunc i32 %4527 to i8
  %4529 = and i8 %4528, 1
  %4530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4529, i8* %4530, align 1, !tbaa !2447
  %4531 = icmp eq i32 %4511, 0
  %4532 = zext i1 %4531 to i8
  %4533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4532, i8* %4533, align 1, !tbaa !2448
  %4534 = lshr i32 %4511, 31
  %4535 = trunc i32 %4534 to i8
  %4536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4535, i8* %4536, align 1, !tbaa !2449
  %4537 = lshr i32 %4510, 31
  %4538 = xor i32 %4534, %4537
  %4539 = add nuw nsw i32 %4538, %4534
  %4540 = icmp eq i32 %4539, 2
  %4541 = zext i1 %4540 to i8
  %4542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4541, i8* %4542, align 1, !tbaa !2450
  %4543 = load i32, i32* %ECX
  %4544 = zext i32 %4543 to i64
  %4545 = load i64, i64* %PC
  %4546 = add i64 %4545, 3
  store i64 %4546, i64* %PC
  %4547 = shl i64 %4544, 32
  %4548 = ashr exact i64 %4547, 32
  store i64 %4548, i64* %RSI, align 8, !tbaa !2428
  %4549 = load i64, i64* %RDX
  %4550 = load i64, i64* %RSI
  %4551 = mul i64 %4550, 8
  %4552 = add i64 %4551, %4549
  %4553 = bitcast %union.vec128_t* %XMM1 to i8*
  %4554 = load i64, i64* %PC
  %4555 = add i64 %4554, 5
  store i64 %4555, i64* %PC
  %4556 = bitcast i8* %4553 to double*
  %4557 = load double, double* %4556, align 1
  %4558 = inttoptr i64 %4552 to double*
  store double %4557, double* %4558
  %4559 = load i64, i64* %RBP
  %4560 = sub i64 %4559, 24
  %4561 = load i64, i64* %PC
  %4562 = add i64 %4561, 4
  store i64 %4562, i64* %PC
  %4563 = inttoptr i64 %4560 to i64*
  %4564 = load i64, i64* %4563
  store i64 %4564, i64* %RDX, align 8, !tbaa !2428
  %4565 = load i64, i64* %RBP
  %4566 = sub i64 %4565, 36
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 3
  store i64 %4568, i64* %PC
  %4569 = inttoptr i64 %4566 to i32*
  %4570 = load i32, i32* %4569
  %4571 = zext i32 %4570 to i64
  store i64 %4571, i64* %RCX, align 8, !tbaa !2428
  %4572 = load i64, i64* %RCX
  %4573 = load i64, i64* %PC
  %4574 = add i64 %4573, 3
  store i64 %4574, i64* %PC
  %4575 = trunc i64 %4572 to i32
  %4576 = add i32 2, %4575
  %4577 = zext i32 %4576 to i64
  store i64 %4577, i64* %RCX, align 8, !tbaa !2428
  %4578 = icmp ult i32 %4576, %4575
  %4579 = icmp ult i32 %4576, 2
  %4580 = or i1 %4578, %4579
  %4581 = zext i1 %4580 to i8
  %4582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4581, i8* %4582, align 1, !tbaa !2432
  %4583 = and i32 %4576, 255
  %4584 = call i32 @llvm.ctpop.i32(i32 %4583) #17
  %4585 = trunc i32 %4584 to i8
  %4586 = and i8 %4585, 1
  %4587 = xor i8 %4586, 1
  %4588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4587, i8* %4588, align 1, !tbaa !2446
  %4589 = xor i64 2, %4572
  %4590 = trunc i64 %4589 to i32
  %4591 = xor i32 %4590, %4576
  %4592 = lshr i32 %4591, 4
  %4593 = trunc i32 %4592 to i8
  %4594 = and i8 %4593, 1
  %4595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4594, i8* %4595, align 1, !tbaa !2447
  %4596 = icmp eq i32 %4576, 0
  %4597 = zext i1 %4596 to i8
  %4598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4597, i8* %4598, align 1, !tbaa !2448
  %4599 = lshr i32 %4576, 31
  %4600 = trunc i32 %4599 to i8
  %4601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4600, i8* %4601, align 1, !tbaa !2449
  %4602 = lshr i32 %4575, 31
  %4603 = xor i32 %4599, %4602
  %4604 = add nuw nsw i32 %4603, %4599
  %4605 = icmp eq i32 %4604, 2
  %4606 = zext i1 %4605 to i8
  %4607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4606, i8* %4607, align 1, !tbaa !2450
  %4608 = load i32, i32* %ECX
  %4609 = zext i32 %4608 to i64
  %4610 = load i64, i64* %PC
  %4611 = add i64 %4610, 3
  store i64 %4611, i64* %PC
  %4612 = shl i64 %4609, 32
  %4613 = ashr exact i64 %4612, 32
  store i64 %4613, i64* %RSI, align 8, !tbaa !2428
  %4614 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4615 = load i64, i64* %RDX
  %4616 = load i64, i64* %RSI
  %4617 = mul i64 %4616, 8
  %4618 = add i64 %4617, %4615
  %4619 = load i64, i64* %PC
  %4620 = add i64 %4619, 5
  store i64 %4620, i64* %PC
  %4621 = inttoptr i64 %4618 to double*
  %4622 = load double, double* %4621
  %4623 = bitcast i8* %4614 to double*
  store double %4622, double* %4623, align 1, !tbaa !2452
  %4624 = getelementptr inbounds i8, i8* %4614, i64 8
  %4625 = bitcast i8* %4624 to double*
  store double 0.000000e+00, double* %4625, align 1, !tbaa !2452
  %4626 = load i64, i64* %RBP
  %4627 = sub i64 %4626, 48
  %4628 = bitcast %union.vec128_t* %XMM1 to i8*
  %4629 = load i64, i64* %PC
  %4630 = add i64 %4629, 5
  store i64 %4630, i64* %PC
  %4631 = bitcast i8* %4628 to double*
  %4632 = load double, double* %4631, align 1
  %4633 = inttoptr i64 %4627 to double*
  store double %4632, double* %4633
  %4634 = load i64, i64* %RBP
  %4635 = sub i64 %4634, 24
  %4636 = load i64, i64* %PC
  %4637 = add i64 %4636, 4
  store i64 %4637, i64* %PC
  %4638 = inttoptr i64 %4635 to i64*
  %4639 = load i64, i64* %4638
  store i64 %4639, i64* %RDX, align 8, !tbaa !2428
  %4640 = load i64, i64* %RBP
  %4641 = sub i64 %4640, 36
  %4642 = load i64, i64* %PC
  %4643 = add i64 %4642, 3
  store i64 %4643, i64* %PC
  %4644 = inttoptr i64 %4641 to i32*
  %4645 = load i32, i32* %4644
  %4646 = zext i32 %4645 to i64
  store i64 %4646, i64* %RCX, align 8, !tbaa !2428
  %4647 = load i64, i64* %RCX
  %4648 = load i64, i64* %PC
  %4649 = add i64 %4648, 3
  store i64 %4649, i64* %PC
  %4650 = trunc i64 %4647 to i32
  %4651 = add i32 3, %4650
  %4652 = zext i32 %4651 to i64
  store i64 %4652, i64* %RCX, align 8, !tbaa !2428
  %4653 = icmp ult i32 %4651, %4650
  %4654 = icmp ult i32 %4651, 3
  %4655 = or i1 %4653, %4654
  %4656 = zext i1 %4655 to i8
  %4657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4656, i8* %4657, align 1, !tbaa !2432
  %4658 = and i32 %4651, 255
  %4659 = call i32 @llvm.ctpop.i32(i32 %4658) #17
  %4660 = trunc i32 %4659 to i8
  %4661 = and i8 %4660, 1
  %4662 = xor i8 %4661, 1
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4662, i8* %4663, align 1, !tbaa !2446
  %4664 = xor i64 3, %4647
  %4665 = trunc i64 %4664 to i32
  %4666 = xor i32 %4665, %4651
  %4667 = lshr i32 %4666, 4
  %4668 = trunc i32 %4667 to i8
  %4669 = and i8 %4668, 1
  %4670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4669, i8* %4670, align 1, !tbaa !2447
  %4671 = icmp eq i32 %4651, 0
  %4672 = zext i1 %4671 to i8
  %4673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4672, i8* %4673, align 1, !tbaa !2448
  %4674 = lshr i32 %4651, 31
  %4675 = trunc i32 %4674 to i8
  %4676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4675, i8* %4676, align 1, !tbaa !2449
  %4677 = lshr i32 %4650, 31
  %4678 = xor i32 %4674, %4677
  %4679 = add nuw nsw i32 %4678, %4674
  %4680 = icmp eq i32 %4679, 2
  %4681 = zext i1 %4680 to i8
  %4682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4681, i8* %4682, align 1, !tbaa !2450
  %4683 = load i32, i32* %ECX
  %4684 = zext i32 %4683 to i64
  %4685 = load i64, i64* %PC
  %4686 = add i64 %4685, 3
  store i64 %4686, i64* %PC
  %4687 = shl i64 %4684, 32
  %4688 = ashr exact i64 %4687, 32
  store i64 %4688, i64* %RSI, align 8, !tbaa !2428
  %4689 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4690 = load i64, i64* %RDX
  %4691 = load i64, i64* %RSI
  %4692 = mul i64 %4691, 8
  %4693 = add i64 %4692, %4690
  %4694 = load i64, i64* %PC
  %4695 = add i64 %4694, 5
  store i64 %4695, i64* %PC
  %4696 = inttoptr i64 %4693 to double*
  %4697 = load double, double* %4696
  %4698 = bitcast i8* %4689 to double*
  store double %4697, double* %4698, align 1, !tbaa !2452
  %4699 = getelementptr inbounds i8, i8* %4689, i64 8
  %4700 = bitcast i8* %4699 to double*
  store double 0.000000e+00, double* %4700, align 1, !tbaa !2452
  %4701 = load i64, i64* %RBP
  %4702 = sub i64 %4701, 56
  %4703 = bitcast %union.vec128_t* %XMM1 to i8*
  %4704 = load i64, i64* %PC
  %4705 = add i64 %4704, 5
  store i64 %4705, i64* %PC
  %4706 = bitcast i8* %4703 to double*
  %4707 = load double, double* %4706, align 1
  %4708 = inttoptr i64 %4702 to double*
  store double %4707, double* %4708
  %4709 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4710 = load i64, i64* %RBP
  %4711 = sub i64 %4710, 48
  %4712 = load i64, i64* %PC
  %4713 = add i64 %4712, 5
  store i64 %4713, i64* %PC
  %4714 = inttoptr i64 %4711 to double*
  %4715 = load double, double* %4714
  %4716 = bitcast i8* %4709 to double*
  store double %4715, double* %4716, align 1, !tbaa !2452
  %4717 = getelementptr inbounds i8, i8* %4709, i64 8
  %4718 = bitcast i8* %4717 to double*
  store double 0.000000e+00, double* %4718, align 1, !tbaa !2452
  %4719 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4720 = bitcast %union.vec128_t* %XMM0 to i8*
  %4721 = load i64, i64* %PC
  %4722 = add i64 %4721, 3
  store i64 %4722, i64* %PC
  %4723 = bitcast i8* %4720 to <2 x i32>*
  %4724 = load <2 x i32>, <2 x i32>* %4723, align 1
  %4725 = getelementptr inbounds i8, i8* %4720, i64 8
  %4726 = bitcast i8* %4725 to <2 x i32>*
  %4727 = load <2 x i32>, <2 x i32>* %4726, align 1
  %4728 = extractelement <2 x i32> %4724, i32 0
  %4729 = bitcast i8* %4719 to i32*
  store i32 %4728, i32* %4729, align 1, !tbaa !2479
  %4730 = extractelement <2 x i32> %4724, i32 1
  %4731 = getelementptr inbounds i8, i8* %4719, i64 4
  %4732 = bitcast i8* %4731 to i32*
  store i32 %4730, i32* %4732, align 1, !tbaa !2479
  %4733 = extractelement <2 x i32> %4727, i32 0
  %4734 = getelementptr inbounds i8, i8* %4719, i64 8
  %4735 = bitcast i8* %4734 to i32*
  store i32 %4733, i32* %4735, align 1, !tbaa !2479
  %4736 = extractelement <2 x i32> %4727, i32 1
  %4737 = getelementptr inbounds i8, i8* %4719, i64 12
  %4738 = bitcast i8* %4737 to i32*
  store i32 %4736, i32* %4738, align 1, !tbaa !2479
  %4739 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4740 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4741 = load i64, i64* %RBP
  %4742 = sub i64 %4741, 64
  %4743 = load i64, i64* %PC
  %4744 = add i64 %4743, 5
  store i64 %4744, i64* %PC
  %4745 = bitcast i8* %4740 to double*
  %4746 = load double, double* %4745, align 1
  %4747 = getelementptr inbounds i8, i8* %4740, i64 8
  %4748 = bitcast i8* %4747 to i64*
  %4749 = load i64, i64* %4748, align 1
  %4750 = inttoptr i64 %4742 to double*
  %4751 = load double, double* %4750
  %4752 = fmul double %4746, %4751
  %4753 = bitcast i8* %4739 to double*
  store double %4752, double* %4753, align 1, !tbaa !2452
  %4754 = getelementptr inbounds i8, i8* %4739, i64 8
  %4755 = bitcast i8* %4754 to i64*
  store i64 %4749, i64* %4755, align 1, !tbaa !2452
  %4756 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4757 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4758 = load i64, i64* %RBP
  %4759 = sub i64 %4758, 56
  %4760 = load i64, i64* %PC
  %4761 = add i64 %4760, 5
  store i64 %4761, i64* %PC
  %4762 = bitcast i8* %4757 to double*
  %4763 = load double, double* %4762, align 1
  %4764 = getelementptr inbounds i8, i8* %4757, i64 8
  %4765 = bitcast i8* %4764 to i64*
  %4766 = load i64, i64* %4765, align 1
  %4767 = inttoptr i64 %4759 to double*
  %4768 = load double, double* %4767
  %4769 = fmul double %4763, %4768
  %4770 = bitcast i8* %4756 to double*
  store double %4769, double* %4770, align 1, !tbaa !2452
  %4771 = getelementptr inbounds i8, i8* %4756, i64 8
  %4772 = bitcast i8* %4771 to i64*
  store i64 %4766, i64* %4772, align 1, !tbaa !2452
  %4773 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4774 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4775 = bitcast %union.vec128_t* %XMM2 to i8*
  %4776 = load i64, i64* %PC
  %4777 = add i64 %4776, 4
  store i64 %4777, i64* %PC
  %4778 = bitcast i8* %4774 to double*
  %4779 = load double, double* %4778, align 1
  %4780 = getelementptr inbounds i8, i8* %4774, i64 8
  %4781 = bitcast i8* %4780 to i64*
  %4782 = load i64, i64* %4781, align 1
  %4783 = bitcast i8* %4775 to double*
  %4784 = load double, double* %4783, align 1
  %4785 = fsub double %4779, %4784
  %4786 = bitcast i8* %4773 to double*
  store double %4785, double* %4786, align 1, !tbaa !2452
  %4787 = getelementptr inbounds i8, i8* %4773, i64 8
  %4788 = bitcast i8* %4787 to i64*
  store i64 %4782, i64* %4788, align 1, !tbaa !2452
  %4789 = load i64, i64* %RBP
  %4790 = sub i64 %4789, 80
  %4791 = bitcast %union.vec128_t* %XMM1 to i8*
  %4792 = load i64, i64* %PC
  %4793 = add i64 %4792, 5
  store i64 %4793, i64* %PC
  %4794 = bitcast i8* %4791 to double*
  %4795 = load double, double* %4794, align 1
  %4796 = inttoptr i64 %4790 to double*
  store double %4795, double* %4796
  %4797 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4798 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4799 = load i64, i64* %RBP
  %4800 = sub i64 %4799, 64
  %4801 = load i64, i64* %PC
  %4802 = add i64 %4801, 5
  store i64 %4802, i64* %PC
  %4803 = bitcast i8* %4798 to double*
  %4804 = load double, double* %4803, align 1
  %4805 = getelementptr inbounds i8, i8* %4798, i64 8
  %4806 = bitcast i8* %4805 to i64*
  %4807 = load i64, i64* %4806, align 1
  %4808 = inttoptr i64 %4800 to double*
  %4809 = load double, double* %4808
  %4810 = fmul double %4804, %4809
  %4811 = bitcast i8* %4797 to double*
  store double %4810, double* %4811, align 1, !tbaa !2452
  %4812 = getelementptr inbounds i8, i8* %4797, i64 8
  %4813 = bitcast i8* %4812 to i64*
  store i64 %4807, i64* %4813, align 1, !tbaa !2452
  %4814 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4816 = load i64, i64* %RBP
  %4817 = sub i64 %4816, 48
  %4818 = load i64, i64* %PC
  %4819 = add i64 %4818, 5
  store i64 %4819, i64* %PC
  %4820 = bitcast i8* %4815 to double*
  %4821 = load double, double* %4820, align 1
  %4822 = getelementptr inbounds i8, i8* %4815, i64 8
  %4823 = bitcast i8* %4822 to i64*
  %4824 = load i64, i64* %4823, align 1
  %4825 = inttoptr i64 %4817 to double*
  %4826 = load double, double* %4825
  %4827 = fmul double %4821, %4826
  %4828 = bitcast i8* %4814 to double*
  store double %4827, double* %4828, align 1, !tbaa !2452
  %4829 = getelementptr inbounds i8, i8* %4814, i64 8
  %4830 = bitcast i8* %4829 to i64*
  store i64 %4824, i64* %4830, align 1, !tbaa !2452
  %4831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4833 = load i64, i64* %RBP
  %4834 = sub i64 %4833, 56
  %4835 = load i64, i64* %PC
  %4836 = add i64 %4835, 5
  store i64 %4836, i64* %PC
  %4837 = bitcast i8* %4832 to double*
  %4838 = load double, double* %4837, align 1
  %4839 = getelementptr inbounds i8, i8* %4832, i64 8
  %4840 = bitcast i8* %4839 to i64*
  %4841 = load i64, i64* %4840, align 1
  %4842 = inttoptr i64 %4834 to double*
  %4843 = load double, double* %4842
  %4844 = fsub double %4838, %4843
  %4845 = bitcast i8* %4831 to double*
  store double %4844, double* %4845, align 1, !tbaa !2452
  %4846 = getelementptr inbounds i8, i8* %4831, i64 8
  %4847 = bitcast i8* %4846 to i64*
  store i64 %4841, i64* %4847, align 1, !tbaa !2452
  %4848 = load i64, i64* %RBP
  %4849 = sub i64 %4848, 88
  %4850 = bitcast %union.vec128_t* %XMM0 to i8*
  %4851 = load i64, i64* %PC
  %4852 = add i64 %4851, 5
  store i64 %4852, i64* %PC
  %4853 = bitcast i8* %4850 to double*
  %4854 = load double, double* %4853, align 1
  %4855 = inttoptr i64 %4849 to double*
  store double %4854, double* %4855
  %4856 = load i64, i64* %RBP
  %4857 = sub i64 %4856, 16
  %4858 = load i64, i64* %PC
  %4859 = add i64 %4858, 4
  store i64 %4859, i64* %PC
  %4860 = inttoptr i64 %4857 to i64*
  %4861 = load i64, i64* %4860
  store i64 %4861, i64* %RDX, align 8, !tbaa !2428
  %4862 = load i64, i64* %RBP
  %4863 = sub i64 %4862, 28
  %4864 = load i64, i64* %PC
  %4865 = add i64 %4864, 3
  store i64 %4865, i64* %PC
  %4866 = inttoptr i64 %4863 to i32*
  %4867 = load i32, i32* %4866
  %4868 = zext i32 %4867 to i64
  store i64 %4868, i64* %RCX, align 8, !tbaa !2428
  %4869 = load i64, i64* %RCX
  %4870 = load i64, i64* %PC
  %4871 = add i64 %4870, 3
  store i64 %4871, i64* %PC
  %4872 = trunc i64 %4869 to i32
  %4873 = add i32 8, %4872
  %4874 = zext i32 %4873 to i64
  store i64 %4874, i64* %RCX, align 8, !tbaa !2428
  %4875 = icmp ult i32 %4873, %4872
  %4876 = icmp ult i32 %4873, 8
  %4877 = or i1 %4875, %4876
  %4878 = zext i1 %4877 to i8
  %4879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4878, i8* %4879, align 1, !tbaa !2432
  %4880 = and i32 %4873, 255
  %4881 = call i32 @llvm.ctpop.i32(i32 %4880) #17
  %4882 = trunc i32 %4881 to i8
  %4883 = and i8 %4882, 1
  %4884 = xor i8 %4883, 1
  %4885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4884, i8* %4885, align 1, !tbaa !2446
  %4886 = xor i64 8, %4869
  %4887 = trunc i64 %4886 to i32
  %4888 = xor i32 %4887, %4873
  %4889 = lshr i32 %4888, 4
  %4890 = trunc i32 %4889 to i8
  %4891 = and i8 %4890, 1
  %4892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4891, i8* %4892, align 1, !tbaa !2447
  %4893 = icmp eq i32 %4873, 0
  %4894 = zext i1 %4893 to i8
  %4895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4894, i8* %4895, align 1, !tbaa !2448
  %4896 = lshr i32 %4873, 31
  %4897 = trunc i32 %4896 to i8
  %4898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4897, i8* %4898, align 1, !tbaa !2449
  %4899 = lshr i32 %4872, 31
  %4900 = xor i32 %4896, %4899
  %4901 = add nuw nsw i32 %4900, %4896
  %4902 = icmp eq i32 %4901, 2
  %4903 = zext i1 %4902 to i8
  %4904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4903, i8* %4904, align 1, !tbaa !2450
  %4905 = load i32, i32* %ECX
  %4906 = zext i32 %4905 to i64
  %4907 = load i64, i64* %PC
  %4908 = add i64 %4907, 3
  store i64 %4908, i64* %PC
  %4909 = shl i64 %4906, 32
  %4910 = ashr exact i64 %4909, 32
  store i64 %4910, i64* %RSI, align 8, !tbaa !2428
  %4911 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4912 = load i64, i64* %RDX
  %4913 = load i64, i64* %RSI
  %4914 = mul i64 %4913, 8
  %4915 = add i64 %4914, %4912
  %4916 = load i64, i64* %PC
  %4917 = add i64 %4916, 5
  store i64 %4917, i64* %PC
  %4918 = inttoptr i64 %4915 to double*
  %4919 = load double, double* %4918
  %4920 = bitcast i8* %4911 to double*
  store double %4919, double* %4920, align 1, !tbaa !2452
  %4921 = getelementptr inbounds i8, i8* %4911, i64 8
  %4922 = bitcast i8* %4921 to double*
  store double 0.000000e+00, double* %4922, align 1, !tbaa !2452
  %4923 = load i64, i64* %RBP
  %4924 = sub i64 %4923, 16
  %4925 = load i64, i64* %PC
  %4926 = add i64 %4925, 4
  store i64 %4926, i64* %PC
  %4927 = inttoptr i64 %4924 to i64*
  %4928 = load i64, i64* %4927
  store i64 %4928, i64* %RDX, align 8, !tbaa !2428
  %4929 = load i64, i64* %RBP
  %4930 = sub i64 %4929, 28
  %4931 = load i64, i64* %PC
  %4932 = add i64 %4931, 3
  store i64 %4932, i64* %PC
  %4933 = inttoptr i64 %4930 to i32*
  %4934 = load i32, i32* %4933
  %4935 = zext i32 %4934 to i64
  store i64 %4935, i64* %RCX, align 8, !tbaa !2428
  %4936 = load i64, i64* %RCX
  %4937 = load i64, i64* %PC
  %4938 = add i64 %4937, 3
  store i64 %4938, i64* %PC
  %4939 = trunc i64 %4936 to i32
  %4940 = add i32 10, %4939
  %4941 = zext i32 %4940 to i64
  store i64 %4941, i64* %RCX, align 8, !tbaa !2428
  %4942 = icmp ult i32 %4940, %4939
  %4943 = icmp ult i32 %4940, 10
  %4944 = or i1 %4942, %4943
  %4945 = zext i1 %4944 to i8
  %4946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4945, i8* %4946, align 1, !tbaa !2432
  %4947 = and i32 %4940, 255
  %4948 = call i32 @llvm.ctpop.i32(i32 %4947) #17
  %4949 = trunc i32 %4948 to i8
  %4950 = and i8 %4949, 1
  %4951 = xor i8 %4950, 1
  %4952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4951, i8* %4952, align 1, !tbaa !2446
  %4953 = xor i64 10, %4936
  %4954 = trunc i64 %4953 to i32
  %4955 = xor i32 %4954, %4940
  %4956 = lshr i32 %4955, 4
  %4957 = trunc i32 %4956 to i8
  %4958 = and i8 %4957, 1
  %4959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4958, i8* %4959, align 1, !tbaa !2447
  %4960 = icmp eq i32 %4940, 0
  %4961 = zext i1 %4960 to i8
  %4962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4961, i8* %4962, align 1, !tbaa !2448
  %4963 = lshr i32 %4940, 31
  %4964 = trunc i32 %4963 to i8
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4964, i8* %4965, align 1, !tbaa !2449
  %4966 = lshr i32 %4939, 31
  %4967 = xor i32 %4963, %4966
  %4968 = add nuw nsw i32 %4967, %4963
  %4969 = icmp eq i32 %4968, 2
  %4970 = zext i1 %4969 to i8
  %4971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4970, i8* %4971, align 1, !tbaa !2450
  %4972 = load i32, i32* %ECX
  %4973 = zext i32 %4972 to i64
  %4974 = load i64, i64* %PC
  %4975 = add i64 %4974, 3
  store i64 %4975, i64* %PC
  %4976 = shl i64 %4973, 32
  %4977 = ashr exact i64 %4976, 32
  store i64 %4977, i64* %RSI, align 8, !tbaa !2428
  %4978 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4979 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4980 = load i64, i64* %RDX
  %4981 = load i64, i64* %RSI
  %4982 = mul i64 %4981, 8
  %4983 = add i64 %4982, %4980
  %4984 = load i64, i64* %PC
  %4985 = add i64 %4984, 5
  store i64 %4985, i64* %PC
  %4986 = bitcast i8* %4979 to double*
  %4987 = load double, double* %4986, align 1
  %4988 = getelementptr inbounds i8, i8* %4979, i64 8
  %4989 = bitcast i8* %4988 to i64*
  %4990 = load i64, i64* %4989, align 1
  %4991 = inttoptr i64 %4983 to double*
  %4992 = load double, double* %4991
  %4993 = fadd double %4987, %4992
  %4994 = bitcast i8* %4978 to double*
  store double %4993, double* %4994, align 1, !tbaa !2452
  %4995 = getelementptr inbounds i8, i8* %4978, i64 8
  %4996 = bitcast i8* %4995 to i64*
  store i64 %4990, i64* %4996, align 1, !tbaa !2452
  %4997 = load i64, i64* %RBP
  %4998 = sub i64 %4997, 96
  %4999 = bitcast %union.vec128_t* %XMM0 to i8*
  %5000 = load i64, i64* %PC
  %5001 = add i64 %5000, 5
  store i64 %5001, i64* %PC
  %5002 = bitcast i8* %4999 to double*
  %5003 = load double, double* %5002, align 1
  %5004 = inttoptr i64 %4998 to double*
  store double %5003, double* %5004
  %5005 = load i64, i64* %RBP
  %5006 = sub i64 %5005, 16
  %5007 = load i64, i64* %PC
  %5008 = add i64 %5007, 4
  store i64 %5008, i64* %PC
  %5009 = inttoptr i64 %5006 to i64*
  %5010 = load i64, i64* %5009
  store i64 %5010, i64* %RDX, align 8, !tbaa !2428
  %5011 = load i64, i64* %RBP
  %5012 = sub i64 %5011, 28
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 3
  store i64 %5014, i64* %PC
  %5015 = inttoptr i64 %5012 to i32*
  %5016 = load i32, i32* %5015
  %5017 = zext i32 %5016 to i64
  store i64 %5017, i64* %RCX, align 8, !tbaa !2428
  %5018 = load i64, i64* %RCX
  %5019 = load i64, i64* %PC
  %5020 = add i64 %5019, 3
  store i64 %5020, i64* %PC
  %5021 = trunc i64 %5018 to i32
  %5022 = add i32 9, %5021
  %5023 = zext i32 %5022 to i64
  store i64 %5023, i64* %RCX, align 8, !tbaa !2428
  %5024 = icmp ult i32 %5022, %5021
  %5025 = icmp ult i32 %5022, 9
  %5026 = or i1 %5024, %5025
  %5027 = zext i1 %5026 to i8
  %5028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5027, i8* %5028, align 1, !tbaa !2432
  %5029 = and i32 %5022, 255
  %5030 = call i32 @llvm.ctpop.i32(i32 %5029) #17
  %5031 = trunc i32 %5030 to i8
  %5032 = and i8 %5031, 1
  %5033 = xor i8 %5032, 1
  %5034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5033, i8* %5034, align 1, !tbaa !2446
  %5035 = xor i64 9, %5018
  %5036 = trunc i64 %5035 to i32
  %5037 = xor i32 %5036, %5022
  %5038 = lshr i32 %5037, 4
  %5039 = trunc i32 %5038 to i8
  %5040 = and i8 %5039, 1
  %5041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5040, i8* %5041, align 1, !tbaa !2447
  %5042 = icmp eq i32 %5022, 0
  %5043 = zext i1 %5042 to i8
  %5044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5043, i8* %5044, align 1, !tbaa !2448
  %5045 = lshr i32 %5022, 31
  %5046 = trunc i32 %5045 to i8
  %5047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5046, i8* %5047, align 1, !tbaa !2449
  %5048 = lshr i32 %5021, 31
  %5049 = xor i32 %5045, %5048
  %5050 = add nuw nsw i32 %5049, %5045
  %5051 = icmp eq i32 %5050, 2
  %5052 = zext i1 %5051 to i8
  %5053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5052, i8* %5053, align 1, !tbaa !2450
  %5054 = load i32, i32* %ECX
  %5055 = zext i32 %5054 to i64
  %5056 = load i64, i64* %PC
  %5057 = add i64 %5056, 3
  store i64 %5057, i64* %PC
  %5058 = shl i64 %5055, 32
  %5059 = ashr exact i64 %5058, 32
  store i64 %5059, i64* %RSI, align 8, !tbaa !2428
  %5060 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5061 = load i64, i64* %RDX
  %5062 = load i64, i64* %RSI
  %5063 = mul i64 %5062, 8
  %5064 = add i64 %5063, %5061
  %5065 = load i64, i64* %PC
  %5066 = add i64 %5065, 5
  store i64 %5066, i64* %PC
  %5067 = inttoptr i64 %5064 to double*
  %5068 = load double, double* %5067
  %5069 = bitcast i8* %5060 to double*
  store double %5068, double* %5069, align 1, !tbaa !2452
  %5070 = getelementptr inbounds i8, i8* %5060, i64 8
  %5071 = bitcast i8* %5070 to double*
  store double 0.000000e+00, double* %5071, align 1, !tbaa !2452
  %5072 = load i64, i64* %RBP
  %5073 = sub i64 %5072, 16
  %5074 = load i64, i64* %PC
  %5075 = add i64 %5074, 4
  store i64 %5075, i64* %PC
  %5076 = inttoptr i64 %5073 to i64*
  %5077 = load i64, i64* %5076
  store i64 %5077, i64* %RDX, align 8, !tbaa !2428
  %5078 = load i64, i64* %RBP
  %5079 = sub i64 %5078, 28
  %5080 = load i64, i64* %PC
  %5081 = add i64 %5080, 3
  store i64 %5081, i64* %PC
  %5082 = inttoptr i64 %5079 to i32*
  %5083 = load i32, i32* %5082
  %5084 = zext i32 %5083 to i64
  store i64 %5084, i64* %RCX, align 8, !tbaa !2428
  %5085 = load i64, i64* %RCX
  %5086 = load i64, i64* %PC
  %5087 = add i64 %5086, 3
  store i64 %5087, i64* %PC
  %5088 = trunc i64 %5085 to i32
  %5089 = add i32 11, %5088
  %5090 = zext i32 %5089 to i64
  store i64 %5090, i64* %RCX, align 8, !tbaa !2428
  %5091 = icmp ult i32 %5089, %5088
  %5092 = icmp ult i32 %5089, 11
  %5093 = or i1 %5091, %5092
  %5094 = zext i1 %5093 to i8
  %5095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5094, i8* %5095, align 1, !tbaa !2432
  %5096 = and i32 %5089, 255
  %5097 = call i32 @llvm.ctpop.i32(i32 %5096) #17
  %5098 = trunc i32 %5097 to i8
  %5099 = and i8 %5098, 1
  %5100 = xor i8 %5099, 1
  %5101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5100, i8* %5101, align 1, !tbaa !2446
  %5102 = xor i64 11, %5085
  %5103 = trunc i64 %5102 to i32
  %5104 = xor i32 %5103, %5089
  %5105 = lshr i32 %5104, 4
  %5106 = trunc i32 %5105 to i8
  %5107 = and i8 %5106, 1
  %5108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5107, i8* %5108, align 1, !tbaa !2447
  %5109 = icmp eq i32 %5089, 0
  %5110 = zext i1 %5109 to i8
  %5111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5110, i8* %5111, align 1, !tbaa !2448
  %5112 = lshr i32 %5089, 31
  %5113 = trunc i32 %5112 to i8
  %5114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5113, i8* %5114, align 1, !tbaa !2449
  %5115 = lshr i32 %5088, 31
  %5116 = xor i32 %5112, %5115
  %5117 = add nuw nsw i32 %5116, %5112
  %5118 = icmp eq i32 %5117, 2
  %5119 = zext i1 %5118 to i8
  %5120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5119, i8* %5120, align 1, !tbaa !2450
  %5121 = load i32, i32* %ECX
  %5122 = zext i32 %5121 to i64
  %5123 = load i64, i64* %PC
  %5124 = add i64 %5123, 3
  store i64 %5124, i64* %PC
  %5125 = shl i64 %5122, 32
  %5126 = ashr exact i64 %5125, 32
  store i64 %5126, i64* %RSI, align 8, !tbaa !2428
  %5127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5129 = load i64, i64* %RDX
  %5130 = load i64, i64* %RSI
  %5131 = mul i64 %5130, 8
  %5132 = add i64 %5131, %5129
  %5133 = load i64, i64* %PC
  %5134 = add i64 %5133, 5
  store i64 %5134, i64* %PC
  %5135 = bitcast i8* %5128 to double*
  %5136 = load double, double* %5135, align 1
  %5137 = getelementptr inbounds i8, i8* %5128, i64 8
  %5138 = bitcast i8* %5137 to i64*
  %5139 = load i64, i64* %5138, align 1
  %5140 = inttoptr i64 %5132 to double*
  %5141 = load double, double* %5140
  %5142 = fadd double %5136, %5141
  %5143 = bitcast i8* %5127 to double*
  store double %5142, double* %5143, align 1, !tbaa !2452
  %5144 = getelementptr inbounds i8, i8* %5127, i64 8
  %5145 = bitcast i8* %5144 to i64*
  store i64 %5139, i64* %5145, align 1, !tbaa !2452
  %5146 = load i64, i64* %RBP
  %5147 = sub i64 %5146, 104
  %5148 = bitcast %union.vec128_t* %XMM0 to i8*
  %5149 = load i64, i64* %PC
  %5150 = add i64 %5149, 5
  store i64 %5150, i64* %PC
  %5151 = bitcast i8* %5148 to double*
  %5152 = load double, double* %5151, align 1
  %5153 = inttoptr i64 %5147 to double*
  store double %5152, double* %5153
  %5154 = load i64, i64* %RBP
  %5155 = sub i64 %5154, 16
  %5156 = load i64, i64* %PC
  %5157 = add i64 %5156, 4
  store i64 %5157, i64* %PC
  %5158 = inttoptr i64 %5155 to i64*
  %5159 = load i64, i64* %5158
  store i64 %5159, i64* %RDX, align 8, !tbaa !2428
  %5160 = load i64, i64* %RBP
  %5161 = sub i64 %5160, 28
  %5162 = load i64, i64* %PC
  %5163 = add i64 %5162, 3
  store i64 %5163, i64* %PC
  %5164 = inttoptr i64 %5161 to i32*
  %5165 = load i32, i32* %5164
  %5166 = zext i32 %5165 to i64
  store i64 %5166, i64* %RCX, align 8, !tbaa !2428
  %5167 = load i64, i64* %RCX
  %5168 = load i64, i64* %PC
  %5169 = add i64 %5168, 3
  store i64 %5169, i64* %PC
  %5170 = trunc i64 %5167 to i32
  %5171 = add i32 8, %5170
  %5172 = zext i32 %5171 to i64
  store i64 %5172, i64* %RCX, align 8, !tbaa !2428
  %5173 = icmp ult i32 %5171, %5170
  %5174 = icmp ult i32 %5171, 8
  %5175 = or i1 %5173, %5174
  %5176 = zext i1 %5175 to i8
  %5177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5176, i8* %5177, align 1, !tbaa !2432
  %5178 = and i32 %5171, 255
  %5179 = call i32 @llvm.ctpop.i32(i32 %5178) #17
  %5180 = trunc i32 %5179 to i8
  %5181 = and i8 %5180, 1
  %5182 = xor i8 %5181, 1
  %5183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5182, i8* %5183, align 1, !tbaa !2446
  %5184 = xor i64 8, %5167
  %5185 = trunc i64 %5184 to i32
  %5186 = xor i32 %5185, %5171
  %5187 = lshr i32 %5186, 4
  %5188 = trunc i32 %5187 to i8
  %5189 = and i8 %5188, 1
  %5190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5189, i8* %5190, align 1, !tbaa !2447
  %5191 = icmp eq i32 %5171, 0
  %5192 = zext i1 %5191 to i8
  %5193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5192, i8* %5193, align 1, !tbaa !2448
  %5194 = lshr i32 %5171, 31
  %5195 = trunc i32 %5194 to i8
  %5196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5195, i8* %5196, align 1, !tbaa !2449
  %5197 = lshr i32 %5170, 31
  %5198 = xor i32 %5194, %5197
  %5199 = add nuw nsw i32 %5198, %5194
  %5200 = icmp eq i32 %5199, 2
  %5201 = zext i1 %5200 to i8
  %5202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5201, i8* %5202, align 1, !tbaa !2450
  %5203 = load i32, i32* %ECX
  %5204 = zext i32 %5203 to i64
  %5205 = load i64, i64* %PC
  %5206 = add i64 %5205, 3
  store i64 %5206, i64* %PC
  %5207 = shl i64 %5204, 32
  %5208 = ashr exact i64 %5207, 32
  store i64 %5208, i64* %RSI, align 8, !tbaa !2428
  %5209 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5210 = load i64, i64* %RDX
  %5211 = load i64, i64* %RSI
  %5212 = mul i64 %5211, 8
  %5213 = add i64 %5212, %5210
  %5214 = load i64, i64* %PC
  %5215 = add i64 %5214, 5
  store i64 %5215, i64* %PC
  %5216 = inttoptr i64 %5213 to double*
  %5217 = load double, double* %5216
  %5218 = bitcast i8* %5209 to double*
  store double %5217, double* %5218, align 1, !tbaa !2452
  %5219 = getelementptr inbounds i8, i8* %5209, i64 8
  %5220 = bitcast i8* %5219 to double*
  store double 0.000000e+00, double* %5220, align 1, !tbaa !2452
  %5221 = load i64, i64* %RBP
  %5222 = sub i64 %5221, 16
  %5223 = load i64, i64* %PC
  %5224 = add i64 %5223, 4
  store i64 %5224, i64* %PC
  %5225 = inttoptr i64 %5222 to i64*
  %5226 = load i64, i64* %5225
  store i64 %5226, i64* %RDX, align 8, !tbaa !2428
  %5227 = load i64, i64* %RBP
  %5228 = sub i64 %5227, 28
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 3
  store i64 %5230, i64* %PC
  %5231 = inttoptr i64 %5228 to i32*
  %5232 = load i32, i32* %5231
  %5233 = zext i32 %5232 to i64
  store i64 %5233, i64* %RCX, align 8, !tbaa !2428
  %5234 = load i64, i64* %RCX
  %5235 = load i64, i64* %PC
  %5236 = add i64 %5235, 3
  store i64 %5236, i64* %PC
  %5237 = trunc i64 %5234 to i32
  %5238 = add i32 10, %5237
  %5239 = zext i32 %5238 to i64
  store i64 %5239, i64* %RCX, align 8, !tbaa !2428
  %5240 = icmp ult i32 %5238, %5237
  %5241 = icmp ult i32 %5238, 10
  %5242 = or i1 %5240, %5241
  %5243 = zext i1 %5242 to i8
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5243, i8* %5244, align 1, !tbaa !2432
  %5245 = and i32 %5238, 255
  %5246 = call i32 @llvm.ctpop.i32(i32 %5245) #17
  %5247 = trunc i32 %5246 to i8
  %5248 = and i8 %5247, 1
  %5249 = xor i8 %5248, 1
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5249, i8* %5250, align 1, !tbaa !2446
  %5251 = xor i64 10, %5234
  %5252 = trunc i64 %5251 to i32
  %5253 = xor i32 %5252, %5238
  %5254 = lshr i32 %5253, 4
  %5255 = trunc i32 %5254 to i8
  %5256 = and i8 %5255, 1
  %5257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5256, i8* %5257, align 1, !tbaa !2447
  %5258 = icmp eq i32 %5238, 0
  %5259 = zext i1 %5258 to i8
  %5260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5259, i8* %5260, align 1, !tbaa !2448
  %5261 = lshr i32 %5238, 31
  %5262 = trunc i32 %5261 to i8
  %5263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5262, i8* %5263, align 1, !tbaa !2449
  %5264 = lshr i32 %5237, 31
  %5265 = xor i32 %5261, %5264
  %5266 = add nuw nsw i32 %5265, %5261
  %5267 = icmp eq i32 %5266, 2
  %5268 = zext i1 %5267 to i8
  %5269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5268, i8* %5269, align 1, !tbaa !2450
  %5270 = load i32, i32* %ECX
  %5271 = zext i32 %5270 to i64
  %5272 = load i64, i64* %PC
  %5273 = add i64 %5272, 3
  store i64 %5273, i64* %PC
  %5274 = shl i64 %5271, 32
  %5275 = ashr exact i64 %5274, 32
  store i64 %5275, i64* %RSI, align 8, !tbaa !2428
  %5276 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5277 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5278 = load i64, i64* %RDX
  %5279 = load i64, i64* %RSI
  %5280 = mul i64 %5279, 8
  %5281 = add i64 %5280, %5278
  %5282 = load i64, i64* %PC
  %5283 = add i64 %5282, 5
  store i64 %5283, i64* %PC
  %5284 = bitcast i8* %5277 to double*
  %5285 = load double, double* %5284, align 1
  %5286 = getelementptr inbounds i8, i8* %5277, i64 8
  %5287 = bitcast i8* %5286 to i64*
  %5288 = load i64, i64* %5287, align 1
  %5289 = inttoptr i64 %5281 to double*
  %5290 = load double, double* %5289
  %5291 = fsub double %5285, %5290
  %5292 = bitcast i8* %5276 to double*
  store double %5291, double* %5292, align 1, !tbaa !2452
  %5293 = getelementptr inbounds i8, i8* %5276, i64 8
  %5294 = bitcast i8* %5293 to i64*
  store i64 %5288, i64* %5294, align 1, !tbaa !2452
  %5295 = load i64, i64* %RBP
  %5296 = sub i64 %5295, 112
  %5297 = bitcast %union.vec128_t* %XMM0 to i8*
  %5298 = load i64, i64* %PC
  %5299 = add i64 %5298, 5
  store i64 %5299, i64* %PC
  %5300 = bitcast i8* %5297 to double*
  %5301 = load double, double* %5300, align 1
  %5302 = inttoptr i64 %5296 to double*
  store double %5301, double* %5302
  %5303 = load i64, i64* %RBP
  %5304 = sub i64 %5303, 16
  %5305 = load i64, i64* %PC
  %5306 = add i64 %5305, 4
  store i64 %5306, i64* %PC
  %5307 = inttoptr i64 %5304 to i64*
  %5308 = load i64, i64* %5307
  store i64 %5308, i64* %RDX, align 8, !tbaa !2428
  %5309 = load i64, i64* %RBP
  %5310 = sub i64 %5309, 28
  %5311 = load i64, i64* %PC
  %5312 = add i64 %5311, 3
  store i64 %5312, i64* %PC
  %5313 = inttoptr i64 %5310 to i32*
  %5314 = load i32, i32* %5313
  %5315 = zext i32 %5314 to i64
  store i64 %5315, i64* %RCX, align 8, !tbaa !2428
  %5316 = load i64, i64* %RCX
  %5317 = load i64, i64* %PC
  %5318 = add i64 %5317, 3
  store i64 %5318, i64* %PC
  %5319 = trunc i64 %5316 to i32
  %5320 = add i32 9, %5319
  %5321 = zext i32 %5320 to i64
  store i64 %5321, i64* %RCX, align 8, !tbaa !2428
  %5322 = icmp ult i32 %5320, %5319
  %5323 = icmp ult i32 %5320, 9
  %5324 = or i1 %5322, %5323
  %5325 = zext i1 %5324 to i8
  %5326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5325, i8* %5326, align 1, !tbaa !2432
  %5327 = and i32 %5320, 255
  %5328 = call i32 @llvm.ctpop.i32(i32 %5327) #17
  %5329 = trunc i32 %5328 to i8
  %5330 = and i8 %5329, 1
  %5331 = xor i8 %5330, 1
  %5332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5331, i8* %5332, align 1, !tbaa !2446
  %5333 = xor i64 9, %5316
  %5334 = trunc i64 %5333 to i32
  %5335 = xor i32 %5334, %5320
  %5336 = lshr i32 %5335, 4
  %5337 = trunc i32 %5336 to i8
  %5338 = and i8 %5337, 1
  %5339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5338, i8* %5339, align 1, !tbaa !2447
  %5340 = icmp eq i32 %5320, 0
  %5341 = zext i1 %5340 to i8
  %5342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5341, i8* %5342, align 1, !tbaa !2448
  %5343 = lshr i32 %5320, 31
  %5344 = trunc i32 %5343 to i8
  %5345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5344, i8* %5345, align 1, !tbaa !2449
  %5346 = lshr i32 %5319, 31
  %5347 = xor i32 %5343, %5346
  %5348 = add nuw nsw i32 %5347, %5343
  %5349 = icmp eq i32 %5348, 2
  %5350 = zext i1 %5349 to i8
  %5351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5350, i8* %5351, align 1, !tbaa !2450
  %5352 = load i32, i32* %ECX
  %5353 = zext i32 %5352 to i64
  %5354 = load i64, i64* %PC
  %5355 = add i64 %5354, 3
  store i64 %5355, i64* %PC
  %5356 = shl i64 %5353, 32
  %5357 = ashr exact i64 %5356, 32
  store i64 %5357, i64* %RSI, align 8, !tbaa !2428
  %5358 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5359 = load i64, i64* %RDX
  %5360 = load i64, i64* %RSI
  %5361 = mul i64 %5360, 8
  %5362 = add i64 %5361, %5359
  %5363 = load i64, i64* %PC
  %5364 = add i64 %5363, 5
  store i64 %5364, i64* %PC
  %5365 = inttoptr i64 %5362 to double*
  %5366 = load double, double* %5365
  %5367 = bitcast i8* %5358 to double*
  store double %5366, double* %5367, align 1, !tbaa !2452
  %5368 = getelementptr inbounds i8, i8* %5358, i64 8
  %5369 = bitcast i8* %5368 to double*
  store double 0.000000e+00, double* %5369, align 1, !tbaa !2452
  %5370 = load i64, i64* %RBP
  %5371 = sub i64 %5370, 16
  %5372 = load i64, i64* %PC
  %5373 = add i64 %5372, 4
  store i64 %5373, i64* %PC
  %5374 = inttoptr i64 %5371 to i64*
  %5375 = load i64, i64* %5374
  store i64 %5375, i64* %RDX, align 8, !tbaa !2428
  %5376 = load i64, i64* %RBP
  %5377 = sub i64 %5376, 28
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 3
  store i64 %5379, i64* %PC
  %5380 = inttoptr i64 %5377 to i32*
  %5381 = load i32, i32* %5380
  %5382 = zext i32 %5381 to i64
  store i64 %5382, i64* %RCX, align 8, !tbaa !2428
  %5383 = load i64, i64* %RCX
  %5384 = load i64, i64* %PC
  %5385 = add i64 %5384, 3
  store i64 %5385, i64* %PC
  %5386 = trunc i64 %5383 to i32
  %5387 = add i32 11, %5386
  %5388 = zext i32 %5387 to i64
  store i64 %5388, i64* %RCX, align 8, !tbaa !2428
  %5389 = icmp ult i32 %5387, %5386
  %5390 = icmp ult i32 %5387, 11
  %5391 = or i1 %5389, %5390
  %5392 = zext i1 %5391 to i8
  %5393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5392, i8* %5393, align 1, !tbaa !2432
  %5394 = and i32 %5387, 255
  %5395 = call i32 @llvm.ctpop.i32(i32 %5394) #17
  %5396 = trunc i32 %5395 to i8
  %5397 = and i8 %5396, 1
  %5398 = xor i8 %5397, 1
  %5399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5398, i8* %5399, align 1, !tbaa !2446
  %5400 = xor i64 11, %5383
  %5401 = trunc i64 %5400 to i32
  %5402 = xor i32 %5401, %5387
  %5403 = lshr i32 %5402, 4
  %5404 = trunc i32 %5403 to i8
  %5405 = and i8 %5404, 1
  %5406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5405, i8* %5406, align 1, !tbaa !2447
  %5407 = icmp eq i32 %5387, 0
  %5408 = zext i1 %5407 to i8
  %5409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5408, i8* %5409, align 1, !tbaa !2448
  %5410 = lshr i32 %5387, 31
  %5411 = trunc i32 %5410 to i8
  %5412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5411, i8* %5412, align 1, !tbaa !2449
  %5413 = lshr i32 %5386, 31
  %5414 = xor i32 %5410, %5413
  %5415 = add nuw nsw i32 %5414, %5410
  %5416 = icmp eq i32 %5415, 2
  %5417 = zext i1 %5416 to i8
  %5418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5417, i8* %5418, align 1, !tbaa !2450
  %5419 = load i32, i32* %ECX
  %5420 = zext i32 %5419 to i64
  %5421 = load i64, i64* %PC
  %5422 = add i64 %5421, 3
  store i64 %5422, i64* %PC
  %5423 = shl i64 %5420, 32
  %5424 = ashr exact i64 %5423, 32
  store i64 %5424, i64* %RSI, align 8, !tbaa !2428
  %5425 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5427 = load i64, i64* %RDX
  %5428 = load i64, i64* %RSI
  %5429 = mul i64 %5428, 8
  %5430 = add i64 %5429, %5427
  %5431 = load i64, i64* %PC
  %5432 = add i64 %5431, 5
  store i64 %5432, i64* %PC
  %5433 = bitcast i8* %5426 to double*
  %5434 = load double, double* %5433, align 1
  %5435 = getelementptr inbounds i8, i8* %5426, i64 8
  %5436 = bitcast i8* %5435 to i64*
  %5437 = load i64, i64* %5436, align 1
  %5438 = inttoptr i64 %5430 to double*
  %5439 = load double, double* %5438
  %5440 = fsub double %5434, %5439
  %5441 = bitcast i8* %5425 to double*
  store double %5440, double* %5441, align 1, !tbaa !2452
  %5442 = getelementptr inbounds i8, i8* %5425, i64 8
  %5443 = bitcast i8* %5442 to i64*
  store i64 %5437, i64* %5443, align 1, !tbaa !2452
  %5444 = load i64, i64* %RBP
  %5445 = sub i64 %5444, 120
  %5446 = bitcast %union.vec128_t* %XMM0 to i8*
  %5447 = load i64, i64* %PC
  %5448 = add i64 %5447, 5
  store i64 %5448, i64* %PC
  %5449 = bitcast i8* %5446 to double*
  %5450 = load double, double* %5449, align 1
  %5451 = inttoptr i64 %5445 to double*
  store double %5450, double* %5451
  %5452 = load i64, i64* %RBP
  %5453 = sub i64 %5452, 16
  %5454 = load i64, i64* %PC
  %5455 = add i64 %5454, 4
  store i64 %5455, i64* %PC
  %5456 = inttoptr i64 %5453 to i64*
  %5457 = load i64, i64* %5456
  store i64 %5457, i64* %RDX, align 8, !tbaa !2428
  %5458 = load i64, i64* %RBP
  %5459 = sub i64 %5458, 28
  %5460 = load i64, i64* %PC
  %5461 = add i64 %5460, 3
  store i64 %5461, i64* %PC
  %5462 = inttoptr i64 %5459 to i32*
  %5463 = load i32, i32* %5462
  %5464 = zext i32 %5463 to i64
  store i64 %5464, i64* %RCX, align 8, !tbaa !2428
  %5465 = load i64, i64* %RCX
  %5466 = load i64, i64* %PC
  %5467 = add i64 %5466, 3
  store i64 %5467, i64* %PC
  %5468 = trunc i64 %5465 to i32
  %5469 = add i32 12, %5468
  %5470 = zext i32 %5469 to i64
  store i64 %5470, i64* %RCX, align 8, !tbaa !2428
  %5471 = icmp ult i32 %5469, %5468
  %5472 = icmp ult i32 %5469, 12
  %5473 = or i1 %5471, %5472
  %5474 = zext i1 %5473 to i8
  %5475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5474, i8* %5475, align 1, !tbaa !2432
  %5476 = and i32 %5469, 255
  %5477 = call i32 @llvm.ctpop.i32(i32 %5476) #17
  %5478 = trunc i32 %5477 to i8
  %5479 = and i8 %5478, 1
  %5480 = xor i8 %5479, 1
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5480, i8* %5481, align 1, !tbaa !2446
  %5482 = xor i64 12, %5465
  %5483 = trunc i64 %5482 to i32
  %5484 = xor i32 %5483, %5469
  %5485 = lshr i32 %5484, 4
  %5486 = trunc i32 %5485 to i8
  %5487 = and i8 %5486, 1
  %5488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5487, i8* %5488, align 1, !tbaa !2447
  %5489 = icmp eq i32 %5469, 0
  %5490 = zext i1 %5489 to i8
  %5491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5490, i8* %5491, align 1, !tbaa !2448
  %5492 = lshr i32 %5469, 31
  %5493 = trunc i32 %5492 to i8
  %5494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5493, i8* %5494, align 1, !tbaa !2449
  %5495 = lshr i32 %5468, 31
  %5496 = xor i32 %5492, %5495
  %5497 = add nuw nsw i32 %5496, %5492
  %5498 = icmp eq i32 %5497, 2
  %5499 = zext i1 %5498 to i8
  %5500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5499, i8* %5500, align 1, !tbaa !2450
  %5501 = load i32, i32* %ECX
  %5502 = zext i32 %5501 to i64
  %5503 = load i64, i64* %PC
  %5504 = add i64 %5503, 3
  store i64 %5504, i64* %PC
  %5505 = shl i64 %5502, 32
  %5506 = ashr exact i64 %5505, 32
  store i64 %5506, i64* %RSI, align 8, !tbaa !2428
  %5507 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5508 = load i64, i64* %RDX
  %5509 = load i64, i64* %RSI
  %5510 = mul i64 %5509, 8
  %5511 = add i64 %5510, %5508
  %5512 = load i64, i64* %PC
  %5513 = add i64 %5512, 5
  store i64 %5513, i64* %PC
  %5514 = inttoptr i64 %5511 to double*
  %5515 = load double, double* %5514
  %5516 = bitcast i8* %5507 to double*
  store double %5515, double* %5516, align 1, !tbaa !2452
  %5517 = getelementptr inbounds i8, i8* %5507, i64 8
  %5518 = bitcast i8* %5517 to double*
  store double 0.000000e+00, double* %5518, align 1, !tbaa !2452
  %5519 = load i64, i64* %RBP
  %5520 = sub i64 %5519, 16
  %5521 = load i64, i64* %PC
  %5522 = add i64 %5521, 4
  store i64 %5522, i64* %PC
  %5523 = inttoptr i64 %5520 to i64*
  %5524 = load i64, i64* %5523
  store i64 %5524, i64* %RDX, align 8, !tbaa !2428
  %5525 = load i64, i64* %RBP
  %5526 = sub i64 %5525, 28
  %5527 = load i64, i64* %PC
  %5528 = add i64 %5527, 3
  store i64 %5528, i64* %PC
  %5529 = inttoptr i64 %5526 to i32*
  %5530 = load i32, i32* %5529
  %5531 = zext i32 %5530 to i64
  store i64 %5531, i64* %RCX, align 8, !tbaa !2428
  %5532 = load i64, i64* %RCX
  %5533 = load i64, i64* %PC
  %5534 = add i64 %5533, 3
  store i64 %5534, i64* %PC
  %5535 = trunc i64 %5532 to i32
  %5536 = add i32 14, %5535
  %5537 = zext i32 %5536 to i64
  store i64 %5537, i64* %RCX, align 8, !tbaa !2428
  %5538 = icmp ult i32 %5536, %5535
  %5539 = icmp ult i32 %5536, 14
  %5540 = or i1 %5538, %5539
  %5541 = zext i1 %5540 to i8
  %5542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5541, i8* %5542, align 1, !tbaa !2432
  %5543 = and i32 %5536, 255
  %5544 = call i32 @llvm.ctpop.i32(i32 %5543) #17
  %5545 = trunc i32 %5544 to i8
  %5546 = and i8 %5545, 1
  %5547 = xor i8 %5546, 1
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5547, i8* %5548, align 1, !tbaa !2446
  %5549 = xor i64 14, %5532
  %5550 = trunc i64 %5549 to i32
  %5551 = xor i32 %5550, %5536
  %5552 = lshr i32 %5551, 4
  %5553 = trunc i32 %5552 to i8
  %5554 = and i8 %5553, 1
  %5555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5554, i8* %5555, align 1, !tbaa !2447
  %5556 = icmp eq i32 %5536, 0
  %5557 = zext i1 %5556 to i8
  %5558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5557, i8* %5558, align 1, !tbaa !2448
  %5559 = lshr i32 %5536, 31
  %5560 = trunc i32 %5559 to i8
  %5561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5560, i8* %5561, align 1, !tbaa !2449
  %5562 = lshr i32 %5535, 31
  %5563 = xor i32 %5559, %5562
  %5564 = add nuw nsw i32 %5563, %5559
  %5565 = icmp eq i32 %5564, 2
  %5566 = zext i1 %5565 to i8
  %5567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5566, i8* %5567, align 1, !tbaa !2450
  %5568 = load i32, i32* %ECX
  %5569 = zext i32 %5568 to i64
  %5570 = load i64, i64* %PC
  %5571 = add i64 %5570, 3
  store i64 %5571, i64* %PC
  %5572 = shl i64 %5569, 32
  %5573 = ashr exact i64 %5572, 32
  store i64 %5573, i64* %RSI, align 8, !tbaa !2428
  %5574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5576 = load i64, i64* %RDX
  %5577 = load i64, i64* %RSI
  %5578 = mul i64 %5577, 8
  %5579 = add i64 %5578, %5576
  %5580 = load i64, i64* %PC
  %5581 = add i64 %5580, 5
  store i64 %5581, i64* %PC
  %5582 = bitcast i8* %5575 to double*
  %5583 = load double, double* %5582, align 1
  %5584 = getelementptr inbounds i8, i8* %5575, i64 8
  %5585 = bitcast i8* %5584 to i64*
  %5586 = load i64, i64* %5585, align 1
  %5587 = inttoptr i64 %5579 to double*
  %5588 = load double, double* %5587
  %5589 = fadd double %5583, %5588
  %5590 = bitcast i8* %5574 to double*
  store double %5589, double* %5590, align 1, !tbaa !2452
  %5591 = getelementptr inbounds i8, i8* %5574, i64 8
  %5592 = bitcast i8* %5591 to i64*
  store i64 %5586, i64* %5592, align 1, !tbaa !2452
  %5593 = load i64, i64* %RBP
  %5594 = sub i64 %5593, 128
  %5595 = bitcast %union.vec128_t* %XMM0 to i8*
  %5596 = load i64, i64* %PC
  %5597 = add i64 %5596, 5
  store i64 %5597, i64* %PC
  %5598 = bitcast i8* %5595 to double*
  %5599 = load double, double* %5598, align 1
  %5600 = inttoptr i64 %5594 to double*
  store double %5599, double* %5600
  %5601 = load i64, i64* %RBP
  %5602 = sub i64 %5601, 16
  %5603 = load i64, i64* %PC
  %5604 = add i64 %5603, 4
  store i64 %5604, i64* %PC
  %5605 = inttoptr i64 %5602 to i64*
  %5606 = load i64, i64* %5605
  store i64 %5606, i64* %RDX, align 8, !tbaa !2428
  %5607 = load i64, i64* %RBP
  %5608 = sub i64 %5607, 28
  %5609 = load i64, i64* %PC
  %5610 = add i64 %5609, 3
  store i64 %5610, i64* %PC
  %5611 = inttoptr i64 %5608 to i32*
  %5612 = load i32, i32* %5611
  %5613 = zext i32 %5612 to i64
  store i64 %5613, i64* %RCX, align 8, !tbaa !2428
  %5614 = load i64, i64* %RCX
  %5615 = load i64, i64* %PC
  %5616 = add i64 %5615, 3
  store i64 %5616, i64* %PC
  %5617 = trunc i64 %5614 to i32
  %5618 = add i32 13, %5617
  %5619 = zext i32 %5618 to i64
  store i64 %5619, i64* %RCX, align 8, !tbaa !2428
  %5620 = icmp ult i32 %5618, %5617
  %5621 = icmp ult i32 %5618, 13
  %5622 = or i1 %5620, %5621
  %5623 = zext i1 %5622 to i8
  %5624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5623, i8* %5624, align 1, !tbaa !2432
  %5625 = and i32 %5618, 255
  %5626 = call i32 @llvm.ctpop.i32(i32 %5625) #17
  %5627 = trunc i32 %5626 to i8
  %5628 = and i8 %5627, 1
  %5629 = xor i8 %5628, 1
  %5630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5629, i8* %5630, align 1, !tbaa !2446
  %5631 = xor i64 13, %5614
  %5632 = trunc i64 %5631 to i32
  %5633 = xor i32 %5632, %5618
  %5634 = lshr i32 %5633, 4
  %5635 = trunc i32 %5634 to i8
  %5636 = and i8 %5635, 1
  %5637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5636, i8* %5637, align 1, !tbaa !2447
  %5638 = icmp eq i32 %5618, 0
  %5639 = zext i1 %5638 to i8
  %5640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5639, i8* %5640, align 1, !tbaa !2448
  %5641 = lshr i32 %5618, 31
  %5642 = trunc i32 %5641 to i8
  %5643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5642, i8* %5643, align 1, !tbaa !2449
  %5644 = lshr i32 %5617, 31
  %5645 = xor i32 %5641, %5644
  %5646 = add nuw nsw i32 %5645, %5641
  %5647 = icmp eq i32 %5646, 2
  %5648 = zext i1 %5647 to i8
  %5649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5648, i8* %5649, align 1, !tbaa !2450
  %5650 = load i32, i32* %ECX
  %5651 = zext i32 %5650 to i64
  %5652 = load i64, i64* %PC
  %5653 = add i64 %5652, 3
  store i64 %5653, i64* %PC
  %5654 = shl i64 %5651, 32
  %5655 = ashr exact i64 %5654, 32
  store i64 %5655, i64* %RSI, align 8, !tbaa !2428
  %5656 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5657 = load i64, i64* %RDX
  %5658 = load i64, i64* %RSI
  %5659 = mul i64 %5658, 8
  %5660 = add i64 %5659, %5657
  %5661 = load i64, i64* %PC
  %5662 = add i64 %5661, 5
  store i64 %5662, i64* %PC
  %5663 = inttoptr i64 %5660 to double*
  %5664 = load double, double* %5663
  %5665 = bitcast i8* %5656 to double*
  store double %5664, double* %5665, align 1, !tbaa !2452
  %5666 = getelementptr inbounds i8, i8* %5656, i64 8
  %5667 = bitcast i8* %5666 to double*
  store double 0.000000e+00, double* %5667, align 1, !tbaa !2452
  %5668 = load i64, i64* %RBP
  %5669 = sub i64 %5668, 16
  %5670 = load i64, i64* %PC
  %5671 = add i64 %5670, 4
  store i64 %5671, i64* %PC
  %5672 = inttoptr i64 %5669 to i64*
  %5673 = load i64, i64* %5672
  store i64 %5673, i64* %RDX, align 8, !tbaa !2428
  %5674 = load i64, i64* %RBP
  %5675 = sub i64 %5674, 28
  %5676 = load i64, i64* %PC
  %5677 = add i64 %5676, 3
  store i64 %5677, i64* %PC
  %5678 = inttoptr i64 %5675 to i32*
  %5679 = load i32, i32* %5678
  %5680 = zext i32 %5679 to i64
  store i64 %5680, i64* %RCX, align 8, !tbaa !2428
  %5681 = load i64, i64* %RCX
  %5682 = load i64, i64* %PC
  %5683 = add i64 %5682, 3
  store i64 %5683, i64* %PC
  %5684 = trunc i64 %5681 to i32
  %5685 = add i32 15, %5684
  %5686 = zext i32 %5685 to i64
  store i64 %5686, i64* %RCX, align 8, !tbaa !2428
  %5687 = icmp ult i32 %5685, %5684
  %5688 = icmp ult i32 %5685, 15
  %5689 = or i1 %5687, %5688
  %5690 = zext i1 %5689 to i8
  %5691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5690, i8* %5691, align 1, !tbaa !2432
  %5692 = and i32 %5685, 255
  %5693 = call i32 @llvm.ctpop.i32(i32 %5692) #17
  %5694 = trunc i32 %5693 to i8
  %5695 = and i8 %5694, 1
  %5696 = xor i8 %5695, 1
  %5697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5696, i8* %5697, align 1, !tbaa !2446
  %5698 = xor i64 15, %5681
  %5699 = trunc i64 %5698 to i32
  %5700 = xor i32 %5699, %5685
  %5701 = lshr i32 %5700, 4
  %5702 = trunc i32 %5701 to i8
  %5703 = and i8 %5702, 1
  %5704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5703, i8* %5704, align 1, !tbaa !2447
  %5705 = icmp eq i32 %5685, 0
  %5706 = zext i1 %5705 to i8
  %5707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5706, i8* %5707, align 1, !tbaa !2448
  %5708 = lshr i32 %5685, 31
  %5709 = trunc i32 %5708 to i8
  %5710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5709, i8* %5710, align 1, !tbaa !2449
  %5711 = lshr i32 %5684, 31
  %5712 = xor i32 %5708, %5711
  %5713 = add nuw nsw i32 %5712, %5708
  %5714 = icmp eq i32 %5713, 2
  %5715 = zext i1 %5714 to i8
  %5716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5715, i8* %5716, align 1, !tbaa !2450
  %5717 = load i32, i32* %ECX
  %5718 = zext i32 %5717 to i64
  %5719 = load i64, i64* %PC
  %5720 = add i64 %5719, 3
  store i64 %5720, i64* %PC
  %5721 = shl i64 %5718, 32
  %5722 = ashr exact i64 %5721, 32
  store i64 %5722, i64* %RSI, align 8, !tbaa !2428
  %5723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5724 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5725 = load i64, i64* %RDX
  %5726 = load i64, i64* %RSI
  %5727 = mul i64 %5726, 8
  %5728 = add i64 %5727, %5725
  %5729 = load i64, i64* %PC
  %5730 = add i64 %5729, 5
  store i64 %5730, i64* %PC
  %5731 = bitcast i8* %5724 to double*
  %5732 = load double, double* %5731, align 1
  %5733 = getelementptr inbounds i8, i8* %5724, i64 8
  %5734 = bitcast i8* %5733 to i64*
  %5735 = load i64, i64* %5734, align 1
  %5736 = inttoptr i64 %5728 to double*
  %5737 = load double, double* %5736
  %5738 = fadd double %5732, %5737
  %5739 = bitcast i8* %5723 to double*
  store double %5738, double* %5739, align 1, !tbaa !2452
  %5740 = getelementptr inbounds i8, i8* %5723, i64 8
  %5741 = bitcast i8* %5740 to i64*
  store i64 %5735, i64* %5741, align 1, !tbaa !2452
  %5742 = load i64, i64* %RBP
  %5743 = sub i64 %5742, 136
  %5744 = bitcast %union.vec128_t* %XMM0 to i8*
  %5745 = load i64, i64* %PC
  %5746 = add i64 %5745, 8
  store i64 %5746, i64* %PC
  %5747 = bitcast i8* %5744 to double*
  %5748 = load double, double* %5747, align 1
  %5749 = inttoptr i64 %5743 to double*
  store double %5748, double* %5749
  %5750 = load i64, i64* %RBP
  %5751 = sub i64 %5750, 16
  %5752 = load i64, i64* %PC
  %5753 = add i64 %5752, 4
  store i64 %5753, i64* %PC
  %5754 = inttoptr i64 %5751 to i64*
  %5755 = load i64, i64* %5754
  store i64 %5755, i64* %RDX, align 8, !tbaa !2428
  %5756 = load i64, i64* %RBP
  %5757 = sub i64 %5756, 28
  %5758 = load i64, i64* %PC
  %5759 = add i64 %5758, 3
  store i64 %5759, i64* %PC
  %5760 = inttoptr i64 %5757 to i32*
  %5761 = load i32, i32* %5760
  %5762 = zext i32 %5761 to i64
  store i64 %5762, i64* %RCX, align 8, !tbaa !2428
  %5763 = load i64, i64* %RCX
  %5764 = load i64, i64* %PC
  %5765 = add i64 %5764, 3
  store i64 %5765, i64* %PC
  %5766 = trunc i64 %5763 to i32
  %5767 = add i32 12, %5766
  %5768 = zext i32 %5767 to i64
  store i64 %5768, i64* %RCX, align 8, !tbaa !2428
  %5769 = icmp ult i32 %5767, %5766
  %5770 = icmp ult i32 %5767, 12
  %5771 = or i1 %5769, %5770
  %5772 = zext i1 %5771 to i8
  %5773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5772, i8* %5773, align 1, !tbaa !2432
  %5774 = and i32 %5767, 255
  %5775 = call i32 @llvm.ctpop.i32(i32 %5774) #17
  %5776 = trunc i32 %5775 to i8
  %5777 = and i8 %5776, 1
  %5778 = xor i8 %5777, 1
  %5779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5778, i8* %5779, align 1, !tbaa !2446
  %5780 = xor i64 12, %5763
  %5781 = trunc i64 %5780 to i32
  %5782 = xor i32 %5781, %5767
  %5783 = lshr i32 %5782, 4
  %5784 = trunc i32 %5783 to i8
  %5785 = and i8 %5784, 1
  %5786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5785, i8* %5786, align 1, !tbaa !2447
  %5787 = icmp eq i32 %5767, 0
  %5788 = zext i1 %5787 to i8
  %5789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5788, i8* %5789, align 1, !tbaa !2448
  %5790 = lshr i32 %5767, 31
  %5791 = trunc i32 %5790 to i8
  %5792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5791, i8* %5792, align 1, !tbaa !2449
  %5793 = lshr i32 %5766, 31
  %5794 = xor i32 %5790, %5793
  %5795 = add nuw nsw i32 %5794, %5790
  %5796 = icmp eq i32 %5795, 2
  %5797 = zext i1 %5796 to i8
  %5798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5797, i8* %5798, align 1, !tbaa !2450
  %5799 = load i32, i32* %ECX
  %5800 = zext i32 %5799 to i64
  %5801 = load i64, i64* %PC
  %5802 = add i64 %5801, 3
  store i64 %5802, i64* %PC
  %5803 = shl i64 %5800, 32
  %5804 = ashr exact i64 %5803, 32
  store i64 %5804, i64* %RSI, align 8, !tbaa !2428
  %5805 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5806 = load i64, i64* %RDX
  %5807 = load i64, i64* %RSI
  %5808 = mul i64 %5807, 8
  %5809 = add i64 %5808, %5806
  %5810 = load i64, i64* %PC
  %5811 = add i64 %5810, 5
  store i64 %5811, i64* %PC
  %5812 = inttoptr i64 %5809 to double*
  %5813 = load double, double* %5812
  %5814 = bitcast i8* %5805 to double*
  store double %5813, double* %5814, align 1, !tbaa !2452
  %5815 = getelementptr inbounds i8, i8* %5805, i64 8
  %5816 = bitcast i8* %5815 to double*
  store double 0.000000e+00, double* %5816, align 1, !tbaa !2452
  %5817 = load i64, i64* %RBP
  %5818 = sub i64 %5817, 16
  %5819 = load i64, i64* %PC
  %5820 = add i64 %5819, 4
  store i64 %5820, i64* %PC
  %5821 = inttoptr i64 %5818 to i64*
  %5822 = load i64, i64* %5821
  store i64 %5822, i64* %RDX, align 8, !tbaa !2428
  %5823 = load i64, i64* %RBP
  %5824 = sub i64 %5823, 28
  %5825 = load i64, i64* %PC
  %5826 = add i64 %5825, 3
  store i64 %5826, i64* %PC
  %5827 = inttoptr i64 %5824 to i32*
  %5828 = load i32, i32* %5827
  %5829 = zext i32 %5828 to i64
  store i64 %5829, i64* %RCX, align 8, !tbaa !2428
  %5830 = load i64, i64* %RCX
  %5831 = load i64, i64* %PC
  %5832 = add i64 %5831, 3
  store i64 %5832, i64* %PC
  %5833 = trunc i64 %5830 to i32
  %5834 = add i32 14, %5833
  %5835 = zext i32 %5834 to i64
  store i64 %5835, i64* %RCX, align 8, !tbaa !2428
  %5836 = icmp ult i32 %5834, %5833
  %5837 = icmp ult i32 %5834, 14
  %5838 = or i1 %5836, %5837
  %5839 = zext i1 %5838 to i8
  %5840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5839, i8* %5840, align 1, !tbaa !2432
  %5841 = and i32 %5834, 255
  %5842 = call i32 @llvm.ctpop.i32(i32 %5841) #17
  %5843 = trunc i32 %5842 to i8
  %5844 = and i8 %5843, 1
  %5845 = xor i8 %5844, 1
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5845, i8* %5846, align 1, !tbaa !2446
  %5847 = xor i64 14, %5830
  %5848 = trunc i64 %5847 to i32
  %5849 = xor i32 %5848, %5834
  %5850 = lshr i32 %5849, 4
  %5851 = trunc i32 %5850 to i8
  %5852 = and i8 %5851, 1
  %5853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5852, i8* %5853, align 1, !tbaa !2447
  %5854 = icmp eq i32 %5834, 0
  %5855 = zext i1 %5854 to i8
  %5856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5855, i8* %5856, align 1, !tbaa !2448
  %5857 = lshr i32 %5834, 31
  %5858 = trunc i32 %5857 to i8
  %5859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5858, i8* %5859, align 1, !tbaa !2449
  %5860 = lshr i32 %5833, 31
  %5861 = xor i32 %5857, %5860
  %5862 = add nuw nsw i32 %5861, %5857
  %5863 = icmp eq i32 %5862, 2
  %5864 = zext i1 %5863 to i8
  %5865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5864, i8* %5865, align 1, !tbaa !2450
  %5866 = load i32, i32* %ECX
  %5867 = zext i32 %5866 to i64
  %5868 = load i64, i64* %PC
  %5869 = add i64 %5868, 3
  store i64 %5869, i64* %PC
  %5870 = shl i64 %5867, 32
  %5871 = ashr exact i64 %5870, 32
  store i64 %5871, i64* %RSI, align 8, !tbaa !2428
  %5872 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5873 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5874 = load i64, i64* %RDX
  %5875 = load i64, i64* %RSI
  %5876 = mul i64 %5875, 8
  %5877 = add i64 %5876, %5874
  %5878 = load i64, i64* %PC
  %5879 = add i64 %5878, 5
  store i64 %5879, i64* %PC
  %5880 = bitcast i8* %5873 to double*
  %5881 = load double, double* %5880, align 1
  %5882 = getelementptr inbounds i8, i8* %5873, i64 8
  %5883 = bitcast i8* %5882 to i64*
  %5884 = load i64, i64* %5883, align 1
  %5885 = inttoptr i64 %5877 to double*
  %5886 = load double, double* %5885
  %5887 = fsub double %5881, %5886
  %5888 = bitcast i8* %5872 to double*
  store double %5887, double* %5888, align 1, !tbaa !2452
  %5889 = getelementptr inbounds i8, i8* %5872, i64 8
  %5890 = bitcast i8* %5889 to i64*
  store i64 %5884, i64* %5890, align 1, !tbaa !2452
  %5891 = load i64, i64* %RBP
  %5892 = sub i64 %5891, 144
  %5893 = bitcast %union.vec128_t* %XMM0 to i8*
  %5894 = load i64, i64* %PC
  %5895 = add i64 %5894, 8
  store i64 %5895, i64* %PC
  %5896 = bitcast i8* %5893 to double*
  %5897 = load double, double* %5896, align 1
  %5898 = inttoptr i64 %5892 to double*
  store double %5897, double* %5898
  %5899 = load i64, i64* %RBP
  %5900 = sub i64 %5899, 16
  %5901 = load i64, i64* %PC
  %5902 = add i64 %5901, 4
  store i64 %5902, i64* %PC
  %5903 = inttoptr i64 %5900 to i64*
  %5904 = load i64, i64* %5903
  store i64 %5904, i64* %RDX, align 8, !tbaa !2428
  %5905 = load i64, i64* %RBP
  %5906 = sub i64 %5905, 28
  %5907 = load i64, i64* %PC
  %5908 = add i64 %5907, 3
  store i64 %5908, i64* %PC
  %5909 = inttoptr i64 %5906 to i32*
  %5910 = load i32, i32* %5909
  %5911 = zext i32 %5910 to i64
  store i64 %5911, i64* %RCX, align 8, !tbaa !2428
  %5912 = load i64, i64* %RCX
  %5913 = load i64, i64* %PC
  %5914 = add i64 %5913, 3
  store i64 %5914, i64* %PC
  %5915 = trunc i64 %5912 to i32
  %5916 = add i32 13, %5915
  %5917 = zext i32 %5916 to i64
  store i64 %5917, i64* %RCX, align 8, !tbaa !2428
  %5918 = icmp ult i32 %5916, %5915
  %5919 = icmp ult i32 %5916, 13
  %5920 = or i1 %5918, %5919
  %5921 = zext i1 %5920 to i8
  %5922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5921, i8* %5922, align 1, !tbaa !2432
  %5923 = and i32 %5916, 255
  %5924 = call i32 @llvm.ctpop.i32(i32 %5923) #17
  %5925 = trunc i32 %5924 to i8
  %5926 = and i8 %5925, 1
  %5927 = xor i8 %5926, 1
  %5928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5927, i8* %5928, align 1, !tbaa !2446
  %5929 = xor i64 13, %5912
  %5930 = trunc i64 %5929 to i32
  %5931 = xor i32 %5930, %5916
  %5932 = lshr i32 %5931, 4
  %5933 = trunc i32 %5932 to i8
  %5934 = and i8 %5933, 1
  %5935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5934, i8* %5935, align 1, !tbaa !2447
  %5936 = icmp eq i32 %5916, 0
  %5937 = zext i1 %5936 to i8
  %5938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5937, i8* %5938, align 1, !tbaa !2448
  %5939 = lshr i32 %5916, 31
  %5940 = trunc i32 %5939 to i8
  %5941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5940, i8* %5941, align 1, !tbaa !2449
  %5942 = lshr i32 %5915, 31
  %5943 = xor i32 %5939, %5942
  %5944 = add nuw nsw i32 %5943, %5939
  %5945 = icmp eq i32 %5944, 2
  %5946 = zext i1 %5945 to i8
  %5947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5946, i8* %5947, align 1, !tbaa !2450
  %5948 = load i32, i32* %ECX
  %5949 = zext i32 %5948 to i64
  %5950 = load i64, i64* %PC
  %5951 = add i64 %5950, 3
  store i64 %5951, i64* %PC
  %5952 = shl i64 %5949, 32
  %5953 = ashr exact i64 %5952, 32
  store i64 %5953, i64* %RSI, align 8, !tbaa !2428
  %5954 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5955 = load i64, i64* %RDX
  %5956 = load i64, i64* %RSI
  %5957 = mul i64 %5956, 8
  %5958 = add i64 %5957, %5955
  %5959 = load i64, i64* %PC
  %5960 = add i64 %5959, 5
  store i64 %5960, i64* %PC
  %5961 = inttoptr i64 %5958 to double*
  %5962 = load double, double* %5961
  %5963 = bitcast i8* %5954 to double*
  store double %5962, double* %5963, align 1, !tbaa !2452
  %5964 = getelementptr inbounds i8, i8* %5954, i64 8
  %5965 = bitcast i8* %5964 to double*
  store double 0.000000e+00, double* %5965, align 1, !tbaa !2452
  %5966 = load i64, i64* %RBP
  %5967 = sub i64 %5966, 16
  %5968 = load i64, i64* %PC
  %5969 = add i64 %5968, 4
  store i64 %5969, i64* %PC
  %5970 = inttoptr i64 %5967 to i64*
  %5971 = load i64, i64* %5970
  store i64 %5971, i64* %RDX, align 8, !tbaa !2428
  %5972 = load i64, i64* %RBP
  %5973 = sub i64 %5972, 28
  %5974 = load i64, i64* %PC
  %5975 = add i64 %5974, 3
  store i64 %5975, i64* %PC
  %5976 = inttoptr i64 %5973 to i32*
  %5977 = load i32, i32* %5976
  %5978 = zext i32 %5977 to i64
  store i64 %5978, i64* %RCX, align 8, !tbaa !2428
  %5979 = load i64, i64* %RCX
  %5980 = load i64, i64* %PC
  %5981 = add i64 %5980, 3
  store i64 %5981, i64* %PC
  %5982 = trunc i64 %5979 to i32
  %5983 = add i32 15, %5982
  %5984 = zext i32 %5983 to i64
  store i64 %5984, i64* %RCX, align 8, !tbaa !2428
  %5985 = icmp ult i32 %5983, %5982
  %5986 = icmp ult i32 %5983, 15
  %5987 = or i1 %5985, %5986
  %5988 = zext i1 %5987 to i8
  %5989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5988, i8* %5989, align 1, !tbaa !2432
  %5990 = and i32 %5983, 255
  %5991 = call i32 @llvm.ctpop.i32(i32 %5990) #17
  %5992 = trunc i32 %5991 to i8
  %5993 = and i8 %5992, 1
  %5994 = xor i8 %5993, 1
  %5995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5994, i8* %5995, align 1, !tbaa !2446
  %5996 = xor i64 15, %5979
  %5997 = trunc i64 %5996 to i32
  %5998 = xor i32 %5997, %5983
  %5999 = lshr i32 %5998, 4
  %6000 = trunc i32 %5999 to i8
  %6001 = and i8 %6000, 1
  %6002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6001, i8* %6002, align 1, !tbaa !2447
  %6003 = icmp eq i32 %5983, 0
  %6004 = zext i1 %6003 to i8
  %6005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6004, i8* %6005, align 1, !tbaa !2448
  %6006 = lshr i32 %5983, 31
  %6007 = trunc i32 %6006 to i8
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6007, i8* %6008, align 1, !tbaa !2449
  %6009 = lshr i32 %5982, 31
  %6010 = xor i32 %6006, %6009
  %6011 = add nuw nsw i32 %6010, %6006
  %6012 = icmp eq i32 %6011, 2
  %6013 = zext i1 %6012 to i8
  %6014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6013, i8* %6014, align 1, !tbaa !2450
  %6015 = load i32, i32* %ECX
  %6016 = zext i32 %6015 to i64
  %6017 = load i64, i64* %PC
  %6018 = add i64 %6017, 3
  store i64 %6018, i64* %PC
  %6019 = shl i64 %6016, 32
  %6020 = ashr exact i64 %6019, 32
  store i64 %6020, i64* %RSI, align 8, !tbaa !2428
  %6021 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6022 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6023 = load i64, i64* %RDX
  %6024 = load i64, i64* %RSI
  %6025 = mul i64 %6024, 8
  %6026 = add i64 %6025, %6023
  %6027 = load i64, i64* %PC
  %6028 = add i64 %6027, 5
  store i64 %6028, i64* %PC
  %6029 = bitcast i8* %6022 to double*
  %6030 = load double, double* %6029, align 1
  %6031 = getelementptr inbounds i8, i8* %6022, i64 8
  %6032 = bitcast i8* %6031 to i64*
  %6033 = load i64, i64* %6032, align 1
  %6034 = inttoptr i64 %6026 to double*
  %6035 = load double, double* %6034
  %6036 = fsub double %6030, %6035
  %6037 = bitcast i8* %6021 to double*
  store double %6036, double* %6037, align 1, !tbaa !2452
  %6038 = getelementptr inbounds i8, i8* %6021, i64 8
  %6039 = bitcast i8* %6038 to i64*
  store i64 %6033, i64* %6039, align 1, !tbaa !2452
  %6040 = load i64, i64* %RBP
  %6041 = sub i64 %6040, 152
  %6042 = bitcast %union.vec128_t* %XMM0 to i8*
  %6043 = load i64, i64* %PC
  %6044 = add i64 %6043, 8
  store i64 %6044, i64* %PC
  %6045 = bitcast i8* %6042 to double*
  %6046 = load double, double* %6045, align 1
  %6047 = inttoptr i64 %6041 to double*
  store double %6046, double* %6047
  %6048 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6049 = load i64, i64* %RBP
  %6050 = sub i64 %6049, 96
  %6051 = load i64, i64* %PC
  %6052 = add i64 %6051, 5
  store i64 %6052, i64* %PC
  %6053 = inttoptr i64 %6050 to double*
  %6054 = load double, double* %6053
  %6055 = bitcast i8* %6048 to double*
  store double %6054, double* %6055, align 1, !tbaa !2452
  %6056 = getelementptr inbounds i8, i8* %6048, i64 8
  %6057 = bitcast i8* %6056 to double*
  store double 0.000000e+00, double* %6057, align 1, !tbaa !2452
  %6058 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6059 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6060 = load i64, i64* %RBP
  %6061 = sub i64 %6060, 128
  %6062 = load i64, i64* %PC
  %6063 = add i64 %6062, 5
  store i64 %6063, i64* %PC
  %6064 = bitcast i8* %6059 to double*
  %6065 = load double, double* %6064, align 1
  %6066 = getelementptr inbounds i8, i8* %6059, i64 8
  %6067 = bitcast i8* %6066 to i64*
  %6068 = load i64, i64* %6067, align 1
  %6069 = inttoptr i64 %6061 to double*
  %6070 = load double, double* %6069
  %6071 = fadd double %6065, %6070
  %6072 = bitcast i8* %6058 to double*
  store double %6071, double* %6072, align 1, !tbaa !2452
  %6073 = getelementptr inbounds i8, i8* %6058, i64 8
  %6074 = bitcast i8* %6073 to i64*
  store i64 %6068, i64* %6074, align 1, !tbaa !2452
  %6075 = load i64, i64* %RBP
  %6076 = sub i64 %6075, 16
  %6077 = load i64, i64* %PC
  %6078 = add i64 %6077, 4
  store i64 %6078, i64* %PC
  %6079 = inttoptr i64 %6076 to i64*
  %6080 = load i64, i64* %6079
  store i64 %6080, i64* %RDX, align 8, !tbaa !2428
  %6081 = load i64, i64* %RBP
  %6082 = sub i64 %6081, 28
  %6083 = load i64, i64* %PC
  %6084 = add i64 %6083, 3
  store i64 %6084, i64* %PC
  %6085 = inttoptr i64 %6082 to i32*
  %6086 = load i32, i32* %6085
  %6087 = zext i32 %6086 to i64
  store i64 %6087, i64* %RCX, align 8, !tbaa !2428
  %6088 = load i64, i64* %RCX
  %6089 = load i64, i64* %PC
  %6090 = add i64 %6089, 3
  store i64 %6090, i64* %PC
  %6091 = trunc i64 %6088 to i32
  %6092 = add i32 8, %6091
  %6093 = zext i32 %6092 to i64
  store i64 %6093, i64* %RCX, align 8, !tbaa !2428
  %6094 = icmp ult i32 %6092, %6091
  %6095 = icmp ult i32 %6092, 8
  %6096 = or i1 %6094, %6095
  %6097 = zext i1 %6096 to i8
  %6098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6097, i8* %6098, align 1, !tbaa !2432
  %6099 = and i32 %6092, 255
  %6100 = call i32 @llvm.ctpop.i32(i32 %6099) #17
  %6101 = trunc i32 %6100 to i8
  %6102 = and i8 %6101, 1
  %6103 = xor i8 %6102, 1
  %6104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6103, i8* %6104, align 1, !tbaa !2446
  %6105 = xor i64 8, %6088
  %6106 = trunc i64 %6105 to i32
  %6107 = xor i32 %6106, %6092
  %6108 = lshr i32 %6107, 4
  %6109 = trunc i32 %6108 to i8
  %6110 = and i8 %6109, 1
  %6111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6110, i8* %6111, align 1, !tbaa !2447
  %6112 = icmp eq i32 %6092, 0
  %6113 = zext i1 %6112 to i8
  %6114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6113, i8* %6114, align 1, !tbaa !2448
  %6115 = lshr i32 %6092, 31
  %6116 = trunc i32 %6115 to i8
  %6117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6116, i8* %6117, align 1, !tbaa !2449
  %6118 = lshr i32 %6091, 31
  %6119 = xor i32 %6115, %6118
  %6120 = add nuw nsw i32 %6119, %6115
  %6121 = icmp eq i32 %6120, 2
  %6122 = zext i1 %6121 to i8
  %6123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6122, i8* %6123, align 1, !tbaa !2450
  %6124 = load i32, i32* %ECX
  %6125 = zext i32 %6124 to i64
  %6126 = load i64, i64* %PC
  %6127 = add i64 %6126, 3
  store i64 %6127, i64* %PC
  %6128 = shl i64 %6125, 32
  %6129 = ashr exact i64 %6128, 32
  store i64 %6129, i64* %RSI, align 8, !tbaa !2428
  %6130 = load i64, i64* %RDX
  %6131 = load i64, i64* %RSI
  %6132 = mul i64 %6131, 8
  %6133 = add i64 %6132, %6130
  %6134 = bitcast %union.vec128_t* %XMM0 to i8*
  %6135 = load i64, i64* %PC
  %6136 = add i64 %6135, 5
  store i64 %6136, i64* %PC
  %6137 = bitcast i8* %6134 to double*
  %6138 = load double, double* %6137, align 1
  %6139 = inttoptr i64 %6133 to double*
  store double %6138, double* %6139
  %6140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6141 = load i64, i64* %RBP
  %6142 = sub i64 %6141, 104
  %6143 = load i64, i64* %PC
  %6144 = add i64 %6143, 5
  store i64 %6144, i64* %PC
  %6145 = inttoptr i64 %6142 to double*
  %6146 = load double, double* %6145
  %6147 = bitcast i8* %6140 to double*
  store double %6146, double* %6147, align 1, !tbaa !2452
  %6148 = getelementptr inbounds i8, i8* %6140, i64 8
  %6149 = bitcast i8* %6148 to double*
  store double 0.000000e+00, double* %6149, align 1, !tbaa !2452
  %6150 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6151 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6152 = load i64, i64* %RBP
  %6153 = sub i64 %6152, 136
  %6154 = load i64, i64* %PC
  %6155 = add i64 %6154, 8
  store i64 %6155, i64* %PC
  %6156 = bitcast i8* %6151 to double*
  %6157 = load double, double* %6156, align 1
  %6158 = getelementptr inbounds i8, i8* %6151, i64 8
  %6159 = bitcast i8* %6158 to i64*
  %6160 = load i64, i64* %6159, align 1
  %6161 = inttoptr i64 %6153 to double*
  %6162 = load double, double* %6161
  %6163 = fadd double %6157, %6162
  %6164 = bitcast i8* %6150 to double*
  store double %6163, double* %6164, align 1, !tbaa !2452
  %6165 = getelementptr inbounds i8, i8* %6150, i64 8
  %6166 = bitcast i8* %6165 to i64*
  store i64 %6160, i64* %6166, align 1, !tbaa !2452
  %6167 = load i64, i64* %RBP
  %6168 = sub i64 %6167, 16
  %6169 = load i64, i64* %PC
  %6170 = add i64 %6169, 4
  store i64 %6170, i64* %PC
  %6171 = inttoptr i64 %6168 to i64*
  %6172 = load i64, i64* %6171
  store i64 %6172, i64* %RDX, align 8, !tbaa !2428
  %6173 = load i64, i64* %RBP
  %6174 = sub i64 %6173, 28
  %6175 = load i64, i64* %PC
  %6176 = add i64 %6175, 3
  store i64 %6176, i64* %PC
  %6177 = inttoptr i64 %6174 to i32*
  %6178 = load i32, i32* %6177
  %6179 = zext i32 %6178 to i64
  store i64 %6179, i64* %RCX, align 8, !tbaa !2428
  %6180 = load i64, i64* %RCX
  %6181 = load i64, i64* %PC
  %6182 = add i64 %6181, 3
  store i64 %6182, i64* %PC
  %6183 = trunc i64 %6180 to i32
  %6184 = add i32 9, %6183
  %6185 = zext i32 %6184 to i64
  store i64 %6185, i64* %RCX, align 8, !tbaa !2428
  %6186 = icmp ult i32 %6184, %6183
  %6187 = icmp ult i32 %6184, 9
  %6188 = or i1 %6186, %6187
  %6189 = zext i1 %6188 to i8
  %6190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6189, i8* %6190, align 1, !tbaa !2432
  %6191 = and i32 %6184, 255
  %6192 = call i32 @llvm.ctpop.i32(i32 %6191) #17
  %6193 = trunc i32 %6192 to i8
  %6194 = and i8 %6193, 1
  %6195 = xor i8 %6194, 1
  %6196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6195, i8* %6196, align 1, !tbaa !2446
  %6197 = xor i64 9, %6180
  %6198 = trunc i64 %6197 to i32
  %6199 = xor i32 %6198, %6184
  %6200 = lshr i32 %6199, 4
  %6201 = trunc i32 %6200 to i8
  %6202 = and i8 %6201, 1
  %6203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6202, i8* %6203, align 1, !tbaa !2447
  %6204 = icmp eq i32 %6184, 0
  %6205 = zext i1 %6204 to i8
  %6206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6205, i8* %6206, align 1, !tbaa !2448
  %6207 = lshr i32 %6184, 31
  %6208 = trunc i32 %6207 to i8
  %6209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6208, i8* %6209, align 1, !tbaa !2449
  %6210 = lshr i32 %6183, 31
  %6211 = xor i32 %6207, %6210
  %6212 = add nuw nsw i32 %6211, %6207
  %6213 = icmp eq i32 %6212, 2
  %6214 = zext i1 %6213 to i8
  %6215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6214, i8* %6215, align 1, !tbaa !2450
  %6216 = load i32, i32* %ECX
  %6217 = zext i32 %6216 to i64
  %6218 = load i64, i64* %PC
  %6219 = add i64 %6218, 3
  store i64 %6219, i64* %PC
  %6220 = shl i64 %6217, 32
  %6221 = ashr exact i64 %6220, 32
  store i64 %6221, i64* %RSI, align 8, !tbaa !2428
  %6222 = load i64, i64* %RDX
  %6223 = load i64, i64* %RSI
  %6224 = mul i64 %6223, 8
  %6225 = add i64 %6224, %6222
  %6226 = bitcast %union.vec128_t* %XMM0 to i8*
  %6227 = load i64, i64* %PC
  %6228 = add i64 %6227, 5
  store i64 %6228, i64* %PC
  %6229 = bitcast i8* %6226 to double*
  %6230 = load double, double* %6229, align 1
  %6231 = inttoptr i64 %6225 to double*
  store double %6230, double* %6231
  %6232 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6233 = load i64, i64* %RBP
  %6234 = sub i64 %6233, 128
  %6235 = load i64, i64* %PC
  %6236 = add i64 %6235, 5
  store i64 %6236, i64* %PC
  %6237 = inttoptr i64 %6234 to double*
  %6238 = load double, double* %6237
  %6239 = bitcast i8* %6232 to double*
  store double %6238, double* %6239, align 1, !tbaa !2452
  %6240 = getelementptr inbounds i8, i8* %6232, i64 8
  %6241 = bitcast i8* %6240 to double*
  store double 0.000000e+00, double* %6241, align 1, !tbaa !2452
  %6242 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6243 = load i64, i64* %RBP
  %6244 = sub i64 %6243, 96
  %6245 = load i64, i64* %PC
  %6246 = add i64 %6245, 5
  store i64 %6246, i64* %PC
  %6247 = inttoptr i64 %6244 to double*
  %6248 = load double, double* %6247
  %6249 = bitcast i8* %6242 to double*
  store double %6248, double* %6249, align 1, !tbaa !2452
  %6250 = getelementptr inbounds i8, i8* %6242, i64 8
  %6251 = bitcast i8* %6250 to double*
  store double 0.000000e+00, double* %6251, align 1, !tbaa !2452
  %6252 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6253 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6254 = bitcast %union.vec128_t* %XMM0 to i8*
  %6255 = load i64, i64* %PC
  %6256 = add i64 %6255, 4
  store i64 %6256, i64* %PC
  %6257 = bitcast i8* %6253 to double*
  %6258 = load double, double* %6257, align 1
  %6259 = getelementptr inbounds i8, i8* %6253, i64 8
  %6260 = bitcast i8* %6259 to i64*
  %6261 = load i64, i64* %6260, align 1
  %6262 = bitcast i8* %6254 to double*
  %6263 = load double, double* %6262, align 1
  %6264 = fsub double %6258, %6263
  %6265 = bitcast i8* %6252 to double*
  store double %6264, double* %6265, align 1, !tbaa !2452
  %6266 = getelementptr inbounds i8, i8* %6252, i64 8
  %6267 = bitcast i8* %6266 to i64*
  store i64 %6261, i64* %6267, align 1, !tbaa !2452
  %6268 = load i64, i64* %RBP
  %6269 = sub i64 %6268, 96
  %6270 = bitcast %union.vec128_t* %XMM1 to i8*
  %6271 = load i64, i64* %PC
  %6272 = add i64 %6271, 5
  store i64 %6272, i64* %PC
  %6273 = bitcast i8* %6270 to double*
  %6274 = load double, double* %6273, align 1
  %6275 = inttoptr i64 %6269 to double*
  store double %6274, double* %6275
  %6276 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6277 = load i64, i64* %RBP
  %6278 = sub i64 %6277, 136
  %6279 = load i64, i64* %PC
  %6280 = add i64 %6279, 8
  store i64 %6280, i64* %PC
  %6281 = inttoptr i64 %6278 to double*
  %6282 = load double, double* %6281
  %6283 = bitcast i8* %6276 to double*
  store double %6282, double* %6283, align 1, !tbaa !2452
  %6284 = getelementptr inbounds i8, i8* %6276, i64 8
  %6285 = bitcast i8* %6284 to double*
  store double 0.000000e+00, double* %6285, align 1, !tbaa !2452
  %6286 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6287 = load i64, i64* %RBP
  %6288 = sub i64 %6287, 104
  %6289 = load i64, i64* %PC
  %6290 = add i64 %6289, 5
  store i64 %6290, i64* %PC
  %6291 = inttoptr i64 %6288 to double*
  %6292 = load double, double* %6291
  %6293 = bitcast i8* %6286 to double*
  store double %6292, double* %6293, align 1, !tbaa !2452
  %6294 = getelementptr inbounds i8, i8* %6286, i64 8
  %6295 = bitcast i8* %6294 to double*
  store double 0.000000e+00, double* %6295, align 1, !tbaa !2452
  %6296 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6297 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6298 = bitcast %union.vec128_t* %XMM0 to i8*
  %6299 = load i64, i64* %PC
  %6300 = add i64 %6299, 4
  store i64 %6300, i64* %PC
  %6301 = bitcast i8* %6297 to double*
  %6302 = load double, double* %6301, align 1
  %6303 = getelementptr inbounds i8, i8* %6297, i64 8
  %6304 = bitcast i8* %6303 to i64*
  %6305 = load i64, i64* %6304, align 1
  %6306 = bitcast i8* %6298 to double*
  %6307 = load double, double* %6306, align 1
  %6308 = fsub double %6302, %6307
  %6309 = bitcast i8* %6296 to double*
  store double %6308, double* %6309, align 1, !tbaa !2452
  %6310 = getelementptr inbounds i8, i8* %6296, i64 8
  %6311 = bitcast i8* %6310 to i64*
  store i64 %6305, i64* %6311, align 1, !tbaa !2452
  %6312 = load i64, i64* %RBP
  %6313 = sub i64 %6312, 104
  %6314 = bitcast %union.vec128_t* %XMM1 to i8*
  %6315 = load i64, i64* %PC
  %6316 = add i64 %6315, 5
  store i64 %6316, i64* %PC
  %6317 = bitcast i8* %6314 to double*
  %6318 = load double, double* %6317, align 1
  %6319 = inttoptr i64 %6313 to double*
  store double %6318, double* %6319
  %6320 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6321 = load i64, i64* %RBP
  %6322 = sub i64 %6321, 72
  %6323 = load i64, i64* %PC
  %6324 = add i64 %6323, 5
  store i64 %6324, i64* %PC
  %6325 = inttoptr i64 %6322 to double*
  %6326 = load double, double* %6325
  %6327 = bitcast i8* %6320 to double*
  store double %6326, double* %6327, align 1, !tbaa !2452
  %6328 = getelementptr inbounds i8, i8* %6320, i64 8
  %6329 = bitcast i8* %6328 to double*
  store double 0.000000e+00, double* %6329, align 1, !tbaa !2452
  %6330 = bitcast %union.vec128_t* %XMM0 to i8*
  %6331 = load i64, i64* %PC
  %6332 = add i64 %6331, 5
  store i64 %6332, i64* %PC
  %6333 = bitcast i8* %6330 to i64*
  %6334 = load i64, i64* %6333, align 1
  store i64 %6334, i64* %RDX, align 1, !tbaa !2428
  %6335 = load i64, i64* %RDX
  %6336 = load i64, i64* %RAX
  %6337 = load i64, i64* %PC
  %6338 = add i64 %6337, 3
  store i64 %6338, i64* %PC
  %6339 = xor i64 %6336, %6335
  store i64 %6339, i64* %RDX, align 8, !tbaa !2428
  %6340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6340, align 1, !tbaa !2432
  %6341 = trunc i64 %6339 to i32
  %6342 = and i32 %6341, 255
  %6343 = call i32 @llvm.ctpop.i32(i32 %6342) #17
  %6344 = trunc i32 %6343 to i8
  %6345 = and i8 %6344, 1
  %6346 = xor i8 %6345, 1
  %6347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6346, i8* %6347, align 1, !tbaa !2446
  %6348 = icmp eq i64 %6339, 0
  %6349 = zext i1 %6348 to i8
  %6350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6349, i8* %6350, align 1, !tbaa !2448
  %6351 = lshr i64 %6339, 63
  %6352 = trunc i64 %6351 to i8
  %6353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6352, i8* %6353, align 1, !tbaa !2449
  %6354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6354, align 1, !tbaa !2450
  %6355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6355, align 1, !tbaa !2447
  %6356 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6357 = load i64, i64* %RDX
  %6358 = load i64, i64* %PC
  %6359 = add i64 %6358, 5
  store i64 %6359, i64* %PC
  %6360 = bitcast i8* %6356 to i64*
  store i64 %6357, i64* %6360, align 1, !tbaa !2428
  %6361 = getelementptr inbounds i8, i8* %6356, i64 8
  %6362 = bitcast i8* %6361 to i64*
  store i64 0, i64* %6362, align 1, !tbaa !2428
  %6363 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6364 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6365 = load i64, i64* %RBP
  %6366 = sub i64 %6365, 96
  %6367 = load i64, i64* %PC
  %6368 = add i64 %6367, 5
  store i64 %6368, i64* %PC
  %6369 = bitcast i8* %6364 to double*
  %6370 = load double, double* %6369, align 1
  %6371 = getelementptr inbounds i8, i8* %6364, i64 8
  %6372 = bitcast i8* %6371 to i64*
  %6373 = load i64, i64* %6372, align 1
  %6374 = inttoptr i64 %6366 to double*
  %6375 = load double, double* %6374
  %6376 = fmul double %6370, %6375
  %6377 = bitcast i8* %6363 to double*
  store double %6376, double* %6377, align 1, !tbaa !2452
  %6378 = getelementptr inbounds i8, i8* %6363, i64 8
  %6379 = bitcast i8* %6378 to i64*
  store i64 %6373, i64* %6379, align 1, !tbaa !2452
  %6380 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6381 = load i64, i64* %RBP
  %6382 = sub i64 %6381, 64
  %6383 = load i64, i64* %PC
  %6384 = add i64 %6383, 5
  store i64 %6384, i64* %PC
  %6385 = inttoptr i64 %6382 to double*
  %6386 = load double, double* %6385
  %6387 = bitcast i8* %6380 to double*
  store double %6386, double* %6387, align 1, !tbaa !2452
  %6388 = getelementptr inbounds i8, i8* %6380, i64 8
  %6389 = bitcast i8* %6388 to double*
  store double 0.000000e+00, double* %6389, align 1, !tbaa !2452
  %6390 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6391 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6392 = load i64, i64* %RBP
  %6393 = sub i64 %6392, 104
  %6394 = load i64, i64* %PC
  %6395 = add i64 %6394, 5
  store i64 %6395, i64* %PC
  %6396 = bitcast i8* %6391 to double*
  %6397 = load double, double* %6396, align 1
  %6398 = getelementptr inbounds i8, i8* %6391, i64 8
  %6399 = bitcast i8* %6398 to i64*
  %6400 = load i64, i64* %6399, align 1
  %6401 = inttoptr i64 %6393 to double*
  %6402 = load double, double* %6401
  %6403 = fmul double %6397, %6402
  %6404 = bitcast i8* %6390 to double*
  store double %6403, double* %6404, align 1, !tbaa !2452
  %6405 = getelementptr inbounds i8, i8* %6390, i64 8
  %6406 = bitcast i8* %6405 to i64*
  store i64 %6400, i64* %6406, align 1, !tbaa !2452
  %6407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6408 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6409 = bitcast %union.vec128_t* %XMM1 to i8*
  %6410 = load i64, i64* %PC
  %6411 = add i64 %6410, 4
  store i64 %6411, i64* %PC
  %6412 = bitcast i8* %6408 to double*
  %6413 = load double, double* %6412, align 1
  %6414 = getelementptr inbounds i8, i8* %6408, i64 8
  %6415 = bitcast i8* %6414 to i64*
  %6416 = load i64, i64* %6415, align 1
  %6417 = bitcast i8* %6409 to double*
  %6418 = load double, double* %6417, align 1
  %6419 = fsub double %6413, %6418
  %6420 = bitcast i8* %6407 to double*
  store double %6419, double* %6420, align 1, !tbaa !2452
  %6421 = getelementptr inbounds i8, i8* %6407, i64 8
  %6422 = bitcast i8* %6421 to i64*
  store i64 %6416, i64* %6422, align 1, !tbaa !2452
  %6423 = load i64, i64* %RBP
  %6424 = sub i64 %6423, 16
  %6425 = load i64, i64* %PC
  %6426 = add i64 %6425, 4
  store i64 %6426, i64* %PC
  %6427 = inttoptr i64 %6424 to i64*
  %6428 = load i64, i64* %6427
  store i64 %6428, i64* %RDX, align 8, !tbaa !2428
  %6429 = load i64, i64* %RBP
  %6430 = sub i64 %6429, 28
  %6431 = load i64, i64* %PC
  %6432 = add i64 %6431, 3
  store i64 %6432, i64* %PC
  %6433 = inttoptr i64 %6430 to i32*
  %6434 = load i32, i32* %6433
  %6435 = zext i32 %6434 to i64
  store i64 %6435, i64* %RCX, align 8, !tbaa !2428
  %6436 = load i64, i64* %RCX
  %6437 = load i64, i64* %PC
  %6438 = add i64 %6437, 3
  store i64 %6438, i64* %PC
  %6439 = trunc i64 %6436 to i32
  %6440 = add i32 12, %6439
  %6441 = zext i32 %6440 to i64
  store i64 %6441, i64* %RCX, align 8, !tbaa !2428
  %6442 = icmp ult i32 %6440, %6439
  %6443 = icmp ult i32 %6440, 12
  %6444 = or i1 %6442, %6443
  %6445 = zext i1 %6444 to i8
  %6446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6445, i8* %6446, align 1, !tbaa !2432
  %6447 = and i32 %6440, 255
  %6448 = call i32 @llvm.ctpop.i32(i32 %6447) #17
  %6449 = trunc i32 %6448 to i8
  %6450 = and i8 %6449, 1
  %6451 = xor i8 %6450, 1
  %6452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6451, i8* %6452, align 1, !tbaa !2446
  %6453 = xor i64 12, %6436
  %6454 = trunc i64 %6453 to i32
  %6455 = xor i32 %6454, %6440
  %6456 = lshr i32 %6455, 4
  %6457 = trunc i32 %6456 to i8
  %6458 = and i8 %6457, 1
  %6459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6458, i8* %6459, align 1, !tbaa !2447
  %6460 = icmp eq i32 %6440, 0
  %6461 = zext i1 %6460 to i8
  %6462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6461, i8* %6462, align 1, !tbaa !2448
  %6463 = lshr i32 %6440, 31
  %6464 = trunc i32 %6463 to i8
  %6465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6464, i8* %6465, align 1, !tbaa !2449
  %6466 = lshr i32 %6439, 31
  %6467 = xor i32 %6463, %6466
  %6468 = add nuw nsw i32 %6467, %6463
  %6469 = icmp eq i32 %6468, 2
  %6470 = zext i1 %6469 to i8
  %6471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6470, i8* %6471, align 1, !tbaa !2450
  %6472 = load i32, i32* %ECX
  %6473 = zext i32 %6472 to i64
  %6474 = load i64, i64* %PC
  %6475 = add i64 %6474, 3
  store i64 %6475, i64* %PC
  %6476 = shl i64 %6473, 32
  %6477 = ashr exact i64 %6476, 32
  store i64 %6477, i64* %RSI, align 8, !tbaa !2428
  %6478 = load i64, i64* %RDX
  %6479 = load i64, i64* %RSI
  %6480 = mul i64 %6479, 8
  %6481 = add i64 %6480, %6478
  %6482 = bitcast %union.vec128_t* %XMM0 to i8*
  %6483 = load i64, i64* %PC
  %6484 = add i64 %6483, 5
  store i64 %6484, i64* %PC
  %6485 = bitcast i8* %6482 to double*
  %6486 = load double, double* %6485, align 1
  %6487 = inttoptr i64 %6481 to double*
  store double %6486, double* %6487
  %6488 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6489 = load i64, i64* %RBP
  %6490 = sub i64 %6489, 72
  %6491 = load i64, i64* %PC
  %6492 = add i64 %6491, 5
  store i64 %6492, i64* %PC
  %6493 = inttoptr i64 %6490 to double*
  %6494 = load double, double* %6493
  %6495 = bitcast i8* %6488 to double*
  store double %6494, double* %6495, align 1, !tbaa !2452
  %6496 = getelementptr inbounds i8, i8* %6488, i64 8
  %6497 = bitcast i8* %6496 to double*
  store double 0.000000e+00, double* %6497, align 1, !tbaa !2452
  %6498 = bitcast %union.vec128_t* %XMM0 to i8*
  %6499 = load i64, i64* %PC
  %6500 = add i64 %6499, 5
  store i64 %6500, i64* %PC
  %6501 = bitcast i8* %6498 to i64*
  %6502 = load i64, i64* %6501, align 1
  store i64 %6502, i64* %RDX, align 1, !tbaa !2428
  %6503 = load i64, i64* %RDX
  %6504 = load i64, i64* %RAX
  %6505 = load i64, i64* %PC
  %6506 = add i64 %6505, 3
  store i64 %6506, i64* %PC
  %6507 = xor i64 %6504, %6503
  store i64 %6507, i64* %RDX, align 8, !tbaa !2428
  %6508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6508, align 1, !tbaa !2432
  %6509 = trunc i64 %6507 to i32
  %6510 = and i32 %6509, 255
  %6511 = call i32 @llvm.ctpop.i32(i32 %6510) #17
  %6512 = trunc i32 %6511 to i8
  %6513 = and i8 %6512, 1
  %6514 = xor i8 %6513, 1
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6514, i8* %6515, align 1, !tbaa !2446
  %6516 = icmp eq i64 %6507, 0
  %6517 = zext i1 %6516 to i8
  %6518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6517, i8* %6518, align 1, !tbaa !2448
  %6519 = lshr i64 %6507, 63
  %6520 = trunc i64 %6519 to i8
  %6521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6520, i8* %6521, align 1, !tbaa !2449
  %6522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6522, align 1, !tbaa !2450
  %6523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6523, align 1, !tbaa !2447
  %6524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6525 = load i64, i64* %RDX
  %6526 = load i64, i64* %PC
  %6527 = add i64 %6526, 5
  store i64 %6527, i64* %PC
  %6528 = bitcast i8* %6524 to i64*
  store i64 %6525, i64* %6528, align 1, !tbaa !2428
  %6529 = getelementptr inbounds i8, i8* %6524, i64 8
  %6530 = bitcast i8* %6529 to i64*
  store i64 0, i64* %6530, align 1, !tbaa !2428
  %6531 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6532 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6533 = load i64, i64* %RBP
  %6534 = sub i64 %6533, 104
  %6535 = load i64, i64* %PC
  %6536 = add i64 %6535, 5
  store i64 %6536, i64* %PC
  %6537 = bitcast i8* %6532 to double*
  %6538 = load double, double* %6537, align 1
  %6539 = getelementptr inbounds i8, i8* %6532, i64 8
  %6540 = bitcast i8* %6539 to i64*
  %6541 = load i64, i64* %6540, align 1
  %6542 = inttoptr i64 %6534 to double*
  %6543 = load double, double* %6542
  %6544 = fmul double %6538, %6543
  %6545 = bitcast i8* %6531 to double*
  store double %6544, double* %6545, align 1, !tbaa !2452
  %6546 = getelementptr inbounds i8, i8* %6531, i64 8
  %6547 = bitcast i8* %6546 to i64*
  store i64 %6541, i64* %6547, align 1, !tbaa !2452
  %6548 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6549 = load i64, i64* %RBP
  %6550 = sub i64 %6549, 64
  %6551 = load i64, i64* %PC
  %6552 = add i64 %6551, 5
  store i64 %6552, i64* %PC
  %6553 = inttoptr i64 %6550 to double*
  %6554 = load double, double* %6553
  %6555 = bitcast i8* %6548 to double*
  store double %6554, double* %6555, align 1, !tbaa !2452
  %6556 = getelementptr inbounds i8, i8* %6548, i64 8
  %6557 = bitcast i8* %6556 to double*
  store double 0.000000e+00, double* %6557, align 1, !tbaa !2452
  %6558 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6559 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6560 = load i64, i64* %RBP
  %6561 = sub i64 %6560, 96
  %6562 = load i64, i64* %PC
  %6563 = add i64 %6562, 5
  store i64 %6563, i64* %PC
  %6564 = bitcast i8* %6559 to double*
  %6565 = load double, double* %6564, align 1
  %6566 = getelementptr inbounds i8, i8* %6559, i64 8
  %6567 = bitcast i8* %6566 to i64*
  %6568 = load i64, i64* %6567, align 1
  %6569 = inttoptr i64 %6561 to double*
  %6570 = load double, double* %6569
  %6571 = fmul double %6565, %6570
  %6572 = bitcast i8* %6558 to double*
  store double %6571, double* %6572, align 1, !tbaa !2452
  %6573 = getelementptr inbounds i8, i8* %6558, i64 8
  %6574 = bitcast i8* %6573 to i64*
  store i64 %6568, i64* %6574, align 1, !tbaa !2452
  %6575 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6576 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6577 = bitcast %union.vec128_t* %XMM1 to i8*
  %6578 = load i64, i64* %PC
  %6579 = add i64 %6578, 4
  store i64 %6579, i64* %PC
  %6580 = bitcast i8* %6576 to double*
  %6581 = load double, double* %6580, align 1
  %6582 = getelementptr inbounds i8, i8* %6576, i64 8
  %6583 = bitcast i8* %6582 to i64*
  %6584 = load i64, i64* %6583, align 1
  %6585 = bitcast i8* %6577 to double*
  %6586 = load double, double* %6585, align 1
  %6587 = fadd double %6581, %6586
  %6588 = bitcast i8* %6575 to double*
  store double %6587, double* %6588, align 1, !tbaa !2452
  %6589 = getelementptr inbounds i8, i8* %6575, i64 8
  %6590 = bitcast i8* %6589 to i64*
  store i64 %6584, i64* %6590, align 1, !tbaa !2452
  %6591 = load i64, i64* %RBP
  %6592 = sub i64 %6591, 16
  %6593 = load i64, i64* %PC
  %6594 = add i64 %6593, 4
  store i64 %6594, i64* %PC
  %6595 = inttoptr i64 %6592 to i64*
  %6596 = load i64, i64* %6595
  store i64 %6596, i64* %RAX, align 8, !tbaa !2428
  %6597 = load i64, i64* %RBP
  %6598 = sub i64 %6597, 28
  %6599 = load i64, i64* %PC
  %6600 = add i64 %6599, 3
  store i64 %6600, i64* %PC
  %6601 = inttoptr i64 %6598 to i32*
  %6602 = load i32, i32* %6601
  %6603 = zext i32 %6602 to i64
  store i64 %6603, i64* %RCX, align 8, !tbaa !2428
  %6604 = load i64, i64* %RCX
  %6605 = load i64, i64* %PC
  %6606 = add i64 %6605, 3
  store i64 %6606, i64* %PC
  %6607 = trunc i64 %6604 to i32
  %6608 = add i32 13, %6607
  %6609 = zext i32 %6608 to i64
  store i64 %6609, i64* %RCX, align 8, !tbaa !2428
  %6610 = icmp ult i32 %6608, %6607
  %6611 = icmp ult i32 %6608, 13
  %6612 = or i1 %6610, %6611
  %6613 = zext i1 %6612 to i8
  %6614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6613, i8* %6614, align 1, !tbaa !2432
  %6615 = and i32 %6608, 255
  %6616 = call i32 @llvm.ctpop.i32(i32 %6615) #17
  %6617 = trunc i32 %6616 to i8
  %6618 = and i8 %6617, 1
  %6619 = xor i8 %6618, 1
  %6620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6619, i8* %6620, align 1, !tbaa !2446
  %6621 = xor i64 13, %6604
  %6622 = trunc i64 %6621 to i32
  %6623 = xor i32 %6622, %6608
  %6624 = lshr i32 %6623, 4
  %6625 = trunc i32 %6624 to i8
  %6626 = and i8 %6625, 1
  %6627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6626, i8* %6627, align 1, !tbaa !2447
  %6628 = icmp eq i32 %6608, 0
  %6629 = zext i1 %6628 to i8
  %6630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6629, i8* %6630, align 1, !tbaa !2448
  %6631 = lshr i32 %6608, 31
  %6632 = trunc i32 %6631 to i8
  %6633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6632, i8* %6633, align 1, !tbaa !2449
  %6634 = lshr i32 %6607, 31
  %6635 = xor i32 %6631, %6634
  %6636 = add nuw nsw i32 %6635, %6631
  %6637 = icmp eq i32 %6636, 2
  %6638 = zext i1 %6637 to i8
  %6639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6638, i8* %6639, align 1, !tbaa !2450
  %6640 = load i32, i32* %ECX
  %6641 = zext i32 %6640 to i64
  %6642 = load i64, i64* %PC
  %6643 = add i64 %6642, 3
  store i64 %6643, i64* %PC
  %6644 = shl i64 %6641, 32
  %6645 = ashr exact i64 %6644, 32
  store i64 %6645, i64* %RDX, align 8, !tbaa !2428
  %6646 = load i64, i64* %RAX
  %6647 = load i64, i64* %RDX
  %6648 = mul i64 %6647, 8
  %6649 = add i64 %6648, %6646
  %6650 = bitcast %union.vec128_t* %XMM0 to i8*
  %6651 = load i64, i64* %PC
  %6652 = add i64 %6651, 5
  store i64 %6652, i64* %PC
  %6653 = bitcast i8* %6650 to double*
  %6654 = load double, double* %6653, align 1
  %6655 = inttoptr i64 %6649 to double*
  store double %6654, double* %6655
  %6656 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6657 = load i64, i64* %RBP
  %6658 = sub i64 %6657, 112
  %6659 = load i64, i64* %PC
  %6660 = add i64 %6659, 5
  store i64 %6660, i64* %PC
  %6661 = inttoptr i64 %6658 to double*
  %6662 = load double, double* %6661
  %6663 = bitcast i8* %6656 to double*
  store double %6662, double* %6663, align 1, !tbaa !2452
  %6664 = getelementptr inbounds i8, i8* %6656, i64 8
  %6665 = bitcast i8* %6664 to double*
  store double 0.000000e+00, double* %6665, align 1, !tbaa !2452
  %6666 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6668 = load i64, i64* %RBP
  %6669 = sub i64 %6668, 152
  %6670 = load i64, i64* %PC
  %6671 = add i64 %6670, 8
  store i64 %6671, i64* %PC
  %6672 = bitcast i8* %6667 to double*
  %6673 = load double, double* %6672, align 1
  %6674 = getelementptr inbounds i8, i8* %6667, i64 8
  %6675 = bitcast i8* %6674 to i64*
  %6676 = load i64, i64* %6675, align 1
  %6677 = inttoptr i64 %6669 to double*
  %6678 = load double, double* %6677
  %6679 = fsub double %6673, %6678
  %6680 = bitcast i8* %6666 to double*
  store double %6679, double* %6680, align 1, !tbaa !2452
  %6681 = getelementptr inbounds i8, i8* %6666, i64 8
  %6682 = bitcast i8* %6681 to i64*
  store i64 %6676, i64* %6682, align 1, !tbaa !2452
  %6683 = load i64, i64* %RBP
  %6684 = sub i64 %6683, 96
  %6685 = bitcast %union.vec128_t* %XMM0 to i8*
  %6686 = load i64, i64* %PC
  %6687 = add i64 %6686, 5
  store i64 %6687, i64* %PC
  %6688 = bitcast i8* %6685 to double*
  %6689 = load double, double* %6688, align 1
  %6690 = inttoptr i64 %6684 to double*
  store double %6689, double* %6690
  %6691 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6692 = load i64, i64* %RBP
  %6693 = sub i64 %6692, 120
  %6694 = load i64, i64* %PC
  %6695 = add i64 %6694, 5
  store i64 %6695, i64* %PC
  %6696 = inttoptr i64 %6693 to double*
  %6697 = load double, double* %6696
  %6698 = bitcast i8* %6691 to double*
  store double %6697, double* %6698, align 1, !tbaa !2452
  %6699 = getelementptr inbounds i8, i8* %6691, i64 8
  %6700 = bitcast i8* %6699 to double*
  store double 0.000000e+00, double* %6700, align 1, !tbaa !2452
  %6701 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6702 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6703 = load i64, i64* %RBP
  %6704 = sub i64 %6703, 144
  %6705 = load i64, i64* %PC
  %6706 = add i64 %6705, 8
  store i64 %6706, i64* %PC
  %6707 = bitcast i8* %6702 to double*
  %6708 = load double, double* %6707, align 1
  %6709 = getelementptr inbounds i8, i8* %6702, i64 8
  %6710 = bitcast i8* %6709 to i64*
  %6711 = load i64, i64* %6710, align 1
  %6712 = inttoptr i64 %6704 to double*
  %6713 = load double, double* %6712
  %6714 = fadd double %6708, %6713
  %6715 = bitcast i8* %6701 to double*
  store double %6714, double* %6715, align 1, !tbaa !2452
  %6716 = getelementptr inbounds i8, i8* %6701, i64 8
  %6717 = bitcast i8* %6716 to i64*
  store i64 %6711, i64* %6717, align 1, !tbaa !2452
  %6718 = load i64, i64* %RBP
  %6719 = sub i64 %6718, 104
  %6720 = bitcast %union.vec128_t* %XMM0 to i8*
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 5
  store i64 %6722, i64* %PC
  %6723 = bitcast i8* %6720 to double*
  %6724 = load double, double* %6723, align 1
  %6725 = inttoptr i64 %6719 to double*
  store double %6724, double* %6725
  %6726 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6727 = load i64, i64* %RBP
  %6728 = sub i64 %6727, 48
  %6729 = load i64, i64* %PC
  %6730 = add i64 %6729, 5
  store i64 %6730, i64* %PC
  %6731 = inttoptr i64 %6728 to double*
  %6732 = load double, double* %6731
  %6733 = bitcast i8* %6726 to double*
  store double %6732, double* %6733, align 1, !tbaa !2452
  %6734 = getelementptr inbounds i8, i8* %6726, i64 8
  %6735 = bitcast i8* %6734 to double*
  store double 0.000000e+00, double* %6735, align 1, !tbaa !2452
  %6736 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6737 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6738 = load i64, i64* %RBP
  %6739 = sub i64 %6738, 96
  %6740 = load i64, i64* %PC
  %6741 = add i64 %6740, 5
  store i64 %6741, i64* %PC
  %6742 = bitcast i8* %6737 to double*
  %6743 = load double, double* %6742, align 1
  %6744 = getelementptr inbounds i8, i8* %6737, i64 8
  %6745 = bitcast i8* %6744 to i64*
  %6746 = load i64, i64* %6745, align 1
  %6747 = inttoptr i64 %6739 to double*
  %6748 = load double, double* %6747
  %6749 = fmul double %6743, %6748
  %6750 = bitcast i8* %6736 to double*
  store double %6749, double* %6750, align 1, !tbaa !2452
  %6751 = getelementptr inbounds i8, i8* %6736, i64 8
  %6752 = bitcast i8* %6751 to i64*
  store i64 %6746, i64* %6752, align 1, !tbaa !2452
  %6753 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6754 = load i64, i64* %RBP
  %6755 = sub i64 %6754, 56
  %6756 = load i64, i64* %PC
  %6757 = add i64 %6756, 5
  store i64 %6757, i64* %PC
  %6758 = inttoptr i64 %6755 to double*
  %6759 = load double, double* %6758
  %6760 = bitcast i8* %6753 to double*
  store double %6759, double* %6760, align 1, !tbaa !2452
  %6761 = getelementptr inbounds i8, i8* %6753, i64 8
  %6762 = bitcast i8* %6761 to double*
  store double 0.000000e+00, double* %6762, align 1, !tbaa !2452
  %6763 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6764 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6765 = load i64, i64* %RBP
  %6766 = sub i64 %6765, 104
  %6767 = load i64, i64* %PC
  %6768 = add i64 %6767, 5
  store i64 %6768, i64* %PC
  %6769 = bitcast i8* %6764 to double*
  %6770 = load double, double* %6769, align 1
  %6771 = getelementptr inbounds i8, i8* %6764, i64 8
  %6772 = bitcast i8* %6771 to i64*
  %6773 = load i64, i64* %6772, align 1
  %6774 = inttoptr i64 %6766 to double*
  %6775 = load double, double* %6774
  %6776 = fmul double %6770, %6775
  %6777 = bitcast i8* %6763 to double*
  store double %6776, double* %6777, align 1, !tbaa !2452
  %6778 = getelementptr inbounds i8, i8* %6763, i64 8
  %6779 = bitcast i8* %6778 to i64*
  store i64 %6773, i64* %6779, align 1, !tbaa !2452
  %6780 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6781 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6782 = bitcast %union.vec128_t* %XMM1 to i8*
  %6783 = load i64, i64* %PC
  %6784 = add i64 %6783, 4
  store i64 %6784, i64* %PC
  %6785 = bitcast i8* %6781 to double*
  %6786 = load double, double* %6785, align 1
  %6787 = getelementptr inbounds i8, i8* %6781, i64 8
  %6788 = bitcast i8* %6787 to i64*
  %6789 = load i64, i64* %6788, align 1
  %6790 = bitcast i8* %6782 to double*
  %6791 = load double, double* %6790, align 1
  %6792 = fsub double %6786, %6791
  %6793 = bitcast i8* %6780 to double*
  store double %6792, double* %6793, align 1, !tbaa !2452
  %6794 = getelementptr inbounds i8, i8* %6780, i64 8
  %6795 = bitcast i8* %6794 to i64*
  store i64 %6789, i64* %6795, align 1, !tbaa !2452
  %6796 = load i64, i64* %RBP
  %6797 = sub i64 %6796, 16
  %6798 = load i64, i64* %PC
  %6799 = add i64 %6798, 4
  store i64 %6799, i64* %PC
  %6800 = inttoptr i64 %6797 to i64*
  %6801 = load i64, i64* %6800
  store i64 %6801, i64* %RAX, align 8, !tbaa !2428
  %6802 = load i64, i64* %RBP
  %6803 = sub i64 %6802, 28
  %6804 = load i64, i64* %PC
  %6805 = add i64 %6804, 3
  store i64 %6805, i64* %PC
  %6806 = inttoptr i64 %6803 to i32*
  %6807 = load i32, i32* %6806
  %6808 = zext i32 %6807 to i64
  store i64 %6808, i64* %RCX, align 8, !tbaa !2428
  %6809 = load i64, i64* %RCX
  %6810 = load i64, i64* %PC
  %6811 = add i64 %6810, 3
  store i64 %6811, i64* %PC
  %6812 = trunc i64 %6809 to i32
  %6813 = add i32 10, %6812
  %6814 = zext i32 %6813 to i64
  store i64 %6814, i64* %RCX, align 8, !tbaa !2428
  %6815 = icmp ult i32 %6813, %6812
  %6816 = icmp ult i32 %6813, 10
  %6817 = or i1 %6815, %6816
  %6818 = zext i1 %6817 to i8
  %6819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6818, i8* %6819, align 1, !tbaa !2432
  %6820 = and i32 %6813, 255
  %6821 = call i32 @llvm.ctpop.i32(i32 %6820) #17
  %6822 = trunc i32 %6821 to i8
  %6823 = and i8 %6822, 1
  %6824 = xor i8 %6823, 1
  %6825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6824, i8* %6825, align 1, !tbaa !2446
  %6826 = xor i64 10, %6809
  %6827 = trunc i64 %6826 to i32
  %6828 = xor i32 %6827, %6813
  %6829 = lshr i32 %6828, 4
  %6830 = trunc i32 %6829 to i8
  %6831 = and i8 %6830, 1
  %6832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6831, i8* %6832, align 1, !tbaa !2447
  %6833 = icmp eq i32 %6813, 0
  %6834 = zext i1 %6833 to i8
  %6835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6834, i8* %6835, align 1, !tbaa !2448
  %6836 = lshr i32 %6813, 31
  %6837 = trunc i32 %6836 to i8
  %6838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6837, i8* %6838, align 1, !tbaa !2449
  %6839 = lshr i32 %6812, 31
  %6840 = xor i32 %6836, %6839
  %6841 = add nuw nsw i32 %6840, %6836
  %6842 = icmp eq i32 %6841, 2
  %6843 = zext i1 %6842 to i8
  %6844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6843, i8* %6844, align 1, !tbaa !2450
  %6845 = load i32, i32* %ECX
  %6846 = zext i32 %6845 to i64
  %6847 = load i64, i64* %PC
  %6848 = add i64 %6847, 3
  store i64 %6848, i64* %PC
  %6849 = shl i64 %6846, 32
  %6850 = ashr exact i64 %6849, 32
  store i64 %6850, i64* %RDX, align 8, !tbaa !2428
  %6851 = load i64, i64* %RAX
  %6852 = load i64, i64* %RDX
  %6853 = mul i64 %6852, 8
  %6854 = add i64 %6853, %6851
  %6855 = bitcast %union.vec128_t* %XMM0 to i8*
  %6856 = load i64, i64* %PC
  %6857 = add i64 %6856, 5
  store i64 %6857, i64* %PC
  %6858 = bitcast i8* %6855 to double*
  %6859 = load double, double* %6858, align 1
  %6860 = inttoptr i64 %6854 to double*
  store double %6859, double* %6860
  %6861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6862 = load i64, i64* %RBP
  %6863 = sub i64 %6862, 48
  %6864 = load i64, i64* %PC
  %6865 = add i64 %6864, 5
  store i64 %6865, i64* %PC
  %6866 = inttoptr i64 %6863 to double*
  %6867 = load double, double* %6866
  %6868 = bitcast i8* %6861 to double*
  store double %6867, double* %6868, align 1, !tbaa !2452
  %6869 = getelementptr inbounds i8, i8* %6861, i64 8
  %6870 = bitcast i8* %6869 to double*
  store double 0.000000e+00, double* %6870, align 1, !tbaa !2452
  %6871 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6872 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6873 = load i64, i64* %RBP
  %6874 = sub i64 %6873, 104
  %6875 = load i64, i64* %PC
  %6876 = add i64 %6875, 5
  store i64 %6876, i64* %PC
  %6877 = bitcast i8* %6872 to double*
  %6878 = load double, double* %6877, align 1
  %6879 = getelementptr inbounds i8, i8* %6872, i64 8
  %6880 = bitcast i8* %6879 to i64*
  %6881 = load i64, i64* %6880, align 1
  %6882 = inttoptr i64 %6874 to double*
  %6883 = load double, double* %6882
  %6884 = fmul double %6878, %6883
  %6885 = bitcast i8* %6871 to double*
  store double %6884, double* %6885, align 1, !tbaa !2452
  %6886 = getelementptr inbounds i8, i8* %6871, i64 8
  %6887 = bitcast i8* %6886 to i64*
  store i64 %6881, i64* %6887, align 1, !tbaa !2452
  %6888 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6889 = load i64, i64* %RBP
  %6890 = sub i64 %6889, 56
  %6891 = load i64, i64* %PC
  %6892 = add i64 %6891, 5
  store i64 %6892, i64* %PC
  %6893 = inttoptr i64 %6890 to double*
  %6894 = load double, double* %6893
  %6895 = bitcast i8* %6888 to double*
  store double %6894, double* %6895, align 1, !tbaa !2452
  %6896 = getelementptr inbounds i8, i8* %6888, i64 8
  %6897 = bitcast i8* %6896 to double*
  store double 0.000000e+00, double* %6897, align 1, !tbaa !2452
  %6898 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6899 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6900 = load i64, i64* %RBP
  %6901 = sub i64 %6900, 96
  %6902 = load i64, i64* %PC
  %6903 = add i64 %6902, 5
  store i64 %6903, i64* %PC
  %6904 = bitcast i8* %6899 to double*
  %6905 = load double, double* %6904, align 1
  %6906 = getelementptr inbounds i8, i8* %6899, i64 8
  %6907 = bitcast i8* %6906 to i64*
  %6908 = load i64, i64* %6907, align 1
  %6909 = inttoptr i64 %6901 to double*
  %6910 = load double, double* %6909
  %6911 = fmul double %6905, %6910
  %6912 = bitcast i8* %6898 to double*
  store double %6911, double* %6912, align 1, !tbaa !2452
  %6913 = getelementptr inbounds i8, i8* %6898, i64 8
  %6914 = bitcast i8* %6913 to i64*
  store i64 %6908, i64* %6914, align 1, !tbaa !2452
  %6915 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6916 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6917 = bitcast %union.vec128_t* %XMM1 to i8*
  %6918 = load i64, i64* %PC
  %6919 = add i64 %6918, 4
  store i64 %6919, i64* %PC
  %6920 = bitcast i8* %6916 to double*
  %6921 = load double, double* %6920, align 1
  %6922 = getelementptr inbounds i8, i8* %6916, i64 8
  %6923 = bitcast i8* %6922 to i64*
  %6924 = load i64, i64* %6923, align 1
  %6925 = bitcast i8* %6917 to double*
  %6926 = load double, double* %6925, align 1
  %6927 = fadd double %6921, %6926
  %6928 = bitcast i8* %6915 to double*
  store double %6927, double* %6928, align 1, !tbaa !2452
  %6929 = getelementptr inbounds i8, i8* %6915, i64 8
  %6930 = bitcast i8* %6929 to i64*
  store i64 %6924, i64* %6930, align 1, !tbaa !2452
  %6931 = load i64, i64* %RBP
  %6932 = sub i64 %6931, 16
  %6933 = load i64, i64* %PC
  %6934 = add i64 %6933, 4
  store i64 %6934, i64* %PC
  %6935 = inttoptr i64 %6932 to i64*
  %6936 = load i64, i64* %6935
  store i64 %6936, i64* %RAX, align 8, !tbaa !2428
  %6937 = load i64, i64* %RBP
  %6938 = sub i64 %6937, 28
  %6939 = load i64, i64* %PC
  %6940 = add i64 %6939, 3
  store i64 %6940, i64* %PC
  %6941 = inttoptr i64 %6938 to i32*
  %6942 = load i32, i32* %6941
  %6943 = zext i32 %6942 to i64
  store i64 %6943, i64* %RCX, align 8, !tbaa !2428
  %6944 = load i64, i64* %RCX
  %6945 = load i64, i64* %PC
  %6946 = add i64 %6945, 3
  store i64 %6946, i64* %PC
  %6947 = trunc i64 %6944 to i32
  %6948 = add i32 11, %6947
  %6949 = zext i32 %6948 to i64
  store i64 %6949, i64* %RCX, align 8, !tbaa !2428
  %6950 = icmp ult i32 %6948, %6947
  %6951 = icmp ult i32 %6948, 11
  %6952 = or i1 %6950, %6951
  %6953 = zext i1 %6952 to i8
  %6954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6953, i8* %6954, align 1, !tbaa !2432
  %6955 = and i32 %6948, 255
  %6956 = call i32 @llvm.ctpop.i32(i32 %6955) #17
  %6957 = trunc i32 %6956 to i8
  %6958 = and i8 %6957, 1
  %6959 = xor i8 %6958, 1
  %6960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6959, i8* %6960, align 1, !tbaa !2446
  %6961 = xor i64 11, %6944
  %6962 = trunc i64 %6961 to i32
  %6963 = xor i32 %6962, %6948
  %6964 = lshr i32 %6963, 4
  %6965 = trunc i32 %6964 to i8
  %6966 = and i8 %6965, 1
  %6967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6966, i8* %6967, align 1, !tbaa !2447
  %6968 = icmp eq i32 %6948, 0
  %6969 = zext i1 %6968 to i8
  %6970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6969, i8* %6970, align 1, !tbaa !2448
  %6971 = lshr i32 %6948, 31
  %6972 = trunc i32 %6971 to i8
  %6973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6972, i8* %6973, align 1, !tbaa !2449
  %6974 = lshr i32 %6947, 31
  %6975 = xor i32 %6971, %6974
  %6976 = add nuw nsw i32 %6975, %6971
  %6977 = icmp eq i32 %6976, 2
  %6978 = zext i1 %6977 to i8
  %6979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6978, i8* %6979, align 1, !tbaa !2450
  %6980 = load i32, i32* %ECX
  %6981 = zext i32 %6980 to i64
  %6982 = load i64, i64* %PC
  %6983 = add i64 %6982, 3
  store i64 %6983, i64* %PC
  %6984 = shl i64 %6981, 32
  %6985 = ashr exact i64 %6984, 32
  store i64 %6985, i64* %RDX, align 8, !tbaa !2428
  %6986 = load i64, i64* %RAX
  %6987 = load i64, i64* %RDX
  %6988 = mul i64 %6987, 8
  %6989 = add i64 %6988, %6986
  %6990 = bitcast %union.vec128_t* %XMM0 to i8*
  %6991 = load i64, i64* %PC
  %6992 = add i64 %6991, 5
  store i64 %6992, i64* %PC
  %6993 = bitcast i8* %6990 to double*
  %6994 = load double, double* %6993, align 1
  %6995 = inttoptr i64 %6989 to double*
  store double %6994, double* %6995
  %6996 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6997 = load i64, i64* %RBP
  %6998 = sub i64 %6997, 112
  %6999 = load i64, i64* %PC
  %7000 = add i64 %6999, 5
  store i64 %7000, i64* %PC
  %7001 = inttoptr i64 %6998 to double*
  %7002 = load double, double* %7001
  %7003 = bitcast i8* %6996 to double*
  store double %7002, double* %7003, align 1, !tbaa !2452
  %7004 = getelementptr inbounds i8, i8* %6996, i64 8
  %7005 = bitcast i8* %7004 to double*
  store double 0.000000e+00, double* %7005, align 1, !tbaa !2452
  %7006 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7008 = load i64, i64* %RBP
  %7009 = sub i64 %7008, 152
  %7010 = load i64, i64* %PC
  %7011 = add i64 %7010, 8
  store i64 %7011, i64* %PC
  %7012 = bitcast i8* %7007 to double*
  %7013 = load double, double* %7012, align 1
  %7014 = getelementptr inbounds i8, i8* %7007, i64 8
  %7015 = bitcast i8* %7014 to i64*
  %7016 = load i64, i64* %7015, align 1
  %7017 = inttoptr i64 %7009 to double*
  %7018 = load double, double* %7017
  %7019 = fadd double %7013, %7018
  %7020 = bitcast i8* %7006 to double*
  store double %7019, double* %7020, align 1, !tbaa !2452
  %7021 = getelementptr inbounds i8, i8* %7006, i64 8
  %7022 = bitcast i8* %7021 to i64*
  store i64 %7016, i64* %7022, align 1, !tbaa !2452
  %7023 = load i64, i64* %RBP
  %7024 = sub i64 %7023, 96
  %7025 = bitcast %union.vec128_t* %XMM0 to i8*
  %7026 = load i64, i64* %PC
  %7027 = add i64 %7026, 5
  store i64 %7027, i64* %PC
  %7028 = bitcast i8* %7025 to double*
  %7029 = load double, double* %7028, align 1
  %7030 = inttoptr i64 %7024 to double*
  store double %7029, double* %7030
  %7031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7032 = load i64, i64* %RBP
  %7033 = sub i64 %7032, 120
  %7034 = load i64, i64* %PC
  %7035 = add i64 %7034, 5
  store i64 %7035, i64* %PC
  %7036 = inttoptr i64 %7033 to double*
  %7037 = load double, double* %7036
  %7038 = bitcast i8* %7031 to double*
  store double %7037, double* %7038, align 1, !tbaa !2452
  %7039 = getelementptr inbounds i8, i8* %7031, i64 8
  %7040 = bitcast i8* %7039 to double*
  store double 0.000000e+00, double* %7040, align 1, !tbaa !2452
  %7041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7042 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7043 = load i64, i64* %RBP
  %7044 = sub i64 %7043, 144
  %7045 = load i64, i64* %PC
  %7046 = add i64 %7045, 8
  store i64 %7046, i64* %PC
  %7047 = bitcast i8* %7042 to double*
  %7048 = load double, double* %7047, align 1
  %7049 = getelementptr inbounds i8, i8* %7042, i64 8
  %7050 = bitcast i8* %7049 to i64*
  %7051 = load i64, i64* %7050, align 1
  %7052 = inttoptr i64 %7044 to double*
  %7053 = load double, double* %7052
  %7054 = fsub double %7048, %7053
  %7055 = bitcast i8* %7041 to double*
  store double %7054, double* %7055, align 1, !tbaa !2452
  %7056 = getelementptr inbounds i8, i8* %7041, i64 8
  %7057 = bitcast i8* %7056 to i64*
  store i64 %7051, i64* %7057, align 1, !tbaa !2452
  %7058 = load i64, i64* %RBP
  %7059 = sub i64 %7058, 104
  %7060 = bitcast %union.vec128_t* %XMM0 to i8*
  %7061 = load i64, i64* %PC
  %7062 = add i64 %7061, 5
  store i64 %7062, i64* %PC
  %7063 = bitcast i8* %7060 to double*
  %7064 = load double, double* %7063, align 1
  %7065 = inttoptr i64 %7059 to double*
  store double %7064, double* %7065
  %7066 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7067 = load i64, i64* %RBP
  %7068 = sub i64 %7067, 80
  %7069 = load i64, i64* %PC
  %7070 = add i64 %7069, 5
  store i64 %7070, i64* %PC
  %7071 = inttoptr i64 %7068 to double*
  %7072 = load double, double* %7071
  %7073 = bitcast i8* %7066 to double*
  store double %7072, double* %7073, align 1, !tbaa !2452
  %7074 = getelementptr inbounds i8, i8* %7066, i64 8
  %7075 = bitcast i8* %7074 to double*
  store double 0.000000e+00, double* %7075, align 1, !tbaa !2452
  %7076 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7077 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7078 = load i64, i64* %RBP
  %7079 = sub i64 %7078, 96
  %7080 = load i64, i64* %PC
  %7081 = add i64 %7080, 5
  store i64 %7081, i64* %PC
  %7082 = bitcast i8* %7077 to double*
  %7083 = load double, double* %7082, align 1
  %7084 = getelementptr inbounds i8, i8* %7077, i64 8
  %7085 = bitcast i8* %7084 to i64*
  %7086 = load i64, i64* %7085, align 1
  %7087 = inttoptr i64 %7079 to double*
  %7088 = load double, double* %7087
  %7089 = fmul double %7083, %7088
  %7090 = bitcast i8* %7076 to double*
  store double %7089, double* %7090, align 1, !tbaa !2452
  %7091 = getelementptr inbounds i8, i8* %7076, i64 8
  %7092 = bitcast i8* %7091 to i64*
  store i64 %7086, i64* %7092, align 1, !tbaa !2452
  %7093 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7094 = load i64, i64* %RBP
  %7095 = sub i64 %7094, 88
  %7096 = load i64, i64* %PC
  %7097 = add i64 %7096, 5
  store i64 %7097, i64* %PC
  %7098 = inttoptr i64 %7095 to double*
  %7099 = load double, double* %7098
  %7100 = bitcast i8* %7093 to double*
  store double %7099, double* %7100, align 1, !tbaa !2452
  %7101 = getelementptr inbounds i8, i8* %7093, i64 8
  %7102 = bitcast i8* %7101 to double*
  store double 0.000000e+00, double* %7102, align 1, !tbaa !2452
  %7103 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7104 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7105 = load i64, i64* %RBP
  %7106 = sub i64 %7105, 104
  %7107 = load i64, i64* %PC
  %7108 = add i64 %7107, 5
  store i64 %7108, i64* %PC
  %7109 = bitcast i8* %7104 to double*
  %7110 = load double, double* %7109, align 1
  %7111 = getelementptr inbounds i8, i8* %7104, i64 8
  %7112 = bitcast i8* %7111 to i64*
  %7113 = load i64, i64* %7112, align 1
  %7114 = inttoptr i64 %7106 to double*
  %7115 = load double, double* %7114
  %7116 = fmul double %7110, %7115
  %7117 = bitcast i8* %7103 to double*
  store double %7116, double* %7117, align 1, !tbaa !2452
  %7118 = getelementptr inbounds i8, i8* %7103, i64 8
  %7119 = bitcast i8* %7118 to i64*
  store i64 %7113, i64* %7119, align 1, !tbaa !2452
  %7120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7121 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7122 = bitcast %union.vec128_t* %XMM1 to i8*
  %7123 = load i64, i64* %PC
  %7124 = add i64 %7123, 4
  store i64 %7124, i64* %PC
  %7125 = bitcast i8* %7121 to double*
  %7126 = load double, double* %7125, align 1
  %7127 = getelementptr inbounds i8, i8* %7121, i64 8
  %7128 = bitcast i8* %7127 to i64*
  %7129 = load i64, i64* %7128, align 1
  %7130 = bitcast i8* %7122 to double*
  %7131 = load double, double* %7130, align 1
  %7132 = fsub double %7126, %7131
  %7133 = bitcast i8* %7120 to double*
  store double %7132, double* %7133, align 1, !tbaa !2452
  %7134 = getelementptr inbounds i8, i8* %7120, i64 8
  %7135 = bitcast i8* %7134 to i64*
  store i64 %7129, i64* %7135, align 1, !tbaa !2452
  %7136 = load i64, i64* %RBP
  %7137 = sub i64 %7136, 16
  %7138 = load i64, i64* %PC
  %7139 = add i64 %7138, 4
  store i64 %7139, i64* %PC
  %7140 = inttoptr i64 %7137 to i64*
  %7141 = load i64, i64* %7140
  store i64 %7141, i64* %RAX, align 8, !tbaa !2428
  %7142 = load i64, i64* %RBP
  %7143 = sub i64 %7142, 28
  %7144 = load i64, i64* %PC
  %7145 = add i64 %7144, 3
  store i64 %7145, i64* %PC
  %7146 = inttoptr i64 %7143 to i32*
  %7147 = load i32, i32* %7146
  %7148 = zext i32 %7147 to i64
  store i64 %7148, i64* %RCX, align 8, !tbaa !2428
  %7149 = load i64, i64* %RCX
  %7150 = load i64, i64* %PC
  %7151 = add i64 %7150, 3
  store i64 %7151, i64* %PC
  %7152 = trunc i64 %7149 to i32
  %7153 = add i32 14, %7152
  %7154 = zext i32 %7153 to i64
  store i64 %7154, i64* %RCX, align 8, !tbaa !2428
  %7155 = icmp ult i32 %7153, %7152
  %7156 = icmp ult i32 %7153, 14
  %7157 = or i1 %7155, %7156
  %7158 = zext i1 %7157 to i8
  %7159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7158, i8* %7159, align 1, !tbaa !2432
  %7160 = and i32 %7153, 255
  %7161 = call i32 @llvm.ctpop.i32(i32 %7160) #17
  %7162 = trunc i32 %7161 to i8
  %7163 = and i8 %7162, 1
  %7164 = xor i8 %7163, 1
  %7165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7164, i8* %7165, align 1, !tbaa !2446
  %7166 = xor i64 14, %7149
  %7167 = trunc i64 %7166 to i32
  %7168 = xor i32 %7167, %7153
  %7169 = lshr i32 %7168, 4
  %7170 = trunc i32 %7169 to i8
  %7171 = and i8 %7170, 1
  %7172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7171, i8* %7172, align 1, !tbaa !2447
  %7173 = icmp eq i32 %7153, 0
  %7174 = zext i1 %7173 to i8
  %7175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7174, i8* %7175, align 1, !tbaa !2448
  %7176 = lshr i32 %7153, 31
  %7177 = trunc i32 %7176 to i8
  %7178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7177, i8* %7178, align 1, !tbaa !2449
  %7179 = lshr i32 %7152, 31
  %7180 = xor i32 %7176, %7179
  %7181 = add nuw nsw i32 %7180, %7176
  %7182 = icmp eq i32 %7181, 2
  %7183 = zext i1 %7182 to i8
  %7184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7183, i8* %7184, align 1, !tbaa !2450
  %7185 = load i32, i32* %ECX
  %7186 = zext i32 %7185 to i64
  %7187 = load i64, i64* %PC
  %7188 = add i64 %7187, 3
  store i64 %7188, i64* %PC
  %7189 = shl i64 %7186, 32
  %7190 = ashr exact i64 %7189, 32
  store i64 %7190, i64* %RDX, align 8, !tbaa !2428
  %7191 = load i64, i64* %RAX
  %7192 = load i64, i64* %RDX
  %7193 = mul i64 %7192, 8
  %7194 = add i64 %7193, %7191
  %7195 = bitcast %union.vec128_t* %XMM0 to i8*
  %7196 = load i64, i64* %PC
  %7197 = add i64 %7196, 5
  store i64 %7197, i64* %PC
  %7198 = bitcast i8* %7195 to double*
  %7199 = load double, double* %7198, align 1
  %7200 = inttoptr i64 %7194 to double*
  store double %7199, double* %7200
  %7201 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7202 = load i64, i64* %RBP
  %7203 = sub i64 %7202, 80
  %7204 = load i64, i64* %PC
  %7205 = add i64 %7204, 5
  store i64 %7205, i64* %PC
  %7206 = inttoptr i64 %7203 to double*
  %7207 = load double, double* %7206
  %7208 = bitcast i8* %7201 to double*
  store double %7207, double* %7208, align 1, !tbaa !2452
  %7209 = getelementptr inbounds i8, i8* %7201, i64 8
  %7210 = bitcast i8* %7209 to double*
  store double 0.000000e+00, double* %7210, align 1, !tbaa !2452
  %7211 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7212 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7213 = load i64, i64* %RBP
  %7214 = sub i64 %7213, 104
  %7215 = load i64, i64* %PC
  %7216 = add i64 %7215, 5
  store i64 %7216, i64* %PC
  %7217 = bitcast i8* %7212 to double*
  %7218 = load double, double* %7217, align 1
  %7219 = getelementptr inbounds i8, i8* %7212, i64 8
  %7220 = bitcast i8* %7219 to i64*
  %7221 = load i64, i64* %7220, align 1
  %7222 = inttoptr i64 %7214 to double*
  %7223 = load double, double* %7222
  %7224 = fmul double %7218, %7223
  %7225 = bitcast i8* %7211 to double*
  store double %7224, double* %7225, align 1, !tbaa !2452
  %7226 = getelementptr inbounds i8, i8* %7211, i64 8
  %7227 = bitcast i8* %7226 to i64*
  store i64 %7221, i64* %7227, align 1, !tbaa !2452
  %7228 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7229 = load i64, i64* %RBP
  %7230 = sub i64 %7229, 88
  %7231 = load i64, i64* %PC
  %7232 = add i64 %7231, 5
  store i64 %7232, i64* %PC
  %7233 = inttoptr i64 %7230 to double*
  %7234 = load double, double* %7233
  %7235 = bitcast i8* %7228 to double*
  store double %7234, double* %7235, align 1, !tbaa !2452
  %7236 = getelementptr inbounds i8, i8* %7228, i64 8
  %7237 = bitcast i8* %7236 to double*
  store double 0.000000e+00, double* %7237, align 1, !tbaa !2452
  %7238 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7239 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7240 = load i64, i64* %RBP
  %7241 = sub i64 %7240, 96
  %7242 = load i64, i64* %PC
  %7243 = add i64 %7242, 5
  store i64 %7243, i64* %PC
  %7244 = bitcast i8* %7239 to double*
  %7245 = load double, double* %7244, align 1
  %7246 = getelementptr inbounds i8, i8* %7239, i64 8
  %7247 = bitcast i8* %7246 to i64*
  %7248 = load i64, i64* %7247, align 1
  %7249 = inttoptr i64 %7241 to double*
  %7250 = load double, double* %7249
  %7251 = fmul double %7245, %7250
  %7252 = bitcast i8* %7238 to double*
  store double %7251, double* %7252, align 1, !tbaa !2452
  %7253 = getelementptr inbounds i8, i8* %7238, i64 8
  %7254 = bitcast i8* %7253 to i64*
  store i64 %7248, i64* %7254, align 1, !tbaa !2452
  %7255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7256 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7257 = bitcast %union.vec128_t* %XMM1 to i8*
  %7258 = load i64, i64* %PC
  %7259 = add i64 %7258, 4
  store i64 %7259, i64* %PC
  %7260 = bitcast i8* %7256 to double*
  %7261 = load double, double* %7260, align 1
  %7262 = getelementptr inbounds i8, i8* %7256, i64 8
  %7263 = bitcast i8* %7262 to i64*
  %7264 = load i64, i64* %7263, align 1
  %7265 = bitcast i8* %7257 to double*
  %7266 = load double, double* %7265, align 1
  %7267 = fadd double %7261, %7266
  %7268 = bitcast i8* %7255 to double*
  store double %7267, double* %7268, align 1, !tbaa !2452
  %7269 = getelementptr inbounds i8, i8* %7255, i64 8
  %7270 = bitcast i8* %7269 to i64*
  store i64 %7264, i64* %7270, align 1, !tbaa !2452
  %7271 = load i64, i64* %RBP
  %7272 = sub i64 %7271, 16
  %7273 = load i64, i64* %PC
  %7274 = add i64 %7273, 4
  store i64 %7274, i64* %PC
  %7275 = inttoptr i64 %7272 to i64*
  %7276 = load i64, i64* %7275
  store i64 %7276, i64* %RAX, align 8, !tbaa !2428
  %7277 = load i64, i64* %RBP
  %7278 = sub i64 %7277, 28
  %7279 = load i64, i64* %PC
  %7280 = add i64 %7279, 3
  store i64 %7280, i64* %PC
  %7281 = inttoptr i64 %7278 to i32*
  %7282 = load i32, i32* %7281
  %7283 = zext i32 %7282 to i64
  store i64 %7283, i64* %RCX, align 8, !tbaa !2428
  %7284 = load i64, i64* %RCX
  %7285 = load i64, i64* %PC
  %7286 = add i64 %7285, 3
  store i64 %7286, i64* %PC
  %7287 = trunc i64 %7284 to i32
  %7288 = add i32 15, %7287
  %7289 = zext i32 %7288 to i64
  store i64 %7289, i64* %RCX, align 8, !tbaa !2428
  %7290 = icmp ult i32 %7288, %7287
  %7291 = icmp ult i32 %7288, 15
  %7292 = or i1 %7290, %7291
  %7293 = zext i1 %7292 to i8
  %7294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7293, i8* %7294, align 1, !tbaa !2432
  %7295 = and i32 %7288, 255
  %7296 = call i32 @llvm.ctpop.i32(i32 %7295) #17
  %7297 = trunc i32 %7296 to i8
  %7298 = and i8 %7297, 1
  %7299 = xor i8 %7298, 1
  %7300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7299, i8* %7300, align 1, !tbaa !2446
  %7301 = xor i64 15, %7284
  %7302 = trunc i64 %7301 to i32
  %7303 = xor i32 %7302, %7288
  %7304 = lshr i32 %7303, 4
  %7305 = trunc i32 %7304 to i8
  %7306 = and i8 %7305, 1
  %7307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7306, i8* %7307, align 1, !tbaa !2447
  %7308 = icmp eq i32 %7288, 0
  %7309 = zext i1 %7308 to i8
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7309, i8* %7310, align 1, !tbaa !2448
  %7311 = lshr i32 %7288, 31
  %7312 = trunc i32 %7311 to i8
  %7313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7312, i8* %7313, align 1, !tbaa !2449
  %7314 = lshr i32 %7287, 31
  %7315 = xor i32 %7311, %7314
  %7316 = add nuw nsw i32 %7315, %7311
  %7317 = icmp eq i32 %7316, 2
  %7318 = zext i1 %7317 to i8
  %7319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7318, i8* %7319, align 1, !tbaa !2450
  %7320 = load i32, i32* %ECX
  %7321 = zext i32 %7320 to i64
  %7322 = load i64, i64* %PC
  %7323 = add i64 %7322, 3
  store i64 %7323, i64* %PC
  %7324 = shl i64 %7321, 32
  %7325 = ashr exact i64 %7324, 32
  store i64 %7325, i64* %RDX, align 8, !tbaa !2428
  %7326 = load i64, i64* %RAX
  %7327 = load i64, i64* %RDX
  %7328 = mul i64 %7327, 8
  %7329 = add i64 %7328, %7326
  %7330 = bitcast %union.vec128_t* %XMM0 to i8*
  %7331 = load i64, i64* %PC
  %7332 = add i64 %7331, 5
  store i64 %7332, i64* %PC
  %7333 = bitcast i8* %7330 to double*
  %7334 = load double, double* %7333, align 1
  %7335 = inttoptr i64 %7329 to double*
  store double %7334, double* %7335
  %7336 = load i64, i64* %RBP
  %7337 = sub i64 %7336, 28
  %7338 = load i64, i64* %PC
  %7339 = add i64 %7338, 3
  store i64 %7339, i64* %PC
  %7340 = inttoptr i64 %7337 to i32*
  %7341 = load i32, i32* %7340
  %7342 = zext i32 %7341 to i64
  store i64 %7342, i64* %RAX, align 8, !tbaa !2428
  %7343 = load i64, i64* %RAX
  %7344 = load i64, i64* %PC
  %7345 = add i64 %7344, 3
  store i64 %7345, i64* %PC
  %7346 = trunc i64 %7343 to i32
  %7347 = add i32 16, %7346
  %7348 = zext i32 %7347 to i64
  store i64 %7348, i64* %RAX, align 8, !tbaa !2428
  %7349 = icmp ult i32 %7347, %7346
  %7350 = icmp ult i32 %7347, 16
  %7351 = or i1 %7349, %7350
  %7352 = zext i1 %7351 to i8
  %7353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7352, i8* %7353, align 1, !tbaa !2432
  %7354 = and i32 %7347, 255
  %7355 = call i32 @llvm.ctpop.i32(i32 %7354) #17
  %7356 = trunc i32 %7355 to i8
  %7357 = and i8 %7356, 1
  %7358 = xor i8 %7357, 1
  %7359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7358, i8* %7359, align 1, !tbaa !2446
  %7360 = xor i64 16, %7343
  %7361 = trunc i64 %7360 to i32
  %7362 = xor i32 %7361, %7347
  %7363 = lshr i32 %7362, 4
  %7364 = trunc i32 %7363 to i8
  %7365 = and i8 %7364, 1
  %7366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7365, i8* %7366, align 1, !tbaa !2447
  %7367 = icmp eq i32 %7347, 0
  %7368 = zext i1 %7367 to i8
  %7369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7368, i8* %7369, align 1, !tbaa !2448
  %7370 = lshr i32 %7347, 31
  %7371 = trunc i32 %7370 to i8
  %7372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7371, i8* %7372, align 1, !tbaa !2449
  %7373 = lshr i32 %7346, 31
  %7374 = xor i32 %7370, %7373
  %7375 = add nuw nsw i32 %7374, %7370
  %7376 = icmp eq i32 %7375, 2
  %7377 = zext i1 %7376 to i8
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7377, i8* %7378, align 1, !tbaa !2450
  %7379 = load i64, i64* %RBP
  %7380 = sub i64 %7379, 28
  %7381 = load i32, i32* %EAX
  %7382 = zext i32 %7381 to i64
  %7383 = load i64, i64* %PC
  %7384 = add i64 %7383, 3
  store i64 %7384, i64* %PC
  %7385 = inttoptr i64 %7380 to i32*
  store i32 %7381, i32* %7385
  %7386 = load i64, i64* %PC
  %7387 = sub i64 %7386, 1815
  %7388 = load i64, i64* %PC
  %7389 = add i64 %7388, 5
  store i64 %7389, i64* %PC
  %7390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7387, i64* %7390, align 8, !tbaa !2428
  br label %block_402c02

block_40331e:                                     ; preds = %block_402c02
  %7391 = load i64, i64* %RSP
  %7392 = load i64, i64* %PC
  %7393 = add i64 %7392, 4
  store i64 %7393, i64* %PC
  %7394 = add i64 24, %7391
  store i64 %7394, i64* %RSP, align 8, !tbaa !2428
  %7395 = icmp ult i64 %7394, %7391
  %7396 = icmp ult i64 %7394, 24
  %7397 = or i1 %7395, %7396
  %7398 = zext i1 %7397 to i8
  %7399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7398, i8* %7399, align 1, !tbaa !2432
  %7400 = trunc i64 %7394 to i32
  %7401 = and i32 %7400, 255
  %7402 = call i32 @llvm.ctpop.i32(i32 %7401) #17
  %7403 = trunc i32 %7402 to i8
  %7404 = and i8 %7403, 1
  %7405 = xor i8 %7404, 1
  %7406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7405, i8* %7406, align 1, !tbaa !2446
  %7407 = xor i64 24, %7391
  %7408 = xor i64 %7407, %7394
  %7409 = lshr i64 %7408, 4
  %7410 = trunc i64 %7409 to i8
  %7411 = and i8 %7410, 1
  %7412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7411, i8* %7412, align 1, !tbaa !2447
  %7413 = icmp eq i64 %7394, 0
  %7414 = zext i1 %7413 to i8
  %7415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7414, i8* %7415, align 1, !tbaa !2448
  %7416 = lshr i64 %7394, 63
  %7417 = trunc i64 %7416 to i8
  %7418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7417, i8* %7418, align 1, !tbaa !2449
  %7419 = lshr i64 %7391, 63
  %7420 = xor i64 %7416, %7419
  %7421 = add nuw nsw i64 %7420, %7416
  %7422 = icmp eq i64 %7421, 2
  %7423 = zext i1 %7422 to i8
  %7424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7423, i8* %7424, align 1, !tbaa !2450
  %7425 = load i64, i64* %PC
  %7426 = add i64 %7425, 1
  store i64 %7426, i64* %PC
  %7427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7428 = load i64, i64* %7427, align 8, !tbaa !2428
  %7429 = add i64 %7428, 8
  %7430 = inttoptr i64 %7428 to i64*
  %7431 = load i64, i64* %7430
  store i64 %7431, i64* %RBP, align 8, !tbaa !2428
  store i64 %7429, i64* %7427, align 8, !tbaa !2428
  %7432 = load i64, i64* %PC
  %7433 = add i64 %7432, 1
  store i64 %7433, i64* %PC
  %7434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7436 = load i64, i64* %7435, align 8, !tbaa !2428
  %7437 = inttoptr i64 %7436 to i64*
  %7438 = load i64, i64* %7437
  store i64 %7438, i64* %7434, align 8, !tbaa !2428
  %7439 = add i64 %7436, 8
  store i64 %7439, i64* %7435, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402c02:                                     ; preds = %block_402c0e, %block_4028a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4028a0 ], [ %MEMORY.0, %block_402c0e ]
  %7440 = load i64, i64* %RBP
  %7441 = sub i64 %7440, 28
  %7442 = load i64, i64* %PC
  %7443 = add i64 %7442, 3
  store i64 %7443, i64* %PC
  %7444 = inttoptr i64 %7441 to i32*
  %7445 = load i32, i32* %7444
  %7446 = zext i32 %7445 to i64
  store i64 %7446, i64* %RAX, align 8, !tbaa !2428
  %7447 = load i32, i32* %EAX
  %7448 = zext i32 %7447 to i64
  %7449 = load i64, i64* %RBP
  %7450 = sub i64 %7449, 4
  %7451 = load i64, i64* %PC
  %7452 = add i64 %7451, 3
  store i64 %7452, i64* %PC
  %7453 = inttoptr i64 %7450 to i32*
  %7454 = load i32, i32* %7453
  %7455 = sub i32 %7447, %7454
  %7456 = icmp ult i32 %7447, %7454
  %7457 = zext i1 %7456 to i8
  %7458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7457, i8* %7458, align 1, !tbaa !2432
  %7459 = and i32 %7455, 255
  %7460 = call i32 @llvm.ctpop.i32(i32 %7459) #17
  %7461 = trunc i32 %7460 to i8
  %7462 = and i8 %7461, 1
  %7463 = xor i8 %7462, 1
  %7464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7463, i8* %7464, align 1, !tbaa !2446
  %7465 = xor i32 %7454, %7447
  %7466 = xor i32 %7465, %7455
  %7467 = lshr i32 %7466, 4
  %7468 = trunc i32 %7467 to i8
  %7469 = and i8 %7468, 1
  %7470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7469, i8* %7470, align 1, !tbaa !2447
  %7471 = icmp eq i32 %7455, 0
  %7472 = zext i1 %7471 to i8
  %7473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7472, i8* %7473, align 1, !tbaa !2448
  %7474 = lshr i32 %7455, 31
  %7475 = trunc i32 %7474 to i8
  %7476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7475, i8* %7476, align 1, !tbaa !2449
  %7477 = lshr i32 %7447, 31
  %7478 = lshr i32 %7454, 31
  %7479 = xor i32 %7478, %7477
  %7480 = xor i32 %7474, %7477
  %7481 = add nuw nsw i32 %7480, %7479
  %7482 = icmp eq i32 %7481, 2
  %7483 = zext i1 %7482 to i8
  %7484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7483, i8* %7484, align 1, !tbaa !2450
  %7485 = load i64, i64* %PC
  %7486 = add i64 %7485, 1814
  %7487 = load i64, i64* %PC
  %7488 = add i64 %7487, 6
  %7489 = load i64, i64* %PC
  %7490 = add i64 %7489, 6
  store i64 %7490, i64* %PC
  %7491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7492 = load i8, i8* %7491, align 1, !tbaa !2449
  %7493 = icmp ne i8 %7492, 0
  %7494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7495 = load i8, i8* %7494, align 1, !tbaa !2450
  %7496 = icmp ne i8 %7495, 0
  %7497 = xor i1 %7493, %7496
  %7498 = xor i1 %7497, true
  %7499 = zext i1 %7498 to i8
  store i8 %7499, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7501 = select i1 %7497, i64 %7488, i64 %7486
  store i64 %7501, i64* %7500, align 8, !tbaa !2428
  %7502 = load i8, i8* %BRANCH_TAKEN
  %7503 = icmp eq i8 %7502, 1
  br i1 %7503, label %block_40331e, label %block_402c0e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007d0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #17
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #17
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #17
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #17
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #17
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_400808, label %block_4007f3

block_4007fd:                                     ; preds = %block_4007f3
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4196362, label %block_40080a
    i64 4196357, label %block_400805
  ]

block_40080a:                                     ; preds = %block_4007fd
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_400810___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_4007f3:                                     ; preds = %block_4007d0
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2432
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #17
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2446
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2447
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2448
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_400808, label %block_4007fd

block_400808:                                     ; preds = %block_400805, %block_4007f3, %block_4007d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4007d0 ], [ %2, %block_4007f3 ], [ %2, %block_400805 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400805:                                     ; preds = %block_4007fd
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_400808

; <label>:270:                                    ; preds = %block_4007fd
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_400e30_get_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400e30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %27 to %"class.std::bitset"*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %35 to %union.vec128_t*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = sub i64 %46, 32
  store i64 %49, i64* %RSP, align 8, !tbaa !2428
  %50 = icmp ult i64 %46, 32
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %51, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %49 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #17
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = xor i64 32, %46
  %61 = xor i64 %60, %49
  %62 = lshr i64 %61, 4
  %63 = trunc i64 %62 to i8
  %64 = and i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = icmp eq i64 %49, 0
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i64 %49, 63
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %70, i8* %71, align 1, !tbaa !2449
  %72 = lshr i64 %46, 63
  %73 = xor i64 %69, %72
  %74 = add nuw nsw i64 %73, %72
  %75 = icmp eq i64 %74, 2
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %76, i8* %77, align 1, !tbaa !2450
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RAX
  %83 = load i32, i32* %EAX
  %84 = zext i32 %83 to i64
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 2
  store i64 %86, i64* %PC
  %87 = xor i64 %84, %82
  %88 = trunc i64 %87 to i32
  %89 = and i64 %87, 4294967295
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %90, align 1, !tbaa !2432
  %91 = and i32 %88, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #17
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2446
  %97 = icmp eq i32 %88, 0
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %98, i8* %99, align 1, !tbaa !2448
  %100 = lshr i32 %88, 31
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %103, align 1, !tbaa !2450
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %104, align 1, !tbaa !2447
  %105 = load i32, i32* %EAX
  %106 = zext i32 %105 to i64
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 2
  store i64 %108, i64* %PC
  %109 = and i64 %106, 4294967295
  store i64 %109, i64* %RSI, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = sub i64 %110, 1872
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 5
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 5
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %111, i64* %120, align 8, !tbaa !2428
  %121 = load i64, i64* %PC
  %122 = call %struct.Memory* @ext_4006f0_gettimeofday(%struct.State* %0, i64 %121, %struct.Memory* %2)
  %123 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 8
  store i64 %125, i64* %PC
  %126 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 56) to double*)
  %127 = bitcast i8* %123 to double*
  store double %126, double* %127, align 1, !tbaa !2452
  %128 = getelementptr inbounds i8, i8* %123, i64 8
  %129 = bitcast i8* %128 to double*
  store double 0.000000e+00, double* %129, align 1, !tbaa !2452
  %130 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 16
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 6
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  %137 = sitofp i64 %136 to double
  %138 = bitcast i8* %130 to double*
  store double %137, double* %138, align 1, !tbaa !2452
  %139 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %140 = load i64, i64* %RBP
  %141 = sub i64 %140, 8
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 6
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144
  %146 = sitofp i64 %145 to double
  %147 = bitcast i8* %139 to double*
  store double %146, double* %147, align 1, !tbaa !2452
  %148 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %149 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %150 = bitcast %union.vec128_t* %XMM0 to i8*
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = bitcast i8* %149 to double*
  %154 = load double, double* %153, align 1
  %155 = getelementptr inbounds i8, i8* %149, i64 8
  %156 = bitcast i8* %155 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = bitcast i8* %150 to double*
  %159 = load double, double* %158, align 1
  %160 = fmul double %154, %159
  %161 = bitcast i8* %148 to double*
  store double %160, double* %161, align 1, !tbaa !2452
  %162 = getelementptr inbounds i8, i8* %148, i64 8
  %163 = bitcast i8* %162 to i64*
  store i64 %157, i64* %163, align 1, !tbaa !2452
  %164 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %165 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %166 = bitcast %union.vec128_t* %XMM2 to i8*
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = bitcast i8* %165 to double*
  %170 = load double, double* %169, align 1
  %171 = getelementptr inbounds i8, i8* %165, i64 8
  %172 = bitcast i8* %171 to i64*
  %173 = load i64, i64* %172, align 1
  %174 = bitcast i8* %166 to double*
  %175 = load double, double* %174, align 1
  %176 = fadd double %170, %175
  %177 = bitcast i8* %164 to double*
  store double %176, double* %177, align 1, !tbaa !2452
  %178 = getelementptr inbounds i8, i8* %164, i64 8
  %179 = bitcast i8* %178 to i64*
  store i64 %173, i64* %179, align 1, !tbaa !2452
  %180 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %181 = bitcast %union.vec128_t* %XMM1 to i8*
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = bitcast i8* %181 to <2 x i32>*
  %185 = load <2 x i32>, <2 x i32>* %184, align 1
  %186 = getelementptr inbounds i8, i8* %181, i64 8
  %187 = bitcast i8* %186 to <2 x i32>*
  %188 = load <2 x i32>, <2 x i32>* %187, align 1
  %189 = extractelement <2 x i32> %185, i32 0
  %190 = bitcast i8* %180 to i32*
  store i32 %189, i32* %190, align 1, !tbaa !2479
  %191 = extractelement <2 x i32> %185, i32 1
  %192 = getelementptr inbounds i8, i8* %180, i64 4
  %193 = bitcast i8* %192 to i32*
  store i32 %191, i32* %193, align 1, !tbaa !2479
  %194 = extractelement <2 x i32> %188, i32 0
  %195 = getelementptr inbounds i8, i8* %180, i64 8
  %196 = bitcast i8* %195 to i32*
  store i32 %194, i32* %196, align 1, !tbaa !2479
  %197 = extractelement <2 x i32> %188, i32 1
  %198 = getelementptr inbounds i8, i8* %180, i64 12
  %199 = bitcast i8* %198 to i32*
  store i32 %197, i32* %199, align 1, !tbaa !2479
  %200 = load i64, i64* %RBP
  %201 = sub i64 %200, 20
  %202 = load i32, i32* %EAX
  %203 = zext i32 %202 to i64
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 3
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %201 to i32*
  store i32 %202, i32* %206
  %207 = load i64, i64* %RSP
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = add i64 32, %207
  store i64 %210, i64* %RSP, align 8, !tbaa !2428
  %211 = icmp ult i64 %210, %207
  %212 = icmp ult i64 %210, 32
  %213 = or i1 %211, %212
  %214 = zext i1 %213 to i8
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %214, i8* %215, align 1, !tbaa !2432
  %216 = trunc i64 %210 to i32
  %217 = and i32 %216, 255
  %218 = call i32 @llvm.ctpop.i32(i32 %217) #17
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %221, i8* %222, align 1, !tbaa !2446
  %223 = xor i64 32, %207
  %224 = xor i64 %223, %210
  %225 = lshr i64 %224, 4
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i64 %210, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %210, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = lshr i64 %207, 63
  %236 = xor i64 %232, %235
  %237 = add nuw nsw i64 %236, %232
  %238 = icmp eq i64 %237, 2
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %239, i8* %240, align 1, !tbaa !2450
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 1
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %244 = load i64, i64* %243, align 8, !tbaa !2428
  %245 = add i64 %244, 8
  %246 = inttoptr i64 %244 to i64*
  %247 = load i64, i64* %246
  store i64 %247, i64* %RBP, align 8, !tbaa !2428
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 1
  store i64 %249, i64* %PC
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = inttoptr i64 %252 to i64*
  %254 = load i64, i64* %253
  store i64 %254, i64* %250, align 8, !tbaa !2428
  %255 = add i64 %252, 8
  store i64 %255, i64* %251, align 8, !tbaa !2428
  ret %struct.Memory* %122
}

; Function Attrs: noinline
define %struct.Memory* @sub_400850_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400850:
  %state.i = alloca %struct.State*, align 8
  %curr_pc.i = alloca i64, align 8
  %memory.i = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN.i = alloca i8, align 1
  %SS_BASE.i = alloca i64, align 8
  %ES_BASE.i = alloca i64, align 8
  %DS_BASE.i = alloca i64, align 8
  %CS_BASE.i = alloca i64, align 8
  %STATE.i = alloca %struct.State*, align 8
  %MEMORY.i = alloca %struct.Memory*, align 8
  %_DR0.i = alloca i64*, align 8
  %_DR1.i = alloca i64*, align 8
  %_DR2.i = alloca i64*, align 8
  %_DR3.i = alloca i64*, align 8
  %_DR4.i = alloca i64*, align 8
  %_DR5.i = alloca i64*, align 8
  %_DR6.i = alloca i64*, align 8
  %_DR7.i = alloca i64*, align 8
  %CR0.i = alloca i64*, align 8
  %CR1.i = alloca i64*, align 8
  %CR2.i = alloca i64*, align 8
  %CR3.i = alloca i64*, align 8
  %CR4.i = alloca i64*, align 8
  %CR8.i = alloca i64*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %ESI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %EDI = bitcast %union.anon* %24 to i32*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 17
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %R8D = bitcast %union.anon* %27 to i32*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RAX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RCX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 7
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDX = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 9
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 11
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RDI = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 13
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RSP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 15
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %RBP = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 17
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R8 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %53 to %"class.std::bitset"*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %55 to %"class.std::bitset"*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %57 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %56, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %57 to %"class.std::bitset"*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %59 to %"class.std::bitset"*
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %61 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %60, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %61 to %union.vec128_t*
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %63 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %62, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %63 to %union.vec128_t*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %65 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %64, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %65 to %union.vec128_t*
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %66, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %67 to %union.vec128_t*
  %68 = load i64, i64* %RBP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 1
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %RSP
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  store i64 %75, i64* %RBP, align 8, !tbaa !2428
  %78 = load i64, i64* %RSP
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  %81 = sub i64 %78, 224
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  %82 = icmp ult i64 %78, 224
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %83, i8* %84, align 1, !tbaa !2432
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #17
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2446
  %92 = xor i64 224, %78
  %93 = xor i64 %92, %81
  %94 = lshr i64 %93, 4
  %95 = trunc i64 %94 to i8
  %96 = and i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %96, i8* %97, align 1, !tbaa !2447
  %98 = icmp eq i64 %81, 0
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %99, i8* %100, align 1, !tbaa !2448
  %101 = lshr i64 %81, 63
  %102 = trunc i64 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %102, i8* %103, align 1, !tbaa !2449
  %104 = lshr i64 %78, 63
  %105 = xor i64 %101, %104
  %106 = add nuw nsw i64 %105, %104
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %112 = load i32, i32* %EAX
  %113 = zext i32 %112 to i64
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 2
  store i64 %115, i64* %PC
  %116 = and i64 %113, 4294967295
  store i64 %116, i64* %RDI, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 4
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 88
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 8
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i64*
  store i64 0, i64* %126
  %127 = load i64, i64* %RBP
  %128 = sub i64 %127, 144
  %129 = load i64, i64* %RDI
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 7
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %128 to i64*
  store i64 %129, i64* %132
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 1464
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 5
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %140 = load i64, i64* %139, align 8, !tbaa !2428
  %141 = add i64 %140, -8
  %142 = inttoptr i64 %141 to i64*
  store i64 %136, i64* %142
  store i64 %141, i64* %139, align 8, !tbaa !2428
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %134, i64* %143, align 8, !tbaa !2428
  %144 = load i64, i64* %PC
  %145 = call %struct.Memory* @sub_400e30_get_time_renamed_(%struct.State* %0, i64 %144, %struct.Memory* %2)
  %146 = load i64, i64* %RBP
  %147 = sub i64 %146, 64
  %148 = bitcast %union.vec128_t* %XMM0 to i8*
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = bitcast i8* %148 to double*
  %152 = load double, double* %151, align 1
  %153 = inttoptr i64 %147 to double*
  store double %152, double* %153
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 1454
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 5
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %161 = load i64, i64* %160, align 8, !tbaa !2428
  %162 = add i64 %161, -8
  %163 = inttoptr i64 %162 to i64*
  store i64 %157, i64* %163
  store i64 %162, i64* %160, align 8, !tbaa !2428
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %155, i64* %164, align 8, !tbaa !2428
  %165 = load i64, i64* %PC
  %166 = call %struct.Memory* @sub_400e30_get_time_renamed_(%struct.State* %0, i64 %165, %struct.Memory* %145)
  %167 = load i64, i64* %RBP
  %168 = sub i64 %167, 72
  %169 = bitcast %union.vec128_t* %XMM0 to i8*
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 5
  store i64 %171, i64* %PC
  %172 = bitcast i8* %169 to double*
  %173 = load double, double* %172, align 1
  %174 = inttoptr i64 %168 to double*
  store double %173, double* %174
  %175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 72
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 5
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to double*
  %181 = load double, double* %180
  %182 = bitcast i8* %175 to double*
  store double %181, double* %182, align 1, !tbaa !2452
  %183 = getelementptr inbounds i8, i8* %175, i64 8
  %184 = bitcast i8* %183 to double*
  store double 0.000000e+00, double* %184, align 1, !tbaa !2452
  %185 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 64
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 5
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to double*
  %191 = load double, double* %190
  %192 = bitcast i8* %185 to double*
  store double %191, double* %192, align 1, !tbaa !2452
  %193 = getelementptr inbounds i8, i8* %185, i64 8
  %194 = bitcast i8* %193 to double*
  store double 0.000000e+00, double* %194, align 1, !tbaa !2452
  %195 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %196 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %197 = bitcast %union.vec128_t* %XMM1 to i8*
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = bitcast i8* %196 to double*
  %201 = load double, double* %200, align 1
  %202 = getelementptr inbounds i8, i8* %196, i64 8
  %203 = bitcast i8* %202 to i64*
  %204 = load i64, i64* %203, align 1
  %205 = bitcast i8* %197 to double*
  %206 = load double, double* %205, align 1
  %207 = fsub double %201, %206
  %208 = bitcast i8* %195 to double*
  store double %207, double* %208, align 1, !tbaa !2452
  %209 = getelementptr inbounds i8, i8* %195, i64 8
  %210 = bitcast i8* %209 to i64*
  store i64 %204, i64* %210, align 1, !tbaa !2452
  %211 = load i64, i64* %RBP
  %212 = sub i64 %211, 80
  %213 = bitcast %union.vec128_t* %XMM0 to i8*
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  %216 = bitcast i8* %213 to double*
  %217 = load double, double* %216, align 1
  %218 = inttoptr i64 %212 to double*
  store double %217, double* %218
  %219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 8
  store i64 %221, i64* %PC
  %222 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 24) to double*)
  %223 = bitcast i8* %219 to double*
  store double %222, double* %223, align 1, !tbaa !2452
  %224 = getelementptr inbounds i8, i8* %219, i64 8
  %225 = bitcast i8* %224 to double*
  store double 0.000000e+00, double* %225, align 1, !tbaa !2452
  %226 = load i64, i64* %PC
  %227 = sub i64 %226, 343
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 5
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 5
  store i64 %231, i64* %PC
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %233 = load i64, i64* %232, align 8, !tbaa !2428
  %234 = add i64 %233, -8
  %235 = inttoptr i64 %234 to i64*
  store i64 %229, i64* %235
  store i64 %234, i64* %232, align 8, !tbaa !2428
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %227, i64* %236, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %238)
  %239 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %239)
  %240 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %240)
  call void @llvm.lifetime.start(i64 1, i8* %BRANCH_TAKEN.i)
  %241 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %241)
  %242 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %242)
  %243 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %243)
  %244 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %244)
  %245 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %245)
  %246 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %246)
  %247 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %247)
  %248 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %248)
  %249 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %249)
  %250 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %250)
  %251 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %251)
  %252 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %252)
  %253 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %253)
  %254 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %254)
  %255 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %255)
  %256 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %256)
  %257 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %257)
  %258 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %258)
  %259 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %259)
  %260 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %260)
  store %struct.State* %0, %struct.State** %state.i, align 8, !noalias !2481
  store i64 %237, i64* %curr_pc.i, align 8, !noalias !2481
  store %struct.Memory* %166, %struct.Memory** %memory.i, align 8, !noalias !2481
  store i8 0, i8* %BRANCH_TAKEN.i, align 1, !noalias !2481
  store i64 0, i64* %SS_BASE.i, align 8, !noalias !2481
  store i64 0, i64* %ES_BASE.i, align 8, !noalias !2481
  store i64 0, i64* %DS_BASE.i, align 8, !noalias !2481
  store i64 0, i64* %CS_BASE.i, align 8, !noalias !2481
  store %struct.State* %0, %struct.State** %STATE.i, align 8, !noalias !2481
  store %struct.Memory* %166, %struct.Memory** %MEMORY.i, align 8, !noalias !2481
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %262 = getelementptr inbounds %struct.GPR, %struct.GPR* %261, i32 0, i32 33
  %263 = getelementptr inbounds %struct.Reg, %struct.Reg* %262, i32 0, i32 0
  %PC.i = bitcast %union.anon* %263 to i64*
  store i64 %237, i64* %PC.i, align 8, !alias.scope !2485, !noalias !2486
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %265 = getelementptr inbounds %struct.GPR, %struct.GPR* %264, i32 0, i32 1
  %266 = getelementptr inbounds %struct.Reg, %struct.Reg* %265, i32 0, i32 0
  %267 = bitcast %union.anon* %266 to %struct.anon.2*
  %AH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %267, i32 0, i32 1
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %269 = getelementptr inbounds %struct.GPR, %struct.GPR* %268, i32 0, i32 3
  %270 = getelementptr inbounds %struct.Reg, %struct.Reg* %269, i32 0, i32 0
  %271 = bitcast %union.anon* %270 to %struct.anon.2*
  %BH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %271, i32 0, i32 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %273 = getelementptr inbounds %struct.GPR, %struct.GPR* %272, i32 0, i32 5
  %274 = getelementptr inbounds %struct.Reg, %struct.Reg* %273, i32 0, i32 0
  %275 = bitcast %union.anon* %274 to %struct.anon.2*
  %CH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %275, i32 0, i32 1
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %277 = getelementptr inbounds %struct.GPR, %struct.GPR* %276, i32 0, i32 7
  %278 = getelementptr inbounds %struct.Reg, %struct.Reg* %277, i32 0, i32 0
  %279 = bitcast %union.anon* %278 to %struct.anon.2*
  %DH.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %279, i32 0, i32 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %281 = getelementptr inbounds %struct.GPR, %struct.GPR* %280, i32 0, i32 1
  %282 = getelementptr inbounds %struct.Reg, %struct.Reg* %281, i32 0, i32 0
  %283 = bitcast %union.anon* %282 to %struct.anon.2*
  %AL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %283, i32 0, i32 0
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %285 = getelementptr inbounds %struct.GPR, %struct.GPR* %284, i32 0, i32 3
  %286 = getelementptr inbounds %struct.Reg, %struct.Reg* %285, i32 0, i32 0
  %287 = bitcast %union.anon* %286 to %struct.anon.2*
  %BL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %287, i32 0, i32 0
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %289 = getelementptr inbounds %struct.GPR, %struct.GPR* %288, i32 0, i32 5
  %290 = getelementptr inbounds %struct.Reg, %struct.Reg* %289, i32 0, i32 0
  %291 = bitcast %union.anon* %290 to %struct.anon.2*
  %CL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %291, i32 0, i32 0
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %293 = getelementptr inbounds %struct.GPR, %struct.GPR* %292, i32 0, i32 7
  %294 = getelementptr inbounds %struct.Reg, %struct.Reg* %293, i32 0, i32 0
  %295 = bitcast %union.anon* %294 to %struct.anon.2*
  %DL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %295, i32 0, i32 0
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %297 = getelementptr inbounds %struct.GPR, %struct.GPR* %296, i32 0, i32 9
  %298 = getelementptr inbounds %struct.Reg, %struct.Reg* %297, i32 0, i32 0
  %299 = bitcast %union.anon* %298 to %struct.anon.2*
  %SIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %299, i32 0, i32 0
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %301 = getelementptr inbounds %struct.GPR, %struct.GPR* %300, i32 0, i32 11
  %302 = getelementptr inbounds %struct.Reg, %struct.Reg* %301, i32 0, i32 0
  %303 = bitcast %union.anon* %302 to %struct.anon.2*
  %DIL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %303, i32 0, i32 0
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %305 = getelementptr inbounds %struct.GPR, %struct.GPR* %304, i32 0, i32 13
  %306 = getelementptr inbounds %struct.Reg, %struct.Reg* %305, i32 0, i32 0
  %307 = bitcast %union.anon* %306 to %struct.anon.2*
  %SPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %307, i32 0, i32 0
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %309 = getelementptr inbounds %struct.GPR, %struct.GPR* %308, i32 0, i32 15
  %310 = getelementptr inbounds %struct.Reg, %struct.Reg* %309, i32 0, i32 0
  %311 = bitcast %union.anon* %310 to %struct.anon.2*
  %BPL.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %311, i32 0, i32 0
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %313 = getelementptr inbounds %struct.GPR, %struct.GPR* %312, i32 0, i32 17
  %314 = getelementptr inbounds %struct.Reg, %struct.Reg* %313, i32 0, i32 0
  %315 = bitcast %union.anon* %314 to %struct.anon.2*
  %R8B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %315, i32 0, i32 0
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %317 = getelementptr inbounds %struct.GPR, %struct.GPR* %316, i32 0, i32 19
  %318 = getelementptr inbounds %struct.Reg, %struct.Reg* %317, i32 0, i32 0
  %319 = bitcast %union.anon* %318 to %struct.anon.2*
  %R9B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %319, i32 0, i32 0
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %321 = getelementptr inbounds %struct.GPR, %struct.GPR* %320, i32 0, i32 21
  %322 = getelementptr inbounds %struct.Reg, %struct.Reg* %321, i32 0, i32 0
  %323 = bitcast %union.anon* %322 to %struct.anon.2*
  %R10B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %323, i32 0, i32 0
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %325 = getelementptr inbounds %struct.GPR, %struct.GPR* %324, i32 0, i32 23
  %326 = getelementptr inbounds %struct.Reg, %struct.Reg* %325, i32 0, i32 0
  %327 = bitcast %union.anon* %326 to %struct.anon.2*
  %R11B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %327, i32 0, i32 0
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %329 = getelementptr inbounds %struct.GPR, %struct.GPR* %328, i32 0, i32 25
  %330 = getelementptr inbounds %struct.Reg, %struct.Reg* %329, i32 0, i32 0
  %331 = bitcast %union.anon* %330 to %struct.anon.2*
  %R12B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %331, i32 0, i32 0
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %333 = getelementptr inbounds %struct.GPR, %struct.GPR* %332, i32 0, i32 27
  %334 = getelementptr inbounds %struct.Reg, %struct.Reg* %333, i32 0, i32 0
  %335 = bitcast %union.anon* %334 to %struct.anon.2*
  %R13B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %335, i32 0, i32 0
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %337 = getelementptr inbounds %struct.GPR, %struct.GPR* %336, i32 0, i32 29
  %338 = getelementptr inbounds %struct.Reg, %struct.Reg* %337, i32 0, i32 0
  %339 = bitcast %union.anon* %338 to %struct.anon.2*
  %R14B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %339, i32 0, i32 0
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %341 = getelementptr inbounds %struct.GPR, %struct.GPR* %340, i32 0, i32 31
  %342 = getelementptr inbounds %struct.Reg, %struct.Reg* %341, i32 0, i32 0
  %343 = bitcast %union.anon* %342 to %struct.anon.2*
  %R15B.i = getelementptr inbounds %struct.anon.2, %struct.anon.2* %343, i32 0, i32 0
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %345 = getelementptr inbounds %struct.GPR, %struct.GPR* %344, i32 0, i32 1
  %346 = getelementptr inbounds %struct.Reg, %struct.Reg* %345, i32 0, i32 0
  %AX.i = bitcast %union.anon* %346 to i16*
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %348 = getelementptr inbounds %struct.GPR, %struct.GPR* %347, i32 0, i32 3
  %349 = getelementptr inbounds %struct.Reg, %struct.Reg* %348, i32 0, i32 0
  %BX.i = bitcast %union.anon* %349 to i16*
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %351 = getelementptr inbounds %struct.GPR, %struct.GPR* %350, i32 0, i32 5
  %352 = getelementptr inbounds %struct.Reg, %struct.Reg* %351, i32 0, i32 0
  %CX.i = bitcast %union.anon* %352 to i16*
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %354 = getelementptr inbounds %struct.GPR, %struct.GPR* %353, i32 0, i32 7
  %355 = getelementptr inbounds %struct.Reg, %struct.Reg* %354, i32 0, i32 0
  %DX.i = bitcast %union.anon* %355 to i16*
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %357 = getelementptr inbounds %struct.GPR, %struct.GPR* %356, i32 0, i32 9
  %358 = getelementptr inbounds %struct.Reg, %struct.Reg* %357, i32 0, i32 0
  %SI.i = bitcast %union.anon* %358 to i16*
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %360 = getelementptr inbounds %struct.GPR, %struct.GPR* %359, i32 0, i32 11
  %361 = getelementptr inbounds %struct.Reg, %struct.Reg* %360, i32 0, i32 0
  %DI.i = bitcast %union.anon* %361 to i16*
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %363 = getelementptr inbounds %struct.GPR, %struct.GPR* %362, i32 0, i32 13
  %364 = getelementptr inbounds %struct.Reg, %struct.Reg* %363, i32 0, i32 0
  %SP.i = bitcast %union.anon* %364 to i16*
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %366 = getelementptr inbounds %struct.GPR, %struct.GPR* %365, i32 0, i32 15
  %367 = getelementptr inbounds %struct.Reg, %struct.Reg* %366, i32 0, i32 0
  %BP.i = bitcast %union.anon* %367 to i16*
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %369 = getelementptr inbounds %struct.GPR, %struct.GPR* %368, i32 0, i32 17
  %370 = getelementptr inbounds %struct.Reg, %struct.Reg* %369, i32 0, i32 0
  %R8W.i = bitcast %union.anon* %370 to i16*
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %372 = getelementptr inbounds %struct.GPR, %struct.GPR* %371, i32 0, i32 19
  %373 = getelementptr inbounds %struct.Reg, %struct.Reg* %372, i32 0, i32 0
  %R9W.i = bitcast %union.anon* %373 to i16*
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %375 = getelementptr inbounds %struct.GPR, %struct.GPR* %374, i32 0, i32 21
  %376 = getelementptr inbounds %struct.Reg, %struct.Reg* %375, i32 0, i32 0
  %R10W.i = bitcast %union.anon* %376 to i16*
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %378 = getelementptr inbounds %struct.GPR, %struct.GPR* %377, i32 0, i32 23
  %379 = getelementptr inbounds %struct.Reg, %struct.Reg* %378, i32 0, i32 0
  %R11W.i = bitcast %union.anon* %379 to i16*
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %381 = getelementptr inbounds %struct.GPR, %struct.GPR* %380, i32 0, i32 25
  %382 = getelementptr inbounds %struct.Reg, %struct.Reg* %381, i32 0, i32 0
  %R12W.i = bitcast %union.anon* %382 to i16*
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %384 = getelementptr inbounds %struct.GPR, %struct.GPR* %383, i32 0, i32 27
  %385 = getelementptr inbounds %struct.Reg, %struct.Reg* %384, i32 0, i32 0
  %R13W.i = bitcast %union.anon* %385 to i16*
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %387 = getelementptr inbounds %struct.GPR, %struct.GPR* %386, i32 0, i32 29
  %388 = getelementptr inbounds %struct.Reg, %struct.Reg* %387, i32 0, i32 0
  %R14W.i = bitcast %union.anon* %388 to i16*
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %390 = getelementptr inbounds %struct.GPR, %struct.GPR* %389, i32 0, i32 31
  %391 = getelementptr inbounds %struct.Reg, %struct.Reg* %390, i32 0, i32 0
  %R15W.i = bitcast %union.anon* %391 to i16*
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %393 = getelementptr inbounds %struct.GPR, %struct.GPR* %392, i32 0, i32 33
  %394 = getelementptr inbounds %struct.Reg, %struct.Reg* %393, i32 0, i32 0
  %IP.i = bitcast %union.anon* %394 to i16*
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %396 = getelementptr inbounds %struct.GPR, %struct.GPR* %395, i32 0, i32 1
  %397 = getelementptr inbounds %struct.Reg, %struct.Reg* %396, i32 0, i32 0
  %EAX.i = bitcast %union.anon* %397 to i32*
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %399 = getelementptr inbounds %struct.GPR, %struct.GPR* %398, i32 0, i32 3
  %400 = getelementptr inbounds %struct.Reg, %struct.Reg* %399, i32 0, i32 0
  %EBX.i = bitcast %union.anon* %400 to i32*
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %402 = getelementptr inbounds %struct.GPR, %struct.GPR* %401, i32 0, i32 5
  %403 = getelementptr inbounds %struct.Reg, %struct.Reg* %402, i32 0, i32 0
  %ECX.i = bitcast %union.anon* %403 to i32*
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %405 = getelementptr inbounds %struct.GPR, %struct.GPR* %404, i32 0, i32 7
  %406 = getelementptr inbounds %struct.Reg, %struct.Reg* %405, i32 0, i32 0
  %EDX.i = bitcast %union.anon* %406 to i32*
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %408 = getelementptr inbounds %struct.GPR, %struct.GPR* %407, i32 0, i32 9
  %409 = getelementptr inbounds %struct.Reg, %struct.Reg* %408, i32 0, i32 0
  %ESI.i = bitcast %union.anon* %409 to i32*
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %411 = getelementptr inbounds %struct.GPR, %struct.GPR* %410, i32 0, i32 11
  %412 = getelementptr inbounds %struct.Reg, %struct.Reg* %411, i32 0, i32 0
  %EDI.i = bitcast %union.anon* %412 to i32*
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %414 = getelementptr inbounds %struct.GPR, %struct.GPR* %413, i32 0, i32 13
  %415 = getelementptr inbounds %struct.Reg, %struct.Reg* %414, i32 0, i32 0
  %ESP.i = bitcast %union.anon* %415 to i32*
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %417 = getelementptr inbounds %struct.GPR, %struct.GPR* %416, i32 0, i32 15
  %418 = getelementptr inbounds %struct.Reg, %struct.Reg* %417, i32 0, i32 0
  %EBP.i = bitcast %union.anon* %418 to i32*
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %420 = getelementptr inbounds %struct.GPR, %struct.GPR* %419, i32 0, i32 33
  %421 = getelementptr inbounds %struct.Reg, %struct.Reg* %420, i32 0, i32 0
  %EIP.i = bitcast %union.anon* %421 to i32*
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %423 = getelementptr inbounds %struct.GPR, %struct.GPR* %422, i32 0, i32 17
  %424 = getelementptr inbounds %struct.Reg, %struct.Reg* %423, i32 0, i32 0
  %R8D.i = bitcast %union.anon* %424 to i32*
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %426 = getelementptr inbounds %struct.GPR, %struct.GPR* %425, i32 0, i32 19
  %427 = getelementptr inbounds %struct.Reg, %struct.Reg* %426, i32 0, i32 0
  %R9D.i = bitcast %union.anon* %427 to i32*
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %429 = getelementptr inbounds %struct.GPR, %struct.GPR* %428, i32 0, i32 21
  %430 = getelementptr inbounds %struct.Reg, %struct.Reg* %429, i32 0, i32 0
  %R10D.i = bitcast %union.anon* %430 to i32*
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %432 = getelementptr inbounds %struct.GPR, %struct.GPR* %431, i32 0, i32 23
  %433 = getelementptr inbounds %struct.Reg, %struct.Reg* %432, i32 0, i32 0
  %R11D.i = bitcast %union.anon* %433 to i32*
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %435 = getelementptr inbounds %struct.GPR, %struct.GPR* %434, i32 0, i32 25
  %436 = getelementptr inbounds %struct.Reg, %struct.Reg* %435, i32 0, i32 0
  %R12D.i = bitcast %union.anon* %436 to i32*
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %438 = getelementptr inbounds %struct.GPR, %struct.GPR* %437, i32 0, i32 27
  %439 = getelementptr inbounds %struct.Reg, %struct.Reg* %438, i32 0, i32 0
  %R13D.i = bitcast %union.anon* %439 to i32*
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %441 = getelementptr inbounds %struct.GPR, %struct.GPR* %440, i32 0, i32 29
  %442 = getelementptr inbounds %struct.Reg, %struct.Reg* %441, i32 0, i32 0
  %R14D.i = bitcast %union.anon* %442 to i32*
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %444 = getelementptr inbounds %struct.GPR, %struct.GPR* %443, i32 0, i32 31
  %445 = getelementptr inbounds %struct.Reg, %struct.Reg* %444, i32 0, i32 0
  %R15D.i = bitcast %union.anon* %445 to i32*
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %447 = getelementptr inbounds %struct.GPR, %struct.GPR* %446, i32 0, i32 1
  %448 = getelementptr inbounds %struct.Reg, %struct.Reg* %447, i32 0, i32 0
  %RAX.i = bitcast %union.anon* %448 to i64*
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %450 = getelementptr inbounds %struct.GPR, %struct.GPR* %449, i32 0, i32 3
  %451 = getelementptr inbounds %struct.Reg, %struct.Reg* %450, i32 0, i32 0
  %RBX.i = bitcast %union.anon* %451 to i64*
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %453 = getelementptr inbounds %struct.GPR, %struct.GPR* %452, i32 0, i32 5
  %454 = getelementptr inbounds %struct.Reg, %struct.Reg* %453, i32 0, i32 0
  %RCX.i = bitcast %union.anon* %454 to i64*
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %456 = getelementptr inbounds %struct.GPR, %struct.GPR* %455, i32 0, i32 7
  %457 = getelementptr inbounds %struct.Reg, %struct.Reg* %456, i32 0, i32 0
  %RDX.i = bitcast %union.anon* %457 to i64*
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %459 = getelementptr inbounds %struct.GPR, %struct.GPR* %458, i32 0, i32 9
  %460 = getelementptr inbounds %struct.Reg, %struct.Reg* %459, i32 0, i32 0
  %RSI.i = bitcast %union.anon* %460 to i64*
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %462 = getelementptr inbounds %struct.GPR, %struct.GPR* %461, i32 0, i32 11
  %463 = getelementptr inbounds %struct.Reg, %struct.Reg* %462, i32 0, i32 0
  %RDI.i = bitcast %union.anon* %463 to i64*
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %465 = getelementptr inbounds %struct.GPR, %struct.GPR* %464, i32 0, i32 13
  %466 = getelementptr inbounds %struct.Reg, %struct.Reg* %465, i32 0, i32 0
  %RSP.i = bitcast %union.anon* %466 to i64*
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %468 = getelementptr inbounds %struct.GPR, %struct.GPR* %467, i32 0, i32 15
  %469 = getelementptr inbounds %struct.Reg, %struct.Reg* %468, i32 0, i32 0
  %RBP.i = bitcast %union.anon* %469 to i64*
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %471 = getelementptr inbounds %struct.GPR, %struct.GPR* %470, i32 0, i32 17
  %472 = getelementptr inbounds %struct.Reg, %struct.Reg* %471, i32 0, i32 0
  %R8.i = bitcast %union.anon* %472 to i64*
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %474 = getelementptr inbounds %struct.GPR, %struct.GPR* %473, i32 0, i32 19
  %475 = getelementptr inbounds %struct.Reg, %struct.Reg* %474, i32 0, i32 0
  %R9.i = bitcast %union.anon* %475 to i64*
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %477 = getelementptr inbounds %struct.GPR, %struct.GPR* %476, i32 0, i32 21
  %478 = getelementptr inbounds %struct.Reg, %struct.Reg* %477, i32 0, i32 0
  %R10.i = bitcast %union.anon* %478 to i64*
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %480 = getelementptr inbounds %struct.GPR, %struct.GPR* %479, i32 0, i32 23
  %481 = getelementptr inbounds %struct.Reg, %struct.Reg* %480, i32 0, i32 0
  %R11.i = bitcast %union.anon* %481 to i64*
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %483 = getelementptr inbounds %struct.GPR, %struct.GPR* %482, i32 0, i32 25
  %484 = getelementptr inbounds %struct.Reg, %struct.Reg* %483, i32 0, i32 0
  %R12.i = bitcast %union.anon* %484 to i64*
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %486 = getelementptr inbounds %struct.GPR, %struct.GPR* %485, i32 0, i32 27
  %487 = getelementptr inbounds %struct.Reg, %struct.Reg* %486, i32 0, i32 0
  %R13.i = bitcast %union.anon* %487 to i64*
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %489 = getelementptr inbounds %struct.GPR, %struct.GPR* %488, i32 0, i32 29
  %490 = getelementptr inbounds %struct.Reg, %struct.Reg* %489, i32 0, i32 0
  %R14.i = bitcast %union.anon* %490 to i64*
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %492 = getelementptr inbounds %struct.GPR, %struct.GPR* %491, i32 0, i32 31
  %493 = getelementptr inbounds %struct.Reg, %struct.Reg* %492, i32 0, i32 0
  %R15.i = bitcast %union.anon* %493 to i64*
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %495 = getelementptr inbounds %struct.GPR, %struct.GPR* %494, i32 0, i32 33
  %496 = getelementptr inbounds %struct.Reg, %struct.Reg* %495, i32 0, i32 0
  %RIP.i = bitcast %union.anon* %496 to i64*
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %498 = getelementptr inbounds %struct.Segments, %struct.Segments* %497, i32 0, i32 1
  %SS.i = bitcast %union.SegmentSelector* %498 to i16*
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %500 = getelementptr inbounds %struct.Segments, %struct.Segments* %499, i32 0, i32 3
  %ES.i = bitcast %union.SegmentSelector* %500 to i16*
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %502 = getelementptr inbounds %struct.Segments, %struct.Segments* %501, i32 0, i32 5
  %GS.i = bitcast %union.SegmentSelector* %502 to i16*
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %504 = getelementptr inbounds %struct.Segments, %struct.Segments* %503, i32 0, i32 7
  %FS.i = bitcast %union.SegmentSelector* %504 to i16*
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %506 = getelementptr inbounds %struct.Segments, %struct.Segments* %505, i32 0, i32 9
  %DS.i = bitcast %union.SegmentSelector* %506 to i16*
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %508 = getelementptr inbounds %struct.Segments, %struct.Segments* %507, i32 0, i32 11
  %CS.i = bitcast %union.SegmentSelector* %508 to i16*
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %510 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %509, i32 0, i32 5
  %511 = getelementptr inbounds %struct.Reg, %struct.Reg* %510, i32 0, i32 0
  %GS_BASE.i = bitcast %union.anon* %511 to i64*
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %513 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %512, i32 0, i32 7
  %514 = getelementptr inbounds %struct.Reg, %struct.Reg* %513, i32 0, i32 0
  %FS_BASE.i = bitcast %union.anon* %514 to i64*
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %516 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %515, i64 0, i64 0
  %YMM0.i = bitcast %union.VectorReg* %516 to %"class.std::bitset"*
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %518 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %517, i64 0, i64 1
  %YMM1.i = bitcast %union.VectorReg* %518 to %"class.std::bitset"*
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %520 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %519, i64 0, i64 2
  %YMM2.i = bitcast %union.VectorReg* %520 to %"class.std::bitset"*
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %522 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %521, i64 0, i64 3
  %YMM3.i = bitcast %union.VectorReg* %522 to %"class.std::bitset"*
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %524 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %523, i64 0, i64 4
  %YMM4.i = bitcast %union.VectorReg* %524 to %"class.std::bitset"*
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %526 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %525, i64 0, i64 5
  %YMM5.i = bitcast %union.VectorReg* %526 to %"class.std::bitset"*
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %528 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %527, i64 0, i64 6
  %YMM6.i = bitcast %union.VectorReg* %528 to %"class.std::bitset"*
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %530 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %529, i64 0, i64 7
  %YMM7.i = bitcast %union.VectorReg* %530 to %"class.std::bitset"*
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %532 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %531, i64 0, i64 8
  %YMM8.i = bitcast %union.VectorReg* %532 to %"class.std::bitset"*
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %534 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %533, i64 0, i64 9
  %YMM9.i = bitcast %union.VectorReg* %534 to %"class.std::bitset"*
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %536 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %535, i64 0, i64 10
  %YMM10.i = bitcast %union.VectorReg* %536 to %"class.std::bitset"*
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %538 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %537, i64 0, i64 11
  %YMM11.i = bitcast %union.VectorReg* %538 to %"class.std::bitset"*
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %540 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %539, i64 0, i64 12
  %YMM12.i = bitcast %union.VectorReg* %540 to %"class.std::bitset"*
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %542 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %541, i64 0, i64 13
  %YMM13.i = bitcast %union.VectorReg* %542 to %"class.std::bitset"*
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %544 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %543, i64 0, i64 14
  %YMM14.i = bitcast %union.VectorReg* %544 to %"class.std::bitset"*
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %546 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %545, i64 0, i64 15
  %YMM15.i = bitcast %union.VectorReg* %546 to %"class.std::bitset"*
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %548 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %547, i64 0, i64 0
  %XMM0.i = bitcast %union.VectorReg* %548 to %union.vec128_t*
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %550 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %549, i64 0, i64 1
  %XMM1.i = bitcast %union.VectorReg* %550 to %union.vec128_t*
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %552 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %551, i64 0, i64 2
  %XMM2.i = bitcast %union.VectorReg* %552 to %union.vec128_t*
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %554 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %553, i64 0, i64 3
  %XMM3.i = bitcast %union.VectorReg* %554 to %union.vec128_t*
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %556 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %555, i64 0, i64 4
  %XMM4.i = bitcast %union.VectorReg* %556 to %union.vec128_t*
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %558 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %557, i64 0, i64 5
  %XMM5.i = bitcast %union.VectorReg* %558 to %union.vec128_t*
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %560 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %559, i64 0, i64 6
  %XMM6.i = bitcast %union.VectorReg* %560 to %union.vec128_t*
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %562 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %561, i64 0, i64 7
  %XMM7.i = bitcast %union.VectorReg* %562 to %union.vec128_t*
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %564 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %563, i64 0, i64 8
  %XMM8.i = bitcast %union.VectorReg* %564 to %union.vec128_t*
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %566 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %565, i64 0, i64 9
  %XMM9.i = bitcast %union.VectorReg* %566 to %union.vec128_t*
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %568 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %567, i64 0, i64 10
  %XMM10.i = bitcast %union.VectorReg* %568 to %union.vec128_t*
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %570 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %569, i64 0, i64 11
  %XMM11.i = bitcast %union.VectorReg* %570 to %union.vec128_t*
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %572 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %571, i64 0, i64 12
  %XMM12.i = bitcast %union.VectorReg* %572 to %union.vec128_t*
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %574 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %573, i64 0, i64 13
  %XMM13.i = bitcast %union.VectorReg* %574 to %union.vec128_t*
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %576 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %575, i64 0, i64 14
  %XMM14.i = bitcast %union.VectorReg* %576 to %union.vec128_t*
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %578 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %577, i64 0, i64 15
  %XMM15.i = bitcast %union.VectorReg* %578 to %union.vec128_t*
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %580 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %579, i32 0, i32 0
  %581 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %580, i64 0, i64 0
  %ST0.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %581, i32 0, i32 1
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %583 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %582, i32 0, i32 0
  %584 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %583, i64 0, i64 1
  %ST1.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %584, i32 0, i32 1
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %586 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %585, i32 0, i32 0
  %587 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %586, i64 0, i64 2
  %ST2.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %587, i32 0, i32 1
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %589 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %588, i32 0, i32 0
  %590 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %589, i64 0, i64 3
  %ST3.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %590, i32 0, i32 1
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %592 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %591, i32 0, i32 0
  %593 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %592, i64 0, i64 4
  %ST4.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %593, i32 0, i32 1
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %595 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %594, i32 0, i32 0
  %596 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %595, i64 0, i64 5
  %ST5.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %596, i32 0, i32 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %598 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %597, i32 0, i32 0
  %599 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %598, i64 0, i64 6
  %ST6.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %599, i32 0, i32 1
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %601 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %600, i32 0, i32 0
  %602 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %601, i64 0, i64 7
  %ST7.i = getelementptr inbounds %struct.anon.3, %struct.anon.3* %602, i32 0, i32 1
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %604 = getelementptr inbounds %struct.MMX, %struct.MMX* %603, i32 0, i32 0
  %605 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %604, i64 0, i64 0
  %606 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %605, i32 0, i32 1
  %607 = bitcast %union.vec64_t* %606 to %struct.uint64v1_t*
  %608 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %607, i32 0, i32 0
  %MM0.i = getelementptr inbounds [1 x i64], [1 x i64]* %608, i64 0, i64 0
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %610 = getelementptr inbounds %struct.MMX, %struct.MMX* %609, i32 0, i32 0
  %611 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %610, i64 0, i64 1
  %612 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %611, i32 0, i32 1
  %613 = bitcast %union.vec64_t* %612 to %struct.uint64v1_t*
  %614 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %613, i32 0, i32 0
  %MM1.i = getelementptr inbounds [1 x i64], [1 x i64]* %614, i64 0, i64 0
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %616 = getelementptr inbounds %struct.MMX, %struct.MMX* %615, i32 0, i32 0
  %617 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %616, i64 0, i64 2
  %618 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %617, i32 0, i32 1
  %619 = bitcast %union.vec64_t* %618 to %struct.uint64v1_t*
  %620 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %619, i32 0, i32 0
  %MM2.i = getelementptr inbounds [1 x i64], [1 x i64]* %620, i64 0, i64 0
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %622 = getelementptr inbounds %struct.MMX, %struct.MMX* %621, i32 0, i32 0
  %623 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %622, i64 0, i64 3
  %624 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %623, i32 0, i32 1
  %625 = bitcast %union.vec64_t* %624 to %struct.uint64v1_t*
  %626 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %625, i32 0, i32 0
  %MM3.i = getelementptr inbounds [1 x i64], [1 x i64]* %626, i64 0, i64 0
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %628 = getelementptr inbounds %struct.MMX, %struct.MMX* %627, i32 0, i32 0
  %629 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %628, i64 0, i64 4
  %630 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %629, i32 0, i32 1
  %631 = bitcast %union.vec64_t* %630 to %struct.uint64v1_t*
  %632 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %631, i32 0, i32 0
  %MM4.i = getelementptr inbounds [1 x i64], [1 x i64]* %632, i64 0, i64 0
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %634 = getelementptr inbounds %struct.MMX, %struct.MMX* %633, i32 0, i32 0
  %635 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %634, i64 0, i64 5
  %636 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %635, i32 0, i32 1
  %637 = bitcast %union.vec64_t* %636 to %struct.uint64v1_t*
  %638 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %637, i32 0, i32 0
  %MM5.i = getelementptr inbounds [1 x i64], [1 x i64]* %638, i64 0, i64 0
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %640 = getelementptr inbounds %struct.MMX, %struct.MMX* %639, i32 0, i32 0
  %641 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %640, i64 0, i64 6
  %642 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %641, i32 0, i32 1
  %643 = bitcast %union.vec64_t* %642 to %struct.uint64v1_t*
  %644 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %643, i32 0, i32 0
  %MM6.i = getelementptr inbounds [1 x i64], [1 x i64]* %644, i64 0, i64 0
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %646 = getelementptr inbounds %struct.MMX, %struct.MMX* %645, i32 0, i32 0
  %647 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %646, i64 0, i64 7
  %648 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %647, i32 0, i32 1
  %649 = bitcast %union.vec64_t* %648 to %struct.uint64v1_t*
  %650 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %649, i32 0, i32 0
  %MM7.i = getelementptr inbounds [1 x i64], [1 x i64]* %650, i64 0, i64 0
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %651, i32 0, i32 5
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %652, i32 0, i32 1
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %653, i32 0, i32 11
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %654, i32 0, i32 13
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %655, i32 0, i32 3
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %656, i32 0, i32 9
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF.i = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %657, i32 0, i32 7
  store i64* @DR0, i64** %_DR0.i, align 8, !noalias !2481
  store i64* @DR1, i64** %_DR1.i, align 8, !noalias !2481
  store i64* @DR2, i64** %_DR2.i, align 8, !noalias !2481
  store i64* @DR3, i64** %_DR3.i, align 8, !noalias !2481
  store i64* @DR4, i64** %_DR4.i, align 8, !noalias !2481
  store i64* @DR5, i64** %_DR5.i, align 8, !noalias !2481
  store i64* @DR6, i64** %_DR6.i, align 8, !noalias !2481
  store i64* @DR7, i64** %_DR7.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4.i, align 8, !noalias !2481
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8.i, align 8, !noalias !2481
  %658 = bitcast %"class.std::bitset"* %YMM0.i to double*
  %659 = load double, double* %658, !alias.scope !2485, !noalias !2486
  %660 = load i64, i64* %RSP.i, !alias.scope !2485, !noalias !2486
  %661 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2481
  %662 = inttoptr i64 %660 to i64*
  %663 = load i64, i64* %662
  store i64 %663, i64* %PC.i, !alias.scope !2485, !noalias !2486
  %664 = add i64 %660, 8
  store i64 %664, i64* %RSP.i, !alias.scope !2485, !noalias !2486
  %665 = call double @sqrt(double %659)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0.i, !alias.scope !2485, !noalias !2486
  %666 = bitcast %"class.std::bitset"* %YMM0.i to double*
  store double %665, double* %666, !alias.scope !2485, !noalias !2486
  %667 = load %struct.Memory*, %struct.Memory** %MEMORY.i, !noalias !2481
  %668 = bitcast %struct.State** %state.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %668)
  %669 = bitcast i64* %curr_pc.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %669)
  %670 = bitcast %struct.Memory** %memory.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %670)
  call void @llvm.lifetime.end(i64 1, i8* %BRANCH_TAKEN.i)
  %671 = bitcast i64* %SS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %671)
  %672 = bitcast i64* %ES_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %672)
  %673 = bitcast i64* %DS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %673)
  %674 = bitcast i64* %CS_BASE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %674)
  %675 = bitcast %struct.State** %STATE.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %675)
  %676 = bitcast %struct.Memory** %MEMORY.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %676)
  %677 = bitcast i64** %_DR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %677)
  %678 = bitcast i64** %_DR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %678)
  %679 = bitcast i64** %_DR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %679)
  %680 = bitcast i64** %_DR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %680)
  %681 = bitcast i64** %_DR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %681)
  %682 = bitcast i64** %_DR5.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %682)
  %683 = bitcast i64** %_DR6.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %683)
  %684 = bitcast i64** %_DR7.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %684)
  %685 = bitcast i64** %CR0.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %685)
  %686 = bitcast i64** %CR1.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %686)
  %687 = bitcast i64** %CR2.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %687)
  %688 = bitcast i64** %CR3.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %688)
  %689 = bitcast i64** %CR4.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %689)
  %690 = bitcast i64** %CR8.i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %690)
  %691 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 8
  store i64 %693, i64* %PC
  %694 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 32) to double*)
  %695 = bitcast i8* %691 to double*
  store double %694, double* %695, align 1, !tbaa !2452
  %696 = getelementptr inbounds i8, i8* %691, i64 8
  %697 = bitcast i8* %696 to double*
  store double 0.000000e+00, double* %697, align 1, !tbaa !2452
  %698 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %699 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %700 = bitcast %union.vec128_t* %XMM1 to i8*
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 4
  store i64 %702, i64* %PC
  %703 = bitcast i8* %699 to double*
  %704 = load double, double* %703, align 1
  %705 = getelementptr inbounds i8, i8* %699, i64 8
  %706 = bitcast i8* %705 to i64*
  %707 = load i64, i64* %706, align 1
  %708 = bitcast i8* %700 to double*
  %709 = load double, double* %708, align 1
  %710 = fmul double %704, %709
  %711 = bitcast i8* %698 to double*
  store double %710, double* %711, align 1, !tbaa !2452
  %712 = getelementptr inbounds i8, i8* %698, i64 8
  %713 = bitcast i8* %712 to i64*
  store i64 %707, i64* %713, align 1, !tbaa !2452
  %714 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 8
  store i64 %716, i64* %PC
  %717 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 40) to double*)
  %718 = bitcast i8* %714 to double*
  store double %717, double* %718, align 1, !tbaa !2452
  %719 = getelementptr inbounds i8, i8* %714, i64 8
  %720 = bitcast i8* %719 to double*
  store double 0.000000e+00, double* %720, align 1, !tbaa !2452
  %721 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %722 = bitcast %union.vec128_t* %XMM0 to i8*
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 3
  store i64 %724, i64* %PC
  %725 = bitcast i8* %722 to <2 x i32>*
  %726 = load <2 x i32>, <2 x i32>* %725, align 1
  %727 = getelementptr inbounds i8, i8* %722, i64 8
  %728 = bitcast i8* %727 to <2 x i32>*
  %729 = load <2 x i32>, <2 x i32>* %728, align 1
  %730 = extractelement <2 x i32> %726, i32 0
  %731 = bitcast i8* %721 to i32*
  store i32 %730, i32* %731, align 1, !tbaa !2479
  %732 = extractelement <2 x i32> %726, i32 1
  %733 = getelementptr inbounds i8, i8* %721, i64 4
  %734 = bitcast i8* %733 to i32*
  store i32 %732, i32* %734, align 1, !tbaa !2479
  %735 = extractelement <2 x i32> %729, i32 0
  %736 = getelementptr inbounds i8, i8* %721, i64 8
  %737 = bitcast i8* %736 to i32*
  store i32 %735, i32* %737, align 1, !tbaa !2479
  %738 = extractelement <2 x i32> %729, i32 1
  %739 = getelementptr inbounds i8, i8* %721, i64 12
  %740 = bitcast i8* %739 to i32*
  store i32 %738, i32* %740, align 1, !tbaa !2479
  %741 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %742 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %743 = bitcast %union.vec128_t* %XMM1 to i8*
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 4
  store i64 %745, i64* %PC
  %746 = bitcast i8* %742 to double*
  %747 = load double, double* %746, align 1
  %748 = getelementptr inbounds i8, i8* %742, i64 8
  %749 = bitcast i8* %748 to i64*
  %750 = load i64, i64* %749, align 1
  %751 = bitcast i8* %743 to double*
  %752 = load double, double* %751, align 1
  %753 = fsub double %747, %752
  %754 = bitcast i8* %741 to double*
  store double %753, double* %754, align 1, !tbaa !2452
  %755 = getelementptr inbounds i8, i8* %741, i64 8
  %756 = bitcast i8* %755 to i64*
  store i64 %750, i64* %756, align 1, !tbaa !2452
  %757 = bitcast %union.vec128_t* %XMM2 to i8*
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  store i64 %759, i64* %PC
  %760 = bitcast i8* %757 to double*
  %761 = load double, double* %760, align 1
  %762 = call double @llvm.trunc.f64(double %761) #17
  %763 = call double @llvm.fabs.f64(double %762) #17
  %764 = fcmp ogt double %763, 0x43E0000000000000
  %765 = fptosi double %762 to i64
  %766 = select i1 %764, i64 -9223372036854775808, i64 %765
  store i64 %766, i64* %RDI, align 8, !tbaa !2428
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 10
  store i64 %768, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %769 = load i64, i64* %RDI
  %770 = load i64, i64* %RCX
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 3
  store i64 %772, i64* %PC
  %773 = xor i64 %770, %769
  store i64 %773, i64* %RDI, align 8, !tbaa !2428
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %774, align 1, !tbaa !2432
  %775 = trunc i64 %773 to i32
  %776 = and i32 %775, 255
  %777 = call i32 @llvm.ctpop.i32(i32 %776) #17
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %780, i8* %781, align 1, !tbaa !2446
  %782 = icmp eq i64 %773, 0
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %783, i8* %784, align 1, !tbaa !2448
  %785 = lshr i64 %773, 63
  %786 = trunc i64 %785 to i8
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %786, i8* %787, align 1, !tbaa !2449
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %788, align 1, !tbaa !2450
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %789, align 1, !tbaa !2447
  %790 = bitcast %union.vec128_t* %XMM0 to i8*
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 5
  store i64 %792, i64* %PC
  %793 = bitcast i8* %790 to double*
  %794 = load double, double* %793, align 1
  %795 = call double @llvm.trunc.f64(double %794) #17
  %796 = call double @llvm.fabs.f64(double %795) #17
  %797 = fcmp ogt double %796, 0x43E0000000000000
  %798 = fptosi double %795 to i64
  %799 = select i1 %797, i64 -9223372036854775808, i64 %798
  store i64 %799, i64* %RCX, align 8, !tbaa !2428
  %800 = bitcast %union.vec128_t* %XMM0 to i8*
  %801 = bitcast %union.vec128_t* %XMM1 to i8*
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = bitcast i8* %800 to double*
  %805 = load double, double* %804, align 1
  %806 = bitcast i8* %801 to double*
  %807 = load double, double* %806, align 1
  %808 = fcmp uno double %805, %807
  br i1 %808, label %809, label %821

; <label>:809:                                    ; preds = %block_400850
  %810 = fadd double %805, %807
  %811 = bitcast double %810 to i64
  %812 = and i64 %811, 9221120237041090560
  %813 = icmp eq i64 %812, 9218868437227405312
  %814 = and i64 %811, 2251799813685247
  %815 = icmp ne i64 %814, 0
  %816 = and i1 %813, %815
  br i1 %816, label %817, label %827

; <label>:817:                                    ; preds = %809
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %819 = load i64, i64* %818, align 8, !tbaa !2428
  %820 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %819, %struct.Memory* %667) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

; <label>:821:                                    ; preds = %block_400850
  %822 = fcmp ogt double %805, %807
  br i1 %822, label %827, label %823

; <label>:823:                                    ; preds = %821
  %824 = fcmp olt double %805, %807
  br i1 %824, label %827, label %825

; <label>:825:                                    ; preds = %823
  %826 = fcmp oeq double %805, %807
  br i1 %826, label %827, label %834

; <label>:827:                                    ; preds = %825, %823, %821, %809
  %828 = phi i8 [ 0, %821 ], [ 0, %823 ], [ 1, %825 ], [ 1, %809 ]
  %829 = phi i8 [ 0, %821 ], [ 0, %823 ], [ 0, %825 ], [ 1, %809 ]
  %830 = phi i8 [ 0, %821 ], [ 1, %823 ], [ 0, %825 ], [ 1, %809 ]
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %828, i8* %831, align 1, !tbaa !2451
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %829, i8* %832, align 1, !tbaa !2451
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %830, i8* %833, align 1, !tbaa !2451
  br label %834

; <label>:834:                                    ; preds = %827, %825
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %835, align 1, !tbaa !2451
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %836, align 1, !tbaa !2451
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %837, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3: ; preds = %817, %834
  %838 = phi %struct.Memory* [ %820, %817 ], [ %667, %834 ]
  %839 = load i64, i64* %RCX
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %843 = load i8, i8* %842, align 1, !tbaa !2432
  %844 = icmp ne i8 %843, 0
  %845 = load i64, i64* %RDI, align 8, !tbaa !2428
  %846 = select i1 %844, i64 %839, i64 %845
  store i64 %846, i64* %RDI, align 8, !tbaa !2428
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 144
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 7
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = load i64, i64* %RBP
  %854 = sub i64 %853, 152
  %855 = load i64, i64* %RDI
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 7
  store i64 %857, i64* %PC
  %858 = inttoptr i64 %854 to i64*
  store i64 %855, i64* %858
  %859 = load i64, i64* %RCX
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 3
  store i64 %861, i64* %PC
  store i64 %859, i64* %RDI, align 8, !tbaa !2428
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 152
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 7
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %863 to i64*
  %867 = load i64, i64* %866
  store i64 %867, i64* %RSI, align 8, !tbaa !2428
  %868 = load i64, i64* %PC
  %869 = sub i64 %868, 462
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 5
  store i64 %873, i64* %PC
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %875 = load i64, i64* %874, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %871, i64* %877
  store i64 %876, i64* %874, align 8, !tbaa !2428
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %869, i64* %878, align 8, !tbaa !2428
  %879 = load i64, i64* %PC
  %880 = call %struct.Memory* @ext_6050d0_memalign(%struct.State* %0, i64 %879, %struct.Memory* %838)
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 5
  store i64 %882, i64* %PC
  store i64 16, i64* %RDX, align 8, !tbaa !2428
  %883 = load i32, i32* %EDX
  %884 = zext i32 %883 to i64
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 2
  store i64 %886, i64* %PC
  %887 = and i64 %884, 4294967295
  store i64 %887, i64* %RDI, align 8, !tbaa !2428
  %888 = load i64, i64* %PC
  %889 = add i64 %888, 5
  store i64 %889, i64* %PC
  store i64 20480, i64* %RDX, align 8, !tbaa !2428
  %890 = load i32, i32* %EDX
  %891 = zext i32 %890 to i64
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 2
  store i64 %893, i64* %PC
  %894 = and i64 %891, 4294967295
  store i64 %894, i64* %RSI, align 8, !tbaa !2428
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 24
  %897 = load i64, i64* %RAX
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 4
  store i64 %899, i64* %PC
  %900 = inttoptr i64 %896 to i64*
  store i64 %897, i64* %900
  %901 = load i64, i64* %PC
  %902 = sub i64 %901, 485
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 5
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 5
  store i64 %906, i64* %PC
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %908 = load i64, i64* %907, align 8, !tbaa !2428
  %909 = add i64 %908, -8
  %910 = inttoptr i64 %909 to i64*
  store i64 %904, i64* %910
  store i64 %909, i64* %907, align 8, !tbaa !2428
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %902, i64* %911, align 8, !tbaa !2428
  %912 = load i64, i64* %PC
  %913 = call %struct.Memory* @ext_6050d0_memalign(%struct.State* %0, i64 %912, %struct.Memory* %880)
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 5
  store i64 %915, i64* %PC
  store i64 512, i64* %RDI, align 8, !tbaa !2428
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 56
  %918 = load i64, i64* %RAX
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 4
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %917 to i64*
  store i64 %918, i64* %921
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 24
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 4
  store i64 %925, i64* %PC
  %926 = inttoptr i64 %923 to i64*
  %927 = load i64, i64* %926
  store i64 %927, i64* %RSI, align 8, !tbaa !2428
  %928 = load i64, i64* %RBP
  %929 = sub i64 %928, 56
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 4
  store i64 %931, i64* %PC
  %932 = inttoptr i64 %929 to i64*
  %933 = load i64, i64* %932
  store i64 %933, i64* %RDX, align 8, !tbaa !2428
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 1349
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 5
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 5
  store i64 %939, i64* %PC
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %941 = load i64, i64* %940, align 8, !tbaa !2428
  %942 = add i64 %941, -8
  %943 = inttoptr i64 %942 to i64*
  store i64 %937, i64* %943
  store i64 %942, i64* %940, align 8, !tbaa !2428
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %935, i64* %944, align 8, !tbaa !2428
  %945 = load i64, i64* %PC
  %946 = call %struct.Memory* @sub_400e70_makewt_renamed_(%struct.State* %0, i64 %945, %struct.Memory* %913)
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 5
  store i64 %948, i64* %PC
  store i64 16, i64* %RDI, align 8, !tbaa !2428
  %949 = bitcast i32* %R8D to i64*
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 6
  store i64 %951, i64* %PC
  store i64 16384, i64* %949, align 8, !tbaa !2428
  %952 = load i32, i32* %R8D
  %953 = zext i32 %952 to i64
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 3
  store i64 %955, i64* %PC
  %956 = and i64 %953, 4294967295
  store i64 %956, i64* %RSI, align 8, !tbaa !2428
  %957 = load i64, i64* %PC
  %958 = sub i64 %957, 526
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 5
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 5
  store i64 %962, i64* %PC
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %964 = load i64, i64* %963, align 8, !tbaa !2428
  %965 = add i64 %964, -8
  %966 = inttoptr i64 %965 to i64*
  store i64 %960, i64* %966
  store i64 %965, i64* %963, align 8, !tbaa !2428
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %958, i64* %967, align 8, !tbaa !2428
  %968 = load i64, i64* %PC
  %969 = call %struct.Memory* @ext_6050d0_memalign(%struct.State* %0, i64 %968, %struct.Memory* %946)
  %970 = bitcast i32* %R8D to i64*
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 6
  store i64 %972, i64* %PC
  store i64 16, i64* %970, align 8, !tbaa !2428
  %973 = load i32, i32* %R8D
  %974 = zext i32 %973 to i64
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 3
  store i64 %976, i64* %PC
  %977 = and i64 %974, 4294967295
  store i64 %977, i64* %RDI, align 8, !tbaa !2428
  %978 = bitcast i32* %R8D to i64*
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 6
  store i64 %980, i64* %PC
  store i64 16384, i64* %978, align 8, !tbaa !2428
  %981 = load i32, i32* %R8D
  %982 = zext i32 %981 to i64
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 3
  store i64 %984, i64* %PC
  %985 = and i64 %982, 4294967295
  store i64 %985, i64* %RSI, align 8, !tbaa !2428
  %986 = load i64, i64* %RBP
  %987 = sub i64 %986, 32
  %988 = load i64, i64* %RAX
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %987 to i64*
  store i64 %988, i64* %991
  %992 = load i64, i64* %PC
  %993 = sub i64 %992, 553
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 5
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 5
  store i64 %997, i64* %PC
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %999 = load i64, i64* %998, align 8, !tbaa !2428
  %1000 = add i64 %999, -8
  %1001 = inttoptr i64 %1000 to i64*
  store i64 %995, i64* %1001
  store i64 %1000, i64* %998, align 8, !tbaa !2428
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %993, i64* %1002, align 8, !tbaa !2428
  %1003 = load i64, i64* %PC
  %1004 = call %struct.Memory* @ext_6050d0_memalign(%struct.State* %0, i64 %1003, %struct.Memory* %969)
  %1005 = bitcast i32* %R8D to i64*
  %1006 = load i64, i64* %PC
  %1007 = add i64 %1006, 6
  store i64 %1007, i64* %PC
  store i64 16, i64* %1005, align 8, !tbaa !2428
  %1008 = load i32, i32* %R8D
  %1009 = zext i32 %1008 to i64
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 3
  store i64 %1011, i64* %PC
  %1012 = and i64 %1009, 4294967295
  store i64 %1012, i64* %RDI, align 8, !tbaa !2428
  %1013 = bitcast i32* %R8D to i64*
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 6
  store i64 %1015, i64* %PC
  store i64 16384, i64* %1013, align 8, !tbaa !2428
  %1016 = load i32, i32* %R8D
  %1017 = zext i32 %1016 to i64
  %1018 = load i64, i64* %PC
  %1019 = add i64 %1018, 3
  store i64 %1019, i64* %PC
  %1020 = and i64 %1017, 4294967295
  store i64 %1020, i64* %RSI, align 8, !tbaa !2428
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 40
  %1023 = load i64, i64* %RAX
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 4
  store i64 %1025, i64* %PC
  %1026 = inttoptr i64 %1022 to i64*
  store i64 %1023, i64* %1026
  %1027 = load i64, i64* %PC
  %1028 = sub i64 %1027, 580
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 5
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1034 = load i64, i64* %1033, align 8, !tbaa !2428
  %1035 = add i64 %1034, -8
  %1036 = inttoptr i64 %1035 to i64*
  store i64 %1030, i64* %1036
  store i64 %1035, i64* %1033, align 8, !tbaa !2428
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1028, i64* %1037, align 8, !tbaa !2428
  %1038 = load i64, i64* %PC
  %1039 = call %struct.Memory* @ext_6050d0_memalign(%struct.State* %0, i64 %1038, %struct.Memory* %1004)
  %1040 = load i64, i64* %RDI
  %1041 = load i32, i32* %EDI
  %1042 = zext i32 %1041 to i64
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 2
  store i64 %1044, i64* %PC
  %1045 = xor i64 %1042, %1040
  %1046 = trunc i64 %1045 to i32
  %1047 = and i64 %1045, 4294967295
  store i64 %1047, i64* %RDI, align 8, !tbaa !2428
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1048, align 1, !tbaa !2432
  %1049 = and i32 %1046, 255
  %1050 = call i32 @llvm.ctpop.i32(i32 %1049) #17
  %1051 = trunc i32 %1050 to i8
  %1052 = and i8 %1051, 1
  %1053 = xor i8 %1052, 1
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1053, i8* %1054, align 1, !tbaa !2446
  %1055 = icmp eq i32 %1046, 0
  %1056 = zext i1 %1055 to i8
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1056, i8* %1057, align 1, !tbaa !2448
  %1058 = lshr i32 %1046, 31
  %1059 = trunc i32 %1058 to i8
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1059, i8* %1060, align 1, !tbaa !2449
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1061, align 1, !tbaa !2450
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1062, align 1, !tbaa !2447
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 5
  store i64 %1064, i64* %PC
  store i64 2047, i64* %RSI, align 8, !tbaa !2428
  %1065 = load i64, i64* %RBP
  %1066 = sub i64 %1065, 48
  %1067 = load i64, i64* %RAX
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1066 to i64*
  store i64 %1067, i64* %1070
  %1071 = load i64, i64* %RBP
  %1072 = sub i64 %1071, 32
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 4
  store i64 %1074, i64* %PC
  %1075 = inttoptr i64 %1072 to i64*
  %1076 = load i64, i64* %1075
  store i64 %1076, i64* %RDX, align 8, !tbaa !2428
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 1624
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 5
  store i64 %1082, i64* %PC
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1084 = load i64, i64* %1083, align 8, !tbaa !2428
  %1085 = add i64 %1084, -8
  %1086 = inttoptr i64 %1085 to i64*
  store i64 %1080, i64* %1086
  store i64 %1085, i64* %1083, align 8, !tbaa !2428
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1078, i64* %1087, align 8, !tbaa !2428
  %1088 = load i64, i64* %PC
  %1089 = call %struct.Memory* @sub_400fe0_putdata_renamed_(%struct.State* %0, i64 %1088, %struct.Memory* %1039)
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 5
  store i64 %1091, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 5
  store i64 %1093, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1094 = load i64, i64* %RBP
  %1095 = sub i64 %1094, 32
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 4
  store i64 %1097, i64* %PC
  %1098 = inttoptr i64 %1095 to i64*
  %1099 = load i64, i64* %1098
  store i64 %1099, i64* %RDX, align 8, !tbaa !2428
  %1100 = load i64, i64* %RBP
  %1101 = sub i64 %1100, 24
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1101 to i64*
  %1105 = load i64, i64* %1104
  store i64 %1105, i64* %RCX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 56
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 4
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %R8, align 8, !tbaa !2428
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 1725
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 5
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  store i64 %1117, i64* %PC
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1119 = load i64, i64* %1118, align 8, !tbaa !2428
  %1120 = add i64 %1119, -8
  %1121 = inttoptr i64 %1120 to i64*
  store i64 %1115, i64* %1121
  store i64 %1120, i64* %1118, align 8, !tbaa !2428
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1113, i64* %1122, align 8, !tbaa !2428
  %1123 = load i64, i64* %PC
  %1124 = call %struct.Memory* @sub_401060_cdft_renamed_(%struct.State* %0, i64 %1123, %struct.Memory* %1089)
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  store i64 %1126, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  store i64 %1128, i64* %PC
  store i64 4294967295, i64* %RSI, align 8, !tbaa !2428
  %1129 = load i64, i64* %RBP
  %1130 = sub i64 %1129, 32
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 4
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1130 to i64*
  %1134 = load i64, i64* %1133
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = load i64, i64* %RBP
  %1136 = sub i64 %1135, 24
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 4
  store i64 %1138, i64* %PC
  %1139 = inttoptr i64 %1136 to i64*
  %1140 = load i64, i64* %1139
  store i64 %1140, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RBP
  %1142 = sub i64 %1141, 56
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 4
  store i64 %1144, i64* %PC
  %1145 = inttoptr i64 %1142 to i64*
  %1146 = load i64, i64* %1145
  store i64 %1146, i64* %R8, align 8, !tbaa !2428
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 1698
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 5
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 5
  store i64 %1152, i64* %PC
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1154 = load i64, i64* %1153, align 8, !tbaa !2428
  %1155 = add i64 %1154, -8
  %1156 = inttoptr i64 %1155 to i64*
  store i64 %1150, i64* %1156
  store i64 %1155, i64* %1153, align 8, !tbaa !2428
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1148, i64* %1157, align 8, !tbaa !2428
  %1158 = load i64, i64* %PC
  %1159 = call %struct.Memory* @sub_401060_cdft_renamed_(%struct.State* %0, i64 %1158, %struct.Memory* %1124)
  %1160 = load i64, i64* %RDI
  %1161 = load i32, i32* %EDI
  %1162 = zext i32 %1161 to i64
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 2
  store i64 %1164, i64* %PC
  %1165 = xor i64 %1162, %1160
  %1166 = trunc i64 %1165 to i32
  %1167 = and i64 %1165, 4294967295
  store i64 %1167, i64* %RDI, align 8, !tbaa !2428
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1168, align 1, !tbaa !2432
  %1169 = and i32 %1166, 255
  %1170 = call i32 @llvm.ctpop.i32(i32 %1169) #17
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  %1173 = xor i8 %1172, 1
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1173, i8* %1174, align 1, !tbaa !2446
  %1175 = icmp eq i32 %1166, 0
  %1176 = zext i1 %1175 to i8
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1176, i8* %1177, align 1, !tbaa !2448
  %1178 = lshr i32 %1166, 31
  %1179 = trunc i32 %1178 to i8
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1179, i8* %1180, align 1, !tbaa !2449
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1181, align 1, !tbaa !2450
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1182, align 1, !tbaa !2447
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 5
  store i64 %1184, i64* %PC
  store i64 2047, i64* %RSI, align 8, !tbaa !2428
  %1185 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 8
  store i64 %1187, i64* %PC
  %1188 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 16) to double*)
  %1189 = bitcast i8* %1185 to double*
  store double %1188, double* %1189, align 1, !tbaa !2452
  %1190 = getelementptr inbounds i8, i8* %1185, i64 8
  %1191 = bitcast i8* %1190 to double*
  store double 0.000000e+00, double* %1191, align 1, !tbaa !2452
  %1192 = load i64, i64* %RBP
  %1193 = sub i64 %1192, 32
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 4
  store i64 %1195, i64* %PC
  %1196 = inttoptr i64 %1193 to i64*
  %1197 = load i64, i64* %1196
  store i64 %1197, i64* %RDX, align 8, !tbaa !2428
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 1834
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 5
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 5
  store i64 %1203, i64* %PC
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1205 = load i64, i64* %1204, align 8, !tbaa !2428
  %1206 = add i64 %1205, -8
  %1207 = inttoptr i64 %1206 to i64*
  store i64 %1201, i64* %1207
  store i64 %1206, i64* %1204, align 8, !tbaa !2428
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1199, i64* %1208, align 8, !tbaa !2428
  %1209 = load i64, i64* %PC
  %1210 = call %struct.Memory* @sub_401100_errorcheck_renamed_(%struct.State* %0, i64 %1209, %struct.Memory* %1159)
  %1211 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 8
  store i64 %1213, i64* %PC
  %1214 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 8) to double*)
  %1215 = bitcast i8* %1211 to double*
  store double %1214, double* %1215, align 1, !tbaa !2452
  %1216 = getelementptr inbounds i8, i8* %1211, i64 8
  %1217 = bitcast i8* %1216 to double*
  store double 0.000000e+00, double* %1217, align 1, !tbaa !2452
  %1218 = load i64, i64* %RBP
  %1219 = sub i64 %1218, 96
  %1220 = bitcast %union.vec128_t* %XMM0 to i8*
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = bitcast i8* %1220 to double*
  %1224 = load double, double* %1223, align 1
  %1225 = inttoptr i64 %1219 to double*
  store double %1224, double* %1225
  %1226 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 96
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 5
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to double*
  %1232 = load double, double* %1231
  %1233 = bitcast i8* %1226 to double*
  store double %1232, double* %1233, align 1, !tbaa !2452
  %1234 = getelementptr inbounds i8, i8* %1226, i64 8
  %1235 = bitcast i8* %1234 to double*
  store double 0.000000e+00, double* %1235, align 1, !tbaa !2452
  %1236 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 7
  store i64 %1238, i64* %PC
  %1239 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 96) to float*)
  %1240 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 100) to float*)
  %1241 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 104) to float*)
  %1242 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 108) to float*)
  %1243 = bitcast i8* %1236 to float*
  store float %1239, float* %1243, align 1, !tbaa !2479
  %1244 = getelementptr inbounds i8, i8* %1236, i64 4
  %1245 = bitcast i8* %1244 to float*
  store float %1240, float* %1245, align 1, !tbaa !2479
  %1246 = getelementptr inbounds i8, i8* %1236, i64 8
  %1247 = bitcast i8* %1246 to float*
  store float %1241, float* %1247, align 1, !tbaa !2479
  %1248 = getelementptr inbounds i8, i8* %1236, i64 12
  %1249 = bitcast i8* %1248 to float*
  store float %1242, float* %1249, align 1, !tbaa !2479
  %1250 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1252 = bitcast %union.vec128_t* %XMM2 to i8*
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 4
  store i64 %1254, i64* %PC
  %1255 = bitcast i8* %1251 to i64*
  %1256 = load i64, i64* %1255, align 1
  %1257 = getelementptr inbounds i8, i8* %1251, i64 8
  %1258 = bitcast i8* %1257 to i64*
  %1259 = load i64, i64* %1258, align 1
  %1260 = bitcast i8* %1252 to i64*
  %1261 = load i64, i64* %1260, align 1
  %1262 = getelementptr inbounds i8, i8* %1252, i64 8
  %1263 = bitcast i8* %1262 to i64*
  %1264 = load i64, i64* %1263, align 1
  %1265 = and i64 %1261, %1256
  %1266 = and i64 %1264, %1259
  %1267 = trunc i64 %1265 to i32
  %1268 = lshr i64 %1265, 32
  %1269 = trunc i64 %1268 to i32
  %1270 = bitcast i8* %1250 to i32*
  store i32 %1267, i32* %1270, align 1, !tbaa !2454
  %1271 = getelementptr inbounds i8, i8* %1250, i64 4
  %1272 = bitcast i8* %1271 to i32*
  store i32 %1269, i32* %1272, align 1, !tbaa !2454
  %1273 = trunc i64 %1266 to i32
  %1274 = getelementptr inbounds i8, i8* %1250, i64 8
  %1275 = bitcast i8* %1274 to i32*
  store i32 %1273, i32* %1275, align 1, !tbaa !2454
  %1276 = lshr i64 %1266, 32
  %1277 = trunc i64 %1276 to i32
  %1278 = getelementptr inbounds i8, i8* %1250, i64 12
  %1279 = bitcast i8* %1278 to i32*
  store i32 %1277, i32* %1279, align 1, !tbaa !2454
  %1280 = bitcast %union.vec128_t* %XMM0 to i8*
  %1281 = bitcast %union.vec128_t* %XMM1 to i8*
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 4
  store i64 %1283, i64* %PC
  %1284 = bitcast i8* %1280 to double*
  %1285 = load double, double* %1284, align 1
  %1286 = bitcast i8* %1281 to double*
  %1287 = load double, double* %1286, align 1
  %1288 = fcmp uno double %1285, %1287
  br i1 %1288, label %1289, label %1301

; <label>:1289:                                   ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3
  %1290 = fadd double %1285, %1287
  %1291 = bitcast double %1290 to i64
  %1292 = and i64 %1291, 9221120237041090560
  %1293 = icmp eq i64 %1292, 9218868437227405312
  %1294 = and i64 %1291, 2251799813685247
  %1295 = icmp ne i64 %1294, 0
  %1296 = and i1 %1293, %1295
  br i1 %1296, label %1297, label %1307

; <label>:1297:                                   ; preds = %1289
  %1298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1299 = load i64, i64* %1298, align 8, !tbaa !2428
  %1300 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1299, %struct.Memory* %1210) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:1301:                                   ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3
  %1302 = fcmp ogt double %1285, %1287
  br i1 %1302, label %1307, label %1303

; <label>:1303:                                   ; preds = %1301
  %1304 = fcmp olt double %1285, %1287
  br i1 %1304, label %1307, label %1305

; <label>:1305:                                   ; preds = %1303
  %1306 = fcmp oeq double %1285, %1287
  br i1 %1306, label %1307, label %1314

; <label>:1307:                                   ; preds = %1305, %1303, %1301, %1289
  %1308 = phi i8 [ 0, %1301 ], [ 0, %1303 ], [ 1, %1305 ], [ 1, %1289 ]
  %1309 = phi i8 [ 0, %1301 ], [ 0, %1303 ], [ 0, %1305 ], [ 1, %1289 ]
  %1310 = phi i8 [ 0, %1301 ], [ 1, %1303 ], [ 0, %1305 ], [ 1, %1289 ]
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1308, i8* %1311, align 1, !tbaa !2451
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1309, i8* %1312, align 1, !tbaa !2451
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1310, i8* %1313, align 1, !tbaa !2451
  br label %1314

; <label>:1314:                                   ; preds = %1307, %1305
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1315, align 1, !tbaa !2451
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1316, align 1, !tbaa !2451
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1317, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %1297, %1314
  %1318 = phi %struct.Memory* [ %1300, %1297 ], [ %1210, %1314 ]
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 39
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 6
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 6
  store i64 %1324, i64* %PC
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1326 = load i8, i8* %1325, align 1, !tbaa !2432
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1328 = load i8, i8* %1327, align 1, !tbaa !2448
  %1329 = or i8 %1328, %1326
  %1330 = icmp ne i8 %1329, 0
  %1331 = zext i1 %1330 to i8
  store i8 %1331, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1333 = select i1 %1330, i64 %1320, i64 %1322
  store i64 %1333, i64* %1332, align 8, !tbaa !2428
  %1334 = load i8, i8* %BRANCH_TAKEN
  %1335 = icmp eq i8 %1334, 1
  br i1 %1335, label %block_400a23, label %block_400a02

block_400cf3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1336 = load i64, i64* %RBP
  %1337 = sub i64 %1336, 40
  %1338 = load i64, i64* %PC
  %1339 = add i64 %1338, 4
  store i64 %1339, i64* %PC
  %1340 = inttoptr i64 %1337 to i64*
  %1341 = load i64, i64* %1340
  store i64 %1341, i64* %RAX, align 8, !tbaa !2428
  %1342 = load i64, i64* %RBP
  %1343 = sub i64 %1342, 12
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1343 to i32*
  %1347 = load i32, i32* %1346
  %1348 = zext i32 %1347 to i64
  store i64 %1348, i64* %RCX, align 8, !tbaa !2428
  %1349 = load i64, i64* %RCX
  %1350 = load i64, i64* %PC
  %1351 = add i64 %1350, 3
  store i64 %1351, i64* %PC
  %1352 = trunc i64 %1349 to i32
  %1353 = shl i32 %1352, 1
  %1354 = icmp slt i32 %1352, 0
  %1355 = icmp slt i32 %1353, 0
  %1356 = xor i1 %1354, %1355
  %1357 = zext i32 %1353 to i64
  store i64 %1357, i64* %RCX, align 8, !tbaa !2428
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1359 = zext i1 %1354 to i8
  store i8 %1359, i8* %1358, align 1, !tbaa !2451
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1361 = and i32 %1353, 254
  %1362 = call i32 @llvm.ctpop.i32(i32 %1361) #17
  %1363 = trunc i32 %1362 to i8
  %1364 = and i8 %1363, 1
  %1365 = xor i8 %1364, 1
  store i8 %1365, i8* %1360, align 1, !tbaa !2451
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1366, align 1, !tbaa !2451
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1368 = icmp eq i32 %1353, 0
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %1367, align 1, !tbaa !2451
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1371 = lshr i32 %1353, 31
  %1372 = trunc i32 %1371 to i8
  store i8 %1372, i8* %1370, align 1, !tbaa !2451
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1374 = zext i1 %1356 to i8
  store i8 %1374, i8* %1373, align 1, !tbaa !2451
  %1375 = load i32, i32* %ECX
  %1376 = zext i32 %1375 to i64
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 3
  store i64 %1378, i64* %PC
  %1379 = shl i64 %1376, 32
  %1380 = ashr exact i64 %1379, 32
  store i64 %1380, i64* %RDX, align 8, !tbaa !2428
  %1381 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1382 = load i64, i64* %RAX
  %1383 = load i64, i64* %RDX
  %1384 = mul i64 %1383, 8
  %1385 = add i64 %1384, %1382
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 5
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to double*
  %1389 = load double, double* %1388
  %1390 = bitcast i8* %1381 to double*
  store double %1389, double* %1390, align 1, !tbaa !2452
  %1391 = getelementptr inbounds i8, i8* %1381, i64 8
  %1392 = bitcast i8* %1391 to double*
  store double 0.000000e+00, double* %1392, align 1, !tbaa !2452
  %1393 = load i64, i64* %RBP
  %1394 = sub i64 %1393, 192
  %1395 = bitcast %union.vec128_t* %XMM0 to i8*
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 8
  store i64 %1397, i64* %PC
  %1398 = bitcast i8* %1395 to double*
  %1399 = load double, double* %1398, align 1
  %1400 = inttoptr i64 %1394 to double*
  store double %1399, double* %1400
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 21
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 5
  store i64 %1404, i64* %PC
  %1405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1402, i64* %1405, align 8, !tbaa !2428
  br label %block_400d22

block_400c64:                                     ; preds = %block_400b87
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 5
  store i64 %1407, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 5
  store i64 %1409, i64* %PC
  store i64 4294967295, i64* %RSI, align 8, !tbaa !2428
  %1410 = load i64, i64* %RBP
  %1411 = sub i64 %1410, 40
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 4
  store i64 %1413, i64* %PC
  %1414 = inttoptr i64 %1411 to i64*
  %1415 = load i64, i64* %1414
  store i64 %1415, i64* %RDX, align 8, !tbaa !2428
  %1416 = load i64, i64* %RBP
  %1417 = sub i64 %1416, 24
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 4
  store i64 %1419, i64* %PC
  %1420 = inttoptr i64 %1417 to i64*
  %1421 = load i64, i64* %1420
  store i64 %1421, i64* %RCX, align 8, !tbaa !2428
  %1422 = load i64, i64* %RBP
  %1423 = sub i64 %1422, 56
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 4
  store i64 %1425, i64* %PC
  %1426 = inttoptr i64 %1423 to i64*
  %1427 = load i64, i64* %1426
  store i64 %1427, i64* %R8, align 8, !tbaa !2428
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 998
  %1430 = load i64, i64* %PC
  %1431 = add i64 %1430, 5
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 5
  store i64 %1433, i64* %PC
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1435 = load i64, i64* %1434, align 8, !tbaa !2428
  %1436 = add i64 %1435, -8
  %1437 = inttoptr i64 %1436 to i64*
  store i64 %1431, i64* %1437
  store i64 %1436, i64* %1434, align 8, !tbaa !2428
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1429, i64* %1438, align 8, !tbaa !2428
  %1439 = load i64, i64* %PC
  %1440 = call %struct.Memory* @sub_401060_cdft_renamed_(%struct.State* %0, i64 %1439, %struct.Memory* %MEMORY.4)
  %1441 = load i64, i64* %RBP
  %1442 = sub i64 %1441, 8
  %1443 = load i64, i64* %PC
  %1444 = add i64 %1443, 3
  store i64 %1444, i64* %PC
  %1445 = inttoptr i64 %1442 to i32*
  %1446 = load i32, i32* %1445
  %1447 = zext i32 %1446 to i64
  store i64 %1447, i64* %RAX, align 8, !tbaa !2428
  %1448 = load i64, i64* %RAX
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 3
  store i64 %1450, i64* %PC
  %1451 = trunc i64 %1448 to i32
  %1452 = add i32 1, %1451
  %1453 = zext i32 %1452 to i64
  store i64 %1453, i64* %RAX, align 8, !tbaa !2428
  %1454 = icmp ult i32 %1452, %1451
  %1455 = icmp ult i32 %1452, 1
  %1456 = or i1 %1454, %1455
  %1457 = zext i1 %1456 to i8
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1457, i8* %1458, align 1, !tbaa !2432
  %1459 = and i32 %1452, 255
  %1460 = call i32 @llvm.ctpop.i32(i32 %1459) #17
  %1461 = trunc i32 %1460 to i8
  %1462 = and i8 %1461, 1
  %1463 = xor i8 %1462, 1
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1463, i8* %1464, align 1, !tbaa !2446
  %1465 = xor i64 1, %1448
  %1466 = trunc i64 %1465 to i32
  %1467 = xor i32 %1466, %1452
  %1468 = lshr i32 %1467, 4
  %1469 = trunc i32 %1468 to i8
  %1470 = and i8 %1469, 1
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1470, i8* %1471, align 1, !tbaa !2447
  %1472 = icmp eq i32 %1452, 0
  %1473 = zext i1 %1472 to i8
  %1474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1473, i8* %1474, align 1, !tbaa !2448
  %1475 = lshr i32 %1452, 31
  %1476 = trunc i32 %1475 to i8
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1476, i8* %1477, align 1, !tbaa !2449
  %1478 = lshr i32 %1451, 31
  %1479 = xor i32 %1475, %1478
  %1480 = add nuw nsw i32 %1479, %1475
  %1481 = icmp eq i32 %1480, 2
  %1482 = zext i1 %1481 to i8
  %1483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1482, i8* %1483, align 1, !tbaa !2450
  %1484 = load i64, i64* %RBP
  %1485 = sub i64 %1484, 8
  %1486 = load i32, i32* %EAX
  %1487 = zext i32 %1486 to i64
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 3
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1485 to i32*
  store i32 %1486, i32* %1490
  %1491 = load i64, i64* %PC
  %1492 = sub i64 %1491, 354
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 5
  store i64 %1494, i64* %PC
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1492, i64* %1495, align 8, !tbaa !2428
  br label %block_400b26

block_400dde:                                     ; preds = %block_400cb7
  %1496 = load i64, i64* %RBP
  %1497 = sub i64 %1496, 32
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 4
  store i64 %1499, i64* %PC
  %1500 = inttoptr i64 %1497 to i64*
  %1501 = load i64, i64* %1500
  store i64 %1501, i64* %RAX, align 8, !tbaa !2428
  %1502 = load i64, i64* %RAX
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 3
  store i64 %1504, i64* %PC
  store i64 %1502, i64* %RDI, align 8, !tbaa !2428
  %1505 = load i64, i64* %PC
  %1506 = sub i64 %1505, 1845
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 5
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 5
  store i64 %1510, i64* %PC
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1512 = load i64, i64* %1511, align 8, !tbaa !2428
  %1513 = add i64 %1512, -8
  %1514 = inttoptr i64 %1513 to i64*
  store i64 %1508, i64* %1514
  store i64 %1513, i64* %1511, align 8, !tbaa !2428
  %1515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1506, i64* %1515, align 8, !tbaa !2428
  %1516 = load i64, i64* %PC
  %1517 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %1516, %struct.Memory* %MEMORY.5)
  %1518 = load i64, i64* %RBP
  %1519 = sub i64 %1518, 56
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 4
  store i64 %1521, i64* %PC
  %1522 = inttoptr i64 %1519 to i64*
  %1523 = load i64, i64* %1522
  store i64 %1523, i64* %RAX, align 8, !tbaa !2428
  %1524 = load i64, i64* %RAX
  %1525 = load i64, i64* %PC
  %1526 = add i64 %1525, 3
  store i64 %1526, i64* %PC
  store i64 %1524, i64* %RDI, align 8, !tbaa !2428
  %1527 = load i64, i64* %PC
  %1528 = sub i64 %1527, 1857
  %1529 = load i64, i64* %PC
  %1530 = add i64 %1529, 5
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 5
  store i64 %1532, i64* %PC
  %1533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1534 = load i64, i64* %1533, align 8, !tbaa !2428
  %1535 = add i64 %1534, -8
  %1536 = inttoptr i64 %1535 to i64*
  store i64 %1530, i64* %1536
  store i64 %1535, i64* %1533, align 8, !tbaa !2428
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1528, i64* %1537, align 8, !tbaa !2428
  %1538 = load i64, i64* %PC
  %1539 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %1538, %struct.Memory* %1517)
  %1540 = load i64, i64* %RBP
  %1541 = sub i64 %1540, 24
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 4
  store i64 %1543, i64* %PC
  %1544 = inttoptr i64 %1541 to i64*
  %1545 = load i64, i64* %1544
  store i64 %1545, i64* %RAX, align 8, !tbaa !2428
  %1546 = load i64, i64* %RAX
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 3
  store i64 %1548, i64* %PC
  store i64 %1546, i64* %RDI, align 8, !tbaa !2428
  %1549 = load i64, i64* %PC
  %1550 = sub i64 %1549, 1869
  %1551 = load i64, i64* %PC
  %1552 = add i64 %1551, 5
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 5
  store i64 %1554, i64* %PC
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1556 = load i64, i64* %1555, align 8, !tbaa !2428
  %1557 = add i64 %1556, -8
  %1558 = inttoptr i64 %1557 to i64*
  store i64 %1552, i64* %1558
  store i64 %1557, i64* %1555, align 8, !tbaa !2428
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1550, i64* %1559, align 8, !tbaa !2428
  %1560 = load i64, i64* %PC
  %1561 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %1560, %struct.Memory* %1539)
  %1562 = load i64, i64* %RBP
  %1563 = sub i64 %1562, 40
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 4
  store i64 %1565, i64* %PC
  %1566 = inttoptr i64 %1563 to i64*
  %1567 = load i64, i64* %1566
  store i64 %1567, i64* %RAX, align 8, !tbaa !2428
  %1568 = load i64, i64* %RAX
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 3
  store i64 %1570, i64* %PC
  store i64 %1568, i64* %RDI, align 8, !tbaa !2428
  %1571 = load i64, i64* %PC
  %1572 = sub i64 %1571, 1881
  %1573 = load i64, i64* %PC
  %1574 = add i64 %1573, 5
  %1575 = load i64, i64* %PC
  %1576 = add i64 %1575, 5
  store i64 %1576, i64* %PC
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1578 = load i64, i64* %1577, align 8, !tbaa !2428
  %1579 = add i64 %1578, -8
  %1580 = inttoptr i64 %1579 to i64*
  store i64 %1574, i64* %1580
  store i64 %1579, i64* %1577, align 8, !tbaa !2428
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1572, i64* %1581, align 8, !tbaa !2428
  %1582 = load i64, i64* %PC
  %1583 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %1582, %struct.Memory* %1561)
  %1584 = load i64, i64* %RBP
  %1585 = sub i64 %1584, 48
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 4
  store i64 %1587, i64* %PC
  %1588 = inttoptr i64 %1585 to i64*
  %1589 = load i64, i64* %1588
  store i64 %1589, i64* %RAX, align 8, !tbaa !2428
  %1590 = load i64, i64* %RAX
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 3
  store i64 %1592, i64* %PC
  store i64 %1590, i64* %RDI, align 8, !tbaa !2428
  %1593 = load i64, i64* %PC
  %1594 = sub i64 %1593, 1893
  %1595 = load i64, i64* %PC
  %1596 = add i64 %1595, 5
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 5
  store i64 %1598, i64* %PC
  %1599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1600 = load i64, i64* %1599, align 8, !tbaa !2428
  %1601 = add i64 %1600, -8
  %1602 = inttoptr i64 %1601 to i64*
  store i64 %1596, i64* %1602
  store i64 %1601, i64* %1599, align 8, !tbaa !2428
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1594, i64* %1603, align 8, !tbaa !2428
  %1604 = load i64, i64* %PC
  %1605 = call %struct.Memory* @ext_6050e8_free(%struct.State* %0, i64 %1604, %struct.Memory* %1583)
  %1606 = load i64, i64* %RAX
  %1607 = load i32, i32* %EAX
  %1608 = zext i32 %1607 to i64
  %1609 = load i64, i64* %PC
  %1610 = add i64 %1609, 2
  store i64 %1610, i64* %PC
  %1611 = xor i64 %1608, %1606
  %1612 = trunc i64 %1611 to i32
  %1613 = and i64 %1611, 4294967295
  store i64 %1613, i64* %RAX, align 8, !tbaa !2428
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1614, align 1, !tbaa !2432
  %1615 = and i32 %1612, 255
  %1616 = call i32 @llvm.ctpop.i32(i32 %1615) #17
  %1617 = trunc i32 %1616 to i8
  %1618 = and i8 %1617, 1
  %1619 = xor i8 %1618, 1
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1619, i8* %1620, align 1, !tbaa !2446
  %1621 = icmp eq i32 %1612, 0
  %1622 = zext i1 %1621 to i8
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1622, i8* %1623, align 1, !tbaa !2448
  %1624 = lshr i32 %1612, 31
  %1625 = trunc i32 %1624 to i8
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1625, i8* %1626, align 1, !tbaa !2449
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1627, align 1, !tbaa !2450
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1628, align 1, !tbaa !2447
  %1629 = load i64, i64* %RSP
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 7
  store i64 %1631, i64* %PC
  %1632 = add i64 224, %1629
  store i64 %1632, i64* %RSP, align 8, !tbaa !2428
  %1633 = icmp ult i64 %1632, %1629
  %1634 = icmp ult i64 %1632, 224
  %1635 = or i1 %1633, %1634
  %1636 = zext i1 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1636, i8* %1637, align 1, !tbaa !2432
  %1638 = trunc i64 %1632 to i32
  %1639 = and i32 %1638, 255
  %1640 = call i32 @llvm.ctpop.i32(i32 %1639) #17
  %1641 = trunc i32 %1640 to i8
  %1642 = and i8 %1641, 1
  %1643 = xor i8 %1642, 1
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1643, i8* %1644, align 1, !tbaa !2446
  %1645 = xor i64 224, %1629
  %1646 = xor i64 %1645, %1632
  %1647 = lshr i64 %1646, 4
  %1648 = trunc i64 %1647 to i8
  %1649 = and i8 %1648, 1
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1649, i8* %1650, align 1, !tbaa !2447
  %1651 = icmp eq i64 %1632, 0
  %1652 = zext i1 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1652, i8* %1653, align 1, !tbaa !2448
  %1654 = lshr i64 %1632, 63
  %1655 = trunc i64 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1655, i8* %1656, align 1, !tbaa !2449
  %1657 = lshr i64 %1629, 63
  %1658 = xor i64 %1654, %1657
  %1659 = add nuw nsw i64 %1658, %1654
  %1660 = icmp eq i64 %1659, 2
  %1661 = zext i1 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1661, i8* %1662, align 1, !tbaa !2450
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 1
  store i64 %1664, i64* %PC
  %1665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1666 = load i64, i64* %1665, align 8, !tbaa !2428
  %1667 = add i64 %1666, 8
  %1668 = inttoptr i64 %1666 to i64*
  %1669 = load i64, i64* %1668
  store i64 %1669, i64* %RBP, align 8, !tbaa !2428
  store i64 %1667, i64* %1665, align 8, !tbaa !2428
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 1
  store i64 %1671, i64* %PC
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1674 = load i64, i64* %1673, align 8, !tbaa !2428
  %1675 = inttoptr i64 %1674 to i64*
  %1676 = load i64, i64* %1675
  store i64 %1676, i64* %1672, align 8, !tbaa !2428
  %1677 = add i64 %1674, 8
  store i64 %1677, i64* %1673, align 8, !tbaa !2428
  ret %struct.Memory* %1605

block_400d64:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1678 = load i64, i64* %RBP
  %1679 = sub i64 %1678, 40
  %1680 = load i64, i64* %PC
  %1681 = add i64 %1680, 4
  store i64 %1681, i64* %PC
  %1682 = inttoptr i64 %1679 to i64*
  %1683 = load i64, i64* %1682
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %1684 = load i64, i64* %RBP
  %1685 = sub i64 %1684, 12
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 3
  store i64 %1687, i64* %PC
  %1688 = inttoptr i64 %1685 to i32*
  %1689 = load i32, i32* %1688
  %1690 = zext i32 %1689 to i64
  store i64 %1690, i64* %RCX, align 8, !tbaa !2428
  %1691 = load i64, i64* %RCX
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 3
  store i64 %1693, i64* %PC
  %1694 = trunc i64 %1691 to i32
  %1695 = shl i32 %1694, 1
  %1696 = icmp slt i32 %1694, 0
  %1697 = icmp slt i32 %1695, 0
  %1698 = xor i1 %1696, %1697
  %1699 = zext i32 %1695 to i64
  store i64 %1699, i64* %RCX, align 8, !tbaa !2428
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1701 = zext i1 %1696 to i8
  store i8 %1701, i8* %1700, align 1, !tbaa !2451
  %1702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1703 = and i32 %1695, 254
  %1704 = call i32 @llvm.ctpop.i32(i32 %1703) #17
  %1705 = trunc i32 %1704 to i8
  %1706 = and i8 %1705, 1
  %1707 = xor i8 %1706, 1
  store i8 %1707, i8* %1702, align 1, !tbaa !2451
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1708, align 1, !tbaa !2451
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1710 = icmp eq i32 %1695, 0
  %1711 = zext i1 %1710 to i8
  store i8 %1711, i8* %1709, align 1, !tbaa !2451
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1713 = lshr i32 %1695, 31
  %1714 = trunc i32 %1713 to i8
  store i8 %1714, i8* %1712, align 1, !tbaa !2451
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1716 = zext i1 %1698 to i8
  store i8 %1716, i8* %1715, align 1, !tbaa !2451
  %1717 = load i64, i64* %RCX
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 3
  store i64 %1719, i64* %PC
  %1720 = trunc i64 %1717 to i32
  %1721 = add i32 1, %1720
  %1722 = zext i32 %1721 to i64
  store i64 %1722, i64* %RCX, align 8, !tbaa !2428
  %1723 = icmp ult i32 %1721, %1720
  %1724 = icmp ult i32 %1721, 1
  %1725 = or i1 %1723, %1724
  %1726 = zext i1 %1725 to i8
  %1727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1726, i8* %1727, align 1, !tbaa !2432
  %1728 = and i32 %1721, 255
  %1729 = call i32 @llvm.ctpop.i32(i32 %1728) #17
  %1730 = trunc i32 %1729 to i8
  %1731 = and i8 %1730, 1
  %1732 = xor i8 %1731, 1
  %1733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1732, i8* %1733, align 1, !tbaa !2446
  %1734 = xor i64 1, %1717
  %1735 = trunc i64 %1734 to i32
  %1736 = xor i32 %1735, %1721
  %1737 = lshr i32 %1736, 4
  %1738 = trunc i32 %1737 to i8
  %1739 = and i8 %1738, 1
  %1740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1739, i8* %1740, align 1, !tbaa !2447
  %1741 = icmp eq i32 %1721, 0
  %1742 = zext i1 %1741 to i8
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1742, i8* %1743, align 1, !tbaa !2448
  %1744 = lshr i32 %1721, 31
  %1745 = trunc i32 %1744 to i8
  %1746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1745, i8* %1746, align 1, !tbaa !2449
  %1747 = lshr i32 %1720, 31
  %1748 = xor i32 %1744, %1747
  %1749 = add nuw nsw i32 %1748, %1744
  %1750 = icmp eq i32 %1749, 2
  %1751 = zext i1 %1750 to i8
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1751, i8* %1752, align 1, !tbaa !2450
  %1753 = load i32, i32* %ECX
  %1754 = zext i32 %1753 to i64
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 3
  store i64 %1756, i64* %PC
  %1757 = shl i64 %1754, 32
  %1758 = ashr exact i64 %1757, 32
  store i64 %1758, i64* %RDX, align 8, !tbaa !2428
  %1759 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1760 = load i64, i64* %RAX
  %1761 = load i64, i64* %RDX
  %1762 = mul i64 %1761, 8
  %1763 = add i64 %1762, %1760
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 5
  store i64 %1765, i64* %PC
  %1766 = inttoptr i64 %1763 to double*
  %1767 = load double, double* %1766
  %1768 = bitcast i8* %1759 to double*
  store double %1767, double* %1768, align 1, !tbaa !2452
  %1769 = getelementptr inbounds i8, i8* %1759, i64 8
  %1770 = bitcast i8* %1769 to double*
  store double 0.000000e+00, double* %1770, align 1, !tbaa !2452
  %1771 = load i64, i64* %RBP
  %1772 = sub i64 %1771, 208
  %1773 = bitcast %union.vec128_t* %XMM0 to i8*
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 8
  store i64 %1775, i64* %PC
  %1776 = bitcast i8* %1773 to double*
  %1777 = load double, double* %1776, align 1
  %1778 = inttoptr i64 %1772 to double*
  store double %1777, double* %1778
  %1779 = load i64, i64* %PC
  %1780 = add i64 %1779, 21
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 5
  store i64 %1782, i64* %PC
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1780, i64* %1783, align 8, !tbaa !2428
  br label %block_400d96

block_400b33:                                     ; preds = %block_400b26
  %1784 = add i64 %2106, 5
  store i64 %1784, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 5
  store i64 %1786, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 5
  store i64 %1788, i64* %PC
  store i64 16384, i64* %RAX, align 8, !tbaa !2428
  %1789 = load i32, i32* %EAX
  %1790 = zext i32 %1789 to i64
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 2
  store i64 %1792, i64* %PC
  %1793 = and i64 %1790, 4294967295
  store i64 %1793, i64* %RDX, align 8, !tbaa !2428
  %1794 = load i64, i64* %RBP
  %1795 = sub i64 %1794, 40
  %1796 = load i64, i64* %PC
  %1797 = add i64 %1796, 4
  store i64 %1797, i64* %PC
  %1798 = inttoptr i64 %1795 to i64*
  %1799 = load i64, i64* %1798
  store i64 %1799, i64* %RCX, align 8, !tbaa !2428
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 48
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 4
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to i64*
  %1805 = load i64, i64* %1804
  store i64 %1805, i64* %R8, align 8, !tbaa !2428
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 176
  %1808 = load i32, i32* %EDI
  %1809 = zext i32 %1808 to i64
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 6
  store i64 %1811, i64* %PC
  %1812 = inttoptr i64 %1807 to i32*
  store i32 %1808, i32* %1812
  %1813 = load i64, i64* %RCX
  %1814 = load i64, i64* %PC
  %1815 = add i64 %1814, 3
  store i64 %1815, i64* %PC
  store i64 %1813, i64* %RDI, align 8, !tbaa !2428
  %1816 = load i64, i64* %RBP
  %1817 = sub i64 %1816, 180
  %1818 = load i32, i32* %ESI
  %1819 = zext i32 %1818 to i64
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 6
  store i64 %1821, i64* %PC
  %1822 = inttoptr i64 %1817 to i32*
  store i32 %1818, i32* %1822
  %1823 = load i64, i64* %R8
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 3
  store i64 %1825, i64* %PC
  store i64 %1823, i64* %RSI, align 8, !tbaa !2428
  %1826 = load i64, i64* %PC
  %1827 = sub i64 %1826, 1086
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 5
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 5
  store i64 %1831, i64* %PC
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1833 = load i64, i64* %1832, align 8, !tbaa !2428
  %1834 = add i64 %1833, -8
  %1835 = inttoptr i64 %1834 to i64*
  store i64 %1829, i64* %1835
  store i64 %1834, i64* %1832, align 8, !tbaa !2428
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1827, i64* %1836, align 8, !tbaa !2428
  %1837 = load i64, i64* %PC
  %1838 = call %struct.Memory* @ext_605128_memcpy(%struct.State* %0, i64 %1837, %struct.Memory* %MEMORY.0)
  %1839 = load i64, i64* %RBP
  %1840 = sub i64 %1839, 40
  %1841 = load i64, i64* %PC
  %1842 = add i64 %1841, 4
  store i64 %1842, i64* %PC
  %1843 = inttoptr i64 %1840 to i64*
  %1844 = load i64, i64* %1843
  store i64 %1844, i64* %RDX, align 8, !tbaa !2428
  %1845 = load i64, i64* %RBP
  %1846 = sub i64 %1845, 24
  %1847 = load i64, i64* %PC
  %1848 = add i64 %1847, 4
  store i64 %1848, i64* %PC
  %1849 = inttoptr i64 %1846 to i64*
  %1850 = load i64, i64* %1849
  store i64 %1850, i64* %RCX, align 8, !tbaa !2428
  %1851 = load i64, i64* %RBP
  %1852 = sub i64 %1851, 56
  %1853 = load i64, i64* %PC
  %1854 = add i64 %1853, 4
  store i64 %1854, i64* %PC
  %1855 = inttoptr i64 %1852 to i64*
  %1856 = load i64, i64* %1855
  store i64 %1856, i64* %R8, align 8, !tbaa !2428
  %1857 = load i64, i64* %RBP
  %1858 = sub i64 %1857, 176
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 6
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1858 to i32*
  %1862 = load i32, i32* %1861
  %1863 = zext i32 %1862 to i64
  store i64 %1863, i64* %RDI, align 8, !tbaa !2428
  %1864 = load i64, i64* %RBP
  %1865 = sub i64 %1864, 180
  %1866 = load i64, i64* %PC
  %1867 = add i64 %1866, 6
  store i64 %1867, i64* %PC
  %1868 = inttoptr i64 %1865 to i32*
  %1869 = load i32, i32* %1868
  %1870 = zext i32 %1869 to i64
  store i64 %1870, i64* %RSI, align 8, !tbaa !2428
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 1253
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 5
  %1875 = load i64, i64* %PC
  %1876 = add i64 %1875, 5
  store i64 %1876, i64* %PC
  %1877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1878 = load i64, i64* %1877, align 8, !tbaa !2428
  %1879 = add i64 %1878, -8
  %1880 = inttoptr i64 %1879 to i64*
  store i64 %1874, i64* %1880
  store i64 %1879, i64* %1877, align 8, !tbaa !2428
  %1881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1872, i64* %1881, align 8, !tbaa !2428
  %1882 = load i64, i64* %PC
  %1883 = call %struct.Memory* @sub_401060_cdft_renamed_(%struct.State* %0, i64 %1882, %struct.Memory* %1838)
  %1884 = load i64, i64* %RBP
  %1885 = sub i64 %1884, 100
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 7
  store i64 %1887, i64* %PC
  %1888 = inttoptr i64 %1885 to i32*
  store i32 0, i32* %1888
  br label %block_400b87

block_400cc4:                                     ; preds = %block_400cb7
  %1889 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 8
  store i64 %1891, i64* %PC
  %1892 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 48) to double*)
  %1893 = bitcast i8* %1889 to double*
  store double %1892, double* %1893, align 1, !tbaa !2452
  %1894 = getelementptr inbounds i8, i8* %1889, i64 8
  %1895 = bitcast i8* %1894 to double*
  store double 0.000000e+00, double* %1895, align 1, !tbaa !2452
  %1896 = load i64, i64* %RBP
  %1897 = sub i64 %1896, 40
  %1898 = load i64, i64* %PC
  %1899 = add i64 %1898, 4
  store i64 %1899, i64* %PC
  %1900 = inttoptr i64 %1897 to i64*
  %1901 = load i64, i64* %1900
  store i64 %1901, i64* %RAX, align 8, !tbaa !2428
  %1902 = load i64, i64* %RBP
  %1903 = sub i64 %1902, 12
  %1904 = load i64, i64* %PC
  %1905 = add i64 %1904, 3
  store i64 %1905, i64* %PC
  %1906 = inttoptr i64 %1903 to i32*
  %1907 = load i32, i32* %1906
  %1908 = zext i32 %1907 to i64
  store i64 %1908, i64* %RCX, align 8, !tbaa !2428
  %1909 = load i64, i64* %RCX
  %1910 = load i64, i64* %PC
  %1911 = add i64 %1910, 3
  store i64 %1911, i64* %PC
  %1912 = trunc i64 %1909 to i32
  %1913 = shl i32 %1912, 1
  %1914 = icmp slt i32 %1912, 0
  %1915 = icmp slt i32 %1913, 0
  %1916 = xor i1 %1914, %1915
  %1917 = zext i32 %1913 to i64
  store i64 %1917, i64* %RCX, align 8, !tbaa !2428
  %1918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1919 = zext i1 %1914 to i8
  store i8 %1919, i8* %1918, align 1, !tbaa !2451
  %1920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1921 = and i32 %1913, 254
  %1922 = call i32 @llvm.ctpop.i32(i32 %1921) #17
  %1923 = trunc i32 %1922 to i8
  %1924 = and i8 %1923, 1
  %1925 = xor i8 %1924, 1
  store i8 %1925, i8* %1920, align 1, !tbaa !2451
  %1926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1926, align 1, !tbaa !2451
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1928 = icmp eq i32 %1913, 0
  %1929 = zext i1 %1928 to i8
  store i8 %1929, i8* %1927, align 1, !tbaa !2451
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1931 = lshr i32 %1913, 31
  %1932 = trunc i32 %1931 to i8
  store i8 %1932, i8* %1930, align 1, !tbaa !2451
  %1933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1934 = zext i1 %1916 to i8
  store i8 %1934, i8* %1933, align 1, !tbaa !2451
  %1935 = load i32, i32* %ECX
  %1936 = zext i32 %1935 to i64
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 3
  store i64 %1938, i64* %PC
  %1939 = shl i64 %1936, 32
  %1940 = ashr exact i64 %1939, 32
  store i64 %1940, i64* %RDX, align 8, !tbaa !2428
  %1941 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1942 = load i64, i64* %RAX
  %1943 = load i64, i64* %RDX
  %1944 = mul i64 %1943, 8
  %1945 = add i64 %1944, %1942
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 5
  store i64 %1947, i64* %PC
  %1948 = inttoptr i64 %1945 to double*
  %1949 = load double, double* %1948
  %1950 = bitcast i8* %1941 to double*
  store double %1949, double* %1950, align 1, !tbaa !2452
  %1951 = getelementptr inbounds i8, i8* %1941, i64 8
  %1952 = bitcast i8* %1951 to double*
  store double 0.000000e+00, double* %1952, align 1, !tbaa !2452
  %1953 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 7
  store i64 %1955, i64* %PC
  %1956 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 96) to float*)
  %1957 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 100) to float*)
  %1958 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 104) to float*)
  %1959 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 108) to float*)
  %1960 = bitcast i8* %1953 to float*
  store float %1956, float* %1960, align 1, !tbaa !2479
  %1961 = getelementptr inbounds i8, i8* %1953, i64 4
  %1962 = bitcast i8* %1961 to float*
  store float %1957, float* %1962, align 1, !tbaa !2479
  %1963 = getelementptr inbounds i8, i8* %1953, i64 8
  %1964 = bitcast i8* %1963 to float*
  store float %1958, float* %1964, align 1, !tbaa !2479
  %1965 = getelementptr inbounds i8, i8* %1953, i64 12
  %1966 = bitcast i8* %1965 to float*
  store float %1959, float* %1966, align 1, !tbaa !2479
  %1967 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1968 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1969 = bitcast %union.vec128_t* %XMM2 to i8*
  %1970 = load i64, i64* %PC
  %1971 = add i64 %1970, 4
  store i64 %1971, i64* %PC
  %1972 = bitcast i8* %1968 to i64*
  %1973 = load i64, i64* %1972, align 1
  %1974 = getelementptr inbounds i8, i8* %1968, i64 8
  %1975 = bitcast i8* %1974 to i64*
  %1976 = load i64, i64* %1975, align 1
  %1977 = bitcast i8* %1969 to i64*
  %1978 = load i64, i64* %1977, align 1
  %1979 = getelementptr inbounds i8, i8* %1969, i64 8
  %1980 = bitcast i8* %1979 to i64*
  %1981 = load i64, i64* %1980, align 1
  %1982 = and i64 %1978, %1973
  %1983 = and i64 %1981, %1976
  %1984 = trunc i64 %1982 to i32
  %1985 = lshr i64 %1982, 32
  %1986 = trunc i64 %1985 to i32
  %1987 = bitcast i8* %1967 to i32*
  store i32 %1984, i32* %1987, align 1, !tbaa !2454
  %1988 = getelementptr inbounds i8, i8* %1967, i64 4
  %1989 = bitcast i8* %1988 to i32*
  store i32 %1986, i32* %1989, align 1, !tbaa !2454
  %1990 = trunc i64 %1983 to i32
  %1991 = getelementptr inbounds i8, i8* %1967, i64 8
  %1992 = bitcast i8* %1991 to i32*
  store i32 %1990, i32* %1992, align 1, !tbaa !2454
  %1993 = lshr i64 %1983, 32
  %1994 = trunc i64 %1993 to i32
  %1995 = getelementptr inbounds i8, i8* %1967, i64 12
  %1996 = bitcast i8* %1995 to i32*
  store i32 %1994, i32* %1996, align 1, !tbaa !2454
  %1997 = bitcast %union.vec128_t* %XMM1 to i8*
  %1998 = bitcast %union.vec128_t* %XMM0 to i8*
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 4
  store i64 %2000, i64* %PC
  %2001 = bitcast i8* %1997 to double*
  %2002 = load double, double* %2001, align 1
  %2003 = bitcast i8* %1998 to double*
  %2004 = load double, double* %2003, align 1
  %2005 = fcmp uno double %2002, %2004
  br i1 %2005, label %2006, label %2018

; <label>:2006:                                   ; preds = %block_400cc4
  %2007 = fadd double %2002, %2004
  %2008 = bitcast double %2007 to i64
  %2009 = and i64 %2008, 9221120237041090560
  %2010 = icmp eq i64 %2009, 9218868437227405312
  %2011 = and i64 %2008, 2251799813685247
  %2012 = icmp ne i64 %2011, 0
  %2013 = and i1 %2010, %2012
  br i1 %2013, label %2014, label %2024

; <label>:2014:                                   ; preds = %2006
  %2015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2016 = load i64, i64* %2015, align 8, !tbaa !2428
  %2017 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2016, %struct.Memory* %MEMORY.5) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2018:                                   ; preds = %block_400cc4
  %2019 = fcmp ogt double %2002, %2004
  br i1 %2019, label %2024, label %2020

; <label>:2020:                                   ; preds = %2018
  %2021 = fcmp olt double %2002, %2004
  br i1 %2021, label %2024, label %2022

; <label>:2022:                                   ; preds = %2020
  %2023 = fcmp oeq double %2002, %2004
  br i1 %2023, label %2024, label %2031

; <label>:2024:                                   ; preds = %2022, %2020, %2018, %2006
  %2025 = phi i8 [ 0, %2018 ], [ 0, %2020 ], [ 1, %2022 ], [ 1, %2006 ]
  %2026 = phi i8 [ 0, %2018 ], [ 0, %2020 ], [ 0, %2022 ], [ 1, %2006 ]
  %2027 = phi i8 [ 0, %2018 ], [ 1, %2020 ], [ 0, %2022 ], [ 1, %2006 ]
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2025, i8* %2028, align 1, !tbaa !2451
  %2029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2026, i8* %2029, align 1, !tbaa !2451
  %2030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2027, i8* %2030, align 1, !tbaa !2451
  br label %2031

; <label>:2031:                                   ; preds = %2024, %2022
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2032, align 1, !tbaa !2451
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2033, align 1, !tbaa !2451
  %2034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2034, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2014, %2031
  %2035 = phi %struct.Memory* [ %2017, %2014 ], [ %MEMORY.5, %2031 ]
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 37
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 6
  %2040 = load i64, i64* %PC
  %2041 = add i64 %2040, 6
  store i64 %2041, i64* %PC
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2043 = load i8, i8* %2042, align 1, !tbaa !2432
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2045 = load i8, i8* %2044, align 1, !tbaa !2448
  %2046 = or i8 %2045, %2043
  %2047 = icmp ne i8 %2046, 0
  %2048 = zext i1 %2047 to i8
  store i8 %2048, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2050 = select i1 %2047, i64 %2037, i64 %2039
  store i64 %2050, i64* %2049, align 8, !tbaa !2428
  %2051 = load i8, i8* %BRANCH_TAKEN
  %2052 = icmp eq i8 %2051, 1
  br i1 %2052, label %block_400d12, label %block_400cf3

block_400b26:                                     ; preds = %block_400adb, %block_400c64
  %MEMORY.0 = phi %struct.Memory* [ %2275, %block_400adb ], [ %1440, %block_400c64 ]
  %2053 = load i64, i64* %RBP
  %2054 = sub i64 %2053, 8
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 7
  store i64 %2056, i64* %PC
  %2057 = inttoptr i64 %2054 to i32*
  %2058 = load i32, i32* %2057
  %2059 = sub i32 %2058, 150000
  %2060 = icmp ult i32 %2058, 150000
  %2061 = zext i1 %2060 to i8
  %2062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2061, i8* %2062, align 1, !tbaa !2432
  %2063 = and i32 %2059, 255
  %2064 = call i32 @llvm.ctpop.i32(i32 %2063) #17
  %2065 = trunc i32 %2064 to i8
  %2066 = and i8 %2065, 1
  %2067 = xor i8 %2066, 1
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2067, i8* %2068, align 1, !tbaa !2446
  %2069 = xor i32 %2058, 150000
  %2070 = xor i32 %2069, %2059
  %2071 = lshr i32 %2070, 4
  %2072 = trunc i32 %2071 to i8
  %2073 = and i8 %2072, 1
  %2074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2073, i8* %2074, align 1, !tbaa !2447
  %2075 = icmp eq i32 %2059, 0
  %2076 = zext i1 %2075 to i8
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2076, i8* %2077, align 1, !tbaa !2448
  %2078 = lshr i32 %2059, 31
  %2079 = trunc i32 %2078 to i8
  %2080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2079, i8* %2080, align 1, !tbaa !2449
  %2081 = lshr i32 %2058, 31
  %2082 = xor i32 %2078, %2081
  %2083 = add nuw nsw i32 %2082, %2081
  %2084 = icmp eq i32 %2083, 2
  %2085 = zext i1 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2085, i8* %2086, align 1, !tbaa !2450
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 352
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 6
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 6
  store i64 %2092, i64* %PC
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2094 = load i8, i8* %2093, align 1, !tbaa !2449
  %2095 = icmp ne i8 %2094, 0
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2097 = load i8, i8* %2096, align 1, !tbaa !2450
  %2098 = icmp ne i8 %2097, 0
  %2099 = xor i1 %2095, %2098
  %2100 = xor i1 %2099, true
  %2101 = zext i1 %2100 to i8
  store i8 %2101, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2103 = select i1 %2099, i64 %2090, i64 %2088
  store i64 %2103, i64* %2102, align 8, !tbaa !2428
  %2104 = load i8, i8* %BRANCH_TAKEN
  %2105 = icmp eq i8 %2104, 1
  %2106 = load i64, i64* %PC
  br i1 %2105, label %block_400c8d, label %block_400b33

block_400a7f:                                     ; preds = %block_400a8c, %block_400a23
  %MEMORY.1 = phi %struct.Memory* [ %2426, %block_400a23 ], [ %MEMORY.1, %block_400a8c ]
  %2107 = load i64, i64* %RBP
  %2108 = sub i64 %2107, 12
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 7
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2108 to i32*
  %2112 = load i32, i32* %2111
  %2113 = sub i32 %2112, 1024
  %2114 = icmp ult i32 %2112, 1024
  %2115 = zext i1 %2114 to i8
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2115, i8* %2116, align 1, !tbaa !2432
  %2117 = and i32 %2113, 255
  %2118 = call i32 @llvm.ctpop.i32(i32 %2117) #17
  %2119 = trunc i32 %2118 to i8
  %2120 = and i8 %2119, 1
  %2121 = xor i8 %2120, 1
  %2122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2121, i8* %2122, align 1, !tbaa !2446
  %2123 = xor i32 %2112, 1024
  %2124 = xor i32 %2123, %2113
  %2125 = lshr i32 %2124, 4
  %2126 = trunc i32 %2125 to i8
  %2127 = and i8 %2126, 1
  %2128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2127, i8* %2128, align 1, !tbaa !2447
  %2129 = icmp eq i32 %2113, 0
  %2130 = zext i1 %2129 to i8
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2130, i8* %2131, align 1, !tbaa !2448
  %2132 = lshr i32 %2113, 31
  %2133 = trunc i32 %2132 to i8
  %2134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2133, i8* %2134, align 1, !tbaa !2449
  %2135 = lshr i32 %2112, 31
  %2136 = xor i32 %2132, %2135
  %2137 = add nuw nsw i32 %2136, %2135
  %2138 = icmp eq i32 %2137, 2
  %2139 = zext i1 %2138 to i8
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2139, i8* %2140, align 1, !tbaa !2450
  %2141 = load i64, i64* %PC
  %2142 = add i64 %2141, 85
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 6
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 6
  store i64 %2146, i64* %PC
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2148 = load i8, i8* %2147, align 1, !tbaa !2449
  %2149 = icmp ne i8 %2148, 0
  %2150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2151 = load i8, i8* %2150, align 1, !tbaa !2450
  %2152 = icmp ne i8 %2151, 0
  %2153 = xor i1 %2149, %2152
  %2154 = xor i1 %2153, true
  %2155 = zext i1 %2154 to i8
  store i8 %2155, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2157 = select i1 %2153, i64 %2144, i64 %2142
  store i64 %2157, i64* %2156, align 8, !tbaa !2428
  %2158 = load i8, i8* %BRANCH_TAKEN
  %2159 = icmp eq i8 %2158, 1
  br i1 %2159, label %block_400adb, label %block_400a8c

block_400adb:                                     ; preds = %block_400a7f
  %2160 = load i64, i64* %RAX
  %2161 = load i32, i32* %EAX
  %2162 = zext i32 %2161 to i64
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 2
  store i64 %2164, i64* %PC
  %2165 = xor i64 %2162, %2160
  %2166 = trunc i64 %2165 to i32
  %2167 = and i64 %2165, 4294967295
  store i64 %2167, i64* %RAX, align 8, !tbaa !2428
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2168, align 1, !tbaa !2432
  %2169 = and i32 %2166, 255
  %2170 = call i32 @llvm.ctpop.i32(i32 %2169) #17
  %2171 = trunc i32 %2170 to i8
  %2172 = and i8 %2171, 1
  %2173 = xor i8 %2172, 1
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2173, i8* %2174, align 1, !tbaa !2446
  %2175 = icmp eq i32 %2166, 0
  %2176 = zext i1 %2175 to i8
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2176, i8* %2177, align 1, !tbaa !2448
  %2178 = lshr i32 %2166, 31
  %2179 = trunc i32 %2178 to i8
  %2180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2179, i8* %2180, align 1, !tbaa !2449
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2181, align 1, !tbaa !2450
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2182, align 1, !tbaa !2447
  %2183 = load i64, i64* %PC
  %2184 = add i64 %2183, 5
  store i64 %2184, i64* %PC
  store i64 1023, i64* %RSI, align 8, !tbaa !2428
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 5
  store i64 %2186, i64* %PC
  store i64 16384, i64* %RCX, align 8, !tbaa !2428
  %2187 = load i32, i32* %ECX
  %2188 = zext i32 %2187 to i64
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 2
  store i64 %2190, i64* %PC
  %2191 = and i64 %2188, 4294967295
  store i64 %2191, i64* %RDX, align 8, !tbaa !2428
  %2192 = load i64, i64* %RBP
  %2193 = sub i64 %2192, 48
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 4
  store i64 %2195, i64* %PC
  %2196 = inttoptr i64 %2193 to i64*
  %2197 = load i64, i64* %2196
  store i64 %2197, i64* %RDI, align 8, !tbaa !2428
  %2198 = load i64, i64* %RBP
  %2199 = sub i64 %2198, 168
  %2200 = load i32, i32* %ESI
  %2201 = zext i32 %2200 to i64
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 6
  store i64 %2203, i64* %PC
  %2204 = inttoptr i64 %2199 to i32*
  store i32 %2200, i32* %2204
  %2205 = load i32, i32* %EAX
  %2206 = zext i32 %2205 to i64
  %2207 = load i64, i64* %PC
  %2208 = add i64 %2207, 2
  store i64 %2208, i64* %PC
  %2209 = and i64 %2206, 4294967295
  store i64 %2209, i64* %RSI, align 8, !tbaa !2428
  %2210 = load i64, i64* %RBP
  %2211 = sub i64 %2210, 172
  %2212 = load i32, i32* %EAX
  %2213 = zext i32 %2212 to i64
  %2214 = load i64, i64* %PC
  %2215 = add i64 %2214, 6
  store i64 %2215, i64* %PC
  %2216 = inttoptr i64 %2211 to i32*
  store i32 %2212, i32* %2216
  %2217 = load i64, i64* %PC
  %2218 = sub i64 %2217, 1019
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 5
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 5
  store i64 %2222, i64* %PC
  %2223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2224 = load i64, i64* %2223, align 8, !tbaa !2428
  %2225 = add i64 %2224, -8
  %2226 = inttoptr i64 %2225 to i64*
  store i64 %2220, i64* %2226
  store i64 %2225, i64* %2223, align 8, !tbaa !2428
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2218, i64* %2227, align 8, !tbaa !2428
  %2228 = load i64, i64* %PC
  %2229 = call %struct.Memory* @ext_605110_memset(%struct.State* %0, i64 %2228, %struct.Memory* %MEMORY.1)
  %2230 = load i64, i64* %RBP
  %2231 = sub i64 %2230, 48
  %2232 = load i64, i64* %PC
  %2233 = add i64 %2232, 4
  store i64 %2233, i64* %PC
  %2234 = inttoptr i64 %2231 to i64*
  %2235 = load i64, i64* %2234
  store i64 %2235, i64* %RDX, align 8, !tbaa !2428
  %2236 = load i64, i64* %RBP
  %2237 = sub i64 %2236, 172
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 6
  store i64 %2239, i64* %PC
  %2240 = inttoptr i64 %2237 to i32*
  %2241 = load i32, i32* %2240
  %2242 = zext i32 %2241 to i64
  store i64 %2242, i64* %RDI, align 8, !tbaa !2428
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 168
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 6
  store i64 %2246, i64* %PC
  %2247 = inttoptr i64 %2244 to i32*
  %2248 = load i32, i32* %2247
  %2249 = zext i32 %2248 to i64
  store i64 %2249, i64* %RSI, align 8, !tbaa !2428
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 1232
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 5
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 5
  store i64 %2255, i64* %PC
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2257 = load i64, i64* %2256, align 8, !tbaa !2428
  %2258 = add i64 %2257, -8
  %2259 = inttoptr i64 %2258 to i64*
  store i64 %2253, i64* %2259
  store i64 %2258, i64* %2256, align 8, !tbaa !2428
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2251, i64* %2260, align 8, !tbaa !2428
  %2261 = load i64, i64* %PC
  %2262 = call %struct.Memory* @sub_400fe0_putdata_renamed_(%struct.State* %0, i64 %2261, %struct.Memory* %2229)
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 795
  %2265 = load i64, i64* %PC
  %2266 = add i64 %2265, 5
  %2267 = load i64, i64* %PC
  %2268 = add i64 %2267, 5
  store i64 %2268, i64* %PC
  %2269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2270 = load i64, i64* %2269, align 8, !tbaa !2428
  %2271 = add i64 %2270, -8
  %2272 = inttoptr i64 %2271 to i64*
  store i64 %2266, i64* %2272
  store i64 %2271, i64* %2269, align 8, !tbaa !2428
  %2273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2264, i64* %2273, align 8, !tbaa !2428
  %2274 = load i64, i64* %PC
  %2275 = call %struct.Memory* @sub_400e30_get_time_renamed_(%struct.State* %0, i64 %2274, %struct.Memory* %2262)
  %2276 = load i64, i64* %RBP
  %2277 = sub i64 %2276, 64
  %2278 = bitcast %union.vec128_t* %XMM0 to i8*
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 5
  store i64 %2280, i64* %PC
  %2281 = bitcast i8* %2278 to double*
  %2282 = load double, double* %2281, align 1
  %2283 = inttoptr i64 %2277 to double*
  store double %2282, double* %2283
  %2284 = load i64, i64* %RBP
  %2285 = sub i64 %2284, 8
  %2286 = load i64, i64* %PC
  %2287 = add i64 %2286, 7
  store i64 %2287, i64* %PC
  %2288 = inttoptr i64 %2285 to i32*
  store i32 0, i32* %2288
  br label %block_400b26

block_400a23:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %2289 = load i64, i64* %RAX
  %2290 = load i32, i32* %EAX
  %2291 = zext i32 %2290 to i64
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 2
  store i64 %2293, i64* %PC
  %2294 = xor i64 %2291, %2289
  %2295 = trunc i64 %2294 to i32
  %2296 = and i64 %2294, 4294967295
  store i64 %2296, i64* %RAX, align 8, !tbaa !2428
  %2297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2297, align 1, !tbaa !2432
  %2298 = and i32 %2295, 255
  %2299 = call i32 @llvm.ctpop.i32(i32 %2298) #17
  %2300 = trunc i32 %2299 to i8
  %2301 = and i8 %2300, 1
  %2302 = xor i8 %2301, 1
  %2303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2302, i8* %2303, align 1, !tbaa !2446
  %2304 = icmp eq i32 %2295, 0
  %2305 = zext i1 %2304 to i8
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2305, i8* %2306, align 1, !tbaa !2448
  %2307 = lshr i32 %2295, 31
  %2308 = trunc i32 %2307 to i8
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2308, i8* %2309, align 1, !tbaa !2449
  %2310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2310, align 1, !tbaa !2450
  %2311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2311, align 1, !tbaa !2447
  %2312 = load i64, i64* %PC
  %2313 = add i64 %2312, 5
  store i64 %2313, i64* %PC
  store i64 1023, i64* %RSI, align 8, !tbaa !2428
  %2314 = load i64, i64* %PC
  %2315 = add i64 %2314, 5
  store i64 %2315, i64* %PC
  store i64 16384, i64* %RCX, align 8, !tbaa !2428
  %2316 = load i32, i32* %ECX
  %2317 = zext i32 %2316 to i64
  %2318 = load i64, i64* %PC
  %2319 = add i64 %2318, 2
  store i64 %2319, i64* %PC
  %2320 = and i64 %2317, 4294967295
  store i64 %2320, i64* %RDX, align 8, !tbaa !2428
  %2321 = load i64, i64* %RBP
  %2322 = sub i64 %2321, 32
  %2323 = load i64, i64* %PC
  %2324 = add i64 %2323, 4
  store i64 %2324, i64* %PC
  %2325 = inttoptr i64 %2322 to i64*
  %2326 = load i64, i64* %2325
  store i64 %2326, i64* %RDI, align 8, !tbaa !2428
  %2327 = load i64, i64* %RBP
  %2328 = sub i64 %2327, 160
  %2329 = load i32, i32* %ESI
  %2330 = zext i32 %2329 to i64
  %2331 = load i64, i64* %PC
  %2332 = add i64 %2331, 6
  store i64 %2332, i64* %PC
  %2333 = inttoptr i64 %2328 to i32*
  store i32 %2329, i32* %2333
  %2334 = load i32, i32* %EAX
  %2335 = zext i32 %2334 to i64
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 2
  store i64 %2337, i64* %PC
  %2338 = and i64 %2335, 4294967295
  store i64 %2338, i64* %RSI, align 8, !tbaa !2428
  %2339 = load i64, i64* %RBP
  %2340 = sub i64 %2339, 164
  %2341 = load i32, i32* %EAX
  %2342 = zext i32 %2341 to i64
  %2343 = load i64, i64* %PC
  %2344 = add i64 %2343, 6
  store i64 %2344, i64* %PC
  %2345 = inttoptr i64 %2340 to i32*
  store i32 %2341, i32* %2345
  %2346 = load i64, i64* %PC
  %2347 = sub i64 %2346, 835
  %2348 = load i64, i64* %PC
  %2349 = add i64 %2348, 5
  %2350 = load i64, i64* %PC
  %2351 = add i64 %2350, 5
  store i64 %2351, i64* %PC
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2353 = load i64, i64* %2352, align 8, !tbaa !2428
  %2354 = add i64 %2353, -8
  %2355 = inttoptr i64 %2354 to i64*
  store i64 %2349, i64* %2355
  store i64 %2354, i64* %2352, align 8, !tbaa !2428
  %2356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2347, i64* %2356, align 8, !tbaa !2428
  %2357 = load i64, i64* %PC
  %2358 = call %struct.Memory* @ext_605110_memset(%struct.State* %0, i64 %2357, %struct.Memory* %1318)
  %2359 = load i64, i64* %RBP
  %2360 = sub i64 %2359, 32
  %2361 = load i64, i64* %PC
  %2362 = add i64 %2361, 4
  store i64 %2362, i64* %PC
  %2363 = inttoptr i64 %2360 to i64*
  %2364 = load i64, i64* %2363
  store i64 %2364, i64* %RDX, align 8, !tbaa !2428
  %2365 = load i64, i64* %RBP
  %2366 = sub i64 %2365, 164
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 6
  store i64 %2368, i64* %PC
  %2369 = inttoptr i64 %2366 to i32*
  %2370 = load i32, i32* %2369
  %2371 = zext i32 %2370 to i64
  store i64 %2371, i64* %RDI, align 8, !tbaa !2428
  %2372 = load i64, i64* %RBP
  %2373 = sub i64 %2372, 160
  %2374 = load i64, i64* %PC
  %2375 = add i64 %2374, 6
  store i64 %2375, i64* %PC
  %2376 = inttoptr i64 %2373 to i32*
  %2377 = load i32, i32* %2376
  %2378 = zext i32 %2377 to i64
  store i64 %2378, i64* %RSI, align 8, !tbaa !2428
  %2379 = load i64, i64* %PC
  %2380 = add i64 %2379, 1416
  %2381 = load i64, i64* %PC
  %2382 = add i64 %2381, 5
  %2383 = load i64, i64* %PC
  %2384 = add i64 %2383, 5
  store i64 %2384, i64* %PC
  %2385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2386 = load i64, i64* %2385, align 8, !tbaa !2428
  %2387 = add i64 %2386, -8
  %2388 = inttoptr i64 %2387 to i64*
  store i64 %2382, i64* %2388
  store i64 %2387, i64* %2385, align 8, !tbaa !2428
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2380, i64* %2389, align 8, !tbaa !2428
  %2390 = load i64, i64* %PC
  %2391 = call %struct.Memory* @sub_400fe0_putdata_renamed_(%struct.State* %0, i64 %2390, %struct.Memory* %2358)
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 5
  store i64 %2393, i64* %PC
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 5
  store i64 %2395, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %2396 = load i64, i64* %RBP
  %2397 = sub i64 %2396, 32
  %2398 = load i64, i64* %PC
  %2399 = add i64 %2398, 4
  store i64 %2399, i64* %PC
  %2400 = inttoptr i64 %2397 to i64*
  %2401 = load i64, i64* %2400
  store i64 %2401, i64* %RDX, align 8, !tbaa !2428
  %2402 = load i64, i64* %RBP
  %2403 = sub i64 %2402, 24
  %2404 = load i64, i64* %PC
  %2405 = add i64 %2404, 4
  store i64 %2405, i64* %PC
  %2406 = inttoptr i64 %2403 to i64*
  %2407 = load i64, i64* %2406
  store i64 %2407, i64* %RCX, align 8, !tbaa !2428
  %2408 = load i64, i64* %RBP
  %2409 = sub i64 %2408, 56
  %2410 = load i64, i64* %PC
  %2411 = add i64 %2410, 4
  store i64 %2411, i64* %PC
  %2412 = inttoptr i64 %2409 to i64*
  %2413 = load i64, i64* %2412
  store i64 %2413, i64* %R8, align 8, !tbaa !2428
  %2414 = load i64, i64* %PC
  %2415 = add i64 %2414, 1517
  %2416 = load i64, i64* %PC
  %2417 = add i64 %2416, 5
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 5
  store i64 %2419, i64* %PC
  %2420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2421 = load i64, i64* %2420, align 8, !tbaa !2428
  %2422 = add i64 %2421, -8
  %2423 = inttoptr i64 %2422 to i64*
  store i64 %2417, i64* %2423
  store i64 %2422, i64* %2420, align 8, !tbaa !2428
  %2424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2415, i64* %2424, align 8, !tbaa !2428
  %2425 = load i64, i64* %PC
  %2426 = call %struct.Memory* @sub_401060_cdft_renamed_(%struct.State* %0, i64 %2425, %struct.Memory* %2391)
  %2427 = load i64, i64* %RBP
  %2428 = sub i64 %2427, 12
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 7
  store i64 %2430, i64* %PC
  %2431 = inttoptr i64 %2428 to i32*
  store i32 0, i32* %2431
  br label %block_400a7f

block_400d22:                                     ; preds = %block_400d12, %block_400cf3
  %MEMORY.2 = phi %struct.Memory* [ %2035, %block_400d12 ], [ %2035, %block_400cf3 ]
  %2432 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2433 = load i64, i64* %RBP
  %2434 = sub i64 %2433, 192
  %2435 = load i64, i64* %PC
  %2436 = add i64 %2435, 8
  store i64 %2436, i64* %PC
  %2437 = inttoptr i64 %2434 to double*
  %2438 = load double, double* %2437
  %2439 = bitcast i8* %2432 to double*
  store double %2438, double* %2439, align 1, !tbaa !2452
  %2440 = getelementptr inbounds i8, i8* %2432, i64 8
  %2441 = bitcast i8* %2440 to double*
  store double 0.000000e+00, double* %2441, align 1, !tbaa !2452
  %2442 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2443 = load i64, i64* %PC
  %2444 = add i64 %2443, 8
  store i64 %2444, i64* %PC
  %2445 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 48) to double*)
  %2446 = bitcast i8* %2442 to double*
  store double %2445, double* %2446, align 1, !tbaa !2452
  %2447 = getelementptr inbounds i8, i8* %2442, i64 8
  %2448 = bitcast i8* %2447 to double*
  store double 0.000000e+00, double* %2448, align 1, !tbaa !2452
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 40
  %2451 = load i64, i64* %PC
  %2452 = add i64 %2451, 4
  store i64 %2452, i64* %PC
  %2453 = inttoptr i64 %2450 to i64*
  %2454 = load i64, i64* %2453
  store i64 %2454, i64* %RAX, align 8, !tbaa !2428
  %2455 = load i64, i64* %RBP
  %2456 = sub i64 %2455, 12
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 3
  store i64 %2458, i64* %PC
  %2459 = inttoptr i64 %2456 to i32*
  %2460 = load i32, i32* %2459
  %2461 = zext i32 %2460 to i64
  store i64 %2461, i64* %RCX, align 8, !tbaa !2428
  %2462 = load i64, i64* %RCX
  %2463 = load i64, i64* %PC
  %2464 = add i64 %2463, 3
  store i64 %2464, i64* %PC
  %2465 = trunc i64 %2462 to i32
  %2466 = shl i32 %2465, 1
  %2467 = icmp slt i32 %2465, 0
  %2468 = icmp slt i32 %2466, 0
  %2469 = xor i1 %2467, %2468
  %2470 = zext i32 %2466 to i64
  store i64 %2470, i64* %RCX, align 8, !tbaa !2428
  %2471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2472 = zext i1 %2467 to i8
  store i8 %2472, i8* %2471, align 1, !tbaa !2451
  %2473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2474 = and i32 %2466, 254
  %2475 = call i32 @llvm.ctpop.i32(i32 %2474) #17
  %2476 = trunc i32 %2475 to i8
  %2477 = and i8 %2476, 1
  %2478 = xor i8 %2477, 1
  store i8 %2478, i8* %2473, align 1, !tbaa !2451
  %2479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2479, align 1, !tbaa !2451
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2481 = icmp eq i32 %2466, 0
  %2482 = zext i1 %2481 to i8
  store i8 %2482, i8* %2480, align 1, !tbaa !2451
  %2483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2484 = lshr i32 %2466, 31
  %2485 = trunc i32 %2484 to i8
  store i8 %2485, i8* %2483, align 1, !tbaa !2451
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2487 = zext i1 %2469 to i8
  store i8 %2487, i8* %2486, align 1, !tbaa !2451
  %2488 = load i64, i64* %RCX
  %2489 = load i64, i64* %PC
  %2490 = add i64 %2489, 3
  store i64 %2490, i64* %PC
  %2491 = trunc i64 %2488 to i32
  %2492 = add i32 1, %2491
  %2493 = zext i32 %2492 to i64
  store i64 %2493, i64* %RCX, align 8, !tbaa !2428
  %2494 = icmp ult i32 %2492, %2491
  %2495 = icmp ult i32 %2492, 1
  %2496 = or i1 %2494, %2495
  %2497 = zext i1 %2496 to i8
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2497, i8* %2498, align 1, !tbaa !2432
  %2499 = and i32 %2492, 255
  %2500 = call i32 @llvm.ctpop.i32(i32 %2499) #17
  %2501 = trunc i32 %2500 to i8
  %2502 = and i8 %2501, 1
  %2503 = xor i8 %2502, 1
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2503, i8* %2504, align 1, !tbaa !2446
  %2505 = xor i64 1, %2488
  %2506 = trunc i64 %2505 to i32
  %2507 = xor i32 %2506, %2492
  %2508 = lshr i32 %2507, 4
  %2509 = trunc i32 %2508 to i8
  %2510 = and i8 %2509, 1
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2510, i8* %2511, align 1, !tbaa !2447
  %2512 = icmp eq i32 %2492, 0
  %2513 = zext i1 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2513, i8* %2514, align 1, !tbaa !2448
  %2515 = lshr i32 %2492, 31
  %2516 = trunc i32 %2515 to i8
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2516, i8* %2517, align 1, !tbaa !2449
  %2518 = lshr i32 %2491, 31
  %2519 = xor i32 %2515, %2518
  %2520 = add nuw nsw i32 %2519, %2515
  %2521 = icmp eq i32 %2520, 2
  %2522 = zext i1 %2521 to i8
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2522, i8* %2523, align 1, !tbaa !2450
  %2524 = load i32, i32* %ECX
  %2525 = zext i32 %2524 to i64
  %2526 = load i64, i64* %PC
  %2527 = add i64 %2526, 3
  store i64 %2527, i64* %PC
  %2528 = shl i64 %2525, 32
  %2529 = ashr exact i64 %2528, 32
  store i64 %2529, i64* %RDX, align 8, !tbaa !2428
  %2530 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2531 = load i64, i64* %RAX
  %2532 = load i64, i64* %RDX
  %2533 = mul i64 %2532, 8
  %2534 = add i64 %2533, %2531
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 5
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2534 to double*
  %2538 = load double, double* %2537
  %2539 = bitcast i8* %2530 to double*
  store double %2538, double* %2539, align 1, !tbaa !2452
  %2540 = getelementptr inbounds i8, i8* %2530, i64 8
  %2541 = bitcast i8* %2540 to double*
  store double 0.000000e+00, double* %2541, align 1, !tbaa !2452
  %2542 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 7
  store i64 %2544, i64* %PC
  %2545 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 96) to float*)
  %2546 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 100) to float*)
  %2547 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 104) to float*)
  %2548 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 108) to float*)
  %2549 = bitcast i8* %2542 to float*
  store float %2545, float* %2549, align 1, !tbaa !2479
  %2550 = getelementptr inbounds i8, i8* %2542, i64 4
  %2551 = bitcast i8* %2550 to float*
  store float %2546, float* %2551, align 1, !tbaa !2479
  %2552 = getelementptr inbounds i8, i8* %2542, i64 8
  %2553 = bitcast i8* %2552 to float*
  store float %2547, float* %2553, align 1, !tbaa !2479
  %2554 = getelementptr inbounds i8, i8* %2542, i64 12
  %2555 = bitcast i8* %2554 to float*
  store float %2548, float* %2555, align 1, !tbaa !2479
  %2556 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2557 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2558 = bitcast %union.vec128_t* %XMM3 to i8*
  %2559 = load i64, i64* %PC
  %2560 = add i64 %2559, 4
  store i64 %2560, i64* %PC
  %2561 = bitcast i8* %2557 to i64*
  %2562 = load i64, i64* %2561, align 1
  %2563 = getelementptr inbounds i8, i8* %2557, i64 8
  %2564 = bitcast i8* %2563 to i64*
  %2565 = load i64, i64* %2564, align 1
  %2566 = bitcast i8* %2558 to i64*
  %2567 = load i64, i64* %2566, align 1
  %2568 = getelementptr inbounds i8, i8* %2558, i64 8
  %2569 = bitcast i8* %2568 to i64*
  %2570 = load i64, i64* %2569, align 1
  %2571 = and i64 %2567, %2562
  %2572 = and i64 %2570, %2565
  %2573 = trunc i64 %2571 to i32
  %2574 = lshr i64 %2571, 32
  %2575 = trunc i64 %2574 to i32
  %2576 = bitcast i8* %2556 to i32*
  store i32 %2573, i32* %2576, align 1, !tbaa !2454
  %2577 = getelementptr inbounds i8, i8* %2556, i64 4
  %2578 = bitcast i8* %2577 to i32*
  store i32 %2575, i32* %2578, align 1, !tbaa !2454
  %2579 = trunc i64 %2572 to i32
  %2580 = getelementptr inbounds i8, i8* %2556, i64 8
  %2581 = bitcast i8* %2580 to i32*
  store i32 %2579, i32* %2581, align 1, !tbaa !2454
  %2582 = lshr i64 %2572, 32
  %2583 = trunc i64 %2582 to i32
  %2584 = getelementptr inbounds i8, i8* %2556, i64 12
  %2585 = bitcast i8* %2584 to i32*
  store i32 %2583, i32* %2585, align 1, !tbaa !2454
  %2586 = bitcast %union.vec128_t* %XMM2 to i8*
  %2587 = bitcast %union.vec128_t* %XMM1 to i8*
  %2588 = load i64, i64* %PC
  %2589 = add i64 %2588, 4
  store i64 %2589, i64* %PC
  %2590 = bitcast i8* %2586 to double*
  %2591 = load double, double* %2590, align 1
  %2592 = bitcast i8* %2587 to double*
  %2593 = load double, double* %2592, align 1
  %2594 = fcmp uno double %2591, %2593
  br i1 %2594, label %2595, label %2607

; <label>:2595:                                   ; preds = %block_400d22
  %2596 = fadd double %2591, %2593
  %2597 = bitcast double %2596 to i64
  %2598 = and i64 %2597, 9221120237041090560
  %2599 = icmp eq i64 %2598, 9218868437227405312
  %2600 = and i64 %2597, 2251799813685247
  %2601 = icmp ne i64 %2600, 0
  %2602 = and i1 %2599, %2601
  br i1 %2602, label %2603, label %2613

; <label>:2603:                                   ; preds = %2595
  %2604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2605 = load i64, i64* %2604, align 8, !tbaa !2428
  %2606 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2605, %struct.Memory* %MEMORY.2) #18
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2607:                                   ; preds = %block_400d22
  %2608 = fcmp ogt double %2591, %2593
  br i1 %2608, label %2613, label %2609

; <label>:2609:                                   ; preds = %2607
  %2610 = fcmp olt double %2591, %2593
  br i1 %2610, label %2613, label %2611

; <label>:2611:                                   ; preds = %2609
  %2612 = fcmp oeq double %2591, %2593
  br i1 %2612, label %2613, label %2620

; <label>:2613:                                   ; preds = %2611, %2609, %2607, %2595
  %2614 = phi i8 [ 0, %2607 ], [ 0, %2609 ], [ 1, %2611 ], [ 1, %2595 ]
  %2615 = phi i8 [ 0, %2607 ], [ 0, %2609 ], [ 0, %2611 ], [ 1, %2595 ]
  %2616 = phi i8 [ 0, %2607 ], [ 1, %2609 ], [ 0, %2611 ], [ 1, %2595 ]
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2614, i8* %2617, align 1, !tbaa !2451
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2615, i8* %2618, align 1, !tbaa !2451
  %2619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2616, i8* %2619, align 1, !tbaa !2451
  br label %2620

; <label>:2620:                                   ; preds = %2613, %2611
  %2621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2621, align 1, !tbaa !2451
  %2622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2622, align 1, !tbaa !2451
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2623, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2603, %2620
  %2624 = phi %struct.Memory* [ %2606, %2603 ], [ %MEMORY.2, %2620 ]
  %2625 = load i64, i64* %RBP
  %2626 = sub i64 %2625, 200
  %2627 = bitcast %union.vec128_t* %XMM0 to i8*
  %2628 = load i64, i64* %PC
  %2629 = add i64 %2628, 8
  store i64 %2629, i64* %PC
  %2630 = bitcast i8* %2627 to double*
  %2631 = load double, double* %2630, align 1
  %2632 = inttoptr i64 %2626 to double*
  store double %2631, double* %2632
  %2633 = load i64, i64* %PC
  %2634 = add i64 %2633, 40
  %2635 = load i64, i64* %PC
  %2636 = add i64 %2635, 6
  %2637 = load i64, i64* %PC
  %2638 = add i64 %2637, 6
  store i64 %2638, i64* %PC
  %2639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2640 = load i8, i8* %2639, align 1, !tbaa !2432
  %2641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2642 = load i8, i8* %2641, align 1, !tbaa !2448
  %2643 = or i8 %2642, %2640
  %2644 = icmp ne i8 %2643, 0
  %2645 = zext i1 %2644 to i8
  store i8 %2645, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2647 = select i1 %2644, i64 %2634, i64 %2636
  store i64 %2647, i64* %2646, align 8, !tbaa !2428
  %2648 = load i8, i8* %BRANCH_TAKEN
  %2649 = icmp eq i8 %2648, 1
  br i1 %2649, label %block_400d86, label %block_400d64

block_400d96:                                     ; preds = %block_400d86, %block_400d64
  %MEMORY.3 = phi %struct.Memory* [ %2624, %block_400d86 ], [ %2624, %block_400d64 ]
  %2650 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2651 = load i64, i64* %RBP
  %2652 = sub i64 %2651, 208
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 8
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to double*
  %2656 = load double, double* %2655
  %2657 = bitcast i8* %2650 to double*
  store double %2656, double* %2657, align 1, !tbaa !2452
  %2658 = getelementptr inbounds i8, i8* %2650, i64 8
  %2659 = bitcast i8* %2658 to double*
  store double 0.000000e+00, double* %2659, align 1, !tbaa !2452
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 10
  store i64 %2661, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 157), i64* %RDI, align 8, !tbaa !2428
  %2662 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2663 = load i64, i64* %RBP
  %2664 = sub i64 %2663, 200
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 8
  store i64 %2666, i64* %PC
  %2667 = inttoptr i64 %2664 to double*
  %2668 = load double, double* %2667
  %2669 = bitcast i8* %2662 to double*
  store double %2668, double* %2669, align 1, !tbaa !2452
  %2670 = getelementptr inbounds i8, i8* %2662, i64 8
  %2671 = bitcast i8* %2670 to double*
  store double 0.000000e+00, double* %2671, align 1, !tbaa !2452
  %2672 = load i64, i64* %RBP
  %2673 = sub i64 %2672, 216
  %2674 = bitcast %union.vec128_t* %XMM0 to i8*
  %2675 = load i64, i64* %PC
  %2676 = add i64 %2675, 8
  store i64 %2676, i64* %PC
  %2677 = bitcast i8* %2674 to double*
  %2678 = load double, double* %2677, align 1
  %2679 = inttoptr i64 %2673 to double*
  store double %2678, double* %2679
  %2680 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2681 = bitcast %union.vec128_t* %XMM1 to i8*
  %2682 = load i64, i64* %PC
  %2683 = add i64 %2682, 3
  store i64 %2683, i64* %PC
  %2684 = bitcast i8* %2681 to <2 x i32>*
  %2685 = load <2 x i32>, <2 x i32>* %2684, align 1
  %2686 = getelementptr inbounds i8, i8* %2681, i64 8
  %2687 = bitcast i8* %2686 to <2 x i32>*
  %2688 = load <2 x i32>, <2 x i32>* %2687, align 1
  %2689 = extractelement <2 x i32> %2685, i32 0
  %2690 = bitcast i8* %2680 to i32*
  store i32 %2689, i32* %2690, align 1, !tbaa !2479
  %2691 = extractelement <2 x i32> %2685, i32 1
  %2692 = getelementptr inbounds i8, i8* %2680, i64 4
  %2693 = bitcast i8* %2692 to i32*
  store i32 %2691, i32* %2693, align 1, !tbaa !2479
  %2694 = extractelement <2 x i32> %2688, i32 0
  %2695 = getelementptr inbounds i8, i8* %2680, i64 8
  %2696 = bitcast i8* %2695 to i32*
  store i32 %2694, i32* %2696, align 1, !tbaa !2479
  %2697 = extractelement <2 x i32> %2688, i32 1
  %2698 = getelementptr inbounds i8, i8* %2680, i64 12
  %2699 = bitcast i8* %2698 to i32*
  store i32 %2697, i32* %2699, align 1, !tbaa !2479
  %2700 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2701 = load i64, i64* %RBP
  %2702 = sub i64 %2701, 216
  %2703 = load i64, i64* %PC
  %2704 = add i64 %2703, 8
  store i64 %2704, i64* %PC
  %2705 = inttoptr i64 %2702 to double*
  %2706 = load double, double* %2705
  %2707 = bitcast i8* %2700 to double*
  store double %2706, double* %2707, align 1, !tbaa !2452
  %2708 = getelementptr inbounds i8, i8* %2700, i64 8
  %2709 = bitcast i8* %2708 to double*
  store double 0.000000e+00, double* %2709, align 1, !tbaa !2452
  %2710 = load i64, i64* %PC
  %2711 = add i64 %2710, 2
  store i64 %2711, i64* %PC
  store i8 2, i8* %AL, align 1, !tbaa !2451
  %2712 = load i64, i64* %PC
  %2713 = sub i64 %2712, 1765
  %2714 = load i64, i64* %PC
  %2715 = add i64 %2714, 5
  %2716 = load i64, i64* %PC
  %2717 = add i64 %2716, 5
  store i64 %2717, i64* %PC
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2719 = load i64, i64* %2718, align 8, !tbaa !2428
  %2720 = add i64 %2719, -8
  %2721 = inttoptr i64 %2720 to i64*
  store i64 %2715, i64* %2721
  store i64 %2720, i64* %2718, align 8, !tbaa !2428
  %2722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2713, i64* %2722, align 8, !tbaa !2428
  %2723 = load i64, i64* %PC
  %2724 = call %struct.Memory* @ext_4006e0_printf(%struct.State* %0, i64 %2723, %struct.Memory* %MEMORY.3)
  %2725 = load i64, i64* %RBP
  %2726 = sub i64 %2725, 220
  %2727 = load i32, i32* %EAX
  %2728 = zext i32 %2727 to i64
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 6
  store i64 %2730, i64* %PC
  %2731 = inttoptr i64 %2726 to i32*
  store i32 %2727, i32* %2731
  %2732 = load i64, i64* %RBP
  %2733 = sub i64 %2732, 12
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 3
  store i64 %2735, i64* %PC
  %2736 = inttoptr i64 %2733 to i32*
  %2737 = load i32, i32* %2736
  %2738 = zext i32 %2737 to i64
  store i64 %2738, i64* %RAX, align 8, !tbaa !2428
  %2739 = load i64, i64* %RAX
  %2740 = load i64, i64* %PC
  %2741 = add i64 %2740, 3
  store i64 %2741, i64* %PC
  %2742 = trunc i64 %2739 to i32
  %2743 = add i32 1, %2742
  %2744 = zext i32 %2743 to i64
  store i64 %2744, i64* %RAX, align 8, !tbaa !2428
  %2745 = icmp ult i32 %2743, %2742
  %2746 = icmp ult i32 %2743, 1
  %2747 = or i1 %2745, %2746
  %2748 = zext i1 %2747 to i8
  %2749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2748, i8* %2749, align 1, !tbaa !2432
  %2750 = and i32 %2743, 255
  %2751 = call i32 @llvm.ctpop.i32(i32 %2750) #17
  %2752 = trunc i32 %2751 to i8
  %2753 = and i8 %2752, 1
  %2754 = xor i8 %2753, 1
  %2755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2754, i8* %2755, align 1, !tbaa !2446
  %2756 = xor i64 1, %2739
  %2757 = trunc i64 %2756 to i32
  %2758 = xor i32 %2757, %2743
  %2759 = lshr i32 %2758, 4
  %2760 = trunc i32 %2759 to i8
  %2761 = and i8 %2760, 1
  %2762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2761, i8* %2762, align 1, !tbaa !2447
  %2763 = icmp eq i32 %2743, 0
  %2764 = zext i1 %2763 to i8
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2764, i8* %2765, align 1, !tbaa !2448
  %2766 = lshr i32 %2743, 31
  %2767 = trunc i32 %2766 to i8
  %2768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2767, i8* %2768, align 1, !tbaa !2449
  %2769 = lshr i32 %2742, 31
  %2770 = xor i32 %2766, %2769
  %2771 = add nuw nsw i32 %2770, %2766
  %2772 = icmp eq i32 %2771, 2
  %2773 = zext i1 %2772 to i8
  %2774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2773, i8* %2774, align 1, !tbaa !2450
  %2775 = load i64, i64* %RBP
  %2776 = sub i64 %2775, 12
  %2777 = load i32, i32* %EAX
  %2778 = zext i32 %2777 to i64
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 3
  store i64 %2780, i64* %PC
  %2781 = inttoptr i64 %2776 to i32*
  store i32 %2777, i32* %2781
  %2782 = load i64, i64* %PC
  %2783 = sub i64 %2782, 290
  %2784 = load i64, i64* %PC
  %2785 = add i64 %2784, 5
  store i64 %2785, i64* %PC
  %2786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2783, i64* %2786, align 8, !tbaa !2428
  br label %block_400cb7

block_400b94:                                     ; preds = %block_400b87
  %2787 = load i64, i64* %RBP
  %2788 = sub i64 %2787, 40
  %2789 = load i64, i64* %PC
  %2790 = add i64 %2789, 4
  store i64 %2790, i64* %PC
  %2791 = inttoptr i64 %2788 to i64*
  %2792 = load i64, i64* %2791
  store i64 %2792, i64* %RAX, align 8, !tbaa !2428
  %2793 = load i64, i64* %RBP
  %2794 = sub i64 %2793, 100
  %2795 = load i64, i64* %PC
  %2796 = add i64 %2795, 3
  store i64 %2796, i64* %PC
  %2797 = inttoptr i64 %2794 to i32*
  %2798 = load i32, i32* %2797
  %2799 = zext i32 %2798 to i64
  store i64 %2799, i64* %RCX, align 8, !tbaa !2428
  %2800 = load i64, i64* %RCX
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 3
  store i64 %2802, i64* %PC
  %2803 = trunc i64 %2800 to i32
  %2804 = shl i32 %2803, 1
  %2805 = icmp slt i32 %2803, 0
  %2806 = icmp slt i32 %2804, 0
  %2807 = xor i1 %2805, %2806
  %2808 = zext i32 %2804 to i64
  store i64 %2808, i64* %RCX, align 8, !tbaa !2428
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2810 = zext i1 %2805 to i8
  store i8 %2810, i8* %2809, align 1, !tbaa !2451
  %2811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2812 = and i32 %2804, 254
  %2813 = call i32 @llvm.ctpop.i32(i32 %2812) #17
  %2814 = trunc i32 %2813 to i8
  %2815 = and i8 %2814, 1
  %2816 = xor i8 %2815, 1
  store i8 %2816, i8* %2811, align 1, !tbaa !2451
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2817, align 1, !tbaa !2451
  %2818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2819 = icmp eq i32 %2804, 0
  %2820 = zext i1 %2819 to i8
  store i8 %2820, i8* %2818, align 1, !tbaa !2451
  %2821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2822 = lshr i32 %2804, 31
  %2823 = trunc i32 %2822 to i8
  store i8 %2823, i8* %2821, align 1, !tbaa !2451
  %2824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2825 = zext i1 %2807 to i8
  store i8 %2825, i8* %2824, align 1, !tbaa !2451
  %2826 = load i32, i32* %ECX
  %2827 = zext i32 %2826 to i64
  %2828 = load i64, i64* %PC
  %2829 = add i64 %2828, 3
  store i64 %2829, i64* %PC
  %2830 = shl i64 %2827, 32
  %2831 = ashr exact i64 %2830, 32
  store i64 %2831, i64* %RDX, align 8, !tbaa !2428
  %2832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2833 = load i64, i64* %RAX
  %2834 = load i64, i64* %RDX
  %2835 = mul i64 %2834, 8
  %2836 = add i64 %2835, %2833
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 5
  store i64 %2838, i64* %PC
  %2839 = inttoptr i64 %2836 to double*
  %2840 = load double, double* %2839
  %2841 = bitcast i8* %2832 to double*
  store double %2840, double* %2841, align 1, !tbaa !2452
  %2842 = getelementptr inbounds i8, i8* %2832, i64 8
  %2843 = bitcast i8* %2842 to double*
  store double 0.000000e+00, double* %2843, align 1, !tbaa !2452
  %2844 = load i64, i64* %RBP
  %2845 = sub i64 %2844, 112
  %2846 = bitcast %union.vec128_t* %XMM0 to i8*
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 5
  store i64 %2848, i64* %PC
  %2849 = bitcast i8* %2846 to double*
  %2850 = load double, double* %2849, align 1
  %2851 = inttoptr i64 %2845 to double*
  store double %2850, double* %2851
  %2852 = load i64, i64* %RBP
  %2853 = sub i64 %2852, 32
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 4
  store i64 %2855, i64* %PC
  %2856 = inttoptr i64 %2853 to i64*
  %2857 = load i64, i64* %2856
  store i64 %2857, i64* %RAX, align 8, !tbaa !2428
  %2858 = load i64, i64* %RBP
  %2859 = sub i64 %2858, 100
  %2860 = load i64, i64* %PC
  %2861 = add i64 %2860, 3
  store i64 %2861, i64* %PC
  %2862 = inttoptr i64 %2859 to i32*
  %2863 = load i32, i32* %2862
  %2864 = zext i32 %2863 to i64
  store i64 %2864, i64* %RCX, align 8, !tbaa !2428
  %2865 = load i64, i64* %RCX
  %2866 = load i64, i64* %PC
  %2867 = add i64 %2866, 3
  store i64 %2867, i64* %PC
  %2868 = trunc i64 %2865 to i32
  %2869 = shl i32 %2868, 1
  %2870 = icmp slt i32 %2868, 0
  %2871 = icmp slt i32 %2869, 0
  %2872 = xor i1 %2870, %2871
  %2873 = zext i32 %2869 to i64
  store i64 %2873, i64* %RCX, align 8, !tbaa !2428
  %2874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2875 = zext i1 %2870 to i8
  store i8 %2875, i8* %2874, align 1, !tbaa !2451
  %2876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2877 = and i32 %2869, 254
  %2878 = call i32 @llvm.ctpop.i32(i32 %2877) #17
  %2879 = trunc i32 %2878 to i8
  %2880 = and i8 %2879, 1
  %2881 = xor i8 %2880, 1
  store i8 %2881, i8* %2876, align 1, !tbaa !2451
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2882, align 1, !tbaa !2451
  %2883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2884 = icmp eq i32 %2869, 0
  %2885 = zext i1 %2884 to i8
  store i8 %2885, i8* %2883, align 1, !tbaa !2451
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2887 = lshr i32 %2869, 31
  %2888 = trunc i32 %2887 to i8
  store i8 %2888, i8* %2886, align 1, !tbaa !2451
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2890 = zext i1 %2872 to i8
  store i8 %2890, i8* %2889, align 1, !tbaa !2451
  %2891 = load i32, i32* %ECX
  %2892 = zext i32 %2891 to i64
  %2893 = load i64, i64* %PC
  %2894 = add i64 %2893, 3
  store i64 %2894, i64* %PC
  %2895 = shl i64 %2892, 32
  %2896 = ashr exact i64 %2895, 32
  store i64 %2896, i64* %RDX, align 8, !tbaa !2428
  %2897 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2898 = load i64, i64* %RAX
  %2899 = load i64, i64* %RDX
  %2900 = mul i64 %2899, 8
  %2901 = add i64 %2900, %2898
  %2902 = load i64, i64* %PC
  %2903 = add i64 %2902, 5
  store i64 %2903, i64* %PC
  %2904 = inttoptr i64 %2901 to double*
  %2905 = load double, double* %2904
  %2906 = bitcast i8* %2897 to double*
  store double %2905, double* %2906, align 1, !tbaa !2452
  %2907 = getelementptr inbounds i8, i8* %2897, i64 8
  %2908 = bitcast i8* %2907 to double*
  store double 0.000000e+00, double* %2908, align 1, !tbaa !2452
  %2909 = load i64, i64* %RBP
  %2910 = sub i64 %2909, 120
  %2911 = bitcast %union.vec128_t* %XMM0 to i8*
  %2912 = load i64, i64* %PC
  %2913 = add i64 %2912, 5
  store i64 %2913, i64* %PC
  %2914 = bitcast i8* %2911 to double*
  %2915 = load double, double* %2914, align 1
  %2916 = inttoptr i64 %2910 to double*
  store double %2915, double* %2916
  %2917 = load i64, i64* %RBP
  %2918 = sub i64 %2917, 40
  %2919 = load i64, i64* %PC
  %2920 = add i64 %2919, 4
  store i64 %2920, i64* %PC
  %2921 = inttoptr i64 %2918 to i64*
  %2922 = load i64, i64* %2921
  store i64 %2922, i64* %RAX, align 8, !tbaa !2428
  %2923 = load i64, i64* %RBP
  %2924 = sub i64 %2923, 100
  %2925 = load i64, i64* %PC
  %2926 = add i64 %2925, 3
  store i64 %2926, i64* %PC
  %2927 = inttoptr i64 %2924 to i32*
  %2928 = load i32, i32* %2927
  %2929 = zext i32 %2928 to i64
  store i64 %2929, i64* %RCX, align 8, !tbaa !2428
  %2930 = load i64, i64* %RCX
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 3
  store i64 %2932, i64* %PC
  %2933 = trunc i64 %2930 to i32
  %2934 = shl i32 %2933, 1
  %2935 = icmp slt i32 %2933, 0
  %2936 = icmp slt i32 %2934, 0
  %2937 = xor i1 %2935, %2936
  %2938 = zext i32 %2934 to i64
  store i64 %2938, i64* %RCX, align 8, !tbaa !2428
  %2939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2940 = zext i1 %2935 to i8
  store i8 %2940, i8* %2939, align 1, !tbaa !2451
  %2941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2942 = and i32 %2934, 254
  %2943 = call i32 @llvm.ctpop.i32(i32 %2942) #17
  %2944 = trunc i32 %2943 to i8
  %2945 = and i8 %2944, 1
  %2946 = xor i8 %2945, 1
  store i8 %2946, i8* %2941, align 1, !tbaa !2451
  %2947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2947, align 1, !tbaa !2451
  %2948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2949 = icmp eq i32 %2934, 0
  %2950 = zext i1 %2949 to i8
  store i8 %2950, i8* %2948, align 1, !tbaa !2451
  %2951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2952 = lshr i32 %2934, 31
  %2953 = trunc i32 %2952 to i8
  store i8 %2953, i8* %2951, align 1, !tbaa !2451
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2955 = zext i1 %2937 to i8
  store i8 %2955, i8* %2954, align 1, !tbaa !2451
  %2956 = load i64, i64* %RCX
  %2957 = load i64, i64* %PC
  %2958 = add i64 %2957, 3
  store i64 %2958, i64* %PC
  %2959 = trunc i64 %2956 to i32
  %2960 = add i32 1, %2959
  %2961 = zext i32 %2960 to i64
  store i64 %2961, i64* %RCX, align 8, !tbaa !2428
  %2962 = icmp ult i32 %2960, %2959
  %2963 = icmp ult i32 %2960, 1
  %2964 = or i1 %2962, %2963
  %2965 = zext i1 %2964 to i8
  %2966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2965, i8* %2966, align 1, !tbaa !2432
  %2967 = and i32 %2960, 255
  %2968 = call i32 @llvm.ctpop.i32(i32 %2967) #17
  %2969 = trunc i32 %2968 to i8
  %2970 = and i8 %2969, 1
  %2971 = xor i8 %2970, 1
  %2972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2971, i8* %2972, align 1, !tbaa !2446
  %2973 = xor i64 1, %2956
  %2974 = trunc i64 %2973 to i32
  %2975 = xor i32 %2974, %2960
  %2976 = lshr i32 %2975, 4
  %2977 = trunc i32 %2976 to i8
  %2978 = and i8 %2977, 1
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2978, i8* %2979, align 1, !tbaa !2447
  %2980 = icmp eq i32 %2960, 0
  %2981 = zext i1 %2980 to i8
  %2982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2981, i8* %2982, align 1, !tbaa !2448
  %2983 = lshr i32 %2960, 31
  %2984 = trunc i32 %2983 to i8
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2984, i8* %2985, align 1, !tbaa !2449
  %2986 = lshr i32 %2959, 31
  %2987 = xor i32 %2983, %2986
  %2988 = add nuw nsw i32 %2987, %2983
  %2989 = icmp eq i32 %2988, 2
  %2990 = zext i1 %2989 to i8
  %2991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2990, i8* %2991, align 1, !tbaa !2450
  %2992 = load i32, i32* %ECX
  %2993 = zext i32 %2992 to i64
  %2994 = load i64, i64* %PC
  %2995 = add i64 %2994, 3
  store i64 %2995, i64* %PC
  %2996 = shl i64 %2993, 32
  %2997 = ashr exact i64 %2996, 32
  store i64 %2997, i64* %RDX, align 8, !tbaa !2428
  %2998 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2999 = load i64, i64* %RAX
  %3000 = load i64, i64* %RDX
  %3001 = mul i64 %3000, 8
  %3002 = add i64 %3001, %2999
  %3003 = load i64, i64* %PC
  %3004 = add i64 %3003, 5
  store i64 %3004, i64* %PC
  %3005 = inttoptr i64 %3002 to double*
  %3006 = load double, double* %3005
  %3007 = bitcast i8* %2998 to double*
  store double %3006, double* %3007, align 1, !tbaa !2452
  %3008 = getelementptr inbounds i8, i8* %2998, i64 8
  %3009 = bitcast i8* %3008 to double*
  store double 0.000000e+00, double* %3009, align 1, !tbaa !2452
  %3010 = load i64, i64* %RBP
  %3011 = sub i64 %3010, 128
  %3012 = bitcast %union.vec128_t* %XMM0 to i8*
  %3013 = load i64, i64* %PC
  %3014 = add i64 %3013, 5
  store i64 %3014, i64* %PC
  %3015 = bitcast i8* %3012 to double*
  %3016 = load double, double* %3015, align 1
  %3017 = inttoptr i64 %3011 to double*
  store double %3016, double* %3017
  %3018 = load i64, i64* %RBP
  %3019 = sub i64 %3018, 32
  %3020 = load i64, i64* %PC
  %3021 = add i64 %3020, 4
  store i64 %3021, i64* %PC
  %3022 = inttoptr i64 %3019 to i64*
  %3023 = load i64, i64* %3022
  store i64 %3023, i64* %RAX, align 8, !tbaa !2428
  %3024 = load i64, i64* %RBP
  %3025 = sub i64 %3024, 100
  %3026 = load i64, i64* %PC
  %3027 = add i64 %3026, 3
  store i64 %3027, i64* %PC
  %3028 = inttoptr i64 %3025 to i32*
  %3029 = load i32, i32* %3028
  %3030 = zext i32 %3029 to i64
  store i64 %3030, i64* %RCX, align 8, !tbaa !2428
  %3031 = load i64, i64* %RCX
  %3032 = load i64, i64* %PC
  %3033 = add i64 %3032, 3
  store i64 %3033, i64* %PC
  %3034 = trunc i64 %3031 to i32
  %3035 = shl i32 %3034, 1
  %3036 = icmp slt i32 %3034, 0
  %3037 = icmp slt i32 %3035, 0
  %3038 = xor i1 %3036, %3037
  %3039 = zext i32 %3035 to i64
  store i64 %3039, i64* %RCX, align 8, !tbaa !2428
  %3040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3041 = zext i1 %3036 to i8
  store i8 %3041, i8* %3040, align 1, !tbaa !2451
  %3042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3043 = and i32 %3035, 254
  %3044 = call i32 @llvm.ctpop.i32(i32 %3043) #17
  %3045 = trunc i32 %3044 to i8
  %3046 = and i8 %3045, 1
  %3047 = xor i8 %3046, 1
  store i8 %3047, i8* %3042, align 1, !tbaa !2451
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3048, align 1, !tbaa !2451
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3050 = icmp eq i32 %3035, 0
  %3051 = zext i1 %3050 to i8
  store i8 %3051, i8* %3049, align 1, !tbaa !2451
  %3052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3053 = lshr i32 %3035, 31
  %3054 = trunc i32 %3053 to i8
  store i8 %3054, i8* %3052, align 1, !tbaa !2451
  %3055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3056 = zext i1 %3038 to i8
  store i8 %3056, i8* %3055, align 1, !tbaa !2451
  %3057 = load i64, i64* %RCX
  %3058 = load i64, i64* %PC
  %3059 = add i64 %3058, 3
  store i64 %3059, i64* %PC
  %3060 = trunc i64 %3057 to i32
  %3061 = add i32 1, %3060
  %3062 = zext i32 %3061 to i64
  store i64 %3062, i64* %RCX, align 8, !tbaa !2428
  %3063 = icmp ult i32 %3061, %3060
  %3064 = icmp ult i32 %3061, 1
  %3065 = or i1 %3063, %3064
  %3066 = zext i1 %3065 to i8
  %3067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3066, i8* %3067, align 1, !tbaa !2432
  %3068 = and i32 %3061, 255
  %3069 = call i32 @llvm.ctpop.i32(i32 %3068) #17
  %3070 = trunc i32 %3069 to i8
  %3071 = and i8 %3070, 1
  %3072 = xor i8 %3071, 1
  %3073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3072, i8* %3073, align 1, !tbaa !2446
  %3074 = xor i64 1, %3057
  %3075 = trunc i64 %3074 to i32
  %3076 = xor i32 %3075, %3061
  %3077 = lshr i32 %3076, 4
  %3078 = trunc i32 %3077 to i8
  %3079 = and i8 %3078, 1
  %3080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3079, i8* %3080, align 1, !tbaa !2447
  %3081 = icmp eq i32 %3061, 0
  %3082 = zext i1 %3081 to i8
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3082, i8* %3083, align 1, !tbaa !2448
  %3084 = lshr i32 %3061, 31
  %3085 = trunc i32 %3084 to i8
  %3086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3085, i8* %3086, align 1, !tbaa !2449
  %3087 = lshr i32 %3060, 31
  %3088 = xor i32 %3084, %3087
  %3089 = add nuw nsw i32 %3088, %3084
  %3090 = icmp eq i32 %3089, 2
  %3091 = zext i1 %3090 to i8
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3091, i8* %3092, align 1, !tbaa !2450
  %3093 = load i32, i32* %ECX
  %3094 = zext i32 %3093 to i64
  %3095 = load i64, i64* %PC
  %3096 = add i64 %3095, 3
  store i64 %3096, i64* %PC
  %3097 = shl i64 %3094, 32
  %3098 = ashr exact i64 %3097, 32
  store i64 %3098, i64* %RDX, align 8, !tbaa !2428
  %3099 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3100 = load i64, i64* %RAX
  %3101 = load i64, i64* %RDX
  %3102 = mul i64 %3101, 8
  %3103 = add i64 %3102, %3100
  %3104 = load i64, i64* %PC
  %3105 = add i64 %3104, 5
  store i64 %3105, i64* %PC
  %3106 = inttoptr i64 %3103 to double*
  %3107 = load double, double* %3106
  %3108 = bitcast i8* %3099 to double*
  store double %3107, double* %3108, align 1, !tbaa !2452
  %3109 = getelementptr inbounds i8, i8* %3099, i64 8
  %3110 = bitcast i8* %3109 to double*
  store double 0.000000e+00, double* %3110, align 1, !tbaa !2452
  %3111 = load i64, i64* %RBP
  %3112 = sub i64 %3111, 136
  %3113 = bitcast %union.vec128_t* %XMM0 to i8*
  %3114 = load i64, i64* %PC
  %3115 = add i64 %3114, 8
  store i64 %3115, i64* %PC
  %3116 = bitcast i8* %3113 to double*
  %3117 = load double, double* %3116, align 1
  %3118 = inttoptr i64 %3112 to double*
  store double %3117, double* %3118
  %3119 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3120 = load i64, i64* %RBP
  %3121 = sub i64 %3120, 112
  %3122 = load i64, i64* %PC
  %3123 = add i64 %3122, 5
  store i64 %3123, i64* %PC
  %3124 = inttoptr i64 %3121 to double*
  %3125 = load double, double* %3124
  %3126 = bitcast i8* %3119 to double*
  store double %3125, double* %3126, align 1, !tbaa !2452
  %3127 = getelementptr inbounds i8, i8* %3119, i64 8
  %3128 = bitcast i8* %3127 to double*
  store double 0.000000e+00, double* %3128, align 1, !tbaa !2452
  %3129 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3130 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3131 = load i64, i64* %RBP
  %3132 = sub i64 %3131, 120
  %3133 = load i64, i64* %PC
  %3134 = add i64 %3133, 5
  store i64 %3134, i64* %PC
  %3135 = bitcast i8* %3130 to double*
  %3136 = load double, double* %3135, align 1
  %3137 = getelementptr inbounds i8, i8* %3130, i64 8
  %3138 = bitcast i8* %3137 to i64*
  %3139 = load i64, i64* %3138, align 1
  %3140 = inttoptr i64 %3132 to double*
  %3141 = load double, double* %3140
  %3142 = fmul double %3136, %3141
  %3143 = bitcast i8* %3129 to double*
  store double %3142, double* %3143, align 1, !tbaa !2452
  %3144 = getelementptr inbounds i8, i8* %3129, i64 8
  %3145 = bitcast i8* %3144 to i64*
  store i64 %3139, i64* %3145, align 1, !tbaa !2452
  %3146 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3147 = load i64, i64* %RBP
  %3148 = sub i64 %3147, 128
  %3149 = load i64, i64* %PC
  %3150 = add i64 %3149, 5
  store i64 %3150, i64* %PC
  %3151 = inttoptr i64 %3148 to double*
  %3152 = load double, double* %3151
  %3153 = bitcast i8* %3146 to double*
  store double %3152, double* %3153, align 1, !tbaa !2452
  %3154 = getelementptr inbounds i8, i8* %3146, i64 8
  %3155 = bitcast i8* %3154 to double*
  store double 0.000000e+00, double* %3155, align 1, !tbaa !2452
  %3156 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3157 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3158 = load i64, i64* %RBP
  %3159 = sub i64 %3158, 136
  %3160 = load i64, i64* %PC
  %3161 = add i64 %3160, 8
  store i64 %3161, i64* %PC
  %3162 = bitcast i8* %3157 to double*
  %3163 = load double, double* %3162, align 1
  %3164 = getelementptr inbounds i8, i8* %3157, i64 8
  %3165 = bitcast i8* %3164 to i64*
  %3166 = load i64, i64* %3165, align 1
  %3167 = inttoptr i64 %3159 to double*
  %3168 = load double, double* %3167
  %3169 = fmul double %3163, %3168
  %3170 = bitcast i8* %3156 to double*
  store double %3169, double* %3170, align 1, !tbaa !2452
  %3171 = getelementptr inbounds i8, i8* %3156, i64 8
  %3172 = bitcast i8* %3171 to i64*
  store i64 %3166, i64* %3172, align 1, !tbaa !2452
  %3173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3175 = bitcast %union.vec128_t* %XMM1 to i8*
  %3176 = load i64, i64* %PC
  %3177 = add i64 %3176, 4
  store i64 %3177, i64* %PC
  %3178 = bitcast i8* %3174 to double*
  %3179 = load double, double* %3178, align 1
  %3180 = getelementptr inbounds i8, i8* %3174, i64 8
  %3181 = bitcast i8* %3180 to i64*
  %3182 = load i64, i64* %3181, align 1
  %3183 = bitcast i8* %3175 to double*
  %3184 = load double, double* %3183, align 1
  %3185 = fsub double %3179, %3184
  %3186 = bitcast i8* %3173 to double*
  store double %3185, double* %3186, align 1, !tbaa !2452
  %3187 = getelementptr inbounds i8, i8* %3173, i64 8
  %3188 = bitcast i8* %3187 to i64*
  store i64 %3182, i64* %3188, align 1, !tbaa !2452
  %3189 = load i64, i64* %RBP
  %3190 = sub i64 %3189, 40
  %3191 = load i64, i64* %PC
  %3192 = add i64 %3191, 4
  store i64 %3192, i64* %PC
  %3193 = inttoptr i64 %3190 to i64*
  %3194 = load i64, i64* %3193
  store i64 %3194, i64* %RAX, align 8, !tbaa !2428
  %3195 = load i64, i64* %RBP
  %3196 = sub i64 %3195, 100
  %3197 = load i64, i64* %PC
  %3198 = add i64 %3197, 3
  store i64 %3198, i64* %PC
  %3199 = inttoptr i64 %3196 to i32*
  %3200 = load i32, i32* %3199
  %3201 = zext i32 %3200 to i64
  store i64 %3201, i64* %RCX, align 8, !tbaa !2428
  %3202 = load i64, i64* %RCX
  %3203 = load i64, i64* %PC
  %3204 = add i64 %3203, 3
  store i64 %3204, i64* %PC
  %3205 = trunc i64 %3202 to i32
  %3206 = shl i32 %3205, 1
  %3207 = icmp slt i32 %3205, 0
  %3208 = icmp slt i32 %3206, 0
  %3209 = xor i1 %3207, %3208
  %3210 = zext i32 %3206 to i64
  store i64 %3210, i64* %RCX, align 8, !tbaa !2428
  %3211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3212 = zext i1 %3207 to i8
  store i8 %3212, i8* %3211, align 1, !tbaa !2451
  %3213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3214 = and i32 %3206, 254
  %3215 = call i32 @llvm.ctpop.i32(i32 %3214) #17
  %3216 = trunc i32 %3215 to i8
  %3217 = and i8 %3216, 1
  %3218 = xor i8 %3217, 1
  store i8 %3218, i8* %3213, align 1, !tbaa !2451
  %3219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3219, align 1, !tbaa !2451
  %3220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3221 = icmp eq i32 %3206, 0
  %3222 = zext i1 %3221 to i8
  store i8 %3222, i8* %3220, align 1, !tbaa !2451
  %3223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3224 = lshr i32 %3206, 31
  %3225 = trunc i32 %3224 to i8
  store i8 %3225, i8* %3223, align 1, !tbaa !2451
  %3226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3227 = zext i1 %3209 to i8
  store i8 %3227, i8* %3226, align 1, !tbaa !2451
  %3228 = load i32, i32* %ECX
  %3229 = zext i32 %3228 to i64
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 3
  store i64 %3231, i64* %PC
  %3232 = shl i64 %3229, 32
  %3233 = ashr exact i64 %3232, 32
  store i64 %3233, i64* %RDX, align 8, !tbaa !2428
  %3234 = load i64, i64* %RAX
  %3235 = load i64, i64* %RDX
  %3236 = mul i64 %3235, 8
  %3237 = add i64 %3236, %3234
  %3238 = bitcast %union.vec128_t* %XMM0 to i8*
  %3239 = load i64, i64* %PC
  %3240 = add i64 %3239, 5
  store i64 %3240, i64* %PC
  %3241 = bitcast i8* %3238 to double*
  %3242 = load double, double* %3241, align 1
  %3243 = inttoptr i64 %3237 to double*
  store double %3242, double* %3243
  %3244 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3245 = load i64, i64* %RBP
  %3246 = sub i64 %3245, 112
  %3247 = load i64, i64* %PC
  %3248 = add i64 %3247, 5
  store i64 %3248, i64* %PC
  %3249 = inttoptr i64 %3246 to double*
  %3250 = load double, double* %3249
  %3251 = bitcast i8* %3244 to double*
  store double %3250, double* %3251, align 1, !tbaa !2452
  %3252 = getelementptr inbounds i8, i8* %3244, i64 8
  %3253 = bitcast i8* %3252 to double*
  store double 0.000000e+00, double* %3253, align 1, !tbaa !2452
  %3254 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3256 = load i64, i64* %RBP
  %3257 = sub i64 %3256, 136
  %3258 = load i64, i64* %PC
  %3259 = add i64 %3258, 8
  store i64 %3259, i64* %PC
  %3260 = bitcast i8* %3255 to double*
  %3261 = load double, double* %3260, align 1
  %3262 = getelementptr inbounds i8, i8* %3255, i64 8
  %3263 = bitcast i8* %3262 to i64*
  %3264 = load i64, i64* %3263, align 1
  %3265 = inttoptr i64 %3257 to double*
  %3266 = load double, double* %3265
  %3267 = fmul double %3261, %3266
  %3268 = bitcast i8* %3254 to double*
  store double %3267, double* %3268, align 1, !tbaa !2452
  %3269 = getelementptr inbounds i8, i8* %3254, i64 8
  %3270 = bitcast i8* %3269 to i64*
  store i64 %3264, i64* %3270, align 1, !tbaa !2452
  %3271 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3272 = load i64, i64* %RBP
  %3273 = sub i64 %3272, 128
  %3274 = load i64, i64* %PC
  %3275 = add i64 %3274, 5
  store i64 %3275, i64* %PC
  %3276 = inttoptr i64 %3273 to double*
  %3277 = load double, double* %3276
  %3278 = bitcast i8* %3271 to double*
  store double %3277, double* %3278, align 1, !tbaa !2452
  %3279 = getelementptr inbounds i8, i8* %3271, i64 8
  %3280 = bitcast i8* %3279 to double*
  store double 0.000000e+00, double* %3280, align 1, !tbaa !2452
  %3281 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3282 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3283 = load i64, i64* %RBP
  %3284 = sub i64 %3283, 120
  %3285 = load i64, i64* %PC
  %3286 = add i64 %3285, 5
  store i64 %3286, i64* %PC
  %3287 = bitcast i8* %3282 to double*
  %3288 = load double, double* %3287, align 1
  %3289 = getelementptr inbounds i8, i8* %3282, i64 8
  %3290 = bitcast i8* %3289 to i64*
  %3291 = load i64, i64* %3290, align 1
  %3292 = inttoptr i64 %3284 to double*
  %3293 = load double, double* %3292
  %3294 = fmul double %3288, %3293
  %3295 = bitcast i8* %3281 to double*
  store double %3294, double* %3295, align 1, !tbaa !2452
  %3296 = getelementptr inbounds i8, i8* %3281, i64 8
  %3297 = bitcast i8* %3296 to i64*
  store i64 %3291, i64* %3297, align 1, !tbaa !2452
  %3298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3300 = bitcast %union.vec128_t* %XMM1 to i8*
  %3301 = load i64, i64* %PC
  %3302 = add i64 %3301, 4
  store i64 %3302, i64* %PC
  %3303 = bitcast i8* %3299 to double*
  %3304 = load double, double* %3303, align 1
  %3305 = getelementptr inbounds i8, i8* %3299, i64 8
  %3306 = bitcast i8* %3305 to i64*
  %3307 = load i64, i64* %3306, align 1
  %3308 = bitcast i8* %3300 to double*
  %3309 = load double, double* %3308, align 1
  %3310 = fadd double %3304, %3309
  %3311 = bitcast i8* %3298 to double*
  store double %3310, double* %3311, align 1, !tbaa !2452
  %3312 = getelementptr inbounds i8, i8* %3298, i64 8
  %3313 = bitcast i8* %3312 to i64*
  store i64 %3307, i64* %3313, align 1, !tbaa !2452
  %3314 = load i64, i64* %RBP
  %3315 = sub i64 %3314, 40
  %3316 = load i64, i64* %PC
  %3317 = add i64 %3316, 4
  store i64 %3317, i64* %PC
  %3318 = inttoptr i64 %3315 to i64*
  %3319 = load i64, i64* %3318
  store i64 %3319, i64* %RAX, align 8, !tbaa !2428
  %3320 = load i64, i64* %RBP
  %3321 = sub i64 %3320, 100
  %3322 = load i64, i64* %PC
  %3323 = add i64 %3322, 3
  store i64 %3323, i64* %PC
  %3324 = inttoptr i64 %3321 to i32*
  %3325 = load i32, i32* %3324
  %3326 = zext i32 %3325 to i64
  store i64 %3326, i64* %RCX, align 8, !tbaa !2428
  %3327 = load i64, i64* %RCX
  %3328 = load i64, i64* %PC
  %3329 = add i64 %3328, 3
  store i64 %3329, i64* %PC
  %3330 = trunc i64 %3327 to i32
  %3331 = shl i32 %3330, 1
  %3332 = icmp slt i32 %3330, 0
  %3333 = icmp slt i32 %3331, 0
  %3334 = xor i1 %3332, %3333
  %3335 = zext i32 %3331 to i64
  store i64 %3335, i64* %RCX, align 8, !tbaa !2428
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3337 = zext i1 %3332 to i8
  store i8 %3337, i8* %3336, align 1, !tbaa !2451
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3339 = and i32 %3331, 254
  %3340 = call i32 @llvm.ctpop.i32(i32 %3339) #17
  %3341 = trunc i32 %3340 to i8
  %3342 = and i8 %3341, 1
  %3343 = xor i8 %3342, 1
  store i8 %3343, i8* %3338, align 1, !tbaa !2451
  %3344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3344, align 1, !tbaa !2451
  %3345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3346 = icmp eq i32 %3331, 0
  %3347 = zext i1 %3346 to i8
  store i8 %3347, i8* %3345, align 1, !tbaa !2451
  %3348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3349 = lshr i32 %3331, 31
  %3350 = trunc i32 %3349 to i8
  store i8 %3350, i8* %3348, align 1, !tbaa !2451
  %3351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3352 = zext i1 %3334 to i8
  store i8 %3352, i8* %3351, align 1, !tbaa !2451
  %3353 = load i64, i64* %RCX
  %3354 = load i64, i64* %PC
  %3355 = add i64 %3354, 3
  store i64 %3355, i64* %PC
  %3356 = trunc i64 %3353 to i32
  %3357 = add i32 1, %3356
  %3358 = zext i32 %3357 to i64
  store i64 %3358, i64* %RCX, align 8, !tbaa !2428
  %3359 = icmp ult i32 %3357, %3356
  %3360 = icmp ult i32 %3357, 1
  %3361 = or i1 %3359, %3360
  %3362 = zext i1 %3361 to i8
  %3363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3362, i8* %3363, align 1, !tbaa !2432
  %3364 = and i32 %3357, 255
  %3365 = call i32 @llvm.ctpop.i32(i32 %3364) #17
  %3366 = trunc i32 %3365 to i8
  %3367 = and i8 %3366, 1
  %3368 = xor i8 %3367, 1
  %3369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3368, i8* %3369, align 1, !tbaa !2446
  %3370 = xor i64 1, %3353
  %3371 = trunc i64 %3370 to i32
  %3372 = xor i32 %3371, %3357
  %3373 = lshr i32 %3372, 4
  %3374 = trunc i32 %3373 to i8
  %3375 = and i8 %3374, 1
  %3376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3375, i8* %3376, align 1, !tbaa !2447
  %3377 = icmp eq i32 %3357, 0
  %3378 = zext i1 %3377 to i8
  %3379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3378, i8* %3379, align 1, !tbaa !2448
  %3380 = lshr i32 %3357, 31
  %3381 = trunc i32 %3380 to i8
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3381, i8* %3382, align 1, !tbaa !2449
  %3383 = lshr i32 %3356, 31
  %3384 = xor i32 %3380, %3383
  %3385 = add nuw nsw i32 %3384, %3380
  %3386 = icmp eq i32 %3385, 2
  %3387 = zext i1 %3386 to i8
  %3388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3387, i8* %3388, align 1, !tbaa !2450
  %3389 = load i32, i32* %ECX
  %3390 = zext i32 %3389 to i64
  %3391 = load i64, i64* %PC
  %3392 = add i64 %3391, 3
  store i64 %3392, i64* %PC
  %3393 = shl i64 %3390, 32
  %3394 = ashr exact i64 %3393, 32
  store i64 %3394, i64* %RDX, align 8, !tbaa !2428
  %3395 = load i64, i64* %RAX
  %3396 = load i64, i64* %RDX
  %3397 = mul i64 %3396, 8
  %3398 = add i64 %3397, %3395
  %3399 = bitcast %union.vec128_t* %XMM0 to i8*
  %3400 = load i64, i64* %PC
  %3401 = add i64 %3400, 5
  store i64 %3401, i64* %PC
  %3402 = bitcast i8* %3399 to double*
  %3403 = load double, double* %3402, align 1
  %3404 = inttoptr i64 %3398 to double*
  store double %3403, double* %3404
  %3405 = load i64, i64* %RBP
  %3406 = sub i64 %3405, 100
  %3407 = load i64, i64* %PC
  %3408 = add i64 %3407, 3
  store i64 %3408, i64* %PC
  %3409 = inttoptr i64 %3406 to i32*
  %3410 = load i32, i32* %3409
  %3411 = zext i32 %3410 to i64
  store i64 %3411, i64* %RAX, align 8, !tbaa !2428
  %3412 = load i64, i64* %RAX
  %3413 = load i64, i64* %PC
  %3414 = add i64 %3413, 3
  store i64 %3414, i64* %PC
  %3415 = trunc i64 %3412 to i32
  %3416 = add i32 1, %3415
  %3417 = zext i32 %3416 to i64
  store i64 %3417, i64* %RAX, align 8, !tbaa !2428
  %3418 = icmp ult i32 %3416, %3415
  %3419 = icmp ult i32 %3416, 1
  %3420 = or i1 %3418, %3419
  %3421 = zext i1 %3420 to i8
  %3422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3421, i8* %3422, align 1, !tbaa !2432
  %3423 = and i32 %3416, 255
  %3424 = call i32 @llvm.ctpop.i32(i32 %3423) #17
  %3425 = trunc i32 %3424 to i8
  %3426 = and i8 %3425, 1
  %3427 = xor i8 %3426, 1
  %3428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3427, i8* %3428, align 1, !tbaa !2446
  %3429 = xor i64 1, %3412
  %3430 = trunc i64 %3429 to i32
  %3431 = xor i32 %3430, %3416
  %3432 = lshr i32 %3431, 4
  %3433 = trunc i32 %3432 to i8
  %3434 = and i8 %3433, 1
  %3435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3434, i8* %3435, align 1, !tbaa !2447
  %3436 = icmp eq i32 %3416, 0
  %3437 = zext i1 %3436 to i8
  %3438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3437, i8* %3438, align 1, !tbaa !2448
  %3439 = lshr i32 %3416, 31
  %3440 = trunc i32 %3439 to i8
  %3441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3440, i8* %3441, align 1, !tbaa !2449
  %3442 = lshr i32 %3415, 31
  %3443 = xor i32 %3439, %3442
  %3444 = add nuw nsw i32 %3443, %3439
  %3445 = icmp eq i32 %3444, 2
  %3446 = zext i1 %3445 to i8
  %3447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3446, i8* %3447, align 1, !tbaa !2450
  %3448 = load i64, i64* %RBP
  %3449 = sub i64 %3448, 100
  %3450 = load i32, i32* %EAX
  %3451 = zext i32 %3450 to i64
  %3452 = load i64, i64* %PC
  %3453 = add i64 %3452, 3
  store i64 %3453, i64* %PC
  %3454 = inttoptr i64 %3449 to i32*
  store i32 %3450, i32* %3454
  %3455 = load i64, i64* %PC
  %3456 = sub i64 %3455, 216
  %3457 = load i64, i64* %PC
  %3458 = add i64 %3457, 5
  store i64 %3458, i64* %PC
  %3459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3456, i64* %3459, align 8, !tbaa !2428
  br label %block_400b87

block_400d12:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %3460 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3461 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3462 = bitcast %union.vec128_t* %XMM0 to i8*
  %3463 = load i64, i64* %PC
  %3464 = add i64 %3463, 3
  store i64 %3464, i64* %PC
  %3465 = bitcast i8* %3461 to i64*
  %3466 = load i64, i64* %3465, align 1
  %3467 = getelementptr inbounds i8, i8* %3461, i64 8
  %3468 = bitcast i8* %3467 to i64*
  %3469 = load i64, i64* %3468, align 1
  %3470 = bitcast i8* %3462 to i64*
  %3471 = load i64, i64* %3470, align 1
  %3472 = getelementptr inbounds i8, i8* %3462, i64 8
  %3473 = bitcast i8* %3472 to i64*
  %3474 = load i64, i64* %3473, align 1
  %3475 = xor i64 %3471, %3466
  %3476 = xor i64 %3474, %3469
  %3477 = trunc i64 %3475 to i32
  %3478 = lshr i64 %3475, 32
  %3479 = trunc i64 %3478 to i32
  %3480 = bitcast i8* %3460 to i32*
  store i32 %3477, i32* %3480, align 1, !tbaa !2454
  %3481 = getelementptr inbounds i8, i8* %3460, i64 4
  %3482 = bitcast i8* %3481 to i32*
  store i32 %3479, i32* %3482, align 1, !tbaa !2454
  %3483 = trunc i64 %3476 to i32
  %3484 = getelementptr inbounds i8, i8* %3460, i64 8
  %3485 = bitcast i8* %3484 to i32*
  store i32 %3483, i32* %3485, align 1, !tbaa !2454
  %3486 = lshr i64 %3476, 32
  %3487 = trunc i64 %3486 to i32
  %3488 = getelementptr inbounds i8, i8* %3460, i64 12
  %3489 = bitcast i8* %3488 to i32*
  store i32 %3487, i32* %3489, align 1, !tbaa !2454
  %3490 = load i64, i64* %RBP
  %3491 = sub i64 %3490, 192
  %3492 = bitcast %union.vec128_t* %XMM0 to i8*
  %3493 = load i64, i64* %PC
  %3494 = add i64 %3493, 8
  store i64 %3494, i64* %PC
  %3495 = bitcast i8* %3492 to double*
  %3496 = load double, double* %3495, align 1
  %3497 = inttoptr i64 %3491 to double*
  store double %3496, double* %3497
  %3498 = load i64, i64* %PC
  %3499 = add i64 %3498, 5
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 5
  store i64 %3501, i64* %PC
  %3502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3499, i64* %3502, align 8, !tbaa !2428
  br label %block_400d22

block_400c8d:                                     ; preds = %block_400b26
  %3503 = add i64 %2106, 419
  %3504 = load i64, i64* %PC
  %3505 = add i64 %3504, 5
  %3506 = load i64, i64* %PC
  %3507 = add i64 %3506, 5
  store i64 %3507, i64* %PC
  %3508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3509 = load i64, i64* %3508, align 8, !tbaa !2428
  %3510 = add i64 %3509, -8
  %3511 = inttoptr i64 %3510 to i64*
  store i64 %3505, i64* %3511
  store i64 %3510, i64* %3508, align 8, !tbaa !2428
  %3512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3503, i64* %3512, align 8, !tbaa !2428
  %3513 = load i64, i64* %PC
  %3514 = call %struct.Memory* @sub_400e30_get_time_renamed_(%struct.State* %0, i64 %3513, %struct.Memory* %MEMORY.0)
  %3515 = load i64, i64* %RBP
  %3516 = sub i64 %3515, 72
  %3517 = bitcast %union.vec128_t* %XMM0 to i8*
  %3518 = load i64, i64* %PC
  %3519 = add i64 %3518, 5
  store i64 %3519, i64* %PC
  %3520 = bitcast i8* %3517 to double*
  %3521 = load double, double* %3520, align 1
  %3522 = inttoptr i64 %3516 to double*
  store double %3521, double* %3522
  %3523 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3524 = load i64, i64* %RBP
  %3525 = sub i64 %3524, 72
  %3526 = load i64, i64* %PC
  %3527 = add i64 %3526, 5
  store i64 %3527, i64* %PC
  %3528 = inttoptr i64 %3525 to double*
  %3529 = load double, double* %3528
  %3530 = bitcast i8* %3523 to double*
  store double %3529, double* %3530, align 1, !tbaa !2452
  %3531 = getelementptr inbounds i8, i8* %3523, i64 8
  %3532 = bitcast i8* %3531 to double*
  store double 0.000000e+00, double* %3532, align 1, !tbaa !2452
  %3533 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3534 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3535 = load i64, i64* %RBP
  %3536 = sub i64 %3535, 64
  %3537 = load i64, i64* %PC
  %3538 = add i64 %3537, 5
  store i64 %3538, i64* %PC
  %3539 = bitcast i8* %3534 to double*
  %3540 = load double, double* %3539, align 1
  %3541 = getelementptr inbounds i8, i8* %3534, i64 8
  %3542 = bitcast i8* %3541 to i64*
  %3543 = load i64, i64* %3542, align 1
  %3544 = inttoptr i64 %3536 to double*
  %3545 = load double, double* %3544
  %3546 = fsub double %3540, %3545
  %3547 = bitcast i8* %3533 to double*
  store double %3546, double* %3547, align 1, !tbaa !2452
  %3548 = getelementptr inbounds i8, i8* %3533, i64 8
  %3549 = bitcast i8* %3548 to i64*
  store i64 %3543, i64* %3549, align 1, !tbaa !2452
  %3550 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3551 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3552 = load i64, i64* %RBP
  %3553 = sub i64 %3552, 80
  %3554 = load i64, i64* %PC
  %3555 = add i64 %3554, 5
  store i64 %3555, i64* %PC
  %3556 = bitcast i8* %3551 to double*
  %3557 = load double, double* %3556, align 1
  %3558 = getelementptr inbounds i8, i8* %3551, i64 8
  %3559 = bitcast i8* %3558 to i64*
  %3560 = load i64, i64* %3559, align 1
  %3561 = inttoptr i64 %3553 to double*
  %3562 = load double, double* %3561
  %3563 = fsub double %3557, %3562
  %3564 = bitcast i8* %3550 to double*
  store double %3563, double* %3564, align 1, !tbaa !2452
  %3565 = getelementptr inbounds i8, i8* %3550, i64 8
  %3566 = bitcast i8* %3565 to i64*
  store i64 %3560, i64* %3566, align 1, !tbaa !2452
  %3567 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3568 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3569 = load i64, i64* %RBP
  %3570 = sub i64 %3569, 88
  %3571 = load i64, i64* %PC
  %3572 = add i64 %3571, 5
  store i64 %3572, i64* %PC
  %3573 = bitcast i8* %3568 to double*
  %3574 = load double, double* %3573, align 1
  %3575 = getelementptr inbounds i8, i8* %3568, i64 8
  %3576 = bitcast i8* %3575 to i64*
  %3577 = load i64, i64* %3576, align 1
  %3578 = inttoptr i64 %3570 to double*
  %3579 = load double, double* %3578
  %3580 = fadd double %3574, %3579
  %3581 = bitcast i8* %3567 to double*
  store double %3580, double* %3581, align 1, !tbaa !2452
  %3582 = getelementptr inbounds i8, i8* %3567, i64 8
  %3583 = bitcast i8* %3582 to i64*
  store i64 %3577, i64* %3583, align 1, !tbaa !2452
  %3584 = load i64, i64* %RBP
  %3585 = sub i64 %3584, 88
  %3586 = bitcast %union.vec128_t* %XMM0 to i8*
  %3587 = load i64, i64* %PC
  %3588 = add i64 %3587, 5
  store i64 %3588, i64* %PC
  %3589 = bitcast i8* %3586 to double*
  %3590 = load double, double* %3589, align 1
  %3591 = inttoptr i64 %3585 to double*
  store double %3590, double* %3591
  %3592 = load i64, i64* %RBP
  %3593 = sub i64 %3592, 12
  %3594 = load i64, i64* %PC
  %3595 = add i64 %3594, 7
  store i64 %3595, i64* %PC
  %3596 = inttoptr i64 %3593 to i32*
  store i32 0, i32* %3596
  br label %block_400cb7

block_400b87:                                     ; preds = %block_400b94, %block_400b33
  %MEMORY.4 = phi %struct.Memory* [ %1883, %block_400b33 ], [ %MEMORY.4, %block_400b94 ]
  %3597 = load i64, i64* %RBP
  %3598 = sub i64 %3597, 100
  %3599 = load i64, i64* %PC
  %3600 = add i64 %3599, 7
  store i64 %3600, i64* %PC
  %3601 = inttoptr i64 %3598 to i32*
  %3602 = load i32, i32* %3601
  %3603 = sub i32 %3602, 1024
  %3604 = icmp ult i32 %3602, 1024
  %3605 = zext i1 %3604 to i8
  %3606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3605, i8* %3606, align 1, !tbaa !2432
  %3607 = and i32 %3603, 255
  %3608 = call i32 @llvm.ctpop.i32(i32 %3607) #17
  %3609 = trunc i32 %3608 to i8
  %3610 = and i8 %3609, 1
  %3611 = xor i8 %3610, 1
  %3612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3611, i8* %3612, align 1, !tbaa !2446
  %3613 = xor i32 %3602, 1024
  %3614 = xor i32 %3613, %3603
  %3615 = lshr i32 %3614, 4
  %3616 = trunc i32 %3615 to i8
  %3617 = and i8 %3616, 1
  %3618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3617, i8* %3618, align 1, !tbaa !2447
  %3619 = icmp eq i32 %3603, 0
  %3620 = zext i1 %3619 to i8
  %3621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3620, i8* %3621, align 1, !tbaa !2448
  %3622 = lshr i32 %3603, 31
  %3623 = trunc i32 %3622 to i8
  %3624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3623, i8* %3624, align 1, !tbaa !2449
  %3625 = lshr i32 %3602, 31
  %3626 = xor i32 %3622, %3625
  %3627 = add nuw nsw i32 %3626, %3625
  %3628 = icmp eq i32 %3627, 2
  %3629 = zext i1 %3628 to i8
  %3630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3629, i8* %3630, align 1, !tbaa !2450
  %3631 = load i64, i64* %PC
  %3632 = add i64 %3631, 214
  %3633 = load i64, i64* %PC
  %3634 = add i64 %3633, 6
  %3635 = load i64, i64* %PC
  %3636 = add i64 %3635, 6
  store i64 %3636, i64* %PC
  %3637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3638 = load i8, i8* %3637, align 1, !tbaa !2449
  %3639 = icmp ne i8 %3638, 0
  %3640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3641 = load i8, i8* %3640, align 1, !tbaa !2450
  %3642 = icmp ne i8 %3641, 0
  %3643 = xor i1 %3639, %3642
  %3644 = xor i1 %3643, true
  %3645 = zext i1 %3644 to i8
  store i8 %3645, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3647 = select i1 %3643, i64 %3634, i64 %3632
  store i64 %3647, i64* %3646, align 8, !tbaa !2428
  %3648 = load i8, i8* %BRANCH_TAKEN
  %3649 = icmp eq i8 %3648, 1
  br i1 %3649, label %block_400c64, label %block_400b94

block_400cb7:                                     ; preds = %block_400c8d, %block_400d96
  %MEMORY.5 = phi %struct.Memory* [ %3514, %block_400c8d ], [ %2724, %block_400d96 ]
  %3650 = load i64, i64* %RBP
  %3651 = sub i64 %3650, 12
  %3652 = load i64, i64* %PC
  %3653 = add i64 %3652, 7
  store i64 %3653, i64* %PC
  %3654 = inttoptr i64 %3651 to i32*
  %3655 = load i32, i32* %3654
  %3656 = sub i32 %3655, 1024
  %3657 = icmp ult i32 %3655, 1024
  %3658 = zext i1 %3657 to i8
  %3659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3658, i8* %3659, align 1, !tbaa !2432
  %3660 = and i32 %3656, 255
  %3661 = call i32 @llvm.ctpop.i32(i32 %3660) #17
  %3662 = trunc i32 %3661 to i8
  %3663 = and i8 %3662, 1
  %3664 = xor i8 %3663, 1
  %3665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3664, i8* %3665, align 1, !tbaa !2446
  %3666 = xor i32 %3655, 1024
  %3667 = xor i32 %3666, %3656
  %3668 = lshr i32 %3667, 4
  %3669 = trunc i32 %3668 to i8
  %3670 = and i8 %3669, 1
  %3671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3670, i8* %3671, align 1, !tbaa !2447
  %3672 = icmp eq i32 %3656, 0
  %3673 = zext i1 %3672 to i8
  %3674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3673, i8* %3674, align 1, !tbaa !2448
  %3675 = lshr i32 %3656, 31
  %3676 = trunc i32 %3675 to i8
  %3677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3676, i8* %3677, align 1, !tbaa !2449
  %3678 = lshr i32 %3655, 31
  %3679 = xor i32 %3675, %3678
  %3680 = add nuw nsw i32 %3679, %3678
  %3681 = icmp eq i32 %3680, 2
  %3682 = zext i1 %3681 to i8
  %3683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3682, i8* %3683, align 1, !tbaa !2450
  %3684 = load i64, i64* %PC
  %3685 = add i64 %3684, 288
  %3686 = load i64, i64* %PC
  %3687 = add i64 %3686, 6
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 6
  store i64 %3689, i64* %PC
  %3690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3691 = load i8, i8* %3690, align 1, !tbaa !2449
  %3692 = icmp ne i8 %3691, 0
  %3693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3694 = load i8, i8* %3693, align 1, !tbaa !2450
  %3695 = icmp ne i8 %3694, 0
  %3696 = xor i1 %3692, %3695
  %3697 = xor i1 %3696, true
  %3698 = zext i1 %3697 to i8
  store i8 %3698, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3700 = select i1 %3696, i64 %3687, i64 %3685
  store i64 %3700, i64* %3699, align 8, !tbaa !2428
  %3701 = load i8, i8* %BRANCH_TAKEN
  %3702 = icmp eq i8 %3701, 1
  br i1 %3702, label %block_400dde, label %block_400cc4

block_400d86:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %3703 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3704 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3705 = bitcast %union.vec128_t* %XMM0 to i8*
  %3706 = load i64, i64* %PC
  %3707 = add i64 %3706, 3
  store i64 %3707, i64* %PC
  %3708 = bitcast i8* %3704 to i64*
  %3709 = load i64, i64* %3708, align 1
  %3710 = getelementptr inbounds i8, i8* %3704, i64 8
  %3711 = bitcast i8* %3710 to i64*
  %3712 = load i64, i64* %3711, align 1
  %3713 = bitcast i8* %3705 to i64*
  %3714 = load i64, i64* %3713, align 1
  %3715 = getelementptr inbounds i8, i8* %3705, i64 8
  %3716 = bitcast i8* %3715 to i64*
  %3717 = load i64, i64* %3716, align 1
  %3718 = xor i64 %3714, %3709
  %3719 = xor i64 %3717, %3712
  %3720 = trunc i64 %3718 to i32
  %3721 = lshr i64 %3718, 32
  %3722 = trunc i64 %3721 to i32
  %3723 = bitcast i8* %3703 to i32*
  store i32 %3720, i32* %3723, align 1, !tbaa !2454
  %3724 = getelementptr inbounds i8, i8* %3703, i64 4
  %3725 = bitcast i8* %3724 to i32*
  store i32 %3722, i32* %3725, align 1, !tbaa !2454
  %3726 = trunc i64 %3719 to i32
  %3727 = getelementptr inbounds i8, i8* %3703, i64 8
  %3728 = bitcast i8* %3727 to i32*
  store i32 %3726, i32* %3728, align 1, !tbaa !2454
  %3729 = lshr i64 %3719, 32
  %3730 = trunc i64 %3729 to i32
  %3731 = getelementptr inbounds i8, i8* %3703, i64 12
  %3732 = bitcast i8* %3731 to i32*
  store i32 %3730, i32* %3732, align 1, !tbaa !2454
  %3733 = load i64, i64* %RBP
  %3734 = sub i64 %3733, 208
  %3735 = bitcast %union.vec128_t* %XMM0 to i8*
  %3736 = load i64, i64* %PC
  %3737 = add i64 %3736, 8
  store i64 %3737, i64* %PC
  %3738 = bitcast i8* %3735 to double*
  %3739 = load double, double* %3738, align 1
  %3740 = inttoptr i64 %3734 to double*
  store double %3739, double* %3740
  %3741 = load i64, i64* %PC
  %3742 = add i64 %3741, 5
  %3743 = load i64, i64* %PC
  %3744 = add i64 %3743, 5
  store i64 %3744, i64* %PC
  %3745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3742, i64* %3745, align 8, !tbaa !2428
  br label %block_400d96

block_400a8c:                                     ; preds = %block_400a7f
  %3746 = load i64, i64* %PC
  %3747 = add i64 %3746, 10
  store i64 %3747, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %3748 = load i64, i64* %RBP
  %3749 = sub i64 %3748, 32
  %3750 = load i64, i64* %PC
  %3751 = add i64 %3750, 4
  store i64 %3751, i64* %PC
  %3752 = inttoptr i64 %3749 to i64*
  %3753 = load i64, i64* %3752
  store i64 %3753, i64* %RCX, align 8, !tbaa !2428
  %3754 = load i64, i64* %RBP
  %3755 = sub i64 %3754, 12
  %3756 = load i64, i64* %PC
  %3757 = add i64 %3756, 3
  store i64 %3757, i64* %PC
  %3758 = inttoptr i64 %3755 to i32*
  %3759 = load i32, i32* %3758
  %3760 = zext i32 %3759 to i64
  store i64 %3760, i64* %RDX, align 8, !tbaa !2428
  %3761 = load i64, i64* %RDX
  %3762 = load i64, i64* %PC
  %3763 = add i64 %3762, 3
  store i64 %3763, i64* %PC
  %3764 = trunc i64 %3761 to i32
  %3765 = shl i32 %3764, 1
  %3766 = icmp slt i32 %3764, 0
  %3767 = icmp slt i32 %3765, 0
  %3768 = xor i1 %3766, %3767
  %3769 = zext i32 %3765 to i64
  store i64 %3769, i64* %RDX, align 8, !tbaa !2428
  %3770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3771 = zext i1 %3766 to i8
  store i8 %3771, i8* %3770, align 1, !tbaa !2451
  %3772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3773 = and i32 %3765, 254
  %3774 = call i32 @llvm.ctpop.i32(i32 %3773) #17
  %3775 = trunc i32 %3774 to i8
  %3776 = and i8 %3775, 1
  %3777 = xor i8 %3776, 1
  store i8 %3777, i8* %3772, align 1, !tbaa !2451
  %3778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3778, align 1, !tbaa !2451
  %3779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3780 = icmp eq i32 %3765, 0
  %3781 = zext i1 %3780 to i8
  store i8 %3781, i8* %3779, align 1, !tbaa !2451
  %3782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3783 = lshr i32 %3765, 31
  %3784 = trunc i32 %3783 to i8
  store i8 %3784, i8* %3782, align 1, !tbaa !2451
  %3785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3786 = zext i1 %3768 to i8
  store i8 %3786, i8* %3785, align 1, !tbaa !2451
  %3787 = load i64, i64* %RDX
  %3788 = load i64, i64* %PC
  %3789 = add i64 %3788, 3
  store i64 %3789, i64* %PC
  %3790 = trunc i64 %3787 to i32
  %3791 = add i32 1, %3790
  %3792 = zext i32 %3791 to i64
  store i64 %3792, i64* %RDX, align 8, !tbaa !2428
  %3793 = icmp ult i32 %3791, %3790
  %3794 = icmp ult i32 %3791, 1
  %3795 = or i1 %3793, %3794
  %3796 = zext i1 %3795 to i8
  %3797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3796, i8* %3797, align 1, !tbaa !2432
  %3798 = and i32 %3791, 255
  %3799 = call i32 @llvm.ctpop.i32(i32 %3798) #17
  %3800 = trunc i32 %3799 to i8
  %3801 = and i8 %3800, 1
  %3802 = xor i8 %3801, 1
  %3803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3802, i8* %3803, align 1, !tbaa !2446
  %3804 = xor i64 1, %3787
  %3805 = trunc i64 %3804 to i32
  %3806 = xor i32 %3805, %3791
  %3807 = lshr i32 %3806, 4
  %3808 = trunc i32 %3807 to i8
  %3809 = and i8 %3808, 1
  %3810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3809, i8* %3810, align 1, !tbaa !2447
  %3811 = icmp eq i32 %3791, 0
  %3812 = zext i1 %3811 to i8
  %3813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3812, i8* %3813, align 1, !tbaa !2448
  %3814 = lshr i32 %3791, 31
  %3815 = trunc i32 %3814 to i8
  %3816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3815, i8* %3816, align 1, !tbaa !2449
  %3817 = lshr i32 %3790, 31
  %3818 = xor i32 %3814, %3817
  %3819 = add nuw nsw i32 %3818, %3814
  %3820 = icmp eq i32 %3819, 2
  %3821 = zext i1 %3820 to i8
  %3822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3821, i8* %3822, align 1, !tbaa !2450
  %3823 = load i32, i32* %EDX
  %3824 = zext i32 %3823 to i64
  %3825 = load i64, i64* %PC
  %3826 = add i64 %3825, 3
  store i64 %3826, i64* %PC
  %3827 = shl i64 %3824, 32
  %3828 = ashr exact i64 %3827, 32
  store i64 %3828, i64* %RSI, align 8, !tbaa !2428
  %3829 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3830 = load i64, i64* %RCX
  %3831 = load i64, i64* %RSI
  %3832 = mul i64 %3831, 8
  %3833 = add i64 %3832, %3830
  %3834 = load i64, i64* %PC
  %3835 = add i64 %3834, 5
  store i64 %3835, i64* %PC
  %3836 = inttoptr i64 %3833 to double*
  %3837 = load double, double* %3836
  %3838 = bitcast i8* %3829 to double*
  store double %3837, double* %3838, align 1, !tbaa !2452
  %3839 = getelementptr inbounds i8, i8* %3829, i64 8
  %3840 = bitcast i8* %3839 to double*
  store double 0.000000e+00, double* %3840, align 1, !tbaa !2452
  %3841 = bitcast %union.vec128_t* %XMM0 to i8*
  %3842 = load i64, i64* %PC
  %3843 = add i64 %3842, 5
  store i64 %3843, i64* %PC
  %3844 = bitcast i8* %3841 to i64*
  %3845 = load i64, i64* %3844, align 1
  store i64 %3845, i64* %RCX, align 1, !tbaa !2428
  %3846 = load i64, i64* %RCX
  %3847 = load i64, i64* %RAX
  %3848 = load i64, i64* %PC
  %3849 = add i64 %3848, 3
  store i64 %3849, i64* %PC
  %3850 = xor i64 %3847, %3846
  store i64 %3850, i64* %RCX, align 8, !tbaa !2428
  %3851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3851, align 1, !tbaa !2432
  %3852 = trunc i64 %3850 to i32
  %3853 = and i32 %3852, 255
  %3854 = call i32 @llvm.ctpop.i32(i32 %3853) #17
  %3855 = trunc i32 %3854 to i8
  %3856 = and i8 %3855, 1
  %3857 = xor i8 %3856, 1
  %3858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3857, i8* %3858, align 1, !tbaa !2446
  %3859 = icmp eq i64 %3850, 0
  %3860 = zext i1 %3859 to i8
  %3861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3860, i8* %3861, align 1, !tbaa !2448
  %3862 = lshr i64 %3850, 63
  %3863 = trunc i64 %3862 to i8
  %3864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3863, i8* %3864, align 1, !tbaa !2449
  %3865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3865, align 1, !tbaa !2450
  %3866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3866, align 1, !tbaa !2447
  %3867 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3868 = load i64, i64* %RCX
  %3869 = load i64, i64* %PC
  %3870 = add i64 %3869, 5
  store i64 %3870, i64* %PC
  %3871 = bitcast i8* %3867 to i64*
  store i64 %3868, i64* %3871, align 1, !tbaa !2428
  %3872 = getelementptr inbounds i8, i8* %3867, i64 8
  %3873 = bitcast i8* %3872 to i64*
  store i64 0, i64* %3873, align 1, !tbaa !2428
  %3874 = load i64, i64* %RBP
  %3875 = sub i64 %3874, 32
  %3876 = load i64, i64* %PC
  %3877 = add i64 %3876, 4
  store i64 %3877, i64* %PC
  %3878 = inttoptr i64 %3875 to i64*
  %3879 = load i64, i64* %3878
  store i64 %3879, i64* %RAX, align 8, !tbaa !2428
  %3880 = load i64, i64* %RBP
  %3881 = sub i64 %3880, 12
  %3882 = load i64, i64* %PC
  %3883 = add i64 %3882, 3
  store i64 %3883, i64* %PC
  %3884 = inttoptr i64 %3881 to i32*
  %3885 = load i32, i32* %3884
  %3886 = zext i32 %3885 to i64
  store i64 %3886, i64* %RDX, align 8, !tbaa !2428
  %3887 = load i64, i64* %RDX
  %3888 = load i64, i64* %PC
  %3889 = add i64 %3888, 3
  store i64 %3889, i64* %PC
  %3890 = trunc i64 %3887 to i32
  %3891 = shl i32 %3890, 1
  %3892 = icmp slt i32 %3890, 0
  %3893 = icmp slt i32 %3891, 0
  %3894 = xor i1 %3892, %3893
  %3895 = zext i32 %3891 to i64
  store i64 %3895, i64* %RDX, align 8, !tbaa !2428
  %3896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3897 = zext i1 %3892 to i8
  store i8 %3897, i8* %3896, align 1, !tbaa !2451
  %3898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3899 = and i32 %3891, 254
  %3900 = call i32 @llvm.ctpop.i32(i32 %3899) #17
  %3901 = trunc i32 %3900 to i8
  %3902 = and i8 %3901, 1
  %3903 = xor i8 %3902, 1
  store i8 %3903, i8* %3898, align 1, !tbaa !2451
  %3904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3904, align 1, !tbaa !2451
  %3905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3906 = icmp eq i32 %3891, 0
  %3907 = zext i1 %3906 to i8
  store i8 %3907, i8* %3905, align 1, !tbaa !2451
  %3908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3909 = lshr i32 %3891, 31
  %3910 = trunc i32 %3909 to i8
  store i8 %3910, i8* %3908, align 1, !tbaa !2451
  %3911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3912 = zext i1 %3894 to i8
  store i8 %3912, i8* %3911, align 1, !tbaa !2451
  %3913 = load i64, i64* %RDX
  %3914 = load i64, i64* %PC
  %3915 = add i64 %3914, 3
  store i64 %3915, i64* %PC
  %3916 = trunc i64 %3913 to i32
  %3917 = add i32 1, %3916
  %3918 = zext i32 %3917 to i64
  store i64 %3918, i64* %RDX, align 8, !tbaa !2428
  %3919 = icmp ult i32 %3917, %3916
  %3920 = icmp ult i32 %3917, 1
  %3921 = or i1 %3919, %3920
  %3922 = zext i1 %3921 to i8
  %3923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3922, i8* %3923, align 1, !tbaa !2432
  %3924 = and i32 %3917, 255
  %3925 = call i32 @llvm.ctpop.i32(i32 %3924) #17
  %3926 = trunc i32 %3925 to i8
  %3927 = and i8 %3926, 1
  %3928 = xor i8 %3927, 1
  %3929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3928, i8* %3929, align 1, !tbaa !2446
  %3930 = xor i64 1, %3913
  %3931 = trunc i64 %3930 to i32
  %3932 = xor i32 %3931, %3917
  %3933 = lshr i32 %3932, 4
  %3934 = trunc i32 %3933 to i8
  %3935 = and i8 %3934, 1
  %3936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3935, i8* %3936, align 1, !tbaa !2447
  %3937 = icmp eq i32 %3917, 0
  %3938 = zext i1 %3937 to i8
  %3939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3938, i8* %3939, align 1, !tbaa !2448
  %3940 = lshr i32 %3917, 31
  %3941 = trunc i32 %3940 to i8
  %3942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3941, i8* %3942, align 1, !tbaa !2449
  %3943 = lshr i32 %3916, 31
  %3944 = xor i32 %3940, %3943
  %3945 = add nuw nsw i32 %3944, %3940
  %3946 = icmp eq i32 %3945, 2
  %3947 = zext i1 %3946 to i8
  %3948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3947, i8* %3948, align 1, !tbaa !2450
  %3949 = load i32, i32* %EDX
  %3950 = zext i32 %3949 to i64
  %3951 = load i64, i64* %PC
  %3952 = add i64 %3951, 3
  store i64 %3952, i64* %PC
  %3953 = shl i64 %3950, 32
  %3954 = ashr exact i64 %3953, 32
  store i64 %3954, i64* %RCX, align 8, !tbaa !2428
  %3955 = load i64, i64* %RAX
  %3956 = load i64, i64* %RCX
  %3957 = mul i64 %3956, 8
  %3958 = add i64 %3957, %3955
  %3959 = bitcast %union.vec128_t* %XMM0 to i8*
  %3960 = load i64, i64* %PC
  %3961 = add i64 %3960, 5
  store i64 %3961, i64* %PC
  %3962 = bitcast i8* %3959 to double*
  %3963 = load double, double* %3962, align 1
  %3964 = inttoptr i64 %3958 to double*
  store double %3963, double* %3964
  %3965 = load i64, i64* %RBP
  %3966 = sub i64 %3965, 12
  %3967 = load i64, i64* %PC
  %3968 = add i64 %3967, 3
  store i64 %3968, i64* %PC
  %3969 = inttoptr i64 %3966 to i32*
  %3970 = load i32, i32* %3969
  %3971 = zext i32 %3970 to i64
  store i64 %3971, i64* %RAX, align 8, !tbaa !2428
  %3972 = load i64, i64* %RAX
  %3973 = load i64, i64* %PC
  %3974 = add i64 %3973, 3
  store i64 %3974, i64* %PC
  %3975 = trunc i64 %3972 to i32
  %3976 = add i32 1, %3975
  %3977 = zext i32 %3976 to i64
  store i64 %3977, i64* %RAX, align 8, !tbaa !2428
  %3978 = icmp ult i32 %3976, %3975
  %3979 = icmp ult i32 %3976, 1
  %3980 = or i1 %3978, %3979
  %3981 = zext i1 %3980 to i8
  %3982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3981, i8* %3982, align 1, !tbaa !2432
  %3983 = and i32 %3976, 255
  %3984 = call i32 @llvm.ctpop.i32(i32 %3983) #17
  %3985 = trunc i32 %3984 to i8
  %3986 = and i8 %3985, 1
  %3987 = xor i8 %3986, 1
  %3988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3987, i8* %3988, align 1, !tbaa !2446
  %3989 = xor i64 1, %3972
  %3990 = trunc i64 %3989 to i32
  %3991 = xor i32 %3990, %3976
  %3992 = lshr i32 %3991, 4
  %3993 = trunc i32 %3992 to i8
  %3994 = and i8 %3993, 1
  %3995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3994, i8* %3995, align 1, !tbaa !2447
  %3996 = icmp eq i32 %3976, 0
  %3997 = zext i1 %3996 to i8
  %3998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3997, i8* %3998, align 1, !tbaa !2448
  %3999 = lshr i32 %3976, 31
  %4000 = trunc i32 %3999 to i8
  %4001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4000, i8* %4001, align 1, !tbaa !2449
  %4002 = lshr i32 %3975, 31
  %4003 = xor i32 %3999, %4002
  %4004 = add nuw nsw i32 %4003, %3999
  %4005 = icmp eq i32 %4004, 2
  %4006 = zext i1 %4005 to i8
  %4007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4006, i8* %4007, align 1, !tbaa !2450
  %4008 = load i64, i64* %RBP
  %4009 = sub i64 %4008, 12
  %4010 = load i32, i32* %EAX
  %4011 = zext i32 %4010 to i64
  %4012 = load i64, i64* %PC
  %4013 = add i64 %4012, 3
  store i64 %4013, i64* %PC
  %4014 = inttoptr i64 %4009 to i32*
  store i32 %4010, i32* %4014
  %4015 = load i64, i64* %PC
  %4016 = sub i64 %4015, 87
  %4017 = load i64, i64* %PC
  %4018 = add i64 %4017, 5
  store i64 %4018, i64* %PC
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4016, i64* %4019, align 8, !tbaa !2428
  br label %block_400a7f

block_400a02:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %4020 = load i64, i64* %PC
  %4021 = add i64 %4020, 10
  store i64 %4021, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %4022 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4023 = load i64, i64* %RBP
  %4024 = sub i64 %4023, 96
  %4025 = load i64, i64* %PC
  %4026 = add i64 %4025, 5
  store i64 %4026, i64* %PC
  %4027 = inttoptr i64 %4024 to double*
  %4028 = load double, double* %4027
  %4029 = bitcast i8* %4022 to double*
  store double %4028, double* %4029, align 1, !tbaa !2452
  %4030 = getelementptr inbounds i8, i8* %4022, i64 8
  %4031 = bitcast i8* %4030 to double*
  store double 0.000000e+00, double* %4031, align 1, !tbaa !2452
  %4032 = load i64, i64* %PC
  %4033 = add i64 %4032, 2
  store i64 %4033, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %4034 = load i64, i64* %PC
  %4035 = sub i64 %4034, 819
  %4036 = load i64, i64* %PC
  %4037 = add i64 %4036, 5
  %4038 = load i64, i64* %PC
  %4039 = add i64 %4038, 5
  store i64 %4039, i64* %PC
  %4040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4041 = load i64, i64* %4040, align 8, !tbaa !2428
  %4042 = add i64 %4041, -8
  %4043 = inttoptr i64 %4042 to i64*
  store i64 %4037, i64* %4043
  store i64 %4042, i64* %4040, align 8, !tbaa !2428
  %4044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4035, i64* %4044, align 8, !tbaa !2428
  %4045 = load i64, i64* %PC
  %4046 = call %struct.Memory* @ext_4006e0_printf(%struct.State* %0, i64 %4045, %struct.Memory* %1318)
  %4047 = load i64, i64* %RBP
  %4048 = sub i64 %4047, 156
  %4049 = load i32, i32* %EAX
  %4050 = zext i32 %4049 to i64
  %4051 = load i64, i64* %PC
  %4052 = add i64 %4051, 6
  store i64 %4052, i64* %PC
  %4053 = inttoptr i64 %4048 to i32*
  store i32 %4049, i32* %4053
  %4054 = load i64, i64* %PC
  %4055 = sub i64 %4054, 862
  %4056 = load i64, i64* %PC
  %4057 = add i64 %4056, 5
  %4058 = load i64, i64* %PC
  %4059 = add i64 %4058, 5
  store i64 %4059, i64* %PC
  %4060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4061 = load i64, i64* %4060, align 8, !tbaa !2428
  %4062 = add i64 %4061, -8
  %4063 = inttoptr i64 %4062 to i64*
  store i64 %4057, i64* %4063
  store i64 %4062, i64* %4060, align 8, !tbaa !2428
  %4064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4055, i64* %4064, align 8, !tbaa !2428
  %4065 = load i64, i64* %PC
  %4066 = call %struct.Memory* @ext_4006c0_abort(%struct.State* %0, i64 %4065, %struct.Memory* %4046)
  %4067 = load i64, i64* %PC
  %4068 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %4067, %struct.Memory* %4066)
  ret %struct.Memory* %4068
}

; Function Attrs: noinline
define %struct.Memory* @sub_404090___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404090:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401870_cftfsub(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401870:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = load i64, i64* %RBP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  store i64 %47, i64* %RBP, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC
  %53 = sub i64 %50, 112
  store i64 %53, i64* %RSP, align 8, !tbaa !2428
  %54 = icmp ult i64 %50, 112
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %55, i8* %56, align 1, !tbaa !2432
  %57 = trunc i64 %53 to i32
  %58 = and i32 %57, 255
  %59 = call i32 @llvm.ctpop.i32(i32 %58) #17
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = xor i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %62, i8* %63, align 1, !tbaa !2446
  %64 = xor i64 112, %50
  %65 = xor i64 %64, %53
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %68, i8* %69, align 1, !tbaa !2447
  %70 = icmp eq i64 %53, 0
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = lshr i64 %53, 63
  %74 = trunc i64 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %50, 63
  %77 = xor i64 %73, %76
  %78 = add nuw nsw i64 %77, %76
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %80, i8* %81, align 1, !tbaa !2450
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i32, i32* %EDI
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RSI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %RDX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 44
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 7
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  store i32 2, i32* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 4
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i32*
  %111 = load i32, i32* %110
  %112 = sub i32 %111, 8
  %113 = icmp ult i32 %111, 8
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %114, i8* %115, align 1, !tbaa !2432
  %116 = and i32 %112, 255
  %117 = call i32 @llvm.ctpop.i32(i32 %116) #17
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %120, i8* %121, align 1, !tbaa !2446
  %122 = xor i32 %111, 8
  %123 = xor i32 %122, %112
  %124 = lshr i32 %123, 4
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %126, i8* %127, align 1, !tbaa !2447
  %128 = icmp eq i32 %112, 0
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %129, i8* %130, align 1, !tbaa !2448
  %131 = lshr i32 %112, 31
  %132 = trunc i32 %131 to i8
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %132, i8* %133, align 1, !tbaa !2449
  %134 = lshr i32 %111, 31
  %135 = xor i32 %131, %134
  %136 = add nuw nsw i32 %135, %134
  %137 = icmp eq i32 %136, 2
  %138 = zext i1 %137 to i8
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %138, i8* %139, align 1, !tbaa !2450
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 82
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 6
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 6
  store i64 %145, i64* %PC
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %147 = load i8, i8* %146, align 1, !tbaa !2448
  %148 = icmp ne i8 %147, 0
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %150 = load i8, i8* %149, align 1, !tbaa !2449
  %151 = icmp ne i8 %150, 0
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %153 = load i8, i8* %152, align 1, !tbaa !2450
  %154 = icmp ne i8 %153, 0
  %155 = xor i1 %151, %154
  %156 = or i1 %148, %155
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = select i1 %156, i64 %141, i64 %143
  store i64 %159, i64* %158, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_4018e0, label %block_401894

block_401b17:                                     ; preds = %block_4018f6
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 237
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 5
  store i64 %165, i64* %PC
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %163, i64* %166, align 8, !tbaa !2428
  br label %block_401c04

block_4018db:                                     ; preds = %block_4018ab
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 5
  store i64 %170, i64* %PC
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %168, i64* %171, align 8, !tbaa !2428
  br label %block_4018e0

block_401894:                                     ; preds = %block_401870
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 4
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 16
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RSI, align 8, !tbaa !2428
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 24
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189
  store i64 %190, i64* %RDX, align 8, !tbaa !2428
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 4097
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 5
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  store i64 %196, i64* %PC
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %198 = load i64, i64* %197, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %194, i64* %200
  store i64 %199, i64* %197, align 8, !tbaa !2428
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %192, i64* %201, align 8, !tbaa !2428
  %202 = load i64, i64* %PC
  %203 = call %struct.Memory* @sub_4028a0_cft1st_renamed_(%struct.State* %0, i64 %202, %struct.Memory* %2)
  %204 = load i64, i64* %RBP
  %205 = sub i64 %204, 44
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 7
  store i64 %207, i64* %PC
  %208 = inttoptr i64 %205 to i32*
  store i32 8, i32* %208
  br label %block_4018ab

block_4018ba:                                     ; preds = %block_4018ab
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 4
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 3
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %210 to i32*
  %214 = load i32, i32* %213
  %215 = zext i32 %214 to i64
  store i64 %215, i64* %RDI, align 8, !tbaa !2428
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 44
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = inttoptr i64 %217 to i32*
  %221 = load i32, i32* %220
  %222 = zext i32 %221 to i64
  store i64 %222, i64* %RSI, align 8, !tbaa !2428
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RDX, align 8, !tbaa !2428
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 24
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 4
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233
  store i64 %234, i64* %RCX, align 8, !tbaa !2428
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 6760
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 5
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 5
  store i64 %240, i64* %PC
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %242 = load i64, i64* %241, align 8, !tbaa !2428
  %243 = add i64 %242, -8
  %244 = inttoptr i64 %243 to i64*
  store i64 %238, i64* %244
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %236, i64* %245, align 8, !tbaa !2428
  %246 = load i64, i64* %PC
  %247 = call %struct.Memory* @sub_403330_cftmdl_renamed_(%struct.State* %0, i64 %246, %struct.Memory* %MEMORY.0)
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 44
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 3
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i32*
  %253 = load i32, i32* %252
  %254 = zext i32 %253 to i64
  store i64 %254, i64* %RSI, align 8, !tbaa !2428
  %255 = load i64, i64* %RSI
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 3
  store i64 %257, i64* %PC
  %258 = and i64 %255, 4294967295
  %259 = shl i64 %258, 1
  %260 = trunc i64 %259 to i32
  %261 = icmp slt i32 %260, 0
  %262 = shl i32 %260, 1
  %263 = zext i32 %262 to i64
  store i64 %263, i64* %RSI, align 8, !tbaa !2428
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %265 = zext i1 %261 to i8
  store i8 %265, i8* %264, align 1, !tbaa !2451
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %267 = and i32 %262, 254
  %268 = call i32 @llvm.ctpop.i32(i32 %267) #17
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %266, align 1, !tbaa !2451
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %272, align 1, !tbaa !2451
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %274 = icmp eq i32 %262, 0
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %273, align 1, !tbaa !2451
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %277 = lshr i32 %262, 31
  %278 = trunc i32 %277 to i8
  store i8 %278, i8* %276, align 1, !tbaa !2451
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %279, align 1, !tbaa !2451
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 44
  %282 = load i32, i32* %ESI
  %283 = zext i32 %282 to i64
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 3
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %281 to i32*
  store i32 %282, i32* %286
  %287 = load i64, i64* %PC
  %288 = sub i64 %287, 43
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 5
  store i64 %290, i64* %PC
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %288, i64* %291, align 8, !tbaa !2428
  br label %block_4018ab

block_401b2f:                                     ; preds = %block_401b23
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 28
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 3
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i32*
  %297 = load i32, i32* %296
  %298 = zext i32 %297 to i64
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = load i64, i64* %RAX
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 44
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 3
  store i64 %303, i64* %PC
  %304 = trunc i64 %299 to i32
  %305 = inttoptr i64 %301 to i32*
  %306 = load i32, i32* %305
  %307 = add i32 %306, %304
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = icmp ult i32 %307, %304
  %310 = icmp ult i32 %307, %306
  %311 = or i1 %309, %310
  %312 = zext i1 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %312, i8* %313, align 1, !tbaa !2432
  %314 = and i32 %307, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #17
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2446
  %320 = xor i32 %306, %304
  %321 = xor i32 %320, %307
  %322 = lshr i32 %321, 4
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %324, i8* %325, align 1, !tbaa !2447
  %326 = icmp eq i32 %307, 0
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %327, i8* %328, align 1, !tbaa !2448
  %329 = lshr i32 %307, 31
  %330 = trunc i32 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %330, i8* %331, align 1, !tbaa !2449
  %332 = lshr i32 %304, 31
  %333 = lshr i32 %306, 31
  %334 = xor i32 %329, %332
  %335 = xor i32 %329, %333
  %336 = add nuw nsw i32 %334, %335
  %337 = icmp eq i32 %336, 2
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %338, i8* %339, align 1, !tbaa !2450
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 32
  %342 = load i32, i32* %EAX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %341 to i32*
  store i32 %342, i32* %346
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 16
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 4
  store i64 %350, i64* %PC
  %351 = inttoptr i64 %348 to i64*
  %352 = load i64, i64* %351
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %353 = load i64, i64* %RBP
  %354 = sub i64 %353, 28
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i32*
  %358 = load i32, i32* %357
  %359 = sext i32 %358 to i64
  store i64 %359, i64* %RDX, align 8, !tbaa !2428
  %360 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %361 = load i64, i64* %RCX
  %362 = load i64, i64* %RDX
  %363 = mul i64 %362, 8
  %364 = add i64 %363, %361
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to double*
  %368 = load double, double* %367
  %369 = bitcast i8* %360 to double*
  store double %368, double* %369, align 1, !tbaa !2452
  %370 = getelementptr inbounds i8, i8* %360, i64 8
  %371 = bitcast i8* %370 to double*
  store double 0.000000e+00, double* %371, align 1, !tbaa !2452
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 16
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 4
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %373 to i64*
  %377 = load i64, i64* %376
  store i64 %377, i64* %RCX, align 8, !tbaa !2428
  %378 = load i64, i64* %RBP
  %379 = sub i64 %378, 32
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i32*
  %383 = load i32, i32* %382
  %384 = sext i32 %383 to i64
  store i64 %384, i64* %RDX, align 8, !tbaa !2428
  %385 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %386 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %387 = load i64, i64* %RCX
  %388 = load i64, i64* %RDX
  %389 = mul i64 %388, 8
  %390 = add i64 %389, %387
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 5
  store i64 %392, i64* %PC
  %393 = bitcast i8* %386 to double*
  %394 = load double, double* %393, align 1
  %395 = getelementptr inbounds i8, i8* %386, i64 8
  %396 = bitcast i8* %395 to i64*
  %397 = load i64, i64* %396, align 1
  %398 = inttoptr i64 %390 to double*
  %399 = load double, double* %398
  %400 = fsub double %394, %399
  %401 = bitcast i8* %385 to double*
  store double %400, double* %401, align 1, !tbaa !2452
  %402 = getelementptr inbounds i8, i8* %385, i64 8
  %403 = bitcast i8* %402 to i64*
  store i64 %397, i64* %403, align 1, !tbaa !2452
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 56
  %406 = bitcast %union.vec128_t* %XMM0 to i8*
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 5
  store i64 %408, i64* %PC
  %409 = bitcast i8* %406 to double*
  %410 = load double, double* %409, align 1
  %411 = inttoptr i64 %405 to double*
  store double %410, double* %411
  %412 = load i64, i64* %RBP
  %413 = sub i64 %412, 16
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 4
  store i64 %415, i64* %PC
  %416 = inttoptr i64 %413 to i64*
  %417 = load i64, i64* %416
  store i64 %417, i64* %RCX, align 8, !tbaa !2428
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 28
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 3
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  %423 = load i32, i32* %422
  %424 = zext i32 %423 to i64
  store i64 %424, i64* %RAX, align 8, !tbaa !2428
  %425 = load i64, i64* %RAX
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 3
  store i64 %427, i64* %PC
  %428 = trunc i64 %425 to i32
  %429 = add i32 1, %428
  %430 = zext i32 %429 to i64
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = icmp ult i32 %429, %428
  %432 = icmp ult i32 %429, 1
  %433 = or i1 %431, %432
  %434 = zext i1 %433 to i8
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %434, i8* %435, align 1, !tbaa !2432
  %436 = and i32 %429, 255
  %437 = call i32 @llvm.ctpop.i32(i32 %436) #17
  %438 = trunc i32 %437 to i8
  %439 = and i8 %438, 1
  %440 = xor i8 %439, 1
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %440, i8* %441, align 1, !tbaa !2446
  %442 = xor i64 1, %425
  %443 = trunc i64 %442 to i32
  %444 = xor i32 %443, %429
  %445 = lshr i32 %444, 4
  %446 = trunc i32 %445 to i8
  %447 = and i8 %446, 1
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %447, i8* %448, align 1, !tbaa !2447
  %449 = icmp eq i32 %429, 0
  %450 = zext i1 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %450, i8* %451, align 1, !tbaa !2448
  %452 = lshr i32 %429, 31
  %453 = trunc i32 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %453, i8* %454, align 1, !tbaa !2449
  %455 = lshr i32 %428, 31
  %456 = xor i32 %452, %455
  %457 = add nuw nsw i32 %456, %452
  %458 = icmp eq i32 %457, 2
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %459, i8* %460, align 1, !tbaa !2450
  %461 = load i32, i32* %EAX
  %462 = zext i32 %461 to i64
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 3
  store i64 %464, i64* %PC
  %465 = shl i64 %462, 32
  %466 = ashr exact i64 %465, 32
  store i64 %466, i64* %RDX, align 8, !tbaa !2428
  %467 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %468 = load i64, i64* %RCX
  %469 = load i64, i64* %RDX
  %470 = mul i64 %469, 8
  %471 = add i64 %470, %468
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 5
  store i64 %473, i64* %PC
  %474 = inttoptr i64 %471 to double*
  %475 = load double, double* %474
  %476 = bitcast i8* %467 to double*
  store double %475, double* %476, align 1, !tbaa !2452
  %477 = getelementptr inbounds i8, i8* %467, i64 8
  %478 = bitcast i8* %477 to double*
  store double 0.000000e+00, double* %478, align 1, !tbaa !2452
  %479 = load i64, i64* %RBP
  %480 = sub i64 %479, 16
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 4
  store i64 %482, i64* %PC
  %483 = inttoptr i64 %480 to i64*
  %484 = load i64, i64* %483
  store i64 %484, i64* %RCX, align 8, !tbaa !2428
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 32
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 3
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i32*
  %490 = load i32, i32* %489
  %491 = zext i32 %490 to i64
  store i64 %491, i64* %RAX, align 8, !tbaa !2428
  %492 = load i64, i64* %RAX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 3
  store i64 %494, i64* %PC
  %495 = trunc i64 %492 to i32
  %496 = add i32 1, %495
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp ult i32 %496, %495
  %499 = icmp ult i32 %496, 1
  %500 = or i1 %498, %499
  %501 = zext i1 %500 to i8
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %501, i8* %502, align 1, !tbaa !2432
  %503 = and i32 %496, 255
  %504 = call i32 @llvm.ctpop.i32(i32 %503) #17
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %507, i8* %508, align 1, !tbaa !2446
  %509 = xor i64 1, %492
  %510 = trunc i64 %509 to i32
  %511 = xor i32 %510, %496
  %512 = lshr i32 %511, 4
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %514, i8* %515, align 1, !tbaa !2447
  %516 = icmp eq i32 %496, 0
  %517 = zext i1 %516 to i8
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %517, i8* %518, align 1, !tbaa !2448
  %519 = lshr i32 %496, 31
  %520 = trunc i32 %519 to i8
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %520, i8* %521, align 1, !tbaa !2449
  %522 = lshr i32 %495, 31
  %523 = xor i32 %519, %522
  %524 = add nuw nsw i32 %523, %519
  %525 = icmp eq i32 %524, 2
  %526 = zext i1 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %526, i8* %527, align 1, !tbaa !2450
  %528 = load i32, i32* %EAX
  %529 = zext i32 %528 to i64
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 3
  store i64 %531, i64* %PC
  %532 = shl i64 %529, 32
  %533 = ashr exact i64 %532, 32
  store i64 %533, i64* %RDX, align 8, !tbaa !2428
  %534 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %535 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %536 = load i64, i64* %RCX
  %537 = load i64, i64* %RDX
  %538 = mul i64 %537, 8
  %539 = add i64 %538, %536
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 5
  store i64 %541, i64* %PC
  %542 = bitcast i8* %535 to double*
  %543 = load double, double* %542, align 1
  %544 = getelementptr inbounds i8, i8* %535, i64 8
  %545 = bitcast i8* %544 to i64*
  %546 = load i64, i64* %545, align 1
  %547 = inttoptr i64 %539 to double*
  %548 = load double, double* %547
  %549 = fsub double %543, %548
  %550 = bitcast i8* %534 to double*
  store double %549, double* %550, align 1, !tbaa !2452
  %551 = getelementptr inbounds i8, i8* %534, i64 8
  %552 = bitcast i8* %551 to i64*
  store i64 %546, i64* %552, align 1, !tbaa !2452
  %553 = load i64, i64* %RBP
  %554 = sub i64 %553, 64
  %555 = bitcast %union.vec128_t* %XMM0 to i8*
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 5
  store i64 %557, i64* %PC
  %558 = bitcast i8* %555 to double*
  %559 = load double, double* %558, align 1
  %560 = inttoptr i64 %554 to double*
  store double %559, double* %560
  %561 = load i64, i64* %RBP
  %562 = sub i64 %561, 16
  %563 = load i64, i64* %PC
  %564 = add i64 %563, 4
  store i64 %564, i64* %PC
  %565 = inttoptr i64 %562 to i64*
  %566 = load i64, i64* %565
  store i64 %566, i64* %RCX, align 8, !tbaa !2428
  %567 = load i64, i64* %RBP
  %568 = sub i64 %567, 32
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 4
  store i64 %570, i64* %PC
  %571 = inttoptr i64 %568 to i32*
  %572 = load i32, i32* %571
  %573 = sext i32 %572 to i64
  store i64 %573, i64* %RDX, align 8, !tbaa !2428
  %574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %575 = load i64, i64* %RCX
  %576 = load i64, i64* %RDX
  %577 = mul i64 %576, 8
  %578 = add i64 %577, %575
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to double*
  %582 = load double, double* %581
  %583 = bitcast i8* %574 to double*
  store double %582, double* %583, align 1, !tbaa !2452
  %584 = getelementptr inbounds i8, i8* %574, i64 8
  %585 = bitcast i8* %584 to double*
  store double 0.000000e+00, double* %585, align 1, !tbaa !2452
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 16
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RCX, align 8, !tbaa !2428
  %592 = load i64, i64* %RBP
  %593 = sub i64 %592, 28
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 4
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i32*
  %597 = load i32, i32* %596
  %598 = sext i32 %597 to i64
  store i64 %598, i64* %RDX, align 8, !tbaa !2428
  %599 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %600 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %601 = load i64, i64* %RCX
  %602 = load i64, i64* %RDX
  %603 = mul i64 %602, 8
  %604 = add i64 %603, %601
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC
  %607 = bitcast i8* %600 to double*
  %608 = load double, double* %607, align 1
  %609 = getelementptr inbounds i8, i8* %600, i64 8
  %610 = bitcast i8* %609 to i64*
  %611 = load i64, i64* %610, align 1
  %612 = inttoptr i64 %604 to double*
  %613 = load double, double* %612
  %614 = fadd double %608, %613
  %615 = bitcast i8* %599 to double*
  store double %614, double* %615, align 1, !tbaa !2452
  %616 = getelementptr inbounds i8, i8* %599, i64 8
  %617 = bitcast i8* %616 to i64*
  store i64 %611, i64* %617, align 1, !tbaa !2452
  %618 = load i64, i64* %RCX
  %619 = load i64, i64* %RDX
  %620 = mul i64 %619, 8
  %621 = add i64 %620, %618
  %622 = bitcast %union.vec128_t* %XMM0 to i8*
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 5
  store i64 %624, i64* %PC
  %625 = bitcast i8* %622 to double*
  %626 = load double, double* %625, align 1
  %627 = inttoptr i64 %621 to double*
  store double %626, double* %627
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 16
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 4
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i64*
  %633 = load i64, i64* %632
  store i64 %633, i64* %RCX, align 8, !tbaa !2428
  %634 = load i64, i64* %RBP
  %635 = sub i64 %634, 32
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 3
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %635 to i32*
  %639 = load i32, i32* %638
  %640 = zext i32 %639 to i64
  store i64 %640, i64* %RAX, align 8, !tbaa !2428
  %641 = load i64, i64* %RAX
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 3
  store i64 %643, i64* %PC
  %644 = trunc i64 %641 to i32
  %645 = add i32 1, %644
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = icmp ult i32 %645, %644
  %648 = icmp ult i32 %645, 1
  %649 = or i1 %647, %648
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %650, i8* %651, align 1, !tbaa !2432
  %652 = and i32 %645, 255
  %653 = call i32 @llvm.ctpop.i32(i32 %652) #17
  %654 = trunc i32 %653 to i8
  %655 = and i8 %654, 1
  %656 = xor i8 %655, 1
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %656, i8* %657, align 1, !tbaa !2446
  %658 = xor i64 1, %641
  %659 = trunc i64 %658 to i32
  %660 = xor i32 %659, %645
  %661 = lshr i32 %660, 4
  %662 = trunc i32 %661 to i8
  %663 = and i8 %662, 1
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %663, i8* %664, align 1, !tbaa !2447
  %665 = icmp eq i32 %645, 0
  %666 = zext i1 %665 to i8
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %666, i8* %667, align 1, !tbaa !2448
  %668 = lshr i32 %645, 31
  %669 = trunc i32 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %669, i8* %670, align 1, !tbaa !2449
  %671 = lshr i32 %644, 31
  %672 = xor i32 %668, %671
  %673 = add nuw nsw i32 %672, %668
  %674 = icmp eq i32 %673, 2
  %675 = zext i1 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %675, i8* %676, align 1, !tbaa !2450
  %677 = load i32, i32* %EAX
  %678 = zext i32 %677 to i64
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 3
  store i64 %680, i64* %PC
  %681 = shl i64 %678, 32
  %682 = ashr exact i64 %681, 32
  store i64 %682, i64* %RDX, align 8, !tbaa !2428
  %683 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %684 = load i64, i64* %RCX
  %685 = load i64, i64* %RDX
  %686 = mul i64 %685, 8
  %687 = add i64 %686, %684
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 5
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %687 to double*
  %691 = load double, double* %690
  %692 = bitcast i8* %683 to double*
  store double %691, double* %692, align 1, !tbaa !2452
  %693 = getelementptr inbounds i8, i8* %683, i64 8
  %694 = bitcast i8* %693 to double*
  store double 0.000000e+00, double* %694, align 1, !tbaa !2452
  %695 = load i64, i64* %RBP
  %696 = sub i64 %695, 16
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 4
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i64*
  %700 = load i64, i64* %699
  store i64 %700, i64* %RCX, align 8, !tbaa !2428
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 28
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 3
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = load i64, i64* %RAX
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 3
  store i64 %710, i64* %PC
  %711 = trunc i64 %708 to i32
  %712 = add i32 1, %711
  %713 = zext i32 %712 to i64
  store i64 %713, i64* %RAX, align 8, !tbaa !2428
  %714 = icmp ult i32 %712, %711
  %715 = icmp ult i32 %712, 1
  %716 = or i1 %714, %715
  %717 = zext i1 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %717, i8* %718, align 1, !tbaa !2432
  %719 = and i32 %712, 255
  %720 = call i32 @llvm.ctpop.i32(i32 %719) #17
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %723, i8* %724, align 1, !tbaa !2446
  %725 = xor i64 1, %708
  %726 = trunc i64 %725 to i32
  %727 = xor i32 %726, %712
  %728 = lshr i32 %727, 4
  %729 = trunc i32 %728 to i8
  %730 = and i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %730, i8* %731, align 1, !tbaa !2447
  %732 = icmp eq i32 %712, 0
  %733 = zext i1 %732 to i8
  %734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %733, i8* %734, align 1, !tbaa !2448
  %735 = lshr i32 %712, 31
  %736 = trunc i32 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %736, i8* %737, align 1, !tbaa !2449
  %738 = lshr i32 %711, 31
  %739 = xor i32 %735, %738
  %740 = add nuw nsw i32 %739, %735
  %741 = icmp eq i32 %740, 2
  %742 = zext i1 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %742, i8* %743, align 1, !tbaa !2450
  %744 = load i32, i32* %EAX
  %745 = zext i32 %744 to i64
  %746 = load i64, i64* %PC
  %747 = add i64 %746, 3
  store i64 %747, i64* %PC
  %748 = shl i64 %745, 32
  %749 = ashr exact i64 %748, 32
  store i64 %749, i64* %RDX, align 8, !tbaa !2428
  %750 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %751 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %752 = load i64, i64* %RCX
  %753 = load i64, i64* %RDX
  %754 = mul i64 %753, 8
  %755 = add i64 %754, %752
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = bitcast i8* %751 to double*
  %759 = load double, double* %758, align 1
  %760 = getelementptr inbounds i8, i8* %751, i64 8
  %761 = bitcast i8* %760 to i64*
  %762 = load i64, i64* %761, align 1
  %763 = inttoptr i64 %755 to double*
  %764 = load double, double* %763
  %765 = fadd double %759, %764
  %766 = bitcast i8* %750 to double*
  store double %765, double* %766, align 1, !tbaa !2452
  %767 = getelementptr inbounds i8, i8* %750, i64 8
  %768 = bitcast i8* %767 to i64*
  store i64 %762, i64* %768, align 1, !tbaa !2452
  %769 = load i64, i64* %RCX
  %770 = load i64, i64* %RDX
  %771 = mul i64 %770, 8
  %772 = add i64 %771, %769
  %773 = bitcast %union.vec128_t* %XMM0 to i8*
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 5
  store i64 %775, i64* %PC
  %776 = bitcast i8* %773 to double*
  %777 = load double, double* %776, align 1
  %778 = inttoptr i64 %772 to double*
  store double %777, double* %778
  %779 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 56
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 5
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to double*
  %785 = load double, double* %784
  %786 = bitcast i8* %779 to double*
  store double %785, double* %786, align 1, !tbaa !2452
  %787 = getelementptr inbounds i8, i8* %779, i64 8
  %788 = bitcast i8* %787 to double*
  store double 0.000000e+00, double* %788, align 1, !tbaa !2452
  %789 = load i64, i64* %RBP
  %790 = sub i64 %789, 16
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = inttoptr i64 %790 to i64*
  %794 = load i64, i64* %793
  store i64 %794, i64* %RCX, align 8, !tbaa !2428
  %795 = load i64, i64* %RBP
  %796 = sub i64 %795, 32
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 4
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %796 to i32*
  %800 = load i32, i32* %799
  %801 = sext i32 %800 to i64
  store i64 %801, i64* %RDX, align 8, !tbaa !2428
  %802 = load i64, i64* %RCX
  %803 = load i64, i64* %RDX
  %804 = mul i64 %803, 8
  %805 = add i64 %804, %802
  %806 = bitcast %union.vec128_t* %XMM0 to i8*
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 5
  store i64 %808, i64* %PC
  %809 = bitcast i8* %806 to double*
  %810 = load double, double* %809, align 1
  %811 = inttoptr i64 %805 to double*
  store double %810, double* %811
  %812 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 64
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 5
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to double*
  %818 = load double, double* %817
  %819 = bitcast i8* %812 to double*
  store double %818, double* %819, align 1, !tbaa !2452
  %820 = getelementptr inbounds i8, i8* %812, i64 8
  %821 = bitcast i8* %820 to double*
  store double 0.000000e+00, double* %821, align 1, !tbaa !2452
  %822 = load i64, i64* %RBP
  %823 = sub i64 %822, 16
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 4
  store i64 %825, i64* %PC
  %826 = inttoptr i64 %823 to i64*
  %827 = load i64, i64* %826
  store i64 %827, i64* %RCX, align 8, !tbaa !2428
  %828 = load i64, i64* %RBP
  %829 = sub i64 %828, 32
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 3
  store i64 %831, i64* %PC
  %832 = inttoptr i64 %829 to i32*
  %833 = load i32, i32* %832
  %834 = zext i32 %833 to i64
  store i64 %834, i64* %RAX, align 8, !tbaa !2428
  %835 = load i64, i64* %RAX
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 3
  store i64 %837, i64* %PC
  %838 = trunc i64 %835 to i32
  %839 = add i32 1, %838
  %840 = zext i32 %839 to i64
  store i64 %840, i64* %RAX, align 8, !tbaa !2428
  %841 = icmp ult i32 %839, %838
  %842 = icmp ult i32 %839, 1
  %843 = or i1 %841, %842
  %844 = zext i1 %843 to i8
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %844, i8* %845, align 1, !tbaa !2432
  %846 = and i32 %839, 255
  %847 = call i32 @llvm.ctpop.i32(i32 %846) #17
  %848 = trunc i32 %847 to i8
  %849 = and i8 %848, 1
  %850 = xor i8 %849, 1
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %850, i8* %851, align 1, !tbaa !2446
  %852 = xor i64 1, %835
  %853 = trunc i64 %852 to i32
  %854 = xor i32 %853, %839
  %855 = lshr i32 %854, 4
  %856 = trunc i32 %855 to i8
  %857 = and i8 %856, 1
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %857, i8* %858, align 1, !tbaa !2447
  %859 = icmp eq i32 %839, 0
  %860 = zext i1 %859 to i8
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %860, i8* %861, align 1, !tbaa !2448
  %862 = lshr i32 %839, 31
  %863 = trunc i32 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %863, i8* %864, align 1, !tbaa !2449
  %865 = lshr i32 %838, 31
  %866 = xor i32 %862, %865
  %867 = add nuw nsw i32 %866, %862
  %868 = icmp eq i32 %867, 2
  %869 = zext i1 %868 to i8
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %869, i8* %870, align 1, !tbaa !2450
  %871 = load i32, i32* %EAX
  %872 = zext i32 %871 to i64
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 3
  store i64 %874, i64* %PC
  %875 = shl i64 %872, 32
  %876 = ashr exact i64 %875, 32
  store i64 %876, i64* %RDX, align 8, !tbaa !2428
  %877 = load i64, i64* %RCX
  %878 = load i64, i64* %RDX
  %879 = mul i64 %878, 8
  %880 = add i64 %879, %877
  %881 = bitcast %union.vec128_t* %XMM0 to i8*
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 5
  store i64 %883, i64* %PC
  %884 = bitcast i8* %881 to double*
  %885 = load double, double* %884, align 1
  %886 = inttoptr i64 %880 to double*
  store double %885, double* %886
  %887 = load i64, i64* %RBP
  %888 = sub i64 %887, 28
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 3
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %888 to i32*
  %892 = load i32, i32* %891
  %893 = zext i32 %892 to i64
  store i64 %893, i64* %RAX, align 8, !tbaa !2428
  %894 = load i64, i64* %RAX
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC
  %897 = trunc i64 %894 to i32
  %898 = add i32 2, %897
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = icmp ult i32 %898, %897
  %901 = icmp ult i32 %898, 2
  %902 = or i1 %900, %901
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %903, i8* %904, align 1, !tbaa !2432
  %905 = and i32 %898, 255
  %906 = call i32 @llvm.ctpop.i32(i32 %905) #17
  %907 = trunc i32 %906 to i8
  %908 = and i8 %907, 1
  %909 = xor i8 %908, 1
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %909, i8* %910, align 1, !tbaa !2446
  %911 = xor i64 2, %894
  %912 = trunc i64 %911 to i32
  %913 = xor i32 %912, %898
  %914 = lshr i32 %913, 4
  %915 = trunc i32 %914 to i8
  %916 = and i8 %915, 1
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %916, i8* %917, align 1, !tbaa !2447
  %918 = icmp eq i32 %898, 0
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %919, i8* %920, align 1, !tbaa !2448
  %921 = lshr i32 %898, 31
  %922 = trunc i32 %921 to i8
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %922, i8* %923, align 1, !tbaa !2449
  %924 = lshr i32 %897, 31
  %925 = xor i32 %921, %924
  %926 = add nuw nsw i32 %925, %921
  %927 = icmp eq i32 %926, 2
  %928 = zext i1 %927 to i8
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %928, i8* %929, align 1, !tbaa !2450
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 28
  %932 = load i32, i32* %EAX
  %933 = zext i32 %932 to i64
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 3
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %931 to i32*
  store i32 %932, i32* %936
  %937 = load i64, i64* %PC
  %938 = sub i64 %937, 215
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 5
  store i64 %940, i64* %PC
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %938, i64* %941, align 8, !tbaa !2428
  br label %block_401b23

block_4018ab:                                     ; preds = %block_4018ba, %block_401894
  %MEMORY.0 = phi %struct.Memory* [ %203, %block_401894 ], [ %247, %block_4018ba ]
  %942 = load i64, i64* %RBP
  %943 = sub i64 %942, 44
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 3
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %943 to i32*
  %947 = load i32, i32* %946
  %948 = zext i32 %947 to i64
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = load i64, i64* %RAX
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 3
  store i64 %951, i64* %PC
  %952 = and i64 %949, 4294967295
  %953 = shl i64 %952, 1
  %954 = trunc i64 %953 to i32
  %955 = icmp slt i32 %954, 0
  %956 = shl i32 %954, 1
  %957 = zext i32 %956 to i64
  store i64 %957, i64* %RAX, align 8, !tbaa !2428
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %959 = zext i1 %955 to i8
  store i8 %959, i8* %958, align 1, !tbaa !2451
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %961 = and i32 %956, 254
  %962 = call i32 @llvm.ctpop.i32(i32 %961) #17
  %963 = trunc i32 %962 to i8
  %964 = and i8 %963, 1
  %965 = xor i8 %964, 1
  store i8 %965, i8* %960, align 1, !tbaa !2451
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %966, align 1, !tbaa !2451
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %968 = icmp eq i32 %956, 0
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %967, align 1, !tbaa !2451
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %971 = lshr i32 %956, 31
  %972 = trunc i32 %971 to i8
  store i8 %972, i8* %970, align 1, !tbaa !2451
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %973, align 1, !tbaa !2451
  %974 = load i32, i32* %EAX
  %975 = zext i32 %974 to i64
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 4
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 3
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i32*
  %981 = load i32, i32* %980
  %982 = sub i32 %974, %981
  %983 = icmp ult i32 %974, %981
  %984 = zext i1 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %984, i8* %985, align 1, !tbaa !2432
  %986 = and i32 %982, 255
  %987 = call i32 @llvm.ctpop.i32(i32 %986) #17
  %988 = trunc i32 %987 to i8
  %989 = and i8 %988, 1
  %990 = xor i8 %989, 1
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %990, i8* %991, align 1, !tbaa !2446
  %992 = xor i32 %981, %974
  %993 = xor i32 %992, %982
  %994 = lshr i32 %993, 4
  %995 = trunc i32 %994 to i8
  %996 = and i8 %995, 1
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %996, i8* %997, align 1, !tbaa !2447
  %998 = icmp eq i32 %982, 0
  %999 = zext i1 %998 to i8
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %999, i8* %1000, align 1, !tbaa !2448
  %1001 = lshr i32 %982, 31
  %1002 = trunc i32 %1001 to i8
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1002, i8* %1003, align 1, !tbaa !2449
  %1004 = lshr i32 %974, 31
  %1005 = lshr i32 %981, 31
  %1006 = xor i32 %1005, %1004
  %1007 = xor i32 %1001, %1004
  %1008 = add nuw nsw i32 %1007, %1006
  %1009 = icmp eq i32 %1008, 2
  %1010 = zext i1 %1009 to i8
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1010, i8* %1011, align 1, !tbaa !2450
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 39
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 6
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 6
  store i64 %1017, i64* %PC
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1019 = load i8, i8* %1018, align 1, !tbaa !2449
  %1020 = icmp ne i8 %1019, 0
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1022 = load i8, i8* %1021, align 1, !tbaa !2450
  %1023 = icmp ne i8 %1022, 0
  %1024 = xor i1 %1020, %1023
  %1025 = xor i1 %1024, true
  %1026 = zext i1 %1025 to i8
  store i8 %1026, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1028 = select i1 %1024, i64 %1015, i64 %1013
  store i64 %1028, i64* %1027, align 8, !tbaa !2428
  %1029 = load i8, i8* %BRANCH_TAKEN
  %1030 = icmp eq i8 %1029, 1
  br i1 %1030, label %block_4018db, label %block_4018ba

block_4018f6:                                     ; preds = %block_4018e0, %block_401902
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_4018e0 ], [ %MEMORY.1, %block_401902 ]
  %1031 = load i64, i64* %RBP
  %1032 = sub i64 %1031, 28
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 3
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1032 to i32*
  %1036 = load i32, i32* %1035
  %1037 = zext i32 %1036 to i64
  store i64 %1037, i64* %RAX, align 8, !tbaa !2428
  %1038 = load i32, i32* %EAX
  %1039 = zext i32 %1038 to i64
  %1040 = load i64, i64* %RBP
  %1041 = sub i64 %1040, 44
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 3
  store i64 %1043, i64* %PC
  %1044 = inttoptr i64 %1041 to i32*
  %1045 = load i32, i32* %1044
  %1046 = sub i32 %1038, %1045
  %1047 = icmp ult i32 %1038, %1045
  %1048 = zext i1 %1047 to i8
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1048, i8* %1049, align 1, !tbaa !2432
  %1050 = and i32 %1046, 255
  %1051 = call i32 @llvm.ctpop.i32(i32 %1050) #17
  %1052 = trunc i32 %1051 to i8
  %1053 = and i8 %1052, 1
  %1054 = xor i8 %1053, 1
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1054, i8* %1055, align 1, !tbaa !2446
  %1056 = xor i32 %1045, %1038
  %1057 = xor i32 %1056, %1046
  %1058 = lshr i32 %1057, 4
  %1059 = trunc i32 %1058 to i8
  %1060 = and i8 %1059, 1
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1060, i8* %1061, align 1, !tbaa !2447
  %1062 = icmp eq i32 %1046, 0
  %1063 = zext i1 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1063, i8* %1064, align 1, !tbaa !2448
  %1065 = lshr i32 %1046, 31
  %1066 = trunc i32 %1065 to i8
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1066, i8* %1067, align 1, !tbaa !2449
  %1068 = lshr i32 %1038, 31
  %1069 = lshr i32 %1045, 31
  %1070 = xor i32 %1069, %1068
  %1071 = xor i32 %1065, %1068
  %1072 = add nuw nsw i32 %1071, %1070
  %1073 = icmp eq i32 %1072, 2
  %1074 = zext i1 %1073 to i8
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1074, i8* %1075, align 1, !tbaa !2450
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 539
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 6
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 6
  store i64 %1081, i64* %PC
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1083 = load i8, i8* %1082, align 1, !tbaa !2449
  %1084 = icmp ne i8 %1083, 0
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1086 = load i8, i8* %1085, align 1, !tbaa !2450
  %1087 = icmp ne i8 %1086, 0
  %1088 = xor i1 %1084, %1087
  %1089 = xor i1 %1088, true
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1092 = select i1 %1088, i64 %1079, i64 %1077
  store i64 %1092, i64* %1091, align 8, !tbaa !2428
  %1093 = load i8, i8* %BRANCH_TAKEN
  %1094 = icmp eq i8 %1093, 1
  br i1 %1094, label %block_401b17, label %block_401902

block_401c04:                                     ; preds = %block_401bff, %block_401b17
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_401bff ], [ %MEMORY.1, %block_401b17 ]
  %1095 = load i64, i64* %RSP
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 4
  store i64 %1097, i64* %PC
  %1098 = add i64 112, %1095
  store i64 %1098, i64* %RSP, align 8, !tbaa !2428
  %1099 = icmp ult i64 %1098, %1095
  %1100 = icmp ult i64 %1098, 112
  %1101 = or i1 %1099, %1100
  %1102 = zext i1 %1101 to i8
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1102, i8* %1103, align 1, !tbaa !2432
  %1104 = trunc i64 %1098 to i32
  %1105 = and i32 %1104, 255
  %1106 = call i32 @llvm.ctpop.i32(i32 %1105) #17
  %1107 = trunc i32 %1106 to i8
  %1108 = and i8 %1107, 1
  %1109 = xor i8 %1108, 1
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1109, i8* %1110, align 1, !tbaa !2446
  %1111 = xor i64 112, %1095
  %1112 = xor i64 %1111, %1098
  %1113 = lshr i64 %1112, 4
  %1114 = trunc i64 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1115, i8* %1116, align 1, !tbaa !2447
  %1117 = icmp eq i64 %1098, 0
  %1118 = zext i1 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1118, i8* %1119, align 1, !tbaa !2448
  %1120 = lshr i64 %1098, 63
  %1121 = trunc i64 %1120 to i8
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1121, i8* %1122, align 1, !tbaa !2449
  %1123 = lshr i64 %1095, 63
  %1124 = xor i64 %1120, %1123
  %1125 = add nuw nsw i64 %1124, %1120
  %1126 = icmp eq i64 %1125, 2
  %1127 = zext i1 %1126 to i8
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1127, i8* %1128, align 1, !tbaa !2450
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 1
  store i64 %1130, i64* %PC
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1132 = load i64, i64* %1131, align 8, !tbaa !2428
  %1133 = add i64 %1132, 8
  %1134 = inttoptr i64 %1132 to i64*
  %1135 = load i64, i64* %1134
  store i64 %1135, i64* %RBP, align 8, !tbaa !2428
  store i64 %1133, i64* %1131, align 8, !tbaa !2428
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 1
  store i64 %1137, i64* %PC
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1140 = load i64, i64* %1139, align 8, !tbaa !2428
  %1141 = inttoptr i64 %1140 to i64*
  %1142 = load i64, i64* %1141
  store i64 %1142, i64* %1138, align 8, !tbaa !2428
  %1143 = add i64 %1140, 8
  store i64 %1143, i64* %1139, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_401b23:                                     ; preds = %block_4018e0, %block_401b2f
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_4018e0 ], [ %MEMORY.3, %block_401b2f ]
  %1144 = load i64, i64* %RBP
  %1145 = sub i64 %1144, 28
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 3
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1145 to i32*
  %1149 = load i32, i32* %1148
  %1150 = zext i32 %1149 to i64
  store i64 %1150, i64* %RAX, align 8, !tbaa !2428
  %1151 = load i32, i32* %EAX
  %1152 = zext i32 %1151 to i64
  %1153 = load i64, i64* %RBP
  %1154 = sub i64 %1153, 44
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 3
  store i64 %1156, i64* %PC
  %1157 = inttoptr i64 %1154 to i32*
  %1158 = load i32, i32* %1157
  %1159 = sub i32 %1151, %1158
  %1160 = icmp ult i32 %1151, %1158
  %1161 = zext i1 %1160 to i8
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1161, i8* %1162, align 1, !tbaa !2432
  %1163 = and i32 %1159, 255
  %1164 = call i32 @llvm.ctpop.i32(i32 %1163) #17
  %1165 = trunc i32 %1164 to i8
  %1166 = and i8 %1165, 1
  %1167 = xor i8 %1166, 1
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1167, i8* %1168, align 1, !tbaa !2446
  %1169 = xor i32 %1158, %1151
  %1170 = xor i32 %1169, %1159
  %1171 = lshr i32 %1170, 4
  %1172 = trunc i32 %1171 to i8
  %1173 = and i8 %1172, 1
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1173, i8* %1174, align 1, !tbaa !2447
  %1175 = icmp eq i32 %1159, 0
  %1176 = zext i1 %1175 to i8
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1176, i8* %1177, align 1, !tbaa !2448
  %1178 = lshr i32 %1159, 31
  %1179 = trunc i32 %1178 to i8
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1179, i8* %1180, align 1, !tbaa !2449
  %1181 = lshr i32 %1151, 31
  %1182 = lshr i32 %1158, 31
  %1183 = xor i32 %1182, %1181
  %1184 = xor i32 %1178, %1181
  %1185 = add nuw nsw i32 %1184, %1183
  %1186 = icmp eq i32 %1185, 2
  %1187 = zext i1 %1186 to i8
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1187, i8* %1188, align 1, !tbaa !2450
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 214
  %1191 = load i64, i64* %PC
  %1192 = add i64 %1191, 6
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 6
  store i64 %1194, i64* %PC
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1196 = load i8, i8* %1195, align 1, !tbaa !2449
  %1197 = icmp ne i8 %1196, 0
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1199 = load i8, i8* %1198, align 1, !tbaa !2450
  %1200 = icmp ne i8 %1199, 0
  %1201 = xor i1 %1197, %1200
  %1202 = xor i1 %1201, true
  %1203 = zext i1 %1202 to i8
  store i8 %1203, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1205 = select i1 %1201, i64 %1192, i64 %1190
  store i64 %1205, i64* %1204, align 8, !tbaa !2428
  %1206 = load i8, i8* %BRANCH_TAKEN
  %1207 = icmp eq i8 %1206, 1
  br i1 %1207, label %block_401bff, label %block_401b2f

block_401bff:                                     ; preds = %block_401b23
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 5
  %1210 = load i64, i64* %PC
  %1211 = add i64 %1210, 5
  store i64 %1211, i64* %PC
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1209, i64* %1212, align 8, !tbaa !2428
  br label %block_401c04

block_401902:                                     ; preds = %block_4018f6
  %1213 = load i64, i64* %RBP
  %1214 = sub i64 %1213, 28
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 3
  store i64 %1216, i64* %PC
  %1217 = inttoptr i64 %1214 to i32*
  %1218 = load i32, i32* %1217
  %1219 = zext i32 %1218 to i64
  store i64 %1219, i64* %RAX, align 8, !tbaa !2428
  %1220 = load i64, i64* %RAX
  %1221 = load i64, i64* %RBP
  %1222 = sub i64 %1221, 44
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 3
  store i64 %1224, i64* %PC
  %1225 = trunc i64 %1220 to i32
  %1226 = inttoptr i64 %1222 to i32*
  %1227 = load i32, i32* %1226
  %1228 = add i32 %1227, %1225
  %1229 = zext i32 %1228 to i64
  store i64 %1229, i64* %RAX, align 8, !tbaa !2428
  %1230 = icmp ult i32 %1228, %1225
  %1231 = icmp ult i32 %1228, %1227
  %1232 = or i1 %1230, %1231
  %1233 = zext i1 %1232 to i8
  %1234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1233, i8* %1234, align 1, !tbaa !2432
  %1235 = and i32 %1228, 255
  %1236 = call i32 @llvm.ctpop.i32(i32 %1235) #17
  %1237 = trunc i32 %1236 to i8
  %1238 = and i8 %1237, 1
  %1239 = xor i8 %1238, 1
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1239, i8* %1240, align 1, !tbaa !2446
  %1241 = xor i32 %1227, %1225
  %1242 = xor i32 %1241, %1228
  %1243 = lshr i32 %1242, 4
  %1244 = trunc i32 %1243 to i8
  %1245 = and i8 %1244, 1
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1245, i8* %1246, align 1, !tbaa !2447
  %1247 = icmp eq i32 %1228, 0
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1248, i8* %1249, align 1, !tbaa !2448
  %1250 = lshr i32 %1228, 31
  %1251 = trunc i32 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1251, i8* %1252, align 1, !tbaa !2449
  %1253 = lshr i32 %1225, 31
  %1254 = lshr i32 %1227, 31
  %1255 = xor i32 %1250, %1253
  %1256 = xor i32 %1250, %1254
  %1257 = add nuw nsw i32 %1255, %1256
  %1258 = icmp eq i32 %1257, 2
  %1259 = zext i1 %1258 to i8
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1259, i8* %1260, align 1, !tbaa !2450
  %1261 = load i64, i64* %RBP
  %1262 = sub i64 %1261, 32
  %1263 = load i32, i32* %EAX
  %1264 = zext i32 %1263 to i64
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 3
  store i64 %1266, i64* %PC
  %1267 = inttoptr i64 %1262 to i32*
  store i32 %1263, i32* %1267
  %1268 = load i64, i64* %RBP
  %1269 = sub i64 %1268, 32
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 3
  store i64 %1271, i64* %PC
  %1272 = inttoptr i64 %1269 to i32*
  %1273 = load i32, i32* %1272
  %1274 = zext i32 %1273 to i64
  store i64 %1274, i64* %RAX, align 8, !tbaa !2428
  %1275 = load i64, i64* %RAX
  %1276 = load i64, i64* %RBP
  %1277 = sub i64 %1276, 44
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 3
  store i64 %1279, i64* %PC
  %1280 = trunc i64 %1275 to i32
  %1281 = inttoptr i64 %1277 to i32*
  %1282 = load i32, i32* %1281
  %1283 = add i32 %1282, %1280
  %1284 = zext i32 %1283 to i64
  store i64 %1284, i64* %RAX, align 8, !tbaa !2428
  %1285 = icmp ult i32 %1283, %1280
  %1286 = icmp ult i32 %1283, %1282
  %1287 = or i1 %1285, %1286
  %1288 = zext i1 %1287 to i8
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1288, i8* %1289, align 1, !tbaa !2432
  %1290 = and i32 %1283, 255
  %1291 = call i32 @llvm.ctpop.i32(i32 %1290) #17
  %1292 = trunc i32 %1291 to i8
  %1293 = and i8 %1292, 1
  %1294 = xor i8 %1293, 1
  %1295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1294, i8* %1295, align 1, !tbaa !2446
  %1296 = xor i32 %1282, %1280
  %1297 = xor i32 %1296, %1283
  %1298 = lshr i32 %1297, 4
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1300, i8* %1301, align 1, !tbaa !2447
  %1302 = icmp eq i32 %1283, 0
  %1303 = zext i1 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1303, i8* %1304, align 1, !tbaa !2448
  %1305 = lshr i32 %1283, 31
  %1306 = trunc i32 %1305 to i8
  %1307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1306, i8* %1307, align 1, !tbaa !2449
  %1308 = lshr i32 %1280, 31
  %1309 = lshr i32 %1282, 31
  %1310 = xor i32 %1305, %1308
  %1311 = xor i32 %1305, %1309
  %1312 = add nuw nsw i32 %1310, %1311
  %1313 = icmp eq i32 %1312, 2
  %1314 = zext i1 %1313 to i8
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1314, i8* %1315, align 1, !tbaa !2450
  %1316 = load i64, i64* %RBP
  %1317 = sub i64 %1316, 36
  %1318 = load i32, i32* %EAX
  %1319 = zext i32 %1318 to i64
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 3
  store i64 %1321, i64* %PC
  %1322 = inttoptr i64 %1317 to i32*
  store i32 %1318, i32* %1322
  %1323 = load i64, i64* %RBP
  %1324 = sub i64 %1323, 36
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 3
  store i64 %1326, i64* %PC
  %1327 = inttoptr i64 %1324 to i32*
  %1328 = load i32, i32* %1327
  %1329 = zext i32 %1328 to i64
  store i64 %1329, i64* %RAX, align 8, !tbaa !2428
  %1330 = load i64, i64* %RAX
  %1331 = load i64, i64* %RBP
  %1332 = sub i64 %1331, 44
  %1333 = load i64, i64* %PC
  %1334 = add i64 %1333, 3
  store i64 %1334, i64* %PC
  %1335 = trunc i64 %1330 to i32
  %1336 = inttoptr i64 %1332 to i32*
  %1337 = load i32, i32* %1336
  %1338 = add i32 %1337, %1335
  %1339 = zext i32 %1338 to i64
  store i64 %1339, i64* %RAX, align 8, !tbaa !2428
  %1340 = icmp ult i32 %1338, %1335
  %1341 = icmp ult i32 %1338, %1337
  %1342 = or i1 %1340, %1341
  %1343 = zext i1 %1342 to i8
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1343, i8* %1344, align 1, !tbaa !2432
  %1345 = and i32 %1338, 255
  %1346 = call i32 @llvm.ctpop.i32(i32 %1345) #17
  %1347 = trunc i32 %1346 to i8
  %1348 = and i8 %1347, 1
  %1349 = xor i8 %1348, 1
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1349, i8* %1350, align 1, !tbaa !2446
  %1351 = xor i32 %1337, %1335
  %1352 = xor i32 %1351, %1338
  %1353 = lshr i32 %1352, 4
  %1354 = trunc i32 %1353 to i8
  %1355 = and i8 %1354, 1
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1355, i8* %1356, align 1, !tbaa !2447
  %1357 = icmp eq i32 %1338, 0
  %1358 = zext i1 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1358, i8* %1359, align 1, !tbaa !2448
  %1360 = lshr i32 %1338, 31
  %1361 = trunc i32 %1360 to i8
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1361, i8* %1362, align 1, !tbaa !2449
  %1363 = lshr i32 %1335, 31
  %1364 = lshr i32 %1337, 31
  %1365 = xor i32 %1360, %1363
  %1366 = xor i32 %1360, %1364
  %1367 = add nuw nsw i32 %1365, %1366
  %1368 = icmp eq i32 %1367, 2
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1369, i8* %1370, align 1, !tbaa !2450
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 40
  %1373 = load i32, i32* %EAX
  %1374 = zext i32 %1373 to i64
  %1375 = load i64, i64* %PC
  %1376 = add i64 %1375, 3
  store i64 %1376, i64* %PC
  %1377 = inttoptr i64 %1372 to i32*
  store i32 %1373, i32* %1377
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 16
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 4
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i64*
  %1383 = load i64, i64* %1382
  store i64 %1383, i64* %RCX, align 8, !tbaa !2428
  %1384 = load i64, i64* %RBP
  %1385 = sub i64 %1384, 28
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 4
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to i32*
  %1389 = load i32, i32* %1388
  %1390 = sext i32 %1389 to i64
  store i64 %1390, i64* %RDX, align 8, !tbaa !2428
  %1391 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1392 = load i64, i64* %RCX
  %1393 = load i64, i64* %RDX
  %1394 = mul i64 %1393, 8
  %1395 = add i64 %1394, %1392
  %1396 = load i64, i64* %PC
  %1397 = add i64 %1396, 5
  store i64 %1397, i64* %PC
  %1398 = inttoptr i64 %1395 to double*
  %1399 = load double, double* %1398
  %1400 = bitcast i8* %1391 to double*
  store double %1399, double* %1400, align 1, !tbaa !2452
  %1401 = getelementptr inbounds i8, i8* %1391, i64 8
  %1402 = bitcast i8* %1401 to double*
  store double 0.000000e+00, double* %1402, align 1, !tbaa !2452
  %1403 = load i64, i64* %RBP
  %1404 = sub i64 %1403, 16
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 4
  store i64 %1406, i64* %PC
  %1407 = inttoptr i64 %1404 to i64*
  %1408 = load i64, i64* %1407
  store i64 %1408, i64* %RCX, align 8, !tbaa !2428
  %1409 = load i64, i64* %RBP
  %1410 = sub i64 %1409, 32
  %1411 = load i64, i64* %PC
  %1412 = add i64 %1411, 4
  store i64 %1412, i64* %PC
  %1413 = inttoptr i64 %1410 to i32*
  %1414 = load i32, i32* %1413
  %1415 = sext i32 %1414 to i64
  store i64 %1415, i64* %RDX, align 8, !tbaa !2428
  %1416 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1417 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1418 = load i64, i64* %RCX
  %1419 = load i64, i64* %RDX
  %1420 = mul i64 %1419, 8
  %1421 = add i64 %1420, %1418
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  store i64 %1423, i64* %PC
  %1424 = bitcast i8* %1417 to double*
  %1425 = load double, double* %1424, align 1
  %1426 = getelementptr inbounds i8, i8* %1417, i64 8
  %1427 = bitcast i8* %1426 to i64*
  %1428 = load i64, i64* %1427, align 1
  %1429 = inttoptr i64 %1421 to double*
  %1430 = load double, double* %1429
  %1431 = fadd double %1425, %1430
  %1432 = bitcast i8* %1416 to double*
  store double %1431, double* %1432, align 1, !tbaa !2452
  %1433 = getelementptr inbounds i8, i8* %1416, i64 8
  %1434 = bitcast i8* %1433 to i64*
  store i64 %1428, i64* %1434, align 1, !tbaa !2452
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 56
  %1437 = bitcast %union.vec128_t* %XMM0 to i8*
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 5
  store i64 %1439, i64* %PC
  %1440 = bitcast i8* %1437 to double*
  %1441 = load double, double* %1440, align 1
  %1442 = inttoptr i64 %1436 to double*
  store double %1441, double* %1442
  %1443 = load i64, i64* %RBP
  %1444 = sub i64 %1443, 16
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 4
  store i64 %1446, i64* %PC
  %1447 = inttoptr i64 %1444 to i64*
  %1448 = load i64, i64* %1447
  store i64 %1448, i64* %RCX, align 8, !tbaa !2428
  %1449 = load i64, i64* %RBP
  %1450 = sub i64 %1449, 28
  %1451 = load i64, i64* %PC
  %1452 = add i64 %1451, 3
  store i64 %1452, i64* %PC
  %1453 = inttoptr i64 %1450 to i32*
  %1454 = load i32, i32* %1453
  %1455 = zext i32 %1454 to i64
  store i64 %1455, i64* %RAX, align 8, !tbaa !2428
  %1456 = load i64, i64* %RAX
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 3
  store i64 %1458, i64* %PC
  %1459 = trunc i64 %1456 to i32
  %1460 = add i32 1, %1459
  %1461 = zext i32 %1460 to i64
  store i64 %1461, i64* %RAX, align 8, !tbaa !2428
  %1462 = icmp ult i32 %1460, %1459
  %1463 = icmp ult i32 %1460, 1
  %1464 = or i1 %1462, %1463
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1465, i8* %1466, align 1, !tbaa !2432
  %1467 = and i32 %1460, 255
  %1468 = call i32 @llvm.ctpop.i32(i32 %1467) #17
  %1469 = trunc i32 %1468 to i8
  %1470 = and i8 %1469, 1
  %1471 = xor i8 %1470, 1
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1471, i8* %1472, align 1, !tbaa !2446
  %1473 = xor i64 1, %1456
  %1474 = trunc i64 %1473 to i32
  %1475 = xor i32 %1474, %1460
  %1476 = lshr i32 %1475, 4
  %1477 = trunc i32 %1476 to i8
  %1478 = and i8 %1477, 1
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1478, i8* %1479, align 1, !tbaa !2447
  %1480 = icmp eq i32 %1460, 0
  %1481 = zext i1 %1480 to i8
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1481, i8* %1482, align 1, !tbaa !2448
  %1483 = lshr i32 %1460, 31
  %1484 = trunc i32 %1483 to i8
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1484, i8* %1485, align 1, !tbaa !2449
  %1486 = lshr i32 %1459, 31
  %1487 = xor i32 %1483, %1486
  %1488 = add nuw nsw i32 %1487, %1483
  %1489 = icmp eq i32 %1488, 2
  %1490 = zext i1 %1489 to i8
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1490, i8* %1491, align 1, !tbaa !2450
  %1492 = load i32, i32* %EAX
  %1493 = zext i32 %1492 to i64
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 3
  store i64 %1495, i64* %PC
  %1496 = shl i64 %1493, 32
  %1497 = ashr exact i64 %1496, 32
  store i64 %1497, i64* %RDX, align 8, !tbaa !2428
  %1498 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1499 = load i64, i64* %RCX
  %1500 = load i64, i64* %RDX
  %1501 = mul i64 %1500, 8
  %1502 = add i64 %1501, %1499
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = inttoptr i64 %1502 to double*
  %1506 = load double, double* %1505
  %1507 = bitcast i8* %1498 to double*
  store double %1506, double* %1507, align 1, !tbaa !2452
  %1508 = getelementptr inbounds i8, i8* %1498, i64 8
  %1509 = bitcast i8* %1508 to double*
  store double 0.000000e+00, double* %1509, align 1, !tbaa !2452
  %1510 = load i64, i64* %RBP
  %1511 = sub i64 %1510, 16
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 4
  store i64 %1513, i64* %PC
  %1514 = inttoptr i64 %1511 to i64*
  %1515 = load i64, i64* %1514
  store i64 %1515, i64* %RCX, align 8, !tbaa !2428
  %1516 = load i64, i64* %RBP
  %1517 = sub i64 %1516, 32
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 3
  store i64 %1519, i64* %PC
  %1520 = inttoptr i64 %1517 to i32*
  %1521 = load i32, i32* %1520
  %1522 = zext i32 %1521 to i64
  store i64 %1522, i64* %RAX, align 8, !tbaa !2428
  %1523 = load i64, i64* %RAX
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 3
  store i64 %1525, i64* %PC
  %1526 = trunc i64 %1523 to i32
  %1527 = add i32 1, %1526
  %1528 = zext i32 %1527 to i64
  store i64 %1528, i64* %RAX, align 8, !tbaa !2428
  %1529 = icmp ult i32 %1527, %1526
  %1530 = icmp ult i32 %1527, 1
  %1531 = or i1 %1529, %1530
  %1532 = zext i1 %1531 to i8
  %1533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1532, i8* %1533, align 1, !tbaa !2432
  %1534 = and i32 %1527, 255
  %1535 = call i32 @llvm.ctpop.i32(i32 %1534) #17
  %1536 = trunc i32 %1535 to i8
  %1537 = and i8 %1536, 1
  %1538 = xor i8 %1537, 1
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1538, i8* %1539, align 1, !tbaa !2446
  %1540 = xor i64 1, %1523
  %1541 = trunc i64 %1540 to i32
  %1542 = xor i32 %1541, %1527
  %1543 = lshr i32 %1542, 4
  %1544 = trunc i32 %1543 to i8
  %1545 = and i8 %1544, 1
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1545, i8* %1546, align 1, !tbaa !2447
  %1547 = icmp eq i32 %1527, 0
  %1548 = zext i1 %1547 to i8
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1548, i8* %1549, align 1, !tbaa !2448
  %1550 = lshr i32 %1527, 31
  %1551 = trunc i32 %1550 to i8
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1551, i8* %1552, align 1, !tbaa !2449
  %1553 = lshr i32 %1526, 31
  %1554 = xor i32 %1550, %1553
  %1555 = add nuw nsw i32 %1554, %1550
  %1556 = icmp eq i32 %1555, 2
  %1557 = zext i1 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1557, i8* %1558, align 1, !tbaa !2450
  %1559 = load i32, i32* %EAX
  %1560 = zext i32 %1559 to i64
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 3
  store i64 %1562, i64* %PC
  %1563 = shl i64 %1560, 32
  %1564 = ashr exact i64 %1563, 32
  store i64 %1564, i64* %RDX, align 8, !tbaa !2428
  %1565 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1566 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1567 = load i64, i64* %RCX
  %1568 = load i64, i64* %RDX
  %1569 = mul i64 %1568, 8
  %1570 = add i64 %1569, %1567
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 5
  store i64 %1572, i64* %PC
  %1573 = bitcast i8* %1566 to double*
  %1574 = load double, double* %1573, align 1
  %1575 = getelementptr inbounds i8, i8* %1566, i64 8
  %1576 = bitcast i8* %1575 to i64*
  %1577 = load i64, i64* %1576, align 1
  %1578 = inttoptr i64 %1570 to double*
  %1579 = load double, double* %1578
  %1580 = fadd double %1574, %1579
  %1581 = bitcast i8* %1565 to double*
  store double %1580, double* %1581, align 1, !tbaa !2452
  %1582 = getelementptr inbounds i8, i8* %1565, i64 8
  %1583 = bitcast i8* %1582 to i64*
  store i64 %1577, i64* %1583, align 1, !tbaa !2452
  %1584 = load i64, i64* %RBP
  %1585 = sub i64 %1584, 64
  %1586 = bitcast %union.vec128_t* %XMM0 to i8*
  %1587 = load i64, i64* %PC
  %1588 = add i64 %1587, 5
  store i64 %1588, i64* %PC
  %1589 = bitcast i8* %1586 to double*
  %1590 = load double, double* %1589, align 1
  %1591 = inttoptr i64 %1585 to double*
  store double %1590, double* %1591
  %1592 = load i64, i64* %RBP
  %1593 = sub i64 %1592, 16
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 4
  store i64 %1595, i64* %PC
  %1596 = inttoptr i64 %1593 to i64*
  %1597 = load i64, i64* %1596
  store i64 %1597, i64* %RCX, align 8, !tbaa !2428
  %1598 = load i64, i64* %RBP
  %1599 = sub i64 %1598, 28
  %1600 = load i64, i64* %PC
  %1601 = add i64 %1600, 4
  store i64 %1601, i64* %PC
  %1602 = inttoptr i64 %1599 to i32*
  %1603 = load i32, i32* %1602
  %1604 = sext i32 %1603 to i64
  store i64 %1604, i64* %RDX, align 8, !tbaa !2428
  %1605 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1606 = load i64, i64* %RCX
  %1607 = load i64, i64* %RDX
  %1608 = mul i64 %1607, 8
  %1609 = add i64 %1608, %1606
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 5
  store i64 %1611, i64* %PC
  %1612 = inttoptr i64 %1609 to double*
  %1613 = load double, double* %1612
  %1614 = bitcast i8* %1605 to double*
  store double %1613, double* %1614, align 1, !tbaa !2452
  %1615 = getelementptr inbounds i8, i8* %1605, i64 8
  %1616 = bitcast i8* %1615 to double*
  store double 0.000000e+00, double* %1616, align 1, !tbaa !2452
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 16
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  store i64 %1622, i64* %RCX, align 8, !tbaa !2428
  %1623 = load i64, i64* %RBP
  %1624 = sub i64 %1623, 32
  %1625 = load i64, i64* %PC
  %1626 = add i64 %1625, 4
  store i64 %1626, i64* %PC
  %1627 = inttoptr i64 %1624 to i32*
  %1628 = load i32, i32* %1627
  %1629 = sext i32 %1628 to i64
  store i64 %1629, i64* %RDX, align 8, !tbaa !2428
  %1630 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1631 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1632 = load i64, i64* %RCX
  %1633 = load i64, i64* %RDX
  %1634 = mul i64 %1633, 8
  %1635 = add i64 %1634, %1632
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 5
  store i64 %1637, i64* %PC
  %1638 = bitcast i8* %1631 to double*
  %1639 = load double, double* %1638, align 1
  %1640 = getelementptr inbounds i8, i8* %1631, i64 8
  %1641 = bitcast i8* %1640 to i64*
  %1642 = load i64, i64* %1641, align 1
  %1643 = inttoptr i64 %1635 to double*
  %1644 = load double, double* %1643
  %1645 = fsub double %1639, %1644
  %1646 = bitcast i8* %1630 to double*
  store double %1645, double* %1646, align 1, !tbaa !2452
  %1647 = getelementptr inbounds i8, i8* %1630, i64 8
  %1648 = bitcast i8* %1647 to i64*
  store i64 %1642, i64* %1648, align 1, !tbaa !2452
  %1649 = load i64, i64* %RBP
  %1650 = sub i64 %1649, 72
  %1651 = bitcast %union.vec128_t* %XMM0 to i8*
  %1652 = load i64, i64* %PC
  %1653 = add i64 %1652, 5
  store i64 %1653, i64* %PC
  %1654 = bitcast i8* %1651 to double*
  %1655 = load double, double* %1654, align 1
  %1656 = inttoptr i64 %1650 to double*
  store double %1655, double* %1656
  %1657 = load i64, i64* %RBP
  %1658 = sub i64 %1657, 16
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 4
  store i64 %1660, i64* %PC
  %1661 = inttoptr i64 %1658 to i64*
  %1662 = load i64, i64* %1661
  store i64 %1662, i64* %RCX, align 8, !tbaa !2428
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 28
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 3
  store i64 %1666, i64* %PC
  %1667 = inttoptr i64 %1664 to i32*
  %1668 = load i32, i32* %1667
  %1669 = zext i32 %1668 to i64
  store i64 %1669, i64* %RAX, align 8, !tbaa !2428
  %1670 = load i64, i64* %RAX
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 3
  store i64 %1672, i64* %PC
  %1673 = trunc i64 %1670 to i32
  %1674 = add i32 1, %1673
  %1675 = zext i32 %1674 to i64
  store i64 %1675, i64* %RAX, align 8, !tbaa !2428
  %1676 = icmp ult i32 %1674, %1673
  %1677 = icmp ult i32 %1674, 1
  %1678 = or i1 %1676, %1677
  %1679 = zext i1 %1678 to i8
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1679, i8* %1680, align 1, !tbaa !2432
  %1681 = and i32 %1674, 255
  %1682 = call i32 @llvm.ctpop.i32(i32 %1681) #17
  %1683 = trunc i32 %1682 to i8
  %1684 = and i8 %1683, 1
  %1685 = xor i8 %1684, 1
  %1686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1685, i8* %1686, align 1, !tbaa !2446
  %1687 = xor i64 1, %1670
  %1688 = trunc i64 %1687 to i32
  %1689 = xor i32 %1688, %1674
  %1690 = lshr i32 %1689, 4
  %1691 = trunc i32 %1690 to i8
  %1692 = and i8 %1691, 1
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1692, i8* %1693, align 1, !tbaa !2447
  %1694 = icmp eq i32 %1674, 0
  %1695 = zext i1 %1694 to i8
  %1696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1695, i8* %1696, align 1, !tbaa !2448
  %1697 = lshr i32 %1674, 31
  %1698 = trunc i32 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1698, i8* %1699, align 1, !tbaa !2449
  %1700 = lshr i32 %1673, 31
  %1701 = xor i32 %1697, %1700
  %1702 = add nuw nsw i32 %1701, %1697
  %1703 = icmp eq i32 %1702, 2
  %1704 = zext i1 %1703 to i8
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1704, i8* %1705, align 1, !tbaa !2450
  %1706 = load i32, i32* %EAX
  %1707 = zext i32 %1706 to i64
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 3
  store i64 %1709, i64* %PC
  %1710 = shl i64 %1707, 32
  %1711 = ashr exact i64 %1710, 32
  store i64 %1711, i64* %RDX, align 8, !tbaa !2428
  %1712 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1713 = load i64, i64* %RCX
  %1714 = load i64, i64* %RDX
  %1715 = mul i64 %1714, 8
  %1716 = add i64 %1715, %1713
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 5
  store i64 %1718, i64* %PC
  %1719 = inttoptr i64 %1716 to double*
  %1720 = load double, double* %1719
  %1721 = bitcast i8* %1712 to double*
  store double %1720, double* %1721, align 1, !tbaa !2452
  %1722 = getelementptr inbounds i8, i8* %1712, i64 8
  %1723 = bitcast i8* %1722 to double*
  store double 0.000000e+00, double* %1723, align 1, !tbaa !2452
  %1724 = load i64, i64* %RBP
  %1725 = sub i64 %1724, 16
  %1726 = load i64, i64* %PC
  %1727 = add i64 %1726, 4
  store i64 %1727, i64* %PC
  %1728 = inttoptr i64 %1725 to i64*
  %1729 = load i64, i64* %1728
  store i64 %1729, i64* %RCX, align 8, !tbaa !2428
  %1730 = load i64, i64* %RBP
  %1731 = sub i64 %1730, 32
  %1732 = load i64, i64* %PC
  %1733 = add i64 %1732, 3
  store i64 %1733, i64* %PC
  %1734 = inttoptr i64 %1731 to i32*
  %1735 = load i32, i32* %1734
  %1736 = zext i32 %1735 to i64
  store i64 %1736, i64* %RAX, align 8, !tbaa !2428
  %1737 = load i64, i64* %RAX
  %1738 = load i64, i64* %PC
  %1739 = add i64 %1738, 3
  store i64 %1739, i64* %PC
  %1740 = trunc i64 %1737 to i32
  %1741 = add i32 1, %1740
  %1742 = zext i32 %1741 to i64
  store i64 %1742, i64* %RAX, align 8, !tbaa !2428
  %1743 = icmp ult i32 %1741, %1740
  %1744 = icmp ult i32 %1741, 1
  %1745 = or i1 %1743, %1744
  %1746 = zext i1 %1745 to i8
  %1747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1746, i8* %1747, align 1, !tbaa !2432
  %1748 = and i32 %1741, 255
  %1749 = call i32 @llvm.ctpop.i32(i32 %1748) #17
  %1750 = trunc i32 %1749 to i8
  %1751 = and i8 %1750, 1
  %1752 = xor i8 %1751, 1
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1752, i8* %1753, align 1, !tbaa !2446
  %1754 = xor i64 1, %1737
  %1755 = trunc i64 %1754 to i32
  %1756 = xor i32 %1755, %1741
  %1757 = lshr i32 %1756, 4
  %1758 = trunc i32 %1757 to i8
  %1759 = and i8 %1758, 1
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1759, i8* %1760, align 1, !tbaa !2447
  %1761 = icmp eq i32 %1741, 0
  %1762 = zext i1 %1761 to i8
  %1763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1762, i8* %1763, align 1, !tbaa !2448
  %1764 = lshr i32 %1741, 31
  %1765 = trunc i32 %1764 to i8
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1765, i8* %1766, align 1, !tbaa !2449
  %1767 = lshr i32 %1740, 31
  %1768 = xor i32 %1764, %1767
  %1769 = add nuw nsw i32 %1768, %1764
  %1770 = icmp eq i32 %1769, 2
  %1771 = zext i1 %1770 to i8
  %1772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1771, i8* %1772, align 1, !tbaa !2450
  %1773 = load i32, i32* %EAX
  %1774 = zext i32 %1773 to i64
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 3
  store i64 %1776, i64* %PC
  %1777 = shl i64 %1774, 32
  %1778 = ashr exact i64 %1777, 32
  store i64 %1778, i64* %RDX, align 8, !tbaa !2428
  %1779 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1780 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1781 = load i64, i64* %RCX
  %1782 = load i64, i64* %RDX
  %1783 = mul i64 %1782, 8
  %1784 = add i64 %1783, %1781
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 5
  store i64 %1786, i64* %PC
  %1787 = bitcast i8* %1780 to double*
  %1788 = load double, double* %1787, align 1
  %1789 = getelementptr inbounds i8, i8* %1780, i64 8
  %1790 = bitcast i8* %1789 to i64*
  %1791 = load i64, i64* %1790, align 1
  %1792 = inttoptr i64 %1784 to double*
  %1793 = load double, double* %1792
  %1794 = fsub double %1788, %1793
  %1795 = bitcast i8* %1779 to double*
  store double %1794, double* %1795, align 1, !tbaa !2452
  %1796 = getelementptr inbounds i8, i8* %1779, i64 8
  %1797 = bitcast i8* %1796 to i64*
  store i64 %1791, i64* %1797, align 1, !tbaa !2452
  %1798 = load i64, i64* %RBP
  %1799 = sub i64 %1798, 80
  %1800 = bitcast %union.vec128_t* %XMM0 to i8*
  %1801 = load i64, i64* %PC
  %1802 = add i64 %1801, 5
  store i64 %1802, i64* %PC
  %1803 = bitcast i8* %1800 to double*
  %1804 = load double, double* %1803, align 1
  %1805 = inttoptr i64 %1799 to double*
  store double %1804, double* %1805
  %1806 = load i64, i64* %RBP
  %1807 = sub i64 %1806, 16
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 4
  store i64 %1809, i64* %PC
  %1810 = inttoptr i64 %1807 to i64*
  %1811 = load i64, i64* %1810
  store i64 %1811, i64* %RCX, align 8, !tbaa !2428
  %1812 = load i64, i64* %RBP
  %1813 = sub i64 %1812, 36
  %1814 = load i64, i64* %PC
  %1815 = add i64 %1814, 4
  store i64 %1815, i64* %PC
  %1816 = inttoptr i64 %1813 to i32*
  %1817 = load i32, i32* %1816
  %1818 = sext i32 %1817 to i64
  store i64 %1818, i64* %RDX, align 8, !tbaa !2428
  %1819 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1820 = load i64, i64* %RCX
  %1821 = load i64, i64* %RDX
  %1822 = mul i64 %1821, 8
  %1823 = add i64 %1822, %1820
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 5
  store i64 %1825, i64* %PC
  %1826 = inttoptr i64 %1823 to double*
  %1827 = load double, double* %1826
  %1828 = bitcast i8* %1819 to double*
  store double %1827, double* %1828, align 1, !tbaa !2452
  %1829 = getelementptr inbounds i8, i8* %1819, i64 8
  %1830 = bitcast i8* %1829 to double*
  store double 0.000000e+00, double* %1830, align 1, !tbaa !2452
  %1831 = load i64, i64* %RBP
  %1832 = sub i64 %1831, 16
  %1833 = load i64, i64* %PC
  %1834 = add i64 %1833, 4
  store i64 %1834, i64* %PC
  %1835 = inttoptr i64 %1832 to i64*
  %1836 = load i64, i64* %1835
  store i64 %1836, i64* %RCX, align 8, !tbaa !2428
  %1837 = load i64, i64* %RBP
  %1838 = sub i64 %1837, 40
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 4
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i32*
  %1842 = load i32, i32* %1841
  %1843 = sext i32 %1842 to i64
  store i64 %1843, i64* %RDX, align 8, !tbaa !2428
  %1844 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1845 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1846 = load i64, i64* %RCX
  %1847 = load i64, i64* %RDX
  %1848 = mul i64 %1847, 8
  %1849 = add i64 %1848, %1846
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 5
  store i64 %1851, i64* %PC
  %1852 = bitcast i8* %1845 to double*
  %1853 = load double, double* %1852, align 1
  %1854 = getelementptr inbounds i8, i8* %1845, i64 8
  %1855 = bitcast i8* %1854 to i64*
  %1856 = load i64, i64* %1855, align 1
  %1857 = inttoptr i64 %1849 to double*
  %1858 = load double, double* %1857
  %1859 = fadd double %1853, %1858
  %1860 = bitcast i8* %1844 to double*
  store double %1859, double* %1860, align 1, !tbaa !2452
  %1861 = getelementptr inbounds i8, i8* %1844, i64 8
  %1862 = bitcast i8* %1861 to i64*
  store i64 %1856, i64* %1862, align 1, !tbaa !2452
  %1863 = load i64, i64* %RBP
  %1864 = sub i64 %1863, 88
  %1865 = bitcast %union.vec128_t* %XMM0 to i8*
  %1866 = load i64, i64* %PC
  %1867 = add i64 %1866, 5
  store i64 %1867, i64* %PC
  %1868 = bitcast i8* %1865 to double*
  %1869 = load double, double* %1868, align 1
  %1870 = inttoptr i64 %1864 to double*
  store double %1869, double* %1870
  %1871 = load i64, i64* %RBP
  %1872 = sub i64 %1871, 16
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 4
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1872 to i64*
  %1876 = load i64, i64* %1875
  store i64 %1876, i64* %RCX, align 8, !tbaa !2428
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 36
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 3
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to i32*
  %1882 = load i32, i32* %1881
  %1883 = zext i32 %1882 to i64
  store i64 %1883, i64* %RAX, align 8, !tbaa !2428
  %1884 = load i64, i64* %RAX
  %1885 = load i64, i64* %PC
  %1886 = add i64 %1885, 3
  store i64 %1886, i64* %PC
  %1887 = trunc i64 %1884 to i32
  %1888 = add i32 1, %1887
  %1889 = zext i32 %1888 to i64
  store i64 %1889, i64* %RAX, align 8, !tbaa !2428
  %1890 = icmp ult i32 %1888, %1887
  %1891 = icmp ult i32 %1888, 1
  %1892 = or i1 %1890, %1891
  %1893 = zext i1 %1892 to i8
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1893, i8* %1894, align 1, !tbaa !2432
  %1895 = and i32 %1888, 255
  %1896 = call i32 @llvm.ctpop.i32(i32 %1895) #17
  %1897 = trunc i32 %1896 to i8
  %1898 = and i8 %1897, 1
  %1899 = xor i8 %1898, 1
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1899, i8* %1900, align 1, !tbaa !2446
  %1901 = xor i64 1, %1884
  %1902 = trunc i64 %1901 to i32
  %1903 = xor i32 %1902, %1888
  %1904 = lshr i32 %1903, 4
  %1905 = trunc i32 %1904 to i8
  %1906 = and i8 %1905, 1
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1906, i8* %1907, align 1, !tbaa !2447
  %1908 = icmp eq i32 %1888, 0
  %1909 = zext i1 %1908 to i8
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1909, i8* %1910, align 1, !tbaa !2448
  %1911 = lshr i32 %1888, 31
  %1912 = trunc i32 %1911 to i8
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1912, i8* %1913, align 1, !tbaa !2449
  %1914 = lshr i32 %1887, 31
  %1915 = xor i32 %1911, %1914
  %1916 = add nuw nsw i32 %1915, %1911
  %1917 = icmp eq i32 %1916, 2
  %1918 = zext i1 %1917 to i8
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1918, i8* %1919, align 1, !tbaa !2450
  %1920 = load i32, i32* %EAX
  %1921 = zext i32 %1920 to i64
  %1922 = load i64, i64* %PC
  %1923 = add i64 %1922, 3
  store i64 %1923, i64* %PC
  %1924 = shl i64 %1921, 32
  %1925 = ashr exact i64 %1924, 32
  store i64 %1925, i64* %RDX, align 8, !tbaa !2428
  %1926 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1927 = load i64, i64* %RCX
  %1928 = load i64, i64* %RDX
  %1929 = mul i64 %1928, 8
  %1930 = add i64 %1929, %1927
  %1931 = load i64, i64* %PC
  %1932 = add i64 %1931, 5
  store i64 %1932, i64* %PC
  %1933 = inttoptr i64 %1930 to double*
  %1934 = load double, double* %1933
  %1935 = bitcast i8* %1926 to double*
  store double %1934, double* %1935, align 1, !tbaa !2452
  %1936 = getelementptr inbounds i8, i8* %1926, i64 8
  %1937 = bitcast i8* %1936 to double*
  store double 0.000000e+00, double* %1937, align 1, !tbaa !2452
  %1938 = load i64, i64* %RBP
  %1939 = sub i64 %1938, 16
  %1940 = load i64, i64* %PC
  %1941 = add i64 %1940, 4
  store i64 %1941, i64* %PC
  %1942 = inttoptr i64 %1939 to i64*
  %1943 = load i64, i64* %1942
  store i64 %1943, i64* %RCX, align 8, !tbaa !2428
  %1944 = load i64, i64* %RBP
  %1945 = sub i64 %1944, 40
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 3
  store i64 %1947, i64* %PC
  %1948 = inttoptr i64 %1945 to i32*
  %1949 = load i32, i32* %1948
  %1950 = zext i32 %1949 to i64
  store i64 %1950, i64* %RAX, align 8, !tbaa !2428
  %1951 = load i64, i64* %RAX
  %1952 = load i64, i64* %PC
  %1953 = add i64 %1952, 3
  store i64 %1953, i64* %PC
  %1954 = trunc i64 %1951 to i32
  %1955 = add i32 1, %1954
  %1956 = zext i32 %1955 to i64
  store i64 %1956, i64* %RAX, align 8, !tbaa !2428
  %1957 = icmp ult i32 %1955, %1954
  %1958 = icmp ult i32 %1955, 1
  %1959 = or i1 %1957, %1958
  %1960 = zext i1 %1959 to i8
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1960, i8* %1961, align 1, !tbaa !2432
  %1962 = and i32 %1955, 255
  %1963 = call i32 @llvm.ctpop.i32(i32 %1962) #17
  %1964 = trunc i32 %1963 to i8
  %1965 = and i8 %1964, 1
  %1966 = xor i8 %1965, 1
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1966, i8* %1967, align 1, !tbaa !2446
  %1968 = xor i64 1, %1951
  %1969 = trunc i64 %1968 to i32
  %1970 = xor i32 %1969, %1955
  %1971 = lshr i32 %1970, 4
  %1972 = trunc i32 %1971 to i8
  %1973 = and i8 %1972, 1
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1973, i8* %1974, align 1, !tbaa !2447
  %1975 = icmp eq i32 %1955, 0
  %1976 = zext i1 %1975 to i8
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1976, i8* %1977, align 1, !tbaa !2448
  %1978 = lshr i32 %1955, 31
  %1979 = trunc i32 %1978 to i8
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1979, i8* %1980, align 1, !tbaa !2449
  %1981 = lshr i32 %1954, 31
  %1982 = xor i32 %1978, %1981
  %1983 = add nuw nsw i32 %1982, %1978
  %1984 = icmp eq i32 %1983, 2
  %1985 = zext i1 %1984 to i8
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1985, i8* %1986, align 1, !tbaa !2450
  %1987 = load i32, i32* %EAX
  %1988 = zext i32 %1987 to i64
  %1989 = load i64, i64* %PC
  %1990 = add i64 %1989, 3
  store i64 %1990, i64* %PC
  %1991 = shl i64 %1988, 32
  %1992 = ashr exact i64 %1991, 32
  store i64 %1992, i64* %RDX, align 8, !tbaa !2428
  %1993 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1994 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1995 = load i64, i64* %RCX
  %1996 = load i64, i64* %RDX
  %1997 = mul i64 %1996, 8
  %1998 = add i64 %1997, %1995
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 5
  store i64 %2000, i64* %PC
  %2001 = bitcast i8* %1994 to double*
  %2002 = load double, double* %2001, align 1
  %2003 = getelementptr inbounds i8, i8* %1994, i64 8
  %2004 = bitcast i8* %2003 to i64*
  %2005 = load i64, i64* %2004, align 1
  %2006 = inttoptr i64 %1998 to double*
  %2007 = load double, double* %2006
  %2008 = fadd double %2002, %2007
  %2009 = bitcast i8* %1993 to double*
  store double %2008, double* %2009, align 1, !tbaa !2452
  %2010 = getelementptr inbounds i8, i8* %1993, i64 8
  %2011 = bitcast i8* %2010 to i64*
  store i64 %2005, i64* %2011, align 1, !tbaa !2452
  %2012 = load i64, i64* %RBP
  %2013 = sub i64 %2012, 96
  %2014 = bitcast %union.vec128_t* %XMM0 to i8*
  %2015 = load i64, i64* %PC
  %2016 = add i64 %2015, 5
  store i64 %2016, i64* %PC
  %2017 = bitcast i8* %2014 to double*
  %2018 = load double, double* %2017, align 1
  %2019 = inttoptr i64 %2013 to double*
  store double %2018, double* %2019
  %2020 = load i64, i64* %RBP
  %2021 = sub i64 %2020, 16
  %2022 = load i64, i64* %PC
  %2023 = add i64 %2022, 4
  store i64 %2023, i64* %PC
  %2024 = inttoptr i64 %2021 to i64*
  %2025 = load i64, i64* %2024
  store i64 %2025, i64* %RCX, align 8, !tbaa !2428
  %2026 = load i64, i64* %RBP
  %2027 = sub i64 %2026, 36
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 4
  store i64 %2029, i64* %PC
  %2030 = inttoptr i64 %2027 to i32*
  %2031 = load i32, i32* %2030
  %2032 = sext i32 %2031 to i64
  store i64 %2032, i64* %RDX, align 8, !tbaa !2428
  %2033 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2034 = load i64, i64* %RCX
  %2035 = load i64, i64* %RDX
  %2036 = mul i64 %2035, 8
  %2037 = add i64 %2036, %2034
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 5
  store i64 %2039, i64* %PC
  %2040 = inttoptr i64 %2037 to double*
  %2041 = load double, double* %2040
  %2042 = bitcast i8* %2033 to double*
  store double %2041, double* %2042, align 1, !tbaa !2452
  %2043 = getelementptr inbounds i8, i8* %2033, i64 8
  %2044 = bitcast i8* %2043 to double*
  store double 0.000000e+00, double* %2044, align 1, !tbaa !2452
  %2045 = load i64, i64* %RBP
  %2046 = sub i64 %2045, 16
  %2047 = load i64, i64* %PC
  %2048 = add i64 %2047, 4
  store i64 %2048, i64* %PC
  %2049 = inttoptr i64 %2046 to i64*
  %2050 = load i64, i64* %2049
  store i64 %2050, i64* %RCX, align 8, !tbaa !2428
  %2051 = load i64, i64* %RBP
  %2052 = sub i64 %2051, 40
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 4
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2052 to i32*
  %2056 = load i32, i32* %2055
  %2057 = sext i32 %2056 to i64
  store i64 %2057, i64* %RDX, align 8, !tbaa !2428
  %2058 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2059 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2060 = load i64, i64* %RCX
  %2061 = load i64, i64* %RDX
  %2062 = mul i64 %2061, 8
  %2063 = add i64 %2062, %2060
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 5
  store i64 %2065, i64* %PC
  %2066 = bitcast i8* %2059 to double*
  %2067 = load double, double* %2066, align 1
  %2068 = getelementptr inbounds i8, i8* %2059, i64 8
  %2069 = bitcast i8* %2068 to i64*
  %2070 = load i64, i64* %2069, align 1
  %2071 = inttoptr i64 %2063 to double*
  %2072 = load double, double* %2071
  %2073 = fsub double %2067, %2072
  %2074 = bitcast i8* %2058 to double*
  store double %2073, double* %2074, align 1, !tbaa !2452
  %2075 = getelementptr inbounds i8, i8* %2058, i64 8
  %2076 = bitcast i8* %2075 to i64*
  store i64 %2070, i64* %2076, align 1, !tbaa !2452
  %2077 = load i64, i64* %RBP
  %2078 = sub i64 %2077, 104
  %2079 = bitcast %union.vec128_t* %XMM0 to i8*
  %2080 = load i64, i64* %PC
  %2081 = add i64 %2080, 5
  store i64 %2081, i64* %PC
  %2082 = bitcast i8* %2079 to double*
  %2083 = load double, double* %2082, align 1
  %2084 = inttoptr i64 %2078 to double*
  store double %2083, double* %2084
  %2085 = load i64, i64* %RBP
  %2086 = sub i64 %2085, 16
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 4
  store i64 %2088, i64* %PC
  %2089 = inttoptr i64 %2086 to i64*
  %2090 = load i64, i64* %2089
  store i64 %2090, i64* %RCX, align 8, !tbaa !2428
  %2091 = load i64, i64* %RBP
  %2092 = sub i64 %2091, 36
  %2093 = load i64, i64* %PC
  %2094 = add i64 %2093, 3
  store i64 %2094, i64* %PC
  %2095 = inttoptr i64 %2092 to i32*
  %2096 = load i32, i32* %2095
  %2097 = zext i32 %2096 to i64
  store i64 %2097, i64* %RAX, align 8, !tbaa !2428
  %2098 = load i64, i64* %RAX
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 3
  store i64 %2100, i64* %PC
  %2101 = trunc i64 %2098 to i32
  %2102 = add i32 1, %2101
  %2103 = zext i32 %2102 to i64
  store i64 %2103, i64* %RAX, align 8, !tbaa !2428
  %2104 = icmp ult i32 %2102, %2101
  %2105 = icmp ult i32 %2102, 1
  %2106 = or i1 %2104, %2105
  %2107 = zext i1 %2106 to i8
  %2108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2107, i8* %2108, align 1, !tbaa !2432
  %2109 = and i32 %2102, 255
  %2110 = call i32 @llvm.ctpop.i32(i32 %2109) #17
  %2111 = trunc i32 %2110 to i8
  %2112 = and i8 %2111, 1
  %2113 = xor i8 %2112, 1
  %2114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2113, i8* %2114, align 1, !tbaa !2446
  %2115 = xor i64 1, %2098
  %2116 = trunc i64 %2115 to i32
  %2117 = xor i32 %2116, %2102
  %2118 = lshr i32 %2117, 4
  %2119 = trunc i32 %2118 to i8
  %2120 = and i8 %2119, 1
  %2121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2120, i8* %2121, align 1, !tbaa !2447
  %2122 = icmp eq i32 %2102, 0
  %2123 = zext i1 %2122 to i8
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2123, i8* %2124, align 1, !tbaa !2448
  %2125 = lshr i32 %2102, 31
  %2126 = trunc i32 %2125 to i8
  %2127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2126, i8* %2127, align 1, !tbaa !2449
  %2128 = lshr i32 %2101, 31
  %2129 = xor i32 %2125, %2128
  %2130 = add nuw nsw i32 %2129, %2125
  %2131 = icmp eq i32 %2130, 2
  %2132 = zext i1 %2131 to i8
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2132, i8* %2133, align 1, !tbaa !2450
  %2134 = load i32, i32* %EAX
  %2135 = zext i32 %2134 to i64
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 3
  store i64 %2137, i64* %PC
  %2138 = shl i64 %2135, 32
  %2139 = ashr exact i64 %2138, 32
  store i64 %2139, i64* %RDX, align 8, !tbaa !2428
  %2140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2141 = load i64, i64* %RCX
  %2142 = load i64, i64* %RDX
  %2143 = mul i64 %2142, 8
  %2144 = add i64 %2143, %2141
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 5
  store i64 %2146, i64* %PC
  %2147 = inttoptr i64 %2144 to double*
  %2148 = load double, double* %2147
  %2149 = bitcast i8* %2140 to double*
  store double %2148, double* %2149, align 1, !tbaa !2452
  %2150 = getelementptr inbounds i8, i8* %2140, i64 8
  %2151 = bitcast i8* %2150 to double*
  store double 0.000000e+00, double* %2151, align 1, !tbaa !2452
  %2152 = load i64, i64* %RBP
  %2153 = sub i64 %2152, 16
  %2154 = load i64, i64* %PC
  %2155 = add i64 %2154, 4
  store i64 %2155, i64* %PC
  %2156 = inttoptr i64 %2153 to i64*
  %2157 = load i64, i64* %2156
  store i64 %2157, i64* %RCX, align 8, !tbaa !2428
  %2158 = load i64, i64* %RBP
  %2159 = sub i64 %2158, 40
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 3
  store i64 %2161, i64* %PC
  %2162 = inttoptr i64 %2159 to i32*
  %2163 = load i32, i32* %2162
  %2164 = zext i32 %2163 to i64
  store i64 %2164, i64* %RAX, align 8, !tbaa !2428
  %2165 = load i64, i64* %RAX
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 3
  store i64 %2167, i64* %PC
  %2168 = trunc i64 %2165 to i32
  %2169 = add i32 1, %2168
  %2170 = zext i32 %2169 to i64
  store i64 %2170, i64* %RAX, align 8, !tbaa !2428
  %2171 = icmp ult i32 %2169, %2168
  %2172 = icmp ult i32 %2169, 1
  %2173 = or i1 %2171, %2172
  %2174 = zext i1 %2173 to i8
  %2175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2174, i8* %2175, align 1, !tbaa !2432
  %2176 = and i32 %2169, 255
  %2177 = call i32 @llvm.ctpop.i32(i32 %2176) #17
  %2178 = trunc i32 %2177 to i8
  %2179 = and i8 %2178, 1
  %2180 = xor i8 %2179, 1
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2180, i8* %2181, align 1, !tbaa !2446
  %2182 = xor i64 1, %2165
  %2183 = trunc i64 %2182 to i32
  %2184 = xor i32 %2183, %2169
  %2185 = lshr i32 %2184, 4
  %2186 = trunc i32 %2185 to i8
  %2187 = and i8 %2186, 1
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2187, i8* %2188, align 1, !tbaa !2447
  %2189 = icmp eq i32 %2169, 0
  %2190 = zext i1 %2189 to i8
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2190, i8* %2191, align 1, !tbaa !2448
  %2192 = lshr i32 %2169, 31
  %2193 = trunc i32 %2192 to i8
  %2194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2193, i8* %2194, align 1, !tbaa !2449
  %2195 = lshr i32 %2168, 31
  %2196 = xor i32 %2192, %2195
  %2197 = add nuw nsw i32 %2196, %2192
  %2198 = icmp eq i32 %2197, 2
  %2199 = zext i1 %2198 to i8
  %2200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2199, i8* %2200, align 1, !tbaa !2450
  %2201 = load i32, i32* %EAX
  %2202 = zext i32 %2201 to i64
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 3
  store i64 %2204, i64* %PC
  %2205 = shl i64 %2202, 32
  %2206 = ashr exact i64 %2205, 32
  store i64 %2206, i64* %RDX, align 8, !tbaa !2428
  %2207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2208 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2209 = load i64, i64* %RCX
  %2210 = load i64, i64* %RDX
  %2211 = mul i64 %2210, 8
  %2212 = add i64 %2211, %2209
  %2213 = load i64, i64* %PC
  %2214 = add i64 %2213, 5
  store i64 %2214, i64* %PC
  %2215 = bitcast i8* %2208 to double*
  %2216 = load double, double* %2215, align 1
  %2217 = getelementptr inbounds i8, i8* %2208, i64 8
  %2218 = bitcast i8* %2217 to i64*
  %2219 = load i64, i64* %2218, align 1
  %2220 = inttoptr i64 %2212 to double*
  %2221 = load double, double* %2220
  %2222 = fsub double %2216, %2221
  %2223 = bitcast i8* %2207 to double*
  store double %2222, double* %2223, align 1, !tbaa !2452
  %2224 = getelementptr inbounds i8, i8* %2207, i64 8
  %2225 = bitcast i8* %2224 to i64*
  store i64 %2219, i64* %2225, align 1, !tbaa !2452
  %2226 = load i64, i64* %RBP
  %2227 = sub i64 %2226, 112
  %2228 = bitcast %union.vec128_t* %XMM0 to i8*
  %2229 = load i64, i64* %PC
  %2230 = add i64 %2229, 5
  store i64 %2230, i64* %PC
  %2231 = bitcast i8* %2228 to double*
  %2232 = load double, double* %2231, align 1
  %2233 = inttoptr i64 %2227 to double*
  store double %2232, double* %2233
  %2234 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2235 = load i64, i64* %RBP
  %2236 = sub i64 %2235, 56
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 5
  store i64 %2238, i64* %PC
  %2239 = inttoptr i64 %2236 to double*
  %2240 = load double, double* %2239
  %2241 = bitcast i8* %2234 to double*
  store double %2240, double* %2241, align 1, !tbaa !2452
  %2242 = getelementptr inbounds i8, i8* %2234, i64 8
  %2243 = bitcast i8* %2242 to double*
  store double 0.000000e+00, double* %2243, align 1, !tbaa !2452
  %2244 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2246 = load i64, i64* %RBP
  %2247 = sub i64 %2246, 88
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 5
  store i64 %2249, i64* %PC
  %2250 = bitcast i8* %2245 to double*
  %2251 = load double, double* %2250, align 1
  %2252 = getelementptr inbounds i8, i8* %2245, i64 8
  %2253 = bitcast i8* %2252 to i64*
  %2254 = load i64, i64* %2253, align 1
  %2255 = inttoptr i64 %2247 to double*
  %2256 = load double, double* %2255
  %2257 = fadd double %2251, %2256
  %2258 = bitcast i8* %2244 to double*
  store double %2257, double* %2258, align 1, !tbaa !2452
  %2259 = getelementptr inbounds i8, i8* %2244, i64 8
  %2260 = bitcast i8* %2259 to i64*
  store i64 %2254, i64* %2260, align 1, !tbaa !2452
  %2261 = load i64, i64* %RBP
  %2262 = sub i64 %2261, 16
  %2263 = load i64, i64* %PC
  %2264 = add i64 %2263, 4
  store i64 %2264, i64* %PC
  %2265 = inttoptr i64 %2262 to i64*
  %2266 = load i64, i64* %2265
  store i64 %2266, i64* %RCX, align 8, !tbaa !2428
  %2267 = load i64, i64* %RBP
  %2268 = sub i64 %2267, 28
  %2269 = load i64, i64* %PC
  %2270 = add i64 %2269, 4
  store i64 %2270, i64* %PC
  %2271 = inttoptr i64 %2268 to i32*
  %2272 = load i32, i32* %2271
  %2273 = sext i32 %2272 to i64
  store i64 %2273, i64* %RDX, align 8, !tbaa !2428
  %2274 = load i64, i64* %RCX
  %2275 = load i64, i64* %RDX
  %2276 = mul i64 %2275, 8
  %2277 = add i64 %2276, %2274
  %2278 = bitcast %union.vec128_t* %XMM0 to i8*
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 5
  store i64 %2280, i64* %PC
  %2281 = bitcast i8* %2278 to double*
  %2282 = load double, double* %2281, align 1
  %2283 = inttoptr i64 %2277 to double*
  store double %2282, double* %2283
  %2284 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2285 = load i64, i64* %RBP
  %2286 = sub i64 %2285, 64
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 5
  store i64 %2288, i64* %PC
  %2289 = inttoptr i64 %2286 to double*
  %2290 = load double, double* %2289
  %2291 = bitcast i8* %2284 to double*
  store double %2290, double* %2291, align 1, !tbaa !2452
  %2292 = getelementptr inbounds i8, i8* %2284, i64 8
  %2293 = bitcast i8* %2292 to double*
  store double 0.000000e+00, double* %2293, align 1, !tbaa !2452
  %2294 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2295 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2296 = load i64, i64* %RBP
  %2297 = sub i64 %2296, 96
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 5
  store i64 %2299, i64* %PC
  %2300 = bitcast i8* %2295 to double*
  %2301 = load double, double* %2300, align 1
  %2302 = getelementptr inbounds i8, i8* %2295, i64 8
  %2303 = bitcast i8* %2302 to i64*
  %2304 = load i64, i64* %2303, align 1
  %2305 = inttoptr i64 %2297 to double*
  %2306 = load double, double* %2305
  %2307 = fadd double %2301, %2306
  %2308 = bitcast i8* %2294 to double*
  store double %2307, double* %2308, align 1, !tbaa !2452
  %2309 = getelementptr inbounds i8, i8* %2294, i64 8
  %2310 = bitcast i8* %2309 to i64*
  store i64 %2304, i64* %2310, align 1, !tbaa !2452
  %2311 = load i64, i64* %RBP
  %2312 = sub i64 %2311, 16
  %2313 = load i64, i64* %PC
  %2314 = add i64 %2313, 4
  store i64 %2314, i64* %PC
  %2315 = inttoptr i64 %2312 to i64*
  %2316 = load i64, i64* %2315
  store i64 %2316, i64* %RCX, align 8, !tbaa !2428
  %2317 = load i64, i64* %RBP
  %2318 = sub i64 %2317, 28
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 3
  store i64 %2320, i64* %PC
  %2321 = inttoptr i64 %2318 to i32*
  %2322 = load i32, i32* %2321
  %2323 = zext i32 %2322 to i64
  store i64 %2323, i64* %RAX, align 8, !tbaa !2428
  %2324 = load i64, i64* %RAX
  %2325 = load i64, i64* %PC
  %2326 = add i64 %2325, 3
  store i64 %2326, i64* %PC
  %2327 = trunc i64 %2324 to i32
  %2328 = add i32 1, %2327
  %2329 = zext i32 %2328 to i64
  store i64 %2329, i64* %RAX, align 8, !tbaa !2428
  %2330 = icmp ult i32 %2328, %2327
  %2331 = icmp ult i32 %2328, 1
  %2332 = or i1 %2330, %2331
  %2333 = zext i1 %2332 to i8
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2333, i8* %2334, align 1, !tbaa !2432
  %2335 = and i32 %2328, 255
  %2336 = call i32 @llvm.ctpop.i32(i32 %2335) #17
  %2337 = trunc i32 %2336 to i8
  %2338 = and i8 %2337, 1
  %2339 = xor i8 %2338, 1
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2339, i8* %2340, align 1, !tbaa !2446
  %2341 = xor i64 1, %2324
  %2342 = trunc i64 %2341 to i32
  %2343 = xor i32 %2342, %2328
  %2344 = lshr i32 %2343, 4
  %2345 = trunc i32 %2344 to i8
  %2346 = and i8 %2345, 1
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2346, i8* %2347, align 1, !tbaa !2447
  %2348 = icmp eq i32 %2328, 0
  %2349 = zext i1 %2348 to i8
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2349, i8* %2350, align 1, !tbaa !2448
  %2351 = lshr i32 %2328, 31
  %2352 = trunc i32 %2351 to i8
  %2353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2352, i8* %2353, align 1, !tbaa !2449
  %2354 = lshr i32 %2327, 31
  %2355 = xor i32 %2351, %2354
  %2356 = add nuw nsw i32 %2355, %2351
  %2357 = icmp eq i32 %2356, 2
  %2358 = zext i1 %2357 to i8
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2358, i8* %2359, align 1, !tbaa !2450
  %2360 = load i32, i32* %EAX
  %2361 = zext i32 %2360 to i64
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 3
  store i64 %2363, i64* %PC
  %2364 = shl i64 %2361, 32
  %2365 = ashr exact i64 %2364, 32
  store i64 %2365, i64* %RDX, align 8, !tbaa !2428
  %2366 = load i64, i64* %RCX
  %2367 = load i64, i64* %RDX
  %2368 = mul i64 %2367, 8
  %2369 = add i64 %2368, %2366
  %2370 = bitcast %union.vec128_t* %XMM0 to i8*
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 5
  store i64 %2372, i64* %PC
  %2373 = bitcast i8* %2370 to double*
  %2374 = load double, double* %2373, align 1
  %2375 = inttoptr i64 %2369 to double*
  store double %2374, double* %2375
  %2376 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2377 = load i64, i64* %RBP
  %2378 = sub i64 %2377, 56
  %2379 = load i64, i64* %PC
  %2380 = add i64 %2379, 5
  store i64 %2380, i64* %PC
  %2381 = inttoptr i64 %2378 to double*
  %2382 = load double, double* %2381
  %2383 = bitcast i8* %2376 to double*
  store double %2382, double* %2383, align 1, !tbaa !2452
  %2384 = getelementptr inbounds i8, i8* %2376, i64 8
  %2385 = bitcast i8* %2384 to double*
  store double 0.000000e+00, double* %2385, align 1, !tbaa !2452
  %2386 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2387 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2388 = load i64, i64* %RBP
  %2389 = sub i64 %2388, 88
  %2390 = load i64, i64* %PC
  %2391 = add i64 %2390, 5
  store i64 %2391, i64* %PC
  %2392 = bitcast i8* %2387 to double*
  %2393 = load double, double* %2392, align 1
  %2394 = getelementptr inbounds i8, i8* %2387, i64 8
  %2395 = bitcast i8* %2394 to i64*
  %2396 = load i64, i64* %2395, align 1
  %2397 = inttoptr i64 %2389 to double*
  %2398 = load double, double* %2397
  %2399 = fsub double %2393, %2398
  %2400 = bitcast i8* %2386 to double*
  store double %2399, double* %2400, align 1, !tbaa !2452
  %2401 = getelementptr inbounds i8, i8* %2386, i64 8
  %2402 = bitcast i8* %2401 to i64*
  store i64 %2396, i64* %2402, align 1, !tbaa !2452
  %2403 = load i64, i64* %RBP
  %2404 = sub i64 %2403, 16
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 4
  store i64 %2406, i64* %PC
  %2407 = inttoptr i64 %2404 to i64*
  %2408 = load i64, i64* %2407
  store i64 %2408, i64* %RCX, align 8, !tbaa !2428
  %2409 = load i64, i64* %RBP
  %2410 = sub i64 %2409, 36
  %2411 = load i64, i64* %PC
  %2412 = add i64 %2411, 4
  store i64 %2412, i64* %PC
  %2413 = inttoptr i64 %2410 to i32*
  %2414 = load i32, i32* %2413
  %2415 = sext i32 %2414 to i64
  store i64 %2415, i64* %RDX, align 8, !tbaa !2428
  %2416 = load i64, i64* %RCX
  %2417 = load i64, i64* %RDX
  %2418 = mul i64 %2417, 8
  %2419 = add i64 %2418, %2416
  %2420 = bitcast %union.vec128_t* %XMM0 to i8*
  %2421 = load i64, i64* %PC
  %2422 = add i64 %2421, 5
  store i64 %2422, i64* %PC
  %2423 = bitcast i8* %2420 to double*
  %2424 = load double, double* %2423, align 1
  %2425 = inttoptr i64 %2419 to double*
  store double %2424, double* %2425
  %2426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2427 = load i64, i64* %RBP
  %2428 = sub i64 %2427, 64
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 5
  store i64 %2430, i64* %PC
  %2431 = inttoptr i64 %2428 to double*
  %2432 = load double, double* %2431
  %2433 = bitcast i8* %2426 to double*
  store double %2432, double* %2433, align 1, !tbaa !2452
  %2434 = getelementptr inbounds i8, i8* %2426, i64 8
  %2435 = bitcast i8* %2434 to double*
  store double 0.000000e+00, double* %2435, align 1, !tbaa !2452
  %2436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2438 = load i64, i64* %RBP
  %2439 = sub i64 %2438, 96
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 5
  store i64 %2441, i64* %PC
  %2442 = bitcast i8* %2437 to double*
  %2443 = load double, double* %2442, align 1
  %2444 = getelementptr inbounds i8, i8* %2437, i64 8
  %2445 = bitcast i8* %2444 to i64*
  %2446 = load i64, i64* %2445, align 1
  %2447 = inttoptr i64 %2439 to double*
  %2448 = load double, double* %2447
  %2449 = fsub double %2443, %2448
  %2450 = bitcast i8* %2436 to double*
  store double %2449, double* %2450, align 1, !tbaa !2452
  %2451 = getelementptr inbounds i8, i8* %2436, i64 8
  %2452 = bitcast i8* %2451 to i64*
  store i64 %2446, i64* %2452, align 1, !tbaa !2452
  %2453 = load i64, i64* %RBP
  %2454 = sub i64 %2453, 16
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 4
  store i64 %2456, i64* %PC
  %2457 = inttoptr i64 %2454 to i64*
  %2458 = load i64, i64* %2457
  store i64 %2458, i64* %RCX, align 8, !tbaa !2428
  %2459 = load i64, i64* %RBP
  %2460 = sub i64 %2459, 36
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 3
  store i64 %2462, i64* %PC
  %2463 = inttoptr i64 %2460 to i32*
  %2464 = load i32, i32* %2463
  %2465 = zext i32 %2464 to i64
  store i64 %2465, i64* %RAX, align 8, !tbaa !2428
  %2466 = load i64, i64* %RAX
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 3
  store i64 %2468, i64* %PC
  %2469 = trunc i64 %2466 to i32
  %2470 = add i32 1, %2469
  %2471 = zext i32 %2470 to i64
  store i64 %2471, i64* %RAX, align 8, !tbaa !2428
  %2472 = icmp ult i32 %2470, %2469
  %2473 = icmp ult i32 %2470, 1
  %2474 = or i1 %2472, %2473
  %2475 = zext i1 %2474 to i8
  %2476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2475, i8* %2476, align 1, !tbaa !2432
  %2477 = and i32 %2470, 255
  %2478 = call i32 @llvm.ctpop.i32(i32 %2477) #17
  %2479 = trunc i32 %2478 to i8
  %2480 = and i8 %2479, 1
  %2481 = xor i8 %2480, 1
  %2482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2481, i8* %2482, align 1, !tbaa !2446
  %2483 = xor i64 1, %2466
  %2484 = trunc i64 %2483 to i32
  %2485 = xor i32 %2484, %2470
  %2486 = lshr i32 %2485, 4
  %2487 = trunc i32 %2486 to i8
  %2488 = and i8 %2487, 1
  %2489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2488, i8* %2489, align 1, !tbaa !2447
  %2490 = icmp eq i32 %2470, 0
  %2491 = zext i1 %2490 to i8
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2491, i8* %2492, align 1, !tbaa !2448
  %2493 = lshr i32 %2470, 31
  %2494 = trunc i32 %2493 to i8
  %2495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2494, i8* %2495, align 1, !tbaa !2449
  %2496 = lshr i32 %2469, 31
  %2497 = xor i32 %2493, %2496
  %2498 = add nuw nsw i32 %2497, %2493
  %2499 = icmp eq i32 %2498, 2
  %2500 = zext i1 %2499 to i8
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2500, i8* %2501, align 1, !tbaa !2450
  %2502 = load i32, i32* %EAX
  %2503 = zext i32 %2502 to i64
  %2504 = load i64, i64* %PC
  %2505 = add i64 %2504, 3
  store i64 %2505, i64* %PC
  %2506 = shl i64 %2503, 32
  %2507 = ashr exact i64 %2506, 32
  store i64 %2507, i64* %RDX, align 8, !tbaa !2428
  %2508 = load i64, i64* %RCX
  %2509 = load i64, i64* %RDX
  %2510 = mul i64 %2509, 8
  %2511 = add i64 %2510, %2508
  %2512 = bitcast %union.vec128_t* %XMM0 to i8*
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 5
  store i64 %2514, i64* %PC
  %2515 = bitcast i8* %2512 to double*
  %2516 = load double, double* %2515, align 1
  %2517 = inttoptr i64 %2511 to double*
  store double %2516, double* %2517
  %2518 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2519 = load i64, i64* %RBP
  %2520 = sub i64 %2519, 72
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 5
  store i64 %2522, i64* %PC
  %2523 = inttoptr i64 %2520 to double*
  %2524 = load double, double* %2523
  %2525 = bitcast i8* %2518 to double*
  store double %2524, double* %2525, align 1, !tbaa !2452
  %2526 = getelementptr inbounds i8, i8* %2518, i64 8
  %2527 = bitcast i8* %2526 to double*
  store double 0.000000e+00, double* %2527, align 1, !tbaa !2452
  %2528 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2529 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2530 = load i64, i64* %RBP
  %2531 = sub i64 %2530, 112
  %2532 = load i64, i64* %PC
  %2533 = add i64 %2532, 5
  store i64 %2533, i64* %PC
  %2534 = bitcast i8* %2529 to double*
  %2535 = load double, double* %2534, align 1
  %2536 = getelementptr inbounds i8, i8* %2529, i64 8
  %2537 = bitcast i8* %2536 to i64*
  %2538 = load i64, i64* %2537, align 1
  %2539 = inttoptr i64 %2531 to double*
  %2540 = load double, double* %2539
  %2541 = fsub double %2535, %2540
  %2542 = bitcast i8* %2528 to double*
  store double %2541, double* %2542, align 1, !tbaa !2452
  %2543 = getelementptr inbounds i8, i8* %2528, i64 8
  %2544 = bitcast i8* %2543 to i64*
  store i64 %2538, i64* %2544, align 1, !tbaa !2452
  %2545 = load i64, i64* %RBP
  %2546 = sub i64 %2545, 16
  %2547 = load i64, i64* %PC
  %2548 = add i64 %2547, 4
  store i64 %2548, i64* %PC
  %2549 = inttoptr i64 %2546 to i64*
  %2550 = load i64, i64* %2549
  store i64 %2550, i64* %RCX, align 8, !tbaa !2428
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 32
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 4
  store i64 %2554, i64* %PC
  %2555 = inttoptr i64 %2552 to i32*
  %2556 = load i32, i32* %2555
  %2557 = sext i32 %2556 to i64
  store i64 %2557, i64* %RDX, align 8, !tbaa !2428
  %2558 = load i64, i64* %RCX
  %2559 = load i64, i64* %RDX
  %2560 = mul i64 %2559, 8
  %2561 = add i64 %2560, %2558
  %2562 = bitcast %union.vec128_t* %XMM0 to i8*
  %2563 = load i64, i64* %PC
  %2564 = add i64 %2563, 5
  store i64 %2564, i64* %PC
  %2565 = bitcast i8* %2562 to double*
  %2566 = load double, double* %2565, align 1
  %2567 = inttoptr i64 %2561 to double*
  store double %2566, double* %2567
  %2568 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2569 = load i64, i64* %RBP
  %2570 = sub i64 %2569, 80
  %2571 = load i64, i64* %PC
  %2572 = add i64 %2571, 5
  store i64 %2572, i64* %PC
  %2573 = inttoptr i64 %2570 to double*
  %2574 = load double, double* %2573
  %2575 = bitcast i8* %2568 to double*
  store double %2574, double* %2575, align 1, !tbaa !2452
  %2576 = getelementptr inbounds i8, i8* %2568, i64 8
  %2577 = bitcast i8* %2576 to double*
  store double 0.000000e+00, double* %2577, align 1, !tbaa !2452
  %2578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2579 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2580 = load i64, i64* %RBP
  %2581 = sub i64 %2580, 104
  %2582 = load i64, i64* %PC
  %2583 = add i64 %2582, 5
  store i64 %2583, i64* %PC
  %2584 = bitcast i8* %2579 to double*
  %2585 = load double, double* %2584, align 1
  %2586 = getelementptr inbounds i8, i8* %2579, i64 8
  %2587 = bitcast i8* %2586 to i64*
  %2588 = load i64, i64* %2587, align 1
  %2589 = inttoptr i64 %2581 to double*
  %2590 = load double, double* %2589
  %2591 = fadd double %2585, %2590
  %2592 = bitcast i8* %2578 to double*
  store double %2591, double* %2592, align 1, !tbaa !2452
  %2593 = getelementptr inbounds i8, i8* %2578, i64 8
  %2594 = bitcast i8* %2593 to i64*
  store i64 %2588, i64* %2594, align 1, !tbaa !2452
  %2595 = load i64, i64* %RBP
  %2596 = sub i64 %2595, 16
  %2597 = load i64, i64* %PC
  %2598 = add i64 %2597, 4
  store i64 %2598, i64* %PC
  %2599 = inttoptr i64 %2596 to i64*
  %2600 = load i64, i64* %2599
  store i64 %2600, i64* %RCX, align 8, !tbaa !2428
  %2601 = load i64, i64* %RBP
  %2602 = sub i64 %2601, 32
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 3
  store i64 %2604, i64* %PC
  %2605 = inttoptr i64 %2602 to i32*
  %2606 = load i32, i32* %2605
  %2607 = zext i32 %2606 to i64
  store i64 %2607, i64* %RAX, align 8, !tbaa !2428
  %2608 = load i64, i64* %RAX
  %2609 = load i64, i64* %PC
  %2610 = add i64 %2609, 3
  store i64 %2610, i64* %PC
  %2611 = trunc i64 %2608 to i32
  %2612 = add i32 1, %2611
  %2613 = zext i32 %2612 to i64
  store i64 %2613, i64* %RAX, align 8, !tbaa !2428
  %2614 = icmp ult i32 %2612, %2611
  %2615 = icmp ult i32 %2612, 1
  %2616 = or i1 %2614, %2615
  %2617 = zext i1 %2616 to i8
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2617, i8* %2618, align 1, !tbaa !2432
  %2619 = and i32 %2612, 255
  %2620 = call i32 @llvm.ctpop.i32(i32 %2619) #17
  %2621 = trunc i32 %2620 to i8
  %2622 = and i8 %2621, 1
  %2623 = xor i8 %2622, 1
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2623, i8* %2624, align 1, !tbaa !2446
  %2625 = xor i64 1, %2608
  %2626 = trunc i64 %2625 to i32
  %2627 = xor i32 %2626, %2612
  %2628 = lshr i32 %2627, 4
  %2629 = trunc i32 %2628 to i8
  %2630 = and i8 %2629, 1
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2630, i8* %2631, align 1, !tbaa !2447
  %2632 = icmp eq i32 %2612, 0
  %2633 = zext i1 %2632 to i8
  %2634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2633, i8* %2634, align 1, !tbaa !2448
  %2635 = lshr i32 %2612, 31
  %2636 = trunc i32 %2635 to i8
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2636, i8* %2637, align 1, !tbaa !2449
  %2638 = lshr i32 %2611, 31
  %2639 = xor i32 %2635, %2638
  %2640 = add nuw nsw i32 %2639, %2635
  %2641 = icmp eq i32 %2640, 2
  %2642 = zext i1 %2641 to i8
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2642, i8* %2643, align 1, !tbaa !2450
  %2644 = load i32, i32* %EAX
  %2645 = zext i32 %2644 to i64
  %2646 = load i64, i64* %PC
  %2647 = add i64 %2646, 3
  store i64 %2647, i64* %PC
  %2648 = shl i64 %2645, 32
  %2649 = ashr exact i64 %2648, 32
  store i64 %2649, i64* %RDX, align 8, !tbaa !2428
  %2650 = load i64, i64* %RCX
  %2651 = load i64, i64* %RDX
  %2652 = mul i64 %2651, 8
  %2653 = add i64 %2652, %2650
  %2654 = bitcast %union.vec128_t* %XMM0 to i8*
  %2655 = load i64, i64* %PC
  %2656 = add i64 %2655, 5
  store i64 %2656, i64* %PC
  %2657 = bitcast i8* %2654 to double*
  %2658 = load double, double* %2657, align 1
  %2659 = inttoptr i64 %2653 to double*
  store double %2658, double* %2659
  %2660 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2661 = load i64, i64* %RBP
  %2662 = sub i64 %2661, 72
  %2663 = load i64, i64* %PC
  %2664 = add i64 %2663, 5
  store i64 %2664, i64* %PC
  %2665 = inttoptr i64 %2662 to double*
  %2666 = load double, double* %2665
  %2667 = bitcast i8* %2660 to double*
  store double %2666, double* %2667, align 1, !tbaa !2452
  %2668 = getelementptr inbounds i8, i8* %2660, i64 8
  %2669 = bitcast i8* %2668 to double*
  store double 0.000000e+00, double* %2669, align 1, !tbaa !2452
  %2670 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2671 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2672 = load i64, i64* %RBP
  %2673 = sub i64 %2672, 112
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 5
  store i64 %2675, i64* %PC
  %2676 = bitcast i8* %2671 to double*
  %2677 = load double, double* %2676, align 1
  %2678 = getelementptr inbounds i8, i8* %2671, i64 8
  %2679 = bitcast i8* %2678 to i64*
  %2680 = load i64, i64* %2679, align 1
  %2681 = inttoptr i64 %2673 to double*
  %2682 = load double, double* %2681
  %2683 = fadd double %2677, %2682
  %2684 = bitcast i8* %2670 to double*
  store double %2683, double* %2684, align 1, !tbaa !2452
  %2685 = getelementptr inbounds i8, i8* %2670, i64 8
  %2686 = bitcast i8* %2685 to i64*
  store i64 %2680, i64* %2686, align 1, !tbaa !2452
  %2687 = load i64, i64* %RBP
  %2688 = sub i64 %2687, 16
  %2689 = load i64, i64* %PC
  %2690 = add i64 %2689, 4
  store i64 %2690, i64* %PC
  %2691 = inttoptr i64 %2688 to i64*
  %2692 = load i64, i64* %2691
  store i64 %2692, i64* %RCX, align 8, !tbaa !2428
  %2693 = load i64, i64* %RBP
  %2694 = sub i64 %2693, 40
  %2695 = load i64, i64* %PC
  %2696 = add i64 %2695, 4
  store i64 %2696, i64* %PC
  %2697 = inttoptr i64 %2694 to i32*
  %2698 = load i32, i32* %2697
  %2699 = sext i32 %2698 to i64
  store i64 %2699, i64* %RDX, align 8, !tbaa !2428
  %2700 = load i64, i64* %RCX
  %2701 = load i64, i64* %RDX
  %2702 = mul i64 %2701, 8
  %2703 = add i64 %2702, %2700
  %2704 = bitcast %union.vec128_t* %XMM0 to i8*
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 5
  store i64 %2706, i64* %PC
  %2707 = bitcast i8* %2704 to double*
  %2708 = load double, double* %2707, align 1
  %2709 = inttoptr i64 %2703 to double*
  store double %2708, double* %2709
  %2710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2711 = load i64, i64* %RBP
  %2712 = sub i64 %2711, 80
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 5
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2712 to double*
  %2716 = load double, double* %2715
  %2717 = bitcast i8* %2710 to double*
  store double %2716, double* %2717, align 1, !tbaa !2452
  %2718 = getelementptr inbounds i8, i8* %2710, i64 8
  %2719 = bitcast i8* %2718 to double*
  store double 0.000000e+00, double* %2719, align 1, !tbaa !2452
  %2720 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2721 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2722 = load i64, i64* %RBP
  %2723 = sub i64 %2722, 104
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 5
  store i64 %2725, i64* %PC
  %2726 = bitcast i8* %2721 to double*
  %2727 = load double, double* %2726, align 1
  %2728 = getelementptr inbounds i8, i8* %2721, i64 8
  %2729 = bitcast i8* %2728 to i64*
  %2730 = load i64, i64* %2729, align 1
  %2731 = inttoptr i64 %2723 to double*
  %2732 = load double, double* %2731
  %2733 = fsub double %2727, %2732
  %2734 = bitcast i8* %2720 to double*
  store double %2733, double* %2734, align 1, !tbaa !2452
  %2735 = getelementptr inbounds i8, i8* %2720, i64 8
  %2736 = bitcast i8* %2735 to i64*
  store i64 %2730, i64* %2736, align 1, !tbaa !2452
  %2737 = load i64, i64* %RBP
  %2738 = sub i64 %2737, 16
  %2739 = load i64, i64* %PC
  %2740 = add i64 %2739, 4
  store i64 %2740, i64* %PC
  %2741 = inttoptr i64 %2738 to i64*
  %2742 = load i64, i64* %2741
  store i64 %2742, i64* %RCX, align 8, !tbaa !2428
  %2743 = load i64, i64* %RBP
  %2744 = sub i64 %2743, 40
  %2745 = load i64, i64* %PC
  %2746 = add i64 %2745, 3
  store i64 %2746, i64* %PC
  %2747 = inttoptr i64 %2744 to i32*
  %2748 = load i32, i32* %2747
  %2749 = zext i32 %2748 to i64
  store i64 %2749, i64* %RAX, align 8, !tbaa !2428
  %2750 = load i64, i64* %RAX
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 3
  store i64 %2752, i64* %PC
  %2753 = trunc i64 %2750 to i32
  %2754 = add i32 1, %2753
  %2755 = zext i32 %2754 to i64
  store i64 %2755, i64* %RAX, align 8, !tbaa !2428
  %2756 = icmp ult i32 %2754, %2753
  %2757 = icmp ult i32 %2754, 1
  %2758 = or i1 %2756, %2757
  %2759 = zext i1 %2758 to i8
  %2760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2759, i8* %2760, align 1, !tbaa !2432
  %2761 = and i32 %2754, 255
  %2762 = call i32 @llvm.ctpop.i32(i32 %2761) #17
  %2763 = trunc i32 %2762 to i8
  %2764 = and i8 %2763, 1
  %2765 = xor i8 %2764, 1
  %2766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2765, i8* %2766, align 1, !tbaa !2446
  %2767 = xor i64 1, %2750
  %2768 = trunc i64 %2767 to i32
  %2769 = xor i32 %2768, %2754
  %2770 = lshr i32 %2769, 4
  %2771 = trunc i32 %2770 to i8
  %2772 = and i8 %2771, 1
  %2773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2772, i8* %2773, align 1, !tbaa !2447
  %2774 = icmp eq i32 %2754, 0
  %2775 = zext i1 %2774 to i8
  %2776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2775, i8* %2776, align 1, !tbaa !2448
  %2777 = lshr i32 %2754, 31
  %2778 = trunc i32 %2777 to i8
  %2779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2778, i8* %2779, align 1, !tbaa !2449
  %2780 = lshr i32 %2753, 31
  %2781 = xor i32 %2777, %2780
  %2782 = add nuw nsw i32 %2781, %2777
  %2783 = icmp eq i32 %2782, 2
  %2784 = zext i1 %2783 to i8
  %2785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2784, i8* %2785, align 1, !tbaa !2450
  %2786 = load i32, i32* %EAX
  %2787 = zext i32 %2786 to i64
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 3
  store i64 %2789, i64* %PC
  %2790 = shl i64 %2787, 32
  %2791 = ashr exact i64 %2790, 32
  store i64 %2791, i64* %RDX, align 8, !tbaa !2428
  %2792 = load i64, i64* %RCX
  %2793 = load i64, i64* %RDX
  %2794 = mul i64 %2793, 8
  %2795 = add i64 %2794, %2792
  %2796 = bitcast %union.vec128_t* %XMM0 to i8*
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 5
  store i64 %2798, i64* %PC
  %2799 = bitcast i8* %2796 to double*
  %2800 = load double, double* %2799, align 1
  %2801 = inttoptr i64 %2795 to double*
  store double %2800, double* %2801
  %2802 = load i64, i64* %RBP
  %2803 = sub i64 %2802, 28
  %2804 = load i64, i64* %PC
  %2805 = add i64 %2804, 3
  store i64 %2805, i64* %PC
  %2806 = inttoptr i64 %2803 to i32*
  %2807 = load i32, i32* %2806
  %2808 = zext i32 %2807 to i64
  store i64 %2808, i64* %RAX, align 8, !tbaa !2428
  %2809 = load i64, i64* %RAX
  %2810 = load i64, i64* %PC
  %2811 = add i64 %2810, 3
  store i64 %2811, i64* %PC
  %2812 = trunc i64 %2809 to i32
  %2813 = add i32 2, %2812
  %2814 = zext i32 %2813 to i64
  store i64 %2814, i64* %RAX, align 8, !tbaa !2428
  %2815 = icmp ult i32 %2813, %2812
  %2816 = icmp ult i32 %2813, 2
  %2817 = or i1 %2815, %2816
  %2818 = zext i1 %2817 to i8
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2818, i8* %2819, align 1, !tbaa !2432
  %2820 = and i32 %2813, 255
  %2821 = call i32 @llvm.ctpop.i32(i32 %2820) #17
  %2822 = trunc i32 %2821 to i8
  %2823 = and i8 %2822, 1
  %2824 = xor i8 %2823, 1
  %2825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2824, i8* %2825, align 1, !tbaa !2446
  %2826 = xor i64 2, %2809
  %2827 = trunc i64 %2826 to i32
  %2828 = xor i32 %2827, %2813
  %2829 = lshr i32 %2828, 4
  %2830 = trunc i32 %2829 to i8
  %2831 = and i8 %2830, 1
  %2832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2831, i8* %2832, align 1, !tbaa !2447
  %2833 = icmp eq i32 %2813, 0
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2834, i8* %2835, align 1, !tbaa !2448
  %2836 = lshr i32 %2813, 31
  %2837 = trunc i32 %2836 to i8
  %2838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2837, i8* %2838, align 1, !tbaa !2449
  %2839 = lshr i32 %2812, 31
  %2840 = xor i32 %2836, %2839
  %2841 = add nuw nsw i32 %2840, %2836
  %2842 = icmp eq i32 %2841, 2
  %2843 = zext i1 %2842 to i8
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2843, i8* %2844, align 1, !tbaa !2450
  %2845 = load i64, i64* %RBP
  %2846 = sub i64 %2845, 28
  %2847 = load i32, i32* %EAX
  %2848 = zext i32 %2847 to i64
  %2849 = load i64, i64* %PC
  %2850 = add i64 %2849, 3
  store i64 %2850, i64* %PC
  %2851 = inttoptr i64 %2846 to i32*
  store i32 %2847, i32* %2851
  %2852 = load i64, i64* %PC
  %2853 = sub i64 %2852, 540
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 5
  store i64 %2855, i64* %PC
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2853, i64* %2856, align 8, !tbaa !2428
  br label %block_4018f6

block_4018e0:                                     ; preds = %block_4018db, %block_401870
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401870 ], [ %MEMORY.0, %block_4018db ]
  %2857 = load i64, i64* %RBP
  %2858 = sub i64 %2857, 44
  %2859 = load i64, i64* %PC
  %2860 = add i64 %2859, 3
  store i64 %2860, i64* %PC
  %2861 = inttoptr i64 %2858 to i32*
  %2862 = load i32, i32* %2861
  %2863 = zext i32 %2862 to i64
  store i64 %2863, i64* %RAX, align 8, !tbaa !2428
  %2864 = load i64, i64* %RAX
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 3
  store i64 %2866, i64* %PC
  %2867 = and i64 %2864, 4294967295
  %2868 = shl i64 %2867, 1
  %2869 = trunc i64 %2868 to i32
  %2870 = icmp slt i32 %2869, 0
  %2871 = shl i32 %2869, 1
  %2872 = zext i32 %2871 to i64
  store i64 %2872, i64* %RAX, align 8, !tbaa !2428
  %2873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2874 = zext i1 %2870 to i8
  store i8 %2874, i8* %2873, align 1, !tbaa !2451
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2876 = and i32 %2871, 254
  %2877 = call i32 @llvm.ctpop.i32(i32 %2876) #17
  %2878 = trunc i32 %2877 to i8
  %2879 = and i8 %2878, 1
  %2880 = xor i8 %2879, 1
  store i8 %2880, i8* %2875, align 1, !tbaa !2451
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2881, align 1, !tbaa !2451
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2883 = icmp eq i32 %2871, 0
  %2884 = zext i1 %2883 to i8
  store i8 %2884, i8* %2882, align 1, !tbaa !2451
  %2885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2886 = lshr i32 %2871, 31
  %2887 = trunc i32 %2886 to i8
  store i8 %2887, i8* %2885, align 1, !tbaa !2451
  %2888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2888, align 1, !tbaa !2451
  %2889 = load i32, i32* %EAX
  %2890 = zext i32 %2889 to i64
  %2891 = load i64, i64* %RBP
  %2892 = sub i64 %2891, 4
  %2893 = load i64, i64* %PC
  %2894 = add i64 %2893, 3
  store i64 %2894, i64* %PC
  %2895 = inttoptr i64 %2892 to i32*
  %2896 = load i32, i32* %2895
  %2897 = sub i32 %2889, %2896
  %2898 = icmp ult i32 %2889, %2896
  %2899 = zext i1 %2898 to i8
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2899, i8* %2900, align 1, !tbaa !2432
  %2901 = and i32 %2897, 255
  %2902 = call i32 @llvm.ctpop.i32(i32 %2901) #17
  %2903 = trunc i32 %2902 to i8
  %2904 = and i8 %2903, 1
  %2905 = xor i8 %2904, 1
  %2906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2905, i8* %2906, align 1, !tbaa !2446
  %2907 = xor i32 %2896, %2889
  %2908 = xor i32 %2907, %2897
  %2909 = lshr i32 %2908, 4
  %2910 = trunc i32 %2909 to i8
  %2911 = and i8 %2910, 1
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2911, i8* %2912, align 1, !tbaa !2447
  %2913 = icmp eq i32 %2897, 0
  %2914 = zext i1 %2913 to i8
  %2915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2914, i8* %2915, align 1, !tbaa !2448
  %2916 = lshr i32 %2897, 31
  %2917 = trunc i32 %2916 to i8
  %2918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2917, i8* %2918, align 1, !tbaa !2449
  %2919 = lshr i32 %2889, 31
  %2920 = lshr i32 %2896, 31
  %2921 = xor i32 %2920, %2919
  %2922 = xor i32 %2916, %2919
  %2923 = add nuw nsw i32 %2922, %2921
  %2924 = icmp eq i32 %2923, 2
  %2925 = zext i1 %2924 to i8
  %2926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2925, i8* %2926, align 1, !tbaa !2450
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 563
  %2929 = load i64, i64* %PC
  %2930 = add i64 %2929, 6
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 6
  store i64 %2932, i64* %PC
  %2933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2934 = load i8, i8* %2933, align 1, !tbaa !2448
  %2935 = icmp eq i8 %2934, 0
  %2936 = zext i1 %2935 to i8
  store i8 %2936, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2938 = select i1 %2935, i64 %2928, i64 %2930
  store i64 %2938, i64* %2937, align 8, !tbaa !2428
  %2939 = load i8, i8* %BRANCH_TAKEN
  %2940 = icmp eq i8 %2939, 1
  %2941 = load i64, i64* %RBP
  %2942 = sub i64 %2941, 28
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 7
  store i64 %2944, i64* %PC
  %2945 = inttoptr i64 %2942 to i32*
  store i32 0, i32* %2945
  br i1 %2940, label %block_401b23, label %block_4018f6
}

; Function Attrs: noinline
define %struct.Memory* @sub_403330_cftmdl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_403330:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 7
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDX = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %ESI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EDI = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %42 to %"class.std::bitset"*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %44 to %"class.std::bitset"*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %46 to %union.vec128_t*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %48 to %union.vec128_t*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %50 to %union.vec128_t*
  %51 = load i64, i64* %RBP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 1
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %RSP
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  store i64 %58, i64* %RBP, align 8, !tbaa !2428
  %61 = load i64, i64* %RSP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = sub i64 %61, 48
  store i64 %64, i64* %RSP, align 8, !tbaa !2428
  %65 = icmp ult i64 %61, 48
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %66, i8* %67, align 1, !tbaa !2432
  %68 = trunc i64 %64 to i32
  %69 = and i32 %68, 255
  %70 = call i32 @llvm.ctpop.i32(i32 %69) #17
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %73, i8* %74, align 1, !tbaa !2446
  %75 = xor i64 48, %61
  %76 = xor i64 %75, %64
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %79, i8* %80, align 1, !tbaa !2447
  %81 = icmp eq i64 %64, 0
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %82, i8* %83, align 1, !tbaa !2448
  %84 = lshr i64 %64, 63
  %85 = trunc i64 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %85, i8* %86, align 1, !tbaa !2449
  %87 = lshr i64 %61, 63
  %88 = xor i64 %84, %87
  %89 = add nuw nsw i64 %88, %87
  %90 = icmp eq i64 %89, 2
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %91, i8* %92, align 1, !tbaa !2450
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 4
  %95 = load i32, i32* %EDI
  %96 = zext i32 %95 to i64
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 3
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %94 to i32*
  store i32 %95, i32* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 8
  %102 = load i32, i32* %ESI
  %103 = zext i32 %102 to i64
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %101 to i32*
  store i32 %102, i32* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 16
  %109 = load i64, i64* %RDX
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %108 to i64*
  store i64 %109, i64* %112
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 24
  %115 = load i64, i64* %RCX
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i32*
  %124 = load i32, i32* %123
  %125 = zext i32 %124 to i64
  store i64 %125, i64* %RSI, align 8, !tbaa !2428
  %126 = load i64, i64* %RSI
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = and i64 %126, 4294967295
  %130 = shl i64 %129, 1
  %131 = trunc i64 %130 to i32
  %132 = icmp slt i32 %131, 0
  %133 = shl i32 %131, 1
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RSI, align 8, !tbaa !2428
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %136 = zext i1 %132 to i8
  store i8 %136, i8* %135, align 1, !tbaa !2451
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %138 = and i32 %133, 254
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #17
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  store i8 %142, i8* %137, align 1, !tbaa !2451
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %143, align 1, !tbaa !2451
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %145 = icmp eq i32 %133, 0
  %146 = zext i1 %145 to i8
  store i8 %146, i8* %144, align 1, !tbaa !2451
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %148 = lshr i32 %133, 31
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %147, align 1, !tbaa !2451
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %150, align 1, !tbaa !2451
  %151 = load i64, i64* %RBP
  %152 = sub i64 %151, 56
  %153 = load i32, i32* %ESI
  %154 = zext i32 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 3
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %152 to i32*
  store i32 %153, i32* %157
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 28
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 7
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  store i32 0, i32* %162
  br label %block_403356

block_40389f:                                     ; preds = %block_403893
  %163 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 8
  store i64 %165, i64* %PC
  %166 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 80) to double*)
  %167 = bitcast i8* %163 to double*
  store double %166, double* %167, align 1, !tbaa !2452
  %168 = getelementptr inbounds i8, i8* %163, i64 8
  %169 = bitcast i8* %168 to double*
  store double 0.000000e+00, double* %169, align 1, !tbaa !2452
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 48
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 3
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i32*
  %175 = load i32, i32* %174
  %176 = zext i32 %175 to i64
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %RAX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 3
  store i64 %179, i64* %PC
  %180 = trunc i64 %177 to i32
  %181 = add i32 2, %180
  %182 = zext i32 %181 to i64
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = icmp ult i32 %181, %180
  %184 = icmp ult i32 %181, 2
  %185 = or i1 %183, %184
  %186 = zext i1 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %186, i8* %187, align 1, !tbaa !2432
  %188 = and i32 %181, 255
  %189 = call i32 @llvm.ctpop.i32(i32 %188) #17
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %192, i8* %193, align 1, !tbaa !2446
  %194 = xor i64 2, %177
  %195 = trunc i64 %194 to i32
  %196 = xor i32 %195, %181
  %197 = lshr i32 %196, 4
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %199, i8* %200, align 1, !tbaa !2447
  %201 = icmp eq i32 %181, 0
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %202, i8* %203, align 1, !tbaa !2448
  %204 = lshr i32 %181, 31
  %205 = trunc i32 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %205, i8* %206, align 1, !tbaa !2449
  %207 = lshr i32 %180, 31
  %208 = xor i32 %204, %207
  %209 = add nuw nsw i32 %208, %204
  %210 = icmp eq i32 %209, 2
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %211, i8* %212, align 1, !tbaa !2450
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 48
  %215 = load i32, i32* %EAX
  %216 = zext i32 %215 to i64
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %214 to i32*
  store i32 %215, i32* %219
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 48
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 3
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RAX, align 8, !tbaa !2428
  %227 = load i64, i64* %RAX
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 3
  store i64 %229, i64* %PC
  %230 = trunc i64 %227 to i32
  %231 = shl i32 %230, 1
  %232 = icmp slt i32 %230, 0
  %233 = icmp slt i32 %231, 0
  %234 = xor i1 %232, %233
  %235 = zext i32 %231 to i64
  store i64 %235, i64* %RAX, align 8, !tbaa !2428
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %237 = zext i1 %232 to i8
  store i8 %237, i8* %236, align 1, !tbaa !2451
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %239 = and i32 %231, 254
  %240 = call i32 @llvm.ctpop.i32(i32 %239) #17
  %241 = trunc i32 %240 to i8
  %242 = and i8 %241, 1
  %243 = xor i8 %242, 1
  store i8 %243, i8* %238, align 1, !tbaa !2451
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %244, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %246 = icmp eq i32 %231, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %245, align 1, !tbaa !2451
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %249 = lshr i32 %231, 31
  %250 = trunc i32 %249 to i8
  store i8 %250, i8* %248, align 1, !tbaa !2451
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %252 = zext i1 %234 to i8
  store i8 %252, i8* %251, align 1, !tbaa !2451
  %253 = load i64, i64* %RBP
  %254 = sub i64 %253, 52
  %255 = load i32, i32* %EAX
  %256 = zext i32 %255 to i64
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 3
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %254 to i32*
  store i32 %255, i32* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 24
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RCX, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 48
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i32*
  %271 = load i32, i32* %270
  %272 = sext i32 %271 to i64
  store i64 %272, i64* %RDX, align 8, !tbaa !2428
  %273 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %274 = load i64, i64* %RCX
  %275 = load i64, i64* %RDX
  %276 = mul i64 %275, 8
  %277 = add i64 %276, %274
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 5
  store i64 %279, i64* %PC
  %280 = inttoptr i64 %277 to double*
  %281 = load double, double* %280
  %282 = bitcast i8* %273 to double*
  store double %281, double* %282, align 1, !tbaa !2452
  %283 = getelementptr inbounds i8, i8* %273, i64 8
  %284 = bitcast i8* %283 to double*
  store double 0.000000e+00, double* %284, align 1, !tbaa !2452
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 88
  %287 = bitcast %union.vec128_t* %XMM1 to i8*
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 5
  store i64 %289, i64* %PC
  %290 = bitcast i8* %287 to double*
  %291 = load double, double* %290, align 1
  %292 = inttoptr i64 %286 to double*
  store double %291, double* %292
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 24
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 48
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 3
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to i32*
  %304 = load i32, i32* %303
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %306 = load i64, i64* %RAX
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 3
  store i64 %308, i64* %PC
  %309 = trunc i64 %306 to i32
  %310 = add i32 1, %309
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = icmp ult i32 %310, %309
  %313 = icmp ult i32 %310, 1
  %314 = or i1 %312, %313
  %315 = zext i1 %314 to i8
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %315, i8* %316, align 1, !tbaa !2432
  %317 = and i32 %310, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #17
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2446
  %323 = xor i64 1, %306
  %324 = trunc i64 %323 to i32
  %325 = xor i32 %324, %310
  %326 = lshr i32 %325, 4
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %328, i8* %329, align 1, !tbaa !2447
  %330 = icmp eq i32 %310, 0
  %331 = zext i1 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = lshr i32 %310, 31
  %334 = trunc i32 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i32 %309, 31
  %337 = xor i32 %333, %336
  %338 = add nuw nsw i32 %337, %333
  %339 = icmp eq i32 %338, 2
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %340, i8* %341, align 1, !tbaa !2450
  %342 = load i32, i32* %EAX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  %346 = shl i64 %343, 32
  %347 = ashr exact i64 %346, 32
  store i64 %347, i64* %RDX, align 8, !tbaa !2428
  %348 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %349 = load i64, i64* %RCX
  %350 = load i64, i64* %RDX
  %351 = mul i64 %350, 8
  %352 = add i64 %351, %349
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 5
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %352 to double*
  %356 = load double, double* %355
  %357 = bitcast i8* %348 to double*
  store double %356, double* %357, align 1, !tbaa !2452
  %358 = getelementptr inbounds i8, i8* %348, i64 8
  %359 = bitcast i8* %358 to double*
  store double 0.000000e+00, double* %359, align 1, !tbaa !2452
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 96
  %362 = bitcast %union.vec128_t* %XMM1 to i8*
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 5
  store i64 %364, i64* %PC
  %365 = bitcast i8* %362 to double*
  %366 = load double, double* %365, align 1
  %367 = inttoptr i64 %361 to double*
  store double %366, double* %367
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 24
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 4
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %369 to i64*
  %373 = load i64, i64* %372
  store i64 %373, i64* %RCX, align 8, !tbaa !2428
  %374 = load i64, i64* %RBP
  %375 = sub i64 %374, 52
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 4
  store i64 %377, i64* %PC
  %378 = inttoptr i64 %375 to i32*
  %379 = load i32, i32* %378
  %380 = sext i32 %379 to i64
  store i64 %380, i64* %RDX, align 8, !tbaa !2428
  %381 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %382 = load i64, i64* %RCX
  %383 = load i64, i64* %RDX
  %384 = mul i64 %383, 8
  %385 = add i64 %384, %382
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = inttoptr i64 %385 to double*
  %389 = load double, double* %388
  %390 = bitcast i8* %381 to double*
  store double %389, double* %390, align 1, !tbaa !2452
  %391 = getelementptr inbounds i8, i8* %381, i64 8
  %392 = bitcast i8* %391 to double*
  store double 0.000000e+00, double* %392, align 1, !tbaa !2452
  %393 = load i64, i64* %RBP
  %394 = sub i64 %393, 72
  %395 = bitcast %union.vec128_t* %XMM1 to i8*
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 5
  store i64 %397, i64* %PC
  %398 = bitcast i8* %395 to double*
  %399 = load double, double* %398, align 1
  %400 = inttoptr i64 %394 to double*
  store double %399, double* %400
  %401 = load i64, i64* %RBP
  %402 = sub i64 %401, 24
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 4
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %RCX, align 8, !tbaa !2428
  %407 = load i64, i64* %RBP
  %408 = sub i64 %407, 52
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = load i64, i64* %RAX
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 3
  store i64 %416, i64* %PC
  %417 = trunc i64 %414 to i32
  %418 = add i32 1, %417
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RAX, align 8, !tbaa !2428
  %420 = icmp ult i32 %418, %417
  %421 = icmp ult i32 %418, 1
  %422 = or i1 %420, %421
  %423 = zext i1 %422 to i8
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %423, i8* %424, align 1, !tbaa !2432
  %425 = and i32 %418, 255
  %426 = call i32 @llvm.ctpop.i32(i32 %425) #17
  %427 = trunc i32 %426 to i8
  %428 = and i8 %427, 1
  %429 = xor i8 %428, 1
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %429, i8* %430, align 1, !tbaa !2446
  %431 = xor i64 1, %414
  %432 = trunc i64 %431 to i32
  %433 = xor i32 %432, %418
  %434 = lshr i32 %433, 4
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %436, i8* %437, align 1, !tbaa !2447
  %438 = icmp eq i32 %418, 0
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %439, i8* %440, align 1, !tbaa !2448
  %441 = lshr i32 %418, 31
  %442 = trunc i32 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %442, i8* %443, align 1, !tbaa !2449
  %444 = lshr i32 %417, 31
  %445 = xor i32 %441, %444
  %446 = add nuw nsw i32 %445, %441
  %447 = icmp eq i32 %446, 2
  %448 = zext i1 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %448, i8* %449, align 1, !tbaa !2450
  %450 = load i32, i32* %EAX
  %451 = zext i32 %450 to i64
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 3
  store i64 %453, i64* %PC
  %454 = shl i64 %451, 32
  %455 = ashr exact i64 %454, 32
  store i64 %455, i64* %RDX, align 8, !tbaa !2428
  %456 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %457 = load i64, i64* %RCX
  %458 = load i64, i64* %RDX
  %459 = mul i64 %458, 8
  %460 = add i64 %459, %457
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 5
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to double*
  %464 = load double, double* %463
  %465 = bitcast i8* %456 to double*
  store double %464, double* %465, align 1, !tbaa !2452
  %466 = getelementptr inbounds i8, i8* %456, i64 8
  %467 = bitcast i8* %466 to double*
  store double 0.000000e+00, double* %467, align 1, !tbaa !2452
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 80
  %470 = bitcast %union.vec128_t* %XMM1 to i8*
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 5
  store i64 %472, i64* %PC
  %473 = bitcast i8* %470 to double*
  %474 = load double, double* %473, align 1
  %475 = inttoptr i64 %469 to double*
  store double %474, double* %475
  %476 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %477 = load i64, i64* %RBP
  %478 = sub i64 %477, 72
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 5
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %478 to double*
  %482 = load double, double* %481
  %483 = bitcast i8* %476 to double*
  store double %482, double* %483, align 1, !tbaa !2452
  %484 = getelementptr inbounds i8, i8* %476, i64 8
  %485 = bitcast i8* %484 to double*
  store double 0.000000e+00, double* %485, align 1, !tbaa !2452
  %486 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %487 = bitcast %union.vec128_t* %XMM0 to i8*
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 3
  store i64 %489, i64* %PC
  %490 = bitcast i8* %487 to <2 x i32>*
  %491 = load <2 x i32>, <2 x i32>* %490, align 1
  %492 = getelementptr inbounds i8, i8* %487, i64 8
  %493 = bitcast i8* %492 to <2 x i32>*
  %494 = load <2 x i32>, <2 x i32>* %493, align 1
  %495 = extractelement <2 x i32> %491, i32 0
  %496 = bitcast i8* %486 to i32*
  store i32 %495, i32* %496, align 1, !tbaa !2479
  %497 = extractelement <2 x i32> %491, i32 1
  %498 = getelementptr inbounds i8, i8* %486, i64 4
  %499 = bitcast i8* %498 to i32*
  store i32 %497, i32* %499, align 1, !tbaa !2479
  %500 = extractelement <2 x i32> %494, i32 0
  %501 = getelementptr inbounds i8, i8* %486, i64 8
  %502 = bitcast i8* %501 to i32*
  store i32 %500, i32* %502, align 1, !tbaa !2479
  %503 = extractelement <2 x i32> %494, i32 1
  %504 = getelementptr inbounds i8, i8* %486, i64 12
  %505 = bitcast i8* %504 to i32*
  store i32 %503, i32* %505, align 1, !tbaa !2479
  %506 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %507 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %508 = load i64, i64* %RBP
  %509 = sub i64 %508, 96
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 5
  store i64 %511, i64* %PC
  %512 = bitcast i8* %507 to double*
  %513 = load double, double* %512, align 1
  %514 = getelementptr inbounds i8, i8* %507, i64 8
  %515 = bitcast i8* %514 to i64*
  %516 = load i64, i64* %515, align 1
  %517 = inttoptr i64 %509 to double*
  %518 = load double, double* %517
  %519 = fmul double %513, %518
  %520 = bitcast i8* %506 to double*
  store double %519, double* %520, align 1, !tbaa !2452
  %521 = getelementptr inbounds i8, i8* %506, i64 8
  %522 = bitcast i8* %521 to i64*
  store i64 %516, i64* %522, align 1, !tbaa !2452
  %523 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %524 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %525 = load i64, i64* %RBP
  %526 = sub i64 %525, 80
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = bitcast i8* %524 to double*
  %530 = load double, double* %529, align 1
  %531 = getelementptr inbounds i8, i8* %524, i64 8
  %532 = bitcast i8* %531 to i64*
  %533 = load i64, i64* %532, align 1
  %534 = inttoptr i64 %526 to double*
  %535 = load double, double* %534
  %536 = fmul double %530, %535
  %537 = bitcast i8* %523 to double*
  store double %536, double* %537, align 1, !tbaa !2452
  %538 = getelementptr inbounds i8, i8* %523, i64 8
  %539 = bitcast i8* %538 to i64*
  store i64 %533, i64* %539, align 1, !tbaa !2452
  %540 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %541 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %542 = bitcast %union.vec128_t* %XMM2 to i8*
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 4
  store i64 %544, i64* %PC
  %545 = bitcast i8* %541 to double*
  %546 = load double, double* %545, align 1
  %547 = getelementptr inbounds i8, i8* %541, i64 8
  %548 = bitcast i8* %547 to i64*
  %549 = load i64, i64* %548, align 1
  %550 = bitcast i8* %542 to double*
  %551 = load double, double* %550, align 1
  %552 = fsub double %546, %551
  %553 = bitcast i8* %540 to double*
  store double %552, double* %553, align 1, !tbaa !2452
  %554 = getelementptr inbounds i8, i8* %540, i64 8
  %555 = bitcast i8* %554 to i64*
  store i64 %549, i64* %555, align 1, !tbaa !2452
  %556 = load i64, i64* %RBP
  %557 = sub i64 %556, 104
  %558 = bitcast %union.vec128_t* %XMM1 to i8*
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 5
  store i64 %560, i64* %PC
  %561 = bitcast i8* %558 to double*
  %562 = load double, double* %561, align 1
  %563 = inttoptr i64 %557 to double*
  store double %562, double* %563
  %564 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %565 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %566 = load i64, i64* %RBP
  %567 = sub i64 %566, 96
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 5
  store i64 %569, i64* %PC
  %570 = bitcast i8* %565 to double*
  %571 = load double, double* %570, align 1
  %572 = getelementptr inbounds i8, i8* %565, i64 8
  %573 = bitcast i8* %572 to i64*
  %574 = load i64, i64* %573, align 1
  %575 = inttoptr i64 %567 to double*
  %576 = load double, double* %575
  %577 = fmul double %571, %576
  %578 = bitcast i8* %564 to double*
  store double %577, double* %578, align 1, !tbaa !2452
  %579 = getelementptr inbounds i8, i8* %564, i64 8
  %580 = bitcast i8* %579 to i64*
  store i64 %574, i64* %580, align 1, !tbaa !2452
  %581 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %582 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %583 = load i64, i64* %RBP
  %584 = sub i64 %583, 72
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 5
  store i64 %586, i64* %PC
  %587 = bitcast i8* %582 to double*
  %588 = load double, double* %587, align 1
  %589 = getelementptr inbounds i8, i8* %582, i64 8
  %590 = bitcast i8* %589 to i64*
  %591 = load i64, i64* %590, align 1
  %592 = inttoptr i64 %584 to double*
  %593 = load double, double* %592
  %594 = fmul double %588, %593
  %595 = bitcast i8* %581 to double*
  store double %594, double* %595, align 1, !tbaa !2452
  %596 = getelementptr inbounds i8, i8* %581, i64 8
  %597 = bitcast i8* %596 to i64*
  store i64 %591, i64* %597, align 1, !tbaa !2452
  %598 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %599 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 80
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 5
  store i64 %603, i64* %PC
  %604 = bitcast i8* %599 to double*
  %605 = load double, double* %604, align 1
  %606 = getelementptr inbounds i8, i8* %599, i64 8
  %607 = bitcast i8* %606 to i64*
  %608 = load i64, i64* %607, align 1
  %609 = inttoptr i64 %601 to double*
  %610 = load double, double* %609
  %611 = fsub double %605, %610
  %612 = bitcast i8* %598 to double*
  store double %611, double* %612, align 1, !tbaa !2452
  %613 = getelementptr inbounds i8, i8* %598, i64 8
  %614 = bitcast i8* %613 to i64*
  store i64 %608, i64* %614, align 1, !tbaa !2452
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 112
  %617 = bitcast %union.vec128_t* %XMM0 to i8*
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 5
  store i64 %619, i64* %PC
  %620 = bitcast i8* %617 to double*
  %621 = load double, double* %620, align 1
  %622 = inttoptr i64 %616 to double*
  store double %621, double* %622
  %623 = load i64, i64* %RBP
  %624 = sub i64 %623, 44
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 3
  store i64 %626, i64* %PC
  %627 = inttoptr i64 %624 to i32*
  %628 = load i32, i32* %627
  %629 = zext i32 %628 to i64
  store i64 %629, i64* %RAX, align 8, !tbaa !2428
  %630 = load i64, i64* %RBP
  %631 = sub i64 %630, 28
  %632 = load i32, i32* %EAX
  %633 = zext i32 %632 to i64
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %631 to i32*
  store i32 %632, i32* %636
  br label %block_403940

block_4035d2:                                     ; preds = %block_4035c1
  %637 = sub i64 %9460, 28
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = load i64, i64* %RAX
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 8
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC
  %648 = trunc i64 %643 to i32
  %649 = inttoptr i64 %645 to i32*
  %650 = load i32, i32* %649
  %651 = add i32 %650, %648
  %652 = zext i32 %651 to i64
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = icmp ult i32 %651, %648
  %654 = icmp ult i32 %651, %650
  %655 = or i1 %653, %654
  %656 = zext i1 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %656, i8* %657, align 1, !tbaa !2432
  %658 = and i32 %651, 255
  %659 = call i32 @llvm.ctpop.i32(i32 %658) #17
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %662, i8* %663, align 1, !tbaa !2446
  %664 = xor i32 %650, %648
  %665 = xor i32 %664, %651
  %666 = lshr i32 %665, 4
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %668, i8* %669, align 1, !tbaa !2447
  %670 = icmp eq i32 %651, 0
  %671 = zext i1 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %671, i8* %672, align 1, !tbaa !2448
  %673 = lshr i32 %651, 31
  %674 = trunc i32 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %674, i8* %675, align 1, !tbaa !2449
  %676 = lshr i32 %648, 31
  %677 = lshr i32 %650, 31
  %678 = xor i32 %673, %676
  %679 = xor i32 %673, %677
  %680 = add nuw nsw i32 %678, %679
  %681 = icmp eq i32 %680, 2
  %682 = zext i1 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %682, i8* %683, align 1, !tbaa !2450
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 32
  %686 = load i32, i32* %EAX
  %687 = zext i32 %686 to i64
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %685 to i32*
  store i32 %686, i32* %690
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 32
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 3
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i32*
  %696 = load i32, i32* %695
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RAX, align 8, !tbaa !2428
  %698 = load i64, i64* %RAX
  %699 = load i64, i64* %RBP
  %700 = sub i64 %699, 8
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 3
  store i64 %702, i64* %PC
  %703 = trunc i64 %698 to i32
  %704 = inttoptr i64 %700 to i32*
  %705 = load i32, i32* %704
  %706 = add i32 %705, %703
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = icmp ult i32 %706, %703
  %709 = icmp ult i32 %706, %705
  %710 = or i1 %708, %709
  %711 = zext i1 %710 to i8
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %711, i8* %712, align 1, !tbaa !2432
  %713 = and i32 %706, 255
  %714 = call i32 @llvm.ctpop.i32(i32 %713) #17
  %715 = trunc i32 %714 to i8
  %716 = and i8 %715, 1
  %717 = xor i8 %716, 1
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %717, i8* %718, align 1, !tbaa !2446
  %719 = xor i32 %705, %703
  %720 = xor i32 %719, %706
  %721 = lshr i32 %720, 4
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %723, i8* %724, align 1, !tbaa !2447
  %725 = icmp eq i32 %706, 0
  %726 = zext i1 %725 to i8
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %726, i8* %727, align 1, !tbaa !2448
  %728 = lshr i32 %706, 31
  %729 = trunc i32 %728 to i8
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %729, i8* %730, align 1, !tbaa !2449
  %731 = lshr i32 %703, 31
  %732 = lshr i32 %705, 31
  %733 = xor i32 %728, %731
  %734 = xor i32 %728, %732
  %735 = add nuw nsw i32 %733, %734
  %736 = icmp eq i32 %735, 2
  %737 = zext i1 %736 to i8
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %737, i8* %738, align 1, !tbaa !2450
  %739 = load i64, i64* %RBP
  %740 = sub i64 %739, 36
  %741 = load i32, i32* %EAX
  %742 = zext i32 %741 to i64
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 3
  store i64 %744, i64* %PC
  %745 = inttoptr i64 %740 to i32*
  store i32 %741, i32* %745
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 36
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 3
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i32*
  %751 = load i32, i32* %750
  %752 = zext i32 %751 to i64
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %RAX
  %754 = load i64, i64* %RBP
  %755 = sub i64 %754, 8
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 3
  store i64 %757, i64* %PC
  %758 = trunc i64 %753 to i32
  %759 = inttoptr i64 %755 to i32*
  %760 = load i32, i32* %759
  %761 = add i32 %760, %758
  %762 = zext i32 %761 to i64
  store i64 %762, i64* %RAX, align 8, !tbaa !2428
  %763 = icmp ult i32 %761, %758
  %764 = icmp ult i32 %761, %760
  %765 = or i1 %763, %764
  %766 = zext i1 %765 to i8
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %766, i8* %767, align 1, !tbaa !2432
  %768 = and i32 %761, 255
  %769 = call i32 @llvm.ctpop.i32(i32 %768) #17
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %772, i8* %773, align 1, !tbaa !2446
  %774 = xor i32 %760, %758
  %775 = xor i32 %774, %761
  %776 = lshr i32 %775, 4
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %778, i8* %779, align 1, !tbaa !2447
  %780 = icmp eq i32 %761, 0
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %781, i8* %782, align 1, !tbaa !2448
  %783 = lshr i32 %761, 31
  %784 = trunc i32 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %784, i8* %785, align 1, !tbaa !2449
  %786 = lshr i32 %758, 31
  %787 = lshr i32 %760, 31
  %788 = xor i32 %783, %786
  %789 = xor i32 %783, %787
  %790 = add nuw nsw i32 %788, %789
  %791 = icmp eq i32 %790, 2
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %792, i8* %793, align 1, !tbaa !2450
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 40
  %796 = load i32, i32* %EAX
  %797 = zext i32 %796 to i64
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 3
  store i64 %799, i64* %PC
  %800 = inttoptr i64 %795 to i32*
  store i32 %796, i32* %800
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 16
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i64*
  %806 = load i64, i64* %805
  store i64 %806, i64* %RCX, align 8, !tbaa !2428
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 28
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 4
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i32*
  %812 = load i32, i32* %811
  %813 = sext i32 %812 to i64
  store i64 %813, i64* %RDX, align 8, !tbaa !2428
  %814 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %815 = load i64, i64* %RCX
  %816 = load i64, i64* %RDX
  %817 = mul i64 %816, 8
  %818 = add i64 %817, %815
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 5
  store i64 %820, i64* %PC
  %821 = inttoptr i64 %818 to double*
  %822 = load double, double* %821
  %823 = bitcast i8* %814 to double*
  store double %822, double* %823, align 1, !tbaa !2452
  %824 = getelementptr inbounds i8, i8* %814, i64 8
  %825 = bitcast i8* %824 to double*
  store double 0.000000e+00, double* %825, align 1, !tbaa !2452
  %826 = load i64, i64* %RBP
  %827 = sub i64 %826, 16
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 4
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %827 to i64*
  %831 = load i64, i64* %830
  store i64 %831, i64* %RCX, align 8, !tbaa !2428
  %832 = load i64, i64* %RBP
  %833 = sub i64 %832, 32
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 4
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i32*
  %837 = load i32, i32* %836
  %838 = sext i32 %837 to i64
  store i64 %838, i64* %RDX, align 8, !tbaa !2428
  %839 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %840 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %841 = load i64, i64* %RCX
  %842 = load i64, i64* %RDX
  %843 = mul i64 %842, 8
  %844 = add i64 %843, %841
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 5
  store i64 %846, i64* %PC
  %847 = bitcast i8* %840 to double*
  %848 = load double, double* %847, align 1
  %849 = getelementptr inbounds i8, i8* %840, i64 8
  %850 = bitcast i8* %849 to i64*
  %851 = load i64, i64* %850, align 1
  %852 = inttoptr i64 %844 to double*
  %853 = load double, double* %852
  %854 = fadd double %848, %853
  %855 = bitcast i8* %839 to double*
  store double %854, double* %855, align 1, !tbaa !2452
  %856 = getelementptr inbounds i8, i8* %839, i64 8
  %857 = bitcast i8* %856 to i64*
  store i64 %851, i64* %857, align 1, !tbaa !2452
  %858 = load i64, i64* %RBP
  %859 = sub i64 %858, 120
  %860 = bitcast %union.vec128_t* %XMM0 to i8*
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 5
  store i64 %862, i64* %PC
  %863 = bitcast i8* %860 to double*
  %864 = load double, double* %863, align 1
  %865 = inttoptr i64 %859 to double*
  store double %864, double* %865
  %866 = load i64, i64* %RBP
  %867 = sub i64 %866, 16
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 4
  store i64 %869, i64* %PC
  %870 = inttoptr i64 %867 to i64*
  %871 = load i64, i64* %870
  store i64 %871, i64* %RCX, align 8, !tbaa !2428
  %872 = load i64, i64* %RBP
  %873 = sub i64 %872, 28
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 3
  store i64 %875, i64* %PC
  %876 = inttoptr i64 %873 to i32*
  %877 = load i32, i32* %876
  %878 = zext i32 %877 to i64
  store i64 %878, i64* %RAX, align 8, !tbaa !2428
  %879 = load i64, i64* %RAX
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 3
  store i64 %881, i64* %PC
  %882 = trunc i64 %879 to i32
  %883 = add i32 1, %882
  %884 = zext i32 %883 to i64
  store i64 %884, i64* %RAX, align 8, !tbaa !2428
  %885 = icmp ult i32 %883, %882
  %886 = icmp ult i32 %883, 1
  %887 = or i1 %885, %886
  %888 = zext i1 %887 to i8
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %888, i8* %889, align 1, !tbaa !2432
  %890 = and i32 %883, 255
  %891 = call i32 @llvm.ctpop.i32(i32 %890) #17
  %892 = trunc i32 %891 to i8
  %893 = and i8 %892, 1
  %894 = xor i8 %893, 1
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %894, i8* %895, align 1, !tbaa !2446
  %896 = xor i64 1, %879
  %897 = trunc i64 %896 to i32
  %898 = xor i32 %897, %883
  %899 = lshr i32 %898, 4
  %900 = trunc i32 %899 to i8
  %901 = and i8 %900, 1
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %901, i8* %902, align 1, !tbaa !2447
  %903 = icmp eq i32 %883, 0
  %904 = zext i1 %903 to i8
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %904, i8* %905, align 1, !tbaa !2448
  %906 = lshr i32 %883, 31
  %907 = trunc i32 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %907, i8* %908, align 1, !tbaa !2449
  %909 = lshr i32 %882, 31
  %910 = xor i32 %906, %909
  %911 = add nuw nsw i32 %910, %906
  %912 = icmp eq i32 %911, 2
  %913 = zext i1 %912 to i8
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %913, i8* %914, align 1, !tbaa !2450
  %915 = load i32, i32* %EAX
  %916 = zext i32 %915 to i64
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 3
  store i64 %918, i64* %PC
  %919 = shl i64 %916, 32
  %920 = ashr exact i64 %919, 32
  store i64 %920, i64* %RDX, align 8, !tbaa !2428
  %921 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %922 = load i64, i64* %RCX
  %923 = load i64, i64* %RDX
  %924 = mul i64 %923, 8
  %925 = add i64 %924, %922
  %926 = load i64, i64* %PC
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC
  %928 = inttoptr i64 %925 to double*
  %929 = load double, double* %928
  %930 = bitcast i8* %921 to double*
  store double %929, double* %930, align 1, !tbaa !2452
  %931 = getelementptr inbounds i8, i8* %921, i64 8
  %932 = bitcast i8* %931 to double*
  store double 0.000000e+00, double* %932, align 1, !tbaa !2452
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 16
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i64*
  %938 = load i64, i64* %937
  store i64 %938, i64* %RCX, align 8, !tbaa !2428
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 32
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 3
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i32*
  %944 = load i32, i32* %943
  %945 = zext i32 %944 to i64
  store i64 %945, i64* %RAX, align 8, !tbaa !2428
  %946 = load i64, i64* %RAX
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 3
  store i64 %948, i64* %PC
  %949 = trunc i64 %946 to i32
  %950 = add i32 1, %949
  %951 = zext i32 %950 to i64
  store i64 %951, i64* %RAX, align 8, !tbaa !2428
  %952 = icmp ult i32 %950, %949
  %953 = icmp ult i32 %950, 1
  %954 = or i1 %952, %953
  %955 = zext i1 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %955, i8* %956, align 1, !tbaa !2432
  %957 = and i32 %950, 255
  %958 = call i32 @llvm.ctpop.i32(i32 %957) #17
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = xor i8 %960, 1
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %961, i8* %962, align 1, !tbaa !2446
  %963 = xor i64 1, %946
  %964 = trunc i64 %963 to i32
  %965 = xor i32 %964, %950
  %966 = lshr i32 %965, 4
  %967 = trunc i32 %966 to i8
  %968 = and i8 %967, 1
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %968, i8* %969, align 1, !tbaa !2447
  %970 = icmp eq i32 %950, 0
  %971 = zext i1 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %971, i8* %972, align 1, !tbaa !2448
  %973 = lshr i32 %950, 31
  %974 = trunc i32 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %974, i8* %975, align 1, !tbaa !2449
  %976 = lshr i32 %949, 31
  %977 = xor i32 %973, %976
  %978 = add nuw nsw i32 %977, %973
  %979 = icmp eq i32 %978, 2
  %980 = zext i1 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %980, i8* %981, align 1, !tbaa !2450
  %982 = load i32, i32* %EAX
  %983 = zext i32 %982 to i64
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 3
  store i64 %985, i64* %PC
  %986 = shl i64 %983, 32
  %987 = ashr exact i64 %986, 32
  store i64 %987, i64* %RDX, align 8, !tbaa !2428
  %988 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %989 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %990 = load i64, i64* %RCX
  %991 = load i64, i64* %RDX
  %992 = mul i64 %991, 8
  %993 = add i64 %992, %990
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 5
  store i64 %995, i64* %PC
  %996 = bitcast i8* %989 to double*
  %997 = load double, double* %996, align 1
  %998 = getelementptr inbounds i8, i8* %989, i64 8
  %999 = bitcast i8* %998 to i64*
  %1000 = load i64, i64* %999, align 1
  %1001 = inttoptr i64 %993 to double*
  %1002 = load double, double* %1001
  %1003 = fadd double %997, %1002
  %1004 = bitcast i8* %988 to double*
  store double %1003, double* %1004, align 1, !tbaa !2452
  %1005 = getelementptr inbounds i8, i8* %988, i64 8
  %1006 = bitcast i8* %1005 to i64*
  store i64 %1000, i64* %1006, align 1, !tbaa !2452
  %1007 = load i64, i64* %RBP
  %1008 = sub i64 %1007, 128
  %1009 = bitcast %union.vec128_t* %XMM0 to i8*
  %1010 = load i64, i64* %PC
  %1011 = add i64 %1010, 5
  store i64 %1011, i64* %PC
  %1012 = bitcast i8* %1009 to double*
  %1013 = load double, double* %1012, align 1
  %1014 = inttoptr i64 %1008 to double*
  store double %1013, double* %1014
  %1015 = load i64, i64* %RBP
  %1016 = sub i64 %1015, 16
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 4
  store i64 %1018, i64* %PC
  %1019 = inttoptr i64 %1016 to i64*
  %1020 = load i64, i64* %1019
  store i64 %1020, i64* %RCX, align 8, !tbaa !2428
  %1021 = load i64, i64* %RBP
  %1022 = sub i64 %1021, 28
  %1023 = load i64, i64* %PC
  %1024 = add i64 %1023, 4
  store i64 %1024, i64* %PC
  %1025 = inttoptr i64 %1022 to i32*
  %1026 = load i32, i32* %1025
  %1027 = sext i32 %1026 to i64
  store i64 %1027, i64* %RDX, align 8, !tbaa !2428
  %1028 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1029 = load i64, i64* %RCX
  %1030 = load i64, i64* %RDX
  %1031 = mul i64 %1030, 8
  %1032 = add i64 %1031, %1029
  %1033 = load i64, i64* %PC
  %1034 = add i64 %1033, 5
  store i64 %1034, i64* %PC
  %1035 = inttoptr i64 %1032 to double*
  %1036 = load double, double* %1035
  %1037 = bitcast i8* %1028 to double*
  store double %1036, double* %1037, align 1, !tbaa !2452
  %1038 = getelementptr inbounds i8, i8* %1028, i64 8
  %1039 = bitcast i8* %1038 to double*
  store double 0.000000e+00, double* %1039, align 1, !tbaa !2452
  %1040 = load i64, i64* %RBP
  %1041 = sub i64 %1040, 16
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 4
  store i64 %1043, i64* %PC
  %1044 = inttoptr i64 %1041 to i64*
  %1045 = load i64, i64* %1044
  store i64 %1045, i64* %RCX, align 8, !tbaa !2428
  %1046 = load i64, i64* %RBP
  %1047 = sub i64 %1046, 32
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 4
  store i64 %1049, i64* %PC
  %1050 = inttoptr i64 %1047 to i32*
  %1051 = load i32, i32* %1050
  %1052 = sext i32 %1051 to i64
  store i64 %1052, i64* %RDX, align 8, !tbaa !2428
  %1053 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1054 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1055 = load i64, i64* %RCX
  %1056 = load i64, i64* %RDX
  %1057 = mul i64 %1056, 8
  %1058 = add i64 %1057, %1055
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 5
  store i64 %1060, i64* %PC
  %1061 = bitcast i8* %1054 to double*
  %1062 = load double, double* %1061, align 1
  %1063 = getelementptr inbounds i8, i8* %1054, i64 8
  %1064 = bitcast i8* %1063 to i64*
  %1065 = load i64, i64* %1064, align 1
  %1066 = inttoptr i64 %1058 to double*
  %1067 = load double, double* %1066
  %1068 = fsub double %1062, %1067
  %1069 = bitcast i8* %1053 to double*
  store double %1068, double* %1069, align 1, !tbaa !2452
  %1070 = getelementptr inbounds i8, i8* %1053, i64 8
  %1071 = bitcast i8* %1070 to i64*
  store i64 %1065, i64* %1071, align 1, !tbaa !2452
  %1072 = load i64, i64* %RBP
  %1073 = sub i64 %1072, 136
  %1074 = bitcast %union.vec128_t* %XMM0 to i8*
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 8
  store i64 %1076, i64* %PC
  %1077 = bitcast i8* %1074 to double*
  %1078 = load double, double* %1077, align 1
  %1079 = inttoptr i64 %1073 to double*
  store double %1078, double* %1079
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 16
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 4
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1081 to i64*
  %1085 = load i64, i64* %1084
  store i64 %1085, i64* %RCX, align 8, !tbaa !2428
  %1086 = load i64, i64* %RBP
  %1087 = sub i64 %1086, 28
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 3
  store i64 %1089, i64* %PC
  %1090 = inttoptr i64 %1087 to i32*
  %1091 = load i32, i32* %1090
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RAX, align 8, !tbaa !2428
  %1093 = load i64, i64* %RAX
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 3
  store i64 %1095, i64* %PC
  %1096 = trunc i64 %1093 to i32
  %1097 = add i32 1, %1096
  %1098 = zext i32 %1097 to i64
  store i64 %1098, i64* %RAX, align 8, !tbaa !2428
  %1099 = icmp ult i32 %1097, %1096
  %1100 = icmp ult i32 %1097, 1
  %1101 = or i1 %1099, %1100
  %1102 = zext i1 %1101 to i8
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1102, i8* %1103, align 1, !tbaa !2432
  %1104 = and i32 %1097, 255
  %1105 = call i32 @llvm.ctpop.i32(i32 %1104) #17
  %1106 = trunc i32 %1105 to i8
  %1107 = and i8 %1106, 1
  %1108 = xor i8 %1107, 1
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1108, i8* %1109, align 1, !tbaa !2446
  %1110 = xor i64 1, %1093
  %1111 = trunc i64 %1110 to i32
  %1112 = xor i32 %1111, %1097
  %1113 = lshr i32 %1112, 4
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1115, i8* %1116, align 1, !tbaa !2447
  %1117 = icmp eq i32 %1097, 0
  %1118 = zext i1 %1117 to i8
  %1119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1118, i8* %1119, align 1, !tbaa !2448
  %1120 = lshr i32 %1097, 31
  %1121 = trunc i32 %1120 to i8
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1121, i8* %1122, align 1, !tbaa !2449
  %1123 = lshr i32 %1096, 31
  %1124 = xor i32 %1120, %1123
  %1125 = add nuw nsw i32 %1124, %1120
  %1126 = icmp eq i32 %1125, 2
  %1127 = zext i1 %1126 to i8
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1127, i8* %1128, align 1, !tbaa !2450
  %1129 = load i32, i32* %EAX
  %1130 = zext i32 %1129 to i64
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 3
  store i64 %1132, i64* %PC
  %1133 = shl i64 %1130, 32
  %1134 = ashr exact i64 %1133, 32
  store i64 %1134, i64* %RDX, align 8, !tbaa !2428
  %1135 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1136 = load i64, i64* %RCX
  %1137 = load i64, i64* %RDX
  %1138 = mul i64 %1137, 8
  %1139 = add i64 %1138, %1136
  %1140 = load i64, i64* %PC
  %1141 = add i64 %1140, 5
  store i64 %1141, i64* %PC
  %1142 = inttoptr i64 %1139 to double*
  %1143 = load double, double* %1142
  %1144 = bitcast i8* %1135 to double*
  store double %1143, double* %1144, align 1, !tbaa !2452
  %1145 = getelementptr inbounds i8, i8* %1135, i64 8
  %1146 = bitcast i8* %1145 to double*
  store double 0.000000e+00, double* %1146, align 1, !tbaa !2452
  %1147 = load i64, i64* %RBP
  %1148 = sub i64 %1147, 16
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC
  %1151 = inttoptr i64 %1148 to i64*
  %1152 = load i64, i64* %1151
  store i64 %1152, i64* %RCX, align 8, !tbaa !2428
  %1153 = load i64, i64* %RBP
  %1154 = sub i64 %1153, 32
  %1155 = load i64, i64* %PC
  %1156 = add i64 %1155, 3
  store i64 %1156, i64* %PC
  %1157 = inttoptr i64 %1154 to i32*
  %1158 = load i32, i32* %1157
  %1159 = zext i32 %1158 to i64
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = load i64, i64* %RAX
  %1161 = load i64, i64* %PC
  %1162 = add i64 %1161, 3
  store i64 %1162, i64* %PC
  %1163 = trunc i64 %1160 to i32
  %1164 = add i32 1, %1163
  %1165 = zext i32 %1164 to i64
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = icmp ult i32 %1164, %1163
  %1167 = icmp ult i32 %1164, 1
  %1168 = or i1 %1166, %1167
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1169, i8* %1170, align 1, !tbaa !2432
  %1171 = and i32 %1164, 255
  %1172 = call i32 @llvm.ctpop.i32(i32 %1171) #17
  %1173 = trunc i32 %1172 to i8
  %1174 = and i8 %1173, 1
  %1175 = xor i8 %1174, 1
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1175, i8* %1176, align 1, !tbaa !2446
  %1177 = xor i64 1, %1160
  %1178 = trunc i64 %1177 to i32
  %1179 = xor i32 %1178, %1164
  %1180 = lshr i32 %1179, 4
  %1181 = trunc i32 %1180 to i8
  %1182 = and i8 %1181, 1
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1182, i8* %1183, align 1, !tbaa !2447
  %1184 = icmp eq i32 %1164, 0
  %1185 = zext i1 %1184 to i8
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1185, i8* %1186, align 1, !tbaa !2448
  %1187 = lshr i32 %1164, 31
  %1188 = trunc i32 %1187 to i8
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1188, i8* %1189, align 1, !tbaa !2449
  %1190 = lshr i32 %1163, 31
  %1191 = xor i32 %1187, %1190
  %1192 = add nuw nsw i32 %1191, %1187
  %1193 = icmp eq i32 %1192, 2
  %1194 = zext i1 %1193 to i8
  %1195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1194, i8* %1195, align 1, !tbaa !2450
  %1196 = load i32, i32* %EAX
  %1197 = zext i32 %1196 to i64
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 3
  store i64 %1199, i64* %PC
  %1200 = shl i64 %1197, 32
  %1201 = ashr exact i64 %1200, 32
  store i64 %1201, i64* %RDX, align 8, !tbaa !2428
  %1202 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1203 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1204 = load i64, i64* %RCX
  %1205 = load i64, i64* %RDX
  %1206 = mul i64 %1205, 8
  %1207 = add i64 %1206, %1204
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 5
  store i64 %1209, i64* %PC
  %1210 = bitcast i8* %1203 to double*
  %1211 = load double, double* %1210, align 1
  %1212 = getelementptr inbounds i8, i8* %1203, i64 8
  %1213 = bitcast i8* %1212 to i64*
  %1214 = load i64, i64* %1213, align 1
  %1215 = inttoptr i64 %1207 to double*
  %1216 = load double, double* %1215
  %1217 = fsub double %1211, %1216
  %1218 = bitcast i8* %1202 to double*
  store double %1217, double* %1218, align 1, !tbaa !2452
  %1219 = getelementptr inbounds i8, i8* %1202, i64 8
  %1220 = bitcast i8* %1219 to i64*
  store i64 %1214, i64* %1220, align 1, !tbaa !2452
  %1221 = load i64, i64* %RBP
  %1222 = sub i64 %1221, 144
  %1223 = bitcast %union.vec128_t* %XMM0 to i8*
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 8
  store i64 %1225, i64* %PC
  %1226 = bitcast i8* %1223 to double*
  %1227 = load double, double* %1226, align 1
  %1228 = inttoptr i64 %1222 to double*
  store double %1227, double* %1228
  %1229 = load i64, i64* %RBP
  %1230 = sub i64 %1229, 16
  %1231 = load i64, i64* %PC
  %1232 = add i64 %1231, 4
  store i64 %1232, i64* %PC
  %1233 = inttoptr i64 %1230 to i64*
  %1234 = load i64, i64* %1233
  store i64 %1234, i64* %RCX, align 8, !tbaa !2428
  %1235 = load i64, i64* %RBP
  %1236 = sub i64 %1235, 36
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 4
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1236 to i32*
  %1240 = load i32, i32* %1239
  %1241 = sext i32 %1240 to i64
  store i64 %1241, i64* %RDX, align 8, !tbaa !2428
  %1242 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1243 = load i64, i64* %RCX
  %1244 = load i64, i64* %RDX
  %1245 = mul i64 %1244, 8
  %1246 = add i64 %1245, %1243
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 5
  store i64 %1248, i64* %PC
  %1249 = inttoptr i64 %1246 to double*
  %1250 = load double, double* %1249
  %1251 = bitcast i8* %1242 to double*
  store double %1250, double* %1251, align 1, !tbaa !2452
  %1252 = getelementptr inbounds i8, i8* %1242, i64 8
  %1253 = bitcast i8* %1252 to double*
  store double 0.000000e+00, double* %1253, align 1, !tbaa !2452
  %1254 = load i64, i64* %RBP
  %1255 = sub i64 %1254, 16
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 4
  store i64 %1257, i64* %PC
  %1258 = inttoptr i64 %1255 to i64*
  %1259 = load i64, i64* %1258
  store i64 %1259, i64* %RCX, align 8, !tbaa !2428
  %1260 = load i64, i64* %RBP
  %1261 = sub i64 %1260, 40
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 4
  store i64 %1263, i64* %PC
  %1264 = inttoptr i64 %1261 to i32*
  %1265 = load i32, i32* %1264
  %1266 = sext i32 %1265 to i64
  store i64 %1266, i64* %RDX, align 8, !tbaa !2428
  %1267 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1268 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1269 = load i64, i64* %RCX
  %1270 = load i64, i64* %RDX
  %1271 = mul i64 %1270, 8
  %1272 = add i64 %1271, %1269
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 5
  store i64 %1274, i64* %PC
  %1275 = bitcast i8* %1268 to double*
  %1276 = load double, double* %1275, align 1
  %1277 = getelementptr inbounds i8, i8* %1268, i64 8
  %1278 = bitcast i8* %1277 to i64*
  %1279 = load i64, i64* %1278, align 1
  %1280 = inttoptr i64 %1272 to double*
  %1281 = load double, double* %1280
  %1282 = fadd double %1276, %1281
  %1283 = bitcast i8* %1267 to double*
  store double %1282, double* %1283, align 1, !tbaa !2452
  %1284 = getelementptr inbounds i8, i8* %1267, i64 8
  %1285 = bitcast i8* %1284 to i64*
  store i64 %1279, i64* %1285, align 1, !tbaa !2452
  %1286 = load i64, i64* %RBP
  %1287 = sub i64 %1286, 152
  %1288 = bitcast %union.vec128_t* %XMM0 to i8*
  %1289 = load i64, i64* %PC
  %1290 = add i64 %1289, 8
  store i64 %1290, i64* %PC
  %1291 = bitcast i8* %1288 to double*
  %1292 = load double, double* %1291, align 1
  %1293 = inttoptr i64 %1287 to double*
  store double %1292, double* %1293
  %1294 = load i64, i64* %RBP
  %1295 = sub i64 %1294, 16
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 4
  store i64 %1297, i64* %PC
  %1298 = inttoptr i64 %1295 to i64*
  %1299 = load i64, i64* %1298
  store i64 %1299, i64* %RCX, align 8, !tbaa !2428
  %1300 = load i64, i64* %RBP
  %1301 = sub i64 %1300, 36
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 3
  store i64 %1303, i64* %PC
  %1304 = inttoptr i64 %1301 to i32*
  %1305 = load i32, i32* %1304
  %1306 = zext i32 %1305 to i64
  store i64 %1306, i64* %RAX, align 8, !tbaa !2428
  %1307 = load i64, i64* %RAX
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 3
  store i64 %1309, i64* %PC
  %1310 = trunc i64 %1307 to i32
  %1311 = add i32 1, %1310
  %1312 = zext i32 %1311 to i64
  store i64 %1312, i64* %RAX, align 8, !tbaa !2428
  %1313 = icmp ult i32 %1311, %1310
  %1314 = icmp ult i32 %1311, 1
  %1315 = or i1 %1313, %1314
  %1316 = zext i1 %1315 to i8
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1316, i8* %1317, align 1, !tbaa !2432
  %1318 = and i32 %1311, 255
  %1319 = call i32 @llvm.ctpop.i32(i32 %1318) #17
  %1320 = trunc i32 %1319 to i8
  %1321 = and i8 %1320, 1
  %1322 = xor i8 %1321, 1
  %1323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1322, i8* %1323, align 1, !tbaa !2446
  %1324 = xor i64 1, %1307
  %1325 = trunc i64 %1324 to i32
  %1326 = xor i32 %1325, %1311
  %1327 = lshr i32 %1326, 4
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1329, i8* %1330, align 1, !tbaa !2447
  %1331 = icmp eq i32 %1311, 0
  %1332 = zext i1 %1331 to i8
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1332, i8* %1333, align 1, !tbaa !2448
  %1334 = lshr i32 %1311, 31
  %1335 = trunc i32 %1334 to i8
  %1336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1335, i8* %1336, align 1, !tbaa !2449
  %1337 = lshr i32 %1310, 31
  %1338 = xor i32 %1334, %1337
  %1339 = add nuw nsw i32 %1338, %1334
  %1340 = icmp eq i32 %1339, 2
  %1341 = zext i1 %1340 to i8
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1341, i8* %1342, align 1, !tbaa !2450
  %1343 = load i32, i32* %EAX
  %1344 = zext i32 %1343 to i64
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 3
  store i64 %1346, i64* %PC
  %1347 = shl i64 %1344, 32
  %1348 = ashr exact i64 %1347, 32
  store i64 %1348, i64* %RDX, align 8, !tbaa !2428
  %1349 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1350 = load i64, i64* %RCX
  %1351 = load i64, i64* %RDX
  %1352 = mul i64 %1351, 8
  %1353 = add i64 %1352, %1350
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 5
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1353 to double*
  %1357 = load double, double* %1356
  %1358 = bitcast i8* %1349 to double*
  store double %1357, double* %1358, align 1, !tbaa !2452
  %1359 = getelementptr inbounds i8, i8* %1349, i64 8
  %1360 = bitcast i8* %1359 to double*
  store double 0.000000e+00, double* %1360, align 1, !tbaa !2452
  %1361 = load i64, i64* %RBP
  %1362 = sub i64 %1361, 16
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 4
  store i64 %1364, i64* %PC
  %1365 = inttoptr i64 %1362 to i64*
  %1366 = load i64, i64* %1365
  store i64 %1366, i64* %RCX, align 8, !tbaa !2428
  %1367 = load i64, i64* %RBP
  %1368 = sub i64 %1367, 40
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 3
  store i64 %1370, i64* %PC
  %1371 = inttoptr i64 %1368 to i32*
  %1372 = load i32, i32* %1371
  %1373 = zext i32 %1372 to i64
  store i64 %1373, i64* %RAX, align 8, !tbaa !2428
  %1374 = load i64, i64* %RAX
  %1375 = load i64, i64* %PC
  %1376 = add i64 %1375, 3
  store i64 %1376, i64* %PC
  %1377 = trunc i64 %1374 to i32
  %1378 = add i32 1, %1377
  %1379 = zext i32 %1378 to i64
  store i64 %1379, i64* %RAX, align 8, !tbaa !2428
  %1380 = icmp ult i32 %1378, %1377
  %1381 = icmp ult i32 %1378, 1
  %1382 = or i1 %1380, %1381
  %1383 = zext i1 %1382 to i8
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1383, i8* %1384, align 1, !tbaa !2432
  %1385 = and i32 %1378, 255
  %1386 = call i32 @llvm.ctpop.i32(i32 %1385) #17
  %1387 = trunc i32 %1386 to i8
  %1388 = and i8 %1387, 1
  %1389 = xor i8 %1388, 1
  %1390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1389, i8* %1390, align 1, !tbaa !2446
  %1391 = xor i64 1, %1374
  %1392 = trunc i64 %1391 to i32
  %1393 = xor i32 %1392, %1378
  %1394 = lshr i32 %1393, 4
  %1395 = trunc i32 %1394 to i8
  %1396 = and i8 %1395, 1
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1396, i8* %1397, align 1, !tbaa !2447
  %1398 = icmp eq i32 %1378, 0
  %1399 = zext i1 %1398 to i8
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1399, i8* %1400, align 1, !tbaa !2448
  %1401 = lshr i32 %1378, 31
  %1402 = trunc i32 %1401 to i8
  %1403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1402, i8* %1403, align 1, !tbaa !2449
  %1404 = lshr i32 %1377, 31
  %1405 = xor i32 %1401, %1404
  %1406 = add nuw nsw i32 %1405, %1401
  %1407 = icmp eq i32 %1406, 2
  %1408 = zext i1 %1407 to i8
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1408, i8* %1409, align 1, !tbaa !2450
  %1410 = load i32, i32* %EAX
  %1411 = zext i32 %1410 to i64
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 3
  store i64 %1413, i64* %PC
  %1414 = shl i64 %1411, 32
  %1415 = ashr exact i64 %1414, 32
  store i64 %1415, i64* %RDX, align 8, !tbaa !2428
  %1416 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1417 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1418 = load i64, i64* %RCX
  %1419 = load i64, i64* %RDX
  %1420 = mul i64 %1419, 8
  %1421 = add i64 %1420, %1418
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  store i64 %1423, i64* %PC
  %1424 = bitcast i8* %1417 to double*
  %1425 = load double, double* %1424, align 1
  %1426 = getelementptr inbounds i8, i8* %1417, i64 8
  %1427 = bitcast i8* %1426 to i64*
  %1428 = load i64, i64* %1427, align 1
  %1429 = inttoptr i64 %1421 to double*
  %1430 = load double, double* %1429
  %1431 = fadd double %1425, %1430
  %1432 = bitcast i8* %1416 to double*
  store double %1431, double* %1432, align 1, !tbaa !2452
  %1433 = getelementptr inbounds i8, i8* %1416, i64 8
  %1434 = bitcast i8* %1433 to i64*
  store i64 %1428, i64* %1434, align 1, !tbaa !2452
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 160
  %1437 = bitcast %union.vec128_t* %XMM0 to i8*
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 8
  store i64 %1439, i64* %PC
  %1440 = bitcast i8* %1437 to double*
  %1441 = load double, double* %1440, align 1
  %1442 = inttoptr i64 %1436 to double*
  store double %1441, double* %1442
  %1443 = load i64, i64* %RBP
  %1444 = sub i64 %1443, 16
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 4
  store i64 %1446, i64* %PC
  %1447 = inttoptr i64 %1444 to i64*
  %1448 = load i64, i64* %1447
  store i64 %1448, i64* %RCX, align 8, !tbaa !2428
  %1449 = load i64, i64* %RBP
  %1450 = sub i64 %1449, 36
  %1451 = load i64, i64* %PC
  %1452 = add i64 %1451, 4
  store i64 %1452, i64* %PC
  %1453 = inttoptr i64 %1450 to i32*
  %1454 = load i32, i32* %1453
  %1455 = sext i32 %1454 to i64
  store i64 %1455, i64* %RDX, align 8, !tbaa !2428
  %1456 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1457 = load i64, i64* %RCX
  %1458 = load i64, i64* %RDX
  %1459 = mul i64 %1458, 8
  %1460 = add i64 %1459, %1457
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 5
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to double*
  %1464 = load double, double* %1463
  %1465 = bitcast i8* %1456 to double*
  store double %1464, double* %1465, align 1, !tbaa !2452
  %1466 = getelementptr inbounds i8, i8* %1456, i64 8
  %1467 = bitcast i8* %1466 to double*
  store double 0.000000e+00, double* %1467, align 1, !tbaa !2452
  %1468 = load i64, i64* %RBP
  %1469 = sub i64 %1468, 16
  %1470 = load i64, i64* %PC
  %1471 = add i64 %1470, 4
  store i64 %1471, i64* %PC
  %1472 = inttoptr i64 %1469 to i64*
  %1473 = load i64, i64* %1472
  store i64 %1473, i64* %RCX, align 8, !tbaa !2428
  %1474 = load i64, i64* %RBP
  %1475 = sub i64 %1474, 40
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 4
  store i64 %1477, i64* %PC
  %1478 = inttoptr i64 %1475 to i32*
  %1479 = load i32, i32* %1478
  %1480 = sext i32 %1479 to i64
  store i64 %1480, i64* %RDX, align 8, !tbaa !2428
  %1481 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1482 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1483 = load i64, i64* %RCX
  %1484 = load i64, i64* %RDX
  %1485 = mul i64 %1484, 8
  %1486 = add i64 %1485, %1483
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 5
  store i64 %1488, i64* %PC
  %1489 = bitcast i8* %1482 to double*
  %1490 = load double, double* %1489, align 1
  %1491 = getelementptr inbounds i8, i8* %1482, i64 8
  %1492 = bitcast i8* %1491 to i64*
  %1493 = load i64, i64* %1492, align 1
  %1494 = inttoptr i64 %1486 to double*
  %1495 = load double, double* %1494
  %1496 = fsub double %1490, %1495
  %1497 = bitcast i8* %1481 to double*
  store double %1496, double* %1497, align 1, !tbaa !2452
  %1498 = getelementptr inbounds i8, i8* %1481, i64 8
  %1499 = bitcast i8* %1498 to i64*
  store i64 %1493, i64* %1499, align 1, !tbaa !2452
  %1500 = load i64, i64* %RBP
  %1501 = sub i64 %1500, 168
  %1502 = bitcast %union.vec128_t* %XMM0 to i8*
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 8
  store i64 %1504, i64* %PC
  %1505 = bitcast i8* %1502 to double*
  %1506 = load double, double* %1505, align 1
  %1507 = inttoptr i64 %1501 to double*
  store double %1506, double* %1507
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 16
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 4
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i64*
  %1513 = load i64, i64* %1512
  store i64 %1513, i64* %RCX, align 8, !tbaa !2428
  %1514 = load i64, i64* %RBP
  %1515 = sub i64 %1514, 36
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 3
  store i64 %1517, i64* %PC
  %1518 = inttoptr i64 %1515 to i32*
  %1519 = load i32, i32* %1518
  %1520 = zext i32 %1519 to i64
  store i64 %1520, i64* %RAX, align 8, !tbaa !2428
  %1521 = load i64, i64* %RAX
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 3
  store i64 %1523, i64* %PC
  %1524 = trunc i64 %1521 to i32
  %1525 = add i32 1, %1524
  %1526 = zext i32 %1525 to i64
  store i64 %1526, i64* %RAX, align 8, !tbaa !2428
  %1527 = icmp ult i32 %1525, %1524
  %1528 = icmp ult i32 %1525, 1
  %1529 = or i1 %1527, %1528
  %1530 = zext i1 %1529 to i8
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1530, i8* %1531, align 1, !tbaa !2432
  %1532 = and i32 %1525, 255
  %1533 = call i32 @llvm.ctpop.i32(i32 %1532) #17
  %1534 = trunc i32 %1533 to i8
  %1535 = and i8 %1534, 1
  %1536 = xor i8 %1535, 1
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1536, i8* %1537, align 1, !tbaa !2446
  %1538 = xor i64 1, %1521
  %1539 = trunc i64 %1538 to i32
  %1540 = xor i32 %1539, %1525
  %1541 = lshr i32 %1540, 4
  %1542 = trunc i32 %1541 to i8
  %1543 = and i8 %1542, 1
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1543, i8* %1544, align 1, !tbaa !2447
  %1545 = icmp eq i32 %1525, 0
  %1546 = zext i1 %1545 to i8
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1546, i8* %1547, align 1, !tbaa !2448
  %1548 = lshr i32 %1525, 31
  %1549 = trunc i32 %1548 to i8
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1549, i8* %1550, align 1, !tbaa !2449
  %1551 = lshr i32 %1524, 31
  %1552 = xor i32 %1548, %1551
  %1553 = add nuw nsw i32 %1552, %1548
  %1554 = icmp eq i32 %1553, 2
  %1555 = zext i1 %1554 to i8
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1555, i8* %1556, align 1, !tbaa !2450
  %1557 = load i32, i32* %EAX
  %1558 = zext i32 %1557 to i64
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 3
  store i64 %1560, i64* %PC
  %1561 = shl i64 %1558, 32
  %1562 = ashr exact i64 %1561, 32
  store i64 %1562, i64* %RDX, align 8, !tbaa !2428
  %1563 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1564 = load i64, i64* %RCX
  %1565 = load i64, i64* %RDX
  %1566 = mul i64 %1565, 8
  %1567 = add i64 %1566, %1564
  %1568 = load i64, i64* %PC
  %1569 = add i64 %1568, 5
  store i64 %1569, i64* %PC
  %1570 = inttoptr i64 %1567 to double*
  %1571 = load double, double* %1570
  %1572 = bitcast i8* %1563 to double*
  store double %1571, double* %1572, align 1, !tbaa !2452
  %1573 = getelementptr inbounds i8, i8* %1563, i64 8
  %1574 = bitcast i8* %1573 to double*
  store double 0.000000e+00, double* %1574, align 1, !tbaa !2452
  %1575 = load i64, i64* %RBP
  %1576 = sub i64 %1575, 16
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 4
  store i64 %1578, i64* %PC
  %1579 = inttoptr i64 %1576 to i64*
  %1580 = load i64, i64* %1579
  store i64 %1580, i64* %RCX, align 8, !tbaa !2428
  %1581 = load i64, i64* %RBP
  %1582 = sub i64 %1581, 40
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 3
  store i64 %1584, i64* %PC
  %1585 = inttoptr i64 %1582 to i32*
  %1586 = load i32, i32* %1585
  %1587 = zext i32 %1586 to i64
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = load i64, i64* %RAX
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 3
  store i64 %1590, i64* %PC
  %1591 = trunc i64 %1588 to i32
  %1592 = add i32 1, %1591
  %1593 = zext i32 %1592 to i64
  store i64 %1593, i64* %RAX, align 8, !tbaa !2428
  %1594 = icmp ult i32 %1592, %1591
  %1595 = icmp ult i32 %1592, 1
  %1596 = or i1 %1594, %1595
  %1597 = zext i1 %1596 to i8
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1597, i8* %1598, align 1, !tbaa !2432
  %1599 = and i32 %1592, 255
  %1600 = call i32 @llvm.ctpop.i32(i32 %1599) #17
  %1601 = trunc i32 %1600 to i8
  %1602 = and i8 %1601, 1
  %1603 = xor i8 %1602, 1
  %1604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1603, i8* %1604, align 1, !tbaa !2446
  %1605 = xor i64 1, %1588
  %1606 = trunc i64 %1605 to i32
  %1607 = xor i32 %1606, %1592
  %1608 = lshr i32 %1607, 4
  %1609 = trunc i32 %1608 to i8
  %1610 = and i8 %1609, 1
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1610, i8* %1611, align 1, !tbaa !2447
  %1612 = icmp eq i32 %1592, 0
  %1613 = zext i1 %1612 to i8
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1613, i8* %1614, align 1, !tbaa !2448
  %1615 = lshr i32 %1592, 31
  %1616 = trunc i32 %1615 to i8
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1616, i8* %1617, align 1, !tbaa !2449
  %1618 = lshr i32 %1591, 31
  %1619 = xor i32 %1615, %1618
  %1620 = add nuw nsw i32 %1619, %1615
  %1621 = icmp eq i32 %1620, 2
  %1622 = zext i1 %1621 to i8
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1622, i8* %1623, align 1, !tbaa !2450
  %1624 = load i32, i32* %EAX
  %1625 = zext i32 %1624 to i64
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 3
  store i64 %1627, i64* %PC
  %1628 = shl i64 %1625, 32
  %1629 = ashr exact i64 %1628, 32
  store i64 %1629, i64* %RDX, align 8, !tbaa !2428
  %1630 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1631 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1632 = load i64, i64* %RCX
  %1633 = load i64, i64* %RDX
  %1634 = mul i64 %1633, 8
  %1635 = add i64 %1634, %1632
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 5
  store i64 %1637, i64* %PC
  %1638 = bitcast i8* %1631 to double*
  %1639 = load double, double* %1638, align 1
  %1640 = getelementptr inbounds i8, i8* %1631, i64 8
  %1641 = bitcast i8* %1640 to i64*
  %1642 = load i64, i64* %1641, align 1
  %1643 = inttoptr i64 %1635 to double*
  %1644 = load double, double* %1643
  %1645 = fsub double %1639, %1644
  %1646 = bitcast i8* %1630 to double*
  store double %1645, double* %1646, align 1, !tbaa !2452
  %1647 = getelementptr inbounds i8, i8* %1630, i64 8
  %1648 = bitcast i8* %1647 to i64*
  store i64 %1642, i64* %1648, align 1, !tbaa !2452
  %1649 = load i64, i64* %RBP
  %1650 = sub i64 %1649, 176
  %1651 = bitcast %union.vec128_t* %XMM0 to i8*
  %1652 = load i64, i64* %PC
  %1653 = add i64 %1652, 8
  store i64 %1653, i64* %PC
  %1654 = bitcast i8* %1651 to double*
  %1655 = load double, double* %1654, align 1
  %1656 = inttoptr i64 %1650 to double*
  store double %1655, double* %1656
  %1657 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1658 = load i64, i64* %RBP
  %1659 = sub i64 %1658, 120
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 5
  store i64 %1661, i64* %PC
  %1662 = inttoptr i64 %1659 to double*
  %1663 = load double, double* %1662
  %1664 = bitcast i8* %1657 to double*
  store double %1663, double* %1664, align 1, !tbaa !2452
  %1665 = getelementptr inbounds i8, i8* %1657, i64 8
  %1666 = bitcast i8* %1665 to double*
  store double 0.000000e+00, double* %1666, align 1, !tbaa !2452
  %1667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1668 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1669 = load i64, i64* %RBP
  %1670 = sub i64 %1669, 152
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 8
  store i64 %1672, i64* %PC
  %1673 = bitcast i8* %1668 to double*
  %1674 = load double, double* %1673, align 1
  %1675 = getelementptr inbounds i8, i8* %1668, i64 8
  %1676 = bitcast i8* %1675 to i64*
  %1677 = load i64, i64* %1676, align 1
  %1678 = inttoptr i64 %1670 to double*
  %1679 = load double, double* %1678
  %1680 = fadd double %1674, %1679
  %1681 = bitcast i8* %1667 to double*
  store double %1680, double* %1681, align 1, !tbaa !2452
  %1682 = getelementptr inbounds i8, i8* %1667, i64 8
  %1683 = bitcast i8* %1682 to i64*
  store i64 %1677, i64* %1683, align 1, !tbaa !2452
  %1684 = load i64, i64* %RBP
  %1685 = sub i64 %1684, 16
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 4
  store i64 %1687, i64* %PC
  %1688 = inttoptr i64 %1685 to i64*
  %1689 = load i64, i64* %1688
  store i64 %1689, i64* %RCX, align 8, !tbaa !2428
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 28
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 4
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  %1695 = load i32, i32* %1694
  %1696 = sext i32 %1695 to i64
  store i64 %1696, i64* %RDX, align 8, !tbaa !2428
  %1697 = load i64, i64* %RCX
  %1698 = load i64, i64* %RDX
  %1699 = mul i64 %1698, 8
  %1700 = add i64 %1699, %1697
  %1701 = bitcast %union.vec128_t* %XMM0 to i8*
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 5
  store i64 %1703, i64* %PC
  %1704 = bitcast i8* %1701 to double*
  %1705 = load double, double* %1704, align 1
  %1706 = inttoptr i64 %1700 to double*
  store double %1705, double* %1706
  %1707 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1708 = load i64, i64* %RBP
  %1709 = sub i64 %1708, 128
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 5
  store i64 %1711, i64* %PC
  %1712 = inttoptr i64 %1709 to double*
  %1713 = load double, double* %1712
  %1714 = bitcast i8* %1707 to double*
  store double %1713, double* %1714, align 1, !tbaa !2452
  %1715 = getelementptr inbounds i8, i8* %1707, i64 8
  %1716 = bitcast i8* %1715 to double*
  store double 0.000000e+00, double* %1716, align 1, !tbaa !2452
  %1717 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1718 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1719 = load i64, i64* %RBP
  %1720 = sub i64 %1719, 160
  %1721 = load i64, i64* %PC
  %1722 = add i64 %1721, 8
  store i64 %1722, i64* %PC
  %1723 = bitcast i8* %1718 to double*
  %1724 = load double, double* %1723, align 1
  %1725 = getelementptr inbounds i8, i8* %1718, i64 8
  %1726 = bitcast i8* %1725 to i64*
  %1727 = load i64, i64* %1726, align 1
  %1728 = inttoptr i64 %1720 to double*
  %1729 = load double, double* %1728
  %1730 = fadd double %1724, %1729
  %1731 = bitcast i8* %1717 to double*
  store double %1730, double* %1731, align 1, !tbaa !2452
  %1732 = getelementptr inbounds i8, i8* %1717, i64 8
  %1733 = bitcast i8* %1732 to i64*
  store i64 %1727, i64* %1733, align 1, !tbaa !2452
  %1734 = load i64, i64* %RBP
  %1735 = sub i64 %1734, 16
  %1736 = load i64, i64* %PC
  %1737 = add i64 %1736, 4
  store i64 %1737, i64* %PC
  %1738 = inttoptr i64 %1735 to i64*
  %1739 = load i64, i64* %1738
  store i64 %1739, i64* %RCX, align 8, !tbaa !2428
  %1740 = load i64, i64* %RBP
  %1741 = sub i64 %1740, 28
  %1742 = load i64, i64* %PC
  %1743 = add i64 %1742, 3
  store i64 %1743, i64* %PC
  %1744 = inttoptr i64 %1741 to i32*
  %1745 = load i32, i32* %1744
  %1746 = zext i32 %1745 to i64
  store i64 %1746, i64* %RAX, align 8, !tbaa !2428
  %1747 = load i64, i64* %RAX
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 3
  store i64 %1749, i64* %PC
  %1750 = trunc i64 %1747 to i32
  %1751 = add i32 1, %1750
  %1752 = zext i32 %1751 to i64
  store i64 %1752, i64* %RAX, align 8, !tbaa !2428
  %1753 = icmp ult i32 %1751, %1750
  %1754 = icmp ult i32 %1751, 1
  %1755 = or i1 %1753, %1754
  %1756 = zext i1 %1755 to i8
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1756, i8* %1757, align 1, !tbaa !2432
  %1758 = and i32 %1751, 255
  %1759 = call i32 @llvm.ctpop.i32(i32 %1758) #17
  %1760 = trunc i32 %1759 to i8
  %1761 = and i8 %1760, 1
  %1762 = xor i8 %1761, 1
  %1763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1762, i8* %1763, align 1, !tbaa !2446
  %1764 = xor i64 1, %1747
  %1765 = trunc i64 %1764 to i32
  %1766 = xor i32 %1765, %1751
  %1767 = lshr i32 %1766, 4
  %1768 = trunc i32 %1767 to i8
  %1769 = and i8 %1768, 1
  %1770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1769, i8* %1770, align 1, !tbaa !2447
  %1771 = icmp eq i32 %1751, 0
  %1772 = zext i1 %1771 to i8
  %1773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1772, i8* %1773, align 1, !tbaa !2448
  %1774 = lshr i32 %1751, 31
  %1775 = trunc i32 %1774 to i8
  %1776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1775, i8* %1776, align 1, !tbaa !2449
  %1777 = lshr i32 %1750, 31
  %1778 = xor i32 %1774, %1777
  %1779 = add nuw nsw i32 %1778, %1774
  %1780 = icmp eq i32 %1779, 2
  %1781 = zext i1 %1780 to i8
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1781, i8* %1782, align 1, !tbaa !2450
  %1783 = load i32, i32* %EAX
  %1784 = zext i32 %1783 to i64
  %1785 = load i64, i64* %PC
  %1786 = add i64 %1785, 3
  store i64 %1786, i64* %PC
  %1787 = shl i64 %1784, 32
  %1788 = ashr exact i64 %1787, 32
  store i64 %1788, i64* %RDX, align 8, !tbaa !2428
  %1789 = load i64, i64* %RCX
  %1790 = load i64, i64* %RDX
  %1791 = mul i64 %1790, 8
  %1792 = add i64 %1791, %1789
  %1793 = bitcast %union.vec128_t* %XMM0 to i8*
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 5
  store i64 %1795, i64* %PC
  %1796 = bitcast i8* %1793 to double*
  %1797 = load double, double* %1796, align 1
  %1798 = inttoptr i64 %1792 to double*
  store double %1797, double* %1798
  %1799 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1800 = load i64, i64* %RBP
  %1801 = sub i64 %1800, 160
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 8
  store i64 %1803, i64* %PC
  %1804 = inttoptr i64 %1801 to double*
  %1805 = load double, double* %1804
  %1806 = bitcast i8* %1799 to double*
  store double %1805, double* %1806, align 1, !tbaa !2452
  %1807 = getelementptr inbounds i8, i8* %1799, i64 8
  %1808 = bitcast i8* %1807 to double*
  store double 0.000000e+00, double* %1808, align 1, !tbaa !2452
  %1809 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1810 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1811 = load i64, i64* %RBP
  %1812 = sub i64 %1811, 128
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 5
  store i64 %1814, i64* %PC
  %1815 = bitcast i8* %1810 to double*
  %1816 = load double, double* %1815, align 1
  %1817 = getelementptr inbounds i8, i8* %1810, i64 8
  %1818 = bitcast i8* %1817 to i64*
  %1819 = load i64, i64* %1818, align 1
  %1820 = inttoptr i64 %1812 to double*
  %1821 = load double, double* %1820
  %1822 = fsub double %1816, %1821
  %1823 = bitcast i8* %1809 to double*
  store double %1822, double* %1823, align 1, !tbaa !2452
  %1824 = getelementptr inbounds i8, i8* %1809, i64 8
  %1825 = bitcast i8* %1824 to i64*
  store i64 %1819, i64* %1825, align 1, !tbaa !2452
  %1826 = load i64, i64* %RBP
  %1827 = sub i64 %1826, 16
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 4
  store i64 %1829, i64* %PC
  %1830 = inttoptr i64 %1827 to i64*
  %1831 = load i64, i64* %1830
  store i64 %1831, i64* %RCX, align 8, !tbaa !2428
  %1832 = load i64, i64* %RBP
  %1833 = sub i64 %1832, 36
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 4
  store i64 %1835, i64* %PC
  %1836 = inttoptr i64 %1833 to i32*
  %1837 = load i32, i32* %1836
  %1838 = sext i32 %1837 to i64
  store i64 %1838, i64* %RDX, align 8, !tbaa !2428
  %1839 = load i64, i64* %RCX
  %1840 = load i64, i64* %RDX
  %1841 = mul i64 %1840, 8
  %1842 = add i64 %1841, %1839
  %1843 = bitcast %union.vec128_t* %XMM0 to i8*
  %1844 = load i64, i64* %PC
  %1845 = add i64 %1844, 5
  store i64 %1845, i64* %PC
  %1846 = bitcast i8* %1843 to double*
  %1847 = load double, double* %1846, align 1
  %1848 = inttoptr i64 %1842 to double*
  store double %1847, double* %1848
  %1849 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 120
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 5
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1851 to double*
  %1855 = load double, double* %1854
  %1856 = bitcast i8* %1849 to double*
  store double %1855, double* %1856, align 1, !tbaa !2452
  %1857 = getelementptr inbounds i8, i8* %1849, i64 8
  %1858 = bitcast i8* %1857 to double*
  store double 0.000000e+00, double* %1858, align 1, !tbaa !2452
  %1859 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1860 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1861 = load i64, i64* %RBP
  %1862 = sub i64 %1861, 152
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 8
  store i64 %1864, i64* %PC
  %1865 = bitcast i8* %1860 to double*
  %1866 = load double, double* %1865, align 1
  %1867 = getelementptr inbounds i8, i8* %1860, i64 8
  %1868 = bitcast i8* %1867 to i64*
  %1869 = load i64, i64* %1868, align 1
  %1870 = inttoptr i64 %1862 to double*
  %1871 = load double, double* %1870
  %1872 = fsub double %1866, %1871
  %1873 = bitcast i8* %1859 to double*
  store double %1872, double* %1873, align 1, !tbaa !2452
  %1874 = getelementptr inbounds i8, i8* %1859, i64 8
  %1875 = bitcast i8* %1874 to i64*
  store i64 %1869, i64* %1875, align 1, !tbaa !2452
  %1876 = load i64, i64* %RBP
  %1877 = sub i64 %1876, 16
  %1878 = load i64, i64* %PC
  %1879 = add i64 %1878, 4
  store i64 %1879, i64* %PC
  %1880 = inttoptr i64 %1877 to i64*
  %1881 = load i64, i64* %1880
  store i64 %1881, i64* %RCX, align 8, !tbaa !2428
  %1882 = load i64, i64* %RBP
  %1883 = sub i64 %1882, 36
  %1884 = load i64, i64* %PC
  %1885 = add i64 %1884, 3
  store i64 %1885, i64* %PC
  %1886 = inttoptr i64 %1883 to i32*
  %1887 = load i32, i32* %1886
  %1888 = zext i32 %1887 to i64
  store i64 %1888, i64* %RAX, align 8, !tbaa !2428
  %1889 = load i64, i64* %RAX
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 3
  store i64 %1891, i64* %PC
  %1892 = trunc i64 %1889 to i32
  %1893 = add i32 1, %1892
  %1894 = zext i32 %1893 to i64
  store i64 %1894, i64* %RAX, align 8, !tbaa !2428
  %1895 = icmp ult i32 %1893, %1892
  %1896 = icmp ult i32 %1893, 1
  %1897 = or i1 %1895, %1896
  %1898 = zext i1 %1897 to i8
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1898, i8* %1899, align 1, !tbaa !2432
  %1900 = and i32 %1893, 255
  %1901 = call i32 @llvm.ctpop.i32(i32 %1900) #17
  %1902 = trunc i32 %1901 to i8
  %1903 = and i8 %1902, 1
  %1904 = xor i8 %1903, 1
  %1905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1904, i8* %1905, align 1, !tbaa !2446
  %1906 = xor i64 1, %1889
  %1907 = trunc i64 %1906 to i32
  %1908 = xor i32 %1907, %1893
  %1909 = lshr i32 %1908, 4
  %1910 = trunc i32 %1909 to i8
  %1911 = and i8 %1910, 1
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1911, i8* %1912, align 1, !tbaa !2447
  %1913 = icmp eq i32 %1893, 0
  %1914 = zext i1 %1913 to i8
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1914, i8* %1915, align 1, !tbaa !2448
  %1916 = lshr i32 %1893, 31
  %1917 = trunc i32 %1916 to i8
  %1918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1917, i8* %1918, align 1, !tbaa !2449
  %1919 = lshr i32 %1892, 31
  %1920 = xor i32 %1916, %1919
  %1921 = add nuw nsw i32 %1920, %1916
  %1922 = icmp eq i32 %1921, 2
  %1923 = zext i1 %1922 to i8
  %1924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1923, i8* %1924, align 1, !tbaa !2450
  %1925 = load i32, i32* %EAX
  %1926 = zext i32 %1925 to i64
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 3
  store i64 %1928, i64* %PC
  %1929 = shl i64 %1926, 32
  %1930 = ashr exact i64 %1929, 32
  store i64 %1930, i64* %RDX, align 8, !tbaa !2428
  %1931 = load i64, i64* %RCX
  %1932 = load i64, i64* %RDX
  %1933 = mul i64 %1932, 8
  %1934 = add i64 %1933, %1931
  %1935 = bitcast %union.vec128_t* %XMM0 to i8*
  %1936 = load i64, i64* %PC
  %1937 = add i64 %1936, 5
  store i64 %1937, i64* %PC
  %1938 = bitcast i8* %1935 to double*
  %1939 = load double, double* %1938, align 1
  %1940 = inttoptr i64 %1934 to double*
  store double %1939, double* %1940
  %1941 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1942 = load i64, i64* %RBP
  %1943 = sub i64 %1942, 136
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 8
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1943 to double*
  %1947 = load double, double* %1946
  %1948 = bitcast i8* %1941 to double*
  store double %1947, double* %1948, align 1, !tbaa !2452
  %1949 = getelementptr inbounds i8, i8* %1941, i64 8
  %1950 = bitcast i8* %1949 to double*
  store double 0.000000e+00, double* %1950, align 1, !tbaa !2452
  %1951 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1952 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1953 = load i64, i64* %RBP
  %1954 = sub i64 %1953, 176
  %1955 = load i64, i64* %PC
  %1956 = add i64 %1955, 8
  store i64 %1956, i64* %PC
  %1957 = bitcast i8* %1952 to double*
  %1958 = load double, double* %1957, align 1
  %1959 = getelementptr inbounds i8, i8* %1952, i64 8
  %1960 = bitcast i8* %1959 to i64*
  %1961 = load i64, i64* %1960, align 1
  %1962 = inttoptr i64 %1954 to double*
  %1963 = load double, double* %1962
  %1964 = fsub double %1958, %1963
  %1965 = bitcast i8* %1951 to double*
  store double %1964, double* %1965, align 1, !tbaa !2452
  %1966 = getelementptr inbounds i8, i8* %1951, i64 8
  %1967 = bitcast i8* %1966 to i64*
  store i64 %1961, i64* %1967, align 1, !tbaa !2452
  %1968 = load i64, i64* %RBP
  %1969 = sub i64 %1968, 120
  %1970 = bitcast %union.vec128_t* %XMM0 to i8*
  %1971 = load i64, i64* %PC
  %1972 = add i64 %1971, 5
  store i64 %1972, i64* %PC
  %1973 = bitcast i8* %1970 to double*
  %1974 = load double, double* %1973, align 1
  %1975 = inttoptr i64 %1969 to double*
  store double %1974, double* %1975
  %1976 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 144
  %1979 = load i64, i64* %PC
  %1980 = add i64 %1979, 8
  store i64 %1980, i64* %PC
  %1981 = inttoptr i64 %1978 to double*
  %1982 = load double, double* %1981
  %1983 = bitcast i8* %1976 to double*
  store double %1982, double* %1983, align 1, !tbaa !2452
  %1984 = getelementptr inbounds i8, i8* %1976, i64 8
  %1985 = bitcast i8* %1984 to double*
  store double 0.000000e+00, double* %1985, align 1, !tbaa !2452
  %1986 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1987 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 168
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 8
  store i64 %1991, i64* %PC
  %1992 = bitcast i8* %1987 to double*
  %1993 = load double, double* %1992, align 1
  %1994 = getelementptr inbounds i8, i8* %1987, i64 8
  %1995 = bitcast i8* %1994 to i64*
  %1996 = load i64, i64* %1995, align 1
  %1997 = inttoptr i64 %1989 to double*
  %1998 = load double, double* %1997
  %1999 = fadd double %1993, %1998
  %2000 = bitcast i8* %1986 to double*
  store double %1999, double* %2000, align 1, !tbaa !2452
  %2001 = getelementptr inbounds i8, i8* %1986, i64 8
  %2002 = bitcast i8* %2001 to i64*
  store i64 %1996, i64* %2002, align 1, !tbaa !2452
  %2003 = load i64, i64* %RBP
  %2004 = sub i64 %2003, 128
  %2005 = bitcast %union.vec128_t* %XMM0 to i8*
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 5
  store i64 %2007, i64* %PC
  %2008 = bitcast i8* %2005 to double*
  %2009 = load double, double* %2008, align 1
  %2010 = inttoptr i64 %2004 to double*
  store double %2009, double* %2010
  %2011 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2012 = load i64, i64* %RBP
  %2013 = sub i64 %2012, 72
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 5
  store i64 %2015, i64* %PC
  %2016 = inttoptr i64 %2013 to double*
  %2017 = load double, double* %2016
  %2018 = bitcast i8* %2011 to double*
  store double %2017, double* %2018, align 1, !tbaa !2452
  %2019 = getelementptr inbounds i8, i8* %2011, i64 8
  %2020 = bitcast i8* %2019 to double*
  store double 0.000000e+00, double* %2020, align 1, !tbaa !2452
  %2021 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2022 = load i64, i64* %RBP
  %2023 = sub i64 %2022, 120
  %2024 = load i64, i64* %PC
  %2025 = add i64 %2024, 5
  store i64 %2025, i64* %PC
  %2026 = inttoptr i64 %2023 to double*
  %2027 = load double, double* %2026
  %2028 = bitcast i8* %2021 to double*
  store double %2027, double* %2028, align 1, !tbaa !2452
  %2029 = getelementptr inbounds i8, i8* %2021, i64 8
  %2030 = bitcast i8* %2029 to double*
  store double 0.000000e+00, double* %2030, align 1, !tbaa !2452
  %2031 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2032 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2033 = load i64, i64* %RBP
  %2034 = sub i64 %2033, 128
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 5
  store i64 %2036, i64* %PC
  %2037 = bitcast i8* %2032 to double*
  %2038 = load double, double* %2037, align 1
  %2039 = getelementptr inbounds i8, i8* %2032, i64 8
  %2040 = bitcast i8* %2039 to i64*
  %2041 = load i64, i64* %2040, align 1
  %2042 = inttoptr i64 %2034 to double*
  %2043 = load double, double* %2042
  %2044 = fsub double %2038, %2043
  %2045 = bitcast i8* %2031 to double*
  store double %2044, double* %2045, align 1, !tbaa !2452
  %2046 = getelementptr inbounds i8, i8* %2031, i64 8
  %2047 = bitcast i8* %2046 to i64*
  store i64 %2041, i64* %2047, align 1, !tbaa !2452
  %2048 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2050 = bitcast %union.vec128_t* %XMM1 to i8*
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 4
  store i64 %2052, i64* %PC
  %2053 = bitcast i8* %2049 to double*
  %2054 = load double, double* %2053, align 1
  %2055 = getelementptr inbounds i8, i8* %2049, i64 8
  %2056 = bitcast i8* %2055 to i64*
  %2057 = load i64, i64* %2056, align 1
  %2058 = bitcast i8* %2050 to double*
  %2059 = load double, double* %2058, align 1
  %2060 = fmul double %2054, %2059
  %2061 = bitcast i8* %2048 to double*
  store double %2060, double* %2061, align 1, !tbaa !2452
  %2062 = getelementptr inbounds i8, i8* %2048, i64 8
  %2063 = bitcast i8* %2062 to i64*
  store i64 %2057, i64* %2063, align 1, !tbaa !2452
  %2064 = load i64, i64* %RBP
  %2065 = sub i64 %2064, 16
  %2066 = load i64, i64* %PC
  %2067 = add i64 %2066, 4
  store i64 %2067, i64* %PC
  %2068 = inttoptr i64 %2065 to i64*
  %2069 = load i64, i64* %2068
  store i64 %2069, i64* %RCX, align 8, !tbaa !2428
  %2070 = load i64, i64* %RBP
  %2071 = sub i64 %2070, 32
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 4
  store i64 %2073, i64* %PC
  %2074 = inttoptr i64 %2071 to i32*
  %2075 = load i32, i32* %2074
  %2076 = sext i32 %2075 to i64
  store i64 %2076, i64* %RDX, align 8, !tbaa !2428
  %2077 = load i64, i64* %RCX
  %2078 = load i64, i64* %RDX
  %2079 = mul i64 %2078, 8
  %2080 = add i64 %2079, %2077
  %2081 = bitcast %union.vec128_t* %XMM0 to i8*
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 5
  store i64 %2083, i64* %PC
  %2084 = bitcast i8* %2081 to double*
  %2085 = load double, double* %2084, align 1
  %2086 = inttoptr i64 %2080 to double*
  store double %2085, double* %2086
  %2087 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2088 = load i64, i64* %RBP
  %2089 = sub i64 %2088, 72
  %2090 = load i64, i64* %PC
  %2091 = add i64 %2090, 5
  store i64 %2091, i64* %PC
  %2092 = inttoptr i64 %2089 to double*
  %2093 = load double, double* %2092
  %2094 = bitcast i8* %2087 to double*
  store double %2093, double* %2094, align 1, !tbaa !2452
  %2095 = getelementptr inbounds i8, i8* %2087, i64 8
  %2096 = bitcast i8* %2095 to double*
  store double 0.000000e+00, double* %2096, align 1, !tbaa !2452
  %2097 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2098 = load i64, i64* %RBP
  %2099 = sub i64 %2098, 120
  %2100 = load i64, i64* %PC
  %2101 = add i64 %2100, 5
  store i64 %2101, i64* %PC
  %2102 = inttoptr i64 %2099 to double*
  %2103 = load double, double* %2102
  %2104 = bitcast i8* %2097 to double*
  store double %2103, double* %2104, align 1, !tbaa !2452
  %2105 = getelementptr inbounds i8, i8* %2097, i64 8
  %2106 = bitcast i8* %2105 to double*
  store double 0.000000e+00, double* %2106, align 1, !tbaa !2452
  %2107 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2108 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2109 = load i64, i64* %RBP
  %2110 = sub i64 %2109, 128
  %2111 = load i64, i64* %PC
  %2112 = add i64 %2111, 5
  store i64 %2112, i64* %PC
  %2113 = bitcast i8* %2108 to double*
  %2114 = load double, double* %2113, align 1
  %2115 = getelementptr inbounds i8, i8* %2108, i64 8
  %2116 = bitcast i8* %2115 to i64*
  %2117 = load i64, i64* %2116, align 1
  %2118 = inttoptr i64 %2110 to double*
  %2119 = load double, double* %2118
  %2120 = fadd double %2114, %2119
  %2121 = bitcast i8* %2107 to double*
  store double %2120, double* %2121, align 1, !tbaa !2452
  %2122 = getelementptr inbounds i8, i8* %2107, i64 8
  %2123 = bitcast i8* %2122 to i64*
  store i64 %2117, i64* %2123, align 1, !tbaa !2452
  %2124 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2125 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2126 = bitcast %union.vec128_t* %XMM1 to i8*
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 4
  store i64 %2128, i64* %PC
  %2129 = bitcast i8* %2125 to double*
  %2130 = load double, double* %2129, align 1
  %2131 = getelementptr inbounds i8, i8* %2125, i64 8
  %2132 = bitcast i8* %2131 to i64*
  %2133 = load i64, i64* %2132, align 1
  %2134 = bitcast i8* %2126 to double*
  %2135 = load double, double* %2134, align 1
  %2136 = fmul double %2130, %2135
  %2137 = bitcast i8* %2124 to double*
  store double %2136, double* %2137, align 1, !tbaa !2452
  %2138 = getelementptr inbounds i8, i8* %2124, i64 8
  %2139 = bitcast i8* %2138 to i64*
  store i64 %2133, i64* %2139, align 1, !tbaa !2452
  %2140 = load i64, i64* %RBP
  %2141 = sub i64 %2140, 16
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 4
  store i64 %2143, i64* %PC
  %2144 = inttoptr i64 %2141 to i64*
  %2145 = load i64, i64* %2144
  store i64 %2145, i64* %RCX, align 8, !tbaa !2428
  %2146 = load i64, i64* %RBP
  %2147 = sub i64 %2146, 32
  %2148 = load i64, i64* %PC
  %2149 = add i64 %2148, 3
  store i64 %2149, i64* %PC
  %2150 = inttoptr i64 %2147 to i32*
  %2151 = load i32, i32* %2150
  %2152 = zext i32 %2151 to i64
  store i64 %2152, i64* %RAX, align 8, !tbaa !2428
  %2153 = load i64, i64* %RAX
  %2154 = load i64, i64* %PC
  %2155 = add i64 %2154, 3
  store i64 %2155, i64* %PC
  %2156 = trunc i64 %2153 to i32
  %2157 = add i32 1, %2156
  %2158 = zext i32 %2157 to i64
  store i64 %2158, i64* %RAX, align 8, !tbaa !2428
  %2159 = icmp ult i32 %2157, %2156
  %2160 = icmp ult i32 %2157, 1
  %2161 = or i1 %2159, %2160
  %2162 = zext i1 %2161 to i8
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2162, i8* %2163, align 1, !tbaa !2432
  %2164 = and i32 %2157, 255
  %2165 = call i32 @llvm.ctpop.i32(i32 %2164) #17
  %2166 = trunc i32 %2165 to i8
  %2167 = and i8 %2166, 1
  %2168 = xor i8 %2167, 1
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2168, i8* %2169, align 1, !tbaa !2446
  %2170 = xor i64 1, %2153
  %2171 = trunc i64 %2170 to i32
  %2172 = xor i32 %2171, %2157
  %2173 = lshr i32 %2172, 4
  %2174 = trunc i32 %2173 to i8
  %2175 = and i8 %2174, 1
  %2176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2175, i8* %2176, align 1, !tbaa !2447
  %2177 = icmp eq i32 %2157, 0
  %2178 = zext i1 %2177 to i8
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2178, i8* %2179, align 1, !tbaa !2448
  %2180 = lshr i32 %2157, 31
  %2181 = trunc i32 %2180 to i8
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2181, i8* %2182, align 1, !tbaa !2449
  %2183 = lshr i32 %2156, 31
  %2184 = xor i32 %2180, %2183
  %2185 = add nuw nsw i32 %2184, %2180
  %2186 = icmp eq i32 %2185, 2
  %2187 = zext i1 %2186 to i8
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2187, i8* %2188, align 1, !tbaa !2450
  %2189 = load i32, i32* %EAX
  %2190 = zext i32 %2189 to i64
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 3
  store i64 %2192, i64* %PC
  %2193 = shl i64 %2190, 32
  %2194 = ashr exact i64 %2193, 32
  store i64 %2194, i64* %RDX, align 8, !tbaa !2428
  %2195 = load i64, i64* %RCX
  %2196 = load i64, i64* %RDX
  %2197 = mul i64 %2196, 8
  %2198 = add i64 %2197, %2195
  %2199 = bitcast %union.vec128_t* %XMM0 to i8*
  %2200 = load i64, i64* %PC
  %2201 = add i64 %2200, 5
  store i64 %2201, i64* %PC
  %2202 = bitcast i8* %2199 to double*
  %2203 = load double, double* %2202, align 1
  %2204 = inttoptr i64 %2198 to double*
  store double %2203, double* %2204
  %2205 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2206 = load i64, i64* %RBP
  %2207 = sub i64 %2206, 176
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 8
  store i64 %2209, i64* %PC
  %2210 = inttoptr i64 %2207 to double*
  %2211 = load double, double* %2210
  %2212 = bitcast i8* %2205 to double*
  store double %2211, double* %2212, align 1, !tbaa !2452
  %2213 = getelementptr inbounds i8, i8* %2205, i64 8
  %2214 = bitcast i8* %2213 to double*
  store double 0.000000e+00, double* %2214, align 1, !tbaa !2452
  %2215 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2216 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2217 = load i64, i64* %RBP
  %2218 = sub i64 %2217, 136
  %2219 = load i64, i64* %PC
  %2220 = add i64 %2219, 8
  store i64 %2220, i64* %PC
  %2221 = bitcast i8* %2216 to double*
  %2222 = load double, double* %2221, align 1
  %2223 = getelementptr inbounds i8, i8* %2216, i64 8
  %2224 = bitcast i8* %2223 to i64*
  %2225 = load i64, i64* %2224, align 1
  %2226 = inttoptr i64 %2218 to double*
  %2227 = load double, double* %2226
  %2228 = fadd double %2222, %2227
  %2229 = bitcast i8* %2215 to double*
  store double %2228, double* %2229, align 1, !tbaa !2452
  %2230 = getelementptr inbounds i8, i8* %2215, i64 8
  %2231 = bitcast i8* %2230 to i64*
  store i64 %2225, i64* %2231, align 1, !tbaa !2452
  %2232 = load i64, i64* %RBP
  %2233 = sub i64 %2232, 120
  %2234 = bitcast %union.vec128_t* %XMM0 to i8*
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 5
  store i64 %2236, i64* %PC
  %2237 = bitcast i8* %2234 to double*
  %2238 = load double, double* %2237, align 1
  %2239 = inttoptr i64 %2233 to double*
  store double %2238, double* %2239
  %2240 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2241 = load i64, i64* %RBP
  %2242 = sub i64 %2241, 168
  %2243 = load i64, i64* %PC
  %2244 = add i64 %2243, 8
  store i64 %2244, i64* %PC
  %2245 = inttoptr i64 %2242 to double*
  %2246 = load double, double* %2245
  %2247 = bitcast i8* %2240 to double*
  store double %2246, double* %2247, align 1, !tbaa !2452
  %2248 = getelementptr inbounds i8, i8* %2240, i64 8
  %2249 = bitcast i8* %2248 to double*
  store double 0.000000e+00, double* %2249, align 1, !tbaa !2452
  %2250 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2252 = load i64, i64* %RBP
  %2253 = sub i64 %2252, 144
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 8
  store i64 %2255, i64* %PC
  %2256 = bitcast i8* %2251 to double*
  %2257 = load double, double* %2256, align 1
  %2258 = getelementptr inbounds i8, i8* %2251, i64 8
  %2259 = bitcast i8* %2258 to i64*
  %2260 = load i64, i64* %2259, align 1
  %2261 = inttoptr i64 %2253 to double*
  %2262 = load double, double* %2261
  %2263 = fsub double %2257, %2262
  %2264 = bitcast i8* %2250 to double*
  store double %2263, double* %2264, align 1, !tbaa !2452
  %2265 = getelementptr inbounds i8, i8* %2250, i64 8
  %2266 = bitcast i8* %2265 to i64*
  store i64 %2260, i64* %2266, align 1, !tbaa !2452
  %2267 = load i64, i64* %RBP
  %2268 = sub i64 %2267, 128
  %2269 = bitcast %union.vec128_t* %XMM0 to i8*
  %2270 = load i64, i64* %PC
  %2271 = add i64 %2270, 5
  store i64 %2271, i64* %PC
  %2272 = bitcast i8* %2269 to double*
  %2273 = load double, double* %2272, align 1
  %2274 = inttoptr i64 %2268 to double*
  store double %2273, double* %2274
  %2275 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2276 = load i64, i64* %RBP
  %2277 = sub i64 %2276, 72
  %2278 = load i64, i64* %PC
  %2279 = add i64 %2278, 5
  store i64 %2279, i64* %PC
  %2280 = inttoptr i64 %2277 to double*
  %2281 = load double, double* %2280
  %2282 = bitcast i8* %2275 to double*
  store double %2281, double* %2282, align 1, !tbaa !2452
  %2283 = getelementptr inbounds i8, i8* %2275, i64 8
  %2284 = bitcast i8* %2283 to double*
  store double 0.000000e+00, double* %2284, align 1, !tbaa !2452
  %2285 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2286 = load i64, i64* %RBP
  %2287 = sub i64 %2286, 128
  %2288 = load i64, i64* %PC
  %2289 = add i64 %2288, 5
  store i64 %2289, i64* %PC
  %2290 = inttoptr i64 %2287 to double*
  %2291 = load double, double* %2290
  %2292 = bitcast i8* %2285 to double*
  store double %2291, double* %2292, align 1, !tbaa !2452
  %2293 = getelementptr inbounds i8, i8* %2285, i64 8
  %2294 = bitcast i8* %2293 to double*
  store double 0.000000e+00, double* %2294, align 1, !tbaa !2452
  %2295 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2296 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2297 = load i64, i64* %RBP
  %2298 = sub i64 %2297, 120
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 5
  store i64 %2300, i64* %PC
  %2301 = bitcast i8* %2296 to double*
  %2302 = load double, double* %2301, align 1
  %2303 = getelementptr inbounds i8, i8* %2296, i64 8
  %2304 = bitcast i8* %2303 to i64*
  %2305 = load i64, i64* %2304, align 1
  %2306 = inttoptr i64 %2298 to double*
  %2307 = load double, double* %2306
  %2308 = fsub double %2302, %2307
  %2309 = bitcast i8* %2295 to double*
  store double %2308, double* %2309, align 1, !tbaa !2452
  %2310 = getelementptr inbounds i8, i8* %2295, i64 8
  %2311 = bitcast i8* %2310 to i64*
  store i64 %2305, i64* %2311, align 1, !tbaa !2452
  %2312 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2313 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2314 = bitcast %union.vec128_t* %XMM1 to i8*
  %2315 = load i64, i64* %PC
  %2316 = add i64 %2315, 4
  store i64 %2316, i64* %PC
  %2317 = bitcast i8* %2313 to double*
  %2318 = load double, double* %2317, align 1
  %2319 = getelementptr inbounds i8, i8* %2313, i64 8
  %2320 = bitcast i8* %2319 to i64*
  %2321 = load i64, i64* %2320, align 1
  %2322 = bitcast i8* %2314 to double*
  %2323 = load double, double* %2322, align 1
  %2324 = fmul double %2318, %2323
  %2325 = bitcast i8* %2312 to double*
  store double %2324, double* %2325, align 1, !tbaa !2452
  %2326 = getelementptr inbounds i8, i8* %2312, i64 8
  %2327 = bitcast i8* %2326 to i64*
  store i64 %2321, i64* %2327, align 1, !tbaa !2452
  %2328 = load i64, i64* %RBP
  %2329 = sub i64 %2328, 16
  %2330 = load i64, i64* %PC
  %2331 = add i64 %2330, 4
  store i64 %2331, i64* %PC
  %2332 = inttoptr i64 %2329 to i64*
  %2333 = load i64, i64* %2332
  store i64 %2333, i64* %RCX, align 8, !tbaa !2428
  %2334 = load i64, i64* %RBP
  %2335 = sub i64 %2334, 40
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 4
  store i64 %2337, i64* %PC
  %2338 = inttoptr i64 %2335 to i32*
  %2339 = load i32, i32* %2338
  %2340 = sext i32 %2339 to i64
  store i64 %2340, i64* %RDX, align 8, !tbaa !2428
  %2341 = load i64, i64* %RCX
  %2342 = load i64, i64* %RDX
  %2343 = mul i64 %2342, 8
  %2344 = add i64 %2343, %2341
  %2345 = bitcast %union.vec128_t* %XMM0 to i8*
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 5
  store i64 %2347, i64* %PC
  %2348 = bitcast i8* %2345 to double*
  %2349 = load double, double* %2348, align 1
  %2350 = inttoptr i64 %2344 to double*
  store double %2349, double* %2350
  %2351 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2352 = load i64, i64* %RBP
  %2353 = sub i64 %2352, 72
  %2354 = load i64, i64* %PC
  %2355 = add i64 %2354, 5
  store i64 %2355, i64* %PC
  %2356 = inttoptr i64 %2353 to double*
  %2357 = load double, double* %2356
  %2358 = bitcast i8* %2351 to double*
  store double %2357, double* %2358, align 1, !tbaa !2452
  %2359 = getelementptr inbounds i8, i8* %2351, i64 8
  %2360 = bitcast i8* %2359 to double*
  store double 0.000000e+00, double* %2360, align 1, !tbaa !2452
  %2361 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2362 = load i64, i64* %RBP
  %2363 = sub i64 %2362, 128
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 5
  store i64 %2365, i64* %PC
  %2366 = inttoptr i64 %2363 to double*
  %2367 = load double, double* %2366
  %2368 = bitcast i8* %2361 to double*
  store double %2367, double* %2368, align 1, !tbaa !2452
  %2369 = getelementptr inbounds i8, i8* %2361, i64 8
  %2370 = bitcast i8* %2369 to double*
  store double 0.000000e+00, double* %2370, align 1, !tbaa !2452
  %2371 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2372 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2373 = load i64, i64* %RBP
  %2374 = sub i64 %2373, 120
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 5
  store i64 %2376, i64* %PC
  %2377 = bitcast i8* %2372 to double*
  %2378 = load double, double* %2377, align 1
  %2379 = getelementptr inbounds i8, i8* %2372, i64 8
  %2380 = bitcast i8* %2379 to i64*
  %2381 = load i64, i64* %2380, align 1
  %2382 = inttoptr i64 %2374 to double*
  %2383 = load double, double* %2382
  %2384 = fadd double %2378, %2383
  %2385 = bitcast i8* %2371 to double*
  store double %2384, double* %2385, align 1, !tbaa !2452
  %2386 = getelementptr inbounds i8, i8* %2371, i64 8
  %2387 = bitcast i8* %2386 to i64*
  store i64 %2381, i64* %2387, align 1, !tbaa !2452
  %2388 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2389 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2390 = bitcast %union.vec128_t* %XMM1 to i8*
  %2391 = load i64, i64* %PC
  %2392 = add i64 %2391, 4
  store i64 %2392, i64* %PC
  %2393 = bitcast i8* %2389 to double*
  %2394 = load double, double* %2393, align 1
  %2395 = getelementptr inbounds i8, i8* %2389, i64 8
  %2396 = bitcast i8* %2395 to i64*
  %2397 = load i64, i64* %2396, align 1
  %2398 = bitcast i8* %2390 to double*
  %2399 = load double, double* %2398, align 1
  %2400 = fmul double %2394, %2399
  %2401 = bitcast i8* %2388 to double*
  store double %2400, double* %2401, align 1, !tbaa !2452
  %2402 = getelementptr inbounds i8, i8* %2388, i64 8
  %2403 = bitcast i8* %2402 to i64*
  store i64 %2397, i64* %2403, align 1, !tbaa !2452
  %2404 = load i64, i64* %RBP
  %2405 = sub i64 %2404, 16
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 4
  store i64 %2407, i64* %PC
  %2408 = inttoptr i64 %2405 to i64*
  %2409 = load i64, i64* %2408
  store i64 %2409, i64* %RCX, align 8, !tbaa !2428
  %2410 = load i64, i64* %RBP
  %2411 = sub i64 %2410, 40
  %2412 = load i64, i64* %PC
  %2413 = add i64 %2412, 3
  store i64 %2413, i64* %PC
  %2414 = inttoptr i64 %2411 to i32*
  %2415 = load i32, i32* %2414
  %2416 = zext i32 %2415 to i64
  store i64 %2416, i64* %RAX, align 8, !tbaa !2428
  %2417 = load i64, i64* %RAX
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 3
  store i64 %2419, i64* %PC
  %2420 = trunc i64 %2417 to i32
  %2421 = add i32 1, %2420
  %2422 = zext i32 %2421 to i64
  store i64 %2422, i64* %RAX, align 8, !tbaa !2428
  %2423 = icmp ult i32 %2421, %2420
  %2424 = icmp ult i32 %2421, 1
  %2425 = or i1 %2423, %2424
  %2426 = zext i1 %2425 to i8
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2426, i8* %2427, align 1, !tbaa !2432
  %2428 = and i32 %2421, 255
  %2429 = call i32 @llvm.ctpop.i32(i32 %2428) #17
  %2430 = trunc i32 %2429 to i8
  %2431 = and i8 %2430, 1
  %2432 = xor i8 %2431, 1
  %2433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2432, i8* %2433, align 1, !tbaa !2446
  %2434 = xor i64 1, %2417
  %2435 = trunc i64 %2434 to i32
  %2436 = xor i32 %2435, %2421
  %2437 = lshr i32 %2436, 4
  %2438 = trunc i32 %2437 to i8
  %2439 = and i8 %2438, 1
  %2440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2439, i8* %2440, align 1, !tbaa !2447
  %2441 = icmp eq i32 %2421, 0
  %2442 = zext i1 %2441 to i8
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2442, i8* %2443, align 1, !tbaa !2448
  %2444 = lshr i32 %2421, 31
  %2445 = trunc i32 %2444 to i8
  %2446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2445, i8* %2446, align 1, !tbaa !2449
  %2447 = lshr i32 %2420, 31
  %2448 = xor i32 %2444, %2447
  %2449 = add nuw nsw i32 %2448, %2444
  %2450 = icmp eq i32 %2449, 2
  %2451 = zext i1 %2450 to i8
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2451, i8* %2452, align 1, !tbaa !2450
  %2453 = load i32, i32* %EAX
  %2454 = zext i32 %2453 to i64
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 3
  store i64 %2456, i64* %PC
  %2457 = shl i64 %2454, 32
  %2458 = ashr exact i64 %2457, 32
  store i64 %2458, i64* %RDX, align 8, !tbaa !2428
  %2459 = load i64, i64* %RCX
  %2460 = load i64, i64* %RDX
  %2461 = mul i64 %2460, 8
  %2462 = add i64 %2461, %2459
  %2463 = bitcast %union.vec128_t* %XMM0 to i8*
  %2464 = load i64, i64* %PC
  %2465 = add i64 %2464, 5
  store i64 %2465, i64* %PC
  %2466 = bitcast i8* %2463 to double*
  %2467 = load double, double* %2466, align 1
  %2468 = inttoptr i64 %2462 to double*
  store double %2467, double* %2468
  %2469 = load i64, i64* %RBP
  %2470 = sub i64 %2469, 28
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 3
  store i64 %2472, i64* %PC
  %2473 = inttoptr i64 %2470 to i32*
  %2474 = load i32, i32* %2473
  %2475 = zext i32 %2474 to i64
  store i64 %2475, i64* %RAX, align 8, !tbaa !2428
  %2476 = load i64, i64* %RAX
  %2477 = load i64, i64* %PC
  %2478 = add i64 %2477, 3
  store i64 %2478, i64* %PC
  %2479 = trunc i64 %2476 to i32
  %2480 = add i32 2, %2479
  %2481 = zext i32 %2480 to i64
  store i64 %2481, i64* %RAX, align 8, !tbaa !2428
  %2482 = icmp ult i32 %2480, %2479
  %2483 = icmp ult i32 %2480, 2
  %2484 = or i1 %2482, %2483
  %2485 = zext i1 %2484 to i8
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2485, i8* %2486, align 1, !tbaa !2432
  %2487 = and i32 %2480, 255
  %2488 = call i32 @llvm.ctpop.i32(i32 %2487) #17
  %2489 = trunc i32 %2488 to i8
  %2490 = and i8 %2489, 1
  %2491 = xor i8 %2490, 1
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2491, i8* %2492, align 1, !tbaa !2446
  %2493 = xor i64 2, %2476
  %2494 = trunc i64 %2493 to i32
  %2495 = xor i32 %2494, %2480
  %2496 = lshr i32 %2495, 4
  %2497 = trunc i32 %2496 to i8
  %2498 = and i8 %2497, 1
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2498, i8* %2499, align 1, !tbaa !2447
  %2500 = icmp eq i32 %2480, 0
  %2501 = zext i1 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2501, i8* %2502, align 1, !tbaa !2448
  %2503 = lshr i32 %2480, 31
  %2504 = trunc i32 %2503 to i8
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2504, i8* %2505, align 1, !tbaa !2449
  %2506 = lshr i32 %2479, 31
  %2507 = xor i32 %2503, %2506
  %2508 = add nuw nsw i32 %2507, %2503
  %2509 = icmp eq i32 %2508, 2
  %2510 = zext i1 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2510, i8* %2511, align 1, !tbaa !2450
  %2512 = load i64, i64* %RBP
  %2513 = sub i64 %2512, 28
  %2514 = load i32, i32* %EAX
  %2515 = zext i32 %2514 to i64
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 3
  store i64 %2517, i64* %PC
  %2518 = inttoptr i64 %2513 to i32*
  store i32 %2514, i32* %2518
  %2519 = load i64, i64* %PC
  %2520 = sub i64 %2519, 695
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 5
  store i64 %2522, i64* %PC
  %2523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2520, i64* %2523, align 8, !tbaa !2428
  br label %block_4035c1

block_40387d:                                     ; preds = %block_4035c1
  %2524 = sub i64 %9460, 48
  %2525 = load i64, i64* %PC
  %2526 = add i64 %2525, 7
  store i64 %2526, i64* %PC
  %2527 = inttoptr i64 %2524 to i32*
  store i32 0, i32* %2527
  %2528 = load i64, i64* %RBP
  %2529 = sub i64 %2528, 56
  %2530 = load i64, i64* %PC
  %2531 = add i64 %2530, 3
  store i64 %2531, i64* %PC
  %2532 = inttoptr i64 %2529 to i32*
  %2533 = load i32, i32* %2532
  %2534 = zext i32 %2533 to i64
  store i64 %2534, i64* %RAX, align 8, !tbaa !2428
  %2535 = load i64, i64* %RAX
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 3
  store i64 %2537, i64* %PC
  %2538 = trunc i64 %2535 to i32
  %2539 = shl i32 %2538, 1
  %2540 = icmp slt i32 %2538, 0
  %2541 = icmp slt i32 %2539, 0
  %2542 = xor i1 %2540, %2541
  %2543 = zext i32 %2539 to i64
  store i64 %2543, i64* %RAX, align 8, !tbaa !2428
  %2544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2545 = zext i1 %2540 to i8
  store i8 %2545, i8* %2544, align 1, !tbaa !2451
  %2546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2547 = and i32 %2539, 254
  %2548 = call i32 @llvm.ctpop.i32(i32 %2547) #17
  %2549 = trunc i32 %2548 to i8
  %2550 = and i8 %2549, 1
  %2551 = xor i8 %2550, 1
  store i8 %2551, i8* %2546, align 1, !tbaa !2451
  %2552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2552, align 1, !tbaa !2451
  %2553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2554 = icmp eq i32 %2539, 0
  %2555 = zext i1 %2554 to i8
  store i8 %2555, i8* %2553, align 1, !tbaa !2451
  %2556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2557 = lshr i32 %2539, 31
  %2558 = trunc i32 %2557 to i8
  store i8 %2558, i8* %2556, align 1, !tbaa !2451
  %2559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2560 = zext i1 %2542 to i8
  store i8 %2560, i8* %2559, align 1, !tbaa !2451
  %2561 = load i64, i64* %RBP
  %2562 = sub i64 %2561, 60
  %2563 = load i32, i32* %EAX
  %2564 = zext i32 %2563 to i64
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 3
  store i64 %2566, i64* %PC
  %2567 = inttoptr i64 %2562 to i32*
  store i32 %2563, i32* %2567
  %2568 = load i64, i64* %RBP
  %2569 = sub i64 %2568, 60
  %2570 = load i64, i64* %PC
  %2571 = add i64 %2570, 3
  store i64 %2571, i64* %PC
  %2572 = inttoptr i64 %2569 to i32*
  %2573 = load i32, i32* %2572
  %2574 = zext i32 %2573 to i64
  store i64 %2574, i64* %RAX, align 8, !tbaa !2428
  %2575 = load i64, i64* %RBP
  %2576 = sub i64 %2575, 44
  %2577 = load i32, i32* %EAX
  %2578 = zext i32 %2577 to i64
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 3
  store i64 %2580, i64* %PC
  %2581 = inttoptr i64 %2576 to i32*
  store i32 %2577, i32* %2581
  br label %block_403893

block_403c52:                                     ; preds = %block_403940
  %2582 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 8
  store i64 %2584, i64* %PC
  %2585 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4040a0__rodata_type* @seg_4040a0__rodata to i64), i64 80) to double*)
  %2586 = bitcast i8* %2582 to double*
  store double %2585, double* %2586, align 1, !tbaa !2452
  %2587 = getelementptr inbounds i8, i8* %2582, i64 8
  %2588 = bitcast i8* %2587 to double*
  store double 0.000000e+00, double* %2588, align 1, !tbaa !2452
  %2589 = load i64, i64* %RBP
  %2590 = sub i64 %2589, 24
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 4
  store i64 %2592, i64* %PC
  %2593 = inttoptr i64 %2590 to i64*
  %2594 = load i64, i64* %2593
  store i64 %2594, i64* %RAX, align 8, !tbaa !2428
  %2595 = load i64, i64* %RBP
  %2596 = sub i64 %2595, 52
  %2597 = load i64, i64* %PC
  %2598 = add i64 %2597, 3
  store i64 %2598, i64* %PC
  %2599 = inttoptr i64 %2596 to i32*
  %2600 = load i32, i32* %2599
  %2601 = zext i32 %2600 to i64
  store i64 %2601, i64* %RCX, align 8, !tbaa !2428
  %2602 = load i64, i64* %RCX
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 3
  store i64 %2604, i64* %PC
  %2605 = trunc i64 %2602 to i32
  %2606 = add i32 2, %2605
  %2607 = zext i32 %2606 to i64
  store i64 %2607, i64* %RCX, align 8, !tbaa !2428
  %2608 = icmp ult i32 %2606, %2605
  %2609 = icmp ult i32 %2606, 2
  %2610 = or i1 %2608, %2609
  %2611 = zext i1 %2610 to i8
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2611, i8* %2612, align 1, !tbaa !2432
  %2613 = and i32 %2606, 255
  %2614 = call i32 @llvm.ctpop.i32(i32 %2613) #17
  %2615 = trunc i32 %2614 to i8
  %2616 = and i8 %2615, 1
  %2617 = xor i8 %2616, 1
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2617, i8* %2618, align 1, !tbaa !2446
  %2619 = xor i64 2, %2602
  %2620 = trunc i64 %2619 to i32
  %2621 = xor i32 %2620, %2606
  %2622 = lshr i32 %2621, 4
  %2623 = trunc i32 %2622 to i8
  %2624 = and i8 %2623, 1
  %2625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2624, i8* %2625, align 1, !tbaa !2447
  %2626 = icmp eq i32 %2606, 0
  %2627 = zext i1 %2626 to i8
  %2628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2627, i8* %2628, align 1, !tbaa !2448
  %2629 = lshr i32 %2606, 31
  %2630 = trunc i32 %2629 to i8
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2630, i8* %2631, align 1, !tbaa !2449
  %2632 = lshr i32 %2605, 31
  %2633 = xor i32 %2629, %2632
  %2634 = add nuw nsw i32 %2633, %2629
  %2635 = icmp eq i32 %2634, 2
  %2636 = zext i1 %2635 to i8
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2636, i8* %2637, align 1, !tbaa !2450
  %2638 = load i32, i32* %ECX
  %2639 = zext i32 %2638 to i64
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 3
  store i64 %2641, i64* %PC
  %2642 = shl i64 %2639, 32
  %2643 = ashr exact i64 %2642, 32
  store i64 %2643, i64* %RDX, align 8, !tbaa !2428
  %2644 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2645 = load i64, i64* %RAX
  %2646 = load i64, i64* %RDX
  %2647 = mul i64 %2646, 8
  %2648 = add i64 %2647, %2645
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 5
  store i64 %2650, i64* %PC
  %2651 = inttoptr i64 %2648 to double*
  %2652 = load double, double* %2651
  %2653 = bitcast i8* %2644 to double*
  store double %2652, double* %2653, align 1, !tbaa !2452
  %2654 = getelementptr inbounds i8, i8* %2644, i64 8
  %2655 = bitcast i8* %2654 to double*
  store double 0.000000e+00, double* %2655, align 1, !tbaa !2452
  %2656 = load i64, i64* %RBP
  %2657 = sub i64 %2656, 72
  %2658 = bitcast %union.vec128_t* %XMM1 to i8*
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 5
  store i64 %2660, i64* %PC
  %2661 = bitcast i8* %2658 to double*
  %2662 = load double, double* %2661, align 1
  %2663 = inttoptr i64 %2657 to double*
  store double %2662, double* %2663
  %2664 = load i64, i64* %RBP
  %2665 = sub i64 %2664, 24
  %2666 = load i64, i64* %PC
  %2667 = add i64 %2666, 4
  store i64 %2667, i64* %PC
  %2668 = inttoptr i64 %2665 to i64*
  %2669 = load i64, i64* %2668
  store i64 %2669, i64* %RAX, align 8, !tbaa !2428
  %2670 = load i64, i64* %RBP
  %2671 = sub i64 %2670, 52
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 3
  store i64 %2673, i64* %PC
  %2674 = inttoptr i64 %2671 to i32*
  %2675 = load i32, i32* %2674
  %2676 = zext i32 %2675 to i64
  store i64 %2676, i64* %RCX, align 8, !tbaa !2428
  %2677 = load i64, i64* %RCX
  %2678 = load i64, i64* %PC
  %2679 = add i64 %2678, 3
  store i64 %2679, i64* %PC
  %2680 = trunc i64 %2677 to i32
  %2681 = add i32 3, %2680
  %2682 = zext i32 %2681 to i64
  store i64 %2682, i64* %RCX, align 8, !tbaa !2428
  %2683 = icmp ult i32 %2681, %2680
  %2684 = icmp ult i32 %2681, 3
  %2685 = or i1 %2683, %2684
  %2686 = zext i1 %2685 to i8
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2686, i8* %2687, align 1, !tbaa !2432
  %2688 = and i32 %2681, 255
  %2689 = call i32 @llvm.ctpop.i32(i32 %2688) #17
  %2690 = trunc i32 %2689 to i8
  %2691 = and i8 %2690, 1
  %2692 = xor i8 %2691, 1
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2692, i8* %2693, align 1, !tbaa !2446
  %2694 = xor i64 3, %2677
  %2695 = trunc i64 %2694 to i32
  %2696 = xor i32 %2695, %2681
  %2697 = lshr i32 %2696, 4
  %2698 = trunc i32 %2697 to i8
  %2699 = and i8 %2698, 1
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2699, i8* %2700, align 1, !tbaa !2447
  %2701 = icmp eq i32 %2681, 0
  %2702 = zext i1 %2701 to i8
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2702, i8* %2703, align 1, !tbaa !2448
  %2704 = lshr i32 %2681, 31
  %2705 = trunc i32 %2704 to i8
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2705, i8* %2706, align 1, !tbaa !2449
  %2707 = lshr i32 %2680, 31
  %2708 = xor i32 %2704, %2707
  %2709 = add nuw nsw i32 %2708, %2704
  %2710 = icmp eq i32 %2709, 2
  %2711 = zext i1 %2710 to i8
  %2712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2711, i8* %2712, align 1, !tbaa !2450
  %2713 = load i32, i32* %ECX
  %2714 = zext i32 %2713 to i64
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 3
  store i64 %2716, i64* %PC
  %2717 = shl i64 %2714, 32
  %2718 = ashr exact i64 %2717, 32
  store i64 %2718, i64* %RDX, align 8, !tbaa !2428
  %2719 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2720 = load i64, i64* %RAX
  %2721 = load i64, i64* %RDX
  %2722 = mul i64 %2721, 8
  %2723 = add i64 %2722, %2720
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 5
  store i64 %2725, i64* %PC
  %2726 = inttoptr i64 %2723 to double*
  %2727 = load double, double* %2726
  %2728 = bitcast i8* %2719 to double*
  store double %2727, double* %2728, align 1, !tbaa !2452
  %2729 = getelementptr inbounds i8, i8* %2719, i64 8
  %2730 = bitcast i8* %2729 to double*
  store double 0.000000e+00, double* %2730, align 1, !tbaa !2452
  %2731 = load i64, i64* %RBP
  %2732 = sub i64 %2731, 80
  %2733 = bitcast %union.vec128_t* %XMM1 to i8*
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 5
  store i64 %2735, i64* %PC
  %2736 = bitcast i8* %2733 to double*
  %2737 = load double, double* %2736, align 1
  %2738 = inttoptr i64 %2732 to double*
  store double %2737, double* %2738
  %2739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2740 = load i64, i64* %RBP
  %2741 = sub i64 %2740, 72
  %2742 = load i64, i64* %PC
  %2743 = add i64 %2742, 5
  store i64 %2743, i64* %PC
  %2744 = inttoptr i64 %2741 to double*
  %2745 = load double, double* %2744
  %2746 = bitcast i8* %2739 to double*
  store double %2745, double* %2746, align 1, !tbaa !2452
  %2747 = getelementptr inbounds i8, i8* %2739, i64 8
  %2748 = bitcast i8* %2747 to double*
  store double 0.000000e+00, double* %2748, align 1, !tbaa !2452
  %2749 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2750 = bitcast %union.vec128_t* %XMM0 to i8*
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 3
  store i64 %2752, i64* %PC
  %2753 = bitcast i8* %2750 to <2 x i32>*
  %2754 = load <2 x i32>, <2 x i32>* %2753, align 1
  %2755 = getelementptr inbounds i8, i8* %2750, i64 8
  %2756 = bitcast i8* %2755 to <2 x i32>*
  %2757 = load <2 x i32>, <2 x i32>* %2756, align 1
  %2758 = extractelement <2 x i32> %2754, i32 0
  %2759 = bitcast i8* %2749 to i32*
  store i32 %2758, i32* %2759, align 1, !tbaa !2479
  %2760 = extractelement <2 x i32> %2754, i32 1
  %2761 = getelementptr inbounds i8, i8* %2749, i64 4
  %2762 = bitcast i8* %2761 to i32*
  store i32 %2760, i32* %2762, align 1, !tbaa !2479
  %2763 = extractelement <2 x i32> %2757, i32 0
  %2764 = getelementptr inbounds i8, i8* %2749, i64 8
  %2765 = bitcast i8* %2764 to i32*
  store i32 %2763, i32* %2765, align 1, !tbaa !2479
  %2766 = extractelement <2 x i32> %2757, i32 1
  %2767 = getelementptr inbounds i8, i8* %2749, i64 12
  %2768 = bitcast i8* %2767 to i32*
  store i32 %2766, i32* %2768, align 1, !tbaa !2479
  %2769 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2770 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2771 = load i64, i64* %RBP
  %2772 = sub i64 %2771, 88
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 5
  store i64 %2774, i64* %PC
  %2775 = bitcast i8* %2770 to double*
  %2776 = load double, double* %2775, align 1
  %2777 = getelementptr inbounds i8, i8* %2770, i64 8
  %2778 = bitcast i8* %2777 to i64*
  %2779 = load i64, i64* %2778, align 1
  %2780 = inttoptr i64 %2772 to double*
  %2781 = load double, double* %2780
  %2782 = fmul double %2776, %2781
  %2783 = bitcast i8* %2769 to double*
  store double %2782, double* %2783, align 1, !tbaa !2452
  %2784 = getelementptr inbounds i8, i8* %2769, i64 8
  %2785 = bitcast i8* %2784 to i64*
  store i64 %2779, i64* %2785, align 1, !tbaa !2452
  %2786 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2787 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2788 = load i64, i64* %RBP
  %2789 = sub i64 %2788, 80
  %2790 = load i64, i64* %PC
  %2791 = add i64 %2790, 5
  store i64 %2791, i64* %PC
  %2792 = bitcast i8* %2787 to double*
  %2793 = load double, double* %2792, align 1
  %2794 = getelementptr inbounds i8, i8* %2787, i64 8
  %2795 = bitcast i8* %2794 to i64*
  %2796 = load i64, i64* %2795, align 1
  %2797 = inttoptr i64 %2789 to double*
  %2798 = load double, double* %2797
  %2799 = fmul double %2793, %2798
  %2800 = bitcast i8* %2786 to double*
  store double %2799, double* %2800, align 1, !tbaa !2452
  %2801 = getelementptr inbounds i8, i8* %2786, i64 8
  %2802 = bitcast i8* %2801 to i64*
  store i64 %2796, i64* %2802, align 1, !tbaa !2452
  %2803 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2804 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2805 = bitcast %union.vec128_t* %XMM2 to i8*
  %2806 = load i64, i64* %PC
  %2807 = add i64 %2806, 4
  store i64 %2807, i64* %PC
  %2808 = bitcast i8* %2804 to double*
  %2809 = load double, double* %2808, align 1
  %2810 = getelementptr inbounds i8, i8* %2804, i64 8
  %2811 = bitcast i8* %2810 to i64*
  %2812 = load i64, i64* %2811, align 1
  %2813 = bitcast i8* %2805 to double*
  %2814 = load double, double* %2813, align 1
  %2815 = fsub double %2809, %2814
  %2816 = bitcast i8* %2803 to double*
  store double %2815, double* %2816, align 1, !tbaa !2452
  %2817 = getelementptr inbounds i8, i8* %2803, i64 8
  %2818 = bitcast i8* %2817 to i64*
  store i64 %2812, i64* %2818, align 1, !tbaa !2452
  %2819 = load i64, i64* %RBP
  %2820 = sub i64 %2819, 104
  %2821 = bitcast %union.vec128_t* %XMM1 to i8*
  %2822 = load i64, i64* %PC
  %2823 = add i64 %2822, 5
  store i64 %2823, i64* %PC
  %2824 = bitcast i8* %2821 to double*
  %2825 = load double, double* %2824, align 1
  %2826 = inttoptr i64 %2820 to double*
  store double %2825, double* %2826
  %2827 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2828 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2829 = load i64, i64* %RBP
  %2830 = sub i64 %2829, 88
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 5
  store i64 %2832, i64* %PC
  %2833 = bitcast i8* %2828 to double*
  %2834 = load double, double* %2833, align 1
  %2835 = getelementptr inbounds i8, i8* %2828, i64 8
  %2836 = bitcast i8* %2835 to i64*
  %2837 = load i64, i64* %2836, align 1
  %2838 = inttoptr i64 %2830 to double*
  %2839 = load double, double* %2838
  %2840 = fmul double %2834, %2839
  %2841 = bitcast i8* %2827 to double*
  store double %2840, double* %2841, align 1, !tbaa !2452
  %2842 = getelementptr inbounds i8, i8* %2827, i64 8
  %2843 = bitcast i8* %2842 to i64*
  store i64 %2837, i64* %2843, align 1, !tbaa !2452
  %2844 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2845 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2846 = load i64, i64* %RBP
  %2847 = sub i64 %2846, 72
  %2848 = load i64, i64* %PC
  %2849 = add i64 %2848, 5
  store i64 %2849, i64* %PC
  %2850 = bitcast i8* %2845 to double*
  %2851 = load double, double* %2850, align 1
  %2852 = getelementptr inbounds i8, i8* %2845, i64 8
  %2853 = bitcast i8* %2852 to i64*
  %2854 = load i64, i64* %2853, align 1
  %2855 = inttoptr i64 %2847 to double*
  %2856 = load double, double* %2855
  %2857 = fmul double %2851, %2856
  %2858 = bitcast i8* %2844 to double*
  store double %2857, double* %2858, align 1, !tbaa !2452
  %2859 = getelementptr inbounds i8, i8* %2844, i64 8
  %2860 = bitcast i8* %2859 to i64*
  store i64 %2854, i64* %2860, align 1, !tbaa !2452
  %2861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2862 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2863 = load i64, i64* %RBP
  %2864 = sub i64 %2863, 80
  %2865 = load i64, i64* %PC
  %2866 = add i64 %2865, 5
  store i64 %2866, i64* %PC
  %2867 = bitcast i8* %2862 to double*
  %2868 = load double, double* %2867, align 1
  %2869 = getelementptr inbounds i8, i8* %2862, i64 8
  %2870 = bitcast i8* %2869 to i64*
  %2871 = load i64, i64* %2870, align 1
  %2872 = inttoptr i64 %2864 to double*
  %2873 = load double, double* %2872
  %2874 = fsub double %2868, %2873
  %2875 = bitcast i8* %2861 to double*
  store double %2874, double* %2875, align 1, !tbaa !2452
  %2876 = getelementptr inbounds i8, i8* %2861, i64 8
  %2877 = bitcast i8* %2876 to i64*
  store i64 %2871, i64* %2877, align 1, !tbaa !2452
  %2878 = load i64, i64* %RBP
  %2879 = sub i64 %2878, 112
  %2880 = bitcast %union.vec128_t* %XMM0 to i8*
  %2881 = load i64, i64* %PC
  %2882 = add i64 %2881, 5
  store i64 %2882, i64* %PC
  %2883 = bitcast i8* %2880 to double*
  %2884 = load double, double* %2883, align 1
  %2885 = inttoptr i64 %2879 to double*
  store double %2884, double* %2885
  %2886 = load i64, i64* %RBP
  %2887 = sub i64 %2886, 44
  %2888 = load i64, i64* %PC
  %2889 = add i64 %2888, 3
  store i64 %2889, i64* %PC
  %2890 = inttoptr i64 %2887 to i32*
  %2891 = load i32, i32* %2890
  %2892 = zext i32 %2891 to i64
  store i64 %2892, i64* %RCX, align 8, !tbaa !2428
  %2893 = load i64, i64* %RCX
  %2894 = load i64, i64* %RBP
  %2895 = sub i64 %2894, 56
  %2896 = load i64, i64* %PC
  %2897 = add i64 %2896, 3
  store i64 %2897, i64* %PC
  %2898 = trunc i64 %2893 to i32
  %2899 = inttoptr i64 %2895 to i32*
  %2900 = load i32, i32* %2899
  %2901 = add i32 %2900, %2898
  %2902 = zext i32 %2901 to i64
  store i64 %2902, i64* %RCX, align 8, !tbaa !2428
  %2903 = icmp ult i32 %2901, %2898
  %2904 = icmp ult i32 %2901, %2900
  %2905 = or i1 %2903, %2904
  %2906 = zext i1 %2905 to i8
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2906, i8* %2907, align 1, !tbaa !2432
  %2908 = and i32 %2901, 255
  %2909 = call i32 @llvm.ctpop.i32(i32 %2908) #17
  %2910 = trunc i32 %2909 to i8
  %2911 = and i8 %2910, 1
  %2912 = xor i8 %2911, 1
  %2913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2912, i8* %2913, align 1, !tbaa !2446
  %2914 = xor i32 %2900, %2898
  %2915 = xor i32 %2914, %2901
  %2916 = lshr i32 %2915, 4
  %2917 = trunc i32 %2916 to i8
  %2918 = and i8 %2917, 1
  %2919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2918, i8* %2919, align 1, !tbaa !2447
  %2920 = icmp eq i32 %2901, 0
  %2921 = zext i1 %2920 to i8
  %2922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2921, i8* %2922, align 1, !tbaa !2448
  %2923 = lshr i32 %2901, 31
  %2924 = trunc i32 %2923 to i8
  %2925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2924, i8* %2925, align 1, !tbaa !2449
  %2926 = lshr i32 %2898, 31
  %2927 = lshr i32 %2900, 31
  %2928 = xor i32 %2923, %2926
  %2929 = xor i32 %2923, %2927
  %2930 = add nuw nsw i32 %2928, %2929
  %2931 = icmp eq i32 %2930, 2
  %2932 = zext i1 %2931 to i8
  %2933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2932, i8* %2933, align 1, !tbaa !2450
  %2934 = load i64, i64* %RBP
  %2935 = sub i64 %2934, 28
  %2936 = load i32, i32* %ECX
  %2937 = zext i32 %2936 to i64
  %2938 = load i64, i64* %PC
  %2939 = add i64 %2938, 3
  store i64 %2939, i64* %PC
  %2940 = inttoptr i64 %2935 to i32*
  store i32 %2936, i32* %2940
  br label %block_403cc0

block_403ffb:                                     ; preds = %block_403cc0
  %2941 = add i64 %3249, 5
  %2942 = load i64, i64* %PC
  %2943 = add i64 %2942, 5
  store i64 %2943, i64* %PC
  %2944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2941, i64* %2944, align 8, !tbaa !2428
  %2945 = load i64, i64* %RBP
  %2946 = sub i64 %2945, 60
  %2947 = load i64, i64* %PC
  %2948 = add i64 %2947, 3
  store i64 %2948, i64* %PC
  %2949 = inttoptr i64 %2946 to i32*
  %2950 = load i32, i32* %2949
  %2951 = zext i32 %2950 to i64
  store i64 %2951, i64* %RAX, align 8, !tbaa !2428
  %2952 = load i64, i64* %RAX
  %2953 = load i64, i64* %RBP
  %2954 = sub i64 %2953, 44
  %2955 = load i64, i64* %PC
  %2956 = add i64 %2955, 3
  store i64 %2956, i64* %PC
  %2957 = trunc i64 %2952 to i32
  %2958 = inttoptr i64 %2954 to i32*
  %2959 = load i32, i32* %2958
  %2960 = add i32 %2959, %2957
  %2961 = zext i32 %2960 to i64
  store i64 %2961, i64* %RAX, align 8, !tbaa !2428
  %2962 = icmp ult i32 %2960, %2957
  %2963 = icmp ult i32 %2960, %2959
  %2964 = or i1 %2962, %2963
  %2965 = zext i1 %2964 to i8
  %2966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2965, i8* %2966, align 1, !tbaa !2432
  %2967 = and i32 %2960, 255
  %2968 = call i32 @llvm.ctpop.i32(i32 %2967) #17
  %2969 = trunc i32 %2968 to i8
  %2970 = and i8 %2969, 1
  %2971 = xor i8 %2970, 1
  %2972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2971, i8* %2972, align 1, !tbaa !2446
  %2973 = xor i32 %2959, %2957
  %2974 = xor i32 %2973, %2960
  %2975 = lshr i32 %2974, 4
  %2976 = trunc i32 %2975 to i8
  %2977 = and i8 %2976, 1
  %2978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2977, i8* %2978, align 1, !tbaa !2447
  %2979 = icmp eq i32 %2960, 0
  %2980 = zext i1 %2979 to i8
  %2981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2980, i8* %2981, align 1, !tbaa !2448
  %2982 = lshr i32 %2960, 31
  %2983 = trunc i32 %2982 to i8
  %2984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2983, i8* %2984, align 1, !tbaa !2449
  %2985 = lshr i32 %2957, 31
  %2986 = lshr i32 %2959, 31
  %2987 = xor i32 %2982, %2985
  %2988 = xor i32 %2982, %2986
  %2989 = add nuw nsw i32 %2987, %2988
  %2990 = icmp eq i32 %2989, 2
  %2991 = zext i1 %2990 to i8
  %2992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2991, i8* %2992, align 1, !tbaa !2450
  %2993 = load i64, i64* %RBP
  %2994 = sub i64 %2993, 44
  %2995 = load i32, i32* %EAX
  %2996 = zext i32 %2995 to i64
  %2997 = load i64, i64* %PC
  %2998 = add i64 %2997, 3
  store i64 %2998, i64* %PC
  %2999 = inttoptr i64 %2994 to i32*
  store i32 %2995, i32* %2999
  %3000 = load i64, i64* %PC
  %3001 = sub i64 %3000, 1910
  %3002 = load i64, i64* %PC
  %3003 = add i64 %3002, 5
  store i64 %3003, i64* %PC
  %3004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3001, i64* %3004, align 8, !tbaa !2428
  br label %block_403893

block_40400e:                                     ; preds = %block_403893
  %3005 = load i64, i64* %RSP
  %3006 = load i64, i64* %PC
  %3007 = add i64 %3006, 4
  store i64 %3007, i64* %PC
  %3008 = add i64 48, %3005
  store i64 %3008, i64* %RSP, align 8, !tbaa !2428
  %3009 = icmp ult i64 %3008, %3005
  %3010 = icmp ult i64 %3008, 48
  %3011 = or i1 %3009, %3010
  %3012 = zext i1 %3011 to i8
  %3013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3012, i8* %3013, align 1, !tbaa !2432
  %3014 = trunc i64 %3008 to i32
  %3015 = and i32 %3014, 255
  %3016 = call i32 @llvm.ctpop.i32(i32 %3015) #17
  %3017 = trunc i32 %3016 to i8
  %3018 = and i8 %3017, 1
  %3019 = xor i8 %3018, 1
  %3020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3019, i8* %3020, align 1, !tbaa !2446
  %3021 = xor i64 48, %3005
  %3022 = xor i64 %3021, %3008
  %3023 = lshr i64 %3022, 4
  %3024 = trunc i64 %3023 to i8
  %3025 = and i8 %3024, 1
  %3026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3025, i8* %3026, align 1, !tbaa !2447
  %3027 = icmp eq i64 %3008, 0
  %3028 = zext i1 %3027 to i8
  %3029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3028, i8* %3029, align 1, !tbaa !2448
  %3030 = lshr i64 %3008, 63
  %3031 = trunc i64 %3030 to i8
  %3032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3031, i8* %3032, align 1, !tbaa !2449
  %3033 = lshr i64 %3005, 63
  %3034 = xor i64 %3030, %3033
  %3035 = add nuw nsw i64 %3034, %3030
  %3036 = icmp eq i64 %3035, 2
  %3037 = zext i1 %3036 to i8
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3037, i8* %3038, align 1, !tbaa !2450
  %3039 = load i64, i64* %PC
  %3040 = add i64 %3039, 1
  store i64 %3040, i64* %PC
  %3041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3042 = load i64, i64* %3041, align 8, !tbaa !2428
  %3043 = add i64 %3042, 8
  %3044 = inttoptr i64 %3042 to i64*
  %3045 = load i64, i64* %3044
  store i64 %3045, i64* %RBP, align 8, !tbaa !2428
  store i64 %3043, i64* %3041, align 8, !tbaa !2428
  %3046 = load i64, i64* %PC
  %3047 = add i64 %3046, 1
  store i64 %3047, i64* %PC
  %3048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3050 = load i64, i64* %3049, align 8, !tbaa !2428
  %3051 = inttoptr i64 %3050 to i64*
  %3052 = load i64, i64* %3051
  store i64 %3052, i64* %3048, align 8, !tbaa !2428
  %3053 = add i64 %3050, 8
  store i64 %3053, i64* %3049, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4035ad:                                     ; preds = %block_403356
  %3054 = sub i64 %5511, 24
  %3055 = load i64, i64* %PC
  %3056 = add i64 %3055, 4
  store i64 %3056, i64* %PC
  %3057 = inttoptr i64 %3054 to i64*
  %3058 = load i64, i64* %3057
  store i64 %3058, i64* %RAX, align 8, !tbaa !2428
  %3059 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3060 = load i64, i64* %RAX
  %3061 = add i64 %3060, 16
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 5
  store i64 %3063, i64* %PC
  %3064 = inttoptr i64 %3061 to double*
  %3065 = load double, double* %3064
  %3066 = bitcast i8* %3059 to double*
  store double %3065, double* %3066, align 1, !tbaa !2452
  %3067 = getelementptr inbounds i8, i8* %3059, i64 8
  %3068 = bitcast i8* %3067 to double*
  store double 0.000000e+00, double* %3068, align 1, !tbaa !2452
  %3069 = load i64, i64* %RBP
  %3070 = sub i64 %3069, 72
  %3071 = bitcast %union.vec128_t* %XMM0 to i8*
  %3072 = load i64, i64* %PC
  %3073 = add i64 %3072, 5
  store i64 %3073, i64* %PC
  %3074 = bitcast i8* %3071 to double*
  %3075 = load double, double* %3074, align 1
  %3076 = inttoptr i64 %3070 to double*
  store double %3075, double* %3076
  %3077 = load i64, i64* %RBP
  %3078 = sub i64 %3077, 56
  %3079 = load i64, i64* %PC
  %3080 = add i64 %3079, 3
  store i64 %3080, i64* %PC
  %3081 = inttoptr i64 %3078 to i32*
  %3082 = load i32, i32* %3081
  %3083 = zext i32 %3082 to i64
  store i64 %3083, i64* %RCX, align 8, !tbaa !2428
  %3084 = load i64, i64* %RBP
  %3085 = sub i64 %3084, 28
  %3086 = load i32, i32* %ECX
  %3087 = zext i32 %3086 to i64
  %3088 = load i64, i64* %PC
  %3089 = add i64 %3088, 3
  store i64 %3089, i64* %PC
  %3090 = inttoptr i64 %3085 to i32*
  store i32 %3086, i32* %3090
  br label %block_4035c1

block_403cc0:                                     ; preds = %block_403cd6, %block_403c52
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_403c52 ], [ %MEMORY.0, %block_403cd6 ]
  %3091 = load i64, i64* %RBP
  %3092 = sub i64 %3091, 28
  %3093 = load i64, i64* %PC
  %3094 = add i64 %3093, 3
  store i64 %3094, i64* %PC
  %3095 = inttoptr i64 %3092 to i32*
  %3096 = load i32, i32* %3095
  %3097 = zext i32 %3096 to i64
  store i64 %3097, i64* %RAX, align 8, !tbaa !2428
  %3098 = load i64, i64* %RBP
  %3099 = sub i64 %3098, 8
  %3100 = load i64, i64* %PC
  %3101 = add i64 %3100, 3
  store i64 %3101, i64* %PC
  %3102 = inttoptr i64 %3099 to i32*
  %3103 = load i32, i32* %3102
  %3104 = zext i32 %3103 to i64
  store i64 %3104, i64* %RCX, align 8, !tbaa !2428
  %3105 = load i64, i64* %RBP
  %3106 = sub i64 %3105, 44
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 3
  store i64 %3108, i64* %PC
  %3109 = inttoptr i64 %3106 to i32*
  %3110 = load i32, i32* %3109
  %3111 = zext i32 %3110 to i64
  store i64 %3111, i64* %RDX, align 8, !tbaa !2428
  %3112 = load i64, i64* %RDX
  %3113 = load i64, i64* %RBP
  %3114 = sub i64 %3113, 56
  %3115 = load i64, i64* %PC
  %3116 = add i64 %3115, 3
  store i64 %3116, i64* %PC
  %3117 = trunc i64 %3112 to i32
  %3118 = inttoptr i64 %3114 to i32*
  %3119 = load i32, i32* %3118
  %3120 = add i32 %3119, %3117
  %3121 = zext i32 %3120 to i64
  store i64 %3121, i64* %RDX, align 8, !tbaa !2428
  %3122 = icmp ult i32 %3120, %3117
  %3123 = icmp ult i32 %3120, %3119
  %3124 = or i1 %3122, %3123
  %3125 = zext i1 %3124 to i8
  %3126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3125, i8* %3126, align 1, !tbaa !2432
  %3127 = and i32 %3120, 255
  %3128 = call i32 @llvm.ctpop.i32(i32 %3127) #17
  %3129 = trunc i32 %3128 to i8
  %3130 = and i8 %3129, 1
  %3131 = xor i8 %3130, 1
  %3132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3131, i8* %3132, align 1, !tbaa !2446
  %3133 = xor i32 %3119, %3117
  %3134 = xor i32 %3133, %3120
  %3135 = lshr i32 %3134, 4
  %3136 = trunc i32 %3135 to i8
  %3137 = and i8 %3136, 1
  %3138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3137, i8* %3138, align 1, !tbaa !2447
  %3139 = icmp eq i32 %3120, 0
  %3140 = zext i1 %3139 to i8
  %3141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3140, i8* %3141, align 1, !tbaa !2448
  %3142 = lshr i32 %3120, 31
  %3143 = trunc i32 %3142 to i8
  %3144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3143, i8* %3144, align 1, !tbaa !2449
  %3145 = lshr i32 %3117, 31
  %3146 = lshr i32 %3119, 31
  %3147 = xor i32 %3142, %3145
  %3148 = xor i32 %3142, %3146
  %3149 = add nuw nsw i32 %3147, %3148
  %3150 = icmp eq i32 %3149, 2
  %3151 = zext i1 %3150 to i8
  %3152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3151, i8* %3152, align 1, !tbaa !2450
  %3153 = load i64, i64* %RCX
  %3154 = load i32, i32* %EDX
  %3155 = zext i32 %3154 to i64
  %3156 = load i64, i64* %PC
  %3157 = add i64 %3156, 2
  store i64 %3157, i64* %PC
  %3158 = trunc i64 %3153 to i32
  %3159 = add i32 %3154, %3158
  %3160 = zext i32 %3159 to i64
  store i64 %3160, i64* %RCX, align 8, !tbaa !2428
  %3161 = icmp ult i32 %3159, %3158
  %3162 = icmp ult i32 %3159, %3154
  %3163 = or i1 %3161, %3162
  %3164 = zext i1 %3163 to i8
  %3165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3164, i8* %3165, align 1, !tbaa !2432
  %3166 = and i32 %3159, 255
  %3167 = call i32 @llvm.ctpop.i32(i32 %3166) #17
  %3168 = trunc i32 %3167 to i8
  %3169 = and i8 %3168, 1
  %3170 = xor i8 %3169, 1
  %3171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3170, i8* %3171, align 1, !tbaa !2446
  %3172 = xor i64 %3155, %3153
  %3173 = trunc i64 %3172 to i32
  %3174 = xor i32 %3173, %3159
  %3175 = lshr i32 %3174, 4
  %3176 = trunc i32 %3175 to i8
  %3177 = and i8 %3176, 1
  %3178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3177, i8* %3178, align 1, !tbaa !2447
  %3179 = icmp eq i32 %3159, 0
  %3180 = zext i1 %3179 to i8
  %3181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3180, i8* %3181, align 1, !tbaa !2448
  %3182 = lshr i32 %3159, 31
  %3183 = trunc i32 %3182 to i8
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3183, i8* %3184, align 1, !tbaa !2449
  %3185 = lshr i32 %3158, 31
  %3186 = lshr i32 %3154, 31
  %3187 = xor i32 %3182, %3185
  %3188 = xor i32 %3182, %3186
  %3189 = add nuw nsw i32 %3187, %3188
  %3190 = icmp eq i32 %3189, 2
  %3191 = zext i1 %3190 to i8
  %3192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3191, i8* %3192, align 1, !tbaa !2450
  %3193 = load i32, i32* %EAX
  %3194 = zext i32 %3193 to i64
  %3195 = load i32, i32* %ECX
  %3196 = zext i32 %3195 to i64
  %3197 = load i64, i64* %PC
  %3198 = add i64 %3197, 2
  store i64 %3198, i64* %PC
  %3199 = sub i32 %3193, %3195
  %3200 = icmp ult i32 %3193, %3195
  %3201 = zext i1 %3200 to i8
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3201, i8* %3202, align 1, !tbaa !2432
  %3203 = and i32 %3199, 255
  %3204 = call i32 @llvm.ctpop.i32(i32 %3203) #17
  %3205 = trunc i32 %3204 to i8
  %3206 = and i8 %3205, 1
  %3207 = xor i8 %3206, 1
  %3208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3207, i8* %3208, align 1, !tbaa !2446
  %3209 = xor i64 %3196, %3194
  %3210 = trunc i64 %3209 to i32
  %3211 = xor i32 %3210, %3199
  %3212 = lshr i32 %3211, 4
  %3213 = trunc i32 %3212 to i8
  %3214 = and i8 %3213, 1
  %3215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3214, i8* %3215, align 1, !tbaa !2447
  %3216 = icmp eq i32 %3199, 0
  %3217 = zext i1 %3216 to i8
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3217, i8* %3218, align 1, !tbaa !2448
  %3219 = lshr i32 %3199, 31
  %3220 = trunc i32 %3219 to i8
  %3221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3220, i8* %3221, align 1, !tbaa !2449
  %3222 = lshr i32 %3193, 31
  %3223 = lshr i32 %3195, 31
  %3224 = xor i32 %3223, %3222
  %3225 = xor i32 %3219, %3222
  %3226 = add nuw nsw i32 %3225, %3224
  %3227 = icmp eq i32 %3226, 2
  %3228 = zext i1 %3227 to i8
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3228, i8* %3229, align 1, !tbaa !2450
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 811
  %3232 = load i64, i64* %PC
  %3233 = add i64 %3232, 6
  %3234 = load i64, i64* %PC
  %3235 = add i64 %3234, 6
  store i64 %3235, i64* %PC
  %3236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3237 = load i8, i8* %3236, align 1, !tbaa !2449
  %3238 = icmp ne i8 %3237, 0
  %3239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3240 = load i8, i8* %3239, align 1, !tbaa !2450
  %3241 = icmp ne i8 %3240, 0
  %3242 = xor i1 %3238, %3241
  %3243 = xor i1 %3242, true
  %3244 = zext i1 %3243 to i8
  store i8 %3244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3246 = select i1 %3242, i64 %3233, i64 %3231
  store i64 %3246, i64* %3245, align 8, !tbaa !2428
  %3247 = load i8, i8* %BRANCH_TAKEN
  %3248 = icmp eq i8 %3247, 1
  %3249 = load i64, i64* %PC
  br i1 %3248, label %block_403ffb, label %block_403cd6

block_403cd6:                                     ; preds = %block_403cc0
  %3250 = add i64 %3249, 10
  store i64 %3250, i64* %PC
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %3251 = load i64, i64* %RBP
  %3252 = sub i64 %3251, 28
  %3253 = load i64, i64* %PC
  %3254 = add i64 %3253, 3
  store i64 %3254, i64* %PC
  %3255 = inttoptr i64 %3252 to i32*
  %3256 = load i32, i32* %3255
  %3257 = zext i32 %3256 to i64
  store i64 %3257, i64* %RCX, align 8, !tbaa !2428
  %3258 = load i64, i64* %RCX
  %3259 = load i64, i64* %RBP
  %3260 = sub i64 %3259, 8
  %3261 = load i64, i64* %PC
  %3262 = add i64 %3261, 3
  store i64 %3262, i64* %PC
  %3263 = trunc i64 %3258 to i32
  %3264 = inttoptr i64 %3260 to i32*
  %3265 = load i32, i32* %3264
  %3266 = add i32 %3265, %3263
  %3267 = zext i32 %3266 to i64
  store i64 %3267, i64* %RCX, align 8, !tbaa !2428
  %3268 = icmp ult i32 %3266, %3263
  %3269 = icmp ult i32 %3266, %3265
  %3270 = or i1 %3268, %3269
  %3271 = zext i1 %3270 to i8
  %3272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3271, i8* %3272, align 1, !tbaa !2432
  %3273 = and i32 %3266, 255
  %3274 = call i32 @llvm.ctpop.i32(i32 %3273) #17
  %3275 = trunc i32 %3274 to i8
  %3276 = and i8 %3275, 1
  %3277 = xor i8 %3276, 1
  %3278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3277, i8* %3278, align 1, !tbaa !2446
  %3279 = xor i32 %3265, %3263
  %3280 = xor i32 %3279, %3266
  %3281 = lshr i32 %3280, 4
  %3282 = trunc i32 %3281 to i8
  %3283 = and i8 %3282, 1
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3283, i8* %3284, align 1, !tbaa !2447
  %3285 = icmp eq i32 %3266, 0
  %3286 = zext i1 %3285 to i8
  %3287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3286, i8* %3287, align 1, !tbaa !2448
  %3288 = lshr i32 %3266, 31
  %3289 = trunc i32 %3288 to i8
  %3290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3289, i8* %3290, align 1, !tbaa !2449
  %3291 = lshr i32 %3263, 31
  %3292 = lshr i32 %3265, 31
  %3293 = xor i32 %3288, %3291
  %3294 = xor i32 %3288, %3292
  %3295 = add nuw nsw i32 %3293, %3294
  %3296 = icmp eq i32 %3295, 2
  %3297 = zext i1 %3296 to i8
  %3298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3297, i8* %3298, align 1, !tbaa !2450
  %3299 = load i64, i64* %RBP
  %3300 = sub i64 %3299, 32
  %3301 = load i32, i32* %ECX
  %3302 = zext i32 %3301 to i64
  %3303 = load i64, i64* %PC
  %3304 = add i64 %3303, 3
  store i64 %3304, i64* %PC
  %3305 = inttoptr i64 %3300 to i32*
  store i32 %3301, i32* %3305
  %3306 = load i64, i64* %RBP
  %3307 = sub i64 %3306, 32
  %3308 = load i64, i64* %PC
  %3309 = add i64 %3308, 3
  store i64 %3309, i64* %PC
  %3310 = inttoptr i64 %3307 to i32*
  %3311 = load i32, i32* %3310
  %3312 = zext i32 %3311 to i64
  store i64 %3312, i64* %RCX, align 8, !tbaa !2428
  %3313 = load i64, i64* %RCX
  %3314 = load i64, i64* %RBP
  %3315 = sub i64 %3314, 8
  %3316 = load i64, i64* %PC
  %3317 = add i64 %3316, 3
  store i64 %3317, i64* %PC
  %3318 = trunc i64 %3313 to i32
  %3319 = inttoptr i64 %3315 to i32*
  %3320 = load i32, i32* %3319
  %3321 = add i32 %3320, %3318
  %3322 = zext i32 %3321 to i64
  store i64 %3322, i64* %RCX, align 8, !tbaa !2428
  %3323 = icmp ult i32 %3321, %3318
  %3324 = icmp ult i32 %3321, %3320
  %3325 = or i1 %3323, %3324
  %3326 = zext i1 %3325 to i8
  %3327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3326, i8* %3327, align 1, !tbaa !2432
  %3328 = and i32 %3321, 255
  %3329 = call i32 @llvm.ctpop.i32(i32 %3328) #17
  %3330 = trunc i32 %3329 to i8
  %3331 = and i8 %3330, 1
  %3332 = xor i8 %3331, 1
  %3333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3332, i8* %3333, align 1, !tbaa !2446
  %3334 = xor i32 %3320, %3318
  %3335 = xor i32 %3334, %3321
  %3336 = lshr i32 %3335, 4
  %3337 = trunc i32 %3336 to i8
  %3338 = and i8 %3337, 1
  %3339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3338, i8* %3339, align 1, !tbaa !2447
  %3340 = icmp eq i32 %3321, 0
  %3341 = zext i1 %3340 to i8
  %3342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3341, i8* %3342, align 1, !tbaa !2448
  %3343 = lshr i32 %3321, 31
  %3344 = trunc i32 %3343 to i8
  %3345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3344, i8* %3345, align 1, !tbaa !2449
  %3346 = lshr i32 %3318, 31
  %3347 = lshr i32 %3320, 31
  %3348 = xor i32 %3343, %3346
  %3349 = xor i32 %3343, %3347
  %3350 = add nuw nsw i32 %3348, %3349
  %3351 = icmp eq i32 %3350, 2
  %3352 = zext i1 %3351 to i8
  %3353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3352, i8* %3353, align 1, !tbaa !2450
  %3354 = load i64, i64* %RBP
  %3355 = sub i64 %3354, 36
  %3356 = load i32, i32* %ECX
  %3357 = zext i32 %3356 to i64
  %3358 = load i64, i64* %PC
  %3359 = add i64 %3358, 3
  store i64 %3359, i64* %PC
  %3360 = inttoptr i64 %3355 to i32*
  store i32 %3356, i32* %3360
  %3361 = load i64, i64* %RBP
  %3362 = sub i64 %3361, 36
  %3363 = load i64, i64* %PC
  %3364 = add i64 %3363, 3
  store i64 %3364, i64* %PC
  %3365 = inttoptr i64 %3362 to i32*
  %3366 = load i32, i32* %3365
  %3367 = zext i32 %3366 to i64
  store i64 %3367, i64* %RCX, align 8, !tbaa !2428
  %3368 = load i64, i64* %RCX
  %3369 = load i64, i64* %RBP
  %3370 = sub i64 %3369, 8
  %3371 = load i64, i64* %PC
  %3372 = add i64 %3371, 3
  store i64 %3372, i64* %PC
  %3373 = trunc i64 %3368 to i32
  %3374 = inttoptr i64 %3370 to i32*
  %3375 = load i32, i32* %3374
  %3376 = add i32 %3375, %3373
  %3377 = zext i32 %3376 to i64
  store i64 %3377, i64* %RCX, align 8, !tbaa !2428
  %3378 = icmp ult i32 %3376, %3373
  %3379 = icmp ult i32 %3376, %3375
  %3380 = or i1 %3378, %3379
  %3381 = zext i1 %3380 to i8
  %3382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3381, i8* %3382, align 1, !tbaa !2432
  %3383 = and i32 %3376, 255
  %3384 = call i32 @llvm.ctpop.i32(i32 %3383) #17
  %3385 = trunc i32 %3384 to i8
  %3386 = and i8 %3385, 1
  %3387 = xor i8 %3386, 1
  %3388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3387, i8* %3388, align 1, !tbaa !2446
  %3389 = xor i32 %3375, %3373
  %3390 = xor i32 %3389, %3376
  %3391 = lshr i32 %3390, 4
  %3392 = trunc i32 %3391 to i8
  %3393 = and i8 %3392, 1
  %3394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3393, i8* %3394, align 1, !tbaa !2447
  %3395 = icmp eq i32 %3376, 0
  %3396 = zext i1 %3395 to i8
  %3397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3396, i8* %3397, align 1, !tbaa !2448
  %3398 = lshr i32 %3376, 31
  %3399 = trunc i32 %3398 to i8
  %3400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3399, i8* %3400, align 1, !tbaa !2449
  %3401 = lshr i32 %3373, 31
  %3402 = lshr i32 %3375, 31
  %3403 = xor i32 %3398, %3401
  %3404 = xor i32 %3398, %3402
  %3405 = add nuw nsw i32 %3403, %3404
  %3406 = icmp eq i32 %3405, 2
  %3407 = zext i1 %3406 to i8
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3407, i8* %3408, align 1, !tbaa !2450
  %3409 = load i64, i64* %RBP
  %3410 = sub i64 %3409, 40
  %3411 = load i32, i32* %ECX
  %3412 = zext i32 %3411 to i64
  %3413 = load i64, i64* %PC
  %3414 = add i64 %3413, 3
  store i64 %3414, i64* %PC
  %3415 = inttoptr i64 %3410 to i32*
  store i32 %3411, i32* %3415
  %3416 = load i64, i64* %RBP
  %3417 = sub i64 %3416, 16
  %3418 = load i64, i64* %PC
  %3419 = add i64 %3418, 4
  store i64 %3419, i64* %PC
  %3420 = inttoptr i64 %3417 to i64*
  %3421 = load i64, i64* %3420
  store i64 %3421, i64* %RDX, align 8, !tbaa !2428
  %3422 = load i64, i64* %RBP
  %3423 = sub i64 %3422, 28
  %3424 = load i64, i64* %PC
  %3425 = add i64 %3424, 4
  store i64 %3425, i64* %PC
  %3426 = inttoptr i64 %3423 to i32*
  %3427 = load i32, i32* %3426
  %3428 = sext i32 %3427 to i64
  store i64 %3428, i64* %RSI, align 8, !tbaa !2428
  %3429 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3430 = load i64, i64* %RDX
  %3431 = load i64, i64* %RSI
  %3432 = mul i64 %3431, 8
  %3433 = add i64 %3432, %3430
  %3434 = load i64, i64* %PC
  %3435 = add i64 %3434, 5
  store i64 %3435, i64* %PC
  %3436 = inttoptr i64 %3433 to double*
  %3437 = load double, double* %3436
  %3438 = bitcast i8* %3429 to double*
  store double %3437, double* %3438, align 1, !tbaa !2452
  %3439 = getelementptr inbounds i8, i8* %3429, i64 8
  %3440 = bitcast i8* %3439 to double*
  store double 0.000000e+00, double* %3440, align 1, !tbaa !2452
  %3441 = load i64, i64* %RBP
  %3442 = sub i64 %3441, 16
  %3443 = load i64, i64* %PC
  %3444 = add i64 %3443, 4
  store i64 %3444, i64* %PC
  %3445 = inttoptr i64 %3442 to i64*
  %3446 = load i64, i64* %3445
  store i64 %3446, i64* %RDX, align 8, !tbaa !2428
  %3447 = load i64, i64* %RBP
  %3448 = sub i64 %3447, 32
  %3449 = load i64, i64* %PC
  %3450 = add i64 %3449, 4
  store i64 %3450, i64* %PC
  %3451 = inttoptr i64 %3448 to i32*
  %3452 = load i32, i32* %3451
  %3453 = sext i32 %3452 to i64
  store i64 %3453, i64* %RSI, align 8, !tbaa !2428
  %3454 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3456 = load i64, i64* %RDX
  %3457 = load i64, i64* %RSI
  %3458 = mul i64 %3457, 8
  %3459 = add i64 %3458, %3456
  %3460 = load i64, i64* %PC
  %3461 = add i64 %3460, 5
  store i64 %3461, i64* %PC
  %3462 = bitcast i8* %3455 to double*
  %3463 = load double, double* %3462, align 1
  %3464 = getelementptr inbounds i8, i8* %3455, i64 8
  %3465 = bitcast i8* %3464 to i64*
  %3466 = load i64, i64* %3465, align 1
  %3467 = inttoptr i64 %3459 to double*
  %3468 = load double, double* %3467
  %3469 = fadd double %3463, %3468
  %3470 = bitcast i8* %3454 to double*
  store double %3469, double* %3470, align 1, !tbaa !2452
  %3471 = getelementptr inbounds i8, i8* %3454, i64 8
  %3472 = bitcast i8* %3471 to i64*
  store i64 %3466, i64* %3472, align 1, !tbaa !2452
  %3473 = load i64, i64* %RBP
  %3474 = sub i64 %3473, 120
  %3475 = bitcast %union.vec128_t* %XMM0 to i8*
  %3476 = load i64, i64* %PC
  %3477 = add i64 %3476, 5
  store i64 %3477, i64* %PC
  %3478 = bitcast i8* %3475 to double*
  %3479 = load double, double* %3478, align 1
  %3480 = inttoptr i64 %3474 to double*
  store double %3479, double* %3480
  %3481 = load i64, i64* %RBP
  %3482 = sub i64 %3481, 16
  %3483 = load i64, i64* %PC
  %3484 = add i64 %3483, 4
  store i64 %3484, i64* %PC
  %3485 = inttoptr i64 %3482 to i64*
  %3486 = load i64, i64* %3485
  store i64 %3486, i64* %RDX, align 8, !tbaa !2428
  %3487 = load i64, i64* %RBP
  %3488 = sub i64 %3487, 28
  %3489 = load i64, i64* %PC
  %3490 = add i64 %3489, 3
  store i64 %3490, i64* %PC
  %3491 = inttoptr i64 %3488 to i32*
  %3492 = load i32, i32* %3491
  %3493 = zext i32 %3492 to i64
  store i64 %3493, i64* %RCX, align 8, !tbaa !2428
  %3494 = load i64, i64* %RCX
  %3495 = load i64, i64* %PC
  %3496 = add i64 %3495, 3
  store i64 %3496, i64* %PC
  %3497 = trunc i64 %3494 to i32
  %3498 = add i32 1, %3497
  %3499 = zext i32 %3498 to i64
  store i64 %3499, i64* %RCX, align 8, !tbaa !2428
  %3500 = icmp ult i32 %3498, %3497
  %3501 = icmp ult i32 %3498, 1
  %3502 = or i1 %3500, %3501
  %3503 = zext i1 %3502 to i8
  %3504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3503, i8* %3504, align 1, !tbaa !2432
  %3505 = and i32 %3498, 255
  %3506 = call i32 @llvm.ctpop.i32(i32 %3505) #17
  %3507 = trunc i32 %3506 to i8
  %3508 = and i8 %3507, 1
  %3509 = xor i8 %3508, 1
  %3510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3509, i8* %3510, align 1, !tbaa !2446
  %3511 = xor i64 1, %3494
  %3512 = trunc i64 %3511 to i32
  %3513 = xor i32 %3512, %3498
  %3514 = lshr i32 %3513, 4
  %3515 = trunc i32 %3514 to i8
  %3516 = and i8 %3515, 1
  %3517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3516, i8* %3517, align 1, !tbaa !2447
  %3518 = icmp eq i32 %3498, 0
  %3519 = zext i1 %3518 to i8
  %3520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3519, i8* %3520, align 1, !tbaa !2448
  %3521 = lshr i32 %3498, 31
  %3522 = trunc i32 %3521 to i8
  %3523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3522, i8* %3523, align 1, !tbaa !2449
  %3524 = lshr i32 %3497, 31
  %3525 = xor i32 %3521, %3524
  %3526 = add nuw nsw i32 %3525, %3521
  %3527 = icmp eq i32 %3526, 2
  %3528 = zext i1 %3527 to i8
  %3529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3528, i8* %3529, align 1, !tbaa !2450
  %3530 = load i32, i32* %ECX
  %3531 = zext i32 %3530 to i64
  %3532 = load i64, i64* %PC
  %3533 = add i64 %3532, 3
  store i64 %3533, i64* %PC
  %3534 = shl i64 %3531, 32
  %3535 = ashr exact i64 %3534, 32
  store i64 %3535, i64* %RSI, align 8, !tbaa !2428
  %3536 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3537 = load i64, i64* %RDX
  %3538 = load i64, i64* %RSI
  %3539 = mul i64 %3538, 8
  %3540 = add i64 %3539, %3537
  %3541 = load i64, i64* %PC
  %3542 = add i64 %3541, 5
  store i64 %3542, i64* %PC
  %3543 = inttoptr i64 %3540 to double*
  %3544 = load double, double* %3543
  %3545 = bitcast i8* %3536 to double*
  store double %3544, double* %3545, align 1, !tbaa !2452
  %3546 = getelementptr inbounds i8, i8* %3536, i64 8
  %3547 = bitcast i8* %3546 to double*
  store double 0.000000e+00, double* %3547, align 1, !tbaa !2452
  %3548 = load i64, i64* %RBP
  %3549 = sub i64 %3548, 16
  %3550 = load i64, i64* %PC
  %3551 = add i64 %3550, 4
  store i64 %3551, i64* %PC
  %3552 = inttoptr i64 %3549 to i64*
  %3553 = load i64, i64* %3552
  store i64 %3553, i64* %RDX, align 8, !tbaa !2428
  %3554 = load i64, i64* %RBP
  %3555 = sub i64 %3554, 32
  %3556 = load i64, i64* %PC
  %3557 = add i64 %3556, 3
  store i64 %3557, i64* %PC
  %3558 = inttoptr i64 %3555 to i32*
  %3559 = load i32, i32* %3558
  %3560 = zext i32 %3559 to i64
  store i64 %3560, i64* %RCX, align 8, !tbaa !2428
  %3561 = load i64, i64* %RCX
  %3562 = load i64, i64* %PC
  %3563 = add i64 %3562, 3
  store i64 %3563, i64* %PC
  %3564 = trunc i64 %3561 to i32
  %3565 = add i32 1, %3564
  %3566 = zext i32 %3565 to i64
  store i64 %3566, i64* %RCX, align 8, !tbaa !2428
  %3567 = icmp ult i32 %3565, %3564
  %3568 = icmp ult i32 %3565, 1
  %3569 = or i1 %3567, %3568
  %3570 = zext i1 %3569 to i8
  %3571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3570, i8* %3571, align 1, !tbaa !2432
  %3572 = and i32 %3565, 255
  %3573 = call i32 @llvm.ctpop.i32(i32 %3572) #17
  %3574 = trunc i32 %3573 to i8
  %3575 = and i8 %3574, 1
  %3576 = xor i8 %3575, 1
  %3577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3576, i8* %3577, align 1, !tbaa !2446
  %3578 = xor i64 1, %3561
  %3579 = trunc i64 %3578 to i32
  %3580 = xor i32 %3579, %3565
  %3581 = lshr i32 %3580, 4
  %3582 = trunc i32 %3581 to i8
  %3583 = and i8 %3582, 1
  %3584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3583, i8* %3584, align 1, !tbaa !2447
  %3585 = icmp eq i32 %3565, 0
  %3586 = zext i1 %3585 to i8
  %3587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3586, i8* %3587, align 1, !tbaa !2448
  %3588 = lshr i32 %3565, 31
  %3589 = trunc i32 %3588 to i8
  %3590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3589, i8* %3590, align 1, !tbaa !2449
  %3591 = lshr i32 %3564, 31
  %3592 = xor i32 %3588, %3591
  %3593 = add nuw nsw i32 %3592, %3588
  %3594 = icmp eq i32 %3593, 2
  %3595 = zext i1 %3594 to i8
  %3596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3595, i8* %3596, align 1, !tbaa !2450
  %3597 = load i32, i32* %ECX
  %3598 = zext i32 %3597 to i64
  %3599 = load i64, i64* %PC
  %3600 = add i64 %3599, 3
  store i64 %3600, i64* %PC
  %3601 = shl i64 %3598, 32
  %3602 = ashr exact i64 %3601, 32
  store i64 %3602, i64* %RSI, align 8, !tbaa !2428
  %3603 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3604 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3605 = load i64, i64* %RDX
  %3606 = load i64, i64* %RSI
  %3607 = mul i64 %3606, 8
  %3608 = add i64 %3607, %3605
  %3609 = load i64, i64* %PC
  %3610 = add i64 %3609, 5
  store i64 %3610, i64* %PC
  %3611 = bitcast i8* %3604 to double*
  %3612 = load double, double* %3611, align 1
  %3613 = getelementptr inbounds i8, i8* %3604, i64 8
  %3614 = bitcast i8* %3613 to i64*
  %3615 = load i64, i64* %3614, align 1
  %3616 = inttoptr i64 %3608 to double*
  %3617 = load double, double* %3616
  %3618 = fadd double %3612, %3617
  %3619 = bitcast i8* %3603 to double*
  store double %3618, double* %3619, align 1, !tbaa !2452
  %3620 = getelementptr inbounds i8, i8* %3603, i64 8
  %3621 = bitcast i8* %3620 to i64*
  store i64 %3615, i64* %3621, align 1, !tbaa !2452
  %3622 = load i64, i64* %RBP
  %3623 = sub i64 %3622, 128
  %3624 = bitcast %union.vec128_t* %XMM0 to i8*
  %3625 = load i64, i64* %PC
  %3626 = add i64 %3625, 5
  store i64 %3626, i64* %PC
  %3627 = bitcast i8* %3624 to double*
  %3628 = load double, double* %3627, align 1
  %3629 = inttoptr i64 %3623 to double*
  store double %3628, double* %3629
  %3630 = load i64, i64* %RBP
  %3631 = sub i64 %3630, 16
  %3632 = load i64, i64* %PC
  %3633 = add i64 %3632, 4
  store i64 %3633, i64* %PC
  %3634 = inttoptr i64 %3631 to i64*
  %3635 = load i64, i64* %3634
  store i64 %3635, i64* %RDX, align 8, !tbaa !2428
  %3636 = load i64, i64* %RBP
  %3637 = sub i64 %3636, 28
  %3638 = load i64, i64* %PC
  %3639 = add i64 %3638, 4
  store i64 %3639, i64* %PC
  %3640 = inttoptr i64 %3637 to i32*
  %3641 = load i32, i32* %3640
  %3642 = sext i32 %3641 to i64
  store i64 %3642, i64* %RSI, align 8, !tbaa !2428
  %3643 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3644 = load i64, i64* %RDX
  %3645 = load i64, i64* %RSI
  %3646 = mul i64 %3645, 8
  %3647 = add i64 %3646, %3644
  %3648 = load i64, i64* %PC
  %3649 = add i64 %3648, 5
  store i64 %3649, i64* %PC
  %3650 = inttoptr i64 %3647 to double*
  %3651 = load double, double* %3650
  %3652 = bitcast i8* %3643 to double*
  store double %3651, double* %3652, align 1, !tbaa !2452
  %3653 = getelementptr inbounds i8, i8* %3643, i64 8
  %3654 = bitcast i8* %3653 to double*
  store double 0.000000e+00, double* %3654, align 1, !tbaa !2452
  %3655 = load i64, i64* %RBP
  %3656 = sub i64 %3655, 16
  %3657 = load i64, i64* %PC
  %3658 = add i64 %3657, 4
  store i64 %3658, i64* %PC
  %3659 = inttoptr i64 %3656 to i64*
  %3660 = load i64, i64* %3659
  store i64 %3660, i64* %RDX, align 8, !tbaa !2428
  %3661 = load i64, i64* %RBP
  %3662 = sub i64 %3661, 32
  %3663 = load i64, i64* %PC
  %3664 = add i64 %3663, 4
  store i64 %3664, i64* %PC
  %3665 = inttoptr i64 %3662 to i32*
  %3666 = load i32, i32* %3665
  %3667 = sext i32 %3666 to i64
  store i64 %3667, i64* %RSI, align 8, !tbaa !2428
  %3668 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3669 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3670 = load i64, i64* %RDX
  %3671 = load i64, i64* %RSI
  %3672 = mul i64 %3671, 8
  %3673 = add i64 %3672, %3670
  %3674 = load i64, i64* %PC
  %3675 = add i64 %3674, 5
  store i64 %3675, i64* %PC
  %3676 = bitcast i8* %3669 to double*
  %3677 = load double, double* %3676, align 1
  %3678 = getelementptr inbounds i8, i8* %3669, i64 8
  %3679 = bitcast i8* %3678 to i64*
  %3680 = load i64, i64* %3679, align 1
  %3681 = inttoptr i64 %3673 to double*
  %3682 = load double, double* %3681
  %3683 = fsub double %3677, %3682
  %3684 = bitcast i8* %3668 to double*
  store double %3683, double* %3684, align 1, !tbaa !2452
  %3685 = getelementptr inbounds i8, i8* %3668, i64 8
  %3686 = bitcast i8* %3685 to i64*
  store i64 %3680, i64* %3686, align 1, !tbaa !2452
  %3687 = load i64, i64* %RBP
  %3688 = sub i64 %3687, 136
  %3689 = bitcast %union.vec128_t* %XMM0 to i8*
  %3690 = load i64, i64* %PC
  %3691 = add i64 %3690, 8
  store i64 %3691, i64* %PC
  %3692 = bitcast i8* %3689 to double*
  %3693 = load double, double* %3692, align 1
  %3694 = inttoptr i64 %3688 to double*
  store double %3693, double* %3694
  %3695 = load i64, i64* %RBP
  %3696 = sub i64 %3695, 16
  %3697 = load i64, i64* %PC
  %3698 = add i64 %3697, 4
  store i64 %3698, i64* %PC
  %3699 = inttoptr i64 %3696 to i64*
  %3700 = load i64, i64* %3699
  store i64 %3700, i64* %RDX, align 8, !tbaa !2428
  %3701 = load i64, i64* %RBP
  %3702 = sub i64 %3701, 28
  %3703 = load i64, i64* %PC
  %3704 = add i64 %3703, 3
  store i64 %3704, i64* %PC
  %3705 = inttoptr i64 %3702 to i32*
  %3706 = load i32, i32* %3705
  %3707 = zext i32 %3706 to i64
  store i64 %3707, i64* %RCX, align 8, !tbaa !2428
  %3708 = load i64, i64* %RCX
  %3709 = load i64, i64* %PC
  %3710 = add i64 %3709, 3
  store i64 %3710, i64* %PC
  %3711 = trunc i64 %3708 to i32
  %3712 = add i32 1, %3711
  %3713 = zext i32 %3712 to i64
  store i64 %3713, i64* %RCX, align 8, !tbaa !2428
  %3714 = icmp ult i32 %3712, %3711
  %3715 = icmp ult i32 %3712, 1
  %3716 = or i1 %3714, %3715
  %3717 = zext i1 %3716 to i8
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3717, i8* %3718, align 1, !tbaa !2432
  %3719 = and i32 %3712, 255
  %3720 = call i32 @llvm.ctpop.i32(i32 %3719) #17
  %3721 = trunc i32 %3720 to i8
  %3722 = and i8 %3721, 1
  %3723 = xor i8 %3722, 1
  %3724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3723, i8* %3724, align 1, !tbaa !2446
  %3725 = xor i64 1, %3708
  %3726 = trunc i64 %3725 to i32
  %3727 = xor i32 %3726, %3712
  %3728 = lshr i32 %3727, 4
  %3729 = trunc i32 %3728 to i8
  %3730 = and i8 %3729, 1
  %3731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3730, i8* %3731, align 1, !tbaa !2447
  %3732 = icmp eq i32 %3712, 0
  %3733 = zext i1 %3732 to i8
  %3734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3733, i8* %3734, align 1, !tbaa !2448
  %3735 = lshr i32 %3712, 31
  %3736 = trunc i32 %3735 to i8
  %3737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3736, i8* %3737, align 1, !tbaa !2449
  %3738 = lshr i32 %3711, 31
  %3739 = xor i32 %3735, %3738
  %3740 = add nuw nsw i32 %3739, %3735
  %3741 = icmp eq i32 %3740, 2
  %3742 = zext i1 %3741 to i8
  %3743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3742, i8* %3743, align 1, !tbaa !2450
  %3744 = load i32, i32* %ECX
  %3745 = zext i32 %3744 to i64
  %3746 = load i64, i64* %PC
  %3747 = add i64 %3746, 3
  store i64 %3747, i64* %PC
  %3748 = shl i64 %3745, 32
  %3749 = ashr exact i64 %3748, 32
  store i64 %3749, i64* %RSI, align 8, !tbaa !2428
  %3750 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3751 = load i64, i64* %RDX
  %3752 = load i64, i64* %RSI
  %3753 = mul i64 %3752, 8
  %3754 = add i64 %3753, %3751
  %3755 = load i64, i64* %PC
  %3756 = add i64 %3755, 5
  store i64 %3756, i64* %PC
  %3757 = inttoptr i64 %3754 to double*
  %3758 = load double, double* %3757
  %3759 = bitcast i8* %3750 to double*
  store double %3758, double* %3759, align 1, !tbaa !2452
  %3760 = getelementptr inbounds i8, i8* %3750, i64 8
  %3761 = bitcast i8* %3760 to double*
  store double 0.000000e+00, double* %3761, align 1, !tbaa !2452
  %3762 = load i64, i64* %RBP
  %3763 = sub i64 %3762, 16
  %3764 = load i64, i64* %PC
  %3765 = add i64 %3764, 4
  store i64 %3765, i64* %PC
  %3766 = inttoptr i64 %3763 to i64*
  %3767 = load i64, i64* %3766
  store i64 %3767, i64* %RDX, align 8, !tbaa !2428
  %3768 = load i64, i64* %RBP
  %3769 = sub i64 %3768, 32
  %3770 = load i64, i64* %PC
  %3771 = add i64 %3770, 3
  store i64 %3771, i64* %PC
  %3772 = inttoptr i64 %3769 to i32*
  %3773 = load i32, i32* %3772
  %3774 = zext i32 %3773 to i64
  store i64 %3774, i64* %RCX, align 8, !tbaa !2428
  %3775 = load i64, i64* %RCX
  %3776 = load i64, i64* %PC
  %3777 = add i64 %3776, 3
  store i64 %3777, i64* %PC
  %3778 = trunc i64 %3775 to i32
  %3779 = add i32 1, %3778
  %3780 = zext i32 %3779 to i64
  store i64 %3780, i64* %RCX, align 8, !tbaa !2428
  %3781 = icmp ult i32 %3779, %3778
  %3782 = icmp ult i32 %3779, 1
  %3783 = or i1 %3781, %3782
  %3784 = zext i1 %3783 to i8
  %3785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3784, i8* %3785, align 1, !tbaa !2432
  %3786 = and i32 %3779, 255
  %3787 = call i32 @llvm.ctpop.i32(i32 %3786) #17
  %3788 = trunc i32 %3787 to i8
  %3789 = and i8 %3788, 1
  %3790 = xor i8 %3789, 1
  %3791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3790, i8* %3791, align 1, !tbaa !2446
  %3792 = xor i64 1, %3775
  %3793 = trunc i64 %3792 to i32
  %3794 = xor i32 %3793, %3779
  %3795 = lshr i32 %3794, 4
  %3796 = trunc i32 %3795 to i8
  %3797 = and i8 %3796, 1
  %3798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3797, i8* %3798, align 1, !tbaa !2447
  %3799 = icmp eq i32 %3779, 0
  %3800 = zext i1 %3799 to i8
  %3801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3800, i8* %3801, align 1, !tbaa !2448
  %3802 = lshr i32 %3779, 31
  %3803 = trunc i32 %3802 to i8
  %3804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3803, i8* %3804, align 1, !tbaa !2449
  %3805 = lshr i32 %3778, 31
  %3806 = xor i32 %3802, %3805
  %3807 = add nuw nsw i32 %3806, %3802
  %3808 = icmp eq i32 %3807, 2
  %3809 = zext i1 %3808 to i8
  %3810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3809, i8* %3810, align 1, !tbaa !2450
  %3811 = load i32, i32* %ECX
  %3812 = zext i32 %3811 to i64
  %3813 = load i64, i64* %PC
  %3814 = add i64 %3813, 3
  store i64 %3814, i64* %PC
  %3815 = shl i64 %3812, 32
  %3816 = ashr exact i64 %3815, 32
  store i64 %3816, i64* %RSI, align 8, !tbaa !2428
  %3817 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3818 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3819 = load i64, i64* %RDX
  %3820 = load i64, i64* %RSI
  %3821 = mul i64 %3820, 8
  %3822 = add i64 %3821, %3819
  %3823 = load i64, i64* %PC
  %3824 = add i64 %3823, 5
  store i64 %3824, i64* %PC
  %3825 = bitcast i8* %3818 to double*
  %3826 = load double, double* %3825, align 1
  %3827 = getelementptr inbounds i8, i8* %3818, i64 8
  %3828 = bitcast i8* %3827 to i64*
  %3829 = load i64, i64* %3828, align 1
  %3830 = inttoptr i64 %3822 to double*
  %3831 = load double, double* %3830
  %3832 = fsub double %3826, %3831
  %3833 = bitcast i8* %3817 to double*
  store double %3832, double* %3833, align 1, !tbaa !2452
  %3834 = getelementptr inbounds i8, i8* %3817, i64 8
  %3835 = bitcast i8* %3834 to i64*
  store i64 %3829, i64* %3835, align 1, !tbaa !2452
  %3836 = load i64, i64* %RBP
  %3837 = sub i64 %3836, 144
  %3838 = bitcast %union.vec128_t* %XMM0 to i8*
  %3839 = load i64, i64* %PC
  %3840 = add i64 %3839, 8
  store i64 %3840, i64* %PC
  %3841 = bitcast i8* %3838 to double*
  %3842 = load double, double* %3841, align 1
  %3843 = inttoptr i64 %3837 to double*
  store double %3842, double* %3843
  %3844 = load i64, i64* %RBP
  %3845 = sub i64 %3844, 16
  %3846 = load i64, i64* %PC
  %3847 = add i64 %3846, 4
  store i64 %3847, i64* %PC
  %3848 = inttoptr i64 %3845 to i64*
  %3849 = load i64, i64* %3848
  store i64 %3849, i64* %RDX, align 8, !tbaa !2428
  %3850 = load i64, i64* %RBP
  %3851 = sub i64 %3850, 36
  %3852 = load i64, i64* %PC
  %3853 = add i64 %3852, 4
  store i64 %3853, i64* %PC
  %3854 = inttoptr i64 %3851 to i32*
  %3855 = load i32, i32* %3854
  %3856 = sext i32 %3855 to i64
  store i64 %3856, i64* %RSI, align 8, !tbaa !2428
  %3857 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3858 = load i64, i64* %RDX
  %3859 = load i64, i64* %RSI
  %3860 = mul i64 %3859, 8
  %3861 = add i64 %3860, %3858
  %3862 = load i64, i64* %PC
  %3863 = add i64 %3862, 5
  store i64 %3863, i64* %PC
  %3864 = inttoptr i64 %3861 to double*
  %3865 = load double, double* %3864
  %3866 = bitcast i8* %3857 to double*
  store double %3865, double* %3866, align 1, !tbaa !2452
  %3867 = getelementptr inbounds i8, i8* %3857, i64 8
  %3868 = bitcast i8* %3867 to double*
  store double 0.000000e+00, double* %3868, align 1, !tbaa !2452
  %3869 = load i64, i64* %RBP
  %3870 = sub i64 %3869, 16
  %3871 = load i64, i64* %PC
  %3872 = add i64 %3871, 4
  store i64 %3872, i64* %PC
  %3873 = inttoptr i64 %3870 to i64*
  %3874 = load i64, i64* %3873
  store i64 %3874, i64* %RDX, align 8, !tbaa !2428
  %3875 = load i64, i64* %RBP
  %3876 = sub i64 %3875, 40
  %3877 = load i64, i64* %PC
  %3878 = add i64 %3877, 4
  store i64 %3878, i64* %PC
  %3879 = inttoptr i64 %3876 to i32*
  %3880 = load i32, i32* %3879
  %3881 = sext i32 %3880 to i64
  store i64 %3881, i64* %RSI, align 8, !tbaa !2428
  %3882 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3883 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3884 = load i64, i64* %RDX
  %3885 = load i64, i64* %RSI
  %3886 = mul i64 %3885, 8
  %3887 = add i64 %3886, %3884
  %3888 = load i64, i64* %PC
  %3889 = add i64 %3888, 5
  store i64 %3889, i64* %PC
  %3890 = bitcast i8* %3883 to double*
  %3891 = load double, double* %3890, align 1
  %3892 = getelementptr inbounds i8, i8* %3883, i64 8
  %3893 = bitcast i8* %3892 to i64*
  %3894 = load i64, i64* %3893, align 1
  %3895 = inttoptr i64 %3887 to double*
  %3896 = load double, double* %3895
  %3897 = fadd double %3891, %3896
  %3898 = bitcast i8* %3882 to double*
  store double %3897, double* %3898, align 1, !tbaa !2452
  %3899 = getelementptr inbounds i8, i8* %3882, i64 8
  %3900 = bitcast i8* %3899 to i64*
  store i64 %3894, i64* %3900, align 1, !tbaa !2452
  %3901 = load i64, i64* %RBP
  %3902 = sub i64 %3901, 152
  %3903 = bitcast %union.vec128_t* %XMM0 to i8*
  %3904 = load i64, i64* %PC
  %3905 = add i64 %3904, 8
  store i64 %3905, i64* %PC
  %3906 = bitcast i8* %3903 to double*
  %3907 = load double, double* %3906, align 1
  %3908 = inttoptr i64 %3902 to double*
  store double %3907, double* %3908
  %3909 = load i64, i64* %RBP
  %3910 = sub i64 %3909, 16
  %3911 = load i64, i64* %PC
  %3912 = add i64 %3911, 4
  store i64 %3912, i64* %PC
  %3913 = inttoptr i64 %3910 to i64*
  %3914 = load i64, i64* %3913
  store i64 %3914, i64* %RDX, align 8, !tbaa !2428
  %3915 = load i64, i64* %RBP
  %3916 = sub i64 %3915, 36
  %3917 = load i64, i64* %PC
  %3918 = add i64 %3917, 3
  store i64 %3918, i64* %PC
  %3919 = inttoptr i64 %3916 to i32*
  %3920 = load i32, i32* %3919
  %3921 = zext i32 %3920 to i64
  store i64 %3921, i64* %RCX, align 8, !tbaa !2428
  %3922 = load i64, i64* %RCX
  %3923 = load i64, i64* %PC
  %3924 = add i64 %3923, 3
  store i64 %3924, i64* %PC
  %3925 = trunc i64 %3922 to i32
  %3926 = add i32 1, %3925
  %3927 = zext i32 %3926 to i64
  store i64 %3927, i64* %RCX, align 8, !tbaa !2428
  %3928 = icmp ult i32 %3926, %3925
  %3929 = icmp ult i32 %3926, 1
  %3930 = or i1 %3928, %3929
  %3931 = zext i1 %3930 to i8
  %3932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3931, i8* %3932, align 1, !tbaa !2432
  %3933 = and i32 %3926, 255
  %3934 = call i32 @llvm.ctpop.i32(i32 %3933) #17
  %3935 = trunc i32 %3934 to i8
  %3936 = and i8 %3935, 1
  %3937 = xor i8 %3936, 1
  %3938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3937, i8* %3938, align 1, !tbaa !2446
  %3939 = xor i64 1, %3922
  %3940 = trunc i64 %3939 to i32
  %3941 = xor i32 %3940, %3926
  %3942 = lshr i32 %3941, 4
  %3943 = trunc i32 %3942 to i8
  %3944 = and i8 %3943, 1
  %3945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3944, i8* %3945, align 1, !tbaa !2447
  %3946 = icmp eq i32 %3926, 0
  %3947 = zext i1 %3946 to i8
  %3948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3947, i8* %3948, align 1, !tbaa !2448
  %3949 = lshr i32 %3926, 31
  %3950 = trunc i32 %3949 to i8
  %3951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3950, i8* %3951, align 1, !tbaa !2449
  %3952 = lshr i32 %3925, 31
  %3953 = xor i32 %3949, %3952
  %3954 = add nuw nsw i32 %3953, %3949
  %3955 = icmp eq i32 %3954, 2
  %3956 = zext i1 %3955 to i8
  %3957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3956, i8* %3957, align 1, !tbaa !2450
  %3958 = load i32, i32* %ECX
  %3959 = zext i32 %3958 to i64
  %3960 = load i64, i64* %PC
  %3961 = add i64 %3960, 3
  store i64 %3961, i64* %PC
  %3962 = shl i64 %3959, 32
  %3963 = ashr exact i64 %3962, 32
  store i64 %3963, i64* %RSI, align 8, !tbaa !2428
  %3964 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3965 = load i64, i64* %RDX
  %3966 = load i64, i64* %RSI
  %3967 = mul i64 %3966, 8
  %3968 = add i64 %3967, %3965
  %3969 = load i64, i64* %PC
  %3970 = add i64 %3969, 5
  store i64 %3970, i64* %PC
  %3971 = inttoptr i64 %3968 to double*
  %3972 = load double, double* %3971
  %3973 = bitcast i8* %3964 to double*
  store double %3972, double* %3973, align 1, !tbaa !2452
  %3974 = getelementptr inbounds i8, i8* %3964, i64 8
  %3975 = bitcast i8* %3974 to double*
  store double 0.000000e+00, double* %3975, align 1, !tbaa !2452
  %3976 = load i64, i64* %RBP
  %3977 = sub i64 %3976, 16
  %3978 = load i64, i64* %PC
  %3979 = add i64 %3978, 4
  store i64 %3979, i64* %PC
  %3980 = inttoptr i64 %3977 to i64*
  %3981 = load i64, i64* %3980
  store i64 %3981, i64* %RDX, align 8, !tbaa !2428
  %3982 = load i64, i64* %RBP
  %3983 = sub i64 %3982, 40
  %3984 = load i64, i64* %PC
  %3985 = add i64 %3984, 3
  store i64 %3985, i64* %PC
  %3986 = inttoptr i64 %3983 to i32*
  %3987 = load i32, i32* %3986
  %3988 = zext i32 %3987 to i64
  store i64 %3988, i64* %RCX, align 8, !tbaa !2428
  %3989 = load i64, i64* %RCX
  %3990 = load i64, i64* %PC
  %3991 = add i64 %3990, 3
  store i64 %3991, i64* %PC
  %3992 = trunc i64 %3989 to i32
  %3993 = add i32 1, %3992
  %3994 = zext i32 %3993 to i64
  store i64 %3994, i64* %RCX, align 8, !tbaa !2428
  %3995 = icmp ult i32 %3993, %3992
  %3996 = icmp ult i32 %3993, 1
  %3997 = or i1 %3995, %3996
  %3998 = zext i1 %3997 to i8
  %3999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3998, i8* %3999, align 1, !tbaa !2432
  %4000 = and i32 %3993, 255
  %4001 = call i32 @llvm.ctpop.i32(i32 %4000) #17
  %4002 = trunc i32 %4001 to i8
  %4003 = and i8 %4002, 1
  %4004 = xor i8 %4003, 1
  %4005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4004, i8* %4005, align 1, !tbaa !2446
  %4006 = xor i64 1, %3989
  %4007 = trunc i64 %4006 to i32
  %4008 = xor i32 %4007, %3993
  %4009 = lshr i32 %4008, 4
  %4010 = trunc i32 %4009 to i8
  %4011 = and i8 %4010, 1
  %4012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4011, i8* %4012, align 1, !tbaa !2447
  %4013 = icmp eq i32 %3993, 0
  %4014 = zext i1 %4013 to i8
  %4015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4014, i8* %4015, align 1, !tbaa !2448
  %4016 = lshr i32 %3993, 31
  %4017 = trunc i32 %4016 to i8
  %4018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4017, i8* %4018, align 1, !tbaa !2449
  %4019 = lshr i32 %3992, 31
  %4020 = xor i32 %4016, %4019
  %4021 = add nuw nsw i32 %4020, %4016
  %4022 = icmp eq i32 %4021, 2
  %4023 = zext i1 %4022 to i8
  %4024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4023, i8* %4024, align 1, !tbaa !2450
  %4025 = load i32, i32* %ECX
  %4026 = zext i32 %4025 to i64
  %4027 = load i64, i64* %PC
  %4028 = add i64 %4027, 3
  store i64 %4028, i64* %PC
  %4029 = shl i64 %4026, 32
  %4030 = ashr exact i64 %4029, 32
  store i64 %4030, i64* %RSI, align 8, !tbaa !2428
  %4031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4032 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4033 = load i64, i64* %RDX
  %4034 = load i64, i64* %RSI
  %4035 = mul i64 %4034, 8
  %4036 = add i64 %4035, %4033
  %4037 = load i64, i64* %PC
  %4038 = add i64 %4037, 5
  store i64 %4038, i64* %PC
  %4039 = bitcast i8* %4032 to double*
  %4040 = load double, double* %4039, align 1
  %4041 = getelementptr inbounds i8, i8* %4032, i64 8
  %4042 = bitcast i8* %4041 to i64*
  %4043 = load i64, i64* %4042, align 1
  %4044 = inttoptr i64 %4036 to double*
  %4045 = load double, double* %4044
  %4046 = fadd double %4040, %4045
  %4047 = bitcast i8* %4031 to double*
  store double %4046, double* %4047, align 1, !tbaa !2452
  %4048 = getelementptr inbounds i8, i8* %4031, i64 8
  %4049 = bitcast i8* %4048 to i64*
  store i64 %4043, i64* %4049, align 1, !tbaa !2452
  %4050 = load i64, i64* %RBP
  %4051 = sub i64 %4050, 160
  %4052 = bitcast %union.vec128_t* %XMM0 to i8*
  %4053 = load i64, i64* %PC
  %4054 = add i64 %4053, 8
  store i64 %4054, i64* %PC
  %4055 = bitcast i8* %4052 to double*
  %4056 = load double, double* %4055, align 1
  %4057 = inttoptr i64 %4051 to double*
  store double %4056, double* %4057
  %4058 = load i64, i64* %RBP
  %4059 = sub i64 %4058, 16
  %4060 = load i64, i64* %PC
  %4061 = add i64 %4060, 4
  store i64 %4061, i64* %PC
  %4062 = inttoptr i64 %4059 to i64*
  %4063 = load i64, i64* %4062
  store i64 %4063, i64* %RDX, align 8, !tbaa !2428
  %4064 = load i64, i64* %RBP
  %4065 = sub i64 %4064, 36
  %4066 = load i64, i64* %PC
  %4067 = add i64 %4066, 4
  store i64 %4067, i64* %PC
  %4068 = inttoptr i64 %4065 to i32*
  %4069 = load i32, i32* %4068
  %4070 = sext i32 %4069 to i64
  store i64 %4070, i64* %RSI, align 8, !tbaa !2428
  %4071 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4072 = load i64, i64* %RDX
  %4073 = load i64, i64* %RSI
  %4074 = mul i64 %4073, 8
  %4075 = add i64 %4074, %4072
  %4076 = load i64, i64* %PC
  %4077 = add i64 %4076, 5
  store i64 %4077, i64* %PC
  %4078 = inttoptr i64 %4075 to double*
  %4079 = load double, double* %4078
  %4080 = bitcast i8* %4071 to double*
  store double %4079, double* %4080, align 1, !tbaa !2452
  %4081 = getelementptr inbounds i8, i8* %4071, i64 8
  %4082 = bitcast i8* %4081 to double*
  store double 0.000000e+00, double* %4082, align 1, !tbaa !2452
  %4083 = load i64, i64* %RBP
  %4084 = sub i64 %4083, 16
  %4085 = load i64, i64* %PC
  %4086 = add i64 %4085, 4
  store i64 %4086, i64* %PC
  %4087 = inttoptr i64 %4084 to i64*
  %4088 = load i64, i64* %4087
  store i64 %4088, i64* %RDX, align 8, !tbaa !2428
  %4089 = load i64, i64* %RBP
  %4090 = sub i64 %4089, 40
  %4091 = load i64, i64* %PC
  %4092 = add i64 %4091, 4
  store i64 %4092, i64* %PC
  %4093 = inttoptr i64 %4090 to i32*
  %4094 = load i32, i32* %4093
  %4095 = sext i32 %4094 to i64
  store i64 %4095, i64* %RSI, align 8, !tbaa !2428
  %4096 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4097 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4098 = load i64, i64* %RDX
  %4099 = load i64, i64* %RSI
  %4100 = mul i64 %4099, 8
  %4101 = add i64 %4100, %4098
  %4102 = load i64, i64* %PC
  %4103 = add i64 %4102, 5
  store i64 %4103, i64* %PC
  %4104 = bitcast i8* %4097 to double*
  %4105 = load double, double* %4104, align 1
  %4106 = getelementptr inbounds i8, i8* %4097, i64 8
  %4107 = bitcast i8* %4106 to i64*
  %4108 = load i64, i64* %4107, align 1
  %4109 = inttoptr i64 %4101 to double*
  %4110 = load double, double* %4109
  %4111 = fsub double %4105, %4110
  %4112 = bitcast i8* %4096 to double*
  store double %4111, double* %4112, align 1, !tbaa !2452
  %4113 = getelementptr inbounds i8, i8* %4096, i64 8
  %4114 = bitcast i8* %4113 to i64*
  store i64 %4108, i64* %4114, align 1, !tbaa !2452
  %4115 = load i64, i64* %RBP
  %4116 = sub i64 %4115, 168
  %4117 = bitcast %union.vec128_t* %XMM0 to i8*
  %4118 = load i64, i64* %PC
  %4119 = add i64 %4118, 8
  store i64 %4119, i64* %PC
  %4120 = bitcast i8* %4117 to double*
  %4121 = load double, double* %4120, align 1
  %4122 = inttoptr i64 %4116 to double*
  store double %4121, double* %4122
  %4123 = load i64, i64* %RBP
  %4124 = sub i64 %4123, 16
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 4
  store i64 %4126, i64* %PC
  %4127 = inttoptr i64 %4124 to i64*
  %4128 = load i64, i64* %4127
  store i64 %4128, i64* %RDX, align 8, !tbaa !2428
  %4129 = load i64, i64* %RBP
  %4130 = sub i64 %4129, 36
  %4131 = load i64, i64* %PC
  %4132 = add i64 %4131, 3
  store i64 %4132, i64* %PC
  %4133 = inttoptr i64 %4130 to i32*
  %4134 = load i32, i32* %4133
  %4135 = zext i32 %4134 to i64
  store i64 %4135, i64* %RCX, align 8, !tbaa !2428
  %4136 = load i64, i64* %RCX
  %4137 = load i64, i64* %PC
  %4138 = add i64 %4137, 3
  store i64 %4138, i64* %PC
  %4139 = trunc i64 %4136 to i32
  %4140 = add i32 1, %4139
  %4141 = zext i32 %4140 to i64
  store i64 %4141, i64* %RCX, align 8, !tbaa !2428
  %4142 = icmp ult i32 %4140, %4139
  %4143 = icmp ult i32 %4140, 1
  %4144 = or i1 %4142, %4143
  %4145 = zext i1 %4144 to i8
  %4146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4145, i8* %4146, align 1, !tbaa !2432
  %4147 = and i32 %4140, 255
  %4148 = call i32 @llvm.ctpop.i32(i32 %4147) #17
  %4149 = trunc i32 %4148 to i8
  %4150 = and i8 %4149, 1
  %4151 = xor i8 %4150, 1
  %4152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4151, i8* %4152, align 1, !tbaa !2446
  %4153 = xor i64 1, %4136
  %4154 = trunc i64 %4153 to i32
  %4155 = xor i32 %4154, %4140
  %4156 = lshr i32 %4155, 4
  %4157 = trunc i32 %4156 to i8
  %4158 = and i8 %4157, 1
  %4159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4158, i8* %4159, align 1, !tbaa !2447
  %4160 = icmp eq i32 %4140, 0
  %4161 = zext i1 %4160 to i8
  %4162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4161, i8* %4162, align 1, !tbaa !2448
  %4163 = lshr i32 %4140, 31
  %4164 = trunc i32 %4163 to i8
  %4165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4164, i8* %4165, align 1, !tbaa !2449
  %4166 = lshr i32 %4139, 31
  %4167 = xor i32 %4163, %4166
  %4168 = add nuw nsw i32 %4167, %4163
  %4169 = icmp eq i32 %4168, 2
  %4170 = zext i1 %4169 to i8
  %4171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4170, i8* %4171, align 1, !tbaa !2450
  %4172 = load i32, i32* %ECX
  %4173 = zext i32 %4172 to i64
  %4174 = load i64, i64* %PC
  %4175 = add i64 %4174, 3
  store i64 %4175, i64* %PC
  %4176 = shl i64 %4173, 32
  %4177 = ashr exact i64 %4176, 32
  store i64 %4177, i64* %RSI, align 8, !tbaa !2428
  %4178 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4179 = load i64, i64* %RDX
  %4180 = load i64, i64* %RSI
  %4181 = mul i64 %4180, 8
  %4182 = add i64 %4181, %4179
  %4183 = load i64, i64* %PC
  %4184 = add i64 %4183, 5
  store i64 %4184, i64* %PC
  %4185 = inttoptr i64 %4182 to double*
  %4186 = load double, double* %4185
  %4187 = bitcast i8* %4178 to double*
  store double %4186, double* %4187, align 1, !tbaa !2452
  %4188 = getelementptr inbounds i8, i8* %4178, i64 8
  %4189 = bitcast i8* %4188 to double*
  store double 0.000000e+00, double* %4189, align 1, !tbaa !2452
  %4190 = load i64, i64* %RBP
  %4191 = sub i64 %4190, 16
  %4192 = load i64, i64* %PC
  %4193 = add i64 %4192, 4
  store i64 %4193, i64* %PC
  %4194 = inttoptr i64 %4191 to i64*
  %4195 = load i64, i64* %4194
  store i64 %4195, i64* %RDX, align 8, !tbaa !2428
  %4196 = load i64, i64* %RBP
  %4197 = sub i64 %4196, 40
  %4198 = load i64, i64* %PC
  %4199 = add i64 %4198, 3
  store i64 %4199, i64* %PC
  %4200 = inttoptr i64 %4197 to i32*
  %4201 = load i32, i32* %4200
  %4202 = zext i32 %4201 to i64
  store i64 %4202, i64* %RCX, align 8, !tbaa !2428
  %4203 = load i64, i64* %RCX
  %4204 = load i64, i64* %PC
  %4205 = add i64 %4204, 3
  store i64 %4205, i64* %PC
  %4206 = trunc i64 %4203 to i32
  %4207 = add i32 1, %4206
  %4208 = zext i32 %4207 to i64
  store i64 %4208, i64* %RCX, align 8, !tbaa !2428
  %4209 = icmp ult i32 %4207, %4206
  %4210 = icmp ult i32 %4207, 1
  %4211 = or i1 %4209, %4210
  %4212 = zext i1 %4211 to i8
  %4213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4212, i8* %4213, align 1, !tbaa !2432
  %4214 = and i32 %4207, 255
  %4215 = call i32 @llvm.ctpop.i32(i32 %4214) #17
  %4216 = trunc i32 %4215 to i8
  %4217 = and i8 %4216, 1
  %4218 = xor i8 %4217, 1
  %4219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4218, i8* %4219, align 1, !tbaa !2446
  %4220 = xor i64 1, %4203
  %4221 = trunc i64 %4220 to i32
  %4222 = xor i32 %4221, %4207
  %4223 = lshr i32 %4222, 4
  %4224 = trunc i32 %4223 to i8
  %4225 = and i8 %4224, 1
  %4226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4225, i8* %4226, align 1, !tbaa !2447
  %4227 = icmp eq i32 %4207, 0
  %4228 = zext i1 %4227 to i8
  %4229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4228, i8* %4229, align 1, !tbaa !2448
  %4230 = lshr i32 %4207, 31
  %4231 = trunc i32 %4230 to i8
  %4232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4231, i8* %4232, align 1, !tbaa !2449
  %4233 = lshr i32 %4206, 31
  %4234 = xor i32 %4230, %4233
  %4235 = add nuw nsw i32 %4234, %4230
  %4236 = icmp eq i32 %4235, 2
  %4237 = zext i1 %4236 to i8
  %4238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4237, i8* %4238, align 1, !tbaa !2450
  %4239 = load i32, i32* %ECX
  %4240 = zext i32 %4239 to i64
  %4241 = load i64, i64* %PC
  %4242 = add i64 %4241, 3
  store i64 %4242, i64* %PC
  %4243 = shl i64 %4240, 32
  %4244 = ashr exact i64 %4243, 32
  store i64 %4244, i64* %RSI, align 8, !tbaa !2428
  %4245 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4246 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4247 = load i64, i64* %RDX
  %4248 = load i64, i64* %RSI
  %4249 = mul i64 %4248, 8
  %4250 = add i64 %4249, %4247
  %4251 = load i64, i64* %PC
  %4252 = add i64 %4251, 5
  store i64 %4252, i64* %PC
  %4253 = bitcast i8* %4246 to double*
  %4254 = load double, double* %4253, align 1
  %4255 = getelementptr inbounds i8, i8* %4246, i64 8
  %4256 = bitcast i8* %4255 to i64*
  %4257 = load i64, i64* %4256, align 1
  %4258 = inttoptr i64 %4250 to double*
  %4259 = load double, double* %4258
  %4260 = fsub double %4254, %4259
  %4261 = bitcast i8* %4245 to double*
  store double %4260, double* %4261, align 1, !tbaa !2452
  %4262 = getelementptr inbounds i8, i8* %4245, i64 8
  %4263 = bitcast i8* %4262 to i64*
  store i64 %4257, i64* %4263, align 1, !tbaa !2452
  %4264 = load i64, i64* %RBP
  %4265 = sub i64 %4264, 176
  %4266 = bitcast %union.vec128_t* %XMM0 to i8*
  %4267 = load i64, i64* %PC
  %4268 = add i64 %4267, 8
  store i64 %4268, i64* %PC
  %4269 = bitcast i8* %4266 to double*
  %4270 = load double, double* %4269, align 1
  %4271 = inttoptr i64 %4265 to double*
  store double %4270, double* %4271
  %4272 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4273 = load i64, i64* %RBP
  %4274 = sub i64 %4273, 120
  %4275 = load i64, i64* %PC
  %4276 = add i64 %4275, 5
  store i64 %4276, i64* %PC
  %4277 = inttoptr i64 %4274 to double*
  %4278 = load double, double* %4277
  %4279 = bitcast i8* %4272 to double*
  store double %4278, double* %4279, align 1, !tbaa !2452
  %4280 = getelementptr inbounds i8, i8* %4272, i64 8
  %4281 = bitcast i8* %4280 to double*
  store double 0.000000e+00, double* %4281, align 1, !tbaa !2452
  %4282 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4283 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4284 = load i64, i64* %RBP
  %4285 = sub i64 %4284, 152
  %4286 = load i64, i64* %PC
  %4287 = add i64 %4286, 8
  store i64 %4287, i64* %PC
  %4288 = bitcast i8* %4283 to double*
  %4289 = load double, double* %4288, align 1
  %4290 = getelementptr inbounds i8, i8* %4283, i64 8
  %4291 = bitcast i8* %4290 to i64*
  %4292 = load i64, i64* %4291, align 1
  %4293 = inttoptr i64 %4285 to double*
  %4294 = load double, double* %4293
  %4295 = fadd double %4289, %4294
  %4296 = bitcast i8* %4282 to double*
  store double %4295, double* %4296, align 1, !tbaa !2452
  %4297 = getelementptr inbounds i8, i8* %4282, i64 8
  %4298 = bitcast i8* %4297 to i64*
  store i64 %4292, i64* %4298, align 1, !tbaa !2452
  %4299 = load i64, i64* %RBP
  %4300 = sub i64 %4299, 16
  %4301 = load i64, i64* %PC
  %4302 = add i64 %4301, 4
  store i64 %4302, i64* %PC
  %4303 = inttoptr i64 %4300 to i64*
  %4304 = load i64, i64* %4303
  store i64 %4304, i64* %RDX, align 8, !tbaa !2428
  %4305 = load i64, i64* %RBP
  %4306 = sub i64 %4305, 28
  %4307 = load i64, i64* %PC
  %4308 = add i64 %4307, 4
  store i64 %4308, i64* %PC
  %4309 = inttoptr i64 %4306 to i32*
  %4310 = load i32, i32* %4309
  %4311 = sext i32 %4310 to i64
  store i64 %4311, i64* %RSI, align 8, !tbaa !2428
  %4312 = load i64, i64* %RDX
  %4313 = load i64, i64* %RSI
  %4314 = mul i64 %4313, 8
  %4315 = add i64 %4314, %4312
  %4316 = bitcast %union.vec128_t* %XMM0 to i8*
  %4317 = load i64, i64* %PC
  %4318 = add i64 %4317, 5
  store i64 %4318, i64* %PC
  %4319 = bitcast i8* %4316 to double*
  %4320 = load double, double* %4319, align 1
  %4321 = inttoptr i64 %4315 to double*
  store double %4320, double* %4321
  %4322 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4323 = load i64, i64* %RBP
  %4324 = sub i64 %4323, 128
  %4325 = load i64, i64* %PC
  %4326 = add i64 %4325, 5
  store i64 %4326, i64* %PC
  %4327 = inttoptr i64 %4324 to double*
  %4328 = load double, double* %4327
  %4329 = bitcast i8* %4322 to double*
  store double %4328, double* %4329, align 1, !tbaa !2452
  %4330 = getelementptr inbounds i8, i8* %4322, i64 8
  %4331 = bitcast i8* %4330 to double*
  store double 0.000000e+00, double* %4331, align 1, !tbaa !2452
  %4332 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4333 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4334 = load i64, i64* %RBP
  %4335 = sub i64 %4334, 160
  %4336 = load i64, i64* %PC
  %4337 = add i64 %4336, 8
  store i64 %4337, i64* %PC
  %4338 = bitcast i8* %4333 to double*
  %4339 = load double, double* %4338, align 1
  %4340 = getelementptr inbounds i8, i8* %4333, i64 8
  %4341 = bitcast i8* %4340 to i64*
  %4342 = load i64, i64* %4341, align 1
  %4343 = inttoptr i64 %4335 to double*
  %4344 = load double, double* %4343
  %4345 = fadd double %4339, %4344
  %4346 = bitcast i8* %4332 to double*
  store double %4345, double* %4346, align 1, !tbaa !2452
  %4347 = getelementptr inbounds i8, i8* %4332, i64 8
  %4348 = bitcast i8* %4347 to i64*
  store i64 %4342, i64* %4348, align 1, !tbaa !2452
  %4349 = load i64, i64* %RBP
  %4350 = sub i64 %4349, 16
  %4351 = load i64, i64* %PC
  %4352 = add i64 %4351, 4
  store i64 %4352, i64* %PC
  %4353 = inttoptr i64 %4350 to i64*
  %4354 = load i64, i64* %4353
  store i64 %4354, i64* %RDX, align 8, !tbaa !2428
  %4355 = load i64, i64* %RBP
  %4356 = sub i64 %4355, 28
  %4357 = load i64, i64* %PC
  %4358 = add i64 %4357, 3
  store i64 %4358, i64* %PC
  %4359 = inttoptr i64 %4356 to i32*
  %4360 = load i32, i32* %4359
  %4361 = zext i32 %4360 to i64
  store i64 %4361, i64* %RCX, align 8, !tbaa !2428
  %4362 = load i64, i64* %RCX
  %4363 = load i64, i64* %PC
  %4364 = add i64 %4363, 3
  store i64 %4364, i64* %PC
  %4365 = trunc i64 %4362 to i32
  %4366 = add i32 1, %4365
  %4367 = zext i32 %4366 to i64
  store i64 %4367, i64* %RCX, align 8, !tbaa !2428
  %4368 = icmp ult i32 %4366, %4365
  %4369 = icmp ult i32 %4366, 1
  %4370 = or i1 %4368, %4369
  %4371 = zext i1 %4370 to i8
  %4372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4371, i8* %4372, align 1, !tbaa !2432
  %4373 = and i32 %4366, 255
  %4374 = call i32 @llvm.ctpop.i32(i32 %4373) #17
  %4375 = trunc i32 %4374 to i8
  %4376 = and i8 %4375, 1
  %4377 = xor i8 %4376, 1
  %4378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4377, i8* %4378, align 1, !tbaa !2446
  %4379 = xor i64 1, %4362
  %4380 = trunc i64 %4379 to i32
  %4381 = xor i32 %4380, %4366
  %4382 = lshr i32 %4381, 4
  %4383 = trunc i32 %4382 to i8
  %4384 = and i8 %4383, 1
  %4385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4384, i8* %4385, align 1, !tbaa !2447
  %4386 = icmp eq i32 %4366, 0
  %4387 = zext i1 %4386 to i8
  %4388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4387, i8* %4388, align 1, !tbaa !2448
  %4389 = lshr i32 %4366, 31
  %4390 = trunc i32 %4389 to i8
  %4391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4390, i8* %4391, align 1, !tbaa !2449
  %4392 = lshr i32 %4365, 31
  %4393 = xor i32 %4389, %4392
  %4394 = add nuw nsw i32 %4393, %4389
  %4395 = icmp eq i32 %4394, 2
  %4396 = zext i1 %4395 to i8
  %4397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4396, i8* %4397, align 1, !tbaa !2450
  %4398 = load i32, i32* %ECX
  %4399 = zext i32 %4398 to i64
  %4400 = load i64, i64* %PC
  %4401 = add i64 %4400, 3
  store i64 %4401, i64* %PC
  %4402 = shl i64 %4399, 32
  %4403 = ashr exact i64 %4402, 32
  store i64 %4403, i64* %RSI, align 8, !tbaa !2428
  %4404 = load i64, i64* %RDX
  %4405 = load i64, i64* %RSI
  %4406 = mul i64 %4405, 8
  %4407 = add i64 %4406, %4404
  %4408 = bitcast %union.vec128_t* %XMM0 to i8*
  %4409 = load i64, i64* %PC
  %4410 = add i64 %4409, 5
  store i64 %4410, i64* %PC
  %4411 = bitcast i8* %4408 to double*
  %4412 = load double, double* %4411, align 1
  %4413 = inttoptr i64 %4407 to double*
  store double %4412, double* %4413
  %4414 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4415 = load i64, i64* %RBP
  %4416 = sub i64 %4415, 152
  %4417 = load i64, i64* %PC
  %4418 = add i64 %4417, 8
  store i64 %4418, i64* %PC
  %4419 = inttoptr i64 %4416 to double*
  %4420 = load double, double* %4419
  %4421 = bitcast i8* %4414 to double*
  store double %4420, double* %4421, align 1, !tbaa !2452
  %4422 = getelementptr inbounds i8, i8* %4414, i64 8
  %4423 = bitcast i8* %4422 to double*
  store double 0.000000e+00, double* %4423, align 1, !tbaa !2452
  %4424 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4425 = load i64, i64* %RBP
  %4426 = sub i64 %4425, 120
  %4427 = load i64, i64* %PC
  %4428 = add i64 %4427, 5
  store i64 %4428, i64* %PC
  %4429 = inttoptr i64 %4426 to double*
  %4430 = load double, double* %4429
  %4431 = bitcast i8* %4424 to double*
  store double %4430, double* %4431, align 1, !tbaa !2452
  %4432 = getelementptr inbounds i8, i8* %4424, i64 8
  %4433 = bitcast i8* %4432 to double*
  store double 0.000000e+00, double* %4433, align 1, !tbaa !2452
  %4434 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4435 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4436 = bitcast %union.vec128_t* %XMM0 to i8*
  %4437 = load i64, i64* %PC
  %4438 = add i64 %4437, 4
  store i64 %4438, i64* %PC
  %4439 = bitcast i8* %4435 to double*
  %4440 = load double, double* %4439, align 1
  %4441 = getelementptr inbounds i8, i8* %4435, i64 8
  %4442 = bitcast i8* %4441 to i64*
  %4443 = load i64, i64* %4442, align 1
  %4444 = bitcast i8* %4436 to double*
  %4445 = load double, double* %4444, align 1
  %4446 = fsub double %4440, %4445
  %4447 = bitcast i8* %4434 to double*
  store double %4446, double* %4447, align 1, !tbaa !2452
  %4448 = getelementptr inbounds i8, i8* %4434, i64 8
  %4449 = bitcast i8* %4448 to i64*
  store i64 %4443, i64* %4449, align 1, !tbaa !2452
  %4450 = load i64, i64* %RBP
  %4451 = sub i64 %4450, 120
  %4452 = bitcast %union.vec128_t* %XMM1 to i8*
  %4453 = load i64, i64* %PC
  %4454 = add i64 %4453, 5
  store i64 %4454, i64* %PC
  %4455 = bitcast i8* %4452 to double*
  %4456 = load double, double* %4455, align 1
  %4457 = inttoptr i64 %4451 to double*
  store double %4456, double* %4457
  %4458 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4459 = load i64, i64* %RBP
  %4460 = sub i64 %4459, 160
  %4461 = load i64, i64* %PC
  %4462 = add i64 %4461, 8
  store i64 %4462, i64* %PC
  %4463 = inttoptr i64 %4460 to double*
  %4464 = load double, double* %4463
  %4465 = bitcast i8* %4458 to double*
  store double %4464, double* %4465, align 1, !tbaa !2452
  %4466 = getelementptr inbounds i8, i8* %4458, i64 8
  %4467 = bitcast i8* %4466 to double*
  store double 0.000000e+00, double* %4467, align 1, !tbaa !2452
  %4468 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4469 = load i64, i64* %RBP
  %4470 = sub i64 %4469, 128
  %4471 = load i64, i64* %PC
  %4472 = add i64 %4471, 5
  store i64 %4472, i64* %PC
  %4473 = inttoptr i64 %4470 to double*
  %4474 = load double, double* %4473
  %4475 = bitcast i8* %4468 to double*
  store double %4474, double* %4475, align 1, !tbaa !2452
  %4476 = getelementptr inbounds i8, i8* %4468, i64 8
  %4477 = bitcast i8* %4476 to double*
  store double 0.000000e+00, double* %4477, align 1, !tbaa !2452
  %4478 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4479 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4480 = bitcast %union.vec128_t* %XMM0 to i8*
  %4481 = load i64, i64* %PC
  %4482 = add i64 %4481, 4
  store i64 %4482, i64* %PC
  %4483 = bitcast i8* %4479 to double*
  %4484 = load double, double* %4483, align 1
  %4485 = getelementptr inbounds i8, i8* %4479, i64 8
  %4486 = bitcast i8* %4485 to i64*
  %4487 = load i64, i64* %4486, align 1
  %4488 = bitcast i8* %4480 to double*
  %4489 = load double, double* %4488, align 1
  %4490 = fsub double %4484, %4489
  %4491 = bitcast i8* %4478 to double*
  store double %4490, double* %4491, align 1, !tbaa !2452
  %4492 = getelementptr inbounds i8, i8* %4478, i64 8
  %4493 = bitcast i8* %4492 to i64*
  store i64 %4487, i64* %4493, align 1, !tbaa !2452
  %4494 = load i64, i64* %RBP
  %4495 = sub i64 %4494, 128
  %4496 = bitcast %union.vec128_t* %XMM1 to i8*
  %4497 = load i64, i64* %PC
  %4498 = add i64 %4497, 5
  store i64 %4498, i64* %PC
  %4499 = bitcast i8* %4496 to double*
  %4500 = load double, double* %4499, align 1
  %4501 = inttoptr i64 %4495 to double*
  store double %4500, double* %4501
  %4502 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4503 = load i64, i64* %RBP
  %4504 = sub i64 %4503, 96
  %4505 = load i64, i64* %PC
  %4506 = add i64 %4505, 5
  store i64 %4506, i64* %PC
  %4507 = inttoptr i64 %4504 to double*
  %4508 = load double, double* %4507
  %4509 = bitcast i8* %4502 to double*
  store double %4508, double* %4509, align 1, !tbaa !2452
  %4510 = getelementptr inbounds i8, i8* %4502, i64 8
  %4511 = bitcast i8* %4510 to double*
  store double 0.000000e+00, double* %4511, align 1, !tbaa !2452
  %4512 = bitcast %union.vec128_t* %XMM0 to i8*
  %4513 = load i64, i64* %PC
  %4514 = add i64 %4513, 5
  store i64 %4514, i64* %PC
  %4515 = bitcast i8* %4512 to i64*
  %4516 = load i64, i64* %4515, align 1
  store i64 %4516, i64* %RDX, align 1, !tbaa !2428
  %4517 = load i64, i64* %RDX
  %4518 = load i64, i64* %RAX
  %4519 = load i64, i64* %PC
  %4520 = add i64 %4519, 3
  store i64 %4520, i64* %PC
  %4521 = xor i64 %4518, %4517
  store i64 %4521, i64* %RDX, align 8, !tbaa !2428
  %4522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4522, align 1, !tbaa !2432
  %4523 = trunc i64 %4521 to i32
  %4524 = and i32 %4523, 255
  %4525 = call i32 @llvm.ctpop.i32(i32 %4524) #17
  %4526 = trunc i32 %4525 to i8
  %4527 = and i8 %4526, 1
  %4528 = xor i8 %4527, 1
  %4529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4528, i8* %4529, align 1, !tbaa !2446
  %4530 = icmp eq i64 %4521, 0
  %4531 = zext i1 %4530 to i8
  %4532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4531, i8* %4532, align 1, !tbaa !2448
  %4533 = lshr i64 %4521, 63
  %4534 = trunc i64 %4533 to i8
  %4535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4534, i8* %4535, align 1, !tbaa !2449
  %4536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4536, align 1, !tbaa !2450
  %4537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4537, align 1, !tbaa !2447
  %4538 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4539 = load i64, i64* %RDX
  %4540 = load i64, i64* %PC
  %4541 = add i64 %4540, 5
  store i64 %4541, i64* %PC
  %4542 = bitcast i8* %4538 to i64*
  store i64 %4539, i64* %4542, align 1, !tbaa !2428
  %4543 = getelementptr inbounds i8, i8* %4538, i64 8
  %4544 = bitcast i8* %4543 to i64*
  store i64 0, i64* %4544, align 1, !tbaa !2428
  %4545 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4546 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4547 = load i64, i64* %RBP
  %4548 = sub i64 %4547, 120
  %4549 = load i64, i64* %PC
  %4550 = add i64 %4549, 5
  store i64 %4550, i64* %PC
  %4551 = bitcast i8* %4546 to double*
  %4552 = load double, double* %4551, align 1
  %4553 = getelementptr inbounds i8, i8* %4546, i64 8
  %4554 = bitcast i8* %4553 to i64*
  %4555 = load i64, i64* %4554, align 1
  %4556 = inttoptr i64 %4548 to double*
  %4557 = load double, double* %4556
  %4558 = fmul double %4552, %4557
  %4559 = bitcast i8* %4545 to double*
  store double %4558, double* %4559, align 1, !tbaa !2452
  %4560 = getelementptr inbounds i8, i8* %4545, i64 8
  %4561 = bitcast i8* %4560 to i64*
  store i64 %4555, i64* %4561, align 1, !tbaa !2452
  %4562 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4563 = load i64, i64* %RBP
  %4564 = sub i64 %4563, 88
  %4565 = load i64, i64* %PC
  %4566 = add i64 %4565, 5
  store i64 %4566, i64* %PC
  %4567 = inttoptr i64 %4564 to double*
  %4568 = load double, double* %4567
  %4569 = bitcast i8* %4562 to double*
  store double %4568, double* %4569, align 1, !tbaa !2452
  %4570 = getelementptr inbounds i8, i8* %4562, i64 8
  %4571 = bitcast i8* %4570 to double*
  store double 0.000000e+00, double* %4571, align 1, !tbaa !2452
  %4572 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4573 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4574 = load i64, i64* %RBP
  %4575 = sub i64 %4574, 128
  %4576 = load i64, i64* %PC
  %4577 = add i64 %4576, 5
  store i64 %4577, i64* %PC
  %4578 = bitcast i8* %4573 to double*
  %4579 = load double, double* %4578, align 1
  %4580 = getelementptr inbounds i8, i8* %4573, i64 8
  %4581 = bitcast i8* %4580 to i64*
  %4582 = load i64, i64* %4581, align 1
  %4583 = inttoptr i64 %4575 to double*
  %4584 = load double, double* %4583
  %4585 = fmul double %4579, %4584
  %4586 = bitcast i8* %4572 to double*
  store double %4585, double* %4586, align 1, !tbaa !2452
  %4587 = getelementptr inbounds i8, i8* %4572, i64 8
  %4588 = bitcast i8* %4587 to i64*
  store i64 %4582, i64* %4588, align 1, !tbaa !2452
  %4589 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4590 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4591 = bitcast %union.vec128_t* %XMM1 to i8*
  %4592 = load i64, i64* %PC
  %4593 = add i64 %4592, 4
  store i64 %4593, i64* %PC
  %4594 = bitcast i8* %4590 to double*
  %4595 = load double, double* %4594, align 1
  %4596 = getelementptr inbounds i8, i8* %4590, i64 8
  %4597 = bitcast i8* %4596 to i64*
  %4598 = load i64, i64* %4597, align 1
  %4599 = bitcast i8* %4591 to double*
  %4600 = load double, double* %4599, align 1
  %4601 = fsub double %4595, %4600
  %4602 = bitcast i8* %4589 to double*
  store double %4601, double* %4602, align 1, !tbaa !2452
  %4603 = getelementptr inbounds i8, i8* %4589, i64 8
  %4604 = bitcast i8* %4603 to i64*
  store i64 %4598, i64* %4604, align 1, !tbaa !2452
  %4605 = load i64, i64* %RBP
  %4606 = sub i64 %4605, 16
  %4607 = load i64, i64* %PC
  %4608 = add i64 %4607, 4
  store i64 %4608, i64* %PC
  %4609 = inttoptr i64 %4606 to i64*
  %4610 = load i64, i64* %4609
  store i64 %4610, i64* %RDX, align 8, !tbaa !2428
  %4611 = load i64, i64* %RBP
  %4612 = sub i64 %4611, 36
  %4613 = load i64, i64* %PC
  %4614 = add i64 %4613, 4
  store i64 %4614, i64* %PC
  %4615 = inttoptr i64 %4612 to i32*
  %4616 = load i32, i32* %4615
  %4617 = sext i32 %4616 to i64
  store i64 %4617, i64* %RSI, align 8, !tbaa !2428
  %4618 = load i64, i64* %RDX
  %4619 = load i64, i64* %RSI
  %4620 = mul i64 %4619, 8
  %4621 = add i64 %4620, %4618
  %4622 = bitcast %union.vec128_t* %XMM0 to i8*
  %4623 = load i64, i64* %PC
  %4624 = add i64 %4623, 5
  store i64 %4624, i64* %PC
  %4625 = bitcast i8* %4622 to double*
  %4626 = load double, double* %4625, align 1
  %4627 = inttoptr i64 %4621 to double*
  store double %4626, double* %4627
  %4628 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4629 = load i64, i64* %RBP
  %4630 = sub i64 %4629, 96
  %4631 = load i64, i64* %PC
  %4632 = add i64 %4631, 5
  store i64 %4632, i64* %PC
  %4633 = inttoptr i64 %4630 to double*
  %4634 = load double, double* %4633
  %4635 = bitcast i8* %4628 to double*
  store double %4634, double* %4635, align 1, !tbaa !2452
  %4636 = getelementptr inbounds i8, i8* %4628, i64 8
  %4637 = bitcast i8* %4636 to double*
  store double 0.000000e+00, double* %4637, align 1, !tbaa !2452
  %4638 = bitcast %union.vec128_t* %XMM0 to i8*
  %4639 = load i64, i64* %PC
  %4640 = add i64 %4639, 5
  store i64 %4640, i64* %PC
  %4641 = bitcast i8* %4638 to i64*
  %4642 = load i64, i64* %4641, align 1
  store i64 %4642, i64* %RDX, align 1, !tbaa !2428
  %4643 = load i64, i64* %RDX
  %4644 = load i64, i64* %RAX
  %4645 = load i64, i64* %PC
  %4646 = add i64 %4645, 3
  store i64 %4646, i64* %PC
  %4647 = xor i64 %4644, %4643
  store i64 %4647, i64* %RDX, align 8, !tbaa !2428
  %4648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4648, align 1, !tbaa !2432
  %4649 = trunc i64 %4647 to i32
  %4650 = and i32 %4649, 255
  %4651 = call i32 @llvm.ctpop.i32(i32 %4650) #17
  %4652 = trunc i32 %4651 to i8
  %4653 = and i8 %4652, 1
  %4654 = xor i8 %4653, 1
  %4655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4654, i8* %4655, align 1, !tbaa !2446
  %4656 = icmp eq i64 %4647, 0
  %4657 = zext i1 %4656 to i8
  %4658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4657, i8* %4658, align 1, !tbaa !2448
  %4659 = lshr i64 %4647, 63
  %4660 = trunc i64 %4659 to i8
  %4661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4660, i8* %4661, align 1, !tbaa !2449
  %4662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4662, align 1, !tbaa !2450
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4663, align 1, !tbaa !2447
  %4664 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4665 = load i64, i64* %RDX
  %4666 = load i64, i64* %PC
  %4667 = add i64 %4666, 5
  store i64 %4667, i64* %PC
  %4668 = bitcast i8* %4664 to i64*
  store i64 %4665, i64* %4668, align 1, !tbaa !2428
  %4669 = getelementptr inbounds i8, i8* %4664, i64 8
  %4670 = bitcast i8* %4669 to i64*
  store i64 0, i64* %4670, align 1, !tbaa !2428
  %4671 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4672 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4673 = load i64, i64* %RBP
  %4674 = sub i64 %4673, 128
  %4675 = load i64, i64* %PC
  %4676 = add i64 %4675, 5
  store i64 %4676, i64* %PC
  %4677 = bitcast i8* %4672 to double*
  %4678 = load double, double* %4677, align 1
  %4679 = getelementptr inbounds i8, i8* %4672, i64 8
  %4680 = bitcast i8* %4679 to i64*
  %4681 = load i64, i64* %4680, align 1
  %4682 = inttoptr i64 %4674 to double*
  %4683 = load double, double* %4682
  %4684 = fmul double %4678, %4683
  %4685 = bitcast i8* %4671 to double*
  store double %4684, double* %4685, align 1, !tbaa !2452
  %4686 = getelementptr inbounds i8, i8* %4671, i64 8
  %4687 = bitcast i8* %4686 to i64*
  store i64 %4681, i64* %4687, align 1, !tbaa !2452
  %4688 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4689 = load i64, i64* %RBP
  %4690 = sub i64 %4689, 88
  %4691 = load i64, i64* %PC
  %4692 = add i64 %4691, 5
  store i64 %4692, i64* %PC
  %4693 = inttoptr i64 %4690 to double*
  %4694 = load double, double* %4693
  %4695 = bitcast i8* %4688 to double*
  store double %4694, double* %4695, align 1, !tbaa !2452
  %4696 = getelementptr inbounds i8, i8* %4688, i64 8
  %4697 = bitcast i8* %4696 to double*
  store double 0.000000e+00, double* %4697, align 1, !tbaa !2452
  %4698 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4699 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4700 = load i64, i64* %RBP
  %4701 = sub i64 %4700, 120
  %4702 = load i64, i64* %PC
  %4703 = add i64 %4702, 5
  store i64 %4703, i64* %PC
  %4704 = bitcast i8* %4699 to double*
  %4705 = load double, double* %4704, align 1
  %4706 = getelementptr inbounds i8, i8* %4699, i64 8
  %4707 = bitcast i8* %4706 to i64*
  %4708 = load i64, i64* %4707, align 1
  %4709 = inttoptr i64 %4701 to double*
  %4710 = load double, double* %4709
  %4711 = fmul double %4705, %4710
  %4712 = bitcast i8* %4698 to double*
  store double %4711, double* %4712, align 1, !tbaa !2452
  %4713 = getelementptr inbounds i8, i8* %4698, i64 8
  %4714 = bitcast i8* %4713 to i64*
  store i64 %4708, i64* %4714, align 1, !tbaa !2452
  %4715 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4716 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4717 = bitcast %union.vec128_t* %XMM1 to i8*
  %4718 = load i64, i64* %PC
  %4719 = add i64 %4718, 4
  store i64 %4719, i64* %PC
  %4720 = bitcast i8* %4716 to double*
  %4721 = load double, double* %4720, align 1
  %4722 = getelementptr inbounds i8, i8* %4716, i64 8
  %4723 = bitcast i8* %4722 to i64*
  %4724 = load i64, i64* %4723, align 1
  %4725 = bitcast i8* %4717 to double*
  %4726 = load double, double* %4725, align 1
  %4727 = fadd double %4721, %4726
  %4728 = bitcast i8* %4715 to double*
  store double %4727, double* %4728, align 1, !tbaa !2452
  %4729 = getelementptr inbounds i8, i8* %4715, i64 8
  %4730 = bitcast i8* %4729 to i64*
  store i64 %4724, i64* %4730, align 1, !tbaa !2452
  %4731 = load i64, i64* %RBP
  %4732 = sub i64 %4731, 16
  %4733 = load i64, i64* %PC
  %4734 = add i64 %4733, 4
  store i64 %4734, i64* %PC
  %4735 = inttoptr i64 %4732 to i64*
  %4736 = load i64, i64* %4735
  store i64 %4736, i64* %RAX, align 8, !tbaa !2428
  %4737 = load i64, i64* %RBP
  %4738 = sub i64 %4737, 36
  %4739 = load i64, i64* %PC
  %4740 = add i64 %4739, 3
  store i64 %4740, i64* %PC
  %4741 = inttoptr i64 %4738 to i32*
  %4742 = load i32, i32* %4741
  %4743 = zext i32 %4742 to i64
  store i64 %4743, i64* %RCX, align 8, !tbaa !2428
  %4744 = load i64, i64* %RCX
  %4745 = load i64, i64* %PC
  %4746 = add i64 %4745, 3
  store i64 %4746, i64* %PC
  %4747 = trunc i64 %4744 to i32
  %4748 = add i32 1, %4747
  %4749 = zext i32 %4748 to i64
  store i64 %4749, i64* %RCX, align 8, !tbaa !2428
  %4750 = icmp ult i32 %4748, %4747
  %4751 = icmp ult i32 %4748, 1
  %4752 = or i1 %4750, %4751
  %4753 = zext i1 %4752 to i8
  %4754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4753, i8* %4754, align 1, !tbaa !2432
  %4755 = and i32 %4748, 255
  %4756 = call i32 @llvm.ctpop.i32(i32 %4755) #17
  %4757 = trunc i32 %4756 to i8
  %4758 = and i8 %4757, 1
  %4759 = xor i8 %4758, 1
  %4760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4759, i8* %4760, align 1, !tbaa !2446
  %4761 = xor i64 1, %4744
  %4762 = trunc i64 %4761 to i32
  %4763 = xor i32 %4762, %4748
  %4764 = lshr i32 %4763, 4
  %4765 = trunc i32 %4764 to i8
  %4766 = and i8 %4765, 1
  %4767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4766, i8* %4767, align 1, !tbaa !2447
  %4768 = icmp eq i32 %4748, 0
  %4769 = zext i1 %4768 to i8
  %4770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4769, i8* %4770, align 1, !tbaa !2448
  %4771 = lshr i32 %4748, 31
  %4772 = trunc i32 %4771 to i8
  %4773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4772, i8* %4773, align 1, !tbaa !2449
  %4774 = lshr i32 %4747, 31
  %4775 = xor i32 %4771, %4774
  %4776 = add nuw nsw i32 %4775, %4771
  %4777 = icmp eq i32 %4776, 2
  %4778 = zext i1 %4777 to i8
  %4779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4778, i8* %4779, align 1, !tbaa !2450
  %4780 = load i32, i32* %ECX
  %4781 = zext i32 %4780 to i64
  %4782 = load i64, i64* %PC
  %4783 = add i64 %4782, 3
  store i64 %4783, i64* %PC
  %4784 = shl i64 %4781, 32
  %4785 = ashr exact i64 %4784, 32
  store i64 %4785, i64* %RDX, align 8, !tbaa !2428
  %4786 = load i64, i64* %RAX
  %4787 = load i64, i64* %RDX
  %4788 = mul i64 %4787, 8
  %4789 = add i64 %4788, %4786
  %4790 = bitcast %union.vec128_t* %XMM0 to i8*
  %4791 = load i64, i64* %PC
  %4792 = add i64 %4791, 5
  store i64 %4792, i64* %PC
  %4793 = bitcast i8* %4790 to double*
  %4794 = load double, double* %4793, align 1
  %4795 = inttoptr i64 %4789 to double*
  store double %4794, double* %4795
  %4796 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4797 = load i64, i64* %RBP
  %4798 = sub i64 %4797, 136
  %4799 = load i64, i64* %PC
  %4800 = add i64 %4799, 8
  store i64 %4800, i64* %PC
  %4801 = inttoptr i64 %4798 to double*
  %4802 = load double, double* %4801
  %4803 = bitcast i8* %4796 to double*
  store double %4802, double* %4803, align 1, !tbaa !2452
  %4804 = getelementptr inbounds i8, i8* %4796, i64 8
  %4805 = bitcast i8* %4804 to double*
  store double 0.000000e+00, double* %4805, align 1, !tbaa !2452
  %4806 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4807 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4808 = load i64, i64* %RBP
  %4809 = sub i64 %4808, 176
  %4810 = load i64, i64* %PC
  %4811 = add i64 %4810, 8
  store i64 %4811, i64* %PC
  %4812 = bitcast i8* %4807 to double*
  %4813 = load double, double* %4812, align 1
  %4814 = getelementptr inbounds i8, i8* %4807, i64 8
  %4815 = bitcast i8* %4814 to i64*
  %4816 = load i64, i64* %4815, align 1
  %4817 = inttoptr i64 %4809 to double*
  %4818 = load double, double* %4817
  %4819 = fsub double %4813, %4818
  %4820 = bitcast i8* %4806 to double*
  store double %4819, double* %4820, align 1, !tbaa !2452
  %4821 = getelementptr inbounds i8, i8* %4806, i64 8
  %4822 = bitcast i8* %4821 to i64*
  store i64 %4816, i64* %4822, align 1, !tbaa !2452
  %4823 = load i64, i64* %RBP
  %4824 = sub i64 %4823, 120
  %4825 = bitcast %union.vec128_t* %XMM0 to i8*
  %4826 = load i64, i64* %PC
  %4827 = add i64 %4826, 5
  store i64 %4827, i64* %PC
  %4828 = bitcast i8* %4825 to double*
  %4829 = load double, double* %4828, align 1
  %4830 = inttoptr i64 %4824 to double*
  store double %4829, double* %4830
  %4831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4832 = load i64, i64* %RBP
  %4833 = sub i64 %4832, 144
  %4834 = load i64, i64* %PC
  %4835 = add i64 %4834, 8
  store i64 %4835, i64* %PC
  %4836 = inttoptr i64 %4833 to double*
  %4837 = load double, double* %4836
  %4838 = bitcast i8* %4831 to double*
  store double %4837, double* %4838, align 1, !tbaa !2452
  %4839 = getelementptr inbounds i8, i8* %4831, i64 8
  %4840 = bitcast i8* %4839 to double*
  store double 0.000000e+00, double* %4840, align 1, !tbaa !2452
  %4841 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4842 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4843 = load i64, i64* %RBP
  %4844 = sub i64 %4843, 168
  %4845 = load i64, i64* %PC
  %4846 = add i64 %4845, 8
  store i64 %4846, i64* %PC
  %4847 = bitcast i8* %4842 to double*
  %4848 = load double, double* %4847, align 1
  %4849 = getelementptr inbounds i8, i8* %4842, i64 8
  %4850 = bitcast i8* %4849 to i64*
  %4851 = load i64, i64* %4850, align 1
  %4852 = inttoptr i64 %4844 to double*
  %4853 = load double, double* %4852
  %4854 = fadd double %4848, %4853
  %4855 = bitcast i8* %4841 to double*
  store double %4854, double* %4855, align 1, !tbaa !2452
  %4856 = getelementptr inbounds i8, i8* %4841, i64 8
  %4857 = bitcast i8* %4856 to i64*
  store i64 %4851, i64* %4857, align 1, !tbaa !2452
  %4858 = load i64, i64* %RBP
  %4859 = sub i64 %4858, 128
  %4860 = bitcast %union.vec128_t* %XMM0 to i8*
  %4861 = load i64, i64* %PC
  %4862 = add i64 %4861, 5
  store i64 %4862, i64* %PC
  %4863 = bitcast i8* %4860 to double*
  %4864 = load double, double* %4863, align 1
  %4865 = inttoptr i64 %4859 to double*
  store double %4864, double* %4865
  %4866 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4867 = load i64, i64* %RBP
  %4868 = sub i64 %4867, 72
  %4869 = load i64, i64* %PC
  %4870 = add i64 %4869, 5
  store i64 %4870, i64* %PC
  %4871 = inttoptr i64 %4868 to double*
  %4872 = load double, double* %4871
  %4873 = bitcast i8* %4866 to double*
  store double %4872, double* %4873, align 1, !tbaa !2452
  %4874 = getelementptr inbounds i8, i8* %4866, i64 8
  %4875 = bitcast i8* %4874 to double*
  store double 0.000000e+00, double* %4875, align 1, !tbaa !2452
  %4876 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4877 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4878 = load i64, i64* %RBP
  %4879 = sub i64 %4878, 120
  %4880 = load i64, i64* %PC
  %4881 = add i64 %4880, 5
  store i64 %4881, i64* %PC
  %4882 = bitcast i8* %4877 to double*
  %4883 = load double, double* %4882, align 1
  %4884 = getelementptr inbounds i8, i8* %4877, i64 8
  %4885 = bitcast i8* %4884 to i64*
  %4886 = load i64, i64* %4885, align 1
  %4887 = inttoptr i64 %4879 to double*
  %4888 = load double, double* %4887
  %4889 = fmul double %4883, %4888
  %4890 = bitcast i8* %4876 to double*
  store double %4889, double* %4890, align 1, !tbaa !2452
  %4891 = getelementptr inbounds i8, i8* %4876, i64 8
  %4892 = bitcast i8* %4891 to i64*
  store i64 %4886, i64* %4892, align 1, !tbaa !2452
  %4893 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4894 = load i64, i64* %RBP
  %4895 = sub i64 %4894, 80
  %4896 = load i64, i64* %PC
  %4897 = add i64 %4896, 5
  store i64 %4897, i64* %PC
  %4898 = inttoptr i64 %4895 to double*
  %4899 = load double, double* %4898
  %4900 = bitcast i8* %4893 to double*
  store double %4899, double* %4900, align 1, !tbaa !2452
  %4901 = getelementptr inbounds i8, i8* %4893, i64 8
  %4902 = bitcast i8* %4901 to double*
  store double 0.000000e+00, double* %4902, align 1, !tbaa !2452
  %4903 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4904 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4905 = load i64, i64* %RBP
  %4906 = sub i64 %4905, 128
  %4907 = load i64, i64* %PC
  %4908 = add i64 %4907, 5
  store i64 %4908, i64* %PC
  %4909 = bitcast i8* %4904 to double*
  %4910 = load double, double* %4909, align 1
  %4911 = getelementptr inbounds i8, i8* %4904, i64 8
  %4912 = bitcast i8* %4911 to i64*
  %4913 = load i64, i64* %4912, align 1
  %4914 = inttoptr i64 %4906 to double*
  %4915 = load double, double* %4914
  %4916 = fmul double %4910, %4915
  %4917 = bitcast i8* %4903 to double*
  store double %4916, double* %4917, align 1, !tbaa !2452
  %4918 = getelementptr inbounds i8, i8* %4903, i64 8
  %4919 = bitcast i8* %4918 to i64*
  store i64 %4913, i64* %4919, align 1, !tbaa !2452
  %4920 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4921 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4922 = bitcast %union.vec128_t* %XMM1 to i8*
  %4923 = load i64, i64* %PC
  %4924 = add i64 %4923, 4
  store i64 %4924, i64* %PC
  %4925 = bitcast i8* %4921 to double*
  %4926 = load double, double* %4925, align 1
  %4927 = getelementptr inbounds i8, i8* %4921, i64 8
  %4928 = bitcast i8* %4927 to i64*
  %4929 = load i64, i64* %4928, align 1
  %4930 = bitcast i8* %4922 to double*
  %4931 = load double, double* %4930, align 1
  %4932 = fsub double %4926, %4931
  %4933 = bitcast i8* %4920 to double*
  store double %4932, double* %4933, align 1, !tbaa !2452
  %4934 = getelementptr inbounds i8, i8* %4920, i64 8
  %4935 = bitcast i8* %4934 to i64*
  store i64 %4929, i64* %4935, align 1, !tbaa !2452
  %4936 = load i64, i64* %RBP
  %4937 = sub i64 %4936, 16
  %4938 = load i64, i64* %PC
  %4939 = add i64 %4938, 4
  store i64 %4939, i64* %PC
  %4940 = inttoptr i64 %4937 to i64*
  %4941 = load i64, i64* %4940
  store i64 %4941, i64* %RAX, align 8, !tbaa !2428
  %4942 = load i64, i64* %RBP
  %4943 = sub i64 %4942, 32
  %4944 = load i64, i64* %PC
  %4945 = add i64 %4944, 4
  store i64 %4945, i64* %PC
  %4946 = inttoptr i64 %4943 to i32*
  %4947 = load i32, i32* %4946
  %4948 = sext i32 %4947 to i64
  store i64 %4948, i64* %RDX, align 8, !tbaa !2428
  %4949 = load i64, i64* %RAX
  %4950 = load i64, i64* %RDX
  %4951 = mul i64 %4950, 8
  %4952 = add i64 %4951, %4949
  %4953 = bitcast %union.vec128_t* %XMM0 to i8*
  %4954 = load i64, i64* %PC
  %4955 = add i64 %4954, 5
  store i64 %4955, i64* %PC
  %4956 = bitcast i8* %4953 to double*
  %4957 = load double, double* %4956, align 1
  %4958 = inttoptr i64 %4952 to double*
  store double %4957, double* %4958
  %4959 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4960 = load i64, i64* %RBP
  %4961 = sub i64 %4960, 72
  %4962 = load i64, i64* %PC
  %4963 = add i64 %4962, 5
  store i64 %4963, i64* %PC
  %4964 = inttoptr i64 %4961 to double*
  %4965 = load double, double* %4964
  %4966 = bitcast i8* %4959 to double*
  store double %4965, double* %4966, align 1, !tbaa !2452
  %4967 = getelementptr inbounds i8, i8* %4959, i64 8
  %4968 = bitcast i8* %4967 to double*
  store double 0.000000e+00, double* %4968, align 1, !tbaa !2452
  %4969 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4970 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4971 = load i64, i64* %RBP
  %4972 = sub i64 %4971, 128
  %4973 = load i64, i64* %PC
  %4974 = add i64 %4973, 5
  store i64 %4974, i64* %PC
  %4975 = bitcast i8* %4970 to double*
  %4976 = load double, double* %4975, align 1
  %4977 = getelementptr inbounds i8, i8* %4970, i64 8
  %4978 = bitcast i8* %4977 to i64*
  %4979 = load i64, i64* %4978, align 1
  %4980 = inttoptr i64 %4972 to double*
  %4981 = load double, double* %4980
  %4982 = fmul double %4976, %4981
  %4983 = bitcast i8* %4969 to double*
  store double %4982, double* %4983, align 1, !tbaa !2452
  %4984 = getelementptr inbounds i8, i8* %4969, i64 8
  %4985 = bitcast i8* %4984 to i64*
  store i64 %4979, i64* %4985, align 1, !tbaa !2452
  %4986 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4987 = load i64, i64* %RBP
  %4988 = sub i64 %4987, 80
  %4989 = load i64, i64* %PC
  %4990 = add i64 %4989, 5
  store i64 %4990, i64* %PC
  %4991 = inttoptr i64 %4988 to double*
  %4992 = load double, double* %4991
  %4993 = bitcast i8* %4986 to double*
  store double %4992, double* %4993, align 1, !tbaa !2452
  %4994 = getelementptr inbounds i8, i8* %4986, i64 8
  %4995 = bitcast i8* %4994 to double*
  store double 0.000000e+00, double* %4995, align 1, !tbaa !2452
  %4996 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4997 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4998 = load i64, i64* %RBP
  %4999 = sub i64 %4998, 120
  %5000 = load i64, i64* %PC
  %5001 = add i64 %5000, 5
  store i64 %5001, i64* %PC
  %5002 = bitcast i8* %4997 to double*
  %5003 = load double, double* %5002, align 1
  %5004 = getelementptr inbounds i8, i8* %4997, i64 8
  %5005 = bitcast i8* %5004 to i64*
  %5006 = load i64, i64* %5005, align 1
  %5007 = inttoptr i64 %4999 to double*
  %5008 = load double, double* %5007
  %5009 = fmul double %5003, %5008
  %5010 = bitcast i8* %4996 to double*
  store double %5009, double* %5010, align 1, !tbaa !2452
  %5011 = getelementptr inbounds i8, i8* %4996, i64 8
  %5012 = bitcast i8* %5011 to i64*
  store i64 %5006, i64* %5012, align 1, !tbaa !2452
  %5013 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5014 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5015 = bitcast %union.vec128_t* %XMM1 to i8*
  %5016 = load i64, i64* %PC
  %5017 = add i64 %5016, 4
  store i64 %5017, i64* %PC
  %5018 = bitcast i8* %5014 to double*
  %5019 = load double, double* %5018, align 1
  %5020 = getelementptr inbounds i8, i8* %5014, i64 8
  %5021 = bitcast i8* %5020 to i64*
  %5022 = load i64, i64* %5021, align 1
  %5023 = bitcast i8* %5015 to double*
  %5024 = load double, double* %5023, align 1
  %5025 = fadd double %5019, %5024
  %5026 = bitcast i8* %5013 to double*
  store double %5025, double* %5026, align 1, !tbaa !2452
  %5027 = getelementptr inbounds i8, i8* %5013, i64 8
  %5028 = bitcast i8* %5027 to i64*
  store i64 %5022, i64* %5028, align 1, !tbaa !2452
  %5029 = load i64, i64* %RBP
  %5030 = sub i64 %5029, 16
  %5031 = load i64, i64* %PC
  %5032 = add i64 %5031, 4
  store i64 %5032, i64* %PC
  %5033 = inttoptr i64 %5030 to i64*
  %5034 = load i64, i64* %5033
  store i64 %5034, i64* %RAX, align 8, !tbaa !2428
  %5035 = load i64, i64* %RBP
  %5036 = sub i64 %5035, 32
  %5037 = load i64, i64* %PC
  %5038 = add i64 %5037, 3
  store i64 %5038, i64* %PC
  %5039 = inttoptr i64 %5036 to i32*
  %5040 = load i32, i32* %5039
  %5041 = zext i32 %5040 to i64
  store i64 %5041, i64* %RCX, align 8, !tbaa !2428
  %5042 = load i64, i64* %RCX
  %5043 = load i64, i64* %PC
  %5044 = add i64 %5043, 3
  store i64 %5044, i64* %PC
  %5045 = trunc i64 %5042 to i32
  %5046 = add i32 1, %5045
  %5047 = zext i32 %5046 to i64
  store i64 %5047, i64* %RCX, align 8, !tbaa !2428
  %5048 = icmp ult i32 %5046, %5045
  %5049 = icmp ult i32 %5046, 1
  %5050 = or i1 %5048, %5049
  %5051 = zext i1 %5050 to i8
  %5052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5051, i8* %5052, align 1, !tbaa !2432
  %5053 = and i32 %5046, 255
  %5054 = call i32 @llvm.ctpop.i32(i32 %5053) #17
  %5055 = trunc i32 %5054 to i8
  %5056 = and i8 %5055, 1
  %5057 = xor i8 %5056, 1
  %5058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5057, i8* %5058, align 1, !tbaa !2446
  %5059 = xor i64 1, %5042
  %5060 = trunc i64 %5059 to i32
  %5061 = xor i32 %5060, %5046
  %5062 = lshr i32 %5061, 4
  %5063 = trunc i32 %5062 to i8
  %5064 = and i8 %5063, 1
  %5065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5064, i8* %5065, align 1, !tbaa !2447
  %5066 = icmp eq i32 %5046, 0
  %5067 = zext i1 %5066 to i8
  %5068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5067, i8* %5068, align 1, !tbaa !2448
  %5069 = lshr i32 %5046, 31
  %5070 = trunc i32 %5069 to i8
  %5071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5070, i8* %5071, align 1, !tbaa !2449
  %5072 = lshr i32 %5045, 31
  %5073 = xor i32 %5069, %5072
  %5074 = add nuw nsw i32 %5073, %5069
  %5075 = icmp eq i32 %5074, 2
  %5076 = zext i1 %5075 to i8
  %5077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5076, i8* %5077, align 1, !tbaa !2450
  %5078 = load i32, i32* %ECX
  %5079 = zext i32 %5078 to i64
  %5080 = load i64, i64* %PC
  %5081 = add i64 %5080, 3
  store i64 %5081, i64* %PC
  %5082 = shl i64 %5079, 32
  %5083 = ashr exact i64 %5082, 32
  store i64 %5083, i64* %RDX, align 8, !tbaa !2428
  %5084 = load i64, i64* %RAX
  %5085 = load i64, i64* %RDX
  %5086 = mul i64 %5085, 8
  %5087 = add i64 %5086, %5084
  %5088 = bitcast %union.vec128_t* %XMM0 to i8*
  %5089 = load i64, i64* %PC
  %5090 = add i64 %5089, 5
  store i64 %5090, i64* %PC
  %5091 = bitcast i8* %5088 to double*
  %5092 = load double, double* %5091, align 1
  %5093 = inttoptr i64 %5087 to double*
  store double %5092, double* %5093
  %5094 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5095 = load i64, i64* %RBP
  %5096 = sub i64 %5095, 136
  %5097 = load i64, i64* %PC
  %5098 = add i64 %5097, 8
  store i64 %5098, i64* %PC
  %5099 = inttoptr i64 %5096 to double*
  %5100 = load double, double* %5099
  %5101 = bitcast i8* %5094 to double*
  store double %5100, double* %5101, align 1, !tbaa !2452
  %5102 = getelementptr inbounds i8, i8* %5094, i64 8
  %5103 = bitcast i8* %5102 to double*
  store double 0.000000e+00, double* %5103, align 1, !tbaa !2452
  %5104 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5106 = load i64, i64* %RBP
  %5107 = sub i64 %5106, 176
  %5108 = load i64, i64* %PC
  %5109 = add i64 %5108, 8
  store i64 %5109, i64* %PC
  %5110 = bitcast i8* %5105 to double*
  %5111 = load double, double* %5110, align 1
  %5112 = getelementptr inbounds i8, i8* %5105, i64 8
  %5113 = bitcast i8* %5112 to i64*
  %5114 = load i64, i64* %5113, align 1
  %5115 = inttoptr i64 %5107 to double*
  %5116 = load double, double* %5115
  %5117 = fadd double %5111, %5116
  %5118 = bitcast i8* %5104 to double*
  store double %5117, double* %5118, align 1, !tbaa !2452
  %5119 = getelementptr inbounds i8, i8* %5104, i64 8
  %5120 = bitcast i8* %5119 to i64*
  store i64 %5114, i64* %5120, align 1, !tbaa !2452
  %5121 = load i64, i64* %RBP
  %5122 = sub i64 %5121, 120
  %5123 = bitcast %union.vec128_t* %XMM0 to i8*
  %5124 = load i64, i64* %PC
  %5125 = add i64 %5124, 5
  store i64 %5125, i64* %PC
  %5126 = bitcast i8* %5123 to double*
  %5127 = load double, double* %5126, align 1
  %5128 = inttoptr i64 %5122 to double*
  store double %5127, double* %5128
  %5129 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5130 = load i64, i64* %RBP
  %5131 = sub i64 %5130, 144
  %5132 = load i64, i64* %PC
  %5133 = add i64 %5132, 8
  store i64 %5133, i64* %PC
  %5134 = inttoptr i64 %5131 to double*
  %5135 = load double, double* %5134
  %5136 = bitcast i8* %5129 to double*
  store double %5135, double* %5136, align 1, !tbaa !2452
  %5137 = getelementptr inbounds i8, i8* %5129, i64 8
  %5138 = bitcast i8* %5137 to double*
  store double 0.000000e+00, double* %5138, align 1, !tbaa !2452
  %5139 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5141 = load i64, i64* %RBP
  %5142 = sub i64 %5141, 168
  %5143 = load i64, i64* %PC
  %5144 = add i64 %5143, 8
  store i64 %5144, i64* %PC
  %5145 = bitcast i8* %5140 to double*
  %5146 = load double, double* %5145, align 1
  %5147 = getelementptr inbounds i8, i8* %5140, i64 8
  %5148 = bitcast i8* %5147 to i64*
  %5149 = load i64, i64* %5148, align 1
  %5150 = inttoptr i64 %5142 to double*
  %5151 = load double, double* %5150
  %5152 = fsub double %5146, %5151
  %5153 = bitcast i8* %5139 to double*
  store double %5152, double* %5153, align 1, !tbaa !2452
  %5154 = getelementptr inbounds i8, i8* %5139, i64 8
  %5155 = bitcast i8* %5154 to i64*
  store i64 %5149, i64* %5155, align 1, !tbaa !2452
  %5156 = load i64, i64* %RBP
  %5157 = sub i64 %5156, 128
  %5158 = bitcast %union.vec128_t* %XMM0 to i8*
  %5159 = load i64, i64* %PC
  %5160 = add i64 %5159, 5
  store i64 %5160, i64* %PC
  %5161 = bitcast i8* %5158 to double*
  %5162 = load double, double* %5161, align 1
  %5163 = inttoptr i64 %5157 to double*
  store double %5162, double* %5163
  %5164 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5165 = load i64, i64* %RBP
  %5166 = sub i64 %5165, 104
  %5167 = load i64, i64* %PC
  %5168 = add i64 %5167, 5
  store i64 %5168, i64* %PC
  %5169 = inttoptr i64 %5166 to double*
  %5170 = load double, double* %5169
  %5171 = bitcast i8* %5164 to double*
  store double %5170, double* %5171, align 1, !tbaa !2452
  %5172 = getelementptr inbounds i8, i8* %5164, i64 8
  %5173 = bitcast i8* %5172 to double*
  store double 0.000000e+00, double* %5173, align 1, !tbaa !2452
  %5174 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5176 = load i64, i64* %RBP
  %5177 = sub i64 %5176, 120
  %5178 = load i64, i64* %PC
  %5179 = add i64 %5178, 5
  store i64 %5179, i64* %PC
  %5180 = bitcast i8* %5175 to double*
  %5181 = load double, double* %5180, align 1
  %5182 = getelementptr inbounds i8, i8* %5175, i64 8
  %5183 = bitcast i8* %5182 to i64*
  %5184 = load i64, i64* %5183, align 1
  %5185 = inttoptr i64 %5177 to double*
  %5186 = load double, double* %5185
  %5187 = fmul double %5181, %5186
  %5188 = bitcast i8* %5174 to double*
  store double %5187, double* %5188, align 1, !tbaa !2452
  %5189 = getelementptr inbounds i8, i8* %5174, i64 8
  %5190 = bitcast i8* %5189 to i64*
  store i64 %5184, i64* %5190, align 1, !tbaa !2452
  %5191 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5192 = load i64, i64* %RBP
  %5193 = sub i64 %5192, 112
  %5194 = load i64, i64* %PC
  %5195 = add i64 %5194, 5
  store i64 %5195, i64* %PC
  %5196 = inttoptr i64 %5193 to double*
  %5197 = load double, double* %5196
  %5198 = bitcast i8* %5191 to double*
  store double %5197, double* %5198, align 1, !tbaa !2452
  %5199 = getelementptr inbounds i8, i8* %5191, i64 8
  %5200 = bitcast i8* %5199 to double*
  store double 0.000000e+00, double* %5200, align 1, !tbaa !2452
  %5201 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5202 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5203 = load i64, i64* %RBP
  %5204 = sub i64 %5203, 128
  %5205 = load i64, i64* %PC
  %5206 = add i64 %5205, 5
  store i64 %5206, i64* %PC
  %5207 = bitcast i8* %5202 to double*
  %5208 = load double, double* %5207, align 1
  %5209 = getelementptr inbounds i8, i8* %5202, i64 8
  %5210 = bitcast i8* %5209 to i64*
  %5211 = load i64, i64* %5210, align 1
  %5212 = inttoptr i64 %5204 to double*
  %5213 = load double, double* %5212
  %5214 = fmul double %5208, %5213
  %5215 = bitcast i8* %5201 to double*
  store double %5214, double* %5215, align 1, !tbaa !2452
  %5216 = getelementptr inbounds i8, i8* %5201, i64 8
  %5217 = bitcast i8* %5216 to i64*
  store i64 %5211, i64* %5217, align 1, !tbaa !2452
  %5218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5220 = bitcast %union.vec128_t* %XMM1 to i8*
  %5221 = load i64, i64* %PC
  %5222 = add i64 %5221, 4
  store i64 %5222, i64* %PC
  %5223 = bitcast i8* %5219 to double*
  %5224 = load double, double* %5223, align 1
  %5225 = getelementptr inbounds i8, i8* %5219, i64 8
  %5226 = bitcast i8* %5225 to i64*
  %5227 = load i64, i64* %5226, align 1
  %5228 = bitcast i8* %5220 to double*
  %5229 = load double, double* %5228, align 1
  %5230 = fsub double %5224, %5229
  %5231 = bitcast i8* %5218 to double*
  store double %5230, double* %5231, align 1, !tbaa !2452
  %5232 = getelementptr inbounds i8, i8* %5218, i64 8
  %5233 = bitcast i8* %5232 to i64*
  store i64 %5227, i64* %5233, align 1, !tbaa !2452
  %5234 = load i64, i64* %RBP
  %5235 = sub i64 %5234, 16
  %5236 = load i64, i64* %PC
  %5237 = add i64 %5236, 4
  store i64 %5237, i64* %PC
  %5238 = inttoptr i64 %5235 to i64*
  %5239 = load i64, i64* %5238
  store i64 %5239, i64* %RAX, align 8, !tbaa !2428
  %5240 = load i64, i64* %RBP
  %5241 = sub i64 %5240, 40
  %5242 = load i64, i64* %PC
  %5243 = add i64 %5242, 4
  store i64 %5243, i64* %PC
  %5244 = inttoptr i64 %5241 to i32*
  %5245 = load i32, i32* %5244
  %5246 = sext i32 %5245 to i64
  store i64 %5246, i64* %RDX, align 8, !tbaa !2428
  %5247 = load i64, i64* %RAX
  %5248 = load i64, i64* %RDX
  %5249 = mul i64 %5248, 8
  %5250 = add i64 %5249, %5247
  %5251 = bitcast %union.vec128_t* %XMM0 to i8*
  %5252 = load i64, i64* %PC
  %5253 = add i64 %5252, 5
  store i64 %5253, i64* %PC
  %5254 = bitcast i8* %5251 to double*
  %5255 = load double, double* %5254, align 1
  %5256 = inttoptr i64 %5250 to double*
  store double %5255, double* %5256
  %5257 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5258 = load i64, i64* %RBP
  %5259 = sub i64 %5258, 104
  %5260 = load i64, i64* %PC
  %5261 = add i64 %5260, 5
  store i64 %5261, i64* %PC
  %5262 = inttoptr i64 %5259 to double*
  %5263 = load double, double* %5262
  %5264 = bitcast i8* %5257 to double*
  store double %5263, double* %5264, align 1, !tbaa !2452
  %5265 = getelementptr inbounds i8, i8* %5257, i64 8
  %5266 = bitcast i8* %5265 to double*
  store double 0.000000e+00, double* %5266, align 1, !tbaa !2452
  %5267 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5268 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5269 = load i64, i64* %RBP
  %5270 = sub i64 %5269, 128
  %5271 = load i64, i64* %PC
  %5272 = add i64 %5271, 5
  store i64 %5272, i64* %PC
  %5273 = bitcast i8* %5268 to double*
  %5274 = load double, double* %5273, align 1
  %5275 = getelementptr inbounds i8, i8* %5268, i64 8
  %5276 = bitcast i8* %5275 to i64*
  %5277 = load i64, i64* %5276, align 1
  %5278 = inttoptr i64 %5270 to double*
  %5279 = load double, double* %5278
  %5280 = fmul double %5274, %5279
  %5281 = bitcast i8* %5267 to double*
  store double %5280, double* %5281, align 1, !tbaa !2452
  %5282 = getelementptr inbounds i8, i8* %5267, i64 8
  %5283 = bitcast i8* %5282 to i64*
  store i64 %5277, i64* %5283, align 1, !tbaa !2452
  %5284 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5285 = load i64, i64* %RBP
  %5286 = sub i64 %5285, 112
  %5287 = load i64, i64* %PC
  %5288 = add i64 %5287, 5
  store i64 %5288, i64* %PC
  %5289 = inttoptr i64 %5286 to double*
  %5290 = load double, double* %5289
  %5291 = bitcast i8* %5284 to double*
  store double %5290, double* %5291, align 1, !tbaa !2452
  %5292 = getelementptr inbounds i8, i8* %5284, i64 8
  %5293 = bitcast i8* %5292 to double*
  store double 0.000000e+00, double* %5293, align 1, !tbaa !2452
  %5294 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5295 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5296 = load i64, i64* %RBP
  %5297 = sub i64 %5296, 120
  %5298 = load i64, i64* %PC
  %5299 = add i64 %5298, 5
  store i64 %5299, i64* %PC
  %5300 = bitcast i8* %5295 to double*
  %5301 = load double, double* %5300, align 1
  %5302 = getelementptr inbounds i8, i8* %5295, i64 8
  %5303 = bitcast i8* %5302 to i64*
  %5304 = load i64, i64* %5303, align 1
  %5305 = inttoptr i64 %5297 to double*
  %5306 = load double, double* %5305
  %5307 = fmul double %5301, %5306
  %5308 = bitcast i8* %5294 to double*
  store double %5307, double* %5308, align 1, !tbaa !2452
  %5309 = getelementptr inbounds i8, i8* %5294, i64 8
  %5310 = bitcast i8* %5309 to i64*
  store i64 %5304, i64* %5310, align 1, !tbaa !2452
  %5311 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5312 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5313 = bitcast %union.vec128_t* %XMM1 to i8*
  %5314 = load i64, i64* %PC
  %5315 = add i64 %5314, 4
  store i64 %5315, i64* %PC
  %5316 = bitcast i8* %5312 to double*
  %5317 = load double, double* %5316, align 1
  %5318 = getelementptr inbounds i8, i8* %5312, i64 8
  %5319 = bitcast i8* %5318 to i64*
  %5320 = load i64, i64* %5319, align 1
  %5321 = bitcast i8* %5313 to double*
  %5322 = load double, double* %5321, align 1
  %5323 = fadd double %5317, %5322
  %5324 = bitcast i8* %5311 to double*
  store double %5323, double* %5324, align 1, !tbaa !2452
  %5325 = getelementptr inbounds i8, i8* %5311, i64 8
  %5326 = bitcast i8* %5325 to i64*
  store i64 %5320, i64* %5326, align 1, !tbaa !2452
  %5327 = load i64, i64* %RBP
  %5328 = sub i64 %5327, 16
  %5329 = load i64, i64* %PC
  %5330 = add i64 %5329, 4
  store i64 %5330, i64* %PC
  %5331 = inttoptr i64 %5328 to i64*
  %5332 = load i64, i64* %5331
  store i64 %5332, i64* %RAX, align 8, !tbaa !2428
  %5333 = load i64, i64* %RBP
  %5334 = sub i64 %5333, 40
  %5335 = load i64, i64* %PC
  %5336 = add i64 %5335, 3
  store i64 %5336, i64* %PC
  %5337 = inttoptr i64 %5334 to i32*
  %5338 = load i32, i32* %5337
  %5339 = zext i32 %5338 to i64
  store i64 %5339, i64* %RCX, align 8, !tbaa !2428
  %5340 = load i64, i64* %RCX
  %5341 = load i64, i64* %PC
  %5342 = add i64 %5341, 3
  store i64 %5342, i64* %PC
  %5343 = trunc i64 %5340 to i32
  %5344 = add i32 1, %5343
  %5345 = zext i32 %5344 to i64
  store i64 %5345, i64* %RCX, align 8, !tbaa !2428
  %5346 = icmp ult i32 %5344, %5343
  %5347 = icmp ult i32 %5344, 1
  %5348 = or i1 %5346, %5347
  %5349 = zext i1 %5348 to i8
  %5350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5349, i8* %5350, align 1, !tbaa !2432
  %5351 = and i32 %5344, 255
  %5352 = call i32 @llvm.ctpop.i32(i32 %5351) #17
  %5353 = trunc i32 %5352 to i8
  %5354 = and i8 %5353, 1
  %5355 = xor i8 %5354, 1
  %5356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5355, i8* %5356, align 1, !tbaa !2446
  %5357 = xor i64 1, %5340
  %5358 = trunc i64 %5357 to i32
  %5359 = xor i32 %5358, %5344
  %5360 = lshr i32 %5359, 4
  %5361 = trunc i32 %5360 to i8
  %5362 = and i8 %5361, 1
  %5363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5362, i8* %5363, align 1, !tbaa !2447
  %5364 = icmp eq i32 %5344, 0
  %5365 = zext i1 %5364 to i8
  %5366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5365, i8* %5366, align 1, !tbaa !2448
  %5367 = lshr i32 %5344, 31
  %5368 = trunc i32 %5367 to i8
  %5369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5368, i8* %5369, align 1, !tbaa !2449
  %5370 = lshr i32 %5343, 31
  %5371 = xor i32 %5367, %5370
  %5372 = add nuw nsw i32 %5371, %5367
  %5373 = icmp eq i32 %5372, 2
  %5374 = zext i1 %5373 to i8
  %5375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5374, i8* %5375, align 1, !tbaa !2450
  %5376 = load i32, i32* %ECX
  %5377 = zext i32 %5376 to i64
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 3
  store i64 %5379, i64* %PC
  %5380 = shl i64 %5377, 32
  %5381 = ashr exact i64 %5380, 32
  store i64 %5381, i64* %RDX, align 8, !tbaa !2428
  %5382 = load i64, i64* %RAX
  %5383 = load i64, i64* %RDX
  %5384 = mul i64 %5383, 8
  %5385 = add i64 %5384, %5382
  %5386 = bitcast %union.vec128_t* %XMM0 to i8*
  %5387 = load i64, i64* %PC
  %5388 = add i64 %5387, 5
  store i64 %5388, i64* %PC
  %5389 = bitcast i8* %5386 to double*
  %5390 = load double, double* %5389, align 1
  %5391 = inttoptr i64 %5385 to double*
  store double %5390, double* %5391
  %5392 = load i64, i64* %RBP
  %5393 = sub i64 %5392, 28
  %5394 = load i64, i64* %PC
  %5395 = add i64 %5394, 3
  store i64 %5395, i64* %PC
  %5396 = inttoptr i64 %5393 to i32*
  %5397 = load i32, i32* %5396
  %5398 = zext i32 %5397 to i64
  store i64 %5398, i64* %RAX, align 8, !tbaa !2428
  %5399 = load i64, i64* %RAX
  %5400 = load i64, i64* %PC
  %5401 = add i64 %5400, 3
  store i64 %5401, i64* %PC
  %5402 = trunc i64 %5399 to i32
  %5403 = add i32 2, %5402
  %5404 = zext i32 %5403 to i64
  store i64 %5404, i64* %RAX, align 8, !tbaa !2428
  %5405 = icmp ult i32 %5403, %5402
  %5406 = icmp ult i32 %5403, 2
  %5407 = or i1 %5405, %5406
  %5408 = zext i1 %5407 to i8
  %5409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5408, i8* %5409, align 1, !tbaa !2432
  %5410 = and i32 %5403, 255
  %5411 = call i32 @llvm.ctpop.i32(i32 %5410) #17
  %5412 = trunc i32 %5411 to i8
  %5413 = and i8 %5412, 1
  %5414 = xor i8 %5413, 1
  %5415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5414, i8* %5415, align 1, !tbaa !2446
  %5416 = xor i64 2, %5399
  %5417 = trunc i64 %5416 to i32
  %5418 = xor i32 %5417, %5403
  %5419 = lshr i32 %5418, 4
  %5420 = trunc i32 %5419 to i8
  %5421 = and i8 %5420, 1
  %5422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5421, i8* %5422, align 1, !tbaa !2447
  %5423 = icmp eq i32 %5403, 0
  %5424 = zext i1 %5423 to i8
  %5425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5424, i8* %5425, align 1, !tbaa !2448
  %5426 = lshr i32 %5403, 31
  %5427 = trunc i32 %5426 to i8
  %5428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5427, i8* %5428, align 1, !tbaa !2449
  %5429 = lshr i32 %5402, 31
  %5430 = xor i32 %5426, %5429
  %5431 = add nuw nsw i32 %5430, %5426
  %5432 = icmp eq i32 %5431, 2
  %5433 = zext i1 %5432 to i8
  %5434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5433, i8* %5434, align 1, !tbaa !2450
  %5435 = load i64, i64* %RBP
  %5436 = sub i64 %5435, 28
  %5437 = load i32, i32* %EAX
  %5438 = zext i32 %5437 to i64
  %5439 = load i64, i64* %PC
  %5440 = add i64 %5439, 3
  store i64 %5440, i64* %PC
  %5441 = inttoptr i64 %5436 to i32*
  store i32 %5437, i32* %5441
  %5442 = load i64, i64* %PC
  %5443 = sub i64 %5442, 822
  %5444 = load i64, i64* %PC
  %5445 = add i64 %5444, 5
  store i64 %5445, i64* %PC
  %5446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5443, i64* %5446, align 8, !tbaa !2428
  br label %block_403cc0

block_403356:                                     ; preds = %block_403362, %block_403330
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_403330 ], [ %MEMORY.1, %block_403362 ]
  %5447 = load i64, i64* %RBP
  %5448 = sub i64 %5447, 28
  %5449 = load i64, i64* %PC
  %5450 = add i64 %5449, 3
  store i64 %5450, i64* %PC
  %5451 = inttoptr i64 %5448 to i32*
  %5452 = load i32, i32* %5451
  %5453 = zext i32 %5452 to i64
  store i64 %5453, i64* %RAX, align 8, !tbaa !2428
  %5454 = load i32, i32* %EAX
  %5455 = zext i32 %5454 to i64
  %5456 = load i64, i64* %RBP
  %5457 = sub i64 %5456, 8
  %5458 = load i64, i64* %PC
  %5459 = add i64 %5458, 3
  store i64 %5459, i64* %PC
  %5460 = inttoptr i64 %5457 to i32*
  %5461 = load i32, i32* %5460
  %5462 = sub i32 %5454, %5461
  %5463 = icmp ult i32 %5454, %5461
  %5464 = zext i1 %5463 to i8
  %5465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5464, i8* %5465, align 1, !tbaa !2432
  %5466 = and i32 %5462, 255
  %5467 = call i32 @llvm.ctpop.i32(i32 %5466) #17
  %5468 = trunc i32 %5467 to i8
  %5469 = and i8 %5468, 1
  %5470 = xor i8 %5469, 1
  %5471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5470, i8* %5471, align 1, !tbaa !2446
  %5472 = xor i32 %5461, %5454
  %5473 = xor i32 %5472, %5462
  %5474 = lshr i32 %5473, 4
  %5475 = trunc i32 %5474 to i8
  %5476 = and i8 %5475, 1
  %5477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5476, i8* %5477, align 1, !tbaa !2447
  %5478 = icmp eq i32 %5462, 0
  %5479 = zext i1 %5478 to i8
  %5480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5479, i8* %5480, align 1, !tbaa !2448
  %5481 = lshr i32 %5462, 31
  %5482 = trunc i32 %5481 to i8
  %5483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5482, i8* %5483, align 1, !tbaa !2449
  %5484 = lshr i32 %5454, 31
  %5485 = lshr i32 %5461, 31
  %5486 = xor i32 %5485, %5484
  %5487 = xor i32 %5481, %5484
  %5488 = add nuw nsw i32 %5487, %5486
  %5489 = icmp eq i32 %5488, 2
  %5490 = zext i1 %5489 to i8
  %5491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5490, i8* %5491, align 1, !tbaa !2450
  %5492 = load i64, i64* %PC
  %5493 = add i64 %5492, 593
  %5494 = load i64, i64* %PC
  %5495 = add i64 %5494, 6
  %5496 = load i64, i64* %PC
  %5497 = add i64 %5496, 6
  store i64 %5497, i64* %PC
  %5498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5499 = load i8, i8* %5498, align 1, !tbaa !2449
  %5500 = icmp ne i8 %5499, 0
  %5501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5502 = load i8, i8* %5501, align 1, !tbaa !2450
  %5503 = icmp ne i8 %5502, 0
  %5504 = xor i1 %5500, %5503
  %5505 = xor i1 %5504, true
  %5506 = zext i1 %5505 to i8
  store i8 %5506, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5508 = select i1 %5504, i64 %5495, i64 %5493
  store i64 %5508, i64* %5507, align 8, !tbaa !2428
  %5509 = load i8, i8* %BRANCH_TAKEN
  %5510 = icmp eq i8 %5509, 1
  %5511 = load i64, i64* %RBP
  br i1 %5510, label %block_4035ad, label %block_403362

block_403362:                                     ; preds = %block_403356
  %5512 = sub i64 %5511, 28
  %5513 = load i64, i64* %PC
  %5514 = add i64 %5513, 3
  store i64 %5514, i64* %PC
  %5515 = inttoptr i64 %5512 to i32*
  %5516 = load i32, i32* %5515
  %5517 = zext i32 %5516 to i64
  store i64 %5517, i64* %RAX, align 8, !tbaa !2428
  %5518 = load i64, i64* %RAX
  %5519 = load i64, i64* %RBP
  %5520 = sub i64 %5519, 8
  %5521 = load i64, i64* %PC
  %5522 = add i64 %5521, 3
  store i64 %5522, i64* %PC
  %5523 = trunc i64 %5518 to i32
  %5524 = inttoptr i64 %5520 to i32*
  %5525 = load i32, i32* %5524
  %5526 = add i32 %5525, %5523
  %5527 = zext i32 %5526 to i64
  store i64 %5527, i64* %RAX, align 8, !tbaa !2428
  %5528 = icmp ult i32 %5526, %5523
  %5529 = icmp ult i32 %5526, %5525
  %5530 = or i1 %5528, %5529
  %5531 = zext i1 %5530 to i8
  %5532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5531, i8* %5532, align 1, !tbaa !2432
  %5533 = and i32 %5526, 255
  %5534 = call i32 @llvm.ctpop.i32(i32 %5533) #17
  %5535 = trunc i32 %5534 to i8
  %5536 = and i8 %5535, 1
  %5537 = xor i8 %5536, 1
  %5538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5537, i8* %5538, align 1, !tbaa !2446
  %5539 = xor i32 %5525, %5523
  %5540 = xor i32 %5539, %5526
  %5541 = lshr i32 %5540, 4
  %5542 = trunc i32 %5541 to i8
  %5543 = and i8 %5542, 1
  %5544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5543, i8* %5544, align 1, !tbaa !2447
  %5545 = icmp eq i32 %5526, 0
  %5546 = zext i1 %5545 to i8
  %5547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5546, i8* %5547, align 1, !tbaa !2448
  %5548 = lshr i32 %5526, 31
  %5549 = trunc i32 %5548 to i8
  %5550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5549, i8* %5550, align 1, !tbaa !2449
  %5551 = lshr i32 %5523, 31
  %5552 = lshr i32 %5525, 31
  %5553 = xor i32 %5548, %5551
  %5554 = xor i32 %5548, %5552
  %5555 = add nuw nsw i32 %5553, %5554
  %5556 = icmp eq i32 %5555, 2
  %5557 = zext i1 %5556 to i8
  %5558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5557, i8* %5558, align 1, !tbaa !2450
  %5559 = load i64, i64* %RBP
  %5560 = sub i64 %5559, 32
  %5561 = load i32, i32* %EAX
  %5562 = zext i32 %5561 to i64
  %5563 = load i64, i64* %PC
  %5564 = add i64 %5563, 3
  store i64 %5564, i64* %PC
  %5565 = inttoptr i64 %5560 to i32*
  store i32 %5561, i32* %5565
  %5566 = load i64, i64* %RBP
  %5567 = sub i64 %5566, 32
  %5568 = load i64, i64* %PC
  %5569 = add i64 %5568, 3
  store i64 %5569, i64* %PC
  %5570 = inttoptr i64 %5567 to i32*
  %5571 = load i32, i32* %5570
  %5572 = zext i32 %5571 to i64
  store i64 %5572, i64* %RAX, align 8, !tbaa !2428
  %5573 = load i64, i64* %RAX
  %5574 = load i64, i64* %RBP
  %5575 = sub i64 %5574, 8
  %5576 = load i64, i64* %PC
  %5577 = add i64 %5576, 3
  store i64 %5577, i64* %PC
  %5578 = trunc i64 %5573 to i32
  %5579 = inttoptr i64 %5575 to i32*
  %5580 = load i32, i32* %5579
  %5581 = add i32 %5580, %5578
  %5582 = zext i32 %5581 to i64
  store i64 %5582, i64* %RAX, align 8, !tbaa !2428
  %5583 = icmp ult i32 %5581, %5578
  %5584 = icmp ult i32 %5581, %5580
  %5585 = or i1 %5583, %5584
  %5586 = zext i1 %5585 to i8
  %5587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5586, i8* %5587, align 1, !tbaa !2432
  %5588 = and i32 %5581, 255
  %5589 = call i32 @llvm.ctpop.i32(i32 %5588) #17
  %5590 = trunc i32 %5589 to i8
  %5591 = and i8 %5590, 1
  %5592 = xor i8 %5591, 1
  %5593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5592, i8* %5593, align 1, !tbaa !2446
  %5594 = xor i32 %5580, %5578
  %5595 = xor i32 %5594, %5581
  %5596 = lshr i32 %5595, 4
  %5597 = trunc i32 %5596 to i8
  %5598 = and i8 %5597, 1
  %5599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5598, i8* %5599, align 1, !tbaa !2447
  %5600 = icmp eq i32 %5581, 0
  %5601 = zext i1 %5600 to i8
  %5602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5601, i8* %5602, align 1, !tbaa !2448
  %5603 = lshr i32 %5581, 31
  %5604 = trunc i32 %5603 to i8
  %5605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5604, i8* %5605, align 1, !tbaa !2449
  %5606 = lshr i32 %5578, 31
  %5607 = lshr i32 %5580, 31
  %5608 = xor i32 %5603, %5606
  %5609 = xor i32 %5603, %5607
  %5610 = add nuw nsw i32 %5608, %5609
  %5611 = icmp eq i32 %5610, 2
  %5612 = zext i1 %5611 to i8
  %5613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5612, i8* %5613, align 1, !tbaa !2450
  %5614 = load i64, i64* %RBP
  %5615 = sub i64 %5614, 36
  %5616 = load i32, i32* %EAX
  %5617 = zext i32 %5616 to i64
  %5618 = load i64, i64* %PC
  %5619 = add i64 %5618, 3
  store i64 %5619, i64* %PC
  %5620 = inttoptr i64 %5615 to i32*
  store i32 %5616, i32* %5620
  %5621 = load i64, i64* %RBP
  %5622 = sub i64 %5621, 36
  %5623 = load i64, i64* %PC
  %5624 = add i64 %5623, 3
  store i64 %5624, i64* %PC
  %5625 = inttoptr i64 %5622 to i32*
  %5626 = load i32, i32* %5625
  %5627 = zext i32 %5626 to i64
  store i64 %5627, i64* %RAX, align 8, !tbaa !2428
  %5628 = load i64, i64* %RAX
  %5629 = load i64, i64* %RBP
  %5630 = sub i64 %5629, 8
  %5631 = load i64, i64* %PC
  %5632 = add i64 %5631, 3
  store i64 %5632, i64* %PC
  %5633 = trunc i64 %5628 to i32
  %5634 = inttoptr i64 %5630 to i32*
  %5635 = load i32, i32* %5634
  %5636 = add i32 %5635, %5633
  %5637 = zext i32 %5636 to i64
  store i64 %5637, i64* %RAX, align 8, !tbaa !2428
  %5638 = icmp ult i32 %5636, %5633
  %5639 = icmp ult i32 %5636, %5635
  %5640 = or i1 %5638, %5639
  %5641 = zext i1 %5640 to i8
  %5642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5641, i8* %5642, align 1, !tbaa !2432
  %5643 = and i32 %5636, 255
  %5644 = call i32 @llvm.ctpop.i32(i32 %5643) #17
  %5645 = trunc i32 %5644 to i8
  %5646 = and i8 %5645, 1
  %5647 = xor i8 %5646, 1
  %5648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5647, i8* %5648, align 1, !tbaa !2446
  %5649 = xor i32 %5635, %5633
  %5650 = xor i32 %5649, %5636
  %5651 = lshr i32 %5650, 4
  %5652 = trunc i32 %5651 to i8
  %5653 = and i8 %5652, 1
  %5654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5653, i8* %5654, align 1, !tbaa !2447
  %5655 = icmp eq i32 %5636, 0
  %5656 = zext i1 %5655 to i8
  %5657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5656, i8* %5657, align 1, !tbaa !2448
  %5658 = lshr i32 %5636, 31
  %5659 = trunc i32 %5658 to i8
  %5660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5659, i8* %5660, align 1, !tbaa !2449
  %5661 = lshr i32 %5633, 31
  %5662 = lshr i32 %5635, 31
  %5663 = xor i32 %5658, %5661
  %5664 = xor i32 %5658, %5662
  %5665 = add nuw nsw i32 %5663, %5664
  %5666 = icmp eq i32 %5665, 2
  %5667 = zext i1 %5666 to i8
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5667, i8* %5668, align 1, !tbaa !2450
  %5669 = load i64, i64* %RBP
  %5670 = sub i64 %5669, 40
  %5671 = load i32, i32* %EAX
  %5672 = zext i32 %5671 to i64
  %5673 = load i64, i64* %PC
  %5674 = add i64 %5673, 3
  store i64 %5674, i64* %PC
  %5675 = inttoptr i64 %5670 to i32*
  store i32 %5671, i32* %5675
  %5676 = load i64, i64* %RBP
  %5677 = sub i64 %5676, 16
  %5678 = load i64, i64* %PC
  %5679 = add i64 %5678, 4
  store i64 %5679, i64* %PC
  %5680 = inttoptr i64 %5677 to i64*
  %5681 = load i64, i64* %5680
  store i64 %5681, i64* %RCX, align 8, !tbaa !2428
  %5682 = load i64, i64* %RBP
  %5683 = sub i64 %5682, 28
  %5684 = load i64, i64* %PC
  %5685 = add i64 %5684, 4
  store i64 %5685, i64* %PC
  %5686 = inttoptr i64 %5683 to i32*
  %5687 = load i32, i32* %5686
  %5688 = sext i32 %5687 to i64
  store i64 %5688, i64* %RDX, align 8, !tbaa !2428
  %5689 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5690 = load i64, i64* %RCX
  %5691 = load i64, i64* %RDX
  %5692 = mul i64 %5691, 8
  %5693 = add i64 %5692, %5690
  %5694 = load i64, i64* %PC
  %5695 = add i64 %5694, 5
  store i64 %5695, i64* %PC
  %5696 = inttoptr i64 %5693 to double*
  %5697 = load double, double* %5696
  %5698 = bitcast i8* %5689 to double*
  store double %5697, double* %5698, align 1, !tbaa !2452
  %5699 = getelementptr inbounds i8, i8* %5689, i64 8
  %5700 = bitcast i8* %5699 to double*
  store double 0.000000e+00, double* %5700, align 1, !tbaa !2452
  %5701 = load i64, i64* %RBP
  %5702 = sub i64 %5701, 16
  %5703 = load i64, i64* %PC
  %5704 = add i64 %5703, 4
  store i64 %5704, i64* %PC
  %5705 = inttoptr i64 %5702 to i64*
  %5706 = load i64, i64* %5705
  store i64 %5706, i64* %RCX, align 8, !tbaa !2428
  %5707 = load i64, i64* %RBP
  %5708 = sub i64 %5707, 32
  %5709 = load i64, i64* %PC
  %5710 = add i64 %5709, 4
  store i64 %5710, i64* %PC
  %5711 = inttoptr i64 %5708 to i32*
  %5712 = load i32, i32* %5711
  %5713 = sext i32 %5712 to i64
  store i64 %5713, i64* %RDX, align 8, !tbaa !2428
  %5714 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5715 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5716 = load i64, i64* %RCX
  %5717 = load i64, i64* %RDX
  %5718 = mul i64 %5717, 8
  %5719 = add i64 %5718, %5716
  %5720 = load i64, i64* %PC
  %5721 = add i64 %5720, 5
  store i64 %5721, i64* %PC
  %5722 = bitcast i8* %5715 to double*
  %5723 = load double, double* %5722, align 1
  %5724 = getelementptr inbounds i8, i8* %5715, i64 8
  %5725 = bitcast i8* %5724 to i64*
  %5726 = load i64, i64* %5725, align 1
  %5727 = inttoptr i64 %5719 to double*
  %5728 = load double, double* %5727
  %5729 = fadd double %5723, %5728
  %5730 = bitcast i8* %5714 to double*
  store double %5729, double* %5730, align 1, !tbaa !2452
  %5731 = getelementptr inbounds i8, i8* %5714, i64 8
  %5732 = bitcast i8* %5731 to i64*
  store i64 %5726, i64* %5732, align 1, !tbaa !2452
  %5733 = load i64, i64* %RBP
  %5734 = sub i64 %5733, 120
  %5735 = bitcast %union.vec128_t* %XMM0 to i8*
  %5736 = load i64, i64* %PC
  %5737 = add i64 %5736, 5
  store i64 %5737, i64* %PC
  %5738 = bitcast i8* %5735 to double*
  %5739 = load double, double* %5738, align 1
  %5740 = inttoptr i64 %5734 to double*
  store double %5739, double* %5740
  %5741 = load i64, i64* %RBP
  %5742 = sub i64 %5741, 16
  %5743 = load i64, i64* %PC
  %5744 = add i64 %5743, 4
  store i64 %5744, i64* %PC
  %5745 = inttoptr i64 %5742 to i64*
  %5746 = load i64, i64* %5745
  store i64 %5746, i64* %RCX, align 8, !tbaa !2428
  %5747 = load i64, i64* %RBP
  %5748 = sub i64 %5747, 28
  %5749 = load i64, i64* %PC
  %5750 = add i64 %5749, 3
  store i64 %5750, i64* %PC
  %5751 = inttoptr i64 %5748 to i32*
  %5752 = load i32, i32* %5751
  %5753 = zext i32 %5752 to i64
  store i64 %5753, i64* %RAX, align 8, !tbaa !2428
  %5754 = load i64, i64* %RAX
  %5755 = load i64, i64* %PC
  %5756 = add i64 %5755, 3
  store i64 %5756, i64* %PC
  %5757 = trunc i64 %5754 to i32
  %5758 = add i32 1, %5757
  %5759 = zext i32 %5758 to i64
  store i64 %5759, i64* %RAX, align 8, !tbaa !2428
  %5760 = icmp ult i32 %5758, %5757
  %5761 = icmp ult i32 %5758, 1
  %5762 = or i1 %5760, %5761
  %5763 = zext i1 %5762 to i8
  %5764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5763, i8* %5764, align 1, !tbaa !2432
  %5765 = and i32 %5758, 255
  %5766 = call i32 @llvm.ctpop.i32(i32 %5765) #17
  %5767 = trunc i32 %5766 to i8
  %5768 = and i8 %5767, 1
  %5769 = xor i8 %5768, 1
  %5770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5769, i8* %5770, align 1, !tbaa !2446
  %5771 = xor i64 1, %5754
  %5772 = trunc i64 %5771 to i32
  %5773 = xor i32 %5772, %5758
  %5774 = lshr i32 %5773, 4
  %5775 = trunc i32 %5774 to i8
  %5776 = and i8 %5775, 1
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5776, i8* %5777, align 1, !tbaa !2447
  %5778 = icmp eq i32 %5758, 0
  %5779 = zext i1 %5778 to i8
  %5780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5779, i8* %5780, align 1, !tbaa !2448
  %5781 = lshr i32 %5758, 31
  %5782 = trunc i32 %5781 to i8
  %5783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5782, i8* %5783, align 1, !tbaa !2449
  %5784 = lshr i32 %5757, 31
  %5785 = xor i32 %5781, %5784
  %5786 = add nuw nsw i32 %5785, %5781
  %5787 = icmp eq i32 %5786, 2
  %5788 = zext i1 %5787 to i8
  %5789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5788, i8* %5789, align 1, !tbaa !2450
  %5790 = load i32, i32* %EAX
  %5791 = zext i32 %5790 to i64
  %5792 = load i64, i64* %PC
  %5793 = add i64 %5792, 3
  store i64 %5793, i64* %PC
  %5794 = shl i64 %5791, 32
  %5795 = ashr exact i64 %5794, 32
  store i64 %5795, i64* %RDX, align 8, !tbaa !2428
  %5796 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5797 = load i64, i64* %RCX
  %5798 = load i64, i64* %RDX
  %5799 = mul i64 %5798, 8
  %5800 = add i64 %5799, %5797
  %5801 = load i64, i64* %PC
  %5802 = add i64 %5801, 5
  store i64 %5802, i64* %PC
  %5803 = inttoptr i64 %5800 to double*
  %5804 = load double, double* %5803
  %5805 = bitcast i8* %5796 to double*
  store double %5804, double* %5805, align 1, !tbaa !2452
  %5806 = getelementptr inbounds i8, i8* %5796, i64 8
  %5807 = bitcast i8* %5806 to double*
  store double 0.000000e+00, double* %5807, align 1, !tbaa !2452
  %5808 = load i64, i64* %RBP
  %5809 = sub i64 %5808, 16
  %5810 = load i64, i64* %PC
  %5811 = add i64 %5810, 4
  store i64 %5811, i64* %PC
  %5812 = inttoptr i64 %5809 to i64*
  %5813 = load i64, i64* %5812
  store i64 %5813, i64* %RCX, align 8, !tbaa !2428
  %5814 = load i64, i64* %RBP
  %5815 = sub i64 %5814, 32
  %5816 = load i64, i64* %PC
  %5817 = add i64 %5816, 3
  store i64 %5817, i64* %PC
  %5818 = inttoptr i64 %5815 to i32*
  %5819 = load i32, i32* %5818
  %5820 = zext i32 %5819 to i64
  store i64 %5820, i64* %RAX, align 8, !tbaa !2428
  %5821 = load i64, i64* %RAX
  %5822 = load i64, i64* %PC
  %5823 = add i64 %5822, 3
  store i64 %5823, i64* %PC
  %5824 = trunc i64 %5821 to i32
  %5825 = add i32 1, %5824
  %5826 = zext i32 %5825 to i64
  store i64 %5826, i64* %RAX, align 8, !tbaa !2428
  %5827 = icmp ult i32 %5825, %5824
  %5828 = icmp ult i32 %5825, 1
  %5829 = or i1 %5827, %5828
  %5830 = zext i1 %5829 to i8
  %5831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5830, i8* %5831, align 1, !tbaa !2432
  %5832 = and i32 %5825, 255
  %5833 = call i32 @llvm.ctpop.i32(i32 %5832) #17
  %5834 = trunc i32 %5833 to i8
  %5835 = and i8 %5834, 1
  %5836 = xor i8 %5835, 1
  %5837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5836, i8* %5837, align 1, !tbaa !2446
  %5838 = xor i64 1, %5821
  %5839 = trunc i64 %5838 to i32
  %5840 = xor i32 %5839, %5825
  %5841 = lshr i32 %5840, 4
  %5842 = trunc i32 %5841 to i8
  %5843 = and i8 %5842, 1
  %5844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5843, i8* %5844, align 1, !tbaa !2447
  %5845 = icmp eq i32 %5825, 0
  %5846 = zext i1 %5845 to i8
  %5847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5846, i8* %5847, align 1, !tbaa !2448
  %5848 = lshr i32 %5825, 31
  %5849 = trunc i32 %5848 to i8
  %5850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5849, i8* %5850, align 1, !tbaa !2449
  %5851 = lshr i32 %5824, 31
  %5852 = xor i32 %5848, %5851
  %5853 = add nuw nsw i32 %5852, %5848
  %5854 = icmp eq i32 %5853, 2
  %5855 = zext i1 %5854 to i8
  %5856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5855, i8* %5856, align 1, !tbaa !2450
  %5857 = load i32, i32* %EAX
  %5858 = zext i32 %5857 to i64
  %5859 = load i64, i64* %PC
  %5860 = add i64 %5859, 3
  store i64 %5860, i64* %PC
  %5861 = shl i64 %5858, 32
  %5862 = ashr exact i64 %5861, 32
  store i64 %5862, i64* %RDX, align 8, !tbaa !2428
  %5863 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5864 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5865 = load i64, i64* %RCX
  %5866 = load i64, i64* %RDX
  %5867 = mul i64 %5866, 8
  %5868 = add i64 %5867, %5865
  %5869 = load i64, i64* %PC
  %5870 = add i64 %5869, 5
  store i64 %5870, i64* %PC
  %5871 = bitcast i8* %5864 to double*
  %5872 = load double, double* %5871, align 1
  %5873 = getelementptr inbounds i8, i8* %5864, i64 8
  %5874 = bitcast i8* %5873 to i64*
  %5875 = load i64, i64* %5874, align 1
  %5876 = inttoptr i64 %5868 to double*
  %5877 = load double, double* %5876
  %5878 = fadd double %5872, %5877
  %5879 = bitcast i8* %5863 to double*
  store double %5878, double* %5879, align 1, !tbaa !2452
  %5880 = getelementptr inbounds i8, i8* %5863, i64 8
  %5881 = bitcast i8* %5880 to i64*
  store i64 %5875, i64* %5881, align 1, !tbaa !2452
  %5882 = load i64, i64* %RBP
  %5883 = sub i64 %5882, 128
  %5884 = bitcast %union.vec128_t* %XMM0 to i8*
  %5885 = load i64, i64* %PC
  %5886 = add i64 %5885, 5
  store i64 %5886, i64* %PC
  %5887 = bitcast i8* %5884 to double*
  %5888 = load double, double* %5887, align 1
  %5889 = inttoptr i64 %5883 to double*
  store double %5888, double* %5889
  %5890 = load i64, i64* %RBP
  %5891 = sub i64 %5890, 16
  %5892 = load i64, i64* %PC
  %5893 = add i64 %5892, 4
  store i64 %5893, i64* %PC
  %5894 = inttoptr i64 %5891 to i64*
  %5895 = load i64, i64* %5894
  store i64 %5895, i64* %RCX, align 8, !tbaa !2428
  %5896 = load i64, i64* %RBP
  %5897 = sub i64 %5896, 28
  %5898 = load i64, i64* %PC
  %5899 = add i64 %5898, 4
  store i64 %5899, i64* %PC
  %5900 = inttoptr i64 %5897 to i32*
  %5901 = load i32, i32* %5900
  %5902 = sext i32 %5901 to i64
  store i64 %5902, i64* %RDX, align 8, !tbaa !2428
  %5903 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5904 = load i64, i64* %RCX
  %5905 = load i64, i64* %RDX
  %5906 = mul i64 %5905, 8
  %5907 = add i64 %5906, %5904
  %5908 = load i64, i64* %PC
  %5909 = add i64 %5908, 5
  store i64 %5909, i64* %PC
  %5910 = inttoptr i64 %5907 to double*
  %5911 = load double, double* %5910
  %5912 = bitcast i8* %5903 to double*
  store double %5911, double* %5912, align 1, !tbaa !2452
  %5913 = getelementptr inbounds i8, i8* %5903, i64 8
  %5914 = bitcast i8* %5913 to double*
  store double 0.000000e+00, double* %5914, align 1, !tbaa !2452
  %5915 = load i64, i64* %RBP
  %5916 = sub i64 %5915, 16
  %5917 = load i64, i64* %PC
  %5918 = add i64 %5917, 4
  store i64 %5918, i64* %PC
  %5919 = inttoptr i64 %5916 to i64*
  %5920 = load i64, i64* %5919
  store i64 %5920, i64* %RCX, align 8, !tbaa !2428
  %5921 = load i64, i64* %RBP
  %5922 = sub i64 %5921, 32
  %5923 = load i64, i64* %PC
  %5924 = add i64 %5923, 4
  store i64 %5924, i64* %PC
  %5925 = inttoptr i64 %5922 to i32*
  %5926 = load i32, i32* %5925
  %5927 = sext i32 %5926 to i64
  store i64 %5927, i64* %RDX, align 8, !tbaa !2428
  %5928 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5929 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5930 = load i64, i64* %RCX
  %5931 = load i64, i64* %RDX
  %5932 = mul i64 %5931, 8
  %5933 = add i64 %5932, %5930
  %5934 = load i64, i64* %PC
  %5935 = add i64 %5934, 5
  store i64 %5935, i64* %PC
  %5936 = bitcast i8* %5929 to double*
  %5937 = load double, double* %5936, align 1
  %5938 = getelementptr inbounds i8, i8* %5929, i64 8
  %5939 = bitcast i8* %5938 to i64*
  %5940 = load i64, i64* %5939, align 1
  %5941 = inttoptr i64 %5933 to double*
  %5942 = load double, double* %5941
  %5943 = fsub double %5937, %5942
  %5944 = bitcast i8* %5928 to double*
  store double %5943, double* %5944, align 1, !tbaa !2452
  %5945 = getelementptr inbounds i8, i8* %5928, i64 8
  %5946 = bitcast i8* %5945 to i64*
  store i64 %5940, i64* %5946, align 1, !tbaa !2452
  %5947 = load i64, i64* %RBP
  %5948 = sub i64 %5947, 136
  %5949 = bitcast %union.vec128_t* %XMM0 to i8*
  %5950 = load i64, i64* %PC
  %5951 = add i64 %5950, 8
  store i64 %5951, i64* %PC
  %5952 = bitcast i8* %5949 to double*
  %5953 = load double, double* %5952, align 1
  %5954 = inttoptr i64 %5948 to double*
  store double %5953, double* %5954
  %5955 = load i64, i64* %RBP
  %5956 = sub i64 %5955, 16
  %5957 = load i64, i64* %PC
  %5958 = add i64 %5957, 4
  store i64 %5958, i64* %PC
  %5959 = inttoptr i64 %5956 to i64*
  %5960 = load i64, i64* %5959
  store i64 %5960, i64* %RCX, align 8, !tbaa !2428
  %5961 = load i64, i64* %RBP
  %5962 = sub i64 %5961, 28
  %5963 = load i64, i64* %PC
  %5964 = add i64 %5963, 3
  store i64 %5964, i64* %PC
  %5965 = inttoptr i64 %5962 to i32*
  %5966 = load i32, i32* %5965
  %5967 = zext i32 %5966 to i64
  store i64 %5967, i64* %RAX, align 8, !tbaa !2428
  %5968 = load i64, i64* %RAX
  %5969 = load i64, i64* %PC
  %5970 = add i64 %5969, 3
  store i64 %5970, i64* %PC
  %5971 = trunc i64 %5968 to i32
  %5972 = add i32 1, %5971
  %5973 = zext i32 %5972 to i64
  store i64 %5973, i64* %RAX, align 8, !tbaa !2428
  %5974 = icmp ult i32 %5972, %5971
  %5975 = icmp ult i32 %5972, 1
  %5976 = or i1 %5974, %5975
  %5977 = zext i1 %5976 to i8
  %5978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5977, i8* %5978, align 1, !tbaa !2432
  %5979 = and i32 %5972, 255
  %5980 = call i32 @llvm.ctpop.i32(i32 %5979) #17
  %5981 = trunc i32 %5980 to i8
  %5982 = and i8 %5981, 1
  %5983 = xor i8 %5982, 1
  %5984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5983, i8* %5984, align 1, !tbaa !2446
  %5985 = xor i64 1, %5968
  %5986 = trunc i64 %5985 to i32
  %5987 = xor i32 %5986, %5972
  %5988 = lshr i32 %5987, 4
  %5989 = trunc i32 %5988 to i8
  %5990 = and i8 %5989, 1
  %5991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5990, i8* %5991, align 1, !tbaa !2447
  %5992 = icmp eq i32 %5972, 0
  %5993 = zext i1 %5992 to i8
  %5994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5993, i8* %5994, align 1, !tbaa !2448
  %5995 = lshr i32 %5972, 31
  %5996 = trunc i32 %5995 to i8
  %5997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5996, i8* %5997, align 1, !tbaa !2449
  %5998 = lshr i32 %5971, 31
  %5999 = xor i32 %5995, %5998
  %6000 = add nuw nsw i32 %5999, %5995
  %6001 = icmp eq i32 %6000, 2
  %6002 = zext i1 %6001 to i8
  %6003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6002, i8* %6003, align 1, !tbaa !2450
  %6004 = load i32, i32* %EAX
  %6005 = zext i32 %6004 to i64
  %6006 = load i64, i64* %PC
  %6007 = add i64 %6006, 3
  store i64 %6007, i64* %PC
  %6008 = shl i64 %6005, 32
  %6009 = ashr exact i64 %6008, 32
  store i64 %6009, i64* %RDX, align 8, !tbaa !2428
  %6010 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6011 = load i64, i64* %RCX
  %6012 = load i64, i64* %RDX
  %6013 = mul i64 %6012, 8
  %6014 = add i64 %6013, %6011
  %6015 = load i64, i64* %PC
  %6016 = add i64 %6015, 5
  store i64 %6016, i64* %PC
  %6017 = inttoptr i64 %6014 to double*
  %6018 = load double, double* %6017
  %6019 = bitcast i8* %6010 to double*
  store double %6018, double* %6019, align 1, !tbaa !2452
  %6020 = getelementptr inbounds i8, i8* %6010, i64 8
  %6021 = bitcast i8* %6020 to double*
  store double 0.000000e+00, double* %6021, align 1, !tbaa !2452
  %6022 = load i64, i64* %RBP
  %6023 = sub i64 %6022, 16
  %6024 = load i64, i64* %PC
  %6025 = add i64 %6024, 4
  store i64 %6025, i64* %PC
  %6026 = inttoptr i64 %6023 to i64*
  %6027 = load i64, i64* %6026
  store i64 %6027, i64* %RCX, align 8, !tbaa !2428
  %6028 = load i64, i64* %RBP
  %6029 = sub i64 %6028, 32
  %6030 = load i64, i64* %PC
  %6031 = add i64 %6030, 3
  store i64 %6031, i64* %PC
  %6032 = inttoptr i64 %6029 to i32*
  %6033 = load i32, i32* %6032
  %6034 = zext i32 %6033 to i64
  store i64 %6034, i64* %RAX, align 8, !tbaa !2428
  %6035 = load i64, i64* %RAX
  %6036 = load i64, i64* %PC
  %6037 = add i64 %6036, 3
  store i64 %6037, i64* %PC
  %6038 = trunc i64 %6035 to i32
  %6039 = add i32 1, %6038
  %6040 = zext i32 %6039 to i64
  store i64 %6040, i64* %RAX, align 8, !tbaa !2428
  %6041 = icmp ult i32 %6039, %6038
  %6042 = icmp ult i32 %6039, 1
  %6043 = or i1 %6041, %6042
  %6044 = zext i1 %6043 to i8
  %6045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6044, i8* %6045, align 1, !tbaa !2432
  %6046 = and i32 %6039, 255
  %6047 = call i32 @llvm.ctpop.i32(i32 %6046) #17
  %6048 = trunc i32 %6047 to i8
  %6049 = and i8 %6048, 1
  %6050 = xor i8 %6049, 1
  %6051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6050, i8* %6051, align 1, !tbaa !2446
  %6052 = xor i64 1, %6035
  %6053 = trunc i64 %6052 to i32
  %6054 = xor i32 %6053, %6039
  %6055 = lshr i32 %6054, 4
  %6056 = trunc i32 %6055 to i8
  %6057 = and i8 %6056, 1
  %6058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6057, i8* %6058, align 1, !tbaa !2447
  %6059 = icmp eq i32 %6039, 0
  %6060 = zext i1 %6059 to i8
  %6061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6060, i8* %6061, align 1, !tbaa !2448
  %6062 = lshr i32 %6039, 31
  %6063 = trunc i32 %6062 to i8
  %6064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6063, i8* %6064, align 1, !tbaa !2449
  %6065 = lshr i32 %6038, 31
  %6066 = xor i32 %6062, %6065
  %6067 = add nuw nsw i32 %6066, %6062
  %6068 = icmp eq i32 %6067, 2
  %6069 = zext i1 %6068 to i8
  %6070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6069, i8* %6070, align 1, !tbaa !2450
  %6071 = load i32, i32* %EAX
  %6072 = zext i32 %6071 to i64
  %6073 = load i64, i64* %PC
  %6074 = add i64 %6073, 3
  store i64 %6074, i64* %PC
  %6075 = shl i64 %6072, 32
  %6076 = ashr exact i64 %6075, 32
  store i64 %6076, i64* %RDX, align 8, !tbaa !2428
  %6077 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6078 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6079 = load i64, i64* %RCX
  %6080 = load i64, i64* %RDX
  %6081 = mul i64 %6080, 8
  %6082 = add i64 %6081, %6079
  %6083 = load i64, i64* %PC
  %6084 = add i64 %6083, 5
  store i64 %6084, i64* %PC
  %6085 = bitcast i8* %6078 to double*
  %6086 = load double, double* %6085, align 1
  %6087 = getelementptr inbounds i8, i8* %6078, i64 8
  %6088 = bitcast i8* %6087 to i64*
  %6089 = load i64, i64* %6088, align 1
  %6090 = inttoptr i64 %6082 to double*
  %6091 = load double, double* %6090
  %6092 = fsub double %6086, %6091
  %6093 = bitcast i8* %6077 to double*
  store double %6092, double* %6093, align 1, !tbaa !2452
  %6094 = getelementptr inbounds i8, i8* %6077, i64 8
  %6095 = bitcast i8* %6094 to i64*
  store i64 %6089, i64* %6095, align 1, !tbaa !2452
  %6096 = load i64, i64* %RBP
  %6097 = sub i64 %6096, 144
  %6098 = bitcast %union.vec128_t* %XMM0 to i8*
  %6099 = load i64, i64* %PC
  %6100 = add i64 %6099, 8
  store i64 %6100, i64* %PC
  %6101 = bitcast i8* %6098 to double*
  %6102 = load double, double* %6101, align 1
  %6103 = inttoptr i64 %6097 to double*
  store double %6102, double* %6103
  %6104 = load i64, i64* %RBP
  %6105 = sub i64 %6104, 16
  %6106 = load i64, i64* %PC
  %6107 = add i64 %6106, 4
  store i64 %6107, i64* %PC
  %6108 = inttoptr i64 %6105 to i64*
  %6109 = load i64, i64* %6108
  store i64 %6109, i64* %RCX, align 8, !tbaa !2428
  %6110 = load i64, i64* %RBP
  %6111 = sub i64 %6110, 36
  %6112 = load i64, i64* %PC
  %6113 = add i64 %6112, 4
  store i64 %6113, i64* %PC
  %6114 = inttoptr i64 %6111 to i32*
  %6115 = load i32, i32* %6114
  %6116 = sext i32 %6115 to i64
  store i64 %6116, i64* %RDX, align 8, !tbaa !2428
  %6117 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6118 = load i64, i64* %RCX
  %6119 = load i64, i64* %RDX
  %6120 = mul i64 %6119, 8
  %6121 = add i64 %6120, %6118
  %6122 = load i64, i64* %PC
  %6123 = add i64 %6122, 5
  store i64 %6123, i64* %PC
  %6124 = inttoptr i64 %6121 to double*
  %6125 = load double, double* %6124
  %6126 = bitcast i8* %6117 to double*
  store double %6125, double* %6126, align 1, !tbaa !2452
  %6127 = getelementptr inbounds i8, i8* %6117, i64 8
  %6128 = bitcast i8* %6127 to double*
  store double 0.000000e+00, double* %6128, align 1, !tbaa !2452
  %6129 = load i64, i64* %RBP
  %6130 = sub i64 %6129, 16
  %6131 = load i64, i64* %PC
  %6132 = add i64 %6131, 4
  store i64 %6132, i64* %PC
  %6133 = inttoptr i64 %6130 to i64*
  %6134 = load i64, i64* %6133
  store i64 %6134, i64* %RCX, align 8, !tbaa !2428
  %6135 = load i64, i64* %RBP
  %6136 = sub i64 %6135, 40
  %6137 = load i64, i64* %PC
  %6138 = add i64 %6137, 4
  store i64 %6138, i64* %PC
  %6139 = inttoptr i64 %6136 to i32*
  %6140 = load i32, i32* %6139
  %6141 = sext i32 %6140 to i64
  store i64 %6141, i64* %RDX, align 8, !tbaa !2428
  %6142 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6143 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6144 = load i64, i64* %RCX
  %6145 = load i64, i64* %RDX
  %6146 = mul i64 %6145, 8
  %6147 = add i64 %6146, %6144
  %6148 = load i64, i64* %PC
  %6149 = add i64 %6148, 5
  store i64 %6149, i64* %PC
  %6150 = bitcast i8* %6143 to double*
  %6151 = load double, double* %6150, align 1
  %6152 = getelementptr inbounds i8, i8* %6143, i64 8
  %6153 = bitcast i8* %6152 to i64*
  %6154 = load i64, i64* %6153, align 1
  %6155 = inttoptr i64 %6147 to double*
  %6156 = load double, double* %6155
  %6157 = fadd double %6151, %6156
  %6158 = bitcast i8* %6142 to double*
  store double %6157, double* %6158, align 1, !tbaa !2452
  %6159 = getelementptr inbounds i8, i8* %6142, i64 8
  %6160 = bitcast i8* %6159 to i64*
  store i64 %6154, i64* %6160, align 1, !tbaa !2452
  %6161 = load i64, i64* %RBP
  %6162 = sub i64 %6161, 152
  %6163 = bitcast %union.vec128_t* %XMM0 to i8*
  %6164 = load i64, i64* %PC
  %6165 = add i64 %6164, 8
  store i64 %6165, i64* %PC
  %6166 = bitcast i8* %6163 to double*
  %6167 = load double, double* %6166, align 1
  %6168 = inttoptr i64 %6162 to double*
  store double %6167, double* %6168
  %6169 = load i64, i64* %RBP
  %6170 = sub i64 %6169, 16
  %6171 = load i64, i64* %PC
  %6172 = add i64 %6171, 4
  store i64 %6172, i64* %PC
  %6173 = inttoptr i64 %6170 to i64*
  %6174 = load i64, i64* %6173
  store i64 %6174, i64* %RCX, align 8, !tbaa !2428
  %6175 = load i64, i64* %RBP
  %6176 = sub i64 %6175, 36
  %6177 = load i64, i64* %PC
  %6178 = add i64 %6177, 3
  store i64 %6178, i64* %PC
  %6179 = inttoptr i64 %6176 to i32*
  %6180 = load i32, i32* %6179
  %6181 = zext i32 %6180 to i64
  store i64 %6181, i64* %RAX, align 8, !tbaa !2428
  %6182 = load i64, i64* %RAX
  %6183 = load i64, i64* %PC
  %6184 = add i64 %6183, 3
  store i64 %6184, i64* %PC
  %6185 = trunc i64 %6182 to i32
  %6186 = add i32 1, %6185
  %6187 = zext i32 %6186 to i64
  store i64 %6187, i64* %RAX, align 8, !tbaa !2428
  %6188 = icmp ult i32 %6186, %6185
  %6189 = icmp ult i32 %6186, 1
  %6190 = or i1 %6188, %6189
  %6191 = zext i1 %6190 to i8
  %6192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6191, i8* %6192, align 1, !tbaa !2432
  %6193 = and i32 %6186, 255
  %6194 = call i32 @llvm.ctpop.i32(i32 %6193) #17
  %6195 = trunc i32 %6194 to i8
  %6196 = and i8 %6195, 1
  %6197 = xor i8 %6196, 1
  %6198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6197, i8* %6198, align 1, !tbaa !2446
  %6199 = xor i64 1, %6182
  %6200 = trunc i64 %6199 to i32
  %6201 = xor i32 %6200, %6186
  %6202 = lshr i32 %6201, 4
  %6203 = trunc i32 %6202 to i8
  %6204 = and i8 %6203, 1
  %6205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6204, i8* %6205, align 1, !tbaa !2447
  %6206 = icmp eq i32 %6186, 0
  %6207 = zext i1 %6206 to i8
  %6208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6207, i8* %6208, align 1, !tbaa !2448
  %6209 = lshr i32 %6186, 31
  %6210 = trunc i32 %6209 to i8
  %6211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6210, i8* %6211, align 1, !tbaa !2449
  %6212 = lshr i32 %6185, 31
  %6213 = xor i32 %6209, %6212
  %6214 = add nuw nsw i32 %6213, %6209
  %6215 = icmp eq i32 %6214, 2
  %6216 = zext i1 %6215 to i8
  %6217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6216, i8* %6217, align 1, !tbaa !2450
  %6218 = load i32, i32* %EAX
  %6219 = zext i32 %6218 to i64
  %6220 = load i64, i64* %PC
  %6221 = add i64 %6220, 3
  store i64 %6221, i64* %PC
  %6222 = shl i64 %6219, 32
  %6223 = ashr exact i64 %6222, 32
  store i64 %6223, i64* %RDX, align 8, !tbaa !2428
  %6224 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6225 = load i64, i64* %RCX
  %6226 = load i64, i64* %RDX
  %6227 = mul i64 %6226, 8
  %6228 = add i64 %6227, %6225
  %6229 = load i64, i64* %PC
  %6230 = add i64 %6229, 5
  store i64 %6230, i64* %PC
  %6231 = inttoptr i64 %6228 to double*
  %6232 = load double, double* %6231
  %6233 = bitcast i8* %6224 to double*
  store double %6232, double* %6233, align 1, !tbaa !2452
  %6234 = getelementptr inbounds i8, i8* %6224, i64 8
  %6235 = bitcast i8* %6234 to double*
  store double 0.000000e+00, double* %6235, align 1, !tbaa !2452
  %6236 = load i64, i64* %RBP
  %6237 = sub i64 %6236, 16
  %6238 = load i64, i64* %PC
  %6239 = add i64 %6238, 4
  store i64 %6239, i64* %PC
  %6240 = inttoptr i64 %6237 to i64*
  %6241 = load i64, i64* %6240
  store i64 %6241, i64* %RCX, align 8, !tbaa !2428
  %6242 = load i64, i64* %RBP
  %6243 = sub i64 %6242, 40
  %6244 = load i64, i64* %PC
  %6245 = add i64 %6244, 3
  store i64 %6245, i64* %PC
  %6246 = inttoptr i64 %6243 to i32*
  %6247 = load i32, i32* %6246
  %6248 = zext i32 %6247 to i64
  store i64 %6248, i64* %RAX, align 8, !tbaa !2428
  %6249 = load i64, i64* %RAX
  %6250 = load i64, i64* %PC
  %6251 = add i64 %6250, 3
  store i64 %6251, i64* %PC
  %6252 = trunc i64 %6249 to i32
  %6253 = add i32 1, %6252
  %6254 = zext i32 %6253 to i64
  store i64 %6254, i64* %RAX, align 8, !tbaa !2428
  %6255 = icmp ult i32 %6253, %6252
  %6256 = icmp ult i32 %6253, 1
  %6257 = or i1 %6255, %6256
  %6258 = zext i1 %6257 to i8
  %6259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6258, i8* %6259, align 1, !tbaa !2432
  %6260 = and i32 %6253, 255
  %6261 = call i32 @llvm.ctpop.i32(i32 %6260) #17
  %6262 = trunc i32 %6261 to i8
  %6263 = and i8 %6262, 1
  %6264 = xor i8 %6263, 1
  %6265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6264, i8* %6265, align 1, !tbaa !2446
  %6266 = xor i64 1, %6249
  %6267 = trunc i64 %6266 to i32
  %6268 = xor i32 %6267, %6253
  %6269 = lshr i32 %6268, 4
  %6270 = trunc i32 %6269 to i8
  %6271 = and i8 %6270, 1
  %6272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6271, i8* %6272, align 1, !tbaa !2447
  %6273 = icmp eq i32 %6253, 0
  %6274 = zext i1 %6273 to i8
  %6275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6274, i8* %6275, align 1, !tbaa !2448
  %6276 = lshr i32 %6253, 31
  %6277 = trunc i32 %6276 to i8
  %6278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6277, i8* %6278, align 1, !tbaa !2449
  %6279 = lshr i32 %6252, 31
  %6280 = xor i32 %6276, %6279
  %6281 = add nuw nsw i32 %6280, %6276
  %6282 = icmp eq i32 %6281, 2
  %6283 = zext i1 %6282 to i8
  %6284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6283, i8* %6284, align 1, !tbaa !2450
  %6285 = load i32, i32* %EAX
  %6286 = zext i32 %6285 to i64
  %6287 = load i64, i64* %PC
  %6288 = add i64 %6287, 3
  store i64 %6288, i64* %PC
  %6289 = shl i64 %6286, 32
  %6290 = ashr exact i64 %6289, 32
  store i64 %6290, i64* %RDX, align 8, !tbaa !2428
  %6291 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6292 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6293 = load i64, i64* %RCX
  %6294 = load i64, i64* %RDX
  %6295 = mul i64 %6294, 8
  %6296 = add i64 %6295, %6293
  %6297 = load i64, i64* %PC
  %6298 = add i64 %6297, 5
  store i64 %6298, i64* %PC
  %6299 = bitcast i8* %6292 to double*
  %6300 = load double, double* %6299, align 1
  %6301 = getelementptr inbounds i8, i8* %6292, i64 8
  %6302 = bitcast i8* %6301 to i64*
  %6303 = load i64, i64* %6302, align 1
  %6304 = inttoptr i64 %6296 to double*
  %6305 = load double, double* %6304
  %6306 = fadd double %6300, %6305
  %6307 = bitcast i8* %6291 to double*
  store double %6306, double* %6307, align 1, !tbaa !2452
  %6308 = getelementptr inbounds i8, i8* %6291, i64 8
  %6309 = bitcast i8* %6308 to i64*
  store i64 %6303, i64* %6309, align 1, !tbaa !2452
  %6310 = load i64, i64* %RBP
  %6311 = sub i64 %6310, 160
  %6312 = bitcast %union.vec128_t* %XMM0 to i8*
  %6313 = load i64, i64* %PC
  %6314 = add i64 %6313, 8
  store i64 %6314, i64* %PC
  %6315 = bitcast i8* %6312 to double*
  %6316 = load double, double* %6315, align 1
  %6317 = inttoptr i64 %6311 to double*
  store double %6316, double* %6317
  %6318 = load i64, i64* %RBP
  %6319 = sub i64 %6318, 16
  %6320 = load i64, i64* %PC
  %6321 = add i64 %6320, 4
  store i64 %6321, i64* %PC
  %6322 = inttoptr i64 %6319 to i64*
  %6323 = load i64, i64* %6322
  store i64 %6323, i64* %RCX, align 8, !tbaa !2428
  %6324 = load i64, i64* %RBP
  %6325 = sub i64 %6324, 36
  %6326 = load i64, i64* %PC
  %6327 = add i64 %6326, 4
  store i64 %6327, i64* %PC
  %6328 = inttoptr i64 %6325 to i32*
  %6329 = load i32, i32* %6328
  %6330 = sext i32 %6329 to i64
  store i64 %6330, i64* %RDX, align 8, !tbaa !2428
  %6331 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6332 = load i64, i64* %RCX
  %6333 = load i64, i64* %RDX
  %6334 = mul i64 %6333, 8
  %6335 = add i64 %6334, %6332
  %6336 = load i64, i64* %PC
  %6337 = add i64 %6336, 5
  store i64 %6337, i64* %PC
  %6338 = inttoptr i64 %6335 to double*
  %6339 = load double, double* %6338
  %6340 = bitcast i8* %6331 to double*
  store double %6339, double* %6340, align 1, !tbaa !2452
  %6341 = getelementptr inbounds i8, i8* %6331, i64 8
  %6342 = bitcast i8* %6341 to double*
  store double 0.000000e+00, double* %6342, align 1, !tbaa !2452
  %6343 = load i64, i64* %RBP
  %6344 = sub i64 %6343, 16
  %6345 = load i64, i64* %PC
  %6346 = add i64 %6345, 4
  store i64 %6346, i64* %PC
  %6347 = inttoptr i64 %6344 to i64*
  %6348 = load i64, i64* %6347
  store i64 %6348, i64* %RCX, align 8, !tbaa !2428
  %6349 = load i64, i64* %RBP
  %6350 = sub i64 %6349, 40
  %6351 = load i64, i64* %PC
  %6352 = add i64 %6351, 4
  store i64 %6352, i64* %PC
  %6353 = inttoptr i64 %6350 to i32*
  %6354 = load i32, i32* %6353
  %6355 = sext i32 %6354 to i64
  store i64 %6355, i64* %RDX, align 8, !tbaa !2428
  %6356 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6357 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6358 = load i64, i64* %RCX
  %6359 = load i64, i64* %RDX
  %6360 = mul i64 %6359, 8
  %6361 = add i64 %6360, %6358
  %6362 = load i64, i64* %PC
  %6363 = add i64 %6362, 5
  store i64 %6363, i64* %PC
  %6364 = bitcast i8* %6357 to double*
  %6365 = load double, double* %6364, align 1
  %6366 = getelementptr inbounds i8, i8* %6357, i64 8
  %6367 = bitcast i8* %6366 to i64*
  %6368 = load i64, i64* %6367, align 1
  %6369 = inttoptr i64 %6361 to double*
  %6370 = load double, double* %6369
  %6371 = fsub double %6365, %6370
  %6372 = bitcast i8* %6356 to double*
  store double %6371, double* %6372, align 1, !tbaa !2452
  %6373 = getelementptr inbounds i8, i8* %6356, i64 8
  %6374 = bitcast i8* %6373 to i64*
  store i64 %6368, i64* %6374, align 1, !tbaa !2452
  %6375 = load i64, i64* %RBP
  %6376 = sub i64 %6375, 168
  %6377 = bitcast %union.vec128_t* %XMM0 to i8*
  %6378 = load i64, i64* %PC
  %6379 = add i64 %6378, 8
  store i64 %6379, i64* %PC
  %6380 = bitcast i8* %6377 to double*
  %6381 = load double, double* %6380, align 1
  %6382 = inttoptr i64 %6376 to double*
  store double %6381, double* %6382
  %6383 = load i64, i64* %RBP
  %6384 = sub i64 %6383, 16
  %6385 = load i64, i64* %PC
  %6386 = add i64 %6385, 4
  store i64 %6386, i64* %PC
  %6387 = inttoptr i64 %6384 to i64*
  %6388 = load i64, i64* %6387
  store i64 %6388, i64* %RCX, align 8, !tbaa !2428
  %6389 = load i64, i64* %RBP
  %6390 = sub i64 %6389, 36
  %6391 = load i64, i64* %PC
  %6392 = add i64 %6391, 3
  store i64 %6392, i64* %PC
  %6393 = inttoptr i64 %6390 to i32*
  %6394 = load i32, i32* %6393
  %6395 = zext i32 %6394 to i64
  store i64 %6395, i64* %RAX, align 8, !tbaa !2428
  %6396 = load i64, i64* %RAX
  %6397 = load i64, i64* %PC
  %6398 = add i64 %6397, 3
  store i64 %6398, i64* %PC
  %6399 = trunc i64 %6396 to i32
  %6400 = add i32 1, %6399
  %6401 = zext i32 %6400 to i64
  store i64 %6401, i64* %RAX, align 8, !tbaa !2428
  %6402 = icmp ult i32 %6400, %6399
  %6403 = icmp ult i32 %6400, 1
  %6404 = or i1 %6402, %6403
  %6405 = zext i1 %6404 to i8
  %6406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6405, i8* %6406, align 1, !tbaa !2432
  %6407 = and i32 %6400, 255
  %6408 = call i32 @llvm.ctpop.i32(i32 %6407) #17
  %6409 = trunc i32 %6408 to i8
  %6410 = and i8 %6409, 1
  %6411 = xor i8 %6410, 1
  %6412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6411, i8* %6412, align 1, !tbaa !2446
  %6413 = xor i64 1, %6396
  %6414 = trunc i64 %6413 to i32
  %6415 = xor i32 %6414, %6400
  %6416 = lshr i32 %6415, 4
  %6417 = trunc i32 %6416 to i8
  %6418 = and i8 %6417, 1
  %6419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6418, i8* %6419, align 1, !tbaa !2447
  %6420 = icmp eq i32 %6400, 0
  %6421 = zext i1 %6420 to i8
  %6422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6421, i8* %6422, align 1, !tbaa !2448
  %6423 = lshr i32 %6400, 31
  %6424 = trunc i32 %6423 to i8
  %6425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6424, i8* %6425, align 1, !tbaa !2449
  %6426 = lshr i32 %6399, 31
  %6427 = xor i32 %6423, %6426
  %6428 = add nuw nsw i32 %6427, %6423
  %6429 = icmp eq i32 %6428, 2
  %6430 = zext i1 %6429 to i8
  %6431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6430, i8* %6431, align 1, !tbaa !2450
  %6432 = load i32, i32* %EAX
  %6433 = zext i32 %6432 to i64
  %6434 = load i64, i64* %PC
  %6435 = add i64 %6434, 3
  store i64 %6435, i64* %PC
  %6436 = shl i64 %6433, 32
  %6437 = ashr exact i64 %6436, 32
  store i64 %6437, i64* %RDX, align 8, !tbaa !2428
  %6438 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6439 = load i64, i64* %RCX
  %6440 = load i64, i64* %RDX
  %6441 = mul i64 %6440, 8
  %6442 = add i64 %6441, %6439
  %6443 = load i64, i64* %PC
  %6444 = add i64 %6443, 5
  store i64 %6444, i64* %PC
  %6445 = inttoptr i64 %6442 to double*
  %6446 = load double, double* %6445
  %6447 = bitcast i8* %6438 to double*
  store double %6446, double* %6447, align 1, !tbaa !2452
  %6448 = getelementptr inbounds i8, i8* %6438, i64 8
  %6449 = bitcast i8* %6448 to double*
  store double 0.000000e+00, double* %6449, align 1, !tbaa !2452
  %6450 = load i64, i64* %RBP
  %6451 = sub i64 %6450, 16
  %6452 = load i64, i64* %PC
  %6453 = add i64 %6452, 4
  store i64 %6453, i64* %PC
  %6454 = inttoptr i64 %6451 to i64*
  %6455 = load i64, i64* %6454
  store i64 %6455, i64* %RCX, align 8, !tbaa !2428
  %6456 = load i64, i64* %RBP
  %6457 = sub i64 %6456, 40
  %6458 = load i64, i64* %PC
  %6459 = add i64 %6458, 3
  store i64 %6459, i64* %PC
  %6460 = inttoptr i64 %6457 to i32*
  %6461 = load i32, i32* %6460
  %6462 = zext i32 %6461 to i64
  store i64 %6462, i64* %RAX, align 8, !tbaa !2428
  %6463 = load i64, i64* %RAX
  %6464 = load i64, i64* %PC
  %6465 = add i64 %6464, 3
  store i64 %6465, i64* %PC
  %6466 = trunc i64 %6463 to i32
  %6467 = add i32 1, %6466
  %6468 = zext i32 %6467 to i64
  store i64 %6468, i64* %RAX, align 8, !tbaa !2428
  %6469 = icmp ult i32 %6467, %6466
  %6470 = icmp ult i32 %6467, 1
  %6471 = or i1 %6469, %6470
  %6472 = zext i1 %6471 to i8
  %6473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6472, i8* %6473, align 1, !tbaa !2432
  %6474 = and i32 %6467, 255
  %6475 = call i32 @llvm.ctpop.i32(i32 %6474) #17
  %6476 = trunc i32 %6475 to i8
  %6477 = and i8 %6476, 1
  %6478 = xor i8 %6477, 1
  %6479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6478, i8* %6479, align 1, !tbaa !2446
  %6480 = xor i64 1, %6463
  %6481 = trunc i64 %6480 to i32
  %6482 = xor i32 %6481, %6467
  %6483 = lshr i32 %6482, 4
  %6484 = trunc i32 %6483 to i8
  %6485 = and i8 %6484, 1
  %6486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6485, i8* %6486, align 1, !tbaa !2447
  %6487 = icmp eq i32 %6467, 0
  %6488 = zext i1 %6487 to i8
  %6489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6488, i8* %6489, align 1, !tbaa !2448
  %6490 = lshr i32 %6467, 31
  %6491 = trunc i32 %6490 to i8
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6491, i8* %6492, align 1, !tbaa !2449
  %6493 = lshr i32 %6466, 31
  %6494 = xor i32 %6490, %6493
  %6495 = add nuw nsw i32 %6494, %6490
  %6496 = icmp eq i32 %6495, 2
  %6497 = zext i1 %6496 to i8
  %6498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6497, i8* %6498, align 1, !tbaa !2450
  %6499 = load i32, i32* %EAX
  %6500 = zext i32 %6499 to i64
  %6501 = load i64, i64* %PC
  %6502 = add i64 %6501, 3
  store i64 %6502, i64* %PC
  %6503 = shl i64 %6500, 32
  %6504 = ashr exact i64 %6503, 32
  store i64 %6504, i64* %RDX, align 8, !tbaa !2428
  %6505 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6506 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6507 = load i64, i64* %RCX
  %6508 = load i64, i64* %RDX
  %6509 = mul i64 %6508, 8
  %6510 = add i64 %6509, %6507
  %6511 = load i64, i64* %PC
  %6512 = add i64 %6511, 5
  store i64 %6512, i64* %PC
  %6513 = bitcast i8* %6506 to double*
  %6514 = load double, double* %6513, align 1
  %6515 = getelementptr inbounds i8, i8* %6506, i64 8
  %6516 = bitcast i8* %6515 to i64*
  %6517 = load i64, i64* %6516, align 1
  %6518 = inttoptr i64 %6510 to double*
  %6519 = load double, double* %6518
  %6520 = fsub double %6514, %6519
  %6521 = bitcast i8* %6505 to double*
  store double %6520, double* %6521, align 1, !tbaa !2452
  %6522 = getelementptr inbounds i8, i8* %6505, i64 8
  %6523 = bitcast i8* %6522 to i64*
  store i64 %6517, i64* %6523, align 1, !tbaa !2452
  %6524 = load i64, i64* %RBP
  %6525 = sub i64 %6524, 176
  %6526 = bitcast %union.vec128_t* %XMM0 to i8*
  %6527 = load i64, i64* %PC
  %6528 = add i64 %6527, 8
  store i64 %6528, i64* %PC
  %6529 = bitcast i8* %6526 to double*
  %6530 = load double, double* %6529, align 1
  %6531 = inttoptr i64 %6525 to double*
  store double %6530, double* %6531
  %6532 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6533 = load i64, i64* %RBP
  %6534 = sub i64 %6533, 120
  %6535 = load i64, i64* %PC
  %6536 = add i64 %6535, 5
  store i64 %6536, i64* %PC
  %6537 = inttoptr i64 %6534 to double*
  %6538 = load double, double* %6537
  %6539 = bitcast i8* %6532 to double*
  store double %6538, double* %6539, align 1, !tbaa !2452
  %6540 = getelementptr inbounds i8, i8* %6532, i64 8
  %6541 = bitcast i8* %6540 to double*
  store double 0.000000e+00, double* %6541, align 1, !tbaa !2452
  %6542 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6543 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6544 = load i64, i64* %RBP
  %6545 = sub i64 %6544, 152
  %6546 = load i64, i64* %PC
  %6547 = add i64 %6546, 8
  store i64 %6547, i64* %PC
  %6548 = bitcast i8* %6543 to double*
  %6549 = load double, double* %6548, align 1
  %6550 = getelementptr inbounds i8, i8* %6543, i64 8
  %6551 = bitcast i8* %6550 to i64*
  %6552 = load i64, i64* %6551, align 1
  %6553 = inttoptr i64 %6545 to double*
  %6554 = load double, double* %6553
  %6555 = fadd double %6549, %6554
  %6556 = bitcast i8* %6542 to double*
  store double %6555, double* %6556, align 1, !tbaa !2452
  %6557 = getelementptr inbounds i8, i8* %6542, i64 8
  %6558 = bitcast i8* %6557 to i64*
  store i64 %6552, i64* %6558, align 1, !tbaa !2452
  %6559 = load i64, i64* %RBP
  %6560 = sub i64 %6559, 16
  %6561 = load i64, i64* %PC
  %6562 = add i64 %6561, 4
  store i64 %6562, i64* %PC
  %6563 = inttoptr i64 %6560 to i64*
  %6564 = load i64, i64* %6563
  store i64 %6564, i64* %RCX, align 8, !tbaa !2428
  %6565 = load i64, i64* %RBP
  %6566 = sub i64 %6565, 28
  %6567 = load i64, i64* %PC
  %6568 = add i64 %6567, 4
  store i64 %6568, i64* %PC
  %6569 = inttoptr i64 %6566 to i32*
  %6570 = load i32, i32* %6569
  %6571 = sext i32 %6570 to i64
  store i64 %6571, i64* %RDX, align 8, !tbaa !2428
  %6572 = load i64, i64* %RCX
  %6573 = load i64, i64* %RDX
  %6574 = mul i64 %6573, 8
  %6575 = add i64 %6574, %6572
  %6576 = bitcast %union.vec128_t* %XMM0 to i8*
  %6577 = load i64, i64* %PC
  %6578 = add i64 %6577, 5
  store i64 %6578, i64* %PC
  %6579 = bitcast i8* %6576 to double*
  %6580 = load double, double* %6579, align 1
  %6581 = inttoptr i64 %6575 to double*
  store double %6580, double* %6581
  %6582 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6583 = load i64, i64* %RBP
  %6584 = sub i64 %6583, 128
  %6585 = load i64, i64* %PC
  %6586 = add i64 %6585, 5
  store i64 %6586, i64* %PC
  %6587 = inttoptr i64 %6584 to double*
  %6588 = load double, double* %6587
  %6589 = bitcast i8* %6582 to double*
  store double %6588, double* %6589, align 1, !tbaa !2452
  %6590 = getelementptr inbounds i8, i8* %6582, i64 8
  %6591 = bitcast i8* %6590 to double*
  store double 0.000000e+00, double* %6591, align 1, !tbaa !2452
  %6592 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6593 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6594 = load i64, i64* %RBP
  %6595 = sub i64 %6594, 160
  %6596 = load i64, i64* %PC
  %6597 = add i64 %6596, 8
  store i64 %6597, i64* %PC
  %6598 = bitcast i8* %6593 to double*
  %6599 = load double, double* %6598, align 1
  %6600 = getelementptr inbounds i8, i8* %6593, i64 8
  %6601 = bitcast i8* %6600 to i64*
  %6602 = load i64, i64* %6601, align 1
  %6603 = inttoptr i64 %6595 to double*
  %6604 = load double, double* %6603
  %6605 = fadd double %6599, %6604
  %6606 = bitcast i8* %6592 to double*
  store double %6605, double* %6606, align 1, !tbaa !2452
  %6607 = getelementptr inbounds i8, i8* %6592, i64 8
  %6608 = bitcast i8* %6607 to i64*
  store i64 %6602, i64* %6608, align 1, !tbaa !2452
  %6609 = load i64, i64* %RBP
  %6610 = sub i64 %6609, 16
  %6611 = load i64, i64* %PC
  %6612 = add i64 %6611, 4
  store i64 %6612, i64* %PC
  %6613 = inttoptr i64 %6610 to i64*
  %6614 = load i64, i64* %6613
  store i64 %6614, i64* %RCX, align 8, !tbaa !2428
  %6615 = load i64, i64* %RBP
  %6616 = sub i64 %6615, 28
  %6617 = load i64, i64* %PC
  %6618 = add i64 %6617, 3
  store i64 %6618, i64* %PC
  %6619 = inttoptr i64 %6616 to i32*
  %6620 = load i32, i32* %6619
  %6621 = zext i32 %6620 to i64
  store i64 %6621, i64* %RAX, align 8, !tbaa !2428
  %6622 = load i64, i64* %RAX
  %6623 = load i64, i64* %PC
  %6624 = add i64 %6623, 3
  store i64 %6624, i64* %PC
  %6625 = trunc i64 %6622 to i32
  %6626 = add i32 1, %6625
  %6627 = zext i32 %6626 to i64
  store i64 %6627, i64* %RAX, align 8, !tbaa !2428
  %6628 = icmp ult i32 %6626, %6625
  %6629 = icmp ult i32 %6626, 1
  %6630 = or i1 %6628, %6629
  %6631 = zext i1 %6630 to i8
  %6632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6631, i8* %6632, align 1, !tbaa !2432
  %6633 = and i32 %6626, 255
  %6634 = call i32 @llvm.ctpop.i32(i32 %6633) #17
  %6635 = trunc i32 %6634 to i8
  %6636 = and i8 %6635, 1
  %6637 = xor i8 %6636, 1
  %6638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6637, i8* %6638, align 1, !tbaa !2446
  %6639 = xor i64 1, %6622
  %6640 = trunc i64 %6639 to i32
  %6641 = xor i32 %6640, %6626
  %6642 = lshr i32 %6641, 4
  %6643 = trunc i32 %6642 to i8
  %6644 = and i8 %6643, 1
  %6645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6644, i8* %6645, align 1, !tbaa !2447
  %6646 = icmp eq i32 %6626, 0
  %6647 = zext i1 %6646 to i8
  %6648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6647, i8* %6648, align 1, !tbaa !2448
  %6649 = lshr i32 %6626, 31
  %6650 = trunc i32 %6649 to i8
  %6651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6650, i8* %6651, align 1, !tbaa !2449
  %6652 = lshr i32 %6625, 31
  %6653 = xor i32 %6649, %6652
  %6654 = add nuw nsw i32 %6653, %6649
  %6655 = icmp eq i32 %6654, 2
  %6656 = zext i1 %6655 to i8
  %6657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6656, i8* %6657, align 1, !tbaa !2450
  %6658 = load i32, i32* %EAX
  %6659 = zext i32 %6658 to i64
  %6660 = load i64, i64* %PC
  %6661 = add i64 %6660, 3
  store i64 %6661, i64* %PC
  %6662 = shl i64 %6659, 32
  %6663 = ashr exact i64 %6662, 32
  store i64 %6663, i64* %RDX, align 8, !tbaa !2428
  %6664 = load i64, i64* %RCX
  %6665 = load i64, i64* %RDX
  %6666 = mul i64 %6665, 8
  %6667 = add i64 %6666, %6664
  %6668 = bitcast %union.vec128_t* %XMM0 to i8*
  %6669 = load i64, i64* %PC
  %6670 = add i64 %6669, 5
  store i64 %6670, i64* %PC
  %6671 = bitcast i8* %6668 to double*
  %6672 = load double, double* %6671, align 1
  %6673 = inttoptr i64 %6667 to double*
  store double %6672, double* %6673
  %6674 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6675 = load i64, i64* %RBP
  %6676 = sub i64 %6675, 120
  %6677 = load i64, i64* %PC
  %6678 = add i64 %6677, 5
  store i64 %6678, i64* %PC
  %6679 = inttoptr i64 %6676 to double*
  %6680 = load double, double* %6679
  %6681 = bitcast i8* %6674 to double*
  store double %6680, double* %6681, align 1, !tbaa !2452
  %6682 = getelementptr inbounds i8, i8* %6674, i64 8
  %6683 = bitcast i8* %6682 to double*
  store double 0.000000e+00, double* %6683, align 1, !tbaa !2452
  %6684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6685 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6686 = load i64, i64* %RBP
  %6687 = sub i64 %6686, 152
  %6688 = load i64, i64* %PC
  %6689 = add i64 %6688, 8
  store i64 %6689, i64* %PC
  %6690 = bitcast i8* %6685 to double*
  %6691 = load double, double* %6690, align 1
  %6692 = getelementptr inbounds i8, i8* %6685, i64 8
  %6693 = bitcast i8* %6692 to i64*
  %6694 = load i64, i64* %6693, align 1
  %6695 = inttoptr i64 %6687 to double*
  %6696 = load double, double* %6695
  %6697 = fsub double %6691, %6696
  %6698 = bitcast i8* %6684 to double*
  store double %6697, double* %6698, align 1, !tbaa !2452
  %6699 = getelementptr inbounds i8, i8* %6684, i64 8
  %6700 = bitcast i8* %6699 to i64*
  store i64 %6694, i64* %6700, align 1, !tbaa !2452
  %6701 = load i64, i64* %RBP
  %6702 = sub i64 %6701, 16
  %6703 = load i64, i64* %PC
  %6704 = add i64 %6703, 4
  store i64 %6704, i64* %PC
  %6705 = inttoptr i64 %6702 to i64*
  %6706 = load i64, i64* %6705
  store i64 %6706, i64* %RCX, align 8, !tbaa !2428
  %6707 = load i64, i64* %RBP
  %6708 = sub i64 %6707, 36
  %6709 = load i64, i64* %PC
  %6710 = add i64 %6709, 4
  store i64 %6710, i64* %PC
  %6711 = inttoptr i64 %6708 to i32*
  %6712 = load i32, i32* %6711
  %6713 = sext i32 %6712 to i64
  store i64 %6713, i64* %RDX, align 8, !tbaa !2428
  %6714 = load i64, i64* %RCX
  %6715 = load i64, i64* %RDX
  %6716 = mul i64 %6715, 8
  %6717 = add i64 %6716, %6714
  %6718 = bitcast %union.vec128_t* %XMM0 to i8*
  %6719 = load i64, i64* %PC
  %6720 = add i64 %6719, 5
  store i64 %6720, i64* %PC
  %6721 = bitcast i8* %6718 to double*
  %6722 = load double, double* %6721, align 1
  %6723 = inttoptr i64 %6717 to double*
  store double %6722, double* %6723
  %6724 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6725 = load i64, i64* %RBP
  %6726 = sub i64 %6725, 128
  %6727 = load i64, i64* %PC
  %6728 = add i64 %6727, 5
  store i64 %6728, i64* %PC
  %6729 = inttoptr i64 %6726 to double*
  %6730 = load double, double* %6729
  %6731 = bitcast i8* %6724 to double*
  store double %6730, double* %6731, align 1, !tbaa !2452
  %6732 = getelementptr inbounds i8, i8* %6724, i64 8
  %6733 = bitcast i8* %6732 to double*
  store double 0.000000e+00, double* %6733, align 1, !tbaa !2452
  %6734 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6735 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6736 = load i64, i64* %RBP
  %6737 = sub i64 %6736, 160
  %6738 = load i64, i64* %PC
  %6739 = add i64 %6738, 8
  store i64 %6739, i64* %PC
  %6740 = bitcast i8* %6735 to double*
  %6741 = load double, double* %6740, align 1
  %6742 = getelementptr inbounds i8, i8* %6735, i64 8
  %6743 = bitcast i8* %6742 to i64*
  %6744 = load i64, i64* %6743, align 1
  %6745 = inttoptr i64 %6737 to double*
  %6746 = load double, double* %6745
  %6747 = fsub double %6741, %6746
  %6748 = bitcast i8* %6734 to double*
  store double %6747, double* %6748, align 1, !tbaa !2452
  %6749 = getelementptr inbounds i8, i8* %6734, i64 8
  %6750 = bitcast i8* %6749 to i64*
  store i64 %6744, i64* %6750, align 1, !tbaa !2452
  %6751 = load i64, i64* %RBP
  %6752 = sub i64 %6751, 16
  %6753 = load i64, i64* %PC
  %6754 = add i64 %6753, 4
  store i64 %6754, i64* %PC
  %6755 = inttoptr i64 %6752 to i64*
  %6756 = load i64, i64* %6755
  store i64 %6756, i64* %RCX, align 8, !tbaa !2428
  %6757 = load i64, i64* %RBP
  %6758 = sub i64 %6757, 36
  %6759 = load i64, i64* %PC
  %6760 = add i64 %6759, 3
  store i64 %6760, i64* %PC
  %6761 = inttoptr i64 %6758 to i32*
  %6762 = load i32, i32* %6761
  %6763 = zext i32 %6762 to i64
  store i64 %6763, i64* %RAX, align 8, !tbaa !2428
  %6764 = load i64, i64* %RAX
  %6765 = load i64, i64* %PC
  %6766 = add i64 %6765, 3
  store i64 %6766, i64* %PC
  %6767 = trunc i64 %6764 to i32
  %6768 = add i32 1, %6767
  %6769 = zext i32 %6768 to i64
  store i64 %6769, i64* %RAX, align 8, !tbaa !2428
  %6770 = icmp ult i32 %6768, %6767
  %6771 = icmp ult i32 %6768, 1
  %6772 = or i1 %6770, %6771
  %6773 = zext i1 %6772 to i8
  %6774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6773, i8* %6774, align 1, !tbaa !2432
  %6775 = and i32 %6768, 255
  %6776 = call i32 @llvm.ctpop.i32(i32 %6775) #17
  %6777 = trunc i32 %6776 to i8
  %6778 = and i8 %6777, 1
  %6779 = xor i8 %6778, 1
  %6780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6779, i8* %6780, align 1, !tbaa !2446
  %6781 = xor i64 1, %6764
  %6782 = trunc i64 %6781 to i32
  %6783 = xor i32 %6782, %6768
  %6784 = lshr i32 %6783, 4
  %6785 = trunc i32 %6784 to i8
  %6786 = and i8 %6785, 1
  %6787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6786, i8* %6787, align 1, !tbaa !2447
  %6788 = icmp eq i32 %6768, 0
  %6789 = zext i1 %6788 to i8
  %6790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6789, i8* %6790, align 1, !tbaa !2448
  %6791 = lshr i32 %6768, 31
  %6792 = trunc i32 %6791 to i8
  %6793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6792, i8* %6793, align 1, !tbaa !2449
  %6794 = lshr i32 %6767, 31
  %6795 = xor i32 %6791, %6794
  %6796 = add nuw nsw i32 %6795, %6791
  %6797 = icmp eq i32 %6796, 2
  %6798 = zext i1 %6797 to i8
  %6799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6798, i8* %6799, align 1, !tbaa !2450
  %6800 = load i32, i32* %EAX
  %6801 = zext i32 %6800 to i64
  %6802 = load i64, i64* %PC
  %6803 = add i64 %6802, 3
  store i64 %6803, i64* %PC
  %6804 = shl i64 %6801, 32
  %6805 = ashr exact i64 %6804, 32
  store i64 %6805, i64* %RDX, align 8, !tbaa !2428
  %6806 = load i64, i64* %RCX
  %6807 = load i64, i64* %RDX
  %6808 = mul i64 %6807, 8
  %6809 = add i64 %6808, %6806
  %6810 = bitcast %union.vec128_t* %XMM0 to i8*
  %6811 = load i64, i64* %PC
  %6812 = add i64 %6811, 5
  store i64 %6812, i64* %PC
  %6813 = bitcast i8* %6810 to double*
  %6814 = load double, double* %6813, align 1
  %6815 = inttoptr i64 %6809 to double*
  store double %6814, double* %6815
  %6816 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6817 = load i64, i64* %RBP
  %6818 = sub i64 %6817, 136
  %6819 = load i64, i64* %PC
  %6820 = add i64 %6819, 8
  store i64 %6820, i64* %PC
  %6821 = inttoptr i64 %6818 to double*
  %6822 = load double, double* %6821
  %6823 = bitcast i8* %6816 to double*
  store double %6822, double* %6823, align 1, !tbaa !2452
  %6824 = getelementptr inbounds i8, i8* %6816, i64 8
  %6825 = bitcast i8* %6824 to double*
  store double 0.000000e+00, double* %6825, align 1, !tbaa !2452
  %6826 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6827 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6828 = load i64, i64* %RBP
  %6829 = sub i64 %6828, 176
  %6830 = load i64, i64* %PC
  %6831 = add i64 %6830, 8
  store i64 %6831, i64* %PC
  %6832 = bitcast i8* %6827 to double*
  %6833 = load double, double* %6832, align 1
  %6834 = getelementptr inbounds i8, i8* %6827, i64 8
  %6835 = bitcast i8* %6834 to i64*
  %6836 = load i64, i64* %6835, align 1
  %6837 = inttoptr i64 %6829 to double*
  %6838 = load double, double* %6837
  %6839 = fsub double %6833, %6838
  %6840 = bitcast i8* %6826 to double*
  store double %6839, double* %6840, align 1, !tbaa !2452
  %6841 = getelementptr inbounds i8, i8* %6826, i64 8
  %6842 = bitcast i8* %6841 to i64*
  store i64 %6836, i64* %6842, align 1, !tbaa !2452
  %6843 = load i64, i64* %RBP
  %6844 = sub i64 %6843, 16
  %6845 = load i64, i64* %PC
  %6846 = add i64 %6845, 4
  store i64 %6846, i64* %PC
  %6847 = inttoptr i64 %6844 to i64*
  %6848 = load i64, i64* %6847
  store i64 %6848, i64* %RCX, align 8, !tbaa !2428
  %6849 = load i64, i64* %RBP
  %6850 = sub i64 %6849, 32
  %6851 = load i64, i64* %PC
  %6852 = add i64 %6851, 4
  store i64 %6852, i64* %PC
  %6853 = inttoptr i64 %6850 to i32*
  %6854 = load i32, i32* %6853
  %6855 = sext i32 %6854 to i64
  store i64 %6855, i64* %RDX, align 8, !tbaa !2428
  %6856 = load i64, i64* %RCX
  %6857 = load i64, i64* %RDX
  %6858 = mul i64 %6857, 8
  %6859 = add i64 %6858, %6856
  %6860 = bitcast %union.vec128_t* %XMM0 to i8*
  %6861 = load i64, i64* %PC
  %6862 = add i64 %6861, 5
  store i64 %6862, i64* %PC
  %6863 = bitcast i8* %6860 to double*
  %6864 = load double, double* %6863, align 1
  %6865 = inttoptr i64 %6859 to double*
  store double %6864, double* %6865
  %6866 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6867 = load i64, i64* %RBP
  %6868 = sub i64 %6867, 144
  %6869 = load i64, i64* %PC
  %6870 = add i64 %6869, 8
  store i64 %6870, i64* %PC
  %6871 = inttoptr i64 %6868 to double*
  %6872 = load double, double* %6871
  %6873 = bitcast i8* %6866 to double*
  store double %6872, double* %6873, align 1, !tbaa !2452
  %6874 = getelementptr inbounds i8, i8* %6866, i64 8
  %6875 = bitcast i8* %6874 to double*
  store double 0.000000e+00, double* %6875, align 1, !tbaa !2452
  %6876 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6877 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6878 = load i64, i64* %RBP
  %6879 = sub i64 %6878, 168
  %6880 = load i64, i64* %PC
  %6881 = add i64 %6880, 8
  store i64 %6881, i64* %PC
  %6882 = bitcast i8* %6877 to double*
  %6883 = load double, double* %6882, align 1
  %6884 = getelementptr inbounds i8, i8* %6877, i64 8
  %6885 = bitcast i8* %6884 to i64*
  %6886 = load i64, i64* %6885, align 1
  %6887 = inttoptr i64 %6879 to double*
  %6888 = load double, double* %6887
  %6889 = fadd double %6883, %6888
  %6890 = bitcast i8* %6876 to double*
  store double %6889, double* %6890, align 1, !tbaa !2452
  %6891 = getelementptr inbounds i8, i8* %6876, i64 8
  %6892 = bitcast i8* %6891 to i64*
  store i64 %6886, i64* %6892, align 1, !tbaa !2452
  %6893 = load i64, i64* %RBP
  %6894 = sub i64 %6893, 16
  %6895 = load i64, i64* %PC
  %6896 = add i64 %6895, 4
  store i64 %6896, i64* %PC
  %6897 = inttoptr i64 %6894 to i64*
  %6898 = load i64, i64* %6897
  store i64 %6898, i64* %RCX, align 8, !tbaa !2428
  %6899 = load i64, i64* %RBP
  %6900 = sub i64 %6899, 32
  %6901 = load i64, i64* %PC
  %6902 = add i64 %6901, 3
  store i64 %6902, i64* %PC
  %6903 = inttoptr i64 %6900 to i32*
  %6904 = load i32, i32* %6903
  %6905 = zext i32 %6904 to i64
  store i64 %6905, i64* %RAX, align 8, !tbaa !2428
  %6906 = load i64, i64* %RAX
  %6907 = load i64, i64* %PC
  %6908 = add i64 %6907, 3
  store i64 %6908, i64* %PC
  %6909 = trunc i64 %6906 to i32
  %6910 = add i32 1, %6909
  %6911 = zext i32 %6910 to i64
  store i64 %6911, i64* %RAX, align 8, !tbaa !2428
  %6912 = icmp ult i32 %6910, %6909
  %6913 = icmp ult i32 %6910, 1
  %6914 = or i1 %6912, %6913
  %6915 = zext i1 %6914 to i8
  %6916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6915, i8* %6916, align 1, !tbaa !2432
  %6917 = and i32 %6910, 255
  %6918 = call i32 @llvm.ctpop.i32(i32 %6917) #17
  %6919 = trunc i32 %6918 to i8
  %6920 = and i8 %6919, 1
  %6921 = xor i8 %6920, 1
  %6922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6921, i8* %6922, align 1, !tbaa !2446
  %6923 = xor i64 1, %6906
  %6924 = trunc i64 %6923 to i32
  %6925 = xor i32 %6924, %6910
  %6926 = lshr i32 %6925, 4
  %6927 = trunc i32 %6926 to i8
  %6928 = and i8 %6927, 1
  %6929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6928, i8* %6929, align 1, !tbaa !2447
  %6930 = icmp eq i32 %6910, 0
  %6931 = zext i1 %6930 to i8
  %6932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6931, i8* %6932, align 1, !tbaa !2448
  %6933 = lshr i32 %6910, 31
  %6934 = trunc i32 %6933 to i8
  %6935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6934, i8* %6935, align 1, !tbaa !2449
  %6936 = lshr i32 %6909, 31
  %6937 = xor i32 %6933, %6936
  %6938 = add nuw nsw i32 %6937, %6933
  %6939 = icmp eq i32 %6938, 2
  %6940 = zext i1 %6939 to i8
  %6941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6940, i8* %6941, align 1, !tbaa !2450
  %6942 = load i32, i32* %EAX
  %6943 = zext i32 %6942 to i64
  %6944 = load i64, i64* %PC
  %6945 = add i64 %6944, 3
  store i64 %6945, i64* %PC
  %6946 = shl i64 %6943, 32
  %6947 = ashr exact i64 %6946, 32
  store i64 %6947, i64* %RDX, align 8, !tbaa !2428
  %6948 = load i64, i64* %RCX
  %6949 = load i64, i64* %RDX
  %6950 = mul i64 %6949, 8
  %6951 = add i64 %6950, %6948
  %6952 = bitcast %union.vec128_t* %XMM0 to i8*
  %6953 = load i64, i64* %PC
  %6954 = add i64 %6953, 5
  store i64 %6954, i64* %PC
  %6955 = bitcast i8* %6952 to double*
  %6956 = load double, double* %6955, align 1
  %6957 = inttoptr i64 %6951 to double*
  store double %6956, double* %6957
  %6958 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6959 = load i64, i64* %RBP
  %6960 = sub i64 %6959, 136
  %6961 = load i64, i64* %PC
  %6962 = add i64 %6961, 8
  store i64 %6962, i64* %PC
  %6963 = inttoptr i64 %6960 to double*
  %6964 = load double, double* %6963
  %6965 = bitcast i8* %6958 to double*
  store double %6964, double* %6965, align 1, !tbaa !2452
  %6966 = getelementptr inbounds i8, i8* %6958, i64 8
  %6967 = bitcast i8* %6966 to double*
  store double 0.000000e+00, double* %6967, align 1, !tbaa !2452
  %6968 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6969 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6970 = load i64, i64* %RBP
  %6971 = sub i64 %6970, 176
  %6972 = load i64, i64* %PC
  %6973 = add i64 %6972, 8
  store i64 %6973, i64* %PC
  %6974 = bitcast i8* %6969 to double*
  %6975 = load double, double* %6974, align 1
  %6976 = getelementptr inbounds i8, i8* %6969, i64 8
  %6977 = bitcast i8* %6976 to i64*
  %6978 = load i64, i64* %6977, align 1
  %6979 = inttoptr i64 %6971 to double*
  %6980 = load double, double* %6979
  %6981 = fadd double %6975, %6980
  %6982 = bitcast i8* %6968 to double*
  store double %6981, double* %6982, align 1, !tbaa !2452
  %6983 = getelementptr inbounds i8, i8* %6968, i64 8
  %6984 = bitcast i8* %6983 to i64*
  store i64 %6978, i64* %6984, align 1, !tbaa !2452
  %6985 = load i64, i64* %RBP
  %6986 = sub i64 %6985, 16
  %6987 = load i64, i64* %PC
  %6988 = add i64 %6987, 4
  store i64 %6988, i64* %PC
  %6989 = inttoptr i64 %6986 to i64*
  %6990 = load i64, i64* %6989
  store i64 %6990, i64* %RCX, align 8, !tbaa !2428
  %6991 = load i64, i64* %RBP
  %6992 = sub i64 %6991, 40
  %6993 = load i64, i64* %PC
  %6994 = add i64 %6993, 4
  store i64 %6994, i64* %PC
  %6995 = inttoptr i64 %6992 to i32*
  %6996 = load i32, i32* %6995
  %6997 = sext i32 %6996 to i64
  store i64 %6997, i64* %RDX, align 8, !tbaa !2428
  %6998 = load i64, i64* %RCX
  %6999 = load i64, i64* %RDX
  %7000 = mul i64 %6999, 8
  %7001 = add i64 %7000, %6998
  %7002 = bitcast %union.vec128_t* %XMM0 to i8*
  %7003 = load i64, i64* %PC
  %7004 = add i64 %7003, 5
  store i64 %7004, i64* %PC
  %7005 = bitcast i8* %7002 to double*
  %7006 = load double, double* %7005, align 1
  %7007 = inttoptr i64 %7001 to double*
  store double %7006, double* %7007
  %7008 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7009 = load i64, i64* %RBP
  %7010 = sub i64 %7009, 144
  %7011 = load i64, i64* %PC
  %7012 = add i64 %7011, 8
  store i64 %7012, i64* %PC
  %7013 = inttoptr i64 %7010 to double*
  %7014 = load double, double* %7013
  %7015 = bitcast i8* %7008 to double*
  store double %7014, double* %7015, align 1, !tbaa !2452
  %7016 = getelementptr inbounds i8, i8* %7008, i64 8
  %7017 = bitcast i8* %7016 to double*
  store double 0.000000e+00, double* %7017, align 1, !tbaa !2452
  %7018 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7019 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7020 = load i64, i64* %RBP
  %7021 = sub i64 %7020, 168
  %7022 = load i64, i64* %PC
  %7023 = add i64 %7022, 8
  store i64 %7023, i64* %PC
  %7024 = bitcast i8* %7019 to double*
  %7025 = load double, double* %7024, align 1
  %7026 = getelementptr inbounds i8, i8* %7019, i64 8
  %7027 = bitcast i8* %7026 to i64*
  %7028 = load i64, i64* %7027, align 1
  %7029 = inttoptr i64 %7021 to double*
  %7030 = load double, double* %7029
  %7031 = fsub double %7025, %7030
  %7032 = bitcast i8* %7018 to double*
  store double %7031, double* %7032, align 1, !tbaa !2452
  %7033 = getelementptr inbounds i8, i8* %7018, i64 8
  %7034 = bitcast i8* %7033 to i64*
  store i64 %7028, i64* %7034, align 1, !tbaa !2452
  %7035 = load i64, i64* %RBP
  %7036 = sub i64 %7035, 16
  %7037 = load i64, i64* %PC
  %7038 = add i64 %7037, 4
  store i64 %7038, i64* %PC
  %7039 = inttoptr i64 %7036 to i64*
  %7040 = load i64, i64* %7039
  store i64 %7040, i64* %RCX, align 8, !tbaa !2428
  %7041 = load i64, i64* %RBP
  %7042 = sub i64 %7041, 40
  %7043 = load i64, i64* %PC
  %7044 = add i64 %7043, 3
  store i64 %7044, i64* %PC
  %7045 = inttoptr i64 %7042 to i32*
  %7046 = load i32, i32* %7045
  %7047 = zext i32 %7046 to i64
  store i64 %7047, i64* %RAX, align 8, !tbaa !2428
  %7048 = load i64, i64* %RAX
  %7049 = load i64, i64* %PC
  %7050 = add i64 %7049, 3
  store i64 %7050, i64* %PC
  %7051 = trunc i64 %7048 to i32
  %7052 = add i32 1, %7051
  %7053 = zext i32 %7052 to i64
  store i64 %7053, i64* %RAX, align 8, !tbaa !2428
  %7054 = icmp ult i32 %7052, %7051
  %7055 = icmp ult i32 %7052, 1
  %7056 = or i1 %7054, %7055
  %7057 = zext i1 %7056 to i8
  %7058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7057, i8* %7058, align 1, !tbaa !2432
  %7059 = and i32 %7052, 255
  %7060 = call i32 @llvm.ctpop.i32(i32 %7059) #17
  %7061 = trunc i32 %7060 to i8
  %7062 = and i8 %7061, 1
  %7063 = xor i8 %7062, 1
  %7064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7063, i8* %7064, align 1, !tbaa !2446
  %7065 = xor i64 1, %7048
  %7066 = trunc i64 %7065 to i32
  %7067 = xor i32 %7066, %7052
  %7068 = lshr i32 %7067, 4
  %7069 = trunc i32 %7068 to i8
  %7070 = and i8 %7069, 1
  %7071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7070, i8* %7071, align 1, !tbaa !2447
  %7072 = icmp eq i32 %7052, 0
  %7073 = zext i1 %7072 to i8
  %7074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7073, i8* %7074, align 1, !tbaa !2448
  %7075 = lshr i32 %7052, 31
  %7076 = trunc i32 %7075 to i8
  %7077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7076, i8* %7077, align 1, !tbaa !2449
  %7078 = lshr i32 %7051, 31
  %7079 = xor i32 %7075, %7078
  %7080 = add nuw nsw i32 %7079, %7075
  %7081 = icmp eq i32 %7080, 2
  %7082 = zext i1 %7081 to i8
  %7083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7082, i8* %7083, align 1, !tbaa !2450
  %7084 = load i32, i32* %EAX
  %7085 = zext i32 %7084 to i64
  %7086 = load i64, i64* %PC
  %7087 = add i64 %7086, 3
  store i64 %7087, i64* %PC
  %7088 = shl i64 %7085, 32
  %7089 = ashr exact i64 %7088, 32
  store i64 %7089, i64* %RDX, align 8, !tbaa !2428
  %7090 = load i64, i64* %RCX
  %7091 = load i64, i64* %RDX
  %7092 = mul i64 %7091, 8
  %7093 = add i64 %7092, %7090
  %7094 = bitcast %union.vec128_t* %XMM0 to i8*
  %7095 = load i64, i64* %PC
  %7096 = add i64 %7095, 5
  store i64 %7096, i64* %PC
  %7097 = bitcast i8* %7094 to double*
  %7098 = load double, double* %7097, align 1
  %7099 = inttoptr i64 %7093 to double*
  store double %7098, double* %7099
  %7100 = load i64, i64* %RBP
  %7101 = sub i64 %7100, 28
  %7102 = load i64, i64* %PC
  %7103 = add i64 %7102, 3
  store i64 %7103, i64* %PC
  %7104 = inttoptr i64 %7101 to i32*
  %7105 = load i32, i32* %7104
  %7106 = zext i32 %7105 to i64
  store i64 %7106, i64* %RAX, align 8, !tbaa !2428
  %7107 = load i64, i64* %RAX
  %7108 = load i64, i64* %PC
  %7109 = add i64 %7108, 3
  store i64 %7109, i64* %PC
  %7110 = trunc i64 %7107 to i32
  %7111 = add i32 2, %7110
  %7112 = zext i32 %7111 to i64
  store i64 %7112, i64* %RAX, align 8, !tbaa !2428
  %7113 = icmp ult i32 %7111, %7110
  %7114 = icmp ult i32 %7111, 2
  %7115 = or i1 %7113, %7114
  %7116 = zext i1 %7115 to i8
  %7117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7116, i8* %7117, align 1, !tbaa !2432
  %7118 = and i32 %7111, 255
  %7119 = call i32 @llvm.ctpop.i32(i32 %7118) #17
  %7120 = trunc i32 %7119 to i8
  %7121 = and i8 %7120, 1
  %7122 = xor i8 %7121, 1
  %7123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7122, i8* %7123, align 1, !tbaa !2446
  %7124 = xor i64 2, %7107
  %7125 = trunc i64 %7124 to i32
  %7126 = xor i32 %7125, %7111
  %7127 = lshr i32 %7126, 4
  %7128 = trunc i32 %7127 to i8
  %7129 = and i8 %7128, 1
  %7130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7129, i8* %7130, align 1, !tbaa !2447
  %7131 = icmp eq i32 %7111, 0
  %7132 = zext i1 %7131 to i8
  %7133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7132, i8* %7133, align 1, !tbaa !2448
  %7134 = lshr i32 %7111, 31
  %7135 = trunc i32 %7134 to i8
  %7136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7135, i8* %7136, align 1, !tbaa !2449
  %7137 = lshr i32 %7110, 31
  %7138 = xor i32 %7134, %7137
  %7139 = add nuw nsw i32 %7138, %7134
  %7140 = icmp eq i32 %7139, 2
  %7141 = zext i1 %7140 to i8
  %7142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7141, i8* %7142, align 1, !tbaa !2450
  %7143 = load i64, i64* %RBP
  %7144 = sub i64 %7143, 28
  %7145 = load i32, i32* %EAX
  %7146 = zext i32 %7145 to i64
  %7147 = load i64, i64* %PC
  %7148 = add i64 %7147, 3
  store i64 %7148, i64* %PC
  %7149 = inttoptr i64 %7144 to i32*
  store i32 %7145, i32* %7149
  %7150 = load i64, i64* %PC
  %7151 = sub i64 %7150, 594
  %7152 = load i64, i64* %PC
  %7153 = add i64 %7152, 5
  store i64 %7153, i64* %PC
  %7154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7151, i64* %7154, align 8, !tbaa !2428
  br label %block_403356

block_403893:                                     ; preds = %block_403ffb, %block_40387d
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_40387d ], [ %MEMORY.0, %block_403ffb ]
  %7155 = load i64, i64* %RBP
  %7156 = sub i64 %7155, 44
  %7157 = load i64, i64* %PC
  %7158 = add i64 %7157, 3
  store i64 %7158, i64* %PC
  %7159 = inttoptr i64 %7156 to i32*
  %7160 = load i32, i32* %7159
  %7161 = zext i32 %7160 to i64
  store i64 %7161, i64* %RAX, align 8, !tbaa !2428
  %7162 = load i32, i32* %EAX
  %7163 = zext i32 %7162 to i64
  %7164 = load i64, i64* %RBP
  %7165 = sub i64 %7164, 4
  %7166 = load i64, i64* %PC
  %7167 = add i64 %7166, 3
  store i64 %7167, i64* %PC
  %7168 = inttoptr i64 %7165 to i32*
  %7169 = load i32, i32* %7168
  %7170 = sub i32 %7162, %7169
  %7171 = icmp ult i32 %7162, %7169
  %7172 = zext i1 %7171 to i8
  %7173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7172, i8* %7173, align 1, !tbaa !2432
  %7174 = and i32 %7170, 255
  %7175 = call i32 @llvm.ctpop.i32(i32 %7174) #17
  %7176 = trunc i32 %7175 to i8
  %7177 = and i8 %7176, 1
  %7178 = xor i8 %7177, 1
  %7179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7178, i8* %7179, align 1, !tbaa !2446
  %7180 = xor i32 %7169, %7162
  %7181 = xor i32 %7180, %7170
  %7182 = lshr i32 %7181, 4
  %7183 = trunc i32 %7182 to i8
  %7184 = and i8 %7183, 1
  %7185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7184, i8* %7185, align 1, !tbaa !2447
  %7186 = icmp eq i32 %7170, 0
  %7187 = zext i1 %7186 to i8
  %7188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7187, i8* %7188, align 1, !tbaa !2448
  %7189 = lshr i32 %7170, 31
  %7190 = trunc i32 %7189 to i8
  %7191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7190, i8* %7191, align 1, !tbaa !2449
  %7192 = lshr i32 %7162, 31
  %7193 = lshr i32 %7169, 31
  %7194 = xor i32 %7193, %7192
  %7195 = xor i32 %7189, %7192
  %7196 = add nuw nsw i32 %7195, %7194
  %7197 = icmp eq i32 %7196, 2
  %7198 = zext i1 %7197 to i8
  %7199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7198, i8* %7199, align 1, !tbaa !2450
  %7200 = load i64, i64* %PC
  %7201 = add i64 %7200, 1909
  %7202 = load i64, i64* %PC
  %7203 = add i64 %7202, 6
  %7204 = load i64, i64* %PC
  %7205 = add i64 %7204, 6
  store i64 %7205, i64* %PC
  %7206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7207 = load i8, i8* %7206, align 1, !tbaa !2449
  %7208 = icmp ne i8 %7207, 0
  %7209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7210 = load i8, i8* %7209, align 1, !tbaa !2450
  %7211 = icmp ne i8 %7210, 0
  %7212 = xor i1 %7208, %7211
  %7213 = xor i1 %7212, true
  %7214 = zext i1 %7213 to i8
  store i8 %7214, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7216 = select i1 %7212, i64 %7203, i64 %7201
  store i64 %7216, i64* %7215, align 8, !tbaa !2428
  %7217 = load i8, i8* %BRANCH_TAKEN
  %7218 = icmp eq i8 %7217, 1
  br i1 %7218, label %block_40400e, label %block_40389f

block_403951:                                     ; preds = %block_403940
  %7219 = load i64, i64* %RBP
  %7220 = sub i64 %7219, 28
  %7221 = load i64, i64* %PC
  %7222 = add i64 %7221, 3
  store i64 %7222, i64* %PC
  %7223 = inttoptr i64 %7220 to i32*
  %7224 = load i32, i32* %7223
  %7225 = zext i32 %7224 to i64
  store i64 %7225, i64* %RAX, align 8, !tbaa !2428
  %7226 = load i64, i64* %RAX
  %7227 = load i64, i64* %RBP
  %7228 = sub i64 %7227, 8
  %7229 = load i64, i64* %PC
  %7230 = add i64 %7229, 3
  store i64 %7230, i64* %PC
  %7231 = trunc i64 %7226 to i32
  %7232 = inttoptr i64 %7228 to i32*
  %7233 = load i32, i32* %7232
  %7234 = add i32 %7233, %7231
  %7235 = zext i32 %7234 to i64
  store i64 %7235, i64* %RAX, align 8, !tbaa !2428
  %7236 = icmp ult i32 %7234, %7231
  %7237 = icmp ult i32 %7234, %7233
  %7238 = or i1 %7236, %7237
  %7239 = zext i1 %7238 to i8
  %7240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7239, i8* %7240, align 1, !tbaa !2432
  %7241 = and i32 %7234, 255
  %7242 = call i32 @llvm.ctpop.i32(i32 %7241) #17
  %7243 = trunc i32 %7242 to i8
  %7244 = and i8 %7243, 1
  %7245 = xor i8 %7244, 1
  %7246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7245, i8* %7246, align 1, !tbaa !2446
  %7247 = xor i32 %7233, %7231
  %7248 = xor i32 %7247, %7234
  %7249 = lshr i32 %7248, 4
  %7250 = trunc i32 %7249 to i8
  %7251 = and i8 %7250, 1
  %7252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7251, i8* %7252, align 1, !tbaa !2447
  %7253 = icmp eq i32 %7234, 0
  %7254 = zext i1 %7253 to i8
  %7255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7254, i8* %7255, align 1, !tbaa !2448
  %7256 = lshr i32 %7234, 31
  %7257 = trunc i32 %7256 to i8
  %7258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7257, i8* %7258, align 1, !tbaa !2449
  %7259 = lshr i32 %7231, 31
  %7260 = lshr i32 %7233, 31
  %7261 = xor i32 %7256, %7259
  %7262 = xor i32 %7256, %7260
  %7263 = add nuw nsw i32 %7261, %7262
  %7264 = icmp eq i32 %7263, 2
  %7265 = zext i1 %7264 to i8
  %7266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7265, i8* %7266, align 1, !tbaa !2450
  %7267 = load i64, i64* %RBP
  %7268 = sub i64 %7267, 32
  %7269 = load i32, i32* %EAX
  %7270 = zext i32 %7269 to i64
  %7271 = load i64, i64* %PC
  %7272 = add i64 %7271, 3
  store i64 %7272, i64* %PC
  %7273 = inttoptr i64 %7268 to i32*
  store i32 %7269, i32* %7273
  %7274 = load i64, i64* %RBP
  %7275 = sub i64 %7274, 32
  %7276 = load i64, i64* %PC
  %7277 = add i64 %7276, 3
  store i64 %7277, i64* %PC
  %7278 = inttoptr i64 %7275 to i32*
  %7279 = load i32, i32* %7278
  %7280 = zext i32 %7279 to i64
  store i64 %7280, i64* %RAX, align 8, !tbaa !2428
  %7281 = load i64, i64* %RAX
  %7282 = load i64, i64* %RBP
  %7283 = sub i64 %7282, 8
  %7284 = load i64, i64* %PC
  %7285 = add i64 %7284, 3
  store i64 %7285, i64* %PC
  %7286 = trunc i64 %7281 to i32
  %7287 = inttoptr i64 %7283 to i32*
  %7288 = load i32, i32* %7287
  %7289 = add i32 %7288, %7286
  %7290 = zext i32 %7289 to i64
  store i64 %7290, i64* %RAX, align 8, !tbaa !2428
  %7291 = icmp ult i32 %7289, %7286
  %7292 = icmp ult i32 %7289, %7288
  %7293 = or i1 %7291, %7292
  %7294 = zext i1 %7293 to i8
  %7295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7294, i8* %7295, align 1, !tbaa !2432
  %7296 = and i32 %7289, 255
  %7297 = call i32 @llvm.ctpop.i32(i32 %7296) #17
  %7298 = trunc i32 %7297 to i8
  %7299 = and i8 %7298, 1
  %7300 = xor i8 %7299, 1
  %7301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7300, i8* %7301, align 1, !tbaa !2446
  %7302 = xor i32 %7288, %7286
  %7303 = xor i32 %7302, %7289
  %7304 = lshr i32 %7303, 4
  %7305 = trunc i32 %7304 to i8
  %7306 = and i8 %7305, 1
  %7307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7306, i8* %7307, align 1, !tbaa !2447
  %7308 = icmp eq i32 %7289, 0
  %7309 = zext i1 %7308 to i8
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7309, i8* %7310, align 1, !tbaa !2448
  %7311 = lshr i32 %7289, 31
  %7312 = trunc i32 %7311 to i8
  %7313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7312, i8* %7313, align 1, !tbaa !2449
  %7314 = lshr i32 %7286, 31
  %7315 = lshr i32 %7288, 31
  %7316 = xor i32 %7311, %7314
  %7317 = xor i32 %7311, %7315
  %7318 = add nuw nsw i32 %7316, %7317
  %7319 = icmp eq i32 %7318, 2
  %7320 = zext i1 %7319 to i8
  %7321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7320, i8* %7321, align 1, !tbaa !2450
  %7322 = load i64, i64* %RBP
  %7323 = sub i64 %7322, 36
  %7324 = load i32, i32* %EAX
  %7325 = zext i32 %7324 to i64
  %7326 = load i64, i64* %PC
  %7327 = add i64 %7326, 3
  store i64 %7327, i64* %PC
  %7328 = inttoptr i64 %7323 to i32*
  store i32 %7324, i32* %7328
  %7329 = load i64, i64* %RBP
  %7330 = sub i64 %7329, 36
  %7331 = load i64, i64* %PC
  %7332 = add i64 %7331, 3
  store i64 %7332, i64* %PC
  %7333 = inttoptr i64 %7330 to i32*
  %7334 = load i32, i32* %7333
  %7335 = zext i32 %7334 to i64
  store i64 %7335, i64* %RAX, align 8, !tbaa !2428
  %7336 = load i64, i64* %RAX
  %7337 = load i64, i64* %RBP
  %7338 = sub i64 %7337, 8
  %7339 = load i64, i64* %PC
  %7340 = add i64 %7339, 3
  store i64 %7340, i64* %PC
  %7341 = trunc i64 %7336 to i32
  %7342 = inttoptr i64 %7338 to i32*
  %7343 = load i32, i32* %7342
  %7344 = add i32 %7343, %7341
  %7345 = zext i32 %7344 to i64
  store i64 %7345, i64* %RAX, align 8, !tbaa !2428
  %7346 = icmp ult i32 %7344, %7341
  %7347 = icmp ult i32 %7344, %7343
  %7348 = or i1 %7346, %7347
  %7349 = zext i1 %7348 to i8
  %7350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7349, i8* %7350, align 1, !tbaa !2432
  %7351 = and i32 %7344, 255
  %7352 = call i32 @llvm.ctpop.i32(i32 %7351) #17
  %7353 = trunc i32 %7352 to i8
  %7354 = and i8 %7353, 1
  %7355 = xor i8 %7354, 1
  %7356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7355, i8* %7356, align 1, !tbaa !2446
  %7357 = xor i32 %7343, %7341
  %7358 = xor i32 %7357, %7344
  %7359 = lshr i32 %7358, 4
  %7360 = trunc i32 %7359 to i8
  %7361 = and i8 %7360, 1
  %7362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7361, i8* %7362, align 1, !tbaa !2447
  %7363 = icmp eq i32 %7344, 0
  %7364 = zext i1 %7363 to i8
  %7365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7364, i8* %7365, align 1, !tbaa !2448
  %7366 = lshr i32 %7344, 31
  %7367 = trunc i32 %7366 to i8
  %7368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7367, i8* %7368, align 1, !tbaa !2449
  %7369 = lshr i32 %7341, 31
  %7370 = lshr i32 %7343, 31
  %7371 = xor i32 %7366, %7369
  %7372 = xor i32 %7366, %7370
  %7373 = add nuw nsw i32 %7371, %7372
  %7374 = icmp eq i32 %7373, 2
  %7375 = zext i1 %7374 to i8
  %7376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7375, i8* %7376, align 1, !tbaa !2450
  %7377 = load i64, i64* %RBP
  %7378 = sub i64 %7377, 40
  %7379 = load i32, i32* %EAX
  %7380 = zext i32 %7379 to i64
  %7381 = load i64, i64* %PC
  %7382 = add i64 %7381, 3
  store i64 %7382, i64* %PC
  %7383 = inttoptr i64 %7378 to i32*
  store i32 %7379, i32* %7383
  %7384 = load i64, i64* %RBP
  %7385 = sub i64 %7384, 16
  %7386 = load i64, i64* %PC
  %7387 = add i64 %7386, 4
  store i64 %7387, i64* %PC
  %7388 = inttoptr i64 %7385 to i64*
  %7389 = load i64, i64* %7388
  store i64 %7389, i64* %RCX, align 8, !tbaa !2428
  %7390 = load i64, i64* %RBP
  %7391 = sub i64 %7390, 28
  %7392 = load i64, i64* %PC
  %7393 = add i64 %7392, 4
  store i64 %7393, i64* %PC
  %7394 = inttoptr i64 %7391 to i32*
  %7395 = load i32, i32* %7394
  %7396 = sext i32 %7395 to i64
  store i64 %7396, i64* %RDX, align 8, !tbaa !2428
  %7397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7398 = load i64, i64* %RCX
  %7399 = load i64, i64* %RDX
  %7400 = mul i64 %7399, 8
  %7401 = add i64 %7400, %7398
  %7402 = load i64, i64* %PC
  %7403 = add i64 %7402, 5
  store i64 %7403, i64* %PC
  %7404 = inttoptr i64 %7401 to double*
  %7405 = load double, double* %7404
  %7406 = bitcast i8* %7397 to double*
  store double %7405, double* %7406, align 1, !tbaa !2452
  %7407 = getelementptr inbounds i8, i8* %7397, i64 8
  %7408 = bitcast i8* %7407 to double*
  store double 0.000000e+00, double* %7408, align 1, !tbaa !2452
  %7409 = load i64, i64* %RBP
  %7410 = sub i64 %7409, 16
  %7411 = load i64, i64* %PC
  %7412 = add i64 %7411, 4
  store i64 %7412, i64* %PC
  %7413 = inttoptr i64 %7410 to i64*
  %7414 = load i64, i64* %7413
  store i64 %7414, i64* %RCX, align 8, !tbaa !2428
  %7415 = load i64, i64* %RBP
  %7416 = sub i64 %7415, 32
  %7417 = load i64, i64* %PC
  %7418 = add i64 %7417, 4
  store i64 %7418, i64* %PC
  %7419 = inttoptr i64 %7416 to i32*
  %7420 = load i32, i32* %7419
  %7421 = sext i32 %7420 to i64
  store i64 %7421, i64* %RDX, align 8, !tbaa !2428
  %7422 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7423 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7424 = load i64, i64* %RCX
  %7425 = load i64, i64* %RDX
  %7426 = mul i64 %7425, 8
  %7427 = add i64 %7426, %7424
  %7428 = load i64, i64* %PC
  %7429 = add i64 %7428, 5
  store i64 %7429, i64* %PC
  %7430 = bitcast i8* %7423 to double*
  %7431 = load double, double* %7430, align 1
  %7432 = getelementptr inbounds i8, i8* %7423, i64 8
  %7433 = bitcast i8* %7432 to i64*
  %7434 = load i64, i64* %7433, align 1
  %7435 = inttoptr i64 %7427 to double*
  %7436 = load double, double* %7435
  %7437 = fadd double %7431, %7436
  %7438 = bitcast i8* %7422 to double*
  store double %7437, double* %7438, align 1, !tbaa !2452
  %7439 = getelementptr inbounds i8, i8* %7422, i64 8
  %7440 = bitcast i8* %7439 to i64*
  store i64 %7434, i64* %7440, align 1, !tbaa !2452
  %7441 = load i64, i64* %RBP
  %7442 = sub i64 %7441, 120
  %7443 = bitcast %union.vec128_t* %XMM0 to i8*
  %7444 = load i64, i64* %PC
  %7445 = add i64 %7444, 5
  store i64 %7445, i64* %PC
  %7446 = bitcast i8* %7443 to double*
  %7447 = load double, double* %7446, align 1
  %7448 = inttoptr i64 %7442 to double*
  store double %7447, double* %7448
  %7449 = load i64, i64* %RBP
  %7450 = sub i64 %7449, 16
  %7451 = load i64, i64* %PC
  %7452 = add i64 %7451, 4
  store i64 %7452, i64* %PC
  %7453 = inttoptr i64 %7450 to i64*
  %7454 = load i64, i64* %7453
  store i64 %7454, i64* %RCX, align 8, !tbaa !2428
  %7455 = load i64, i64* %RBP
  %7456 = sub i64 %7455, 28
  %7457 = load i64, i64* %PC
  %7458 = add i64 %7457, 3
  store i64 %7458, i64* %PC
  %7459 = inttoptr i64 %7456 to i32*
  %7460 = load i32, i32* %7459
  %7461 = zext i32 %7460 to i64
  store i64 %7461, i64* %RAX, align 8, !tbaa !2428
  %7462 = load i64, i64* %RAX
  %7463 = load i64, i64* %PC
  %7464 = add i64 %7463, 3
  store i64 %7464, i64* %PC
  %7465 = trunc i64 %7462 to i32
  %7466 = add i32 1, %7465
  %7467 = zext i32 %7466 to i64
  store i64 %7467, i64* %RAX, align 8, !tbaa !2428
  %7468 = icmp ult i32 %7466, %7465
  %7469 = icmp ult i32 %7466, 1
  %7470 = or i1 %7468, %7469
  %7471 = zext i1 %7470 to i8
  %7472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7471, i8* %7472, align 1, !tbaa !2432
  %7473 = and i32 %7466, 255
  %7474 = call i32 @llvm.ctpop.i32(i32 %7473) #17
  %7475 = trunc i32 %7474 to i8
  %7476 = and i8 %7475, 1
  %7477 = xor i8 %7476, 1
  %7478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7477, i8* %7478, align 1, !tbaa !2446
  %7479 = xor i64 1, %7462
  %7480 = trunc i64 %7479 to i32
  %7481 = xor i32 %7480, %7466
  %7482 = lshr i32 %7481, 4
  %7483 = trunc i32 %7482 to i8
  %7484 = and i8 %7483, 1
  %7485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7484, i8* %7485, align 1, !tbaa !2447
  %7486 = icmp eq i32 %7466, 0
  %7487 = zext i1 %7486 to i8
  %7488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7487, i8* %7488, align 1, !tbaa !2448
  %7489 = lshr i32 %7466, 31
  %7490 = trunc i32 %7489 to i8
  %7491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7490, i8* %7491, align 1, !tbaa !2449
  %7492 = lshr i32 %7465, 31
  %7493 = xor i32 %7489, %7492
  %7494 = add nuw nsw i32 %7493, %7489
  %7495 = icmp eq i32 %7494, 2
  %7496 = zext i1 %7495 to i8
  %7497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7496, i8* %7497, align 1, !tbaa !2450
  %7498 = load i32, i32* %EAX
  %7499 = zext i32 %7498 to i64
  %7500 = load i64, i64* %PC
  %7501 = add i64 %7500, 3
  store i64 %7501, i64* %PC
  %7502 = shl i64 %7499, 32
  %7503 = ashr exact i64 %7502, 32
  store i64 %7503, i64* %RDX, align 8, !tbaa !2428
  %7504 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7505 = load i64, i64* %RCX
  %7506 = load i64, i64* %RDX
  %7507 = mul i64 %7506, 8
  %7508 = add i64 %7507, %7505
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 5
  store i64 %7510, i64* %PC
  %7511 = inttoptr i64 %7508 to double*
  %7512 = load double, double* %7511
  %7513 = bitcast i8* %7504 to double*
  store double %7512, double* %7513, align 1, !tbaa !2452
  %7514 = getelementptr inbounds i8, i8* %7504, i64 8
  %7515 = bitcast i8* %7514 to double*
  store double 0.000000e+00, double* %7515, align 1, !tbaa !2452
  %7516 = load i64, i64* %RBP
  %7517 = sub i64 %7516, 16
  %7518 = load i64, i64* %PC
  %7519 = add i64 %7518, 4
  store i64 %7519, i64* %PC
  %7520 = inttoptr i64 %7517 to i64*
  %7521 = load i64, i64* %7520
  store i64 %7521, i64* %RCX, align 8, !tbaa !2428
  %7522 = load i64, i64* %RBP
  %7523 = sub i64 %7522, 32
  %7524 = load i64, i64* %PC
  %7525 = add i64 %7524, 3
  store i64 %7525, i64* %PC
  %7526 = inttoptr i64 %7523 to i32*
  %7527 = load i32, i32* %7526
  %7528 = zext i32 %7527 to i64
  store i64 %7528, i64* %RAX, align 8, !tbaa !2428
  %7529 = load i64, i64* %RAX
  %7530 = load i64, i64* %PC
  %7531 = add i64 %7530, 3
  store i64 %7531, i64* %PC
  %7532 = trunc i64 %7529 to i32
  %7533 = add i32 1, %7532
  %7534 = zext i32 %7533 to i64
  store i64 %7534, i64* %RAX, align 8, !tbaa !2428
  %7535 = icmp ult i32 %7533, %7532
  %7536 = icmp ult i32 %7533, 1
  %7537 = or i1 %7535, %7536
  %7538 = zext i1 %7537 to i8
  %7539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7538, i8* %7539, align 1, !tbaa !2432
  %7540 = and i32 %7533, 255
  %7541 = call i32 @llvm.ctpop.i32(i32 %7540) #17
  %7542 = trunc i32 %7541 to i8
  %7543 = and i8 %7542, 1
  %7544 = xor i8 %7543, 1
  %7545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7544, i8* %7545, align 1, !tbaa !2446
  %7546 = xor i64 1, %7529
  %7547 = trunc i64 %7546 to i32
  %7548 = xor i32 %7547, %7533
  %7549 = lshr i32 %7548, 4
  %7550 = trunc i32 %7549 to i8
  %7551 = and i8 %7550, 1
  %7552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7551, i8* %7552, align 1, !tbaa !2447
  %7553 = icmp eq i32 %7533, 0
  %7554 = zext i1 %7553 to i8
  %7555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7554, i8* %7555, align 1, !tbaa !2448
  %7556 = lshr i32 %7533, 31
  %7557 = trunc i32 %7556 to i8
  %7558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7557, i8* %7558, align 1, !tbaa !2449
  %7559 = lshr i32 %7532, 31
  %7560 = xor i32 %7556, %7559
  %7561 = add nuw nsw i32 %7560, %7556
  %7562 = icmp eq i32 %7561, 2
  %7563 = zext i1 %7562 to i8
  %7564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7563, i8* %7564, align 1, !tbaa !2450
  %7565 = load i32, i32* %EAX
  %7566 = zext i32 %7565 to i64
  %7567 = load i64, i64* %PC
  %7568 = add i64 %7567, 3
  store i64 %7568, i64* %PC
  %7569 = shl i64 %7566, 32
  %7570 = ashr exact i64 %7569, 32
  store i64 %7570, i64* %RDX, align 8, !tbaa !2428
  %7571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7572 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7573 = load i64, i64* %RCX
  %7574 = load i64, i64* %RDX
  %7575 = mul i64 %7574, 8
  %7576 = add i64 %7575, %7573
  %7577 = load i64, i64* %PC
  %7578 = add i64 %7577, 5
  store i64 %7578, i64* %PC
  %7579 = bitcast i8* %7572 to double*
  %7580 = load double, double* %7579, align 1
  %7581 = getelementptr inbounds i8, i8* %7572, i64 8
  %7582 = bitcast i8* %7581 to i64*
  %7583 = load i64, i64* %7582, align 1
  %7584 = inttoptr i64 %7576 to double*
  %7585 = load double, double* %7584
  %7586 = fadd double %7580, %7585
  %7587 = bitcast i8* %7571 to double*
  store double %7586, double* %7587, align 1, !tbaa !2452
  %7588 = getelementptr inbounds i8, i8* %7571, i64 8
  %7589 = bitcast i8* %7588 to i64*
  store i64 %7583, i64* %7589, align 1, !tbaa !2452
  %7590 = load i64, i64* %RBP
  %7591 = sub i64 %7590, 128
  %7592 = bitcast %union.vec128_t* %XMM0 to i8*
  %7593 = load i64, i64* %PC
  %7594 = add i64 %7593, 5
  store i64 %7594, i64* %PC
  %7595 = bitcast i8* %7592 to double*
  %7596 = load double, double* %7595, align 1
  %7597 = inttoptr i64 %7591 to double*
  store double %7596, double* %7597
  %7598 = load i64, i64* %RBP
  %7599 = sub i64 %7598, 16
  %7600 = load i64, i64* %PC
  %7601 = add i64 %7600, 4
  store i64 %7601, i64* %PC
  %7602 = inttoptr i64 %7599 to i64*
  %7603 = load i64, i64* %7602
  store i64 %7603, i64* %RCX, align 8, !tbaa !2428
  %7604 = load i64, i64* %RBP
  %7605 = sub i64 %7604, 28
  %7606 = load i64, i64* %PC
  %7607 = add i64 %7606, 4
  store i64 %7607, i64* %PC
  %7608 = inttoptr i64 %7605 to i32*
  %7609 = load i32, i32* %7608
  %7610 = sext i32 %7609 to i64
  store i64 %7610, i64* %RDX, align 8, !tbaa !2428
  %7611 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7612 = load i64, i64* %RCX
  %7613 = load i64, i64* %RDX
  %7614 = mul i64 %7613, 8
  %7615 = add i64 %7614, %7612
  %7616 = load i64, i64* %PC
  %7617 = add i64 %7616, 5
  store i64 %7617, i64* %PC
  %7618 = inttoptr i64 %7615 to double*
  %7619 = load double, double* %7618
  %7620 = bitcast i8* %7611 to double*
  store double %7619, double* %7620, align 1, !tbaa !2452
  %7621 = getelementptr inbounds i8, i8* %7611, i64 8
  %7622 = bitcast i8* %7621 to double*
  store double 0.000000e+00, double* %7622, align 1, !tbaa !2452
  %7623 = load i64, i64* %RBP
  %7624 = sub i64 %7623, 16
  %7625 = load i64, i64* %PC
  %7626 = add i64 %7625, 4
  store i64 %7626, i64* %PC
  %7627 = inttoptr i64 %7624 to i64*
  %7628 = load i64, i64* %7627
  store i64 %7628, i64* %RCX, align 8, !tbaa !2428
  %7629 = load i64, i64* %RBP
  %7630 = sub i64 %7629, 32
  %7631 = load i64, i64* %PC
  %7632 = add i64 %7631, 4
  store i64 %7632, i64* %PC
  %7633 = inttoptr i64 %7630 to i32*
  %7634 = load i32, i32* %7633
  %7635 = sext i32 %7634 to i64
  store i64 %7635, i64* %RDX, align 8, !tbaa !2428
  %7636 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7637 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7638 = load i64, i64* %RCX
  %7639 = load i64, i64* %RDX
  %7640 = mul i64 %7639, 8
  %7641 = add i64 %7640, %7638
  %7642 = load i64, i64* %PC
  %7643 = add i64 %7642, 5
  store i64 %7643, i64* %PC
  %7644 = bitcast i8* %7637 to double*
  %7645 = load double, double* %7644, align 1
  %7646 = getelementptr inbounds i8, i8* %7637, i64 8
  %7647 = bitcast i8* %7646 to i64*
  %7648 = load i64, i64* %7647, align 1
  %7649 = inttoptr i64 %7641 to double*
  %7650 = load double, double* %7649
  %7651 = fsub double %7645, %7650
  %7652 = bitcast i8* %7636 to double*
  store double %7651, double* %7652, align 1, !tbaa !2452
  %7653 = getelementptr inbounds i8, i8* %7636, i64 8
  %7654 = bitcast i8* %7653 to i64*
  store i64 %7648, i64* %7654, align 1, !tbaa !2452
  %7655 = load i64, i64* %RBP
  %7656 = sub i64 %7655, 136
  %7657 = bitcast %union.vec128_t* %XMM0 to i8*
  %7658 = load i64, i64* %PC
  %7659 = add i64 %7658, 8
  store i64 %7659, i64* %PC
  %7660 = bitcast i8* %7657 to double*
  %7661 = load double, double* %7660, align 1
  %7662 = inttoptr i64 %7656 to double*
  store double %7661, double* %7662
  %7663 = load i64, i64* %RBP
  %7664 = sub i64 %7663, 16
  %7665 = load i64, i64* %PC
  %7666 = add i64 %7665, 4
  store i64 %7666, i64* %PC
  %7667 = inttoptr i64 %7664 to i64*
  %7668 = load i64, i64* %7667
  store i64 %7668, i64* %RCX, align 8, !tbaa !2428
  %7669 = load i64, i64* %RBP
  %7670 = sub i64 %7669, 28
  %7671 = load i64, i64* %PC
  %7672 = add i64 %7671, 3
  store i64 %7672, i64* %PC
  %7673 = inttoptr i64 %7670 to i32*
  %7674 = load i32, i32* %7673
  %7675 = zext i32 %7674 to i64
  store i64 %7675, i64* %RAX, align 8, !tbaa !2428
  %7676 = load i64, i64* %RAX
  %7677 = load i64, i64* %PC
  %7678 = add i64 %7677, 3
  store i64 %7678, i64* %PC
  %7679 = trunc i64 %7676 to i32
  %7680 = add i32 1, %7679
  %7681 = zext i32 %7680 to i64
  store i64 %7681, i64* %RAX, align 8, !tbaa !2428
  %7682 = icmp ult i32 %7680, %7679
  %7683 = icmp ult i32 %7680, 1
  %7684 = or i1 %7682, %7683
  %7685 = zext i1 %7684 to i8
  %7686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7685, i8* %7686, align 1, !tbaa !2432
  %7687 = and i32 %7680, 255
  %7688 = call i32 @llvm.ctpop.i32(i32 %7687) #17
  %7689 = trunc i32 %7688 to i8
  %7690 = and i8 %7689, 1
  %7691 = xor i8 %7690, 1
  %7692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7691, i8* %7692, align 1, !tbaa !2446
  %7693 = xor i64 1, %7676
  %7694 = trunc i64 %7693 to i32
  %7695 = xor i32 %7694, %7680
  %7696 = lshr i32 %7695, 4
  %7697 = trunc i32 %7696 to i8
  %7698 = and i8 %7697, 1
  %7699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7698, i8* %7699, align 1, !tbaa !2447
  %7700 = icmp eq i32 %7680, 0
  %7701 = zext i1 %7700 to i8
  %7702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7701, i8* %7702, align 1, !tbaa !2448
  %7703 = lshr i32 %7680, 31
  %7704 = trunc i32 %7703 to i8
  %7705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7704, i8* %7705, align 1, !tbaa !2449
  %7706 = lshr i32 %7679, 31
  %7707 = xor i32 %7703, %7706
  %7708 = add nuw nsw i32 %7707, %7703
  %7709 = icmp eq i32 %7708, 2
  %7710 = zext i1 %7709 to i8
  %7711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7710, i8* %7711, align 1, !tbaa !2450
  %7712 = load i32, i32* %EAX
  %7713 = zext i32 %7712 to i64
  %7714 = load i64, i64* %PC
  %7715 = add i64 %7714, 3
  store i64 %7715, i64* %PC
  %7716 = shl i64 %7713, 32
  %7717 = ashr exact i64 %7716, 32
  store i64 %7717, i64* %RDX, align 8, !tbaa !2428
  %7718 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7719 = load i64, i64* %RCX
  %7720 = load i64, i64* %RDX
  %7721 = mul i64 %7720, 8
  %7722 = add i64 %7721, %7719
  %7723 = load i64, i64* %PC
  %7724 = add i64 %7723, 5
  store i64 %7724, i64* %PC
  %7725 = inttoptr i64 %7722 to double*
  %7726 = load double, double* %7725
  %7727 = bitcast i8* %7718 to double*
  store double %7726, double* %7727, align 1, !tbaa !2452
  %7728 = getelementptr inbounds i8, i8* %7718, i64 8
  %7729 = bitcast i8* %7728 to double*
  store double 0.000000e+00, double* %7729, align 1, !tbaa !2452
  %7730 = load i64, i64* %RBP
  %7731 = sub i64 %7730, 16
  %7732 = load i64, i64* %PC
  %7733 = add i64 %7732, 4
  store i64 %7733, i64* %PC
  %7734 = inttoptr i64 %7731 to i64*
  %7735 = load i64, i64* %7734
  store i64 %7735, i64* %RCX, align 8, !tbaa !2428
  %7736 = load i64, i64* %RBP
  %7737 = sub i64 %7736, 32
  %7738 = load i64, i64* %PC
  %7739 = add i64 %7738, 3
  store i64 %7739, i64* %PC
  %7740 = inttoptr i64 %7737 to i32*
  %7741 = load i32, i32* %7740
  %7742 = zext i32 %7741 to i64
  store i64 %7742, i64* %RAX, align 8, !tbaa !2428
  %7743 = load i64, i64* %RAX
  %7744 = load i64, i64* %PC
  %7745 = add i64 %7744, 3
  store i64 %7745, i64* %PC
  %7746 = trunc i64 %7743 to i32
  %7747 = add i32 1, %7746
  %7748 = zext i32 %7747 to i64
  store i64 %7748, i64* %RAX, align 8, !tbaa !2428
  %7749 = icmp ult i32 %7747, %7746
  %7750 = icmp ult i32 %7747, 1
  %7751 = or i1 %7749, %7750
  %7752 = zext i1 %7751 to i8
  %7753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7752, i8* %7753, align 1, !tbaa !2432
  %7754 = and i32 %7747, 255
  %7755 = call i32 @llvm.ctpop.i32(i32 %7754) #17
  %7756 = trunc i32 %7755 to i8
  %7757 = and i8 %7756, 1
  %7758 = xor i8 %7757, 1
  %7759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7758, i8* %7759, align 1, !tbaa !2446
  %7760 = xor i64 1, %7743
  %7761 = trunc i64 %7760 to i32
  %7762 = xor i32 %7761, %7747
  %7763 = lshr i32 %7762, 4
  %7764 = trunc i32 %7763 to i8
  %7765 = and i8 %7764, 1
  %7766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7765, i8* %7766, align 1, !tbaa !2447
  %7767 = icmp eq i32 %7747, 0
  %7768 = zext i1 %7767 to i8
  %7769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7768, i8* %7769, align 1, !tbaa !2448
  %7770 = lshr i32 %7747, 31
  %7771 = trunc i32 %7770 to i8
  %7772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7771, i8* %7772, align 1, !tbaa !2449
  %7773 = lshr i32 %7746, 31
  %7774 = xor i32 %7770, %7773
  %7775 = add nuw nsw i32 %7774, %7770
  %7776 = icmp eq i32 %7775, 2
  %7777 = zext i1 %7776 to i8
  %7778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7777, i8* %7778, align 1, !tbaa !2450
  %7779 = load i32, i32* %EAX
  %7780 = zext i32 %7779 to i64
  %7781 = load i64, i64* %PC
  %7782 = add i64 %7781, 3
  store i64 %7782, i64* %PC
  %7783 = shl i64 %7780, 32
  %7784 = ashr exact i64 %7783, 32
  store i64 %7784, i64* %RDX, align 8, !tbaa !2428
  %7785 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7786 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7787 = load i64, i64* %RCX
  %7788 = load i64, i64* %RDX
  %7789 = mul i64 %7788, 8
  %7790 = add i64 %7789, %7787
  %7791 = load i64, i64* %PC
  %7792 = add i64 %7791, 5
  store i64 %7792, i64* %PC
  %7793 = bitcast i8* %7786 to double*
  %7794 = load double, double* %7793, align 1
  %7795 = getelementptr inbounds i8, i8* %7786, i64 8
  %7796 = bitcast i8* %7795 to i64*
  %7797 = load i64, i64* %7796, align 1
  %7798 = inttoptr i64 %7790 to double*
  %7799 = load double, double* %7798
  %7800 = fsub double %7794, %7799
  %7801 = bitcast i8* %7785 to double*
  store double %7800, double* %7801, align 1, !tbaa !2452
  %7802 = getelementptr inbounds i8, i8* %7785, i64 8
  %7803 = bitcast i8* %7802 to i64*
  store i64 %7797, i64* %7803, align 1, !tbaa !2452
  %7804 = load i64, i64* %RBP
  %7805 = sub i64 %7804, 144
  %7806 = bitcast %union.vec128_t* %XMM0 to i8*
  %7807 = load i64, i64* %PC
  %7808 = add i64 %7807, 8
  store i64 %7808, i64* %PC
  %7809 = bitcast i8* %7806 to double*
  %7810 = load double, double* %7809, align 1
  %7811 = inttoptr i64 %7805 to double*
  store double %7810, double* %7811
  %7812 = load i64, i64* %RBP
  %7813 = sub i64 %7812, 16
  %7814 = load i64, i64* %PC
  %7815 = add i64 %7814, 4
  store i64 %7815, i64* %PC
  %7816 = inttoptr i64 %7813 to i64*
  %7817 = load i64, i64* %7816
  store i64 %7817, i64* %RCX, align 8, !tbaa !2428
  %7818 = load i64, i64* %RBP
  %7819 = sub i64 %7818, 36
  %7820 = load i64, i64* %PC
  %7821 = add i64 %7820, 4
  store i64 %7821, i64* %PC
  %7822 = inttoptr i64 %7819 to i32*
  %7823 = load i32, i32* %7822
  %7824 = sext i32 %7823 to i64
  store i64 %7824, i64* %RDX, align 8, !tbaa !2428
  %7825 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7826 = load i64, i64* %RCX
  %7827 = load i64, i64* %RDX
  %7828 = mul i64 %7827, 8
  %7829 = add i64 %7828, %7826
  %7830 = load i64, i64* %PC
  %7831 = add i64 %7830, 5
  store i64 %7831, i64* %PC
  %7832 = inttoptr i64 %7829 to double*
  %7833 = load double, double* %7832
  %7834 = bitcast i8* %7825 to double*
  store double %7833, double* %7834, align 1, !tbaa !2452
  %7835 = getelementptr inbounds i8, i8* %7825, i64 8
  %7836 = bitcast i8* %7835 to double*
  store double 0.000000e+00, double* %7836, align 1, !tbaa !2452
  %7837 = load i64, i64* %RBP
  %7838 = sub i64 %7837, 16
  %7839 = load i64, i64* %PC
  %7840 = add i64 %7839, 4
  store i64 %7840, i64* %PC
  %7841 = inttoptr i64 %7838 to i64*
  %7842 = load i64, i64* %7841
  store i64 %7842, i64* %RCX, align 8, !tbaa !2428
  %7843 = load i64, i64* %RBP
  %7844 = sub i64 %7843, 40
  %7845 = load i64, i64* %PC
  %7846 = add i64 %7845, 4
  store i64 %7846, i64* %PC
  %7847 = inttoptr i64 %7844 to i32*
  %7848 = load i32, i32* %7847
  %7849 = sext i32 %7848 to i64
  store i64 %7849, i64* %RDX, align 8, !tbaa !2428
  %7850 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7851 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7852 = load i64, i64* %RCX
  %7853 = load i64, i64* %RDX
  %7854 = mul i64 %7853, 8
  %7855 = add i64 %7854, %7852
  %7856 = load i64, i64* %PC
  %7857 = add i64 %7856, 5
  store i64 %7857, i64* %PC
  %7858 = bitcast i8* %7851 to double*
  %7859 = load double, double* %7858, align 1
  %7860 = getelementptr inbounds i8, i8* %7851, i64 8
  %7861 = bitcast i8* %7860 to i64*
  %7862 = load i64, i64* %7861, align 1
  %7863 = inttoptr i64 %7855 to double*
  %7864 = load double, double* %7863
  %7865 = fadd double %7859, %7864
  %7866 = bitcast i8* %7850 to double*
  store double %7865, double* %7866, align 1, !tbaa !2452
  %7867 = getelementptr inbounds i8, i8* %7850, i64 8
  %7868 = bitcast i8* %7867 to i64*
  store i64 %7862, i64* %7868, align 1, !tbaa !2452
  %7869 = load i64, i64* %RBP
  %7870 = sub i64 %7869, 152
  %7871 = bitcast %union.vec128_t* %XMM0 to i8*
  %7872 = load i64, i64* %PC
  %7873 = add i64 %7872, 8
  store i64 %7873, i64* %PC
  %7874 = bitcast i8* %7871 to double*
  %7875 = load double, double* %7874, align 1
  %7876 = inttoptr i64 %7870 to double*
  store double %7875, double* %7876
  %7877 = load i64, i64* %RBP
  %7878 = sub i64 %7877, 16
  %7879 = load i64, i64* %PC
  %7880 = add i64 %7879, 4
  store i64 %7880, i64* %PC
  %7881 = inttoptr i64 %7878 to i64*
  %7882 = load i64, i64* %7881
  store i64 %7882, i64* %RCX, align 8, !tbaa !2428
  %7883 = load i64, i64* %RBP
  %7884 = sub i64 %7883, 36
  %7885 = load i64, i64* %PC
  %7886 = add i64 %7885, 3
  store i64 %7886, i64* %PC
  %7887 = inttoptr i64 %7884 to i32*
  %7888 = load i32, i32* %7887
  %7889 = zext i32 %7888 to i64
  store i64 %7889, i64* %RAX, align 8, !tbaa !2428
  %7890 = load i64, i64* %RAX
  %7891 = load i64, i64* %PC
  %7892 = add i64 %7891, 3
  store i64 %7892, i64* %PC
  %7893 = trunc i64 %7890 to i32
  %7894 = add i32 1, %7893
  %7895 = zext i32 %7894 to i64
  store i64 %7895, i64* %RAX, align 8, !tbaa !2428
  %7896 = icmp ult i32 %7894, %7893
  %7897 = icmp ult i32 %7894, 1
  %7898 = or i1 %7896, %7897
  %7899 = zext i1 %7898 to i8
  %7900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7899, i8* %7900, align 1, !tbaa !2432
  %7901 = and i32 %7894, 255
  %7902 = call i32 @llvm.ctpop.i32(i32 %7901) #17
  %7903 = trunc i32 %7902 to i8
  %7904 = and i8 %7903, 1
  %7905 = xor i8 %7904, 1
  %7906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7905, i8* %7906, align 1, !tbaa !2446
  %7907 = xor i64 1, %7890
  %7908 = trunc i64 %7907 to i32
  %7909 = xor i32 %7908, %7894
  %7910 = lshr i32 %7909, 4
  %7911 = trunc i32 %7910 to i8
  %7912 = and i8 %7911, 1
  %7913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7912, i8* %7913, align 1, !tbaa !2447
  %7914 = icmp eq i32 %7894, 0
  %7915 = zext i1 %7914 to i8
  %7916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7915, i8* %7916, align 1, !tbaa !2448
  %7917 = lshr i32 %7894, 31
  %7918 = trunc i32 %7917 to i8
  %7919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7918, i8* %7919, align 1, !tbaa !2449
  %7920 = lshr i32 %7893, 31
  %7921 = xor i32 %7917, %7920
  %7922 = add nuw nsw i32 %7921, %7917
  %7923 = icmp eq i32 %7922, 2
  %7924 = zext i1 %7923 to i8
  %7925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7924, i8* %7925, align 1, !tbaa !2450
  %7926 = load i32, i32* %EAX
  %7927 = zext i32 %7926 to i64
  %7928 = load i64, i64* %PC
  %7929 = add i64 %7928, 3
  store i64 %7929, i64* %PC
  %7930 = shl i64 %7927, 32
  %7931 = ashr exact i64 %7930, 32
  store i64 %7931, i64* %RDX, align 8, !tbaa !2428
  %7932 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7933 = load i64, i64* %RCX
  %7934 = load i64, i64* %RDX
  %7935 = mul i64 %7934, 8
  %7936 = add i64 %7935, %7933
  %7937 = load i64, i64* %PC
  %7938 = add i64 %7937, 5
  store i64 %7938, i64* %PC
  %7939 = inttoptr i64 %7936 to double*
  %7940 = load double, double* %7939
  %7941 = bitcast i8* %7932 to double*
  store double %7940, double* %7941, align 1, !tbaa !2452
  %7942 = getelementptr inbounds i8, i8* %7932, i64 8
  %7943 = bitcast i8* %7942 to double*
  store double 0.000000e+00, double* %7943, align 1, !tbaa !2452
  %7944 = load i64, i64* %RBP
  %7945 = sub i64 %7944, 16
  %7946 = load i64, i64* %PC
  %7947 = add i64 %7946, 4
  store i64 %7947, i64* %PC
  %7948 = inttoptr i64 %7945 to i64*
  %7949 = load i64, i64* %7948
  store i64 %7949, i64* %RCX, align 8, !tbaa !2428
  %7950 = load i64, i64* %RBP
  %7951 = sub i64 %7950, 40
  %7952 = load i64, i64* %PC
  %7953 = add i64 %7952, 3
  store i64 %7953, i64* %PC
  %7954 = inttoptr i64 %7951 to i32*
  %7955 = load i32, i32* %7954
  %7956 = zext i32 %7955 to i64
  store i64 %7956, i64* %RAX, align 8, !tbaa !2428
  %7957 = load i64, i64* %RAX
  %7958 = load i64, i64* %PC
  %7959 = add i64 %7958, 3
  store i64 %7959, i64* %PC
  %7960 = trunc i64 %7957 to i32
  %7961 = add i32 1, %7960
  %7962 = zext i32 %7961 to i64
  store i64 %7962, i64* %RAX, align 8, !tbaa !2428
  %7963 = icmp ult i32 %7961, %7960
  %7964 = icmp ult i32 %7961, 1
  %7965 = or i1 %7963, %7964
  %7966 = zext i1 %7965 to i8
  %7967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7966, i8* %7967, align 1, !tbaa !2432
  %7968 = and i32 %7961, 255
  %7969 = call i32 @llvm.ctpop.i32(i32 %7968) #17
  %7970 = trunc i32 %7969 to i8
  %7971 = and i8 %7970, 1
  %7972 = xor i8 %7971, 1
  %7973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7972, i8* %7973, align 1, !tbaa !2446
  %7974 = xor i64 1, %7957
  %7975 = trunc i64 %7974 to i32
  %7976 = xor i32 %7975, %7961
  %7977 = lshr i32 %7976, 4
  %7978 = trunc i32 %7977 to i8
  %7979 = and i8 %7978, 1
  %7980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7979, i8* %7980, align 1, !tbaa !2447
  %7981 = icmp eq i32 %7961, 0
  %7982 = zext i1 %7981 to i8
  %7983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7982, i8* %7983, align 1, !tbaa !2448
  %7984 = lshr i32 %7961, 31
  %7985 = trunc i32 %7984 to i8
  %7986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7985, i8* %7986, align 1, !tbaa !2449
  %7987 = lshr i32 %7960, 31
  %7988 = xor i32 %7984, %7987
  %7989 = add nuw nsw i32 %7988, %7984
  %7990 = icmp eq i32 %7989, 2
  %7991 = zext i1 %7990 to i8
  %7992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7991, i8* %7992, align 1, !tbaa !2450
  %7993 = load i32, i32* %EAX
  %7994 = zext i32 %7993 to i64
  %7995 = load i64, i64* %PC
  %7996 = add i64 %7995, 3
  store i64 %7996, i64* %PC
  %7997 = shl i64 %7994, 32
  %7998 = ashr exact i64 %7997, 32
  store i64 %7998, i64* %RDX, align 8, !tbaa !2428
  %7999 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8000 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8001 = load i64, i64* %RCX
  %8002 = load i64, i64* %RDX
  %8003 = mul i64 %8002, 8
  %8004 = add i64 %8003, %8001
  %8005 = load i64, i64* %PC
  %8006 = add i64 %8005, 5
  store i64 %8006, i64* %PC
  %8007 = bitcast i8* %8000 to double*
  %8008 = load double, double* %8007, align 1
  %8009 = getelementptr inbounds i8, i8* %8000, i64 8
  %8010 = bitcast i8* %8009 to i64*
  %8011 = load i64, i64* %8010, align 1
  %8012 = inttoptr i64 %8004 to double*
  %8013 = load double, double* %8012
  %8014 = fadd double %8008, %8013
  %8015 = bitcast i8* %7999 to double*
  store double %8014, double* %8015, align 1, !tbaa !2452
  %8016 = getelementptr inbounds i8, i8* %7999, i64 8
  %8017 = bitcast i8* %8016 to i64*
  store i64 %8011, i64* %8017, align 1, !tbaa !2452
  %8018 = load i64, i64* %RBP
  %8019 = sub i64 %8018, 160
  %8020 = bitcast %union.vec128_t* %XMM0 to i8*
  %8021 = load i64, i64* %PC
  %8022 = add i64 %8021, 8
  store i64 %8022, i64* %PC
  %8023 = bitcast i8* %8020 to double*
  %8024 = load double, double* %8023, align 1
  %8025 = inttoptr i64 %8019 to double*
  store double %8024, double* %8025
  %8026 = load i64, i64* %RBP
  %8027 = sub i64 %8026, 16
  %8028 = load i64, i64* %PC
  %8029 = add i64 %8028, 4
  store i64 %8029, i64* %PC
  %8030 = inttoptr i64 %8027 to i64*
  %8031 = load i64, i64* %8030
  store i64 %8031, i64* %RCX, align 8, !tbaa !2428
  %8032 = load i64, i64* %RBP
  %8033 = sub i64 %8032, 36
  %8034 = load i64, i64* %PC
  %8035 = add i64 %8034, 4
  store i64 %8035, i64* %PC
  %8036 = inttoptr i64 %8033 to i32*
  %8037 = load i32, i32* %8036
  %8038 = sext i32 %8037 to i64
  store i64 %8038, i64* %RDX, align 8, !tbaa !2428
  %8039 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8040 = load i64, i64* %RCX
  %8041 = load i64, i64* %RDX
  %8042 = mul i64 %8041, 8
  %8043 = add i64 %8042, %8040
  %8044 = load i64, i64* %PC
  %8045 = add i64 %8044, 5
  store i64 %8045, i64* %PC
  %8046 = inttoptr i64 %8043 to double*
  %8047 = load double, double* %8046
  %8048 = bitcast i8* %8039 to double*
  store double %8047, double* %8048, align 1, !tbaa !2452
  %8049 = getelementptr inbounds i8, i8* %8039, i64 8
  %8050 = bitcast i8* %8049 to double*
  store double 0.000000e+00, double* %8050, align 1, !tbaa !2452
  %8051 = load i64, i64* %RBP
  %8052 = sub i64 %8051, 16
  %8053 = load i64, i64* %PC
  %8054 = add i64 %8053, 4
  store i64 %8054, i64* %PC
  %8055 = inttoptr i64 %8052 to i64*
  %8056 = load i64, i64* %8055
  store i64 %8056, i64* %RCX, align 8, !tbaa !2428
  %8057 = load i64, i64* %RBP
  %8058 = sub i64 %8057, 40
  %8059 = load i64, i64* %PC
  %8060 = add i64 %8059, 4
  store i64 %8060, i64* %PC
  %8061 = inttoptr i64 %8058 to i32*
  %8062 = load i32, i32* %8061
  %8063 = sext i32 %8062 to i64
  store i64 %8063, i64* %RDX, align 8, !tbaa !2428
  %8064 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8065 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8066 = load i64, i64* %RCX
  %8067 = load i64, i64* %RDX
  %8068 = mul i64 %8067, 8
  %8069 = add i64 %8068, %8066
  %8070 = load i64, i64* %PC
  %8071 = add i64 %8070, 5
  store i64 %8071, i64* %PC
  %8072 = bitcast i8* %8065 to double*
  %8073 = load double, double* %8072, align 1
  %8074 = getelementptr inbounds i8, i8* %8065, i64 8
  %8075 = bitcast i8* %8074 to i64*
  %8076 = load i64, i64* %8075, align 1
  %8077 = inttoptr i64 %8069 to double*
  %8078 = load double, double* %8077
  %8079 = fsub double %8073, %8078
  %8080 = bitcast i8* %8064 to double*
  store double %8079, double* %8080, align 1, !tbaa !2452
  %8081 = getelementptr inbounds i8, i8* %8064, i64 8
  %8082 = bitcast i8* %8081 to i64*
  store i64 %8076, i64* %8082, align 1, !tbaa !2452
  %8083 = load i64, i64* %RBP
  %8084 = sub i64 %8083, 168
  %8085 = bitcast %union.vec128_t* %XMM0 to i8*
  %8086 = load i64, i64* %PC
  %8087 = add i64 %8086, 8
  store i64 %8087, i64* %PC
  %8088 = bitcast i8* %8085 to double*
  %8089 = load double, double* %8088, align 1
  %8090 = inttoptr i64 %8084 to double*
  store double %8089, double* %8090
  %8091 = load i64, i64* %RBP
  %8092 = sub i64 %8091, 16
  %8093 = load i64, i64* %PC
  %8094 = add i64 %8093, 4
  store i64 %8094, i64* %PC
  %8095 = inttoptr i64 %8092 to i64*
  %8096 = load i64, i64* %8095
  store i64 %8096, i64* %RCX, align 8, !tbaa !2428
  %8097 = load i64, i64* %RBP
  %8098 = sub i64 %8097, 36
  %8099 = load i64, i64* %PC
  %8100 = add i64 %8099, 3
  store i64 %8100, i64* %PC
  %8101 = inttoptr i64 %8098 to i32*
  %8102 = load i32, i32* %8101
  %8103 = zext i32 %8102 to i64
  store i64 %8103, i64* %RAX, align 8, !tbaa !2428
  %8104 = load i64, i64* %RAX
  %8105 = load i64, i64* %PC
  %8106 = add i64 %8105, 3
  store i64 %8106, i64* %PC
  %8107 = trunc i64 %8104 to i32
  %8108 = add i32 1, %8107
  %8109 = zext i32 %8108 to i64
  store i64 %8109, i64* %RAX, align 8, !tbaa !2428
  %8110 = icmp ult i32 %8108, %8107
  %8111 = icmp ult i32 %8108, 1
  %8112 = or i1 %8110, %8111
  %8113 = zext i1 %8112 to i8
  %8114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8113, i8* %8114, align 1, !tbaa !2432
  %8115 = and i32 %8108, 255
  %8116 = call i32 @llvm.ctpop.i32(i32 %8115) #17
  %8117 = trunc i32 %8116 to i8
  %8118 = and i8 %8117, 1
  %8119 = xor i8 %8118, 1
  %8120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8119, i8* %8120, align 1, !tbaa !2446
  %8121 = xor i64 1, %8104
  %8122 = trunc i64 %8121 to i32
  %8123 = xor i32 %8122, %8108
  %8124 = lshr i32 %8123, 4
  %8125 = trunc i32 %8124 to i8
  %8126 = and i8 %8125, 1
  %8127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8126, i8* %8127, align 1, !tbaa !2447
  %8128 = icmp eq i32 %8108, 0
  %8129 = zext i1 %8128 to i8
  %8130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8129, i8* %8130, align 1, !tbaa !2448
  %8131 = lshr i32 %8108, 31
  %8132 = trunc i32 %8131 to i8
  %8133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8132, i8* %8133, align 1, !tbaa !2449
  %8134 = lshr i32 %8107, 31
  %8135 = xor i32 %8131, %8134
  %8136 = add nuw nsw i32 %8135, %8131
  %8137 = icmp eq i32 %8136, 2
  %8138 = zext i1 %8137 to i8
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8138, i8* %8139, align 1, !tbaa !2450
  %8140 = load i32, i32* %EAX
  %8141 = zext i32 %8140 to i64
  %8142 = load i64, i64* %PC
  %8143 = add i64 %8142, 3
  store i64 %8143, i64* %PC
  %8144 = shl i64 %8141, 32
  %8145 = ashr exact i64 %8144, 32
  store i64 %8145, i64* %RDX, align 8, !tbaa !2428
  %8146 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8147 = load i64, i64* %RCX
  %8148 = load i64, i64* %RDX
  %8149 = mul i64 %8148, 8
  %8150 = add i64 %8149, %8147
  %8151 = load i64, i64* %PC
  %8152 = add i64 %8151, 5
  store i64 %8152, i64* %PC
  %8153 = inttoptr i64 %8150 to double*
  %8154 = load double, double* %8153
  %8155 = bitcast i8* %8146 to double*
  store double %8154, double* %8155, align 1, !tbaa !2452
  %8156 = getelementptr inbounds i8, i8* %8146, i64 8
  %8157 = bitcast i8* %8156 to double*
  store double 0.000000e+00, double* %8157, align 1, !tbaa !2452
  %8158 = load i64, i64* %RBP
  %8159 = sub i64 %8158, 16
  %8160 = load i64, i64* %PC
  %8161 = add i64 %8160, 4
  store i64 %8161, i64* %PC
  %8162 = inttoptr i64 %8159 to i64*
  %8163 = load i64, i64* %8162
  store i64 %8163, i64* %RCX, align 8, !tbaa !2428
  %8164 = load i64, i64* %RBP
  %8165 = sub i64 %8164, 40
  %8166 = load i64, i64* %PC
  %8167 = add i64 %8166, 3
  store i64 %8167, i64* %PC
  %8168 = inttoptr i64 %8165 to i32*
  %8169 = load i32, i32* %8168
  %8170 = zext i32 %8169 to i64
  store i64 %8170, i64* %RAX, align 8, !tbaa !2428
  %8171 = load i64, i64* %RAX
  %8172 = load i64, i64* %PC
  %8173 = add i64 %8172, 3
  store i64 %8173, i64* %PC
  %8174 = trunc i64 %8171 to i32
  %8175 = add i32 1, %8174
  %8176 = zext i32 %8175 to i64
  store i64 %8176, i64* %RAX, align 8, !tbaa !2428
  %8177 = icmp ult i32 %8175, %8174
  %8178 = icmp ult i32 %8175, 1
  %8179 = or i1 %8177, %8178
  %8180 = zext i1 %8179 to i8
  %8181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8180, i8* %8181, align 1, !tbaa !2432
  %8182 = and i32 %8175, 255
  %8183 = call i32 @llvm.ctpop.i32(i32 %8182) #17
  %8184 = trunc i32 %8183 to i8
  %8185 = and i8 %8184, 1
  %8186 = xor i8 %8185, 1
  %8187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8186, i8* %8187, align 1, !tbaa !2446
  %8188 = xor i64 1, %8171
  %8189 = trunc i64 %8188 to i32
  %8190 = xor i32 %8189, %8175
  %8191 = lshr i32 %8190, 4
  %8192 = trunc i32 %8191 to i8
  %8193 = and i8 %8192, 1
  %8194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8193, i8* %8194, align 1, !tbaa !2447
  %8195 = icmp eq i32 %8175, 0
  %8196 = zext i1 %8195 to i8
  %8197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8196, i8* %8197, align 1, !tbaa !2448
  %8198 = lshr i32 %8175, 31
  %8199 = trunc i32 %8198 to i8
  %8200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8199, i8* %8200, align 1, !tbaa !2449
  %8201 = lshr i32 %8174, 31
  %8202 = xor i32 %8198, %8201
  %8203 = add nuw nsw i32 %8202, %8198
  %8204 = icmp eq i32 %8203, 2
  %8205 = zext i1 %8204 to i8
  %8206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8205, i8* %8206, align 1, !tbaa !2450
  %8207 = load i32, i32* %EAX
  %8208 = zext i32 %8207 to i64
  %8209 = load i64, i64* %PC
  %8210 = add i64 %8209, 3
  store i64 %8210, i64* %PC
  %8211 = shl i64 %8208, 32
  %8212 = ashr exact i64 %8211, 32
  store i64 %8212, i64* %RDX, align 8, !tbaa !2428
  %8213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8215 = load i64, i64* %RCX
  %8216 = load i64, i64* %RDX
  %8217 = mul i64 %8216, 8
  %8218 = add i64 %8217, %8215
  %8219 = load i64, i64* %PC
  %8220 = add i64 %8219, 5
  store i64 %8220, i64* %PC
  %8221 = bitcast i8* %8214 to double*
  %8222 = load double, double* %8221, align 1
  %8223 = getelementptr inbounds i8, i8* %8214, i64 8
  %8224 = bitcast i8* %8223 to i64*
  %8225 = load i64, i64* %8224, align 1
  %8226 = inttoptr i64 %8218 to double*
  %8227 = load double, double* %8226
  %8228 = fsub double %8222, %8227
  %8229 = bitcast i8* %8213 to double*
  store double %8228, double* %8229, align 1, !tbaa !2452
  %8230 = getelementptr inbounds i8, i8* %8213, i64 8
  %8231 = bitcast i8* %8230 to i64*
  store i64 %8225, i64* %8231, align 1, !tbaa !2452
  %8232 = load i64, i64* %RBP
  %8233 = sub i64 %8232, 176
  %8234 = bitcast %union.vec128_t* %XMM0 to i8*
  %8235 = load i64, i64* %PC
  %8236 = add i64 %8235, 8
  store i64 %8236, i64* %PC
  %8237 = bitcast i8* %8234 to double*
  %8238 = load double, double* %8237, align 1
  %8239 = inttoptr i64 %8233 to double*
  store double %8238, double* %8239
  %8240 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8241 = load i64, i64* %RBP
  %8242 = sub i64 %8241, 120
  %8243 = load i64, i64* %PC
  %8244 = add i64 %8243, 5
  store i64 %8244, i64* %PC
  %8245 = inttoptr i64 %8242 to double*
  %8246 = load double, double* %8245
  %8247 = bitcast i8* %8240 to double*
  store double %8246, double* %8247, align 1, !tbaa !2452
  %8248 = getelementptr inbounds i8, i8* %8240, i64 8
  %8249 = bitcast i8* %8248 to double*
  store double 0.000000e+00, double* %8249, align 1, !tbaa !2452
  %8250 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8251 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8252 = load i64, i64* %RBP
  %8253 = sub i64 %8252, 152
  %8254 = load i64, i64* %PC
  %8255 = add i64 %8254, 8
  store i64 %8255, i64* %PC
  %8256 = bitcast i8* %8251 to double*
  %8257 = load double, double* %8256, align 1
  %8258 = getelementptr inbounds i8, i8* %8251, i64 8
  %8259 = bitcast i8* %8258 to i64*
  %8260 = load i64, i64* %8259, align 1
  %8261 = inttoptr i64 %8253 to double*
  %8262 = load double, double* %8261
  %8263 = fadd double %8257, %8262
  %8264 = bitcast i8* %8250 to double*
  store double %8263, double* %8264, align 1, !tbaa !2452
  %8265 = getelementptr inbounds i8, i8* %8250, i64 8
  %8266 = bitcast i8* %8265 to i64*
  store i64 %8260, i64* %8266, align 1, !tbaa !2452
  %8267 = load i64, i64* %RBP
  %8268 = sub i64 %8267, 16
  %8269 = load i64, i64* %PC
  %8270 = add i64 %8269, 4
  store i64 %8270, i64* %PC
  %8271 = inttoptr i64 %8268 to i64*
  %8272 = load i64, i64* %8271
  store i64 %8272, i64* %RCX, align 8, !tbaa !2428
  %8273 = load i64, i64* %RBP
  %8274 = sub i64 %8273, 28
  %8275 = load i64, i64* %PC
  %8276 = add i64 %8275, 4
  store i64 %8276, i64* %PC
  %8277 = inttoptr i64 %8274 to i32*
  %8278 = load i32, i32* %8277
  %8279 = sext i32 %8278 to i64
  store i64 %8279, i64* %RDX, align 8, !tbaa !2428
  %8280 = load i64, i64* %RCX
  %8281 = load i64, i64* %RDX
  %8282 = mul i64 %8281, 8
  %8283 = add i64 %8282, %8280
  %8284 = bitcast %union.vec128_t* %XMM0 to i8*
  %8285 = load i64, i64* %PC
  %8286 = add i64 %8285, 5
  store i64 %8286, i64* %PC
  %8287 = bitcast i8* %8284 to double*
  %8288 = load double, double* %8287, align 1
  %8289 = inttoptr i64 %8283 to double*
  store double %8288, double* %8289
  %8290 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8291 = load i64, i64* %RBP
  %8292 = sub i64 %8291, 128
  %8293 = load i64, i64* %PC
  %8294 = add i64 %8293, 5
  store i64 %8294, i64* %PC
  %8295 = inttoptr i64 %8292 to double*
  %8296 = load double, double* %8295
  %8297 = bitcast i8* %8290 to double*
  store double %8296, double* %8297, align 1, !tbaa !2452
  %8298 = getelementptr inbounds i8, i8* %8290, i64 8
  %8299 = bitcast i8* %8298 to double*
  store double 0.000000e+00, double* %8299, align 1, !tbaa !2452
  %8300 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8301 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8302 = load i64, i64* %RBP
  %8303 = sub i64 %8302, 160
  %8304 = load i64, i64* %PC
  %8305 = add i64 %8304, 8
  store i64 %8305, i64* %PC
  %8306 = bitcast i8* %8301 to double*
  %8307 = load double, double* %8306, align 1
  %8308 = getelementptr inbounds i8, i8* %8301, i64 8
  %8309 = bitcast i8* %8308 to i64*
  %8310 = load i64, i64* %8309, align 1
  %8311 = inttoptr i64 %8303 to double*
  %8312 = load double, double* %8311
  %8313 = fadd double %8307, %8312
  %8314 = bitcast i8* %8300 to double*
  store double %8313, double* %8314, align 1, !tbaa !2452
  %8315 = getelementptr inbounds i8, i8* %8300, i64 8
  %8316 = bitcast i8* %8315 to i64*
  store i64 %8310, i64* %8316, align 1, !tbaa !2452
  %8317 = load i64, i64* %RBP
  %8318 = sub i64 %8317, 16
  %8319 = load i64, i64* %PC
  %8320 = add i64 %8319, 4
  store i64 %8320, i64* %PC
  %8321 = inttoptr i64 %8318 to i64*
  %8322 = load i64, i64* %8321
  store i64 %8322, i64* %RCX, align 8, !tbaa !2428
  %8323 = load i64, i64* %RBP
  %8324 = sub i64 %8323, 28
  %8325 = load i64, i64* %PC
  %8326 = add i64 %8325, 3
  store i64 %8326, i64* %PC
  %8327 = inttoptr i64 %8324 to i32*
  %8328 = load i32, i32* %8327
  %8329 = zext i32 %8328 to i64
  store i64 %8329, i64* %RAX, align 8, !tbaa !2428
  %8330 = load i64, i64* %RAX
  %8331 = load i64, i64* %PC
  %8332 = add i64 %8331, 3
  store i64 %8332, i64* %PC
  %8333 = trunc i64 %8330 to i32
  %8334 = add i32 1, %8333
  %8335 = zext i32 %8334 to i64
  store i64 %8335, i64* %RAX, align 8, !tbaa !2428
  %8336 = icmp ult i32 %8334, %8333
  %8337 = icmp ult i32 %8334, 1
  %8338 = or i1 %8336, %8337
  %8339 = zext i1 %8338 to i8
  %8340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8339, i8* %8340, align 1, !tbaa !2432
  %8341 = and i32 %8334, 255
  %8342 = call i32 @llvm.ctpop.i32(i32 %8341) #17
  %8343 = trunc i32 %8342 to i8
  %8344 = and i8 %8343, 1
  %8345 = xor i8 %8344, 1
  %8346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8345, i8* %8346, align 1, !tbaa !2446
  %8347 = xor i64 1, %8330
  %8348 = trunc i64 %8347 to i32
  %8349 = xor i32 %8348, %8334
  %8350 = lshr i32 %8349, 4
  %8351 = trunc i32 %8350 to i8
  %8352 = and i8 %8351, 1
  %8353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8352, i8* %8353, align 1, !tbaa !2447
  %8354 = icmp eq i32 %8334, 0
  %8355 = zext i1 %8354 to i8
  %8356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8355, i8* %8356, align 1, !tbaa !2448
  %8357 = lshr i32 %8334, 31
  %8358 = trunc i32 %8357 to i8
  %8359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8358, i8* %8359, align 1, !tbaa !2449
  %8360 = lshr i32 %8333, 31
  %8361 = xor i32 %8357, %8360
  %8362 = add nuw nsw i32 %8361, %8357
  %8363 = icmp eq i32 %8362, 2
  %8364 = zext i1 %8363 to i8
  %8365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8364, i8* %8365, align 1, !tbaa !2450
  %8366 = load i32, i32* %EAX
  %8367 = zext i32 %8366 to i64
  %8368 = load i64, i64* %PC
  %8369 = add i64 %8368, 3
  store i64 %8369, i64* %PC
  %8370 = shl i64 %8367, 32
  %8371 = ashr exact i64 %8370, 32
  store i64 %8371, i64* %RDX, align 8, !tbaa !2428
  %8372 = load i64, i64* %RCX
  %8373 = load i64, i64* %RDX
  %8374 = mul i64 %8373, 8
  %8375 = add i64 %8374, %8372
  %8376 = bitcast %union.vec128_t* %XMM0 to i8*
  %8377 = load i64, i64* %PC
  %8378 = add i64 %8377, 5
  store i64 %8378, i64* %PC
  %8379 = bitcast i8* %8376 to double*
  %8380 = load double, double* %8379, align 1
  %8381 = inttoptr i64 %8375 to double*
  store double %8380, double* %8381
  %8382 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8383 = load i64, i64* %RBP
  %8384 = sub i64 %8383, 152
  %8385 = load i64, i64* %PC
  %8386 = add i64 %8385, 8
  store i64 %8386, i64* %PC
  %8387 = inttoptr i64 %8384 to double*
  %8388 = load double, double* %8387
  %8389 = bitcast i8* %8382 to double*
  store double %8388, double* %8389, align 1, !tbaa !2452
  %8390 = getelementptr inbounds i8, i8* %8382, i64 8
  %8391 = bitcast i8* %8390 to double*
  store double 0.000000e+00, double* %8391, align 1, !tbaa !2452
  %8392 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8393 = load i64, i64* %RBP
  %8394 = sub i64 %8393, 120
  %8395 = load i64, i64* %PC
  %8396 = add i64 %8395, 5
  store i64 %8396, i64* %PC
  %8397 = inttoptr i64 %8394 to double*
  %8398 = load double, double* %8397
  %8399 = bitcast i8* %8392 to double*
  store double %8398, double* %8399, align 1, !tbaa !2452
  %8400 = getelementptr inbounds i8, i8* %8392, i64 8
  %8401 = bitcast i8* %8400 to double*
  store double 0.000000e+00, double* %8401, align 1, !tbaa !2452
  %8402 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8403 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8404 = bitcast %union.vec128_t* %XMM0 to i8*
  %8405 = load i64, i64* %PC
  %8406 = add i64 %8405, 4
  store i64 %8406, i64* %PC
  %8407 = bitcast i8* %8403 to double*
  %8408 = load double, double* %8407, align 1
  %8409 = getelementptr inbounds i8, i8* %8403, i64 8
  %8410 = bitcast i8* %8409 to i64*
  %8411 = load i64, i64* %8410, align 1
  %8412 = bitcast i8* %8404 to double*
  %8413 = load double, double* %8412, align 1
  %8414 = fsub double %8408, %8413
  %8415 = bitcast i8* %8402 to double*
  store double %8414, double* %8415, align 1, !tbaa !2452
  %8416 = getelementptr inbounds i8, i8* %8402, i64 8
  %8417 = bitcast i8* %8416 to i64*
  store i64 %8411, i64* %8417, align 1, !tbaa !2452
  %8418 = load i64, i64* %RBP
  %8419 = sub i64 %8418, 120
  %8420 = bitcast %union.vec128_t* %XMM1 to i8*
  %8421 = load i64, i64* %PC
  %8422 = add i64 %8421, 5
  store i64 %8422, i64* %PC
  %8423 = bitcast i8* %8420 to double*
  %8424 = load double, double* %8423, align 1
  %8425 = inttoptr i64 %8419 to double*
  store double %8424, double* %8425
  %8426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8427 = load i64, i64* %RBP
  %8428 = sub i64 %8427, 160
  %8429 = load i64, i64* %PC
  %8430 = add i64 %8429, 8
  store i64 %8430, i64* %PC
  %8431 = inttoptr i64 %8428 to double*
  %8432 = load double, double* %8431
  %8433 = bitcast i8* %8426 to double*
  store double %8432, double* %8433, align 1, !tbaa !2452
  %8434 = getelementptr inbounds i8, i8* %8426, i64 8
  %8435 = bitcast i8* %8434 to double*
  store double 0.000000e+00, double* %8435, align 1, !tbaa !2452
  %8436 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8437 = load i64, i64* %RBP
  %8438 = sub i64 %8437, 128
  %8439 = load i64, i64* %PC
  %8440 = add i64 %8439, 5
  store i64 %8440, i64* %PC
  %8441 = inttoptr i64 %8438 to double*
  %8442 = load double, double* %8441
  %8443 = bitcast i8* %8436 to double*
  store double %8442, double* %8443, align 1, !tbaa !2452
  %8444 = getelementptr inbounds i8, i8* %8436, i64 8
  %8445 = bitcast i8* %8444 to double*
  store double 0.000000e+00, double* %8445, align 1, !tbaa !2452
  %8446 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8447 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8448 = bitcast %union.vec128_t* %XMM0 to i8*
  %8449 = load i64, i64* %PC
  %8450 = add i64 %8449, 4
  store i64 %8450, i64* %PC
  %8451 = bitcast i8* %8447 to double*
  %8452 = load double, double* %8451, align 1
  %8453 = getelementptr inbounds i8, i8* %8447, i64 8
  %8454 = bitcast i8* %8453 to i64*
  %8455 = load i64, i64* %8454, align 1
  %8456 = bitcast i8* %8448 to double*
  %8457 = load double, double* %8456, align 1
  %8458 = fsub double %8452, %8457
  %8459 = bitcast i8* %8446 to double*
  store double %8458, double* %8459, align 1, !tbaa !2452
  %8460 = getelementptr inbounds i8, i8* %8446, i64 8
  %8461 = bitcast i8* %8460 to i64*
  store i64 %8455, i64* %8461, align 1, !tbaa !2452
  %8462 = load i64, i64* %RBP
  %8463 = sub i64 %8462, 128
  %8464 = bitcast %union.vec128_t* %XMM1 to i8*
  %8465 = load i64, i64* %PC
  %8466 = add i64 %8465, 5
  store i64 %8466, i64* %PC
  %8467 = bitcast i8* %8464 to double*
  %8468 = load double, double* %8467, align 1
  %8469 = inttoptr i64 %8463 to double*
  store double %8468, double* %8469
  %8470 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8471 = load i64, i64* %RBP
  %8472 = sub i64 %8471, 88
  %8473 = load i64, i64* %PC
  %8474 = add i64 %8473, 5
  store i64 %8474, i64* %PC
  %8475 = inttoptr i64 %8472 to double*
  %8476 = load double, double* %8475
  %8477 = bitcast i8* %8470 to double*
  store double %8476, double* %8477, align 1, !tbaa !2452
  %8478 = getelementptr inbounds i8, i8* %8470, i64 8
  %8479 = bitcast i8* %8478 to double*
  store double 0.000000e+00, double* %8479, align 1, !tbaa !2452
  %8480 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8481 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8482 = load i64, i64* %RBP
  %8483 = sub i64 %8482, 120
  %8484 = load i64, i64* %PC
  %8485 = add i64 %8484, 5
  store i64 %8485, i64* %PC
  %8486 = bitcast i8* %8481 to double*
  %8487 = load double, double* %8486, align 1
  %8488 = getelementptr inbounds i8, i8* %8481, i64 8
  %8489 = bitcast i8* %8488 to i64*
  %8490 = load i64, i64* %8489, align 1
  %8491 = inttoptr i64 %8483 to double*
  %8492 = load double, double* %8491
  %8493 = fmul double %8487, %8492
  %8494 = bitcast i8* %8480 to double*
  store double %8493, double* %8494, align 1, !tbaa !2452
  %8495 = getelementptr inbounds i8, i8* %8480, i64 8
  %8496 = bitcast i8* %8495 to i64*
  store i64 %8490, i64* %8496, align 1, !tbaa !2452
  %8497 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8498 = load i64, i64* %RBP
  %8499 = sub i64 %8498, 96
  %8500 = load i64, i64* %PC
  %8501 = add i64 %8500, 5
  store i64 %8501, i64* %PC
  %8502 = inttoptr i64 %8499 to double*
  %8503 = load double, double* %8502
  %8504 = bitcast i8* %8497 to double*
  store double %8503, double* %8504, align 1, !tbaa !2452
  %8505 = getelementptr inbounds i8, i8* %8497, i64 8
  %8506 = bitcast i8* %8505 to double*
  store double 0.000000e+00, double* %8506, align 1, !tbaa !2452
  %8507 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8508 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8509 = load i64, i64* %RBP
  %8510 = sub i64 %8509, 128
  %8511 = load i64, i64* %PC
  %8512 = add i64 %8511, 5
  store i64 %8512, i64* %PC
  %8513 = bitcast i8* %8508 to double*
  %8514 = load double, double* %8513, align 1
  %8515 = getelementptr inbounds i8, i8* %8508, i64 8
  %8516 = bitcast i8* %8515 to i64*
  %8517 = load i64, i64* %8516, align 1
  %8518 = inttoptr i64 %8510 to double*
  %8519 = load double, double* %8518
  %8520 = fmul double %8514, %8519
  %8521 = bitcast i8* %8507 to double*
  store double %8520, double* %8521, align 1, !tbaa !2452
  %8522 = getelementptr inbounds i8, i8* %8507, i64 8
  %8523 = bitcast i8* %8522 to i64*
  store i64 %8517, i64* %8523, align 1, !tbaa !2452
  %8524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8525 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8526 = bitcast %union.vec128_t* %XMM1 to i8*
  %8527 = load i64, i64* %PC
  %8528 = add i64 %8527, 4
  store i64 %8528, i64* %PC
  %8529 = bitcast i8* %8525 to double*
  %8530 = load double, double* %8529, align 1
  %8531 = getelementptr inbounds i8, i8* %8525, i64 8
  %8532 = bitcast i8* %8531 to i64*
  %8533 = load i64, i64* %8532, align 1
  %8534 = bitcast i8* %8526 to double*
  %8535 = load double, double* %8534, align 1
  %8536 = fsub double %8530, %8535
  %8537 = bitcast i8* %8524 to double*
  store double %8536, double* %8537, align 1, !tbaa !2452
  %8538 = getelementptr inbounds i8, i8* %8524, i64 8
  %8539 = bitcast i8* %8538 to i64*
  store i64 %8533, i64* %8539, align 1, !tbaa !2452
  %8540 = load i64, i64* %RBP
  %8541 = sub i64 %8540, 16
  %8542 = load i64, i64* %PC
  %8543 = add i64 %8542, 4
  store i64 %8543, i64* %PC
  %8544 = inttoptr i64 %8541 to i64*
  %8545 = load i64, i64* %8544
  store i64 %8545, i64* %RCX, align 8, !tbaa !2428
  %8546 = load i64, i64* %RBP
  %8547 = sub i64 %8546, 36
  %8548 = load i64, i64* %PC
  %8549 = add i64 %8548, 4
  store i64 %8549, i64* %PC
  %8550 = inttoptr i64 %8547 to i32*
  %8551 = load i32, i32* %8550
  %8552 = sext i32 %8551 to i64
  store i64 %8552, i64* %RDX, align 8, !tbaa !2428
  %8553 = load i64, i64* %RCX
  %8554 = load i64, i64* %RDX
  %8555 = mul i64 %8554, 8
  %8556 = add i64 %8555, %8553
  %8557 = bitcast %union.vec128_t* %XMM0 to i8*
  %8558 = load i64, i64* %PC
  %8559 = add i64 %8558, 5
  store i64 %8559, i64* %PC
  %8560 = bitcast i8* %8557 to double*
  %8561 = load double, double* %8560, align 1
  %8562 = inttoptr i64 %8556 to double*
  store double %8561, double* %8562
  %8563 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8564 = load i64, i64* %RBP
  %8565 = sub i64 %8564, 88
  %8566 = load i64, i64* %PC
  %8567 = add i64 %8566, 5
  store i64 %8567, i64* %PC
  %8568 = inttoptr i64 %8565 to double*
  %8569 = load double, double* %8568
  %8570 = bitcast i8* %8563 to double*
  store double %8569, double* %8570, align 1, !tbaa !2452
  %8571 = getelementptr inbounds i8, i8* %8563, i64 8
  %8572 = bitcast i8* %8571 to double*
  store double 0.000000e+00, double* %8572, align 1, !tbaa !2452
  %8573 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8574 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8575 = load i64, i64* %RBP
  %8576 = sub i64 %8575, 128
  %8577 = load i64, i64* %PC
  %8578 = add i64 %8577, 5
  store i64 %8578, i64* %PC
  %8579 = bitcast i8* %8574 to double*
  %8580 = load double, double* %8579, align 1
  %8581 = getelementptr inbounds i8, i8* %8574, i64 8
  %8582 = bitcast i8* %8581 to i64*
  %8583 = load i64, i64* %8582, align 1
  %8584 = inttoptr i64 %8576 to double*
  %8585 = load double, double* %8584
  %8586 = fmul double %8580, %8585
  %8587 = bitcast i8* %8573 to double*
  store double %8586, double* %8587, align 1, !tbaa !2452
  %8588 = getelementptr inbounds i8, i8* %8573, i64 8
  %8589 = bitcast i8* %8588 to i64*
  store i64 %8583, i64* %8589, align 1, !tbaa !2452
  %8590 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8591 = load i64, i64* %RBP
  %8592 = sub i64 %8591, 96
  %8593 = load i64, i64* %PC
  %8594 = add i64 %8593, 5
  store i64 %8594, i64* %PC
  %8595 = inttoptr i64 %8592 to double*
  %8596 = load double, double* %8595
  %8597 = bitcast i8* %8590 to double*
  store double %8596, double* %8597, align 1, !tbaa !2452
  %8598 = getelementptr inbounds i8, i8* %8590, i64 8
  %8599 = bitcast i8* %8598 to double*
  store double 0.000000e+00, double* %8599, align 1, !tbaa !2452
  %8600 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8601 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8602 = load i64, i64* %RBP
  %8603 = sub i64 %8602, 120
  %8604 = load i64, i64* %PC
  %8605 = add i64 %8604, 5
  store i64 %8605, i64* %PC
  %8606 = bitcast i8* %8601 to double*
  %8607 = load double, double* %8606, align 1
  %8608 = getelementptr inbounds i8, i8* %8601, i64 8
  %8609 = bitcast i8* %8608 to i64*
  %8610 = load i64, i64* %8609, align 1
  %8611 = inttoptr i64 %8603 to double*
  %8612 = load double, double* %8611
  %8613 = fmul double %8607, %8612
  %8614 = bitcast i8* %8600 to double*
  store double %8613, double* %8614, align 1, !tbaa !2452
  %8615 = getelementptr inbounds i8, i8* %8600, i64 8
  %8616 = bitcast i8* %8615 to i64*
  store i64 %8610, i64* %8616, align 1, !tbaa !2452
  %8617 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8618 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8619 = bitcast %union.vec128_t* %XMM1 to i8*
  %8620 = load i64, i64* %PC
  %8621 = add i64 %8620, 4
  store i64 %8621, i64* %PC
  %8622 = bitcast i8* %8618 to double*
  %8623 = load double, double* %8622, align 1
  %8624 = getelementptr inbounds i8, i8* %8618, i64 8
  %8625 = bitcast i8* %8624 to i64*
  %8626 = load i64, i64* %8625, align 1
  %8627 = bitcast i8* %8619 to double*
  %8628 = load double, double* %8627, align 1
  %8629 = fadd double %8623, %8628
  %8630 = bitcast i8* %8617 to double*
  store double %8629, double* %8630, align 1, !tbaa !2452
  %8631 = getelementptr inbounds i8, i8* %8617, i64 8
  %8632 = bitcast i8* %8631 to i64*
  store i64 %8626, i64* %8632, align 1, !tbaa !2452
  %8633 = load i64, i64* %RBP
  %8634 = sub i64 %8633, 16
  %8635 = load i64, i64* %PC
  %8636 = add i64 %8635, 4
  store i64 %8636, i64* %PC
  %8637 = inttoptr i64 %8634 to i64*
  %8638 = load i64, i64* %8637
  store i64 %8638, i64* %RCX, align 8, !tbaa !2428
  %8639 = load i64, i64* %RBP
  %8640 = sub i64 %8639, 36
  %8641 = load i64, i64* %PC
  %8642 = add i64 %8641, 3
  store i64 %8642, i64* %PC
  %8643 = inttoptr i64 %8640 to i32*
  %8644 = load i32, i32* %8643
  %8645 = zext i32 %8644 to i64
  store i64 %8645, i64* %RAX, align 8, !tbaa !2428
  %8646 = load i64, i64* %RAX
  %8647 = load i64, i64* %PC
  %8648 = add i64 %8647, 3
  store i64 %8648, i64* %PC
  %8649 = trunc i64 %8646 to i32
  %8650 = add i32 1, %8649
  %8651 = zext i32 %8650 to i64
  store i64 %8651, i64* %RAX, align 8, !tbaa !2428
  %8652 = icmp ult i32 %8650, %8649
  %8653 = icmp ult i32 %8650, 1
  %8654 = or i1 %8652, %8653
  %8655 = zext i1 %8654 to i8
  %8656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8655, i8* %8656, align 1, !tbaa !2432
  %8657 = and i32 %8650, 255
  %8658 = call i32 @llvm.ctpop.i32(i32 %8657) #17
  %8659 = trunc i32 %8658 to i8
  %8660 = and i8 %8659, 1
  %8661 = xor i8 %8660, 1
  %8662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8661, i8* %8662, align 1, !tbaa !2446
  %8663 = xor i64 1, %8646
  %8664 = trunc i64 %8663 to i32
  %8665 = xor i32 %8664, %8650
  %8666 = lshr i32 %8665, 4
  %8667 = trunc i32 %8666 to i8
  %8668 = and i8 %8667, 1
  %8669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8668, i8* %8669, align 1, !tbaa !2447
  %8670 = icmp eq i32 %8650, 0
  %8671 = zext i1 %8670 to i8
  %8672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8671, i8* %8672, align 1, !tbaa !2448
  %8673 = lshr i32 %8650, 31
  %8674 = trunc i32 %8673 to i8
  %8675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8674, i8* %8675, align 1, !tbaa !2449
  %8676 = lshr i32 %8649, 31
  %8677 = xor i32 %8673, %8676
  %8678 = add nuw nsw i32 %8677, %8673
  %8679 = icmp eq i32 %8678, 2
  %8680 = zext i1 %8679 to i8
  %8681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8680, i8* %8681, align 1, !tbaa !2450
  %8682 = load i32, i32* %EAX
  %8683 = zext i32 %8682 to i64
  %8684 = load i64, i64* %PC
  %8685 = add i64 %8684, 3
  store i64 %8685, i64* %PC
  %8686 = shl i64 %8683, 32
  %8687 = ashr exact i64 %8686, 32
  store i64 %8687, i64* %RDX, align 8, !tbaa !2428
  %8688 = load i64, i64* %RCX
  %8689 = load i64, i64* %RDX
  %8690 = mul i64 %8689, 8
  %8691 = add i64 %8690, %8688
  %8692 = bitcast %union.vec128_t* %XMM0 to i8*
  %8693 = load i64, i64* %PC
  %8694 = add i64 %8693, 5
  store i64 %8694, i64* %PC
  %8695 = bitcast i8* %8692 to double*
  %8696 = load double, double* %8695, align 1
  %8697 = inttoptr i64 %8691 to double*
  store double %8696, double* %8697
  %8698 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8699 = load i64, i64* %RBP
  %8700 = sub i64 %8699, 136
  %8701 = load i64, i64* %PC
  %8702 = add i64 %8701, 8
  store i64 %8702, i64* %PC
  %8703 = inttoptr i64 %8700 to double*
  %8704 = load double, double* %8703
  %8705 = bitcast i8* %8698 to double*
  store double %8704, double* %8705, align 1, !tbaa !2452
  %8706 = getelementptr inbounds i8, i8* %8698, i64 8
  %8707 = bitcast i8* %8706 to double*
  store double 0.000000e+00, double* %8707, align 1, !tbaa !2452
  %8708 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8709 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8710 = load i64, i64* %RBP
  %8711 = sub i64 %8710, 176
  %8712 = load i64, i64* %PC
  %8713 = add i64 %8712, 8
  store i64 %8713, i64* %PC
  %8714 = bitcast i8* %8709 to double*
  %8715 = load double, double* %8714, align 1
  %8716 = getelementptr inbounds i8, i8* %8709, i64 8
  %8717 = bitcast i8* %8716 to i64*
  %8718 = load i64, i64* %8717, align 1
  %8719 = inttoptr i64 %8711 to double*
  %8720 = load double, double* %8719
  %8721 = fsub double %8715, %8720
  %8722 = bitcast i8* %8708 to double*
  store double %8721, double* %8722, align 1, !tbaa !2452
  %8723 = getelementptr inbounds i8, i8* %8708, i64 8
  %8724 = bitcast i8* %8723 to i64*
  store i64 %8718, i64* %8724, align 1, !tbaa !2452
  %8725 = load i64, i64* %RBP
  %8726 = sub i64 %8725, 120
  %8727 = bitcast %union.vec128_t* %XMM0 to i8*
  %8728 = load i64, i64* %PC
  %8729 = add i64 %8728, 5
  store i64 %8729, i64* %PC
  %8730 = bitcast i8* %8727 to double*
  %8731 = load double, double* %8730, align 1
  %8732 = inttoptr i64 %8726 to double*
  store double %8731, double* %8732
  %8733 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8734 = load i64, i64* %RBP
  %8735 = sub i64 %8734, 144
  %8736 = load i64, i64* %PC
  %8737 = add i64 %8736, 8
  store i64 %8737, i64* %PC
  %8738 = inttoptr i64 %8735 to double*
  %8739 = load double, double* %8738
  %8740 = bitcast i8* %8733 to double*
  store double %8739, double* %8740, align 1, !tbaa !2452
  %8741 = getelementptr inbounds i8, i8* %8733, i64 8
  %8742 = bitcast i8* %8741 to double*
  store double 0.000000e+00, double* %8742, align 1, !tbaa !2452
  %8743 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8744 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8745 = load i64, i64* %RBP
  %8746 = sub i64 %8745, 168
  %8747 = load i64, i64* %PC
  %8748 = add i64 %8747, 8
  store i64 %8748, i64* %PC
  %8749 = bitcast i8* %8744 to double*
  %8750 = load double, double* %8749, align 1
  %8751 = getelementptr inbounds i8, i8* %8744, i64 8
  %8752 = bitcast i8* %8751 to i64*
  %8753 = load i64, i64* %8752, align 1
  %8754 = inttoptr i64 %8746 to double*
  %8755 = load double, double* %8754
  %8756 = fadd double %8750, %8755
  %8757 = bitcast i8* %8743 to double*
  store double %8756, double* %8757, align 1, !tbaa !2452
  %8758 = getelementptr inbounds i8, i8* %8743, i64 8
  %8759 = bitcast i8* %8758 to i64*
  store i64 %8753, i64* %8759, align 1, !tbaa !2452
  %8760 = load i64, i64* %RBP
  %8761 = sub i64 %8760, 128
  %8762 = bitcast %union.vec128_t* %XMM0 to i8*
  %8763 = load i64, i64* %PC
  %8764 = add i64 %8763, 5
  store i64 %8764, i64* %PC
  %8765 = bitcast i8* %8762 to double*
  %8766 = load double, double* %8765, align 1
  %8767 = inttoptr i64 %8761 to double*
  store double %8766, double* %8767
  %8768 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8769 = load i64, i64* %RBP
  %8770 = sub i64 %8769, 72
  %8771 = load i64, i64* %PC
  %8772 = add i64 %8771, 5
  store i64 %8772, i64* %PC
  %8773 = inttoptr i64 %8770 to double*
  %8774 = load double, double* %8773
  %8775 = bitcast i8* %8768 to double*
  store double %8774, double* %8775, align 1, !tbaa !2452
  %8776 = getelementptr inbounds i8, i8* %8768, i64 8
  %8777 = bitcast i8* %8776 to double*
  store double 0.000000e+00, double* %8777, align 1, !tbaa !2452
  %8778 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8779 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8780 = load i64, i64* %RBP
  %8781 = sub i64 %8780, 120
  %8782 = load i64, i64* %PC
  %8783 = add i64 %8782, 5
  store i64 %8783, i64* %PC
  %8784 = bitcast i8* %8779 to double*
  %8785 = load double, double* %8784, align 1
  %8786 = getelementptr inbounds i8, i8* %8779, i64 8
  %8787 = bitcast i8* %8786 to i64*
  %8788 = load i64, i64* %8787, align 1
  %8789 = inttoptr i64 %8781 to double*
  %8790 = load double, double* %8789
  %8791 = fmul double %8785, %8790
  %8792 = bitcast i8* %8778 to double*
  store double %8791, double* %8792, align 1, !tbaa !2452
  %8793 = getelementptr inbounds i8, i8* %8778, i64 8
  %8794 = bitcast i8* %8793 to i64*
  store i64 %8788, i64* %8794, align 1, !tbaa !2452
  %8795 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8796 = load i64, i64* %RBP
  %8797 = sub i64 %8796, 80
  %8798 = load i64, i64* %PC
  %8799 = add i64 %8798, 5
  store i64 %8799, i64* %PC
  %8800 = inttoptr i64 %8797 to double*
  %8801 = load double, double* %8800
  %8802 = bitcast i8* %8795 to double*
  store double %8801, double* %8802, align 1, !tbaa !2452
  %8803 = getelementptr inbounds i8, i8* %8795, i64 8
  %8804 = bitcast i8* %8803 to double*
  store double 0.000000e+00, double* %8804, align 1, !tbaa !2452
  %8805 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8806 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8807 = load i64, i64* %RBP
  %8808 = sub i64 %8807, 128
  %8809 = load i64, i64* %PC
  %8810 = add i64 %8809, 5
  store i64 %8810, i64* %PC
  %8811 = bitcast i8* %8806 to double*
  %8812 = load double, double* %8811, align 1
  %8813 = getelementptr inbounds i8, i8* %8806, i64 8
  %8814 = bitcast i8* %8813 to i64*
  %8815 = load i64, i64* %8814, align 1
  %8816 = inttoptr i64 %8808 to double*
  %8817 = load double, double* %8816
  %8818 = fmul double %8812, %8817
  %8819 = bitcast i8* %8805 to double*
  store double %8818, double* %8819, align 1, !tbaa !2452
  %8820 = getelementptr inbounds i8, i8* %8805, i64 8
  %8821 = bitcast i8* %8820 to i64*
  store i64 %8815, i64* %8821, align 1, !tbaa !2452
  %8822 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8823 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8824 = bitcast %union.vec128_t* %XMM1 to i8*
  %8825 = load i64, i64* %PC
  %8826 = add i64 %8825, 4
  store i64 %8826, i64* %PC
  %8827 = bitcast i8* %8823 to double*
  %8828 = load double, double* %8827, align 1
  %8829 = getelementptr inbounds i8, i8* %8823, i64 8
  %8830 = bitcast i8* %8829 to i64*
  %8831 = load i64, i64* %8830, align 1
  %8832 = bitcast i8* %8824 to double*
  %8833 = load double, double* %8832, align 1
  %8834 = fsub double %8828, %8833
  %8835 = bitcast i8* %8822 to double*
  store double %8834, double* %8835, align 1, !tbaa !2452
  %8836 = getelementptr inbounds i8, i8* %8822, i64 8
  %8837 = bitcast i8* %8836 to i64*
  store i64 %8831, i64* %8837, align 1, !tbaa !2452
  %8838 = load i64, i64* %RBP
  %8839 = sub i64 %8838, 16
  %8840 = load i64, i64* %PC
  %8841 = add i64 %8840, 4
  store i64 %8841, i64* %PC
  %8842 = inttoptr i64 %8839 to i64*
  %8843 = load i64, i64* %8842
  store i64 %8843, i64* %RCX, align 8, !tbaa !2428
  %8844 = load i64, i64* %RBP
  %8845 = sub i64 %8844, 32
  %8846 = load i64, i64* %PC
  %8847 = add i64 %8846, 4
  store i64 %8847, i64* %PC
  %8848 = inttoptr i64 %8845 to i32*
  %8849 = load i32, i32* %8848
  %8850 = sext i32 %8849 to i64
  store i64 %8850, i64* %RDX, align 8, !tbaa !2428
  %8851 = load i64, i64* %RCX
  %8852 = load i64, i64* %RDX
  %8853 = mul i64 %8852, 8
  %8854 = add i64 %8853, %8851
  %8855 = bitcast %union.vec128_t* %XMM0 to i8*
  %8856 = load i64, i64* %PC
  %8857 = add i64 %8856, 5
  store i64 %8857, i64* %PC
  %8858 = bitcast i8* %8855 to double*
  %8859 = load double, double* %8858, align 1
  %8860 = inttoptr i64 %8854 to double*
  store double %8859, double* %8860
  %8861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8862 = load i64, i64* %RBP
  %8863 = sub i64 %8862, 72
  %8864 = load i64, i64* %PC
  %8865 = add i64 %8864, 5
  store i64 %8865, i64* %PC
  %8866 = inttoptr i64 %8863 to double*
  %8867 = load double, double* %8866
  %8868 = bitcast i8* %8861 to double*
  store double %8867, double* %8868, align 1, !tbaa !2452
  %8869 = getelementptr inbounds i8, i8* %8861, i64 8
  %8870 = bitcast i8* %8869 to double*
  store double 0.000000e+00, double* %8870, align 1, !tbaa !2452
  %8871 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8872 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8873 = load i64, i64* %RBP
  %8874 = sub i64 %8873, 128
  %8875 = load i64, i64* %PC
  %8876 = add i64 %8875, 5
  store i64 %8876, i64* %PC
  %8877 = bitcast i8* %8872 to double*
  %8878 = load double, double* %8877, align 1
  %8879 = getelementptr inbounds i8, i8* %8872, i64 8
  %8880 = bitcast i8* %8879 to i64*
  %8881 = load i64, i64* %8880, align 1
  %8882 = inttoptr i64 %8874 to double*
  %8883 = load double, double* %8882
  %8884 = fmul double %8878, %8883
  %8885 = bitcast i8* %8871 to double*
  store double %8884, double* %8885, align 1, !tbaa !2452
  %8886 = getelementptr inbounds i8, i8* %8871, i64 8
  %8887 = bitcast i8* %8886 to i64*
  store i64 %8881, i64* %8887, align 1, !tbaa !2452
  %8888 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8889 = load i64, i64* %RBP
  %8890 = sub i64 %8889, 80
  %8891 = load i64, i64* %PC
  %8892 = add i64 %8891, 5
  store i64 %8892, i64* %PC
  %8893 = inttoptr i64 %8890 to double*
  %8894 = load double, double* %8893
  %8895 = bitcast i8* %8888 to double*
  store double %8894, double* %8895, align 1, !tbaa !2452
  %8896 = getelementptr inbounds i8, i8* %8888, i64 8
  %8897 = bitcast i8* %8896 to double*
  store double 0.000000e+00, double* %8897, align 1, !tbaa !2452
  %8898 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8899 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8900 = load i64, i64* %RBP
  %8901 = sub i64 %8900, 120
  %8902 = load i64, i64* %PC
  %8903 = add i64 %8902, 5
  store i64 %8903, i64* %PC
  %8904 = bitcast i8* %8899 to double*
  %8905 = load double, double* %8904, align 1
  %8906 = getelementptr inbounds i8, i8* %8899, i64 8
  %8907 = bitcast i8* %8906 to i64*
  %8908 = load i64, i64* %8907, align 1
  %8909 = inttoptr i64 %8901 to double*
  %8910 = load double, double* %8909
  %8911 = fmul double %8905, %8910
  %8912 = bitcast i8* %8898 to double*
  store double %8911, double* %8912, align 1, !tbaa !2452
  %8913 = getelementptr inbounds i8, i8* %8898, i64 8
  %8914 = bitcast i8* %8913 to i64*
  store i64 %8908, i64* %8914, align 1, !tbaa !2452
  %8915 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8916 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8917 = bitcast %union.vec128_t* %XMM1 to i8*
  %8918 = load i64, i64* %PC
  %8919 = add i64 %8918, 4
  store i64 %8919, i64* %PC
  %8920 = bitcast i8* %8916 to double*
  %8921 = load double, double* %8920, align 1
  %8922 = getelementptr inbounds i8, i8* %8916, i64 8
  %8923 = bitcast i8* %8922 to i64*
  %8924 = load i64, i64* %8923, align 1
  %8925 = bitcast i8* %8917 to double*
  %8926 = load double, double* %8925, align 1
  %8927 = fadd double %8921, %8926
  %8928 = bitcast i8* %8915 to double*
  store double %8927, double* %8928, align 1, !tbaa !2452
  %8929 = getelementptr inbounds i8, i8* %8915, i64 8
  %8930 = bitcast i8* %8929 to i64*
  store i64 %8924, i64* %8930, align 1, !tbaa !2452
  %8931 = load i64, i64* %RBP
  %8932 = sub i64 %8931, 16
  %8933 = load i64, i64* %PC
  %8934 = add i64 %8933, 4
  store i64 %8934, i64* %PC
  %8935 = inttoptr i64 %8932 to i64*
  %8936 = load i64, i64* %8935
  store i64 %8936, i64* %RCX, align 8, !tbaa !2428
  %8937 = load i64, i64* %RBP
  %8938 = sub i64 %8937, 32
  %8939 = load i64, i64* %PC
  %8940 = add i64 %8939, 3
  store i64 %8940, i64* %PC
  %8941 = inttoptr i64 %8938 to i32*
  %8942 = load i32, i32* %8941
  %8943 = zext i32 %8942 to i64
  store i64 %8943, i64* %RAX, align 8, !tbaa !2428
  %8944 = load i64, i64* %RAX
  %8945 = load i64, i64* %PC
  %8946 = add i64 %8945, 3
  store i64 %8946, i64* %PC
  %8947 = trunc i64 %8944 to i32
  %8948 = add i32 1, %8947
  %8949 = zext i32 %8948 to i64
  store i64 %8949, i64* %RAX, align 8, !tbaa !2428
  %8950 = icmp ult i32 %8948, %8947
  %8951 = icmp ult i32 %8948, 1
  %8952 = or i1 %8950, %8951
  %8953 = zext i1 %8952 to i8
  %8954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8953, i8* %8954, align 1, !tbaa !2432
  %8955 = and i32 %8948, 255
  %8956 = call i32 @llvm.ctpop.i32(i32 %8955) #17
  %8957 = trunc i32 %8956 to i8
  %8958 = and i8 %8957, 1
  %8959 = xor i8 %8958, 1
  %8960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8959, i8* %8960, align 1, !tbaa !2446
  %8961 = xor i64 1, %8944
  %8962 = trunc i64 %8961 to i32
  %8963 = xor i32 %8962, %8948
  %8964 = lshr i32 %8963, 4
  %8965 = trunc i32 %8964 to i8
  %8966 = and i8 %8965, 1
  %8967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8966, i8* %8967, align 1, !tbaa !2447
  %8968 = icmp eq i32 %8948, 0
  %8969 = zext i1 %8968 to i8
  %8970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8969, i8* %8970, align 1, !tbaa !2448
  %8971 = lshr i32 %8948, 31
  %8972 = trunc i32 %8971 to i8
  %8973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8972, i8* %8973, align 1, !tbaa !2449
  %8974 = lshr i32 %8947, 31
  %8975 = xor i32 %8971, %8974
  %8976 = add nuw nsw i32 %8975, %8971
  %8977 = icmp eq i32 %8976, 2
  %8978 = zext i1 %8977 to i8
  %8979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8978, i8* %8979, align 1, !tbaa !2450
  %8980 = load i32, i32* %EAX
  %8981 = zext i32 %8980 to i64
  %8982 = load i64, i64* %PC
  %8983 = add i64 %8982, 3
  store i64 %8983, i64* %PC
  %8984 = shl i64 %8981, 32
  %8985 = ashr exact i64 %8984, 32
  store i64 %8985, i64* %RDX, align 8, !tbaa !2428
  %8986 = load i64, i64* %RCX
  %8987 = load i64, i64* %RDX
  %8988 = mul i64 %8987, 8
  %8989 = add i64 %8988, %8986
  %8990 = bitcast %union.vec128_t* %XMM0 to i8*
  %8991 = load i64, i64* %PC
  %8992 = add i64 %8991, 5
  store i64 %8992, i64* %PC
  %8993 = bitcast i8* %8990 to double*
  %8994 = load double, double* %8993, align 1
  %8995 = inttoptr i64 %8989 to double*
  store double %8994, double* %8995
  %8996 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8997 = load i64, i64* %RBP
  %8998 = sub i64 %8997, 136
  %8999 = load i64, i64* %PC
  %9000 = add i64 %8999, 8
  store i64 %9000, i64* %PC
  %9001 = inttoptr i64 %8998 to double*
  %9002 = load double, double* %9001
  %9003 = bitcast i8* %8996 to double*
  store double %9002, double* %9003, align 1, !tbaa !2452
  %9004 = getelementptr inbounds i8, i8* %8996, i64 8
  %9005 = bitcast i8* %9004 to double*
  store double 0.000000e+00, double* %9005, align 1, !tbaa !2452
  %9006 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9008 = load i64, i64* %RBP
  %9009 = sub i64 %9008, 176
  %9010 = load i64, i64* %PC
  %9011 = add i64 %9010, 8
  store i64 %9011, i64* %PC
  %9012 = bitcast i8* %9007 to double*
  %9013 = load double, double* %9012, align 1
  %9014 = getelementptr inbounds i8, i8* %9007, i64 8
  %9015 = bitcast i8* %9014 to i64*
  %9016 = load i64, i64* %9015, align 1
  %9017 = inttoptr i64 %9009 to double*
  %9018 = load double, double* %9017
  %9019 = fadd double %9013, %9018
  %9020 = bitcast i8* %9006 to double*
  store double %9019, double* %9020, align 1, !tbaa !2452
  %9021 = getelementptr inbounds i8, i8* %9006, i64 8
  %9022 = bitcast i8* %9021 to i64*
  store i64 %9016, i64* %9022, align 1, !tbaa !2452
  %9023 = load i64, i64* %RBP
  %9024 = sub i64 %9023, 120
  %9025 = bitcast %union.vec128_t* %XMM0 to i8*
  %9026 = load i64, i64* %PC
  %9027 = add i64 %9026, 5
  store i64 %9027, i64* %PC
  %9028 = bitcast i8* %9025 to double*
  %9029 = load double, double* %9028, align 1
  %9030 = inttoptr i64 %9024 to double*
  store double %9029, double* %9030
  %9031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9032 = load i64, i64* %RBP
  %9033 = sub i64 %9032, 144
  %9034 = load i64, i64* %PC
  %9035 = add i64 %9034, 8
  store i64 %9035, i64* %PC
  %9036 = inttoptr i64 %9033 to double*
  %9037 = load double, double* %9036
  %9038 = bitcast i8* %9031 to double*
  store double %9037, double* %9038, align 1, !tbaa !2452
  %9039 = getelementptr inbounds i8, i8* %9031, i64 8
  %9040 = bitcast i8* %9039 to double*
  store double 0.000000e+00, double* %9040, align 1, !tbaa !2452
  %9041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9042 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9043 = load i64, i64* %RBP
  %9044 = sub i64 %9043, 168
  %9045 = load i64, i64* %PC
  %9046 = add i64 %9045, 8
  store i64 %9046, i64* %PC
  %9047 = bitcast i8* %9042 to double*
  %9048 = load double, double* %9047, align 1
  %9049 = getelementptr inbounds i8, i8* %9042, i64 8
  %9050 = bitcast i8* %9049 to i64*
  %9051 = load i64, i64* %9050, align 1
  %9052 = inttoptr i64 %9044 to double*
  %9053 = load double, double* %9052
  %9054 = fsub double %9048, %9053
  %9055 = bitcast i8* %9041 to double*
  store double %9054, double* %9055, align 1, !tbaa !2452
  %9056 = getelementptr inbounds i8, i8* %9041, i64 8
  %9057 = bitcast i8* %9056 to i64*
  store i64 %9051, i64* %9057, align 1, !tbaa !2452
  %9058 = load i64, i64* %RBP
  %9059 = sub i64 %9058, 128
  %9060 = bitcast %union.vec128_t* %XMM0 to i8*
  %9061 = load i64, i64* %PC
  %9062 = add i64 %9061, 5
  store i64 %9062, i64* %PC
  %9063 = bitcast i8* %9060 to double*
  %9064 = load double, double* %9063, align 1
  %9065 = inttoptr i64 %9059 to double*
  store double %9064, double* %9065
  %9066 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9067 = load i64, i64* %RBP
  %9068 = sub i64 %9067, 104
  %9069 = load i64, i64* %PC
  %9070 = add i64 %9069, 5
  store i64 %9070, i64* %PC
  %9071 = inttoptr i64 %9068 to double*
  %9072 = load double, double* %9071
  %9073 = bitcast i8* %9066 to double*
  store double %9072, double* %9073, align 1, !tbaa !2452
  %9074 = getelementptr inbounds i8, i8* %9066, i64 8
  %9075 = bitcast i8* %9074 to double*
  store double 0.000000e+00, double* %9075, align 1, !tbaa !2452
  %9076 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9077 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9078 = load i64, i64* %RBP
  %9079 = sub i64 %9078, 120
  %9080 = load i64, i64* %PC
  %9081 = add i64 %9080, 5
  store i64 %9081, i64* %PC
  %9082 = bitcast i8* %9077 to double*
  %9083 = load double, double* %9082, align 1
  %9084 = getelementptr inbounds i8, i8* %9077, i64 8
  %9085 = bitcast i8* %9084 to i64*
  %9086 = load i64, i64* %9085, align 1
  %9087 = inttoptr i64 %9079 to double*
  %9088 = load double, double* %9087
  %9089 = fmul double %9083, %9088
  %9090 = bitcast i8* %9076 to double*
  store double %9089, double* %9090, align 1, !tbaa !2452
  %9091 = getelementptr inbounds i8, i8* %9076, i64 8
  %9092 = bitcast i8* %9091 to i64*
  store i64 %9086, i64* %9092, align 1, !tbaa !2452
  %9093 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9094 = load i64, i64* %RBP
  %9095 = sub i64 %9094, 112
  %9096 = load i64, i64* %PC
  %9097 = add i64 %9096, 5
  store i64 %9097, i64* %PC
  %9098 = inttoptr i64 %9095 to double*
  %9099 = load double, double* %9098
  %9100 = bitcast i8* %9093 to double*
  store double %9099, double* %9100, align 1, !tbaa !2452
  %9101 = getelementptr inbounds i8, i8* %9093, i64 8
  %9102 = bitcast i8* %9101 to double*
  store double 0.000000e+00, double* %9102, align 1, !tbaa !2452
  %9103 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9104 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9105 = load i64, i64* %RBP
  %9106 = sub i64 %9105, 128
  %9107 = load i64, i64* %PC
  %9108 = add i64 %9107, 5
  store i64 %9108, i64* %PC
  %9109 = bitcast i8* %9104 to double*
  %9110 = load double, double* %9109, align 1
  %9111 = getelementptr inbounds i8, i8* %9104, i64 8
  %9112 = bitcast i8* %9111 to i64*
  %9113 = load i64, i64* %9112, align 1
  %9114 = inttoptr i64 %9106 to double*
  %9115 = load double, double* %9114
  %9116 = fmul double %9110, %9115
  %9117 = bitcast i8* %9103 to double*
  store double %9116, double* %9117, align 1, !tbaa !2452
  %9118 = getelementptr inbounds i8, i8* %9103, i64 8
  %9119 = bitcast i8* %9118 to i64*
  store i64 %9113, i64* %9119, align 1, !tbaa !2452
  %9120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9121 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9122 = bitcast %union.vec128_t* %XMM1 to i8*
  %9123 = load i64, i64* %PC
  %9124 = add i64 %9123, 4
  store i64 %9124, i64* %PC
  %9125 = bitcast i8* %9121 to double*
  %9126 = load double, double* %9125, align 1
  %9127 = getelementptr inbounds i8, i8* %9121, i64 8
  %9128 = bitcast i8* %9127 to i64*
  %9129 = load i64, i64* %9128, align 1
  %9130 = bitcast i8* %9122 to double*
  %9131 = load double, double* %9130, align 1
  %9132 = fsub double %9126, %9131
  %9133 = bitcast i8* %9120 to double*
  store double %9132, double* %9133, align 1, !tbaa !2452
  %9134 = getelementptr inbounds i8, i8* %9120, i64 8
  %9135 = bitcast i8* %9134 to i64*
  store i64 %9129, i64* %9135, align 1, !tbaa !2452
  %9136 = load i64, i64* %RBP
  %9137 = sub i64 %9136, 16
  %9138 = load i64, i64* %PC
  %9139 = add i64 %9138, 4
  store i64 %9139, i64* %PC
  %9140 = inttoptr i64 %9137 to i64*
  %9141 = load i64, i64* %9140
  store i64 %9141, i64* %RCX, align 8, !tbaa !2428
  %9142 = load i64, i64* %RBP
  %9143 = sub i64 %9142, 40
  %9144 = load i64, i64* %PC
  %9145 = add i64 %9144, 4
  store i64 %9145, i64* %PC
  %9146 = inttoptr i64 %9143 to i32*
  %9147 = load i32, i32* %9146
  %9148 = sext i32 %9147 to i64
  store i64 %9148, i64* %RDX, align 8, !tbaa !2428
  %9149 = load i64, i64* %RCX
  %9150 = load i64, i64* %RDX
  %9151 = mul i64 %9150, 8
  %9152 = add i64 %9151, %9149
  %9153 = bitcast %union.vec128_t* %XMM0 to i8*
  %9154 = load i64, i64* %PC
  %9155 = add i64 %9154, 5
  store i64 %9155, i64* %PC
  %9156 = bitcast i8* %9153 to double*
  %9157 = load double, double* %9156, align 1
  %9158 = inttoptr i64 %9152 to double*
  store double %9157, double* %9158
  %9159 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9160 = load i64, i64* %RBP
  %9161 = sub i64 %9160, 104
  %9162 = load i64, i64* %PC
  %9163 = add i64 %9162, 5
  store i64 %9163, i64* %PC
  %9164 = inttoptr i64 %9161 to double*
  %9165 = load double, double* %9164
  %9166 = bitcast i8* %9159 to double*
  store double %9165, double* %9166, align 1, !tbaa !2452
  %9167 = getelementptr inbounds i8, i8* %9159, i64 8
  %9168 = bitcast i8* %9167 to double*
  store double 0.000000e+00, double* %9168, align 1, !tbaa !2452
  %9169 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9170 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9171 = load i64, i64* %RBP
  %9172 = sub i64 %9171, 128
  %9173 = load i64, i64* %PC
  %9174 = add i64 %9173, 5
  store i64 %9174, i64* %PC
  %9175 = bitcast i8* %9170 to double*
  %9176 = load double, double* %9175, align 1
  %9177 = getelementptr inbounds i8, i8* %9170, i64 8
  %9178 = bitcast i8* %9177 to i64*
  %9179 = load i64, i64* %9178, align 1
  %9180 = inttoptr i64 %9172 to double*
  %9181 = load double, double* %9180
  %9182 = fmul double %9176, %9181
  %9183 = bitcast i8* %9169 to double*
  store double %9182, double* %9183, align 1, !tbaa !2452
  %9184 = getelementptr inbounds i8, i8* %9169, i64 8
  %9185 = bitcast i8* %9184 to i64*
  store i64 %9179, i64* %9185, align 1, !tbaa !2452
  %9186 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9187 = load i64, i64* %RBP
  %9188 = sub i64 %9187, 112
  %9189 = load i64, i64* %PC
  %9190 = add i64 %9189, 5
  store i64 %9190, i64* %PC
  %9191 = inttoptr i64 %9188 to double*
  %9192 = load double, double* %9191
  %9193 = bitcast i8* %9186 to double*
  store double %9192, double* %9193, align 1, !tbaa !2452
  %9194 = getelementptr inbounds i8, i8* %9186, i64 8
  %9195 = bitcast i8* %9194 to double*
  store double 0.000000e+00, double* %9195, align 1, !tbaa !2452
  %9196 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9197 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9198 = load i64, i64* %RBP
  %9199 = sub i64 %9198, 120
  %9200 = load i64, i64* %PC
  %9201 = add i64 %9200, 5
  store i64 %9201, i64* %PC
  %9202 = bitcast i8* %9197 to double*
  %9203 = load double, double* %9202, align 1
  %9204 = getelementptr inbounds i8, i8* %9197, i64 8
  %9205 = bitcast i8* %9204 to i64*
  %9206 = load i64, i64* %9205, align 1
  %9207 = inttoptr i64 %9199 to double*
  %9208 = load double, double* %9207
  %9209 = fmul double %9203, %9208
  %9210 = bitcast i8* %9196 to double*
  store double %9209, double* %9210, align 1, !tbaa !2452
  %9211 = getelementptr inbounds i8, i8* %9196, i64 8
  %9212 = bitcast i8* %9211 to i64*
  store i64 %9206, i64* %9212, align 1, !tbaa !2452
  %9213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9215 = bitcast %union.vec128_t* %XMM1 to i8*
  %9216 = load i64, i64* %PC
  %9217 = add i64 %9216, 4
  store i64 %9217, i64* %PC
  %9218 = bitcast i8* %9214 to double*
  %9219 = load double, double* %9218, align 1
  %9220 = getelementptr inbounds i8, i8* %9214, i64 8
  %9221 = bitcast i8* %9220 to i64*
  %9222 = load i64, i64* %9221, align 1
  %9223 = bitcast i8* %9215 to double*
  %9224 = load double, double* %9223, align 1
  %9225 = fadd double %9219, %9224
  %9226 = bitcast i8* %9213 to double*
  store double %9225, double* %9226, align 1, !tbaa !2452
  %9227 = getelementptr inbounds i8, i8* %9213, i64 8
  %9228 = bitcast i8* %9227 to i64*
  store i64 %9222, i64* %9228, align 1, !tbaa !2452
  %9229 = load i64, i64* %RBP
  %9230 = sub i64 %9229, 16
  %9231 = load i64, i64* %PC
  %9232 = add i64 %9231, 4
  store i64 %9232, i64* %PC
  %9233 = inttoptr i64 %9230 to i64*
  %9234 = load i64, i64* %9233
  store i64 %9234, i64* %RCX, align 8, !tbaa !2428
  %9235 = load i64, i64* %RBP
  %9236 = sub i64 %9235, 40
  %9237 = load i64, i64* %PC
  %9238 = add i64 %9237, 3
  store i64 %9238, i64* %PC
  %9239 = inttoptr i64 %9236 to i32*
  %9240 = load i32, i32* %9239
  %9241 = zext i32 %9240 to i64
  store i64 %9241, i64* %RAX, align 8, !tbaa !2428
  %9242 = load i64, i64* %RAX
  %9243 = load i64, i64* %PC
  %9244 = add i64 %9243, 3
  store i64 %9244, i64* %PC
  %9245 = trunc i64 %9242 to i32
  %9246 = add i32 1, %9245
  %9247 = zext i32 %9246 to i64
  store i64 %9247, i64* %RAX, align 8, !tbaa !2428
  %9248 = icmp ult i32 %9246, %9245
  %9249 = icmp ult i32 %9246, 1
  %9250 = or i1 %9248, %9249
  %9251 = zext i1 %9250 to i8
  %9252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9251, i8* %9252, align 1, !tbaa !2432
  %9253 = and i32 %9246, 255
  %9254 = call i32 @llvm.ctpop.i32(i32 %9253) #17
  %9255 = trunc i32 %9254 to i8
  %9256 = and i8 %9255, 1
  %9257 = xor i8 %9256, 1
  %9258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9257, i8* %9258, align 1, !tbaa !2446
  %9259 = xor i64 1, %9242
  %9260 = trunc i64 %9259 to i32
  %9261 = xor i32 %9260, %9246
  %9262 = lshr i32 %9261, 4
  %9263 = trunc i32 %9262 to i8
  %9264 = and i8 %9263, 1
  %9265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9264, i8* %9265, align 1, !tbaa !2447
  %9266 = icmp eq i32 %9246, 0
  %9267 = zext i1 %9266 to i8
  %9268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9267, i8* %9268, align 1, !tbaa !2448
  %9269 = lshr i32 %9246, 31
  %9270 = trunc i32 %9269 to i8
  %9271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9270, i8* %9271, align 1, !tbaa !2449
  %9272 = lshr i32 %9245, 31
  %9273 = xor i32 %9269, %9272
  %9274 = add nuw nsw i32 %9273, %9269
  %9275 = icmp eq i32 %9274, 2
  %9276 = zext i1 %9275 to i8
  %9277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9276, i8* %9277, align 1, !tbaa !2450
  %9278 = load i32, i32* %EAX
  %9279 = zext i32 %9278 to i64
  %9280 = load i64, i64* %PC
  %9281 = add i64 %9280, 3
  store i64 %9281, i64* %PC
  %9282 = shl i64 %9279, 32
  %9283 = ashr exact i64 %9282, 32
  store i64 %9283, i64* %RDX, align 8, !tbaa !2428
  %9284 = load i64, i64* %RCX
  %9285 = load i64, i64* %RDX
  %9286 = mul i64 %9285, 8
  %9287 = add i64 %9286, %9284
  %9288 = bitcast %union.vec128_t* %XMM0 to i8*
  %9289 = load i64, i64* %PC
  %9290 = add i64 %9289, 5
  store i64 %9290, i64* %PC
  %9291 = bitcast i8* %9288 to double*
  %9292 = load double, double* %9291, align 1
  %9293 = inttoptr i64 %9287 to double*
  store double %9292, double* %9293
  %9294 = load i64, i64* %RBP
  %9295 = sub i64 %9294, 28
  %9296 = load i64, i64* %PC
  %9297 = add i64 %9296, 3
  store i64 %9297, i64* %PC
  %9298 = inttoptr i64 %9295 to i32*
  %9299 = load i32, i32* %9298
  %9300 = zext i32 %9299 to i64
  store i64 %9300, i64* %RAX, align 8, !tbaa !2428
  %9301 = load i64, i64* %RAX
  %9302 = load i64, i64* %PC
  %9303 = add i64 %9302, 3
  store i64 %9303, i64* %PC
  %9304 = trunc i64 %9301 to i32
  %9305 = add i32 2, %9304
  %9306 = zext i32 %9305 to i64
  store i64 %9306, i64* %RAX, align 8, !tbaa !2428
  %9307 = icmp ult i32 %9305, %9304
  %9308 = icmp ult i32 %9305, 2
  %9309 = or i1 %9307, %9308
  %9310 = zext i1 %9309 to i8
  %9311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9310, i8* %9311, align 1, !tbaa !2432
  %9312 = and i32 %9305, 255
  %9313 = call i32 @llvm.ctpop.i32(i32 %9312) #17
  %9314 = trunc i32 %9313 to i8
  %9315 = and i8 %9314, 1
  %9316 = xor i8 %9315, 1
  %9317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9316, i8* %9317, align 1, !tbaa !2446
  %9318 = xor i64 2, %9301
  %9319 = trunc i64 %9318 to i32
  %9320 = xor i32 %9319, %9305
  %9321 = lshr i32 %9320, 4
  %9322 = trunc i32 %9321 to i8
  %9323 = and i8 %9322, 1
  %9324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9323, i8* %9324, align 1, !tbaa !2447
  %9325 = icmp eq i32 %9305, 0
  %9326 = zext i1 %9325 to i8
  %9327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9326, i8* %9327, align 1, !tbaa !2448
  %9328 = lshr i32 %9305, 31
  %9329 = trunc i32 %9328 to i8
  %9330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9329, i8* %9330, align 1, !tbaa !2449
  %9331 = lshr i32 %9304, 31
  %9332 = xor i32 %9328, %9331
  %9333 = add nuw nsw i32 %9332, %9328
  %9334 = icmp eq i32 %9333, 2
  %9335 = zext i1 %9334 to i8
  %9336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9335, i8* %9336, align 1, !tbaa !2450
  %9337 = load i64, i64* %RBP
  %9338 = sub i64 %9337, 28
  %9339 = load i32, i32* %EAX
  %9340 = zext i32 %9339 to i64
  %9341 = load i64, i64* %PC
  %9342 = add i64 %9341, 3
  store i64 %9342, i64* %PC
  %9343 = inttoptr i64 %9338 to i32*
  store i32 %9339, i32* %9343
  %9344 = load i64, i64* %PC
  %9345 = sub i64 %9344, 781
  %9346 = load i64, i64* %PC
  %9347 = add i64 %9346, 5
  store i64 %9347, i64* %PC
  %9348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9345, i64* %9348, align 8, !tbaa !2428
  br label %block_403940

block_4035c1:                                     ; preds = %block_4035ad, %block_4035d2
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_4035ad ], [ %MEMORY.3, %block_4035d2 ]
  %9349 = load i64, i64* %RBP
  %9350 = sub i64 %9349, 28
  %9351 = load i64, i64* %PC
  %9352 = add i64 %9351, 3
  store i64 %9352, i64* %PC
  %9353 = inttoptr i64 %9350 to i32*
  %9354 = load i32, i32* %9353
  %9355 = zext i32 %9354 to i64
  store i64 %9355, i64* %RAX, align 8, !tbaa !2428
  %9356 = load i64, i64* %RBP
  %9357 = sub i64 %9356, 8
  %9358 = load i64, i64* %PC
  %9359 = add i64 %9358, 3
  store i64 %9359, i64* %PC
  %9360 = inttoptr i64 %9357 to i32*
  %9361 = load i32, i32* %9360
  %9362 = zext i32 %9361 to i64
  store i64 %9362, i64* %RCX, align 8, !tbaa !2428
  %9363 = load i64, i64* %RCX
  %9364 = load i64, i64* %RBP
  %9365 = sub i64 %9364, 56
  %9366 = load i64, i64* %PC
  %9367 = add i64 %9366, 3
  store i64 %9367, i64* %PC
  %9368 = trunc i64 %9363 to i32
  %9369 = inttoptr i64 %9365 to i32*
  %9370 = load i32, i32* %9369
  %9371 = add i32 %9370, %9368
  %9372 = zext i32 %9371 to i64
  store i64 %9372, i64* %RCX, align 8, !tbaa !2428
  %9373 = icmp ult i32 %9371, %9368
  %9374 = icmp ult i32 %9371, %9370
  %9375 = or i1 %9373, %9374
  %9376 = zext i1 %9375 to i8
  %9377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9376, i8* %9377, align 1, !tbaa !2432
  %9378 = and i32 %9371, 255
  %9379 = call i32 @llvm.ctpop.i32(i32 %9378) #17
  %9380 = trunc i32 %9379 to i8
  %9381 = and i8 %9380, 1
  %9382 = xor i8 %9381, 1
  %9383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9382, i8* %9383, align 1, !tbaa !2446
  %9384 = xor i32 %9370, %9368
  %9385 = xor i32 %9384, %9371
  %9386 = lshr i32 %9385, 4
  %9387 = trunc i32 %9386 to i8
  %9388 = and i8 %9387, 1
  %9389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9388, i8* %9389, align 1, !tbaa !2447
  %9390 = icmp eq i32 %9371, 0
  %9391 = zext i1 %9390 to i8
  %9392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9391, i8* %9392, align 1, !tbaa !2448
  %9393 = lshr i32 %9371, 31
  %9394 = trunc i32 %9393 to i8
  %9395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9394, i8* %9395, align 1, !tbaa !2449
  %9396 = lshr i32 %9368, 31
  %9397 = lshr i32 %9370, 31
  %9398 = xor i32 %9393, %9396
  %9399 = xor i32 %9393, %9397
  %9400 = add nuw nsw i32 %9398, %9399
  %9401 = icmp eq i32 %9400, 2
  %9402 = zext i1 %9401 to i8
  %9403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9402, i8* %9403, align 1, !tbaa !2450
  %9404 = load i32, i32* %EAX
  %9405 = zext i32 %9404 to i64
  %9406 = load i32, i32* %ECX
  %9407 = zext i32 %9406 to i64
  %9408 = load i64, i64* %PC
  %9409 = add i64 %9408, 2
  store i64 %9409, i64* %PC
  %9410 = sub i32 %9404, %9406
  %9411 = icmp ult i32 %9404, %9406
  %9412 = zext i1 %9411 to i8
  %9413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9412, i8* %9413, align 1, !tbaa !2432
  %9414 = and i32 %9410, 255
  %9415 = call i32 @llvm.ctpop.i32(i32 %9414) #17
  %9416 = trunc i32 %9415 to i8
  %9417 = and i8 %9416, 1
  %9418 = xor i8 %9417, 1
  %9419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9418, i8* %9419, align 1, !tbaa !2446
  %9420 = xor i64 %9407, %9405
  %9421 = trunc i64 %9420 to i32
  %9422 = xor i32 %9421, %9410
  %9423 = lshr i32 %9422, 4
  %9424 = trunc i32 %9423 to i8
  %9425 = and i8 %9424, 1
  %9426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9425, i8* %9426, align 1, !tbaa !2447
  %9427 = icmp eq i32 %9410, 0
  %9428 = zext i1 %9427 to i8
  %9429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9428, i8* %9429, align 1, !tbaa !2448
  %9430 = lshr i32 %9410, 31
  %9431 = trunc i32 %9430 to i8
  %9432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9431, i8* %9432, align 1, !tbaa !2449
  %9433 = lshr i32 %9404, 31
  %9434 = lshr i32 %9406, 31
  %9435 = xor i32 %9434, %9433
  %9436 = xor i32 %9430, %9433
  %9437 = add nuw nsw i32 %9436, %9435
  %9438 = icmp eq i32 %9437, 2
  %9439 = zext i1 %9438 to i8
  %9440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9439, i8* %9440, align 1, !tbaa !2450
  %9441 = load i64, i64* %PC
  %9442 = add i64 %9441, 689
  %9443 = load i64, i64* %PC
  %9444 = add i64 %9443, 6
  %9445 = load i64, i64* %PC
  %9446 = add i64 %9445, 6
  store i64 %9446, i64* %PC
  %9447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9448 = load i8, i8* %9447, align 1, !tbaa !2449
  %9449 = icmp ne i8 %9448, 0
  %9450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9451 = load i8, i8* %9450, align 1, !tbaa !2450
  %9452 = icmp ne i8 %9451, 0
  %9453 = xor i1 %9449, %9452
  %9454 = xor i1 %9453, true
  %9455 = zext i1 %9454 to i8
  store i8 %9455, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9457 = select i1 %9453, i64 %9444, i64 %9442
  store i64 %9457, i64* %9456, align 8, !tbaa !2428
  %9458 = load i8, i8* %BRANCH_TAKEN
  %9459 = icmp eq i8 %9458, 1
  %9460 = load i64, i64* %RBP
  br i1 %9459, label %block_40387d, label %block_4035d2

block_403940:                                     ; preds = %block_403951, %block_40389f
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_40389f ], [ %MEMORY.4, %block_403951 ]
  %9461 = load i64, i64* %RBP
  %9462 = sub i64 %9461, 28
  %9463 = load i64, i64* %PC
  %9464 = add i64 %9463, 3
  store i64 %9464, i64* %PC
  %9465 = inttoptr i64 %9462 to i32*
  %9466 = load i32, i32* %9465
  %9467 = zext i32 %9466 to i64
  store i64 %9467, i64* %RAX, align 8, !tbaa !2428
  %9468 = load i64, i64* %RBP
  %9469 = sub i64 %9468, 8
  %9470 = load i64, i64* %PC
  %9471 = add i64 %9470, 3
  store i64 %9471, i64* %PC
  %9472 = inttoptr i64 %9469 to i32*
  %9473 = load i32, i32* %9472
  %9474 = zext i32 %9473 to i64
  store i64 %9474, i64* %RCX, align 8, !tbaa !2428
  %9475 = load i64, i64* %RCX
  %9476 = load i64, i64* %RBP
  %9477 = sub i64 %9476, 44
  %9478 = load i64, i64* %PC
  %9479 = add i64 %9478, 3
  store i64 %9479, i64* %PC
  %9480 = trunc i64 %9475 to i32
  %9481 = inttoptr i64 %9477 to i32*
  %9482 = load i32, i32* %9481
  %9483 = add i32 %9482, %9480
  %9484 = zext i32 %9483 to i64
  store i64 %9484, i64* %RCX, align 8, !tbaa !2428
  %9485 = icmp ult i32 %9483, %9480
  %9486 = icmp ult i32 %9483, %9482
  %9487 = or i1 %9485, %9486
  %9488 = zext i1 %9487 to i8
  %9489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9488, i8* %9489, align 1, !tbaa !2432
  %9490 = and i32 %9483, 255
  %9491 = call i32 @llvm.ctpop.i32(i32 %9490) #17
  %9492 = trunc i32 %9491 to i8
  %9493 = and i8 %9492, 1
  %9494 = xor i8 %9493, 1
  %9495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9494, i8* %9495, align 1, !tbaa !2446
  %9496 = xor i32 %9482, %9480
  %9497 = xor i32 %9496, %9483
  %9498 = lshr i32 %9497, 4
  %9499 = trunc i32 %9498 to i8
  %9500 = and i8 %9499, 1
  %9501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9500, i8* %9501, align 1, !tbaa !2447
  %9502 = icmp eq i32 %9483, 0
  %9503 = zext i1 %9502 to i8
  %9504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9503, i8* %9504, align 1, !tbaa !2448
  %9505 = lshr i32 %9483, 31
  %9506 = trunc i32 %9505 to i8
  %9507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9506, i8* %9507, align 1, !tbaa !2449
  %9508 = lshr i32 %9480, 31
  %9509 = lshr i32 %9482, 31
  %9510 = xor i32 %9505, %9508
  %9511 = xor i32 %9505, %9509
  %9512 = add nuw nsw i32 %9510, %9511
  %9513 = icmp eq i32 %9512, 2
  %9514 = zext i1 %9513 to i8
  %9515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9514, i8* %9515, align 1, !tbaa !2450
  %9516 = load i32, i32* %EAX
  %9517 = zext i32 %9516 to i64
  %9518 = load i32, i32* %ECX
  %9519 = zext i32 %9518 to i64
  %9520 = load i64, i64* %PC
  %9521 = add i64 %9520, 2
  store i64 %9521, i64* %PC
  %9522 = sub i32 %9516, %9518
  %9523 = icmp ult i32 %9516, %9518
  %9524 = zext i1 %9523 to i8
  %9525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9524, i8* %9525, align 1, !tbaa !2432
  %9526 = and i32 %9522, 255
  %9527 = call i32 @llvm.ctpop.i32(i32 %9526) #17
  %9528 = trunc i32 %9527 to i8
  %9529 = and i8 %9528, 1
  %9530 = xor i8 %9529, 1
  %9531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9530, i8* %9531, align 1, !tbaa !2446
  %9532 = xor i64 %9519, %9517
  %9533 = trunc i64 %9532 to i32
  %9534 = xor i32 %9533, %9522
  %9535 = lshr i32 %9534, 4
  %9536 = trunc i32 %9535 to i8
  %9537 = and i8 %9536, 1
  %9538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9537, i8* %9538, align 1, !tbaa !2447
  %9539 = icmp eq i32 %9522, 0
  %9540 = zext i1 %9539 to i8
  %9541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9540, i8* %9541, align 1, !tbaa !2448
  %9542 = lshr i32 %9522, 31
  %9543 = trunc i32 %9542 to i8
  %9544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9543, i8* %9544, align 1, !tbaa !2449
  %9545 = lshr i32 %9516, 31
  %9546 = lshr i32 %9518, 31
  %9547 = xor i32 %9546, %9545
  %9548 = xor i32 %9542, %9545
  %9549 = add nuw nsw i32 %9548, %9547
  %9550 = icmp eq i32 %9549, 2
  %9551 = zext i1 %9550 to i8
  %9552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9551, i8* %9552, align 1, !tbaa !2450
  %9553 = load i64, i64* %PC
  %9554 = add i64 %9553, 775
  %9555 = load i64, i64* %PC
  %9556 = add i64 %9555, 6
  %9557 = load i64, i64* %PC
  %9558 = add i64 %9557, 6
  store i64 %9558, i64* %PC
  %9559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9560 = load i8, i8* %9559, align 1, !tbaa !2449
  %9561 = icmp ne i8 %9560, 0
  %9562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9563 = load i8, i8* %9562, align 1, !tbaa !2450
  %9564 = icmp ne i8 %9563, 0
  %9565 = xor i1 %9561, %9564
  %9566 = xor i1 %9565, true
  %9567 = zext i1 %9566 to i8
  store i8 %9567, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9569 = select i1 %9565, i64 %9556, i64 %9554
  store i64 %9569, i64* %9568, align 8, !tbaa !2428
  %9570 = load i8, i8* %BRANCH_TAKEN
  %9571 = icmp eq i8 %9570, 1
  br i1 %9571, label %block_403c52, label %block_403951
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007a0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %37 = icmp ult i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #17
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_4007c8, label %block_4007b1

block_4007bb:                                     ; preds = %block_4007b1
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4196298, label %block_4007ca
    i64 4196291, label %block_4007c3
  ]

block_4007b1:                                     ; preds = %block_4007a0
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #17
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2447
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2448
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_4007c8, label %block_4007bb

block_4007c8:                                     ; preds = %block_4007c3, %block_4007b1, %block_4007a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4007a0 ], [ %2, %block_4007b1 ], [ %2, %block_4007c3 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007ca:                                     ; preds = %block_4007bb
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_4007d0_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_4007c3:                                     ; preds = %block_4007bb
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_4007c8

; <label>:163:                                    ; preds = %block_4007bb
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400840_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400840;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400840_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400840_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400810___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400810___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400810___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6050b8_cos(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @cos(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6050d8_sin(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @sin(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6050f8_atan(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @atan(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_404090___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404090;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_404090___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404090___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_404020___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404020;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_404020___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404020___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400850;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400850_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_605120___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006f0_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6050e8_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_605128_memcpy(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_605110_memset(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006e0_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605140_sqrt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #16 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1
  store i64 0, i64* %SS_BASE, align 8
  store i64 0, i64* %ES_BASE, align 8
  store i64 0, i64* %DS_BASE, align 8
  store i64 0, i64* %CS_BASE, align 8
  store %struct.State* %0, %struct.State** %STATE, align 8
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0
  %PC = bitcast %union.anon* %6 to i64*
  store i64 %1, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0
  %10 = bitcast %union.anon* %9 to %struct.anon.2*
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0
  %14 = bitcast %union.anon* %13 to %struct.anon.2*
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %18 = bitcast %union.anon* %17 to %struct.anon.2*
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %22 = bitcast %union.anon* %21 to %struct.anon.2*
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %26 = bitcast %union.anon* %25 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %30 = bitcast %union.anon* %29 to %struct.anon.2*
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %34 = bitcast %union.anon* %33 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %38 = bitcast %union.anon* %37 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %42 = bitcast %union.anon* %41 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %46 = bitcast %union.anon* %45 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0
  %50 = bitcast %union.anon* %49 to %struct.anon.2*
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0
  %54 = bitcast %union.anon* %53 to %struct.anon.2*
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %58 = bitcast %union.anon* %57 to %struct.anon.2*
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0
  %62 = bitcast %union.anon* %61 to %struct.anon.2*
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0
  %66 = bitcast %union.anon* %65 to %struct.anon.2*
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %70 = bitcast %union.anon* %69 to %struct.anon.2*
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0
  %74 = bitcast %union.anon* %73 to %struct.anon.2*
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0
  %78 = bitcast %union.anon* %77 to %struct.anon.2*
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0
  %82 = bitcast %union.anon* %81 to %struct.anon.2*
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0
  %86 = bitcast %union.anon* %85 to %struct.anon.2*
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0
  %AX = bitcast %union.anon* %89 to i16*
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0
  %BX = bitcast %union.anon* %92 to i16*
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0
  %CX = bitcast %union.anon* %95 to i16*
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0
  %DX = bitcast %union.anon* %98 to i16*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0
  %SI = bitcast %union.anon* %101 to i16*
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0
  %DI = bitcast %union.anon* %104 to i16*
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0
  %SP = bitcast %union.anon* %107 to i16*
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0
  %BP = bitcast %union.anon* %110 to i16*
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0
  %R8W = bitcast %union.anon* %113 to i16*
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0
  %R9W = bitcast %union.anon* %116 to i16*
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0
  %R10W = bitcast %union.anon* %119 to i16*
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0
  %R11W = bitcast %union.anon* %122 to i16*
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0
  %R12W = bitcast %union.anon* %125 to i16*
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0
  %R13W = bitcast %union.anon* %128 to i16*
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0
  %R14W = bitcast %union.anon* %131 to i16*
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0
  %R15W = bitcast %union.anon* %134 to i16*
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0
  %IP = bitcast %union.anon* %137 to i16*
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0
  %EAX = bitcast %union.anon* %140 to i32*
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0
  %EBX = bitcast %union.anon* %143 to i32*
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0
  %ECX = bitcast %union.anon* %146 to i32*
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0
  %EDX = bitcast %union.anon* %149 to i32*
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0
  %ESI = bitcast %union.anon* %152 to i32*
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0
  %EDI = bitcast %union.anon* %155 to i32*
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0
  %ESP = bitcast %union.anon* %158 to i32*
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0
  %EBP = bitcast %union.anon* %161 to i32*
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0
  %EIP = bitcast %union.anon* %164 to i32*
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0
  %R8D = bitcast %union.anon* %167 to i32*
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0
  %R9D = bitcast %union.anon* %170 to i32*
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0
  %R10D = bitcast %union.anon* %173 to i32*
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0
  %R11D = bitcast %union.anon* %176 to i32*
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0
  %R12D = bitcast %union.anon* %179 to i32*
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0
  %R13D = bitcast %union.anon* %182 to i32*
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0
  %R14D = bitcast %union.anon* %185 to i32*
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0
  %R15D = bitcast %union.anon* %188 to i32*
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0
  %RAX = bitcast %union.anon* %191 to i64*
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0
  %RBX = bitcast %union.anon* %194 to i64*
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0
  %RCX = bitcast %union.anon* %197 to i64*
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0
  %RDX = bitcast %union.anon* %200 to i64*
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0
  %RSI = bitcast %union.anon* %203 to i64*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0
  %RDI = bitcast %union.anon* %206 to i64*
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0
  %RSP = bitcast %union.anon* %209 to i64*
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0
  %RBP = bitcast %union.anon* %212 to i64*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0
  %R8 = bitcast %union.anon* %215 to i64*
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0
  %R9 = bitcast %union.anon* %218 to i64*
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0
  %R10 = bitcast %union.anon* %221 to i64*
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0
  %R11 = bitcast %union.anon* %224 to i64*
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0
  %R12 = bitcast %union.anon* %227 to i64*
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0
  %R13 = bitcast %union.anon* %230 to i64*
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0
  %R14 = bitcast %union.anon* %233 to i64*
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0
  %R15 = bitcast %union.anon* %236 to i64*
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0
  %RIP = bitcast %union.anon* %239 to i64*
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1
  %SS = bitcast %union.SegmentSelector* %241 to i16*
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3
  %ES = bitcast %union.SegmentSelector* %243 to i16*
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5
  %GS = bitcast %union.SegmentSelector* %245 to i16*
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7
  %FS = bitcast %union.SegmentSelector* %247 to i16*
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9
  %DS = bitcast %union.SegmentSelector* %249 to i16*
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11
  %CS = bitcast %union.SegmentSelector* %251 to i16*
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0
  %GS_BASE = bitcast %union.anon* %254 to i64*
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0
  %FS_BASE = bitcast %union.anon* %257 to i64*
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7
  store i64* @DR0, i64** %_DR0, align 8
  store i64* @DR1, i64** %_DR1, align 8
  store i64* @DR2, i64** %_DR2, align 8
  store i64* @DR3, i64** %_DR3, align 8
  store i64* @DR4, i64** %_DR4, align 8
  store i64* @DR5, i64** %_DR5, align 8
  store i64* @DR6, i64** %_DR6, align 8
  store i64* @DR7, i64** %_DR7, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8
  %401 = bitcast %"class.std::bitset"* %YMM0 to double*
  %402 = load double, double* %401
  %403 = load i64, i64* %RSP
  %404 = load %struct.Memory*, %struct.Memory** %MEMORY
  %405 = inttoptr i64 %403 to i64*
  %406 = load i64, i64* %405
  store i64 %406, i64* %PC
  %407 = add i64 %403, 8
  store i64 %407, i64* %RSP
  %408 = call double @sqrt(double %402)
  store %"class.std::bitset" zeroinitializer, %"class.std::bitset"* %YMM0
  %409 = bitcast %"class.std::bitset"* %YMM0 to double*
  store double %408, double* %409
  %410 = load %struct.Memory*, %struct.Memory** %MEMORY
  ret %struct.Memory* %410
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_6050d0_memalign(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @memalign to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4006c0_abort(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @abort to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @putdata() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400fe0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @putdata_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400fe0_putdata(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @cdft() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401060;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @cdft_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401060_cdft(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @errorcheck() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401100;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @errorcheck_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401100_errorcheck(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404094;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404094__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @get_time() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @get_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400e30_get_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400688;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400688__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @makewt() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @makewt_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400e70_makewt(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_404020___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_404090___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind }
attributes #18 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2458}
!2456 = distinct !{!2456, !2457, !"ext_6050b8_cos: argument 0"}
!2457 = distinct !{!2457, !"ext_6050b8_cos"}
!2458 = distinct !{!2458, !2457, !"ext_6050b8_cos: argument 1"}
!2459 = !{!2456}
!2460 = !{!2458}
!2461 = !{!2462, !2464}
!2462 = distinct !{!2462, !2463, !"ext_6050d8_sin: argument 0"}
!2463 = distinct !{!2463, !"ext_6050d8_sin"}
!2464 = distinct !{!2464, !2463, !"ext_6050d8_sin: argument 1"}
!2465 = !{!2462}
!2466 = !{!2464}
!2467 = !{!2468, !2470}
!2468 = distinct !{!2468, !2469, !"ext_6050f8_atan: argument 0"}
!2469 = distinct !{!2469, !"ext_6050f8_atan"}
!2470 = distinct !{!2470, !2469, !"ext_6050f8_atan: argument 1"}
!2471 = !{!2468}
!2472 = !{!2470}
!2473 = !{!2474, !2476}
!2474 = distinct !{!2474, !2475, !"ext_6050b8_cos: argument 0"}
!2475 = distinct !{!2475, !"ext_6050b8_cos"}
!2476 = distinct !{!2476, !2475, !"ext_6050b8_cos: argument 1"}
!2477 = !{!2474}
!2478 = !{!2476}
!2479 = !{!2480, !2480, i64 0}
!2480 = !{!"float", !2430, i64 0}
!2481 = !{!2482, !2484}
!2482 = distinct !{!2482, !2483, !"ext_605140_sqrt: argument 0"}
!2483 = distinct !{!2483, !"ext_605140_sqrt"}
!2484 = distinct !{!2484, !2483, !"ext_605140_sqrt: argument 1"}
!2485 = !{!2482}
!2486 = !{!2484}
